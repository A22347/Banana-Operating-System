
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 2f 02 c0       	mov    eax,0xc0022fc4
c0000025:	3d c4 2f 02 c0       	cmp    eax,0xc0022fc4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 2f 02 c0       	push   0xc0022fc4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 2f 02 c0       	mov    eax,0xc0022fc4
c0000051:	2d c4 2f 02 c0       	sub    eax,0xc0022fc4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 2f 02 c0       	push   0xc0022fc4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 0c f8 01 c0       	mov    ebx,0xc001f80c
c0000097:	81 eb 08 f8 01 c0    	sub    ebx,0xc001f808
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 08 f8 01 c0       	mov    esi,0xc001f808
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 2f 02 c0       	push   0xc0022fc4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 c4 2f 02 c0       	push   0xc0022fc4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 57 4a 01 00       	call   c0014d04 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 35 4a 01 00       	call   c0014d04 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 42 4f 01 00       	call   c0015230 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 01 56 01 00       	call   c00158f8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 7d 08 01 00       	jmp    c0010bfc <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 f8 01 c0 02 	test   BYTE PTR [edx-0x3ffe07e0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 f8 01 c0 01 	test   BYTE PTR [edx-0x3ffe07e0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 f8 01 c0 08 	test   BYTE PTR [edx-0x3ffe07e0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 f8 01 c0 04 	test   BYTE PTR [ecx-0x3ffe07e0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 f8 01 c0 01 	test   BYTE PTR [edx-0x3ffe07e0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 24 f9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe06dc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 fe 70 01 00       	jmp    c0018ea0 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 28 71 01 00       	jmp    c0018ee0 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 49 71 01 00       	jmp    c0018f20 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 80 fa 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0580]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 80 fa 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0580]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba e0 1f 02 c0       	mov    edx,0xc0021fe0
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 3c f9 01 c0       	mov    edx,0xc001f93c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 42 f9 01 c0       	mov    eax,0xc001f942
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 00 fa 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0600]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 4b f9 01 c0       	mov    eax,0xc001f94b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 80 fa 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0580]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 d0 f9 01 c0       	mov    eax,0xc001f9d0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb c0 f9 01 c0       	mov    ebx,0xc001f9c0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 a0 f9 01 c0       	mov    eax,0xc001f9a0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 b0 f9 01 c0       	mov    eax,0xc001f9b0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 52 f9 01 c0       	mov    edx,0xc001f952
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 5e f9 01 c0       	mov    edx,0xc001f95e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 72 f9 01 c0       	mov    edx,0xc001f972
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c a0 fd 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fda0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 a0 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fda0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 a0 fb 01 c0       	mov    eax,0xc001fba0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 e0 fa 01 c0       	mov    eax,0xc001fae0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 a0 fa 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0560]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 a0 fe 01 c0       	push   0xc001fea0
c000611b:	e8 1c 37 01 00       	call   c001983c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ae fe 01 c0       	push   0xc001feae
c0006153:	e8 e4 36 01 00       	call   c001983c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 4d 36 01 00       	call   c00197e0 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 bd fe 01 c0       	push   0xc001febd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 c0 fe 01 c0       	push   0xc001fec0
c0006812:	e8 25 30 01 00       	call   c001983c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 39 30 01 00       	call   c0019858 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 c5 fe 01 c0 	mov    DWORD PTR [esp],0xc001fec5
c000682c:	e8 0b 30 01 00       	call   c001983c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 1b 30 01 00       	call   c0019858 <iso_kprintfd>
c000683d:	c7 04 24 cb fe 01 c0 	mov    DWORD PTR [esp],0xc001fecb
c0006844:	e8 f3 2f 01 00       	call   c001983c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 03 30 01 00       	call   c0019858 <iso_kprintfd>
c0006855:	c7 04 24 d1 fe 01 c0 	mov    DWORD PTR [esp],0xc001fed1
c000685c:	e8 db 2f 01 00       	call   c001983c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 eb 2f 01 00       	call   c0019858 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 bd fe 01 c0       	push   0xc001febd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 da fe 01 c0       	push   0xc001feda
c0006a31:	e8 06 2e 01 00       	call   c001983c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 e5 fe 01 c0       	push   0xc001fee5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ec fe 01 c0       	push   0xc001feec
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 f3 fe 01 c0       	push   0xc001fef3
c0006b48:	e8 ef 2c 01 00       	call   c001983c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 fe fe 01 c0       	push   0xc001fefe
c0006b63:	e8 d4 2c 01 00       	call   c001983c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 3c 55 00 00       	call   c000c1b8 <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 0f ff 01 c0       	push   0xc001ff0f
c0006cad:	e8 8b 98 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0006ccc:	50                   	push   eax
c0006ccd:	68 28 ff 01 c0       	push   0xc001ff28
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 82 e3 00 00       	call   c001505c <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 91 e5 00 00       	call   c0015280 <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 68 5d 01 c0       	push   0xc0015d68
c0006cfe:	52                   	push   edx
c0006cff:	e8 7c e5 00 00       	call   c0015280 <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 91 02 c0       	mov    ds:0xc0029148,eax
c0006d0c:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d13:	e8 b2 a0 00 00       	call   c0010dca <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 24 00 02 c0       	push   0xc0020024
c0006d20:	e8 18 98 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0006d25:	e8 61 f4 00 00       	call   c001618b <Vm::initialise8086()>
c0006d2a:	e8 81 42 00 00       	call   c000afb0 <Fs::initVFS()>
c0006d2f:	c7 04 24 35 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff35
c0006d36:	e8 02 98 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 24 00 02 c0       	push   0xc0020024
c0006d5a:	e8 de 97 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0006d5f:	e8 10 9d 00 00       	call   c0010a74 <KeLoadSystemEnv()>
c0006d64:	e8 6d 9f 00 00       	call   c0010cd6 <KeSetupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 4f ff 01 c0       	push   0xc001ff4f
c0006d73:	68 58 ff 01 c0       	push   0xc001ff58
c0006d78:	e8 2b c5 00 00       	call   c00132a8 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 93 4d 00 00       	call   c000bb18 <User::loadClockSettings(int)>
c0006d85:	c7 04 24 48 00 02 c0 	mov    DWORD PTR [esp],0xc0020048
c0006d8c:	e8 ac 97 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 13 54 00 00       	call   c000c1b6 <Device::loadDriversForAll()>
c0006da3:	c7 04 24 60 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff60
c0006daa:	e8 8e 97 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 71 ff 01 c0       	push   0xc001ff71
c0006dbe:	e8 af dc 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 d7 de 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 0b e9 00 00       	call   c00156e4 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 8d ff 01 c0       	push   0xc001ff8d
c0006ded:	50                   	push   eax
c0006dee:	e8 3f 54 00 00       	call   c000c232 <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba 94 00 02 c0       	mov    edx,0xc0020094
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 19 79 01 00       	call   c001e806 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 01 8b 00 00       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 da 8a 00 00       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 b8 8a 00 00       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 96 8a 00 00       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 a3 89 00 00       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 7e 89 00 00       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 78 77 01 00       	call   c001e7c0 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 c6 73 01 00       	call   c001e430 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 94 89 00 00       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 96 ff 01 c0       	push   0xc001ff96
c00070da:	e8 32 9b 00 00       	call   c0010c11 <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 9c ff 01 c0       	push   0xc001ff9c
c0007116:	e8 f6 9a 00 00       	call   c0010c11 <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 e1 82 00 00       	jmp    c000f444 <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071b6:	68 a2 ff 01 c0       	push   0xc001ffa2
c00071bb:	0f 94 05 20 28 02 c0 	sete   BYTE PTR ds:0xc0022820
c00071c2:	e8 76 93 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 db 7d 00 00       	call   c000efb8 <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 ae 4e 00 00       	call   c000c09a <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 ba ff 01 c0 	mov    DWORD PTR [esp],0xc001ffba
c0007205:	e8 33 93 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 c4 88 00 00       	call   c000fae4 <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 6b 4e 00 00       	call   c000c09a <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 68 00 02 c0       	push   0xc0020068
c000724c:	e8 ec 92 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0007251:	e8 72 01 01 00       	call   c00173c8 <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 d4 ff 01 c0 	mov    DWORD PTR [esp],0xc001ffd4
c000725d:	e8 db 92 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 3e e1 00 00       	call   c00153ac <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 ef ff 01 c0       	push   0xc001ffef
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 74 36 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 00 00 02 c0       	push   0xc0020000
c00072e5:	e8 27 99 00 00       	call   c0010c11 <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 0d 00 02 c0       	push   0xc002000d
c00072fa:	e8 12 99 00 00       	call   c0010c11 <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 17 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020017
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 f8 98 00 00       	jmp    c0010c11 <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073a9:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 89 fb 00 00       	call   c0017094 <HalSystemIdle()>
c000750b:	e8 b2 78 01 00       	call   c001edc2 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c000760d:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c0007612:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 c0 e4 01 c0       	push   0xc001e4c0
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 d0 e4 01 c0       	push   0xc001e4d0
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 da e4 01 c0       	push   0xc001e4da
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 e4 e4 01 c0       	push   0xc001e4e4
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 ee e4 01 c0       	push   0xc001e4ee
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 f8 e4 01 c0       	push   0xc001e4f8
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 02 e5 01 c0       	push   0xc001e502
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 0c e5 01 c0       	push   0xc001e50c
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 16 e5 01 c0       	push   0xc001e516
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 1e e5 01 c0       	push   0xc001e51e
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 28 e5 01 c0       	push   0xc001e528
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 30 e5 01 c0       	push   0xc001e530
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 38 e5 01 c0       	push   0xc001e538
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 40 e5 01 c0       	push   0xc001e540
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 5a e5 01 c0       	push   0xc001e55a
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 62 e5 01 c0       	push   0xc001e562
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 6c e5 01 c0       	push   0xc001e56c
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 76 e5 01 c0       	push   0xc001e576
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 80 e5 01 c0       	push   0xc001e580
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 1a e6 01 c0       	push   0xc001e61a
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 21 e6 01 c0       	push   0xc001e621
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 0c e6 01 c0       	push   0xc001e60c
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 13 e6 01 c0       	push   0xc001e613
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 8a e5 01 c0       	push   0xc001e58a
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 94 e5 01 c0       	push   0xc001e594
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 9e e5 01 c0       	push   0xc001e59e
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 a8 e5 01 c0       	push   0xc001e5a8
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 b2 e5 01 c0       	push   0xc001e5b2
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 bc e5 01 c0       	push   0xc001e5bc
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 c6 e5 01 c0       	push   0xc001e5c6
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 d0 e5 01 c0       	push   0xc001e5d0
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 da e5 01 c0       	push   0xc001e5da
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 e4 e5 01 c0       	push   0xc001e5e4
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 ee e5 01 c0       	push   0xc001e5ee
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 f8 e5 01 c0       	push   0xc001e5f8
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 02 e6 01 c0       	push   0xc001e602
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 5c e7 01 c0       	push   0xc001e75c
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 66 e7 01 c0       	push   0xc001e766
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 70 e7 01 c0       	push   0xc001e770
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 7a e7 01 c0       	push   0xc001e77a
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 84 e7 01 c0       	push   0xc001e784
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 8e e7 01 c0       	push   0xc001e78e
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 98 e7 01 c0       	push   0xc001e798
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 a2 e7 01 c0       	push   0xc001e7a2
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007904:	e8 0f 25 00 00       	call   c0009e18 <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 11 16 00 00       	call   c0008f38 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 16 e5 01 c0       	push   0xc001e516
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 46 16 00 00       	call   c0008f7c <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 10 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022810
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079b2:	8b 3d 10 28 02 c0    	mov    edi,DWORD PTR ds:0xc0022810
c00079b8:	e8 f5 03 00 00       	call   c0007db2 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 4a 23 00 00       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 10 28 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022810,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 10 28 02 c0       	mov    eax,ds:0xc0022810
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 b8 00 02 c0       	push   0xc00200b8
c0007a00:	e8 34 2f 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 e8 00 02 c0       	push   0xc00200e8
c0007a1f:	e8 ed 91 00 00       	call   c0010c11 <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 ed 00 02 c0       	push   0xc00200ed
c0007a35:	e8 d7 91 00 00       	call   c0010c11 <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 91 02 c0 01 	add    DWORD PTR ds:0xc0029168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a76:	e8 9d 23 00 00       	call   c0009e18 <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a8c:	e8 cb 1f 00 00       	call   c0009a5c <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 f4 00 02 c0       	push   0xc00200f4
c0007b57:	e8 dd 2d 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 60 89 00 00       	call   c00104c1 <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a8 03 00 00       	call   c0007f20 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 62 1c 00 00       	call   c00097df <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 54 1f 00 00       	call   c0009adc <VAS::VAS()>
c0007b88:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b8e:	e8 c7 71 01 00       	call   c001ed5a <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	53                   	push   ebx
c0007baa:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bb0:	6a 00                	push   0x0
c0007bb2:	6a 00                	push   0x0
c0007bb4:	56                   	push   esi
c0007bb5:	e8 ec f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bba:	83 c4 14             	add    esp,0x14
c0007bbd:	53                   	push   ebx
c0007bbe:	e8 e3 1f 00 00       	call   c0009ba6 <VAS::~VAS()>
c0007bc3:	83 c4 30             	add    esp,0x30
c0007bc6:	5b                   	pop    ebx
c0007bc7:	5e                   	pop    esi
c0007bc8:	5f                   	pop    edi
c0007bc9:	c3                   	ret    

c0007bca <Phys::allocateDMA(unsigned long)>:
c0007bca:	55                   	push   ebp
c0007bcb:	31 ed                	xor    ebp,ebp
c0007bcd:	57                   	push   edi
c0007bce:	56                   	push   esi
c0007bcf:	53                   	push   ebx
c0007bd0:	31 db                	xor    ebx,ebx
c0007bd2:	83 ec 1c             	sub    esp,0x1c
c0007bd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bd9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be1:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be7:	31 c0                	xor    eax,eax
c0007be9:	c1 ef 0c             	shr    edi,0xc
c0007bec:	eb 1b                	jmp    c0007c09 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bee:	85 c0                	test   eax,eax
c0007bf0:	75 06                	jne    c0007bf8 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf6:	89 dd                	mov    ebp,ebx
c0007bf8:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfb:	39 f7                	cmp    edi,esi
c0007bfd:	74 37                	je     c0007c36 <Phys::allocateDMA(unsigned long)+0x6c>
c0007bff:	89 f0                	mov    eax,esi
c0007c01:	83 c3 01             	add    ebx,0x1
c0007c04:	83 fb 0f             	cmp    ebx,0xf
c0007c07:	7f 13                	jg     c0007c1c <Phys::allocateDMA(unsigned long)+0x52>
c0007c09:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c10:	74 dc                	je     c0007bee <Phys::allocateDMA(unsigned long)+0x24>
c0007c12:	31 c0                	xor    eax,eax
c0007c14:	83 c3 01             	add    ebx,0x1
c0007c17:	83 fb 0f             	cmp    ebx,0xf
c0007c1a:	7e ed                	jle    c0007c09 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1c:	83 ec 0c             	sub    esp,0xc
c0007c1f:	68 0c 01 02 c0       	push   0xc002010c
c0007c24:	e8 e8 8f 00 00       	call   c0010c11 <KePanic(char const*)>
c0007c29:	83 c4 10             	add    esp,0x10
c0007c2c:	31 c0                	xor    eax,eax
c0007c2e:	83 c4 1c             	add    esp,0x1c
c0007c31:	5b                   	pop    ebx
c0007c32:	5e                   	pop    esi
c0007c33:	5f                   	pop    edi
c0007c34:	5d                   	pop    ebp
c0007c35:	c3                   	ret    
c0007c36:	89 e9                	mov    ecx,ebp
c0007c38:	c1 f9 04             	sar    ecx,0x4
c0007c3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c3f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c43:	89 ca                	mov    edx,ecx
c0007c45:	83 ea 01             	sub    edx,0x1
c0007c48:	79 03                	jns    c0007c4d <Phys::allocateDMA(unsigned long)+0x83>
c0007c4a:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4d:	c1 fa 04             	sar    edx,0x4
c0007c50:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c54:	74 08                	je     c0007c5e <Phys::allocateDMA(unsigned long)+0x94>
c0007c56:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5a:	31 c0                	xor    eax,eax
c0007c5c:	eb b6                	jmp    c0007c14 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5e:	85 f6                	test   esi,esi
c0007c60:	74 17                	je     c0007c79 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c62:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c68:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c6f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c72:	83 c2 01             	add    edx,0x1
c0007c75:	39 d0                	cmp    eax,edx
c0007c77:	75 f6                	jne    c0007c6f <Phys::allocateDMA(unsigned long)+0xa5>
c0007c79:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c82:	01 f8                	add    eax,edi
c0007c84:	85 d2                	test   edx,edx
c0007c86:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c8b:	74 17                	je     c0007ca4 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8d:	83 ec 0c             	sub    esp,0xc
c0007c90:	68 0c 01 02 c0       	push   0xc002010c
c0007c95:	e8 77 8f 00 00       	call   c0010c11 <KePanic(char const*)>
c0007c9a:	83 c4 10             	add    esp,0x10
c0007c9d:	89 f0                	mov    eax,esi
c0007c9f:	e9 5d ff ff ff       	jmp    c0007c01 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca4:	c1 e5 0c             	shl    ebp,0xc
c0007ca7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cad:	e9 7c ff ff ff       	jmp    c0007c2e <Phys::allocateDMA(unsigned long)+0x64>

c0007cb2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbc:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cc1:	c1 ea 0c             	shr    edx,0xc
c0007cc4:	29 d0                	sub    eax,edx
c0007cc6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007ccb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ccf:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd4:	c1 e8 0c             	shr    eax,0xc
c0007cd7:	85 d2                	test   edx,edx
c0007cd9:	74 11                	je     c0007cec <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdb:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ce0:	01 c2                	add    edx,eax
c0007ce2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce5:	83 c0 01             	add    eax,0x1
c0007ce8:	39 d0                	cmp    eax,edx
c0007cea:	75 f6                	jne    c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cec:	c3                   	ret    

c0007ced <Phys::setPageState(unsigned long, bool)>:
c0007ced:	57                   	push   edi
c0007cee:	56                   	push   esi
c0007cef:	8b 35 14 28 02 c0    	mov    esi,DWORD PTR ds:0xc0022814
c0007cf5:	53                   	push   ebx
c0007cf6:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d03:	0f b6 c0             	movzx  eax,al
c0007d06:	89 ca                	mov    edx,ecx
c0007d08:	83 e1 07             	and    ecx,0x7
c0007d0b:	c1 ea 03             	shr    edx,0x3
c0007d0e:	d3 c3                	rol    ebx,cl
c0007d10:	01 d6                	add    esi,edx
c0007d12:	d3 e0                	shl    eax,cl
c0007d14:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d17:	21 fb                	and    ebx,edi
c0007d19:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1b:	8b 1d 14 28 02 c0    	mov    ebx,DWORD PTR ds:0xc0022814
c0007d21:	01 da                	add    edx,ebx
c0007d23:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d25:	09 c8                	or     eax,ecx
c0007d27:	88 02                	mov    BYTE PTR [edx],al
c0007d29:	5b                   	pop    ebx
c0007d2a:	5e                   	pop    esi
c0007d2b:	5f                   	pop    edi
c0007d2c:	c3                   	ret    

c0007d2d <Phys::getPageState(unsigned long)>:
c0007d2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d31:	8b 15 14 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022814
c0007d37:	89 c8                	mov    eax,ecx
c0007d39:	83 e1 07             	and    ecx,0x7
c0007d3c:	c1 e8 03             	shr    eax,0x3
c0007d3f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d43:	d3 f8                	sar    eax,cl
c0007d45:	83 e0 01             	and    eax,0x1
c0007d48:	c3                   	ret    

c0007d49 <Phys::freePage(unsigned long)>:
c0007d49:	53                   	push   ebx
c0007d4a:	83 ec 08             	sub    esp,0x8
c0007d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d51:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d57:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5d:	76 41                	jbe    c0007da0 <Phys::freePage(unsigned long)+0x57>
c0007d5f:	c1 e8 0c             	shr    eax,0xc
c0007d62:	50                   	push   eax
c0007d63:	89 c3                	mov    ebx,eax
c0007d65:	e8 c3 ff ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007d6a:	5a                   	pop    edx
c0007d6b:	84 c0                	test   al,al
c0007d6d:	74 20                	je     c0007d8f <Phys::freePage(unsigned long)+0x46>
c0007d6f:	83 ec 08             	sub    esp,0x8
c0007d72:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d77:	6a 00                	push   0x0
c0007d79:	83 e8 01             	sub    eax,0x1
c0007d7c:	53                   	push   ebx
c0007d7d:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d82:	e8 66 ff ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007d87:	83 c4 10             	add    esp,0x10
c0007d8a:	83 c4 08             	add    esp,0x8
c0007d8d:	5b                   	pop    ebx
c0007d8e:	c3                   	ret    
c0007d8f:	c7 44 24 10 b1 01 02 c0 	mov    DWORD PTR [esp+0x10],0xc00201b1
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	e9 71 8e 00 00       	jmp    c0010c11 <KePanic(char const*)>
c0007da0:	68 00 10 00 00       	push   0x1000
c0007da5:	50                   	push   eax
c0007da6:	e8 07 ff ff ff       	call   c0007cb2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dab:	59                   	pop    ecx
c0007dac:	5b                   	pop    ebx
c0007dad:	83 c4 08             	add    esp,0x8
c0007db0:	5b                   	pop    ebx
c0007db1:	c3                   	ret    

c0007db2 <Phys::allocatePage()>:
c0007db2:	56                   	push   esi
c0007db3:	53                   	push   ebx
c0007db4:	83 ec 14             	sub    esp,0x14
c0007db7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dbd:	89 f3                	mov    ebx,esi
c0007dbf:	eb 0a                	jmp    c0007dcb <Phys::allocatePage()+0x19>
c0007dc1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dc7:	39 de                	cmp    esi,ebx
c0007dc9:	74 26                	je     c0007df1 <Phys::allocatePage()+0x3f>
c0007dcb:	53                   	push   ebx
c0007dcc:	e8 5c ff ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007dd1:	5a                   	pop    edx
c0007dd2:	84 c0                	test   al,al
c0007dd4:	74 67                	je     c0007e3d <Phys::allocatePage()+0x8b>
c0007dd6:	83 c3 01             	add    ebx,0x1
c0007dd9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ddf:	75 e0                	jne    c0007dc1 <Phys::allocatePage()+0xf>
c0007de1:	31 db                	xor    ebx,ebx
c0007de3:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007ded:	39 de                	cmp    esi,ebx
c0007def:	75 da                	jne    c0007dcb <Phys::allocatePage()+0x19>
c0007df1:	83 ec 0c             	sub    esp,0xc
c0007df4:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007df9:	83 f0 01             	xor    eax,0x1
c0007dfc:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e09:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e0f:	50                   	push   eax
c0007e10:	e8 a9 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e15:	83 c4 10             	add    esp,0x10
c0007e18:	85 c0                	test   eax,eax
c0007e1a:	75 48                	jne    c0007e64 <Phys::allocatePage()+0xb2>
c0007e1c:	83 ec 0c             	sub    esp,0xc
c0007e1f:	68 34 01 02 c0       	push   0xc0020134
c0007e24:	e8 e8 8d 00 00       	call   c0010c11 <KePanic(char const*)>
c0007e29:	83 c4 10             	add    esp,0x10
c0007e2c:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e32:	53                   	push   ebx
c0007e33:	e8 f5 fe ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007e38:	5a                   	pop    edx
c0007e39:	84 c0                	test   al,al
c0007e3b:	75 99                	jne    c0007dd6 <Phys::allocatePage()+0x24>
c0007e3d:	6a 01                	push   0x1
c0007e3f:	53                   	push   ebx
c0007e40:	e8 a8 fe ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007e45:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e4b:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e50:	83 c2 01             	add    edx,0x1
c0007e53:	59                   	pop    ecx
c0007e54:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e5a:	c1 e0 0c             	shl    eax,0xc
c0007e5d:	5b                   	pop    ebx
c0007e5e:	83 c4 14             	add    esp,0x14
c0007e61:	5b                   	pop    ebx
c0007e62:	5e                   	pop    esi
c0007e63:	c3                   	ret    
c0007e64:	83 ec 08             	sub    esp,0x8
c0007e67:	89 c2                	mov    edx,eax
c0007e69:	6a 01                	push   0x1
c0007e6b:	c1 ea 0c             	shr    edx,0xc
c0007e6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e72:	52                   	push   edx
c0007e73:	e8 75 fe ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007e78:	83 c4 10             	add    esp,0x10
c0007e7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e7f:	eb dd                	jmp    c0007e5e <Phys::allocatePage()+0xac>

c0007e81 <Phys::allocateContiguousPages(int)>:
c0007e81:	57                   	push   edi
c0007e82:	56                   	push   esi
c0007e83:	53                   	push   ebx
c0007e84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e88:	fa                   	cli    
c0007e89:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007e8e:	31 db                	xor    ebx,ebx
c0007e90:	83 c0 01             	add    eax,0x1
c0007e93:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007e98:	85 db                	test   ebx,ebx
c0007e9a:	75 11                	jne    c0007ead <Phys::allocateContiguousPages(int)+0x2c>
c0007e9c:	e8 11 ff ff ff       	call   c0007db2 <Phys::allocatePage()>
c0007ea1:	83 fe 01             	cmp    esi,0x1
c0007ea4:	89 c7                	mov    edi,eax
c0007ea6:	74 21                	je     c0007ec9 <Phys::allocateContiguousPages(int)+0x48>
c0007ea8:	bb 01 00 00 00       	mov    ebx,0x1
c0007ead:	e8 00 ff ff ff       	call   c0007db2 <Phys::allocatePage()>
c0007eb2:	89 da                	mov    edx,ebx
c0007eb4:	c1 e2 0c             	shl    edx,0xc
c0007eb7:	01 fa                	add    edx,edi
c0007eb9:	39 c2                	cmp    edx,eax
c0007ebb:	74 22                	je     c0007edf <Phys::allocateContiguousPages(int)+0x5e>
c0007ebd:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec2:	89 c7                	mov    edi,eax
c0007ec4:	83 fe 01             	cmp    esi,0x1
c0007ec7:	75 e4                	jne    c0007ead <Phys::allocateContiguousPages(int)+0x2c>
c0007ec9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007ece:	83 e8 01             	sub    eax,0x1
c0007ed1:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007ed6:	75 01                	jne    c0007ed9 <Phys::allocateContiguousPages(int)+0x58>
c0007ed8:	fb                   	sti    
c0007ed9:	89 f8                	mov    eax,edi
c0007edb:	5b                   	pop    ebx
c0007edc:	5e                   	pop    esi
c0007edd:	5f                   	pop    edi
c0007ede:	c3                   	ret    
c0007edf:	83 c3 01             	add    ebx,0x1
c0007ee2:	39 f3                	cmp    ebx,esi
c0007ee4:	75 b2                	jne    c0007e98 <Phys::allocateContiguousPages(int)+0x17>
c0007ee6:	eb e1                	jmp    c0007ec9 <Phys::allocateContiguousPages(int)+0x48>

c0007ee8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee8:	56                   	push   esi
c0007ee9:	53                   	push   ebx
c0007eea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eee:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007ef4:	73 06                	jae    c0007efc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef6:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f00:	c1 eb 0c             	shr    ebx,0xc
c0007f03:	c1 e8 0c             	shr    eax,0xc
c0007f06:	39 d8                	cmp    eax,ebx
c0007f08:	73 13                	jae    c0007f1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0a:	6a 00                	push   0x0
c0007f0c:	8d 70 01             	lea    esi,[eax+0x1]
c0007f0f:	50                   	push   eax
c0007f10:	e8 d8 fd ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007f15:	5a                   	pop    edx
c0007f16:	89 f0                	mov    eax,esi
c0007f18:	59                   	pop    ecx
c0007f19:	39 f3                	cmp    ebx,esi
c0007f1b:	75 ed                	jne    c0007f0a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1d:	5b                   	pop    ebx
c0007f1e:	5e                   	pop    esi
c0007f1f:	c3                   	ret    

c0007f20 <Phys::physicalMemorySetup(unsigned int)>:
c0007f20:	55                   	push   ebp
c0007f21:	57                   	push   edi
c0007f22:	56                   	push   esi
c0007f23:	53                   	push   ebx
c0007f24:	83 ec 40             	sub    esp,0x40
c0007f27:	6a 10                	push   0x10
c0007f29:	6a 00                	push   0x0
c0007f2b:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f30:	e8 bb 85 ff ff       	call   c00004f0 <memset>
c0007f35:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3e:	05 00 10 00 00       	add    eax,0x1000
c0007f43:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f47:	5b                   	pop    ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	5e                   	pop    esi
c0007f4b:	50                   	push   eax
c0007f4c:	68 c7 01 02 c0       	push   0xc00201c7
c0007f51:	e8 e3 29 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007f56:	83 c4 10             	add    esp,0x10
c0007f59:	83 ec 08             	sub    esp,0x8
c0007f5c:	6a 01                	push   0x1
c0007f5e:	53                   	push   ebx
c0007f5f:	83 c3 01             	add    ebx,0x1
c0007f62:	e8 86 fd ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007f67:	83 c4 10             	add    esp,0x10
c0007f6a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f70:	75 e7                	jne    c0007f59 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f72:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f79:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f80:	c1 e0 08             	shl    eax,0x8
c0007f83:	09 c2                	or     edx,eax
c0007f85:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f89:	0f 84 98 01 00 00    	je     c0008127 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f9b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fa0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fac:	eb 1c                	jmp    c0007fca <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fb2:	83 c3 18             	add    ebx,0x18
c0007fb5:	83 c6 01             	add    esi,0x1
c0007fb8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fc0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fc4:	0f 84 6d 01 00 00    	je     c0008137 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fca:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fcd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fd0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fdb:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fdd:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fe0:	01 f0                	add    eax,esi
c0007fe2:	55                   	push   ebp
c0007fe3:	11 fa                	adc    edx,edi
c0007fe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ff1:	51                   	push   ecx
c0007ff2:	56                   	push   esi
c0007ff3:	68 64 01 02 c0       	push   0xc0020164
c0007ff8:	e8 3c 29 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0007ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008001:	83 c4 10             	add    esp,0x10
c0008004:	09 f8                	or     eax,edi
c0008006:	0f 85 2b 01 00 00    	jne    c0008137 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000800c:	83 fd 01             	cmp    ebp,0x1
c000800f:	75 9d                	jne    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008011:	ba 00 00 08 00       	mov    edx,0x80000
c0008016:	89 c1                	mov    ecx,eax
c0008018:	39 f2                	cmp    edx,esi
c000801a:	19 f9                	sbb    ecx,edi
c000801c:	0f 82 ab 00 00 00    	jb     c00080cd <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008022:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008026:	89 c1                	mov    ecx,eax
c0008028:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000802c:	0f 83 9b 00 00 00    	jae    c00080cd <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008032:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008037:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000803b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000803f:	39 fa                	cmp    edx,edi
c0008041:	19 e8                	sbb    eax,ebp
c0008043:	0f 82 b0 01 00 00    	jb     c00081f9 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008049:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000804d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008051:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008057:	ba ff 1f 00 00       	mov    edx,0x1fff
c000805c:	83 d5 ff             	adc    ebp,0xffffffff
c000805f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008063:	31 c0                	xor    eax,eax
c0008065:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008069:	39 fa                	cmp    edx,edi
c000806b:	89 c1                	mov    ecx,eax
c000806d:	19 e9                	sbb    ecx,ebp
c000806f:	0f 83 39 ff ff ff    	jae    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008075:	be 00 00 08 00       	mov    esi,0x80000
c000807a:	83 ec 04             	sub    esp,0x4
c000807d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008081:	57                   	push   edi
c0008082:	56                   	push   esi
c0008083:	68 88 01 02 c0       	push   0xc0020188
c0008088:	e8 ac 28 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000808d:	5d                   	pop    ebp
c000808e:	58                   	pop    eax
c000808f:	57                   	push   edi
c0008090:	56                   	push   esi
c0008091:	e8 52 fe ff ff       	call   c0007ee8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008096:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000809a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000809e:	83 c4 0c             	add    esp,0xc
c00080a1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080a5:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080ab:	01 d0                	add    eax,edx
c00080ad:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080b4:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080b9:	52                   	push   edx
c00080ba:	50                   	push   eax
c00080bb:	68 ed 01 02 c0       	push   0xc00201ed
c00080c0:	e8 74 28 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00080c5:	83 c4 10             	add    esp,0x10
c00080c8:	e9 e1 fe ff ff       	jmp    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080cd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d9:	39 ea                	cmp    edx,ebp
c00080db:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080df:	0f 82 c9 fe ff ff    	jb     c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080e5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080ea:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080ee:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080f2:	0f 83 b6 fe ff ff    	jae    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f8:	39 ee                	cmp    esi,ebp
c00080fa:	89 f8                	mov    eax,edi
c00080fc:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008100:	0f 83 74 ff ff ff    	jae    c000807a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000810a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000810e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008112:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008116:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000811a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000811e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008122:	e9 53 ff ff ff       	jmp    c000807a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008127:	83 ec 0c             	sub    esp,0xc
c000812a:	68 df 01 02 c0       	push   0xc00201df
c000812f:	e8 dd 8a 00 00       	call   c0010c11 <KePanic(char const*)>
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 ec 08             	sub    esp,0x8
c000813a:	bb 60 00 00 00       	mov    ebx,0x60
c000813f:	6a 00                	push   0x0
c0008141:	6a 06                	push   0x6
c0008143:	e8 a5 fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008148:	58                   	pop    eax
c0008149:	5a                   	pop    edx
c000814a:	6a 00                	push   0x0
c000814c:	6a 07                	push   0x7
c000814e:	e8 9a fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008153:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008159:	83 c4 10             	add    esp,0x10
c000815c:	83 c1 02             	add    ecx,0x2
c000815f:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008165:	83 ec 08             	sub    esp,0x8
c0008168:	6a 00                	push   0x0
c000816a:	53                   	push   ebx
c000816b:	83 c3 01             	add    ebx,0x1
c000816e:	e8 7a fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008173:	83 c4 10             	add    esp,0x10
c0008176:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000817c:	75 e7                	jne    c0008165 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000817e:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008183:	bb 40 01 00 00       	mov    ebx,0x140
c0008188:	83 c0 20             	add    eax,0x20
c000818b:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008190:	eb 26                	jmp    c00081b8 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0008192:	83 ec 08             	sub    esp,0x8
c0008195:	6a 00                	push   0x0
c0008197:	53                   	push   ebx
c0008198:	83 c3 01             	add    ebx,0x1
c000819b:	e8 4d fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c00081a0:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081a5:	83 c4 10             	add    esp,0x10
c00081a8:	83 c0 01             	add    eax,0x1
c00081ab:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081b1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081b6:	74 07                	je     c00081bf <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081b8:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081bd:	7e d3                	jle    c0008192 <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081bf:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081c4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c9:	7f 26                	jg     c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081cb:	83 ec 08             	sub    esp,0x8
c00081ce:	6a 00                	push   0x0
c00081d0:	53                   	push   ebx
c00081d1:	83 c3 01             	add    ebx,0x1
c00081d4:	e8 14 fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c00081d9:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081de:	83 c4 10             	add    esp,0x10
c00081e1:	83 c0 01             	add    eax,0x1
c00081e4:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081ea:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ef:	75 d3                	jne    c00081c4 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081f1:	83 c4 3c             	add    esp,0x3c
c00081f4:	5b                   	pop    ebx
c00081f5:	5e                   	pop    esi
c00081f6:	5f                   	pop    edi
c00081f7:	5d                   	pop    ebp
c00081f8:	c3                   	ret    
c00081f9:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008201:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008209:	e9 3b fe ff ff       	jmp    c0008049 <Phys::physicalMemorySetup(unsigned int)+0x129>

c000820e <Pipe::isAtty()>:
c000820e:	31 c0                	xor    eax,eax
c0008210:	c3                   	ret    
c0008211:	90                   	nop

c0008212 <Pipe::~Pipe()>:
c0008212:	83 ec 0c             	sub    esp,0xc
c0008215:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c000821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821e:	89 10                	mov    DWORD PTR [eax],edx
c0008220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	50                   	push   eax
c0008228:	e8 6b 11 00 00       	call   c0009398 <UnixFile::~UnixFile()>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	90                   	nop
c0008231:	83 c4 0c             	add    esp,0xc
c0008234:	c3                   	ret    
c0008235:	90                   	nop

c0008236 <Pipe::~Pipe()>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 cd ff ff ff       	call   c0008212 <Pipe::~Pipe()>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 ec 08             	sub    esp,0x8
c000824b:	6a 20                	push   0x20
c000824d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008251:	e8 b6 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	83 c4 0c             	add    esp,0xc
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <Pipe::write(unsigned long long, void*, int*)>:
c000825e:	55                   	push   ebp
c000825f:	57                   	push   edi
c0008260:	56                   	push   esi
c0008261:	53                   	push   ebx
c0008262:	83 ec 1c             	sub    esp,0x1c
c0008265:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008269:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000826d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008270:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008274:	89 04 24             	mov    DWORD PTR [esp],eax
c0008277:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000827b:	89 d8                	mov    eax,ebx
c000827d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008280:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008284:	89 d6                	mov    esi,edx
c0008286:	89 d7                	mov    edi,edx
c0008288:	c1 ff 1f             	sar    edi,0x1f
c000828b:	03 34 24             	add    esi,DWORD PTR [esp]
c000828e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008292:	c1 f8 1f             	sar    eax,0x1f
c0008295:	39 f3                	cmp    ebx,esi
c0008297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000829b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000829f:	19 f8                	sbb    eax,edi
c00082a1:	b8 01 00 00 00       	mov    eax,0x1
c00082a6:	72 6e                	jb     c0008316 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082ab:	01 d0                	add    eax,edx
c00082ad:	99                   	cdq    
c00082ae:	f7 fb                	idiv   ebx
c00082b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082b4:	29 d3                	sub    ebx,edx
c00082b6:	89 d7                	mov    edi,edx
c00082b8:	89 de                	mov    esi,ebx
c00082ba:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082bd:	c1 fb 1f             	sar    ebx,0x1f
c00082c0:	39 f2                	cmp    edx,esi
c00082c2:	19 d8                	sbb    eax,ebx
c00082c4:	b8 00 00 00 00       	mov    eax,0x0
c00082c9:	72 04                	jb     c00082cf <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082cb:	89 d0                	mov    eax,edx
c00082cd:	29 f0                	sub    eax,esi
c00082cf:	89 d3                	mov    ebx,edx
c00082d1:	29 c3                	sub    ebx,eax
c00082d3:	74 0b                	je     c00082e0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082d5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082dc:	89 d9                	mov    ecx,ebx
c00082de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e0:	85 c0                	test   eax,eax
c00082e2:	74 0d                	je     c00082f1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082e4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082eb:	89 de                	mov    esi,ebx
c00082ed:	89 c1                	mov    ecx,eax
c00082ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082f4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f9:	75 10                	jne    c000830b <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082fb:	83 ec 0c             	sub    esp,0xc
c00082fe:	68 09 02 02 c0       	push   0xc0020209
c0008303:	e8 09 89 00 00       	call   c0010c11 <KePanic(char const*)>
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000830f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008312:	89 08                	mov    DWORD PTR [eax],ecx
c0008314:	31 c0                	xor    eax,eax
c0008316:	83 c4 1c             	add    esp,0x1c
c0008319:	5b                   	pop    ebx
c000831a:	5e                   	pop    esi
c000831b:	5f                   	pop    edi
c000831c:	5d                   	pop    ebp
c000831d:	c3                   	ret    

c000831e <Pipe::read(unsigned long long, void*, int*)>:
c000831e:	55                   	push   ebp
c000831f:	57                   	push   edi
c0008320:	56                   	push   esi
c0008321:	53                   	push   ebx
c0008322:	83 ec 1c             	sub    esp,0x1c
c0008325:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008329:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000832d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008331:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008334:	89 c8                	mov    eax,ecx
c0008336:	99                   	cdq    
c0008337:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000833b:	74 24                	je     c0008361 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	39 f9                	cmp    ecx,edi
c000833f:	89 d1                	mov    ecx,edx
c0008341:	19 f1                	sbb    ecx,esi
c0008343:	73 1c                	jae    c0008361 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008345:	fa                   	cli    
c0008346:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000834c:	e8 7f d1 00 00       	call   c00154d0 <schedule()>
c0008351:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0008356:	48                   	dec    eax
c0008357:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000835c:	75 d3                	jne    c0008331 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000835e:	fb                   	sti    
c000835f:	eb d0                	jmp    c0008331 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008361:	39 f8                	cmp    eax,edi
c0008363:	89 d1                	mov    ecx,edx
c0008365:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008368:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000836c:	19 f1                	sbb    ecx,esi
c000836e:	73 07                	jae    c0008377 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008370:	89 04 24             	mov    DWORD PTR [esp],eax
c0008373:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008377:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000837a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000837d:	29 f7                	sub    edi,esi
c000837f:	89 f8                	mov    eax,edi
c0008381:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008385:	99                   	cdq    
c0008386:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000838d:	19 d0                	sbb    eax,edx
c000838f:	73 07                	jae    c0008398 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008391:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008398:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000839b:	89 ea                	mov    edx,ebp
c000839d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083a1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083a6:	74 0d                	je     c00083b5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083ab:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083b5:	85 d2                	test   edx,edx
c00083b7:	74 11                	je     c00083ca <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083bd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083c0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083c4:	89 d1                	mov    ecx,edx
c00083c6:	89 c7                	mov    edi,eax
c00083c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083cd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083d0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083d3:	99                   	cdq    
c00083d4:	89 f7                	mov    edi,esi
c00083d6:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083dd:	c1 ff 1f             	sar    edi,0x1f
c00083e0:	57                   	push   edi
c00083e1:	56                   	push   esi
c00083e2:	52                   	push   edx
c00083e3:	50                   	push   eax
c00083e4:	e8 57 68 01 00       	call   c001ec40 <__umoddi3>
c00083e9:	83 c4 10             	add    esp,0x10
c00083ec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083ef:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083f4:	75 10                	jne    c0008406 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	68 26 02 02 c0       	push   0xc0020226
c00083fe:	e8 0e 88 00 00       	call   c0010c11 <KePanic(char const*)>
c0008403:	83 c4 10             	add    esp,0x10
c0008406:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000840a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000840d:	89 10                	mov    DWORD PTR [eax],edx
c000840f:	83 c4 1c             	add    esp,0x1c
c0008412:	31 c0                	xor    eax,eax
c0008414:	5b                   	pop    ebx
c0008415:	5e                   	pop    esi
c0008416:	5f                   	pop    edi
c0008417:	5d                   	pop    ebp
c0008418:	c3                   	ret    
c0008419:	90                   	nop

c000841a <Pipe::Pipe(int)>:
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008421:	83 ec 08             	sub    esp,0x8
c0008424:	6a 00                	push   0x0
c0008426:	50                   	push   eax
c0008427:	e8 86 0d 00 00       	call   c00091b2 <UnixFile::UnixFile(int)>
c000842c:	83 c4 10             	add    esp,0x10
c000842f:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c0008434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008438:	89 10                	mov    DWORD PTR [eax],edx
c000843a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000843e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008442:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008449:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008454:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000845b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000845f:	83 ec 0c             	sub    esp,0xc
c0008462:	50                   	push   eax
c0008463:	e8 46 f6 ff ff       	call   c0007aae <malloc>
c0008468:	83 c4 10             	add    esp,0x10
c000846b:	89 c2                	mov    edx,eax
c000846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008471:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000847c:	90                   	nop
c000847d:	83 c4 0c             	add    esp,0xc
c0008480:	c3                   	ret    
c0008481:	90                   	nop

c0008482 <VgaText::isAtty()>:
c0008482:	b0 01                	mov    al,0x1
c0008484:	c3                   	ret    
c0008485:	90                   	nop

c0008486 <VgaText::~VgaText()>:
c0008486:	83 ec 0c             	sub    esp,0xc
c0008489:	ba 94 02 02 c0       	mov    edx,0xc0020294
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	89 10                	mov    DWORD PTR [eax],edx
c0008494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	50                   	push   eax
c000849c:	e8 f7 0e 00 00       	call   c0009398 <UnixFile::~UnixFile()>
c00084a1:	83 c4 10             	add    esp,0x10
c00084a4:	90                   	nop
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 cd ff ff ff       	call   c0008486 <VgaText::~VgaText()>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	83 ec 08             	sub    esp,0x8
c00084bf:	68 84 01 00 00       	push   0x184
c00084c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c8:	e8 3f 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084cd:	83 c4 10             	add    esp,0x10
c00084d0:	83 c4 0c             	add    esp,0xc
c00084d3:	c3                   	ret    

c00084d4 <VgaText::read(unsigned long long, void*, int*)>:
c00084d4:	83 ec 10             	sub    esp,0x10
c00084d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e3:	e8 8c 4a 00 00       	call   c000cf74 <readKeyboard(VgaText*, char*, unsigned long)>
c00084e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084ec:	89 02                	mov    DWORD PTR [edx],eax
c00084ee:	31 c0                	xor    eax,eax
c00084f0:	83 c4 1c             	add    esp,0x1c
c00084f3:	c3                   	ret    

c00084f4 <setTerminalScrollLock(bool)>:
c00084f4:	c3                   	ret    

c00084f5 <doTerminalCycle()>:
c00084f5:	c3                   	ret    

c00084f6 <addToTerminalCycle(VgaText*)>:
c00084f6:	c3                   	ret    

c00084f7 <scrollTerminalScrollLock(int)>:
c00084f7:	c3                   	ret    

c00084f8 <VgaText::updateTitle()>:
c00084f8:	c3                   	ret    
c00084f9:	90                   	nop

c00084fa <VgaText::load()>:
c00084fa:	c3                   	ret    
c00084fb:	90                   	nop

c00084fc <VgaText::updateCursor()>:
c00084fc:	83 ec 14             	sub    esp,0x14
c00084ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008503:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008506:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008509:	e8 7a fd 00 00       	call   c0018288 <HalConsoleCursorUpdate(int, int)>
c000850e:	83 c4 1c             	add    esp,0x1c
c0008511:	c3                   	ret    

c0008512 <VgaText::doANSI_SGR(int)>:
c0008512:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000851a:	85 d2                	test   edx,edx
c000851c:	75 0b                	jne    c0008529 <VgaText::doANSI_SGR(int)+0x17>
c000851e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008521:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008524:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008527:	eb 59                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008529:	83 fa 07             	cmp    edx,0x7
c000852c:	75 0b                	jne    c0008539 <VgaText::doANSI_SGR(int)+0x27>
c000852e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008531:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008534:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008537:	eb 49                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008539:	83 fa 1b             	cmp    edx,0x1b
c000853c:	74 e0                	je     c000851e <VgaText::doANSI_SGR(int)+0xc>
c000853e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008541:	83 f9 07             	cmp    ecx,0x7
c0008544:	77 09                	ja     c000854f <VgaText::doANSI_SGR(int)+0x3d>
c0008546:	8b 14 8d 40 28 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd7c0]
c000854d:	eb 20                	jmp    c000856f <VgaText::doANSI_SGR(int)+0x5d>
c000854f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008552:	83 f9 07             	cmp    ecx,0x7
c0008555:	77 09                	ja     c0008560 <VgaText::doANSI_SGR(int)+0x4e>
c0008557:	8b 14 8d 40 28 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd7c0]
c000855e:	eb 22                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008560:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008563:	83 f9 07             	cmp    ecx,0x7
c0008566:	77 0b                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x61>
c0008568:	8b 14 95 f8 26 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd908]
c000856f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008572:	c3                   	ret    
c0008573:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 0a                	ja     c0008585 <VgaText::doANSI_SGR(int)+0x73>
c000857b:	8b 14 95 d0 26 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd930]
c0008582:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008585:	c3                   	ret    

c0008586 <VgaText::setDefaultBgColour(VgaColour)>:
c0008586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000858a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000858e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008591:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008594:	c3                   	ret    
c0008595:	90                   	nop

c0008596 <VgaText::setDefaultFgColour(VgaColour)>:
c0008596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000859a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085a4:	c3                   	ret    
c00085a5:	90                   	nop

c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085a6:	53                   	push   ebx
c00085a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085b3:	51                   	push   ecx
c00085b4:	e8 cd ff ff ff       	call   c0008586 <VgaText::setDefaultBgColour(VgaColour)>
c00085b9:	58                   	pop    eax
c00085ba:	5a                   	pop    edx
c00085bb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085c3:	5b                   	pop    ebx
c00085c4:	eb d0                	jmp    c0008596 <VgaText::setDefaultFgColour(VgaColour)>

c00085c6 <VgaText::setTitleTextColour(VgaColour)>:
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ce:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085d1:	c3                   	ret    

c00085d2 <VgaText::setTitleColour(VgaColour)>:
c00085d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085dd:	c3                   	ret    

c00085de <VgaText::setTitle(char*)>:
c00085de:	c3                   	ret    
c00085df:	90                   	nop

c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e9:	83 e0 0f             	and    eax,0xf
c00085ec:	c1 e2 04             	shl    edx,0x4
c00085ef:	09 d0                	or     eax,edx
c00085f1:	c3                   	ret    

c00085f2 <VgaText::scrollScreen()>:
c00085f2:	55                   	push   ebp
c00085f3:	57                   	push   edi
c00085f4:	56                   	push   esi
c00085f5:	be 01 00 00 00       	mov    esi,0x1
c00085fa:	53                   	push   ebx
c00085fb:	83 ec 0c             	sub    esp,0xc
c00085fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008602:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008605:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000860b:	31 ff                	xor    edi,edi
c000860d:	01 e9                	add    ecx,ebp
c000860f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008611:	83 fe 18             	cmp    esi,0x18
c0008614:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000861a:	75 20                	jne    c000863c <VgaText::scrollScreen()+0x4a>
c000861c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008622:	74 15                	je     c0008639 <VgaText::scrollScreen()+0x47>
c0008624:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008628:	50                   	push   eax
c0008629:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000862d:	50                   	push   eax
c000862e:	e8 ad ff ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008633:	5a                   	pop    edx
c0008634:	5a                   	pop    edx
c0008635:	88 01                	mov    BYTE PTR [ecx],al
c0008637:	eb 03                	jmp    c000863c <VgaText::scrollScreen()+0x4a>
c0008639:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000863c:	47                   	inc    edi
c000863d:	41                   	inc    ecx
c000863e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008644:	75 c9                	jne    c000860f <VgaText::scrollScreen()+0x1d>
c0008646:	46                   	inc    esi
c0008647:	83 fe 19             	cmp    esi,0x19
c000864a:	75 b9                	jne    c0008605 <VgaText::scrollScreen()+0x13>
c000864c:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008652:	75 1f                	jne    c0008673 <VgaText::scrollScreen()+0x81>
c0008654:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008658:	74 05                	je     c000865f <VgaText::scrollScreen()+0x6d>
c000865a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000865d:	eb 14                	jmp    c0008673 <VgaText::scrollScreen()+0x81>
c000865f:	50                   	push   eax
c0008660:	50                   	push   eax
c0008661:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008665:	50                   	push   eax
c0008666:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000866a:	50                   	push   eax
c000866b:	e8 ac fa 00 00       	call   c001811c <HalConsoleScroll(int, int)>
c0008670:	83 c4 10             	add    esp,0x10
c0008673:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008677:	83 c4 0c             	add    esp,0xc
c000867a:	5b                   	pop    ebx
c000867b:	5e                   	pop    esi
c000867c:	5f                   	pop    edi
c000867d:	5d                   	pop    ebp
c000867e:	e9 79 fe ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008683:	90                   	nop

c0008684 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008684:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008689:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000868e:	c1 e0 08             	shl    eax,0x8
c0008691:	09 d0                	or     eax,edx
c0008693:	c3                   	ret    

c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008694:	55                   	push   ebp
c0008695:	57                   	push   edi
c0008696:	56                   	push   esi
c0008697:	53                   	push   ebx
c0008698:	83 ec 1c             	sub    esp,0x1c
c000869b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000869f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086ab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086b3:	0f b6 c3             	movzx  eax,bl
c00086b6:	50                   	push   eax
c00086b7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086bc:	50                   	push   eax
c00086bd:	e8 1e ff ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c00086c2:	5a                   	pop    edx
c00086c3:	0f b6 c0             	movzx  eax,al
c00086c6:	59                   	pop    ecx
c00086c7:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086d0:	50                   	push   eax
c00086d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086d5:	e8 aa ff ff ff       	call   c0008684 <VgaText::combineCharAndColour(char, unsigned char)>
c00086da:	5a                   	pop    edx
c00086db:	6b d7 50             	imul   edx,edi,0x50
c00086de:	59                   	pop    ecx
c00086df:	01 f2                	add    edx,esi
c00086e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086e4:	0f b7 d2             	movzx  edx,dx
c00086e7:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086eb:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086f1:	75 28                	jne    c000871b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086f7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086fb:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086ff:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008703:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008707:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000870b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000870f:	83 c4 1c             	add    esp,0x1c
c0008712:	5b                   	pop    ebx
c0008713:	5e                   	pop    esi
c0008714:	5f                   	pop    edi
c0008715:	5d                   	pop    ebp
c0008716:	e9 09 fb 00 00       	jmp    c0018224 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000871b:	83 c4 1c             	add    esp,0x1c
c000871e:	5b                   	pop    ebx
c000871f:	5e                   	pop    esi
c0008720:	5f                   	pop    edi
c0008721:	5d                   	pop    ebp
c0008722:	c3                   	ret    
c0008723:	90                   	nop

c0008724 <VgaText::getCursorX()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000872b:	c3                   	ret    

c000872c <VgaText::getCursorY()>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008733:	c3                   	ret    

c0008734 <VgaText::setCursor(int, int)>:
c0008734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008738:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000873c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000873f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008743:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008746:	e9 b1 fd ff ff       	jmp    c00084fc <VgaText::updateCursor()>

c000874b <setActiveTerminal(VgaText*)>:
c000874b:	53                   	push   ebx
c000874c:	83 ec 08             	sub    esp,0x8
c000874f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008753:	85 db                	test   ebx,ebx
c0008755:	75 11                	jne    c0008768 <setActiveTerminal(VgaText*)+0x1d>
c0008757:	c7 44 24 10 60 02 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020260
c000875f:	83 c4 08             	add    esp,0x8
c0008762:	5b                   	pop    ebx
c0008763:	e9 a9 84 00 00       	jmp    c0010c11 <KePanic(char const*)>
c0008768:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000876d:	85 c0                	test   eax,eax
c000876f:	74 0c                	je     c000877d <setActiveTerminal(VgaText*)+0x32>
c0008771:	83 ec 0c             	sub    esp,0xc
c0008774:	50                   	push   eax
c0008775:	e8 82 fd ff ff       	call   c00084fc <VgaText::updateCursor()>
c000877a:	83 c4 10             	add    esp,0x10
c000877d:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008783:	50                   	push   eax
c0008784:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008787:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000878a:	53                   	push   ebx
c000878b:	e8 a4 ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008790:	83 c4 18             	add    esp,0x18
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <VgaText::clearScreen()>:
c0008796:	57                   	push   edi
c0008797:	56                   	push   esi
c0008798:	31 f6                	xor    esi,esi
c000879a:	53                   	push   ebx
c000879b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879f:	52                   	push   edx
c00087a0:	6a 00                	push   0x0
c00087a2:	6a 00                	push   0x0
c00087a4:	53                   	push   ebx
c00087a5:	e8 8a ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c00087aa:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087b1:	83 c4 10             	add    esp,0x10
c00087b4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087b7:	7e 20                	jle    c00087d9 <VgaText::clearScreen()+0x43>
c00087b9:	31 ff                	xor    edi,edi
c00087bb:	50                   	push   eax
c00087bc:	50                   	push   eax
c00087bd:	56                   	push   esi
c00087be:	57                   	push   edi
c00087bf:	47                   	inc    edi
c00087c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087c3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087c6:	6a 20                	push   0x20
c00087c8:	53                   	push   ebx
c00087c9:	e8 c6 fe ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087ce:	83 c4 20             	add    esp,0x20
c00087d1:	83 ff 50             	cmp    edi,0x50
c00087d4:	75 e5                	jne    c00087bb <VgaText::clearScreen()+0x25>
c00087d6:	46                   	inc    esi
c00087d7:	eb db                	jmp    c00087b4 <VgaText::clearScreen()+0x1e>
c00087d9:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087e0:	5b                   	pop    ebx
c00087e1:	5e                   	pop    esi
c00087e2:	5f                   	pop    edi
c00087e3:	c3                   	ret    

c00087e4 <VgaText::setCursorX(int)>:
c00087e4:	83 ec 10             	sub    esp,0x10
c00087e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087eb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f2:	50                   	push   eax
c00087f3:	e8 3c ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c00087f8:	83 c4 1c             	add    esp,0x1c
c00087fb:	c3                   	ret    

c00087fc <VgaText::setCursorY(int)>:
c00087fc:	83 ec 10             	sub    esp,0x10
c00087ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008807:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000880a:	50                   	push   eax
c000880b:	e8 24 ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008810:	83 c4 1c             	add    esp,0x1c
c0008813:	c3                   	ret    

c0008814 <VgaText::incrementCursor(bool)>:
c0008814:	56                   	push   esi
c0008815:	53                   	push   ebx
c0008816:	51                   	push   ecx
c0008817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000881b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000881f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008822:	40                   	inc    eax
c0008823:	83 f8 50             	cmp    eax,0x50
c0008826:	74 05                	je     c000882d <VgaText::incrementCursor(bool)+0x19>
c0008828:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000882b:	eb 24                	jmp    c0008851 <VgaText::incrementCursor(bool)+0x3d>
c000882d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008830:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008837:	8d 50 01             	lea    edx,[eax+0x1]
c000883a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000883d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008840:	75 0f                	jne    c0008851 <VgaText::incrementCursor(bool)+0x3d>
c0008842:	83 ec 0c             	sub    esp,0xc
c0008845:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008848:	53                   	push   ebx
c0008849:	e8 a4 fd ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c000884e:	83 c4 10             	add    esp,0x10
c0008851:	89 f0                	mov    eax,esi
c0008853:	84 c0                	test   al,al
c0008855:	74 0c                	je     c0008863 <VgaText::incrementCursor(bool)+0x4f>
c0008857:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000885b:	5a                   	pop    edx
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	e9 99 fc ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008863:	58                   	pop    eax
c0008864:	5b                   	pop    ebx
c0008865:	5e                   	pop    esi
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <VgaText::decrementCursor(bool)>:
c0008868:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000886c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008870:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008873:	85 c0                	test   eax,eax
c0008875:	74 04                	je     c000887b <VgaText::decrementCursor(bool)+0x13>
c0008877:	48                   	dec    eax
c0008878:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000887b:	84 c9                	test   cl,cl
c000887d:	74 09                	je     c0008888 <VgaText::decrementCursor(bool)+0x20>
c000887f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008883:	e9 74 fc ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008888:	c3                   	ret    
c0008889:	90                   	nop

c000888a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000888a:	53                   	push   ebx
c000888b:	83 ec 08             	sub    esp,0x8
c000888e:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000889b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000889f:	83 f8 07             	cmp    eax,0x7
c00088a2:	75 21                	jne    c00088c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088a4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ac:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088b4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088bc:	83 c4 08             	add    esp,0x8
c00088bf:	5b                   	pop    ebx
c00088c0:	e9 fa 31 00 00       	jmp    c000babf <Krnl::beep(int, int, bool)>
c00088c5:	83 f8 0d             	cmp    eax,0xd
c00088c8:	75 09                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d1:	eb 2d                	jmp    c0008900 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088d3:	83 f8 0a             	cmp    eax,0xa
c00088d6:	75 31                	jne    c0008909 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088db:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088e2:	8d 50 01             	lea    edx,[eax+0x1]
c00088e5:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e8:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088eb:	75 0f                	jne    c00088fc <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088ed:	83 ec 0c             	sub    esp,0xc
c00088f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088f3:	53                   	push   ebx
c00088f4:	e8 f9 fc ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c00088f9:	83 c4 10             	add    esp,0x10
c00088fc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008900:	83 c4 08             	add    esp,0x8
c0008903:	5b                   	pop    ebx
c0008904:	e9 f3 fb ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008909:	83 f8 08             	cmp    eax,0x8
c000890c:	75 25                	jne    c0008933 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000890e:	50                   	push   eax
c000890f:	50                   	push   eax
c0008910:	6a 01                	push   0x1
c0008912:	53                   	push   ebx
c0008913:	e8 50 ff ff ff       	call   c0008868 <VgaText::decrementCursor(bool)>
c0008918:	5a                   	pop    edx
c0008919:	59                   	pop    ecx
c000891a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000891d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008920:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008923:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008926:	6a 20                	push   0x20
c0008928:	53                   	push   ebx
c0008929:	e8 66 fd ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000892e:	83 c4 28             	add    esp,0x28
c0008931:	5b                   	pop    ebx
c0008932:	c3                   	ret    
c0008933:	83 ec 08             	sub    esp,0x8
c0008936:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008939:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000893c:	51                   	push   ecx
c000893d:	52                   	push   edx
c000893e:	50                   	push   eax
c000893f:	53                   	push   ebx
c0008940:	e8 4f fd ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008945:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008949:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008951:	83 c4 28             	add    esp,0x28
c0008954:	5b                   	pop    ebx
c0008955:	e9 ba fe ff ff       	jmp    c0008814 <VgaText::incrementCursor(bool)>

c000895a <VgaText::putchar(char)>:
c000895a:	57                   	push   edi
c000895b:	56                   	push   esi
c000895c:	53                   	push   ebx
c000895d:	83 ec 10             	sub    esp,0x10
c0008960:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008964:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008968:	89 f8                	mov    eax,edi
c000896a:	0f be c0             	movsx  eax,al
c000896d:	83 f8 5b             	cmp    eax,0x5b
c0008970:	75 18                	jne    c000898a <VgaText::putchar(char)+0x30>
c0008972:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008976:	74 20                	je     c0008998 <VgaText::putchar(char)+0x3e>
c0008978:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000897e:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008985:	e9 c1 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c000898a:	83 f8 1b             	cmp    eax,0x1b
c000898d:	75 09                	jne    c0008998 <VgaText::putchar(char)+0x3e>
c000898f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008993:	e9 b3 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008998:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000899b:	84 c9                	test   cl,cl
c000899d:	0f 84 98 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xe1>
c00089a3:	8d 77 c0             	lea    esi,[edi-0x40]
c00089a6:	89 f2                	mov    edx,esi
c00089a8:	80 fa 3e             	cmp    dl,0x3e
c00089ab:	77 78                	ja     c0008a25 <VgaText::putchar(char)+0xcb>
c00089ad:	83 f8 6d             	cmp    eax,0x6d
c00089b0:	75 47                	jne    c00089f9 <VgaText::putchar(char)+0x9f>
c00089b2:	31 f6                	xor    esi,esi
c00089b4:	31 d2                	xor    edx,edx
c00089b6:	31 c0                	xor    eax,eax
c00089b8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089bb:	7e 2d                	jle    c00089ea <VgaText::putchar(char)+0x90>
c00089bd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089c2:	83 fa 3b             	cmp    edx,0x3b
c00089c5:	75 17                	jne    c00089de <VgaText::putchar(char)+0x84>
c00089c7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089cb:	50                   	push   eax
c00089cc:	53                   	push   ebx
c00089cd:	e8 40 fb ff ff       	call   c0008512 <VgaText::doANSI_SGR(int)>
c00089d2:	59                   	pop    ecx
c00089d3:	31 d2                	xor    edx,edx
c00089d5:	5f                   	pop    edi
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089dc:	eb 09                	jmp    c00089e7 <VgaText::putchar(char)+0x8d>
c00089de:	6b c0 0a             	imul   eax,eax,0xa
c00089e1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e5:	88 ca                	mov    dl,cl
c00089e7:	46                   	inc    esi
c00089e8:	eb ce                	jmp    c00089b8 <VgaText::putchar(char)+0x5e>
c00089ea:	84 d2                	test   dl,dl
c00089ec:	74 2f                	je     c0008a1d <VgaText::putchar(char)+0xc3>
c00089ee:	50                   	push   eax
c00089ef:	53                   	push   ebx
c00089f0:	e8 1d fb ff ff       	call   c0008512 <VgaText::doANSI_SGR(int)>
c00089f5:	58                   	pop    eax
c00089f6:	5a                   	pop    edx
c00089f7:	eb 24                	jmp    c0008a1d <VgaText::putchar(char)+0xc3>
c00089f9:	83 f8 4a             	cmp    eax,0x4a
c00089fc:	75 1f                	jne    c0008a1d <VgaText::putchar(char)+0xc3>
c00089fe:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a02:	75 19                	jne    c0008a1d <VgaText::putchar(char)+0xc3>
c0008a04:	83 ec 0c             	sub    esp,0xc
c0008a07:	53                   	push   ebx
c0008a08:	e8 89 fd ff ff       	call   c0008796 <VgaText::clearScreen()>
c0008a0d:	83 c4 0c             	add    esp,0xc
c0008a10:	6a 00                	push   0x0
c0008a12:	6a 00                	push   0x0
c0008a14:	53                   	push   ebx
c0008a15:	e8 1a fd ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008a1a:	83 c4 10             	add    esp,0x10
c0008a1d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a23:	eb 26                	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008a25:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a28:	83 f8 0e             	cmp    eax,0xe
c0008a2b:	7f 1e                	jg     c0008a4b <VgaText::putchar(char)+0xf1>
c0008a2d:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a30:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a33:	89 f9                	mov    ecx,edi
c0008a35:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 42 fe ff ff       	call   c000888a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	5b                   	pop    ebx
c0008a4f:	5e                   	pop    esi
c0008a50:	5f                   	pop    edi
c0008a51:	c3                   	ret    

c0008a52 <VgaText::putx(unsigned int)>:
c0008a52:	57                   	push   edi
c0008a53:	b9 11 00 00 00       	mov    ecx,0x11
c0008a58:	56                   	push   esi
c0008a59:	be 6e 02 02 c0       	mov    esi,0xc002026e
c0008a5e:	53                   	push   ebx
c0008a5f:	83 ec 20             	sub    esp,0x20
c0008a62:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a66:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a6a:	fc                   	cld    
c0008a6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6d:	be 08 00 00 00       	mov    esi,0x8
c0008a72:	50                   	push   eax
c0008a73:	50                   	push   eax
c0008a74:	89 d8                	mov    eax,ebx
c0008a76:	c1 e3 04             	shl    ebx,0x4
c0008a79:	c1 e8 1c             	shr    eax,0x1c
c0008a7c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a81:	50                   	push   eax
c0008a82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a86:	e8 cf fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008a8b:	83 c4 10             	add    esp,0x10
c0008a8e:	4e                   	dec    esi
c0008a8f:	75 e1                	jne    c0008a72 <VgaText::putx(unsigned int)+0x20>
c0008a91:	83 c4 20             	add    esp,0x20
c0008a94:	5b                   	pop    ebx
c0008a95:	5e                   	pop    esi
c0008a96:	5f                   	pop    edi
c0008a97:	c3                   	ret    

c0008a98 <VgaText::puts(char const*)>:
c0008a98:	53                   	push   ebx
c0008a99:	83 ec 08             	sub    esp,0x8
c0008a9c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aa0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa3:	85 c0                	test   eax,eax
c0008aa5:	74 12                	je     c0008ab9 <VgaText::puts(char const*)+0x21>
c0008aa7:	43                   	inc    ebx
c0008aa8:	51                   	push   ecx
c0008aa9:	51                   	push   ecx
c0008aaa:	50                   	push   eax
c0008aab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aaf:	e8 a6 fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008ab4:	83 c4 10             	add    esp,0x10
c0008ab7:	eb e7                	jmp    c0008aa0 <VgaText::puts(char const*)+0x8>
c0008ab9:	83 c4 08             	add    esp,0x8
c0008abc:	5b                   	pop    ebx
c0008abd:	c3                   	ret    

c0008abe <VgaText::write(unsigned long long, void*, int*)>:
c0008abe:	55                   	push   ebp
c0008abf:	57                   	push   edi
c0008ac0:	56                   	push   esi
c0008ac1:	53                   	push   ebx
c0008ac2:	83 ec 0c             	sub    esp,0xc
c0008ac5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ad1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008adb:	39 eb                	cmp    ebx,ebp
c0008add:	74 13                	je     c0008af2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008adf:	43                   	inc    ebx
c0008ae0:	50                   	push   eax
c0008ae1:	50                   	push   eax
c0008ae2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae6:	50                   	push   eax
c0008ae7:	56                   	push   esi
c0008ae8:	e8 6d fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008aed:	83 c4 10             	add    esp,0x10
c0008af0:	eb e9                	jmp    c0008adb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af2:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afd:	89 38                	mov    DWORD PTR [eax],edi
c0008aff:	83 c4 0c             	add    esp,0xc
c0008b02:	31 c0                	xor    eax,eax
c0008b04:	5b                   	pop    ebx
c0008b05:	5e                   	pop    esi
c0008b06:	5f                   	pop    edi
c0008b07:	5d                   	pop    ebp
c0008b08:	c3                   	ret    
c0008b09:	90                   	nop

c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b0a:	55                   	push   ebp
c0008b0b:	57                   	push   edi
c0008b0c:	56                   	push   esi
c0008b0d:	53                   	push   ebx
c0008b0e:	83 ec 0c             	sub    esp,0xc
c0008b11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b21:	50                   	push   eax
c0008b22:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b27:	50                   	push   eax
c0008b28:	e8 b3 fa ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2d:	5a                   	pop    edx
c0008b2e:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b32:	59                   	pop    ecx
c0008b33:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b36:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b3a:	0f b7 f6             	movzx  esi,si
c0008b3d:	0f b6 e8             	movzx  ebp,al
c0008b40:	01 f6                	add    esi,esi
c0008b42:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b45:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b48:	85 c0                	test   eax,eax
c0008b4a:	0f 84 ef 00 00 00    	je     c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b50:	83 f8 0d             	cmp    eax,0xd
c0008b53:	75 0c                	jne    c0008b61 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b55:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b5c:	e9 d8 00 00 00       	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b61:	83 f8 0a             	cmp    eax,0xa
c0008b64:	75 44                	jne    c0008baa <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b66:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b69:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b70:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b73:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b76:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b79:	75 0f                	jne    c0008b8a <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b7b:	83 ec 0c             	sub    esp,0xc
c0008b7e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b81:	53                   	push   ebx
c0008b82:	e8 6b fa ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c0008b87:	83 c4 10             	add    esp,0x10
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	53                   	push   ebx
c0008b8e:	e8 69 f9 ff ff       	call   c00084fc <VgaText::updateCursor()>
c0008b93:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b97:	83 c4 10             	add    esp,0x10
c0008b9a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b9d:	0f b7 f6             	movzx  esi,si
c0008ba0:	01 f6                	add    esi,esi
c0008ba2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ba5:	e9 8f 00 00 00       	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008baa:	83 f8 08             	cmp    eax,0x8
c0008bad:	75 34                	jne    c0008be3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008baf:	51                   	push   ecx
c0008bb0:	51                   	push   ecx
c0008bb1:	6a 01                	push   0x1
c0008bb3:	53                   	push   ebx
c0008bb4:	e8 af fc ff ff       	call   c0008868 <VgaText::decrementCursor(bool)>
c0008bb9:	5e                   	pop    esi
c0008bba:	58                   	pop    eax
c0008bbb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bbe:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bc1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc7:	6a 20                	push   0x20
c0008bc9:	53                   	push   ebx
c0008bca:	e8 c5 fa ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcf:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bd3:	83 c4 20             	add    esp,0x20
c0008bd6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd9:	0f b7 f6             	movzx  esi,si
c0008bdc:	01 f6                	add    esi,esi
c0008bde:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008be1:	eb 56                	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be3:	52                   	push   edx
c0008be4:	52                   	push   edx
c0008be5:	55                   	push   ebp
c0008be6:	50                   	push   eax
c0008be7:	e8 98 fa ff ff       	call   c0008684 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bec:	83 c4 10             	add    esp,0x10
c0008bef:	66 89 06             	mov    WORD PTR [esi],ax
c0008bf2:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008bf8:	75 1d                	jne    c0008c17 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bfa:	83 ec 0c             	sub    esp,0xc
c0008bfd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c00:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c03:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c0b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c0e:	50                   	push   eax
c0008c0f:	e8 10 f6 00 00       	call   c0018224 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c14:	83 c4 20             	add    esp,0x20
c0008c17:	83 c6 02             	add    esi,0x2
c0008c1a:	50                   	push   eax
c0008c1b:	50                   	push   eax
c0008c1c:	6a 00                	push   0x0
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 f0 fb ff ff       	call   c0008814 <VgaText::incrementCursor(bool)>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c2b:	75 0c                	jne    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c31:	0f b7 f6             	movzx  esi,si
c0008c34:	01 f6                	add    esi,esi
c0008c36:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c39:	47                   	inc    edi
c0008c3a:	e9 06 ff ff ff       	jmp    c0008b45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3f:	83 ec 0c             	sub    esp,0xc
c0008c42:	53                   	push   ebx
c0008c43:	e8 b4 f8 ff ff       	call   c00084fc <VgaText::updateCursor()>
c0008c48:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c4f:	83 c4 1c             	add    esp,0x1c
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	5f                   	pop    edi
c0008c55:	5d                   	pop    ebp
c0008c56:	c3                   	ret    
c0008c57:	90                   	nop

c0008c58 <VgaText::VgaText(char const*)>:
c0008c58:	56                   	push   esi
c0008c59:	53                   	push   ebx
c0008c5a:	83 ec 04             	sub    esp,0x4
c0008c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c61:	83 ec 08             	sub    esp,0x8
c0008c64:	6a 00                	push   0x0
c0008c66:	50                   	push   eax
c0008c67:	e8 46 05 00 00       	call   c00091b2 <UnixFile::UnixFile(int)>
c0008c6c:	83 c4 10             	add    esp,0x10
c0008c6f:	ba 94 02 02 c0       	mov    edx,0xc0020294
c0008c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c78:	89 10                	mov    DWORD PTR [eax],edx
c0008c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c89:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cba:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd7:	83 ec 0c             	sub    esp,0xc
c0008cda:	6a 01                	push   0x1
c0008cdc:	e8 20 09 00 00       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0008ce1:	83 c4 10             	add    esp,0x10
c0008ce4:	89 c2                	mov    edx,eax
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ced:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cfa:	89 c6                	mov    esi,eax
c0008cfc:	e8 b1 f0 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0008d01:	68 05 0c 00 00       	push   0xc05
c0008d06:	56                   	push   esi
c0008d07:	50                   	push   eax
c0008d08:	53                   	push   ebx
c0008d09:	e8 06 10 00 00       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0e:	83 c4 10             	add    esp,0x10
c0008d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d18:	83 ec 04             	sub    esp,0x4
c0008d1b:	68 a0 0f 00 00       	push   0xfa0
c0008d20:	6a 00                	push   0x0
c0008d22:	50                   	push   eax
c0008d23:	e8 c8 77 ff ff       	call   c00004f0 <memset>
c0008d28:	83 c4 10             	add    esp,0x10
c0008d2b:	83 ec 04             	sub    esp,0x4
c0008d2e:	6a 00                	push   0x0
c0008d30:	6a 07                	push   0x7
c0008d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d36:	e8 6b f8 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d3b:	83 c4 10             	add    esp,0x10
c0008d3e:	83 ec 04             	sub    esp,0x4
c0008d41:	6a 00                	push   0x0
c0008d43:	6a 00                	push   0x0
c0008d45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d49:	e8 e6 f9 ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008d4e:	83 c4 10             	add    esp,0x10
c0008d51:	83 ec 0c             	sub    esp,0xc
c0008d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d58:	e8 39 fa ff ff       	call   c0008796 <VgaText::clearScreen()>
c0008d5d:	83 c4 10             	add    esp,0x10
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6c:	05 82 00 00 00       	add    eax,0x82
c0008d71:	83 ec 04             	sub    esp,0x4
c0008d74:	68 80 00 00 00       	push   0x80
c0008d79:	6a 00                	push   0x0
c0008d7b:	50                   	push   eax
c0008d7c:	e8 6f 77 ff ff       	call   c00004f0 <memset>
c0008d81:	83 c4 10             	add    esp,0x10
c0008d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d88:	05 02 01 00 00       	add    eax,0x102
c0008d8d:	83 ec 04             	sub    esp,0x4
c0008d90:	68 80 00 00 00       	push   0x80
c0008d95:	6a 00                	push   0x0
c0008d97:	50                   	push   eax
c0008d98:	e8 53 77 ff ff       	call   c00004f0 <memset>
c0008d9d:	83 c4 10             	add    esp,0x10
c0008da0:	90                   	nop
c0008da1:	83 c4 04             	add    esp,0x4
c0008da4:	5b                   	pop    ebx
c0008da5:	5e                   	pop    esi
c0008da6:	c3                   	ret    
c0008da7:	90                   	nop

c0008da8 <VgaText::receiveKey(unsigned char)>:
c0008da8:	55                   	push   ebp
c0008da9:	57                   	push   edi
c0008daa:	56                   	push   esi
c0008dab:	53                   	push   ebx
c0008dac:	83 ec 2c             	sub    esp,0x2c
c0008daf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008db3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db7:	89 ef                	mov    edi,ebp
c0008db9:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dbf:	0f 84 66 01 00 00    	je     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008dc5:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dcb:	83 ff 08             	cmp    edi,0x8
c0008dce:	75 73                	jne    c0008e43 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dd0:	83 ec 0c             	sub    esp,0xc
c0008dd3:	56                   	push   esi
c0008dd4:	e8 97 77 ff ff       	call   c0000570 <strlen>
c0008dd9:	83 c4 10             	add    esp,0x10
c0008ddc:	85 c0                	test   eax,eax
c0008dde:	0f 84 02 01 00 00    	je     c0008ee6 <VgaText::receiveKey(unsigned char)+0x13e>
c0008de4:	50                   	push   eax
c0008de5:	50                   	push   eax
c0008de6:	6a 08                	push   0x8
c0008de8:	53                   	push   ebx
c0008de9:	e8 6c fb ff ff       	call   c000895a <VgaText::putchar(char)>
c0008dee:	89 34 24             	mov    DWORD PTR [esp],esi
c0008df1:	e8 7a 77 ff ff       	call   c0000570 <strlen>
c0008df6:	83 c4 10             	add    esp,0x10
c0008df9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e01:	83 fa 0d             	cmp    edx,0xd
c0008e04:	89 d0                	mov    eax,edx
c0008e06:	0f 95 c1             	setne  cl
c0008e09:	83 fa 1f             	cmp    edx,0x1f
c0008e0c:	0f 9e c2             	setle  dl
c0008e0f:	0f b6 d2             	movzx  edx,dl
c0008e12:	85 ca                	test   edx,ecx
c0008e14:	74 17                	je     c0008e2d <VgaText::receiveKey(unsigned char)+0x85>
c0008e16:	83 e8 08             	sub    eax,0x8
c0008e19:	3c 02                	cmp    al,0x2
c0008e1b:	76 10                	jbe    c0008e2d <VgaText::receiveKey(unsigned char)+0x85>
c0008e1d:	55                   	push   ebp
c0008e1e:	55                   	push   ebp
c0008e1f:	68 7f 02 02 c0       	push   0xc002027f
c0008e24:	53                   	push   ebx
c0008e25:	e8 6e fc ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0008e2a:	83 c4 10             	add    esp,0x10
c0008e2d:	83 ec 0c             	sub    esp,0xc
c0008e30:	56                   	push   esi
c0008e31:	e8 3a 77 ff ff       	call   c0000570 <strlen>
c0008e36:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e3e:	e9 a0 00 00 00       	jmp    c0008ee3 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e43:	83 ec 0c             	sub    esp,0xc
c0008e46:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e4c:	50                   	push   eax
c0008e4d:	e8 1e 77 ff ff       	call   c0000570 <strlen>
c0008e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e59:	e8 12 77 ff ff       	call   c0000570 <strlen>
c0008e5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e62:	83 c4 10             	add    esp,0x10
c0008e65:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e69:	3d 80 00 00 00       	cmp    eax,0x80
c0008e6e:	0f 87 b7 00 00 00    	ja     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008e74:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e77:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e7a:	3c 1e                	cmp    al,0x1e
c0008e7c:	0f 96 c0             	setbe  al
c0008e7f:	80 fa 01             	cmp    dl,0x1
c0008e82:	0f 97 c2             	seta   dl
c0008e85:	0f b6 d2             	movzx  edx,dl
c0008e88:	85 c2                	test   edx,eax
c0008e8a:	74 2e                	je     c0008eba <VgaText::receiveKey(unsigned char)+0x112>
c0008e8c:	83 ff 0d             	cmp    edi,0xd
c0008e8f:	74 29                	je     c0008eba <VgaText::receiveKey(unsigned char)+0x112>
c0008e91:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e94:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e97:	68 85 02 02 c0       	push   0xc0020285
c0008e9c:	53                   	push   ebx
c0008e9d:	e8 68 fc ff ff       	call   c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea5:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eab:	0f b6 c0             	movzx  eax,al
c0008eae:	50                   	push   eax
c0008eaf:	53                   	push   ebx
c0008eb0:	e8 d5 f9 ff ff       	call   c000888a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb5:	83 c4 20             	add    esp,0x20
c0008eb8:	eb 11                	jmp    c0008ecb <VgaText::receiveKey(unsigned char)+0x123>
c0008eba:	89 e8                	mov    eax,ebp
c0008ebc:	51                   	push   ecx
c0008ebd:	0f be c0             	movsx  eax,al
c0008ec0:	51                   	push   ecx
c0008ec1:	50                   	push   eax
c0008ec2:	53                   	push   ebx
c0008ec3:	e8 92 fa ff ff       	call   c000895a <VgaText::putchar(char)>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed0:	89 e8                	mov    eax,ebp
c0008ed2:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed6:	52                   	push   edx
c0008ed7:	52                   	push   edx
c0008ed8:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edc:	50                   	push   eax
c0008edd:	56                   	push   esi
c0008ede:	e8 5d 79 ff ff       	call   c0000840 <strcat>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008eec:	b0 01                	mov    al,0x1
c0008eee:	83 ff 1c             	cmp    edi,0x1c
c0008ef1:	77 0e                	ja     c0008f01 <VgaText::receiveKey(unsigned char)+0x159>
c0008ef3:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef8:	89 f9                	mov    ecx,edi
c0008efa:	d3 e8                	shr    eax,cl
c0008efc:	f7 d0                	not    eax
c0008efe:	83 e0 01             	and    eax,0x1
c0008f01:	84 c0                	test   al,al
c0008f03:	74 04                	je     c0008f09 <VgaText::receiveKey(unsigned char)+0x161>
c0008f05:	84 d2                	test   dl,dl
c0008f07:	74 22                	je     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008f09:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f0f:	50                   	push   eax
c0008f10:	50                   	push   eax
c0008f11:	56                   	push   esi
c0008f12:	53                   	push   ebx
c0008f13:	e8 28 79 ff ff       	call   c0000840 <strcat>
c0008f18:	83 c4 0c             	add    esp,0xc
c0008f1b:	68 80 00 00 00       	push   0x80
c0008f20:	6a 00                	push   0x0
c0008f22:	56                   	push   esi
c0008f23:	e8 c8 75 ff ff       	call   c00004f0 <memset>
c0008f28:	83 c4 10             	add    esp,0x10
c0008f2b:	83 c4 2c             	add    esp,0x2c
c0008f2e:	5b                   	pop    ebx
c0008f2f:	5e                   	pop    esi
c0008f30:	5f                   	pop    edi
c0008f31:	5d                   	pop    ebp
c0008f32:	c3                   	ret    
c0008f33:	90                   	nop

c0008f34 <VgaText::doUpdate()>:
c0008f34:	c3                   	ret    
c0008f35:	66 90                	xchg   ax,ax
c0008f37:	90                   	nop

c0008f38 <TSS::TSS()>:
c0008f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f43:	90                   	nop
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop
c0008f46:	66 90                	xchg   ax,ax

c0008f48 <TSS::setESP(unsigned long)>:
c0008f48:	55                   	push   ebp
c0008f49:	89 e5                	mov    ebp,esp
c0008f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f57:	90                   	nop
c0008f58:	5d                   	pop    ebp
c0008f59:	c3                   	ret    
c0008f5a:	66 90                	xchg   ax,ax

c0008f5c <TSS::flush()>:
c0008f5c:	55                   	push   ebp
c0008f5d:	89 e5                	mov    ebp,esp
c0008f5f:	83 ec 10             	sub    esp,0x10
c0008f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f67:	83 c8 03             	or     eax,0x3
c0008f6a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f6e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f72:	66 89 d0             	mov    ax,dx
c0008f75:	0f 00 d8             	ltr    ax
c0008f78:	90                   	nop
c0008f79:	c9                   	leave  
c0008f7a:	c3                   	ret    
c0008f7b:	90                   	nop

c0008f7c <TSS::setup(unsigned long, unsigned long)>:
c0008f7c:	55                   	push   ebp
c0008f7d:	89 e5                	mov    ebp,esp
c0008f7f:	83 ec 18             	sub    esp,0x18
c0008f82:	83 ec 0c             	sub    esp,0xc
c0008f85:	6a 68                	push   0x68
c0008f87:	e8 22 eb ff ff       	call   c0007aae <malloc>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	89 c2                	mov    edx,eax
c0008f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9d:	83 ec 04             	sub    esp,0x4
c0008fa0:	6a 68                	push   0x68
c0008fa2:	6a 00                	push   0x0
c0008fa4:	50                   	push   eax
c0008fa5:	e8 46 75 ff ff       	call   c00004f0 <memset>
c0008faa:	83 c4 10             	add    esp,0x10
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009022:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000902e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000903e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009044:	0f 20 da             	mov    edx,cr3
c0009047:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000904d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009056:	83 ec 08             	sub    esp,0x8
c0009059:	50                   	push   eax
c000905a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000905d:	50                   	push   eax
c000905e:	e8 b7 e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c0009063:	83 c4 10             	add    esp,0x10
c0009066:	83 ec 08             	sub    esp,0x8
c0009069:	6a 68                	push   0x68
c000906b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000906e:	50                   	push   eax
c000906f:	e8 c2 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009074:	83 c4 10             	add    esp,0x10
c0009077:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907e:	83 e0 0f             	and    eax,0xf
c0009081:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009084:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009087:	83 c8 40             	or     eax,0x40
c000908a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000908d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009092:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009098:	05 78 01 00 00       	add    eax,0x178
c000909d:	83 ec 04             	sub    esp,0x4
c00090a0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090a6:	50                   	push   eax
c00090a7:	e8 be e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090ac:	83 c4 10             	add    esp,0x10
c00090af:	89 c2                	mov    edx,eax
c00090b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b4:	89 10                	mov    DWORD PTR [eax],edx
c00090b6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c1:	05 78 01 00 00       	add    eax,0x178
c00090c6:	83 ec 0c             	sub    esp,0xc
c00090c9:	50                   	push   eax
c00090ca:	e8 c5 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090cf:	83 c4 10             	add    esp,0x10
c00090d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090d7:	c9                   	leave  
c00090d8:	c3                   	ret    
c00090d9:	90                   	nop

c00090da <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ea:	75 08                	jne    c00090f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f2:	eb 38                	jmp    c000912c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090f9:	75 17                	jne    c0009112 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009100:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009103:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009109:	8b 10                	mov    edx,DWORD PTR [eax]
c000910b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000910f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009112:	89 c1                	mov    ecx,eax
c0009114:	83 e1 fd             	and    ecx,0xfffffffd
c0009117:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000911d:	74 cd                	je     c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000911f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009124:	83 e0 ef             	and    eax,0xffffffef
c0009127:	83 f8 08             	cmp    eax,0x8
c000912a:	76 c0                	jbe    c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912c:	31 c0                	xor    eax,eax
c000912e:	c3                   	ret    
c000912f:	90                   	nop

c0009130 <ReservedFilename::isAtty()>:
c0009130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009137:	31 c0                	xor    eax,eax
c0009139:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000913f:	74 09                	je     c000914a <ReservedFilename::isAtty()+0x1a>
c0009141:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009147:	0f 94 c0             	sete   al
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009157:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009160:	75 08                	jne    c000916a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009162:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009168:	eb 3d                	jmp    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000916f:	75 17                	jne    c0009188 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009179:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000917f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009181:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009185:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009188:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000918d:	75 04                	jne    c0009193 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000918f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009191:	eb 14                	jmp    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009193:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009198:	74 c8                	je     c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000919f:	83 e0 ef             	and    eax,0xffffffef
c00091a2:	83 f8 08             	cmp    eax,0x8
c00091a5:	76 bb                	jbe    c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a7:	31 c0                	xor    eax,eax
c00091a9:	c3                   	ret    

c00091aa <UnixFile::getFileDescriptor()>:
c00091aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b1:	c3                   	ret    

c00091b2 <UnixFile::UnixFile(int)>:
c00091b2:	53                   	push   ebx
c00091b3:	83 ec 28             	sub    esp,0x28
c00091b6:	ba 5c 03 02 c0       	mov    edx,0xc002035c
c00091bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091bf:	89 10                	mov    DWORD PTR [eax],edx
c00091c1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091c9:	0f 8f 90 01 00 00    	jg     c000935f <UnixFile::UnixFile(int)+0x1ad>
c00091cf:	a1 80 28 02 c0       	mov    eax,ds:0xc0022880
c00091d4:	8d 50 01             	lea    edx,[eax+0x1]
c00091d7:	89 15 80 28 02 c0    	mov    DWORD PTR ds:0xc0022880,edx
c00091dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e4:	83 ec 08             	sub    esp,0x8
c00091e7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091eb:	68 98 5f 02 c0       	push   0xc0025f98
c00091f0:	e8 33 5c 01 00       	call   c001ee28 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091fd:	83 f0 01             	xor    eax,0x1
c0009200:	0f b6 c0             	movzx  eax,al
c0009203:	85 c0                	test   eax,eax
c0009205:	0f 84 55 01 00 00    	je     c0009360 <UnixFile::UnixFile(int)+0x1ae>
c000920b:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009212:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921a:	83 ec 0c             	sub    esp,0xc
c000921d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009221:	e8 88 e8 ff ff       	call   c0007aae <malloc>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	89 c3                	mov    ebx,eax
c000922b:	83 ec 08             	sub    esp,0x8
c000922e:	68 03 ff ff 0f       	push   0xfffff03
c0009233:	53                   	push   ebx
c0009234:	e8 2d 01 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009239:	83 c4 10             	add    esp,0x10
c000923c:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009242:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924a:	83 ec 0c             	sub    esp,0xc
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	e8 58 e8 ff ff       	call   c0007aae <malloc>
c0009256:	83 c4 10             	add    esp,0x10
c0009259:	89 c3                	mov    ebx,eax
c000925b:	83 ec 08             	sub    esp,0x8
c000925e:	68 01 ff ff 0f       	push   0xfffff01
c0009263:	53                   	push   ebx
c0009264:	e8 fd 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009269:	83 c4 10             	add    esp,0x10
c000926c:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009272:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927a:	83 ec 0c             	sub    esp,0xc
c000927d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009281:	e8 28 e8 ff ff       	call   c0007aae <malloc>
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	89 c3                	mov    ebx,eax
c000928b:	83 ec 08             	sub    esp,0x8
c000928e:	68 00 ff ff 0f       	push   0xfffff00
c0009293:	53                   	push   ebx
c0009294:	e8 cd 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009299:	83 c4 10             	add    esp,0x10
c000929c:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092a2:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092aa:	83 ec 0c             	sub    esp,0xc
c00092ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b1:	e8 f8 e7 ff ff       	call   c0007aae <malloc>
c00092b6:	83 c4 10             	add    esp,0x10
c00092b9:	89 c3                	mov    ebx,eax
c00092bb:	83 ec 08             	sub    esp,0x8
c00092be:	68 02 ff ff 0f       	push   0xfffff02
c00092c3:	53                   	push   ebx
c00092c4:	e8 9d 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092da:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092df:	7f 7f                	jg     c0009360 <UnixFile::UnixFile(int)+0x1ae>
c00092e1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092e9:	83 ec 0c             	sub    esp,0xc
c00092ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f0:	e8 b9 e7 ff ff       	call   c0007aae <malloc>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	89 c3                	mov    ebx,eax
c00092fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092fe:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009303:	83 ec 08             	sub    esp,0x8
c0009306:	50                   	push   eax
c0009307:	53                   	push   ebx
c0009308:	e8 59 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c000930d:	83 c4 10             	add    esp,0x10
c0009310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009314:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000931b:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009323:	83 ec 0c             	sub    esp,0xc
c0009326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932a:	e8 7f e7 ff ff       	call   c0007aae <malloc>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	89 c3                	mov    ebx,eax
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	05 20 ff ff 0f       	add    eax,0xfffff20
c000933d:	83 ec 08             	sub    esp,0x8
c0009340:	50                   	push   eax
c0009341:	53                   	push   ebx
c0009342:	e8 1f 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009347:	83 c4 10             	add    esp,0x10
c000934a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000934e:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009355:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935a:	e9 7b ff ff ff       	jmp    c00092da <UnixFile::UnixFile(int)+0x128>
c000935f:	90                   	nop
c0009360:	83 c4 28             	add    esp,0x28
c0009363:	5b                   	pop    ebx
c0009364:	c3                   	ret    
c0009365:	90                   	nop

c0009366 <ReservedFilename::ReservedFilename(int)>:
c0009366:	83 ec 0c             	sub    esp,0xc
c0009369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936d:	83 ec 08             	sub    esp,0x8
c0009370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009374:	50                   	push   eax
c0009375:	e8 38 fe ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000937a:	83 c4 10             	add    esp,0x10
c000937d:	ba 78 03 02 c0       	mov    edx,0xc0020378
c0009382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009386:	89 10                	mov    DWORD PTR [eax],edx
c0009388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009390:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009393:	90                   	nop
c0009394:	83 c4 0c             	add    esp,0xc
c0009397:	c3                   	ret    

c0009398 <UnixFile::~UnixFile()>:
c0009398:	83 ec 1c             	sub    esp,0x1c
c000939b:	ba 5c 03 02 c0       	mov    edx,0xc002035c
c00093a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a4:	89 10                	mov    DWORD PTR [eax],edx
c00093a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ad:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b2:	7f 76                	jg     c000942a <UnixFile::~UnixFile()+0x92>
c00093b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093bc:	83 ec 0c             	sub    esp,0xc
c00093bf:	68 98 5f 02 c0       	push   0xc0025f98
c00093c4:	e8 33 5b 01 00       	call   c001eefc <LinkedList<UnixFile>::getFirstElement()>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d0:	83 ec 0c             	sub    esp,0xc
c00093d3:	68 98 5f 02 c0       	push   0xc0025f98
c00093d8:	e8 27 5b 01 00       	call   c001ef04 <LinkedList<UnixFile>::removeFirst()>
c00093dd:	83 c4 10             	add    esp,0x10
c00093e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093e8:	74 43                	je     c000942d <UnixFile::~UnixFile()+0x95>
c00093ea:	83 ec 08             	sub    esp,0x8
c00093ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f1:	68 98 5f 02 c0       	push   0xc0025f98
c00093f6:	e8 2d 5a 01 00       	call   c001ee28 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093fb:	83 c4 10             	add    esp,0x10
c00093fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009402:	8d 50 01             	lea    edx,[eax+0x1]
c0009405:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009409:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000940e:	0f 94 c0             	sete   al
c0009411:	0f b6 c0             	movzx  eax,al
c0009414:	85 c0                	test   eax,eax
c0009416:	74 a4                	je     c00093bc <UnixFile::~UnixFile()+0x24>
c0009418:	83 ec 0c             	sub    esp,0xc
c000941b:	68 34 03 02 c0       	push   0xc0020334
c0009420:	e8 ec 77 00 00       	call   c0010c11 <KePanic(char const*)>
c0009425:	83 c4 10             	add    esp,0x10
c0009428:	eb 92                	jmp    c00093bc <UnixFile::~UnixFile()+0x24>
c000942a:	90                   	nop
c000942b:	eb 01                	jmp    c000942e <UnixFile::~UnixFile()+0x96>
c000942d:	90                   	nop
c000942e:	90                   	nop
c000942f:	83 c4 1c             	add    esp,0x1c
c0009432:	c3                   	ret    
c0009433:	90                   	nop

c0009434 <UnixFile::~UnixFile()>:
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	83 ec 0c             	sub    esp,0xc
c000943a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000943e:	e8 55 ff ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c0009443:	83 c4 10             	add    esp,0x10
c0009446:	83 ec 08             	sub    esp,0x8
c0009449:	6a 0c                	push   0xc
c000944b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944f:	e8 b8 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	83 c4 0c             	add    esp,0xc
c000945a:	c3                   	ret    
c000945b:	90                   	nop

c000945c <ReservedFilename::~ReservedFilename()>:
c000945c:	83 ec 0c             	sub    esp,0xc
c000945f:	ba 78 03 02 c0       	mov    edx,0xc0020378
c0009464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009468:	89 10                	mov    DWORD PTR [eax],edx
c000946a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946e:	83 ec 0c             	sub    esp,0xc
c0009471:	50                   	push   eax
c0009472:	e8 21 ff ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	90                   	nop
c000947b:	83 c4 0c             	add    esp,0xc
c000947e:	c3                   	ret    
c000947f:	90                   	nop

c0009480 <ReservedFilename::~ReservedFilename()>:
c0009480:	83 ec 0c             	sub    esp,0xc
c0009483:	83 ec 0c             	sub    esp,0xc
c0009486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948a:	e8 cd ff ff ff       	call   c000945c <ReservedFilename::~ReservedFilename()>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	83 ec 08             	sub    esp,0x8
c0009495:	6a 0c                	push   0xc
c0009497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949b:	e8 6c 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00094a0:	83 c4 10             	add    esp,0x10
c00094a3:	83 c4 0c             	add    esp,0xc
c00094a6:	c3                   	ret    

c00094a7 <KeGetFileFromDescriptor(int)>:
c00094a7:	53                   	push   ebx
c00094a8:	83 ec 08             	sub    esp,0x8
c00094ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094af:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bb:	7f 2c                	jg     c00094e9 <KeGetFileFromDescriptor(int)+0x42>
c00094bd:	83 ec 0c             	sub    esp,0xc
c00094c0:	68 98 5f 02 c0       	push   0xc0025f98
c00094c5:	e8 32 5a 01 00       	call   c001eefc <LinkedList<UnixFile>::getFirstElement()>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	75 04                	jne    c00094d5 <KeGetFileFromDescriptor(int)+0x2e>
c00094d1:	31 c0                	xor    eax,eax
c00094d3:	eb 6e                	jmp    c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094d5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094d8:	74 69                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094da:	52                   	push   edx
c00094db:	52                   	push   edx
c00094dc:	50                   	push   eax
c00094dd:	68 98 5f 02 c0       	push   0xc0025f98
c00094e2:	e8 bf 5a 01 00       	call   c001efa6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094e7:	eb e1                	jmp    c00094ca <KeGetFileFromDescriptor(int)+0x23>
c00094e9:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094ee:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f4:	74 4d                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094f6:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094fb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009501:	74 40                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009503:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009508:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950e:	74 33                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009510:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009515:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951b:	74 26                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c000951d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009523:	83 f8 08             	cmp    eax,0x8
c0009526:	77 09                	ja     c0009531 <KeGetFileFromDescriptor(int)+0x8a>
c0009528:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000952f:	eb 12                	jmp    c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009531:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009537:	83 fb 08             	cmp    ebx,0x8
c000953a:	77 95                	ja     c00094d1 <KeGetFileFromDescriptor(int)+0x2a>
c000953c:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009543:	83 c4 08             	add    esp,0x8
c0009546:	5b                   	pop    ebx
c0009547:	c3                   	ret    

c0009548 <__static_initialization_and_destruction_0(int, int)>:
c0009548:	83 ec 0c             	sub    esp,0xc
c000954b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009550:	75 34                	jne    c0009586 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009552:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955a:	75 2a                	jne    c0009586 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	68 98 5f 02 c0       	push   0xc0025f98
c0009564:	e8 7d 58 01 00       	call   c001ede6 <LinkedList<UnixFile>::LinkedList()>
c0009569:	83 c4 10             	add    esp,0x10
c000956c:	83 ec 04             	sub    esp,0x4
c000956f:	68 0c 28 02 c0       	push   0xc002280c
c0009574:	68 98 5f 02 c0       	push   0xc0025f98
c0009579:	68 e4 ed 01 c0       	push   0xc001ede4
c000957e:	e8 39 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009583:	83 c4 10             	add    esp,0x10
c0009586:	90                   	nop
c0009587:	83 c4 0c             	add    esp,0xc
c000958a:	c3                   	ret    

c000958b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958b:	83 ec 0c             	sub    esp,0xc
c000958e:	83 ec 08             	sub    esp,0x8
c0009591:	68 ff ff 00 00       	push   0xffff
c0009596:	6a 01                	push   0x1
c0009598:	e8 ab ff ff ff       	call   c0009548 <__static_initialization_and_destruction_0(int, int)>
c000959d:	83 c4 10             	add    esp,0x10
c00095a0:	83 c4 0c             	add    esp,0xc
c00095a3:	c3                   	ret    

c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a4:	53                   	push   ebx
c00095a5:	8b 15 88 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022888
c00095ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095b9:	89 d8                	mov    eax,ebx
c00095bb:	d1 e8                	shr    eax,1
c00095bd:	01 d0                	add    eax,edx
c00095bf:	80 e3 01             	and    bl,0x1
c00095c2:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c4:	75 09                	jne    c00095cf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095c6:	83 e2 f0             	and    edx,0xfffffff0
c00095c9:	09 ca                	or     edx,ecx
c00095cb:	88 10                	mov    BYTE PTR [eax],dl
c00095cd:	5b                   	pop    ebx
c00095ce:	c3                   	ret    
c00095cf:	83 e2 0f             	and    edx,0xf
c00095d2:	0f b6 c9             	movzx  ecx,cl
c00095d5:	c1 e1 04             	shl    ecx,0x4
c00095d8:	09 ca                	or     edx,ecx
c00095da:	88 10                	mov    BYTE PTR [eax],dl
c00095dc:	5b                   	pop    ebx
c00095dd:	c3                   	ret    

c00095de <Virt::getPageState(unsigned long)>:
c00095de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e2:	8b 0d 88 28 02 c0    	mov    ecx,DWORD PTR ds:0xc0022888
c00095e8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095ee:	89 d0                	mov    eax,edx
c00095f0:	d1 e8                	shr    eax,1
c00095f2:	80 e2 01             	and    dl,0x1
c00095f5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095f8:	74 03                	je     c00095fd <Virt::getPageState(unsigned long)+0x1f>
c00095fa:	c1 e8 04             	shr    eax,0x4
c00095fd:	83 e0 0f             	and    eax,0xf
c0009600:	c3                   	ret    

c0009601 <Virt::allocateKernelVirtualPages(int)>:
c0009601:	55                   	push   ebp
c0009602:	31 ed                	xor    ebp,ebp
c0009604:	57                   	push   edi
c0009605:	31 ff                	xor    edi,edi
c0009607:	56                   	push   esi
c0009608:	53                   	push   ebx
c0009609:	31 db                	xor    ebx,ebx
c000960b:	83 ec 0c             	sub    esp,0xc
c000960e:	8b 35 84 28 02 c0    	mov    esi,DWORD PTR ds:0xc0022884
c0009614:	56                   	push   esi
c0009615:	e8 c4 ff ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c000961a:	5a                   	pop    edx
c000961b:	84 c0                	test   al,al
c000961d:	75 41                	jne    c0009660 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000961f:	85 db                	test   ebx,ebx
c0009621:	75 02                	jne    c0009625 <Virt::allocateKernelVirtualPages(int)+0x24>
c0009623:	89 f5                	mov    ebp,esi
c0009625:	83 c3 01             	add    ebx,0x1
c0009628:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000962c:	74 5f                	je     c000968d <Virt::allocateKernelVirtualPages(int)+0x8c>
c000962e:	83 c6 01             	add    esi,0x1
c0009631:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009637:	76 34                	jbe    c000966d <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009639:	c7 05 84 28 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022884,0xc8000
c0009643:	f7 c7 01 00 00 00    	test   edi,0x1
c0009649:	75 2a                	jne    c0009675 <Virt::allocateKernelVirtualPages(int)+0x74>
c000964b:	be 00 80 0c 00       	mov    esi,0xc8000
c0009650:	bf 01 00 00 00       	mov    edi,0x1
c0009655:	56                   	push   esi
c0009656:	e8 83 ff ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c000965b:	5a                   	pop    edx
c000965c:	84 c0                	test   al,al
c000965e:	74 bf                	je     c000961f <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009660:	31 db                	xor    ebx,ebx
c0009662:	83 c6 01             	add    esi,0x1
c0009665:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c000966b:	77 cc                	ja     c0009639 <Virt::allocateKernelVirtualPages(int)+0x38>
c000966d:	89 35 84 28 02 c0    	mov    DWORD PTR ds:0xc0022884,esi
c0009673:	eb 9f                	jmp    c0009614 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009675:	83 ec 0c             	sub    esp,0xc
c0009678:	68 8c 03 02 c0       	push   0xc002038c
c000967d:	e8 8f 75 00 00       	call   c0010c11 <KePanic(char const*)>
c0009682:	8b 35 84 28 02 c0    	mov    esi,DWORD PTR ds:0xc0022884
c0009688:	83 c4 10             	add    esp,0x10
c000968b:	eb 87                	jmp    c0009614 <Virt::allocateKernelVirtualPages(int)+0x13>
c000968d:	89 2d 84 28 02 c0    	mov    DWORD PTR ds:0xc0022884,ebp
c0009693:	83 fb 01             	cmp    ebx,0x1
c0009696:	74 6f                	je     c0009707 <Virt::allocateKernelVirtualPages(int)+0x106>
c0009698:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000969c:	85 c9                	test   ecx,ecx
c000969e:	74 49                	je     c00096e9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a4:	89 e8                	mov    eax,ebp
c00096a6:	31 db                	xor    ebx,ebx
c00096a8:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096ab:	eb 18                	jmp    c00096c5 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096ad:	6a 01                	push   0x1
c00096af:	83 c3 01             	add    ebx,0x1
c00096b2:	50                   	push   eax
c00096b3:	e8 ec fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b8:	58                   	pop    eax
c00096b9:	5a                   	pop    edx
c00096ba:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096be:	74 29                	je     c00096e9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096c0:	a1 84 28 02 c0       	mov    eax,ds:0xc0022884
c00096c5:	8d 50 01             	lea    edx,[eax+0x1]
c00096c8:	85 db                	test   ebx,ebx
c00096ca:	89 15 84 28 02 c0    	mov    DWORD PTR ds:0xc0022884,edx
c00096d0:	74 24                	je     c00096f6 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096d2:	39 df                	cmp    edi,ebx
c00096d4:	75 d7                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xac>
c00096d6:	6a 03                	push   0x3
c00096d8:	83 c3 01             	add    ebx,0x1
c00096db:	50                   	push   eax
c00096dc:	e8 c3 fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e1:	59                   	pop    ecx
c00096e2:	5e                   	pop    esi
c00096e3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096e7:	75 d7                	jne    c00096c0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096e9:	83 c4 0c             	add    esp,0xc
c00096ec:	89 e8                	mov    eax,ebp
c00096ee:	5b                   	pop    ebx
c00096ef:	c1 e0 0c             	shl    eax,0xc
c00096f2:	5e                   	pop    esi
c00096f3:	5f                   	pop    edi
c00096f4:	5d                   	pop    ebp
c00096f5:	c3                   	ret    
c00096f6:	6a 02                	push   0x2
c00096f8:	bb 01 00 00 00       	mov    ebx,0x1
c00096fd:	50                   	push   eax
c00096fe:	e8 a1 fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009703:	58                   	pop    eax
c0009704:	5a                   	pop    edx
c0009705:	eb b9                	jmp    c00096c0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009707:	6a 04                	push   0x4
c0009709:	8d 45 01             	lea    eax,[ebp+0x1]
c000970c:	55                   	push   ebp
c000970d:	a3 84 28 02 c0       	mov    ds:0xc0022884,eax
c0009712:	e8 8d fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009717:	5b                   	pop    ebx
c0009718:	89 e8                	mov    eax,ebp
c000971a:	5e                   	pop    esi
c000971b:	c1 e0 0c             	shl    eax,0xc
c000971e:	83 c4 0c             	add    esp,0xc
c0009721:	5b                   	pop    ebx
c0009722:	5e                   	pop    esi
c0009723:	5f                   	pop    edi
c0009724:	5d                   	pop    ebp
c0009725:	c3                   	ret    

c0009726 <Virt::freeSwapfilePage(unsigned long)>:
c0009726:	53                   	push   ebx
c0009727:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	b8 01 00 00 00       	mov    eax,0x1
c0009736:	89 cb                	mov    ebx,ecx
c0009738:	d3 e0                	shl    eax,cl
c000973a:	c1 eb 05             	shr    ebx,0x5
c000973d:	f7 d0                	not    eax
c000973f:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009742:	21 c1                	and    ecx,eax
c0009744:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009747:	5b                   	pop    ebx
c0009748:	c3                   	ret    

c0009749 <Virt::swapIDToSector(unsigned long)>:
c0009749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974d:	8b 15 8c 28 02 c0    	mov    edx,DWORD PTR ds:0xc002288c
c0009753:	8b 0d 94 28 02 c0    	mov    ecx,DWORD PTR ds:0xc0022894
c0009759:	0f af c2             	imul   eax,edx
c000975c:	01 c8                	add    eax,ecx
c000975e:	c3                   	ret    

c000975f <Virt::allocateSwapfilePage()>:
c000975f:	55                   	push   ebp
c0009760:	31 d2                	xor    edx,edx
c0009762:	57                   	push   edi
c0009763:	56                   	push   esi
c0009764:	53                   	push   ebx
c0009765:	83 ec 0c             	sub    esp,0xc
c0009768:	8b 0d 8c 28 02 c0    	mov    ecx,DWORD PTR ds:0xc002288c
c000976e:	a1 90 28 02 c0       	mov    eax,ds:0xc0022890
c0009773:	f7 f1                	div    ecx
c0009775:	39 0d 90 28 02 c0    	cmp    DWORD PTR ds:0xc0022890,ecx
c000977b:	72 2f                	jb     c00097ac <Virt::allocateSwapfilePage()+0x4d>
c000977d:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c0009783:	8b 16                	mov    edx,DWORD PTR [esi]
c0009785:	f6 c2 01             	test   dl,0x1
c0009788:	74 3e                	je     c00097c8 <Virt::allocateSwapfilePage()+0x69>
c000978a:	31 c9                	xor    ecx,ecx
c000978c:	bf 01 00 00 00       	mov    edi,0x1
c0009791:	eb 12                	jmp    c00097a5 <Virt::allocateSwapfilePage()+0x46>
c0009793:	89 fd                	mov    ebp,edi
c0009795:	89 ca                	mov    edx,ecx
c0009797:	d3 e5                	shl    ebp,cl
c0009799:	c1 ea 05             	shr    edx,0x5
c000979c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000979f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097a1:	85 ea                	test   edx,ebp
c00097a3:	74 2c                	je     c00097d1 <Virt::allocateSwapfilePage()+0x72>
c00097a5:	83 c1 01             	add    ecx,0x1
c00097a8:	39 c8                	cmp    eax,ecx
c00097aa:	77 e7                	ja     c0009793 <Virt::allocateSwapfilePage()+0x34>
c00097ac:	83 ec 0c             	sub    esp,0xc
c00097af:	68 20 06 02 c0       	push   0xc0020620
c00097b4:	e8 58 74 00 00       	call   c0010c11 <KePanic(char const*)>
c00097b9:	83 c4 10             	add    esp,0x10
c00097bc:	31 c9                	xor    ecx,ecx
c00097be:	83 c4 0c             	add    esp,0xc
c00097c1:	89 c8                	mov    eax,ecx
c00097c3:	5b                   	pop    ebx
c00097c4:	5e                   	pop    esi
c00097c5:	5f                   	pop    edi
c00097c6:	5d                   	pop    ebp
c00097c7:	c3                   	ret    
c00097c8:	89 f3                	mov    ebx,esi
c00097ca:	bd 01 00 00 00       	mov    ebp,0x1
c00097cf:	31 c9                	xor    ecx,ecx
c00097d1:	09 ea                	or     edx,ebp
c00097d3:	89 c8                	mov    eax,ecx
c00097d5:	89 13                	mov    DWORD PTR [ebx],edx
c00097d7:	83 c4 0c             	add    esp,0xc
c00097da:	5b                   	pop    ebx
c00097db:	5e                   	pop    esi
c00097dc:	5f                   	pop    edi
c00097dd:	5d                   	pop    ebp
c00097de:	c3                   	ret    

c00097df <Virt::virtualMemorySetup()>:
c00097df:	53                   	push   ebx
c00097e0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e5:	6a 0f                	push   0xf
c00097e7:	53                   	push   ebx
c00097e8:	83 c3 01             	add    ebx,0x1
c00097eb:	e8 b4 fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f0:	58                   	pop    eax
c00097f1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f7:	5a                   	pop    edx
c00097f8:	75 eb                	jne    c00097e5 <Virt::virtualMemorySetup()+0x6>
c00097fa:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ff:	6a 00                	push   0x0
c0009801:	53                   	push   ebx
c0009802:	83 c3 01             	add    ebx,0x1
c0009805:	e8 9a fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980a:	59                   	pop    ecx
c000980b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009811:	58                   	pop    eax
c0009812:	75 eb                	jne    c00097ff <Virt::virtualMemorySetup()+0x20>
c0009814:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009819:	6a 0f                	push   0xf
c000981b:	53                   	push   ebx
c000981c:	83 c3 01             	add    ebx,0x1
c000981f:	e8 80 fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009824:	58                   	pop    eax
c0009825:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000982b:	5a                   	pop    edx
c000982c:	75 eb                	jne    c0009819 <Virt::virtualMemorySetup()+0x3a>
c000982e:	5b                   	pop    ebx
c000982f:	c3                   	ret    

c0009830 <Virt::setupPageSwapping(int)>:
c0009830:	53                   	push   ebx
c0009831:	83 ec 0c             	sub    esp,0xc
c0009834:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009838:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000983d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009843:	8b 10                	mov    edx,DWORD PTR [eax]
c0009845:	53                   	push   ebx
c0009846:	c1 e3 0b             	shl    ebx,0xb
c0009849:	68 37 06 02 c0       	push   0xc0020637
c000984e:	50                   	push   eax
c000984f:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009852:	89 1d 90 28 02 c0    	mov    DWORD PTR ds:0xc0022890,ebx
c0009858:	c6 05 98 28 02 c0 43 	mov    BYTE PTR ds:0xc0022898,0x43
c000985f:	c1 eb 08             	shr    ebx,0x8
c0009862:	a3 94 28 02 c0       	mov    ds:0xc0022894,eax
c0009867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000986a:	c7 05 8c 28 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002288c,0x8
c0009874:	e8 35 e2 ff ff       	call   c0007aae <malloc>
c0009879:	83 c4 0c             	add    esp,0xc
c000987c:	89 c1                	mov    ecx,eax
c000987e:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c0009883:	31 d2                	xor    edx,edx
c0009885:	a1 90 28 02 c0       	mov    eax,ds:0xc0022890
c000988a:	f7 35 8c 28 02 c0    	div    DWORD PTR ds:0xc002288c
c0009890:	c1 e8 05             	shr    eax,0x5
c0009893:	50                   	push   eax
c0009894:	6a 00                	push   0x0
c0009896:	51                   	push   ecx
c0009897:	e8 54 6c ff ff       	call   c00004f0 <memset>
c000989c:	83 c4 18             	add    esp,0x18
c000989f:	5b                   	pop    ebx
c00098a0:	c3                   	ret    
c00098a1:	90                   	nop

c00098a2 <VAS::setCPUSpecific(unsigned long)>:
c00098a2:	c3                   	ret    
c00098a3:	90                   	nop

c00098a4 <VAS::VAS(VAS*)>:
c00098a4:	83 ec 0c             	sub    esp,0xc
c00098a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098bd:	83 ec 0c             	sub    esp,0xc
c00098c0:	68 ac 03 02 c0       	push   0xc00203ac
c00098c5:	e8 47 73 00 00       	call   c0010c11 <KePanic(char const*)>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	90                   	nop
c00098ce:	83 c4 0c             	add    esp,0xc
c00098d1:	c3                   	ret    

c00098d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098d6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098db:	89 c2                	mov    edx,eax
c00098dd:	c1 e8 0a             	shr    eax,0xa
c00098e0:	c1 ea 16             	shr    edx,0x16
c00098e3:	83 f9 01             	cmp    ecx,0x1
c00098e6:	19 c9                	sbb    ecx,ecx
c00098e8:	c1 e2 0c             	shl    edx,0xc
c00098eb:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098f1:	25 fc 0f 00 00       	and    eax,0xffc
c00098f6:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098fd:	01 d0                	add    eax,edx
c00098ff:	c3                   	ret    

c0009900 <VAS::getPageTableEntry(unsigned long)>:
c0009900:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009904:	89 ca                	mov    edx,ecx
c0009906:	c1 e9 0a             	shr    ecx,0xa
c0009909:	c1 ea 16             	shr    edx,0x16
c000990c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009912:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009918:	c1 e0 0c             	shl    eax,0xc
c000991b:	8d 04 08             	lea    eax,[eax+ecx*1]
c000991e:	c3                   	ret    

c000991f <Virt::freeKernelVirtualPages(unsigned long)>:
c000991f:	55                   	push   ebp
c0009920:	57                   	push   edi
c0009921:	bf 01 00 00 00       	mov    edi,0x1
c0009926:	56                   	push   esi
c0009927:	53                   	push   ebx
c0009928:	83 ec 1c             	sub    esp,0x1c
c000992b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000992f:	c1 ee 0c             	shr    esi,0xc
c0009932:	eb 48                	jmp    c000997c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009934:	83 ec 08             	sub    esp,0x8
c0009937:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000993c:	55                   	push   ebp
c000993d:	50                   	push   eax
c000993e:	e8 bd ff ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009943:	83 c4 10             	add    esp,0x10
c0009946:	8b 10                	mov    edx,DWORD PTR [eax]
c0009948:	f6 c6 04             	test   dh,0x4
c000994b:	75 70                	jne    c00099bd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009953:	83 fb 04             	cmp    ebx,0x4
c0009956:	0f 84 8a 00 00 00    	je     c00099e6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000995c:	83 fb 02             	cmp    ebx,0x2
c000995f:	0f 84 9a 00 00 00    	je     c00099ff <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009965:	83 fb 03             	cmp    ebx,0x3
c0009968:	0f 84 be 00 00 00    	je     c0009a2c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000996e:	83 fb 01             	cmp    ebx,0x1
c0009971:	0f 84 a2 00 00 00    	je     c0009a19 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009977:	83 c6 01             	add    esi,0x1
c000997a:	31 ff                	xor    edi,edi
c000997c:	56                   	push   esi
c000997d:	89 f5                	mov    ebp,esi
c000997f:	e8 5a fc ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c0009984:	c1 e5 0c             	shl    ebp,0xc
c0009987:	0f b6 d8             	movzx  ebx,al
c000998a:	5a                   	pop    edx
c000998b:	85 db                	test   ebx,ebx
c000998d:	75 a5                	jne    c0009934 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000998f:	83 ec 0c             	sub    esp,0xc
c0009992:	68 4e 06 02 c0       	push   0xc002064e
c0009997:	e8 75 72 00 00       	call   c0010c11 <KePanic(char const*)>
c000999c:	5a                   	pop    edx
c000999d:	59                   	pop    ecx
c000999e:	55                   	push   ebp
c000999f:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099a5:	55                   	push   ebp
c00099a6:	e8 55 ff ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c00099ab:	83 c4 10             	add    esp,0x10
c00099ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00099b0:	f6 c6 04             	test   dh,0x4
c00099b3:	75 08                	jne    c00099bd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099bb:	eb ba                	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099c1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099c7:	83 ec 0c             	sub    esp,0xc
c00099ca:	52                   	push   edx
c00099cb:	e8 79 e3 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c00099d0:	83 c4 10             	add    esp,0x10
c00099d3:	83 fb 04             	cmp    ebx,0x4
c00099d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099e0:	0f 85 76 ff ff ff    	jne    c000995c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099e6:	83 e7 01             	and    edi,0x1
c00099e9:	75 46                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099eb:	c7 44 24 30 d0 03 02 c0 	mov    DWORD PTR [esp+0x30],0xc00203d0
c00099f3:	83 c4 1c             	add    esp,0x1c
c00099f6:	5b                   	pop    ebx
c00099f7:	5e                   	pop    esi
c00099f8:	5f                   	pop    edi
c00099f9:	5d                   	pop    ebp
c00099fa:	e9 12 72 00 00       	jmp    c0010c11 <KePanic(char const*)>
c00099ff:	83 e7 01             	and    edi,0x1
c0009a02:	75 15                	jne    c0009a19 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a04:	83 ec 0c             	sub    esp,0xc
c0009a07:	68 6a 06 02 c0       	push   0xc002066a
c0009a0c:	e8 00 72 00 00       	call   c0010c11 <KePanic(char const*)>
c0009a11:	83 c4 10             	add    esp,0x10
c0009a14:	e9 5e ff ff ff       	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a19:	83 ec 08             	sub    esp,0x8
c0009a1c:	6a 00                	push   0x0
c0009a1e:	56                   	push   esi
c0009a1f:	e8 80 fb ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a24:	83 c4 10             	add    esp,0x10
c0009a27:	e9 4b ff ff ff       	jmp    c0009977 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a2c:	83 e7 01             	and    edi,0x1
c0009a2f:	75 16                	jne    c0009a47 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a31:	83 ec 08             	sub    esp,0x8
c0009a34:	6a 00                	push   0x0
c0009a36:	56                   	push   esi
c0009a37:	e8 68 fb ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	83 c4 1c             	add    esp,0x1c
c0009a42:	5b                   	pop    ebx
c0009a43:	5e                   	pop    esi
c0009a44:	5f                   	pop    edi
c0009a45:	5d                   	pop    ebp
c0009a46:	c3                   	ret    
c0009a47:	c7 44 24 30 86 06 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020686
c0009a4f:	83 c4 1c             	add    esp,0x1c
c0009a52:	5b                   	pop    ebx
c0009a53:	5e                   	pop    esi
c0009a54:	5f                   	pop    edi
c0009a55:	5d                   	pop    ebp
c0009a56:	e9 b6 71 00 00       	jmp    c0010c11 <KePanic(char const*)>
c0009a5b:	90                   	nop

c0009a5c <VAS::freeAllocatedPages(unsigned long)>:
c0009a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a64:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a68:	74 09                	je     c0009a73 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a6a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a6e:	e9 ac fe ff ff       	jmp    c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009a73:	c7 44 24 04 f4 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc00203f4
c0009a7b:	e9 b9 0e 00 00       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>

c0009a80 <VAS::virtualToPhysical(unsigned long)>:
c0009a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a84:	50                   	push   eax
c0009a85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a89:	52                   	push   edx
c0009a8a:	e8 71 fe ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009a8f:	59                   	pop    ecx
c0009a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a92:	5a                   	pop    edx
c0009a93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a98:	c3                   	ret    
c0009a99:	90                   	nop

c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a9a:	55                   	push   ebp
c0009a9b:	57                   	push   edi
c0009a9c:	56                   	push   esi
c0009a9d:	53                   	push   ebx
c0009a9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aa2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009aa6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009aaa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aae:	85 db                	test   ebx,ebx
c0009ab0:	7e 24                	jle    c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009ab2:	c1 e3 0c             	shl    ebx,0xc
c0009ab5:	01 f3                	add    ebx,esi
c0009ab7:	56                   	push   esi
c0009ab8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009abe:	55                   	push   ebp
c0009abf:	e8 3c fe ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0009ac4:	5a                   	pop    edx
c0009ac5:	59                   	pop    ecx
c0009ac6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ac8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009acc:	21 f9                	and    ecx,edi
c0009ace:	09 d1                	or     ecx,edx
c0009ad0:	39 f3                	cmp    ebx,esi
c0009ad2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ad4:	75 e1                	jne    c0009ab7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ad6:	5b                   	pop    ebx
c0009ad7:	5e                   	pop    esi
c0009ad8:	5f                   	pop    edi
c0009ad9:	5d                   	pop    ebp
c0009ada:	c3                   	ret    
c0009adb:	90                   	nop

c0009adc <VAS::VAS()>:
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aeb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af6:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aff:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b07:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b15:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b1a:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1f:	29 c2                	sub    edx,eax
c0009b21:	89 d0                	mov    eax,edx
c0009b23:	05 ff 0f 00 00       	add    eax,0xfff
c0009b28:	c1 e8 0c             	shr    eax,0xc
c0009b2b:	89 c2                	mov    edx,eax
c0009b2d:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b32:	6a 04                	push   0x4
c0009b34:	6a ff                	push   0xffffffff
c0009b36:	52                   	push   edx
c0009b37:	50                   	push   eax
c0009b38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b3c:	e8 59 ff ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b41:	83 c4 14             	add    esp,0x14
c0009b44:	90                   	nop
c0009b45:	c3                   	ret    

c0009b46 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b46:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b51:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b58:	75 01                	jne    c0009b5b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b5a:	c3                   	ret    
c0009b5b:	68 80 00 00 00       	push   0x80
c0009b60:	6a ff                	push   0xffffffff
c0009b62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b66:	50                   	push   eax
c0009b67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b6b:	52                   	push   edx
c0009b6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b70:	51                   	push   ecx
c0009b71:	e8 24 ff ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b76:	83 c4 14             	add    esp,0x14
c0009b79:	c3                   	ret    

c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b7e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b85:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b8d:	83 f8 01             	cmp    eax,0x1
c0009b90:	19 c0                	sbb    eax,eax
c0009b92:	83 ca 03             	or     edx,0x3
c0009b95:	83 e0 fc             	and    eax,0xfffffffc
c0009b98:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b9f:	0f 20 d8             	mov    eax,cr3
c0009ba2:	0f 22 d8             	mov    cr3,eax
c0009ba5:	c3                   	ret    

c0009ba6 <VAS::~VAS()>:
c0009ba6:	83 ec 2c             	sub    esp,0x2c
c0009ba9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bb1:	fa                   	cli    
c0009bb2:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009bb7:	83 c0 01             	add    eax,0x1
c0009bba:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0009bbf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bc6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bc9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bcf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bd3:	6a 01                	push   0x1
c0009bd5:	50                   	push   eax
c0009bd6:	e8 9f ff ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bdb:	83 c4 0c             	add    esp,0xc
c0009bde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009be6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bee:	0f 8f d8 00 00 00    	jg     c0009ccc <VAS::~VAS()+0x126>
c0009bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bff:	c1 e2 02             	shl    edx,0x2
c0009c02:	01 d0                	add    eax,edx
c0009c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c0e:	83 e0 01             	and    eax,0x1
c0009c11:	0f 84 ab 00 00 00    	je     c0009cc2 <VAS::~VAS()+0x11c>
c0009c17:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c1f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c27:	7f 74                	jg     c0009c9d <VAS::~VAS()+0xf7>
c0009c29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c2d:	c1 e0 0a             	shl    eax,0xa
c0009c30:	89 c2                	mov    edx,eax
c0009c32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c36:	01 d0                	add    eax,edx
c0009c38:	c1 e0 0c             	shl    eax,0xc
c0009c3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c3f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c49:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c53:	6a 01                	push   0x1
c0009c55:	50                   	push   eax
c0009c56:	e8 77 fc ff ff       	call   c00098d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c5b:	83 c4 0c             	add    esp,0xc
c0009c5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c70:	25 01 04 00 00       	and    eax,0x401
c0009c75:	3d 01 04 00 00       	cmp    eax,0x401
c0009c7a:	75 1a                	jne    c0009c96 <VAS::~VAS()+0xf0>
c0009c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c80:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c85:	83 ec 0c             	sub    esp,0xc
c0009c88:	50                   	push   eax
c0009c89:	e8 bb e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c96:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c9b:	eb 82                	jmp    c0009c1f <VAS::~VAS()+0x79>
c0009c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ca1:	25 00 04 00 00       	and    eax,0x400
c0009ca6:	74 1a                	je     c0009cc2 <VAS::~VAS()+0x11c>
c0009ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cac:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	50                   	push   eax
c0009cb5:	e8 8f e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009cba:	83 c4 10             	add    esp,0x10
c0009cbd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cc7:	e9 1a ff ff ff       	jmp    c0009be6 <VAS::~VAS()+0x40>
c0009ccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cd3:	83 ec 0c             	sub    esp,0xc
c0009cd6:	50                   	push   eax
c0009cd7:	e8 43 fc ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009cdc:	83 c4 10             	add    esp,0x10
c0009cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ce6:	83 ec 0c             	sub    esp,0xc
c0009ce9:	50                   	push   eax
c0009cea:	e8 5a e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009cef:	83 c4 10             	add    esp,0x10
c0009cf2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cf7:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009cfc:	83 e8 01             	sub    eax,0x1
c0009cff:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0009d04:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009d09:	85 c0                	test   eax,eax
c0009d0b:	75 01                	jne    c0009d0e <VAS::~VAS()+0x168>
c0009d0d:	fb                   	sti    
c0009d0e:	90                   	nop
c0009d0f:	83 c4 2c             	add    esp,0x2c
c0009d12:	c3                   	ret    
c0009d13:	90                   	nop

c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d14:	55                   	push   ebp
c0009d15:	57                   	push   edi
c0009d16:	56                   	push   esi
c0009d17:	53                   	push   ebx
c0009d18:	83 ec 1c             	sub    esp,0x1c
c0009d1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d23:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d29:	77 08                	ja     c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d2b:	0f 20 d8             	mov    eax,cr3
c0009d2e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d31:	75 49                	jne    c0009d7c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d37:	09 d8                	or     eax,ebx
c0009d39:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d3e:	75 59                	jne    c0009d99 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d40:	89 de                	mov    esi,ebx
c0009d42:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d45:	c1 ee 16             	shr    esi,0x16
c0009d48:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d4f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d53:	74 56                	je     c0009dab <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d5d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d63:	c1 eb 0a             	shr    ebx,0xa
c0009d66:	c1 e6 0c             	shl    esi,0xc
c0009d69:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d6f:	09 d0                	or     eax,edx
c0009d71:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d74:	83 c4 1c             	add    esp,0x1c
c0009d77:	5b                   	pop    ebx
c0009d78:	5e                   	pop    esi
c0009d79:	5f                   	pop    edi
c0009d7a:	5d                   	pop    ebp
c0009d7b:	c3                   	ret    
c0009d7c:	83 ec 0c             	sub    esp,0xc
c0009d7f:	68 18 04 02 c0       	push   0xc0020418
c0009d84:	e8 b0 0b 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0009d89:	83 c4 10             	add    esp,0x10
c0009d8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d90:	09 d8                	or     eax,ebx
c0009d92:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d97:	74 a7                	je     c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009d99:	83 ec 0c             	sub    esp,0xc
c0009d9c:	68 80 04 02 c0       	push   0xc0020480
c0009da1:	e8 6b 6e 00 00       	call   c0010c11 <KePanic(char const*)>
c0009da6:	83 c4 10             	add    esp,0x10
c0009da9:	eb 95                	jmp    c0009d40 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009daf:	e8 fe df ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009db4:	83 ec 0c             	sub    esp,0xc
c0009db7:	89 c5                	mov    ebp,eax
c0009db9:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dbf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dc3:	6a 01                	push   0x1
c0009dc5:	e8 37 f8 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0009dca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd1:	6a 01                	push   0x1
c0009dd3:	50                   	push   eax
c0009dd4:	55                   	push   ebp
c0009dd5:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ddb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ddf:	51                   	push   ecx
c0009de0:	e8 29 01 00 00       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009de5:	83 c4 1c             	add    esp,0x1c
c0009de8:	68 00 10 00 00       	push   0x1000
c0009ded:	6a 00                	push   0x0
c0009def:	50                   	push   eax
c0009df0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009df4:	e8 f7 66 ff ff       	call   c00004f0 <memset>
c0009df9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dfd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e00:	e8 1a fb ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0009e05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e09:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0c:	83 c4 10             	add    esp,0x10
c0009e0f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e12:	e9 3e ff ff ff       	jmp    c0009d55 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e17:	90                   	nop

c0009e18 <VAS::allocatePages(int, int)>:
c0009e18:	55                   	push   ebp
c0009e19:	57                   	push   edi
c0009e1a:	56                   	push   esi
c0009e1b:	53                   	push   ebx
c0009e1c:	83 ec 1c             	sub    esp,0x1c
c0009e1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e27:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e2b:	75 71                	jne    c0009e9e <VAS::allocatePages(int, int)+0x86>
c0009e2d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e34:	85 c0                	test   eax,eax
c0009e36:	74 4d                	je     c0009e85 <VAS::allocatePages(int, int)+0x6d>
c0009e38:	89 dd                	mov    ebp,ebx
c0009e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e3e:	c1 e5 0c             	shl    ebp,0xc
c0009e41:	01 c5                	add    ebp,eax
c0009e43:	85 db                	test   ebx,ebx
c0009e45:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e48:	7e 29                	jle    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009e4a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e4e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e52:	81 cf 00 04 00 00    	or     edi,0x400
c0009e58:	e8 55 df ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009e5d:	57                   	push   edi
c0009e5e:	53                   	push   ebx
c0009e5f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e65:	50                   	push   eax
c0009e66:	56                   	push   esi
c0009e67:	e8 a8 fe ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6c:	83 c4 10             	add    esp,0x10
c0009e6f:	39 dd                	cmp    ebp,ebx
c0009e71:	75 e5                	jne    c0009e58 <VAS::allocatePages(int, int)+0x40>
c0009e73:	0f 20 d8             	mov    eax,cr3
c0009e76:	0f 22 d8             	mov    cr3,eax
c0009e79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e7d:	83 c4 1c             	add    esp,0x1c
c0009e80:	5b                   	pop    ebx
c0009e81:	5e                   	pop    esi
c0009e82:	5f                   	pop    edi
c0009e83:	5d                   	pop    ebp
c0009e84:	c3                   	ret    
c0009e85:	83 ec 0c             	sub    esp,0xc
c0009e88:	68 a4 04 02 c0       	push   0xc00204a4
c0009e8d:	e8 7f 6d 00 00       	call   c0010c11 <KePanic(char const*)>
c0009e92:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e99:	83 c4 10             	add    esp,0x10
c0009e9c:	eb 9a                	jmp    c0009e38 <VAS::allocatePages(int, int)+0x20>
c0009e9e:	83 ec 0c             	sub    esp,0xc
c0009ea1:	53                   	push   ebx
c0009ea2:	e8 5a f7 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0009ea7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eab:	83 c4 10             	add    esp,0x10
c0009eae:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009eb3:	77 37                	ja     c0009eec <VAS::allocatePages(int, int)+0xd4>
c0009eb5:	85 db                	test   ebx,ebx
c0009eb7:	7e ba                	jle    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009eb9:	c1 e3 0c             	shl    ebx,0xc
c0009ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ec0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ec4:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ec7:	81 cf 00 04 00 00    	or     edi,0x400
c0009ecd:	89 c3                	mov    ebx,eax
c0009ecf:	e8 de de ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009ed4:	57                   	push   edi
c0009ed5:	53                   	push   ebx
c0009ed6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009edc:	50                   	push   eax
c0009edd:	56                   	push   esi
c0009ede:	e8 31 fe ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ee3:	83 c4 10             	add    esp,0x10
c0009ee6:	39 dd                	cmp    ebp,ebx
c0009ee8:	75 e5                	jne    c0009ecf <VAS::allocatePages(int, int)+0xb7>
c0009eea:	eb 87                	jmp    c0009e73 <VAS::allocatePages(int, int)+0x5b>
c0009eec:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009ef1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef7:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009efe:	74 b5                	je     c0009eb5 <VAS::allocatePages(int, int)+0x9d>
c0009f00:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f04:	80 ce 01             	or     dh,0x1
c0009f07:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f0b:	eb a8                	jmp    c0009eb5 <VAS::allocatePages(int, int)+0x9d>
c0009f0d:	90                   	nop

c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f0e:	55                   	push   ebp
c0009f0f:	57                   	push   edi
c0009f10:	56                   	push   esi
c0009f11:	53                   	push   ebx
c0009f12:	83 ec 0c             	sub    esp,0xc
c0009f15:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f19:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f1d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f21:	85 db                	test   ebx,ebx
c0009f23:	7e 2f                	jle    c0009f54 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f25:	c1 e3 0c             	shl    ebx,0xc
c0009f28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f2c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f30:	01 d3                	add    ebx,edx
c0009f32:	55                   	push   ebp
c0009f33:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f3b:	29 c2                	sub    edx,eax
c0009f3d:	01 f2                	add    edx,esi
c0009f3f:	52                   	push   edx
c0009f40:	56                   	push   esi
c0009f41:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f47:	57                   	push   edi
c0009f48:	e8 c7 fd ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	39 de                	cmp    esi,ebx
c0009f52:	75 de                	jne    c0009f32 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f54:	0f 20 d8             	mov    eax,cr3
c0009f57:	0f 22 d8             	mov    cr3,eax
c0009f5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5e:	83 c4 0c             	add    esp,0xc
c0009f61:	5b                   	pop    ebx
c0009f62:	5e                   	pop    esi
c0009f63:	5f                   	pop    edi
c0009f64:	5d                   	pop    ebp
c0009f65:	c3                   	ret    

c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f66:	55                   	push   ebp
c0009f67:	57                   	push   edi
c0009f68:	56                   	push   esi
c0009f69:	53                   	push   ebx
c0009f6a:	83 ec 1c             	sub    esp,0x1c
c0009f6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f75:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f79:	09 f8                	or     eax,edi
c0009f7b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4f                	jne    c0009fd5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f8a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f8d:	c1 eb 16             	shr    ebx,0x16
c0009f90:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009f97:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009f9b:	74 52                	je     c0009fef <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009f9d:	0f b6 f2             	movzx  esi,dl
c0009fa0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fa4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fa8:	c1 e8 0a             	shr    eax,0xa
c0009fab:	83 fe 01             	cmp    esi,0x1
c0009fae:	19 d2                	sbb    edx,edx
c0009fb0:	c1 e3 0c             	shl    ebx,0xc
c0009fb3:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fb9:	25 fc 0f 00 00       	and    eax,0xffc
c0009fbe:	01 d8                	add    eax,ebx
c0009fc0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fc4:	09 d9                	or     ecx,ebx
c0009fc6:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fcd:	83 c4 1c             	add    esp,0x1c
c0009fd0:	5b                   	pop    ebx
c0009fd1:	5e                   	pop    esi
c0009fd2:	5f                   	pop    edi
c0009fd3:	5d                   	pop    ebp
c0009fd4:	c3                   	ret    
c0009fd5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fd9:	83 ec 0c             	sub    esp,0xc
c0009fdc:	68 d0 04 02 c0       	push   0xc00204d0
c0009fe1:	e8 2b 6c 00 00       	call   c0010c11 <KePanic(char const*)>
c0009fe6:	83 c4 10             	add    esp,0x10
c0009fe9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fed:	eb 97                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009fef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ff3:	e8 ba dd ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009ff8:	83 ec 0c             	sub    esp,0xc
c0009ffb:	89 c5                	mov    ebp,eax
c0009ffd:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a003:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a007:	6a 01                	push   0x1
c000a009:	e8 f3 f5 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a00e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a015:	6a 01                	push   0x1
c000a017:	50                   	push   eax
c000a018:	55                   	push   ebp
c000a019:	81 cd 07 04 00 00    	or     ebp,0x407
c000a01f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a023:	51                   	push   ecx
c000a024:	e8 e5 fe ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a029:	83 c4 1c             	add    esp,0x1c
c000a02c:	68 00 10 00 00       	push   0x1000
c000a031:	6a 00                	push   0x0
c000a033:	50                   	push   eax
c000a034:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a038:	e8 b3 64 ff ff       	call   c00004f0 <memset>
c000a03d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a041:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a044:	e8 d6 f8 ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000a049:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a04c:	83 c4 10             	add    esp,0x10
c000a04f:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a052:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a056:	e9 42 ff ff ff       	jmp    c0009f9d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a05b:	90                   	nop

c000a05c <VAS::VAS(bool)>:
c000a05c:	53                   	push   ebx
c000a05d:	83 ec 28             	sub    esp,0x28
c000a060:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a064:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a073:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a077:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a07e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a082:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a086:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a089:	e8 24 dd ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a08e:	89 c2                	mov    edx,eax
c000a090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a094:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a097:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a09d:	83 ec 0c             	sub    esp,0xc
c000a0a0:	6a 01                	push   0x1
c000a0a2:	e8 5a f5 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a0a7:	83 c4 10             	add    esp,0x10
c000a0aa:	89 c2                	mov    edx,eax
c000a0ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0b3:	83 ec 0c             	sub    esp,0xc
c000a0b6:	6a 03                	push   0x3
c000a0b8:	6a 01                	push   0x1
c000a0ba:	52                   	push   edx
c000a0bb:	50                   	push   eax
c000a0bc:	53                   	push   ebx
c000a0bd:	e8 4c fe ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0c2:	83 c4 20             	add    esp,0x20
c000a0c5:	89 c2                	mov    edx,eax
c000a0c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0ce:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0d6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0de:	7f 1d                	jg     c000a0fd <VAS::VAS(bool)+0xa1>
c000a0e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0eb:	c1 e2 02             	shl    edx,0x2
c000a0ee:	01 d0                	add    eax,edx
c000a0f0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0f6:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0fb:	eb d9                	jmp    c000a0d6 <VAS::VAS(bool)+0x7a>
c000a0fd:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a105:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a10d:	7f 7e                	jg     c000a18d <VAS::VAS(bool)+0x131>
c000a10f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a113:	2d 00 02 00 00       	sub    eax,0x200
c000a118:	c1 e0 0c             	shl    eax,0xc
c000a11b:	83 c8 05             	or     eax,0x5
c000a11e:	89 c2                	mov    edx,eax
c000a120:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a125:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a12b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a131:	83 e0 10             	and    eax,0x10
c000a134:	0f b6 c0             	movzx  eax,al
c000a137:	85 c0                	test   eax,eax
c000a139:	74 07                	je     c000a142 <VAS::VAS(bool)+0xe6>
c000a13b:	b8 00 01 00 00       	mov    eax,0x100
c000a140:	eb 05                	jmp    c000a147 <VAS::VAS(bool)+0xeb>
c000a142:	b8 00 00 00 00       	mov    eax,0x0
c000a147:	09 d0                	or     eax,edx
c000a149:	89 c1                	mov    ecx,eax
c000a14b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a14f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a152:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a156:	c1 e2 02             	shl    edx,0x2
c000a159:	01 d0                	add    eax,edx
c000a15b:	89 ca                	mov    edx,ecx
c000a15d:	89 10                	mov    DWORD PTR [eax],edx
c000a15f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a163:	2d 40 03 00 00       	sub    eax,0x340
c000a168:	83 f8 7f             	cmp    eax,0x7f
c000a16b:	77 16                	ja     c000a183 <VAS::VAS(bool)+0x127>
c000a16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a171:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a174:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a178:	c1 e2 02             	shl    edx,0x2
c000a17b:	01 d0                	add    eax,edx
c000a17d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a183:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a188:	e9 78 ff ff ff       	jmp    c000a105 <VAS::VAS(bool)+0xa9>
c000a18d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a192:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a198:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a19e:	83 e0 10             	and    eax,0x10
c000a1a1:	0f b6 c0             	movzx  eax,al
c000a1a4:	85 c0                	test   eax,eax
c000a1a6:	74 07                	je     c000a1af <VAS::VAS(bool)+0x153>
c000a1a8:	b8 03 41 00 00       	mov    eax,0x4103
c000a1ad:	eb 05                	jmp    c000a1b4 <VAS::VAS(bool)+0x158>
c000a1af:	b8 03 40 00 00       	mov    eax,0x4003
c000a1b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1b8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1bb:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1c1:	89 02                	mov    DWORD PTR [edx],eax
c000a1c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1ca:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1d5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1db:	83 e0 10             	and    eax,0x10
c000a1de:	0f b6 c0             	movzx  eax,al
c000a1e1:	85 c0                	test   eax,eax
c000a1e3:	74 07                	je     c000a1ec <VAS::VAS(bool)+0x190>
c000a1e5:	b8 00 01 00 00       	mov    eax,0x100
c000a1ea:	eb 05                	jmp    c000a1f1 <VAS::VAS(bool)+0x195>
c000a1ec:	b8 00 00 00 00       	mov    eax,0x0
c000a1f1:	09 c2                	or     edx,eax
c000a1f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1fa:	05 fc 0f 00 00       	add    eax,0xffc
c000a1ff:	83 ca 03             	or     edx,0x3
c000a202:	89 10                	mov    DWORD PTR [eax],edx
c000a204:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a209:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a20f:	83 ec 0c             	sub    esp,0xc
c000a212:	50                   	push   eax
c000a213:	e8 16 21 00 00       	call   c000c32e <Device::getName()>
c000a218:	83 c4 10             	add    esp,0x10
c000a21b:	83 ec 08             	sub    esp,0x8
c000a21e:	68 a0 06 02 c0       	push   0xc00206a0
c000a223:	50                   	push   eax
c000a224:	e8 27 65 ff ff       	call   c0000750 <strcmp>
c000a229:	83 c4 10             	add    esp,0x10
c000a22c:	85 c0                	test   eax,eax
c000a22e:	0f 94 c0             	sete   al
c000a231:	0f b6 c0             	movzx  eax,al
c000a234:	85 c0                	test   eax,eax
c000a236:	74 68                	je     c000a2a0 <VAS::VAS(bool)+0x244>
c000a238:	fa                   	cli    
c000a239:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a23e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a244:	05 7c 09 00 00       	add    eax,0x97c
c000a249:	83 ec 0c             	sub    esp,0xc
c000a24c:	50                   	push   eax
c000a24d:	e8 54 d3 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a252:	83 c4 10             	add    esp,0x10
c000a255:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a25a:	89 c3                	mov    ebx,eax
c000a25c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a261:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a267:	05 7c 09 00 00       	add    eax,0x97c
c000a26c:	83 ec 0c             	sub    esp,0xc
c000a26f:	50                   	push   eax
c000a270:	e8 31 d3 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	83 ec 08             	sub    esp,0x8
c000a27b:	50                   	push   eax
c000a27c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a280:	e8 7b f6 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a285:	83 c4 10             	add    esp,0x10
c000a288:	8b 00                	mov    eax,DWORD PTR [eax]
c000a28a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a28f:	6a 11                	push   0x11
c000a291:	53                   	push   ebx
c000a292:	50                   	push   eax
c000a293:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a297:	e8 78 fa ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a29c:	83 c4 10             	add    esp,0x10
c000a29f:	fb                   	sti    
c000a2a0:	90                   	nop
c000a2a1:	83 c4 28             	add    esp,0x28
c000a2a4:	5b                   	pop    ebx
c000a2a5:	c3                   	ret    

c000a2a6 <VAS::evict(unsigned long)>:
c000a2a6:	55                   	push   ebp
c000a2a7:	57                   	push   edi
c000a2a8:	56                   	push   esi
c000a2a9:	53                   	push   ebx
c000a2aa:	83 ec 1c             	sub    esp,0x1c
c000a2ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2b9:	e8 a1 f4 ff ff       	call   c000975f <Virt::allocateSwapfilePage()>
c000a2be:	89 c7                	mov    edi,eax
c000a2c0:	a1 8c 28 02 c0       	mov    eax,ds:0xc002288c
c000a2c5:	85 c0                	test   eax,eax
c000a2c7:	7e 40                	jle    c000a309 <VAS::evict(unsigned long)+0x63>
c000a2c9:	89 ee                	mov    esi,ebp
c000a2cb:	31 db                	xor    ebx,ebx
c000a2cd:	83 ec 0c             	sub    esp,0xc
c000a2d0:	57                   	push   edi
c000a2d1:	e8 73 f4 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a2d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d9:	01 d8                	add    eax,ebx
c000a2db:	6a 01                	push   0x1
c000a2dd:	31 d2                	xor    edx,edx
c000a2df:	83 c3 01             	add    ebx,0x1
c000a2e2:	52                   	push   edx
c000a2e3:	81 c6 00 02 00 00    	add    esi,0x200
c000a2e9:	50                   	push   eax
c000a2ea:	0f be 05 98 28 02 c0 	movsx  eax,BYTE PTR ds:0xc0022898
c000a2f1:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c000a2f8:	50                   	push   eax
c000a2f9:	e8 ea 31 00 00       	call   c000d4e8 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2fe:	83 c4 20             	add    esp,0x20
c000a301:	39 1d 8c 28 02 c0    	cmp    DWORD PTR ds:0xc002288c,ebx
c000a307:	7f c4                	jg     c000a2cd <VAS::evict(unsigned long)+0x27>
c000a309:	83 ec 08             	sub    esp,0x8
c000a30c:	c1 e7 0c             	shl    edi,0xc
c000a30f:	55                   	push   ebp
c000a310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a314:	50                   	push   eax
c000a315:	e8 e6 f5 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a31a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a31c:	89 d3                	mov    ebx,edx
c000a31e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a324:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a32a:	09 d7                	or     edi,edx
c000a32c:	89 38                	mov    DWORD PTR [eax],edi
c000a32e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a331:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a337:	83 c2 01             	add    edx,0x1
c000a33a:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a340:	e8 04 da ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c000a345:	0f 20 d8             	mov    eax,cr3
c000a348:	0f 22 d8             	mov    cr3,eax
c000a34b:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a351:	51                   	push   ecx
c000a352:	55                   	push   ebp
c000a353:	53                   	push   ebx
c000a354:	68 f4 04 02 c0       	push   0xc00204f4
c000a359:	e8 db 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a35e:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a363:	c7 44 24 50 ae 06 02 c0 	mov    DWORD PTR [esp+0x50],0xc00206ae
c000a36b:	8d 50 01             	lea    edx,[eax+0x1]
c000a36e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a372:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a378:	83 c4 3c             	add    esp,0x3c
c000a37b:	5b                   	pop    ebx
c000a37c:	5e                   	pop    esi
c000a37d:	5f                   	pop    edi
c000a37e:	5d                   	pop    ebp
c000a37f:	e9 b5 05 00 00       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>

c000a384 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a384:	55                   	push   ebp
c000a385:	57                   	push   edi
c000a386:	56                   	push   esi
c000a387:	53                   	push   ebx
c000a388:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a38e:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a395:	89 f3                	mov    ebx,esi
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3a3:	77 22                	ja     c000a3c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3a5:	83 ec 08             	sub    esp,0x8
c000a3a8:	56                   	push   esi
c000a3a9:	68 d1 06 02 c0       	push   0xc00206d1
c000a3ae:	e8 86 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	85 db                	test   ebx,ebx
c000a3b8:	75 2a                	jne    c000a3e4 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3ba:	31 c0                	xor    eax,eax
c000a3bc:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3c2:	5b                   	pop    ebx
c000a3c3:	5e                   	pop    esi
c000a3c4:	5f                   	pop    edi
c000a3c5:	5d                   	pop    ebp
c000a3c6:	c3                   	ret    
c000a3c7:	83 ec 0c             	sub    esp,0xc
c000a3ca:	68 bf 06 02 c0       	push   0xc00206bf
c000a3cf:	e8 3d 68 00 00       	call   c0010c11 <KePanic(char const*)>
c000a3d4:	5f                   	pop    edi
c000a3d5:	5d                   	pop    ebp
c000a3d6:	56                   	push   esi
c000a3d7:	68 d1 06 02 c0       	push   0xc00206d1
c000a3dc:	e8 58 05 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a3e1:	83 c4 10             	add    esp,0x10
c000a3e4:	83 ec 08             	sub    esp,0x8
c000a3e7:	53                   	push   ebx
c000a3e8:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3ef:	51                   	push   ecx
c000a3f0:	e8 0b f5 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a3f5:	83 c4 10             	add    esp,0x10
c000a3f8:	89 c2                	mov    edx,eax
c000a3fa:	85 c0                	test   eax,eax
c000a3fc:	74 bc                	je     c000a3ba <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a3fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a400:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a406:	0f 85 c0 00 00 00    	jne    c000a4cc <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a40c:	89 e8                	mov    eax,ebp
c000a40e:	25 01 04 00 00       	and    eax,0x401
c000a413:	3d 00 04 00 00       	cmp    eax,0x400
c000a418:	75 a0                	jne    c000a3ba <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a41a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a41e:	c1 ed 0c             	shr    ebp,0xc
c000a421:	e8 8c d9 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a426:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a42a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a42c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a432:	09 c1                	or     ecx,eax
c000a434:	81 c9 01 08 00 00    	or     ecx,0x801
c000a43a:	89 0a                	mov    DWORD PTR [edx],ecx
c000a43c:	8b 15 8c 28 02 c0    	mov    edx,DWORD PTR ds:0xc002288c
c000a442:	85 d2                	test   edx,edx
c000a444:	7e 40                	jle    c000a486 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a446:	89 df                	mov    edi,ebx
c000a448:	31 f6                	xor    esi,esi
c000a44a:	83 ec 0c             	sub    esp,0xc
c000a44d:	55                   	push   ebp
c000a44e:	e8 f6 f2 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a453:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a456:	01 f0                	add    eax,esi
c000a458:	6a 01                	push   0x1
c000a45a:	31 d2                	xor    edx,edx
c000a45c:	83 c6 01             	add    esi,0x1
c000a45f:	52                   	push   edx
c000a460:	81 c7 00 02 00 00    	add    edi,0x200
c000a466:	50                   	push   eax
c000a467:	0f be 05 98 28 02 c0 	movsx  eax,BYTE PTR ds:0xc0022898
c000a46e:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c000a475:	50                   	push   eax
c000a476:	e8 01 30 00 00       	call   c000d47c <LogicalDisk::read(unsigned long long, int, void*)>
c000a47b:	83 c4 20             	add    esp,0x20
c000a47e:	39 35 8c 28 02 c0    	cmp    DWORD PTR ds:0xc002288c,esi
c000a484:	7f c4                	jg     c000a44a <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a486:	83 ec 04             	sub    esp,0x4
c000a489:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a48e:	83 e8 01             	sub    eax,0x1
c000a491:	50                   	push   eax
c000a492:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a497:	53                   	push   ebx
c000a498:	68 e4 06 02 c0       	push   0xc00206e4
c000a49d:	e8 97 04 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a4a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4a5:	e8 7c f2 ff ff       	call   c0009726 <Virt::freeSwapfilePage(unsigned long)>
c000a4aa:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	83 e8 01             	sub    eax,0x1
c000a4b5:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000a4ba:	85 c0                	test   eax,eax
c000a4bc:	75 01                	jne    c000a4bf <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4be:	fb                   	sti    
c000a4bf:	0f 20 d8             	mov    eax,cr3
c000a4c2:	0f 22 d8             	mov    cr3,eax
c000a4c5:	b0 01                	mov    al,0x1
c000a4c7:	e9 f0 fe ff ff       	jmp    c000a3bc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4d0:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4d5:	83 ec 0c             	sub    esp,0xc
c000a4d8:	89 de                	mov    esi,ebx
c000a4da:	68 24 05 02 c0       	push   0xc0020524
c000a4df:	e8 55 04 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a4e4:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4e8:	e8 c5 d8 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a4ed:	89 e9                	mov    ecx,ebp
c000a4ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4f5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a4f7:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a4fd:	09 c8                	or     eax,ecx
c000a4ff:	83 c8 02             	or     eax,0x2
c000a502:	89 02                	mov    DWORD PTR [edx],eax
c000a504:	0f 20 d8             	mov    eax,cr3
c000a507:	0f 22 d8             	mov    cr3,eax
c000a50a:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a50e:	89 df                	mov    edi,ebx
c000a510:	89 e9                	mov    ecx,ebp
c000a512:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a514:	b0 01                	mov    al,0x1
c000a516:	83 c4 10             	add    esp,0x10
c000a519:	e9 9e fe ff ff       	jmp    c000a3bc <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a529:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a52d:	50                   	push   eax
c000a52e:	e8 ce f0 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	89 c5                	mov    ebp,eax
c000a538:	6a 07                	push   0x7
c000a53a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53e:	52                   	push   edx
c000a53f:	56                   	push   esi
c000a540:	e8 d3 f8 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	89 c7                	mov    edi,eax
c000a54a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 db                	xor    ebx,ebx
c000a554:	e8 59 d8 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a559:	83 c3 01             	add    ebx,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	56                   	push   esi
c000a565:	e8 aa f7 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	56                   	push   esi
c000a573:	e8 9c f7 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 44 05 02 c0       	push   0xc0020544
c000a59f:	e8 95 03 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 a4 05 02 c0 	mov    DWORD PTR [esp],0xc00205a4
c000a5ab:	e8 89 03 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 62 f3 ff ff       	jmp    c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	89 da                	mov    edx,ebx
c000a5d7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 16 f3 ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ed:	59                   	pop    ecx
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	83 c6 01             	add    esi,0x1
c000a616:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	89 da                	mov    edx,ebx
c000a62e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	83 ec 08             	sub    esp,0x8
c000a660:	89 d0                	mov    eax,edx
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 f9 06 02 c0       	push   0xc00206f9
c000a671:	e8 c3 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a676:	58                   	pop    eax
c000a677:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 24 fc ff ff       	call   c000a2a6 <VAS::evict(unsigned long)>
c000a682:	5b                   	pop    ebx
c000a683:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 0d 07 02 c0       	push   0xc002070d
c000a68d:	e8 a7 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 20 07 02 c0       	push   0xc0020720
c000a6a2:	e8 92 02 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6b7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6df:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e4:	c1 e5 15             	shl    ebp,0x15
c000a6e7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6ec:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 b7 d6 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 fb f7 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 85 d6 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 bb f7 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 1f f3 ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 07 f3 ff ff       	call   c0009a9a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 2d 07 02 c0       	push   0xc002072d
c000a7ac:	e8 88 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 46 07 02 c0       	push   0xc0020746
c000a7ce:	e8 66 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 46 07 02 c0       	push   0xc0020746
c000a7e0:	e8 54 01 00 00       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 4e 07 02 c0 	mov    DWORD PTR [esp],0xc002074e
c000a7ec:	e8 20 64 00 00       	call   c0010c11 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 66 07 02 c0       	push   0xc0020766
c000a7fe:	e8 0e 64 00 00       	call   c0010c11 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 a2 d2 ff ff       	jmp    c0007aae <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 bd d2 ff ff       	jmp    c0007ace <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 b8 d2 ff ff       	jmp    c0007ace <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 b3 d2 ff ff       	jmp    c0007ace <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	be 6f 02 02 c0       	mov    esi,0xc002026f
c000a823:	53                   	push   ebx
c000a824:	83 ec 20             	sub    esp,0x20
c000a827:	a0 6e 02 02 c0       	mov    al,ds:0xc002026e
c000a82c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a830:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a834:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a838:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a83c:	b8 10 00 00 00       	mov    eax,0x10
c000a841:	f7 c7 02 00 00 00    	test   edi,0x2
c000a847:	75 60                	jne    c000a8a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a849:	89 c1                	mov    ecx,eax
c000a84b:	c1 e9 02             	shr    ecx,0x2
c000a84e:	fc                   	cld    
c000a84f:	31 d2                	xor    edx,edx
c000a851:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a853:	a8 02                	test   al,0x2
c000a855:	74 0b                	je     c000a862 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a857:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a85a:	66 89 17             	mov    WORD PTR [edi],dx
c000a85d:	ba 02 00 00 00       	mov    edx,0x2
c000a862:	a8 01                	test   al,0x1
c000a864:	74 06                	je     c000a86c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a866:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a869:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a86c:	89 ee                	mov    esi,ebp
c000a86e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a872:	eb 02                	jmp    c000a876 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a874:	89 c6                	mov    esi,eax
c000a876:	31 d2                	xor    edx,edx
c000a878:	83 c1 01             	add    ecx,0x1
c000a87b:	89 f0                	mov    eax,esi
c000a87d:	f7 f3                	div    ebx
c000a87f:	39 de                	cmp    esi,ebx
c000a881:	73 f1                	jae    c000a874 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a883:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a886:	eb 02                	jmp    c000a88a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a888:	89 c5                	mov    ebp,eax
c000a88a:	31 d2                	xor    edx,edx
c000a88c:	83 e9 01             	sub    ecx,0x1
c000a88f:	89 e8                	mov    eax,ebp
c000a891:	f7 f3                	div    ebx
c000a893:	39 dd                	cmp    ebp,ebx
c000a895:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a899:	88 11                	mov    BYTE PTR [ecx],dl
c000a89b:	73 eb                	jae    c000a888 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a89d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8a1:	83 c4 20             	add    esp,0x20
c000a8a4:	5b                   	pop    ebx
c000a8a5:	5e                   	pop    esi
c000a8a6:	5f                   	pop    edi
c000a8a7:	5d                   	pop    ebp
c000a8a8:	c3                   	ret    
c000a8a9:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8ac:	83 c7 02             	add    edi,0x2
c000a8af:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8b3:	83 c6 02             	add    esi,0x2
c000a8b6:	83 e8 02             	sub    eax,0x2
c000a8b9:	eb 8e                	jmp    c000a849 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8bb <Dbg::logc(char)>:
c000a8bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8bf:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8c6:	75 12                	jne    c000a8da <Dbg::logc(char)+0x1f>
c000a8c8:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8cd:	ec                   	in     al,dx
c000a8ce:	a8 20                	test   al,0x20
c000a8d0:	74 fb                	je     c000a8cd <Dbg::logc(char)+0x12>
c000a8d2:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8d7:	88 c8                	mov    al,cl
c000a8d9:	ee                   	out    dx,al
c000a8da:	c3                   	ret    

c000a8db <Dbg::logs(char*)>:
c000a8db:	53                   	push   ebx
c000a8dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8e0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e3:	85 c0                	test   eax,eax
c000a8e5:	74 11                	je     c000a8f8 <Dbg::logs(char*)+0x1d>
c000a8e7:	83 c3 01             	add    ebx,0x1
c000a8ea:	50                   	push   eax
c000a8eb:	e8 cb ff ff ff       	call   c000a8bb <Dbg::logc(char)>
c000a8f0:	58                   	pop    eax
c000a8f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f4:	85 c0                	test   eax,eax
c000a8f6:	75 ef                	jne    c000a8e7 <Dbg::logs(char*)+0xc>
c000a8f8:	5b                   	pop    ebx
c000a8f9:	c3                   	ret    

c000a8fa <Dbg::logWriteInt(unsigned int)>:
c000a8fa:	83 ec 10             	sub    esp,0x10
c000a8fd:	6a 0a                	push   0xa
c000a8ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a903:	50                   	push   eax
c000a904:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a908:	50                   	push   eax
c000a909:	e8 0d ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a90e:	50                   	push   eax
c000a90f:	e8 c7 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a914:	83 c4 20             	add    esp,0x20
c000a917:	c3                   	ret    

c000a918 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a918:	83 ec 10             	sub    esp,0x10
c000a91b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a91f:	50                   	push   eax
c000a920:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a924:	50                   	push   eax
c000a925:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a929:	52                   	push   edx
c000a92a:	e8 ec fe ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a92f:	50                   	push   eax
c000a930:	e8 a6 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a935:	83 c4 20             	add    esp,0x20
c000a938:	c3                   	ret    

c000a939 <Dbg::kprintf(char const*, ...)>:
c000a939:	55                   	push   ebp
c000a93a:	57                   	push   edi
c000a93b:	56                   	push   esi
c000a93c:	53                   	push   ebx
c000a93d:	83 ec 0c             	sub    esp,0xc
c000a940:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a944:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a94b:	74 08                	je     c000a955 <Dbg::kprintf(char const*, ...)+0x1c>
c000a94d:	83 c4 0c             	add    esp,0xc
c000a950:	5b                   	pop    ebx
c000a951:	5e                   	pop    esi
c000a952:	5f                   	pop    edi
c000a953:	5d                   	pop    ebp
c000a954:	c3                   	ret    
c000a955:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a959:	31 ff                	xor    edi,edi
c000a95b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a95f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a962:	85 c0                	test   eax,eax
c000a964:	74 e7                	je     c000a94d <Dbg::kprintf(char const*, ...)+0x14>
c000a966:	8d 77 01             	lea    esi,[edi+0x1]
c000a969:	83 f8 25             	cmp    eax,0x25
c000a96c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a96f:	75 47                	jne    c000a9b8 <Dbg::kprintf(char const*, ...)+0x7f>
c000a971:	83 c7 02             	add    edi,0x2
c000a974:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a977:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a97a:	83 e8 25             	sub    eax,0x25
c000a97d:	0f b6 c0             	movzx  eax,al
c000a980:	83 f8 53             	cmp    eax,0x53
c000a983:	0f 87 ce 00 00 00    	ja     c000aa57 <Dbg::kprintf(char const*, ...)+0x11e>
c000a989:	ff 24 85 7c 07 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf884]
c000a990:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a994:	89 c8                	mov    eax,ecx
c000a996:	83 c1 04             	add    ecx,0x4
c000a999:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a99d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a99f:	55                   	push   ebp
c000a9a0:	e8 55 ff ff ff       	call   c000a8fa <Dbg::logWriteInt(unsigned int)>
c000a9a5:	58                   	pop    eax
c000a9a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9a9:	85 c0                	test   eax,eax
c000a9ab:	74 a0                	je     c000a94d <Dbg::kprintf(char const*, ...)+0x14>
c000a9ad:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b0:	83 f8 25             	cmp    eax,0x25
c000a9b3:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9b6:	74 b9                	je     c000a971 <Dbg::kprintf(char const*, ...)+0x38>
c000a9b8:	50                   	push   eax
c000a9b9:	89 f7                	mov    edi,esi
c000a9bb:	e8 fb fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000a9c0:	89 ee                	mov    esi,ebp
c000a9c2:	58                   	pop    eax
c000a9c3:	eb e1                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9c9:	89 c8                	mov    eax,ecx
c000a9cb:	83 c1 04             	add    ecx,0x4
c000a9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9d0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d4:	50                   	push   eax
c000a9d5:	e8 01 ff ff ff       	call   c000a8db <Dbg::logs(char*)>
c000a9da:	58                   	pop    eax
c000a9db:	eb c9                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9e1:	89 d0                	mov    eax,edx
c000a9e3:	83 c2 04             	add    edx,0x4
c000a9e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ec:	50                   	push   eax
c000a9ed:	e8 08 ff ff ff       	call   c000a8fa <Dbg::logWriteInt(unsigned int)>
c000a9f2:	58                   	pop    eax
c000a9f3:	eb b1                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9f9:	89 d0                	mov    eax,edx
c000a9fb:	83 c2 04             	add    edx,0x4
c000a9fe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa05:	50                   	push   eax
c000aa06:	e8 b0 fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa0b:	58                   	pop    eax
c000aa0c:	eb 98                	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa12:	89 c8                	mov    eax,ecx
c000aa14:	83 c1 04             	add    ecx,0x4
c000aa17:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1b:	6a 10                	push   0x10
c000aa1d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa1f:	51                   	push   ecx
c000aa20:	e8 f3 fe ff ff       	call   c000a918 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa25:	5d                   	pop    ebp
c000aa26:	58                   	pop    eax
c000aa27:	e9 7a ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa30:	89 d0                	mov    eax,edx
c000aa32:	83 c2 08             	add    edx,0x8
c000aa35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa39:	6a 10                	push   0x10
c000aa3b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa3d:	50                   	push   eax
c000aa3e:	e8 d5 fe ff ff       	call   c000a918 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa43:	58                   	pop    eax
c000aa44:	5a                   	pop    edx
c000aa45:	e9 5c ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4a:	6a 25                	push   0x25
c000aa4c:	e8 6a fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa51:	5a                   	pop    edx
c000aa52:	e9 4f ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa57:	6a 25                	push   0x25
c000aa59:	e8 5d fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa5e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa62:	50                   	push   eax
c000aa63:	e8 53 fe ff ff       	call   c000a8bb <Dbg::logc(char)>
c000aa68:	5a                   	pop    edx
c000aa69:	59                   	pop    ecx
c000aa6a:	e9 37 ff ff ff       	jmp    c000a9a6 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa6f:	90                   	nop

c000aa70 <KiUbsanPrintDetails(char const*, void*)>:
c000aa70:	83 ec 1c             	sub    esp,0x1c
c000aa73:	83 ec 08             	sub    esp,0x8
c000aa76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7a:	68 cc 08 02 c0       	push   0xc00208cc
c000aa7f:	e8 b5 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aa84:	83 c4 10             	add    esp,0x10
c000aa87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa93:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 e0 08 02 c0       	push   0xc00208e0
c000aa9e:	e8 96 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aaad:	83 ec 08             	sub    esp,0x8
c000aab0:	50                   	push   eax
c000aab1:	68 ea 08 02 c0       	push   0xc00208ea
c000aab6:	e8 7e fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aac2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aac5:	83 ec 08             	sub    esp,0x8
c000aac8:	50                   	push   eax
c000aac9:	68 f4 08 02 c0       	push   0xc00208f4
c000aace:	e8 66 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	90                   	nop
c000aad7:	83 c4 1c             	add    esp,0x1c
c000aada:	c3                   	ret    
c000aadb:	90                   	nop

c000aadc <__ubsan_handle_type_mismatch_v1>:
c000aadc:	83 ec 0c             	sub    esp,0xc
c000aadf:	83 ec 08             	sub    esp,0x8
c000aae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aae6:	68 38 0a 02 c0       	push   0xc0020a38
c000aaeb:	e8 80 ff ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aaf8:	75 16                	jne    c000ab10 <__ubsan_handle_type_mismatch_v1+0x34>
c000aafa:	83 ec 0c             	sub    esp,0xc
c000aafd:	68 fe 08 02 c0       	push   0xc00208fe
c000ab02:	e8 32 fe ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	e9 91 00 00 00       	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab0f:	90                   	nop
c000ab10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab17:	85 c0                	test   eax,eax
c000ab19:	74 29                	je     c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab22:	83 e8 01             	sub    eax,0x1
c000ab25:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab29:	75 19                	jne    c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	68 58 0a 02 c0       	push   0xc0020a58
c000ab37:	e8 fd fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	eb 5f                	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab41:	8d 76 00             	lea    esi,[esi+0x0]
c000ab44:	83 ec 0c             	sub    esp,0xc
c000ab47:	68 13 09 02 c0       	push   0xc0020913
c000ab4c:	e8 e8 fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab58:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab5b:	0f b6 c0             	movzx  eax,al
c000ab5e:	83 ec 08             	sub    esp,0x8
c000ab61:	50                   	push   eax
c000ab62:	68 2d 09 02 c0       	push   0xc002092d
c000ab67:	e8 cd fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab76:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab81:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab84:	0f b6 c0             	movzx  eax,al
c000ab87:	8b 04 85 a0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd760]
c000ab8e:	51                   	push   ecx
c000ab8f:	52                   	push   edx
c000ab90:	50                   	push   eax
c000ab91:	68 80 0a 02 c0       	push   0xc0020a80
c000ab96:	e8 9e fd ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	66 90                	xchg   ax,ax
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	68 38 0a 02 c0       	push   0xc0020a38
c000aba8:	e8 64 60 00 00       	call   c0010c11 <KePanic(char const*)>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	8d 76 00             	lea    esi,[esi+0x0]

c000abb8 <__ubsan_handle_pointer_overflow>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	83 ec 08             	sub    esp,0x8
c000abbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abc2:	68 c8 0a 02 c0       	push   0xc0020ac8
c000abc7:	e8 a4 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	83 ec 0c             	sub    esp,0xc
c000abd2:	68 c8 0a 02 c0       	push   0xc0020ac8
c000abd7:	e8 35 60 00 00       	call   c0010c11 <KePanic(char const*)>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	90                   	nop
c000abe0:	83 c4 0c             	add    esp,0xc
c000abe3:	c3                   	ret    

c000abe4 <__ubsan_handle_out_of_bounds>:
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	83 ec 08             	sub    esp,0x8
c000abea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abee:	68 38 09 02 c0       	push   0xc0020938
c000abf3:	e8 78 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	83 ec 0c             	sub    esp,0xc
c000abfe:	68 38 09 02 c0       	push   0xc0020938
c000ac03:	e8 09 60 00 00       	call   c0010c11 <KePanic(char const*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	90                   	nop
c000ac0c:	83 c4 0c             	add    esp,0xc
c000ac0f:	c3                   	ret    

c000ac10 <__ubsan_handle_add_overflow>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 08             	sub    esp,0x8
c000ac16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1a:	68 55 09 02 c0       	push   0xc0020955
c000ac1f:	e8 4c fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	68 55 09 02 c0       	push   0xc0020955
c000ac2f:	e8 dd 5f 00 00       	call   c0010c11 <KePanic(char const*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	90                   	nop
c000ac38:	83 c4 0c             	add    esp,0xc
c000ac3b:	c3                   	ret    

c000ac3c <__ubsan_handle_load_invalid_value>:
c000ac3c:	83 ec 0c             	sub    esp,0xc
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac46:	68 e8 0a 02 c0       	push   0xc0020ae8
c000ac4b:	e8 20 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	83 ec 0c             	sub    esp,0xc
c000ac56:	68 e8 0a 02 c0       	push   0xc0020ae8
c000ac5b:	e8 b1 5f 00 00       	call   c0010c11 <KePanic(char const*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	90                   	nop
c000ac64:	83 c4 0c             	add    esp,0xc
c000ac67:	c3                   	ret    

c000ac68 <__ubsan_handle_divrem_overflow>:
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac72:	68 0c 0b 02 c0       	push   0xc0020b0c
c000ac77:	e8 f4 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	68 0c 0b 02 c0       	push   0xc0020b0c
c000ac87:	e8 85 5f 00 00       	call   c0010c11 <KePanic(char const*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	90                   	nop
c000ac90:	83 c4 0c             	add    esp,0xc
c000ac93:	c3                   	ret    

c000ac94 <__ubsan_handle_mul_overflow>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	83 ec 08             	sub    esp,0x8
c000ac9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9e:	68 71 09 02 c0       	push   0xc0020971
c000aca3:	e8 c8 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	83 ec 0c             	sub    esp,0xc
c000acae:	68 71 09 02 c0       	push   0xc0020971
c000acb3:	e8 59 5f 00 00       	call   c0010c11 <KePanic(char const*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	90                   	nop
c000acbc:	83 c4 0c             	add    esp,0xc
c000acbf:	c3                   	ret    

c000acc0 <__ubsan_handle_sub_overflow>:
c000acc0:	83 ec 0c             	sub    esp,0xc
c000acc3:	83 ec 08             	sub    esp,0x8
c000acc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acca:	68 8d 09 02 c0       	push   0xc002098d
c000accf:	e8 9c fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	83 ec 0c             	sub    esp,0xc
c000acda:	68 8d 09 02 c0       	push   0xc002098d
c000acdf:	e8 2d 5f 00 00       	call   c0010c11 <KePanic(char const*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	90                   	nop
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <__ubsan_handle_shift_out_of_bounds>:
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	83 ec 08             	sub    esp,0x8
c000acf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf6:	68 2c 0b 02 c0       	push   0xc0020b2c
c000acfb:	e8 70 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	68 2c 0b 02 c0       	push   0xc0020b2c
c000ad0b:	e8 01 5f 00 00       	call   c0010c11 <KePanic(char const*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	90                   	nop
c000ad14:	83 c4 0c             	add    esp,0xc
c000ad17:	c3                   	ret    

c000ad18 <__ubsan_handle_negate_overflow>:
c000ad18:	83 ec 0c             	sub    esp,0xc
c000ad1b:	83 ec 08             	sub    esp,0x8
c000ad1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad22:	68 50 0b 02 c0       	push   0xc0020b50
c000ad27:	e8 44 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad2c:	83 c4 10             	add    esp,0x10
c000ad2f:	83 ec 0c             	sub    esp,0xc
c000ad32:	68 50 0b 02 c0       	push   0xc0020b50
c000ad37:	e8 d5 5e 00 00       	call   c0010c11 <KePanic(char const*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	90                   	nop
c000ad40:	83 c4 0c             	add    esp,0xc
c000ad43:	c3                   	ret    

c000ad44 <File::read(unsigned long long, void*, int*)>:
c000ad44:	53                   	push   ebx
c000ad45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad49:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad4d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad54:	83 f8 19             	cmp    eax,0x19
c000ad57:	77 35                	ja     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad59:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000ad60:	85 c0                	test   eax,eax
c000ad62:	74 2a                	je     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad64:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad6a:	85 c0                	test   eax,eax
c000ad6c:	74 20                	je     c000ad8e <File::read(unsigned long long, void*, int*)+0x4a>
c000ad6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad72:	74 21                	je     c000ad95 <File::read(unsigned long long, void*, int*)+0x51>
c000ad74:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad7a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad88:	5b                   	pop    ebx
c000ad89:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad8c:	ff e0                	jmp    eax
c000ad8e:	b8 0b 00 00 00       	mov    eax,0xb
c000ad93:	eb 05                	jmp    c000ad9a <File::read(unsigned long long, void*, int*)+0x56>
c000ad95:	b8 05 00 00 00       	mov    eax,0x5
c000ad9a:	5b                   	pop    ebx
c000ad9b:	c3                   	ret    

c000ad9c <File::write(unsigned long long, void*, int*)>:
c000ad9c:	53                   	push   ebx
c000ad9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ada1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ada5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adac:	83 f8 19             	cmp    eax,0x19
c000adaf:	77 35                	ja     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adb1:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000adb8:	85 c0                	test   eax,eax
c000adba:	74 2a                	je     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adbc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000adc2:	85 c0                	test   eax,eax
c000adc4:	74 20                	je     c000ade6 <File::write(unsigned long long, void*, int*)+0x4a>
c000adc6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adca:	74 21                	je     c000aded <File::write(unsigned long long, void*, int*)+0x51>
c000adcc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000add2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000add8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000addc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ade0:	5b                   	pop    ebx
c000ade1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ade4:	ff e0                	jmp    eax
c000ade6:	b8 0b 00 00 00       	mov    eax,0xb
c000adeb:	eb 05                	jmp    c000adf2 <File::write(unsigned long long, void*, int*)+0x56>
c000aded:	b8 05 00 00 00       	mov    eax,0x5
c000adf2:	5b                   	pop    ebx
c000adf3:	c3                   	ret    

c000adf4 <Directory::read(unsigned long long, void*, int*)>:
c000adf4:	53                   	push   ebx
c000adf5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adf9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000adfd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ae04:	83 f8 19             	cmp    eax,0x19
c000ae07:	77 35                	ja     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae09:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 2a                	je     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae14:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ae1a:	85 c0                	test   eax,eax
c000ae1c:	74 20                	je     c000ae3e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae22:	74 21                	je     c000ae45 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ae24:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae26:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae2a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae38:	5b                   	pop    ebx
c000ae39:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000ae3c:	ff e0                	jmp    eax
c000ae3e:	b8 0b 00 00 00       	mov    eax,0xb
c000ae43:	eb 05                	jmp    c000ae4a <Directory::read(unsigned long long, void*, int*)+0x56>
c000ae45:	b8 05 00 00 00       	mov    eax,0x5
c000ae4a:	5b                   	pop    ebx
c000ae4b:	c3                   	ret    

c000ae4c <Directory::write(unsigned long long, void*, int*)>:
c000ae4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae50:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae57:	b8 0b 00 00 00       	mov    eax,0xb
c000ae5c:	83 fa 19             	cmp    edx,0x19
c000ae5f:	77 18                	ja     c000ae79 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae61:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000ae68:	85 d2                	test   edx,edx
c000ae6a:	74 0d                	je     c000ae79 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae6c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ae73:	19 c0                	sbb    eax,eax
c000ae75:	83 e0 0a             	and    eax,0xa
c000ae78:	40                   	inc    eax
c000ae79:	c3                   	ret    

c000ae7a <File::isAtty()>:
c000ae7a:	31 c0                	xor    eax,eax
c000ae7c:	c3                   	ret    
c000ae7d:	90                   	nop

c000ae7e <Directory::isAtty()>:
c000ae7e:	31 c0                	xor    eax,eax
c000ae80:	c3                   	ret    
c000ae81:	90                   	nop

c000ae82 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae82:	b8 0a 00 00 00       	mov    eax,0xa
c000ae87:	c3                   	ret    

c000ae88 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae88:	b8 0a 00 00 00       	mov    eax,0xa
c000ae8d:	c3                   	ret    

c000ae8e <Filesystem::allocateSwapfile(char const*, int)>:
c000ae8e:	31 c0                	xor    eax,eax
c000ae90:	31 d2                	xor    edx,edx
c000ae92:	c3                   	ret    
c000ae93:	90                   	nop

c000ae94 <File::~File()>:
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	ba e4 0b 02 c0       	mov    edx,0xc0020be4
c000ae9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea0:	89 10                	mov    DWORD PTR [eax],edx
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	83 ec 0c             	sub    esp,0xc
c000aea9:	50                   	push   eax
c000aeaa:	e8 e9 e4 ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c000aeaf:	83 c4 10             	add    esp,0x10
c000aeb2:	90                   	nop
c000aeb3:	83 c4 0c             	add    esp,0xc
c000aeb6:	c3                   	ret    
c000aeb7:	90                   	nop

c000aeb8 <File::~File()>:
c000aeb8:	83 ec 0c             	sub    esp,0xc
c000aebb:	83 ec 0c             	sub    esp,0xc
c000aebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec2:	e8 cd ff ff ff       	call   c000ae94 <File::~File()>
c000aec7:	83 c4 10             	add    esp,0x10
c000aeca:	83 ec 08             	sub    esp,0x8
c000aecd:	68 14 01 00 00       	push   0x114
c000aed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed6:	e8 31 f9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	83 c4 0c             	add    esp,0xc
c000aee1:	c3                   	ret    

c000aee2 <Directory::~Directory()>:
c000aee2:	83 ec 0c             	sub    esp,0xc
c000aee5:	ba 00 0c 02 c0       	mov    edx,0xc0020c00
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	89 10                	mov    DWORD PTR [eax],edx
c000aef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	50                   	push   eax
c000aef8:	e8 9b e4 ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c000aefd:	83 c4 10             	add    esp,0x10
c000af00:	90                   	nop
c000af01:	83 c4 0c             	add    esp,0xc
c000af04:	c3                   	ret    
c000af05:	90                   	nop

c000af06 <Directory::~Directory()>:
c000af06:	83 ec 0c             	sub    esp,0xc
c000af09:	83 ec 0c             	sub    esp,0xc
c000af0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af10:	e8 cd ff ff ff       	call   c000aee2 <Directory::~Directory()>
c000af15:	83 c4 10             	add    esp,0x10
c000af18:	83 ec 08             	sub    esp,0x8
c000af1b:	68 14 01 00 00       	push   0x114
c000af20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af24:	e8 e3 f8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000af29:	83 c4 10             	add    esp,0x10
c000af2c:	83 c4 0c             	add    esp,0xc
c000af2f:	c3                   	ret    

c000af30 <Filesystem::Filesystem()>:
c000af30:	ba 78 0b 02 c0       	mov    edx,0xc0020b78
c000af35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af39:	89 10                	mov    DWORD PTR [eax],edx
c000af3b:	8b 15 b4 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fb4
c000af41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af4c:	a3 b4 5f 02 c0       	mov    ds:0xc0025fb4,eax
c000af51:	90                   	nop
c000af52:	c3                   	ret    
c000af53:	90                   	nop

c000af54 <Filesystem::~Filesystem()>:
c000af54:	ba 78 0b 02 c0       	mov    edx,0xc0020b78
c000af59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af5d:	89 10                	mov    DWORD PTR [eax],edx
c000af5f:	90                   	nop
c000af60:	c3                   	ret    
c000af61:	90                   	nop

c000af62 <Filesystem::~Filesystem()>:
c000af62:	83 ec 0c             	sub    esp,0xc
c000af65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af69:	e8 e6 ff ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c000af6e:	83 c4 04             	add    esp,0x4
c000af71:	83 ec 08             	sub    esp,0x8
c000af74:	6a 08                	push   0x8
c000af76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af7a:	e8 8d f8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000af7f:	83 c4 10             	add    esp,0x10
c000af82:	83 c4 0c             	add    esp,0xc
c000af85:	c3                   	ret    

c000af86 <Fs::getcwd(Process*, char*, int)>:
c000af86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af8a:	31 c0                	xor    eax,eax
c000af8c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af8f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af93:	7d 15                	jge    c000afaa <Fs::getcwd(Process*, char*, int)+0x24>
c000af95:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af99:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000afa0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000afa3:	84 c9                	test   cl,cl
c000afa5:	74 06                	je     c000afad <Fs::getcwd(Process*, char*, int)+0x27>
c000afa7:	40                   	inc    eax
c000afa8:	eb e2                	jmp    c000af8c <Fs::getcwd(Process*, char*, int)+0x6>
c000afaa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000afad:	31 c0                	xor    eax,eax
c000afaf:	c3                   	ret    

c000afb0 <Fs::initVFS()>:
c000afb0:	83 ec 18             	sub    esp,0x18
c000afb3:	6a 08                	push   0x8
c000afb5:	e8 f4 ca ff ff       	call   c0007aae <malloc>
c000afba:	89 04 24             	mov    DWORD PTR [esp],eax
c000afbd:	e8 7a e0 00 00       	call   c001903c <FAT::FAT()>
c000afc2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afc9:	e8 e0 ca ff ff       	call   c0007aae <malloc>
c000afce:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd1:	e8 92 ef 00 00       	call   c0019f68 <ISO9660::ISO9660()>
c000afd6:	83 c4 1c             	add    esp,0x1c
c000afd9:	c3                   	ret    

c000afda <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afda:	55                   	push   ebp
c000afdb:	57                   	push   edi
c000afdc:	56                   	push   esi
c000afdd:	53                   	push   ebx
c000afde:	81 ec 10 04 00 00    	sub    esp,0x410
c000afe4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afeb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000aff2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aff9:	68 00 04 00 00       	push   0x400
c000affe:	6a 00                	push   0x0
c000b000:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b004:	56                   	push   esi
c000b005:	e8 e6 54 ff ff       	call   c00004f0 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b011:	75 0b                	jne    c000b01e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b013:	50                   	push   eax
c000b014:	50                   	push   eax
c000b015:	57                   	push   edi
c000b016:	56                   	push   esi
c000b017:	e8 24 56 ff ff       	call   c0000640 <strcpy>
c000b01c:	eb 44                	jmp    c000b062 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b01e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b021:	83 f8 5c             	cmp    eax,0x5c
c000b024:	74 05                	je     c000b02b <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b026:	83 f8 2f             	cmp    eax,0x2f
c000b029:	75 18                	jne    c000b043 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b02b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b02e:	3c 60                	cmp    al,0x60
c000b030:	7e 03                	jle    c000b035 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b032:	83 e8 20             	sub    eax,0x20
c000b035:	88 04 24             	mov    BYTE PTR [esp],al
c000b038:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b03f:	50                   	push   eax
c000b040:	50                   	push   eax
c000b041:	eb 18                	jmp    c000b05b <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b043:	50                   	push   eax
c000b044:	50                   	push   eax
c000b045:	55                   	push   ebp
c000b046:	56                   	push   esi
c000b047:	e8 f4 55 ff ff       	call   c0000640 <strcpy>
c000b04c:	5a                   	pop    edx
c000b04d:	59                   	pop    ecx
c000b04e:	68 ff 1a 02 c0       	push   0xc0021aff
c000b053:	56                   	push   esi
c000b054:	e8 e7 57 ff ff       	call   c0000840 <strcat>
c000b059:	5d                   	pop    ebp
c000b05a:	58                   	pop    eax
c000b05b:	57                   	push   edi
c000b05c:	56                   	push   esi
c000b05d:	e8 de 57 ff ff       	call   c0000840 <strcat>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b068:	3c 60                	cmp    al,0x60
c000b06a:	7e 03                	jle    c000b06f <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b06c:	83 e8 20             	sub    eax,0x20
c000b06f:	88 04 24             	mov    BYTE PTR [esp],al
c000b072:	88 03                	mov    BYTE PTR [ebx],al
c000b074:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b07b:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b081:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b085:	bf 03 00 00 00       	mov    edi,0x3
c000b08a:	b8 03 00 00 00       	mov    eax,0x3
c000b08f:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b093:	89 ea                	mov    edx,ebp
c000b095:	85 ed                	test   ebp,ebp
c000b097:	0f 84 97 00 00 00    	je     c000b134 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b09d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b0a0:	83 fd 5c             	cmp    ebp,0x5c
c000b0a3:	74 05                	je     c000b0aa <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b0a5:	83 fd 2f             	cmp    ebp,0x2f
c000b0a8:	75 12                	jne    c000b0bc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b0aa:	89 c5                	mov    ebp,eax
c000b0ac:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b0b1:	74 09                	je     c000b0bc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b0b3:	40                   	inc    eax
c000b0b4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b0b8:	89 cf                	mov    edi,ecx
c000b0ba:	eb d3                	jmp    c000b08f <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b0bc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b0c1:	0f be ea             	movsx  ebp,dl
c000b0c4:	75 5e                	jne    c000b124 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b0c6:	83 fd 2e             	cmp    ebp,0x2e
c000b0c9:	75 59                	jne    c000b124 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b0cb:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0cf:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b0d4:	74 18                	je     c000b0ee <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b0d6:	83 fd 2e             	cmp    ebp,0x2e
c000b0d9:	74 53                	je     c000b12e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b0db:	89 f9                	mov    ecx,edi
c000b0dd:	41                   	inc    ecx
c000b0de:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b0e2:	83 fa 2f             	cmp    edx,0x2f
c000b0e5:	74 f6                	je     c000b0dd <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b0e7:	83 fa 5c             	cmp    edx,0x5c
c000b0ea:	74 f1                	je     c000b0dd <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b0ec:	eb ca                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b0ee:	83 fd 2e             	cmp    ebp,0x2e
c000b0f1:	74 3b                	je     c000b12e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b0f3:	83 f8 03             	cmp    eax,0x3
c000b0f6:	74 c0                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b0f8:	41                   	inc    ecx
c000b0f9:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b0fd:	83 fa 2f             	cmp    edx,0x2f
c000b100:	74 f6                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b102:	83 fa 5c             	cmp    edx,0x5c
c000b105:	74 f1                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b107:	48                   	dec    eax
c000b108:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b10c:	75 06                	jne    c000b114 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b10e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b112:	eb f3                	jmp    c000b107 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b114:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b118:	74 07                	je     c000b121 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b11a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b11e:	48                   	dec    eax
c000b11f:	eb f3                	jmp    c000b114 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b121:	40                   	inc    eax
c000b122:	eb 94                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b124:	83 fd 2f             	cmp    ebp,0x2f
c000b127:	74 8f                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b129:	83 fd 5c             	cmp    ebp,0x5c
c000b12c:	74 8a                	je     c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b12e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b131:	40                   	inc    eax
c000b132:	eb 84                	jmp    c000b0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b134:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b138:	83 ec 0c             	sub    esp,0xc
c000b13b:	53                   	push   ebx
c000b13c:	e8 2f 54 ff ff       	call   c0000570 <strlen>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b149:	75 26                	jne    c000b171 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b14b:	83 ec 0c             	sub    esp,0xc
c000b14e:	53                   	push   ebx
c000b14f:	e8 1c 54 ff ff       	call   c0000570 <strlen>
c000b154:	83 c4 10             	add    esp,0x10
c000b157:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b15c:	74 26                	je     c000b184 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b15e:	83 ec 0c             	sub    esp,0xc
c000b161:	53                   	push   ebx
c000b162:	e8 09 54 ff ff       	call   c0000570 <strlen>
c000b167:	83 c4 10             	add    esp,0x10
c000b16a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b16f:	eb c7                	jmp    c000b138 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	53                   	push   ebx
c000b175:	e8 f6 53 ff ff       	call   c0000570 <strlen>
c000b17a:	83 c4 10             	add    esp,0x10
c000b17d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b182:	74 c7                	je     c000b14b <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b184:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b18a:	5b                   	pop    ebx
c000b18b:	5e                   	pop    esi
c000b18c:	5f                   	pop    edi
c000b18d:	5d                   	pop    ebp
c000b18e:	c3                   	ret    
c000b18f:	90                   	nop

c000b190 <File::File(char const*, Process*)>:
c000b190:	83 ec 0c             	sub    esp,0xc
c000b193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b197:	83 ec 08             	sub    esp,0x8
c000b19a:	6a 00                	push   0x0
c000b19c:	50                   	push   eax
c000b19d:	e8 10 e0 ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	ba e4 0b 02 c0       	mov    edx,0xc0020be4
c000b1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ae:	89 10                	mov    DWORD PTR [eax],edx
c000b1b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1be:	83 c0 0d             	add    eax,0xd
c000b1c1:	83 ec 04             	sub    esp,0x4
c000b1c4:	52                   	push   edx
c000b1c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1c9:	50                   	push   eax
c000b1ca:	e8 0b fe ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b1cf:	83 c4 10             	add    esp,0x10
c000b1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1d9:	83 e8 41             	sub    eax,0x41
c000b1dc:	88 c2                	mov    dl,al
c000b1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1fa:	0f b6 c0             	movzx  eax,al
c000b1fd:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b204:	85 c0                	test   eax,eax
c000b206:	74 3e                	je     c000b246 <File::File(char const*, Process*)+0xb6>
c000b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b212:	0f b6 c0             	movzx  eax,al
c000b215:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b21c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b222:	85 c0                	test   eax,eax
c000b224:	75 20                	jne    c000b246 <File::File(char const*, Process*)+0xb6>
c000b226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b230:	0f b6 c0             	movzx  eax,al
c000b233:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b23a:	83 ec 0c             	sub    esp,0xc
c000b23d:	50                   	push   eax
c000b23e:	e8 77 21 00 00       	call   c000d3ba <LogicalDisk::mount()>
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	90                   	nop
c000b247:	83 c4 0c             	add    esp,0xc
c000b24a:	c3                   	ret    
c000b24b:	90                   	nop

c000b24c <File::open(FileOpenMode)>:
c000b24c:	53                   	push   ebx
c000b24d:	b8 0b 00 00 00       	mov    eax,0xb
c000b252:	83 ec 08             	sub    esp,0x8
c000b255:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b259:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b260:	83 fa 19             	cmp    edx,0x19
c000b263:	77 40                	ja     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b265:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b26c:	85 d2                	test   edx,edx
c000b26e:	74 35                	je     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b270:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b276:	85 d2                	test   edx,edx
c000b278:	74 2b                	je     c000b2a5 <File::open(FileOpenMode)+0x59>
c000b27a:	b8 06 00 00 00       	mov    eax,0x6
c000b27f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b283:	75 20                	jne    c000b2a5 <File::open(FileOpenMode)+0x59>
c000b285:	8b 02                	mov    eax,DWORD PTR [edx]
c000b287:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b28d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b291:	51                   	push   ecx
c000b292:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b295:	51                   	push   ecx
c000b296:	52                   	push   edx
c000b297:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b29a:	83 c4 10             	add    esp,0x10
c000b29d:	85 c0                	test   eax,eax
c000b29f:	75 04                	jne    c000b2a5 <File::open(FileOpenMode)+0x59>
c000b2a1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b2a5:	83 c4 08             	add    esp,0x8
c000b2a8:	5b                   	pop    ebx
c000b2a9:	c3                   	ret    

c000b2aa <File::close()>:
c000b2aa:	53                   	push   ebx
c000b2ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2b7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2be:	83 f9 19             	cmp    ecx,0x19
c000b2c1:	77 41                	ja     c000b304 <File::close()+0x5a>
c000b2c3:	8b 1c 8d 20 84 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b2ca:	85 db                	test   ebx,ebx
c000b2cc:	74 36                	je     c000b304 <File::close()+0x5a>
c000b2ce:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b2d5:	74 2d                	je     c000b304 <File::close()+0x5a>
c000b2d7:	b8 05 00 00 00       	mov    eax,0x5
c000b2dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2e0:	74 22                	je     c000b304 <File::close()+0x5a>
c000b2e2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b2e6:	8b 04 8d 20 84 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7be0]
c000b2ed:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2f3:	53                   	push   ebx
c000b2f4:	53                   	push   ebx
c000b2f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2fd:	50                   	push   eax
c000b2fe:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	83 c4 08             	add    esp,0x8
c000b307:	5b                   	pop    ebx
c000b308:	c3                   	ret    
c000b309:	90                   	nop

c000b30a <File::seek(unsigned long long)>:
c000b30a:	56                   	push   esi
c000b30b:	53                   	push   ebx
c000b30c:	b8 0b 00 00 00       	mov    eax,0xb
c000b311:	51                   	push   ecx
c000b312:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b316:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b31a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b321:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b325:	83 fa 19             	cmp    edx,0x19
c000b328:	77 31                	ja     c000b35b <File::seek(unsigned long long)+0x51>
c000b32a:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b331:	85 d2                	test   edx,edx
c000b333:	74 26                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b33b:	85 d2                	test   edx,edx
c000b33d:	74 1c                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b33f:	b8 05 00 00 00       	mov    eax,0x5
c000b344:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b348:	74 11                	je     c000b35b <File::seek(unsigned long long)+0x51>
c000b34a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b34c:	53                   	push   ebx
c000b34d:	51                   	push   ecx
c000b34e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b354:	52                   	push   edx
c000b355:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	5a                   	pop    edx
c000b35c:	5b                   	pop    ebx
c000b35d:	5e                   	pop    esi
c000b35e:	c3                   	ret    
c000b35f:	90                   	nop

c000b360 <File::truncate(unsigned long long)>:
c000b360:	56                   	push   esi
c000b361:	53                   	push   ebx
c000b362:	b8 0b 00 00 00       	mov    eax,0xb
c000b367:	51                   	push   ecx
c000b368:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b36c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b370:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b377:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b37b:	83 fa 19             	cmp    edx,0x19
c000b37e:	77 31                	ja     c000b3b1 <File::truncate(unsigned long long)+0x51>
c000b380:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b387:	85 d2                	test   edx,edx
c000b389:	74 26                	je     c000b3b1 <File::truncate(unsigned long long)+0x51>
c000b38b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b391:	85 d2                	test   edx,edx
c000b393:	74 1c                	je     c000b3b1 <File::truncate(unsigned long long)+0x51>
c000b395:	b8 05 00 00 00       	mov    eax,0x5
c000b39a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b39e:	74 11                	je     c000b3b1 <File::truncate(unsigned long long)+0x51>
c000b3a0:	8b 02                	mov    eax,DWORD PTR [edx]
c000b3a2:	53                   	push   ebx
c000b3a3:	51                   	push   ecx
c000b3a4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b3aa:	52                   	push   edx
c000b3ab:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b3ae:	83 c4 10             	add    esp,0x10
c000b3b1:	5a                   	pop    edx
c000b3b2:	5b                   	pop    ebx
c000b3b3:	5e                   	pop    esi
c000b3b4:	c3                   	ret    
c000b3b5:	90                   	nop

c000b3b6 <File::tell(unsigned long long*)>:
c000b3b6:	83 ec 0c             	sub    esp,0xc
c000b3b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b3be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b3c2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b3c9:	83 fa 19             	cmp    edx,0x19
c000b3cc:	77 34                	ja     c000b402 <File::tell(unsigned long long*)+0x4c>
c000b3ce:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b3d5:	85 d2                	test   edx,edx
c000b3d7:	74 29                	je     c000b402 <File::tell(unsigned long long*)+0x4c>
c000b3d9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b3df:	85 d2                	test   edx,edx
c000b3e1:	74 1f                	je     c000b402 <File::tell(unsigned long long*)+0x4c>
c000b3e3:	b8 05 00 00 00       	mov    eax,0x5
c000b3e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b3ec:	74 14                	je     c000b402 <File::tell(unsigned long long*)+0x4c>
c000b3ee:	50                   	push   eax
c000b3ef:	8b 02                	mov    eax,DWORD PTR [edx]
c000b3f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3f5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b3fb:	52                   	push   edx
c000b3fc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b3ff:	83 c4 10             	add    esp,0x10
c000b402:	83 c4 0c             	add    esp,0xc
c000b405:	c3                   	ret    

c000b406 <File::rewind()>:
c000b406:	83 ec 10             	sub    esp,0x10
c000b409:	6a 00                	push   0x0
c000b40b:	6a 00                	push   0x0
c000b40d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b411:	e8 f4 fe ff ff       	call   c000b30a <File::seek(unsigned long long)>
c000b416:	83 c4 1c             	add    esp,0x1c
c000b419:	c3                   	ret    

c000b41a <File::unlink()>:
c000b41a:	83 ec 0c             	sub    esp,0xc
c000b41d:	b8 0b 00 00 00       	mov    eax,0xb
c000b422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b426:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b42d:	83 f9 19             	cmp    ecx,0x19
c000b430:	77 2f                	ja     c000b461 <File::unlink()+0x47>
c000b432:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b439:	85 c9                	test   ecx,ecx
c000b43b:	74 24                	je     c000b461 <File::unlink()+0x47>
c000b43d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b443:	85 c9                	test   ecx,ecx
c000b445:	74 1a                	je     c000b461 <File::unlink()+0x47>
c000b447:	b8 06 00 00 00       	mov    eax,0x6
c000b44c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b450:	75 0f                	jne    c000b461 <File::unlink()+0x47>
c000b452:	83 c2 0d             	add    edx,0xd
c000b455:	50                   	push   eax
c000b456:	50                   	push   eax
c000b457:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b459:	52                   	push   edx
c000b45a:	51                   	push   ecx
c000b45b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b45e:	83 c4 10             	add    esp,0x10
c000b461:	83 c4 0c             	add    esp,0xc
c000b464:	c3                   	ret    
c000b465:	90                   	nop

c000b466 <File::rename(char const*)>:
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	b8 0b 00 00 00       	mov    eax,0xb
c000b46e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b472:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b479:	83 f9 19             	cmp    ecx,0x19
c000b47c:	77 32                	ja     c000b4b0 <File::rename(char const*)+0x4a>
c000b47e:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b485:	85 c9                	test   ecx,ecx
c000b487:	74 27                	je     c000b4b0 <File::rename(char const*)+0x4a>
c000b489:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b48f:	85 c9                	test   ecx,ecx
c000b491:	74 1d                	je     c000b4b0 <File::rename(char const*)+0x4a>
c000b493:	b8 06 00 00 00       	mov    eax,0x6
c000b498:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b49c:	75 12                	jne    c000b4b0 <File::rename(char const*)+0x4a>
c000b49e:	83 c2 0d             	add    edx,0xd
c000b4a1:	50                   	push   eax
c000b4a2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b4a8:	52                   	push   edx
c000b4a9:	51                   	push   ecx
c000b4aa:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4ad:	83 c4 10             	add    esp,0x10
c000b4b0:	83 c4 0c             	add    esp,0xc
c000b4b3:	c3                   	ret    

c000b4b4 <File::chfatattr(unsigned char, unsigned char)>:
c000b4b4:	57                   	push   edi
c000b4b5:	b8 0b 00 00 00       	mov    eax,0xb
c000b4ba:	56                   	push   esi
c000b4bb:	53                   	push   ebx
c000b4bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b4c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4cb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b4cf:	83 f9 19             	cmp    ecx,0x19
c000b4d2:	77 37                	ja     c000b50b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4d4:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b4db:	85 c9                	test   ecx,ecx
c000b4dd:	74 2c                	je     c000b50b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b4e5:	85 c9                	test   ecx,ecx
c000b4e7:	74 22                	je     c000b50b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4e9:	b8 06 00 00 00       	mov    eax,0x6
c000b4ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4f2:	75 17                	jne    c000b50b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b4f6:	89 f0                	mov    eax,esi
c000b4f8:	83 c2 0d             	add    edx,0xd
c000b4fb:	0f b6 f0             	movzx  esi,al
c000b4fe:	0f b6 db             	movzx  ebx,bl
c000b501:	56                   	push   esi
c000b502:	53                   	push   ebx
c000b503:	52                   	push   edx
c000b504:	51                   	push   ecx
c000b505:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	5b                   	pop    ebx
c000b50c:	5e                   	pop    esi
c000b50d:	5f                   	pop    edi
c000b50e:	c3                   	ret    
c000b50f:	90                   	nop

c000b510 <File::exists()>:
c000b510:	83 ec 0c             	sub    esp,0xc
c000b513:	31 c0                	xor    eax,eax
c000b515:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b519:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b520:	83 f9 19             	cmp    ecx,0x19
c000b523:	77 24                	ja     c000b549 <File::exists()+0x39>
c000b525:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b52c:	85 c9                	test   ecx,ecx
c000b52e:	74 19                	je     c000b549 <File::exists()+0x39>
c000b530:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b536:	85 c9                	test   ecx,ecx
c000b538:	74 0f                	je     c000b549 <File::exists()+0x39>
c000b53a:	83 c2 0d             	add    edx,0xd
c000b53d:	50                   	push   eax
c000b53e:	50                   	push   eax
c000b53f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b541:	52                   	push   edx
c000b542:	51                   	push   ecx
c000b543:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	83 c4 0c             	add    esp,0xc
c000b54c:	c3                   	ret    
c000b54d:	90                   	nop

c000b54e <File::stat(unsigned long long*, bool*)>:
c000b54e:	56                   	push   esi
c000b54f:	53                   	push   ebx
c000b550:	50                   	push   eax
c000b551:	b8 0b 00 00 00       	mov    eax,0xb
c000b556:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b55a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b55e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b565:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b569:	83 f9 19             	cmp    ecx,0x19
c000b56c:	77 3d                	ja     c000b5ab <File::stat(unsigned long long*, bool*)+0x5d>
c000b56e:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b575:	85 c9                	test   ecx,ecx
c000b577:	74 32                	je     c000b5ab <File::stat(unsigned long long*, bool*)+0x5d>
c000b579:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b57f:	85 c9                	test   ecx,ecx
c000b581:	74 28                	je     c000b5ab <File::stat(unsigned long long*, bool*)+0x5d>
c000b583:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b585:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b589:	74 13                	je     c000b59e <File::stat(unsigned long long*, bool*)+0x50>
c000b58b:	83 ec 04             	sub    esp,0x4
c000b58e:	56                   	push   esi
c000b58f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b595:	51                   	push   ecx
c000b596:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b599:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b59c:	eb 0a                	jmp    c000b5a8 <File::stat(unsigned long long*, bool*)+0x5a>
c000b59e:	53                   	push   ebx
c000b59f:	83 c2 0d             	add    edx,0xd
c000b5a2:	56                   	push   esi
c000b5a3:	52                   	push   edx
c000b5a4:	51                   	push   ecx
c000b5a5:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000b5a8:	83 c4 10             	add    esp,0x10
c000b5ab:	5a                   	pop    edx
c000b5ac:	5b                   	pop    ebx
c000b5ad:	5e                   	pop    esi
c000b5ae:	c3                   	ret    

c000b5af <Fs::setcwd(Process*, char*)>:
c000b5af:	55                   	push   ebp
c000b5b0:	57                   	push   edi
c000b5b1:	56                   	push   esi
c000b5b2:	53                   	push   ebx
c000b5b3:	81 ec 20 02 00 00    	sub    esp,0x220
c000b5b9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b5c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b5c6:	57                   	push   edi
c000b5c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b5ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b5d2:	56                   	push   esi
c000b5d3:	e8 02 fa ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b5d8:	89 34 24             	mov    DWORD PTR [esp],esi
c000b5db:	e8 90 4f ff ff       	call   c0000570 <strlen>
c000b5e0:	83 c4 10             	add    esp,0x10
c000b5e3:	83 f8 02             	cmp    eax,0x2
c000b5e6:	77 15                	ja     c000b5fd <Fs::setcwd(Process*, char*)+0x4e>
c000b5e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b5ed:	83 eb 41             	sub    ebx,0x41
c000b5f0:	8b 04 9d 20 84 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7be0]
c000b5f7:	85 c0                	test   eax,eax
c000b5f9:	75 1c                	jne    c000b617 <Fs::setcwd(Process*, char*)+0x68>
c000b5fb:	eb 2f                	jmp    c000b62c <Fs::setcwd(Process*, char*)+0x7d>
c000b5fd:	83 ec 0c             	sub    esp,0xc
c000b600:	56                   	push   esi
c000b601:	e8 6a 4f ff ff       	call   c0000570 <strlen>
c000b606:	83 c4 10             	add    esp,0x10
c000b609:	83 f8 03             	cmp    eax,0x3
c000b60c:	75 57                	jne    c000b665 <Fs::setcwd(Process*, char*)+0xb6>
c000b60e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b613:	75 50                	jne    c000b665 <Fs::setcwd(Process*, char*)+0xb6>
c000b615:	eb d1                	jmp    c000b5e8 <Fs::setcwd(Process*, char*)+0x39>
c000b617:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b61e:	75 0c                	jne    c000b62c <Fs::setcwd(Process*, char*)+0x7d>
c000b620:	83 ec 0c             	sub    esp,0xc
c000b623:	50                   	push   eax
c000b624:	e8 91 1d 00 00       	call   c000d3ba <LogicalDisk::mount()>
c000b629:	83 c4 10             	add    esp,0x10
c000b62c:	b8 03 00 00 00       	mov    eax,0x3
c000b631:	83 fb 19             	cmp    ebx,0x19
c000b634:	0f 87 c6 00 00 00    	ja     c000b700 <Fs::setcwd(Process*, char*)+0x151>
c000b63a:	8b 14 9d 20 84 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7be0]
c000b641:	b8 05 00 00 00       	mov    eax,0x5
c000b646:	85 d2                	test   edx,edx
c000b648:	0f 84 b2 00 00 00    	je     c000b700 <Fs::setcwd(Process*, char*)+0x151>
c000b64e:	b8 06 00 00 00       	mov    eax,0x6
c000b653:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b65a:	0f 85 92 00 00 00    	jne    c000b6f2 <Fs::setcwd(Process*, char*)+0x143>
c000b660:	e9 9b 00 00 00       	jmp    c000b700 <Fs::setcwd(Process*, char*)+0x151>
c000b665:	83 ec 0c             	sub    esp,0xc
c000b668:	68 14 01 00 00       	push   0x114
c000b66d:	e8 3c c4 ff ff       	call   c0007aae <malloc>
c000b672:	83 c4 0c             	add    esp,0xc
c000b675:	89 c3                	mov    ebx,eax
c000b677:	55                   	push   ebp
c000b678:	56                   	push   esi
c000b679:	50                   	push   eax
c000b67a:	e8 11 fb ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000b67f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b684:	83 c4 0c             	add    esp,0xc
c000b687:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b68b:	50                   	push   eax
c000b68c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b690:	50                   	push   eax
c000b691:	53                   	push   ebx
c000b692:	e8 b7 fe ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	83 f8 02             	cmp    eax,0x2
c000b69d:	74 27                	je     c000b6c6 <Fs::setcwd(Process*, char*)+0x117>
c000b69f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b6a4:	75 1c                	jne    c000b6c2 <Fs::setcwd(Process*, char*)+0x113>
c000b6a6:	b8 02 00 00 00       	mov    eax,0x2
c000b6ab:	85 db                	test   ebx,ebx
c000b6ad:	74 51                	je     c000b700 <Fs::setcwd(Process*, char*)+0x151>
c000b6af:	83 ec 0c             	sub    esp,0xc
c000b6b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6b4:	53                   	push   ebx
c000b6b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6b8:	83 c4 10             	add    esp,0x10
c000b6bb:	b8 02 00 00 00       	mov    eax,0x2
c000b6c0:	eb 3e                	jmp    c000b700 <Fs::setcwd(Process*, char*)+0x151>
c000b6c2:	85 c0                	test   eax,eax
c000b6c4:	74 1c                	je     c000b6e2 <Fs::setcwd(Process*, char*)+0x133>
c000b6c6:	b8 01 00 00 00       	mov    eax,0x1
c000b6cb:	85 db                	test   ebx,ebx
c000b6cd:	74 31                	je     c000b700 <Fs::setcwd(Process*, char*)+0x151>
c000b6cf:	83 ec 0c             	sub    esp,0xc
c000b6d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6d4:	53                   	push   ebx
c000b6d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6d8:	83 c4 10             	add    esp,0x10
c000b6db:	b8 01 00 00 00       	mov    eax,0x1
c000b6e0:	eb 1e                	jmp    c000b700 <Fs::setcwd(Process*, char*)+0x151>
c000b6e2:	85 db                	test   ebx,ebx
c000b6e4:	74 0c                	je     c000b6f2 <Fs::setcwd(Process*, char*)+0x143>
c000b6e6:	83 ec 0c             	sub    esp,0xc
c000b6e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6eb:	53                   	push   ebx
c000b6ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6ef:	83 c4 10             	add    esp,0x10
c000b6f2:	50                   	push   eax
c000b6f3:	50                   	push   eax
c000b6f4:	56                   	push   esi
c000b6f5:	57                   	push   edi
c000b6f6:	e8 45 4f ff ff       	call   c0000640 <strcpy>
c000b6fb:	83 c4 10             	add    esp,0x10
c000b6fe:	31 c0                	xor    eax,eax
c000b700:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b706:	5b                   	pop    ebx
c000b707:	5e                   	pop    esi
c000b708:	5f                   	pop    edi
c000b709:	5d                   	pop    ebp
c000b70a:	c3                   	ret    
c000b70b:	90                   	nop

c000b70c <Directory::Directory(char const*, Process*)>:
c000b70c:	83 ec 0c             	sub    esp,0xc
c000b70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b713:	83 ec 08             	sub    esp,0x8
c000b716:	6a 00                	push   0x0
c000b718:	50                   	push   eax
c000b719:	e8 94 da ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	ba 00 0c 02 c0       	mov    edx,0xc0020c00
c000b726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72a:	89 10                	mov    DWORD PTR [eax],edx
c000b72c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b730:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73a:	83 c0 0d             	add    eax,0xd
c000b73d:	83 ec 04             	sub    esp,0x4
c000b740:	52                   	push   edx
c000b741:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b745:	50                   	push   eax
c000b746:	e8 8f f8 ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b752:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b755:	83 e8 41             	sub    eax,0x41
c000b758:	88 c2                	mov    dl,al
c000b75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b768:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b770:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b776:	0f b6 c0             	movzx  eax,al
c000b779:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b780:	85 c0                	test   eax,eax
c000b782:	74 3e                	je     c000b7c2 <Directory::Directory(char const*, Process*)+0xb6>
c000b784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b788:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b78e:	0f b6 c0             	movzx  eax,al
c000b791:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b798:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b79e:	85 c0                	test   eax,eax
c000b7a0:	75 20                	jne    c000b7c2 <Directory::Directory(char const*, Process*)+0xb6>
c000b7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7ac:	0f b6 c0             	movzx  eax,al
c000b7af:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b7b6:	83 ec 0c             	sub    esp,0xc
c000b7b9:	50                   	push   eax
c000b7ba:	e8 fb 1b 00 00       	call   c000d3ba <LogicalDisk::mount()>
c000b7bf:	83 c4 10             	add    esp,0x10
c000b7c2:	90                   	nop
c000b7c3:	83 c4 0c             	add    esp,0xc
c000b7c6:	c3                   	ret    
c000b7c7:	90                   	nop

c000b7c8 <Directory::open()>:
c000b7c8:	53                   	push   ebx
c000b7c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b7ce:	83 ec 08             	sub    esp,0x8
c000b7d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7d5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7dc:	83 fa 19             	cmp    edx,0x19
c000b7df:	77 3d                	ja     c000b81e <Directory::open()+0x56>
c000b7e1:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b7e8:	85 d2                	test   edx,edx
c000b7ea:	74 32                	je     c000b81e <Directory::open()+0x56>
c000b7ec:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7f2:	85 d2                	test   edx,edx
c000b7f4:	74 28                	je     c000b81e <Directory::open()+0x56>
c000b7f6:	b8 06 00 00 00       	mov    eax,0x6
c000b7fb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7ff:	75 1d                	jne    c000b81e <Directory::open()+0x56>
c000b801:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b807:	50                   	push   eax
c000b808:	8b 02                	mov    eax,DWORD PTR [edx]
c000b80a:	51                   	push   ecx
c000b80b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b80e:	51                   	push   ecx
c000b80f:	52                   	push   edx
c000b810:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	85 c0                	test   eax,eax
c000b818:	75 04                	jne    c000b81e <Directory::open()+0x56>
c000b81a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b81e:	83 c4 08             	add    esp,0x8
c000b821:	5b                   	pop    ebx
c000b822:	c3                   	ret    
c000b823:	90                   	nop

c000b824 <Directory::close()>:
c000b824:	53                   	push   ebx
c000b825:	b8 0b 00 00 00       	mov    eax,0xb
c000b82a:	83 ec 08             	sub    esp,0x8
c000b82d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b831:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b838:	83 f9 19             	cmp    ecx,0x19
c000b83b:	77 41                	ja     c000b87e <Directory::close()+0x5a>
c000b83d:	8b 1c 8d 20 84 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b844:	85 db                	test   ebx,ebx
c000b846:	74 36                	je     c000b87e <Directory::close()+0x5a>
c000b848:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b84f:	74 2d                	je     c000b87e <Directory::close()+0x5a>
c000b851:	b8 05 00 00 00       	mov    eax,0x5
c000b856:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b85a:	74 22                	je     c000b87e <Directory::close()+0x5a>
c000b85c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b860:	8b 04 8d 20 84 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7be0]
c000b867:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b86d:	53                   	push   ebx
c000b86e:	53                   	push   ebx
c000b86f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b871:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b877:	50                   	push   eax
c000b878:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	83 c4 08             	add    esp,0x8
c000b881:	5b                   	pop    ebx
c000b882:	c3                   	ret    
c000b883:	90                   	nop

c000b884 <Directory::unlink()>:
c000b884:	83 ec 0c             	sub    esp,0xc
c000b887:	b8 0b 00 00 00       	mov    eax,0xb
c000b88c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b890:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b897:	83 f9 19             	cmp    ecx,0x19
c000b89a:	77 2f                	ja     c000b8cb <Directory::unlink()+0x47>
c000b89c:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b8a3:	85 c9                	test   ecx,ecx
c000b8a5:	74 24                	je     c000b8cb <Directory::unlink()+0x47>
c000b8a7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8ad:	85 c9                	test   ecx,ecx
c000b8af:	74 1a                	je     c000b8cb <Directory::unlink()+0x47>
c000b8b1:	b8 06 00 00 00       	mov    eax,0x6
c000b8b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b8ba:	75 0f                	jne    c000b8cb <Directory::unlink()+0x47>
c000b8bc:	83 c2 0d             	add    edx,0xd
c000b8bf:	50                   	push   eax
c000b8c0:	50                   	push   eax
c000b8c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8c3:	52                   	push   edx
c000b8c4:	51                   	push   ecx
c000b8c5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b8c8:	83 c4 10             	add    esp,0x10
c000b8cb:	83 c4 0c             	add    esp,0xc
c000b8ce:	c3                   	ret    
c000b8cf:	90                   	nop

c000b8d0 <Directory::rename(char const*)>:
c000b8d0:	83 ec 0c             	sub    esp,0xc
c000b8d3:	b8 0b 00 00 00       	mov    eax,0xb
c000b8d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8e3:	83 f9 19             	cmp    ecx,0x19
c000b8e6:	77 32                	ja     c000b91a <Directory::rename(char const*)+0x4a>
c000b8e8:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b8ef:	85 c9                	test   ecx,ecx
c000b8f1:	74 27                	je     c000b91a <Directory::rename(char const*)+0x4a>
c000b8f3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8f9:	85 c9                	test   ecx,ecx
c000b8fb:	74 1d                	je     c000b91a <Directory::rename(char const*)+0x4a>
c000b8fd:	b8 06 00 00 00       	mov    eax,0x6
c000b902:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b906:	75 12                	jne    c000b91a <Directory::rename(char const*)+0x4a>
c000b908:	83 c2 0d             	add    edx,0xd
c000b90b:	50                   	push   eax
c000b90c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b90e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b912:	52                   	push   edx
c000b913:	51                   	push   ecx
c000b914:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b917:	83 c4 10             	add    esp,0x10
c000b91a:	83 c4 0c             	add    esp,0xc
c000b91d:	c3                   	ret    

c000b91e <Directory::exists()>:
c000b91e:	83 ec 0c             	sub    esp,0xc
c000b921:	31 c0                	xor    eax,eax
c000b923:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b927:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b92e:	83 f9 19             	cmp    ecx,0x19
c000b931:	77 24                	ja     c000b957 <Directory::exists()+0x39>
c000b933:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b93a:	85 c9                	test   ecx,ecx
c000b93c:	74 19                	je     c000b957 <Directory::exists()+0x39>
c000b93e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b944:	85 c9                	test   ecx,ecx
c000b946:	74 0f                	je     c000b957 <Directory::exists()+0x39>
c000b948:	83 c2 0d             	add    edx,0xd
c000b94b:	50                   	push   eax
c000b94c:	50                   	push   eax
c000b94d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b94f:	52                   	push   edx
c000b950:	51                   	push   ecx
c000b951:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000b954:	83 c4 10             	add    esp,0x10
c000b957:	83 c4 0c             	add    esp,0xc
c000b95a:	c3                   	ret    
c000b95b:	90                   	nop

c000b95c <Directory::read(dirent*)>:
c000b95c:	83 ec 1c             	sub    esp,0x1c
c000b95f:	b8 0b 00 00 00       	mov    eax,0xb
c000b964:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b968:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b96f:	83 f9 19             	cmp    ecx,0x19
c000b972:	77 30                	ja     c000b9a4 <Directory::read(dirent*)+0x48>
c000b974:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b97b:	85 c9                	test   ecx,ecx
c000b97d:	74 25                	je     c000b9a4 <Directory::read(dirent*)+0x48>
c000b97f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b986:	74 1c                	je     c000b9a4 <Directory::read(dirent*)+0x48>
c000b988:	83 ec 0c             	sub    esp,0xc
c000b98b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b98d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b991:	51                   	push   ecx
c000b992:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b996:	6a 00                	push   0x0
c000b998:	68 10 01 00 00       	push   0x110
c000b99d:	52                   	push   edx
c000b99e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b9a1:	83 c4 20             	add    esp,0x20
c000b9a4:	83 c4 1c             	add    esp,0x1c
c000b9a7:	c3                   	ret    

c000b9a8 <Directory::create()>:
c000b9a8:	83 ec 0c             	sub    esp,0xc
c000b9ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b9b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9bb:	83 f9 19             	cmp    ecx,0x19
c000b9be:	77 2f                	ja     c000b9ef <Directory::create()+0x47>
c000b9c0:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b9c7:	85 c9                	test   ecx,ecx
c000b9c9:	74 24                	je     c000b9ef <Directory::create()+0x47>
c000b9cb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9d1:	85 c9                	test   ecx,ecx
c000b9d3:	74 1a                	je     c000b9ef <Directory::create()+0x47>
c000b9d5:	b8 06 00 00 00       	mov    eax,0x6
c000b9da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9de:	75 0f                	jne    c000b9ef <Directory::create()+0x47>
c000b9e0:	83 c2 0d             	add    edx,0xd
c000b9e3:	50                   	push   eax
c000b9e4:	50                   	push   eax
c000b9e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9e7:	52                   	push   edx
c000b9e8:	51                   	push   ecx
c000b9e9:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	83 c4 0c             	add    esp,0xc
c000b9f2:	c3                   	ret    
c000b9f3:	90                   	nop

c000b9f4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b9f4:	b8 0a 00 00 00       	mov    eax,0xa
c000b9f9:	c3                   	ret    
c000b9fa:	66 90                	xchg   ax,ax

c000b9fc <Bus::Bus(char const*)>:
c000b9fc:	83 ec 0c             	sub    esp,0xc
c000b9ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba03:	83 ec 08             	sub    esp,0x8
c000ba06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba0a:	50                   	push   eax
c000ba0b:	e8 22 08 00 00       	call   c000c232 <Device::Device(char const*)>
c000ba10:	83 c4 10             	add    esp,0x10
c000ba13:	ba 1c 0c 02 c0       	mov    edx,0xc0020c1c
c000ba18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba1c:	89 10                	mov    DWORD PTR [eax],edx
c000ba1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba22:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ba2c:	90                   	nop
c000ba2d:	83 c4 0c             	add    esp,0xc
c000ba30:	c3                   	ret    
c000ba31:	90                   	nop
c000ba32:	66 90                	xchg   ax,ax

c000ba34 <Bus::~Bus()>:
c000ba34:	83 ec 0c             	sub    esp,0xc
c000ba37:	ba 1c 0c 02 c0       	mov    edx,0xc0020c1c
c000ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba40:	89 10                	mov    DWORD PTR [eax],edx
c000ba42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba46:	83 ec 0c             	sub    esp,0xc
c000ba49:	50                   	push   eax
c000ba4a:	e8 4d 05 00 00       	call   c000bf9c <Device::~Device()>
c000ba4f:	83 c4 10             	add    esp,0x10
c000ba52:	90                   	nop
c000ba53:	83 c4 0c             	add    esp,0xc
c000ba56:	c3                   	ret    
c000ba57:	90                   	nop

c000ba58 <Bus::~Bus()>:
c000ba58:	83 ec 0c             	sub    esp,0xc
c000ba5b:	83 ec 0c             	sub    esp,0xc
c000ba5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba62:	e8 cd ff ff ff       	call   c000ba34 <Bus::~Bus()>
c000ba67:	83 c4 10             	add    esp,0x10
c000ba6a:	83 ec 08             	sub    esp,0x8
c000ba6d:	68 58 01 00 00       	push   0x158
c000ba72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba76:	e8 91 ed ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ba7b:	83 c4 10             	add    esp,0x10
c000ba7e:	83 c4 0c             	add    esp,0xc
c000ba81:	c3                   	ret    

c000ba82 <beepThread(void*)>:
c000ba82:	83 ec 0c             	sub    esp,0xc
c000ba85:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ba8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba8e:	48                   	dec    eax
c000ba8f:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000ba94:	75 01                	jne    c000ba97 <beepThread(void*)+0x15>
c000ba96:	fb                   	sti    
c000ba97:	83 ec 0c             	sub    esp,0xc
c000ba9a:	6b c2 0a             	imul   eax,edx,0xa
c000ba9d:	50                   	push   eax
c000ba9e:	e8 5d 9d 00 00       	call   c0015800 <milliTenthSleep(unsigned int)>
c000baa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000baaa:	e8 ac bc 00 00       	call   c001775b <HalMakeBeep(int)>
c000baaf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000bab7:	83 c4 1c             	add    esp,0x1c
c000baba:	e9 25 9c 00 00       	jmp    c00156e4 <blockTask(TaskState)>

c000babf <Krnl::beep(int, int, bool)>:
c000babf:	56                   	push   esi
c000bac0:	53                   	push   ebx
c000bac1:	83 ec 10             	sub    esp,0x10
c000bac4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000bac8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad0:	e8 86 bc 00 00       	call   c001775b <HalMakeBeep(int)>
c000bad5:	83 c4 10             	add    esp,0x10
c000bad8:	89 f0                	mov    eax,esi
c000bada:	84 c0                	test   al,al
c000badc:	74 1e                	je     c000bafc <Krnl::beep(int, int, bool)+0x3d>
c000bade:	83 ec 0c             	sub    esp,0xc
c000bae1:	6b db 0a             	imul   ebx,ebx,0xa
c000bae4:	53                   	push   ebx
c000bae5:	e8 16 9d 00 00       	call   c0015800 <milliTenthSleep(unsigned int)>
c000baea:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000baf2:	83 c4 14             	add    esp,0x14
c000baf5:	5b                   	pop    ebx
c000baf6:	5e                   	pop    esi
c000baf7:	e9 5f bc 00 00       	jmp    c001775b <HalMakeBeep(int)>
c000bafc:	68 e6 00 00 00       	push   0xe6
c000bb01:	53                   	push   ebx
c000bb02:	68 82 ba 00 c0       	push   0xc000ba82
c000bb07:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c000bb0d:	e8 6e 97 00 00       	call   c0015280 <Process::createThread(void (*)(void*), void*, int)>
c000bb12:	83 c4 14             	add    esp,0x14
c000bb15:	5b                   	pop    ebx
c000bb16:	5e                   	pop    esi
c000bb17:	c3                   	ret    

c000bb18 <User::loadClockSettings(int)>:
c000bb18:	53                   	push   ebx
c000bb19:	83 ec 14             	sub    esp,0x14
c000bb1c:	68 14 01 00 00       	push   0x114
c000bb21:	e8 88 bf ff ff       	call   c0007aae <malloc>
c000bb26:	83 c4 0c             	add    esp,0xc
c000bb29:	89 c3                	mov    ebx,eax
c000bb2b:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c000bb31:	68 40 0c 02 c0       	push   0xc0020c40
c000bb36:	50                   	push   eax
c000bb37:	e8 54 f6 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000bb3c:	58                   	pop    eax
c000bb3d:	5a                   	pop    edx
c000bb3e:	6a 01                	push   0x1
c000bb40:	53                   	push   ebx
c000bb41:	e8 06 f7 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c000bb46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bb49:	e8 5c f7 ff ff       	call   c000b2aa <File::close()>
c000bb4e:	83 c4 10             	add    esp,0x10
c000bb51:	85 db                	test   ebx,ebx
c000bb53:	74 0f                	je     c000bb64 <User::loadClockSettings(int)+0x4c>
c000bb55:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bb5b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bb5e:	83 c4 08             	add    esp,0x8
c000bb61:	5b                   	pop    ebx
c000bb62:	ff e0                	jmp    eax
c000bb64:	83 c4 08             	add    esp,0x8
c000bb67:	5b                   	pop    ebx
c000bb68:	c3                   	ret    
c000bb69:	90                   	nop

c000bb6a <Clock::Clock(char const*)>:
c000bb6a:	83 ec 0c             	sub    esp,0xc
c000bb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb71:	83 ec 08             	sub    esp,0x8
c000bb74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb78:	50                   	push   eax
c000bb79:	e8 b4 06 00 00       	call   c000c232 <Device::Device(char const*)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	ba 68 0c 02 c0       	mov    edx,0xc0020c68
c000bb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb8a:	89 10                	mov    DWORD PTR [eax],edx
c000bb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb90:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb9a:	90                   	nop
c000bb9b:	83 c4 0c             	add    esp,0xc
c000bb9e:	c3                   	ret    
c000bb9f:	90                   	nop

c000bba0 <Clock::~Clock()>:
c000bba0:	83 ec 0c             	sub    esp,0xc
c000bba3:	ba 68 0c 02 c0       	mov    edx,0xc0020c68
c000bba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbac:	89 10                	mov    DWORD PTR [eax],edx
c000bbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb2:	83 ec 0c             	sub    esp,0xc
c000bbb5:	50                   	push   eax
c000bbb6:	e8 e1 03 00 00       	call   c000bf9c <Device::~Device()>
c000bbbb:	83 c4 10             	add    esp,0x10
c000bbbe:	90                   	nop
c000bbbf:	83 c4 0c             	add    esp,0xc
c000bbc2:	c3                   	ret    
c000bbc3:	90                   	nop

c000bbc4 <Clock::~Clock()>:
c000bbc4:	83 ec 0c             	sub    esp,0xc
c000bbc7:	83 ec 0c             	sub    esp,0xc
c000bbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbce:	e8 cd ff ff ff       	call   c000bba0 <Clock::~Clock()>
c000bbd3:	83 c4 10             	add    esp,0x10
c000bbd6:	83 ec 08             	sub    esp,0x8
c000bbd9:	68 58 01 00 00       	push   0x158
c000bbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe2:	e8 25 ec ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bbe7:	83 c4 10             	add    esp,0x10
c000bbea:	83 c4 0c             	add    esp,0xc
c000bbed:	c3                   	ret    

c000bbee <Clock::timeInSecondsLocal()>:
c000bbee:	53                   	push   ebx
c000bbef:	83 ec 14             	sub    esp,0x14
c000bbf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bbf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf8:	50                   	push   eax
c000bbf9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bbfc:	0f b6 0d b8 5f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0025fb8
c000bc03:	03 0d bc 5f 02 c0    	add    ecx,DWORD PTR ds:0xc0025fbc
c000bc09:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc0f:	89 cb                	mov    ebx,ecx
c000bc11:	c1 fb 1f             	sar    ebx,0x1f
c000bc14:	01 c8                	add    eax,ecx
c000bc16:	11 da                	adc    edx,ebx
c000bc18:	83 c4 10             	add    esp,0x10
c000bc1b:	31 c9                	xor    ecx,ecx
c000bc1d:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bc24:	74 05                	je     c000bc2b <Clock::timeInSecondsLocal()+0x3d>
c000bc26:	b9 08 07 00 00       	mov    ecx,0x708
c000bc2b:	31 db                	xor    ebx,ebx
c000bc2d:	01 c8                	add    eax,ecx
c000bc2f:	11 da                	adc    edx,ebx
c000bc31:	83 c4 08             	add    esp,0x8
c000bc34:	5b                   	pop    ebx
c000bc35:	c3                   	ret    

c000bc36 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bc36:	57                   	push   edi
c000bc37:	56                   	push   esi
c000bc38:	53                   	push   ebx
c000bc39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc41:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc43:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc47:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bc4a:	0f b6 05 b8 5f 02 c0 	movzx  eax,BYTE PTR ds:0xc0025fb8
c000bc51:	03 05 bc 5f 02 c0    	add    eax,DWORD PTR ds:0xc0025fbc
c000bc57:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bc5d:	99                   	cdq    
c000bc5e:	29 c6                	sub    esi,eax
c000bc60:	19 d7                	sbb    edi,edx
c000bc62:	89 f0                	mov    eax,esi
c000bc64:	89 fa                	mov    edx,edi
c000bc66:	31 f6                	xor    esi,esi
c000bc68:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bc6f:	74 05                	je     c000bc76 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bc71:	be 08 07 00 00       	mov    esi,0x708
c000bc76:	31 ff                	xor    edi,edi
c000bc78:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc7c:	29 f0                	sub    eax,esi
c000bc7e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc82:	19 fa                	sbb    edx,edi
c000bc84:	89 d8                	mov    eax,ebx
c000bc86:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc8a:	5b                   	pop    ebx
c000bc8b:	5e                   	pop    esi
c000bc8c:	5f                   	pop    edi
c000bc8d:	ff e0                	jmp    eax

c000bc8f <datetimeToSeconds(datetime_t)>:
c000bc8f:	55                   	push   ebp
c000bc90:	57                   	push   edi
c000bc91:	56                   	push   esi
c000bc92:	53                   	push   ebx
c000bc93:	83 ec 0c             	sub    esp,0xc
c000bc96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc9a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000bc9e:	89 d6                	mov    esi,edx
c000bca0:	0f b6 c7             	movzx  eax,bh
c000bca3:	c1 ee 10             	shr    esi,0x10
c000bca6:	6b e8 3c             	imul   ebp,eax,0x3c
c000bca9:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000bcaf:	0f b6 ce             	movzx  ecx,dh
c000bcb2:	89 df                	mov    edi,ebx
c000bcb4:	49                   	dec    ecx
c000bcb5:	c1 ef 10             	shr    edi,0x10
c000bcb8:	0f b6 db             	movzx  ebx,bl
c000bcbb:	89 f8                	mov    eax,edi
c000bcbd:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000bcc3:	0f b6 f8             	movzx  edi,al
c000bcc6:	0f b6 d2             	movzx  edx,dl
c000bcc9:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000bccd:	01 d8                	add    eax,ebx
c000bccf:	0f b7 de             	movzx  ebx,si
c000bcd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000bcd5:	c1 f8 1f             	sar    eax,0x1f
c000bcd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bcdc:	0f b6 c1             	movzx  eax,cl
c000bcdf:	8b 0c 85 a0 0c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf360]
c000bce6:	83 f8 01             	cmp    eax,0x1
c000bce9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bced:	76 27                	jbe    c000bd16 <datetimeToSeconds(datetime_t)+0x87>
c000bcef:	83 e6 03             	and    esi,0x3
c000bcf2:	75 22                	jne    c000bd16 <datetimeToSeconds(datetime_t)+0x87>
c000bcf4:	31 d2                	xor    edx,edx
c000bcf6:	be 64 00 00 00       	mov    esi,0x64
c000bcfb:	89 d8                	mov    eax,ebx
c000bcfd:	f7 f6                	div    esi
c000bcff:	85 d2                	test   edx,edx
c000bd01:	75 12                	jne    c000bd15 <datetimeToSeconds(datetime_t)+0x86>
c000bd03:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bd09:	be 90 01 00 00       	mov    esi,0x190
c000bd0e:	99                   	cdq    
c000bd0f:	f7 fe                	idiv   esi
c000bd11:	85 d2                	test   edx,edx
c000bd13:	75 01                	jne    c000bd16 <datetimeToSeconds(datetime_t)+0x87>
c000bd15:	41                   	inc    ecx
c000bd16:	83 fb 46             	cmp    ebx,0x46
c000bd19:	76 48                	jbe    c000bd63 <datetimeToSeconds(datetime_t)+0xd4>
c000bd1b:	be 46 00 00 00       	mov    esi,0x46
c000bd20:	bf 64 00 00 00       	mov    edi,0x64
c000bd25:	bd 90 01 00 00       	mov    ebp,0x190
c000bd2a:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd2f:	f7 c6 03 00 00 00    	test   esi,0x3
c000bd35:	75 23                	jne    c000bd5a <datetimeToSeconds(datetime_t)+0xcb>
c000bd37:	89 f0                	mov    eax,esi
c000bd39:	99                   	cdq    
c000bd3a:	f7 ff                	idiv   edi
c000bd3c:	b8 6e 01 00 00       	mov    eax,0x16e
c000bd41:	85 d2                	test   edx,edx
c000bd43:	75 15                	jne    c000bd5a <datetimeToSeconds(datetime_t)+0xcb>
c000bd45:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bd4b:	99                   	cdq    
c000bd4c:	f7 fd                	idiv   ebp
c000bd4e:	83 fa 01             	cmp    edx,0x1
c000bd51:	19 c0                	sbb    eax,eax
c000bd53:	f7 d0                	not    eax
c000bd55:	05 6e 01 00 00       	add    eax,0x16e
c000bd5a:	01 c1                	add    ecx,eax
c000bd5c:	46                   	inc    esi
c000bd5d:	39 de                	cmp    esi,ebx
c000bd5f:	7c c9                	jl     c000bd2a <datetimeToSeconds(datetime_t)+0x9b>
c000bd61:	eb 34                	jmp    c000bd97 <datetimeToSeconds(datetime_t)+0x108>
c000bd63:	74 32                	je     c000bd97 <datetimeToSeconds(datetime_t)+0x108>
c000bd65:	b8 45 00 00 00       	mov    eax,0x45
c000bd6a:	89 c2                	mov    edx,eax
c000bd6c:	83 e2 03             	and    edx,0x3
c000bd6f:	39 d8                	cmp    eax,ebx
c000bd71:	7e 0f                	jle    c000bd82 <datetimeToSeconds(datetime_t)+0xf3>
c000bd73:	83 fa 01             	cmp    edx,0x1
c000bd76:	19 d2                	sbb    edx,edx
c000bd78:	48                   	dec    eax
c000bd79:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bd80:	eb e8                	jmp    c000bd6a <datetimeToSeconds(datetime_t)+0xdb>
c000bd82:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd87:	85 d2                	test   edx,edx
c000bd89:	75 0a                	jne    c000bd95 <datetimeToSeconds(datetime_t)+0x106>
c000bd8b:	83 fb 01             	cmp    ebx,0x1
c000bd8e:	19 c0                	sbb    eax,eax
c000bd90:	05 6e 01 00 00       	add    eax,0x16e
c000bd95:	29 c1                	sub    ecx,eax
c000bd97:	b8 80 51 01 00       	mov    eax,0x15180
c000bd9c:	f7 e9                	imul   ecx
c000bd9e:	03 04 24             	add    eax,DWORD PTR [esp]
c000bda1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bda5:	83 c4 0c             	add    esp,0xc
c000bda8:	5b                   	pop    ebx
c000bda9:	5e                   	pop    esi
c000bdaa:	5f                   	pop    edi
c000bdab:	5d                   	pop    ebp
c000bdac:	c3                   	ret    
c000bdad:	90                   	nop

c000bdae <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bdae:	57                   	push   edi
c000bdaf:	56                   	push   esi
c000bdb0:	53                   	push   ebx
c000bdb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bdb5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bdb7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bdba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdc2:	e8 c8 fe ff ff       	call   c000bc8f <datetimeToSeconds(datetime_t)>
c000bdc7:	59                   	pop    ecx
c000bdc8:	0f b6 0d b8 5f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0025fb8
c000bdcf:	5b                   	pop    ebx
c000bdd0:	03 0d bc 5f 02 c0    	add    ecx,DWORD PTR ds:0xc0025fbc
c000bdd6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bddc:	89 cb                	mov    ebx,ecx
c000bdde:	c1 fb 1f             	sar    ebx,0x1f
c000bde1:	29 c8                	sub    eax,ecx
c000bde3:	19 da                	sbb    edx,ebx
c000bde5:	31 c9                	xor    ecx,ecx
c000bde7:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bdee:	74 05                	je     c000bdf5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bdf0:	b9 08 07 00 00       	mov    ecx,0x708
c000bdf5:	31 db                	xor    ebx,ebx
c000bdf7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bdfb:	29 c8                	sub    eax,ecx
c000bdfd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000be01:	19 da                	sbb    edx,ebx
c000be03:	89 f8                	mov    eax,edi
c000be05:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000be09:	5b                   	pop    ebx
c000be0a:	5e                   	pop    esi
c000be0b:	5f                   	pop    edi
c000be0c:	ff e0                	jmp    eax

c000be0e <secondsToDatetime(unsigned long long)>:
c000be0e:	55                   	push   ebp
c000be0f:	57                   	push   edi
c000be10:	56                   	push   esi
c000be11:	53                   	push   ebx
c000be12:	83 ec 1c             	sub    esp,0x1c
c000be15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000be19:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000be1d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be21:	6a 00                	push   0x0
c000be23:	68 80 51 01 00       	push   0x15180
c000be28:	55                   	push   ebp
c000be29:	57                   	push   edi
c000be2a:	e8 11 2d 01 00       	call   c001eb40 <__udivdi3>
c000be2f:	83 c4 10             	add    esp,0x10
c000be32:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000be38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be3c:	6a 00                	push   0x0
c000be3e:	68 80 51 01 00       	push   0x15180
c000be43:	55                   	push   ebp
c000be44:	57                   	push   edi
c000be45:	bf 10 0e 00 00       	mov    edi,0xe10
c000be4a:	e8 f1 2d 01 00       	call   c001ec40 <__umoddi3>
c000be4f:	83 c4 10             	add    esp,0x10
c000be52:	99                   	cdq    
c000be53:	f7 ff                	idiv   edi
c000be55:	bf 3c 00 00 00       	mov    edi,0x3c
c000be5a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000be5d:	89 d0                	mov    eax,edx
c000be5f:	99                   	cdq    
c000be60:	f7 ff                	idiv   edi
c000be62:	85 db                	test   ebx,ebx
c000be64:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000be67:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be6a:	79 11                	jns    c000be7d <secondsToDatetime(unsigned long long)+0x6f>
c000be6c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be70:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be76:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be7b:	eb 07                	jmp    c000be84 <secondsToDatetime(unsigned long long)+0x76>
c000be7d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be82:	89 d8                	mov    eax,ebx
c000be84:	bf b4 05 00 00       	mov    edi,0x5b4
c000be89:	99                   	cdq    
c000be8a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be8f:	f7 f9                	idiv   ecx
c000be91:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be9a:	31 d2                	xor    edx,edx
c000be9c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bea4:	01 c3                	add    ebx,eax
c000bea6:	89 d8                	mov    eax,ebx
c000bea8:	f7 f1                	div    ecx
c000beaa:	31 d2                	xor    edx,edx
c000beac:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000beaf:	89 d8                	mov    eax,ebx
c000beb1:	f7 f7                	div    edi
c000beb3:	31 d2                	xor    edx,edx
c000beb5:	29 c1                	sub    ecx,eax
c000beb7:	89 d8                	mov    eax,ebx
c000beb9:	f7 f5                	div    ebp
c000bebb:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bec0:	29 c1                	sub    ecx,eax
c000bec2:	31 d2                	xor    edx,edx
c000bec4:	89 c8                	mov    eax,ecx
c000bec6:	f7 f5                	div    ebp
c000bec8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000becd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bed1:	31 d2                	xor    edx,edx
c000bed3:	89 c8                	mov    eax,ecx
c000bed5:	f7 f5                	div    ebp
c000bed7:	31 d2                	xor    edx,edx
c000bed9:	01 c3                	add    ebx,eax
c000bedb:	89 c8                	mov    eax,ecx
c000bedd:	f7 f7                	div    edi
c000bedf:	bf 99 00 00 00       	mov    edi,0x99
c000bee4:	29 c3                	sub    ebx,eax
c000bee6:	31 d2                	xor    edx,edx
c000bee8:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bef0:	29 c3                	sub    ebx,eax
c000bef2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bef5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bef8:	bb 05 00 00 00       	mov    ebx,0x5
c000befd:	83 c1 02             	add    ecx,0x2
c000bf00:	89 c8                	mov    eax,ecx
c000bf02:	f7 f7                	div    edi
c000bf04:	31 d2                	xor    edx,edx
c000bf06:	89 c7                	mov    edi,eax
c000bf08:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bf0e:	83 c0 02             	add    eax,0x2
c000bf11:	f7 f3                	div    ebx
c000bf13:	89 eb                	mov    ebx,ebp
c000bf15:	29 c3                	sub    ebx,eax
c000bf17:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bf1d:	88 1e                	mov    BYTE PTR [esi],bl
c000bf1f:	19 c0                	sbb    eax,eax
c000bf21:	31 d2                	xor    edx,edx
c000bf23:	83 e0 0c             	and    eax,0xc
c000bf26:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bf2a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bf32:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf36:	83 f9 01             	cmp    ecx,0x1
c000bf39:	0f 96 c2             	setbe  dl
c000bf3c:	41                   	inc    ecx
c000bf3d:	01 d0                	add    eax,edx
c000bf3f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bf42:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bf46:	83 c4 1c             	add    esp,0x1c
c000bf49:	89 f0                	mov    eax,esi
c000bf4b:	5b                   	pop    ebx
c000bf4c:	5e                   	pop    esi
c000bf4d:	5f                   	pop    edi
c000bf4e:	5d                   	pop    ebp
c000bf4f:	c2 04 00             	ret    0x4

c000bf52 <Clock::timeInDatetimeLocal()>:
c000bf52:	53                   	push   ebx
c000bf53:	83 ec 14             	sub    esp,0x14
c000bf56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf5e:	e8 8b fc ff ff       	call   c000bbee <Clock::timeInSecondsLocal()>
c000bf63:	83 c4 0c             	add    esp,0xc
c000bf66:	52                   	push   edx
c000bf67:	50                   	push   eax
c000bf68:	53                   	push   ebx
c000bf69:	e8 a0 fe ff ff       	call   c000be0e <secondsToDatetime(unsigned long long)>
c000bf6e:	89 d8                	mov    eax,ebx
c000bf70:	83 c4 14             	add    esp,0x14
c000bf73:	5b                   	pop    ebx
c000bf74:	c2 04 00             	ret    0x4
c000bf77:	90                   	nop

c000bf78 <Device::hibernate()>:
c000bf78:	c3                   	ret    
c000bf79:	90                   	nop

c000bf7a <Device::wake()>:
c000bf7a:	c3                   	ret    
c000bf7b:	90                   	nop

c000bf7c <Device::detect()>:
c000bf7c:	c3                   	ret    
c000bf7d:	90                   	nop

c000bf7e <Device::disableLegacy()>:
c000bf7e:	c3                   	ret    
c000bf7f:	90                   	nop

c000bf80 <Device::powerSaving(PowerSavingLevel)>:
c000bf80:	c3                   	ret    
c000bf81:	90                   	nop

c000bf82 <DriverlessDevice::close(int, int, void*)>:
c000bf82:	31 c0                	xor    eax,eax
c000bf84:	c3                   	ret    
c000bf85:	90                   	nop

c000bf86 <DriverlessDevice::detect()>:
c000bf86:	c3                   	ret    
c000bf87:	90                   	nop

c000bf88 <DriverlessDevice::open(int, int, void*)>:
c000bf88:	83 ec 18             	sub    esp,0x18
c000bf8b:	68 d0 0c 02 c0       	push   0xc0020cd0
c000bf90:	e8 7c 4c 00 00       	call   c0010c11 <KePanic(char const*)>
c000bf95:	83 c8 ff             	or     eax,0xffffffff
c000bf98:	83 c4 1c             	add    esp,0x1c
c000bf9b:	c3                   	ret    

c000bf9c <Device::~Device()>:
c000bf9c:	ba 30 0d 02 c0       	mov    edx,0xc0020d30
c000bfa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfa5:	89 10                	mov    DWORD PTR [eax],edx
c000bfa7:	90                   	nop
c000bfa8:	c3                   	ret    
c000bfa9:	90                   	nop

c000bfaa <Device::~Device()>:
c000bfaa:	83 ec 0c             	sub    esp,0xc
c000bfad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfb1:	e8 e6 ff ff ff       	call   c000bf9c <Device::~Device()>
c000bfb6:	83 c4 04             	add    esp,0x4
c000bfb9:	83 ec 08             	sub    esp,0x8
c000bfbc:	68 58 01 00 00       	push   0x158
c000bfc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfc5:	e8 42 e8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000bfca:	83 c4 10             	add    esp,0x10
c000bfcd:	83 c4 0c             	add    esp,0xc
c000bfd0:	c3                   	ret    
c000bfd1:	90                   	nop

c000bfd2 <Device::findAndLoadDriver()>:
c000bfd2:	c7 44 24 04 ee 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020cee
c000bfda:	e9 5a e9 ff ff       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>
c000bfdf:	90                   	nop

c000bfe0 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bfe0:	57                   	push   edi
c000bfe1:	b9 09 00 00 00       	mov    ecx,0x9
c000bfe6:	56                   	push   esi
c000bfe7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bfeb:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bfef:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bff9:	81 c7 18 01 00 00    	add    edi,0x118
c000bfff:	fc                   	cld    
c000c000:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    
c000c005:	90                   	nop

c000c006 <Device::preOpenACPI(void*, char*, char*)>:
c000c006:	57                   	push   edi
c000c007:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c00c:	56                   	push   esi
c000c00d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c011:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c015:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c01f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c025:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c02b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c02f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c031:	b9 0e 00 00 00       	mov    ecx,0xe
c000c036:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c03c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c040:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c042:	5e                   	pop    esi
c000c043:	5f                   	pop    edi
c000c044:	c3                   	ret    
c000c045:	90                   	nop

c000c046 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c046:	53                   	push   ebx
c000c047:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c04b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c04f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c053:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c057:	0f b6 c0             	movzx  eax,al
c000c05a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c05e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c062:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c066:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c06a:	5b                   	pop    ebx
c000c06b:	e9 a8 05 00 00       	jmp    c000c618 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c070 <Device::getParent()>:
c000c070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c074:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c07a:	c3                   	ret    
c000c07b:	90                   	nop

c000c07c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c07c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c080:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c084:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c089:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c08d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c091:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c095:	e9 e6 06 00 00       	jmp    c000c780 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c09a <Device::addChild(Device*)>:
c000c09a:	53                   	push   ebx
c000c09b:	83 ec 08             	sub    esp,0x8
c000c09e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0a6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c0ac:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c0b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c0b4:	85 d2                	test   edx,edx
c000c0b6:	74 04                	je     c000c0bc <Device::addChild(Device*)+0x22>
c000c0b8:	89 d3                	mov    ebx,edx
c000c0ba:	eb f6                	jmp    c000c0b2 <Device::addChild(Device*)+0x18>
c000c0bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c0bf:	83 ec 0c             	sub    esp,0xc
c000c0c2:	6a 08                	push   0x8
c000c0c4:	e8 e5 b9 ff ff       	call   c0007aae <malloc>
c000c0c9:	89 03                	mov    DWORD PTR [ebx],eax
c000c0cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0d8:	83 c4 18             	add    esp,0x18
c000c0db:	5b                   	pop    ebx
c000c0dc:	c3                   	ret    
c000c0dd:	90                   	nop

c000c0de <Device::removeAllChildren()>:
c000c0de:	56                   	push   esi
c000c0df:	53                   	push   ebx
c000c0e0:	52                   	push   edx
c000c0e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c0e5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c0eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0ee:	74 17                	je     c000c107 <Device::removeAllChildren()+0x29>
c000c0f0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c0f3:	85 c0                	test   eax,eax
c000c0f5:	74 0c                	je     c000c103 <Device::removeAllChildren()+0x25>
c000c0f7:	83 ec 0c             	sub    esp,0xc
c000c0fa:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0fc:	50                   	push   eax
c000c0fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c100:	83 c4 10             	add    esp,0x10
c000c103:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c105:	eb e4                	jmp    c000c0eb <Device::removeAllChildren()+0xd>
c000c107:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c10d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c113:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c119:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c120:	58                   	pop    eax
c000c121:	5b                   	pop    ebx
c000c122:	5e                   	pop    esi
c000c123:	c3                   	ret    

c000c124 <Device::hibernateAll()>:
c000c124:	53                   	push   ebx
c000c125:	83 ec 14             	sub    esp,0x14
c000c128:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c12c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c12e:	53                   	push   ebx
c000c12f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c132:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c138:	83 c4 10             	add    esp,0x10
c000c13b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c13e:	74 0f                	je     c000c14f <Device::hibernateAll()+0x2b>
c000c140:	83 ec 0c             	sub    esp,0xc
c000c143:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c146:	e8 d9 ff ff ff       	call   c000c124 <Device::hibernateAll()>
c000c14b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c14d:	eb e9                	jmp    c000c138 <Device::hibernateAll()+0x14>
c000c14f:	83 c4 08             	add    esp,0x8
c000c152:	5b                   	pop    ebx
c000c153:	c3                   	ret    

c000c154 <Device::wakeAll()>:
c000c154:	53                   	push   ebx
c000c155:	83 ec 14             	sub    esp,0x14
c000c158:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c15c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c15e:	53                   	push   ebx
c000c15f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c162:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c168:	83 c4 10             	add    esp,0x10
c000c16b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c16e:	74 0f                	je     c000c17f <Device::wakeAll()+0x2b>
c000c170:	83 ec 0c             	sub    esp,0xc
c000c173:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c176:	e8 d9 ff ff ff       	call   c000c154 <Device::wakeAll()>
c000c17b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c17d:	eb e9                	jmp    c000c168 <Device::wakeAll()+0x14>
c000c17f:	83 c4 08             	add    esp,0x8
c000c182:	5b                   	pop    ebx
c000c183:	c3                   	ret    

c000c184 <Device::detectAll()>:
c000c184:	53                   	push   ebx
c000c185:	83 ec 14             	sub    esp,0x14
c000c188:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c18c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c18e:	53                   	push   ebx
c000c18f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c192:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c19e:	74 0f                	je     c000c1af <Device::detectAll()+0x2b>
c000c1a0:	83 ec 0c             	sub    esp,0xc
c000c1a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1a6:	e8 d9 ff ff ff       	call   c000c184 <Device::detectAll()>
c000c1ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1ad:	eb e9                	jmp    c000c198 <Device::detectAll()+0x14>
c000c1af:	83 c4 08             	add    esp,0x8
c000c1b2:	5b                   	pop    ebx
c000c1b3:	c3                   	ret    

c000c1b4 <Device::disableLegacyAll()>:
c000c1b4:	c3                   	ret    
c000c1b5:	90                   	nop

c000c1b6 <Device::loadDriversForAll()>:
c000c1b6:	c3                   	ret    
c000c1b7:	90                   	nop

c000c1b8 <Device::closeAll()>:
c000c1b8:	53                   	push   ebx
c000c1b9:	83 ec 08             	sub    esp,0x8
c000c1bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c1c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1c2:	6a 00                	push   0x0
c000c1c4:	6a 00                	push   0x0
c000c1c6:	6a 00                	push   0x0
c000c1c8:	53                   	push   ebx
c000c1c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c1cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1d2:	83 c4 10             	add    esp,0x10
c000c1d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1d8:	74 0f                	je     c000c1e9 <Device::closeAll()+0x31>
c000c1da:	83 ec 0c             	sub    esp,0xc
c000c1dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1e0:	e8 d3 ff ff ff       	call   c000c1b8 <Device::closeAll()>
c000c1e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1e7:	eb e9                	jmp    c000c1d2 <Device::closeAll()+0x1a>
c000c1e9:	83 c4 08             	add    esp,0x8
c000c1ec:	5b                   	pop    ebx
c000c1ed:	c3                   	ret    

c000c1ee <Device::powerSavingAll(PowerSavingLevel)>:
c000c1ee:	56                   	push   esi
c000c1ef:	53                   	push   ebx
c000c1f0:	83 ec 0c             	sub    esp,0xc
c000c1f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c1f7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c1fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1fd:	56                   	push   esi
c000c1fe:	53                   	push   ebx
c000c1ff:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c202:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c208:	83 c4 10             	add    esp,0x10
c000c20b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c20e:	74 0f                	je     c000c21f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c210:	52                   	push   edx
c000c211:	52                   	push   edx
c000c212:	56                   	push   esi
c000c213:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c216:	e8 d3 ff ff ff       	call   c000c1ee <Device::powerSavingAll(PowerSavingLevel)>
c000c21b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c21d:	eb e9                	jmp    c000c208 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c21f:	58                   	pop    eax
c000c220:	5b                   	pop    ebx
c000c221:	5e                   	pop    esi
c000c222:	c3                   	ret    
c000c223:	90                   	nop

c000c224 <Device::setName(char const*)>:
c000c224:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c22c:	e9 0f 44 ff ff       	jmp    c0000640 <strcpy>
c000c231:	90                   	nop

c000c232 <Device::Device(char const*)>:
c000c232:	83 ec 1c             	sub    esp,0x1c
c000c235:	ba 30 0d 02 c0       	mov    edx,0xc0020d30
c000c23a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c23e:	89 10                	mov    DWORD PTR [eax],edx
c000c240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c244:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c24e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c252:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c25c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c260:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c26a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c278:	83 ec 08             	sub    esp,0x8
c000c27b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c27f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c283:	e8 9c ff ff ff       	call   c000c224 <Device::setName(char const*)>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c293:	83 ec 0c             	sub    esp,0xc
c000c296:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c29a:	e8 0f b8 ff ff       	call   c0007aae <malloc>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c2a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c2af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2b3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c2b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2bd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c2c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c2c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c2d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c2da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2de:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2e9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c2f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2f4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c2fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c302:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c30c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c310:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c31a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c31e:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c328:	90                   	nop
c000c329:	83 c4 1c             	add    esp,0x1c
c000c32c:	c3                   	ret    
c000c32d:	90                   	nop

c000c32e <Device::getName()>:
c000c32e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c332:	05 d0 00 00 00       	add    eax,0xd0
c000c337:	c3                   	ret    

c000c338 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c338:	83 ec 0c             	sub    esp,0xc
c000c33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33f:	83 ec 08             	sub    esp,0x8
c000c342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c346:	50                   	push   eax
c000c347:	e8 e6 fe ff ff       	call   c000c232 <Device::Device(char const*)>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	ba 5c 0d 02 c0       	mov    edx,0xc0020d5c
c000c354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c358:	89 10                	mov    DWORD PTR [eax],edx
c000c35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c35e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c368:	90                   	nop
c000c369:	83 c4 0c             	add    esp,0xc
c000c36c:	c3                   	ret    
c000c36d:	90                   	nop

c000c36e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c36e:	57                   	push   edi
c000c36f:	56                   	push   esi
c000c370:	53                   	push   ebx
c000c371:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c375:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c379:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c37d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c383:	75 0c                	jne    c000c391 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c385:	52                   	push   edx
c000c386:	52                   	push   edx
c000c387:	53                   	push   ebx
c000c388:	56                   	push   esi
c000c389:	e8 64 2c 01 00       	call   c001eff2 <LinkedList<Device>::addElement(Device*)>
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c397:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c39a:	74 12                	je     c000c3ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c39c:	50                   	push   eax
c000c39d:	57                   	push   edi
c000c39e:	56                   	push   esi
c000c39f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c3a2:	e8 c7 ff ff ff       	call   c000c36e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c3a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c3a9:	83 c4 10             	add    esp,0x10
c000c3ac:	eb e9                	jmp    c000c397 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c3ae:	5b                   	pop    ebx
c000c3af:	5e                   	pop    esi
c000c3b0:	5f                   	pop    edi
c000c3b1:	c3                   	ret    

c000c3b2 <getDevicesOfType(DeviceType)>:
c000c3b2:	53                   	push   ebx
c000c3b3:	83 ec 14             	sub    esp,0x14
c000c3b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c3ba:	53                   	push   ebx
c000c3bb:	e8 0e 2d 01 00       	call   c001f0ce <LinkedList<Device>::LinkedList()>
c000c3c0:	83 c4 0c             	add    esp,0xc
c000c3c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3c7:	53                   	push   ebx
c000c3c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c3ce:	e8 9b ff ff ff       	call   c000c36e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c3d3:	89 d8                	mov    eax,ebx
c000c3d5:	83 c4 18             	add    esp,0x18
c000c3d8:	5b                   	pop    ebx
c000c3d9:	c2 04 00             	ret    0x4

c000c3dc <HardDiskController::HardDiskController(char const*)>:
c000c3dc:	83 ec 0c             	sub    esp,0xc
c000c3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e3:	83 ec 08             	sub    esp,0x8
c000c3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ea:	50                   	push   eax
c000c3eb:	e8 42 fe ff ff       	call   c000c232 <Device::Device(char const*)>
c000c3f0:	83 c4 10             	add    esp,0x10
c000c3f3:	ba 88 0d 02 c0       	mov    edx,0xc0020d88
c000c3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fc:	89 10                	mov    DWORD PTR [eax],edx
c000c3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c402:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c40c:	90                   	nop
c000c40d:	83 c4 0c             	add    esp,0xc
c000c410:	c3                   	ret    
c000c411:	90                   	nop
c000c412:	66 90                	xchg   ax,ax

c000c414 <HardDiskController::~HardDiskController()>:
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	ba 88 0d 02 c0       	mov    edx,0xc0020d88
c000c41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c420:	89 10                	mov    DWORD PTR [eax],edx
c000c422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c426:	83 ec 0c             	sub    esp,0xc
c000c429:	50                   	push   eax
c000c42a:	e8 6d fb ff ff       	call   c000bf9c <Device::~Device()>
c000c42f:	83 c4 10             	add    esp,0x10
c000c432:	90                   	nop
c000c433:	83 c4 0c             	add    esp,0xc
c000c436:	c3                   	ret    
c000c437:	90                   	nop

c000c438 <HardDiskController::~HardDiskController()>:
c000c438:	83 ec 0c             	sub    esp,0xc
c000c43b:	83 ec 0c             	sub    esp,0xc
c000c43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c442:	e8 cd ff ff ff       	call   c000c414 <HardDiskController::~HardDiskController()>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	83 ec 08             	sub    esp,0x8
c000c44d:	68 58 01 00 00       	push   0x158
c000c452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c456:	e8 b1 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c45b:	83 c4 10             	add    esp,0x10
c000c45e:	83 c4 0c             	add    esp,0xc
c000c461:	c3                   	ret    

c000c462 <PhysicalDisk::eject()>:
c000c462:	83 c8 ff             	or     eax,0xffffffff
c000c465:	c3                   	ret    

c000c466 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c466:	83 ec 0c             	sub    esp,0xc
c000c469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c46d:	83 ec 08             	sub    esp,0x8
c000c470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c474:	50                   	push   eax
c000c475:	e8 b8 fd ff ff       	call   c000c232 <Device::Device(char const*)>
c000c47a:	83 c4 10             	add    esp,0x10
c000c47d:	ba b4 0d 02 c0       	mov    edx,0xc0020db4
c000c482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c486:	89 10                	mov    DWORD PTR [eax],edx
c000c488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c48c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c497:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c4b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c4c8:	90                   	nop
c000c4c9:	83 c4 0c             	add    esp,0xc
c000c4cc:	c3                   	ret    
c000c4cd:	90                   	nop

c000c4ce <PhysicalDisk::startCache()>:
c000c4ce:	56                   	push   esi
c000c4cf:	53                   	push   ebx
c000c4d0:	83 ec 10             	sub    esp,0x10
c000c4d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4d7:	6a 44                	push   0x44
c000c4d9:	e8 d0 b5 ff ff       	call   c0007aae <malloc>
c000c4de:	89 c6                	mov    esi,eax
c000c4e0:	58                   	pop    eax
c000c4e1:	5a                   	pop    edx
c000c4e2:	53                   	push   ebx
c000c4e3:	56                   	push   esi
c000c4e4:	e8 7b 17 00 00       	call   c000dc64 <VCache::VCache(PhysicalDisk*)>
c000c4e9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c4ef:	83 c4 14             	add    esp,0x14
c000c4f2:	5b                   	pop    ebx
c000c4f3:	5e                   	pop    esi
c000c4f4:	c3                   	ret    
c000c4f5:	90                   	nop

c000c4f6 <PhysicalDisk::~PhysicalDisk()>:
c000c4f6:	83 ec 0c             	sub    esp,0xc
c000c4f9:	ba b4 0d 02 c0       	mov    edx,0xc0020db4
c000c4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c502:	89 10                	mov    DWORD PTR [eax],edx
c000c504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c508:	83 ec 0c             	sub    esp,0xc
c000c50b:	50                   	push   eax
c000c50c:	e8 8b fa ff ff       	call   c000bf9c <Device::~Device()>
c000c511:	83 c4 10             	add    esp,0x10
c000c514:	90                   	nop
c000c515:	83 c4 0c             	add    esp,0xc
c000c518:	c3                   	ret    
c000c519:	90                   	nop

c000c51a <PhysicalDisk::~PhysicalDisk()>:
c000c51a:	83 ec 0c             	sub    esp,0xc
c000c51d:	83 ec 0c             	sub    esp,0xc
c000c520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c524:	e8 cd ff ff ff       	call   c000c4f6 <PhysicalDisk::~PhysicalDisk()>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	83 ec 08             	sub    esp,0x8
c000c52f:	68 6c 01 00 00       	push   0x16c
c000c534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c538:	e8 cf e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c53d:	83 c4 10             	add    esp,0x10
c000c540:	83 c4 0c             	add    esp,0xc
c000c543:	c3                   	ret    

c000c544 <int_handler>:
c000c544:	55                   	push   ebp
c000c545:	57                   	push   edi
c000c546:	56                   	push   esi
c000c547:	53                   	push   ebx
c000c548:	83 ec 0c             	sub    esp,0xc
c000c54b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c54f:	80 3d 38 89 02 c0 00 	cmp    BYTE PTR ds:0xc0028938,0x0
c000c556:	74 0b                	je     c000c563 <int_handler+0x1f>
c000c558:	fa                   	cli    
c000c559:	f4                   	hlt    
c000c55a:	80 3d 38 89 02 c0 00 	cmp    BYTE PTR ds:0xc0028938,0x0
c000c561:	75 f5                	jne    c000c558 <int_handler+0x14>
c000c563:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c566:	8d 46 e0             	lea    eax,[esi-0x20]
c000c569:	83 f8 17             	cmp    eax,0x17
c000c56c:	76 40                	jbe    c000c5ae <int_handler+0x6a>
c000c56e:	c1 e6 04             	shl    esi,0x4
c000c571:	31 db                	xor    ebx,ebx
c000c573:	8d ae c0 6f 02 c0    	lea    ebp,[esi-0x3ffd9040]
c000c579:	81 c6 c0 5f 02 c0    	add    esi,0xc0025fc0
c000c57f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c583:	85 c0                	test   eax,eax
c000c585:	74 13                	je     c000c59a <int_handler+0x56>
c000c587:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c58a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c58e:	74 2c                	je     c000c5bc <int_handler+0x78>
c000c590:	83 ec 08             	sub    esp,0x8
c000c593:	52                   	push   edx
c000c594:	57                   	push   edi
c000c595:	ff d0                	call   eax
c000c597:	83 c4 10             	add    esp,0x10
c000c59a:	83 c3 01             	add    ebx,0x1
c000c59d:	83 fb 04             	cmp    ebx,0x4
c000c5a0:	75 dd                	jne    c000c57f <int_handler+0x3b>
c000c5a2:	83 c4 0c             	add    esp,0xc
c000c5a5:	31 c0                	xor    eax,eax
c000c5a7:	5b                   	pop    ebx
c000c5a8:	31 d2                	xor    edx,edx
c000c5aa:	5e                   	pop    esi
c000c5ab:	5f                   	pop    edi
c000c5ac:	5d                   	pop    ebp
c000c5ad:	c3                   	ret    
c000c5ae:	83 ec 0c             	sub    esp,0xc
c000c5b1:	50                   	push   eax
c000c5b2:	e8 e1 b1 00 00       	call   c0017798 <HalEndOfInterrupt(int)>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	eb b2                	jmp    c000c56e <int_handler+0x2a>
c000c5bc:	83 ec 08             	sub    esp,0x8
c000c5bf:	52                   	push   edx
c000c5c0:	57                   	push   edi
c000c5c1:	ff d0                	call   eax
c000c5c3:	83 c4 10             	add    esp,0x10
c000c5c6:	83 c4 0c             	add    esp,0xc
c000c5c9:	5b                   	pop    ebx
c000c5ca:	5e                   	pop    esi
c000c5cb:	5f                   	pop    edi
c000c5cc:	5d                   	pop    ebp
c000c5cd:	c3                   	ret    

c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c5ce:	56                   	push   esi
c000c5cf:	31 c0                	xor    eax,eax
c000c5d1:	53                   	push   ebx
c000c5d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c5d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5da:	89 ca                	mov    edx,ecx
c000c5dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5e0:	c1 e2 04             	shl    edx,0x4
c000c5e3:	83 bc 82 c0 6f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd9040],0x0
c000c5eb:	74 17                	je     c000c604 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c5ed:	83 c0 01             	add    eax,0x1
c000c5f0:	83 f8 04             	cmp    eax,0x4
c000c5f3:	75 ee                	jne    c000c5e3 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c5f5:	c7 44 24 0c e4 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020de4
c000c5fd:	5b                   	pop    ebx
c000c5fe:	5e                   	pop    esi
c000c5ff:	e9 0d 46 00 00       	jmp    c0010c11 <KePanic(char const*)>
c000c604:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c607:	89 1c 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],ebx
c000c60e:	89 34 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],esi
c000c615:	5b                   	pop    ebx
c000c616:	5e                   	pop    esi
c000c617:	c3                   	ret    

c000c618 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c618:	57                   	push   edi
c000c619:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000c61f:	56                   	push   esi
c000c620:	53                   	push   ebx
c000c621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c629:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c630:	74 54                	je     c000c686 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c632:	89 c7                	mov    edi,eax
c000c634:	84 c0                	test   al,al
c000c636:	74 1d                	je     c000c655 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c638:	83 fe 0f             	cmp    esi,0xf
c000c63b:	0f 8f d5 00 00 00    	jg     c000c716 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c641:	0f b6 b6 c8 28 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd738]
c000c648:	0f b7 bc 36 60 87 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd78a0]
c000c650:	d1 ef                	shr    edi,1
c000c652:	83 e7 01             	and    edi,0x1
c000c655:	83 ec 08             	sub    esp,0x8
c000c658:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c000c65d:	31 db                	xor    ebx,ebx
c000c65f:	50                   	push   eax
c000c660:	68 f1 0d 02 c0       	push   0xc0020df1
c000c665:	e8 cf e2 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c000c672:	85 c0                	test   eax,eax
c000c674:	7f 55                	jg     c000c6cb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c676:	83 ec 0c             	sub    esp,0xc
c000c679:	68 08 0e 02 c0       	push   0xc0020e08
c000c67e:	e8 8e 45 00 00       	call   c0010c11 <KePanic(char const*)>
c000c683:	83 c4 10             	add    esp,0x10
c000c686:	8d 7e 20             	lea    edi,[esi+0x20]
c000c689:	89 f8                	mov    eax,edi
c000c68b:	31 d2                	xor    edx,edx
c000c68d:	c1 e0 04             	shl    eax,0x4
c000c690:	8b 8c 90 c0 6f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd9040]
c000c697:	85 c9                	test   ecx,ecx
c000c699:	0f 84 8e 00 00 00    	je     c000c72d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c69f:	83 c2 01             	add    edx,0x1
c000c6a2:	83 fa 04             	cmp    edx,0x4
c000c6a5:	75 e9                	jne    c000c690 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c6a7:	83 ec 0c             	sub    esp,0xc
c000c6aa:	68 5c 0e 02 c0       	push   0xc0020e5c
c000c6af:	e8 5d 45 00 00       	call   c0010c11 <KePanic(char const*)>
c000c6b4:	83 c4 10             	add    esp,0x10
c000c6b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c6bc:	5b                   	pop    ebx
c000c6bd:	5e                   	pop    esi
c000c6be:	5f                   	pop    edi
c000c6bf:	c3                   	ret    
c000c6c0:	83 c3 01             	add    ebx,0x1
c000c6c3:	39 1d 60 9b 02 c0    	cmp    DWORD PTR ds:0xc0029b60,ebx
c000c6c9:	7e ab                	jle    c000c676 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c6cb:	83 ec 08             	sub    esp,0x8
c000c6ce:	8b 04 9d 80 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6480]
c000c6d5:	56                   	push   esi
c000c6d6:	50                   	push   eax
c000c6d7:	e8 46 18 01 00       	call   c001df22 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c6dc:	83 c4 10             	add    esp,0x10
c000c6df:	84 c0                	test   al,al
c000c6e1:	74 dd                	je     c000c6c0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c6e3:	83 ec 04             	sub    esp,0x4
c000c6e6:	89 f8                	mov    eax,edi
c000c6e8:	8b 1c 9d 80 9b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd6480]
c000c6ef:	0f b6 f8             	movzx  edi,al
c000c6f2:	57                   	push   edi
c000c6f3:	8d 7e 20             	lea    edi,[esi+0x20]
c000c6f6:	6a 00                	push   0x0
c000c6f8:	89 f8                	mov    eax,edi
c000c6fa:	0f b6 c0             	movzx  eax,al
c000c6fd:	50                   	push   eax
c000c6fe:	89 f0                	mov    eax,esi
c000c700:	6a 00                	push   0x0
c000c702:	0f b6 c0             	movzx  eax,al
c000c705:	6a 00                	push   0x0
c000c707:	50                   	push   eax
c000c708:	53                   	push   ebx
c000c709:	e8 80 19 01 00       	call   c001e08e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c70e:	83 c4 20             	add    esp,0x20
c000c711:	e9 73 ff ff ff       	jmp    c000c689 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c716:	83 ec 0c             	sub    esp,0xc
c000c719:	31 ff                	xor    edi,edi
c000c71b:	68 24 0e 02 c0       	push   0xc0020e24
c000c720:	e8 ec 44 00 00       	call   c0010c11 <KePanic(char const*)>
c000c725:	83 c4 10             	add    esp,0x10
c000c728:	e9 28 ff ff ff       	jmp    c000c655 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c72d:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c730:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c734:	89 14 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],edx
c000c73b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c73f:	5b                   	pop    ebx
c000c740:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c747:	89 f0                	mov    eax,esi
c000c749:	5e                   	pop    esi
c000c74a:	5f                   	pop    edi
c000c74b:	c3                   	ret    

c000c74c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c750:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c754:	c1 e0 04             	shl    eax,0x4
c000c757:	8d 50 10             	lea    edx,[eax+0x10]
c000c75a:	39 88 c0 6f 02 c0    	cmp    DWORD PTR [eax-0x3ffd9040],ecx
c000c760:	74 08                	je     c000c76a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c762:	83 c0 04             	add    eax,0x4
c000c765:	39 d0                	cmp    eax,edx
c000c767:	75 f1                	jne    c000c75a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c769:	c3                   	ret    
c000c76a:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c774:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c77e:	eb e2                	jmp    c000c762 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c780 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c780:	53                   	push   ebx
c000c781:	83 ec 08             	sub    esp,0x8
c000c784:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c788:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c78d:	74 0e                	je     c000c79d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c78f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000c794:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c79b:	75 37                	jne    c000c7d4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7a1:	83 c0 20             	add    eax,0x20
c000c7a4:	c1 e0 04             	shl    eax,0x4
c000c7a7:	8d 50 10             	lea    edx,[eax+0x10]
c000c7aa:	39 98 c0 6f 02 c0    	cmp    DWORD PTR [eax-0x3ffd9040],ebx
c000c7b0:	74 0c                	je     c000c7be <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c7b2:	83 c0 04             	add    eax,0x4
c000c7b5:	39 d0                	cmp    eax,edx
c000c7b7:	75 f1                	jne    c000c7aa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c7b9:	83 c4 08             	add    esp,0x8
c000c7bc:	5b                   	pop    ebx
c000c7bd:	c3                   	ret    
c000c7be:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c7c8:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7d2:	eb de                	jmp    c000c7b2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c7d4:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c7d9:	7f 11                	jg     c000c7ec <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7df:	0f b6 80 c8 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd738]
c000c7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ea:	eb b1                	jmp    c000c79d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c7ec:	83 ec 0c             	sub    esp,0xc
c000c7ef:	68 15 0e 02 c0       	push   0xc0020e15
c000c7f4:	e8 18 44 00 00       	call   c0010c11 <KePanic(char const*)>
c000c7f9:	83 c4 10             	add    esp,0x10
c000c7fc:	eb 9f                	jmp    c000c79d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c7fe <setupINTS()>:
c000c7fe:	31 c0                	xor    eax,eax
c000c800:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c80a:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c814:	c7 80 c4 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd903c],0x0
c000c81e:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c828:	c7 80 c8 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9038],0x0
c000c832:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c83c:	c7 80 cc 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9034],0x0
c000c846:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c850:	83 c0 10             	add    eax,0x10
c000c853:	3d 00 10 00 00       	cmp    eax,0x1000
c000c858:	75 a6                	jne    c000c800 <setupINTS()+0x2>
c000c85a:	c3                   	ret    

c000c85b <convertLegacyIRQNumber(int)>:
c000c85b:	83 ec 0c             	sub    esp,0xc
c000c85e:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c868:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c86f:	74 0c                	je     c000c87d <convertLegacyIRQNumber(int)+0x22>
c000c871:	83 f8 0f             	cmp    eax,0xf
c000c874:	7f 0b                	jg     c000c881 <convertLegacyIRQNumber(int)+0x26>
c000c876:	0f b6 80 c8 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd738]
c000c87d:	83 c4 0c             	add    esp,0xc
c000c880:	c3                   	ret    
c000c881:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c885:	83 ec 0c             	sub    esp,0xc
c000c888:	68 24 0e 02 c0       	push   0xc0020e24
c000c88d:	e8 7f 43 00 00       	call   c0010c11 <KePanic(char const*)>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c899:	83 c4 0c             	add    esp,0xc
c000c89c:	c3                   	ret    
c000c89d:	90                   	nop

c000c89e <startGUI(void*)>:
c000c89e:	55                   	push   ebp
c000c89f:	89 e5                	mov    ebp,esp
c000c8a1:	53                   	push   ebx
c000c8a2:	83 ec 04             	sub    esp,0x4
c000c8a5:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c8aa:	83 e8 01             	sub    eax,0x1
c000c8ad:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c8b2:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c8b7:	85 c0                	test   eax,eax
c000c8b9:	75 01                	jne    c000c8bc <startGUI(void*)+0x1e>
c000c8bb:	fb                   	sti    
c000c8bc:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c8c2:	83 ec 08             	sub    esp,0x8
c000c8c5:	6a 01                	push   0x1
c000c8c7:	68 81 0e 02 c0       	push   0xc0020e81
c000c8cc:	e8 a1 81 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c000c8d1:	83 c4 10             	add    esp,0x10
c000c8d4:	83 ec 08             	sub    esp,0x8
c000c8d7:	53                   	push   ebx
c000c8d8:	50                   	push   eax
c000c8d9:	e8 c5 83 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c000c8de:	83 c4 10             	add    esp,0x10
c000c8e1:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c8e7:	83 ec 08             	sub    esp,0x8
c000c8ea:	6a 01                	push   0x1
c000c8ec:	68 9b 0e 02 c0       	push   0xc0020e9b
c000c8f1:	e8 7c 81 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	83 ec 08             	sub    esp,0x8
c000c8fc:	53                   	push   ebx
c000c8fd:	50                   	push   eax
c000c8fe:	e8 a0 83 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c000c903:	83 c4 10             	add    esp,0x10
c000c906:	90                   	nop
c000c907:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c90a:	c9                   	leave  
c000c90b:	c3                   	ret    

c000c90c <startGUIVESA(void*)>:
c000c90c:	55                   	push   ebp
c000c90d:	89 e5                	mov    ebp,esp
c000c90f:	53                   	push   ebx
c000c910:	83 ec 04             	sub    esp,0x4
c000c913:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c918:	83 e8 01             	sub    eax,0x1
c000c91b:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c920:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c925:	85 c0                	test   eax,eax
c000c927:	75 01                	jne    c000c92a <startGUIVESA(void*)+0x1e>
c000c929:	fb                   	sti    
c000c92a:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c930:	83 ec 08             	sub    esp,0x8
c000c933:	6a 01                	push   0x1
c000c935:	68 b9 0e 02 c0       	push   0xc0020eb9
c000c93a:	e8 33 81 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c000c93f:	83 c4 10             	add    esp,0x10
c000c942:	83 ec 08             	sub    esp,0x8
c000c945:	53                   	push   ebx
c000c946:	50                   	push   eax
c000c947:	e8 57 83 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c000c94c:	83 c4 10             	add    esp,0x10
c000c94f:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c955:	83 ec 08             	sub    esp,0x8
c000c958:	6a 01                	push   0x1
c000c95a:	68 9b 0e 02 c0       	push   0xc0020e9b
c000c95f:	e8 0e 81 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	83 ec 08             	sub    esp,0x8
c000c96a:	53                   	push   ebx
c000c96b:	50                   	push   eax
c000c96c:	e8 32 83 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c000c971:	83 c4 10             	add    esp,0x10
c000c974:	90                   	nop
c000c975:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c978:	c9                   	leave  
c000c979:	c3                   	ret    

c000c97a <sendKeyToTerminal(unsigned char)>:
c000c97a:	55                   	push   ebp
c000c97b:	89 e5                	mov    ebp,esp
c000c97d:	83 ec 28             	sub    esp,0x28
c000c980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c983:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c986:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000c98b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c98f:	83 ec 08             	sub    esp,0x8
c000c992:	52                   	push   edx
c000c993:	50                   	push   eax
c000c994:	e8 0f c4 ff ff       	call   c0008da8 <VgaText::receiveKey(unsigned char)>
c000c999:	83 c4 10             	add    esp,0x10
c000c99c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c9a0:	83 f8 0a             	cmp    eax,0xa
c000c9a3:	74 16                	je     c000c9bb <sendKeyToTerminal(unsigned char)+0x41>
c000c9a5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c9a9:	83 f8 03             	cmp    eax,0x3
c000c9ac:	74 0d                	je     c000c9bb <sendKeyToTerminal(unsigned char)+0x41>
c000c9ae:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c9b2:	83 f8 1c             	cmp    eax,0x1c
c000c9b5:	0f 85 97 00 00 00    	jne    c000ca52 <sendKeyToTerminal(unsigned char)+0xd8>
c000c9bb:	fa                   	cli    
c000c9bc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c9c1:	83 c0 01             	add    eax,0x1
c000c9c4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c9c9:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000c9ce:	83 c0 01             	add    eax,0x1
c000c9d1:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000c9d6:	a1 c0 7f 02 c0       	mov    eax,ds:0xc0027fc0
c000c9db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9de:	c7 05 c0 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027fc0,0x0
c000c9e8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c9ec:	74 1f                	je     c000ca0d <sendKeyToTerminal(unsigned char)+0x93>
c000c9ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9f1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c9f4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c9f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c9fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9fd:	83 ec 0c             	sub    esp,0xc
c000ca00:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ca03:	e8 e0 8f 00 00       	call   c00159e8 <unblockTask(ThreadControlBlock*)>
c000ca08:	83 c4 10             	add    esp,0x10
c000ca0b:	eb db                	jmp    c000c9e8 <sendKeyToTerminal(unsigned char)+0x6e>
c000ca0d:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000ca12:	83 e8 01             	sub    eax,0x1
c000ca15:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000ca1a:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000ca1f:	85 c0                	test   eax,eax
c000ca21:	75 18                	jne    c000ca3b <sendKeyToTerminal(unsigned char)+0xc1>
c000ca23:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c000ca28:	85 c0                	test   eax,eax
c000ca2a:	74 0f                	je     c000ca3b <sendKeyToTerminal(unsigned char)+0xc1>
c000ca2c:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c000ca36:	e8 95 8a 00 00       	call   c00154d0 <schedule()>
c000ca3b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ca40:	83 e8 01             	sub    eax,0x1
c000ca43:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000ca48:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ca4d:	85 c0                	test   eax,eax
c000ca4f:	75 01                	jne    c000ca52 <sendKeyToTerminal(unsigned char)+0xd8>
c000ca51:	fb                   	sti    
c000ca52:	90                   	nop
c000ca53:	c9                   	leave  
c000ca54:	c3                   	ret    

c000ca55 <sendKeyboardToken(KeyboardToken)>:
c000ca55:	55                   	push   ebp
c000ca56:	89 e5                	mov    ebp,esp
c000ca58:	83 ec 18             	sub    esp,0x18
c000ca5b:	e8 01 42 00 00       	call   c0010c61 <KeUserIOReceived()>
c000ca60:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ca63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca66:	0f b7 c0             	movzx  eax,ax
c000ca69:	83 f2 01             	xor    edx,0x1
c000ca6c:	88 90 e0 7f 02 c0    	mov    BYTE PTR [eax-0x3ffd8020],dl
c000ca72:	a1 c8 7f 02 c0       	mov    eax,ds:0xc0027fc8
c000ca77:	85 c0                	test   eax,eax
c000ca79:	74 24                	je     c000ca9f <sendKeyboardToken(KeyboardToken)+0x4a>
c000ca7b:	8b 0d c8 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027fc8
c000ca81:	83 ec 04             	sub    esp,0x4
c000ca84:	68 e0 7f 02 c0       	push   0xc0027fe0
c000ca89:	83 ec 08             	sub    esp,0x8
c000ca8c:	89 e2                	mov    edx,esp
c000ca8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca91:	89 02                	mov    DWORD PTR [edx],eax
c000ca93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca96:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca9a:	ff d1                	call   ecx
c000ca9c:	83 c4 10             	add    esp,0x10
c000ca9f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000caa3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000caa6:	a0 e8 83 02 c0       	mov    al,ds:0xc00283e8
c000caab:	0f b6 d2             	movzx  edx,dl
c000caae:	0f b6 c0             	movzx  eax,al
c000cab1:	39 c2                	cmp    edx,eax
c000cab3:	74 1c                	je     c000cad1 <sendKeyboardToken(KeyboardToken)+0x7c>
c000cab5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000cab8:	a2 e8 83 02 c0       	mov    ds:0xc00283e8,al
c000cabd:	a0 e8 83 02 c0       	mov    al,ds:0xc00283e8
c000cac2:	0f b6 c0             	movzx  eax,al
c000cac5:	83 ec 0c             	sub    esp,0xc
c000cac8:	50                   	push   eax
c000cac9:	e8 26 ba ff ff       	call   c00084f4 <setTerminalScrollLock(bool)>
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000cad4:	0f b6 c0             	movzx  eax,al
c000cad7:	85 c0                	test   eax,eax
c000cad9:	0f 84 da 00 00 00    	je     c000cbb9 <sendKeyboardToken(KeyboardToken)+0x164>
c000cadf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae2:	0f b7 c0             	movzx  eax,ax
c000cae5:	3d 18 03 00 00       	cmp    eax,0x318
c000caea:	75 06                	jne    c000caf2 <sendKeyboardToken(KeyboardToken)+0x9d>
c000caec:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000caf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf5:	0f b7 c0             	movzx  eax,ax
c000caf8:	3d 19 03 00 00       	cmp    eax,0x319
c000cafd:	75 06                	jne    c000cb05 <sendKeyboardToken(KeyboardToken)+0xb0>
c000caff:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000cb05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb08:	0f b7 c0             	movzx  eax,ax
c000cb0b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cb10:	75 06                	jne    c000cb18 <sendKeyboardToken(KeyboardToken)+0xc3>
c000cb12:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000cb18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb1b:	0f b7 c0             	movzx  eax,ax
c000cb1e:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cb23:	75 06                	jne    c000cb2b <sendKeyboardToken(KeyboardToken)+0xd6>
c000cb25:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000cb2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb2e:	0f b7 c0             	movzx  eax,ax
c000cb31:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cb36:	75 06                	jne    c000cb3e <sendKeyboardToken(KeyboardToken)+0xe9>
c000cb38:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cb3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb41:	0f b7 c0             	movzx  eax,ax
c000cb44:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cb49:	75 06                	jne    c000cb51 <sendKeyboardToken(KeyboardToken)+0xfc>
c000cb4b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb54:	0f b7 c0             	movzx  eax,ax
c000cb57:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cb5c:	75 06                	jne    c000cb64 <sendKeyboardToken(KeyboardToken)+0x10f>
c000cb5e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cb64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb67:	0f b7 c0             	movzx  eax,ax
c000cb6a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cb6f:	75 06                	jne    c000cb77 <sendKeyboardToken(KeyboardToken)+0x122>
c000cb71:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cb77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb7a:	0f b7 c0             	movzx  eax,ax
c000cb7d:	3d 20 03 00 00       	cmp    eax,0x320
c000cb82:	75 06                	jne    c000cb8a <sendKeyboardToken(KeyboardToken)+0x135>
c000cb84:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cb8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb8d:	0f b7 c0             	movzx  eax,ax
c000cb90:	3d 21 03 00 00       	cmp    eax,0x321
c000cb95:	75 06                	jne    c000cb9d <sendKeyboardToken(KeyboardToken)+0x148>
c000cb97:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	0f b7 c0             	movzx  eax,ax
c000cba3:	3d 22 03 00 00       	cmp    eax,0x322
c000cba8:	0f 85 f1 00 00 00    	jne    c000cc9f <sendKeyboardToken(KeyboardToken)+0x24a>
c000cbae:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cbb4:	e9 e6 00 00 00       	jmp    c000cc9f <sendKeyboardToken(KeyboardToken)+0x24a>
c000cbb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbbc:	0f b7 c0             	movzx  eax,ax
c000cbbf:	3d 18 03 00 00       	cmp    eax,0x318
c000cbc4:	75 0a                	jne    c000cbd0 <sendKeyboardToken(KeyboardToken)+0x17b>
c000cbc6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cbcc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd3:	0f b7 c0             	movzx  eax,ax
c000cbd6:	3d 19 03 00 00       	cmp    eax,0x319
c000cbdb:	75 0a                	jne    c000cbe7 <sendKeyboardToken(KeyboardToken)+0x192>
c000cbdd:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cbe3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbea:	0f b7 c0             	movzx  eax,ax
c000cbed:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cbf2:	75 0a                	jne    c000cbfe <sendKeyboardToken(KeyboardToken)+0x1a9>
c000cbf4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cbfa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc01:	0f b7 c0             	movzx  eax,ax
c000cc04:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cc09:	75 0a                	jne    c000cc15 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000cc0b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cc11:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc18:	0f b7 c0             	movzx  eax,ax
c000cc1b:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cc20:	75 0a                	jne    c000cc2c <sendKeyboardToken(KeyboardToken)+0x1d7>
c000cc22:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cc28:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc2f:	0f b7 c0             	movzx  eax,ax
c000cc32:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cc37:	75 0a                	jne    c000cc43 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000cc39:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cc3f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc46:	0f b7 c0             	movzx  eax,ax
c000cc49:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cc4e:	75 0a                	jne    c000cc5a <sendKeyboardToken(KeyboardToken)+0x205>
c000cc50:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cc56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc5d:	0f b7 c0             	movzx  eax,ax
c000cc60:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cc65:	75 0a                	jne    c000cc71 <sendKeyboardToken(KeyboardToken)+0x21c>
c000cc67:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cc6d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc74:	0f b7 c0             	movzx  eax,ax
c000cc77:	3d 20 03 00 00       	cmp    eax,0x320
c000cc7c:	75 0a                	jne    c000cc88 <sendKeyboardToken(KeyboardToken)+0x233>
c000cc7e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cc84:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc8b:	0f b7 c0             	movzx  eax,ax
c000cc8e:	3d 21 03 00 00       	cmp    eax,0x321
c000cc93:	75 0a                	jne    c000cc9f <sendKeyboardToken(KeyboardToken)+0x24a>
c000cc95:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cc9b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cca2:	0f b7 c0             	movzx  eax,ax
c000cca5:	3d 00 02 00 00       	cmp    eax,0x200
c000ccaa:	75 2f                	jne    c000ccdb <sendKeyboardToken(KeyboardToken)+0x286>
c000ccac:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c000ccb1:	83 f0 01             	xor    eax,0x1
c000ccb4:	0f b6 c0             	movzx  eax,al
c000ccb7:	85 c0                	test   eax,eax
c000ccb9:	74 20                	je     c000ccdb <sendKeyboardToken(KeyboardToken)+0x286>
c000ccbb:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000ccc0:	6a 01                	push   0x1
c000ccc2:	6a 00                	push   0x0
c000ccc4:	68 9e c8 00 c0       	push   0xc000c89e
c000ccc9:	50                   	push   eax
c000ccca:	e8 b1 85 00 00       	call   c0015280 <Process::createThread(void (*)(void*), void*, int)>
c000cccf:	83 c4 10             	add    esp,0x10
c000ccd2:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c000ccd9:	eb 3a                	jmp    c000cd15 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccde:	0f b7 c0             	movzx  eax,ax
c000cce1:	3d 01 02 00 00       	cmp    eax,0x201
c000cce6:	75 2d                	jne    c000cd15 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000cce8:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c000cced:	83 f0 01             	xor    eax,0x1
c000ccf0:	0f b6 c0             	movzx  eax,al
c000ccf3:	85 c0                	test   eax,eax
c000ccf5:	74 1e                	je     c000cd15 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccf7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000ccfc:	6a 01                	push   0x1
c000ccfe:	6a 00                	push   0x0
c000cd00:	68 0c c9 00 c0       	push   0xc000c90c
c000cd05:	50                   	push   eax
c000cd06:	e8 75 85 00 00       	call   c0015280 <Process::createThread(void (*)(void*), void*, int)>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c000cd15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd18:	0f b7 c0             	movzx  eax,ax
c000cd1b:	3d 25 03 00 00       	cmp    eax,0x325
c000cd20:	75 06                	jne    c000cd28 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000cd22:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cd28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd2b:	0f b7 c0             	movzx  eax,ax
c000cd2e:	3d 24 03 00 00       	cmp    eax,0x324
c000cd33:	75 06                	jne    c000cd3b <sendKeyboardToken(KeyboardToken)+0x2e6>
c000cd35:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cd3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd3e:	0f b7 c0             	movzx  eax,ax
c000cd41:	3d 23 03 00 00       	cmp    eax,0x323
c000cd46:	75 06                	jne    c000cd4e <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cd48:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cd4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd51:	0f b7 c0             	movzx  eax,ax
c000cd54:	3d 26 03 00 00       	cmp    eax,0x326
c000cd59:	75 06                	jne    c000cd61 <sendKeyboardToken(KeyboardToken)+0x30c>
c000cd5b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cd61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd64:	0f b7 c0             	movzx  eax,ax
c000cd67:	3d 27 03 00 00       	cmp    eax,0x327
c000cd6c:	75 06                	jne    c000cd74 <sendKeyboardToken(KeyboardToken)+0x31f>
c000cd6e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cd74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd77:	0f b7 c0             	movzx  eax,ax
c000cd7a:	3d 22 03 00 00       	cmp    eax,0x322
c000cd7f:	75 06                	jne    c000cd87 <sendKeyboardToken(KeyboardToken)+0x332>
c000cd81:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cd87:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cd8b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd8e:	83 f0 01             	xor    eax,0x1
c000cd91:	0f b6 c0             	movzx  eax,al
c000cd94:	85 c0                	test   eax,eax
c000cd96:	74 7c                	je     c000ce14 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cd98:	a0 e1 80 02 c0       	mov    al,ds:0xc00280e1
c000cd9d:	0f b6 c0             	movzx  eax,al
c000cda0:	85 c0                	test   eax,eax
c000cda2:	74 43                	je     c000cde7 <sendKeyboardToken(KeyboardToken)+0x392>
c000cda4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cda8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cdac:	85 c0                	test   eax,eax
c000cdae:	74 2b                	je     c000cddb <sendKeyboardToken(KeyboardToken)+0x386>
c000cdb0:	8b 15 e4 83 02 c0    	mov    edx,DWORD PTR ds:0xc00283e4
c000cdb6:	89 d0                	mov    eax,edx
c000cdb8:	c1 e0 02             	shl    eax,0x2
c000cdbb:	01 d0                	add    eax,edx
c000cdbd:	01 c0                	add    eax,eax
c000cdbf:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c000cdc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc7:	0f b7 c0             	movzx  eax,ax
c000cdca:	8d 50 d0             	lea    edx,[eax-0x30]
c000cdcd:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdd2:	01 d0                	add    eax,edx
c000cdd4:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c000cdd9:	eb 71                	jmp    c000ce4c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cddb:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000cde5:	eb 65                	jmp    c000ce4c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cde7:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdec:	85 c0                	test   eax,eax
c000cdee:	74 18                	je     c000ce08 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cdf0:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdf5:	0f b6 c0             	movzx  eax,al
c000cdf8:	83 ec 0c             	sub    esp,0xc
c000cdfb:	50                   	push   eax
c000cdfc:	e8 79 fb ff ff       	call   c000c97a <sendKeyToTerminal(unsigned char)>
c000ce01:	83 c4 10             	add    esp,0x10
c000ce04:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ce08:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000ce12:	eb 38                	jmp    c000ce4c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000ce14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce17:	0f b7 c0             	movzx  eax,ax
c000ce1a:	3d 01 01 00 00       	cmp    eax,0x101
c000ce1f:	75 2b                	jne    c000ce4c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000ce21:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000ce26:	85 c0                	test   eax,eax
c000ce28:	74 18                	je     c000ce42 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000ce2a:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000ce2f:	0f b6 c0             	movzx  eax,al
c000ce32:	83 ec 0c             	sub    esp,0xc
c000ce35:	50                   	push   eax
c000ce36:	e8 3f fb ff ff       	call   c000c97a <sendKeyToTerminal(unsigned char)>
c000ce3b:	83 c4 10             	add    esp,0x10
c000ce3e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ce42:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000ce4c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce4f:	83 f0 01             	xor    eax,0x1
c000ce52:	0f b6 c0             	movzx  eax,al
c000ce55:	85 c0                	test   eax,eax
c000ce57:	74 5a                	je     c000ceb3 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce59:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce5c:	83 f0 01             	xor    eax,0x1
c000ce5f:	0f b6 c0             	movzx  eax,al
c000ce62:	85 c0                	test   eax,eax
c000ce64:	74 4d                	je     c000ceb3 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce66:	a0 e0 80 02 c0       	mov    al,ds:0xc00280e0
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	74 3e                	je     c000ceb3 <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce78:	0f b7 c0             	movzx  eax,ax
c000ce7b:	83 f8 1f             	cmp    eax,0x1f
c000ce7e:	76 0b                	jbe    c000ce8b <sendKeyboardToken(KeyboardToken)+0x436>
c000ce80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce83:	0f b7 c0             	movzx  eax,ax
c000ce86:	83 f8 7e             	cmp    eax,0x7e
c000ce89:	76 16                	jbe    c000cea1 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce8e:	0f b7 c0             	movzx  eax,ax
c000ce91:	83 f8 0a             	cmp    eax,0xa
c000ce94:	74 0b                	je     c000cea1 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce99:	0f b7 c0             	movzx  eax,ax
c000ce9c:	83 f8 08             	cmp    eax,0x8
c000ce9f:	75 12                	jne    c000ceb3 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cea4:	0f b6 c0             	movzx  eax,al
c000cea7:	83 ec 0c             	sub    esp,0xc
c000ceaa:	50                   	push   eax
c000ceab:	e8 ca fa ff ff       	call   c000c97a <sendKeyToTerminal(unsigned char)>
c000ceb0:	83 c4 10             	add    esp,0x10
c000ceb3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ceb6:	83 f0 01             	xor    eax,0x1
c000ceb9:	0f b6 c0             	movzx  eax,al
c000cebc:	85 c0                	test   eax,eax
c000cebe:	74 5d                	je     c000cf1d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cec0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cec3:	83 f0 01             	xor    eax,0x1
c000cec6:	0f b6 c0             	movzx  eax,al
c000cec9:	85 c0                	test   eax,eax
c000cecb:	74 50                	je     c000cf1d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cecd:	a0 e0 80 02 c0       	mov    al,ds:0xc00280e0
c000ced2:	0f b6 c0             	movzx  eax,al
c000ced5:	85 c0                	test   eax,eax
c000ced7:	74 44                	je     c000cf1d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ced9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cedc:	0f b7 c0             	movzx  eax,ax
c000cedf:	83 f8 3f             	cmp    eax,0x3f
c000cee2:	76 39                	jbe    c000cf1d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee7:	0f b7 c0             	movzx  eax,ax
c000ceea:	83 f8 7f             	cmp    eax,0x7f
c000ceed:	77 2e                	ja     c000cf1d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ceef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cef2:	88 c2                	mov    dl,al
c000cef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cef7:	0f b7 c0             	movzx  eax,ax
c000cefa:	83 f8 5f             	cmp    eax,0x5f
c000cefd:	76 04                	jbe    c000cf03 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000ceff:	b0 20                	mov    al,0x20
c000cf01:	eb 02                	jmp    c000cf05 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cf03:	b0 00                	mov    al,0x0
c000cf05:	89 d1                	mov    ecx,edx
c000cf07:	29 c1                	sub    ecx,eax
c000cf09:	89 c8                	mov    eax,ecx
c000cf0b:	83 e8 40             	sub    eax,0x40
c000cf0e:	0f b6 c0             	movzx  eax,al
c000cf11:	83 ec 0c             	sub    esp,0xc
c000cf14:	50                   	push   eax
c000cf15:	e8 60 fa ff ff       	call   c000c97a <sendKeyToTerminal(unsigned char)>
c000cf1a:	83 c4 10             	add    esp,0x10
c000cf1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf20:	0f b7 c0             	movzx  eax,ax
c000cf23:	3d 00 03 00 00       	cmp    eax,0x300
c000cf28:	75 12                	jne    c000cf3c <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cf2a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cf2d:	83 f0 01             	xor    eax,0x1
c000cf30:	0f b6 c0             	movzx  eax,al
c000cf33:	85 c0                	test   eax,eax
c000cf35:	74 05                	je     c000cf3c <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cf37:	e8 b9 b5 ff ff       	call   c00084f5 <doTerminalCycle()>
c000cf3c:	90                   	nop
c000cf3d:	c9                   	leave  
c000cf3e:	c3                   	ret    

c000cf3f <clearInternalKeybuffer(VgaText*)>:
c000cf3f:	55                   	push   ebp
c000cf40:	89 e5                	mov    ebp,esp
c000cf42:	83 ec 08             	sub    esp,0x8
c000cf45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf48:	05 02 01 00 00       	add    eax,0x102
c000cf4d:	83 ec 0c             	sub    esp,0xc
c000cf50:	50                   	push   eax
c000cf51:	e8 1a 36 ff ff       	call   c0000570 <strlen>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf5c:	81 c2 02 01 00 00    	add    edx,0x102
c000cf62:	83 ec 04             	sub    esp,0x4
c000cf65:	50                   	push   eax
c000cf66:	6a 00                	push   0x0
c000cf68:	52                   	push   edx
c000cf69:	e8 82 35 ff ff       	call   c00004f0 <memset>
c000cf6e:	83 c4 10             	add    esp,0x10
c000cf71:	90                   	nop
c000cf72:	c9                   	leave  
c000cf73:	c3                   	ret    

c000cf74 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cf74:	55                   	push   ebp
c000cf75:	89 e5                	mov    ebp,esp
c000cf77:	83 ec 18             	sub    esp,0x18
c000cf7a:	a1 c8 7f 02 c0       	mov    eax,ds:0xc0027fc8
c000cf7f:	85 c0                	test   eax,eax
c000cf81:	74 2a                	je     c000cfad <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cf83:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cf89:	8b 0d c8 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027fc8
c000cf8f:	83 ec 04             	sub    esp,0x4
c000cf92:	68 e0 7f 02 c0       	push   0xc0027fe0
c000cf97:	83 ec 08             	sub    esp,0x8
c000cf9a:	89 e2                	mov    edx,esp
c000cf9c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cf9f:	89 02                	mov    DWORD PTR [edx],eax
c000cfa1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cfa4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cfa8:	ff d1                	call   ecx
c000cfaa:	83 c4 10             	add    esp,0x10
c000cfad:	fb                   	sti    
c000cfae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cfb5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cfb9:	0f 84 0d 01 00 00    	je     c000d0cc <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cfbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfc2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cfc8:	0f be c0             	movsx  eax,al
c000cfcb:	85 c0                	test   eax,eax
c000cfcd:	75 2c                	jne    c000cffb <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cfcf:	fa                   	cli    
c000cfd0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cfd5:	83 c0 01             	add    eax,0x1
c000cfd8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000cfdd:	e8 ee 84 00 00       	call   c00154d0 <schedule()>
c000cfe2:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cfe7:	83 e8 01             	sub    eax,0x1
c000cfea:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000cfef:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cff4:	85 c0                	test   eax,eax
c000cff6:	75 c7                	jne    c000cfbf <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cff8:	fb                   	sti    
c000cff9:	eb c4                	jmp    c000cfbf <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cffb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cffe:	8d 50 01             	lea    edx,[eax+0x1]
c000d001:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d004:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d007:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d00d:	88 10                	mov    BYTE PTR [eax],dl
c000d00f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d012:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d018:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d01b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d01f:	83 f8 03             	cmp    eax,0x3
c000d022:	75 1e                	jne    c000d042 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d024:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d029:	8b 00                	mov    eax,DWORD PTR [eax]
c000d02b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d02e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d034:	83 ec 08             	sub    esp,0x8
c000d037:	6a 02                	push   0x2
c000d039:	50                   	push   eax
c000d03a:	e8 73 40 00 00       	call   c00110b2 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d03f:	83 c4 10             	add    esp,0x10
c000d042:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d046:	83 f8 1c             	cmp    eax,0x1c
c000d049:	75 1e                	jne    c000d069 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d04b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d050:	8b 00                	mov    eax,DWORD PTR [eax]
c000d052:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d055:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d05b:	83 ec 08             	sub    esp,0x8
c000d05e:	6a 09                	push   0x9
c000d060:	50                   	push   eax
c000d061:	e8 4c 40 00 00       	call   c00110b2 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d066:	83 c4 10             	add    esp,0x10
c000d069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d06c:	05 02 01 00 00       	add    eax,0x102
c000d071:	83 ec 0c             	sub    esp,0xc
c000d074:	50                   	push   eax
c000d075:	e8 f6 34 ff ff       	call   c0000570 <strlen>
c000d07a:	83 c4 10             	add    esp,0x10
c000d07d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d080:	81 c2 02 01 00 00    	add    edx,0x102
c000d086:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d089:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d08c:	81 c2 02 01 00 00    	add    edx,0x102
c000d092:	83 ec 04             	sub    esp,0x4
c000d095:	50                   	push   eax
c000d096:	51                   	push   ecx
c000d097:	52                   	push   edx
c000d098:	e8 33 33 ff ff       	call   c00003d0 <memmove>
c000d09d:	83 c4 10             	add    esp,0x10
c000d0a0:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d0a4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d0a8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d0ac:	83 f8 0a             	cmp    eax,0xa
c000d0af:	74 16                	je     c000d0c7 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d0b1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d0b5:	83 f8 03             	cmp    eax,0x3
c000d0b8:	74 0d                	je     c000d0c7 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d0ba:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d0be:	83 f8 1c             	cmp    eax,0x1c
c000d0c1:	0f 85 ee fe ff ff    	jne    c000cfb5 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d0c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0ca:	eb 03                	jmp    c000d0cf <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d0cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0cf:	c9                   	leave  
c000d0d0:	c3                   	ret    
c000d0d1:	90                   	nop

c000d0d2 <Keyboard::Keyboard(char const*)>:
c000d0d2:	83 ec 0c             	sub    esp,0xc
c000d0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0d9:	83 ec 08             	sub    esp,0x8
c000d0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e0:	50                   	push   eax
c000d0e1:	e8 4c f1 ff ff       	call   c000c232 <Device::Device(char const*)>
c000d0e6:	83 c4 10             	add    esp,0x10
c000d0e9:	ba dc 0e 02 c0       	mov    edx,0xc0020edc
c000d0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f2:	89 10                	mov    DWORD PTR [eax],edx
c000d0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d102:	c6 05 c4 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027fc4,0x1
c000d109:	90                   	nop
c000d10a:	83 c4 0c             	add    esp,0xc
c000d10d:	c3                   	ret    

c000d10e <Keyboard::~Keyboard()>:
c000d10e:	83 ec 0c             	sub    esp,0xc
c000d111:	ba dc 0e 02 c0       	mov    edx,0xc0020edc
c000d116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d11a:	89 10                	mov    DWORD PTR [eax],edx
c000d11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d120:	83 ec 0c             	sub    esp,0xc
c000d123:	50                   	push   eax
c000d124:	e8 73 ee ff ff       	call   c000bf9c <Device::~Device()>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	90                   	nop
c000d12d:	83 c4 0c             	add    esp,0xc
c000d130:	c3                   	ret    
c000d131:	90                   	nop

c000d132 <Keyboard::~Keyboard()>:
c000d132:	83 ec 0c             	sub    esp,0xc
c000d135:	83 ec 0c             	sub    esp,0xc
c000d138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13c:	e8 cd ff ff ff       	call   c000d10e <Keyboard::~Keyboard()>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	83 ec 08             	sub    esp,0x8
c000d147:	68 5c 01 00 00       	push   0x15c
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	e8 b7 d6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d155:	83 c4 10             	add    esp,0x10
c000d158:	83 c4 0c             	add    esp,0xc
c000d15b:	c3                   	ret    

c000d15c <LogicalDisk::close(int, int, void*)>:
c000d15c:	83 c8 ff             	or     eax,0xffffffff
c000d15f:	c3                   	ret    

c000d160 <LogicalDisk::~LogicalDisk()>:
c000d160:	83 ec 0c             	sub    esp,0xc
c000d163:	ba 54 0f 02 c0       	mov    edx,0xc0020f54
c000d168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16c:	89 10                	mov    DWORD PTR [eax],edx
c000d16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d172:	83 ec 0c             	sub    esp,0xc
c000d175:	50                   	push   eax
c000d176:	e8 21 ee ff ff       	call   c000bf9c <Device::~Device()>
c000d17b:	83 c4 10             	add    esp,0x10
c000d17e:	90                   	nop
c000d17f:	83 c4 0c             	add    esp,0xc
c000d182:	c3                   	ret    
c000d183:	90                   	nop

c000d184 <LogicalDisk::~LogicalDisk()>:
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	83 ec 0c             	sub    esp,0xc
c000d18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18e:	e8 cd ff ff ff       	call   c000d160 <LogicalDisk::~LogicalDisk()>
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	83 ec 08             	sub    esp,0x8
c000d199:	68 78 01 00 00       	push   0x178
c000d19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a2:	e8 65 d6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	83 c4 0c             	add    esp,0xc
c000d1ad:	c3                   	ret    

c000d1ae <LogicalDisk::open(int, int, void*)>:
c000d1ae:	83 ec 18             	sub    esp,0x18
c000d1b1:	68 08 0f 02 c0       	push   0xc0020f08
c000d1b6:	e8 56 3a 00 00       	call   c0010c11 <KePanic(char const*)>
c000d1bb:	83 c8 ff             	or     eax,0xffffffff
c000d1be:	83 c4 1c             	add    esp,0x1c
c000d1c1:	c3                   	ret    

c000d1c2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d1c2:	53                   	push   ebx
c000d1c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d1cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1cf:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d1d5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d1db:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d1e1:	77 10                	ja     c000d1f3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d1e3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d1e9:	89 d3                	mov    ebx,edx
c000d1eb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d1f1:	72 05                	jb     c000d1f8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d1f3:	83 c8 ff             	or     eax,0xffffffff
c000d1f6:	89 c2                	mov    edx,eax
c000d1f8:	5b                   	pop    ebx
c000d1f9:	c3                   	ret    

c000d1fa <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d1fa:	56                   	push   esi
c000d1fb:	83 c8 ff             	or     eax,0xffffffff
c000d1fe:	53                   	push   ebx
c000d1ff:	89 c2                	mov    edx,eax
c000d201:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d205:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d209:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d20d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d213:	77 27                	ja     c000d23c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d215:	89 d8                	mov    eax,ebx
c000d217:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d21d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d223:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d228:	89 c2                	mov    edx,eax
c000d22a:	73 10                	jae    c000d23c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d22c:	89 c8                	mov    eax,ecx
c000d22e:	89 da                	mov    edx,ebx
c000d230:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d236:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d23c:	5b                   	pop    ebx
c000d23d:	5e                   	pop    esi
c000d23e:	c3                   	ret    
c000d23f:	90                   	nop

c000d240 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d240:	83 ec 1c             	sub    esp,0x1c
c000d243:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d247:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d24b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d24f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d253:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d257:	89 04 24             	mov    DWORD PTR [esp],eax
c000d25a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d25e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d266:	83 ec 08             	sub    esp,0x8
c000d269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26d:	50                   	push   eax
c000d26e:	e8 bf ef ff ff       	call   c000c232 <Device::Device(char const*)>
c000d273:	83 c4 10             	add    esp,0x10
c000d276:	ba 54 0f 02 c0       	mov    edx,0xc0020f54
c000d27b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d27f:	89 10                	mov    DWORD PTR [eax],edx
c000d281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d285:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d290:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d29b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d2a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2a6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d2b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d2b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d2bc:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d2c2:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d2c8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d2cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d2cf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d2d3:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d2d9:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d2df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d2e7:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2f1:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d2fb:	90                   	nop
c000d2fc:	83 c4 1c             	add    esp,0x1c
c000d2ff:	c3                   	ret    

c000d300 <LogicalDisk::assignDriveLetter()>:
c000d300:	55                   	push   ebp
c000d301:	57                   	push   edi
c000d302:	56                   	push   esi
c000d303:	53                   	push   ebx
c000d304:	83 ec 14             	sub    esp,0x14
c000d307:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d30b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d311:	b0 41                	mov    al,0x41
c000d313:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d319:	84 d2                	test   dl,dl
c000d31b:	75 02                	jne    c000d31f <LogicalDisk::assignDriveLetter()+0x1f>
c000d31d:	b0 43                	mov    al,0x43
c000d31f:	8b 3d 00 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028400
c000d325:	0f b6 ca             	movzx  ecx,dl
c000d328:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d32c:	0f be e8             	movsx  ebp,al
c000d32f:	8b 3d 04 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028404
c000d335:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d339:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d33d:	3c 43                	cmp    al,0x43
c000d33f:	75 10                	jne    c000d351 <LogicalDisk::assignDriveLetter()+0x51>
c000d341:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d348:	75 5a                	jne    c000d3a4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d34a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d34f:	75 53                	jne    c000d3a4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d351:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d354:	ba 01 00 00 00       	mov    edx,0x1
c000d359:	89 34 24             	mov    DWORD PTR [esp],esi
c000d35c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d35f:	d3 e2                	shl    edx,cl
c000d361:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d365:	89 d7                	mov    edi,edx
c000d367:	89 d6                	mov    esi,edx
c000d369:	c1 ff 1f             	sar    edi,0x1f
c000d36c:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d370:	21 f9                	and    ecx,edi
c000d372:	09 d1                	or     ecx,edx
c000d374:	75 2e                	jne    c000d3a4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d376:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d37a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d37e:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d384:	09 f2                	or     edx,esi
c000d386:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d389:	89 15 00 84 02 c0    	mov    DWORD PTR ds:0xc0028400,edx
c000d38f:	89 1c b5 20 84 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7be0],ebx
c000d396:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d39a:	09 fa                	or     edx,edi
c000d39c:	89 15 04 84 02 c0    	mov    DWORD PTR ds:0xc0028404,edx
c000d3a2:	eb 0d                	jmp    c000d3b1 <LogicalDisk::assignDriveLetter()+0xb1>
c000d3a4:	8d 50 01             	lea    edx,[eax+0x1]
c000d3a7:	45                   	inc    ebp
c000d3a8:	88 d0                	mov    al,dl
c000d3aa:	80 fa 5b             	cmp    dl,0x5b
c000d3ad:	75 8e                	jne    c000d33d <LogicalDisk::assignDriveLetter()+0x3d>
c000d3af:	31 c0                	xor    eax,eax
c000d3b1:	83 c4 14             	add    esp,0x14
c000d3b4:	5b                   	pop    ebx
c000d3b5:	5e                   	pop    esi
c000d3b6:	5f                   	pop    edi
c000d3b7:	5d                   	pop    ebp
c000d3b8:	c3                   	ret    
c000d3b9:	90                   	nop

c000d3ba <LogicalDisk::mount()>:
c000d3ba:	56                   	push   esi
c000d3bb:	53                   	push   ebx
c000d3bc:	53                   	push   ebx
c000d3bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3c1:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c000d3c7:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d3d1:	85 db                	test   ebx,ebx
c000d3d3:	74 27                	je     c000d3fc <LogicalDisk::mount()+0x42>
c000d3d5:	51                   	push   ecx
c000d3d6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d3dd:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d3df:	83 e8 41             	sub    eax,0x41
c000d3e2:	50                   	push   eax
c000d3e3:	56                   	push   esi
c000d3e4:	53                   	push   ebx
c000d3e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3e8:	83 c4 10             	add    esp,0x10
c000d3eb:	84 c0                	test   al,al
c000d3ed:	74 08                	je     c000d3f7 <LogicalDisk::mount()+0x3d>
c000d3ef:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d3f5:	eb 07                	jmp    c000d3fe <LogicalDisk::mount()+0x44>
c000d3f7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d3fa:	eb d5                	jmp    c000d3d1 <LogicalDisk::mount()+0x17>
c000d3fc:	31 c0                	xor    eax,eax
c000d3fe:	5a                   	pop    edx
c000d3ff:	5b                   	pop    ebx
c000d400:	5e                   	pop    esi
c000d401:	c3                   	ret    

c000d402 <LogicalDisk::unmount()>:
c000d402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d406:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d410:	c3                   	ret    
c000d411:	90                   	nop

c000d412 <LogicalDisk::eject()>:
c000d412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d416:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d41c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d41e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d422:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d425:	90                   	nop

c000d426 <LogicalDisk::unassignDriveLetter()>:
c000d426:	57                   	push   edi
c000d427:	56                   	push   esi
c000d428:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d42c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d433:	85 c9                	test   ecx,ecx
c000d435:	75 0f                	jne    c000d446 <LogicalDisk::unassignDriveLetter()+0x20>
c000d437:	c7 44 24 0c 2c 0f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020f2c
c000d43f:	5e                   	pop    esi
c000d440:	5f                   	pop    edi
c000d441:	e9 cb 37 00 00       	jmp    c0010c11 <KePanic(char const*)>
c000d446:	83 e9 41             	sub    ecx,0x41
c000d449:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d450:	b8 01 00 00 00       	mov    eax,0x1
c000d455:	c7 04 8d 20 84 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7be0],0x0
c000d460:	d3 e0                	shl    eax,cl
c000d462:	89 c7                	mov    edi,eax
c000d464:	f7 d0                	not    eax
c000d466:	c1 ff 1f             	sar    edi,0x1f
c000d469:	21 05 00 84 02 c0    	and    DWORD PTR ds:0xc0028400,eax
c000d46f:	89 fe                	mov    esi,edi
c000d471:	f7 d6                	not    esi
c000d473:	21 35 04 84 02 c0    	and    DWORD PTR ds:0xc0028404,esi
c000d479:	5e                   	pop    esi
c000d47a:	5f                   	pop    edi
c000d47b:	c3                   	ret    

c000d47c <LogicalDisk::read(unsigned long long, int, void*)>:
c000d47c:	57                   	push   edi
c000d47d:	56                   	push   esi
c000d47e:	53                   	push   ebx
c000d47f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d483:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d487:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d48b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d48f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d495:	77 41                	ja     c000d4d8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d497:	99                   	cdq    
c000d498:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d49e:	01 c8                	add    eax,ecx
c000d4a0:	11 da                	adc    edx,ebx
c000d4a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d4a8:	19 d7                	sbb    edi,edx
c000d4aa:	72 33                	jb     c000d4df <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d4ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d4b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d4b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d4bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d4c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d4c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d4cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4d0:	5b                   	pop    ebx
c000d4d1:	5e                   	pop    esi
c000d4d2:	5f                   	pop    edi
c000d4d3:	e9 c6 0a 00 00       	jmp    c000df9e <VCache::read(unsigned long long, int, void*)>
c000d4d8:	b8 05 00 00 00       	mov    eax,0x5
c000d4dd:	eb 05                	jmp    c000d4e4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d4df:	b8 07 00 00 00       	mov    eax,0x7
c000d4e4:	5b                   	pop    ebx
c000d4e5:	5e                   	pop    esi
c000d4e6:	5f                   	pop    edi
c000d4e7:	c3                   	ret    

c000d4e8 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d4e8:	57                   	push   edi
c000d4e9:	56                   	push   esi
c000d4ea:	53                   	push   ebx
c000d4eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d4ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d4f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d4f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d4fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d501:	77 41                	ja     c000d544 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d503:	99                   	cdq    
c000d504:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d50a:	01 c8                	add    eax,ecx
c000d50c:	11 da                	adc    edx,ebx
c000d50e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d514:	19 d7                	sbb    edi,edx
c000d516:	72 33                	jb     c000d54b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d518:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d51e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d524:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d528:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d52c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d532:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d538:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d53c:	5b                   	pop    ebx
c000d53d:	5e                   	pop    esi
c000d53e:	5f                   	pop    edi
c000d53f:	e9 6c 09 00 00       	jmp    c000deb0 <VCache::write(unsigned long long, int, void*)>
c000d544:	b8 05 00 00 00       	mov    eax,0x5
c000d549:	eb 05                	jmp    c000d550 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d54b:	b8 07 00 00 00       	mov    eax,0x7
c000d550:	5b                   	pop    ebx
c000d551:	5e                   	pop    esi
c000d552:	5f                   	pop    edi
c000d553:	c3                   	ret    

c000d554 <Mouse::Mouse(char const*)>:
c000d554:	83 ec 0c             	sub    esp,0xc
c000d557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55b:	83 ec 08             	sub    esp,0x8
c000d55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d562:	50                   	push   eax
c000d563:	e8 ca ec ff ff       	call   c000c232 <Device::Device(char const*)>
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	ba 80 0f 02 c0       	mov    edx,0xc0020f80
c000d570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d574:	89 10                	mov    DWORD PTR [eax],edx
c000d576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d57a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d584:	90                   	nop
c000d585:	83 c4 0c             	add    esp,0xc
c000d588:	c3                   	ret    
c000d589:	90                   	nop
c000d58a:	66 90                	xchg   ax,ax

c000d58c <Mouse::~Mouse()>:
c000d58c:	83 ec 0c             	sub    esp,0xc
c000d58f:	ba 80 0f 02 c0       	mov    edx,0xc0020f80
c000d594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d598:	89 10                	mov    DWORD PTR [eax],edx
c000d59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d59e:	83 ec 0c             	sub    esp,0xc
c000d5a1:	50                   	push   eax
c000d5a2:	e8 f5 e9 ff ff       	call   c000bf9c <Device::~Device()>
c000d5a7:	83 c4 10             	add    esp,0x10
c000d5aa:	90                   	nop
c000d5ab:	83 c4 0c             	add    esp,0xc
c000d5ae:	c3                   	ret    
c000d5af:	90                   	nop

c000d5b0 <Mouse::~Mouse()>:
c000d5b0:	83 ec 0c             	sub    esp,0xc
c000d5b3:	83 ec 0c             	sub    esp,0xc
c000d5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ba:	e8 cd ff ff ff       	call   c000d58c <Mouse::~Mouse()>
c000d5bf:	83 c4 10             	add    esp,0x10
c000d5c2:	83 ec 08             	sub    esp,0x8
c000d5c5:	68 58 01 00 00       	push   0x158
c000d5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ce:	e8 39 d2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d5d3:	83 c4 10             	add    esp,0x10
c000d5d6:	83 c4 0c             	add    esp,0xc
c000d5d9:	c3                   	ret    

c000d5da <NIC::getMAC()>:
c000d5da:	31 c0                	xor    eax,eax
c000d5dc:	31 d2                	xor    edx,edx
c000d5de:	c3                   	ret    
c000d5df:	90                   	nop

c000d5e0 <NIC::write(int, unsigned char*, int*)>:
c000d5e0:	b8 01 00 00 00       	mov    eax,0x1
c000d5e5:	c3                   	ret    

c000d5e6 <NIC::NIC(char const*)>:
c000d5e6:	83 ec 0c             	sub    esp,0xc
c000d5e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ed:	83 ec 08             	sub    esp,0x8
c000d5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f4:	50                   	push   eax
c000d5f5:	e8 38 ec ff ff       	call   c000c232 <Device::Device(char const*)>
c000d5fa:	83 c4 10             	add    esp,0x10
c000d5fd:	ba ac 0f 02 c0       	mov    edx,0xc0020fac
c000d602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d606:	89 10                	mov    DWORD PTR [eax],edx
c000d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d616:	90                   	nop
c000d617:	83 c4 0c             	add    esp,0xc
c000d61a:	c3                   	ret    
c000d61b:	90                   	nop

c000d61c <NIC::~NIC()>:
c000d61c:	83 ec 0c             	sub    esp,0xc
c000d61f:	ba ac 0f 02 c0       	mov    edx,0xc0020fac
c000d624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d628:	89 10                	mov    DWORD PTR [eax],edx
c000d62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62e:	83 ec 0c             	sub    esp,0xc
c000d631:	50                   	push   eax
c000d632:	e8 65 e9 ff ff       	call   c000bf9c <Device::~Device()>
c000d637:	83 c4 10             	add    esp,0x10
c000d63a:	90                   	nop
c000d63b:	83 c4 0c             	add    esp,0xc
c000d63e:	c3                   	ret    
c000d63f:	90                   	nop

c000d640 <NIC::~NIC()>:
c000d640:	83 ec 0c             	sub    esp,0xc
c000d643:	83 ec 0c             	sub    esp,0xc
c000d646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d64a:	e8 cd ff ff ff       	call   c000d61c <NIC::~NIC()>
c000d64f:	83 c4 10             	add    esp,0x10
c000d652:	83 ec 08             	sub    esp,0x8
c000d655:	68 58 01 00 00       	push   0x158
c000d65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d65e:	e8 a9 d1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d663:	83 c4 10             	add    esp,0x10
c000d666:	83 c4 0c             	add    esp,0xc
c000d669:	c3                   	ret    

c000d66a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d66a:	55                   	push   ebp
c000d66b:	57                   	push   edi
c000d66c:	56                   	push   esi
c000d66d:	53                   	push   ebx
c000d66e:	81 ec 28 01 00 00    	sub    esp,0x128
c000d674:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d67b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d682:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d689:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d690:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d694:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d698:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d69f:	e8 8a ec ff ff       	call   c000c32e <Device::getName()>
c000d6a4:	5a                   	pop    edx
c000d6a5:	59                   	pop    ecx
c000d6a6:	50                   	push   eax
c000d6a7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d6ab:	55                   	push   ebp
c000d6ac:	e8 8f 2f ff ff       	call   c0000640 <strcpy>
c000d6b1:	5b                   	pop    ebx
c000d6b2:	58                   	pop    eax
c000d6b3:	68 d8 0f 02 c0       	push   0xc0020fd8
c000d6b8:	55                   	push   ebp
c000d6b9:	e8 82 31 ff ff       	call   c0000840 <strcat>
c000d6be:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d6c5:	e8 e4 a3 ff ff       	call   c0007aae <malloc>
c000d6ca:	83 c4 0c             	add    esp,0xc
c000d6cd:	89 c3                	mov    ebx,eax
c000d6cf:	57                   	push   edi
c000d6d0:	56                   	push   esi
c000d6d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6d9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d6e0:	55                   	push   ebp
c000d6e1:	50                   	push   eax
c000d6e2:	e8 59 fb ff ff       	call   c000d240 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6e7:	83 c4 14             	add    esp,0x14
c000d6ea:	53                   	push   ebx
c000d6eb:	e8 10 fc ff ff       	call   c000d300 <LogicalDisk::assignDriveLetter()>
c000d6f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d6f3:	e8 c2 fc ff ff       	call   c000d3ba <LogicalDisk::mount()>
c000d6f8:	58                   	pop    eax
c000d6f9:	5a                   	pop    edx
c000d6fa:	53                   	push   ebx
c000d6fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d702:	e8 93 e9 ff ff       	call   c000c09a <Device::addChild(Device*)>
c000d707:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d70d:	5b                   	pop    ebx
c000d70e:	5e                   	pop    esi
c000d70f:	5f                   	pop    edi
c000d710:	5d                   	pop    ebp
c000d711:	c3                   	ret    

c000d712 <createPartitionsForDisk(PhysicalDisk*)>:
c000d712:	55                   	push   ebp
c000d713:	57                   	push   edi
c000d714:	56                   	push   esi
c000d715:	53                   	push   ebx
c000d716:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d71c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d723:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d729:	3d 00 02 00 00       	cmp    eax,0x200
c000d72e:	74 27                	je     c000d757 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d730:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d736:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d73c:	83 ec 10             	sub    esp,0x10
c000d73f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d743:	99                   	cdq    
c000d744:	c1 e6 0a             	shl    esi,0xa
c000d747:	52                   	push   edx
c000d748:	89 fd                	mov    ebp,edi
c000d74a:	50                   	push   eax
c000d74b:	55                   	push   ebp
c000d74c:	56                   	push   esi
c000d74d:	e8 ee 13 01 00       	call   c001eb40 <__udivdi3>
c000d752:	e9 b9 00 00 00       	jmp    c000d810 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d757:	83 ec 0c             	sub    esp,0xc
c000d75a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d75c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d760:	56                   	push   esi
c000d761:	6a 01                	push   0x1
c000d763:	6a 00                	push   0x0
c000d765:	6a 00                	push   0x0
c000d767:	53                   	push   ebx
c000d768:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d76b:	83 c4 20             	add    esp,0x20
c000d76e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d776:	75 0a                	jne    c000d782 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d778:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d780:	74 2c                	je     c000d7ae <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d782:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d788:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d78e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d794:	83 ec 10             	sub    esp,0x10
c000d797:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d79b:	89 f7                	mov    edi,esi
c000d79d:	c1 e0 0a             	shl    eax,0xa
c000d7a0:	c1 ff 1f             	sar    edi,0x1f
c000d7a3:	57                   	push   edi
c000d7a4:	56                   	push   esi
c000d7a5:	52                   	push   edx
c000d7a6:	50                   	push   eax
c000d7a7:	e8 94 13 01 00       	call   c001eb40 <__udivdi3>
c000d7ac:	eb 62                	jmp    c000d810 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d7ae:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d7b5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d7bc:	89 cf                	mov    edi,ecx
c000d7be:	83 e2 7f             	and    edx,0x7f
c000d7c1:	83 e7 7f             	and    edi,0x7f
c000d7c4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d7cb:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d7ce:	83 e0 7f             	and    eax,0x7f
c000d7d1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d7d4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d7db:	83 e0 7f             	and    eax,0x7f
c000d7de:	01 d0                	add    eax,edx
c000d7e0:	89 c5                	mov    ebp,eax
c000d7e2:	84 c0                	test   al,al
c000d7e4:	74 41                	je     c000d827 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d7e6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d7ec:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d7f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d7f8:	83 ec 10             	sub    esp,0x10
c000d7fb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d7ff:	89 f7                	mov    edi,esi
c000d801:	c1 e0 0a             	shl    eax,0xa
c000d804:	c1 ff 1f             	sar    edi,0x1f
c000d807:	57                   	push   edi
c000d808:	56                   	push   esi
c000d809:	52                   	push   edx
c000d80a:	50                   	push   eax
c000d80b:	e8 30 13 01 00       	call   c001eb40 <__udivdi3>
c000d810:	83 c4 14             	add    esp,0x14
c000d813:	52                   	push   edx
c000d814:	50                   	push   eax
c000d815:	6a 00                	push   0x0
c000d817:	6a 00                	push   0x0
c000d819:	53                   	push   ebx
c000d81a:	e8 4b fe ff ff       	call   c000d66a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d81f:	83 c4 20             	add    esp,0x20
c000d822:	e9 73 01 00 00       	jmp    c000d99a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d827:	89 f0                	mov    eax,esi
c000d829:	31 c9                	xor    ecx,ecx
c000d82b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d832:	75 02                	jne    c000d836 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d834:	89 cd                	mov    ebp,ecx
c000d836:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d83d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d844:	c1 e2 08             	shl    edx,0x8
c000d847:	c1 e6 10             	shl    esi,0x10
c000d84a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d852:	09 f2                	or     edx,esi
c000d854:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d85c:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d863:	83 c0 10             	add    eax,0x10
c000d866:	09 f2                	or     edx,esi
c000d868:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d86f:	c1 e6 18             	shl    esi,0x18
c000d872:	09 f2                	or     edx,esi
c000d874:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d87b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d87f:	c1 e6 10             	shl    esi,0x10
c000d882:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d889:	c1 e2 08             	shl    edx,0x8
c000d88c:	09 f2                	or     edx,esi
c000d88e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d895:	09 f2                	or     edx,esi
c000d897:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d89e:	c1 e6 18             	shl    esi,0x18
c000d8a1:	09 f2                	or     edx,esi
c000d8a3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d8a7:	41                   	inc    ecx
c000d8a8:	83 f9 04             	cmp    ecx,0x4
c000d8ab:	0f 85 7a ff ff ff    	jne    c000d82b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b5:	83 f0 01             	xor    eax,0x1
c000d8b8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d8bc:	75 4f                	jne    c000d90d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d8be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8c2:	83 f0 01             	xor    eax,0x1
c000d8c5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d8c9:	75 42                	jne    c000d90d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d8cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d8d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8db:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d8e1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d8e7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d8ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d8f1:	89 f7                	mov    edi,esi
c000d8f3:	c1 e0 0a             	shl    eax,0xa
c000d8f6:	c1 ff 1f             	sar    edi,0x1f
c000d8f9:	57                   	push   edi
c000d8fa:	56                   	push   esi
c000d8fb:	52                   	push   edx
c000d8fc:	50                   	push   eax
c000d8fd:	e8 3e 12 01 00       	call   c001eb40 <__udivdi3>
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d909:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d90d:	89 e8                	mov    eax,ebp
c000d90f:	0f b6 e8             	movzx  ebp,al
c000d912:	85 ed                	test   ebp,ebp
c000d914:	74 50                	je     c000d966 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d91a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d91e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d922:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d926:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d92a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d92e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d932:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d936:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d93a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d93e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d942:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d946:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d94a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d94e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d952:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d956:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d95a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d95e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d962:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d966:	31 ed                	xor    ebp,ebp
c000d968:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d96c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d970:	89 f8                	mov    eax,edi
c000d972:	09 f0                	or     eax,esi
c000d974:	74 1e                	je     c000d994 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d976:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d97a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d97e:	89 d1                	mov    ecx,edx
c000d980:	09 c1                	or     ecx,eax
c000d982:	74 10                	je     c000d994 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d984:	83 ec 0c             	sub    esp,0xc
c000d987:	57                   	push   edi
c000d988:	56                   	push   esi
c000d989:	52                   	push   edx
c000d98a:	50                   	push   eax
c000d98b:	53                   	push   ebx
c000d98c:	e8 d9 fc ff ff       	call   c000d66a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d991:	83 c4 20             	add    esp,0x20
c000d994:	45                   	inc    ebp
c000d995:	83 fd 04             	cmp    ebp,0x4
c000d998:	75 ce                	jne    c000d968 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d99a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d9a0:	5b                   	pop    ebx
c000d9a1:	5e                   	pop    esi
c000d9a2:	5f                   	pop    edi
c000d9a3:	5d                   	pop    ebp
c000d9a4:	c3                   	ret    
c000d9a5:	66 90                	xchg   ax,ax
c000d9a7:	90                   	nop

c000d9a8 <Serial::Serial(char const*)>:
c000d9a8:	83 ec 0c             	sub    esp,0xc
c000d9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9af:	83 ec 08             	sub    esp,0x8
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	50                   	push   eax
c000d9b7:	e8 76 e8 ff ff       	call   c000c232 <Device::Device(char const*)>
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	ba ec 0f 02 c0       	mov    edx,0xc0020fec
c000d9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c8:	89 10                	mov    DWORD PTR [eax],edx
c000d9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ce:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d9d8:	90                   	nop
c000d9d9:	83 c4 0c             	add    esp,0xc
c000d9dc:	c3                   	ret    
c000d9dd:	90                   	nop
c000d9de:	66 90                	xchg   ax,ax

c000d9e0 <Serial::~Serial()>:
c000d9e0:	83 ec 0c             	sub    esp,0xc
c000d9e3:	ba ec 0f 02 c0       	mov    edx,0xc0020fec
c000d9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ec:	89 10                	mov    DWORD PTR [eax],edx
c000d9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f2:	83 ec 0c             	sub    esp,0xc
c000d9f5:	50                   	push   eax
c000d9f6:	e8 a1 e5 ff ff       	call   c000bf9c <Device::~Device()>
c000d9fb:	83 c4 10             	add    esp,0x10
c000d9fe:	90                   	nop
c000d9ff:	83 c4 0c             	add    esp,0xc
c000da02:	c3                   	ret    
c000da03:	90                   	nop

c000da04 <Serial::~Serial()>:
c000da04:	83 ec 0c             	sub    esp,0xc
c000da07:	83 ec 0c             	sub    esp,0xc
c000da0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0e:	e8 cd ff ff ff       	call   c000d9e0 <Serial::~Serial()>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	83 ec 08             	sub    esp,0x8
c000da19:	68 58 01 00 00       	push   0x158
c000da1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da22:	e8 e5 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	83 c4 0c             	add    esp,0xc
c000da2d:	c3                   	ret    
c000da2e:	66 90                	xchg   ax,ax

c000da30 <Timer::Timer(char const*)>:
c000da30:	83 ec 0c             	sub    esp,0xc
c000da33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da37:	83 ec 08             	sub    esp,0x8
c000da3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3e:	50                   	push   eax
c000da3f:	e8 ee e7 ff ff       	call   c000c232 <Device::Device(char const*)>
c000da44:	83 c4 10             	add    esp,0x10
c000da47:	ba 30 10 02 c0       	mov    edx,0xc0021030
c000da4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da50:	89 10                	mov    DWORD PTR [eax],edx
c000da52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da56:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000da60:	90                   	nop
c000da61:	83 c4 0c             	add    esp,0xc
c000da64:	c3                   	ret    
c000da65:	90                   	nop
c000da66:	66 90                	xchg   ax,ax

c000da68 <Timer::~Timer()>:
c000da68:	83 ec 0c             	sub    esp,0xc
c000da6b:	ba 30 10 02 c0       	mov    edx,0xc0021030
c000da70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da74:	89 10                	mov    DWORD PTR [eax],edx
c000da76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7a:	83 ec 0c             	sub    esp,0xc
c000da7d:	50                   	push   eax
c000da7e:	e8 19 e5 ff ff       	call   c000bf9c <Device::~Device()>
c000da83:	83 c4 10             	add    esp,0x10
c000da86:	90                   	nop
c000da87:	83 c4 0c             	add    esp,0xc
c000da8a:	c3                   	ret    
c000da8b:	90                   	nop

c000da8c <Timer::~Timer()>:
c000da8c:	83 ec 0c             	sub    esp,0xc
c000da8f:	83 ec 0c             	sub    esp,0xc
c000da92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da96:	e8 cd ff ff ff       	call   c000da68 <Timer::~Timer()>
c000da9b:	83 c4 10             	add    esp,0x10
c000da9e:	83 ec 08             	sub    esp,0x8
c000daa1:	68 5c 01 00 00       	push   0x15c
c000daa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daaa:	e8 5d cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000daaf:	83 c4 10             	add    esp,0x10
c000dab2:	83 c4 0c             	add    esp,0xc
c000dab5:	c3                   	ret    

c000dab6 <Timer::read()>:
c000dab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dac0:	c3                   	ret    

c000dac1 <setupTimer(int)>:
c000dac1:	53                   	push   ebx
c000dac2:	83 ec 14             	sub    esp,0x14
c000dac5:	68 5c 01 00 00       	push   0x15c
c000daca:	e8 df 9f ff ff       	call   c0007aae <malloc>
c000dacf:	89 04 24             	mov    DWORD PTR [esp],eax
c000dad2:	89 c3                	mov    ebx,eax
c000dad4:	e8 d3 08 01 00       	call   c001e3ac <PIT::PIT()>
c000dad9:	58                   	pop    eax
c000dada:	5a                   	pop    edx
c000dadb:	53                   	push   ebx
c000dadc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000dae2:	e8 b3 e5 ff ff       	call   c000c09a <Device::addChild(Device*)>
c000dae7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dae9:	6a 00                	push   0x0
c000daeb:	6a 00                	push   0x0
c000daed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000daf1:	53                   	push   ebx
c000daf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daf5:	89 d8                	mov    eax,ebx
c000daf7:	83 c4 28             	add    esp,0x28
c000dafa:	5b                   	pop    ebx
c000dafb:	c3                   	ret    

c000dafc <timerHandler(unsigned int)>:
c000dafc:	56                   	push   esi
c000dafd:	53                   	push   ebx
c000dafe:	51                   	push   ecx
c000daff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db03:	01 05 8c 84 02 c0    	add    DWORD PTR ds:0xc002848c,eax
c000db09:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000db10:	0f 84 4a 01 00 00    	je     c000dc60 <timerHandler(unsigned int)+0x164>
c000db16:	fa                   	cli    
c000db17:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000db1d:	83 ec 0c             	sub    esp,0xc
c000db20:	ff 05 64 91 02 c0    	inc    DWORD PTR ds:0xc0029164
c000db26:	68 78 91 02 c0       	push   0xc0029178
c000db2b:	e8 e0 15 01 00       	call   c001f110 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000db30:	83 c4 10             	add    esp,0x10
c000db33:	84 c0                	test   al,al
c000db35:	0f 85 a1 00 00 00    	jne    c000dbdc <timerHandler(unsigned int)+0xe0>
c000db3b:	83 ec 0c             	sub    esp,0xc
c000db3e:	68 78 91 02 c0       	push   0xc0029178
c000db43:	e8 e4 15 01 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db48:	83 c4 10             	add    esp,0x10
c000db4b:	89 c6                	mov    esi,eax
c000db4d:	8d 76 00             	lea    esi,[esi+0x0]
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	68 78 91 02 c0       	push   0xc0029178
c000db58:	e8 cf 15 01 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db5d:	c7 04 24 78 91 02 c0 	mov    DWORD PTR [esp],0xc0029178
c000db64:	89 c3                	mov    ebx,eax
c000db66:	e8 c9 15 01 00       	call   c001f134 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000db6b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000db6e:	83 c4 10             	add    esp,0x10
c000db71:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c000db77:	77 23                	ja     c000db9c <timerHandler(unsigned int)+0xa0>
c000db79:	83 ec 0c             	sub    esp,0xc
c000db7c:	53                   	push   ebx
c000db7d:	e8 66 7e 00 00       	call   c00159e8 <unblockTask(ThreadControlBlock*)>
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	39 de                	cmp    esi,ebx
c000db87:	75 27                	jne    c000dbb0 <timerHandler(unsigned int)+0xb4>
c000db89:	83 ec 0c             	sub    esp,0xc
c000db8c:	68 78 91 02 c0       	push   0xc0029178
c000db91:	e8 96 15 01 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db96:	89 c6                	mov    esi,eax
c000db98:	eb 12                	jmp    c000dbac <timerHandler(unsigned int)+0xb0>
c000db9a:	66 90                	xchg   ax,ax
c000db9c:	52                   	push   edx
c000db9d:	52                   	push   edx
c000db9e:	53                   	push   ebx
c000db9f:	68 78 91 02 c0       	push   0xc0029178
c000dba4:	e8 47 16 01 00       	call   c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000dba9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbac:	83 c4 10             	add    esp,0x10
c000dbaf:	90                   	nop
c000dbb0:	83 ec 0c             	sub    esp,0xc
c000dbb3:	68 78 91 02 c0       	push   0xc0029178
c000dbb8:	e8 53 15 01 00       	call   c001f110 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	84 c0                	test   al,al
c000dbc2:	75 18                	jne    c000dbdc <timerHandler(unsigned int)+0xe0>
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	68 78 91 02 c0       	push   0xc0029178
c000dbcc:	e8 5b 15 01 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	39 f0                	cmp    eax,esi
c000dbd6:	0f 85 74 ff ff ff    	jne    c000db50 <timerHandler(unsigned int)+0x54>
c000dbdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dbe1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000dbe5:	74 41                	je     c000dc28 <timerHandler(unsigned int)+0x12c>
c000dbe7:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000dbee:	74 38                	je     c000dc28 <timerHandler(unsigned int)+0x12c>
c000dbf0:	fa                   	cli    
c000dbf1:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000dbf7:	a1 8c 84 02 c0       	mov    eax,ds:0xc002848c
c000dbfc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dc02:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000dc05:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dc0b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000dc0e:	72 08                	jb     c000dc18 <timerHandler(unsigned int)+0x11c>
c000dc10:	e8 bb 78 00 00       	call   c00154d0 <schedule()>
c000dc15:	8d 76 00             	lea    esi,[esi+0x0]
c000dc18:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000dc1d:	48                   	dec    eax
c000dc1e:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000dc23:	75 03                	jne    c000dc28 <timerHandler(unsigned int)+0x12c>
c000dc25:	fb                   	sti    
c000dc26:	66 90                	xchg   ax,ax
c000dc28:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000dc2d:	48                   	dec    eax
c000dc2e:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000dc33:	75 1b                	jne    c000dc50 <timerHandler(unsigned int)+0x154>
c000dc35:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c000dc3c:	74 12                	je     c000dc50 <timerHandler(unsigned int)+0x154>
c000dc3e:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c000dc48:	e8 83 78 00 00       	call   c00154d0 <schedule()>
c000dc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc50:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000dc55:	48                   	dec    eax
c000dc56:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000dc5b:	75 03                	jne    c000dc60 <timerHandler(unsigned int)+0x164>
c000dc5d:	fb                   	sti    
c000dc5e:	66 90                	xchg   ax,ax
c000dc60:	58                   	pop    eax
c000dc61:	5b                   	pop    ebx
c000dc62:	5e                   	pop    esi
c000dc63:	c3                   	ret    

c000dc64 <VCache::VCache(PhysicalDisk*)>:
c000dc64:	53                   	push   ebx
c000dc65:	83 ec 18             	sub    esp,0x18
c000dc68:	ba 60 10 02 c0       	mov    edx,0xc0021060
c000dc6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc71:	89 10                	mov    DWORD PTR [eax],edx
c000dc73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc77:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000dc7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc82:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000dc89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc8d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000dc94:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000dc9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc9f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000dca6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000dcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000dcb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcbc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dcc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000dccb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000dcd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dcda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcde:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000dce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dcea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcee:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dcf5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dcfd:	83 ec 0c             	sub    esp,0xc
c000dd00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd04:	e8 a5 9d ff ff       	call   c0007aae <malloc>
c000dd09:	83 c4 10             	add    esp,0x10
c000dd0c:	89 c3                	mov    ebx,eax
c000dd0e:	83 ec 0c             	sub    esp,0xc
c000dd11:	53                   	push   ebx
c000dd12:	e8 55 75 00 00       	call   c001526c <Mutex::Mutex()>
c000dd17:	83 c4 10             	add    esp,0x10
c000dd1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dd21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd25:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dd29:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dd2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd30:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dd37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd3b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd45:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd4c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dd52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dd58:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd5c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dd5f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dd62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd66:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dd6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dd74:	05 00 02 00 00       	add    eax,0x200
c000dd79:	c1 e0 03             	shl    eax,0x3
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	50                   	push   eax
c000dd80:	e8 29 9d ff ff       	call   c0007aae <malloc>
c000dd85:	83 c4 10             	add    esp,0x10
c000dd88:	89 c2                	mov    edx,eax
c000dd8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd8e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dd91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd95:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dd9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dda0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dda4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dda8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000ddae:	89 d0                	mov    eax,edx
c000ddb0:	c1 e0 02             	shl    eax,0x2
c000ddb3:	01 d0                	add    eax,edx
c000ddb5:	c1 e0 04             	shl    eax,0x4
c000ddb8:	83 ec 0c             	sub    esp,0xc
c000ddbb:	50                   	push   eax
c000ddbc:	e8 ed 9c ff ff       	call   c0007aae <malloc>
c000ddc1:	83 c4 10             	add    esp,0x10
c000ddc4:	89 c2                	mov    edx,eax
c000ddc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ddcd:	90                   	nop
c000ddce:	83 c4 18             	add    esp,0x18
c000ddd1:	5b                   	pop    ebx
c000ddd2:	c3                   	ret    
c000ddd3:	90                   	nop

c000ddd4 <VCache::invalidateReadBuffer()>:
c000ddd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddd8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000ddde:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dde2:	c3                   	ret    
c000dde3:	90                   	nop

c000dde4 <VCache::writeWriteBuffer()>:
c000dde4:	53                   	push   ebx
c000dde5:	83 ec 08             	sub    esp,0x8
c000dde8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ddec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ddf0:	74 1e                	je     c000de10 <VCache::writeWriteBuffer()+0x2c>
c000ddf2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddf5:	83 ec 0c             	sub    esp,0xc
c000ddf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddfa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ddfd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000de00:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000de03:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000de06:	50                   	push   eax
c000de07:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000de0a:	83 c4 20             	add    esp,0x20
c000de0d:	8d 76 00             	lea    esi,[esi+0x0]
c000de10:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000de17:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000de1e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000de22:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000de29:	83 c4 08             	add    esp,0x8
c000de2c:	5b                   	pop    ebx
c000de2d:	c3                   	ret    
c000de2e:	66 90                	xchg   ax,ax

c000de30 <VCache::~VCache()>:
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	ba 60 10 02 c0       	mov    edx,0xc0021060
c000de38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de3c:	89 10                	mov    DWORD PTR [eax],edx
c000de3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de42:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000de45:	0f b6 c0             	movzx  eax,al
c000de48:	85 c0                	test   eax,eax
c000de4a:	74 10                	je     c000de5c <VCache::~VCache()+0x2c>
c000de4c:	83 ec 0c             	sub    esp,0xc
c000de4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de53:	e8 8c ff ff ff       	call   c000dde4 <VCache::writeWriteBuffer()>
c000de58:	83 c4 10             	add    esp,0x10
c000de5b:	90                   	nop
c000de5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de60:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de63:	83 ec 0c             	sub    esp,0xc
c000de66:	50                   	push   eax
c000de67:	e8 52 9c ff ff       	call   c0007abe <free>
c000de6c:	83 c4 10             	add    esp,0x10
c000de6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de73:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000de76:	83 ec 0c             	sub    esp,0xc
c000de79:	50                   	push   eax
c000de7a:	e8 3f 9c ff ff       	call   c0007abe <free>
c000de7f:	83 c4 10             	add    esp,0x10
c000de82:	90                   	nop
c000de83:	83 c4 0c             	add    esp,0xc
c000de86:	c3                   	ret    
c000de87:	90                   	nop

c000de88 <VCache::~VCache()>:
c000de88:	83 ec 0c             	sub    esp,0xc
c000de8b:	83 ec 0c             	sub    esp,0xc
c000de8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de92:	e8 99 ff ff ff       	call   c000de30 <VCache::~VCache()>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	83 ec 08             	sub    esp,0x8
c000de9d:	6a 44                	push   0x44
c000de9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dea3:	e8 64 c9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dea8:	83 c4 10             	add    esp,0x10
c000deab:	83 c4 0c             	add    esp,0xc
c000deae:	c3                   	ret    
c000deaf:	90                   	nop

c000deb0 <VCache::write(unsigned long long, int, void*)>:
c000deb0:	55                   	push   ebp
c000deb1:	57                   	push   edi
c000deb2:	56                   	push   esi
c000deb3:	53                   	push   ebx
c000deb4:	83 ec 1c             	sub    esp,0x1c
c000deb7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000debb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000debf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000decb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000decf:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ded3:	74 07                	je     c000dedc <VCache::write(unsigned long long, int, void*)+0x2c>
c000ded5:	53                   	push   ebx
c000ded6:	e8 f9 fe ff ff       	call   c000ddd4 <VCache::invalidateReadBuffer()>
c000dedb:	58                   	pop    eax
c000dedc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dee0:	74 62                	je     c000df44 <VCache::write(unsigned long long, int, void*)+0x94>
c000dee2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dee5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dee9:	99                   	cdq    
c000deea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deee:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000def1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000def4:	31 c1                	xor    ecx,eax
c000def6:	89 d0                	mov    eax,edx
c000def8:	89 ca                	mov    edx,ecx
c000defa:	31 e8                	xor    eax,ebp
c000defc:	09 c2                	or     edx,eax
c000defe:	75 38                	jne    c000df38 <VCache::write(unsigned long long, int, void*)+0x88>
c000df00:	83 ff 01             	cmp    edi,0x1
c000df03:	75 33                	jne    c000df38 <VCache::write(unsigned long long, int, void*)+0x88>
c000df05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000df08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df0c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000df12:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000df15:	0f af c8             	imul   ecx,eax
c000df18:	01 cf                	add    edi,ecx
c000df1a:	89 c1                	mov    ecx,eax
c000df1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df1e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000df21:	40                   	inc    eax
c000df22:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000df25:	83 f8 50             	cmp    eax,0x50
c000df28:	75 6a                	jne    c000df94 <VCache::write(unsigned long long, int, void*)+0xe4>
c000df2a:	83 ec 0c             	sub    esp,0xc
c000df2d:	53                   	push   ebx
c000df2e:	e8 b1 fe ff ff       	call   c000dde4 <VCache::writeWriteBuffer()>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	eb 5c                	jmp    c000df94 <VCache::write(unsigned long long, int, void*)+0xe4>
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	53                   	push   ebx
c000df3c:	e8 a3 fe ff ff       	call   c000dde4 <VCache::writeWriteBuffer()>
c000df41:	83 c4 10             	add    esp,0x10
c000df44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000df47:	83 ff 4f             	cmp    edi,0x4f
c000df4a:	7f 20                	jg     c000df6c <VCache::write(unsigned long long, int, void*)+0xbc>
c000df4c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000df4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000df53:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000df56:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000df59:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000df5d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000df60:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000df66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df68:	eb 2a                	jmp    c000df94 <VCache::write(unsigned long long, int, void*)+0xe4>
c000df6a:	66 90                	xchg   ax,ax
c000df6c:	8b 10                	mov    edx,DWORD PTR [eax]
c000df6e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000df72:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000df76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df7a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000df7e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000df82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df86:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000df89:	83 c4 1c             	add    esp,0x1c
c000df8c:	5b                   	pop    ebx
c000df8d:	5e                   	pop    esi
c000df8e:	5f                   	pop    edi
c000df8f:	5d                   	pop    ebp
c000df90:	ff e0                	jmp    eax
c000df92:	66 90                	xchg   ax,ax
c000df94:	83 c4 1c             	add    esp,0x1c
c000df97:	31 c0                	xor    eax,eax
c000df99:	5b                   	pop    ebx
c000df9a:	5e                   	pop    esi
c000df9b:	5f                   	pop    edi
c000df9c:	5d                   	pop    ebp
c000df9d:	c3                   	ret    

c000df9e <VCache::read(unsigned long long, int, void*)>:
c000df9e:	55                   	push   ebp
c000df9f:	57                   	push   edi
c000dfa0:	56                   	push   esi
c000dfa1:	53                   	push   ebx
c000dfa2:	83 ec 1c             	sub    esp,0x1c
c000dfa5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dfa9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dfad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dfb1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dfb5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dfb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dfbd:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dfc1:	74 0d                	je     c000dfd0 <VCache::read(unsigned long long, int, void*)+0x32>
c000dfc3:	83 ec 0c             	sub    esp,0xc
c000dfc6:	57                   	push   edi
c000dfc7:	e8 18 fe ff ff       	call   c000dde4 <VCache::writeWriteBuffer()>
c000dfcc:	83 c4 10             	add    esp,0x10
c000dfcf:	90                   	nop
c000dfd0:	83 fd 01             	cmp    ebp,0x1
c000dfd3:	0f 85 93 00 00 00    	jne    c000e06c <VCache::read(unsigned long long, int, void*)+0xce>
c000dfd9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dfdc:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfdf:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dfe6:	0f 85 80 00 00 00    	jne    c000e06c <VCache::read(unsigned long long, int, void*)+0xce>
c000dfec:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dfef:	89 e9                	mov    ecx,ebp
c000dff1:	f7 d9                	neg    ecx
c000dff3:	89 c8                	mov    eax,ecx
c000dff5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dff9:	c1 f8 1f             	sar    eax,0x1f
c000dffc:	21 d9                	and    ecx,ebx
c000dffe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e002:	89 c8                	mov    eax,ecx
c000e004:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e008:	21 f1                	and    ecx,esi
c000e00a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e00e:	89 ca                	mov    edx,ecx
c000e010:	74 2e                	je     c000e040 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e012:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e015:	75 29                	jne    c000e040 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e017:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e01a:	75 24                	jne    c000e040 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e01c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e01f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e025:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e028:	8d 70 ff             	lea    esi,[eax-0x1]
c000e02b:	21 f3                	and    ebx,esi
c000e02d:	0f af d9             	imul   ebx,ecx
c000e030:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e033:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e037:	89 de                	mov    esi,ebx
c000e039:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e03b:	31 c0                	xor    eax,eax
c000e03d:	eb 61                	jmp    c000e0a0 <VCache::read(unsigned long long, int, void*)+0x102>
c000e03f:	90                   	nop
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e047:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e04b:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e04e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e053:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e056:	55                   	push   ebp
c000e057:	52                   	push   edx
c000e058:	50                   	push   eax
c000e059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e060:	83 c4 20             	add    esp,0x20
c000e063:	85 c0                	test   eax,eax
c000e065:	75 39                	jne    c000e0a0 <VCache::read(unsigned long long, int, void*)+0x102>
c000e067:	eb b3                	jmp    c000e01c <VCache::read(unsigned long long, int, void*)+0x7e>
c000e069:	8d 76 00             	lea    esi,[esi+0x0]
c000e06c:	83 ec 0c             	sub    esp,0xc
c000e06f:	57                   	push   edi
c000e070:	e8 5f fd ff ff       	call   c000ddd4 <VCache::invalidateReadBuffer()>
c000e075:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e078:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e07c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e07e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e082:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e086:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e08a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e08e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e092:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e095:	83 c4 2c             	add    esp,0x2c
c000e098:	5b                   	pop    ebx
c000e099:	5e                   	pop    esi
c000e09a:	5f                   	pop    edi
c000e09b:	5d                   	pop    ebp
c000e09c:	ff e0                	jmp    eax
c000e09e:	66 90                	xchg   ax,ax
c000e0a0:	83 c4 1c             	add    esp,0x1c
c000e0a3:	5b                   	pop    ebx
c000e0a4:	5e                   	pop    esi
c000e0a5:	5f                   	pop    edi
c000e0a6:	5d                   	pop    ebp
c000e0a7:	c3                   	ret    

c000e0a8 <Video::putrect(int, int, int, int, unsigned int)>:
c000e0a8:	55                   	push   ebp
c000e0a9:	57                   	push   edi
c000e0aa:	56                   	push   esi
c000e0ab:	53                   	push   ebx
c000e0ac:	83 ec 1c             	sub    esp,0x1c
c000e0af:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e0b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e0b7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e0bb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e0bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e0c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0c7:	01 df                	add    edi,ebx
c000e0c9:	39 fb                	cmp    ebx,edi
c000e0cb:	7d 1f                	jge    c000e0ec <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e0cd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e0d1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e0d5:	7d 12                	jge    c000e0e9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e0d7:	8b 16                	mov    edx,DWORD PTR [esi]
c000e0d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e0dd:	53                   	push   ebx
c000e0de:	55                   	push   ebp
c000e0df:	45                   	inc    ebp
c000e0e0:	56                   	push   esi
c000e0e1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0e4:	83 c4 10             	add    esp,0x10
c000e0e7:	eb e8                	jmp    c000e0d1 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e0e9:	43                   	inc    ebx
c000e0ea:	eb dd                	jmp    c000e0c9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e0ec:	83 c4 1c             	add    esp,0x1c
c000e0ef:	5b                   	pop    ebx
c000e0f0:	5e                   	pop    esi
c000e0f1:	5f                   	pop    edi
c000e0f2:	5d                   	pop    ebp
c000e0f3:	c3                   	ret    

c000e0f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e0f4:	55                   	push   ebp
c000e0f5:	57                   	push   edi
c000e0f6:	31 ff                	xor    edi,edi
c000e0f8:	56                   	push   esi
c000e0f9:	53                   	push   ebx
c000e0fa:	83 ec 1c             	sub    esp,0x1c
c000e0fd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e101:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e105:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e10c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e115:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e119:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e11d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e120:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e124:	01 f9                	add    ecx,edi
c000e126:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e12a:	7d 2f                	jge    c000e15b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e12c:	31 f6                	xor    esi,esi
c000e12e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e132:	01 f2                	add    edx,esi
c000e134:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e138:	7d 1a                	jge    c000e154 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e13a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e13d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e140:	46                   	inc    esi
c000e141:	51                   	push   ecx
c000e142:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e146:	52                   	push   edx
c000e147:	55                   	push   ebp
c000e148:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e14b:	83 c4 10             	add    esp,0x10
c000e14e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e152:	eb da                	jmp    c000e12e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e154:	47                   	inc    edi
c000e155:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e159:	eb c5                	jmp    c000e120 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e15b:	83 c4 1c             	add    esp,0x1c
c000e15e:	5b                   	pop    ebx
c000e15f:	5e                   	pop    esi
c000e160:	5f                   	pop    edi
c000e161:	5d                   	pop    ebp
c000e162:	c3                   	ret    
c000e163:	90                   	nop

c000e164 <Video::blit(unsigned int*, int, int, int, int)>:
c000e164:	55                   	push   ebp
c000e165:	57                   	push   edi
c000e166:	56                   	push   esi
c000e167:	53                   	push   ebx
c000e168:	83 ec 1c             	sub    esp,0x1c
c000e16b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e16f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e173:	85 c0                	test   eax,eax
c000e175:	79 02                	jns    c000e179 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e177:	31 c0                	xor    eax,eax
c000e179:	c1 e0 02             	shl    eax,0x2
c000e17c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e180:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e184:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e188:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e18c:	39 d8                	cmp    eax,ebx
c000e18e:	7e 49                	jle    c000e1d9 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e190:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e196:	7c 41                	jl     c000e1d9 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e198:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e19c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e1a0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e1a4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e1a8:	39 f9                	cmp    ecx,edi
c000e1aa:	7e 22                	jle    c000e1ce <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e1ac:	83 c5 04             	add    ebp,0x4
c000e1af:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1b5:	7c 14                	jl     c000e1cb <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e1b7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e1b9:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e1bc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e1c0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e1c4:	56                   	push   esi
c000e1c5:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e1c8:	83 c4 10             	add    esp,0x10
c000e1cb:	47                   	inc    edi
c000e1cc:	eb d2                	jmp    c000e1a0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e1ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1d2:	43                   	inc    ebx
c000e1d3:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e1d7:	eb ab                	jmp    c000e184 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e1d9:	83 c4 1c             	add    esp,0x1c
c000e1dc:	5b                   	pop    ebx
c000e1dd:	5e                   	pop    esi
c000e1de:	5f                   	pop    edi
c000e1df:	5d                   	pop    ebp
c000e1e0:	c3                   	ret    
c000e1e1:	90                   	nop

c000e1e2 <Video::clearScreen(unsigned int)>:
c000e1e2:	57                   	push   edi
c000e1e3:	56                   	push   esi
c000e1e4:	53                   	push   ebx
c000e1e5:	31 db                	xor    ebx,ebx
c000e1e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1eb:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e1f1:	7e 1f                	jle    c000e212 <Video::clearScreen(unsigned int)+0x30>
c000e1f3:	31 ff                	xor    edi,edi
c000e1f5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1fb:	7e 12                	jle    c000e20f <Video::clearScreen(unsigned int)+0x2d>
c000e1fd:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e203:	53                   	push   ebx
c000e204:	57                   	push   edi
c000e205:	47                   	inc    edi
c000e206:	56                   	push   esi
c000e207:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e20a:	83 c4 10             	add    esp,0x10
c000e20d:	eb e6                	jmp    c000e1f5 <Video::clearScreen(unsigned int)+0x13>
c000e20f:	43                   	inc    ebx
c000e210:	eb d9                	jmp    c000e1eb <Video::clearScreen(unsigned int)+0x9>
c000e212:	5b                   	pop    ebx
c000e213:	5e                   	pop    esi
c000e214:	5f                   	pop    edi
c000e215:	c3                   	ret    

c000e216 <Video::putpixel(int, int, unsigned int)>:
c000e216:	c7 44 24 04 68 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021068
c000e21e:	e9 ee 29 00 00       	jmp    c0010c11 <KePanic(char const*)>
c000e223:	90                   	nop

c000e224 <Video::readPixelApprox(int, int)>:
c000e224:	83 ec 18             	sub    esp,0x18
c000e227:	68 89 10 02 c0       	push   0xc0021089
c000e22c:	e8 e0 29 00 00       	call   c0010c11 <KePanic(char const*)>
c000e231:	31 c0                	xor    eax,eax
c000e233:	83 c4 1c             	add    esp,0x1c
c000e236:	c3                   	ret    
c000e237:	90                   	nop

c000e238 <Video::Video(char const*)>:
c000e238:	83 ec 0c             	sub    esp,0xc
c000e23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e23f:	83 ec 08             	sub    esp,0x8
c000e242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e246:	50                   	push   eax
c000e247:	e8 e6 df ff ff       	call   c000c232 <Device::Device(char const*)>
c000e24c:	83 c4 10             	add    esp,0x10
c000e24f:	ba 04 11 02 c0       	mov    edx,0xc0021104
c000e254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e258:	89 10                	mov    DWORD PTR [eax],edx
c000e25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e25e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e268:	90                   	nop
c000e269:	83 c4 0c             	add    esp,0xc
c000e26c:	c3                   	ret    
c000e26d:	90                   	nop

c000e26e <Video::~Video()>:
c000e26e:	83 ec 0c             	sub    esp,0xc
c000e271:	ba 04 11 02 c0       	mov    edx,0xc0021104
c000e276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27a:	89 10                	mov    DWORD PTR [eax],edx
c000e27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e280:	83 ec 0c             	sub    esp,0xc
c000e283:	50                   	push   eax
c000e284:	e8 13 dd ff ff       	call   c000bf9c <Device::~Device()>
c000e289:	83 c4 10             	add    esp,0x10
c000e28c:	90                   	nop
c000e28d:	83 c4 0c             	add    esp,0xc
c000e290:	c3                   	ret    
c000e291:	90                   	nop

c000e292 <Video::~Video()>:
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	83 ec 0c             	sub    esp,0xc
c000e298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29c:	e8 cd ff ff ff       	call   c000e26e <Video::~Video()>
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	83 ec 08             	sub    esp,0x8
c000e2a7:	68 64 01 00 00       	push   0x164
c000e2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b0:	e8 57 c5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e2b5:	83 c4 10             	add    esp,0x10
c000e2b8:	83 c4 0c             	add    esp,0xc
c000e2bb:	c3                   	ret    

c000e2bc <Video::isMonochrome()>:
c000e2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2c0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e2c6:	c3                   	ret    
c000e2c7:	90                   	nop

c000e2c8 <Video::getWidth()>:
c000e2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e2d2:	c3                   	ret    
c000e2d3:	90                   	nop

c000e2d4 <Video::getHeight()>:
c000e2d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2de:	c3                   	ret    
c000e2df:	90                   	nop

c000e2e0 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e2e0:	55                   	push   ebp
c000e2e1:	57                   	push   edi
c000e2e2:	56                   	push   esi
c000e2e3:	53                   	push   ebx
c000e2e4:	83 ec 2c             	sub    esp,0x2c
c000e2e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e2eb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e2ef:	83 f8 01             	cmp    eax,0x1
c000e2f2:	19 c9                	sbb    ecx,ecx
c000e2f4:	31 db                	xor    ebx,ebx
c000e2f6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e2fa:	89 cd                	mov    ebp,ecx
c000e2fc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e304:	f7 d5                	not    ebp
c000e306:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e30c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e310:	01 d8                	add    eax,ebx
c000e312:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e316:	56                   	push   esi
c000e317:	e8 b8 ff ff ff       	call   c000e2d4 <Video::getHeight()>
c000e31c:	59                   	pop    ecx
c000e31d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e321:	7e 70                	jle    c000e393 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e323:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e327:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e32b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e32e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e332:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e336:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e33d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e341:	89 f8                	mov    eax,edi
c000e343:	83 c0 20             	add    eax,0x20
c000e346:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e34a:	56                   	push   esi
c000e34b:	e8 78 ff ff ff       	call   c000e2c8 <Video::getWidth()>
c000e350:	5a                   	pop    edx
c000e351:	39 c7                	cmp    edi,eax
c000e353:	7d 34                	jge    c000e389 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e355:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e35a:	74 05                	je     c000e361 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e35c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e35e:	55                   	push   ebp
c000e35f:	eb 0d                	jmp    c000e36e <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e361:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e366:	74 12                	je     c000e37a <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e368:	8b 06                	mov    eax,DWORD PTR [esi]
c000e36a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e36e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e372:	57                   	push   edi
c000e373:	56                   	push   esi
c000e374:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e377:	83 c4 10             	add    esp,0x10
c000e37a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e37e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e382:	47                   	inc    edi
c000e383:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e387:	75 c1                	jne    c000e34a <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e389:	43                   	inc    ebx
c000e38a:	83 fb 20             	cmp    ebx,0x20
c000e38d:	0f 85 79 ff ff ff    	jne    c000e30c <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e393:	83 c4 2c             	add    esp,0x2c
c000e396:	5b                   	pop    ebx
c000e397:	5e                   	pop    esi
c000e398:	5f                   	pop    edi
c000e399:	5d                   	pop    ebp
c000e39a:	c3                   	ret    
c000e39b:	90                   	nop

c000e39c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e39c:	55                   	push   ebp
c000e39d:	57                   	push   edi
c000e39e:	56                   	push   esi
c000e39f:	53                   	push   ebx
c000e3a0:	83 ec 28             	sub    esp,0x28
c000e3a3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e3a7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e3ab:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e3af:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e3b3:	c1 e6 08             	shl    esi,0x8
c000e3b6:	01 c6                	add    esi,eax
c000e3b8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e3bc:	c1 e0 08             	shl    eax,0x8
c000e3bf:	01 d0                	add    eax,edx
c000e3c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c9:	0f af c6             	imul   eax,esi
c000e3cc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e3d3:	50                   	push   eax
c000e3d4:	e8 d5 96 ff ff       	call   c0007aae <malloc>
c000e3d9:	83 c4 10             	add    esp,0x10
c000e3dc:	89 c7                	mov    edi,eax
c000e3de:	85 c0                	test   eax,eax
c000e3e0:	75 10                	jne    c000e3f2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e3e2:	83 ec 0c             	sub    esp,0xc
c000e3e5:	68 b4 10 02 c0       	push   0xc00210b4
c000e3ea:	e8 22 28 00 00       	call   c0010c11 <KePanic(char const*)>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e3f6:	ba 12 00 00 00       	mov    edx,0x12
c000e3fb:	85 c0                	test   eax,eax
c000e3fd:	74 11                	je     c000e410 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e3ff:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e403:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e407:	c1 fa 03             	sar    edx,0x3
c000e40a:	0f af d1             	imul   edx,ecx
c000e40d:	83 c2 12             	add    edx,0x12
c000e410:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e414:	74 04                	je     c000e41a <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e416:	85 f6                	test   esi,esi
c000e418:	75 12                	jne    c000e42c <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e41a:	83 ec 0c             	sub    esp,0xc
c000e41d:	68 c4 10 02 c0       	push   0xc00210c4
c000e422:	e8 12 c5 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000e427:	e9 b8 00 00 00       	jmp    c000e4e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e42c:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e430:	83 f9 02             	cmp    ecx,0x2
c000e433:	0f 85 96 00 00 00    	jne    c000e4cf <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e439:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e43e:	75 0e                	jne    c000e44e <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e440:	85 c0                	test   eax,eax
c000e442:	75 0a                	jne    c000e44e <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e444:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e447:	83 e8 18             	sub    eax,0x18
c000e44a:	a8 f7                	test   al,0xf7
c000e44c:	74 0a                	je     c000e458 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e44e:	83 ec 0c             	sub    esp,0xc
c000e451:	68 d9 10 02 c0       	push   0xc00210d9
c000e456:	eb 7f                	jmp    c000e4d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e460:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e468:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e46c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e474:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e478:	75 0c                	jne    c000e486 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e47a:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e47f:	c1 e0 18             	shl    eax,0x18
c000e482:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e486:	45                   	inc    ebp
c000e487:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e48c:	c1 e1 10             	shl    ecx,0x10
c000e48f:	89 c8                	mov    eax,ecx
c000e491:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e496:	c1 e1 08             	shl    ecx,0x8
c000e499:	09 c1                	or     ecx,eax
c000e49b:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e49f:	09 c1                	or     ecx,eax
c000e4a1:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e4a5:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e4a9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e4ad:	c1 f8 03             	sar    eax,0x3
c000e4b0:	01 c2                	add    edx,eax
c000e4b2:	89 e8                	mov    eax,ebp
c000e4b4:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e4b8:	39 c6                	cmp    esi,eax
c000e4ba:	7f b0                	jg     c000e46c <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e4bc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e4c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4c4:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e4c7:	7e 22                	jle    c000e4eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e4c9:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e4cd:	eb 99                	jmp    c000e468 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e4cf:	50                   	push   eax
c000e4d0:	50                   	push   eax
c000e4d1:	51                   	push   ecx
c000e4d2:	68 e7 10 02 c0       	push   0xc00210e7
c000e4d7:	e8 5d c4 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c000e4dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e4df:	e8 da 95 ff ff       	call   c0007abe <free>
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	31 ff                	xor    edi,edi
c000e4e9:	eb 0f                	jmp    c000e4fa <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e4eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4ef:	89 30                	mov    DWORD PTR [eax],esi
c000e4f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4f5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e4f8:	89 30                	mov    DWORD PTR [eax],esi
c000e4fa:	83 c4 1c             	add    esp,0x1c
c000e4fd:	89 f8                	mov    eax,edi
c000e4ff:	5b                   	pop    ebx
c000e500:	5e                   	pop    esi
c000e501:	5f                   	pop    edi
c000e502:	5d                   	pop    ebp
c000e503:	c3                   	ret    

c000e504 <Video::putTGA(int, int, unsigned char*, int)>:
c000e504:	55                   	push   ebp
c000e505:	57                   	push   edi
c000e506:	56                   	push   esi
c000e507:	53                   	push   ebx
c000e508:	83 ec 28             	sub    esp,0x28
c000e50b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e50f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e513:	50                   	push   eax
c000e514:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e518:	50                   	push   eax
c000e519:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e51d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e521:	56                   	push   esi
c000e522:	e8 75 fe ff ff       	call   c000e39c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e527:	83 c4 20             	add    esp,0x20
c000e52a:	85 c0                	test   eax,eax
c000e52c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e530:	74 35                	je     c000e567 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e532:	89 c7                	mov    edi,eax
c000e534:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e538:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e53c:	39 d8                	cmp    eax,ebx
c000e53e:	7e 27                	jle    c000e567 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e540:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e544:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e548:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e54c:	39 e8                	cmp    eax,ebp
c000e54e:	7e 14                	jle    c000e564 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e550:	8b 06                	mov    eax,DWORD PTR [esi]
c000e552:	83 c7 04             	add    edi,0x4
c000e555:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e558:	53                   	push   ebx
c000e559:	55                   	push   ebp
c000e55a:	45                   	inc    ebp
c000e55b:	56                   	push   esi
c000e55c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	eb e0                	jmp    c000e544 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e564:	43                   	inc    ebx
c000e565:	eb cd                	jmp    c000e534 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e567:	83 c4 1c             	add    esp,0x1c
c000e56a:	5b                   	pop    ebx
c000e56b:	5e                   	pop    esi
c000e56c:	5f                   	pop    edi
c000e56d:	5d                   	pop    ebp
c000e56e:	c3                   	ret    
c000e56f:	90                   	nop

c000e570 <ACPI::close(int, int, void*)>:
c000e570:	83 ec 1c             	sub    esp,0x1c
c000e573:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e57b:	74 0b                	je     c000e588 <ACPI::close(int, int, void*)+0x18>
c000e57d:	b8 00 00 00 00       	mov    eax,0x0
c000e582:	e9 99 00 00 00       	jmp    c000e620 <ACPI::close(int, int, void*)+0xb0>
c000e587:	90                   	nop
c000e588:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e58d:	75 29                	jne    c000e5b8 <ACPI::close(int, int, void*)+0x48>
c000e58f:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000e594:	85 c0                	test   eax,eax
c000e596:	74 08                	je     c000e5a0 <ACPI::close(int, int, void*)+0x30>
c000e598:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000e59d:	ff d0                	call   eax
c000e59f:	90                   	nop
c000e5a0:	83 ec 0c             	sub    esp,0xc
c000e5a3:	68 48 11 02 c0       	push   0xc0021148
c000e5a8:	e8 64 26 00 00       	call   c0010c11 <KePanic(char const*)>
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5b5:	eb 69                	jmp    c000e620 <ACPI::close(int, int, void*)+0xb0>
c000e5b7:	90                   	nop
c000e5b8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e5bd:	75 59                	jne    c000e618 <ACPI::close(int, int, void*)+0xa8>
c000e5bf:	a1 a4 84 02 c0       	mov    eax,ds:0xc00284a4
c000e5c4:	85 c0                	test   eax,eax
c000e5c6:	74 08                	je     c000e5d0 <ACPI::close(int, int, void*)+0x60>
c000e5c8:	a1 a4 84 02 c0       	mov    eax,ds:0xc00284a4
c000e5cd:	ff d0                	call   eax
c000e5cf:	90                   	nop
c000e5d0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e5d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e5dd:	83 e0 02             	and    eax,0x2
c000e5e0:	74 1e                	je     c000e600 <ACPI::close(int, int, void*)+0x90>
c000e5e2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e5e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5ed:	89 c2                	mov    edx,eax
c000e5ef:	ec                   	in     al,dx
c000e5f0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e5f4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e5f8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5fc:	eb da                	jmp    c000e5d8 <ACPI::close(int, int, void*)+0x68>
c000e5fe:	66 90                	xchg   ax,ax
c000e600:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e607:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e60c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e614:	ee                   	out    dx,al
c000e615:	8d 76 00             	lea    esi,[esi+0x0]
c000e618:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e61d:	8d 76 00             	lea    esi,[esi+0x0]
c000e620:	83 c4 1c             	add    esp,0x1c
c000e623:	c3                   	ret    

c000e624 <findRSDP()>:
c000e624:	83 ec 1c             	sub    esp,0x1c
c000e627:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e62c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e632:	83 e0 04             	and    eax,0x4
c000e635:	0f b6 c0             	movzx  eax,al
c000e638:	85 c0                	test   eax,eax
c000e63a:	75 08                	jne    c000e644 <findRSDP()+0x20>
c000e63c:	b8 00 00 00 00       	mov    eax,0x0
c000e641:	eb 75                	jmp    c000e6b8 <findRSDP()+0x94>
c000e643:	90                   	nop
c000e644:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000e649:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e64e:	7f 1c                	jg     c000e66c <findRSDP()+0x48>
c000e650:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e655:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e65b:	83 e2 fb             	and    edx,0xfffffffb
c000e65e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e664:	b8 00 00 00 00       	mov    eax,0x0
c000e669:	eb 4d                	jmp    c000e6b8 <findRSDP()+0x94>
c000e66b:	90                   	nop
c000e66c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e674:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e67c:	77 32                	ja     c000e6b0 <findRSDP()+0x8c>
c000e67e:	83 ec 04             	sub    esp,0x4
c000e681:	6a 08                	push   0x8
c000e683:	68 e3 11 02 c0       	push   0xc00211e3
c000e688:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e68c:	e8 ef 1c ff ff       	call   c0000380 <memcmp>
c000e691:	83 c4 10             	add    esp,0x10
c000e694:	85 c0                	test   eax,eax
c000e696:	0f 94 c0             	sete   al
c000e699:	0f b6 c0             	movzx  eax,al
c000e69c:	85 c0                	test   eax,eax
c000e69e:	74 08                	je     c000e6a8 <findRSDP()+0x84>
c000e6a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6a4:	eb 12                	jmp    c000e6b8 <findRSDP()+0x94>
c000e6a6:	66 90                	xchg   ax,ax
c000e6a8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e6ad:	eb c5                	jmp    c000e674 <findRSDP()+0x50>
c000e6af:	90                   	nop
c000e6b0:	b8 00 00 00 00       	mov    eax,0x0
c000e6b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e6b8:	83 c4 1c             	add    esp,0x1c
c000e6bb:	c3                   	ret    

c000e6bc <loadACPITables(unsigned char*)>:
c000e6bc:	57                   	push   edi
c000e6bd:	56                   	push   esi
c000e6be:	53                   	push   ebx
c000e6bf:	83 ec 60             	sub    esp,0x60
c000e6c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e6c7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6cd:	83 e0 04             	and    eax,0x4
c000e6d0:	0f b6 c0             	movzx  eax,al
c000e6d3:	85 c0                	test   eax,eax
c000e6d5:	0f 84 41 02 00 00    	je     c000e91c <loadACPITables(unsigned char*)+0x260>
c000e6db:	a0 c0 86 02 c0       	mov    al,ds:0xc00286c0
c000e6e0:	0f b6 c0             	movzx  eax,al
c000e6e3:	85 c0                	test   eax,eax
c000e6e5:	74 79                	je     c000e760 <loadACPITables(unsigned char*)+0xa4>
c000e6e7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e6eb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e6ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6f6:	83 e8 24             	sub    eax,0x24
c000e6f9:	c1 e8 03             	shr    eax,0x3
c000e6fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e700:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e708:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e70c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e710:	0f 8d ba 00 00 00    	jge    c000e7d0 <loadACPITables(unsigned char*)+0x114>
c000e716:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e71a:	83 c0 24             	add    eax,0x24
c000e71d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e721:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e725:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e729:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e72d:	c1 e0 03             	shl    eax,0x3
c000e730:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e734:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e73b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e73d:	89 c1                	mov    ecx,eax
c000e73f:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e744:	8d 50 01             	lea    edx,[eax+0x1]
c000e747:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c000e74d:	89 ca                	mov    edx,ecx
c000e74f:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e756:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e75b:	eb ab                	jmp    c000e708 <loadACPITables(unsigned char*)+0x4c>
c000e75d:	8d 76 00             	lea    esi,[esi+0x0]
c000e760:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e764:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e768:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e76c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e76f:	83 e8 24             	sub    eax,0x24
c000e772:	c1 e8 02             	shr    eax,0x2
c000e775:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e779:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e781:	8d 76 00             	lea    esi,[esi+0x0]
c000e784:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e788:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e78c:	7d 42                	jge    c000e7d0 <loadACPITables(unsigned char*)+0x114>
c000e78e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e792:	83 c0 24             	add    eax,0x24
c000e795:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e799:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e79d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e7a1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e7a5:	c1 e0 02             	shl    eax,0x2
c000e7a8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e7ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7b0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e7b2:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e7b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e7ba:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c000e7c0:	89 ca                	mov    edx,ecx
c000e7c2:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e7c9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e7ce:	eb b4                	jmp    c000e784 <loadACPITables(unsigned char*)+0xc8>
c000e7d0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e7d8:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e7dd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e7e1:	0f 8d 39 01 00 00    	jge    c000e920 <loadACPITables(unsigned char*)+0x264>
c000e7e7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e7eb:	8b 04 c5 c4 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b3c]
c000e7f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e7f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e7fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e802:	25 ff 0f 00 00       	and    eax,0xfff
c000e807:	89 c6                	mov    esi,eax
c000e809:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e80f:	83 ec 0c             	sub    esp,0xc
c000e812:	6a 01                	push   0x1
c000e814:	e8 e8 ad ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e819:	83 c4 10             	add    esp,0x10
c000e81c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e820:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e826:	83 ec 0c             	sub    esp,0xc
c000e829:	6a 01                	push   0x1
c000e82b:	6a 01                	push   0x1
c000e82d:	50                   	push   eax
c000e82e:	52                   	push   edx
c000e82f:	53                   	push   ebx
c000e830:	e8 d9 b6 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e835:	83 c4 20             	add    esp,0x20
c000e838:	09 f0                	or     eax,esi
c000e83a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e83e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e842:	c1 e0 03             	shl    eax,0x3
c000e845:	05 c0 84 02 c0       	add    eax,0xc00284c0
c000e84a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e84e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e852:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e856:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e85e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e862:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e866:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e86a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e86e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e872:	89 c6                	mov    esi,eax
c000e874:	89 d7                	mov    edi,edx
c000e876:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e878:	89 c8                	mov    eax,ecx
c000e87a:	89 fa                	mov    edx,edi
c000e87c:	89 f3                	mov    ebx,esi
c000e87e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e882:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e886:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e88a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e88e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e891:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e895:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e899:	05 00 10 00 00       	add    eax,0x1000
c000e89e:	c1 e8 0c             	shr    eax,0xc
c000e8a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e8a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e8ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8b1:	25 ff 0f 00 00       	and    eax,0xfff
c000e8b6:	89 c6                	mov    esi,eax
c000e8b8:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e8be:	83 ec 0c             	sub    esp,0xc
c000e8c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e8c5:	e8 37 ad ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e8ca:	83 c4 10             	add    esp,0x10
c000e8cd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e8d7:	83 ec 0c             	sub    esp,0xc
c000e8da:	6a 01                	push   0x1
c000e8dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e8e0:	50                   	push   eax
c000e8e1:	52                   	push   edx
c000e8e2:	53                   	push   ebx
c000e8e3:	e8 26 b6 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8e8:	83 c4 20             	add    esp,0x20
c000e8eb:	09 f0                	or     eax,esi
c000e8ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f5:	83 ec 0c             	sub    esp,0xc
c000e8f8:	50                   	push   eax
c000e8f9:	e8 21 b0 ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c000e8fe:	83 c4 10             	add    esp,0x10
c000e901:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e905:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e909:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e910:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e915:	e9 be fe ff ff       	jmp    c000e7d8 <loadACPITables(unsigned char*)+0x11c>
c000e91a:	66 90                	xchg   ax,ax
c000e91c:	90                   	nop
c000e91d:	8d 76 00             	lea    esi,[esi+0x0]
c000e920:	83 c4 60             	add    esp,0x60
c000e923:	5b                   	pop    ebx
c000e924:	5e                   	pop    esi
c000e925:	5f                   	pop    edi
c000e926:	c3                   	ret    
c000e927:	90                   	nop

c000e928 <findRSDT(unsigned char*)>:
c000e928:	57                   	push   edi
c000e929:	56                   	push   esi
c000e92a:	53                   	push   ebx
c000e92b:	83 ec 50             	sub    esp,0x50
c000e92e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e933:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e939:	83 e0 04             	and    eax,0x4
c000e93c:	0f b6 c0             	movzx  eax,al
c000e93f:	85 c0                	test   eax,eax
c000e941:	75 0d                	jne    c000e950 <findRSDT(unsigned char*)+0x28>
c000e943:	b8 00 00 00 00       	mov    eax,0x0
c000e948:	e9 2b 01 00 00       	jmp    c000ea78 <findRSDT(unsigned char*)+0x150>
c000e94d:	8d 76 00             	lea    esi,[esi+0x0]
c000e950:	89 e0                	mov    eax,esp
c000e952:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e956:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e95a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e95e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e96a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e96e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e972:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e976:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e97a:	89 c6                	mov    esi,eax
c000e97c:	89 d7                	mov    edi,edx
c000e97e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e980:	89 c8                	mov    eax,ecx
c000e982:	89 fa                	mov    edx,edi
c000e984:	89 f3                	mov    ebx,esi
c000e986:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e98a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e98e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e992:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e996:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e99a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e9a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9aa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e9ba:	25 ff 0f 00 00       	and    eax,0xfff
c000e9bf:	89 c6                	mov    esi,eax
c000e9c1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e9c7:	83 ec 0c             	sub    esp,0xc
c000e9ca:	6a 02                	push   0x2
c000e9cc:	e8 30 ac ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e9d1:	83 c4 10             	add    esp,0x10
c000e9d4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e9d8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	6a 01                	push   0x1
c000e9e3:	6a 02                	push   0x2
c000e9e5:	50                   	push   eax
c000e9e6:	52                   	push   edx
c000e9e7:	53                   	push   ebx
c000e9e8:	e8 21 b5 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9ed:	83 c4 20             	add    esp,0x20
c000e9f0:	09 f0                	or     eax,esi
c000e9f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e9f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9fa:	25 ff 0f 00 00       	and    eax,0xfff
c000e9ff:	89 c6                	mov    esi,eax
c000ea01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ea07:	83 ec 0c             	sub    esp,0xc
c000ea0a:	6a 02                	push   0x2
c000ea0c:	e8 f0 ab ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000ea11:	83 c4 10             	add    esp,0x10
c000ea14:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ea18:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ea1e:	83 ec 0c             	sub    esp,0xc
c000ea21:	6a 01                	push   0x1
c000ea23:	6a 02                	push   0x2
c000ea25:	50                   	push   eax
c000ea26:	52                   	push   edx
c000ea27:	53                   	push   ebx
c000ea28:	e8 e1 b4 ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ea2d:	83 c4 20             	add    esp,0x20
c000ea30:	09 f0                	or     eax,esi
c000ea32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea36:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea3b:	85 c0                	test   eax,eax
c000ea3d:	75 11                	jne    c000ea50 <findRSDT(unsigned char*)+0x128>
c000ea3f:	c6 05 c0 86 02 c0 00 	mov    BYTE PTR ds:0xc00286c0,0x0
c000ea46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea4e:	eb 24                	jmp    c000ea74 <findRSDT(unsigned char*)+0x14c>
c000ea50:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea55:	83 f8 02             	cmp    eax,0x2
c000ea58:	75 12                	jne    c000ea6c <findRSDT(unsigned char*)+0x144>
c000ea5a:	c6 05 c0 86 02 c0 01 	mov    BYTE PTR ds:0xc00286c0,0x1
c000ea61:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea65:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea69:	eb 09                	jmp    c000ea74 <findRSDT(unsigned char*)+0x14c>
c000ea6b:	90                   	nop
c000ea6c:	b8 00 00 00 00       	mov    eax,0x0
c000ea71:	eb 05                	jmp    c000ea78 <findRSDT(unsigned char*)+0x150>
c000ea73:	90                   	nop
c000ea74:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea78:	83 c4 50             	add    esp,0x50
c000ea7b:	5b                   	pop    ebx
c000ea7c:	5e                   	pop    esi
c000ea7d:	5f                   	pop    edi
c000ea7e:	c3                   	ret    
c000ea7f:	90                   	nop

c000ea80 <findDataTable(unsigned char*, char*)>:
c000ea80:	83 ec 1c             	sub    esp,0x1c
c000ea83:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ea88:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea8e:	83 e0 04             	and    eax,0x4
c000ea91:	0f b6 c0             	movzx  eax,al
c000ea94:	85 c0                	test   eax,eax
c000ea96:	75 08                	jne    c000eaa0 <findDataTable(unsigned char*, char*)+0x20>
c000ea98:	b8 00 00 00 00       	mov    eax,0x0
c000ea9d:	eb 5d                	jmp    c000eafc <findDataTable(unsigned char*, char*)+0x7c>
c000ea9f:	90                   	nop
c000eaa0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eaa8:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000eaad:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000eab1:	7d 41                	jge    c000eaf4 <findDataTable(unsigned char*, char*)+0x74>
c000eab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eab7:	c1 e0 03             	shl    eax,0x3
c000eaba:	05 c0 84 02 c0       	add    eax,0xc00284c0
c000eabf:	83 ec 04             	sub    esp,0x4
c000eac2:	6a 04                	push   0x4
c000eac4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eac8:	50                   	push   eax
c000eac9:	e8 b2 18 ff ff       	call   c0000380 <memcmp>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	85 c0                	test   eax,eax
c000ead3:	0f 94 c0             	sete   al
c000ead6:	0f b6 c0             	movzx  eax,al
c000ead9:	85 c0                	test   eax,eax
c000eadb:	74 0f                	je     c000eaec <findDataTable(unsigned char*, char*)+0x6c>
c000eadd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eae1:	8b 04 c5 c4 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b3c]
c000eae8:	eb 12                	jmp    c000eafc <findDataTable(unsigned char*, char*)+0x7c>
c000eaea:	66 90                	xchg   ax,ax
c000eaec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000eaf1:	eb b5                	jmp    c000eaa8 <findDataTable(unsigned char*, char*)+0x28>
c000eaf3:	90                   	nop
c000eaf4:	b8 00 00 00 00       	mov    eax,0x0
c000eaf9:	8d 76 00             	lea    esi,[esi+0x0]
c000eafc:	83 c4 1c             	add    esp,0x1c
c000eaff:	c3                   	ret    

c000eb00 <scanMADT()>:
c000eb00:	53                   	push   ebx
c000eb01:	83 ec 38             	sub    esp,0x38
c000eb04:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000eb09:	25 00 04 00 00       	and    eax,0x400
c000eb0e:	74 14                	je     c000eb24 <scanMADT()+0x24>
c000eb10:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb15:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb1b:	83 e2 fb             	and    edx,0xfffffffb
c000eb1e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb24:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb29:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb2f:	83 e0 04             	and    eax,0x4
c000eb32:	0f b6 c0             	movzx  eax,al
c000eb35:	85 c0                	test   eax,eax
c000eb37:	0f 84 6b 04 00 00    	je     c000efa8 <scanMADT()+0x4a8>
c000eb3d:	e8 e2 fa ff ff       	call   c000e624 <findRSDP()>
c000eb42:	a3 cc 86 02 c0       	mov    ds:0xc00286cc,eax
c000eb47:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c000eb4c:	85 c0                	test   eax,eax
c000eb4e:	75 1c                	jne    c000eb6c <scanMADT()+0x6c>
c000eb50:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb55:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb5b:	83 e2 fb             	and    edx,0xfffffffb
c000eb5e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb64:	e9 47 04 00 00       	jmp    c000efb0 <scanMADT()+0x4b0>
c000eb69:	8d 76 00             	lea    esi,[esi+0x0]
c000eb6c:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c000eb71:	83 ec 0c             	sub    esp,0xc
c000eb74:	50                   	push   eax
c000eb75:	e8 ae fd ff ff       	call   c000e928 <findRSDT(unsigned char*)>
c000eb7a:	83 c4 10             	add    esp,0x10
c000eb7d:	a3 c8 86 02 c0       	mov    ds:0xc00286c8,eax
c000eb82:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eb87:	85 c0                	test   eax,eax
c000eb89:	75 19                	jne    c000eba4 <scanMADT()+0xa4>
c000eb8b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb90:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb96:	83 e2 fb             	and    edx,0xfffffffb
c000eb99:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb9f:	e9 0c 04 00 00       	jmp    c000efb0 <scanMADT()+0x4b0>
c000eba4:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eba9:	83 ec 0c             	sub    esp,0xc
c000ebac:	50                   	push   eax
c000ebad:	e8 0a fb ff ff       	call   c000e6bc <loadACPITables(unsigned char*)>
c000ebb2:	83 c4 10             	add    esp,0x10
c000ebb5:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000ebba:	83 ec 08             	sub    esp,0x8
c000ebbd:	68 ec 11 02 c0       	push   0xc00211ec
c000ebc2:	50                   	push   eax
c000ebc3:	e8 b8 fe ff ff       	call   c000ea80 <findDataTable(unsigned char*, char*)>
c000ebc8:	83 c4 10             	add    esp,0x10
c000ebcb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ebcf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ebd4:	75 1a                	jne    c000ebf0 <scanMADT()+0xf0>
c000ebd6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebdb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebe1:	83 e2 fe             	and    edx,0xfffffffe
c000ebe4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebea:	e9 c1 03 00 00       	jmp    c000efb0 <scanMADT()+0x4b0>
c000ebef:	90                   	nop
c000ebf0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ebf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebff:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ec03:	0f 87 a7 03 00 00    	ja     c000efb0 <scanMADT()+0x4b0>
c000ec09:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ec11:	0f 87 99 03 00 00    	ja     c000efb0 <scanMADT()+0x4b0>
c000ec17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec1b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ec1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec23:	8d 50 01             	lea    edx,[eax+0x1]
c000ec26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec2e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec32:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000ec36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec3a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec49:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000ec4d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ec52:	83 f8 02             	cmp    eax,0x2
c000ec55:	0f 86 51 03 00 00    	jbe    c000efac <scanMADT()+0x4ac>
c000ec5b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec60:	85 c0                	test   eax,eax
c000ec62:	75 58                	jne    c000ecbc <scanMADT()+0x1bc>
c000ec64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec68:	8d 50 01             	lea    edx,[eax+0x1]
c000ec6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec6f:	8a 15 c0 88 02 c0    	mov    dl,BYTE PTR ds:0xc00288c0
c000ec75:	0f b6 d2             	movzx  edx,dl
c000ec78:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec7c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec80:	88 82 00 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7700],al
c000ec86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec8a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec91:	8a 15 c0 88 02 c0    	mov    dl,BYTE PTR ds:0xc00288c0
c000ec97:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec9a:	88 0d c0 88 02 c0    	mov    BYTE PTR ds:0xc00288c0,cl
c000eca0:	0f b6 d2             	movzx  edx,dl
c000eca3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000eca7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ecab:	88 82 e0 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7720],al
c000ecb1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ecb6:	e9 d9 02 00 00       	jmp    c000ef94 <scanMADT()+0x494>
c000ecbb:	90                   	nop
c000ecbc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ecc1:	83 f8 01             	cmp    eax,0x1
c000ecc4:	0f 85 1a 01 00 00    	jne    c000ede4 <scanMADT()+0x2e4>
c000ecca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecce:	8d 50 01             	lea    edx,[eax+0x1]
c000ecd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecd5:	8a 15 80 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028780
c000ecdb:	0f b6 d2             	movzx  edx,dl
c000ecde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ece2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ece6:	88 82 a0 87 02 c0    	mov    BYTE PTR [edx-0x3ffd7860],al
c000ecec:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ecf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecf9:	01 d0                	add    eax,edx
c000ecfb:	83 c0 2c             	add    eax,0x2c
c000ecfe:	8a 00                	mov    al,BYTE PTR [eax]
c000ed00:	0f b6 d0             	movzx  edx,al
c000ed03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed07:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed0e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed12:	0f b6 c0             	movzx  eax,al
c000ed15:	c1 e0 08             	shl    eax,0x8
c000ed18:	89 d1                	mov    ecx,edx
c000ed1a:	09 c1                	or     ecx,eax
c000ed1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed20:	8d 50 02             	lea    edx,[eax+0x2]
c000ed23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed27:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed2b:	0f b6 c0             	movzx  eax,al
c000ed2e:	c1 e0 10             	shl    eax,0x10
c000ed31:	09 c1                	or     ecx,eax
c000ed33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed37:	8d 50 03             	lea    edx,[eax+0x3]
c000ed3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed42:	0f b6 c0             	movzx  eax,al
c000ed45:	c1 e0 18             	shl    eax,0x18
c000ed48:	09 c1                	or     ecx,eax
c000ed4a:	89 ca                	mov    edx,ecx
c000ed4c:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000ed51:	0f b6 c0             	movzx  eax,al
c000ed54:	89 14 85 c0 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7840],edx
c000ed5b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed68:	01 d0                	add    eax,edx
c000ed6a:	83 c0 2c             	add    eax,0x2c
c000ed6d:	8a 00                	mov    al,BYTE PTR [eax]
c000ed6f:	0f b6 d0             	movzx  edx,al
c000ed72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed76:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed7d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed81:	0f b6 c0             	movzx  eax,al
c000ed84:	c1 e0 08             	shl    eax,0x8
c000ed87:	89 d1                	mov    ecx,edx
c000ed89:	09 c1                	or     ecx,eax
c000ed8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed8f:	8d 50 02             	lea    edx,[eax+0x2]
c000ed92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed96:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed9a:	0f b6 c0             	movzx  eax,al
c000ed9d:	c1 e0 10             	shl    eax,0x10
c000eda0:	09 c1                	or     ecx,eax
c000eda2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eda6:	8d 50 03             	lea    edx,[eax+0x3]
c000eda9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000edad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000edb1:	0f b6 c0             	movzx  eax,al
c000edb4:	c1 e0 18             	shl    eax,0x18
c000edb7:	09 c1                	or     ecx,eax
c000edb9:	89 ca                	mov    edx,ecx
c000edbb:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000edc0:	0f b6 c0             	movzx  eax,al
c000edc3:	89 14 85 40 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77c0],edx
c000edca:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000edcf:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000edd4:	83 c0 01             	add    eax,0x1
c000edd7:	a2 80 87 02 c0       	mov    ds:0xc0028780,al
c000eddc:	e9 b3 01 00 00       	jmp    c000ef94 <scanMADT()+0x494>
c000ede1:	8d 76 00             	lea    esi,[esi+0x0]
c000ede4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ede9:	83 f8 02             	cmp    eax,0x2
c000edec:	0f 85 ea 00 00 00    	jne    c000eedc <scanMADT()+0x3dc>
c000edf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edf6:	8d 50 01             	lea    edx,[eax+0x1]
c000edf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000edfd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee01:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ee05:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ee09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee0d:	8d 50 01             	lea    edx,[eax+0x1]
c000ee10:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ee14:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee18:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ee1c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ee20:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee28:	01 d0                	add    eax,edx
c000ee2a:	83 c0 2c             	add    eax,0x2c
c000ee2d:	8a 00                	mov    al,BYTE PTR [eax]
c000ee2f:	0f b6 d0             	movzx  edx,al
c000ee32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee36:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee3d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ee41:	0f b6 c0             	movzx  eax,al
c000ee44:	c1 e0 08             	shl    eax,0x8
c000ee47:	89 d1                	mov    ecx,edx
c000ee49:	09 c1                	or     ecx,eax
c000ee4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee4f:	8d 50 02             	lea    edx,[eax+0x2]
c000ee52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee56:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee5a:	0f b6 c0             	movzx  eax,al
c000ee5d:	c1 e0 10             	shl    eax,0x10
c000ee60:	09 c1                	or     ecx,eax
c000ee62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee66:	8d 50 03             	lea    edx,[eax+0x3]
c000ee69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee6d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee71:	0f b6 c0             	movzx  eax,al
c000ee74:	c1 e0 18             	shl    eax,0x18
c000ee77:	09 c8                	or     eax,ecx
c000ee79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee7d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ee82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee8a:	01 d0                	add    eax,edx
c000ee8c:	83 c0 2c             	add    eax,0x2c
c000ee8f:	8a 00                	mov    al,BYTE PTR [eax]
c000ee91:	0f b6 c0             	movzx  eax,al
c000ee94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee98:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ee9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee9f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000eea3:	0f b6 d2             	movzx  edx,dl
c000eea6:	c1 e2 08             	shl    edx,0x8
c000eea9:	09 d0                	or     eax,edx
c000eeab:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000eeb0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eeb5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000eeba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eebe:	88 90 c8 28 02 c0    	mov    BYTE PTR [eax-0x3ffdd738],dl
c000eec4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000eec9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000eece:	66 89 84 12 60 87 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd78a0],ax
c000eed6:	e9 b9 00 00 00       	jmp    c000ef94 <scanMADT()+0x494>
c000eedb:	90                   	nop
c000eedc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eee1:	83 f8 04             	cmp    eax,0x4
c000eee4:	0f 85 9a 00 00 00    	jne    c000ef84 <scanMADT()+0x484>
c000eeea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eeee:	8d 50 01             	lea    edx,[eax+0x1]
c000eef1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eef5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eef9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eefd:	0f b6 c0             	movzx  eax,al
c000ef00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ef04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef0c:	01 d0                	add    eax,edx
c000ef0e:	83 c0 2c             	add    eax,0x2c
c000ef11:	8a 00                	mov    al,BYTE PTR [eax]
c000ef13:	0f b6 d0             	movzx  edx,al
c000ef16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef1a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef21:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ef25:	0f b6 c0             	movzx  eax,al
c000ef28:	c1 e0 08             	shl    eax,0x8
c000ef2b:	09 d0                	or     eax,edx
c000ef2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef31:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ef36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef3a:	8d 50 01             	lea    edx,[eax+0x1]
c000ef3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ef41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ef49:	0f b6 c0             	movzx  eax,al
c000ef4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ef50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef54:	c1 e0 08             	shl    eax,0x8
c000ef57:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ef5b:	89 c1                	mov    ecx,eax
c000ef5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef61:	c1 e0 18             	shl    eax,0x18
c000ef64:	89 c3                	mov    ebx,eax
c000ef66:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c000ef6b:	8d 50 01             	lea    edx,[eax+0x1]
c000ef6e:	89 15 d0 86 02 c0    	mov    DWORD PTR ds:0xc00286d0,edx
c000ef74:	09 d9                	or     ecx,ebx
c000ef76:	89 ca                	mov    edx,ecx
c000ef78:	89 14 85 e0 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7920],edx
c000ef7f:	eb 13                	jmp    c000ef94 <scanMADT()+0x494>
c000ef81:	8d 76 00             	lea    esi,[esi+0x0]
c000ef84:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ef89:	83 f8 05             	cmp    eax,0x5
c000ef8c:	75 06                	jne    c000ef94 <scanMADT()+0x494>
c000ef8e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ef93:	90                   	nop
c000ef94:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ef99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef9d:	01 d0                	add    eax,edx
c000ef9f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000efa3:	e9 50 fc ff ff       	jmp    c000ebf8 <scanMADT()+0xf8>
c000efa8:	90                   	nop
c000efa9:	eb 05                	jmp    c000efb0 <scanMADT()+0x4b0>
c000efab:	90                   	nop
c000efac:	90                   	nop
c000efad:	8d 76 00             	lea    esi,[esi+0x0]
c000efb0:	83 c4 38             	add    esp,0x38
c000efb3:	5b                   	pop    ebx
c000efb4:	c3                   	ret    
c000efb5:	90                   	nop
c000efb6:	66 90                	xchg   ax,ax

c000efb8 <ACPI::ACPI()>:
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efbf:	83 ec 08             	sub    esp,0x8
c000efc2:	68 f1 11 02 c0       	push   0xc00211f1
c000efc7:	50                   	push   eax
c000efc8:	e8 65 d2 ff ff       	call   c000c232 <Device::Device(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	ba 60 13 02 c0       	mov    edx,0xc0021360
c000efd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efd9:	89 10                	mov    DWORD PTR [eax],edx
c000efdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efdf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000efe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efea:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eff8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f002:	e8 f9 fa ff ff       	call   c000eb00 <scanMADT()>
c000f007:	90                   	nop
c000f008:	83 c4 0c             	add    esp,0xc
c000f00b:	c3                   	ret    

c000f00c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f00c:	83 ec 2c             	sub    esp,0x2c
c000f00f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f013:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f017:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f01b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f01f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f024:	88 d0                	mov    al,dl
c000f026:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f02a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f02f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f037:	90                   	nop
c000f038:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f03c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f042:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f046:	0f 8d b0 00 00 00    	jge    c000f0fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f04c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f050:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f054:	83 c2 2a             	add    edx,0x2a
c000f057:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f05b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f060:	0f b7 c0             	movzx  eax,ax
c000f063:	39 c2                	cmp    edx,eax
c000f065:	0f 85 85 00 00 00    	jne    c000f0f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f06b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f06f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f073:	83 c2 2a             	add    edx,0x2a
c000f076:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f07a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f07f:	0f b6 c0             	movzx  eax,al
c000f082:	39 c2                	cmp    edx,eax
c000f084:	75 6a                	jne    c000f0f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f086:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f08b:	85 c0                	test   eax,eax
c000f08d:	74 3d                	je     c000f0cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f08f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f093:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f097:	83 c2 2a             	add    edx,0x2a
c000f09a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f09e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0a5:	39 c2                	cmp    edx,eax
c000f0a7:	74 13                	je     c000f0bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f0a9:	83 ec 0c             	sub    esp,0xc
c000f0ac:	68 6c 11 02 c0       	push   0xc002116c
c000f0b1:	e8 5b 1b 00 00       	call   c0010c11 <KePanic(char const*)>
c000f0b6:	83 c4 10             	add    esp,0x10
c000f0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0bc:	83 ec 0c             	sub    esp,0xc
c000f0bf:	68 f6 11 02 c0       	push   0xc00211f6
c000f0c4:	e8 48 1b 00 00       	call   c0010c11 <KePanic(char const*)>
c000f0c9:	83 c4 10             	add    esp,0x10
c000f0cc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f0d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f0d8:	83 c2 2a             	add    edx,0x2a
c000f0db:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f0df:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0e1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f0e4:	89 01                	mov    DWORD PTR [ecx],eax
c000f0e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f0e9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f0ee:	66 90                	xchg   ax,ax
c000f0f0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f0f5:	e9 3e ff ff ff       	jmp    c000f038 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f0fa:	66 90                	xchg   ax,ax
c000f0fc:	90                   	nop
c000f0fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f101:	83 c4 2c             	add    esp,0x2c
c000f104:	c2 04 00             	ret    0x4
c000f107:	90                   	nop

c000f108 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f108:	83 ec 1c             	sub    esp,0x1c
c000f10b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f10f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f113:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f117:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f11c:	88 c8                	mov    al,cl
c000f11e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f122:	88 d0                	mov    al,dl
c000f124:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f12c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f136:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f139:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f13d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f145:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f14b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f14f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f152:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f156:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f15b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f15f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f165:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f169:	83 c0 01             	add    eax,0x1
c000f16c:	88 c1                	mov    cl,al
c000f16e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f172:	83 c2 2a             	add    edx,0x2a
c000f175:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f17d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f187:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f18a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f18e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f196:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f19c:	8d 50 01             	lea    edx,[eax+0x1]
c000f19f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1a3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f1a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1ad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f1b3:	3d 00 02 00 00       	cmp    eax,0x200
c000f1b8:	75 12                	jne    c000f1cc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f1ba:	83 ec 0c             	sub    esp,0xc
c000f1bd:	68 05 12 02 c0       	push   0xc0021205
c000f1c2:	e8 4a 1a 00 00       	call   c0010c11 <KePanic(char const*)>
c000f1c7:	83 c4 10             	add    esp,0x10
c000f1ca:	66 90                	xchg   ax,ax
c000f1cc:	90                   	nop
c000f1cd:	83 c4 1c             	add    esp,0x1c
c000f1d0:	c3                   	ret    
c000f1d1:	90                   	nop
c000f1d2:	66 90                	xchg   ax,ax

c000f1d4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f1d4:	b8 00 00 00 00       	mov    eax,0x0
c000f1d9:	c3                   	ret    
c000f1da:	66 90                	xchg   ax,ax

c000f1dc <ACPI::detectPCI()>:
c000f1dc:	53                   	push   ebx
c000f1dd:	83 ec 28             	sub    esp,0x28
c000f1e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f1e5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f1ea:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1ef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1f5:	83 e0 04             	and    eax,0x4
c000f1f8:	0f b6 c0             	movzx  eax,al
c000f1fb:	85 c0                	test   eax,eax
c000f1fd:	74 2d                	je     c000f22c <ACPI::detectPCI()+0x50>
c000f1ff:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000f204:	83 ec 08             	sub    esp,0x8
c000f207:	68 22 12 02 c0       	push   0xc0021222
c000f20c:	50                   	push   eax
c000f20d:	e8 6e f8 ff ff       	call   c000ea80 <findDataTable(unsigned char*, char*)>
c000f212:	83 c4 10             	add    esp,0x10
c000f215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f219:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f21e:	74 0c                	je     c000f22c <ACPI::detectPCI()+0x50>
c000f220:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f225:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f22a:	66 90                	xchg   ax,ax
c000f22c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f234:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f238:	8a 00                	mov    al,BYTE PTR [eax]
c000f23a:	0f b6 c0             	movzx  eax,al
c000f23d:	83 f8 01             	cmp    eax,0x1
c000f240:	75 0e                	jne    c000f250 <ACPI::detectPCI()+0x74>
c000f242:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f247:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f24c:	eb 2e                	jmp    c000f27c <ACPI::detectPCI()+0xa0>
c000f24e:	66 90                	xchg   ax,ax
c000f250:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f254:	8a 00                	mov    al,BYTE PTR [eax]
c000f256:	0f b6 c0             	movzx  eax,al
c000f259:	83 f8 02             	cmp    eax,0x2
c000f25c:	75 1e                	jne    c000f27c <ACPI::detectPCI()+0xa0>
c000f25e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f263:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f268:	85 c0                	test   eax,eax
c000f26a:	74 10                	je     c000f27c <ACPI::detectPCI()+0xa0>
c000f26c:	83 ec 0c             	sub    esp,0xc
c000f26f:	68 9c 11 02 c0       	push   0xc002119c
c000f274:	e8 98 19 00 00       	call   c0010c11 <KePanic(char const*)>
c000f279:	83 c4 10             	add    esp,0x10
c000f27c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f280:	83 f0 01             	xor    eax,0x1
c000f283:	0f b6 c0             	movzx  eax,al
c000f286:	85 c0                	test   eax,eax
c000f288:	74 46                	je     c000f2d0 <ACPI::detectPCI()+0xf4>
c000f28a:	e8 a1 0e ff ff       	call   c0000130 <manualPCIProbe>
c000f28f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f293:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f298:	75 0e                	jne    c000f2a8 <ACPI::detectPCI()+0xcc>
c000f29a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f29f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f2a4:	eb 2a                	jmp    c000f2d0 <ACPI::detectPCI()+0xf4>
c000f2a6:	66 90                	xchg   ax,ax
c000f2a8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f2ad:	75 21                	jne    c000f2d0 <ACPI::detectPCI()+0xf4>
c000f2af:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f2b4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f2b9:	85 c0                	test   eax,eax
c000f2bb:	74 13                	je     c000f2d0 <ACPI::detectPCI()+0xf4>
c000f2bd:	83 ec 0c             	sub    esp,0xc
c000f2c0:	68 9c 11 02 c0       	push   0xc002119c
c000f2c5:	e8 47 19 00 00       	call   c0010c11 <KePanic(char const*)>
c000f2ca:	83 c4 10             	add    esp,0x10
c000f2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f2d0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f2d5:	85 c0                	test   eax,eax
c000f2d7:	0f 84 87 00 00 00    	je     c000f364 <ACPI::detectPCI()+0x188>
c000f2dd:	83 ec 0c             	sub    esp,0xc
c000f2e0:	68 27 12 02 c0       	push   0xc0021227
c000f2e5:	e8 53 12 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c000f2ea:	83 c4 10             	add    esp,0x10
c000f2ed:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f2f5:	83 ec 0c             	sub    esp,0xc
c000f2f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f2fc:	e8 ad 87 ff ff       	call   c0007aae <malloc>
c000f301:	83 c4 10             	add    esp,0x10
c000f304:	89 c3                	mov    ebx,eax
c000f306:	83 ec 0c             	sub    esp,0xc
c000f309:	53                   	push   ebx
c000f30a:	e8 99 b2 00 00       	call   c001a5a8 <PCI::PCI()>
c000f30f:	83 c4 10             	add    esp,0x10
c000f312:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f316:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f31a:	83 ec 08             	sub    esp,0x8
c000f31d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f321:	50                   	push   eax
c000f322:	e8 73 cd ff ff       	call   c000c09a <Device::addChild(Device*)>
c000f327:	83 c4 10             	add    esp,0x10
c000f32a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f32e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f330:	83 c0 08             	add    eax,0x8
c000f333:	8b 00                	mov    eax,DWORD PTR [eax]
c000f335:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f33a:	85 d2                	test   edx,edx
c000f33c:	74 0a                	je     c000f348 <ACPI::detectPCI()+0x16c>
c000f33e:	ba 01 00 00 00       	mov    edx,0x1
c000f343:	eb 0b                	jmp    c000f350 <ACPI::detectPCI()+0x174>
c000f345:	8d 76 00             	lea    esi,[esi+0x0]
c000f348:	ba 02 00 00 00       	mov    edx,0x2
c000f34d:	8d 76 00             	lea    esi,[esi+0x0]
c000f350:	6a 00                	push   0x0
c000f352:	6a 00                	push   0x0
c000f354:	52                   	push   edx
c000f355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f359:	ff d0                	call   eax
c000f35b:	83 c4 10             	add    esp,0x10
c000f35e:	e9 91 00 00 00       	jmp    c000f3f4 <ACPI::detectPCI()+0x218>
c000f363:	90                   	nop
c000f364:	83 ec 0c             	sub    esp,0xc
c000f367:	68 3f 12 02 c0       	push   0xc002123f
c000f36c:	e8 cc 11 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c000f371:	83 c4 10             	add    esp,0x10
c000f374:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f37b:	83 ec 0c             	sub    esp,0xc
c000f37e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f382:	e8 27 87 ff ff       	call   c0007aae <malloc>
c000f387:	83 c4 10             	add    esp,0x10
c000f38a:	89 c3                	mov    ebx,eax
c000f38c:	83 ec 0c             	sub    esp,0xc
c000f38f:	53                   	push   ebx
c000f390:	e8 ad bd 00 00       	call   c001b142 <IDE::IDE()>
c000f395:	83 c4 10             	add    esp,0x10
c000f398:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f39c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f3a0:	83 ec 08             	sub    esp,0x8
c000f3a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f3a7:	50                   	push   eax
c000f3a8:	e8 ed cc ff ff       	call   c000c09a <Device::addChild(Device*)>
c000f3ad:	83 c4 10             	add    esp,0x10
c000f3b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3b4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f3be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3c2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f3cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3cf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f3d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3de:	83 c0 08             	add    eax,0x8
c000f3e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3e3:	6a 00                	push   0x0
c000f3e5:	6a 00                	push   0x0
c000f3e7:	6a 00                	push   0x0
c000f3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3ed:	ff d0                	call   eax
c000f3ef:	83 c4 10             	add    esp,0x10
c000f3f2:	66 90                	xchg   ax,ax
c000f3f4:	90                   	nop
c000f3f5:	83 c4 28             	add    esp,0x28
c000f3f8:	5b                   	pop    ebx
c000f3f9:	c3                   	ret    
c000f3fa:	66 90                	xchg   ax,ax

c000f3fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f403:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f406:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f40a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f40f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f414:	83 ec 08             	sub    esp,0x8
c000f417:	52                   	push   edx
c000f418:	50                   	push   eax
c000f419:	e8 52 7d ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f41e:	83 c4 10             	add    esp,0x10
c000f421:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f425:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f42a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f42f:	83 ec 04             	sub    esp,0x4
c000f432:	6a 01                	push   0x1
c000f434:	52                   	push   edx
c000f435:	50                   	push   eax
c000f436:	e8 4f 7e ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f43b:	83 c4 10             	add    esp,0x10
c000f43e:	90                   	nop
c000f43f:	83 c4 1c             	add    esp,0x1c
c000f442:	c3                   	ret    
c000f443:	90                   	nop

c000f444 <ACPI::sleep()>:
c000f444:	83 ec 0c             	sub    esp,0xc
c000f447:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c000f44c:	85 c0                	test   eax,eax
c000f44e:	74 08                	je     c000f458 <ACPI::sleep()+0x14>
c000f450:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c000f455:	ff d0                	call   eax
c000f457:	90                   	nop
c000f458:	90                   	nop
c000f459:	83 c4 0c             	add    esp,0xc
c000f45c:	c3                   	ret    
c000f45d:	90                   	nop
c000f45e:	66 90                	xchg   ax,ax

c000f460 <ACPI::open(int, int, void*)>:
c000f460:	57                   	push   edi
c000f461:	56                   	push   esi
c000f462:	53                   	push   ebx
c000f463:	81 ec 70 01 00 00    	sub    esp,0x170
c000f469:	83 ec 0c             	sub    esp,0xc
c000f46c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f473:	e8 64 fd ff ff       	call   c000f1dc <ACPI::detectPCI()>
c000f478:	83 c4 10             	add    esp,0x10
c000f47b:	83 ec 0c             	sub    esp,0xc
c000f47e:	68 c4 11 02 c0       	push   0xc00211c4
c000f483:	e8 b5 10 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c000f488:	83 c4 10             	add    esp,0x10
c000f48b:	b8 4c 05 00 00       	mov    eax,0x54c
c000f490:	8a 00                	mov    al,BYTE PTR [eax]
c000f492:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f499:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f4a1:	83 f8 01             	cmp    eax,0x1
c000f4a4:	75 12                	jne    c000f4b8 <ACPI::open(int, int, void*)+0x58>
c000f4a6:	83 ec 0c             	sub    esp,0xc
c000f4a9:	68 54 12 02 c0       	push   0xc0021254
c000f4ae:	e8 45 4b 00 00       	call   c0013ff8 <Thr::loadKernelSymbolTable(char const*)>
c000f4b3:	83 c4 10             	add    esp,0x10
c000f4b6:	eb 34                	jmp    c000f4ec <ACPI::open(int, int, void*)+0x8c>
c000f4b8:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f4c0:	3d bb 00 00 00       	cmp    eax,0xbb
c000f4c5:	75 15                	jne    c000f4dc <ACPI::open(int, int, void*)+0x7c>
c000f4c7:	83 ec 0c             	sub    esp,0xc
c000f4ca:	68 72 12 02 c0       	push   0xc0021272
c000f4cf:	e8 24 4b 00 00       	call   c0013ff8 <Thr::loadKernelSymbolTable(char const*)>
c000f4d4:	83 c4 10             	add    esp,0x10
c000f4d7:	eb 13                	jmp    c000f4ec <ACPI::open(int, int, void*)+0x8c>
c000f4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4dc:	83 ec 0c             	sub    esp,0xc
c000f4df:	68 90 12 02 c0       	push   0xc0021290
c000f4e4:	e8 28 17 00 00       	call   c0010c11 <KePanic(char const*)>
c000f4e9:	83 c4 10             	add    esp,0x10
c000f4ec:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f4f4:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f4ff:	83 ec 0c             	sub    esp,0xc
c000f502:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f509:	e8 a0 85 ff ff       	call   c0007aae <malloc>
c000f50e:	83 c4 10             	add    esp,0x10
c000f511:	89 c3                	mov    ebx,eax
c000f513:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f518:	83 ec 04             	sub    esp,0x4
c000f51b:	50                   	push   eax
c000f51c:	68 aa 12 02 c0       	push   0xc00212aa
c000f521:	53                   	push   ebx
c000f522:	e8 69 bc ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f531:	83 ec 08             	sub    esp,0x8
c000f534:	6a 01                	push   0x1
c000f536:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f53d:	e8 0a bd ff ff       	call   c000b24c <File::open(FileOpenMode)>
c000f542:	83 c4 10             	add    esp,0x10
c000f545:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f54c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f554:	75 16                	jne    c000f56c <ACPI::open(int, int, void*)+0x10c>
c000f556:	83 ec 0c             	sub    esp,0xc
c000f559:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f560:	e8 45 bd ff ff       	call   c000b2aa <File::close()>
c000f565:	83 c4 10             	add    esp,0x10
c000f568:	eb 0a                	jmp    c000f574 <ACPI::open(int, int, void*)+0x114>
c000f56a:	66 90                	xchg   ax,ax
c000f56c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f574:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f57c:	74 1e                	je     c000f59c <ACPI::open(int, int, void*)+0x13c>
c000f57e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f585:	8b 00                	mov    eax,DWORD PTR [eax]
c000f587:	83 c0 08             	add    eax,0x8
c000f58a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58c:	83 ec 0c             	sub    esp,0xc
c000f58f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f596:	ff d0                	call   eax
c000f598:	83 c4 10             	add    esp,0x10
c000f59b:	90                   	nop
c000f59c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f5a3:	83 f0 01             	xor    eax,0x1
c000f5a6:	0f b6 c0             	movzx  eax,al
c000f5a9:	85 c0                	test   eax,eax
c000f5ab:	74 43                	je     c000f5f0 <ACPI::open(int, int, void*)+0x190>
c000f5ad:	83 ec 0c             	sub    esp,0xc
c000f5b0:	68 c8 12 02 c0       	push   0xc00212c8
c000f5b5:	e8 83 0f 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c000f5ba:	83 c4 10             	add    esp,0x10
c000f5bd:	83 ec 04             	sub    esp,0x4
c000f5c0:	6a 0c                	push   0xc
c000f5c2:	68 e3 12 02 c0       	push   0xc00212e3
c000f5c7:	68 f4 12 02 c0       	push   0xc00212f4
c000f5cc:	e8 d7 3c 00 00       	call   c00132a8 <Reg::readIntWithDefault(char*, char*, int)>
c000f5d1:	83 c4 10             	add    esp,0x10
c000f5d4:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f5db:	83 ec 0c             	sub    esp,0xc
c000f5de:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f5e5:	e8 46 a2 ff ff       	call   c0009830 <Virt::setupPageSwapping(int)>
c000f5ea:	83 c4 10             	add    esp,0x10
c000f5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f5f0:	83 ec 0c             	sub    esp,0xc
c000f5f3:	68 35 ff 01 c0       	push   0xc001ff35
c000f5f8:	e8 40 0f 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c000f5fd:	83 c4 10             	add    esp,0x10
c000f600:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f607:	83 ec 08             	sub    esp,0x8
c000f60a:	6a 13                	push   0x13
c000f60c:	50                   	push   eax
c000f60d:	e8 a0 cd ff ff       	call   c000c3b2 <getDevicesOfType(DeviceType)>
c000f612:	83 c4 0c             	add    esp,0xc
c000f615:	8d 76 00             	lea    esi,[esi+0x0]
c000f618:	83 ec 0c             	sub    esp,0xc
c000f61b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f622:	50                   	push   eax
c000f623:	e8 f8 fc 00 00       	call   c001f320 <LinkedList<Device>::isEmpty()>
c000f628:	83 c4 10             	add    esp,0x10
c000f62b:	83 f0 01             	xor    eax,0x1
c000f62e:	0f b6 c0             	movzx  eax,al
c000f631:	85 c0                	test   eax,eax
c000f633:	0f 84 47 01 00 00    	je     c000f780 <ACPI::open(int, int, void*)+0x320>
c000f639:	83 ec 0c             	sub    esp,0xc
c000f63c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f643:	50                   	push   eax
c000f644:	e8 f3 fc 00 00       	call   c001f33c <LinkedList<Device>::getFirstElement()>
c000f649:	83 c4 10             	add    esp,0x10
c000f64c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f653:	83 ec 0c             	sub    esp,0xc
c000f656:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f65d:	50                   	push   eax
c000f65e:	e8 e1 fc 00 00       	call   c001f344 <LinkedList<Device>::removeFirst()>
c000f663:	83 c4 10             	add    esp,0x10
c000f666:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f66d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f674:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f67b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f67f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f685:	ba 09 00 00 00       	mov    edx,0x9
c000f68a:	fc                   	cld    
c000f68b:	89 c7                	mov    edi,eax
c000f68d:	89 de                	mov    esi,ebx
c000f68f:	89 d1                	mov    ecx,edx
c000f691:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f693:	83 ec 08             	sub    esp,0x8
c000f696:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f69a:	50                   	push   eax
c000f69b:	83 ec 24             	sub    esp,0x24
c000f69e:	89 e0                	mov    eax,esp
c000f6a0:	89 c3                	mov    ebx,eax
c000f6a2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f6a6:	ba 09 00 00 00       	mov    edx,0x9
c000f6ab:	89 df                	mov    edi,ebx
c000f6ad:	89 c6                	mov    esi,eax
c000f6af:	89 d1                	mov    ecx,edx
c000f6b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6b3:	e8 da b3 00 00       	call   c001aa92 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f6b8:	83 c4 30             	add    esp,0x30
c000f6bb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f6c2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f6ca:	0f 84 48 ff ff ff    	je     c000f618 <ACPI::open(int, int, void*)+0x1b8>
c000f6d0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f6db:	83 ec 0c             	sub    esp,0xc
c000f6de:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f6e5:	e8 c4 83 ff ff       	call   c0007aae <malloc>
c000f6ea:	83 c4 10             	add    esp,0x10
c000f6ed:	89 c3                	mov    ebx,eax
c000f6ef:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f6f4:	83 ec 04             	sub    esp,0x4
c000f6f7:	50                   	push   eax
c000f6f8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f6ff:	53                   	push   ebx
c000f700:	e8 8b ba ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f70f:	83 ec 0c             	sub    esp,0xc
c000f712:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f719:	e8 f2 bd ff ff       	call   c000b510 <File::exists()>
c000f71e:	83 c4 10             	add    esp,0x10
c000f721:	0f b6 c0             	movzx  eax,al
c000f724:	85 c0                	test   eax,eax
c000f726:	74 28                	je     c000f750 <ACPI::open(int, int, void*)+0x2f0>
c000f728:	83 ec 08             	sub    esp,0x8
c000f72b:	6a 01                	push   0x1
c000f72d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f734:	e8 39 53 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f746:	50                   	push   eax
c000f747:	e8 57 55 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c000f74c:	83 c4 10             	add    esp,0x10
c000f74f:	90                   	nop
c000f750:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f758:	0f 84 ba fe ff ff    	je     c000f618 <ACPI::open(int, int, void*)+0x1b8>
c000f75e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f765:	8b 00                	mov    eax,DWORD PTR [eax]
c000f767:	83 c0 08             	add    eax,0x8
c000f76a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f76c:	83 ec 0c             	sub    esp,0xc
c000f76f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f776:	ff d0                	call   eax
c000f778:	83 c4 10             	add    esp,0x10
c000f77b:	e9 98 fe ff ff       	jmp    c000f618 <ACPI::open(int, int, void*)+0x1b8>
c000f780:	83 ec 0c             	sub    esp,0xc
c000f783:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f78a:	50                   	push   eax
c000f78b:	e8 8c fb 00 00       	call   c001f31c <LinkedList<Device>::~LinkedList()>
c000f790:	83 c4 10             	add    esp,0x10
c000f793:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000f799:	83 ec 08             	sub    esp,0x8
c000f79c:	6a 01                	push   0x1
c000f79e:	68 fb 12 02 c0       	push   0xc00212fb
c000f7a3:	e8 ca 52 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c000f7a8:	83 c4 10             	add    esp,0x10
c000f7ab:	83 ec 08             	sub    esp,0x8
c000f7ae:	53                   	push   ebx
c000f7af:	50                   	push   eax
c000f7b0:	e8 ee 54 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c000f7b5:	83 c4 10             	add    esp,0x10
c000f7b8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f7bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f7c3:	83 e0 04             	and    eax,0x4
c000f7c6:	0f b6 c0             	movzx  eax,al
c000f7c9:	85 c0                	test   eax,eax
c000f7cb:	0f 84 1b 01 00 00    	je     c000f8ec <ACPI::open(int, int, void*)+0x48c>
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	68 18 13 02 c0       	push   0xc0021318
c000f7d9:	e8 5f 0d 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c000f7de:	83 c4 10             	add    esp,0x10
c000f7e1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f7ec:	83 ec 0c             	sub    esp,0xc
c000f7ef:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f7f6:	e8 b3 82 ff ff       	call   c0007aae <malloc>
c000f7fb:	83 c4 10             	add    esp,0x10
c000f7fe:	89 c3                	mov    ebx,eax
c000f800:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f805:	83 ec 04             	sub    esp,0x4
c000f808:	50                   	push   eax
c000f809:	68 35 13 02 c0       	push   0xc0021335
c000f80e:	53                   	push   ebx
c000f80f:	e8 7c b9 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c000f814:	83 c4 10             	add    esp,0x10
c000f817:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f81e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f826:	74 20                	je     c000f848 <ACPI::open(int, int, void*)+0x3e8>
c000f828:	83 ec 0c             	sub    esp,0xc
c000f82b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f832:	e8 d9 bc ff ff       	call   c000b510 <File::exists()>
c000f837:	83 c4 10             	add    esp,0x10
c000f83a:	0f b6 c0             	movzx  eax,al
c000f83d:	85 c0                	test   eax,eax
c000f83f:	74 07                	je     c000f848 <ACPI::open(int, int, void*)+0x3e8>
c000f841:	b0 01                	mov    al,0x1
c000f843:	eb 07                	jmp    c000f84c <ACPI::open(int, int, void*)+0x3ec>
c000f845:	8d 76 00             	lea    esi,[esi+0x0]
c000f848:	b0 00                	mov    al,0x0
c000f84a:	66 90                	xchg   ax,ax
c000f84c:	0f b6 c0             	movzx  eax,al
c000f84f:	85 c0                	test   eax,eax
c000f851:	74 25                	je     c000f878 <ACPI::open(int, int, void*)+0x418>
c000f853:	83 ec 08             	sub    esp,0x8
c000f856:	6a 01                	push   0x1
c000f858:	68 35 13 02 c0       	push   0xc0021335
c000f85d:	e8 10 52 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c000f862:	83 c4 10             	add    esp,0x10
c000f865:	83 ec 08             	sub    esp,0x8
c000f868:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f86f:	50                   	push   eax
c000f870:	e8 2e 54 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c000f875:	83 c4 10             	add    esp,0x10
c000f878:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f880:	74 2a                	je     c000f8ac <ACPI::open(int, int, void*)+0x44c>
c000f882:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f88a:	74 20                	je     c000f8ac <ACPI::open(int, int, void*)+0x44c>
c000f88c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f893:	8b 00                	mov    eax,DWORD PTR [eax]
c000f895:	83 c0 08             	add    eax,0x8
c000f898:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89a:	83 ec 0c             	sub    esp,0xc
c000f89d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f8a4:	ff d0                	call   eax
c000f8a6:	83 c4 10             	add    esp,0x10
c000f8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8ac:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000f8b1:	83 ec 08             	sub    esp,0x8
c000f8b4:	68 52 13 02 c0       	push   0xc0021352
c000f8b9:	50                   	push   eax
c000f8ba:	e8 c1 f1 ff ff       	call   c000ea80 <findDataTable(unsigned char*, char*)>
c000f8bf:	83 c4 10             	add    esp,0x10
c000f8c2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f8c9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f8d1:	74 19                	je     c000f8ec <ACPI::open(int, int, void*)+0x48c>
c000f8d3:	83 ec 08             	sub    esp,0x8
c000f8d6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f8dd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f8e4:	e8 13 fb ff ff       	call   c000f3fc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f8e9:	83 c4 10             	add    esp,0x10
c000f8ec:	b8 00 00 00 00       	mov    eax,0x0
c000f8f1:	81 c4 70 01 00 00    	add    esp,0x170
c000f8f7:	5b                   	pop    ebx
c000f8f8:	5e                   	pop    esi
c000f8f9:	5f                   	pop    edi
c000f8fa:	c3                   	ret    
c000f8fb:	90                   	nop

c000f8fc <CPU::close(int, int, void*)>:
c000f8fc:	31 c0                	xor    eax,eax
c000f8fe:	c3                   	ret    
c000f8ff:	90                   	nop

c000f900 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f900:	60                   	pusha  
c000f901:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f905:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f909:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f90d:	9c                   	pushf  
c000f90e:	fa                   	cli    
c000f90f:	0f 09                	wbinvd 
c000f911:	0f 30                	wrmsr  
c000f913:	9d                   	popf   
c000f914:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f918:	89 02                	mov    DWORD PTR [edx],eax
c000f91a:	61                   	popa   
c000f91b:	c3                   	ret    

c000f91c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f91c:	60                   	pusha  
c000f91d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f921:	9c                   	pushf  
c000f922:	fa                   	cli    
c000f923:	0f 09                	wbinvd 
c000f925:	31 c0                	xor    eax,eax
c000f927:	31 d2                	xor    edx,edx
c000f929:	0f 32                	rdmsr  
c000f92b:	9d                   	popf   
c000f92c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f930:	89 02                	mov    DWORD PTR [edx],eax
c000f932:	61                   	popa   
c000f933:	c3                   	ret    

c000f934 <CPU::AMD_K6_writeback(int, int, int)>:
c000f934:	56                   	push   esi
c000f935:	53                   	push   ebx
c000f936:	83 ec 10             	sub    esp,0x10
c000f939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f93d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f942:	75 5d                	jne    c000f9a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f944:	83 f8 08             	cmp    eax,0x8
c000f947:	75 09                	jne    c000f952 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f949:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f94e:	7e 13                	jle    c000f963 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f950:	eb 30                	jmp    c000f982 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f952:	83 f8 06             	cmp    eax,0x6
c000f955:	7c 4a                	jl     c000f9a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f957:	83 f8 07             	cmp    eax,0x7
c000f95a:	7e 07                	jle    c000f963 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f95c:	83 f8 09             	cmp    eax,0x9
c000f95f:	74 21                	je     c000f982 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f961:	eb 3e                	jmp    c000f9a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f963:	89 e6                	mov    esi,esp
c000f965:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000f96b:	56                   	push   esi
c000f96c:	c1 eb 15             	shr    ebx,0x15
c000f96f:	68 82 00 00 c0       	push   0xc0000082
c000f974:	83 e3 7e             	and    ebx,0x7e
c000f977:	e8 a0 ff ff ff       	call   c000f91c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f97c:	56                   	push   esi
c000f97d:	6a 00                	push   0x0
c000f97f:	53                   	push   ebx
c000f980:	eb 12                	jmp    c000f994 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f982:	89 e3                	mov    ebx,esp
c000f984:	53                   	push   ebx
c000f985:	68 82 00 00 c0       	push   0xc0000082
c000f98a:	e8 8d ff ff ff       	call   c000f91c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f98f:	53                   	push   ebx
c000f990:	6a 00                	push   0x0
c000f992:	6a 00                	push   0x0
c000f994:	68 82 00 00 c0       	push   0xc0000082
c000f999:	e8 62 ff ff ff       	call   c000f900 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f99e:	83 c4 18             	add    esp,0x18
c000f9a1:	83 c4 10             	add    esp,0x10
c000f9a4:	5b                   	pop    ebx
c000f9a5:	5e                   	pop    esi
c000f9a6:	c3                   	ret    
c000f9a7:	90                   	nop

c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f9a8:	55                   	push   ebp
c000f9a9:	57                   	push   edi
c000f9aa:	56                   	push   esi
c000f9ab:	53                   	push   ebx
c000f9ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f9b8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f9bc:	39 05 d8 28 02 c0    	cmp    DWORD PTR ds:0xc00228d8,eax
c000f9c2:	75 23                	jne    c000f9e7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f9c4:	a1 2c 89 02 c0       	mov    eax,ds:0xc002892c
c000f9c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f9cd:	89 06                	mov    DWORD PTR [esi],eax
c000f9cf:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000f9d4:	89 07                	mov    DWORD PTR [edi],eax
c000f9d6:	a1 24 89 02 c0       	mov    eax,ds:0xc0028924
c000f9db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f9de:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c000f9e3:	89 02                	mov    DWORD PTR [edx],eax
c000f9e5:	eb 3f                	jmp    c000fa26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f9e7:	31 c9                	xor    ecx,ecx
c000f9e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9ed:	0f a2                	cpuid  
c000f9ef:	89 06                	mov    DWORD PTR [esi],eax
c000f9f1:	89 1f                	mov    DWORD PTR [edi],ebx
c000f9f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9f7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f9fa:	89 10                	mov    DWORD PTR [eax],edx
c000f9fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa00:	a3 d8 28 02 c0       	mov    ds:0xc00228d8,eax
c000fa05:	8b 06                	mov    eax,DWORD PTR [esi]
c000fa07:	a3 2c 89 02 c0       	mov    ds:0xc002892c,eax
c000fa0c:	8b 07                	mov    eax,DWORD PTR [edi]
c000fa0e:	a3 28 89 02 c0       	mov    ds:0xc0028928,eax
c000fa13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fa16:	a3 24 89 02 c0       	mov    ds:0xc0028924,eax
c000fa1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa1f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa21:	a3 20 89 02 c0       	mov    ds:0xc0028920,eax
c000fa26:	5b                   	pop    ebx
c000fa27:	5e                   	pop    esi
c000fa28:	5f                   	pop    edi
c000fa29:	5d                   	pop    ebp
c000fa2a:	c3                   	ret    
c000fa2b:	90                   	nop

c000fa2c <CPU::cpuidCheckEDX(unsigned int)>:
c000fa2c:	83 ec 10             	sub    esp,0x10
c000fa2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa33:	50                   	push   eax
c000fa34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa38:	50                   	push   eax
c000fa39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa3d:	50                   	push   eax
c000fa3e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa42:	50                   	push   eax
c000fa43:	6a 01                	push   0x1
c000fa45:	e8 5e ff ff ff       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa4e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000fa52:	0f 95 c0             	setne  al
c000fa55:	83 c4 24             	add    esp,0x24
c000fa58:	c3                   	ret    
c000fa59:	90                   	nop

c000fa5a <CPU::cpuidCheckECX(unsigned int)>:
c000fa5a:	83 ec 10             	sub    esp,0x10
c000fa5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa61:	50                   	push   eax
c000fa62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa66:	50                   	push   eax
c000fa67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa6b:	50                   	push   eax
c000fa6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa70:	50                   	push   eax
c000fa71:	6a 01                	push   0x1
c000fa73:	e8 30 ff ff ff       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa7c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fa80:	0f 95 c0             	setne  al
c000fa83:	83 c4 24             	add    esp,0x24
c000fa86:	c3                   	ret    
c000fa87:	90                   	nop

c000fa88 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000fa88:	83 ec 10             	sub    esp,0x10
c000fa8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa8f:	50                   	push   eax
c000fa90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa94:	50                   	push   eax
c000fa95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa99:	50                   	push   eax
c000fa9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa9e:	50                   	push   eax
c000fa9f:	6a 07                	push   0x7
c000faa1:	e8 02 ff ff ff       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000faa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000faaa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000faae:	0f 95 c0             	setne  al
c000fab1:	83 c4 24             	add    esp,0x24
c000fab4:	c3                   	ret    
c000fab5:	90                   	nop

c000fab6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000fab6:	83 ec 10             	sub    esp,0x10
c000fab9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fabd:	50                   	push   eax
c000fabe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fac2:	50                   	push   eax
c000fac3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fac7:	50                   	push   eax
c000fac8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000facc:	50                   	push   eax
c000facd:	6a 07                	push   0x7
c000facf:	e8 d4 fe ff ff       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fad4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fad8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fadc:	0f 95 c0             	setne  al
c000fadf:	83 c4 24             	add    esp,0x24
c000fae2:	c3                   	ret    
c000fae3:	90                   	nop

c000fae4 <CPU::CPU()>:
c000fae4:	83 ec 0c             	sub    esp,0xc
c000fae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faeb:	83 ec 08             	sub    esp,0x8
c000faee:	68 75 14 02 c0       	push   0xc0021475
c000faf3:	50                   	push   eax
c000faf4:	e8 39 c7 ff ff       	call   c000c232 <Device::Device(char const*)>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	ba 08 15 02 c0       	mov    edx,0xc0021508
c000fb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb05:	89 10                	mov    DWORD PTR [eax],edx
c000fb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb0b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb19:	05 78 01 00 00       	add    eax,0x178
c000fb1e:	83 ec 0c             	sub    esp,0xc
c000fb21:	50                   	push   eax
c000fb22:	e8 2d 78 ff ff       	call   c0007354 <GDT::GDT()>
c000fb27:	83 c4 10             	add    esp,0x10
c000fb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb2e:	05 7c 09 00 00       	add    eax,0x97c
c000fb33:	83 ec 0c             	sub    esp,0xc
c000fb36:	50                   	push   eax
c000fb37:	e8 68 7a ff ff       	call   c00075a4 <IDT::IDT()>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb43:	05 7c 11 00 00       	add    eax,0x117c
c000fb48:	83 ec 0c             	sub    esp,0xc
c000fb4b:	50                   	push   eax
c000fb4c:	e8 e7 93 ff ff       	call   c0008f38 <TSS::TSS()>
c000fb51:	83 c4 10             	add    esp,0x10
c000fb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb58:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000fb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb63:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000fb6d:	90                   	nop
c000fb6e:	83 c4 0c             	add    esp,0xc
c000fb71:	c3                   	ret    

c000fb72 <CPU::displayFeatures()>:
c000fb72:	c3                   	ret    
c000fb73:	90                   	nop

c000fb74 <CPU::detectFeatures()>:
c000fb74:	55                   	push   ebp
c000fb75:	57                   	push   edi
c000fb76:	56                   	push   esi
c000fb77:	53                   	push   ebx
c000fb78:	83 ec 30             	sub    esp,0x30
c000fb7b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb7f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000fb89:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000fb90:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000fb96:	6a 0d                	push   0xd
c000fb98:	6a 00                	push   0x0
c000fb9a:	55                   	push   ebp
c000fb9b:	e8 50 09 ff ff       	call   c00004f0 <memset>
c000fba0:	83 c4 10             	add    esp,0x10
c000fba3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fba8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000fbaf:	0f 84 db 05 00 00    	je     c0010190 <CPU::detectFeatures()+0x61c>
c000fbb5:	83 ec 0c             	sub    esp,0xc
c000fbb8:	89 ef                	mov    edi,ebp
c000fbba:	6a 10                	push   0x10
c000fbbc:	e8 6b fe ff ff       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c000fbc1:	83 e0 01             	and    eax,0x1
c000fbc4:	8d 14 00             	lea    edx,[eax+eax*1]
c000fbc7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbcd:	83 e0 fd             	and    eax,0xfffffffd
c000fbd0:	09 d0                	or     eax,edx
c000fbd2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbd8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000fbdf:	e8 48 fe ff ff       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c000fbe4:	83 e0 01             	and    eax,0x1
c000fbe7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fbee:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbf4:	83 e0 fb             	and    eax,0xfffffffb
c000fbf7:	09 d0                	or     eax,edx
c000fbf9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbff:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fc06:	e8 21 fe ff ff       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c000fc0b:	83 e0 01             	and    eax,0x1
c000fc0e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc15:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc1b:	83 e0 f7             	and    eax,0xfffffff7
c000fc1e:	09 d0                	or     eax,edx
c000fc20:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc26:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000fc2d:	e8 fa fd ff ff       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c000fc32:	83 e0 01             	and    eax,0x1
c000fc35:	c1 e0 04             	shl    eax,0x4
c000fc38:	89 c2                	mov    edx,eax
c000fc3a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc40:	83 e0 ef             	and    eax,0xffffffef
c000fc43:	09 d0                	or     eax,edx
c000fc45:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc4b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000fc52:	e8 d5 fd ff ff       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c000fc57:	83 e0 01             	and    eax,0x1
c000fc5a:	c1 e0 05             	shl    eax,0x5
c000fc5d:	89 c2                	mov    edx,eax
c000fc5f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc65:	83 e0 df             	and    eax,0xffffffdf
c000fc68:	09 d0                	or     eax,edx
c000fc6a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc70:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fc77:	e8 b0 fd ff ff       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c000fc7c:	83 e0 01             	and    eax,0x1
c000fc7f:	8d 14 00             	lea    edx,[eax+eax*1]
c000fc82:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc88:	83 e0 fd             	and    eax,0xfffffffd
c000fc8b:	09 d0                	or     eax,edx
c000fc8d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc93:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fc9a:	e8 8d fd ff ff       	call   c000fa2c <CPU::cpuidCheckEDX(unsigned int)>
c000fc9f:	83 e0 01             	and    eax,0x1
c000fca2:	c1 e0 06             	shl    eax,0x6
c000fca5:	89 c2                	mov    edx,eax
c000fca7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcad:	83 e0 bf             	and    eax,0xffffffbf
c000fcb0:	09 d0                	or     eax,edx
c000fcb2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcb8:	58                   	pop    eax
c000fcb9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcbd:	50                   	push   eax
c000fcbe:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcc2:	50                   	push   eax
c000fcc3:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcc7:	56                   	push   esi
c000fcc8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fccc:	50                   	push   eax
c000fccd:	6a 00                	push   0x0
c000fccf:	e8 d4 fc ff ff       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcd4:	b8 04 00 00 00       	mov    eax,0x4
c000fcd9:	89 c1                	mov    ecx,eax
c000fcdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcdd:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fce3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fce7:	89 c1                	mov    ecx,eax
c000fce9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fceb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fcf1:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fcf5:	89 c1                	mov    ecx,eax
c000fcf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcf9:	83 c4 18             	add    esp,0x18
c000fcfc:	68 84 13 02 c0       	push   0xc0021384
c000fd01:	55                   	push   ebp
c000fd02:	e8 49 0a ff ff       	call   c0000750 <strcmp>
c000fd07:	83 c4 10             	add    esp,0x10
c000fd0a:	85 c0                	test   eax,eax
c000fd0c:	75 0f                	jne    c000fd1d <CPU::detectFeatures()+0x1a9>
c000fd0e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fd18:	e9 22 02 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fd1d:	50                   	push   eax
c000fd1e:	50                   	push   eax
c000fd1f:	68 91 13 02 c0       	push   0xc0021391
c000fd24:	55                   	push   ebp
c000fd25:	e8 26 0a ff ff       	call   c0000750 <strcmp>
c000fd2a:	83 c4 10             	add    esp,0x10
c000fd2d:	85 c0                	test   eax,eax
c000fd2f:	74 dd                	je     c000fd0e <CPU::detectFeatures()+0x19a>
c000fd31:	50                   	push   eax
c000fd32:	50                   	push   eax
c000fd33:	68 9e 13 02 c0       	push   0xc002139e
c000fd38:	55                   	push   ebp
c000fd39:	e8 12 0a ff ff       	call   c0000750 <strcmp>
c000fd3e:	83 c4 10             	add    esp,0x10
c000fd41:	85 c0                	test   eax,eax
c000fd43:	74 2a                	je     c000fd6f <CPU::detectFeatures()+0x1fb>
c000fd45:	50                   	push   eax
c000fd46:	50                   	push   eax
c000fd47:	68 ab 13 02 c0       	push   0xc00213ab
c000fd4c:	55                   	push   ebp
c000fd4d:	e8 fe 09 ff ff       	call   c0000750 <strcmp>
c000fd52:	83 c4 10             	add    esp,0x10
c000fd55:	85 c0                	test   eax,eax
c000fd57:	74 16                	je     c000fd6f <CPU::detectFeatures()+0x1fb>
c000fd59:	50                   	push   eax
c000fd5a:	50                   	push   eax
c000fd5b:	68 b8 13 02 c0       	push   0xc00213b8
c000fd60:	55                   	push   ebp
c000fd61:	e8 ea 09 ff ff       	call   c0000750 <strcmp>
c000fd66:	83 c4 10             	add    esp,0x10
c000fd69:	85 c0                	test   eax,eax
c000fd6b:	74 48                	je     c000fdb5 <CPU::detectFeatures()+0x241>
c000fd6d:	eb 0f                	jmp    c000fd7e <CPU::detectFeatures()+0x20a>
c000fd6f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fd79:	e9 c1 01 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fd7e:	50                   	push   eax
c000fd7f:	50                   	push   eax
c000fd80:	68 c5 13 02 c0       	push   0xc00213c5
c000fd85:	55                   	push   ebp
c000fd86:	e8 c5 09 ff ff       	call   c0000750 <strcmp>
c000fd8b:	83 c4 10             	add    esp,0x10
c000fd8e:	85 c0                	test   eax,eax
c000fd90:	74 23                	je     c000fdb5 <CPU::detectFeatures()+0x241>
c000fd92:	57                   	push   edi
c000fd93:	57                   	push   edi
c000fd94:	68 d2 13 02 c0       	push   0xc00213d2
c000fd99:	55                   	push   ebp
c000fd9a:	e8 b1 09 ff ff       	call   c0000750 <strcmp>
c000fd9f:	83 c4 10             	add    esp,0x10
c000fda2:	85 c0                	test   eax,eax
c000fda4:	75 1e                	jne    c000fdc4 <CPU::detectFeatures()+0x250>
c000fda6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fdb0:	e9 8a 01 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fdb5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fdbf:	e9 7b 01 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fdc4:	56                   	push   esi
c000fdc5:	56                   	push   esi
c000fdc6:	68 df 13 02 c0       	push   0xc00213df
c000fdcb:	55                   	push   ebp
c000fdcc:	e8 7f 09 ff ff       	call   c0000750 <strcmp>
c000fdd1:	83 c4 10             	add    esp,0x10
c000fdd4:	85 c0                	test   eax,eax
c000fdd6:	75 0f                	jne    c000fde7 <CPU::detectFeatures()+0x273>
c000fdd8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fde2:	e9 58 01 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fde7:	51                   	push   ecx
c000fde8:	51                   	push   ecx
c000fde9:	68 9e 13 02 c0       	push   0xc002139e
c000fdee:	55                   	push   ebp
c000fdef:	e8 5c 09 ff ff       	call   c0000750 <strcmp>
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	85 c0                	test   eax,eax
c000fdf9:	75 0f                	jne    c000fe0a <CPU::detectFeatures()+0x296>
c000fdfb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fe05:	e9 35 01 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fe0a:	52                   	push   edx
c000fe0b:	52                   	push   edx
c000fe0c:	68 ec 13 02 c0       	push   0xc00213ec
c000fe11:	55                   	push   ebp
c000fe12:	e8 39 09 ff ff       	call   c0000750 <strcmp>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	85 c0                	test   eax,eax
c000fe1c:	75 0f                	jne    c000fe2d <CPU::detectFeatures()+0x2b9>
c000fe1e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fe28:	e9 12 01 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fe2d:	50                   	push   eax
c000fe2e:	50                   	push   eax
c000fe2f:	68 f9 13 02 c0       	push   0xc00213f9
c000fe34:	55                   	push   ebp
c000fe35:	e8 16 09 ff ff       	call   c0000750 <strcmp>
c000fe3a:	83 c4 10             	add    esp,0x10
c000fe3d:	85 c0                	test   eax,eax
c000fe3f:	75 0f                	jne    c000fe50 <CPU::detectFeatures()+0x2dc>
c000fe41:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fe4b:	e9 ef 00 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fe50:	50                   	push   eax
c000fe51:	50                   	push   eax
c000fe52:	68 06 14 02 c0       	push   0xc0021406
c000fe57:	55                   	push   ebp
c000fe58:	e8 f3 08 ff ff       	call   c0000750 <strcmp>
c000fe5d:	83 c4 10             	add    esp,0x10
c000fe60:	85 c0                	test   eax,eax
c000fe62:	75 0f                	jne    c000fe73 <CPU::detectFeatures()+0x2ff>
c000fe64:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fe6e:	e9 cc 00 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fe73:	50                   	push   eax
c000fe74:	50                   	push   eax
c000fe75:	68 13 14 02 c0       	push   0xc0021413
c000fe7a:	55                   	push   ebp
c000fe7b:	e8 d0 08 ff ff       	call   c0000750 <strcmp>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	85 c0                	test   eax,eax
c000fe85:	75 0f                	jne    c000fe96 <CPU::detectFeatures()+0x322>
c000fe87:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fe91:	e9 a9 00 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fe96:	50                   	push   eax
c000fe97:	50                   	push   eax
c000fe98:	68 20 14 02 c0       	push   0xc0021420
c000fe9d:	55                   	push   ebp
c000fe9e:	e8 ad 08 ff ff       	call   c0000750 <strcmp>
c000fea3:	83 c4 10             	add    esp,0x10
c000fea6:	85 c0                	test   eax,eax
c000fea8:	75 0f                	jne    c000feb9 <CPU::detectFeatures()+0x345>
c000feaa:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000feb4:	e9 86 00 00 00       	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000feb9:	50                   	push   eax
c000feba:	50                   	push   eax
c000febb:	68 2d 14 02 c0       	push   0xc002142d
c000fec0:	55                   	push   ebp
c000fec1:	e8 8a 08 ff ff       	call   c0000750 <strcmp>
c000fec6:	83 c4 10             	add    esp,0x10
c000fec9:	85 c0                	test   eax,eax
c000fecb:	75 0c                	jne    c000fed9 <CPU::detectFeatures()+0x365>
c000fecd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fed7:	eb 66                	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fed9:	50                   	push   eax
c000feda:	50                   	push   eax
c000fedb:	68 3a 14 02 c0       	push   0xc002143a
c000fee0:	55                   	push   ebp
c000fee1:	e8 6a 08 ff ff       	call   c0000750 <strcmp>
c000fee6:	83 c4 10             	add    esp,0x10
c000fee9:	85 c0                	test   eax,eax
c000feeb:	75 0c                	jne    c000fef9 <CPU::detectFeatures()+0x385>
c000feed:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fef7:	eb 46                	jmp    c000ff3f <CPU::detectFeatures()+0x3cb>
c000fef9:	57                   	push   edi
c000fefa:	57                   	push   edi
c000fefb:	68 47 14 02 c0       	push   0xc0021447
c000ff00:	55                   	push   ebp
c000ff01:	e8 4a 08 ff ff       	call   c0000750 <strcmp>
c000ff06:	83 c4 10             	add    esp,0x10
c000ff09:	85 c0                	test   eax,eax
c000ff0b:	74 e0                	je     c000feed <CPU::detectFeatures()+0x379>
c000ff0d:	56                   	push   esi
c000ff0e:	56                   	push   esi
c000ff0f:	68 54 14 02 c0       	push   0xc0021454
c000ff14:	55                   	push   ebp
c000ff15:	e8 36 08 ff ff       	call   c0000750 <strcmp>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	85 c0                	test   eax,eax
c000ff1f:	74 cc                	je     c000feed <CPU::detectFeatures()+0x379>
c000ff21:	51                   	push   ecx
c000ff22:	51                   	push   ecx
c000ff23:	68 61 14 02 c0       	push   0xc0021461
c000ff28:	55                   	push   ebp
c000ff29:	e8 22 08 ff ff       	call   c0000750 <strcmp>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	85 c0                	test   eax,eax
c000ff33:	74 b8                	je     c000feed <CPU::detectFeatures()+0x379>
c000ff35:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000ff3f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000ff44:	0f 86 be 00 00 00    	jbe    c0010008 <CPU::detectFeatures()+0x494>
c000ff4a:	83 ec 0c             	sub    esp,0xc
c000ff4d:	68 80 00 00 00       	push   0x80
c000ff52:	e8 31 fb ff ff       	call   c000fa88 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff57:	83 e0 01             	and    eax,0x1
c000ff5a:	c1 e0 06             	shl    eax,0x6
c000ff5d:	89 c2                	mov    edx,eax
c000ff5f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff65:	83 e0 bf             	and    eax,0xffffffbf
c000ff68:	09 d0                	or     eax,edx
c000ff6a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff70:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000ff77:	e8 0c fb ff ff       	call   c000fa88 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff7c:	83 e0 01             	and    eax,0x1
c000ff7f:	c1 e0 04             	shl    eax,0x4
c000ff82:	89 c2                	mov    edx,eax
c000ff84:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff8a:	83 e0 ef             	and    eax,0xffffffef
c000ff8d:	09 d0                	or     eax,edx
c000ff8f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff95:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000ff9c:	e8 e7 fa ff ff       	call   c000fa88 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ffa1:	89 c2                	mov    edx,eax
c000ffa3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ffa9:	c1 e2 07             	shl    edx,0x7
c000ffac:	83 e0 7f             	and    eax,0x7f
c000ffaf:	09 d0                	or     eax,edx
c000ffb1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ffb7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ffbe:	e8 f3 fa ff ff       	call   c000fab6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ffc3:	83 e0 01             	and    eax,0x1
c000ffc6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ffcd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ffd3:	83 e0 f7             	and    eax,0xfffffff7
c000ffd6:	09 d0                	or     eax,edx
c000ffd8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ffde:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ffe5:	e8 cc fa ff ff       	call   c000fab6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ffea:	83 c4 10             	add    esp,0x10
c000ffed:	83 e0 01             	and    eax,0x1
c000fff0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fff7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fffd:	83 e0 fb             	and    eax,0xfffffffb
c0010000:	09 d0                	or     eax,edx
c0010002:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010008:	83 ec 0c             	sub    esp,0xc
c001000b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001000f:	50                   	push   eax
c0010010:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010014:	50                   	push   eax
c0010015:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010019:	57                   	push   edi
c001001a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001001e:	56                   	push   esi
c001001f:	6a 01                	push   0x1
c0010021:	e8 82 f9 ff ff       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010026:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001002a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010030:	89 c1                	mov    ecx,eax
c0010032:	83 e2 f0             	and    edx,0xfffffff0
c0010035:	83 e1 0f             	and    ecx,0xf
c0010038:	09 ca                	or     edx,ecx
c001003a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010040:	89 c2                	mov    edx,eax
c0010042:	c1 ea 04             	shr    edx,0x4
c0010045:	83 e2 0f             	and    edx,0xf
c0010048:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001004c:	89 d1                	mov    ecx,edx
c001004e:	83 c4 20             	add    esp,0x20
c0010051:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010057:	c1 e1 06             	shl    ecx,0x6
c001005a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010060:	09 ca                	or     edx,ecx
c0010062:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010069:	89 c2                	mov    edx,eax
c001006b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010071:	c1 ea 08             	shr    edx,0x8
c0010074:	83 e1 3f             	and    ecx,0x3f
c0010077:	83 e2 0f             	and    edx,0xf
c001007a:	89 d5                	mov    ebp,edx
c001007c:	83 e5 03             	and    ebp,0x3
c001007f:	c1 e5 06             	shl    ebp,0x6
c0010082:	09 e9                	or     ecx,ebp
c0010084:	89 d5                	mov    ebp,edx
c0010086:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001008c:	c1 ed 02             	shr    ebp,0x2
c001008f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010095:	83 e1 c0             	and    ecx,0xffffffc0
c0010098:	09 e9                	or     ecx,ebp
c001009a:	89 c5                	mov    ebp,eax
c001009c:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00100a2:	c1 ed 08             	shr    ebp,0x8
c00100a5:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00100ab:	83 e5 30             	and    ebp,0x30
c00100ae:	83 e1 cf             	and    ecx,0xffffffcf
c00100b1:	09 e9                	or     ecx,ebp
c00100b3:	83 fa 06             	cmp    edx,0x6
c00100b6:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00100bc:	74 05                	je     c00100c3 <CPU::detectFeatures()+0x54f>
c00100be:	83 fa 0f             	cmp    edx,0xf
c00100c1:	75 64                	jne    c0010127 <CPU::detectFeatures()+0x5b3>
c00100c3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00100c9:	89 c1                	mov    ecx,eax
c00100cb:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00100d1:	c1 e9 10             	shr    ecx,0x10
c00100d4:	c1 e1 04             	shl    ecx,0x4
c00100d7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00100db:	0f b6 c9             	movzx  ecx,cl
c00100de:	c1 e1 06             	shl    ecx,0x6
c00100e1:	09 e9                	or     ecx,ebp
c00100e3:	83 fa 0f             	cmp    edx,0xf
c00100e6:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00100ed:	75 38                	jne    c0010127 <CPU::detectFeatures()+0x5b3>
c00100ef:	c1 e8 14             	shr    eax,0x14
c00100f2:	83 c0 0f             	add    eax,0xf
c00100f5:	0f b6 c0             	movzx  eax,al
c00100f8:	89 c2                	mov    edx,eax
c00100fa:	c1 e8 02             	shr    eax,0x2
c00100fd:	83 e2 03             	and    edx,0x3
c0010100:	89 d1                	mov    ecx,edx
c0010102:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010108:	c1 e1 06             	shl    ecx,0x6
c001010b:	83 e2 3f             	and    edx,0x3f
c001010e:	09 ca                	or     edx,ecx
c0010110:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010116:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001011c:	83 e2 c0             	and    edx,0xffffffc0
c001011f:	09 d0                	or     eax,edx
c0010121:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010127:	83 ec 0c             	sub    esp,0xc
c001012a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010130:	83 c8 07             	or     eax,0x7
c0010133:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010139:	8d 44 24 28          	lea    eax,[esp+0x28]
c001013d:	50                   	push   eax
c001013e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010142:	55                   	push   ebp
c0010143:	57                   	push   edi
c0010144:	56                   	push   esi
c0010145:	68 00 00 00 80       	push   0x80000000
c001014a:	e8 59 f8 ff ff       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001014f:	83 c4 20             	add    esp,0x20
c0010152:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001015a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001015e:	76 1e                	jbe    c001017e <CPU::detectFeatures()+0x60a>
c0010160:	83 ec 0c             	sub    esp,0xc
c0010163:	50                   	push   eax
c0010164:	55                   	push   ebp
c0010165:	57                   	push   edi
c0010166:	56                   	push   esi
c0010167:	68 01 00 00 80       	push   0x80000001
c001016c:	e8 37 f8 ff ff       	call   c000f9a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010171:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001017b:	83 c4 20             	add    esp,0x20
c001017e:	52                   	push   edx
c001017f:	52                   	push   edx
c0010180:	68 6d 14 02 c0       	push   0xc002146d
c0010185:	53                   	push   ebx
c0010186:	e8 99 c0 ff ff       	call   c000c224 <Device::setName(char const*)>
c001018b:	83 c4 10             	add    esp,0x10
c001018e:	eb 69                	jmp    c00101f9 <CPU::detectFeatures()+0x685>
c0010190:	50                   	push   eax
c0010191:	50                   	push   eax
c0010192:	68 d2 13 02 c0       	push   0xc00213d2
c0010197:	55                   	push   ebp
c0010198:	e8 a3 04 ff ff       	call   c0000640 <strcpy>
c001019d:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00101a7:	e8 17 00 ff ff       	call   c00001c3 <is486>
c00101ac:	83 c4 10             	add    esp,0x10
c00101af:	85 c0                	test   eax,eax
c00101b1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00101b7:	74 1f                	je     c00101d8 <CPU::detectFeatures()+0x664>
c00101b9:	83 c8 07             	or     eax,0x7
c00101bc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00101c2:	0f 20 c0             	mov    eax,cr0
c00101c5:	83 e0 14             	and    eax,0x14
c00101c8:	83 f8 04             	cmp    eax,0x4
c00101cb:	75 10                	jne    c00101dd <CPU::detectFeatures()+0x669>
c00101cd:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101d3:	83 e0 fd             	and    eax,0xfffffffd
c00101d6:	eb 1b                	jmp    c00101f3 <CPU::detectFeatures()+0x67f>
c00101d8:	83 e0 f8             	and    eax,0xfffffff8
c00101db:	eb df                	jmp    c00101bc <CPU::detectFeatures()+0x648>
c00101dd:	e8 bc ff fe ff       	call   c000019e <hasLegacyFPU>
c00101e2:	83 e0 01             	and    eax,0x1
c00101e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00101e8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101ee:	83 e0 fd             	and    eax,0xfffffffd
c00101f1:	09 d0                	or     eax,edx
c00101f3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101f9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010200:	74 17                	je     c0010219 <CPU::detectFeatures()+0x6a5>
c0010202:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010208:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001020e:	83 c8 10             	or     eax,0x10
c0010211:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010217:	eb 20                	jmp    c0010239 <CPU::detectFeatures()+0x6c5>
c0010219:	e8 80 ff fe ff       	call   c000019e <hasLegacyFPU>
c001021e:	83 e0 01             	and    eax,0x1
c0010221:	8d 14 00             	lea    edx,[eax+eax*1]
c0010224:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001022a:	83 e0 fd             	and    eax,0xfffffffd
c001022d:	09 d0                	or     eax,edx
c001022f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010235:	a8 02                	test   al,0x2
c0010237:	75 c9                	jne    c0010202 <CPU::detectFeatures()+0x68e>
c0010239:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010240:	83 c4 2c             	add    esp,0x2c
c0010243:	5b                   	pop    ebx
c0010244:	5e                   	pop    esi
c0010245:	5f                   	pop    edi
c0010246:	5d                   	pop    ebp
c0010247:	c3                   	ret    

c0010248 <CPU::setupSMEP()>:
c0010248:	0f 20 e0             	mov    eax,cr4
c001024b:	0d 00 00 10 00       	or     eax,0x100000
c0010250:	0f 22 e0             	mov    cr4,eax
c0010253:	c3                   	ret    

c0010254 <CPU::setupUMIP()>:
c0010254:	0f 20 e0             	mov    eax,cr4
c0010257:	80 cc 08             	or     ah,0x8
c001025a:	0f 22 e0             	mov    cr4,eax
c001025d:	c3                   	ret    

c001025e <CPU::setupTSC()>:
c001025e:	0f 20 e0             	mov    eax,cr4
c0010261:	83 c8 04             	or     eax,0x4
c0010264:	0f 22 e0             	mov    cr4,eax
c0010267:	c3                   	ret    

c0010268 <CPU::setupLargePages()>:
c0010268:	0f 20 e0             	mov    eax,cr4
c001026b:	83 c8 10             	or     eax,0x10
c001026e:	0f 22 e0             	mov    cr4,eax
c0010271:	c3                   	ret    

c0010272 <CPU::setupPAT()>:
c0010272:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010277:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001027e:	74 2c                	je     c00102ac <CPU::setupPAT()+0x3a>
c0010280:	53                   	push   ebx
c0010281:	83 ec 10             	sub    esp,0x10
c0010284:	68 77 02 00 00       	push   0x277
c0010289:	50                   	push   eax
c001028a:	e8 29 6e ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001028f:	83 e2 f8             	and    edx,0xfffffff8
c0010292:	83 ca 01             	or     edx,0x1
c0010295:	52                   	push   edx
c0010296:	50                   	push   eax
c0010297:	68 77 02 00 00       	push   0x277
c001029c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00102a2:	e8 3d 6e ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c00102a7:	83 c4 28             	add    esp,0x28
c00102aa:	5b                   	pop    ebx
c00102ab:	c3                   	ret    
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <CPU::setupMTRR()>:
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <CPU::setupGlobalPages()>:
c00102b0:	0f 20 e0             	mov    eax,cr4
c00102b3:	0c 80                	or     al,0x80
c00102b5:	0f 22 e0             	mov    cr4,eax
c00102b8:	c3                   	ret    
c00102b9:	90                   	nop

c00102ba <CPU::allowUsermodeDataAccess()>:
c00102ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102be:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00102c5:	74 03                	je     c00102ca <CPU::allowUsermodeDataAccess()+0x10>
c00102c7:	0f 01 cb             	stac   
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <CPU::prohibitUsermodeDataAccess()>:
c00102cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00102d7:	74 03                	je     c00102dc <CPU::prohibitUsermodeDataAccess()+0x10>
c00102d9:	0f 01 ca             	clac   
c00102dc:	c3                   	ret    
c00102dd:	90                   	nop

c00102de <CPU::setupSMAP()>:
c00102de:	0f 20 e0             	mov    eax,cr4
c00102e1:	0d 00 00 20 00       	or     eax,0x200000
c00102e6:	0f 22 e0             	mov    cr4,eax
c00102e9:	eb e1                	jmp    c00102cc <CPU::prohibitUsermodeDataAccess()>
c00102eb:	90                   	nop

c00102ec <CPU::setupFeatures()>:
c00102ec:	53                   	push   ebx
c00102ed:	83 ec 08             	sub    esp,0x8
c00102f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102f4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00102fb:	74 18                	je     c0010315 <CPU::setupFeatures()+0x29>
c00102fd:	83 ec 0c             	sub    esp,0xc
c0010300:	68 79 14 02 c0       	push   0xc0021479
c0010305:	e8 2f a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001030a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001030d:	e8 42 ff ff ff       	call   c0010254 <CPU::setupUMIP()>
c0010312:	83 c4 10             	add    esp,0x10
c0010315:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001031c:	74 18                	je     c0010336 <CPU::setupFeatures()+0x4a>
c001031e:	83 ec 0c             	sub    esp,0xc
c0010321:	68 83 14 02 c0       	push   0xc0021483
c0010326:	e8 0e a6 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001032b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001032e:	e8 2b ff ff ff       	call   c001025e <CPU::setupTSC()>
c0010333:	83 c4 10             	add    esp,0x10
c0010336:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001033d:	74 18                	je     c0010357 <CPU::setupFeatures()+0x6b>
c001033f:	83 ec 0c             	sub    esp,0xc
c0010342:	68 8c 14 02 c0       	push   0xc002148c
c0010347:	e8 ed a5 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001034c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001034f:	e8 14 ff ff ff       	call   c0010268 <CPU::setupLargePages()>
c0010354:	83 c4 10             	add    esp,0x10
c0010357:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001035e:	74 18                	je     c0010378 <CPU::setupFeatures()+0x8c>
c0010360:	83 ec 0c             	sub    esp,0xc
c0010363:	68 95 14 02 c0       	push   0xc0021495
c0010368:	e8 cc a5 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001036d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010370:	e8 3b ff ff ff       	call   c00102b0 <CPU::setupGlobalPages()>
c0010375:	83 c4 10             	add    esp,0x10
c0010378:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001037f:	74 18                	je     c0010399 <CPU::setupFeatures()+0xad>
c0010381:	83 ec 0c             	sub    esp,0xc
c0010384:	68 a7 14 02 c0       	push   0xc00214a7
c0010389:	e8 ab a5 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001038e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010391:	e8 dc fe ff ff       	call   c0010272 <CPU::setupPAT()>
c0010396:	83 c4 10             	add    esp,0x10
c0010399:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00103a0:	74 11                	je     c00103b3 <CPU::setupFeatures()+0xc7>
c00103a2:	c7 44 24 10 b0 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc00214b0
c00103aa:	83 c4 08             	add    esp,0x8
c00103ad:	5b                   	pop    ebx
c00103ae:	e9 86 a5 ff ff       	jmp    c000a939 <Dbg::kprintf(char const*, ...)>
c00103b3:	83 c4 08             	add    esp,0x8
c00103b6:	5b                   	pop    ebx
c00103b7:	c3                   	ret    

c00103b8 <CPU::open(int, int, void*)>:
c00103b8:	55                   	push   ebp
c00103b9:	57                   	push   edi
c00103ba:	56                   	push   esi
c00103bb:	53                   	push   ebx
c00103bc:	83 ec 18             	sub    esp,0x18
c00103bf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00103c3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00103c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103cb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00103d1:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00103d7:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00103dd:	50                   	push   eax
c00103de:	e8 d3 6f ff ff       	call   c00073b6 <GDT::setup()>
c00103e3:	83 c4 0c             	add    esp,0xc
c00103e6:	6a 00                	push   0x0
c00103e8:	68 ef be ad de       	push   0xdeadbeef
c00103ed:	55                   	push   ebp
c00103ee:	e8 89 8b ff ff       	call   c0008f7c <TSS::setup(unsigned long, unsigned long)>
c00103f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00103f6:	e8 61 8b ff ff       	call   c0008f5c <TSS::flush()>
c00103fb:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010401:	89 04 24             	mov    DWORD PTR [esp],eax
c0010404:	e8 11 72 ff ff       	call   c000761a <IDT::setup()>
c0010409:	b8 00 04 00 00       	mov    eax,0x400
c001040e:	0f 23 f8             	mov    db7,eax
c0010411:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001041b:	e8 92 79 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0010420:	83 c4 10             	add    esp,0x10
c0010423:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010429:	85 f6                	test   esi,esi
c001042b:	89 38                	mov    DWORD PTR [eax],edi
c001042d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010433:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010436:	74 10                	je     c0010448 <CPU::open(int, int, void*)+0x90>
c0010438:	50                   	push   eax
c0010439:	50                   	push   eax
c001043a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010440:	56                   	push   esi
c0010441:	e8 5c 94 ff ff       	call   c00098a2 <VAS::setCPUSpecific(unsigned long)>
c0010446:	eb 0d                	jmp    c0010455 <CPU::open(int, int, void*)+0x9d>
c0010448:	83 ec 0c             	sub    esp,0xc
c001044b:	68 ba 14 02 c0       	push   0xc00214ba
c0010450:	e8 bc 07 00 00       	call   c0010c11 <KePanic(char const*)>
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	83 ec 0c             	sub    esp,0xc
c001045b:	68 c8 14 02 c0       	push   0xc00214c8
c0010460:	e8 d8 00 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0010465:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010468:	e8 07 f7 ff ff       	call   c000fb74 <CPU::detectFeatures()>
c001046d:	c7 04 24 eb 14 02 c0 	mov    DWORD PTR [esp],0xc00214eb
c0010474:	e8 c4 00 00 00       	call   c001053d <KeSetBootMessage(char const*)>
c0010479:	e8 27 71 00 00       	call   c00175a5 <HalInitialise()>
c001047e:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010483:	83 e0 10             	and    eax,0x10
c0010486:	83 f8 01             	cmp    eax,0x1
c0010489:	19 c0                	sbb    eax,eax
c001048b:	83 e0 46             	and    eax,0x46
c001048e:	83 c0 1e             	add    eax,0x1e
c0010491:	89 04 24             	mov    DWORD PTR [esp],eax
c0010494:	e8 28 d6 ff ff       	call   c000dac1 <setupTimer(int)>
c0010499:	83 c4 10             	add    esp,0x10
c001049c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00104a2:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c00104a9:	74 0c                	je     c00104b7 <CPU::open(int, int, void*)+0xff>
c00104ab:	83 ec 0c             	sub    esp,0xc
c00104ae:	53                   	push   ebx
c00104af:	e8 38 fe ff ff       	call   c00102ec <CPU::setupFeatures()>
c00104b4:	83 c4 10             	add    esp,0x10
c00104b7:	83 c4 0c             	add    esp,0xc
c00104ba:	31 c0                	xor    eax,eax
c00104bc:	5b                   	pop    ebx
c00104bd:	5e                   	pop    esi
c00104be:	5f                   	pop    edi
c00104bf:	5d                   	pop    ebp
c00104c0:	c3                   	ret    

c00104c1 <KeDisplaySplashScreen()>:
c00104c1:	55                   	push   ebp
c00104c2:	bd 05 00 00 00       	mov    ebp,0x5
c00104c7:	57                   	push   edi
c00104c8:	bf 0a 00 00 00       	mov    edi,0xa
c00104cd:	56                   	push   esi
c00104ce:	31 f6                	xor    esi,esi
c00104d0:	53                   	push   ebx
c00104d1:	31 db                	xor    ebx,ebx
c00104d3:	83 ec 0c             	sub    esp,0xc
c00104d6:	0f b6 96 e0 28 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd720]
c00104dd:	89 d0                	mov    eax,edx
c00104df:	85 d2                	test   edx,edx
c00104e1:	74 52                	je     c0010535 <KeDisplaySplashScreen()+0x74>
c00104e3:	80 bb 16 29 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd6ea],0xdb
c00104ea:	75 13                	jne    c00104ff <KeDisplaySplashScreen()+0x3e>
c00104ec:	0f b6 8b 15 29 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd6eb]
c00104f3:	83 e1 fe             	and    ecx,0xfffffffe
c00104f6:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c00104fc:	75 01                	jne    c00104ff <KeDisplaySplashScreen()+0x3e>
c00104fe:	47                   	inc    edi
c00104ff:	83 fa 0d             	cmp    edx,0xd
c0010502:	74 28                	je     c001052c <KeDisplaySplashScreen()+0x6b>
c0010504:	83 fa 0a             	cmp    edx,0xa
c0010507:	75 0a                	jne    c0010513 <KeDisplaySplashScreen()+0x52>
c0010509:	45                   	inc    ebp
c001050a:	bf 0a 00 00 00       	mov    edi,0xa
c001050f:	31 db                	xor    ebx,ebx
c0010511:	eb 19                	jmp    c001052c <KeDisplaySplashScreen()+0x6b>
c0010513:	83 ec 0c             	sub    esp,0xc
c0010516:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010519:	55                   	push   ebp
c001051a:	0f be c0             	movsx  eax,al
c001051d:	52                   	push   edx
c001051e:	43                   	inc    ebx
c001051f:	6a 00                	push   0x0
c0010521:	6a 0e                	push   0xe
c0010523:	50                   	push   eax
c0010524:	e8 fb 7c 00 00       	call   c0018224 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010529:	83 c4 20             	add    esp,0x20
c001052c:	46                   	inc    esi
c001052d:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010533:	75 a1                	jne    c00104d6 <KeDisplaySplashScreen()+0x15>
c0010535:	83 c4 0c             	add    esp,0xc
c0010538:	5b                   	pop    ebx
c0010539:	5e                   	pop    esi
c001053a:	5f                   	pop    edi
c001053b:	5d                   	pop    ebp
c001053c:	c3                   	ret    

c001053d <KeSetBootMessage(char const*)>:
c001053d:	57                   	push   edi
c001053e:	56                   	push   esi
c001053f:	53                   	push   ebx
c0010540:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010546:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001054d:	68 9e 00 00 00       	push   0x9e
c0010552:	6a 00                	push   0x0
c0010554:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010558:	56                   	push   esi
c0010559:	e8 92 ff fe ff       	call   c00004f0 <memset>
c001055e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010561:	e8 0a 00 ff ff       	call   c0000570 <strlen>
c0010566:	ba 50 00 00 00       	mov    edx,0x50
c001056b:	83 c4 10             	add    esp,0x10
c001056e:	29 c2                	sub    edx,eax
c0010570:	31 c9                	xor    ecx,ecx
c0010572:	83 e2 fe             	and    edx,0xfffffffe
c0010575:	01 f2                	add    edx,esi
c0010577:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001057c:	84 c0                	test   al,al
c001057e:	74 0a                	je     c001058a <KeSetBootMessage(char const*)+0x4d>
c0010580:	80 cc 0f             	or     ah,0xf
c0010583:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010587:	41                   	inc    ecx
c0010588:	eb ed                	jmp    c0010577 <KeSetBootMessage(char const*)+0x3a>
c001058a:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001058f:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010594:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010596:	81 c4 a0 00 00 00    	add    esp,0xa0
c001059c:	5b                   	pop    ebx
c001059d:	5e                   	pop    esi
c001059e:	5f                   	pop    edi
c001059f:	c3                   	ret    

c00105a0 <Krnl::handlePowerButton()>:
c00105a0:	83 ec 0c             	sub    esp,0xc
c00105a3:	e8 c4 06 00 00       	call   c0010c6c <KeHandlePowerButton()>
c00105a8:	90                   	nop
c00105a9:	83 c4 0c             	add    esp,0xc
c00105ac:	c3                   	ret    
c00105ad:	8d 76 00             	lea    esi,[esi+0x0]

c00105b0 <Krnl::handleSleepButton()>:
c00105b0:	83 ec 0c             	sub    esp,0xc
c00105b3:	e8 e9 06 00 00       	call   c0010ca1 <KeHandleSleepButton()>
c00105b8:	90                   	nop
c00105b9:	83 c4 0c             	add    esp,0xc
c00105bc:	c3                   	ret    
c00105bd:	90                   	nop

c00105be <EnvVarContainer::getEnv(char const*)>:
c00105be:	57                   	push   edi
c00105bf:	56                   	push   esi
c00105c0:	53                   	push   ebx
c00105c1:	31 db                	xor    ebx,ebx
c00105c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105c7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00105c9:	7e 2b                	jle    c00105f6 <EnvVarContainer::getEnv(char const*)+0x38>
c00105cb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00105d2:	50                   	push   eax
c00105d3:	50                   	push   eax
c00105d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00105d7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00105da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00105de:	e8 6d 01 ff ff       	call   c0000750 <strcmp>
c00105e3:	83 c4 10             	add    esp,0x10
c00105e6:	85 c0                	test   eax,eax
c00105e8:	75 09                	jne    c00105f3 <EnvVarContainer::getEnv(char const*)+0x35>
c00105ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00105ed:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00105f1:	eb 05                	jmp    c00105f8 <EnvVarContainer::getEnv(char const*)+0x3a>
c00105f3:	43                   	inc    ebx
c00105f4:	eb d1                	jmp    c00105c7 <EnvVarContainer::getEnv(char const*)+0x9>
c00105f6:	31 c0                	xor    eax,eax
c00105f8:	5b                   	pop    ebx
c00105f9:	5e                   	pop    esi
c00105fa:	5f                   	pop    edi
c00105fb:	c3                   	ret    

c00105fc <EnvVarContainer::setEnv(char const*, char const*)>:
c00105fc:	55                   	push   ebp
c00105fd:	57                   	push   edi
c00105fe:	56                   	push   esi
c00105ff:	53                   	push   ebx
c0010600:	83 ec 28             	sub    esp,0x28
c0010603:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010607:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001060b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001060f:	56                   	push   esi
c0010610:	e8 5b ff fe ff       	call   c0000570 <strlen>
c0010615:	40                   	inc    eax
c0010616:	89 04 24             	mov    DWORD PTR [esp],eax
c0010619:	e8 90 74 ff ff       	call   c0007aae <malloc>
c001061e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010621:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010625:	e8 46 ff fe ff       	call   c0000570 <strlen>
c001062a:	40                   	inc    eax
c001062b:	89 04 24             	mov    DWORD PTR [esp],eax
c001062e:	e8 7b 74 ff ff       	call   c0007aae <malloc>
c0010633:	89 34 24             	mov    DWORD PTR [esp],esi
c0010636:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001063a:	e8 31 ff fe ff       	call   c0000570 <strlen>
c001063f:	83 c4 0c             	add    esp,0xc
c0010642:	40                   	inc    eax
c0010643:	50                   	push   eax
c0010644:	6a 00                	push   0x0
c0010646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001064a:	e8 a1 fe fe ff       	call   c00004f0 <memset>
c001064f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010652:	e8 19 ff fe ff       	call   c0000570 <strlen>
c0010657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001065b:	8d 48 01             	lea    ecx,[eax+0x1]
c001065e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010660:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010663:	89 de                	mov    esi,ebx
c0010665:	e8 06 ff fe ff       	call   c0000570 <strlen>
c001066a:	83 c4 0c             	add    esp,0xc
c001066d:	40                   	inc    eax
c001066e:	50                   	push   eax
c001066f:	6a 00                	push   0x0
c0010671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010675:	e8 76 fe fe ff       	call   c00004f0 <memset>
c001067a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001067d:	e8 ee fe fe ff       	call   c0000570 <strlen>
c0010682:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010686:	8d 48 01             	lea    ecx,[eax+0x1]
c0010689:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001068b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001068e:	40                   	inc    eax
c001068f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010692:	c1 e0 03             	shl    eax,0x3
c0010695:	5a                   	pop    edx
c0010696:	59                   	pop    ecx
c0010697:	50                   	push   eax
c0010698:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001069b:	e8 fa 73 ff ff       	call   c0007a9a <realloc>
c00106a0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00106a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00106a7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00106aa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00106ae:	b9 08 00 00 00       	mov    ecx,0x8
c00106b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106b5:	83 c4 2c             	add    esp,0x2c
c00106b8:	5b                   	pop    ebx
c00106b9:	5e                   	pop    esi
c00106ba:	5f                   	pop    edi
c00106bb:	5d                   	pop    ebp
c00106bc:	c3                   	ret    
c00106bd:	90                   	nop

c00106be <EnvVarContainer::deleteEnv(char const*)>:
c00106be:	c3                   	ret    
c00106bf:	90                   	nop

c00106c0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00106c0:	55                   	push   ebp
c00106c1:	57                   	push   edi
c00106c2:	56                   	push   esi
c00106c3:	53                   	push   ebx
c00106c4:	81 ec 38 01 00 00    	sub    esp,0x138
c00106ca:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00106d1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00106d8:	68 14 01 00 00       	push   0x114
c00106dd:	e8 cc 73 ff ff       	call   c0007aae <malloc>
c00106e2:	83 c4 0c             	add    esp,0xc
c00106e5:	89 c3                	mov    ebx,eax
c00106e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00106ea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00106f1:	50                   	push   eax
c00106f2:	e8 99 aa ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00106f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106fa:	e8 11 ae ff ff       	call   c000b510 <File::exists()>
c00106ff:	83 c4 10             	add    esp,0x10
c0010702:	84 c0                	test   al,al
c0010704:	75 31                	jne    c0010737 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010706:	50                   	push   eax
c0010707:	50                   	push   eax
c0010708:	6a 12                	push   0x12
c001070a:	53                   	push   ebx
c001070b:	e8 3c ab ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0010710:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010712:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010715:	89 34 24             	mov    DWORD PTR [esp],esi
c0010718:	e8 53 fe fe ff       	call   c0000570 <strlen>
c001071d:	5a                   	pop    edx
c001071e:	31 d2                	xor    edx,edx
c0010720:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010724:	51                   	push   ecx
c0010725:	56                   	push   esi
c0010726:	52                   	push   edx
c0010727:	50                   	push   eax
c0010728:	53                   	push   ebx
c0010729:	ff d7                	call   edi
c001072b:	83 c4 14             	add    esp,0x14
c001072e:	53                   	push   ebx
c001072f:	e8 76 ab ff ff       	call   c000b2aa <File::close()>
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	56                   	push   esi
c0010738:	31 f6                	xor    esi,esi
c001073a:	68 00 01 00 00       	push   0x100
c001073f:	6a 00                	push   0x0
c0010741:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010745:	50                   	push   eax
c0010746:	e8 a5 fd fe ff       	call   c00004f0 <memset>
c001074b:	5f                   	pop    edi
c001074c:	58                   	pop    eax
c001074d:	6a 01                	push   0x1
c001074f:	53                   	push   ebx
c0010750:	e8 f7 aa ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0010755:	83 c4 10             	add    esp,0x10
c0010758:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010760:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010768:	83 ec 0c             	sub    esp,0xc
c001076b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001076d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010771:	51                   	push   ecx
c0010772:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010776:	52                   	push   edx
c0010777:	6a 00                	push   0x0
c0010779:	6a 01                	push   0x1
c001077b:	53                   	push   ebx
c001077c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001077f:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010784:	83 c4 20             	add    esp,0x20
c0010787:	89 c2                	mov    edx,eax
c0010789:	85 c0                	test   eax,eax
c001078b:	0f 84 36 01 00 00    	je     c00108c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010791:	83 f8 0d             	cmp    eax,0xd
c0010794:	0f 84 22 01 00 00    	je     c00108bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001079a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001079f:	0f 84 f0 00 00 00    	je     c0010895 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00107a5:	83 f8 0a             	cmp    eax,0xa
c00107a8:	74 13                	je     c00107bd <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00107aa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00107af:	74 0c                	je     c00107bd <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00107b1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00107b7:	0f 8e f6 00 00 00    	jle    c00108b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00107bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107c1:	83 ec 0c             	sub    esp,0xc
c00107c4:	8d 78 01             	lea    edi,[eax+0x1]
c00107c7:	57                   	push   edi
c00107c8:	e8 e1 72 ff ff       	call   c0007aae <malloc>
c00107cd:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00107d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00107d5:	8d 56 04             	lea    edx,[esi+0x4]
c00107d8:	89 14 24             	mov    DWORD PTR [esp],edx
c00107db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00107df:	e8 ca 72 ff ff       	call   c0007aae <malloc>
c00107e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00107e8:	83 c4 0c             	add    esp,0xc
c00107eb:	57                   	push   edi
c00107ec:	6a 00                	push   0x0
c00107ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00107f2:	e8 f9 fc fe ff       	call   c00004f0 <memset>
c00107f7:	8d 74 24 30          	lea    esi,[esp+0x30]
c00107fb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00107ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010803:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010805:	83 c4 0c             	add    esp,0xc
c0010808:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001080c:	52                   	push   edx
c001080d:	6a 00                	push   0x0
c001080f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010813:	e8 d8 fc fe ff       	call   c00004f0 <memset>
c0010818:	8d 74 24 30          	lea    esi,[esp+0x30]
c001081c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010820:	89 34 24             	mov    DWORD PTR [esp],esi
c0010823:	e8 48 fd fe ff       	call   c0000570 <strlen>
c0010828:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001082c:	89 c1                	mov    ecx,eax
c001082e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010830:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010833:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010836:	40                   	inc    eax
c0010837:	83 c4 10             	add    esp,0x10
c001083a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001083d:	85 d2                	test   edx,edx
c001083f:	75 0c                	jne    c001084d <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010841:	83 ec 0c             	sub    esp,0xc
c0010844:	6a 08                	push   0x8
c0010846:	e8 63 72 ff ff       	call   c0007aae <malloc>
c001084b:	eb 0c                	jmp    c0010859 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001084d:	c1 e0 03             	shl    eax,0x3
c0010850:	51                   	push   ecx
c0010851:	51                   	push   ecx
c0010852:	50                   	push   eax
c0010853:	52                   	push   edx
c0010854:	e8 41 72 ff ff       	call   c0007a9a <realloc>
c0010859:	83 c4 10             	add    esp,0x10
c001085c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001085f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010862:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010865:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010869:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001086d:	b9 08 00 00 00       	mov    ecx,0x8
c0010872:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010874:	31 f6                	xor    esi,esi
c0010876:	50                   	push   eax
c0010877:	68 00 01 00 00       	push   0x100
c001087c:	6a 00                	push   0x0
c001087e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010882:	50                   	push   eax
c0010883:	e8 68 fc fe ff       	call   c00004f0 <memset>
c0010888:	83 c4 10             	add    esp,0x10
c001088b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010893:	eb 27                	jmp    c00108bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010895:	83 f8 3d             	cmp    eax,0x3d
c0010898:	74 1e                	je     c00108b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001089a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00108a0:	7f 07                	jg     c00108a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00108a2:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c00108a6:	46                   	inc    esi
c00108a7:	eb 13                	jmp    c00108bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00108a9:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00108b1:	eb 09                	jmp    c00108bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00108b3:	83 f8 3d             	cmp    eax,0x3d
c00108b6:	75 ea                	jne    c00108a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00108b8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00108bc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00108c1:	0f 85 99 fe ff ff    	jne    c0010760 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	53                   	push   ebx
c00108cb:	e8 da a9 ff ff       	call   c000b2aa <File::close()>
c00108d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108d8:	81 c4 3c 01 00 00    	add    esp,0x13c
c00108de:	5b                   	pop    ebx
c00108df:	5e                   	pop    esi
c00108e0:	5f                   	pop    edi
c00108e1:	5d                   	pop    ebp
c00108e2:	c3                   	ret    
c00108e3:	90                   	nop

c00108e4 <EnvVarContainer::__loadSystem()>:
c00108e4:	83 ec 10             	sub    esp,0x10
c00108e7:	68 40 2a 02 c0       	push   0xc0022a40
c00108ec:	68 2c 15 02 c0       	push   0xc002152c
c00108f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f5:	e8 c6 fd ff ff       	call   c00106c0 <EnvVarContainer::loadFrom(char const*, char const*)>
c00108fa:	83 c4 1c             	add    esp,0x1c
c00108fd:	c3                   	ret    

c00108fe <EnvVarContainer::__loadUser()>:
c00108fe:	c3                   	ret    
c00108ff:	90                   	nop

c0010900 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010904:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001090a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010912:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010919:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010920:	90                   	nop
c0010921:	c3                   	ret    

c0010922 <EnvVarContainer::~EnvVarContainer()>:
c0010922:	83 ec 0c             	sub    esp,0xc
c0010925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010929:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001092c:	85 c0                	test   eax,eax
c001092e:	74 1d                	je     c001094d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010934:	8b 00                	mov    eax,DWORD PTR [eax]
c0010936:	85 c0                	test   eax,eax
c0010938:	74 13                	je     c001094d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010941:	83 ec 0c             	sub    esp,0xc
c0010944:	50                   	push   eax
c0010945:	e8 74 71 ff ff       	call   c0007abe <free>
c001094a:	83 c4 10             	add    esp,0x10
c001094d:	90                   	nop
c001094e:	83 c4 0c             	add    esp,0xc
c0010951:	c3                   	ret    

c0010952 <KeGetEnv(Process*, char const*)>:
c0010952:	53                   	push   ebx
c0010953:	83 ec 08             	sub    esp,0x8
c0010956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001095e:	39 05 90 91 02 c0    	cmp    DWORD PTR ds:0xc0029190,eax
c0010964:	74 04                	je     c001096a <KeGetEnv(Process*, char const*)+0x18>
c0010966:	85 c0                	test   eax,eax
c0010968:	75 0b                	jne    c0010975 <KeGetEnv(Process*, char const*)+0x23>
c001096a:	a1 30 89 02 c0       	mov    eax,ds:0xc0028930
c001096f:	85 c0                	test   eax,eax
c0010971:	75 19                	jne    c001098c <KeGetEnv(Process*, char const*)+0x3a>
c0010973:	eb 27                	jmp    c001099c <KeGetEnv(Process*, char const*)+0x4a>
c0010975:	52                   	push   edx
c0010976:	52                   	push   edx
c0010977:	53                   	push   ebx
c0010978:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001097e:	e8 3b fc ff ff       	call   c00105be <EnvVarContainer::getEnv(char const*)>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	85 c0                	test   eax,eax
c0010988:	75 28                	jne    c00109b2 <KeGetEnv(Process*, char const*)+0x60>
c001098a:	eb de                	jmp    c001096a <KeGetEnv(Process*, char const*)+0x18>
c001098c:	52                   	push   edx
c001098d:	52                   	push   edx
c001098e:	53                   	push   ebx
c001098f:	50                   	push   eax
c0010990:	e8 29 fc ff ff       	call   c00105be <EnvVarContainer::getEnv(char const*)>
c0010995:	83 c4 10             	add    esp,0x10
c0010998:	85 c0                	test   eax,eax
c001099a:	75 16                	jne    c00109b2 <KeGetEnv(Process*, char const*)+0x60>
c001099c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00109a0:	a1 34 89 02 c0       	mov    eax,ds:0xc0028934
c00109a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109a9:	83 c4 08             	add    esp,0x8
c00109ac:	5b                   	pop    ebx
c00109ad:	e9 0c fc ff ff       	jmp    c00105be <EnvVarContainer::getEnv(char const*)>
c00109b2:	83 c4 08             	add    esp,0x8
c00109b5:	5b                   	pop    ebx
c00109b6:	c3                   	ret    

c00109b7 <KeSetEnvSystem(char const*, char const*)>:
c00109b7:	83 ec 10             	sub    esp,0x10
c00109ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109c2:	ff 35 34 89 02 c0    	push   DWORD PTR ds:0xc0028934
c00109c8:	e8 2f fc ff ff       	call   c00105fc <EnvVarContainer::setEnv(char const*, char const*)>
c00109cd:	83 c4 1c             	add    esp,0x1c
c00109d0:	c3                   	ret    

c00109d1 <KeSetEnvUser(char const*, char const*)>:
c00109d1:	a1 30 89 02 c0       	mov    eax,ds:0xc0028930
c00109d6:	85 c0                	test   eax,eax
c00109d8:	74 15                	je     c00109ef <KeSetEnvUser(char const*, char const*)+0x1e>
c00109da:	83 ec 10             	sub    esp,0x10
c00109dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109e5:	50                   	push   eax
c00109e6:	e8 11 fc ff ff       	call   c00105fc <EnvVarContainer::setEnv(char const*, char const*)>
c00109eb:	83 c4 1c             	add    esp,0x1c
c00109ee:	c3                   	ret    
c00109ef:	c3                   	ret    

c00109f0 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00109f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109f4:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00109fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00109fe:	e9 f9 fb ff ff       	jmp    c00105fc <EnvVarContainer::setEnv(char const*, char const*)>

c0010a03 <KeDeleteEnvSystem(char const*)>:
c0010a03:	c3                   	ret    

c0010a04 <KeDeleteEnvUser(char const*)>:
c0010a04:	c3                   	ret    

c0010a05 <KeDeleteEnvProcess(Process*, char const*)>:
c0010a05:	c3                   	ret    

c0010a06 <KeNewProcessEnv(Process*)>:
c0010a06:	83 ec 28             	sub    esp,0x28
c0010a09:	6a 0c                	push   0xc
c0010a0b:	e8 9e 70 ff ff       	call   c0007aae <malloc>
c0010a10:	5a                   	pop    edx
c0010a11:	59                   	pop    ecx
c0010a12:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010a16:	50                   	push   eax
c0010a17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010a1b:	e8 e0 fe ff ff       	call   c0010900 <EnvVarContainer::EnvVarContainer(Process*)>
c0010a20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a24:	83 c4 2c             	add    esp,0x2c
c0010a27:	c3                   	ret    

c0010a28 <KeCopyProcessEnv(Process*, Process*)>:
c0010a28:	57                   	push   edi
c0010a29:	56                   	push   esi
c0010a2a:	53                   	push   ebx
c0010a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2f:	83 ec 0c             	sub    esp,0xc
c0010a32:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010a38:	6a 0c                	push   0xc
c0010a3a:	e8 6f 70 ff ff       	call   c0007aae <malloc>
c0010a3f:	89 c3                	mov    ebx,eax
c0010a41:	58                   	pop    eax
c0010a42:	5a                   	pop    edx
c0010a43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a47:	53                   	push   ebx
c0010a48:	e8 b3 fe ff ff       	call   c0010900 <EnvVarContainer::EnvVarContainer(Process*)>
c0010a4d:	8b 07                	mov    eax,DWORD PTR [edi]
c0010a4f:	89 03                	mov    DWORD PTR [ebx],eax
c0010a51:	c1 e0 03             	shl    eax,0x3
c0010a54:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a57:	e8 52 70 ff ff       	call   c0007aae <malloc>
c0010a5c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010a5f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010a61:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010a64:	c1 e1 03             	shl    ecx,0x3
c0010a67:	89 c7                	mov    edi,eax
c0010a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	89 d8                	mov    eax,ebx
c0010a70:	5b                   	pop    ebx
c0010a71:	5e                   	pop    esi
c0010a72:	5f                   	pop    edi
c0010a73:	c3                   	ret    

c0010a74 <KeLoadSystemEnv()>:
c0010a74:	53                   	push   ebx
c0010a75:	83 ec 14             	sub    esp,0x14
c0010a78:	6a 0c                	push   0xc
c0010a7a:	e8 2f 70 ff ff       	call   c0007aae <malloc>
c0010a7f:	89 c3                	mov    ebx,eax
c0010a81:	58                   	pop    eax
c0010a82:	5a                   	pop    edx
c0010a83:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010a89:	53                   	push   ebx
c0010a8a:	e8 71 fe ff ff       	call   c0010900 <EnvVarContainer::EnvVarContainer(Process*)>
c0010a8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a92:	89 1d 34 89 02 c0    	mov    DWORD PTR ds:0xc0028934,ebx
c0010a98:	e8 47 fe ff ff       	call   c00108e4 <EnvVarContainer::__loadSystem()>
c0010a9d:	83 c4 18             	add    esp,0x18
c0010aa0:	5b                   	pop    ebx
c0010aa1:	c3                   	ret    

c0010aa2 <KeLoadUserEnv()>:
c0010aa2:	53                   	push   ebx
c0010aa3:	83 ec 14             	sub    esp,0x14
c0010aa6:	6a 0c                	push   0xc
c0010aa8:	e8 01 70 ff ff       	call   c0007aae <malloc>
c0010aad:	89 c3                	mov    ebx,eax
c0010aaf:	58                   	pop    eax
c0010ab0:	5a                   	pop    edx
c0010ab1:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010ab7:	53                   	push   ebx
c0010ab8:	e8 43 fe ff ff       	call   c0010900 <EnvVarContainer::EnvVarContainer(Process*)>
c0010abd:	89 1d 30 89 02 c0    	mov    DWORD PTR ds:0xc0028930,ebx
c0010ac3:	83 c4 18             	add    esp,0x18
c0010ac6:	5b                   	pop    ebx
c0010ac7:	c3                   	ret    

c0010ac8 <KeFlushEnv()>:
c0010ac8:	c3                   	ret    

c0010ac9 <KeGetProcessTotalEnvCount(Process*)>:
c0010ac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010acd:	8b 15 30 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028930
c0010ad3:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010ad9:	a1 34 89 02 c0       	mov    eax,ds:0xc0028934
c0010ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ae0:	03 01                	add    eax,DWORD PTR [ecx]
c0010ae2:	85 d2                	test   edx,edx
c0010ae4:	74 02                	je     c0010ae8 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0010ae6:	03 02                	add    eax,DWORD PTR [edx]
c0010ae8:	c3                   	ret    

c0010ae9 <KeGetProcessEnvPair(Process*, int)>:
c0010ae9:	57                   	push   edi
c0010aea:	56                   	push   esi
c0010aeb:	8b 35 30 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028930
c0010af1:	53                   	push   ebx
c0010af2:	85 f6                	test   esi,esi
c0010af4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010af8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010afc:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010b02:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b06:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010b08:	75 16                	jne    c0010b20 <KeGetProcessEnvPair(Process*, int)+0x37>
c0010b0a:	39 c2                	cmp    edx,eax
c0010b0c:	7c 16                	jl     c0010b24 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010b0e:	8b 0d 34 89 02 c0    	mov    ecx,DWORD PTR ds:0xc0028934
c0010b14:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010b16:	01 c6                	add    esi,eax
c0010b18:	39 d6                	cmp    esi,edx
c0010b1a:	7e 3c                	jle    c0010b58 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010b1c:	29 c2                	sub    edx,eax
c0010b1e:	eb 04                	jmp    c0010b24 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010b20:	39 c2                	cmp    edx,eax
c0010b22:	7d 05                	jge    c0010b29 <KeGetProcessEnvPair(Process*, int)+0x40>
c0010b24:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010b27:	eb 20                	jmp    c0010b49 <KeGetProcessEnvPair(Process*, int)+0x60>
c0010b29:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010b2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010b2e:	39 d1                	cmp    ecx,edx
c0010b30:	7e 04                	jle    c0010b36 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0010b32:	29 c2                	sub    edx,eax
c0010b34:	eb 10                	jmp    c0010b46 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0010b36:	8b 35 34 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028934
c0010b3c:	03 0e                	add    ecx,DWORD PTR [esi]
c0010b3e:	39 d1                	cmp    ecx,edx
c0010b40:	7e 16                	jle    c0010b58 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010b42:	29 c2                	sub    edx,eax
c0010b44:	29 fa                	sub    edx,edi
c0010b46:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b49:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010b4c:	8b 02                	mov    eax,DWORD PTR [edx]
c0010b4e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010b51:	89 03                	mov    DWORD PTR [ebx],eax
c0010b53:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010b56:	eb 1d                	jmp    c0010b75 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	68 4e 15 02 c0       	push   0xc002154e
c0010b60:	e8 ac 00 00 00       	call   c0010c11 <KePanic(char const*)>
c0010b65:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010b6b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010b72:	83 c4 10             	add    esp,0x10
c0010b75:	89 d8                	mov    eax,ebx
c0010b77:	5b                   	pop    ebx
c0010b78:	5e                   	pop    esi
c0010b79:	5f                   	pop    edi
c0010b7a:	c2 04 00             	ret    0x4

c0010b7d <CPU::current()>:
c0010b7d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010b82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b88:	c3                   	ret    

c0010b89 <operator new(unsigned long)>:
c0010b89:	e9 20 6f ff ff       	jmp    c0007aae <malloc>

c0010b8e <operator delete(void*)>:
c0010b8e:	e9 3b 6f ff ff       	jmp    c0007ace <rfree>

c0010b93 <disableIRQs()>:
c0010b93:	fa                   	cli    
c0010b94:	c3                   	ret    

c0010b95 <enableIRQs()>:
c0010b95:	fb                   	sti    
c0010b96:	c3                   	ret    

c0010b97 <lockScheduler()>:
c0010b97:	fa                   	cli    
c0010b98:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0010b9e:	c3                   	ret    

c0010b9f <unlockScheduler()>:
c0010b9f:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010ba4:	48                   	dec    eax
c0010ba5:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010baa:	75 01                	jne    c0010bad <unlockScheduler()+0xe>
c0010bac:	fb                   	sti    
c0010bad:	c3                   	ret    

c0010bae <lockStuff()>:
c0010bae:	fa                   	cli    
c0010baf:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0010bb5:	ff 05 64 91 02 c0    	inc    DWORD PTR ds:0xc0029164
c0010bbb:	c3                   	ret    

c0010bbc <unlockStuff()>:
c0010bbc:	83 ec 0c             	sub    esp,0xc
c0010bbf:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0010bc4:	48                   	dec    eax
c0010bc5:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0010bca:	75 18                	jne    c0010be4 <unlockStuff()+0x28>
c0010bcc:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c0010bd3:	74 0f                	je     c0010be4 <unlockStuff()+0x28>
c0010bd5:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0010bdf:	e8 ec 48 00 00       	call   c00154d0 <schedule()>
c0010be4:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010be9:	48                   	dec    eax
c0010bea:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010bef:	75 01                	jne    c0010bf2 <unlockStuff()+0x36>
c0010bf1:	fb                   	sti    
c0010bf2:	83 c4 0c             	add    esp,0xc
c0010bf5:	c3                   	ret    

c0010bf6 <Virt::getAKernelVAS()>:
c0010bf6:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0010bfb:	c3                   	ret    

c0010bfc <__not_memcpy>:
c0010bfc:	57                   	push   edi
c0010bfd:	56                   	push   esi
c0010bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010c0a:	89 c7                	mov    edi,eax
c0010c0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c0e:	5e                   	pop    esi
c0010c0f:	5f                   	pop    edi
c0010c10:	c3                   	ret    

c0010c11 <KePanic(char const*)>:
c0010c11:	c6 05 38 89 02 c0 01 	mov    BYTE PTR ds:0xc0028938,0x1
c0010c18:	e9 59 68 00 00       	jmp    c0017476 <HalPanic(char const*)>

c0010c1d <KePowerThread(void*)>:
c0010c1d:	83 ec 0c             	sub    esp,0xc
c0010c20:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010c25:	48                   	dec    eax
c0010c26:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010c2b:	75 01                	jne    c0010c2e <KePowerThread(void*)+0x11>
c0010c2d:	fb                   	sti    
c0010c2e:	83 ec 0c             	sub    esp,0xc
c0010c31:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0010c38:	6a 0a                	push   0xa
c0010c3a:	e8 d5 4b 00 00       	call   c0015814 <sleep(unsigned int)>
c0010c3f:	83 05 84 89 02 c0 0a 	add    DWORD PTR ds:0xc0028984,0xa
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	eb e3                	jmp    c0010c2e <KePowerThread(void*)+0x11>

c0010c4b <KeChangePowerSettings(PowerSettings)>:
c0010c4b:	57                   	push   edi
c0010c4c:	b9 09 00 00 00       	mov    ecx,0x9
c0010c51:	56                   	push   esi
c0010c52:	bf 60 89 02 c0       	mov    edi,0xc0028960
c0010c57:	fc                   	cld    
c0010c58:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c5c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c5e:	5e                   	pop    esi
c0010c5f:	5f                   	pop    edi
c0010c60:	c3                   	ret    

c0010c61 <KeUserIOReceived()>:
c0010c61:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c0010c6b:	c3                   	ret    

c0010c6c <KeHandlePowerButton()>:
c0010c6c:	83 ec 0c             	sub    esp,0xc
c0010c6f:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c0010c74:	83 f8 02             	cmp    eax,0x2
c0010c77:	75 10                	jne    c0010c89 <KeHandlePowerButton()+0x1d>
c0010c79:	83 ec 0c             	sub    esp,0xc
c0010c7c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c82:	e8 99 64 ff ff       	call   c0007120 <Computer::shutdown()>
c0010c87:	eb 11                	jmp    c0010c9a <KeHandlePowerButton()+0x2e>
c0010c89:	48                   	dec    eax
c0010c8a:	75 11                	jne    c0010c9d <KeHandlePowerButton()+0x31>
c0010c8c:	83 ec 0c             	sub    esp,0xc
c0010c8f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c95:	e8 b6 64 ff ff       	call   c0007150 <Computer::sleep()>
c0010c9a:	83 c4 10             	add    esp,0x10
c0010c9d:	83 c4 0c             	add    esp,0xc
c0010ca0:	c3                   	ret    

c0010ca1 <KeHandleSleepButton()>:
c0010ca1:	83 ec 0c             	sub    esp,0xc
c0010ca4:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0010ca9:	83 f8 02             	cmp    eax,0x2
c0010cac:	75 10                	jne    c0010cbe <KeHandleSleepButton()+0x1d>
c0010cae:	83 ec 0c             	sub    esp,0xc
c0010cb1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010cb7:	e8 64 64 ff ff       	call   c0007120 <Computer::shutdown()>
c0010cbc:	eb 11                	jmp    c0010ccf <KeHandleSleepButton()+0x2e>
c0010cbe:	48                   	dec    eax
c0010cbf:	75 11                	jne    c0010cd2 <KeHandleSleepButton()+0x31>
c0010cc1:	83 ec 0c             	sub    esp,0xc
c0010cc4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010cca:	e8 81 64 ff ff       	call   c0007150 <Computer::sleep()>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	83 c4 0c             	add    esp,0xc
c0010cd5:	c3                   	ret    

c0010cd6 <KeSetupPowerManager()>:
c0010cd6:	83 ec 0c             	sub    esp,0xc
c0010cd9:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c0010ce3:	68 f0 00 00 00       	push   0xf0
c0010ce8:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0010cef:	6a 00                	push   0x0
c0010cf1:	68 1d 0c 01 c0       	push   0xc0010c1d
c0010cf6:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010cfc:	e8 7f 45 00 00       	call   c0015280 <Process::createThread(void (*)(void*), void*, int)>
c0010d01:	c7 05 60 89 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x2
c0010d0b:	c7 05 64 89 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028964,0x1
c0010d15:	c7 05 68 89 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028968,0x3
c0010d1f:	c7 05 6c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002896c,0x0
c0010d29:	c7 05 78 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028978,0x0
c0010d33:	c7 05 70 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028970,0x0
c0010d3d:	c7 05 7c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002897c,0x0
c0010d47:	c7 05 74 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028974,0x3c
c0010d51:	c7 05 80 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028980,0x3c
c0010d5b:	83 c4 1c             	add    esp,0x1c
c0010d5e:	c3                   	ret    

c0010d5f <KeRand()>:
c0010d5f:	69 05 88 89 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028988,0x2875
c0010d69:	69 0d 8c 89 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002898c,0xa2e7b175
c0010d73:	53                   	push   ebx
c0010d74:	01 c1                	add    ecx,eax
c0010d76:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010d7b:	f7 25 88 89 02 c0    	mul    DWORD PTR ds:0xc0028988
c0010d81:	01 ca                	add    edx,ecx
c0010d83:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010d88:	83 d2 00             	adc    edx,0x0
c0010d8b:	a3 88 89 02 c0       	mov    ds:0xc0028988,eax
c0010d90:	0f b7 da             	movzx  ebx,dx
c0010d93:	89 da                	mov    edx,ebx
c0010d95:	89 1d 8c 89 02 c0    	mov    DWORD PTR ds:0xc002898c,ebx
c0010d9b:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010d9f:	5b                   	pop    ebx
c0010da0:	c3                   	ret    

c0010da1 <KeSeedRand(unsigned int)>:
c0010da1:	53                   	push   ebx
c0010da2:	83 ec 08             	sub    esp,0x8
c0010da5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010da9:	e8 e7 69 00 00       	call   c0017795 <HalGetRand()>
c0010dae:	c7 05 8c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002898c,0x0
c0010db8:	31 d8                	xor    eax,ebx
c0010dba:	a3 88 89 02 c0       	mov    ds:0xc0028988,eax
c0010dbf:	e8 9b ff ff ff       	call   c0010d5f <KeRand()>
c0010dc4:	83 c4 08             	add    esp,0x8
c0010dc7:	5b                   	pop    ebx
c0010dc8:	eb 95                	jmp    c0010d5f <KeRand()>

c0010dca <KeInitRand()>:
c0010dca:	83 ec 0c             	sub    esp,0xc
c0010dcd:	e8 b8 67 00 00       	call   c001758a <HalQueryPerformanceCounter()>
c0010dd2:	0f 20 da             	mov    edx,cr3
c0010dd5:	0f 22 da             	mov    cr3,edx
c0010dd8:	0f 20 da             	mov    edx,cr3
c0010ddb:	0f 22 da             	mov    cr3,edx
c0010dde:	0f 20 da             	mov    edx,cr3
c0010de1:	0f 22 da             	mov    cr3,edx
c0010de4:	0f 20 da             	mov    edx,cr3
c0010de7:	0f 22 da             	mov    cr3,edx
c0010dea:	83 ec 0c             	sub    esp,0xc
c0010ded:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010df2:	50                   	push   eax
c0010df3:	e8 a9 ff ff ff       	call   c0010da1 <KeSeedRand(unsigned int)>
c0010df8:	83 c4 1c             	add    esp,0x1c
c0010dfb:	c3                   	ret    

c0010dfc <KeResolveCompatibilitySymbol(char*)>:
c0010dfc:	83 ec 0c             	sub    esp,0xc
c0010dff:	83 ec 08             	sub    esp,0x8
c0010e02:	68 68 15 02 c0       	push   0xc0021568
c0010e07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0b:	e8 40 f9 fe ff       	call   c0000750 <strcmp>
c0010e10:	83 c4 10             	add    esp,0x10
c0010e13:	85 c0                	test   eax,eax
c0010e15:	0f 94 c0             	sete   al
c0010e18:	0f b6 c0             	movzx  eax,al
c0010e1b:	85 c0                	test   eax,eax
c0010e1d:	74 0d                	je     c0010e2c <KeResolveCompatibilitySymbol(char*)+0x30>
c0010e1f:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0010e24:	e9 8b 01 00 00       	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e29:	8d 76 00             	lea    esi,[esi+0x0]
c0010e2c:	83 ec 08             	sub    esp,0x8
c0010e2f:	68 71 15 02 c0       	push   0xc0021571
c0010e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e38:	e8 13 f9 fe ff       	call   c0000750 <strcmp>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	85 c0                	test   eax,eax
c0010e42:	0f 94 c0             	sete   al
c0010e45:	0f b6 c0             	movzx  eax,al
c0010e48:	85 c0                	test   eax,eax
c0010e4a:	74 0c                	je     c0010e58 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010e4c:	b8 40 eb 01 c0       	mov    eax,0xc001eb40
c0010e51:	e9 5e 01 00 00       	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e56:	66 90                	xchg   ax,ax
c0010e58:	83 ec 08             	sub    esp,0x8
c0010e5b:	68 7b 15 02 c0       	push   0xc002157b
c0010e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e64:	e8 e7 f8 fe ff       	call   c0000750 <strcmp>
c0010e69:	83 c4 10             	add    esp,0x10
c0010e6c:	85 c0                	test   eax,eax
c0010e6e:	0f 94 c0             	sete   al
c0010e71:	0f b6 c0             	movzx  eax,al
c0010e74:	85 c0                	test   eax,eax
c0010e76:	74 0c                	je     c0010e84 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010e78:	b8 74 e8 01 c0       	mov    eax,0xc001e874
c0010e7d:	e9 32 01 00 00       	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e82:	66 90                	xchg   ax,ax
c0010e84:	83 ec 08             	sub    esp,0x8
c0010e87:	68 84 15 02 c0       	push   0xc0021584
c0010e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e90:	e8 bb f8 fe ff       	call   c0000750 <strcmp>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	85 c0                	test   eax,eax
c0010e9a:	0f 94 c0             	sete   al
c0010e9d:	0f b6 c0             	movzx  eax,al
c0010ea0:	85 c0                	test   eax,eax
c0010ea2:	74 0c                	je     c0010eb0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010ea4:	b8 11 0c 01 c0       	mov    eax,0xc0010c11
c0010ea9:	e9 06 01 00 00       	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010eae:	66 90                	xchg   ax,ax
c0010eb0:	83 ec 08             	sub    esp,0x8
c0010eb3:	68 97 15 02 c0       	push   0xc0021597
c0010eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ebc:	e8 8f f8 fe ff       	call   c0000750 <strcmp>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	85 c0                	test   eax,eax
c0010ec6:	0f 94 c0             	sete   al
c0010ec9:	0f b6 c0             	movzx  eax,al
c0010ecc:	85 c0                	test   eax,eax
c0010ece:	74 0c                	je     c0010edc <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010ed0:	b8 3d 05 01 c0       	mov    eax,0xc001053d
c0010ed5:	e9 da 00 00 00       	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010eda:	66 90                	xchg   ax,ax
c0010edc:	83 ec 08             	sub    esp,0x8
c0010edf:	68 b4 15 02 c0       	push   0xc00215b4
c0010ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee8:	e8 63 f8 fe ff       	call   c0000750 <strcmp>
c0010eed:	83 c4 10             	add    esp,0x10
c0010ef0:	85 c0                	test   eax,eax
c0010ef2:	0f 94 c0             	sete   al
c0010ef5:	0f b6 c0             	movzx  eax,al
c0010ef8:	85 c0                	test   eax,eax
c0010efa:	74 0c                	je     c0010f08 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010efc:	b8 40 ec 01 c0       	mov    eax,0xc001ec40
c0010f01:	e9 ae 00 00 00       	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f06:	66 90                	xchg   ax,ax
c0010f08:	83 ec 08             	sub    esp,0x8
c0010f0b:	68 be 15 02 c0       	push   0xc00215be
c0010f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f14:	e8 37 f8 fe ff       	call   c0000750 <strcmp>
c0010f19:	83 c4 10             	add    esp,0x10
c0010f1c:	85 c0                	test   eax,eax
c0010f1e:	0f 94 c0             	sete   al
c0010f21:	0f b6 c0             	movzx  eax,al
c0010f24:	85 c0                	test   eax,eax
c0010f26:	74 0c                	je     c0010f34 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010f28:	b8 c0 e9 01 c0       	mov    eax,0xc001e9c0
c0010f2d:	e9 82 00 00 00       	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f32:	66 90                	xchg   ax,ax
c0010f34:	83 ec 08             	sub    esp,0x8
c0010f37:	68 c7 15 02 c0       	push   0xc00215c7
c0010f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f40:	e8 0b f8 fe ff       	call   c0000750 <strcmp>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	85 c0                	test   eax,eax
c0010f4a:	0f 94 c0             	sete   al
c0010f4d:	0f b6 c0             	movzx  eax,al
c0010f50:	85 c0                	test   eax,eax
c0010f52:	74 08                	je     c0010f5c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010f54:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0010f59:	eb 59                	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f5b:	90                   	nop
c0010f5c:	83 ec 08             	sub    esp,0x8
c0010f5f:	68 df 15 02 c0       	push   0xc00215df
c0010f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f68:	e8 e3 f7 fe ff       	call   c0000750 <strcmp>
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	85 c0                	test   eax,eax
c0010f72:	0f 94 c0             	sete   al
c0010f75:	0f b6 c0             	movzx  eax,al
c0010f78:	85 c0                	test   eax,eax
c0010f7a:	74 08                	je     c0010f84 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010f7c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0010f81:	eb 31                	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f83:	90                   	nop
c0010f84:	83 ec 08             	sub    esp,0x8
c0010f87:	68 ec 15 02 c0       	push   0xc00215ec
c0010f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f90:	e8 bb f7 fe ff       	call   c0000750 <strcmp>
c0010f95:	83 c4 10             	add    esp,0x10
c0010f98:	85 c0                	test   eax,eax
c0010f9a:	0f 94 c0             	sete   al
c0010f9d:	0f b6 c0             	movzx  eax,al
c0010fa0:	85 c0                	test   eax,eax
c0010fa2:	74 08                	je     c0010fac <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010fa4:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0010fa9:	eb 09                	jmp    c0010fb4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010fab:	90                   	nop
c0010fac:	b8 00 00 00 00       	mov    eax,0x0
c0010fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fb4:	83 c4 0c             	add    esp,0xc
c0010fb7:	c3                   	ret    

c0010fb8 <KiSigKill(int)>:
c0010fb8:	83 ec 0c             	sub    esp,0xc
c0010fbb:	6a 00                	push   0x0
c0010fbd:	6a 00                	push   0x0
c0010fbf:	6a ff                	push   0xffffffff
c0010fc1:	6a 01                	push   0x1
c0010fc3:	e8 8a 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010fc8:	83 c4 1c             	add    esp,0x1c
c0010fcb:	c3                   	ret    

c0010fcc <KiDefaultSignalHandlerIgnore(int)>:
c0010fcc:	c3                   	ret    

c0010fcd <KiDefaultSignalHandlerPause(int)>:
c0010fcd:	57                   	push   edi
c0010fce:	b9 07 00 00 00       	mov    ecx,0x7
c0010fd3:	56                   	push   esi
c0010fd4:	be 35 16 02 c0       	mov    esi,0xc0021635
c0010fd9:	83 ec 24             	sub    esp,0x24
c0010fdc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010fe0:	fc                   	cld    
c0010fe1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fe3:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010fe7:	50                   	push   eax
c0010fe8:	6a 00                	push   0x0
c0010fea:	6a 00                	push   0x0
c0010fec:	6a 27                	push   0x27
c0010fee:	e8 5f 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ff3:	83 c4 34             	add    esp,0x34
c0010ff6:	5e                   	pop    esi
c0010ff7:	5f                   	pop    edi
c0010ff8:	c3                   	ret    

c0010ff9 <KiDefaultSignalHandlerResume(int)>:
c0010ff9:	57                   	push   edi
c0010ffa:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010fff:	56                   	push   esi
c0011000:	be 51 16 02 c0       	mov    esi,0xc0021651
c0011005:	83 ec 24             	sub    esp,0x24
c0011008:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001100c:	fc                   	cld    
c001100d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001100f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011013:	50                   	push   eax
c0011014:	6a 00                	push   0x0
c0011016:	6a 00                	push   0x0
c0011018:	6a 27                	push   0x27
c001101a:	e8 33 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001101f:	83 c4 34             	add    esp,0x34
c0011022:	5e                   	pop    esi
c0011023:	5f                   	pop    edi
c0011024:	c3                   	ret    

c0011025 <KeDeinitSignals(SigHandlerBlock*)>:
c0011025:	e9 94 6a ff ff       	jmp    c0007abe <free>

c001102a <KeInitSignals()>:
c001102a:	53                   	push   ebx
c001102b:	83 ec 14             	sub    esp,0x14
c001102e:	68 c8 00 00 00       	push   0xc8
c0011033:	e8 76 6a ff ff       	call   c0007aae <malloc>
c0011038:	83 c4 0c             	add    esp,0xc
c001103b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011045:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001104f:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011056:	89 c3                	mov    ebx,eax
c0011058:	6a 20                	push   0x20
c001105a:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011060:	6a 00                	push   0x0
c0011062:	50                   	push   eax
c0011063:	e8 88 f4 fe ff       	call   c00004f0 <memset>
c0011068:	83 c4 0c             	add    esp,0xc
c001106b:	6a 44                	push   0x44
c001106d:	6a 00                	push   0x0
c001106f:	53                   	push   ebx
c0011070:	e8 7b f4 fe ff       	call   c00004f0 <memset>
c0011075:	89 d8                	mov    eax,ebx
c0011077:	83 c4 18             	add    esp,0x18
c001107a:	5b                   	pop    ebx
c001107b:	c3                   	ret    

c001107c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001107c:	53                   	push   ebx
c001107d:	b8 01 00 00 00       	mov    eax,0x1
c0011082:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011086:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001108a:	83 f9 10             	cmp    ecx,0x10
c001108d:	7f 21                	jg     c00110b0 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001108f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011096:	89 03                	mov    DWORD PTR [ebx],eax
c0011098:	b8 01 00 00 00       	mov    eax,0x1
c001109d:	d3 e0                	shl    eax,cl
c001109f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00110a3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00110a6:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00110ae:	31 c0                	xor    eax,eax
c00110b0:	5b                   	pop    ebx
c00110b1:	c3                   	ret    

c00110b2 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00110b2:	55                   	push   ebp
c00110b3:	57                   	push   edi
c00110b4:	bf 08 00 00 00       	mov    edi,0x8
c00110b9:	56                   	push   esi
c00110ba:	53                   	push   ebx
c00110bb:	83 ec 18             	sub    esp,0x18
c00110be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00110c2:	68 6e 16 02 c0       	push   0xc002166e
c00110c7:	e8 6d 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00110cc:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00110d3:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00110d9:	83 c4 10             	add    esp,0x10
c00110dc:	31 c9                	xor    ecx,ecx
c00110de:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00110e2:	99                   	cdq    
c00110e3:	f7 ff                	idiv   edi
c00110e5:	8d 42 24             	lea    eax,[edx+0x24]
c00110e8:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00110ec:	85 f6                	test   esi,esi
c00110ee:	75 1a                	jne    c001110a <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00110f0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00110f4:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00110f8:	50                   	push   eax
c00110f9:	50                   	push   eax
c00110fa:	52                   	push   edx
c00110fb:	68 7f 16 02 c0       	push   0xc002167f
c0011100:	e8 34 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011105:	83 c4 10             	add    esp,0x10
c0011108:	eb 1b                	jmp    c0011125 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001110a:	41                   	inc    ecx
c001110b:	83 f9 08             	cmp    ecx,0x8
c001110e:	75 ce                	jne    c00110de <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	be 01 00 00 00       	mov    esi,0x1
c0011118:	68 a0 16 02 c0       	push   0xc00216a0
c001111d:	e8 17 98 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011122:	83 c4 10             	add    esp,0x10
c0011125:	83 c4 0c             	add    esp,0xc
c0011128:	89 f0                	mov    eax,esi
c001112a:	5b                   	pop    ebx
c001112b:	5e                   	pop    esi
c001112c:	5f                   	pop    edi
c001112d:	5d                   	pop    ebp
c001112e:	c3                   	ret    

c001112f <KeCheckSignal(SigHandlerBlock*, int*)>:
c001112f:	55                   	push   ebp
c0011130:	57                   	push   edi
c0011131:	56                   	push   esi
c0011132:	53                   	push   ebx
c0011133:	51                   	push   ecx
c0011134:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011138:	85 db                	test   ebx,ebx
c001113a:	0f 84 bc 00 00 00    	je     c00111fc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011140:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011147:	0f 84 af 00 00 00    	je     c00111fc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001114d:	31 c9                	xor    ecx,ecx
c001114f:	bf 08 00 00 00       	mov    edi,0x8
c0011154:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001115a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001115d:	99                   	cdq    
c001115e:	f7 ff                	idiv   edi
c0011160:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011167:	85 ed                	test   ebp,ebp
c0011169:	0f 84 9e 00 00 00    	je     c001120d <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001116f:	89 e9                	mov    ecx,ebp
c0011171:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011177:	bf 01 00 00 00       	mov    edi,0x1
c001117c:	89 04 24             	mov    DWORD PTR [esp],eax
c001117f:	d3 e7                	shl    edi,cl
c0011181:	31 c9                	xor    ecx,ecx
c0011183:	b8 01 00 00 00       	mov    eax,0x1
c0011188:	d3 e0                	shl    eax,cl
c001118a:	85 04 24             	test   DWORD PTR [esp],eax
c001118d:	74 06                	je     c0011195 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001118f:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011193:	75 67                	jne    c00111fc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011195:	41                   	inc    ecx
c0011196:	83 f9 11             	cmp    ecx,0x11
c0011199:	75 e8                	jne    c0011183 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c001119b:	46                   	inc    esi
c001119c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001119f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00111a5:	09 f8                	or     eax,edi
c00111a7:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00111b2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00111b8:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00111bf:	31 c0                	xor    eax,eax
c00111c1:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00111c9:	74 09                	je     c00111d4 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00111cb:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00111d2:	eb 06                	jmp    c00111da <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00111d4:	40                   	inc    eax
c00111d5:	83 f8 08             	cmp    eax,0x8
c00111d8:	75 e7                	jne    c00111c1 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00111da:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00111dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00111e1:	83 fd 09             	cmp    ebp,0x9
c00111e4:	89 2a                	mov    DWORD PTR [edx],ebp
c00111e6:	75 07                	jne    c00111ef <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00111e8:	b8 b8 0f 01 c0       	mov    eax,0xc0010fb8
c00111ed:	eb 31                	jmp    c0011220 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00111ef:	83 f8 01             	cmp    eax,0x1
c00111f2:	75 0c                	jne    c0011200 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00111f4:	f7 d7                	not    edi
c00111f6:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00111fc:	31 c0                	xor    eax,eax
c00111fe:	eb 20                	jmp    c0011220 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011200:	85 c0                	test   eax,eax
c0011202:	75 1c                	jne    c0011220 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011204:	8b 04 ad a0 2a 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdd560]
c001120b:	eb 13                	jmp    c0011220 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001120d:	46                   	inc    esi
c001120e:	41                   	inc    ecx
c001120f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011215:	83 f9 08             	cmp    ecx,0x8
c0011218:	0f 85 36 ff ff ff    	jne    c0011154 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001121e:	eb dc                	jmp    c00111fc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011220:	5a                   	pop    edx
c0011221:	5b                   	pop    ebx
c0011222:	5e                   	pop    esi
c0011223:	5f                   	pop    edi
c0011224:	5d                   	pop    ebp
c0011225:	c3                   	ret    

c0011226 <KiCheckSignalZ>:
c0011226:	83 ec 10             	sub    esp,0x10
c0011229:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001122d:	50                   	push   eax
c001122e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011233:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011236:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001123c:	e8 ee fe ff ff       	call   c001112f <KeCheckSignal(SigHandlerBlock*, int*)>
c0011241:	5a                   	pop    edx
c0011242:	31 d2                	xor    edx,edx
c0011244:	59                   	pop    ecx
c0011245:	85 c0                	test   eax,eax
c0011247:	74 19                	je     c0011262 <KiCheckSignalZ+0x3c>
c0011249:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001124f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011252:	89 02                	mov    DWORD PTR [edx],eax
c0011254:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001125b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001125f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011262:	89 d0                	mov    eax,edx
c0011264:	83 c4 10             	add    esp,0x10
c0011267:	c3                   	ret    

c0011268 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011268:	56                   	push   esi
c0011269:	53                   	push   ebx
c001126a:	bb 01 00 00 00       	mov    ebx,0x1
c001126f:	52                   	push   edx
c0011270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011274:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011278:	d3 e3                	shl    ebx,cl
c001127a:	83 f9 10             	cmp    ecx,0x10
c001127d:	7f 08                	jg     c0011287 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001127f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011285:	75 10                	jne    c0011297 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011287:	83 ec 0c             	sub    esp,0xc
c001128a:	68 b1 16 02 c0       	push   0xc00216b1
c001128f:	e8 7d f9 ff ff       	call   c0010c11 <KePanic(char const*)>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	f7 d3                	not    ebx
c0011299:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001129f:	58                   	pop    eax
c00112a0:	5b                   	pop    ebx
c00112a1:	5e                   	pop    esi
c00112a2:	c3                   	ret    

c00112a3 <KiFinishSignalZ>:
c00112a3:	53                   	push   ebx
c00112a4:	83 ec 10             	sub    esp,0x10
c00112a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00112ab:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00112ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112b6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00112bc:	e8 a7 ff ff ff       	call   c0011268 <KeCompleteSignal(SigHandlerBlock*, int)>
c00112c1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00112c7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00112ce:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00112d5:	83 c4 18             	add    esp,0x18
c00112d8:	5b                   	pop    ebx
c00112d9:	c3                   	ret    

c00112da <SysSeekDir(regs*)>:
c00112da:	31 c0                	xor    eax,eax
c00112dc:	31 d2                	xor    edx,edx
c00112de:	c3                   	ret    

c00112df <SysTellDir(regs*)>:
c00112df:	31 c0                	xor    eax,eax
c00112e1:	31 d2                	xor    edx,edx
c00112e3:	c3                   	ret    

c00112e4 <SysVerify(regs*)>:
c00112e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e8:	31 d2                	xor    edx,edx
c00112ea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112ed:	c3                   	ret    

c00112ee <SysGetArgc(regs*)>:
c00112ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112f6:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00112fc:	89 c2                	mov    edx,eax
c00112fe:	c1 fa 1f             	sar    edx,0x1f
c0011301:	c3                   	ret    

c0011302 <SysTTYName(regs*)>:
c0011302:	b8 01 00 00 00       	mov    eax,0x1
c0011307:	31 d2                	xor    edx,edx
c0011309:	c3                   	ret    

c001130a <SysFormatDisk(regs*)>:
c001130a:	56                   	push   esi
c001130b:	53                   	push   ebx
c001130c:	83 ec 04             	sub    esp,0x4
c001130f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011313:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c0011319:	eb 28                	jmp    c0011343 <SysFormatDisk(regs*)+0x39>
c001131b:	83 ec 0c             	sub    esp,0xc
c001131e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011321:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011324:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011326:	51                   	push   ecx
c0011327:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001132a:	51                   	push   ecx
c001132b:	50                   	push   eax
c001132c:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0011333:	50                   	push   eax
c0011334:	53                   	push   ebx
c0011335:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011338:	83 c4 20             	add    esp,0x20
c001133b:	83 f8 08             	cmp    eax,0x8
c001133e:	75 14                	jne    c0011354 <SysFormatDisk(regs*)+0x4a>
c0011340:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011343:	85 db                	test   ebx,ebx
c0011345:	75 d4                	jne    c001131b <SysFormatDisk(regs*)+0x11>
c0011347:	83 c4 04             	add    esp,0x4
c001134a:	b8 03 00 00 00       	mov    eax,0x3
c001134f:	31 d2                	xor    edx,edx
c0011351:	5b                   	pop    ebx
c0011352:	5e                   	pop    esi
c0011353:	c3                   	ret    
c0011354:	85 c0                	test   eax,eax
c0011356:	74 1f                	je     c0011377 <SysFormatDisk(regs*)+0x6d>
c0011358:	83 f8 09             	cmp    eax,0x9
c001135b:	74 0d                	je     c001136a <SysFormatDisk(regs*)+0x60>
c001135d:	83 c4 04             	add    esp,0x4
c0011360:	b8 02 00 00 00       	mov    eax,0x2
c0011365:	31 d2                	xor    edx,edx
c0011367:	5b                   	pop    ebx
c0011368:	5e                   	pop    esi
c0011369:	c3                   	ret    
c001136a:	83 c4 04             	add    esp,0x4
c001136d:	b8 01 00 00 00       	mov    eax,0x1
c0011372:	31 d2                	xor    edx,edx
c0011374:	5b                   	pop    ebx
c0011375:	5e                   	pop    esi
c0011376:	c3                   	ret    
c0011377:	83 c4 04             	add    esp,0x4
c001137a:	31 c0                	xor    eax,eax
c001137c:	31 d2                	xor    edx,edx
c001137e:	5b                   	pop    ebx
c001137f:	5e                   	pop    esi
c0011380:	c3                   	ret    

c0011381 <SysSetDiskVolumeLabel(regs*)>:
c0011381:	56                   	push   esi
c0011382:	53                   	push   ebx
c0011383:	83 ec 04             	sub    esp,0x4
c0011386:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001138a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001138d:	83 f8 19             	cmp    eax,0x19
c0011390:	77 33                	ja     c00113c5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011392:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0011399:	85 c9                	test   ecx,ecx
c001139b:	74 28                	je     c00113c5 <SysSetDiskVolumeLabel(regs*)+0x44>
c001139d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00113a0:	85 db                	test   ebx,ebx
c00113a2:	74 21                	je     c00113c5 <SysSetDiskVolumeLabel(regs*)+0x44>
c00113a4:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00113aa:	85 d2                	test   edx,edx
c00113ac:	74 17                	je     c00113c5 <SysSetDiskVolumeLabel(regs*)+0x44>
c00113ae:	8b 32                	mov    esi,DWORD PTR [edx]
c00113b0:	53                   	push   ebx
c00113b1:	50                   	push   eax
c00113b2:	51                   	push   ecx
c00113b3:	52                   	push   edx
c00113b4:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00113b7:	83 c4 10             	add    esp,0x10
c00113ba:	89 c2                	mov    edx,eax
c00113bc:	83 c4 04             	add    esp,0x4
c00113bf:	c1 fa 1f             	sar    edx,0x1f
c00113c2:	5b                   	pop    ebx
c00113c3:	5e                   	pop    esi
c00113c4:	c3                   	ret    
c00113c5:	83 c4 04             	add    esp,0x4
c00113c8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d2:	5b                   	pop    ebx
c00113d3:	5e                   	pop    esi
c00113d4:	c3                   	ret    

c00113d5 <SysGetDiskVolumeLabel(regs*)>:
c00113d5:	57                   	push   edi
c00113d6:	56                   	push   esi
c00113d7:	53                   	push   ebx
c00113d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00113df:	83 fa 19             	cmp    edx,0x19
c00113e2:	77 3c                	ja     c0011420 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113e4:	8b 0c 95 20 84 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7be0]
c00113eb:	85 c9                	test   ecx,ecx
c00113ed:	74 31                	je     c0011420 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113ef:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113f2:	85 db                	test   ebx,ebx
c00113f4:	74 2a                	je     c0011420 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113f6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00113f9:	85 f6                	test   esi,esi
c00113fb:	74 23                	je     c0011420 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113fd:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011403:	85 c0                	test   eax,eax
c0011405:	74 19                	je     c0011420 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011407:	83 ec 0c             	sub    esp,0xc
c001140a:	8b 38                	mov    edi,DWORD PTR [eax]
c001140c:	56                   	push   esi
c001140d:	53                   	push   ebx
c001140e:	52                   	push   edx
c001140f:	51                   	push   ecx
c0011410:	50                   	push   eax
c0011411:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011414:	83 c4 20             	add    esp,0x20
c0011417:	89 c2                	mov    edx,eax
c0011419:	5b                   	pop    ebx
c001141a:	c1 fa 1f             	sar    edx,0x1f
c001141d:	5e                   	pop    esi
c001141e:	5f                   	pop    edi
c001141f:	c3                   	ret    
c0011420:	5b                   	pop    ebx
c0011421:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011426:	ba ff ff ff ff       	mov    edx,0xffffffff
c001142b:	5e                   	pop    esi
c001142c:	5f                   	pop    edi
c001142d:	c3                   	ret    

c001142e <SysShutdown(regs*)>:
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011435:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011438:	85 c0                	test   eax,eax
c001143a:	74 18                	je     c0011454 <SysShutdown(regs*)+0x26>
c001143c:	83 f8 01             	cmp    eax,0x1
c001143f:	74 38                	je     c0011479 <SysShutdown(regs*)+0x4b>
c0011441:	83 f8 02             	cmp    eax,0x2
c0011444:	74 24                	je     c001146a <SysShutdown(regs*)+0x3c>
c0011446:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001144b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011450:	83 c4 0c             	add    esp,0xc
c0011453:	c3                   	ret    
c0011454:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011459:	8b 10                	mov    edx,DWORD PTR [eax]
c001145b:	6a 00                	push   0x0
c001145d:	6a 00                	push   0x0
c001145f:	6a 00                	push   0x0
c0011461:	50                   	push   eax
c0011462:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	eb dc                	jmp    c0011446 <SysShutdown(regs*)+0x18>
c001146a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001146f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011471:	6a 00                	push   0x0
c0011473:	6a 00                	push   0x0
c0011475:	6a 01                	push   0x1
c0011477:	eb e8                	jmp    c0011461 <SysShutdown(regs*)+0x33>
c0011479:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c001147e:	85 c0                	test   eax,eax
c0011480:	74 02                	je     c0011484 <SysShutdown(regs*)+0x56>
c0011482:	ff d0                	call   eax
c0011484:	31 c0                	xor    eax,eax
c0011486:	31 d2                	xor    edx,edx
c0011488:	83 c4 0c             	add    esp,0xc
c001148b:	c3                   	ret    

c001148c <SysRealpath(regs*)>:
c001148c:	83 ec 0c             	sub    esp,0xc
c001148f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011493:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011496:	85 d2                	test   edx,edx
c0011498:	74 07                	je     c00114a1 <SysRealpath(regs*)+0x15>
c001149a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001149d:	85 c0                	test   eax,eax
c001149f:	75 0b                	jne    c00114ac <SysRealpath(regs*)+0x20>
c00114a1:	b8 01 00 00 00       	mov    eax,0x1
c00114a6:	31 d2                	xor    edx,edx
c00114a8:	83 c4 0c             	add    esp,0xc
c00114ab:	c3                   	ret    
c00114ac:	83 ec 04             	sub    esp,0x4
c00114af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00114b5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00114b8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00114be:	51                   	push   ecx
c00114bf:	52                   	push   edx
c00114c0:	50                   	push   eax
c00114c1:	e8 14 9b ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	31 c0                	xor    eax,eax
c00114cb:	31 d2                	xor    edx,edx
c00114cd:	83 c4 0c             	add    esp,0xc
c00114d0:	c3                   	ret    

c00114d1 <SysReadDir(regs*)>:
c00114d1:	53                   	push   ebx
c00114d2:	83 ec 18             	sub    esp,0x18
c00114d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114dc:	83 f8 02             	cmp    eax,0x2
c00114df:	76 61                	jbe    c0011542 <SysReadDir(regs*)+0x71>
c00114e1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114e8:	77 49                	ja     c0011533 <SysReadDir(regs*)+0x62>
c00114ea:	83 ec 0c             	sub    esp,0xc
c00114ed:	50                   	push   eax
c00114ee:	e8 b4 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00114f3:	83 c4 10             	add    esp,0x10
c00114f6:	85 c0                	test   eax,eax
c00114f8:	74 39                	je     c0011533 <SysReadDir(regs*)+0x62>
c00114fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	8b 10                	mov    edx,DWORD PTR [eax]
c0011507:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001150b:	51                   	push   ecx
c001150c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001150f:	51                   	push   ecx
c0011510:	6a 00                	push   0x0
c0011512:	68 10 01 00 00       	push   0x110
c0011517:	50                   	push   eax
c0011518:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001151b:	83 c4 20             	add    esp,0x20
c001151e:	85 c0                	test   eax,eax
c0011520:	74 29                	je     c001154b <SysReadDir(regs*)+0x7a>
c0011522:	83 f8 07             	cmp    eax,0x7
c0011525:	74 1b                	je     c0011542 <SysReadDir(regs*)+0x71>
c0011527:	b8 02 00 00 00       	mov    eax,0x2
c001152c:	31 d2                	xor    edx,edx
c001152e:	83 c4 18             	add    esp,0x18
c0011531:	5b                   	pop    ebx
c0011532:	c3                   	ret    
c0011533:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011538:	ba ff ff ff ff       	mov    edx,0xffffffff
c001153d:	83 c4 18             	add    esp,0x18
c0011540:	5b                   	pop    ebx
c0011541:	c3                   	ret    
c0011542:	b8 01 00 00 00       	mov    eax,0x1
c0011547:	31 d2                	xor    edx,edx
c0011549:	eb e3                	jmp    c001152e <SysReadDir(regs*)+0x5d>
c001154b:	31 c0                	xor    eax,eax
c001154d:	31 d2                	xor    edx,edx
c001154f:	eb dd                	jmp    c001152e <SysReadDir(regs*)+0x5d>

c0011551 <SysIsATTY(regs*)>:
c0011551:	83 ec 0c             	sub    esp,0xc
c0011554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011558:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001155b:	83 f8 02             	cmp    eax,0x2
c001155e:	76 07                	jbe    c0011567 <SysIsATTY(regs*)+0x16>
c0011560:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011565:	75 26                	jne    c001158d <SysIsATTY(regs*)+0x3c>
c0011567:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001156c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001156f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011575:	85 c0                	test   eax,eax
c0011577:	74 24                	je     c001159d <SysIsATTY(regs*)+0x4c>
c0011579:	83 ec 0c             	sub    esp,0xc
c001157c:	8b 10                	mov    edx,DWORD PTR [eax]
c001157e:	50                   	push   eax
c001157f:	ff 12                	call   DWORD PTR [edx]
c0011581:	31 d2                	xor    edx,edx
c0011583:	0f b6 c0             	movzx  eax,al
c0011586:	83 c4 10             	add    esp,0x10
c0011589:	83 c4 0c             	add    esp,0xc
c001158c:	c3                   	ret    
c001158d:	83 ec 0c             	sub    esp,0xc
c0011590:	50                   	push   eax
c0011591:	e8 11 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011596:	83 c4 10             	add    esp,0x10
c0011599:	85 c0                	test   eax,eax
c001159b:	75 dc                	jne    c0011579 <SysIsATTY(regs*)+0x28>
c001159d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a7:	83 c4 0c             	add    esp,0xc
c00115aa:	c3                   	ret    

c00115ab <SysSeek(regs*)>:
c00115ab:	53                   	push   ebx
c00115ac:	83 ec 08             	sub    esp,0x8
c00115af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115b6:	8d 50 fd             	lea    edx,[eax-0x3]
c00115b9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115bf:	77 32                	ja     c00115f3 <SysSeek(regs*)+0x48>
c00115c1:	83 ec 0c             	sub    esp,0xc
c00115c4:	50                   	push   eax
c00115c5:	e8 dd 7e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00115ca:	83 c4 0c             	add    esp,0xc
c00115cd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115d0:	31 db                	xor    ebx,ebx
c00115d2:	53                   	push   ebx
c00115d3:	51                   	push   ecx
c00115d4:	50                   	push   eax
c00115d5:	e8 30 9d ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00115da:	83 c4 10             	add    esp,0x10
c00115dd:	85 c0                	test   eax,eax
c00115df:	0f 95 c0             	setne  al
c00115e2:	31 d2                	xor    edx,edx
c00115e4:	0f b6 c0             	movzx  eax,al
c00115e7:	f7 d8                	neg    eax
c00115e9:	83 d2 00             	adc    edx,0x0
c00115ec:	83 c4 08             	add    esp,0x8
c00115ef:	f7 da                	neg    edx
c00115f1:	5b                   	pop    ebx
c00115f2:	c3                   	ret    
c00115f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115fd:	83 c4 08             	add    esp,0x8
c0011600:	5b                   	pop    ebx
c0011601:	c3                   	ret    

c0011602 <SysTell(regs*)>:
c0011602:	53                   	push   ebx
c0011603:	83 ec 08             	sub    esp,0x8
c0011606:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001160a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001160d:	83 f8 02             	cmp    eax,0x2
c0011610:	76 4e                	jbe    c0011660 <SysTell(regs*)+0x5e>
c0011612:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011617:	76 19                	jbe    c0011632 <SysTell(regs*)+0x30>
c0011619:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001161c:	31 d2                	xor    edx,edx
c001161e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011624:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001162b:	31 c0                	xor    eax,eax
c001162d:	83 c4 08             	add    esp,0x8
c0011630:	5b                   	pop    ebx
c0011631:	c3                   	ret    
c0011632:	83 ec 0c             	sub    esp,0xc
c0011635:	50                   	push   eax
c0011636:	e8 6c 7e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c001163b:	5a                   	pop    edx
c001163c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001163f:	59                   	pop    ecx
c0011640:	53                   	push   ebx
c0011641:	50                   	push   eax
c0011642:	e8 6f 9d ff ff       	call   c000b3b6 <File::tell(unsigned long long*)>
c0011647:	83 c4 10             	add    esp,0x10
c001164a:	85 c0                	test   eax,eax
c001164c:	0f 95 c0             	setne  al
c001164f:	31 d2                	xor    edx,edx
c0011651:	0f b6 c0             	movzx  eax,al
c0011654:	f7 d8                	neg    eax
c0011656:	83 d2 00             	adc    edx,0x0
c0011659:	83 c4 08             	add    esp,0x8
c001165c:	f7 da                	neg    edx
c001165e:	5b                   	pop    ebx
c001165f:	c3                   	ret    
c0011660:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011665:	ba ff ff ff ff       	mov    edx,0xffffffff
c001166a:	83 c4 08             	add    esp,0x8
c001166d:	5b                   	pop    ebx
c001166e:	c3                   	ret    

c001166f <SysSize(regs*)>:
c001166f:	53                   	push   ebx
c0011670:	83 ec 18             	sub    esp,0x18
c0011673:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011677:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001167a:	83 f8 02             	cmp    eax,0x2
c001167d:	76 54                	jbe    c00116d3 <SysSize(regs*)+0x64>
c001167f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011684:	76 19                	jbe    c001169f <SysSize(regs*)+0x30>
c0011686:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011689:	31 d2                	xor    edx,edx
c001168b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011691:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011698:	31 c0                	xor    eax,eax
c001169a:	83 c4 18             	add    esp,0x18
c001169d:	5b                   	pop    ebx
c001169e:	c3                   	ret    
c001169f:	83 ec 0c             	sub    esp,0xc
c00116a2:	50                   	push   eax
c00116a3:	e8 ff 7d ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00116a8:	83 c4 0c             	add    esp,0xc
c00116ab:	8d 54 24 13          	lea    edx,[esp+0x13]
c00116af:	52                   	push   edx
c00116b0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116b3:	52                   	push   edx
c00116b4:	50                   	push   eax
c00116b5:	e8 94 9e ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c00116ba:	83 c4 10             	add    esp,0x10
c00116bd:	85 c0                	test   eax,eax
c00116bf:	0f 95 c0             	setne  al
c00116c2:	31 d2                	xor    edx,edx
c00116c4:	0f b6 c0             	movzx  eax,al
c00116c7:	f7 d8                	neg    eax
c00116c9:	83 d2 00             	adc    edx,0x0
c00116cc:	83 c4 18             	add    esp,0x18
c00116cf:	f7 da                	neg    edx
c00116d1:	5b                   	pop    ebx
c00116d2:	c3                   	ret    
c00116d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116dd:	83 c4 18             	add    esp,0x18
c00116e0:	5b                   	pop    ebx
c00116e1:	c3                   	ret    

c00116e2 <SysSizeFromFilename(regs*)>:
c00116e2:	57                   	push   edi
c00116e3:	56                   	push   esi
c00116e4:	53                   	push   ebx
c00116e5:	83 ec 20             	sub    esp,0x20
c00116e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116ec:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00116ef:	83 fb 02             	cmp    ebx,0x2
c00116f2:	0f 86 8a 00 00 00    	jbe    c0011782 <SysSizeFromFilename(regs*)+0xa0>
c00116f8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116fe:	76 1b                	jbe    c001171b <SysSizeFromFilename(regs*)+0x39>
c0011700:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011703:	31 d2                	xor    edx,edx
c0011705:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001170b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011712:	83 c4 20             	add    esp,0x20
c0011715:	31 c0                	xor    eax,eax
c0011717:	5b                   	pop    ebx
c0011718:	5e                   	pop    esi
c0011719:	5f                   	pop    edi
c001171a:	c3                   	ret    
c001171b:	83 ec 0c             	sub    esp,0xc
c001171e:	68 14 01 00 00       	push   0x114
c0011723:	e8 86 63 ff ff       	call   c0007aae <malloc>
c0011728:	83 c4 0c             	add    esp,0xc
c001172b:	89 c7                	mov    edi,eax
c001172d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011732:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011735:	50                   	push   eax
c0011736:	53                   	push   ebx
c0011737:	57                   	push   edi
c0011738:	e8 53 9a ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001173d:	83 c4 0c             	add    esp,0xc
c0011740:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011744:	50                   	push   eax
c0011745:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011748:	52                   	push   edx
c0011749:	57                   	push   edi
c001174a:	e8 ff 9d ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c001174f:	83 c4 10             	add    esp,0x10
c0011752:	85 ff                	test   edi,edi
c0011754:	74 14                	je     c001176a <SysSizeFromFilename(regs*)+0x88>
c0011756:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001175a:	8b 17                	mov    edx,DWORD PTR [edi]
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	57                   	push   edi
c0011760:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011763:	83 c4 10             	add    esp,0x10
c0011766:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001176a:	85 c0                	test   eax,eax
c001176c:	0f 95 c0             	setne  al
c001176f:	31 d2                	xor    edx,edx
c0011771:	0f b6 c0             	movzx  eax,al
c0011774:	f7 d8                	neg    eax
c0011776:	83 d2 00             	adc    edx,0x0
c0011779:	83 c4 20             	add    esp,0x20
c001177c:	f7 da                	neg    edx
c001177e:	5b                   	pop    ebx
c001177f:	5e                   	pop    esi
c0011780:	5f                   	pop    edi
c0011781:	c3                   	ret    
c0011782:	83 c4 20             	add    esp,0x20
c0011785:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001178a:	5b                   	pop    ebx
c001178b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011790:	5e                   	pop    esi
c0011791:	5f                   	pop    edi
c0011792:	c3                   	ret    

c0011793 <SysClose(regs*)>:
c0011793:	53                   	push   ebx
c0011794:	83 ec 08             	sub    esp,0x8
c0011797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001179b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001179e:	83 f8 02             	cmp    eax,0x2
c00117a1:	76 41                	jbe    c00117e4 <SysClose(regs*)+0x51>
c00117a3:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00117a9:	83 fa 01             	cmp    edx,0x1
c00117ac:	76 2d                	jbe    c00117db <SysClose(regs*)+0x48>
c00117ae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117b3:	77 2f                	ja     c00117e4 <SysClose(regs*)+0x51>
c00117b5:	83 ec 0c             	sub    esp,0xc
c00117b8:	50                   	push   eax
c00117b9:	e8 e9 7c ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00117be:	89 c3                	mov    ebx,eax
c00117c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00117c3:	e8 e2 9a ff ff       	call   c000b2aa <File::close()>
c00117c8:	83 c4 10             	add    esp,0x10
c00117cb:	85 db                	test   ebx,ebx
c00117cd:	74 0c                	je     c00117db <SysClose(regs*)+0x48>
c00117cf:	83 ec 0c             	sub    esp,0xc
c00117d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117d4:	53                   	push   ebx
c00117d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	31 c0                	xor    eax,eax
c00117dd:	31 d2                	xor    edx,edx
c00117df:	83 c4 08             	add    esp,0x8
c00117e2:	5b                   	pop    ebx
c00117e3:	c3                   	ret    
c00117e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117ee:	83 c4 08             	add    esp,0x8
c00117f1:	5b                   	pop    ebx
c00117f2:	c3                   	ret    

c00117f3 <SysOpenDir(regs*)>:
c00117f3:	56                   	push   esi
c00117f4:	53                   	push   ebx
c00117f5:	83 ec 04             	sub    esp,0x4
c00117f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117fc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117ff:	85 c9                	test   ecx,ecx
c0011801:	74 5d                	je     c0011860 <SysOpenDir(regs*)+0x6d>
c0011803:	83 ec 0c             	sub    esp,0xc
c0011806:	68 14 01 00 00       	push   0x114
c001180b:	e8 9e 62 ff ff       	call   c0007aae <malloc>
c0011810:	83 c4 0c             	add    esp,0xc
c0011813:	89 c6                	mov    esi,eax
c0011815:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001181a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001181d:	50                   	push   eax
c001181e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011821:	52                   	push   edx
c0011822:	56                   	push   esi
c0011823:	e8 e4 9e ff ff       	call   c000b70c <Directory::Directory(char const*, Process*)>
c0011828:	83 c4 10             	add    esp,0x10
c001182b:	85 f6                	test   esi,esi
c001182d:	74 31                	je     c0011860 <SysOpenDir(regs*)+0x6d>
c001182f:	83 ec 0c             	sub    esp,0xc
c0011832:	56                   	push   esi
c0011833:	e8 90 9f ff ff       	call   c000b7c8 <Directory::open()>
c0011838:	83 c4 10             	add    esp,0x10
c001183b:	85 c0                	test   eax,eax
c001183d:	75 21                	jne    c0011860 <SysOpenDir(regs*)+0x6d>
c001183f:	83 ec 0c             	sub    esp,0xc
c0011842:	56                   	push   esi
c0011843:	e8 62 79 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011848:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001184b:	83 c4 10             	add    esp,0x10
c001184e:	89 02                	mov    DWORD PTR [edx],eax
c0011850:	c1 f8 1f             	sar    eax,0x1f
c0011853:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011856:	83 c4 04             	add    esp,0x4
c0011859:	31 c0                	xor    eax,eax
c001185b:	31 d2                	xor    edx,edx
c001185d:	5b                   	pop    ebx
c001185e:	5e                   	pop    esi
c001185f:	c3                   	ret    
c0011860:	83 c4 04             	add    esp,0x4
c0011863:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011868:	ba ff ff ff ff       	mov    edx,0xffffffff
c001186d:	5b                   	pop    ebx
c001186e:	5e                   	pop    esi
c001186f:	c3                   	ret    

c0011870 <SysMakeDir(regs*)>:
c0011870:	56                   	push   esi
c0011871:	53                   	push   ebx
c0011872:	83 ec 10             	sub    esp,0x10
c0011875:	68 14 01 00 00       	push   0x114
c001187a:	e8 2f 62 ff ff       	call   c0007aae <malloc>
c001187f:	83 c4 0c             	add    esp,0xc
c0011882:	89 c3                	mov    ebx,eax
c0011884:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011889:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001188c:	50                   	push   eax
c001188d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011891:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011894:	52                   	push   edx
c0011895:	53                   	push   ebx
c0011896:	e8 71 9e ff ff       	call   c000b70c <Directory::Directory(char const*, Process*)>
c001189b:	83 c4 10             	add    esp,0x10
c001189e:	85 db                	test   ebx,ebx
c00118a0:	74 2c                	je     c00118ce <SysMakeDir(regs*)+0x5e>
c00118a2:	83 ec 0c             	sub    esp,0xc
c00118a5:	53                   	push   ebx
c00118a6:	e8 fd a0 ff ff       	call   c000b9a8 <Directory::create()>
c00118ab:	89 c6                	mov    esi,eax
c00118ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118b5:	83 c4 10             	add    esp,0x10
c00118b8:	31 c0                	xor    eax,eax
c00118ba:	85 f6                	test   esi,esi
c00118bc:	0f 95 c0             	setne  al
c00118bf:	31 d2                	xor    edx,edx
c00118c1:	f7 d8                	neg    eax
c00118c3:	83 d2 00             	adc    edx,0x0
c00118c6:	83 c4 04             	add    esp,0x4
c00118c9:	f7 da                	neg    edx
c00118cb:	5b                   	pop    ebx
c00118cc:	5e                   	pop    esi
c00118cd:	c3                   	ret    
c00118ce:	83 c4 04             	add    esp,0x4
c00118d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118db:	5b                   	pop    ebx
c00118dc:	5e                   	pop    esi
c00118dd:	c3                   	ret    

c00118de <SysCloseDir(regs*)>:
c00118de:	53                   	push   ebx
c00118df:	83 ec 08             	sub    esp,0x8
c00118e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118e9:	8d 50 fd             	lea    edx,[eax-0x3]
c00118ec:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00118f2:	77 2f                	ja     c0011923 <SysCloseDir(regs*)+0x45>
c00118f4:	83 ec 0c             	sub    esp,0xc
c00118f7:	50                   	push   eax
c00118f8:	e8 aa 7b ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00118fd:	89 c3                	mov    ebx,eax
c00118ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0011902:	e8 1d 9f ff ff       	call   c000b824 <Directory::close()>
c0011907:	83 c4 10             	add    esp,0x10
c001190a:	85 db                	test   ebx,ebx
c001190c:	74 0c                	je     c001191a <SysCloseDir(regs*)+0x3c>
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011913:	53                   	push   ebx
c0011914:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011917:	83 c4 10             	add    esp,0x10
c001191a:	31 c0                	xor    eax,eax
c001191c:	31 d2                	xor    edx,edx
c001191e:	83 c4 08             	add    esp,0x8
c0011921:	5b                   	pop    ebx
c0011922:	c3                   	ret    
c0011923:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011928:	ba ff ff ff ff       	mov    edx,0xffffffff
c001192d:	83 c4 08             	add    esp,0x8
c0011930:	5b                   	pop    ebx
c0011931:	c3                   	ret    

c0011932 <SysWait(regs*)>:
c0011932:	83 ec 10             	sub    esp,0x10
c0011935:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011939:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001193c:	52                   	push   edx
c001193d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011940:	51                   	push   ecx
c0011941:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011944:	50                   	push   eax
c0011945:	e8 d2 3d 00 00       	call   c001571c <waitTask(int, int*, int)>
c001194a:	83 c4 1c             	add    esp,0x1c
c001194d:	89 c2                	mov    edx,eax
c001194f:	c1 fa 1f             	sar    edx,0x1f
c0011952:	c3                   	ret    

c0011953 <SysNotImpl(regs*)>:
c0011953:	83 ec 18             	sub    esp,0x18
c0011956:	68 c2 16 02 c0       	push   0xc00216c2
c001195b:	e8 b1 f2 ff ff       	call   c0010c11 <KePanic(char const*)>
c0011960:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011965:	ba ff ff ff ff       	mov    edx,0xffffffff
c001196a:	83 c4 1c             	add    esp,0x1c
c001196d:	c3                   	ret    

c001196e <SysPanic(regs*)>:
c001196e:	83 ec 18             	sub    esp,0x18
c0011971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011975:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011978:	50                   	push   eax
c0011979:	e8 93 f2 ff ff       	call   c0010c11 <KePanic(char const*)>
c001197e:	b8 01 00 00 00       	mov    eax,0x1
c0011983:	31 d2                	xor    edx,edx
c0011985:	83 c4 1c             	add    esp,0x1c
c0011988:	c3                   	ret    

c0011989 <SysRmdir(regs*)>:
c0011989:	56                   	push   esi
c001198a:	53                   	push   ebx
c001198b:	83 ec 20             	sub    esp,0x20
c001198e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011992:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011995:	68 14 01 00 00       	push   0x114
c001199a:	e8 0f 61 ff ff       	call   c0007aae <malloc>
c001199f:	83 c4 0c             	add    esp,0xc
c00119a2:	89 c3                	mov    ebx,eax
c00119a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119ac:	50                   	push   eax
c00119ad:	56                   	push   esi
c00119ae:	53                   	push   ebx
c00119af:	e8 dc 97 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00119b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119b7:	e8 5e 9a ff ff       	call   c000b41a <File::unlink()>
c00119bc:	83 c4 10             	add    esp,0x10
c00119bf:	85 db                	test   ebx,ebx
c00119c1:	74 14                	je     c00119d7 <SysRmdir(regs*)+0x4e>
c00119c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119c9:	83 ec 0c             	sub    esp,0xc
c00119cc:	53                   	push   ebx
c00119cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119d0:	83 c4 10             	add    esp,0x10
c00119d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119d7:	85 c0                	test   eax,eax
c00119d9:	0f 95 c0             	setne  al
c00119dc:	31 d2                	xor    edx,edx
c00119de:	0f b6 c0             	movzx  eax,al
c00119e1:	f7 d8                	neg    eax
c00119e3:	83 d2 00             	adc    edx,0x0
c00119e6:	83 c4 14             	add    esp,0x14
c00119e9:	f7 da                	neg    edx
c00119eb:	5b                   	pop    ebx
c00119ec:	5e                   	pop    esi
c00119ed:	c3                   	ret    

c00119ee <SysUnlink(regs*)>:
c00119ee:	56                   	push   esi
c00119ef:	53                   	push   ebx
c00119f0:	83 ec 20             	sub    esp,0x20
c00119f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119f7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119fa:	68 14 01 00 00       	push   0x114
c00119ff:	e8 aa 60 ff ff       	call   c0007aae <malloc>
c0011a04:	83 c4 0c             	add    esp,0xc
c0011a07:	89 c3                	mov    ebx,eax
c0011a09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a11:	50                   	push   eax
c0011a12:	56                   	push   esi
c0011a13:	53                   	push   ebx
c0011a14:	e8 77 97 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0011a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a1c:	e8 f9 99 ff ff       	call   c000b41a <File::unlink()>
c0011a21:	83 c4 10             	add    esp,0x10
c0011a24:	85 db                	test   ebx,ebx
c0011a26:	74 14                	je     c0011a3c <SysUnlink(regs*)+0x4e>
c0011a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a2c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a2e:	83 ec 0c             	sub    esp,0xc
c0011a31:	53                   	push   ebx
c0011a32:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a3c:	85 c0                	test   eax,eax
c0011a3e:	0f 95 c0             	setne  al
c0011a41:	31 d2                	xor    edx,edx
c0011a43:	0f b6 c0             	movzx  eax,al
c0011a46:	f7 d8                	neg    eax
c0011a48:	83 d2 00             	adc    edx,0x0
c0011a4b:	83 c4 14             	add    esp,0x14
c0011a4e:	f7 da                	neg    edx
c0011a50:	5b                   	pop    ebx
c0011a51:	5e                   	pop    esi
c0011a52:	c3                   	ret    

c0011a53 <SysGetArgv(regs*)>:
c0011a53:	83 ec 0c             	sub    esp,0xc
c0011a56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a5a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a5d:	85 c0                	test   eax,eax
c0011a5f:	78 2c                	js     c0011a8d <SysGetArgv(regs*)+0x3a>
c0011a61:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a67:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a6a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a70:	7d 1b                	jge    c0011a8d <SysGetArgv(regs*)+0x3a>
c0011a72:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a79:	85 c0                	test   eax,eax
c0011a7b:	74 18                	je     c0011a95 <SysGetArgv(regs*)+0x42>
c0011a7d:	83 ec 08             	sub    esp,0x8
c0011a80:	50                   	push   eax
c0011a81:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a84:	50                   	push   eax
c0011a85:	e8 b6 eb fe ff       	call   c0000640 <strcpy>
c0011a8a:	83 c4 10             	add    esp,0x10
c0011a8d:	31 c0                	xor    eax,eax
c0011a8f:	31 d2                	xor    edx,edx
c0011a91:	83 c4 0c             	add    esp,0xc
c0011a94:	c3                   	ret    
c0011a95:	b8 01 00 00 00       	mov    eax,0x1
c0011a9a:	31 d2                	xor    edx,edx
c0011a9c:	83 c4 0c             	add    esp,0xc
c0011a9f:	c3                   	ret    

c0011aa0 <SysUSleep(regs*)>:
c0011aa0:	83 ec 1c             	sub    esp,0x1c
c0011aa3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011aa7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011aaa:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011aad:	6a 00                	push   0x0
c0011aaf:	6a 64                	push   0x64
c0011ab1:	52                   	push   edx
c0011ab2:	50                   	push   eax
c0011ab3:	e8 88 d0 00 00       	call   c001eb40 <__udivdi3>
c0011ab8:	83 c4 14             	add    esp,0x14
c0011abb:	50                   	push   eax
c0011abc:	e8 3f 3d 00 00       	call   c0015800 <milliTenthSleep(unsigned int)>
c0011ac1:	31 c0                	xor    eax,eax
c0011ac3:	31 d2                	xor    edx,edx
c0011ac5:	83 c4 1c             	add    esp,0x1c
c0011ac8:	c3                   	ret    

c0011ac9 <SysSpawn(regs*)>:
c0011ac9:	56                   	push   esi
c0011aca:	53                   	push   ebx
c0011acb:	83 ec 04             	sub    esp,0x4
c0011ace:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ad2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011ad5:	85 f6                	test   esi,esi
c0011ad7:	75 0a                	jne    c0011ae3 <SysSpawn(regs*)+0x1a>
c0011ad9:	83 c4 04             	add    esp,0x4
c0011adc:	31 c0                	xor    eax,eax
c0011ade:	31 d2                	xor    edx,edx
c0011ae0:	5b                   	pop    ebx
c0011ae1:	5e                   	pop    esi
c0011ae2:	c3                   	ret    
c0011ae3:	83 ec 0c             	sub    esp,0xc
c0011ae6:	68 24 07 00 00       	push   0x724
c0011aeb:	e8 be 5f ff ff       	call   c0007aae <malloc>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011af6:	89 c6                	mov    esi,eax
c0011af8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011afb:	85 c9                	test   ecx,ecx
c0011afd:	75 39                	jne    c0011b38 <SysSpawn(regs*)+0x6f>
c0011aff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b07:	52                   	push   edx
c0011b08:	50                   	push   eax
c0011b09:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011b0c:	50                   	push   eax
c0011b0d:	56                   	push   esi
c0011b0e:	e8 3d 33 00 00       	call   c0014e50 <Process::Process(char const*, Process*, char**)>
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011b1d:	75 ba                	jne    c0011ad9 <SysSpawn(regs*)+0x10>
c0011b1f:	83 ec 0c             	sub    esp,0xc
c0011b22:	56                   	push   esi
c0011b23:	e8 64 38 00 00       	call   c001538c <Process::createUserThread()>
c0011b28:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b2a:	83 c4 10             	add    esp,0x10
c0011b2d:	89 c2                	mov    edx,eax
c0011b2f:	83 c4 04             	add    esp,0x4
c0011b32:	c1 fa 1f             	sar    edx,0x1f
c0011b35:	5b                   	pop    ebx
c0011b36:	5e                   	pop    esi
c0011b37:	c3                   	ret    
c0011b38:	31 c0                	xor    eax,eax
c0011b3a:	eb cb                	jmp    c0011b07 <SysSpawn(regs*)+0x3e>

c0011b3c <SysGetEnv(regs*)>:
c0011b3c:	57                   	push   edi
c0011b3d:	56                   	push   esi
c0011b3e:	53                   	push   ebx
c0011b3f:	83 ec 1c             	sub    esp,0x1c
c0011b42:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b4b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b4e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b51:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011b54:	51                   	push   ecx
c0011b55:	e8 6f ef ff ff       	call   c0010ac9 <KeGetProcessTotalEnvCount(Process*)>
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	39 c7                	cmp    edi,eax
c0011b5f:	7c 14                	jl     c0011b75 <SysGetEnv(regs*)+0x39>
c0011b61:	85 f6                	test   esi,esi
c0011b63:	75 0b                	jne    c0011b70 <SysGetEnv(regs*)+0x34>
c0011b65:	83 c4 10             	add    esp,0x10
c0011b68:	31 c0                	xor    eax,eax
c0011b6a:	5b                   	pop    ebx
c0011b6b:	31 d2                	xor    edx,edx
c0011b6d:	5e                   	pop    esi
c0011b6e:	5f                   	pop    edi
c0011b6f:	c3                   	ret    
c0011b70:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b73:	eb f0                	jmp    c0011b65 <SysGetEnv(regs*)+0x29>
c0011b75:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b79:	83 ec 04             	sub    esp,0x4
c0011b7c:	57                   	push   edi
c0011b7d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b83:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011b86:	57                   	push   edi
c0011b87:	50                   	push   eax
c0011b88:	e8 5c ef ff ff       	call   c0010ae9 <KeGetProcessEnvPair(Process*, int)>
c0011b8d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b94:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b98:	83 c4 0c             	add    esp,0xc
c0011b9b:	85 d2                	test   edx,edx
c0011b9d:	75 23                	jne    c0011bc2 <SysGetEnv(regs*)+0x86>
c0011b9f:	83 ec 0c             	sub    esp,0xc
c0011ba2:	50                   	push   eax
c0011ba3:	e8 c8 e9 fe ff       	call   c0000570 <strlen>
c0011ba8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011bab:	89 c3                	mov    ebx,eax
c0011bad:	e8 be e9 fe ff       	call   c0000570 <strlen>
c0011bb2:	83 c4 10             	add    esp,0x10
c0011bb5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	31 d2                	xor    edx,edx
c0011bbe:	5b                   	pop    ebx
c0011bbf:	5e                   	pop    esi
c0011bc0:	5f                   	pop    edi
c0011bc1:	c3                   	ret    
c0011bc2:	83 ec 08             	sub    esp,0x8
c0011bc5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011bc8:	50                   	push   eax
c0011bc9:	56                   	push   esi
c0011bca:	e8 71 ea fe ff       	call   c0000640 <strcpy>
c0011bcf:	58                   	pop    eax
c0011bd0:	5a                   	pop    edx
c0011bd1:	68 dc 16 02 c0       	push   0xc00216dc
c0011bd6:	56                   	push   esi
c0011bd7:	e8 64 ec fe ff       	call   c0000840 <strcat>
c0011bdc:	59                   	pop    ecx
c0011bdd:	5b                   	pop    ebx
c0011bde:	57                   	push   edi
c0011bdf:	56                   	push   esi
c0011be0:	e8 5b ec fe ff       	call   c0000840 <strcat>
c0011be5:	83 c4 10             	add    esp,0x10
c0011be8:	e9 78 ff ff ff       	jmp    c0011b65 <SysGetEnv(regs*)+0x29>

c0011bed <SysSetFatAttrib(regs*)>:
c0011bed:	57                   	push   edi
c0011bee:	56                   	push   esi
c0011bef:	53                   	push   ebx
c0011bf0:	83 ec 1c             	sub    esp,0x1c
c0011bf3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011bf7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011bfa:	68 14 01 00 00       	push   0x114
c0011bff:	e8 aa 5e ff ff       	call   c0007aae <malloc>
c0011c04:	83 c4 0c             	add    esp,0xc
c0011c07:	89 c3                	mov    ebx,eax
c0011c09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c11:	50                   	push   eax
c0011c12:	57                   	push   edi
c0011c13:	53                   	push   ebx
c0011c14:	e8 77 95 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0011c19:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c1c:	83 c4 0c             	add    esp,0xc
c0011c1f:	0f b6 d4             	movzx  edx,ah
c0011c22:	0f b6 c0             	movzx  eax,al
c0011c25:	52                   	push   edx
c0011c26:	50                   	push   eax
c0011c27:	53                   	push   ebx
c0011c28:	e8 87 98 ff ff       	call   c000b4b4 <File::chfatattr(unsigned char, unsigned char)>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	85 db                	test   ebx,ebx
c0011c32:	74 14                	je     c0011c48 <SysSetFatAttrib(regs*)+0x5b>
c0011c34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c38:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c3a:	83 ec 0c             	sub    esp,0xc
c0011c3d:	53                   	push   ebx
c0011c3e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c41:	83 c4 10             	add    esp,0x10
c0011c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c48:	85 c0                	test   eax,eax
c0011c4a:	0f 95 c0             	setne  al
c0011c4d:	31 d2                	xor    edx,edx
c0011c4f:	0f b6 c0             	movzx  eax,al
c0011c52:	f7 d8                	neg    eax
c0011c54:	83 d2 00             	adc    edx,0x0
c0011c57:	83 c4 10             	add    esp,0x10
c0011c5a:	f7 da                	neg    edx
c0011c5c:	5b                   	pop    ebx
c0011c5d:	5e                   	pop    esi
c0011c5e:	5f                   	pop    edi
c0011c5f:	c3                   	ret    

c0011c60 <SysPipe(regs*)>:
c0011c60:	57                   	push   edi
c0011c61:	56                   	push   esi
c0011c62:	53                   	push   ebx
c0011c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c67:	83 ec 0c             	sub    esp,0xc
c0011c6a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c6d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c70:	6a 20                	push   0x20
c0011c72:	e8 37 5e ff ff       	call   c0007aae <malloc>
c0011c77:	89 c3                	mov    ebx,eax
c0011c79:	58                   	pop    eax
c0011c7a:	5a                   	pop    edx
c0011c7b:	68 00 50 00 00       	push   0x5000
c0011c80:	53                   	push   ebx
c0011c81:	e8 94 67 ff ff       	call   c000841a <Pipe::Pipe(int)>
c0011c86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c89:	e8 1c 75 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011c8e:	89 07                	mov    DWORD PTR [edi],eax
c0011c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c93:	e8 12 75 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	89 06                	mov    DWORD PTR [esi],eax
c0011c9d:	31 d2                	xor    edx,edx
c0011c9f:	5b                   	pop    ebx
c0011ca0:	31 c0                	xor    eax,eax
c0011ca2:	5e                   	pop    esi
c0011ca3:	5f                   	pop    edi
c0011ca4:	c3                   	ret    

c0011ca5 <SysGetUnixTime(regs*)>:
c0011ca5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011caa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011cb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cb4:	e9 35 9f ff ff       	jmp    c000bbee <Clock::timeInSecondsLocal()>

c0011cb9 <string_ends_with(char const*, char const*)>:
c0011cb9:	57                   	push   edi
c0011cba:	56                   	push   esi
c0011cbb:	53                   	push   ebx
c0011cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cc0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011cc4:	83 ec 0c             	sub    esp,0xc
c0011cc7:	53                   	push   ebx
c0011cc8:	e8 a3 e8 fe ff       	call   c0000570 <strlen>
c0011ccd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cd0:	89 c6                	mov    esi,eax
c0011cd2:	e8 99 e8 fe ff       	call   c0000570 <strlen>
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	39 c6                	cmp    esi,eax
c0011cdc:	7d 06                	jge    c0011ce4 <string_ends_with(char const*, char const*)+0x2b>
c0011cde:	5b                   	pop    ebx
c0011cdf:	31 c0                	xor    eax,eax
c0011ce1:	5e                   	pop    esi
c0011ce2:	5f                   	pop    edi
c0011ce3:	c3                   	ret    
c0011ce4:	83 ec 08             	sub    esp,0x8
c0011ce7:	29 c6                	sub    esi,eax
c0011ce9:	57                   	push   edi
c0011cea:	01 f3                	add    ebx,esi
c0011cec:	53                   	push   ebx
c0011ced:	e8 5e ea fe ff       	call   c0000750 <strcmp>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	5b                   	pop    ebx
c0011cf8:	0f 94 c0             	sete   al
c0011cfb:	5e                   	pop    esi
c0011cfc:	0f b6 c0             	movzx  eax,al
c0011cff:	5f                   	pop    edi
c0011d00:	c3                   	ret    

c0011d01 <SysOpen(regs*)>:
c0011d01:	56                   	push   esi
c0011d02:	53                   	push   ebx
c0011d03:	81 ec 04 01 00 00    	sub    esp,0x104
c0011d09:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d13:	85 c0                	test   eax,eax
c0011d15:	0f 84 bd 01 00 00    	je     c0011ed8 <SysOpen(regs*)+0x1d7>
c0011d1b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d1e:	85 c0                	test   eax,eax
c0011d20:	0f 84 b2 01 00 00    	je     c0011ed8 <SysOpen(regs*)+0x1d7>
c0011d26:	83 ec 04             	sub    esp,0x4
c0011d29:	68 de 16 02 c0       	push   0xc00216de
c0011d2e:	50                   	push   eax
c0011d2f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d33:	56                   	push   esi
c0011d34:	e8 a1 92 ff ff       	call   c000afda <Fs::standardiseFiles(char*, char const*, char const*)>
c0011d39:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d3c:	e8 2f e8 fe ff       	call   c0000570 <strlen>
c0011d41:	83 c4 10             	add    esp,0x10
c0011d44:	83 e8 01             	sub    eax,0x1
c0011d47:	74 21                	je     c0011d6a <SysOpen(regs*)+0x69>
c0011d49:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011d4d:	eb 12                	jmp    c0011d61 <SysOpen(regs*)+0x60>
c0011d4f:	83 fa 3a             	cmp    edx,0x3a
c0011d52:	74 12                	je     c0011d66 <SysOpen(regs*)+0x65>
c0011d54:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d58:	83 e8 01             	sub    eax,0x1
c0011d5b:	74 0d                	je     c0011d6a <SysOpen(regs*)+0x69>
c0011d5d:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011d61:	83 fa 2e             	cmp    edx,0x2e
c0011d64:	75 e9                	jne    c0011d4f <SysOpen(regs*)+0x4e>
c0011d66:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d6a:	83 ec 08             	sub    esp,0x8
c0011d6d:	68 e2 16 02 c0       	push   0xc00216e2
c0011d72:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d75:	50                   	push   eax
c0011d76:	e8 3e ff ff ff       	call   c0011cb9 <string_ends_with(char const*, char const*)>
c0011d7b:	83 c4 10             	add    esp,0x10
c0011d7e:	85 c0                	test   eax,eax
c0011d80:	74 1d                	je     c0011d9f <SysOpen(regs*)+0x9e>
c0011d82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d85:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d92:	81 c4 04 01 00 00    	add    esp,0x104
c0011d98:	31 c0                	xor    eax,eax
c0011d9a:	31 d2                	xor    edx,edx
c0011d9c:	5b                   	pop    ebx
c0011d9d:	5e                   	pop    esi
c0011d9e:	c3                   	ret    
c0011d9f:	83 ec 08             	sub    esp,0x8
c0011da2:	68 e7 16 02 c0       	push   0xc00216e7
c0011da7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011daa:	50                   	push   eax
c0011dab:	e8 09 ff ff ff       	call   c0011cb9 <string_ends_with(char const*, char const*)>
c0011db0:	83 c4 10             	add    esp,0x10
c0011db3:	85 c0                	test   eax,eax
c0011db5:	75 cb                	jne    c0011d82 <SysOpen(regs*)+0x81>
c0011db7:	83 ec 08             	sub    esp,0x8
c0011dba:	68 e3 16 02 c0       	push   0xc00216e3
c0011dbf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dc2:	50                   	push   eax
c0011dc3:	e8 88 e9 fe ff       	call   c0000750 <strcmp>
c0011dc8:	83 c4 10             	add    esp,0x10
c0011dcb:	85 c0                	test   eax,eax
c0011dcd:	74 b3                	je     c0011d82 <SysOpen(regs*)+0x81>
c0011dcf:	83 ec 08             	sub    esp,0x8
c0011dd2:	68 e2 16 02 c0       	push   0xc00216e2
c0011dd7:	56                   	push   esi
c0011dd8:	e8 dc fe ff ff       	call   c0011cb9 <string_ends_with(char const*, char const*)>
c0011ddd:	83 c4 10             	add    esp,0x10
c0011de0:	85 c0                	test   eax,eax
c0011de2:	75 9e                	jne    c0011d82 <SysOpen(regs*)+0x81>
c0011de4:	83 ec 08             	sub    esp,0x8
c0011de7:	68 ec 16 02 c0       	push   0xc00216ec
c0011dec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011def:	50                   	push   eax
c0011df0:	e8 c4 fe ff ff       	call   c0011cb9 <string_ends_with(char const*, char const*)>
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	85 c0                	test   eax,eax
c0011dfa:	0f 85 eb 00 00 00    	jne    c0011eeb <SysOpen(regs*)+0x1ea>
c0011e00:	83 ec 08             	sub    esp,0x8
c0011e03:	68 f1 16 02 c0       	push   0xc00216f1
c0011e08:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e0b:	50                   	push   eax
c0011e0c:	e8 a8 fe ff ff       	call   c0011cb9 <string_ends_with(char const*, char const*)>
c0011e11:	83 c4 10             	add    esp,0x10
c0011e14:	85 c0                	test   eax,eax
c0011e16:	0f 85 cf 00 00 00    	jne    c0011eeb <SysOpen(regs*)+0x1ea>
c0011e1c:	83 ec 08             	sub    esp,0x8
c0011e1f:	68 ed 16 02 c0       	push   0xc00216ed
c0011e24:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e27:	51                   	push   ecx
c0011e28:	e8 23 e9 fe ff       	call   c0000750 <strcmp>
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	85 c0                	test   eax,eax
c0011e32:	0f 84 b3 00 00 00    	je     c0011eeb <SysOpen(regs*)+0x1ea>
c0011e38:	83 ec 08             	sub    esp,0x8
c0011e3b:	68 ec 16 02 c0       	push   0xc00216ec
c0011e40:	56                   	push   esi
c0011e41:	e8 73 fe ff ff       	call   c0011cb9 <string_ends_with(char const*, char const*)>
c0011e46:	83 c4 10             	add    esp,0x10
c0011e49:	85 c0                	test   eax,eax
c0011e4b:	0f 85 9a 00 00 00    	jne    c0011eeb <SysOpen(regs*)+0x1ea>
c0011e51:	83 ec 0c             	sub    esp,0xc
c0011e54:	68 14 01 00 00       	push   0x114
c0011e59:	e8 50 5c ff ff       	call   c0007aae <malloc>
c0011e5e:	83 c4 0c             	add    esp,0xc
c0011e61:	89 c6                	mov    esi,eax
c0011e63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e6b:	50                   	push   eax
c0011e6c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e6f:	52                   	push   edx
c0011e70:	56                   	push   esi
c0011e71:	e8 1a 93 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0011e76:	83 c4 10             	add    esp,0x10
c0011e79:	85 f6                	test   esi,esi
c0011e7b:	74 5b                	je     c0011ed8 <SysOpen(regs*)+0x1d7>
c0011e7d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e80:	0f b6 c2             	movzx  eax,dl
c0011e83:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e86:	89 d0                	mov    eax,edx
c0011e88:	83 e0 01             	and    eax,0x1
c0011e8b:	f6 c2 02             	test   dl,0x2
c0011e8e:	74 03                	je     c0011e93 <SysOpen(regs*)+0x192>
c0011e90:	83 c8 02             	or     eax,0x2
c0011e93:	f6 c2 04             	test   dl,0x4
c0011e96:	74 03                	je     c0011e9b <SysOpen(regs*)+0x19a>
c0011e98:	83 c8 04             	or     eax,0x4
c0011e9b:	f6 c2 08             	test   dl,0x8
c0011e9e:	74 03                	je     c0011ea3 <SysOpen(regs*)+0x1a2>
c0011ea0:	83 c8 0a             	or     eax,0xa
c0011ea3:	80 e2 10             	and    dl,0x10
c0011ea6:	74 03                	je     c0011eab <SysOpen(regs*)+0x1aa>
c0011ea8:	83 c8 12             	or     eax,0x12
c0011eab:	83 ec 08             	sub    esp,0x8
c0011eae:	50                   	push   eax
c0011eaf:	56                   	push   esi
c0011eb0:	e8 97 93 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0011eb5:	83 c4 10             	add    esp,0x10
c0011eb8:	85 c0                	test   eax,eax
c0011eba:	75 1c                	jne    c0011ed8 <SysOpen(regs*)+0x1d7>
c0011ebc:	83 ec 0c             	sub    esp,0xc
c0011ebf:	56                   	push   esi
c0011ec0:	e8 e5 72 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011ec5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ec8:	83 c4 10             	add    esp,0x10
c0011ecb:	89 02                	mov    DWORD PTR [edx],eax
c0011ecd:	c1 f8 1f             	sar    eax,0x1f
c0011ed0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ed3:	e9 ba fe ff ff       	jmp    c0011d92 <SysOpen(regs*)+0x91>
c0011ed8:	81 c4 04 01 00 00    	add    esp,0x104
c0011ede:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ee3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee8:	5b                   	pop    ebx
c0011ee9:	5e                   	pop    esi
c0011eea:	c3                   	ret    
c0011eeb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011eee:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011ef4:	e9 92 fe ff ff       	jmp    c0011d8b <SysOpen(regs*)+0x8a>

c0011ef9 <KeSystemCall(regs*, void*)>:
c0011ef9:	53                   	push   ebx
c0011efa:	83 ec 08             	sub    esp,0x8
c0011efd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f01:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011f04:	83 f8 3b             	cmp    eax,0x3b
c0011f07:	77 16                	ja     c0011f1f <KeSystemCall(regs*, void*)+0x26>
c0011f09:	8b 14 85 00 2b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd500]
c0011f10:	85 d2                	test   edx,edx
c0011f12:	74 0b                	je     c0011f1f <KeSystemCall(regs*, void*)+0x26>
c0011f14:	83 ec 0c             	sub    esp,0xc
c0011f17:	53                   	push   ebx
c0011f18:	ff d2                	call   edx
c0011f1a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011f1d:	eb 0d                	jmp    c0011f2c <KeSystemCall(regs*, void*)+0x33>
c0011f1f:	52                   	push   edx
c0011f20:	52                   	push   edx
c0011f21:	50                   	push   eax
c0011f22:	68 f6 16 02 c0       	push   0xc00216f6
c0011f27:	e8 0d 8a ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0011f2c:	83 c4 10             	add    esp,0x10
c0011f2f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011f34:	31 d2                	xor    edx,edx
c0011f36:	83 c4 08             	add    esp,0x8
c0011f39:	5b                   	pop    ebx
c0011f3a:	c3                   	ret    
c0011f3b:	90                   	nop

c0011f3c <KeSwitchEndian16(unsigned short)>:
c0011f3c:	83 ec 04             	sub    esp,0x4
c0011f3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f43:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011f47:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011f4b:	c1 f8 08             	sar    eax,0x8
c0011f4e:	89 c2                	mov    edx,eax
c0011f50:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011f54:	c1 e0 08             	shl    eax,0x8
c0011f57:	09 d0                	or     eax,edx
c0011f59:	83 c4 04             	add    esp,0x4
c0011f5c:	c3                   	ret    
c0011f5d:	8d 76 00             	lea    esi,[esi+0x0]

c0011f60 <KeSwitchEndian32(unsigned int)>:
c0011f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f64:	c1 e8 18             	shr    eax,0x18
c0011f67:	89 c2                	mov    edx,eax
c0011f69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6d:	c1 e0 08             	shl    eax,0x8
c0011f70:	25 00 00 ff 00       	and    eax,0xff0000
c0011f75:	09 c2                	or     edx,eax
c0011f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7b:	c1 e8 08             	shr    eax,0x8
c0011f7e:	25 00 ff 00 00       	and    eax,0xff00
c0011f83:	09 c2                	or     edx,eax
c0011f85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f89:	c1 e0 18             	shl    eax,0x18
c0011f8c:	09 d0                	or     eax,edx
c0011f8e:	c3                   	ret    
c0011f8f:	90                   	nop

c0011f90 <EthernetCRC32(unsigned char*, int)>:
c0011f90:	83 ec 10             	sub    esp,0x10
c0011f93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011f98:	75 0a                	jne    c0011fa4 <EthernetCRC32(unsigned char*, int)+0x14>
c0011f9a:	b8 00 00 00 00       	mov    eax,0x0
c0011f9f:	e9 8c 00 00 00       	jmp    c0012030 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011fa4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011fa9:	7f 09                	jg     c0011fb4 <EthernetCRC32(unsigned char*, int)+0x24>
c0011fab:	b8 00 00 00 00       	mov    eax,0x0
c0011fb0:	eb 7e                	jmp    c0012030 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011fb2:	66 90                	xchg   ax,ax
c0011fb4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011fbc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011fc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011fc8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011fcc:	7d 5a                	jge    c0012028 <EthernetCRC32(unsigned char*, int)+0x98>
c0011fce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fd6:	01 d0                	add    eax,edx
c0011fd8:	8a 00                	mov    al,BYTE PTR [eax]
c0011fda:	0f b6 c0             	movzx  eax,al
c0011fdd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011fe1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0011fec:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011ff1:	7f 2d                	jg     c0012020 <EthernetCRC32(unsigned char*, int)+0x90>
c0011ff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ff7:	83 e0 01             	and    eax,0x1
c0011ffa:	74 10                	je     c001200c <EthernetCRC32(unsigned char*, int)+0x7c>
c0011ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012000:	d1 e8                	shr    eax,1
c0012002:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012007:	eb 0b                	jmp    c0012014 <EthernetCRC32(unsigned char*, int)+0x84>
c0012009:	8d 76 00             	lea    esi,[esi+0x0]
c001200c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012010:	d1 e8                	shr    eax,1
c0012012:	66 90                	xchg   ax,ax
c0012014:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012018:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001201d:	eb cd                	jmp    c0011fec <EthernetCRC32(unsigned char*, int)+0x5c>
c001201f:	90                   	nop
c0012020:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012025:	eb 9d                	jmp    c0011fc4 <EthernetCRC32(unsigned char*, int)+0x34>
c0012027:	90                   	nop
c0012028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001202c:	f7 d0                	not    eax
c001202e:	66 90                	xchg   ax,ax
c0012030:	83 c4 10             	add    esp,0x10
c0012033:	c3                   	ret    

c0012034 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012034:	83 ec 2c             	sub    esp,0x2c
c0012037:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001203b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012040:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012048:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001204c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001204f:	0f b7 c0             	movzx  eax,ax
c0012052:	3d 06 08 00 00       	cmp    eax,0x806
c0012057:	75 13                	jne    c001206c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012059:	83 ec 0c             	sub    esp,0xc
c001205c:	68 0a 17 02 c0       	push   0xc002170a
c0012061:	e8 d3 88 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012066:	83 c4 10             	add    esp,0x10
c0012069:	eb 25                	jmp    c0012090 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001206b:	90                   	nop
c001206c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012070:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012073:	0f b7 c0             	movzx  eax,ax
c0012076:	3d 00 08 00 00       	cmp    eax,0x800
c001207b:	75 13                	jne    c0012090 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001207d:	83 ec 0c             	sub    esp,0xc
c0012080:	68 20 17 02 c0       	push   0xc0021720
c0012085:	e8 af 88 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001208a:	83 c4 10             	add    esp,0x10
c001208d:	8d 76 00             	lea    esi,[esi+0x0]
c0012090:	90                   	nop
c0012091:	83 c4 2c             	add    esp,0x2c
c0012094:	c3                   	ret    

c0012095 <CmOpen(char const*)>:
c0012095:	57                   	push   edi
c0012096:	56                   	push   esi
c0012097:	53                   	push   ebx
c0012098:	83 ec 1c             	sub    esp,0x1c
c001209b:	6a 30                	push   0x30
c001209d:	e8 0c 5a ff ff       	call   c0007aae <malloc>
c00120a2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00120a9:	89 c3                	mov    ebx,eax
c00120ab:	e8 fe 59 ff ff       	call   c0007aae <malloc>
c00120b0:	83 c4 0c             	add    esp,0xc
c00120b3:	89 c6                	mov    esi,eax
c00120b5:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00120bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00120bf:	50                   	push   eax
c00120c0:	e8 cb 90 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00120c5:	83 c4 0c             	add    esp,0xc
c00120c8:	89 33                	mov    DWORD PTR [ebx],esi
c00120ca:	8d 44 24 07          	lea    eax,[esp+0x7]
c00120ce:	50                   	push   eax
c00120cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00120d3:	50                   	push   eax
c00120d4:	56                   	push   esi
c00120d5:	e8 74 94 ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c00120da:	5a                   	pop    edx
c00120db:	59                   	pop    ecx
c00120dc:	6a 01                	push   0x1
c00120de:	ff 33                	push   DWORD PTR [ebx]
c00120e0:	e8 67 91 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00120e5:	5e                   	pop    esi
c00120e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120ea:	e8 bf 59 ff ff       	call   c0007aae <malloc>
c00120ef:	5a                   	pop    edx
c00120f0:	89 c7                	mov    edi,eax
c00120f2:	8d 74 24 10          	lea    esi,[esp+0x10]
c00120f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00120fa:	56                   	push   esi
c00120fb:	57                   	push   edi
c00120fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012100:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012104:	50                   	push   eax
c0012105:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012108:	83 c4 14             	add    esp,0x14
c001210b:	ff 33                	push   DWORD PTR [ebx]
c001210d:	e8 98 91 ff ff       	call   c000b2aa <File::close()>
c0012112:	59                   	pop    ecx
c0012113:	58                   	pop    eax
c0012114:	6a 13                	push   0x13
c0012116:	ff 33                	push   DWORD PTR [ebx]
c0012118:	e8 2f 91 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c001211d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001211f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012121:	89 34 24             	mov    DWORD PTR [esp],esi
c0012124:	57                   	push   edi
c0012125:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012129:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001212d:	50                   	push   eax
c001212e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012131:	83 c4 14             	add    esp,0x14
c0012134:	57                   	push   edi
c0012135:	e8 84 59 ff ff       	call   c0007abe <free>
c001213a:	83 c4 10             	add    esp,0x10
c001213d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012140:	75 10                	jne    c0012152 <CmOpen(char const*)+0xbd>
c0012142:	83 ec 0c             	sub    esp,0xc
c0012145:	68 35 17 02 c0       	push   0xc0021735
c001214a:	e8 c2 ea ff ff       	call   c0010c11 <KePanic(char const*)>
c001214f:	83 c4 10             	add    esp,0x10
c0012152:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012155:	50                   	push   eax
c0012156:	6a 00                	push   0x0
c0012158:	6a 00                	push   0x0
c001215a:	ff 33                	push   DWORD PTR [ebx]
c001215c:	e8 a9 91 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0012161:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012163:	8b 10                	mov    edx,DWORD PTR [eax]
c0012165:	89 34 24             	mov    DWORD PTR [esp],esi
c0012168:	57                   	push   edi
c0012169:	6a 00                	push   0x0
c001216b:	6a 2b                	push   0x2b
c001216d:	50                   	push   eax
c001216e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012171:	83 c4 1c             	add    esp,0x1c
c0012174:	6a 00                	push   0x0
c0012176:	6a 00                	push   0x0
c0012178:	ff 33                	push   DWORD PTR [ebx]
c001217a:	e8 8b 91 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001217f:	83 c4 0c             	add    esp,0xc
c0012182:	6a 08                	push   0x8
c0012184:	68 46 17 02 c0       	push   0xc0021746
c0012189:	57                   	push   edi
c001218a:	e8 f1 e1 fe ff       	call   c0000380 <memcmp>
c001218f:	83 c4 10             	add    esp,0x10
c0012192:	85 c0                	test   eax,eax
c0012194:	74 10                	je     c00121a6 <CmOpen(char const*)+0x111>
c0012196:	83 ec 0c             	sub    esp,0xc
c0012199:	68 4f 17 02 c0       	push   0xc002174f
c001219e:	e8 6e ea ff ff       	call   c0010c11 <KePanic(char const*)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00121aa:	89 d8                	mov    eax,ebx
c00121ac:	83 c4 10             	add    esp,0x10
c00121af:	5b                   	pop    ebx
c00121b0:	5e                   	pop    esi
c00121b1:	5f                   	pop    edi
c00121b2:	c3                   	ret    

c00121b3 <CmClose(Reghive_Tag*)>:
c00121b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00121bb:	74 0b                	je     c00121c8 <CmClose(Reghive_Tag*)+0x15>
c00121bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00121bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121c3:	e9 e2 90 ff ff       	jmp    c000b2aa <File::close()>
c00121c8:	c3                   	ret    

c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00121c9:	53                   	push   ebx
c00121ca:	83 ec 18             	sub    esp,0x18
c00121cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00121d1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00121d5:	74 29                	je     c0012200 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00121d7:	50                   	push   eax
c00121d8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00121dd:	99                   	cdq    
c00121de:	52                   	push   edx
c00121df:	50                   	push   eax
c00121e0:	ff 33                	push   DWORD PTR [ebx]
c00121e2:	e8 23 91 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00121e7:	5a                   	pop    edx
c00121e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121ea:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00121ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00121f0:	51                   	push   ecx
c00121f1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00121f5:	6a 00                	push   0x0
c00121f7:	6a 2b                	push   0x2b
c00121f9:	50                   	push   eax
c00121fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00121fd:	83 c4 20             	add    esp,0x20
c0012200:	83 c4 18             	add    esp,0x18
c0012203:	5b                   	pop    ebx
c0012204:	c3                   	ret    

c0012205 <CmGetString(Reghive_Tag*, int, char*)>:
c0012205:	55                   	push   ebp
c0012206:	57                   	push   edi
c0012207:	56                   	push   esi
c0012208:	53                   	push   ebx
c0012209:	31 db                	xor    ebx,ebx
c001220b:	83 ec 70             	sub    esp,0x70
c001220e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012215:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012219:	50                   	push   eax
c001221a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012221:	55                   	push   ebp
c0012222:	e8 a2 ff ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012227:	83 c4 10             	add    esp,0x10
c001222a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001222f:	c1 e0 08             	shl    eax,0x8
c0012232:	89 c2                	mov    edx,eax
c0012234:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012239:	09 d0                	or     eax,edx
c001223b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012240:	c1 e0 08             	shl    eax,0x8
c0012243:	09 d0                	or     eax,edx
c0012245:	74 25                	je     c001226c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012247:	6b fb 0d             	imul   edi,ebx,0xd
c001224a:	52                   	push   edx
c001224b:	8d 54 24 39          	lea    edx,[esp+0x39]
c001224f:	52                   	push   edx
c0012250:	50                   	push   eax
c0012251:	55                   	push   ebp
c0012252:	e8 72 ff ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012257:	8d 74 24 49          	lea    esi,[esp+0x49]
c001225b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012262:	b9 27 00 00 00       	mov    ecx,0x27
c0012267:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012269:	83 c4 10             	add    esp,0x10
c001226c:	83 c3 03             	add    ebx,0x3
c001226f:	83 fb 15             	cmp    ebx,0x15
c0012272:	75 b6                	jne    c001222a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012274:	83 c4 6c             	add    esp,0x6c
c0012277:	5b                   	pop    ebx
c0012278:	5e                   	pop    esi
c0012279:	5f                   	pop    edi
c001227a:	5d                   	pop    ebp
c001227b:	c3                   	ret    

c001227c <CmEnterDirectory(Reghive_Tag*, int)>:
c001227c:	83 ec 40             	sub    esp,0x40
c001227f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012283:	50                   	push   eax
c0012284:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012288:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001228c:	e8 38 ff ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012291:	83 c4 10             	add    esp,0x10
c0012294:	83 c8 ff             	or     eax,0xffffffff
c0012297:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c001229c:	75 19                	jne    c00122b7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001229e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00122a3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00122a8:	c1 e0 08             	shl    eax,0x8
c00122ab:	09 c2                	or     edx,eax
c00122ad:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00122b2:	c1 e0 10             	shl    eax,0x10
c00122b5:	09 d0                	or     eax,edx
c00122b7:	83 c4 3c             	add    esp,0x3c
c00122ba:	c3                   	ret    

c00122bb <CmGetNext(Reghive_Tag*, int)>:
c00122bb:	83 ec 40             	sub    esp,0x40
c00122be:	8d 44 24 09          	lea    eax,[esp+0x9]
c00122c2:	50                   	push   eax
c00122c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00122cb:	e8 f9 fe ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122d0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00122d5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00122da:	c1 e0 08             	shl    eax,0x8
c00122dd:	09 c2                	or     edx,eax
c00122df:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00122e4:	83 c4 4c             	add    esp,0x4c
c00122e7:	c1 e0 10             	shl    eax,0x10
c00122ea:	09 d0                	or     eax,edx
c00122ec:	c3                   	ret    

c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00122ed:	53                   	push   ebx
c00122ee:	83 ec 18             	sub    esp,0x18
c00122f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00122f5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00122f9:	74 29                	je     c0012324 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00122fb:	50                   	push   eax
c00122fc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012301:	99                   	cdq    
c0012302:	52                   	push   edx
c0012303:	50                   	push   eax
c0012304:	ff 33                	push   DWORD PTR [ebx]
c0012306:	e8 ff 8f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001230b:	5a                   	pop    edx
c001230c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001230e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012312:	8b 10                	mov    edx,DWORD PTR [eax]
c0012314:	51                   	push   ecx
c0012315:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012319:	6a 00                	push   0x0
c001231b:	6a 2b                	push   0x2b
c001231d:	50                   	push   eax
c001231e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012321:	83 c4 20             	add    esp,0x20
c0012324:	83 c4 18             	add    esp,0x18
c0012327:	5b                   	pop    ebx
c0012328:	c3                   	ret    

c0012329 <CmFreeExtent(Reghive_Tag*, int)>:
c0012329:	53                   	push   ebx
c001232a:	83 ec 3c             	sub    esp,0x3c
c001232d:	6a 2b                	push   0x2b
c001232f:	6a 00                	push   0x0
c0012331:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012335:	53                   	push   ebx
c0012336:	e8 b5 e1 fe ff       	call   c00004f0 <memset>
c001233b:	83 c4 0c             	add    esp,0xc
c001233e:	53                   	push   ebx
c001233f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012343:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012347:	e8 a1 ff ff ff       	call   c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001234c:	83 c4 48             	add    esp,0x48
c001234f:	5b                   	pop    ebx
c0012350:	c3                   	ret    

c0012351 <CmUpdateHeader(Reghive_Tag*)>:
c0012351:	83 ec 0c             	sub    esp,0xc
c0012354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012358:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001235c:	74 10                	je     c001236e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001235e:	52                   	push   edx
c001235f:	8d 50 05             	lea    edx,[eax+0x5]
c0012362:	52                   	push   edx
c0012363:	6a 00                	push   0x0
c0012365:	50                   	push   eax
c0012366:	e8 82 ff ff ff       	call   c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	83 c4 0c             	add    esp,0xc
c0012371:	c3                   	ret    

c0012372 <CmExpand(Reghive_Tag*, int)>:
c0012372:	57                   	push   edi
c0012373:	56                   	push   esi
c0012374:	83 ce ff             	or     esi,0xffffffff
c0012377:	53                   	push   ebx
c0012378:	83 ec 30             	sub    esp,0x30
c001237b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001237f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012383:	74 5f                	je     c00123e4 <CmExpand(Reghive_Tag*, int)+0x72>
c0012385:	31 d2                	xor    edx,edx
c0012387:	31 f6                	xor    esi,esi
c0012389:	50                   	push   eax
c001238a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001238e:	52                   	push   edx
c001238f:	50                   	push   eax
c0012390:	ff 33                	push   DWORD PTR [ebx]
c0012392:	e8 73 8f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0012397:	83 c4 0c             	add    esp,0xc
c001239a:	6a 2b                	push   0x2b
c001239c:	6a 00                	push   0x0
c001239e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00123a2:	57                   	push   edi
c00123a3:	e8 48 e1 fe ff       	call   c00004f0 <memset>
c00123a8:	83 c4 10             	add    esp,0x10
c00123ab:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00123af:	7d 1b                	jge    c00123cc <CmExpand(Reghive_Tag*, int)+0x5a>
c00123b1:	83 ec 0c             	sub    esp,0xc
c00123b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123b6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00123ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00123bc:	46                   	inc    esi
c00123bd:	51                   	push   ecx
c00123be:	57                   	push   edi
c00123bf:	6a 00                	push   0x0
c00123c1:	6a 2b                	push   0x2b
c00123c3:	50                   	push   eax
c00123c4:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00123c7:	83 c4 20             	add    esp,0x20
c00123ca:	eb df                	jmp    c00123ab <CmExpand(Reghive_Tag*, int)+0x39>
c00123cc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00123d0:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00123d3:	83 ec 0c             	sub    esp,0xc
c00123d6:	01 f2                	add    edx,esi
c00123d8:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00123db:	53                   	push   ebx
c00123dc:	e8 70 ff ff ff       	call   c0012351 <CmUpdateHeader(Reghive_Tag*)>
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	83 c4 30             	add    esp,0x30
c00123e7:	89 f0                	mov    eax,esi
c00123e9:	5b                   	pop    ebx
c00123ea:	5e                   	pop    esi
c00123eb:	5f                   	pop    edi
c00123ec:	c3                   	ret    

c00123ed <CmFindUnusedExtent(Reghive_Tag*)>:
c00123ed:	55                   	push   ebp
c00123ee:	57                   	push   edi
c00123ef:	56                   	push   esi
c00123f0:	53                   	push   ebx
c00123f1:	83 cb ff             	or     ebx,0xffffffff
c00123f4:	83 ec 1c             	sub    esp,0x1c
c00123f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00123fb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00123ff:	74 68                	je     c0012469 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012401:	be 2b 00 00 00       	mov    esi,0x2b
c0012406:	51                   	push   ecx
c0012407:	31 ff                	xor    edi,edi
c0012409:	6a 00                	push   0x0
c001240b:	31 db                	xor    ebx,ebx
c001240d:	6a 00                	push   0x0
c001240f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012412:	e8 f3 8e ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0012417:	83 c4 10             	add    esp,0x10
c001241a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001241d:	76 3b                	jbe    c001245a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001241f:	83 ec 0c             	sub    esp,0xc
c0012422:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012425:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012429:	8b 10                	mov    edx,DWORD PTR [eax]
c001242b:	51                   	push   ecx
c001242c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012430:	51                   	push   ecx
c0012431:	6a 00                	push   0x0
c0012433:	6a 01                	push   0x1
c0012435:	50                   	push   eax
c0012436:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012439:	83 c4 20             	add    esp,0x20
c001243c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012441:	74 26                	je     c0012469 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012443:	43                   	inc    ebx
c0012444:	52                   	push   edx
c0012445:	57                   	push   edi
c0012446:	56                   	push   esi
c0012447:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001244a:	e8 bb 8e ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001244f:	83 c6 2b             	add    esi,0x2b
c0012452:	83 d7 00             	adc    edi,0x0
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	eb c0                	jmp    c001241a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001245a:	50                   	push   eax
c001245b:	50                   	push   eax
c001245c:	6a 40                	push   0x40
c001245e:	55                   	push   ebp
c001245f:	e8 0e ff ff ff       	call   c0012372 <CmExpand(Reghive_Tag*, int)>
c0012464:	83 c4 10             	add    esp,0x10
c0012467:	89 c3                	mov    ebx,eax
c0012469:	83 c4 1c             	add    esp,0x1c
c001246c:	89 d8                	mov    eax,ebx
c001246e:	5b                   	pop    ebx
c001246f:	5e                   	pop    esi
c0012470:	5f                   	pop    edi
c0012471:	5d                   	pop    ebp
c0012472:	c3                   	ret    

c0012473 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012473:	55                   	push   ebp
c0012474:	57                   	push   edi
c0012475:	56                   	push   esi
c0012476:	53                   	push   ebx
c0012477:	81 ec 88 00 00 00    	sub    esp,0x88
c001247d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012484:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001248b:	e8 5d ff ff ff       	call   c00123ed <CmFindUnusedExtent(Reghive_Tag*)>
c0012490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012494:	83 c4 0c             	add    esp,0xc
c0012497:	6a 2b                	push   0x2b
c0012499:	6a 00                	push   0x0
c001249b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001249f:	55                   	push   ebp
c00124a0:	e8 4b e0 fe ff       	call   c00004f0 <memset>
c00124a5:	83 c4 10             	add    esp,0x10
c00124a8:	85 db                	test   ebx,ebx
c00124aa:	74 12                	je     c00124be <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00124ac:	51                   	push   ecx
c00124ad:	55                   	push   ebp
c00124ae:	53                   	push   ebx
c00124af:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00124b6:	e8 0e fd ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124bb:	83 c4 10             	add    esp,0x10
c00124be:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00124c2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00124c9:	b9 2b 00 00 00       	mov    ecx,0x2b
c00124ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00124d0:	85 db                	test   ebx,ebx
c00124d2:	74 49                	je     c001251d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00124d4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00124d9:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00124de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124e2:	c1 e0 08             	shl    eax,0x8
c00124e5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00124eb:	09 c8                	or     eax,ecx
c00124ed:	74 11                	je     c0012500 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00124ef:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00124f3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00124f7:	c1 e8 10             	shr    eax,0x10
c00124fa:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00124fe:	eb 0f                	jmp    c001250f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012500:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012505:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001250a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001250f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012513:	c1 ea 08             	shr    edx,0x8
c0012516:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001251b:	eb 0f                	jmp    c001252c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001251d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012522:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012527:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001252c:	52                   	push   edx
c001252d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012531:	50                   	push   eax
c0012532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012536:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001253d:	e8 ab fd ff ff       	call   c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012542:	83 c4 10             	add    esp,0x10
c0012545:	85 db                	test   ebx,ebx
c0012547:	74 12                	je     c001255b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012549:	50                   	push   eax
c001254a:	55                   	push   ebp
c001254b:	53                   	push   ebx
c001254c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012553:	e8 95 fd ff ff       	call   c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001255f:	83 c4 7c             	add    esp,0x7c
c0012562:	5b                   	pop    ebx
c0012563:	5e                   	pop    esi
c0012564:	5f                   	pop    edi
c0012565:	5d                   	pop    ebp
c0012566:	c3                   	ret    

c0012567 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012567:	55                   	push   ebp
c0012568:	57                   	push   edi
c0012569:	56                   	push   esi
c001256a:	53                   	push   ebx
c001256b:	bb 27 00 00 00       	mov    ebx,0x27
c0012570:	81 ec 88 00 00 00    	sub    esp,0x88
c0012576:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001257d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012584:	e8 e7 df fe ff       	call   c0000570 <strlen>
c0012589:	8d 48 26             	lea    ecx,[eax+0x26]
c001258c:	89 c8                	mov    eax,ecx
c001258e:	99                   	cdq    
c001258f:	f7 fb                	idiv   ebx
c0012591:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012595:	83 c4 10             	add    esp,0x10
c0012598:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001259e:	7e 10                	jle    c00125b0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00125a0:	83 ec 0c             	sub    esp,0xc
c00125a3:	68 60 17 02 c0       	push   0xc0021760
c00125a8:	e8 64 e6 ff ff       	call   c0010c11 <KePanic(char const*)>
c00125ad:	83 c4 10             	add    esp,0x10
c00125b0:	31 ff                	xor    edi,edi
c00125b2:	50                   	push   eax
c00125b3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00125b7:	53                   	push   ebx
c00125b8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00125bf:	56                   	push   esi
c00125c0:	e8 04 fc ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00125c5:	83 c4 10             	add    esp,0x10
c00125c8:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00125cc:	89 d0                	mov    eax,edx
c00125ce:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00125d2:	c1 e0 08             	shl    eax,0x8
c00125d5:	09 c2                	or     edx,eax
c00125d7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00125db:	c1 e2 08             	shl    edx,0x8
c00125de:	09 c2                	or     edx,eax
c00125e0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00125e4:	7e 76                	jle    c001265c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00125e6:	85 d2                	test   edx,edx
c00125e8:	75 25                	jne    c001260f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00125ea:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00125ef:	8d 44 24 45          	lea    eax,[esp+0x45]
c00125f3:	50                   	push   eax
c00125f4:	6a 00                	push   0x0
c00125f6:	6a 00                	push   0x0
c00125f8:	56                   	push   esi
c00125f9:	e8 75 fe ff ff       	call   c0012473 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00125fe:	83 c4 10             	add    esp,0x10
c0012601:	89 c2                	mov    edx,eax
c0012603:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012606:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012609:	c1 f8 10             	sar    eax,0x10
c001260c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001260f:	55                   	push   ebp
c0012610:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012614:	55                   	push   ebp
c0012615:	52                   	push   edx
c0012616:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001261a:	56                   	push   esi
c001261b:	e8 a9 fb ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012620:	83 c4 0c             	add    esp,0xc
c0012623:	6a 27                	push   0x27
c0012625:	6a 00                	push   0x0
c0012627:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001262b:	51                   	push   ecx
c001262c:	e8 bf de fe ff       	call   c00004f0 <memset>
c0012631:	83 c4 0c             	add    esp,0xc
c0012634:	6b c7 27             	imul   eax,edi,0x27
c0012637:	6a 27                	push   0x27
c0012639:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012640:	50                   	push   eax
c0012641:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012645:	51                   	push   ecx
c0012646:	e8 35 e0 fe ff       	call   c0000680 <strncpy>
c001264b:	83 c4 0c             	add    esp,0xc
c001264e:	55                   	push   ebp
c001264f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012653:	52                   	push   edx
c0012654:	56                   	push   esi
c0012655:	e8 93 fc ff ff       	call   c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001265a:	eb 19                	jmp    c0012675 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001265c:	85 d2                	test   edx,edx
c001265e:	74 18                	je     c0012678 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012660:	51                   	push   ecx
c0012661:	51                   	push   ecx
c0012662:	52                   	push   edx
c0012663:	56                   	push   esi
c0012664:	e8 c0 fc ff ff       	call   c0012329 <CmFreeExtent(Reghive_Tag*, int)>
c0012669:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001266d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012671:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012675:	83 c4 10             	add    esp,0x10
c0012678:	47                   	inc    edi
c0012679:	83 c3 03             	add    ebx,0x3
c001267c:	83 ff 07             	cmp    edi,0x7
c001267f:	0f 85 43 ff ff ff    	jne    c00125c8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012685:	50                   	push   eax
c0012686:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001268a:	50                   	push   eax
c001268b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012692:	56                   	push   esi
c0012693:	e8 55 fc ff ff       	call   c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012698:	81 c4 8c 00 00 00    	add    esp,0x8c
c001269e:	5b                   	pop    ebx
c001269f:	5e                   	pop    esi
c00126a0:	5f                   	pop    edi
c00126a1:	5d                   	pop    ebp
c00126a2:	c3                   	ret    

c00126a3 <CmGetMatch(char*, char*, bool, bool*)>:
c00126a3:	56                   	push   esi
c00126a4:	53                   	push   ebx
c00126a5:	50                   	push   eax
c00126a6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00126aa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00126af:	74 25                	je     c00126d6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00126b1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00126b4:	31 db                	xor    ebx,ebx
c00126b6:	50                   	push   eax
c00126b7:	50                   	push   eax
c00126b8:	8d 04 9d 00 2c 02 c0 	lea    eax,[ebx*4-0x3ffdd400]
c00126bf:	50                   	push   eax
c00126c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126c4:	e8 87 e0 fe ff       	call   c0000750 <strcmp>
c00126c9:	83 c4 10             	add    esp,0x10
c00126cc:	85 c0                	test   eax,eax
c00126ce:	74 2e                	je     c00126fe <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00126d0:	43                   	inc    ebx
c00126d1:	83 fb 3f             	cmp    ebx,0x3f
c00126d4:	75 e0                	jne    c00126b6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00126d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126d9:	31 db                	xor    ebx,ebx
c00126db:	8d 04 9d 00 2c 02 c0 	lea    eax,[ebx*4-0x3ffdd400]
c00126e2:	51                   	push   ecx
c00126e3:	51                   	push   ecx
c00126e4:	50                   	push   eax
c00126e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126e9:	e8 62 e0 fe ff       	call   c0000750 <strcmp>
c00126ee:	83 c4 10             	add    esp,0x10
c00126f1:	85 c0                	test   eax,eax
c00126f3:	74 09                	je     c00126fe <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00126f5:	43                   	inc    ebx
c00126f6:	83 fb 3f             	cmp    ebx,0x3f
c00126f9:	75 e0                	jne    c00126db <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00126fb:	83 cb ff             	or     ebx,0xffffffff
c00126fe:	89 d8                	mov    eax,ebx
c0012700:	5a                   	pop    edx
c0012701:	5b                   	pop    ebx
c0012702:	5e                   	pop    esi
c0012703:	c3                   	ret    

c0012704 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012704:	55                   	push   ebp
c0012705:	31 c0                	xor    eax,eax
c0012707:	57                   	push   edi
c0012708:	56                   	push   esi
c0012709:	53                   	push   ebx
c001270a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001270e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012712:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012714:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012718:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001271b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001271f:	83 fd 1f             	cmp    ebp,0x1f
c0012722:	7f 0b                	jg     c001272f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012724:	0f b6 c2             	movzx  eax,dl
c0012727:	d3 e0                	shl    eax,cl
c0012729:	09 07                	or     DWORD PTR [edi],eax
c001272b:	b0 01                	mov    al,0x1
c001272d:	01 33                	add    DWORD PTR [ebx],esi
c001272f:	5b                   	pop    ebx
c0012730:	5e                   	pop    esi
c0012731:	5f                   	pop    edi
c0012732:	5d                   	pop    ebp
c0012733:	c3                   	ret    

c0012734 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012734:	57                   	push   edi
c0012735:	56                   	push   esi
c0012736:	53                   	push   ebx
c0012737:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001273b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001273f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012743:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012747:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012749:	7c 17                	jl     c0012762 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001274b:	8b 17                	mov    edx,DWORD PTR [edi]
c001274d:	b8 01 00 00 00       	mov    eax,0x1
c0012752:	d3 e0                	shl    eax,cl
c0012754:	48                   	dec    eax
c0012755:	21 d0                	and    eax,edx
c0012757:	d3 ea                	shr    edx,cl
c0012759:	89 17                	mov    DWORD PTR [edi],edx
c001275b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001275d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012760:	eb 05                	jmp    c0012767 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012762:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012765:	31 c0                	xor    eax,eax
c0012767:	5b                   	pop    ebx
c0012768:	5e                   	pop    esi
c0012769:	5f                   	pop    edi
c001276a:	c3                   	ret    

c001276b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001276b:	83 ec 40             	sub    esp,0x40
c001276e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012772:	50                   	push   eax
c0012773:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012777:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001277b:	e8 49 fa ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012780:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012784:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012788:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001278c:	89 10                	mov    DWORD PTR [eax],edx
c001278e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012791:	83 c4 4c             	add    esp,0x4c
c0012794:	c3                   	ret    

c0012795 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012795:	55                   	push   ebp
c0012796:	57                   	push   edi
c0012797:	56                   	push   esi
c0012798:	53                   	push   ebx
c0012799:	83 ec 40             	sub    esp,0x40
c001279c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00127a0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00127a4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00127a8:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00127ac:	53                   	push   ebx
c00127ad:	56                   	push   esi
c00127ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127b2:	e8 12 fa ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127b7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00127bb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00127bf:	83 c4 0c             	add    esp,0xc
c00127c2:	53                   	push   ebx
c00127c3:	56                   	push   esi
c00127c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127c8:	e8 20 fb ff ff       	call   c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00127cd:	83 c4 4c             	add    esp,0x4c
c00127d0:	5b                   	pop    ebx
c00127d1:	5e                   	pop    esi
c00127d2:	5f                   	pop    edi
c00127d3:	5d                   	pop    ebp
c00127d4:	c3                   	ret    

c00127d5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00127d5:	55                   	push   ebp
c00127d6:	57                   	push   edi
c00127d7:	56                   	push   esi
c00127d8:	31 f6                	xor    esi,esi
c00127da:	53                   	push   ebx
c00127db:	31 db                	xor    ebx,ebx
c00127dd:	83 ec 40             	sub    esp,0x40
c00127e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127f0:	6a 12                	push   0x12
c00127f2:	68 ee 00 00 00       	push   0xee
c00127f7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00127fb:	e8 f0 dc fe ff       	call   c00004f0 <memset>
c0012800:	83 c4 10             	add    esp,0x10
c0012803:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012807:	6a 08                	push   0x8
c0012809:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001280d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012811:	50                   	push   eax
c0012812:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012816:	55                   	push   ebp
c0012817:	57                   	push   edi
c0012818:	e8 e7 fe ff ff       	call   c0012704 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001281d:	83 c4 10             	add    esp,0x10
c0012820:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012824:	50                   	push   eax
c0012825:	6a 06                	push   0x6
c0012827:	55                   	push   ebp
c0012828:	57                   	push   edi
c0012829:	e8 06 ff ff ff       	call   c0012734 <CmGetShift(unsigned int*, int*, int, bool*)>
c001282e:	83 c4 10             	add    esp,0x10
c0012831:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012836:	74 07                	je     c001283f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012838:	46                   	inc    esi
c0012839:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001283d:	eb e1                	jmp    c0012820 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001283f:	43                   	inc    ebx
c0012840:	83 fb 12             	cmp    ebx,0x12
c0012843:	75 c2                	jne    c0012807 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012845:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012849:	31 db                	xor    ebx,ebx
c001284b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001284e:	50                   	push   eax
c001284f:	50                   	push   eax
c0012850:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012855:	43                   	inc    ebx
c0012856:	8d 04 85 00 2c 02 c0 	lea    eax,[eax*4-0x3ffdd400]
c001285d:	50                   	push   eax
c001285e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012862:	e8 d9 df fe ff       	call   c0000840 <strcat>
c0012867:	83 c4 10             	add    esp,0x10
c001286a:	83 fb 18             	cmp    ebx,0x18
c001286d:	75 df                	jne    c001284e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001286f:	83 c4 3c             	add    esp,0x3c
c0012872:	31 c0                	xor    eax,eax
c0012874:	5b                   	pop    ebx
c0012875:	5e                   	pop    esi
c0012876:	5f                   	pop    edi
c0012877:	5d                   	pop    ebp
c0012878:	c3                   	ret    

c0012879 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012879:	83 ec 40             	sub    esp,0x40
c001287c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012880:	50                   	push   eax
c0012881:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012885:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012889:	e8 3b f9 ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001288e:	58                   	pop    eax
c001288f:	5a                   	pop    edx
c0012890:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012894:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012898:	50                   	push   eax
c0012899:	e8 37 ff ff ff       	call   c00127d5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001289e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00128a3:	83 c4 4c             	add    esp,0x4c
c00128a6:	c3                   	ret    

c00128a7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00128a7:	55                   	push   ebp
c00128a8:	57                   	push   edi
c00128a9:	56                   	push   esi
c00128aa:	53                   	push   ebx
c00128ab:	31 db                	xor    ebx,ebx
c00128ad:	83 ec 70             	sub    esp,0x70
c00128b0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00128b7:	6a 30                	push   0x30
c00128b9:	6a 00                	push   0x0
c00128bb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00128bf:	56                   	push   esi
c00128c0:	e8 2b dc fe ff       	call   c00004f0 <memset>
c00128c5:	83 c4 10             	add    esp,0x10
c00128c8:	83 ec 0c             	sub    esp,0xc
c00128cb:	57                   	push   edi
c00128cc:	e8 9f dc fe ff       	call   c0000570 <strlen>
c00128d1:	83 c4 10             	add    esp,0x10
c00128d4:	39 d8                	cmp    eax,ebx
c00128d6:	76 16                	jbe    c00128ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00128d8:	83 ec 0c             	sub    esp,0xc
c00128db:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00128df:	50                   	push   eax
c00128e0:	e8 4b e0 fe ff       	call   c0000930 <toupper>
c00128e5:	83 c4 10             	add    esp,0x10
c00128e8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00128eb:	43                   	inc    ebx
c00128ec:	eb da                	jmp    c00128c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00128ee:	31 f6                	xor    esi,esi
c00128f0:	52                   	push   edx
c00128f1:	31 ff                	xor    edi,edi
c00128f3:	6a 18                	push   0x18
c00128f5:	6a 3f                	push   0x3f
c00128f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128fb:	50                   	push   eax
c00128fc:	e8 ef db fe ff       	call   c00004f0 <memset>
c0012901:	83 c4 10             	add    esp,0x10
c0012904:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012908:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001290c:	84 c0                	test   al,al
c001290e:	0f 84 b0 00 00 00    	je     c00129c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012914:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012918:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001291d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012921:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012926:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012929:	83 ec 0c             	sub    esp,0xc
c001292c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012930:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012934:	53                   	push   ebx
c0012935:	e8 36 dc fe ff       	call   c0000570 <strlen>
c001293a:	83 c4 10             	add    esp,0x10
c001293d:	85 c0                	test   eax,eax
c001293f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012943:	74 0b                	je     c0012950 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012945:	50                   	push   eax
c0012946:	6a 01                	push   0x1
c0012948:	53                   	push   ebx
c0012949:	8d 44 24 20          	lea    eax,[esp+0x20]
c001294d:	50                   	push   eax
c001294e:	eb 0a                	jmp    c001295a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012950:	50                   	push   eax
c0012951:	6a 00                	push   0x0
c0012953:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012957:	50                   	push   eax
c0012958:	6a 00                	push   0x0
c001295a:	e8 44 fd ff ff       	call   c00126a3 <CmGetMatch(char*, char*, bool, bool*)>
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	83 f8 ff             	cmp    eax,0xffffffff
c0012965:	75 1a                	jne    c0012981 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012967:	83 ec 0c             	sub    esp,0xc
c001296a:	68 75 17 02 c0       	push   0xc0021775
c001296f:	e8 9d e2 ff ff       	call   c0010c11 <KePanic(char const*)>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	b8 02 00 00 00       	mov    eax,0x2
c001297c:	e9 bc 00 00 00       	jmp    c0012a3d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012981:	83 ff 18             	cmp    edi,0x18
c0012984:	75 1a                	jne    c00129a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	68 8a 17 02 c0       	push   0xc002178a
c001298e:	e8 7e e2 ff ff       	call   c0010c11 <KePanic(char const*)>
c0012993:	83 c4 10             	add    esp,0x10
c0012996:	b8 01 00 00 00       	mov    eax,0x1
c001299b:	e9 9d 00 00 00       	jmp    c0012a3d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00129a0:	47                   	inc    edi
c00129a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00129a6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00129aa:	74 02                	je     c00129ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00129ac:	89 ee                	mov    esi,ebp
c00129ae:	83 ec 0c             	sub    esp,0xc
c00129b1:	53                   	push   ebx
c00129b2:	e8 b9 db fe ff       	call   c0000570 <strlen>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	85 c0                	test   eax,eax
c00129bc:	74 06                	je     c00129c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00129be:	46                   	inc    esi
c00129bf:	e9 40 ff ff ff       	jmp    c0012904 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00129c4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00129cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129d4:	31 f6                	xor    esi,esi
c00129d6:	50                   	push   eax
c00129d7:	31 ff                	xor    edi,edi
c00129d9:	6a 12                	push   0x12
c00129db:	68 ee 00 00 00       	push   0xee
c00129e0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00129e7:	e8 04 db fe ff       	call   c00004f0 <memset>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	83 fe 17             	cmp    esi,0x17
c00129f2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00129f6:	7e 26                	jle    c0012a1e <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00129f8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00129fc:	50                   	push   eax
c00129fd:	6a 08                	push   0x8
c00129ff:	55                   	push   ebp
c0012a00:	53                   	push   ebx
c0012a01:	e8 2e fd ff ff       	call   c0012734 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012a06:	83 c4 10             	add    esp,0x10
c0012a09:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012a0e:	74 26                	je     c0012a36 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012a10:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012a17:	4e                   	dec    esi
c0012a18:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012a1b:	47                   	inc    edi
c0012a1c:	eb 1c                	jmp    c0012a3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012a1e:	6a 06                	push   0x6
c0012a20:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012a25:	50                   	push   eax
c0012a26:	55                   	push   ebp
c0012a27:	53                   	push   ebx
c0012a28:	e8 d7 fc ff ff       	call   c0012704 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012a2d:	83 c4 10             	add    esp,0x10
c0012a30:	84 c0                	test   al,al
c0012a32:	75 06                	jne    c0012a3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012a34:	eb c2                	jmp    c00129f8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012a36:	31 c0                	xor    eax,eax
c0012a38:	eb 03                	jmp    c0012a3d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012a3a:	46                   	inc    esi
c0012a3b:	eb b2                	jmp    c00129ef <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012a3d:	83 c4 6c             	add    esp,0x6c
c0012a40:	5b                   	pop    ebx
c0012a41:	5e                   	pop    esi
c0012a42:	5f                   	pop    edi
c0012a43:	5d                   	pop    ebp
c0012a44:	c3                   	ret    

c0012a45 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012a45:	53                   	push   ebx
c0012a46:	83 ec 3c             	sub    esp,0x3c
c0012a49:	6a 2b                	push   0x2b
c0012a4b:	6a 00                	push   0x0
c0012a4d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a51:	53                   	push   ebx
c0012a52:	e8 99 da fe ff       	call   c00004f0 <memset>
c0012a57:	58                   	pop    eax
c0012a58:	5a                   	pop    edx
c0012a59:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012a5d:	50                   	push   eax
c0012a5e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012a62:	e8 40 fe ff ff       	call   c00128a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a67:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012a6c:	83 c4 0c             	add    esp,0xc
c0012a6f:	6a 15                	push   0x15
c0012a71:	6a 00                	push   0x0
c0012a73:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012a77:	50                   	push   eax
c0012a78:	e8 73 da fe ff       	call   c00004f0 <memset>
c0012a7d:	53                   	push   ebx
c0012a7e:	6a 00                	push   0x0
c0012a80:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a84:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a88:	e8 e6 f9 ff ff       	call   c0012473 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012a8d:	83 c4 58             	add    esp,0x58
c0012a90:	5b                   	pop    ebx
c0012a91:	c3                   	ret    

c0012a92 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012a92:	56                   	push   esi
c0012a93:	53                   	push   ebx
c0012a94:	83 ec 48             	sub    esp,0x48
c0012a97:	6a 12                	push   0x12
c0012a99:	68 ff 00 00 00       	push   0xff
c0012a9e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012aa2:	56                   	push   esi
c0012aa3:	e8 48 da fe ff       	call   c00004f0 <memset>
c0012aa8:	5a                   	pop    edx
c0012aa9:	59                   	pop    ecx
c0012aaa:	56                   	push   esi
c0012aab:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012aaf:	e8 f3 fd ff ff       	call   c00128a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012ab4:	83 c4 10             	add    esp,0x10
c0012ab7:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012abb:	85 db                	test   ebx,ebx
c0012abd:	74 42                	je     c0012b01 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012abf:	50                   	push   eax
c0012ac0:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012ac4:	50                   	push   eax
c0012ac5:	53                   	push   ebx
c0012ac6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012aca:	e8 fa f6 ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012acf:	83 c4 0c             	add    esp,0xc
c0012ad2:	6a 12                	push   0x12
c0012ad4:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012ad8:	50                   	push   eax
c0012ad9:	56                   	push   esi
c0012ada:	e8 a1 d8 fe ff       	call   c0000380 <memcmp>
c0012adf:	83 c4 10             	add    esp,0x10
c0012ae2:	85 c0                	test   eax,eax
c0012ae4:	74 1e                	je     c0012b04 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012ae6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012aeb:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012af0:	c1 e3 08             	shl    ebx,0x8
c0012af3:	09 d8                	or     eax,ebx
c0012af5:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012afa:	c1 e3 10             	shl    ebx,0x10
c0012afd:	09 c3                	or     ebx,eax
c0012aff:	eb ba                	jmp    c0012abb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012b01:	83 cb ff             	or     ebx,0xffffffff
c0012b04:	89 d8                	mov    eax,ebx
c0012b06:	83 c4 44             	add    esp,0x44
c0012b09:	5b                   	pop    ebx
c0012b0a:	5e                   	pop    esi
c0012b0b:	c3                   	ret    

c0012b0c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012b0c:	57                   	push   edi
c0012b0d:	56                   	push   esi
c0012b0e:	53                   	push   ebx
c0012b0f:	83 ec 34             	sub    esp,0x34
c0012b12:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012b16:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012b1a:	6a 2b                	push   0x2b
c0012b1c:	6a 00                	push   0x0
c0012b1e:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012b22:	53                   	push   ebx
c0012b23:	e8 c8 d9 fe ff       	call   c00004f0 <memset>
c0012b28:	58                   	pop    eax
c0012b29:	5a                   	pop    edx
c0012b2a:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012b2e:	50                   	push   eax
c0012b2f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012b33:	e8 6f fd ff ff       	call   c00128a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012b38:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012b3c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012b40:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012b44:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b48:	53                   	push   ebx
c0012b49:	6a 00                	push   0x0
c0012b4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012b4f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012b53:	e8 1b f9 ff ff       	call   c0012473 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b58:	83 c4 50             	add    esp,0x50
c0012b5b:	5b                   	pop    ebx
c0012b5c:	5e                   	pop    esi
c0012b5d:	5f                   	pop    edi
c0012b5e:	c3                   	ret    

c0012b5f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012b5f:	55                   	push   ebp
c0012b60:	57                   	push   edi
c0012b61:	56                   	push   esi
c0012b62:	53                   	push   ebx
c0012b63:	83 ec 40             	sub    esp,0x40
c0012b66:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012b6a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012b6e:	6a 2b                	push   0x2b
c0012b70:	6a 00                	push   0x0
c0012b72:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012b76:	56                   	push   esi
c0012b77:	e8 74 d9 fe ff       	call   c00004f0 <memset>
c0012b7c:	5f                   	pop    edi
c0012b7d:	89 ef                	mov    edi,ebp
c0012b7f:	58                   	pop    eax
c0012b80:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012b84:	50                   	push   eax
c0012b85:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012b89:	e8 19 fd ff ff       	call   c00128a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012b8e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012b93:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012b98:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012b9d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012ba2:	83 c4 10             	add    esp,0x10
c0012ba5:	85 ed                	test   ebp,ebp
c0012ba7:	74 14                	je     c0012bbd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012ba9:	51                   	push   ecx
c0012baa:	51                   	push   ecx
c0012bab:	57                   	push   edi
c0012bac:	53                   	push   ebx
c0012bad:	e8 09 f7 ff ff       	call   c00122bb <CmGetNext(Reghive_Tag*, int)>
c0012bb2:	83 c4 10             	add    esp,0x10
c0012bb5:	85 c0                	test   eax,eax
c0012bb7:	74 04                	je     c0012bbd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012bb9:	89 c7                	mov    edi,eax
c0012bbb:	eb e8                	jmp    c0012ba5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012bbd:	56                   	push   esi
c0012bbe:	6a 00                	push   0x0
c0012bc0:	57                   	push   edi
c0012bc1:	53                   	push   ebx
c0012bc2:	e8 ac f8 ff ff       	call   c0012473 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012bc7:	83 c4 0c             	add    esp,0xc
c0012bca:	89 c7                	mov    edi,eax
c0012bcc:	56                   	push   esi
c0012bcd:	50                   	push   eax
c0012bce:	53                   	push   ebx
c0012bcf:	e8 f5 f5 ff ff       	call   c00121c9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bd4:	58                   	pop    eax
c0012bd5:	5a                   	pop    edx
c0012bd6:	6a 6c                	push   0x6c
c0012bd8:	6a 00                	push   0x0
c0012bda:	6a 00                	push   0x0
c0012bdc:	68 9b 17 02 c0       	push   0xc002179b
c0012be1:	57                   	push   edi
c0012be2:	53                   	push   ebx
c0012be3:	e8 24 ff ff ff       	call   c0012b0c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012be8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012bec:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012bf0:	c1 e8 10             	shr    eax,0x10
c0012bf3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012bf7:	83 c4 1c             	add    esp,0x1c
c0012bfa:	56                   	push   esi
c0012bfb:	57                   	push   edi
c0012bfc:	53                   	push   ebx
c0012bfd:	e8 eb f6 ff ff       	call   c00122ed <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c02:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012c07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012c0c:	c1 e0 08             	shl    eax,0x8
c0012c0f:	09 c2                	or     edx,eax
c0012c11:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012c16:	83 c4 4c             	add    esp,0x4c
c0012c19:	c1 e0 10             	shl    eax,0x10
c0012c1c:	5b                   	pop    ebx
c0012c1d:	09 d0                	or     eax,edx
c0012c1f:	5e                   	pop    esi
c0012c20:	5f                   	pop    edi
c0012c21:	5d                   	pop    ebp
c0012c22:	c3                   	ret    

c0012c23 <zStrtok(char*, char const*)>:
c0012c23:	55                   	push   ebp
c0012c24:	57                   	push   edi
c0012c25:	56                   	push   esi
c0012c26:	53                   	push   ebx
c0012c27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c2f:	85 db                	test   ebx,ebx
c0012c31:	74 2f                	je     c0012c62 <zStrtok(char*, char const*)+0x3f>
c0012c33:	85 c0                	test   eax,eax
c0012c35:	75 09                	jne    c0012c40 <zStrtok(char*, char const*)+0x1d>
c0012c37:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0012c3c:	85 c0                	test   eax,eax
c0012c3e:	74 50                	je     c0012c90 <zStrtok(char*, char const*)+0x6d>
c0012c40:	31 c9                	xor    ecx,ecx
c0012c42:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012c46:	74 03                	je     c0012c4b <zStrtok(char*, char const*)+0x28>
c0012c48:	41                   	inc    ecx
c0012c49:	eb f7                	jmp    c0012c42 <zStrtok(char*, char const*)+0x1f>
c0012c4b:	31 d2                	xor    edx,edx
c0012c4d:	39 ca                	cmp    edx,ecx
c0012c4f:	74 15                	je     c0012c66 <zStrtok(char*, char const*)+0x43>
c0012c51:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012c55:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012c58:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012c5b:	39 ee                	cmp    esi,ebp
c0012c5d:	74 13                	je     c0012c72 <zStrtok(char*, char const*)+0x4f>
c0012c5f:	42                   	inc    edx
c0012c60:	eb eb                	jmp    c0012c4d <zStrtok(char*, char const*)+0x2a>
c0012c62:	31 c0                	xor    eax,eax
c0012c64:	eb 2a                	jmp    c0012c90 <zStrtok(char*, char const*)+0x6d>
c0012c66:	c7 05 90 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028990,0x0
c0012c70:	eb 1e                	jmp    c0012c90 <zStrtok(char*, char const*)+0x6d>
c0012c72:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012c75:	39 ce                	cmp    esi,ecx
c0012c77:	75 0a                	jne    c0012c83 <zStrtok(char*, char const*)+0x60>
c0012c79:	40                   	inc    eax
c0012c7a:	a3 90 89 02 c0       	mov    ds:0xc0028990,eax
c0012c7f:	89 d8                	mov    eax,ebx
c0012c81:	eb 0d                	jmp    c0012c90 <zStrtok(char*, char const*)+0x6d>
c0012c83:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012c87:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012c8a:	89 15 90 89 02 c0    	mov    DWORD PTR ds:0xc0028990,edx
c0012c90:	5b                   	pop    ebx
c0012c91:	5e                   	pop    esi
c0012c92:	5f                   	pop    edi
c0012c93:	5d                   	pop    ebp
c0012c94:	c3                   	ret    

c0012c95 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012c95:	57                   	push   edi
c0012c96:	56                   	push   esi
c0012c97:	53                   	push   ebx
c0012c98:	81 ec 08 01 00 00    	sub    esp,0x108
c0012c9e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012ca5:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012cac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012cb0:	53                   	push   ebx
c0012cb1:	e8 8a d9 fe ff       	call   c0000640 <strcpy>
c0012cb6:	59                   	pop    ecx
c0012cb7:	5e                   	pop    esi
c0012cb8:	68 ff 1a 02 c0       	push   0xc0021aff
c0012cbd:	53                   	push   ebx
c0012cbe:	bb 01 00 00 00       	mov    ebx,0x1
c0012cc3:	e8 5b ff ff ff       	call   c0012c23 <zStrtok(char*, char const*)>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	85 c0                	test   eax,eax
c0012ccd:	74 3b                	je     c0012d0a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012ccf:	52                   	push   edx
c0012cd0:	50                   	push   eax
c0012cd1:	6a 01                	push   0x1
c0012cd3:	57                   	push   edi
c0012cd4:	e8 b9 fd ff ff       	call   c0012a92 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012cd9:	59                   	pop    ecx
c0012cda:	89 c3                	mov    ebx,eax
c0012cdc:	5e                   	pop    esi
c0012cdd:	68 ff 1a 02 c0       	push   0xc0021aff
c0012ce2:	6a 00                	push   0x0
c0012ce4:	e8 3a ff ff ff       	call   c0012c23 <zStrtok(char*, char const*)>
c0012ce9:	83 c4 10             	add    esp,0x10
c0012cec:	89 c6                	mov    esi,eax
c0012cee:	85 c0                	test   eax,eax
c0012cf0:	74 18                	je     c0012d0a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012cf2:	52                   	push   edx
c0012cf3:	52                   	push   edx
c0012cf4:	53                   	push   ebx
c0012cf5:	57                   	push   edi
c0012cf6:	e8 81 f5 ff ff       	call   c001227c <CmEnterDirectory(Reghive_Tag*, int)>
c0012cfb:	83 c4 10             	add    esp,0x10
c0012cfe:	89 c3                	mov    ebx,eax
c0012d00:	83 f8 ff             	cmp    eax,0xffffffff
c0012d03:	74 05                	je     c0012d0a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012d05:	50                   	push   eax
c0012d06:	56                   	push   esi
c0012d07:	53                   	push   ebx
c0012d08:	eb c9                	jmp    c0012cd3 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012d0a:	81 c4 00 01 00 00    	add    esp,0x100
c0012d10:	89 d8                	mov    eax,ebx
c0012d12:	5b                   	pop    ebx
c0012d13:	5e                   	pop    esi
c0012d14:	5f                   	pop    edi
c0012d15:	c3                   	ret    

c0012d16 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012d16:	55                   	push   ebp
c0012d17:	57                   	push   edi
c0012d18:	56                   	push   esi
c0012d19:	53                   	push   ebx
c0012d1a:	83 ec 5c             	sub    esp,0x5c
c0012d1d:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012d21:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012d25:	85 db                	test   ebx,ebx
c0012d27:	0f 8e 84 00 00 00    	jle    c0012db1 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012d2d:	31 ed                	xor    ebp,ebp
c0012d2f:	57                   	push   edi
c0012d30:	6a 32                	push   0x32
c0012d32:	6a 00                	push   0x0
c0012d34:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012d38:	57                   	push   edi
c0012d39:	e8 b2 d7 fe ff       	call   c00004f0 <memset>
c0012d3e:	83 c4 0c             	add    esp,0xc
c0012d41:	57                   	push   edi
c0012d42:	53                   	push   ebx
c0012d43:	56                   	push   esi
c0012d44:	e8 30 fb ff ff       	call   c0012879 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012d49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012d54:	7d 13                	jge    c0012d69 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	45                   	inc    ebp
c0012d5a:	68 a3 1e 02 c0       	push   0xc0021ea3
c0012d5f:	e8 d5 7b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012d64:	83 c4 10             	add    esp,0x10
c0012d67:	eb e7                	jmp    c0012d50 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012d69:	51                   	push   ecx
c0012d6a:	57                   	push   edi
c0012d6b:	53                   	push   ebx
c0012d6c:	68 a1 17 02 c0       	push   0xc00217a1
c0012d71:	e8 c3 7b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012d7e:	75 1e                	jne    c0012d9e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012d80:	52                   	push   edx
c0012d81:	52                   	push   edx
c0012d82:	53                   	push   ebx
c0012d83:	56                   	push   esi
c0012d84:	e8 f3 f4 ff ff       	call   c001227c <CmEnterDirectory(Reghive_Tag*, int)>
c0012d89:	83 c4 0c             	add    esp,0xc
c0012d8c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012d90:	8d 51 04             	lea    edx,[ecx+0x4]
c0012d93:	52                   	push   edx
c0012d94:	50                   	push   eax
c0012d95:	56                   	push   esi
c0012d96:	e8 7b ff ff ff       	call   c0012d16 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012d9b:	83 c4 10             	add    esp,0x10
c0012d9e:	50                   	push   eax
c0012d9f:	50                   	push   eax
c0012da0:	53                   	push   ebx
c0012da1:	56                   	push   esi
c0012da2:	e8 14 f5 ff ff       	call   c00122bb <CmGetNext(Reghive_Tag*, int)>
c0012da7:	83 c4 10             	add    esp,0x10
c0012daa:	89 c3                	mov    ebx,eax
c0012dac:	e9 74 ff ff ff       	jmp    c0012d25 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012db1:	83 c4 5c             	add    esp,0x5c
c0012db4:	5b                   	pop    ebx
c0012db5:	5e                   	pop    esi
c0012db6:	5f                   	pop    edi
c0012db7:	5d                   	pop    ebp
c0012db8:	c3                   	ret    

c0012db9 <CmSplitFinalSlashInPlace(char*)>:
c0012db9:	53                   	push   ebx
c0012dba:	83 ec 14             	sub    esp,0x14
c0012dbd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012dc1:	53                   	push   ebx
c0012dc2:	e8 a9 d7 fe ff       	call   c0000570 <strlen>
c0012dc7:	83 c4 10             	add    esp,0x10
c0012dca:	48                   	dec    eax
c0012dcb:	85 c0                	test   eax,eax
c0012dcd:	74 15                	je     c0012de4 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012dcf:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012dd2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dd6:	75 09                	jne    c0012de1 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012dd8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012ddb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012ddf:	eb 05                	jmp    c0012de6 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012de1:	48                   	dec    eax
c0012de2:	eb e7                	jmp    c0012dcb <CmSplitFinalSlashInPlace(char*)+0x12>
c0012de4:	31 c0                	xor    eax,eax
c0012de6:	83 c4 08             	add    esp,0x8
c0012de9:	5b                   	pop    ebx
c0012dea:	c3                   	ret    

c0012deb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012deb:	55                   	push   ebp
c0012dec:	57                   	push   edi
c0012ded:	56                   	push   esi
c0012dee:	53                   	push   ebx
c0012def:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012df5:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012dfc:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012dfe:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e01:	80 fa 40             	cmp    dl,0x40
c0012e04:	75 1c                	jne    c0012e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012e06:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012e09:	85 c9                	test   ecx,ecx
c0012e0b:	0f 84 09 01 00 00    	je     c0012f1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e11:	8d 43 01             	lea    eax,[ebx+0x1]
c0012e14:	83 f9 3a             	cmp    ecx,0x3a
c0012e17:	74 04                	je     c0012e1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012e19:	89 c3                	mov    ebx,eax
c0012e1b:	eb e9                	jmp    c0012e06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012e1d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012e20:	89 c3                	mov    ebx,eax
c0012e22:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012e26:	50                   	push   eax
c0012e27:	6a 40                	push   0x40
c0012e29:	6a 00                	push   0x0
c0012e2b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e2f:	50                   	push   eax
c0012e30:	e8 bb d6 fe ff       	call   c00004f0 <memset>
c0012e35:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012e3c:	31 c0                	xor    eax,eax
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012e46:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012e49:	89 d1                	mov    ecx,edx
c0012e4b:	85 d2                	test   edx,edx
c0012e4d:	0f 84 c7 00 00 00    	je     c0012f1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e53:	3d c7 00 00 00       	cmp    eax,0xc7
c0012e58:	0f 8f bc 00 00 00    	jg     c0012f1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e5e:	83 fa 0a             	cmp    edx,0xa
c0012e61:	0f 85 a4 00 00 00    	jne    c0012f0b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012e67:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012e6c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012e71:	89 c8                	mov    eax,ecx
c0012e73:	a8 df                	test   al,0xdf
c0012e75:	0f 94 c2             	sete   dl
c0012e78:	83 f9 23             	cmp    ecx,0x23
c0012e7b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012e80:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012e84:	80 e2 01             	and    dl,0x1
c0012e87:	75 4a                	jne    c0012ed3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e89:	83 e8 09             	sub    eax,0x9
c0012e8c:	3c 01                	cmp    al,0x1
c0012e8e:	76 43                	jbe    c0012ed3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e90:	83 f9 5b             	cmp    ecx,0x5b
c0012e93:	75 42                	jne    c0012ed7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012e95:	83 fe 40             	cmp    esi,0x40
c0012e98:	75 39                	jne    c0012ed3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e9a:	83 ec 0c             	sub    esp,0xc
c0012e9d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012ea1:	52                   	push   edx
c0012ea2:	e8 c9 d6 fe ff       	call   c0000570 <strlen>
c0012ea7:	83 c4 10             	add    esp,0x10
c0012eaa:	83 f8 3f             	cmp    eax,0x3f
c0012ead:	77 6b                	ja     c0012f1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012eaf:	50                   	push   eax
c0012eb0:	50                   	push   eax
c0012eb1:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012eb5:	52                   	push   edx
c0012eb6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012eba:	52                   	push   edx
c0012ebb:	e8 80 d7 fe ff       	call   c0000640 <strcpy>
c0012ec0:	58                   	pop    eax
c0012ec1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012ec5:	52                   	push   edx
c0012ec6:	e8 a5 d6 fe ff       	call   c0000570 <strlen>
c0012ecb:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	31 d2                	xor    edx,edx
c0012ed5:	eb 3b                	jmp    c0012f12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012ed7:	83 fe 40             	cmp    esi,0x40
c0012eda:	74 06                	je     c0012ee2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012edc:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012ee0:	eb 20                	jmp    c0012f02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012ee2:	50                   	push   eax
c0012ee3:	50                   	push   eax
c0012ee4:	55                   	push   ebp
c0012ee5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ee9:	50                   	push   eax
c0012eea:	e8 61 d8 fe ff       	call   c0000750 <strcmp>
c0012eef:	83 c4 10             	add    esp,0x10
c0012ef2:	85 c0                	test   eax,eax
c0012ef4:	75 dd                	jne    c0012ed3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ef6:	eb e4                	jmp    c0012edc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012ef8:	8d 50 01             	lea    edx,[eax+0x1]
c0012efb:	83 f9 3d             	cmp    ecx,0x3d
c0012efe:	74 1e                	je     c0012f1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012f00:	89 d0                	mov    eax,edx
c0012f02:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012f05:	85 c9                	test   ecx,ecx
c0012f07:	75 ef                	jne    c0012ef8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012f09:	eb 0f                	jmp    c0012f1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012f0b:	8d 50 01             	lea    edx,[eax+0x1]
c0012f0e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012f12:	47                   	inc    edi
c0012f13:	89 d0                	mov    eax,edx
c0012f15:	e9 2c ff ff ff       	jmp    c0012e46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012f1a:	31 c0                	xor    eax,eax
c0012f1c:	eb 33                	jmp    c0012f51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012f1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f22:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f25:	50                   	push   eax
c0012f26:	50                   	push   eax
c0012f27:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012f2b:	50                   	push   eax
c0012f2c:	53                   	push   ebx
c0012f2d:	e8 1e d8 fe ff       	call   c0000750 <strcmp>
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	85 c0                	test   eax,eax
c0012f37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f3b:	75 96                	jne    c0012ed3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012f3d:	51                   	push   ecx
c0012f3e:	51                   	push   ecx
c0012f3f:	52                   	push   edx
c0012f40:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012f47:	e8 f4 d6 fe ff       	call   c0000640 <strcpy>
c0012f4c:	83 c4 10             	add    esp,0x10
c0012f4f:	b0 01                	mov    al,0x1
c0012f51:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012f57:	5b                   	pop    ebx
c0012f58:	5e                   	pop    esi
c0012f59:	5f                   	pop    edi
c0012f5a:	5d                   	pop    ebp
c0012f5b:	c3                   	ret    

c0012f5c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012f5c:	57                   	push   edi
c0012f5d:	56                   	push   esi
c0012f5e:	53                   	push   ebx
c0012f5f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012f65:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012f6c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012f73:	53                   	push   ebx
c0012f74:	e8 f7 d5 fe ff       	call   c0000570 <strlen>
c0012f79:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f7c:	89 c7                	mov    edi,eax
c0012f7e:	e8 ed d5 fe ff       	call   c0000570 <strlen>
c0012f83:	83 c4 10             	add    esp,0x10
c0012f86:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012f8a:	3d ff 00 00 00       	cmp    eax,0xff
c0012f8f:	0f 87 d3 00 00 00    	ja     c0013068 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f95:	57                   	push   edi
c0012f96:	57                   	push   edi
c0012f97:	56                   	push   esi
c0012f98:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012f9c:	56                   	push   esi
c0012f9d:	e8 9e d6 fe ff       	call   c0000640 <strcpy>
c0012fa2:	58                   	pop    eax
c0012fa3:	5a                   	pop    edx
c0012fa4:	68 ff 1a 02 c0       	push   0xc0021aff
c0012fa9:	56                   	push   esi
c0012faa:	e8 91 d8 fe ff       	call   c0000840 <strcat>
c0012faf:	59                   	pop    ecx
c0012fb0:	5f                   	pop    edi
c0012fb1:	53                   	push   ebx
c0012fb2:	56                   	push   esi
c0012fb3:	e8 88 d8 fe ff       	call   c0000840 <strcat>
c0012fb8:	58                   	pop    eax
c0012fb9:	5a                   	pop    edx
c0012fba:	68 ab 17 02 c0       	push   0xc00217ab
c0012fbf:	56                   	push   esi
c0012fc0:	e8 7b d8 fe ff       	call   c0000840 <strcat>
c0012fc5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012fcc:	e8 dd 4a ff ff       	call   c0007aae <malloc>
c0012fd1:	83 c4 0c             	add    esp,0xc
c0012fd4:	89 c3                	mov    ebx,eax
c0012fd6:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0012fdc:	56                   	push   esi
c0012fdd:	50                   	push   eax
c0012fde:	e8 ad 81 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0012fe3:	83 c4 10             	add    esp,0x10
c0012fe6:	85 db                	test   ebx,ebx
c0012fe8:	74 7e                	je     c0013068 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012fea:	51                   	push   ecx
c0012feb:	51                   	push   ecx
c0012fec:	6a 01                	push   0x1
c0012fee:	53                   	push   ebx
c0012fef:	e8 58 82 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0012ff4:	83 c4 10             	add    esp,0x10
c0012ff7:	85 c0                	test   eax,eax
c0012ff9:	74 08                	je     c0013003 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012ffb:	83 ec 0c             	sub    esp,0xc
c0012ffe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013000:	53                   	push   ebx
c0013001:	eb 5f                	jmp    c0013062 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013003:	52                   	push   edx
c0013004:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013008:	50                   	push   eax
c0013009:	8d 44 24 20          	lea    eax,[esp+0x20]
c001300d:	50                   	push   eax
c001300e:	53                   	push   ebx
c001300f:	e8 3a 85 ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c0013014:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013018:	83 c4 10             	add    esp,0x10
c001301b:	89 c1                	mov    ecx,eax
c001301d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013021:	74 31                	je     c0013054 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013023:	83 ec 0c             	sub    esp,0xc
c0013026:	50                   	push   eax
c0013027:	e8 82 4a ff ff       	call   c0007aae <malloc>
c001302c:	89 c6                	mov    esi,eax
c001302e:	58                   	pop    eax
c001302f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013031:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013035:	52                   	push   edx
c0013036:	56                   	push   esi
c0013037:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001303b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001303f:	53                   	push   ebx
c0013040:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013043:	83 c4 20             	add    esp,0x20
c0013046:	85 c0                	test   eax,eax
c0013048:	75 0a                	jne    c0013054 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001304a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001304e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013052:	74 18                	je     c001306c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013054:	83 ec 0c             	sub    esp,0xc
c0013057:	53                   	push   ebx
c0013058:	e8 4d 82 ff ff       	call   c000b2aa <File::close()>
c001305d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001305f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013062:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	31 c0                	xor    eax,eax
c001306a:	eb 3b                	jmp    c00130a7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001306c:	83 ec 0c             	sub    esp,0xc
c001306f:	53                   	push   ebx
c0013070:	e8 35 82 ff ff       	call   c000b2aa <File::close()>
c0013075:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013077:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001307a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001307d:	83 c4 0c             	add    esp,0xc
c0013080:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013087:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001308e:	56                   	push   esi
c001308f:	e8 57 fd ff ff       	call   c0012deb <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013094:	89 34 24             	mov    DWORD PTR [esp],esi
c0013097:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001309b:	e8 1e 4a ff ff       	call   c0007abe <free>
c00130a0:	83 c4 10             	add    esp,0x10
c00130a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00130a7:	81 c4 20 01 00 00    	add    esp,0x120
c00130ad:	5b                   	pop    ebx
c00130ae:	5e                   	pop    esi
c00130af:	5f                   	pop    edi
c00130b0:	c3                   	ret    

c00130b1 <Reg::getLine(char*, char*, char*)>:
c00130b1:	57                   	push   edi
c00130b2:	56                   	push   esi
c00130b3:	53                   	push   ebx
c00130b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00130bc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00130c0:	57                   	push   edi
c00130c1:	56                   	push   esi
c00130c2:	53                   	push   ebx
c00130c3:	68 b0 17 02 c0       	push   0xc00217b0
c00130c8:	e8 8f fe ff ff       	call   c0012f5c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00130cd:	83 c4 10             	add    esp,0x10
c00130d0:	84 c0                	test   al,al
c00130d2:	75 10                	jne    c00130e4 <Reg::getLine(char*, char*, char*)+0x33>
c00130d4:	57                   	push   edi
c00130d5:	56                   	push   esi
c00130d6:	53                   	push   ebx
c00130d7:	68 d5 17 02 c0       	push   0xc00217d5
c00130dc:	e8 7b fe ff ff       	call   c0012f5c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	5b                   	pop    ebx
c00130e5:	5e                   	pop    esi
c00130e6:	5f                   	pop    edi
c00130e7:	c3                   	ret    

c00130e8 <Reg::readInt(char*, char*, int*)>:
c00130e8:	55                   	push   ebp
c00130e9:	57                   	push   edi
c00130ea:	56                   	push   esi
c00130eb:	53                   	push   ebx
c00130ec:	81 ec f0 00 00 00    	sub    esp,0xf0
c00130f2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00130f6:	55                   	push   ebp
c00130f7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00130fe:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013105:	e8 a7 ff ff ff       	call   c00130b1 <Reg::getLine(char*, char*, char*)>
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	84 c0                	test   al,al
c001310f:	0f 84 b6 00 00 00    	je     c00131cb <Reg::readInt(char*, char*, int*)+0xe3>
c0013115:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c001311a:	83 fa 2b             	cmp    edx,0x2b
c001311d:	74 0c                	je     c001312b <Reg::readInt(char*, char*, int*)+0x43>
c001311f:	83 fa 2d             	cmp    edx,0x2d
c0013122:	75 0e                	jne    c0013132 <Reg::readInt(char*, char*, int*)+0x4a>
c0013124:	ba 01 00 00 00       	mov    edx,0x1
c0013129:	eb 0b                	jmp    c0013136 <Reg::readInt(char*, char*, int*)+0x4e>
c001312b:	ba 01 00 00 00       	mov    edx,0x1
c0013130:	eb 02                	jmp    c0013134 <Reg::readInt(char*, char*, int*)+0x4c>
c0013132:	31 d2                	xor    edx,edx
c0013134:	31 c0                	xor    eax,eax
c0013136:	be 0a 00 00 00       	mov    esi,0xa
c001313b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013140:	75 21                	jne    c0013163 <Reg::readInt(char*, char*, int*)+0x7b>
c0013142:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013147:	83 f9 78             	cmp    ecx,0x78
c001314a:	75 0a                	jne    c0013156 <Reg::readInt(char*, char*, int*)+0x6e>
c001314c:	83 c2 02             	add    edx,0x2
c001314f:	be 10 00 00 00       	mov    esi,0x10
c0013154:	eb 0d                	jmp    c0013163 <Reg::readInt(char*, char*, int*)+0x7b>
c0013156:	83 f9 62             	cmp    ecx,0x62
c0013159:	75 08                	jne    c0013163 <Reg::readInt(char*, char*, int*)+0x7b>
c001315b:	83 c2 02             	add    edx,0x2
c001315e:	be 02 00 00 00       	mov    esi,0x2
c0013163:	01 d5                	add    ebp,edx
c0013165:	31 d2                	xor    edx,edx
c0013167:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c001316b:	83 f9 0d             	cmp    ecx,0xd
c001316e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013172:	0f 94 c3             	sete   bl
c0013175:	85 c9                	test   ecx,ecx
c0013177:	89 df                	mov    edi,ebx
c0013179:	0f 94 c3             	sete   bl
c001317c:	09 df                	or     edi,ebx
c001317e:	89 fb                	mov    ebx,edi
c0013180:	83 e7 01             	and    edi,0x1
c0013183:	75 35                	jne    c00131ba <Reg::readInt(char*, char*, int*)+0xd2>
c0013185:	0f af d6             	imul   edx,esi
c0013188:	83 fe 10             	cmp    esi,0x10
c001318b:	75 26                	jne    c00131b3 <Reg::readInt(char*, char*, int*)+0xcb>
c001318d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013191:	83 ef 41             	sub    edi,0x41
c0013194:	89 fb                	mov    ebx,edi
c0013196:	80 fb 05             	cmp    bl,0x5
c0013199:	77 06                	ja     c00131a1 <Reg::readInt(char*, char*, int*)+0xb9>
c001319b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001319f:	eb 16                	jmp    c00131b7 <Reg::readInt(char*, char*, int*)+0xcf>
c00131a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131a5:	83 eb 61             	sub    ebx,0x61
c00131a8:	80 fb 05             	cmp    bl,0x5
c00131ab:	77 06                	ja     c00131b3 <Reg::readInt(char*, char*, int*)+0xcb>
c00131ad:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00131b1:	eb 04                	jmp    c00131b7 <Reg::readInt(char*, char*, int*)+0xcf>
c00131b3:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00131b7:	45                   	inc    ebp
c00131b8:	eb ad                	jmp    c0013167 <Reg::readInt(char*, char*, int*)+0x7f>
c00131ba:	84 c0                	test   al,al
c00131bc:	74 02                	je     c00131c0 <Reg::readInt(char*, char*, int*)+0xd8>
c00131be:	f7 da                	neg    edx
c00131c0:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00131c7:	89 10                	mov    DWORD PTR [eax],edx
c00131c9:	88 d8                	mov    al,bl
c00131cb:	81 c4 ec 00 00 00    	add    esp,0xec
c00131d1:	5b                   	pop    ebx
c00131d2:	5e                   	pop    esi
c00131d3:	5f                   	pop    edi
c00131d4:	5d                   	pop    ebp
c00131d5:	c3                   	ret    

c00131d6 <Reg::readString(char*, char*, char*, int)>:
c00131d6:	57                   	push   edi
c00131d7:	56                   	push   esi
c00131d8:	53                   	push   ebx
c00131d9:	81 ec d4 00 00 00    	sub    esp,0xd4
c00131df:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00131e6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00131ea:	57                   	push   edi
c00131eb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00131f2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00131f9:	e8 b3 fe ff ff       	call   c00130b1 <Reg::getLine(char*, char*, char*)>
c00131fe:	83 c4 10             	add    esp,0x10
c0013201:	89 c6                	mov    esi,eax
c0013203:	84 c0                	test   al,al
c0013205:	74 44                	je     c001324b <Reg::readString(char*, char*, char*, int)+0x75>
c0013207:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001320e:	31 c0                	xor    eax,eax
c0013210:	4a                   	dec    edx
c0013211:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013214:	84 c9                	test   cl,cl
c0013216:	74 0f                	je     c0013227 <Reg::readString(char*, char*, char*, int)+0x51>
c0013218:	39 c2                	cmp    edx,eax
c001321a:	7e 0b                	jle    c0013227 <Reg::readString(char*, char*, char*, int)+0x51>
c001321c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001321f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013224:	40                   	inc    eax
c0013225:	eb ea                	jmp    c0013211 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013227:	83 ec 0c             	sub    esp,0xc
c001322a:	53                   	push   ebx
c001322b:	e8 40 d3 fe ff       	call   c0000570 <strlen>
c0013230:	83 c4 10             	add    esp,0x10
c0013233:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013238:	75 11                	jne    c001324b <Reg::readString(char*, char*, char*, int)+0x75>
c001323a:	83 ec 0c             	sub    esp,0xc
c001323d:	53                   	push   ebx
c001323e:	e8 2d d3 fe ff       	call   c0000570 <strlen>
c0013243:	83 c4 10             	add    esp,0x10
c0013246:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001324b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013251:	89 f0                	mov    eax,esi
c0013253:	5b                   	pop    ebx
c0013254:	5e                   	pop    esi
c0013255:	5f                   	pop    edi
c0013256:	c3                   	ret    

c0013257 <Reg::readBool(char*, char*, bool*)>:
c0013257:	83 ec 20             	sub    esp,0x20
c001325a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001325e:	50                   	push   eax
c001325f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013267:	e8 7c fe ff ff       	call   c00130e8 <Reg::readInt(char*, char*, int*)>
c001326c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013271:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013275:	0f 95 02             	setne  BYTE PTR [edx]
c0013278:	83 c4 2c             	add    esp,0x2c
c001327b:	c3                   	ret    

c001327c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001327c:	53                   	push   ebx
c001327d:	83 ec 1c             	sub    esp,0x1c
c0013280:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013284:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013288:	50                   	push   eax
c0013289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001328d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013291:	e8 c1 ff ff ff       	call   c0013257 <Reg::readBool(char*, char*, bool*)>
c0013296:	83 c4 10             	add    esp,0x10
c0013299:	84 c0                	test   al,al
c001329b:	74 04                	je     c00132a1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001329d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00132a1:	88 d8                	mov    al,bl
c00132a3:	83 c4 18             	add    esp,0x18
c00132a6:	5b                   	pop    ebx
c00132a7:	c3                   	ret    

c00132a8 <Reg::readIntWithDefault(char*, char*, int)>:
c00132a8:	53                   	push   ebx
c00132a9:	83 ec 1c             	sub    esp,0x1c
c00132ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00132b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00132b4:	50                   	push   eax
c00132b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132bd:	e8 26 fe ff ff       	call   c00130e8 <Reg::readInt(char*, char*, int*)>
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	84 c0                	test   al,al
c00132c7:	74 04                	je     c00132cd <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00132c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00132cd:	89 d8                	mov    eax,ebx
c00132cf:	83 c4 18             	add    esp,0x18
c00132d2:	5b                   	pop    ebx
c00132d3:	c3                   	ret    

c00132d4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00132d4:	57                   	push   edi
c00132d5:	56                   	push   esi
c00132d6:	56                   	push   esi
c00132d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00132db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132df:	56                   	push   esi
c00132e0:	57                   	push   edi
c00132e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e9:	e8 e8 fe ff ff       	call   c00131d6 <Reg::readString(char*, char*, char*, int)>
c00132ee:	83 c4 10             	add    esp,0x10
c00132f1:	84 c0                	test   al,al
c00132f3:	75 1a                	jne    c001330f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00132f5:	51                   	push   ecx
c00132f6:	56                   	push   esi
c00132f7:	6a 00                	push   0x0
c00132f9:	57                   	push   edi
c00132fa:	e8 f1 d1 fe ff       	call   c00004f0 <memset>
c00132ff:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013302:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013306:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001330f:	89 f8                	mov    eax,edi
c0013311:	5a                   	pop    edx
c0013312:	5e                   	pop    esi
c0013313:	5f                   	pop    edi
c0013314:	c3                   	ret    

c0013315 <SysEject(regs*)>:
c0013315:	83 ec 0c             	sub    esp,0xc
c0013318:	83 ca ff             	or     edx,0xffffffff
c001331b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013322:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013327:	83 e9 41             	sub    ecx,0x41
c001332a:	83 f9 19             	cmp    ecx,0x19
c001332d:	77 18                	ja     c0013347 <SysEject(regs*)+0x32>
c001332f:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c0013336:	85 c9                	test   ecx,ecx
c0013338:	74 0d                	je     c0013347 <SysEject(regs*)+0x32>
c001333a:	83 ec 0c             	sub    esp,0xc
c001333d:	51                   	push   ecx
c001333e:	e8 cf a0 ff ff       	call   c000d412 <LogicalDisk::eject()>
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	99                   	cdq    
c0013347:	83 c4 0c             	add    esp,0xc
c001334a:	c3                   	ret    

c001334b <SysExit(regs*)>:
c001334b:	83 ec 18             	sub    esp,0x18
c001334e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013352:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013355:	e8 16 2b 00 00       	call   c0015e70 <terminateTask(int)>
c001335a:	83 c8 ff             	or     eax,0xffffffff
c001335d:	83 c4 1c             	add    esp,0x1c
c0013360:	89 c2                	mov    edx,eax
c0013362:	c3                   	ret    

c0013363 <SysGetCwd(regs*)>:
c0013363:	83 ec 10             	sub    esp,0x10
c0013366:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001336a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001336d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013370:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013375:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013378:	e8 09 7c ff ff       	call   c000af86 <Fs::getcwd(Process*, char*, int)>
c001337d:	83 c4 1c             	add    esp,0x1c
c0013380:	99                   	cdq    
c0013381:	c3                   	ret    

c0013382 <SysGetPID(regs*)>:
c0013382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013387:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001338a:	8b 00                	mov    eax,DWORD PTR [eax]
c001338c:	99                   	cdq    
c001338d:	c3                   	ret    

c001338e <SysGetRAMData(regs*)>:
c001338e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013394:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001339e:	99                   	cdq    
c001339f:	f7 f9                	idiv   ecx
c00133a1:	c1 e0 18             	shl    eax,0x18
c00133a4:	09 c8                	or     eax,ecx
c00133a6:	99                   	cdq    
c00133a7:	c3                   	ret    

c00133a8 <SysGetVGAPtr(regs*)>:
c00133a8:	55                   	push   ebp
c00133a9:	57                   	push   edi
c00133aa:	56                   	push   esi
c00133ab:	53                   	push   ebx
c00133ac:	83 ec 18             	sub    esp,0x18
c00133af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00133b3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133b6:	e8 81 25 00 00       	call   c001593c <Thr::processFromPID(int)>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	89 c1                	mov    ecx,eax
c00133c0:	b8 01 00 00 00       	mov    eax,0x1
c00133c5:	85 c9                	test   ecx,ecx
c00133c7:	74 57                	je     c0013420 <SysGetVGAPtr(regs*)+0x78>
c00133c9:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00133cf:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00133d3:	74 0c                	je     c00133e1 <SysGetVGAPtr(regs*)+0x39>
c00133d5:	83 ec 0c             	sub    esp,0xc
c00133d8:	55                   	push   ebp
c00133d9:	e8 6d 53 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00133e4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00133e7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00133ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00133ee:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00133f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133f4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00133fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133fd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013400:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013406:	50                   	push   eax
c0013407:	50                   	push   eax
c0013408:	68 f0 17 02 c0       	push   0xc00217f0
c001340d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013410:	05 a8 0f 00 00       	add    eax,0xfa8
c0013415:	50                   	push   eax
c0013416:	e8 25 d2 fe ff       	call   c0000640 <strcpy>
c001341b:	83 c4 10             	add    esp,0x10
c001341e:	31 c0                	xor    eax,eax
c0013420:	83 c4 0c             	add    esp,0xc
c0013423:	31 d2                	xor    edx,edx
c0013425:	5b                   	pop    ebx
c0013426:	5e                   	pop    esi
c0013427:	5f                   	pop    edi
c0013428:	5d                   	pop    ebp
c0013429:	c3                   	ret    
c001342a:	66 90                	xchg   ax,ax

c001342c <SysKill(regs*)>:
c001342c:	53                   	push   ebx
c001342d:	83 ec 08             	sub    esp,0x8
c0013430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013434:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013438:	75 16                	jne    c0013450 <SysKill(regs*)+0x24>
c001343a:	83 ec 0c             	sub    esp,0xc
c001343d:	68 fa 17 02 c0       	push   0xc00217fa
c0013442:	e8 ca d7 ff ff       	call   c0010c11 <KePanic(char const*)>
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	e9 89 00 00 00       	jmp    c00134d8 <SysKill(regs*)+0xac>
c001344f:	90                   	nop
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	68 84 91 02 c0       	push   0xc0029184
c0013458:	e8 cf bc 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001345d:	8d 76 00             	lea    esi,[esi+0x0]
c0013460:	83 c4 10             	add    esp,0x10
c0013463:	85 c0                	test   eax,eax
c0013465:	74 19                	je     c0013480 <SysKill(regs*)+0x54>
c0013467:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001346a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001346d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001346f:	74 33                	je     c00134a4 <SysKill(regs*)+0x78>
c0013471:	52                   	push   edx
c0013472:	52                   	push   edx
c0013473:	50                   	push   eax
c0013474:	68 84 91 02 c0       	push   0xc0029184
c0013479:	e8 ce bf 00 00       	call   c001f44c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001347e:	eb e0                	jmp    c0013460 <SysKill(regs*)+0x34>
c0013480:	83 ec 0c             	sub    esp,0xc
c0013483:	68 78 91 02 c0       	push   0xc0029178
c0013488:	e8 9f bc 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001348d:	8d 76 00             	lea    esi,[esi+0x0]
c0013490:	83 c4 10             	add    esp,0x10
c0013493:	85 c0                	test   eax,eax
c0013495:	74 41                	je     c00134d8 <SysKill(regs*)+0xac>
c0013497:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001349a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001349d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001349f:	75 27                	jne    c00134c8 <SysKill(regs*)+0x9c>
c00134a1:	8d 76 00             	lea    esi,[esi+0x0]
c00134a4:	51                   	push   ecx
c00134a5:	51                   	push   ecx
c00134a6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134b1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00134b7:	e8 f6 db ff ff       	call   c00110b2 <KeRaiseSignal(SigHandlerBlock*, int)>
c00134bc:	83 c4 10             	add    esp,0x10
c00134bf:	31 c0                	xor    eax,eax
c00134c1:	31 d2                	xor    edx,edx
c00134c3:	eb 1b                	jmp    c00134e0 <SysKill(regs*)+0xb4>
c00134c5:	8d 76 00             	lea    esi,[esi+0x0]
c00134c8:	52                   	push   edx
c00134c9:	52                   	push   edx
c00134ca:	50                   	push   eax
c00134cb:	68 78 91 02 c0       	push   0xc0029178
c00134d0:	e8 77 bf 00 00       	call   c001f44c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00134d5:	eb b9                	jmp    c0013490 <SysKill(regs*)+0x64>
c00134d7:	90                   	nop
c00134d8:	83 c8 ff             	or     eax,0xffffffff
c00134db:	89 c2                	mov    edx,eax
c00134dd:	8d 76 00             	lea    esi,[esi+0x0]
c00134e0:	83 c4 08             	add    esp,0x8
c00134e3:	5b                   	pop    ebx
c00134e4:	c3                   	ret    

c00134e5 <SysLoadDLL(regs*)>:
c00134e5:	56                   	push   esi
c00134e6:	53                   	push   ebx
c00134e7:	31 d2                	xor    edx,edx
c00134e9:	51                   	push   ecx
c00134ea:	b8 01 00 00 00       	mov    eax,0x1
c00134ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134f3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00134f7:	0f 84 8c 00 00 00    	je     c0013589 <SysLoadDLL(regs*)+0xa4>
c00134fd:	83 ec 0c             	sub    esp,0xc
c0013500:	68 14 01 00 00       	push   0x114
c0013505:	e8 a4 45 ff ff       	call   c0007aae <malloc>
c001350a:	83 c4 0c             	add    esp,0xc
c001350d:	89 c3                	mov    ebx,eax
c001350f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013514:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013517:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001351a:	53                   	push   ebx
c001351b:	e8 70 7c ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	31 d2                	xor    edx,edx
c0013525:	b8 02 00 00 00       	mov    eax,0x2
c001352a:	85 db                	test   ebx,ebx
c001352c:	74 5b                	je     c0013589 <SysLoadDLL(regs*)+0xa4>
c001352e:	83 ec 0c             	sub    esp,0xc
c0013531:	53                   	push   ebx
c0013532:	e8 d9 7f ff ff       	call   c000b510 <File::exists()>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	84 c0                	test   al,al
c001353c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001353e:	75 11                	jne    c0013551 <SysLoadDLL(regs*)+0x6c>
c0013540:	83 ec 0c             	sub    esp,0xc
c0013543:	53                   	push   ebx
c0013544:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013547:	83 c4 10             	add    esp,0x10
c001354a:	b8 03 00 00 00       	mov    eax,0x3
c001354f:	eb 36                	jmp    c0013587 <SysLoadDLL(regs*)+0xa2>
c0013551:	83 ec 0c             	sub    esp,0xc
c0013554:	53                   	push   ebx
c0013555:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013558:	58                   	pop    eax
c0013559:	5a                   	pop    edx
c001355a:	6a 00                	push   0x0
c001355c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001355f:	e8 0e 15 00 00       	call   c0014a72 <Thr::loadDLL(char const*, bool)>
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	89 c1                	mov    ecx,eax
c0013569:	31 d2                	xor    edx,edx
c001356b:	b8 04 00 00 00       	mov    eax,0x4
c0013570:	85 c9                	test   ecx,ecx
c0013572:	74 15                	je     c0013589 <SysLoadDLL(regs*)+0xa4>
c0013574:	53                   	push   ebx
c0013575:	53                   	push   ebx
c0013576:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001357c:	51                   	push   ecx
c001357d:	e8 21 17 00 00       	call   c0014ca3 <Thr::executeDLL(unsigned long, void*)>
c0013582:	83 c4 10             	add    esp,0x10
c0013585:	31 c0                	xor    eax,eax
c0013587:	31 d2                	xor    edx,edx
c0013589:	59                   	pop    ecx
c001358a:	5b                   	pop    ebx
c001358b:	5e                   	pop    esi
c001358c:	c3                   	ret    

c001358d <SysRead(regs*)>:
c001358d:	57                   	push   edi
c001358e:	56                   	push   esi
c001358f:	53                   	push   ebx
c0013590:	83 ec 10             	sub    esp,0x10
c0013593:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013597:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001359a:	83 f8 02             	cmp    eax,0x2
c001359d:	77 10                	ja     c00135af <SysRead(regs*)+0x22>
c001359f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135a7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00135ad:	eb 0e                	jmp    c00135bd <SysRead(regs*)+0x30>
c00135af:	83 ec 0c             	sub    esp,0xc
c00135b2:	50                   	push   eax
c00135b3:	e8 ef 5e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00135b8:	83 c4 10             	add    esp,0x10
c00135bb:	89 c1                	mov    ecx,eax
c00135bd:	83 c8 ff             	or     eax,0xffffffff
c00135c0:	85 c9                	test   ecx,ecx
c00135c2:	89 c2                	mov    edx,eax
c00135c4:	74 28                	je     c00135ee <SysRead(regs*)+0x61>
c00135c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135ce:	31 ff                	xor    edi,edi
c00135d0:	83 ec 0c             	sub    esp,0xc
c00135d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135d9:	52                   	push   edx
c00135da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135dd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135e0:	57                   	push   edi
c00135e1:	56                   	push   esi
c00135e2:	51                   	push   ecx
c00135e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135ea:	83 c4 20             	add    esp,0x20
c00135ed:	99                   	cdq    
c00135ee:	83 c4 10             	add    esp,0x10
c00135f1:	5b                   	pop    ebx
c00135f2:	5e                   	pop    esi
c00135f3:	5f                   	pop    edi
c00135f4:	c3                   	ret    

c00135f5 <SysRegisterSignal(regs*)>:
c00135f5:	83 ec 18             	sub    esp,0x18
c00135f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135fc:	6a 00                	push   0x0
c00135fe:	6a 00                	push   0x0
c0013600:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013603:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013606:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001360b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001360e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013614:	e8 63 da ff ff       	call   c001107c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013619:	83 c4 2c             	add    esp,0x2c
c001361c:	99                   	cdq    
c001361d:	c3                   	ret    

c001361e <SysRegistryGetTypeFromPath(regs*)>:
c001361e:	57                   	push   edi
c001361f:	56                   	push   esi
c0013620:	53                   	push   ebx
c0013621:	81 ec 38 01 00 00    	sub    esp,0x138
c0013627:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001362e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013631:	68 1b 18 02 c0       	push   0xc002181b
c0013636:	e8 fe 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001363b:	5a                   	pop    edx
c001363c:	59                   	pop    ecx
c001363d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013640:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013643:	e8 4d f6 ff ff       	call   c0012c95 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013648:	5f                   	pop    edi
c0013649:	89 c6                	mov    esi,eax
c001364b:	5a                   	pop    edx
c001364c:	50                   	push   eax
c001364d:	68 3b 18 02 c0       	push   0xc002183b
c0013652:	e8 e2 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	85 f6                	test   esi,esi
c001365c:	74 28                	je     c0013686 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001365e:	50                   	push   eax
c001365f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013663:	57                   	push   edi
c0013664:	56                   	push   esi
c0013665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013668:	e8 0c f2 ff ff       	call   c0012879 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001366d:	83 c4 0c             	add    esp,0xc
c0013670:	89 c3                	mov    ebx,eax
c0013672:	57                   	push   edi
c0013673:	50                   	push   eax
c0013674:	68 43 18 02 c0       	push   0xc0021843
c0013679:	e8 bb 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001367e:	89 d8                	mov    eax,ebx
c0013680:	83 c4 10             	add    esp,0x10
c0013683:	99                   	cdq    
c0013684:	eb 05                	jmp    c001368b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013686:	83 c8 ff             	or     eax,0xffffffff
c0013689:	89 c2                	mov    edx,eax
c001368b:	81 c4 30 01 00 00    	add    esp,0x130
c0013691:	5b                   	pop    ebx
c0013692:	5e                   	pop    esi
c0013693:	5f                   	pop    edi
c0013694:	c3                   	ret    

c0013695 <SysRegistryReadExtent(regs*)>:
c0013695:	83 ec 1c             	sub    esp,0x1c
c0013698:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001369c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001369f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00136a2:	85 c0                	test   eax,eax
c00136a4:	79 1f                	jns    c00136c5 <SysRegistryReadExtent(regs*)+0x30>
c00136a6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00136ab:	52                   	push   edx
c00136ac:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00136b0:	52                   	push   edx
c00136b1:	50                   	push   eax
c00136b2:	51                   	push   ecx
c00136b3:	e8 b3 f0 ff ff       	call   c001276b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00136b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00136c0:	83 c4 10             	add    esp,0x10
c00136c3:	eb 14                	jmp    c00136d9 <SysRegistryReadExtent(regs*)+0x44>
c00136c5:	83 ec 04             	sub    esp,0x4
c00136c8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00136cb:	50                   	push   eax
c00136cc:	51                   	push   ecx
c00136cd:	e8 33 eb ff ff       	call   c0012205 <CmGetString(Reghive_Tag*, int, char*)>
c00136d2:	83 c4 10             	add    esp,0x10
c00136d5:	31 c0                	xor    eax,eax
c00136d7:	31 d2                	xor    edx,edx
c00136d9:	83 c4 1c             	add    esp,0x1c
c00136dc:	c3                   	ret    

c00136dd <SysRegistryPathToExtentLookup(regs*)>:
c00136dd:	53                   	push   ebx
c00136de:	83 ec 10             	sub    esp,0x10
c00136e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00136e8:	68 59 18 02 c0       	push   0xc0021859
c00136ed:	e8 47 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00136f2:	58                   	pop    eax
c00136f3:	5a                   	pop    edx
c00136f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00136f7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136fa:	e8 96 f5 ff ff       	call   c0012c95 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00136ff:	83 c4 18             	add    esp,0x18
c0013702:	99                   	cdq    
c0013703:	5b                   	pop    ebx
c0013704:	c3                   	ret    

c0013705 <SysRegistryEnterDirectory(regs*)>:
c0013705:	53                   	push   ebx
c0013706:	83 ec 10             	sub    esp,0x10
c0013709:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001370d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013710:	68 7c 18 02 c0       	push   0xc002187c
c0013715:	e8 1f 72 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001371a:	58                   	pop    eax
c001371b:	5a                   	pop    edx
c001371c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001371f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013722:	e8 55 eb ff ff       	call   c001227c <CmEnterDirectory(Reghive_Tag*, int)>
c0013727:	83 c4 18             	add    esp,0x18
c001372a:	99                   	cdq    
c001372b:	5b                   	pop    ebx
c001372c:	c3                   	ret    

c001372d <SysRegistryGetNext(regs*)>:
c001372d:	53                   	push   ebx
c001372e:	83 ec 10             	sub    esp,0x10
c0013731:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013735:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013738:	68 9a 18 02 c0       	push   0xc002189a
c001373d:	e8 f7 71 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013742:	58                   	pop    eax
c0013743:	5a                   	pop    edx
c0013744:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013747:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001374a:	e8 6c eb ff ff       	call   c00122bb <CmGetNext(Reghive_Tag*, int)>
c001374f:	83 c4 18             	add    esp,0x18
c0013752:	99                   	cdq    
c0013753:	5b                   	pop    ebx
c0013754:	c3                   	ret    

c0013755 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013755:	57                   	push   edi
c0013756:	56                   	push   esi
c0013757:	53                   	push   ebx
c0013758:	81 ec 34 01 00 00    	sub    esp,0x134
c001375e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013765:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013769:	57                   	push   edi
c001376a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001376d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013770:	e8 04 f1 ff ff       	call   c0012879 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013775:	89 c3                	mov    ebx,eax
c0013777:	58                   	pop    eax
c0013778:	5a                   	pop    edx
c0013779:	57                   	push   edi
c001377a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001377d:	e8 be ce fe ff       	call   c0000640 <strcpy>
c0013782:	89 d8                	mov    eax,ebx
c0013784:	81 c4 40 01 00 00    	add    esp,0x140
c001378a:	99                   	cdq    
c001378b:	5b                   	pop    ebx
c001378c:	5e                   	pop    esi
c001378d:	5f                   	pop    edi
c001378e:	c3                   	ret    

c001378f <SysRegistryOpen(regs*)>:
c001378f:	83 ec 18             	sub    esp,0x18
c0013792:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013796:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013799:	e8 f7 e8 ff ff       	call   c0012095 <CmOpen(char const*)>
c001379e:	83 c4 1c             	add    esp,0x1c
c00137a1:	99                   	cdq    
c00137a2:	c3                   	ret    

c00137a3 <SysRegistryClose(regs*)>:
c00137a3:	83 ec 18             	sub    esp,0x18
c00137a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137ad:	e8 01 ea ff ff       	call   c00121b3 <CmClose(Reghive_Tag*)>
c00137b2:	31 c0                	xor    eax,eax
c00137b4:	31 d2                	xor    edx,edx
c00137b6:	83 c4 1c             	add    esp,0x1c
c00137b9:	c3                   	ret    

c00137ba <SysSbrk(regs*)>:
c00137ba:	56                   	push   esi
c00137bb:	53                   	push   ebx
c00137bc:	50                   	push   eax
c00137bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137c9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00137cc:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00137d2:	85 db                	test   ebx,ebx
c00137d4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00137d7:	74 02                	je     c00137db <SysSbrk(regs*)+0x21>
c00137d9:	79 06                	jns    c00137e1 <SysSbrk(regs*)+0x27>
c00137db:	89 f0                	mov    eax,esi
c00137dd:	31 d2                	xor    edx,edx
c00137df:	eb 2a                	jmp    c001380b <SysSbrk(regs*)+0x51>
c00137e1:	83 c8 ff             	or     eax,0xffffffff
c00137e4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00137ea:	89 c2                	mov    edx,eax
c00137ec:	77 1d                	ja     c001380b <SysSbrk(regs*)+0x51>
c00137ee:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00137f4:	50                   	push   eax
c00137f5:	c1 ea 0c             	shr    edx,0xc
c00137f8:	68 07 0c 00 00       	push   0xc07
c00137fd:	52                   	push   edx
c00137fe:	51                   	push   ecx
c00137ff:	e8 14 66 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c0013804:	89 f0                	mov    eax,esi
c0013806:	31 d2                	xor    edx,edx
c0013808:	83 c4 10             	add    esp,0x10
c001380b:	59                   	pop    ecx
c001380c:	5b                   	pop    ebx
c001380d:	5e                   	pop    esi
c001380e:	c3                   	ret    

c001380f <SysSetCwd(regs*)>:
c001380f:	83 ec 14             	sub    esp,0x14
c0013812:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013816:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001381e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013821:	e8 89 7d ff ff       	call   c000b5af <Fs::setcwd(Process*, char*)>
c0013826:	83 c4 1c             	add    esp,0x1c
c0013829:	99                   	cdq    
c001382a:	c3                   	ret    

c001382b <SysSetTime(regs*)>:
c001382b:	55                   	push   ebp
c001382c:	31 c9                	xor    ecx,ecx
c001382e:	57                   	push   edi
c001382f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013834:	56                   	push   esi
c0013835:	53                   	push   ebx
c0013836:	31 db                	xor    ebx,ebx
c0013838:	83 ec 10             	sub    esp,0x10
c001383b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001383f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013842:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013845:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013848:	89 c2                	mov    edx,eax
c001384a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013850:	83 e2 1f             	and    edx,0x1f
c0013853:	c1 e7 10             	shl    edi,0x10
c0013856:	42                   	inc    edx
c0013857:	c1 e8 05             	shr    eax,0x5
c001385a:	88 d1                	mov    cl,dl
c001385c:	31 d2                	xor    edx,edx
c001385e:	f7 f5                	div    ebp
c0013860:	89 dd                	mov    ebp,ebx
c0013862:	88 d5                	mov    ch,dl
c0013864:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001386a:	0f b7 c1             	movzx  eax,cx
c001386d:	31 d2                	xor    edx,edx
c001386f:	09 f8                	or     eax,edi
c0013871:	bf 3c 00 00 00       	mov    edi,0x3c
c0013876:	89 c1                	mov    ecx,eax
c0013878:	89 f0                	mov    eax,esi
c001387a:	f7 f7                	div    edi
c001387c:	c1 e2 10             	shl    edx,0x10
c001387f:	09 d5                	or     ebp,edx
c0013881:	31 d2                	xor    edx,edx
c0013883:	89 eb                	mov    ebx,ebp
c0013885:	f7 f7                	div    edi
c0013887:	bf 10 0e 00 00       	mov    edi,0xe10
c001388c:	88 d7                	mov    bh,dl
c001388e:	89 f0                	mov    eax,esi
c0013890:	31 d2                	xor    edx,edx
c0013892:	f7 f7                	div    edi
c0013894:	bf 18 00 00 00       	mov    edi,0x18
c0013899:	31 d2                	xor    edx,edx
c001389b:	f7 f7                	div    edi
c001389d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00138a2:	88 d3                	mov    bl,dl
c00138a4:	53                   	push   ebx
c00138a5:	51                   	push   ecx
c00138a6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00138ac:	e8 fd 84 ff ff       	call   c000bdae <Clock::setTimeInDatetimeLocal(datetime_t)>
c00138b1:	83 c4 1c             	add    esp,0x1c
c00138b4:	83 f0 01             	xor    eax,0x1
c00138b7:	5b                   	pop    ebx
c00138b8:	0f b6 c0             	movzx  eax,al
c00138bb:	5e                   	pop    esi
c00138bc:	31 d2                	xor    edx,edx
c00138be:	5f                   	pop    edi
c00138bf:	5d                   	pop    ebp
c00138c0:	c3                   	ret    

c00138c1 <SysTimezone(regs*)>:
c00138c1:	53                   	push   ebx
c00138c2:	83 ec 08             	sub    esp,0x8
c00138c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138c9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00138cd:	75 17                	jne    c00138e6 <SysTimezone(regs*)+0x25>
c00138cf:	83 ec 0c             	sub    esp,0xc
c00138d2:	68 b1 18 02 c0       	push   0xc00218b1
c00138d7:	e8 5d 70 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00138dc:	83 c8 ff             	or     eax,0xffffffff
c00138df:	83 c4 10             	add    esp,0x10
c00138e2:	89 c2                	mov    edx,eax
c00138e4:	eb 20                	jmp    c0013906 <SysTimezone(regs*)+0x45>
c00138e6:	83 ec 0c             	sub    esp,0xc
c00138e9:	68 c6 18 02 c0       	push   0xc00218c6
c00138ee:	e8 46 70 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00138f3:	58                   	pop    eax
c00138f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00138f7:	e8 1c 82 ff ff       	call   c000bb18 <User::loadClockSettings(int)>
c00138fc:	83 c4 10             	add    esp,0x10
c00138ff:	b8 01 00 00 00       	mov    eax,0x1
c0013904:	31 d2                	xor    edx,edx
c0013906:	83 c4 08             	add    esp,0x8
c0013909:	5b                   	pop    ebx
c001390a:	c3                   	ret    

c001390b <SysTruncate(regs*)>:
c001390b:	55                   	push   ebp
c001390c:	57                   	push   edi
c001390d:	31 ff                	xor    edi,edi
c001390f:	56                   	push   esi
c0013910:	53                   	push   ebx
c0013911:	83 ec 0c             	sub    esp,0xc
c0013914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013918:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001391b:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001391e:	89 ce                	mov    esi,ecx
c0013920:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013924:	0f 84 9a 00 00 00    	je     c00139c4 <SysTruncate(regs*)+0xb9>
c001392a:	83 ec 0c             	sub    esp,0xc
c001392d:	68 14 01 00 00       	push   0x114
c0013932:	e8 77 41 ff ff       	call   c0007aae <malloc>
c0013937:	83 c4 0c             	add    esp,0xc
c001393a:	89 c3                	mov    ebx,eax
c001393c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013941:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013944:	55                   	push   ebp
c0013945:	53                   	push   ebx
c0013946:	e8 45 78 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	31 d2                	xor    edx,edx
c0013950:	b8 03 00 00 00       	mov    eax,0x3
c0013955:	85 db                	test   ebx,ebx
c0013957:	0f 84 a2 00 00 00    	je     c00139ff <SysTruncate(regs*)+0xf4>
c001395d:	51                   	push   ecx
c001395e:	51                   	push   ecx
c001395f:	6a 02                	push   0x2
c0013961:	53                   	push   ebx
c0013962:	e8 e5 78 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	85 c0                	test   eax,eax
c001396c:	74 13                	je     c0013981 <SysTruncate(regs*)+0x76>
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013973:	53                   	push   ebx
c0013974:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	b8 04 00 00 00       	mov    eax,0x4
c001397f:	eb 7c                	jmp    c00139fd <SysTruncate(regs*)+0xf2>
c0013981:	52                   	push   edx
c0013982:	57                   	push   edi
c0013983:	56                   	push   esi
c0013984:	53                   	push   ebx
c0013985:	e8 d6 79 ff ff       	call   c000b360 <File::truncate(unsigned long long)>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	85 c0                	test   eax,eax
c001398f:	74 1b                	je     c00139ac <SysTruncate(regs*)+0xa1>
c0013991:	83 ec 0c             	sub    esp,0xc
c0013994:	53                   	push   ebx
c0013995:	e8 10 79 ff ff       	call   c000b2aa <File::close()>
c001399a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001399c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001399f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139a2:	83 c4 10             	add    esp,0x10
c00139a5:	b8 05 00 00 00       	mov    eax,0x5
c00139aa:	eb 51                	jmp    c00139fd <SysTruncate(regs*)+0xf2>
c00139ac:	83 ec 0c             	sub    esp,0xc
c00139af:	53                   	push   ebx
c00139b0:	e8 f5 78 ff ff       	call   c000b2aa <File::close()>
c00139b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139bd:	83 c4 10             	add    esp,0x10
c00139c0:	31 c0                	xor    eax,eax
c00139c2:	eb 39                	jmp    c00139fd <SysTruncate(regs*)+0xf2>
c00139c4:	31 d2                	xor    edx,edx
c00139c6:	b8 01 00 00 00       	mov    eax,0x1
c00139cb:	83 fd 02             	cmp    ebp,0x2
c00139ce:	7e 2f                	jle    c00139ff <SysTruncate(regs*)+0xf4>
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	51                   	push   ecx
c00139d4:	e8 ce 5a ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00139d9:	83 c4 10             	add    esp,0x10
c00139dc:	89 c1                	mov    ecx,eax
c00139de:	31 d2                	xor    edx,edx
c00139e0:	b8 02 00 00 00       	mov    eax,0x2
c00139e5:	85 c9                	test   ecx,ecx
c00139e7:	74 16                	je     c00139ff <SysTruncate(regs*)+0xf4>
c00139e9:	50                   	push   eax
c00139ea:	57                   	push   edi
c00139eb:	56                   	push   esi
c00139ec:	51                   	push   ecx
c00139ed:	e8 6e 79 ff ff       	call   c000b360 <File::truncate(unsigned long long)>
c00139f2:	83 c4 10             	add    esp,0x10
c00139f5:	85 c0                	test   eax,eax
c00139f7:	0f 95 c0             	setne  al
c00139fa:	0f b6 c0             	movzx  eax,al
c00139fd:	31 d2                	xor    edx,edx
c00139ff:	83 c4 0c             	add    esp,0xc
c0013a02:	5b                   	pop    ebx
c0013a03:	5e                   	pop    esi
c0013a04:	5f                   	pop    edi
c0013a05:	5d                   	pop    ebp
c0013a06:	c3                   	ret    

c0013a07 <SysWrite(regs*)>:
c0013a07:	57                   	push   edi
c0013a08:	56                   	push   esi
c0013a09:	53                   	push   ebx
c0013a0a:	83 ec 10             	sub    esp,0x10
c0013a0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013a11:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a14:	83 f8 02             	cmp    eax,0x2
c0013a17:	77 10                	ja     c0013a29 <SysWrite(regs*)+0x22>
c0013a19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a21:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013a27:	eb 0e                	jmp    c0013a37 <SysWrite(regs*)+0x30>
c0013a29:	83 ec 0c             	sub    esp,0xc
c0013a2c:	50                   	push   eax
c0013a2d:	e8 75 5a ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0013a32:	83 c4 10             	add    esp,0x10
c0013a35:	89 c1                	mov    ecx,eax
c0013a37:	83 c8 ff             	or     eax,0xffffffff
c0013a3a:	85 c9                	test   ecx,ecx
c0013a3c:	89 c2                	mov    edx,eax
c0013a3e:	74 28                	je     c0013a68 <SysWrite(regs*)+0x61>
c0013a40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013a48:	31 ff                	xor    edi,edi
c0013a4a:	83 ec 0c             	sub    esp,0xc
c0013a4d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a4f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a53:	52                   	push   edx
c0013a54:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a57:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013a5a:	57                   	push   edi
c0013a5b:	56                   	push   esi
c0013a5c:	51                   	push   ecx
c0013a5d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013a64:	83 c4 20             	add    esp,0x20
c0013a67:	99                   	cdq    
c0013a68:	83 c4 10             	add    esp,0x10
c0013a6b:	5b                   	pop    ebx
c0013a6c:	5e                   	pop    esi
c0013a6d:	5f                   	pop    edi
c0013a6e:	c3                   	ret    

c0013a6f <SysWsbe(regs*)>:
c0013a6f:	57                   	push   edi
c0013a70:	b9 0b 00 00 00       	mov    ecx,0xb
c0013a75:	56                   	push   esi
c0013a76:	be 05 19 02 c0       	mov    esi,0xc0021905
c0013a7b:	53                   	push   ebx
c0013a7c:	83 ec 30             	sub    esp,0x30
c0013a7f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013a83:	fc                   	cld    
c0013a84:	83 ec 0c             	sub    esp,0xc
c0013a87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a89:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013a8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a95:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013a9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a9d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013aa0:	57                   	push   edi
c0013aa1:	e8 ca ca fe ff       	call   c0000570 <strlen>
c0013aa6:	5a                   	pop    edx
c0013aa7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013aab:	52                   	push   edx
c0013aac:	31 d2                	xor    edx,edx
c0013aae:	57                   	push   edi
c0013aaf:	52                   	push   edx
c0013ab0:	50                   	push   eax
c0013ab1:	56                   	push   esi
c0013ab2:	ff d3                	call   ebx
c0013ab4:	83 c4 14             	add    esp,0x14
c0013ab7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013abb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013abe:	e8 ad 23 00 00       	call   c0015e70 <terminateTask(int)>
c0013ac3:	83 c4 40             	add    esp,0x40
c0013ac6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013acb:	5b                   	pop    ebx
c0013acc:	31 d2                	xor    edx,edx
c0013ace:	5e                   	pop    esi
c0013acf:	5f                   	pop    edi
c0013ad0:	c3                   	ret    

c0013ad1 <SysYield(regs*)>:
c0013ad1:	83 ec 0c             	sub    esp,0xc
c0013ad4:	fa                   	cli    
c0013ad5:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013adb:	e8 f0 19 00 00       	call   c00154d0 <schedule()>
c0013ae0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013ae5:	48                   	dec    eax
c0013ae6:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013aeb:	75 01                	jne    c0013aee <SysYield(regs*)+0x1d>
c0013aed:	fb                   	sti    
c0013aee:	31 c0                	xor    eax,eax
c0013af0:	31 d2                	xor    edx,edx
c0013af2:	83 c4 0c             	add    esp,0xc
c0013af5:	c3                   	ret    

c0013af6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013af6:	55                   	push   ebp
c0013af7:	57                   	push   edi
c0013af8:	56                   	push   esi
c0013af9:	53                   	push   ebx
c0013afa:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013b00:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013b08:	0f 95 c0             	setne  al
c0013b0b:	31 d2                	xor    edx,edx
c0013b0d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013b15:	0f 94 c2             	sete   dl
c0013b18:	85 c2                	test   edx,eax
c0013b1a:	74 34                	je     c0013b50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013b1c:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013b27:	74 27                	je     c0013b50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013b29:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013b30:	05 00 10 00 00       	add    eax,0x1000
c0013b35:	89 c1                	mov    ecx,eax
c0013b37:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b3c:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013b42:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013b49:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013b50:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013b57:	83 ec 0c             	sub    esp,0xc
c0013b5a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b60:	6a 01                	push   0x1
c0013b62:	e8 9a 5a ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0013b67:	83 c4 10             	add    esp,0x10
c0013b6a:	89 c3                	mov    ebx,eax
c0013b6c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b72:	0f 86 25 01 00 00    	jbe    c0013c9d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013b78:	c1 ee 0c             	shr    esi,0xc
c0013b7b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b82:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013b86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013b8e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013b95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b99:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013ba0:	29 ef                	sub    edi,ebp
c0013ba2:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013ba6:	0f 83 f8 00 00 00    	jae    c0013ca4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0013bac:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013bb2:	76 05                	jbe    c0013bb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013bb4:	bf 00 10 00 00       	mov    edi,0x1000
c0013bb9:	83 ec 0c             	sub    esp,0xc
c0013bbc:	31 d2                	xor    edx,edx
c0013bbe:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013bc5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013bc7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bcb:	50                   	push   eax
c0013bcc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013bd0:	56                   	push   esi
c0013bd1:	52                   	push   edx
c0013bd2:	57                   	push   edi
c0013bd3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013bda:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013bdd:	83 c4 20             	add    esp,0x20
c0013be0:	85 c0                	test   eax,eax
c0013be2:	75 06                	jne    c0013bea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013be4:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013be8:	74 13                	je     c0013bfd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013bea:	83 ec 0c             	sub    esp,0xc
c0013bed:	53                   	push   ebx
c0013bee:	e8 2c 5d ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0013bf3:	83 c4 10             	add    esp,0x10
c0013bf6:	31 c0                	xor    eax,eax
c0013bf8:	e9 7c 01 00 00       	jmp    c0013d79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013bfd:	fa                   	cli    
c0013bfe:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013c04:	e8 a9 41 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0013c09:	6a 07                	push   0x7
c0013c0b:	89 c7                	mov    edi,eax
c0013c0d:	53                   	push   ebx
c0013c0e:	50                   	push   eax
c0013c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c1d:	e8 f2 60 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c22:	83 c4 0c             	add    esp,0xc
c0013c25:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013c2c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c32:	6a 00                	push   0x0
c0013c34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c3c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c42:	e8 33 5f ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0013c47:	58                   	pop    eax
c0013c48:	5a                   	pop    edx
c0013c49:	68 07 0c 00 00       	push   0xc07
c0013c4e:	55                   	push   ebp
c0013c4f:	57                   	push   edi
c0013c50:	89 df                	mov    edi,ebx
c0013c52:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013c59:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c5f:	6a 00                	push   0x0
c0013c61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c69:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c6f:	e8 f2 62 ff ff       	call   c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013c74:	b9 00 10 00 00       	mov    ecx,0x1000
c0013c79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c7b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013c80:	83 c4 20             	add    esp,0x20
c0013c83:	48                   	dec    eax
c0013c84:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013c89:	85 c0                	test   eax,eax
c0013c8b:	75 01                	jne    c0013c8e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013c8d:	fb                   	sti    
c0013c8e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013c94:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013c98:	e9 f1 fe ff ff       	jmp    c0013b8e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013c9d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013ca4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013cab:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013cb1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013cb7:	0f 86 ae 00 00 00    	jbe    c0013d6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013cbd:	fa                   	cli    
c0013cbe:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013cc4:	c1 ee 0c             	shr    esi,0xc
c0013cc7:	51                   	push   ecx
c0013cc8:	31 ff                	xor    edi,edi
c0013cca:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013cd1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013cd7:	6a 00                	push   0x0
c0013cd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ce1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ce7:	e8 8e 5e ff ff       	call   c0009b7a <VAS::mapOtherVASIn(bool, VAS*)>
c0013cec:	83 c4 10             	add    esp,0x10
c0013cef:	e8 be 40 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0013cf4:	47                   	inc    edi
c0013cf5:	6a 07                	push   0x7
c0013cf7:	53                   	push   ebx
c0013cf8:	50                   	push   eax
c0013cf9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013cfd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d03:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013d06:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013d0c:	e8 03 60 ff ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d11:	58                   	pop    eax
c0013d12:	5a                   	pop    edx
c0013d13:	68 07 0c 00 00       	push   0xc07
c0013d18:	55                   	push   ebp
c0013d19:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013d1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d23:	50                   	push   eax
c0013d24:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013d2b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013d31:	6a 00                	push   0x0
c0013d33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d3b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013d41:	e8 20 62 ff ff       	call   c0009f66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013d46:	83 c4 1c             	add    esp,0x1c
c0013d49:	68 00 10 00 00       	push   0x1000
c0013d4e:	6a 00                	push   0x0
c0013d50:	53                   	push   ebx
c0013d51:	e8 9a c7 fe ff       	call   c00004f0 <memset>
c0013d56:	83 c4 10             	add    esp,0x10
c0013d59:	39 fe                	cmp    esi,edi
c0013d5b:	77 92                	ja     c0013cef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013d5d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013d62:	48                   	dec    eax
c0013d63:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013d68:	75 01                	jne    c0013d6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013d6a:	fb                   	sti    
c0013d6b:	83 ec 0c             	sub    esp,0xc
c0013d6e:	53                   	push   ebx
c0013d6f:	e8 ab 5b ff ff       	call   c000991f <Virt::freeKernelVirtualPages(unsigned long)>
c0013d74:	83 c4 10             	add    esp,0x10
c0013d77:	b0 01                	mov    al,0x1
c0013d79:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013d7f:	5b                   	pop    ebx
c0013d80:	5e                   	pop    esi
c0013d81:	5f                   	pop    edi
c0013d82:	5d                   	pop    ebp
c0013d83:	c3                   	ret    

c0013d84 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013d84:	55                   	push   ebp
c0013d85:	57                   	push   edi
c0013d86:	56                   	push   esi
c0013d87:	53                   	push   ebx
c0013d88:	83 ec 48             	sub    esp,0x48
c0013d8b:	68 14 01 00 00       	push   0x114
c0013d90:	e8 19 3d ff ff       	call   c0007aae <malloc>
c0013d95:	83 c4 0c             	add    esp,0xc
c0013d98:	89 c6                	mov    esi,eax
c0013d9a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013d9e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013da2:	50                   	push   eax
c0013da3:	e8 e8 73 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0013da8:	58                   	pop    eax
c0013da9:	5a                   	pop    edx
c0013daa:	6a 01                	push   0x1
c0013dac:	56                   	push   esi
c0013dad:	e8 9a 74 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	85 c0                	test   eax,eax
c0013db7:	0f 85 43 01 00 00    	jne    c0013f00 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013dbd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013dc5:	83 ec 0c             	sub    esp,0xc
c0013dc8:	6a 34                	push   0x34
c0013dca:	e8 df 3c ff ff       	call   c0007aae <malloc>
c0013dcf:	89 c3                	mov    ebx,eax
c0013dd1:	58                   	pop    eax
c0013dd2:	8b 06                	mov    eax,DWORD PTR [esi]
c0013dd4:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013dd8:	57                   	push   edi
c0013dd9:	53                   	push   ebx
c0013dda:	6a 00                	push   0x0
c0013ddc:	6a 34                	push   0x34
c0013dde:	56                   	push   esi
c0013ddf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013de2:	83 c4 20             	add    esp,0x20
c0013de5:	85 c0                	test   eax,eax
c0013de7:	0f 85 13 01 00 00    	jne    c0013f00 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013ded:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013df3:	0f 85 07 01 00 00    	jne    c0013f00 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013df9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013dfc:	85 c0                	test   eax,eax
c0013dfe:	0f 84 fc 00 00 00    	je     c0013f00 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013e04:	31 d2                	xor    edx,edx
c0013e06:	55                   	push   ebp
c0013e07:	52                   	push   edx
c0013e08:	50                   	push   eax
c0013e09:	56                   	push   esi
c0013e0a:	e8 fb 74 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013e0f:	83 c4 10             	add    esp,0x10
c0013e12:	85 c0                	test   eax,eax
c0013e14:	0f 85 e6 00 00 00    	jne    c0013f00 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013e1a:	83 ec 0c             	sub    esp,0xc
c0013e1d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013e20:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013e24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013e28:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013e2c:	0f af c2             	imul   eax,edx
c0013e2f:	50                   	push   eax
c0013e30:	e8 79 3c ff ff       	call   c0007aae <malloc>
c0013e35:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013e37:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013e3b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e3e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e42:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013e46:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013e4a:	0f af c2             	imul   eax,edx
c0013e4d:	99                   	cdq    
c0013e4e:	52                   	push   edx
c0013e4f:	50                   	push   eax
c0013e50:	56                   	push   esi
c0013e51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e54:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013e57:	83 c4 20             	add    esp,0x20
c0013e5a:	85 c0                	test   eax,eax
c0013e5c:	0f 84 9e 00 00 00    	je     c0013f00 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013e62:	31 d2                	xor    edx,edx
c0013e64:	51                   	push   ecx
c0013e65:	52                   	push   edx
c0013e66:	50                   	push   eax
c0013e67:	56                   	push   esi
c0013e68:	e8 9d 74 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	85 c0                	test   eax,eax
c0013e72:	0f 85 88 00 00 00    	jne    c0013f00 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013e7f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013e83:	31 ed                	xor    ebp,ebp
c0013e85:	0f af c2             	imul   eax,edx
c0013e88:	50                   	push   eax
c0013e89:	e8 20 3c ff ff       	call   c0007aae <malloc>
c0013e8e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013e90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013e9f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013ea3:	0f af c2             	imul   eax,edx
c0013ea6:	99                   	cdq    
c0013ea7:	52                   	push   edx
c0013ea8:	50                   	push   eax
c0013ea9:	56                   	push   esi
c0013eaa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ead:	83 c4 20             	add    esp,0x20
c0013eb0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013eb8:	0f b7 fd             	movzx  edi,bp
c0013ebb:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013ebf:	73 7d                	jae    c0013f3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013ec1:	c1 e7 05             	shl    edi,0x5
c0013ec4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013ec8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013ecb:	75 6b                	jne    c0013f38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013ecd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013ed0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ed4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013ed7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013edb:	52                   	push   edx
c0013edc:	31 d2                	xor    edx,edx
c0013ede:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013ee1:	52                   	push   edx
c0013ee2:	50                   	push   eax
c0013ee3:	56                   	push   esi
c0013ee4:	e8 21 74 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0013ee9:	83 c4 10             	add    esp,0x10
c0013eec:	85 c0                	test   eax,eax
c0013eee:	74 17                	je     c0013f07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013ef0:	83 ec 0c             	sub    esp,0xc
c0013ef3:	68 31 19 02 c0       	push   0xc0021931
c0013ef8:	e8 3c 6a ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013efd:	83 c4 10             	add    esp,0x10
c0013f00:	31 c0                	xor    eax,eax
c0013f02:	e9 87 00 00 00       	jmp    c0013f8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013f07:	83 ec 0c             	sub    esp,0xc
c0013f0a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013f0d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013f10:	50                   	push   eax
c0013f11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013f15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f19:	56                   	push   esi
c0013f1a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013f1e:	e8 d3 fb ff ff       	call   c0013af6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013f23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f27:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013f2b:	83 c4 20             	add    esp,0x20
c0013f2e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013f32:	73 04                	jae    c0013f38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013f34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f38:	45                   	inc    ebp
c0013f39:	e9 7a ff ff ff       	jmp    c0013eb8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013f3e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013f42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f4a:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013f50:	83 ec 0c             	sub    esp,0xc
c0013f53:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013f59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f5e:	05 00 10 00 00       	add    eax,0x1000
c0013f63:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f6a:	e8 4f 3b ff ff       	call   c0007abe <free>
c0013f6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f72:	e8 47 3b ff ff       	call   c0007abe <free>
c0013f77:	58                   	pop    eax
c0013f78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f7c:	e8 3d 3b ff ff       	call   c0007abe <free>
c0013f81:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f84:	e8 21 73 ff ff       	call   c000b2aa <File::close()>
c0013f89:	83 c4 10             	add    esp,0x10
c0013f8c:	b0 01                	mov    al,0x1
c0013f8e:	83 c4 3c             	add    esp,0x3c
c0013f91:	5b                   	pop    ebx
c0013f92:	5e                   	pop    esi
c0013f93:	5f                   	pop    edi
c0013f94:	5d                   	pop    ebp
c0013f95:	c3                   	ret    

c0013f96 <Thr::runtimeReferenceHelper()>:
c0013f96:	83 ec 18             	sub    esp,0x18
c0013f99:	68 39 19 02 c0       	push   0xc0021939
c0013f9e:	e8 96 69 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0013fa3:	fa                   	cli    
c0013fa4:	83 c4 10             	add    esp,0x10
c0013fa7:	eb fe                	jmp    c0013fa7 <Thr::runtimeReferenceHelper()+0x11>

c0013fa9 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013fa9:	57                   	push   edi
c0013faa:	56                   	push   esi
c0013fab:	53                   	push   ebx
c0013fac:	31 db                	xor    ebx,ebx
c0013fae:	39 1d 40 91 02 c0    	cmp    DWORD PTR ds:0xc0029140,ebx
c0013fb4:	7e 3c                	jle    c0013ff2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013fb6:	8b 34 9d c0 90 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6f40]
c0013fbd:	31 ff                	xor    edi,edi
c0013fbf:	39 3c 9d c0 8f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd7040],edi
c0013fc6:	7e 27                	jle    c0013fef <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013fc8:	50                   	push   eax
c0013fc9:	50                   	push   eax
c0013fca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fce:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fd0:	03 04 9d 40 90 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6fc0]
c0013fd7:	50                   	push   eax
c0013fd8:	e8 73 c7 fe ff       	call   c0000750 <strcmp>
c0013fdd:	83 c4 10             	add    esp,0x10
c0013fe0:	85 c0                	test   eax,eax
c0013fe2:	75 05                	jne    c0013fe9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013fe4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013fe7:	eb 0b                	jmp    c0013ff4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013fe9:	83 c6 10             	add    esi,0x10
c0013fec:	47                   	inc    edi
c0013fed:	eb d0                	jmp    c0013fbf <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013fef:	43                   	inc    ebx
c0013ff0:	eb bc                	jmp    c0013fae <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013ff2:	31 c0                	xor    eax,eax
c0013ff4:	5b                   	pop    ebx
c0013ff5:	5e                   	pop    esi
c0013ff6:	5f                   	pop    edi
c0013ff7:	c3                   	ret    

c0013ff8 <Thr::loadKernelSymbolTable(char const*)>:
c0013ff8:	55                   	push   ebp
c0013ff9:	57                   	push   edi
c0013ffa:	56                   	push   esi
c0013ffb:	53                   	push   ebx
c0013ffc:	83 ec 68             	sub    esp,0x68
c0013fff:	8b 35 90 91 02 c0    	mov    esi,DWORD PTR ds:0xc0029190
c0014005:	68 14 01 00 00       	push   0x114
c001400a:	e8 9f 3a ff ff       	call   c0007aae <malloc>
c001400f:	83 c4 0c             	add    esp,0xc
c0014012:	89 c3                	mov    ebx,eax
c0014014:	56                   	push   esi
c0014015:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014019:	50                   	push   eax
c001401a:	e8 71 71 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001401f:	5e                   	pop    esi
c0014020:	5f                   	pop    edi
c0014021:	6a 01                	push   0x1
c0014023:	53                   	push   ebx
c0014024:	e8 23 72 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0014029:	83 c4 10             	add    esp,0x10
c001402c:	85 c0                	test   eax,eax
c001402e:	74 0a                	je     c001403a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014030:	83 ec 0c             	sub    esp,0xc
c0014033:	68 5b 19 02 c0       	push   0xc002195b
c0014038:	eb 34                	jmp    c001406e <Thr::loadKernelSymbolTable(char const*)+0x76>
c001403a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014042:	83 ec 0c             	sub    esp,0xc
c0014045:	6a 34                	push   0x34
c0014047:	e8 62 3a ff ff       	call   c0007aae <malloc>
c001404c:	59                   	pop    ecx
c001404d:	89 c7                	mov    edi,eax
c001404f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014053:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014055:	56                   	push   esi
c0014056:	57                   	push   edi
c0014057:	6a 00                	push   0x0
c0014059:	6a 34                	push   0x34
c001405b:	53                   	push   ebx
c001405c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001405f:	83 c4 20             	add    esp,0x20
c0014062:	85 c0                	test   eax,eax
c0014064:	74 17                	je     c001407d <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014066:	83 ec 0c             	sub    esp,0xc
c0014069:	68 72 19 02 c0       	push   0xc0021972
c001406e:	e8 9e cb ff ff       	call   c0010c11 <KePanic(char const*)>
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	31 c0                	xor    eax,eax
c0014078:	e9 31 02 00 00       	jmp    c00142ae <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001407d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014083:	75 e1                	jne    c0014066 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014085:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014088:	85 c0                	test   eax,eax
c001408a:	74 da                	je     c0014066 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001408c:	52                   	push   edx
c001408d:	31 d2                	xor    edx,edx
c001408f:	52                   	push   edx
c0014090:	50                   	push   eax
c0014091:	53                   	push   ebx
c0014092:	e8 73 72 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	85 c0                	test   eax,eax
c001409c:	75 c8                	jne    c0014066 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00140a5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00140a9:	31 ed                	xor    ebp,ebp
c00140ab:	0f af c2             	imul   eax,edx
c00140ae:	50                   	push   eax
c00140af:	e8 fa 39 ff ff       	call   c0007aae <malloc>
c00140b4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00140ba:	89 34 24             	mov    DWORD PTR [esp],esi
c00140bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140c1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00140c5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00140c9:	0f af c2             	imul   eax,edx
c00140cc:	99                   	cdq    
c00140cd:	52                   	push   edx
c00140ce:	50                   	push   eax
c00140cf:	53                   	push   ebx
c00140d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140d3:	83 c4 20             	add    esp,0x20
c00140d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00140de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00140e6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00140ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140f6:	0f b7 f5             	movzx  esi,bp
c00140f9:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00140fd:	0f 83 a7 00 00 00    	jae    c00141aa <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014103:	6b f6 28             	imul   esi,esi,0x28
c0014106:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001410a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001410d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014111:	50                   	push   eax
c0014112:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014116:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001411a:	8b 16                	mov    edx,DWORD PTR [esi]
c001411c:	6b c0 28             	imul   eax,eax,0x28
c001411f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014123:	89 d0                	mov    eax,edx
c0014125:	31 d2                	xor    edx,edx
c0014127:	52                   	push   edx
c0014128:	50                   	push   eax
c0014129:	53                   	push   ebx
c001412a:	e8 db 71 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001412f:	83 c4 0c             	add    esp,0xc
c0014132:	6a 20                	push   0x20
c0014134:	6a 00                	push   0x0
c0014136:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001413a:	52                   	push   edx
c001413b:	e8 b0 c3 fe ff       	call   c00004f0 <memset>
c0014140:	58                   	pop    eax
c0014141:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014143:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014147:	51                   	push   ecx
c0014148:	8d 54 24 40          	lea    edx,[esp+0x40]
c001414c:	52                   	push   edx
c001414d:	6a 00                	push   0x0
c001414f:	6a 1f                	push   0x1f
c0014151:	53                   	push   ebx
c0014152:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014155:	83 c4 18             	add    esp,0x18
c0014158:	68 89 19 02 c0       	push   0xc0021989
c001415d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014161:	52                   	push   edx
c0014162:	e8 e9 c5 fe ff       	call   c0000750 <strcmp>
c0014167:	83 c4 10             	add    esp,0x10
c001416a:	85 c0                	test   eax,eax
c001416c:	75 0f                	jne    c001417d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001416e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014175:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001417d:	50                   	push   eax
c001417e:	50                   	push   eax
c001417f:	68 91 19 02 c0       	push   0xc0021991
c0014184:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014188:	50                   	push   eax
c0014189:	e8 c2 c5 fe ff       	call   c0000750 <strcmp>
c001418e:	83 c4 10             	add    esp,0x10
c0014191:	85 c0                	test   eax,eax
c0014193:	75 0f                	jne    c00141a4 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014195:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014198:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001419c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141a4:	45                   	inc    ebp
c00141a5:	e9 4c ff ff ff       	jmp    c00140f6 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00141aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00141af:	75 10                	jne    c00141c1 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00141b1:	83 ec 0c             	sub    esp,0xc
c00141b4:	68 99 19 02 c0       	push   0xc0021999
c00141b9:	e8 53 ca ff ff       	call   c0010c11 <KePanic(char const*)>
c00141be:	83 c4 10             	add    esp,0x10
c00141c1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00141c6:	75 10                	jne    c00141d8 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00141c8:	83 ec 0c             	sub    esp,0xc
c00141cb:	68 99 19 02 c0       	push   0xc0021999
c00141d0:	e8 3c ca ff ff       	call   c0010c11 <KePanic(char const*)>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	31 d2                	xor    edx,edx
c00141da:	50                   	push   eax
c00141db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141df:	52                   	push   edx
c00141e0:	50                   	push   eax
c00141e1:	53                   	push   ebx
c00141e2:	e8 23 71 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00141e7:	5a                   	pop    edx
c00141e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141ec:	e8 bd 38 ff ff       	call   c0007aae <malloc>
c00141f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00141f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141f9:	31 c9                	xor    ecx,ecx
c00141fb:	5e                   	pop    esi
c00141fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141fe:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014202:	55                   	push   ebp
c0014203:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014207:	51                   	push   ecx
c0014208:	52                   	push   edx
c0014209:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001420d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014211:	53                   	push   ebx
c0014212:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014215:	83 c4 14             	add    esp,0x14
c0014218:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001421c:	e8 8d 38 ff ff       	call   c0007aae <malloc>
c0014221:	89 c6                	mov    esi,eax
c0014223:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014225:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014228:	56                   	push   esi
c0014229:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001422d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014231:	51                   	push   ecx
c0014232:	52                   	push   edx
c0014233:	53                   	push   ebx
c0014234:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014237:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001423b:	8b 15 40 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029140
c0014241:	83 c4 1c             	add    esp,0x1c
c0014244:	c1 e8 04             	shr    eax,0x4
c0014247:	89 04 95 c0 8f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7040],eax
c001424e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014252:	31 d2                	xor    edx,edx
c0014254:	52                   	push   edx
c0014255:	50                   	push   eax
c0014256:	53                   	push   ebx
c0014257:	e8 ae 70 ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001425c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001425e:	31 d2                	xor    edx,edx
c0014260:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014263:	56                   	push   esi
c0014264:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014268:	52                   	push   edx
c0014269:	50                   	push   eax
c001426a:	53                   	push   ebx
c001426b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001426e:	83 c4 14             	add    esp,0x14
c0014271:	53                   	push   ebx
c0014272:	e8 33 70 ff ff       	call   c000b2aa <File::close()>
c0014277:	5d                   	pop    ebp
c0014278:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001427c:	e8 3d 38 ff ff       	call   c0007abe <free>
c0014281:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014284:	e8 35 38 ff ff       	call   c0007abe <free>
c0014289:	a1 40 91 02 c0       	mov    eax,ds:0xc0029140
c001428e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014292:	8d 50 01             	lea    edx,[eax+0x1]
c0014295:	89 0c 85 c0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f40],ecx
c001429c:	89 34 85 40 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fc0],esi
c00142a3:	89 15 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edx
c00142a9:	83 c4 10             	add    esp,0x10
c00142ac:	b0 01                	mov    al,0x1
c00142ae:	83 c4 5c             	add    esp,0x5c
c00142b1:	5b                   	pop    ebx
c00142b2:	5e                   	pop    esi
c00142b3:	5f                   	pop    edi
c00142b4:	5d                   	pop    ebp
c00142b5:	c3                   	ret    

c00142b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00142b6:	55                   	push   ebp
c00142b7:	57                   	push   edi
c00142b8:	56                   	push   esi
c00142b9:	53                   	push   ebx
c00142ba:	81 ec 68 03 00 00    	sub    esp,0x368
c00142c0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00142c7:	8b 1d 90 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029190
c00142cd:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00142d1:	68 14 01 00 00       	push   0x114
c00142d6:	e8 d3 37 ff ff       	call   c0007aae <malloc>
c00142db:	83 c4 0c             	add    esp,0xc
c00142de:	89 c5                	mov    ebp,eax
c00142e0:	53                   	push   ebx
c00142e1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00142e8:	50                   	push   eax
c00142e9:	e8 a2 6e ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00142ee:	5e                   	pop    esi
c00142ef:	5f                   	pop    edi
c00142f0:	6a 01                	push   0x1
c00142f2:	55                   	push   ebp
c00142f3:	e8 54 6f ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	85 c0                	test   eax,eax
c00142fd:	0f 85 aa 06 00 00    	jne    c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014303:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001430b:	83 ec 0c             	sub    esp,0xc
c001430e:	6a 34                	push   0x34
c0014310:	e8 99 37 ff ff       	call   c0007aae <malloc>
c0014315:	5b                   	pop    ebx
c0014316:	89 c7                	mov    edi,eax
c0014318:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001431c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001431f:	53                   	push   ebx
c0014320:	57                   	push   edi
c0014321:	6a 00                	push   0x0
c0014323:	6a 34                	push   0x34
c0014325:	55                   	push   ebp
c0014326:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014329:	83 c4 20             	add    esp,0x20
c001432c:	85 c0                	test   eax,eax
c001432e:	0f 85 79 06 00 00    	jne    c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014334:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001433a:	0f 85 6d 06 00 00    	jne    c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014340:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014343:	85 c0                	test   eax,eax
c0014345:	0f 84 62 06 00 00    	je     c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001434b:	31 d2                	xor    edx,edx
c001434d:	51                   	push   ecx
c001434e:	52                   	push   edx
c001434f:	50                   	push   eax
c0014350:	55                   	push   ebp
c0014351:	e8 b4 6f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	85 c0                	test   eax,eax
c001435b:	0f 85 4c 06 00 00    	jne    c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014361:	83 ec 0c             	sub    esp,0xc
c0014364:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014367:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001436b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001436f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014373:	0f af c2             	imul   eax,edx
c0014376:	50                   	push   eax
c0014377:	e8 32 37 ff ff       	call   c0007aae <malloc>
c001437c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001437f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014383:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014386:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001438a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001438e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014392:	0f af c2             	imul   eax,edx
c0014395:	99                   	cdq    
c0014396:	52                   	push   edx
c0014397:	50                   	push   eax
c0014398:	55                   	push   ebp
c0014399:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001439c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001439f:	83 c4 20             	add    esp,0x20
c00143a2:	85 c0                	test   eax,eax
c00143a4:	0f 84 03 06 00 00    	je     c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00143aa:	52                   	push   edx
c00143ab:	31 d2                	xor    edx,edx
c00143ad:	52                   	push   edx
c00143ae:	50                   	push   eax
c00143af:	55                   	push   ebp
c00143b0:	e8 55 6f ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00143b5:	83 c4 10             	add    esp,0x10
c00143b8:	85 c0                	test   eax,eax
c00143ba:	0f 85 ed 05 00 00    	jne    c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00143c0:	83 ec 0c             	sub    esp,0xc
c00143c3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00143c7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00143cb:	31 f6                	xor    esi,esi
c00143cd:	0f af c2             	imul   eax,edx
c00143d0:	50                   	push   eax
c00143d1:	e8 d8 36 ff ff       	call   c0007aae <malloc>
c00143d6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00143d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00143dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143e4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00143e8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00143ec:	0f af c2             	imul   eax,edx
c00143ef:	99                   	cdq    
c00143f0:	52                   	push   edx
c00143f1:	50                   	push   eax
c00143f2:	55                   	push   ebp
c00143f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143f6:	83 c4 20             	add    esp,0x20
c00143f9:	0f b7 de             	movzx  ebx,si
c00143fc:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014400:	0f 83 87 00 00 00    	jae    c001448d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014406:	c1 e3 05             	shl    ebx,0x5
c0014409:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001440d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014410:	75 75                	jne    c0014487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014412:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014415:	31 d2                	xor    edx,edx
c0014417:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001441b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001441e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014422:	50                   	push   eax
c0014423:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014426:	52                   	push   edx
c0014427:	50                   	push   eax
c0014428:	55                   	push   ebp
c0014429:	e8 dc 6e ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001442e:	83 c4 10             	add    esp,0x10
c0014431:	85 c0                	test   eax,eax
c0014433:	0f 85 74 05 00 00    	jne    c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014439:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014440:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014443:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014447:	31 d2                	xor    edx,edx
c0014449:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001444d:	83 ec 0c             	sub    esp,0xc
c0014450:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014454:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001445b:	50                   	push   eax
c001445c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014464:	52                   	push   edx
c0014465:	50                   	push   eax
c0014466:	55                   	push   ebp
c0014467:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001446a:	83 c4 1c             	add    esp,0x1c
c001446d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014470:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014473:	50                   	push   eax
c0014474:	6a 00                	push   0x0
c0014476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001447a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001447e:	50                   	push   eax
c001447f:	e8 6c c0 fe ff       	call   c00004f0 <memset>
c0014484:	83 c4 10             	add    esp,0x10
c0014487:	46                   	inc    esi
c0014488:	e9 6c ff ff ff       	jmp    c00143f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001448d:	53                   	push   ebx
c001448e:	31 db                	xor    ebx,ebx
c0014490:	68 00 01 00 00       	push   0x100
c0014495:	6a 00                	push   0x0
c0014497:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001449b:	50                   	push   eax
c001449c:	e8 4f c0 fe ff       	call   c00004f0 <memset>
c00144a1:	83 c4 0c             	add    esp,0xc
c00144a4:	68 00 01 00 00       	push   0x100
c00144a9:	6a 00                	push   0x0
c00144ab:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00144b2:	50                   	push   eax
c00144b3:	e8 38 c0 fe ff       	call   c00004f0 <memset>
c00144b8:	83 c4 10             	add    esp,0x10
c00144bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00144c3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00144cb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00144d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00144db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00144e3:	0f b7 f3             	movzx  esi,bx
c00144e6:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00144ea:	0f 83 2d 01 00 00    	jae    c001461d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00144f0:	6b f6 28             	imul   esi,esi,0x28
c00144f3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00144f7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00144fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00144fe:	52                   	push   edx
c00144ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014503:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014507:	8b 06                	mov    eax,DWORD PTR [esi]
c0014509:	6b d2 28             	imul   edx,edx,0x28
c001450c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014510:	31 d2                	xor    edx,edx
c0014512:	52                   	push   edx
c0014513:	50                   	push   eax
c0014514:	55                   	push   ebp
c0014515:	e8 f0 6d ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001451a:	83 c4 0c             	add    esp,0xc
c001451d:	6a 20                	push   0x20
c001451f:	6a 00                	push   0x0
c0014521:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014528:	51                   	push   ecx
c0014529:	e8 c2 bf fe ff       	call   c00004f0 <memset>
c001452e:	59                   	pop    ecx
c001452f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014532:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014536:	52                   	push   edx
c0014537:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001453e:	51                   	push   ecx
c001453f:	6a 00                	push   0x0
c0014541:	6a 1f                	push   0x1f
c0014543:	55                   	push   ebp
c0014544:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014547:	83 c4 1c             	add    esp,0x1c
c001454a:	6a 09                	push   0x9
c001454c:	68 b3 19 02 c0       	push   0xc00219b3
c0014551:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014558:	51                   	push   ecx
c0014559:	e8 22 be fe ff       	call   c0000380 <memcmp>
c001455e:	83 c4 10             	add    esp,0x10
c0014561:	85 c0                	test   eax,eax
c0014563:	75 21                	jne    c0014586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014569:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001456d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014571:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014575:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014578:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001457f:	89 d0                	mov    eax,edx
c0014581:	40                   	inc    eax
c0014582:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014586:	50                   	push   eax
c0014587:	6a 09                	push   0x9
c0014589:	68 bd 19 02 c0       	push   0xc00219bd
c001458e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014595:	50                   	push   eax
c0014596:	e8 e5 bd fe ff       	call   c0000380 <memcmp>
c001459b:	83 c4 10             	add    esp,0x10
c001459e:	85 c0                	test   eax,eax
c00145a0:	75 21                	jne    c00145c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00145a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145ae:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00145b2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00145b5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00145bc:	89 d0                	mov    eax,edx
c00145be:	40                   	inc    eax
c00145bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145c3:	50                   	push   eax
c00145c4:	50                   	push   eax
c00145c5:	68 89 19 02 c0       	push   0xc0021989
c00145ca:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00145d1:	50                   	push   eax
c00145d2:	e8 79 c1 fe ff       	call   c0000750 <strcmp>
c00145d7:	83 c4 10             	add    esp,0x10
c00145da:	85 c0                	test   eax,eax
c00145dc:	75 0f                	jne    c00145ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00145de:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00145e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00145ed:	50                   	push   eax
c00145ee:	50                   	push   eax
c00145ef:	68 91 19 02 c0       	push   0xc0021991
c00145f4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00145fb:	50                   	push   eax
c00145fc:	e8 4f c1 fe ff       	call   c0000750 <strcmp>
c0014601:	83 c4 10             	add    esp,0x10
c0014604:	85 c0                	test   eax,eax
c0014606:	75 0f                	jne    c0014617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014608:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001460b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001460f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014613:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014617:	43                   	inc    ebx
c0014618:	e9 c6 fe ff ff       	jmp    c00144e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001461d:	31 d2                	xor    edx,edx
c001461f:	50                   	push   eax
c0014620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014624:	52                   	push   edx
c0014625:	50                   	push   eax
c0014626:	55                   	push   ebp
c0014627:	e8 de 6c ff ff       	call   c000b30a <File::seek(unsigned long long)>
c001462c:	58                   	pop    eax
c001462d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014631:	e8 78 34 ff ff       	call   c0007aae <malloc>
c0014636:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014639:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001463d:	31 d2                	xor    edx,edx
c001463f:	58                   	pop    eax
c0014640:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014644:	53                   	push   ebx
c0014645:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014649:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001464d:	52                   	push   edx
c001464e:	50                   	push   eax
c001464f:	55                   	push   ebp
c0014650:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014653:	83 c4 14             	add    esp,0x14
c0014656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001465a:	e8 4f 34 ff ff       	call   c0007aae <malloc>
c001465f:	31 d2                	xor    edx,edx
c0014661:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014665:	83 c4 0c             	add    esp,0xc
c0014668:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001466c:	52                   	push   edx
c001466d:	50                   	push   eax
c001466e:	55                   	push   ebp
c001466f:	e8 96 6c ff ff       	call   c000b30a <File::seek(unsigned long long)>
c0014674:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014677:	31 d2                	xor    edx,edx
c0014679:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001467c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014680:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014684:	52                   	push   edx
c0014685:	50                   	push   eax
c0014686:	55                   	push   ebp
c0014687:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001468a:	83 c4 20             	add    esp,0x20
c001468d:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014692:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001469a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001469e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146a2:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00146a6:	0f 84 05 03 00 00    	je     c00149b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00146ac:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00146b3:	31 d2                	xor    edx,edx
c00146b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146b9:	c1 e8 03             	shr    eax,0x3
c00146bc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00146c0:	51                   	push   ecx
c00146c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00146c5:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00146c9:	52                   	push   edx
c00146ca:	50                   	push   eax
c00146cb:	55                   	push   ebp
c00146cc:	e8 39 6c ff ff       	call   c000b30a <File::seek(unsigned long long)>
c00146d1:	5b                   	pop    ebx
c00146d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d6:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00146dd:	e8 cc 33 ff ff       	call   c0007aae <malloc>
c00146e2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00146e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146e9:	31 d2                	xor    edx,edx
c00146eb:	5e                   	pop    esi
c00146ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00146f0:	50                   	push   eax
c00146f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146f9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014700:	52                   	push   edx
c0014701:	50                   	push   eax
c0014702:	55                   	push   ebp
c0014703:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014706:	83 c4 20             	add    esp,0x20
c0014709:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014711:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014715:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014719:	0f 8d 76 02 00 00    	jge    c0014995 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001471f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014723:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014727:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c001472c:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001472f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014733:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014737:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c001473b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001473f:	c1 e8 08             	shr    eax,0x8
c0014742:	89 c6                	mov    esi,eax
c0014744:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014748:	c1 e6 04             	shl    esi,0x4
c001474b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001474f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014752:	85 db                	test   ebx,ebx
c0014754:	0f 85 b3 00 00 00    	jne    c001480d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014761:	03 06                	add    eax,DWORD PTR [esi]
c0014763:	50                   	push   eax
c0014764:	e8 40 f8 ff ff       	call   c0013fa9 <Thr::getAddressOfKernelSymbol(char const*)>
c0014769:	83 c4 10             	add    esp,0x10
c001476c:	89 c3                	mov    ebx,eax
c001476e:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014773:	85 c0                	test   eax,eax
c0014775:	0f 85 92 00 00 00    	jne    c001480d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014782:	03 06                	add    eax,DWORD PTR [esi]
c0014784:	50                   	push   eax
c0014785:	e8 72 c6 ff ff       	call   c0010dfc <KeResolveCompatibilitySymbol(char*)>
c001478a:	83 c4 10             	add    esp,0x10
c001478d:	89 c3                	mov    ebx,eax
c001478f:	85 c0                	test   eax,eax
c0014791:	75 7a                	jne    c001480d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014793:	51                   	push   ecx
c0014794:	51                   	push   ecx
c0014795:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014799:	03 06                	add    eax,DWORD PTR [esi]
c001479b:	50                   	push   eax
c001479c:	68 c7 19 02 c0       	push   0xc00219c7
c00147a1:	e8 93 61 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00147a6:	58                   	pop    eax
c00147a7:	5a                   	pop    edx
c00147a8:	68 e1 19 02 c0       	push   0xc00219e1
c00147ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147b4:	50                   	push   eax
c00147b5:	e8 86 be fe ff       	call   c0000640 <strcpy>
c00147ba:	59                   	pop    ecx
c00147bb:	58                   	pop    eax
c00147bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147c0:	03 06                	add    eax,DWORD PTR [esi]
c00147c2:	50                   	push   eax
c00147c3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147ca:	50                   	push   eax
c00147cb:	e8 70 c0 fe ff       	call   c0000840 <strcat>
c00147d0:	58                   	pop    eax
c00147d1:	5a                   	pop    edx
c00147d2:	68 77 1a 02 c0       	push   0xc0021a77
c00147d7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147de:	50                   	push   eax
c00147df:	e8 5c c0 fe ff       	call   c0000840 <strcat>
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00147ec:	0f 84 5d 01 00 00    	je     c001494f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00147f2:	83 ec 0c             	sub    esp,0xc
c00147f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147fc:	50                   	push   eax
c00147fd:	e8 0f c4 ff ff       	call   c0010c11 <KePanic(char const*)>
c0014802:	83 c4 10             	add    esp,0x10
c0014805:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014809:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001480d:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014812:	83 f8 01             	cmp    eax,0x1
c0014815:	0f 85 8f 00 00 00    	jne    c00148aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c001481b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014822:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014826:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001482a:	01 ce                	add    esi,ecx
c001482c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014834:	0f 94 c0             	sete   al
c0014837:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001483f:	0f 94 c2             	sete   dl
c0014842:	09 c2                	or     edx,eax
c0014844:	8b 06                	mov    eax,DWORD PTR [esi]
c0014846:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001484b:	0f b6 d2             	movzx  edx,dl
c001484e:	74 41                	je     c0014891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014850:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014853:	85 d2                	test   edx,edx
c0014855:	75 15                	jne    c001486c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014857:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001485b:	66 83 f8 0c          	cmp    ax,0xc
c001485f:	76 05                	jbe    c0014866 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014861:	b8 0c 00 00 00       	mov    eax,0xc
c0014866:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001486a:	76 37                	jbe    c00148a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001486c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014870:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014875:	0f 84 d4 00 00 00    	je     c001494f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001487b:	83 ec 0c             	sub    esp,0xc
c001487e:	68 f8 19 02 c0       	push   0xc00219f8
c0014883:	e8 89 c3 ff ff       	call   c0010c11 <KePanic(char const*)>
c0014888:	83 c4 10             	add    esp,0x10
c001488b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001488f:	eb 12                	jmp    c00148a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014891:	01 c1                	add    ecx,eax
c0014893:	85 d2                	test   edx,edx
c0014895:	75 0c                	jne    c00148a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014897:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001489b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001489f:	77 02                	ja     c00148a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00148a1:	01 d9                	add    ecx,ebx
c00148a3:	89 0e                	mov    DWORD PTR [esi],ecx
c00148a5:	e9 e2 00 00 00       	jmp    c001498c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00148aa:	83 f8 02             	cmp    eax,0x2
c00148ad:	75 77                	jne    c0014926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00148af:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00148b6:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00148ba:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00148be:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00148c6:	74 21                	je     c00148e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00148c8:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00148d0:	74 17                	je     c00148e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00148d2:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00148d6:	b8 0a 00 00 00       	mov    eax,0xa
c00148db:	83 fa 0e             	cmp    edx,0xe
c00148de:	77 03                	ja     c00148e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00148e0:	8d 42 fc             	lea    eax,[edx-0x4]
c00148e3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00148e7:	76 17                	jbe    c0014900 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00148e9:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00148ee:	74 5f                	je     c001494f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	68 14 1a 02 c0       	push   0xc0021a14
c00148f8:	e8 14 c3 ff ff       	call   c0010c11 <KePanic(char const*)>
c00148fd:	83 c4 10             	add    esp,0x10
c0014900:	8b 06                	mov    eax,DWORD PTR [esi]
c0014902:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014907:	74 13                	je     c001491c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014909:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001490d:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014914:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014918:	01 d0                	add    eax,edx
c001491a:	eb 04                	jmp    c0014920 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001491c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014920:	01 c3                	add    ebx,eax
c0014922:	89 1e                	mov    DWORD PTR [esi],ebx
c0014924:	eb 66                	jmp    c001498c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014926:	52                   	push   edx
c0014927:	52                   	push   edx
c0014928:	50                   	push   eax
c0014929:	68 30 1a 02 c0       	push   0xc0021a30
c001492e:	e8 06 60 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014933:	83 c4 10             	add    esp,0x10
c0014936:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001493b:	74 12                	je     c001494f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001493d:	83 ec 0c             	sub    esp,0xc
c0014940:	68 3b 1a 02 c0       	push   0xc0021a3b
c0014945:	e8 c7 c2 ff ff       	call   c0010c11 <KePanic(char const*)>
c001494a:	83 c4 10             	add    esp,0x10
c001494d:	eb 3d                	jmp    c001498c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001494f:	83 ec 0c             	sub    esp,0xc
c0014952:	55                   	push   ebp
c0014953:	e8 52 69 ff ff       	call   c000b2aa <File::close()>
c0014958:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001495b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001495e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014961:	59                   	pop    ecx
c0014962:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014966:	e8 53 31 ff ff       	call   c0007abe <free>
c001496b:	5b                   	pop    ebx
c001496c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014970:	e8 49 31 ff ff       	call   c0007abe <free>
c0014975:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014978:	e8 41 31 ff ff       	call   c0007abe <free>
c001497d:	5e                   	pop    esi
c001497e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014982:	e8 37 31 ff ff       	call   c0007abe <free>
c0014987:	83 c4 10             	add    esp,0x10
c001498a:	eb 21                	jmp    c00149ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001498c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014990:	e9 7c fd ff ff       	jmp    c0014711 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014995:	83 ec 0c             	sub    esp,0xc
c0014998:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001499c:	e8 1d 31 ff ff       	call   c0007abe <free>
c00149a1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	e9 f1 fc ff ff       	jmp    c001469e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00149ad:	31 c0                	xor    eax,eax
c00149af:	eb 33                	jmp    c00149e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00149b1:	83 ec 0c             	sub    esp,0xc
c00149b4:	55                   	push   ebp
c00149b5:	e8 f0 68 ff ff       	call   c000b2aa <File::close()>
c00149ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00149bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149c3:	58                   	pop    eax
c00149c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149c8:	e8 f1 30 ff ff       	call   c0007abe <free>
c00149cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149d0:	e8 e9 30 ff ff       	call   c0007abe <free>
c00149d5:	5a                   	pop    edx
c00149d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149da:	e8 df 30 ff ff       	call   c0007abe <free>
c00149df:	83 c4 10             	add    esp,0x10
c00149e2:	b0 01                	mov    al,0x1
c00149e4:	81 c4 5c 03 00 00    	add    esp,0x35c
c00149ea:	5b                   	pop    ebx
c00149eb:	5e                   	pop    esi
c00149ec:	5f                   	pop    edi
c00149ed:	5d                   	pop    ebp
c00149ee:	c3                   	ret    

c00149ef <Thr::getDriverBaseFromAddress(unsigned long)>:
c00149ef:	56                   	push   esi
c00149f0:	31 d2                	xor    edx,edx
c00149f2:	53                   	push   ebx
c00149f3:	8b 1d a0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289a0
c00149f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149fd:	39 d3                	cmp    ebx,edx
c00149ff:	7e 1b                	jle    c0014a1c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014a01:	8b 04 95 c0 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7440]
c0014a08:	39 c8                	cmp    eax,ecx
c0014a0a:	77 0d                	ja     c0014a19 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014a0c:	8b 34 95 c0 89 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7640]
c0014a13:	01 c6                	add    esi,eax
c0014a15:	39 ce                	cmp    esi,ecx
c0014a17:	77 05                	ja     c0014a1e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014a19:	42                   	inc    edx
c0014a1a:	eb e1                	jmp    c00149fd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014a1c:	31 c0                	xor    eax,eax
c0014a1e:	5b                   	pop    ebx
c0014a1f:	5e                   	pop    esi
c0014a20:	c3                   	ret    

c0014a21 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014a21:	53                   	push   ebx
c0014a22:	31 c0                	xor    eax,eax
c0014a24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014a28:	8b 1d a0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289a0
c0014a2e:	39 c3                	cmp    ebx,eax
c0014a30:	7e 22                	jle    c0014a54 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014a32:	8b 14 85 c0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7440]
c0014a39:	39 ca                	cmp    edx,ecx
c0014a3b:	77 14                	ja     c0014a51 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014a3d:	03 14 85 c0 89 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7640]
c0014a44:	39 ca                	cmp    edx,ecx
c0014a46:	76 09                	jbe    c0014a51 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014a48:	8b 04 85 c0 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7240]
c0014a4f:	eb 05                	jmp    c0014a56 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014a51:	40                   	inc    eax
c0014a52:	eb da                	jmp    c0014a2e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014a54:	31 c0                	xor    eax,eax
c0014a56:	5b                   	pop    ebx
c0014a57:	c3                   	ret    

c0014a58 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014a58:	53                   	push   ebx
c0014a59:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014a5d:	53                   	push   ebx
c0014a5e:	e8 8c ff ff ff       	call   c00149ef <Thr::getDriverBaseFromAddress(unsigned long)>
c0014a63:	5a                   	pop    edx
c0014a64:	31 d2                	xor    edx,edx
c0014a66:	85 c0                	test   eax,eax
c0014a68:	74 04                	je     c0014a6e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014a6a:	89 da                	mov    edx,ebx
c0014a6c:	29 c2                	sub    edx,eax
c0014a6e:	89 d0                	mov    eax,edx
c0014a70:	5b                   	pop    ebx
c0014a71:	c3                   	ret    

c0014a72 <Thr::loadDLL(char const*, bool)>:
c0014a72:	55                   	push   ebp
c0014a73:	57                   	push   edi
c0014a74:	56                   	push   esi
c0014a75:	53                   	push   ebx
c0014a76:	81 ec 34 01 00 00    	sub    esp,0x134
c0014a7c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014a83:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014a8a:	56                   	push   esi
c0014a8b:	68 53 1a 02 c0       	push   0xc0021a53
c0014a90:	e8 a4 5e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014a95:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014a9c:	e8 0d 30 ff ff       	call   c0007aae <malloc>
c0014aa1:	83 c4 0c             	add    esp,0xc
c0014aa4:	89 c3                	mov    ebx,eax
c0014aa6:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0014aac:	56                   	push   esi
c0014aad:	50                   	push   eax
c0014aae:	e8 dd 66 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0014ab3:	83 c4 10             	add    esp,0x10
c0014ab6:	85 db                	test   ebx,ebx
c0014ab8:	75 3c                	jne    c0014af6 <Thr::loadDLL(char const*, bool)+0x84>
c0014aba:	89 f8                	mov    eax,edi
c0014abc:	84 c0                	test   al,al
c0014abe:	0f 84 d2 01 00 00    	je     c0014c96 <Thr::loadDLL(char const*, bool)+0x224>
c0014ac4:	55                   	push   ebp
c0014ac5:	55                   	push   ebp
c0014ac6:	68 64 1a 02 c0       	push   0xc0021a64
c0014acb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014acf:	55                   	push   ebp
c0014ad0:	e8 6b bb fe ff       	call   c0000640 <strcpy>
c0014ad5:	58                   	pop    eax
c0014ad6:	5a                   	pop    edx
c0014ad7:	56                   	push   esi
c0014ad8:	55                   	push   ebp
c0014ad9:	e8 62 bd fe ff       	call   c0000840 <strcat>
c0014ade:	59                   	pop    ecx
c0014adf:	58                   	pop    eax
c0014ae0:	68 77 1a 02 c0       	push   0xc0021a77
c0014ae5:	55                   	push   ebp
c0014ae6:	e8 55 bd fe ff       	call   c0000840 <strcat>
c0014aeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014aee:	e8 1e c1 ff ff       	call   c0010c11 <KePanic(char const*)>
c0014af3:	83 c4 10             	add    esp,0x10
c0014af6:	51                   	push   ecx
c0014af7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014afb:	50                   	push   eax
c0014afc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014b00:	50                   	push   eax
c0014b01:	53                   	push   ebx
c0014b02:	e8 47 6a ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c0014b07:	83 c4 10             	add    esp,0x10
c0014b0a:	85 db                	test   ebx,ebx
c0014b0c:	74 0c                	je     c0014b1a <Thr::loadDLL(char const*, bool)+0xa8>
c0014b0e:	83 ec 0c             	sub    esp,0xc
c0014b11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b13:	53                   	push   ebx
c0014b14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b17:	83 c4 10             	add    esp,0x10
c0014b1a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014b1f:	75 0a                	jne    c0014b2b <Thr::loadDLL(char const*, bool)+0xb9>
c0014b21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b25:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014b29:	75 3c                	jne    c0014b67 <Thr::loadDLL(char const*, bool)+0xf5>
c0014b2b:	89 f8                	mov    eax,edi
c0014b2d:	84 c0                	test   al,al
c0014b2f:	0f 84 49 01 00 00    	je     c0014c7e <Thr::loadDLL(char const*, bool)+0x20c>
c0014b35:	51                   	push   ecx
c0014b36:	51                   	push   ecx
c0014b37:	68 64 1a 02 c0       	push   0xc0021a64
c0014b3c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014b40:	53                   	push   ebx
c0014b41:	e8 fa ba fe ff       	call   c0000640 <strcpy>
c0014b46:	5d                   	pop    ebp
c0014b47:	58                   	pop    eax
c0014b48:	56                   	push   esi
c0014b49:	53                   	push   ebx
c0014b4a:	e8 f1 bc fe ff       	call   c0000840 <strcat>
c0014b4f:	58                   	pop    eax
c0014b50:	5a                   	pop    edx
c0014b51:	68 77 1a 02 c0       	push   0xc0021a77
c0014b56:	53                   	push   ebx
c0014b57:	e8 e4 bc fe ff       	call   c0000840 <strcat>
c0014b5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b5f:	e8 ad c0 ff ff       	call   c0010c11 <KePanic(char const*)>
c0014b64:	83 c4 10             	add    esp,0x10
c0014b67:	52                   	push   edx
c0014b68:	6a 03                	push   0x3
c0014b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b6e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014b72:	05 ff 0f 00 00       	add    eax,0xfff
c0014b77:	83 d2 00             	adc    edx,0x0
c0014b7a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014b7e:	50                   	push   eax
c0014b7f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0014b85:	e8 8e 52 ff ff       	call   c0009e18 <VAS::allocatePages(int, int)>
c0014b8a:	59                   	pop    ecx
c0014b8b:	89 c3                	mov    ebx,eax
c0014b8d:	5d                   	pop    ebp
c0014b8e:	50                   	push   eax
c0014b8f:	68 d2 01 02 c0       	push   0xc00201d2
c0014b94:	e8 a0 5d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014b99:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b9c:	e8 cf b9 fe ff       	call   c0000570 <strlen>
c0014ba1:	8b 2d a0 89 02 c0    	mov    ebp,DWORD PTR ds:0xc00289a0
c0014ba7:	40                   	inc    eax
c0014ba8:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bab:	e8 fe 2e ff ff       	call   c0007aae <malloc>
c0014bb0:	89 04 ad c0 8d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd7240],eax
c0014bb7:	58                   	pop    eax
c0014bb8:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c0014bbd:	5a                   	pop    edx
c0014bbe:	56                   	push   esi
c0014bbf:	ff 34 85 c0 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd7240]
c0014bc6:	e8 75 ba fe ff       	call   c0000640 <strcpy>
c0014bcb:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c0014bd0:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd3:	89 1c 85 c0 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7440],ebx
c0014bda:	89 15 a0 89 02 c0    	mov    DWORD PTR ds:0xc00289a0,edx
c0014be0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014be4:	83 c4 0c             	add    esp,0xc
c0014be7:	89 14 85 c0 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7640],edx
c0014bee:	6a 01                	push   0x1
c0014bf0:	53                   	push   ebx
c0014bf1:	56                   	push   esi
c0014bf2:	e8 bf f6 ff ff       	call   c00142b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014bf7:	83 c4 10             	add    esp,0x10
c0014bfa:	0f b6 c0             	movzx  eax,al
c0014bfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c01:	85 c0                	test   eax,eax
c0014c03:	0f 85 89 00 00 00    	jne    c0014c92 <Thr::loadDLL(char const*, bool)+0x220>
c0014c09:	89 f8                	mov    eax,edi
c0014c0b:	84 c0                	test   al,al
c0014c0d:	74 73                	je     c0014c82 <Thr::loadDLL(char const*, bool)+0x210>
c0014c0f:	83 ec 0c             	sub    esp,0xc
c0014c12:	68 79 1a 02 c0       	push   0xc0021a79
c0014c17:	e8 f5 bf ff ff       	call   c0010c11 <KePanic(char const*)>
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	eb 61                	jmp    c0014c82 <Thr::loadDLL(char const*, bool)+0x210>
c0014c21:	50                   	push   eax
c0014c22:	50                   	push   eax
c0014c23:	89 e8                	mov    eax,ebp
c0014c25:	c1 e0 0c             	shl    eax,0xc
c0014c28:	01 d8                	add    eax,ebx
c0014c2a:	50                   	push   eax
c0014c2b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0014c31:	e8 ca 4c ff ff       	call   c0009900 <VAS::getPageTableEntry(unsigned long)>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c3b:	a8 60                	test   al,0x60
c0014c3d:	75 11                	jne    c0014c50 <Thr::loadDLL(char const*, bool)+0x1de>
c0014c3f:	83 ec 0c             	sub    esp,0xc
c0014c42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c47:	50                   	push   eax
c0014c48:	e8 fc 30 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0014c4d:	83 c4 10             	add    esp,0x10
c0014c50:	45                   	inc    ebp
c0014c51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c59:	05 ff 0f 00 00       	add    eax,0xfff
c0014c5e:	bf 00 00 00 00       	mov    edi,0x0
c0014c63:	83 d2 00             	adc    edx,0x0
c0014c66:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014c6a:	c1 ea 0c             	shr    edx,0xc
c0014c6d:	39 c5                	cmp    ebp,eax
c0014c6f:	89 d1                	mov    ecx,edx
c0014c71:	89 f8                	mov    eax,edi
c0014c73:	19 c8                	sbb    eax,ecx
c0014c75:	72 aa                	jb     c0014c21 <Thr::loadDLL(char const*, bool)+0x1af>
c0014c77:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014c7c:	75 18                	jne    c0014c96 <Thr::loadDLL(char const*, bool)+0x224>
c0014c7e:	31 db                	xor    ebx,ebx
c0014c80:	eb 14                	jmp    c0014c96 <Thr::loadDLL(char const*, bool)+0x224>
c0014c82:	83 ec 0c             	sub    esp,0xc
c0014c85:	68 98 1a 02 c0       	push   0xc0021a98
c0014c8a:	e8 82 bf ff ff       	call   c0010c11 <KePanic(char const*)>
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	31 ed                	xor    ebp,ebp
c0014c94:	eb bb                	jmp    c0014c51 <Thr::loadDLL(char const*, bool)+0x1df>
c0014c96:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014c9c:	89 d8                	mov    eax,ebx
c0014c9e:	5b                   	pop    ebx
c0014c9f:	5e                   	pop    esi
c0014ca0:	5f                   	pop    edi
c0014ca1:	5d                   	pop    ebp
c0014ca2:	c3                   	ret    

c0014ca3 <Thr::executeDLL(unsigned long, void*)>:
c0014ca3:	56                   	push   esi
c0014ca4:	53                   	push   ebx
c0014ca5:	52                   	push   edx
c0014ca6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014caa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014cae:	85 db                	test   ebx,ebx
c0014cb0:	75 10                	jne    c0014cc2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014cb2:	83 ec 0c             	sub    esp,0xc
c0014cb5:	68 b4 1a 02 c0       	push   0xc0021ab4
c0014cba:	e8 52 bf ff ff       	call   c0010c11 <KePanic(char const*)>
c0014cbf:	83 c4 10             	add    esp,0x10
c0014cc2:	50                   	push   eax
c0014cc3:	50                   	push   eax
c0014cc4:	53                   	push   ebx
c0014cc5:	68 de 1a 02 c0       	push   0xc0021ade
c0014cca:	e8 6a 5c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0014ccf:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014cd3:	89 d8                	mov    eax,ebx
c0014cd5:	83 c4 14             	add    esp,0x14
c0014cd8:	5b                   	pop    ebx
c0014cd9:	5e                   	pop    esi
c0014cda:	ff e0                	jmp    eax

c0014cdc <userModeEntryPoint(void*)>:
c0014cdc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0014ce1:	83 e8 01             	sub    eax,0x1
c0014ce4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0014ce9:	75 01                	jne    c0014cec <userModeEntryPoint(void*)+0x10>
c0014ceb:	fb                   	sti    
c0014cec:	fb                   	sti    
c0014ced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cf2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014cf5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014cfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cff:	e9 3b b5 fe ff       	jmp    c000023f <goToUsermode>

c0014d04 <changeTSS>:
c0014d04:	83 ec 14             	sub    esp,0x14
c0014d07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d0c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014d0f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014d14:	c1 e2 15             	shl    edx,0x15
c0014d17:	29 d0                	sub    eax,edx
c0014d19:	50                   	push   eax
c0014d1a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014d1f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d25:	05 7c 11 00 00       	add    eax,0x117c
c0014d2a:	50                   	push   eax
c0014d2b:	e8 18 42 ff ff       	call   c0008f48 <TSS::setESP(unsigned long)>
c0014d30:	83 c4 1c             	add    esp,0x1c
c0014d33:	c3                   	ret    

c0014d34 <switchToThread(ThreadControlBlock*)>:
c0014d34:	57                   	push   edi
c0014d35:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0014d3b:	56                   	push   esi
c0014d3c:	85 c9                	test   ecx,ecx
c0014d3e:	53                   	push   ebx
c0014d3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d43:	0f 85 8b 00 00 00    	jne    c0014dd4 <switchToThread(ThreadControlBlock*)+0xa0>
c0014d49:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014d4d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014d53:	74 7b                	je     c0014dd0 <switchToThread(ThreadControlBlock*)+0x9c>
c0014d55:	b8 00 04 00 00       	mov    eax,0x400
c0014d5a:	29 d0                	sub    eax,edx
c0014d5c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014d5f:	d1 f8                	sar    eax,1
c0014d61:	01 d0                	add    eax,edx
c0014d63:	90                   	nop
c0014d64:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014d67:	e8 1e 28 00 00       	call   c001758a <HalQueryPerformanceCounter()>
c0014d6c:	a3 a8 91 02 c0       	mov    ds:0xc00291a8,eax
c0014d71:	89 15 ac 91 02 c0    	mov    DWORD PTR ds:0xc00291ac,edx
c0014d77:	89 c6                	mov    esi,eax
c0014d79:	89 d7                	mov    edi,edx
c0014d7b:	2b 35 98 91 02 c0    	sub    esi,DWORD PTR ds:0xc0029198
c0014d81:	a3 98 91 02 c0       	mov    ds:0xc0029198,eax
c0014d86:	1b 3d 9c 91 02 c0    	sbb    edi,DWORD PTR ds:0xc002919c
c0014d8c:	89 35 a0 91 02 c0    	mov    DWORD PTR ds:0xc00291a0,esi
c0014d92:	89 3d a4 91 02 c0    	mov    DWORD PTR ds:0xc00291a4,edi
c0014d98:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d9e:	89 15 9c 91 02 c0    	mov    DWORD PTR ds:0xc002919c,edx
c0014da4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014da7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014daa:	01 c6                	add    esi,eax
c0014dac:	11 d7                	adc    edi,edx
c0014dae:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014db1:	83 ec 0c             	sub    esp,0xc
c0014db4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014db7:	53                   	push   ebx
c0014db8:	e8 ba b4 fe ff       	call   c0000277 <switchToThreadASM>
c0014dbd:	0f 20 c0             	mov    eax,cr0
c0014dc0:	83 c8 08             	or     eax,0x8
c0014dc3:	0f 22 c0             	mov    cr0,eax
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	5b                   	pop    ebx
c0014dca:	5e                   	pop    esi
c0014dcb:	5f                   	pop    edi
c0014dcc:	c3                   	ret    
c0014dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd0:	31 c0                	xor    eax,eax
c0014dd2:	eb 90                	jmp    c0014d64 <switchToThread(ThreadControlBlock*)+0x30>
c0014dd4:	5b                   	pop    ebx
c0014dd5:	c7 05 60 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x1
c0014ddf:	5e                   	pop    esi
c0014de0:	5f                   	pop    edi
c0014de1:	c3                   	ret    
c0014de2:	66 90                	xchg   ax,ax

c0014de4 <Process::addArgs(char**)>:
c0014de4:	57                   	push   edi
c0014de5:	56                   	push   esi
c0014de6:	53                   	push   ebx
c0014de7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014deb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014def:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014df9:	85 ff                	test   edi,edi
c0014dfb:	74 4f                	je     c0014e4c <Process::addArgs(char**)+0x68>
c0014dfd:	8b 07                	mov    eax,DWORD PTR [edi]
c0014dff:	85 c0                	test   eax,eax
c0014e01:	74 49                	je     c0014e4c <Process::addArgs(char**)+0x68>
c0014e03:	31 db                	xor    ebx,ebx
c0014e05:	8d 76 00             	lea    esi,[esi+0x0]
c0014e08:	83 ec 0c             	sub    esp,0xc
c0014e0b:	50                   	push   eax
c0014e0c:	e8 5f b7 fe ff       	call   c0000570 <strlen>
c0014e11:	83 c0 01             	add    eax,0x1
c0014e14:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e17:	e8 92 2c ff ff       	call   c0007aae <malloc>
c0014e1c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014e23:	5a                   	pop    edx
c0014e24:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014e27:	59                   	pop    ecx
c0014e28:	83 c3 01             	add    ebx,0x1
c0014e2b:	52                   	push   edx
c0014e2c:	50                   	push   eax
c0014e2d:	e8 0e b8 fe ff       	call   c0000640 <strcpy>
c0014e32:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	83 c1 01             	add    ecx,0x1
c0014e3e:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014e44:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014e47:	85 c0                	test   eax,eax
c0014e49:	75 bd                	jne    c0014e08 <Process::addArgs(char**)+0x24>
c0014e4b:	90                   	nop
c0014e4c:	5b                   	pop    ebx
c0014e4d:	5e                   	pop    esi
c0014e4e:	5f                   	pop    edi
c0014e4f:	c3                   	ret    

c0014e50 <Process::Process(char const*, Process*, char**)>:
c0014e50:	56                   	push   esi
c0014e51:	53                   	push   ebx
c0014e52:	83 ec 14             	sub    esp,0x14
c0014e55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e59:	05 0c 02 00 00       	add    eax,0x20c
c0014e5e:	bb 07 00 00 00       	mov    ebx,0x7
c0014e63:	89 c6                	mov    esi,eax
c0014e65:	8d 76 00             	lea    esi,[esi+0x0]
c0014e68:	85 db                	test   ebx,ebx
c0014e6a:	78 14                	js     c0014e80 <Process::Process(char const*, Process*, char**)+0x30>
c0014e6c:	83 ec 0c             	sub    esp,0xc
c0014e6f:	56                   	push   esi
c0014e70:	e8 e3 a5 00 00       	call   c001f458 <ThreadControlBlock::ThreadControlBlock()>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	83 c6 5f             	add    esi,0x5f
c0014e7b:	83 eb 01             	sub    ebx,0x1
c0014e7e:	eb e8                	jmp    c0014e68 <Process::Process(char const*, Process*, char**)+0x18>
c0014e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e84:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014e96:	83 ec 0c             	sub    esp,0xc
c0014e99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e9d:	e8 64 bb ff ff       	call   c0010a06 <KeNewProcessEnv(Process*)>
c0014ea2:	83 c4 10             	add    esp,0x10
c0014ea5:	89 c2                	mov    edx,eax
c0014ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eb5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014ebe:	a1 00 2d 02 c0       	mov    eax,ds:0xc0022d00
c0014ec3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ec6:	89 15 00 2d 02 c0    	mov    DWORD PTR ds:0xc0022d00,edx
c0014ecc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ed0:	89 02                	mov    DWORD PTR [edx],eax
c0014ed2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014eda:	83 ec 0c             	sub    esp,0xc
c0014edd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ee1:	e8 c8 2b ff ff       	call   c0007aae <malloc>
c0014ee6:	83 c4 10             	add    esp,0x10
c0014ee9:	89 c3                	mov    ebx,eax
c0014eeb:	83 ec 08             	sub    esp,0x8
c0014eee:	6a 00                	push   0x0
c0014ef0:	53                   	push   ebx
c0014ef1:	e8 66 51 ff ff       	call   c000a05c <VAS::VAS(bool)>
c0014ef6:	83 c4 10             	add    esp,0x10
c0014ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014efd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f07:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f19:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014f1f:	e8 06 c1 ff ff       	call   c001102a <KeInitSignals()>
c0014f24:	89 c2                	mov    edx,eax
c0014f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f2a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f3a:	85 c0                	test   eax,eax
c0014f3c:	74 42                	je     c0014f80 <Process::Process(char const*, Process*, char**)+0x130>
c0014f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f42:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f48:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f52:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f6c:	05 0c 01 00 00       	add    eax,0x10c
c0014f71:	83 ec 08             	sub    esp,0x8
c0014f74:	52                   	push   edx
c0014f75:	50                   	push   eax
c0014f76:	e8 c5 b6 fe ff       	call   c0000640 <strcpy>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	eb 64                	jmp    c0014fe4 <Process::Process(char const*, Process*, char**)+0x194>
c0014f80:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f8f:	e8 1a 2b ff ff       	call   c0007aae <malloc>
c0014f94:	83 c4 10             	add    esp,0x10
c0014f97:	89 c3                	mov    ebx,eax
c0014f99:	83 ec 08             	sub    esp,0x8
c0014f9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fa0:	53                   	push   ebx
c0014fa1:	e8 b2 3c ff ff       	call   c0008c58 <VgaText::VgaText(char const*)>
c0014fa6:	83 c4 10             	add    esp,0x10
c0014fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fad:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014fb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fbd:	83 ec 0c             	sub    esp,0xc
c0014fc0:	50                   	push   eax
c0014fc1:	e8 30 35 ff ff       	call   c00084f6 <addToTerminalCycle(VgaText*)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fcd:	05 0c 01 00 00       	add    eax,0x10c
c0014fd2:	83 ec 08             	sub    esp,0x8
c0014fd5:	68 fd 1a 02 c0       	push   0xc0021afd
c0014fda:	50                   	push   eax
c0014fdb:	e8 60 b6 fe ff       	call   c0000640 <strcpy>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	90                   	nop
c0014fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe8:	83 c0 0c             	add    eax,0xc
c0014feb:	83 ec 08             	sub    esp,0x8
c0014fee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ff2:	50                   	push   eax
c0014ff3:	e8 48 b6 fe ff       	call   c0000640 <strcpy>
c0014ff8:	83 c4 10             	add    esp,0x10
c0014ffb:	83 ec 08             	sub    esp,0x8
c0014ffe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015002:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015006:	e8 d9 fd ff ff       	call   c0014de4 <Process::addArgs(char**)>
c001500b:	83 c4 10             	add    esp,0x10
c001500e:	83 ec 08             	sub    esp,0x8
c0015011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015019:	e8 66 ed ff ff       	call   c0013d84 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001501e:	83 c4 10             	add    esp,0x10
c0015021:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015025:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015029:	83 f0 01             	xor    eax,0x1
c001502c:	88 c2                	mov    dl,al
c001502e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015032:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015038:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001503d:	83 ec 04             	sub    esp,0x4
c0015040:	50                   	push   eax
c0015041:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015045:	68 54 1b 02 c0       	push   0xc0021b54
c001504a:	e8 ea 58 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001504f:	83 c4 10             	add    esp,0x10
c0015052:	90                   	nop
c0015053:	83 c4 14             	add    esp,0x14
c0015056:	5b                   	pop    ebx
c0015057:	5e                   	pop    esi
c0015058:	c3                   	ret    
c0015059:	90                   	nop
c001505a:	66 90                	xchg   ax,ax

c001505c <Process::Process(bool, char const*, Process*, char**)>:
c001505c:	56                   	push   esi
c001505d:	53                   	push   ebx
c001505e:	83 ec 24             	sub    esp,0x24
c0015061:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015065:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001506d:	05 0c 02 00 00       	add    eax,0x20c
c0015072:	bb 07 00 00 00       	mov    ebx,0x7
c0015077:	89 c6                	mov    esi,eax
c0015079:	8d 76 00             	lea    esi,[esi+0x0]
c001507c:	85 db                	test   ebx,ebx
c001507e:	78 14                	js     c0015094 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015080:	83 ec 0c             	sub    esp,0xc
c0015083:	56                   	push   esi
c0015084:	e8 cf a3 00 00       	call   c001f458 <ThreadControlBlock::ThreadControlBlock()>
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	83 c6 5f             	add    esi,0x5f
c001508f:	83 eb 01             	sub    ebx,0x1
c0015092:	eb e8                	jmp    c001507c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015098:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001509f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00150aa:	83 ec 0c             	sub    esp,0xc
c00150ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150b1:	e8 50 b9 ff ff       	call   c0010a06 <KeNewProcessEnv(Process*)>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	89 c2                	mov    edx,eax
c00150bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150bf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00150c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150c9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00150d2:	a1 00 2d 02 c0       	mov    eax,ds:0xc0022d00
c00150d7:	8d 50 01             	lea    edx,[eax+0x1]
c00150da:	89 15 00 2d 02 c0    	mov    DWORD PTR ds:0xc0022d00,edx
c00150e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00150e4:	89 02                	mov    DWORD PTR [edx],eax
c00150e6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00150ee:	83 ec 0c             	sub    esp,0xc
c00150f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00150f5:	e8 b4 29 ff ff       	call   c0007aae <malloc>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	89 c3                	mov    ebx,eax
c00150ff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015104:	83 ec 08             	sub    esp,0x8
c0015107:	50                   	push   eax
c0015108:	53                   	push   ebx
c0015109:	e8 4e 4f ff ff       	call   c000a05c <VAS::VAS(bool)>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015115:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001511b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001511f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015129:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001512d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015131:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015137:	e8 ee be ff ff       	call   c001102a <KeInitSignals()>
c001513c:	89 c2                	mov    edx,eax
c001513e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015142:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001514c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015152:	85 c0                	test   eax,eax
c0015154:	74 42                	je     c0015198 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001515a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015160:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001516a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015174:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001517a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015180:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015184:	05 0c 01 00 00       	add    eax,0x10c
c0015189:	83 ec 08             	sub    esp,0x8
c001518c:	52                   	push   edx
c001518d:	50                   	push   eax
c001518e:	e8 ad b4 fe ff       	call   c0000640 <strcpy>
c0015193:	83 c4 10             	add    esp,0x10
c0015196:	eb 64                	jmp    c00151fc <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015198:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00151a0:	83 ec 0c             	sub    esp,0xc
c00151a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151a7:	e8 02 29 ff ff       	call   c0007aae <malloc>
c00151ac:	83 c4 10             	add    esp,0x10
c00151af:	89 c3                	mov    ebx,eax
c00151b1:	83 ec 08             	sub    esp,0x8
c00151b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00151b8:	53                   	push   ebx
c00151b9:	e8 9a 3a ff ff       	call   c0008c58 <VgaText::VgaText(char const*)>
c00151be:	83 c4 10             	add    esp,0x10
c00151c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151c5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00151cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d5:	83 ec 0c             	sub    esp,0xc
c00151d8:	50                   	push   eax
c00151d9:	e8 18 33 ff ff       	call   c00084f6 <addToTerminalCycle(VgaText*)>
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151e5:	05 0c 01 00 00       	add    eax,0x10c
c00151ea:	83 ec 08             	sub    esp,0x8
c00151ed:	68 fd 1a 02 c0       	push   0xc0021afd
c00151f2:	50                   	push   eax
c00151f3:	e8 48 b4 fe ff       	call   c0000640 <strcpy>
c00151f8:	83 c4 10             	add    esp,0x10
c00151fb:	90                   	nop
c00151fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015200:	83 c0 0c             	add    eax,0xc
c0015203:	83 ec 08             	sub    esp,0x8
c0015206:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001520a:	50                   	push   eax
c001520b:	e8 30 b4 fe ff       	call   c0000640 <strcpy>
c0015210:	83 c4 10             	add    esp,0x10
c0015213:	83 ec 08             	sub    esp,0x8
c0015216:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001521a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001521e:	e8 c1 fb ff ff       	call   c0014de4 <Process::addArgs(char**)>
c0015223:	83 c4 10             	add    esp,0x10
c0015226:	90                   	nop
c0015227:	83 c4 24             	add    esp,0x24
c001522a:	5b                   	pop    ebx
c001522b:	5e                   	pop    esi
c001522c:	c3                   	ret    
c001522d:	8d 76 00             	lea    esi,[esi+0x0]

c0015230 <taskStartupFunction>:
c0015230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015235:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015238:	c3                   	ret    
c0015239:	90                   	nop
c001523a:	66 90                	xchg   ax,ax

c001523c <Semaphore::Semaphore(int)>:
c001523c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015240:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015244:	89 10                	mov    DWORD PTR [eax],edx
c0015246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001524a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015255:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001525c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015260:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015267:	90                   	nop
c0015268:	c3                   	ret    
c0015269:	90                   	nop
c001526a:	66 90                	xchg   ax,ax

c001526c <Mutex::Mutex()>:
c001526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015270:	6a 01                	push   0x1
c0015272:	50                   	push   eax
c0015273:	e8 c4 ff ff ff       	call   c001523c <Semaphore::Semaphore(int)>
c0015278:	83 c4 08             	add    esp,0x8
c001527b:	90                   	nop
c001527c:	c3                   	ret    
c001527d:	90                   	nop
c001527e:	66 90                	xchg   ax,ax

c0015280 <Process::createThread(void (*)(void*), void*, int)>:
c0015280:	57                   	push   edi
c0015281:	31 c9                	xor    ecx,ecx
c0015283:	56                   	push   esi
c0015284:	53                   	push   ebx
c0015285:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015289:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015290:	89 f2                	mov    edx,esi
c0015292:	66 90                	xchg   ax,ax
c0015294:	0f b7 c2             	movzx  eax,dx
c0015297:	80 e2 01             	and    dl,0x1
c001529a:	74 14                	je     c00152b0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001529c:	d1 f8                	sar    eax,1
c001529e:	83 c1 01             	add    ecx,0x1
c00152a1:	89 c2                	mov    edx,eax
c00152a3:	83 f9 10             	cmp    ecx,0x10
c00152a6:	75 ec                	jne    c0015294 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00152a8:	31 db                	xor    ebx,ebx
c00152aa:	89 d8                	mov    eax,ebx
c00152ac:	5b                   	pop    ebx
c00152ad:	5e                   	pop    esi
c00152ae:	5f                   	pop    edi
c00152af:	c3                   	ret    
c00152b0:	b8 01 00 00 00       	mov    eax,0x1
c00152b5:	d3 e0                	shl    eax,cl
c00152b7:	09 c6                	or     esi,eax
c00152b9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00152bc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00152c3:	01 c0                	add    eax,eax
c00152c5:	01 c8                	add    eax,ecx
c00152c7:	8d 04 80             	lea    eax,[eax+eax*4]
c00152ca:	01 d8                	add    eax,ebx
c00152cc:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00152d3:	75 0b                	jne    c00152e0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00152d5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00152df:	90                   	nop
c00152e0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00152e6:	83 ec 0c             	sub    esp,0xc
c00152e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00152ec:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00152ef:	01 c0                	add    eax,eax
c00152f1:	01 c8                	add    eax,ecx
c00152f3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00152f6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00152f9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00152ff:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015305:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015309:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001530f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015315:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001531b:	89 ca                	mov    edx,ecx
c001531d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015324:	f7 da                	neg    edx
c0015326:	c1 e2 15             	shl    edx,0x15
c0015329:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001532f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015335:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015339:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015343:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015349:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001534d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015353:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001535d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015367:	68 00 01 00 00       	push   0x100
c001536c:	e8 3d 27 ff ff       	call   c0007aae <malloc>
c0015371:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015374:	58                   	pop    eax
c0015375:	5a                   	pop    edx
c0015376:	53                   	push   ebx
c0015377:	68 84 91 02 c0       	push   0xc0029184
c001537c:	e8 6f 9e 00 00       	call   c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	89 d8                	mov    eax,ebx
c0015386:	5b                   	pop    ebx
c0015387:	5e                   	pop    esi
c0015388:	5f                   	pop    edi
c0015389:	c3                   	ret    
c001538a:	66 90                	xchg   ax,ax

c001538c <Process::createUserThread()>:
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	68 80 00 00 00       	push   0x80
c0015394:	6a 00                	push   0x0
c0015396:	68 dc 4c 01 c0       	push   0xc0014cdc
c001539b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001539f:	50                   	push   eax
c00153a0:	e8 db fe ff ff       	call   c0015280 <Process::createThread(void (*)(void*), void*, int)>
c00153a5:	83 c4 1c             	add    esp,0x1c
c00153a8:	c3                   	ret    
c00153a9:	8d 76 00             	lea    esi,[esi+0x0]

c00153ac <setupMultitasking(void (*)())>:
c00153ac:	56                   	push   esi
c00153ad:	53                   	push   ebx
c00153ae:	83 ec 04             	sub    esp,0x4
c00153b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00153b5:	eb 11                	jmp    c00153c8 <setupMultitasking(void (*)())+0x1c>
c00153b7:	90                   	nop
c00153b8:	83 ec 0c             	sub    esp,0xc
c00153bb:	68 84 91 02 c0       	push   0xc0029184
c00153c0:	e8 6f 9d 00 00       	call   c001f134 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	83 ec 0c             	sub    esp,0xc
c00153cb:	68 84 91 02 c0       	push   0xc0029184
c00153d0:	e8 3b 9d 00 00       	call   c001f110 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	84 c0                	test   al,al
c00153da:	74 dc                	je     c00153b8 <setupMultitasking(void (*)())+0xc>
c00153dc:	83 ec 0c             	sub    esp,0xc
c00153df:	68 24 07 00 00       	push   0x724
c00153e4:	e8 c5 26 ff ff       	call   c0007aae <malloc>
c00153e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00153f0:	89 c3                	mov    ebx,eax
c00153f2:	6a 00                	push   0x0
c00153f4:	68 01 1b 02 c0       	push   0xc0021b01
c00153f9:	6a 01                	push   0x1
c00153fb:	50                   	push   eax
c00153fc:	e8 5b fc ff ff       	call   c001505c <Process::Process(bool, char const*, Process*, char**)>
c0015401:	83 c4 14             	add    esp,0x14
c0015404:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001540a:	89 1d 90 91 02 c0    	mov    DWORD PTR ds:0xc0029190,ebx
c0015410:	50                   	push   eax
c0015411:	e8 35 33 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c0015416:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c001541d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015427:	83 c8 01             	or     eax,0x1
c001542a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015431:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015437:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001543a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015444:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001544a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015450:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001545a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015464:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001546e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015474:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001547e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015484:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001548e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015495:	e8 14 26 ff ff       	call   c0007aae <malloc>
c001549a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00154a0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00154a6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00154ac:	5a                   	pop    edx
c00154ad:	59                   	pop    ecx
c00154ae:	68 fd 1a 02 c0       	push   0xc0021afd
c00154b3:	50                   	push   eax
c00154b4:	e8 87 b1 fe ff       	call   c0000640 <strcpy>
c00154b9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00154c0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00154c4:	83 c4 14             	add    esp,0x14
c00154c7:	5b                   	pop    ebx
c00154c8:	5e                   	pop    esi
c00154c9:	e9 9b ad fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00154ce:	66 90                	xchg   ax,ax

c00154d0 <schedule()>:
c00154d0:	8b 15 64 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029164
c00154d6:	85 d2                	test   edx,edx
c00154d8:	74 0e                	je     c00154e8 <schedule()+0x18>
c00154da:	c7 05 60 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x1
c00154e4:	c3                   	ret    
c00154e5:	8d 76 00             	lea    esi,[esi+0x0]
c00154e8:	53                   	push   ebx
c00154e9:	83 ec 14             	sub    esp,0x14
c00154ec:	68 84 91 02 c0       	push   0xc0029184
c00154f1:	e8 1a 9c 00 00       	call   c001f110 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00154f6:	83 c4 10             	add    esp,0x10
c00154f9:	84 c0                	test   al,al
c00154fb:	75 3f                	jne    c001553c <schedule()+0x6c>
c00154fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015502:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015505:	83 fa 01             	cmp    edx,0x1
c0015508:	74 3a                	je     c0015544 <schedule()+0x74>
c001550a:	66 90                	xchg   ax,ax
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	68 84 91 02 c0       	push   0xc0029184
c0015514:	e8 13 9c 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015519:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015520:	89 c3                	mov    ebx,eax
c0015522:	e8 0d 9c 00 00       	call   c001f134 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015527:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001552e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015531:	e8 fe f7 ff ff       	call   c0014d34 <switchToThread(ThreadControlBlock*)>
c0015536:	83 c4 10             	add    esp,0x10
c0015539:	8d 76 00             	lea    esi,[esi+0x0]
c001553c:	83 c4 08             	add    esp,0x8
c001553f:	5b                   	pop    ebx
c0015540:	c3                   	ret    
c0015541:	8d 76 00             	lea    esi,[esi+0x0]
c0015544:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001554b:	83 ec 08             	sub    esp,0x8
c001554e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015553:	50                   	push   eax
c0015554:	68 84 91 02 c0       	push   0xc0029184
c0015559:	e8 92 9c 00 00       	call   c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001555e:	83 c4 10             	add    esp,0x10
c0015561:	eb a9                	jmp    c001550c <schedule()+0x3c>
c0015563:	90                   	nop

c0015564 <Semaphore::tryAcquire()>:
c0015564:	53                   	push   ebx
c0015565:	83 ec 08             	sub    esp,0x8
c0015568:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001556c:	fa                   	cli    
c001556d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015572:	8d 50 01             	lea    edx,[eax+0x1]
c0015575:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c001557b:	8b 15 64 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029164
c0015581:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015584:	89 1d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ebx
c001558a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001558d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001558f:	7c 33                	jl     c00155c4 <Semaphore::tryAcquire()+0x60>
c0015591:	89 15 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,edx
c0015597:	85 d2                	test   edx,edx
c0015599:	75 0d                	jne    c00155a8 <Semaphore::tryAcquire()+0x44>
c001559b:	8b 15 60 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029160
c00155a1:	85 d2                	test   edx,edx
c00155a3:	75 6f                	jne    c0015614 <Semaphore::tryAcquire()+0xb0>
c00155a5:	8d 76 00             	lea    esi,[esi+0x0]
c00155a8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00155ad:	85 c0                	test   eax,eax
c00155af:	74 0b                	je     c00155bc <Semaphore::tryAcquire()+0x58>
c00155b1:	8d 76 00             	lea    esi,[esi+0x0]
c00155b4:	31 c0                	xor    eax,eax
c00155b6:	83 c4 08             	add    esp,0x8
c00155b9:	5b                   	pop    ebx
c00155ba:	c3                   	ret    
c00155bb:	90                   	nop
c00155bc:	fb                   	sti    
c00155bd:	83 c4 08             	add    esp,0x8
c00155c0:	5b                   	pop    ebx
c00155c1:	c3                   	ret    
c00155c2:	66 90                	xchg   ax,ax
c00155c4:	83 c3 01             	add    ebx,0x1
c00155c7:	89 15 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,edx
c00155cd:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00155d0:	85 d2                	test   edx,edx
c00155d2:	75 24                	jne    c00155f8 <Semaphore::tryAcquire()+0x94>
c00155d4:	8b 0d 60 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029160
c00155da:	85 c9                	test   ecx,ecx
c00155dc:	74 1a                	je     c00155f8 <Semaphore::tryAcquire()+0x94>
c00155de:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00155e8:	e8 e3 fe ff ff       	call   c00154d0 <schedule()>
c00155ed:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00155f2:	83 e8 01             	sub    eax,0x1
c00155f5:	8d 76 00             	lea    esi,[esi+0x0]
c00155f8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00155fd:	85 c0                	test   eax,eax
c00155ff:	75 0b                	jne    c001560c <Semaphore::tryAcquire()+0xa8>
c0015601:	fb                   	sti    
c0015602:	b0 01                	mov    al,0x1
c0015604:	83 c4 08             	add    esp,0x8
c0015607:	5b                   	pop    ebx
c0015608:	c3                   	ret    
c0015609:	8d 76 00             	lea    esi,[esi+0x0]
c001560c:	b0 01                	mov    al,0x1
c001560e:	83 c4 08             	add    esp,0x8
c0015611:	5b                   	pop    ebx
c0015612:	c3                   	ret    
c0015613:	90                   	nop
c0015614:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c001561e:	e8 ad fe ff ff       	call   c00154d0 <schedule()>
c0015623:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015628:	83 e8 01             	sub    eax,0x1
c001562b:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015630:	85 c0                	test   eax,eax
c0015632:	75 80                	jne    c00155b4 <Semaphore::tryAcquire()+0x50>
c0015634:	eb 86                	jmp    c00155bc <Semaphore::tryAcquire()+0x58>
c0015636:	66 90                	xchg   ax,ax

c0015638 <Semaphore::assertLocked(char const*)>:
c0015638:	83 ec 0c             	sub    esp,0xc
c001563b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001563f:	fa                   	cli    
c0015640:	8b 0d 68 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029168
c0015646:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c001564b:	83 c1 01             	add    ecx,0x1
c001564e:	89 0d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ecx
c0015654:	8d 48 01             	lea    ecx,[eax+0x1]
c0015657:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c001565d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001565f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015662:	7c 28                	jl     c001568c <Semaphore::assertLocked(char const*)+0x54>
c0015664:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015669:	85 c0                	test   eax,eax
c001566b:	75 0b                	jne    c0015678 <Semaphore::assertLocked(char const*)+0x40>
c001566d:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015672:	85 c0                	test   eax,eax
c0015674:	75 32                	jne    c00156a8 <Semaphore::assertLocked(char const*)+0x70>
c0015676:	66 90                	xchg   ax,ax
c0015678:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001567d:	83 e8 01             	sub    eax,0x1
c0015680:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015685:	75 01                	jne    c0015688 <Semaphore::assertLocked(char const*)+0x50>
c0015687:	fb                   	sti    
c0015688:	83 c4 0c             	add    esp,0xc
c001568b:	c3                   	ret    
c001568c:	83 ec 0c             	sub    esp,0xc
c001568f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015693:	52                   	push   edx
c0015694:	e8 78 b5 ff ff       	call   c0010c11 <KePanic(char const*)>
c0015699:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	83 e8 01             	sub    eax,0x1
c00156a4:	eb be                	jmp    c0015664 <Semaphore::assertLocked(char const*)+0x2c>
c00156a6:	66 90                	xchg   ax,ax
c00156a8:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00156b2:	e8 19 fe ff ff       	call   c00154d0 <schedule()>
c00156b7:	eb bf                	jmp    c0015678 <Semaphore::assertLocked(char const*)+0x40>
c00156b9:	8d 76 00             	lea    esi,[esi+0x0]

c00156bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156cb:	e8 00 fe ff ff       	call   c00154d0 <schedule()>
c00156d0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00156d5:	83 e8 01             	sub    eax,0x1
c00156d8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00156dd:	75 01                	jne    c00156e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00156df:	fb                   	sti    
c00156e0:	83 c4 0c             	add    esp,0xc
c00156e3:	c3                   	ret    

c00156e4 <blockTask(TaskState)>:
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	fa                   	cli    
c00156e8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00156ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156f1:	83 c0 01             	add    eax,0x1
c00156f4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00156f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015701:	e8 ca fd ff ff       	call   c00154d0 <schedule()>
c0015706:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001570b:	83 e8 01             	sub    eax,0x1
c001570e:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015713:	75 03                	jne    c0015718 <blockTask(TaskState)+0x34>
c0015715:	fb                   	sti    
c0015716:	66 90                	xchg   ax,ax
c0015718:	83 c4 0c             	add    esp,0xc
c001571b:	c3                   	ret    

c001571c <waitTask(int, int*, int)>:
c001571c:	83 ec 18             	sub    esp,0x18
c001571f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015724:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015728:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001572b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001572f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015734:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015737:	6a 07                	push   0x7
c0015739:	e8 a6 ff ff ff       	call   c00156e4 <blockTask(TaskState)>
c001573e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015743:	83 c4 10             	add    esp,0x10
c0015746:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015749:	85 d2                	test   edx,edx
c001574b:	74 0b                	je     c0015758 <waitTask(int, int*, int)+0x3c>
c001574d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015750:	89 02                	mov    DWORD PTR [edx],eax
c0015752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015757:	90                   	nop
c0015758:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001575b:	83 c4 0c             	add    esp,0xc
c001575e:	c3                   	ret    
c001575f:	90                   	nop

c0015760 <milliTenthSleepUntil(unsigned int)>:
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015767:	39 05 8c 84 02 c0    	cmp    DWORD PTR ds:0xc002848c,eax
c001576d:	76 05                	jbe    c0015774 <milliTenthSleepUntil(unsigned int)+0x14>
c001576f:	90                   	nop
c0015770:	83 c4 0c             	add    esp,0xc
c0015773:	c3                   	ret    
c0015774:	fa                   	cli    
c0015775:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c001577b:	83 ec 08             	sub    esp,0x8
c001577e:	83 c2 01             	add    edx,0x1
c0015781:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015787:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c001578d:	83 c1 01             	add    ecx,0x1
c0015790:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015796:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001579c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001579f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157a4:	50                   	push   eax
c00157a5:	68 78 91 02 c0       	push   0xc0029178
c00157aa:	e8 41 9a 00 00       	call   c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00157b6:	e8 29 ff ff ff       	call   c00156e4 <blockTask(TaskState)>
c00157bb:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	83 e8 01             	sub    eax,0x1
c00157c6:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c00157cb:	85 c0                	test   eax,eax
c00157cd:	75 09                	jne    c00157d8 <milliTenthSleepUntil(unsigned int)+0x78>
c00157cf:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c00157d4:	85 c0                	test   eax,eax
c00157d6:	75 14                	jne    c00157ec <milliTenthSleepUntil(unsigned int)+0x8c>
c00157d8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00157dd:	83 e8 01             	sub    eax,0x1
c00157e0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00157e5:	75 89                	jne    c0015770 <milliTenthSleepUntil(unsigned int)+0x10>
c00157e7:	fb                   	sti    
c00157e8:	83 c4 0c             	add    esp,0xc
c00157eb:	c3                   	ret    
c00157ec:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00157f6:	e8 d5 fc ff ff       	call   c00154d0 <schedule()>
c00157fb:	eb db                	jmp    c00157d8 <milliTenthSleepUntil(unsigned int)+0x78>
c00157fd:	8d 76 00             	lea    esi,[esi+0x0]

c0015800 <milliTenthSleep(unsigned int)>:
c0015800:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015804:	a1 8c 84 02 c0       	mov    eax,ds:0xc002848c
c0015809:	01 c2                	add    edx,eax
c001580b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001580f:	e9 4c ff ff ff       	jmp    c0015760 <milliTenthSleepUntil(unsigned int)>

c0015814 <sleep(unsigned int)>:
c0015814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015818:	8d 04 80             	lea    eax,[eax+eax*4]
c001581b:	8d 04 80             	lea    eax,[eax+eax*4]
c001581e:	8d 04 80             	lea    eax,[eax+eax*4]
c0015821:	8d 04 80             	lea    eax,[eax+eax*4]
c0015824:	c1 e0 04             	shl    eax,0x4
c0015827:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001582b:	eb d3                	jmp    c0015800 <milliTenthSleep(unsigned int)>
c001582d:	90                   	nop
c001582e:	66 90                	xchg   ax,ax

c0015830 <Semaphore::acquire()>:
c0015830:	83 ec 0c             	sub    esp,0xc
c0015833:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015837:	fa                   	cli    
c0015838:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001583d:	83 c0 01             	add    eax,0x1
c0015840:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015845:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c001584a:	8d 48 01             	lea    ecx,[eax+0x1]
c001584d:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015853:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015856:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015858:	7d 2e                	jge    c0015888 <Semaphore::acquire()+0x58>
c001585a:	83 c1 01             	add    ecx,0x1
c001585d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015860:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015865:	85 c0                	test   eax,eax
c0015867:	75 0b                	jne    c0015874 <Semaphore::acquire()+0x44>
c0015869:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c001586e:	85 c0                	test   eax,eax
c0015870:	75 66                	jne    c00158d8 <Semaphore::acquire()+0xa8>
c0015872:	66 90                	xchg   ax,ax
c0015874:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015879:	83 e8 01             	sub    eax,0x1
c001587c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015881:	75 01                	jne    c0015884 <Semaphore::acquire()+0x54>
c0015883:	fb                   	sti    
c0015884:	83 c4 0c             	add    esp,0xc
c0015887:	c3                   	ret    
c0015888:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001588d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015894:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015897:	85 c9                	test   ecx,ecx
c0015899:	74 51                	je     c00158ec <Semaphore::acquire()+0xbc>
c001589b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001589e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158a4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00158a7:	90                   	nop
c00158a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158ad:	83 ec 0c             	sub    esp,0xc
c00158b0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00158b3:	68 80 1b 02 c0       	push   0xc0021b80
c00158b8:	e8 7c 50 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00158bd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00158c4:	e8 1b fe ff ff       	call   c00156e4 <blockTask(TaskState)>
c00158c9:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c00158ce:	83 c4 10             	add    esp,0x10
c00158d1:	83 e8 01             	sub    eax,0x1
c00158d4:	eb 8a                	jmp    c0015860 <Semaphore::acquire()+0x30>
c00158d6:	66 90                	xchg   ax,ax
c00158d8:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00158e2:	e8 e9 fb ff ff       	call   c00154d0 <schedule()>
c00158e7:	eb 8b                	jmp    c0015874 <Semaphore::acquire()+0x44>
c00158e9:	8d 76 00             	lea    esi,[esi+0x0]
c00158ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00158f4:	eb b2                	jmp    c00158a8 <Semaphore::acquire()+0x78>
c00158f6:	66 90                	xchg   ax,ax

c00158f8 <taskReturned>:
c00158f8:	83 ec 18             	sub    esp,0x18
c00158fb:	68 a0 1b 02 c0       	push   0xc0021ba0
c0015900:	e8 0c b3 ff ff       	call   c0010c11 <KePanic(char const*)>
c0015905:	83 c4 10             	add    esp,0x10
c0015908:	83 ec 0c             	sub    esp,0xc
c001590b:	6a 02                	push   0x2
c001590d:	e8 d2 fd ff ff       	call   c00156e4 <blockTask(TaskState)>
c0015912:	fa                   	cli    
c0015913:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015918:	83 c0 01             	add    eax,0x1
c001591b:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015920:	e8 ab fb ff ff       	call   c00154d0 <schedule()>
c0015925:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001592a:	83 c4 10             	add    esp,0x10
c001592d:	83 e8 01             	sub    eax,0x1
c0015930:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015935:	85 c0                	test   eax,eax
c0015937:	75 cf                	jne    c0015908 <taskReturned+0x10>
c0015939:	fb                   	sti    
c001593a:	eb cc                	jmp    c0015908 <taskReturned+0x10>

c001593c <Thr::processFromPID(int)>:
c001593c:	57                   	push   edi
c001593d:	56                   	push   esi
c001593e:	53                   	push   ebx
c001593f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015943:	fa                   	cli    
c0015944:	8b 0d 68 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029168
c001594a:	83 ec 0c             	sub    esp,0xc
c001594d:	83 c1 01             	add    ecx,0x1
c0015950:	68 84 91 02 c0       	push   0xc0029184
c0015955:	89 0d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ecx
c001595b:	e8 cc 97 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	89 c7                	mov    edi,eax
c0015965:	eb 15                	jmp    c001597c <Thr::processFromPID(int)+0x40>
c0015967:	90                   	nop
c0015968:	83 ec 0c             	sub    esp,0xc
c001596b:	68 84 91 02 c0       	push   0xc0029184
c0015970:	e8 b7 97 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015975:	83 c4 10             	add    esp,0x10
c0015978:	39 f8                	cmp    eax,edi
c001597a:	74 50                	je     c00159cc <Thr::processFromPID(int)+0x90>
c001597c:	83 ec 0c             	sub    esp,0xc
c001597f:	68 84 91 02 c0       	push   0xc0029184
c0015984:	e8 a3 97 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015989:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015990:	89 c3                	mov    ebx,eax
c0015992:	e8 9d 97 00 00       	call   c001f134 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015997:	58                   	pop    eax
c0015998:	5a                   	pop    edx
c0015999:	53                   	push   ebx
c001599a:	68 84 91 02 c0       	push   0xc0029184
c001599f:	e8 4c 98 00 00       	call   c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159a4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159a7:	83 c4 10             	add    esp,0x10
c00159aa:	39 30                	cmp    DWORD PTR [eax],esi
c00159ac:	75 ba                	jne    c0015968 <Thr::processFromPID(int)+0x2c>
c00159ae:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00159b3:	83 e8 01             	sub    eax,0x1
c00159b6:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00159bb:	74 0b                	je     c00159c8 <Thr::processFromPID(int)+0x8c>
c00159bd:	8d 76 00             	lea    esi,[esi+0x0]
c00159c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159c3:	5b                   	pop    ebx
c00159c4:	5e                   	pop    esi
c00159c5:	5f                   	pop    edi
c00159c6:	c3                   	ret    
c00159c7:	90                   	nop
c00159c8:	fb                   	sti    
c00159c9:	eb f5                	jmp    c00159c0 <Thr::processFromPID(int)+0x84>
c00159cb:	90                   	nop
c00159cc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00159d1:	83 e8 01             	sub    eax,0x1
c00159d4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00159d9:	75 05                	jne    c00159e0 <Thr::processFromPID(int)+0xa4>
c00159db:	fb                   	sti    
c00159dc:	5b                   	pop    ebx
c00159dd:	5e                   	pop    esi
c00159de:	5f                   	pop    edi
c00159df:	c3                   	ret    
c00159e0:	5b                   	pop    ebx
c00159e1:	31 c0                	xor    eax,eax
c00159e3:	5e                   	pop    esi
c00159e4:	5f                   	pop    edi
c00159e5:	c3                   	ret    
c00159e6:	66 90                	xchg   ax,ax

c00159e8 <unblockTask(ThreadControlBlock*)>:
c00159e8:	53                   	push   ebx
c00159e9:	83 ec 08             	sub    esp,0x8
c00159ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159f0:	fa                   	cli    
c00159f1:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00159f6:	83 c0 01             	add    eax,0x1
c00159f9:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00159fe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015a01:	85 c0                	test   eax,eax
c0015a03:	74 67                	je     c0015a6c <unblockTask(ThreadControlBlock*)+0x84>
c0015a05:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015a08:	83 f8 01             	cmp    eax,0x1
c0015a0b:	74 37                	je     c0015a44 <unblockTask(ThreadControlBlock*)+0x5c>
c0015a0d:	83 ec 0c             	sub    esp,0xc
c0015a10:	68 84 91 02 c0       	push   0xc0029184
c0015a15:	e8 12 97 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a1a:	83 c4 10             	add    esp,0x10
c0015a1d:	85 c0                	test   eax,eax
c0015a1f:	75 1b                	jne    c0015a3c <unblockTask(ThreadControlBlock*)+0x54>
c0015a21:	eb 5d                	jmp    c0015a80 <unblockTask(ThreadControlBlock*)+0x98>
c0015a23:	90                   	nop
c0015a24:	83 ec 08             	sub    esp,0x8
c0015a27:	50                   	push   eax
c0015a28:	68 84 91 02 c0       	push   0xc0029184
c0015a2d:	e8 1a 9a 00 00       	call   c001f44c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015a32:	83 c4 10             	add    esp,0x10
c0015a35:	85 c0                	test   eax,eax
c0015a37:	74 47                	je     c0015a80 <unblockTask(ThreadControlBlock*)+0x98>
c0015a39:	8d 76 00             	lea    esi,[esi+0x0]
c0015a3c:	39 c3                	cmp    ebx,eax
c0015a3e:	75 e4                	jne    c0015a24 <unblockTask(ThreadControlBlock*)+0x3c>
c0015a40:	eb 12                	jmp    c0015a54 <unblockTask(ThreadControlBlock*)+0x6c>
c0015a42:	66 90                	xchg   ax,ax
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	68 1f 1b 02 c0       	push   0xc0021b1f
c0015a4c:	e8 e8 4e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015a51:	83 c4 10             	add    esp,0x10
c0015a54:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015a59:	83 e8 01             	sub    eax,0x1
c0015a5c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015a61:	75 01                	jne    c0015a64 <unblockTask(ThreadControlBlock*)+0x7c>
c0015a63:	fb                   	sti    
c0015a64:	83 c4 08             	add    esp,0x8
c0015a67:	5b                   	pop    ebx
c0015a68:	c3                   	ret    
c0015a69:	8d 76 00             	lea    esi,[esi+0x0]
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	68 08 1b 02 c0       	push   0xc0021b08
c0015a74:	e8 c0 4e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015a79:	83 c4 10             	add    esp,0x10
c0015a7c:	eb d6                	jmp    c0015a54 <unblockTask(ThreadControlBlock*)+0x6c>
c0015a7e:	66 90                	xchg   ax,ax
c0015a80:	83 ec 08             	sub    esp,0x8
c0015a83:	53                   	push   ebx
c0015a84:	68 84 91 02 c0       	push   0xc0029184
c0015a89:	e8 62 97 00 00       	call   c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a8e:	83 c4 10             	add    esp,0x10
c0015a91:	eb c1                	jmp    c0015a54 <unblockTask(ThreadControlBlock*)+0x6c>
c0015a93:	90                   	nop

c0015a94 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015a94:	55                   	push   ebp
c0015a95:	57                   	push   edi
c0015a96:	56                   	push   esi
c0015a97:	53                   	push   ebx
c0015a98:	83 ec 1c             	sub    esp,0x1c
c0015a9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015a9f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015aa2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015aa8:	85 ed                	test   ebp,ebp
c0015aaa:	7e 28                	jle    c0015ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015aac:	31 f6                	xor    esi,esi
c0015aae:	66 90                	xchg   ax,ax
c0015ab0:	83 ec 0c             	sub    esp,0xc
c0015ab3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015aba:	83 c6 01             	add    esi,0x1
c0015abd:	57                   	push   edi
c0015abe:	e8 fb 1f ff ff       	call   c0007abe <free>
c0015ac3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015acf:	7f df                	jg     c0015ab0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ade:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015ae3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015ae6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015ae9:	d3 c0                	rol    eax,cl
c0015aeb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015af2:	21 c8                	and    eax,ecx
c0015af4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015afb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015afe:	89 f7                	mov    edi,esi
c0015b00:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015b08:	0f 85 72 01 00 00    	jne    c0015c80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015b0e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015b14:	85 ed                	test   ebp,ebp
c0015b16:	74 1c                	je     c0015b34 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015b18:	83 ec 0c             	sub    esp,0xc
c0015b1b:	55                   	push   ebp
c0015b1c:	e8 01 ae ff ff       	call   c0010922 <EnvVarContainer::~EnvVarContainer()>
c0015b21:	59                   	pop    ecx
c0015b22:	5e                   	pop    esi
c0015b23:	6a 0c                	push   0xc
c0015b25:	55                   	push   ebp
c0015b26:	e8 e1 4c ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0015b2b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b2e:	83 c4 10             	add    esp,0x10
c0015b31:	89 f7                	mov    edi,esi
c0015b33:	90                   	nop
c0015b34:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015b3a:	85 c0                	test   eax,eax
c0015b3c:	0f 84 b2 00 00 00    	je     c0015bf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015b42:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015b45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015b49:	31 c9                	xor    ecx,ecx
c0015b4b:	eb 17                	jmp    c0015b64 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b50:	83 c1 01             	add    ecx,0x1
c0015b53:	83 f9 10             	cmp    ecx,0x10
c0015b56:	0f 84 98 00 00 00    	je     c0015bf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015b5c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015b62:	66 90                	xchg   ax,ax
c0015b64:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015b6b:	d3 fa                	sar    edx,cl
c0015b6d:	80 e2 01             	and    dl,0x1
c0015b70:	74 de                	je     c0015b50 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015b72:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015b75:	01 d2                	add    edx,edx
c0015b77:	01 ca                	add    edx,ecx
c0015b79:	8d 14 92             	lea    edx,[edx+edx*4]
c0015b7c:	01 d0                	add    eax,edx
c0015b7e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015b84:	83 fd 07             	cmp    ebp,0x7
c0015b87:	75 c7                	jne    c0015b50 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015b89:	05 40 02 00 00       	add    eax,0x240
c0015b8e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015b91:	83 fd ff             	cmp    ebp,0xffffffff
c0015b94:	0f 8c ee 00 00 00    	jl     c0015c88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015b9a:	0f 84 ac 01 00 00    	je     c0015d4c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015ba0:	85 ed                	test   ebp,ebp
c0015ba2:	0f 84 90 01 00 00    	je     c0015d38 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015ba8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015baa:	75 a4                	jne    c0015b50 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015bac:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015bb2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015bb6:	01 d0                	add    eax,edx
c0015bb8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015bbc:	83 ec 0c             	sub    esp,0xc
c0015bbf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015bc5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bc8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bce:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015bd5:	50                   	push   eax
c0015bd6:	e8 0d fe ff ff       	call   c00159e8 <unblockTask(ThreadControlBlock*)>
c0015bdb:	83 c4 10             	add    esp,0x10
c0015bde:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015be1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015be5:	89 f7                	mov    edi,esi
c0015be7:	83 c1 01             	add    ecx,0x1
c0015bea:	83 f9 10             	cmp    ecx,0x10
c0015bed:	0f 85 69 ff ff ff    	jne    c0015b5c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015bf3:	90                   	nop
c0015bf4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015bfa:	85 c0                	test   eax,eax
c0015bfc:	74 62                	je     c0015c60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015bfe:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015c04:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015c0a:	74 54                	je     c0015c60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015c0c:	83 ec 0c             	sub    esp,0xc
c0015c0f:	68 84 91 02 c0       	push   0xc0029184
c0015c14:	e8 13 95 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c19:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015c20:	89 c7                	mov    edi,eax
c0015c22:	e8 e9 94 00 00       	call   c001f110 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c27:	83 c4 10             	add    esp,0x10
c0015c2a:	84 c0                	test   al,al
c0015c2c:	0f 84 ce 00 00 00    	je     c0015d00 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015c32:	66 90                	xchg   ax,ax
c0015c34:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c37:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c3d:	85 d2                	test   edx,edx
c0015c3f:	74 0f                	je     c0015c50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015c41:	83 ec 0c             	sub    esp,0xc
c0015c44:	8b 02                	mov    eax,DWORD PTR [edx]
c0015c46:	52                   	push   edx
c0015c47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c4a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c4d:	83 c4 10             	add    esp,0x10
c0015c50:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015c5a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c60:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015c66:	85 db                	test   ebx,ebx
c0015c68:	74 16                	je     c0015c80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015c6a:	83 ec 0c             	sub    esp,0xc
c0015c6d:	53                   	push   ebx
c0015c6e:	e8 33 3f ff ff       	call   c0009ba6 <VAS::~VAS()>
c0015c73:	58                   	pop    eax
c0015c74:	5a                   	pop    edx
c0015c75:	6a 14                	push   0x14
c0015c77:	53                   	push   ebx
c0015c78:	e8 8f 4b ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0015c7d:	83 c4 10             	add    esp,0x10
c0015c80:	83 c4 1c             	add    esp,0x1c
c0015c83:	5b                   	pop    ebx
c0015c84:	5e                   	pop    esi
c0015c85:	5f                   	pop    edi
c0015c86:	5d                   	pop    ebp
c0015c87:	c3                   	ret    
c0015c88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c8c:	83 ec 0c             	sub    esp,0xc
c0015c8f:	68 d4 1b 02 c0       	push   0xc0021bd4
c0015c94:	e8 78 af ff ff       	call   c0010c11 <KePanic(char const*)>
c0015c99:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c9c:	83 c4 10             	add    esp,0x10
c0015c9f:	89 f7                	mov    edi,esi
c0015ca1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ca5:	e9 a6 fe ff ff       	jmp    c0015b50 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015caa:	66 90                	xchg   ax,ax
c0015cac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015cb2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015cb8:	75 1e                	jne    c0015cd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015cba:	83 ec 0c             	sub    esp,0xc
c0015cbd:	68 3c 1c 02 c0       	push   0xc0021c3c
c0015cc2:	e8 72 4c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015cc7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015cce:	e8 11 fa ff ff       	call   c00156e4 <blockTask(TaskState)>
c0015cd3:	83 c4 10             	add    esp,0x10
c0015cd6:	66 90                	xchg   ax,ax
c0015cd8:	83 ec 08             	sub    esp,0x8
c0015cdb:	56                   	push   esi
c0015cdc:	68 84 91 02 c0       	push   0xc0029184
c0015ce1:	e8 0a 95 00 00       	call   c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ce6:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015ced:	e8 3a 94 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015cf2:	83 c4 10             	add    esp,0x10
c0015cf5:	39 f8                	cmp    eax,edi
c0015cf7:	0f 84 37 ff ff ff    	je     c0015c34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0015d00:	83 ec 0c             	sub    esp,0xc
c0015d03:	68 84 91 02 c0       	push   0xc0029184
c0015d08:	e8 1f 94 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d0d:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015d14:	89 c6                	mov    esi,eax
c0015d16:	e8 19 94 00 00       	call   c001f134 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d1b:	83 c4 10             	add    esp,0x10
c0015d1e:	39 f3                	cmp    ebx,esi
c0015d20:	74 b6                	je     c0015cd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015d22:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015d25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d28:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015d2e:	75 a8                	jne    c0015cd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015d30:	e9 77 ff ff ff       	jmp    c0015cac <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015d35:	8d 76 00             	lea    esi,[esi+0x0]
c0015d38:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	68 08 1c 02 c0       	push   0xc0021c08
c0015d44:	e9 4b ff ff ff       	jmp    c0015c94 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015d49:	8d 76 00             	lea    esi,[esi+0x0]
c0015d4c:	8b 36                	mov    esi,DWORD PTR [esi]
c0015d4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015d52:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015d55:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d58:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015d5e:	01 d7                	add    edi,edx
c0015d60:	89 f8                	mov    eax,edi
c0015d62:	e9 51 fe ff ff       	jmp    c0015bb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015d67:	90                   	nop

c0015d68 <cleanerTaskFunction(void*)>:
c0015d68:	53                   	push   ebx
c0015d69:	83 ec 08             	sub    esp,0x8
c0015d6c:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015d71:	83 e8 01             	sub    eax,0x1
c0015d74:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015d79:	75 01                	jne    c0015d7c <cleanerTaskFunction(void*)+0x14>
c0015d7b:	fb                   	sti    
c0015d7c:	fa                   	cli    
c0015d7d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015d82:	80 3d 4c 91 02 c0 00 	cmp    BYTE PTR ds:0xc002914c,0x0
c0015d89:	8d 50 01             	lea    edx,[eax+0x1]
c0015d8c:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015d92:	0f 84 c4 00 00 00    	je     c0015e5c <cleanerTaskFunction(void*)+0xf4>
c0015d98:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015d9d:	85 c0                	test   eax,eax
c0015d9f:	75 03                	jne    c0015da4 <cleanerTaskFunction(void*)+0x3c>
c0015da1:	fb                   	sti    
c0015da2:	66 90                	xchg   ax,ax
c0015da4:	c6 05 4c 91 02 c0 00 	mov    BYTE PTR ds:0xc002914c,0x0
c0015dab:	fa                   	cli    
c0015dac:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015db2:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015db8:	83 c2 01             	add    edx,0x1
c0015dbb:	83 c1 01             	add    ecx,0x1
c0015dbe:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015dc4:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015dca:	fa                   	cli    
c0015dcb:	8b 1d 68 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029168
c0015dd1:	83 c3 01             	add    ebx,0x1
c0015dd4:	89 1d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ebx
c0015dda:	eb 28                	jmp    c0015e04 <cleanerTaskFunction(void*)+0x9c>
c0015ddc:	83 ec 0c             	sub    esp,0xc
c0015ddf:	68 6c 91 02 c0       	push   0xc002916c
c0015de4:	e8 43 93 00 00       	call   c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015de9:	c7 04 24 6c 91 02 c0 	mov    DWORD PTR [esp],0xc002916c
c0015df0:	89 c3                	mov    ebx,eax
c0015df2:	e8 3d 93 00 00       	call   c001f134 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015df7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015dfa:	e8 95 fc ff ff       	call   c0015a94 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	66 90                	xchg   ax,ax
c0015e04:	83 ec 0c             	sub    esp,0xc
c0015e07:	68 6c 91 02 c0       	push   0xc002916c
c0015e0c:	e8 ff 92 00 00       	call   c001f110 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e11:	83 c4 10             	add    esp,0x10
c0015e14:	84 c0                	test   al,al
c0015e16:	74 c4                	je     c0015ddc <cleanerTaskFunction(void*)+0x74>
c0015e18:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e1d:	83 e8 01             	sub    eax,0x1
c0015e20:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e25:	75 01                	jne    c0015e28 <cleanerTaskFunction(void*)+0xc0>
c0015e27:	fb                   	sti    
c0015e28:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015e2d:	83 e8 01             	sub    eax,0x1
c0015e30:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015e35:	0f 85 31 ff ff ff    	jne    c0015d6c <cleanerTaskFunction(void*)+0x4>
c0015e3b:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015e40:	85 c0                	test   eax,eax
c0015e42:	0f 84 24 ff ff ff    	je     c0015d6c <cleanerTaskFunction(void*)+0x4>
c0015e48:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015e52:	e8 79 f6 ff ff       	call   c00154d0 <schedule()>
c0015e57:	e9 10 ff ff ff       	jmp    c0015d6c <cleanerTaskFunction(void*)+0x4>
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	6a 02                	push   0x2
c0015e61:	e8 56 f8 ff ff       	call   c00156bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015e66:	83 c4 10             	add    esp,0x10
c0015e69:	e9 36 ff ff ff       	jmp    c0015da4 <cleanerTaskFunction(void*)+0x3c>
c0015e6e:	66 90                	xchg   ax,ax

c0015e70 <terminateTask(int)>:
c0015e70:	83 ec 14             	sub    esp,0x14
c0015e73:	fa                   	cli    
c0015e74:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015e7a:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015e80:	83 c2 01             	add    edx,0x1
c0015e83:	83 c1 01             	add    ecx,0x1
c0015e86:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015e8c:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015e92:	fa                   	cli    
c0015e93:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015e9c:	83 c0 01             	add    eax,0x1
c0015e9f:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015ea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015eac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015eb4:	50                   	push   eax
c0015eb5:	68 6c 91 02 c0       	push   0xc002916c
c0015eba:	e8 31 93 00 00       	call   c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ec4:	83 c4 10             	add    esp,0x10
c0015ec7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015ece:	a1 48 91 02 c0       	mov    eax,ds:0xc0029148
c0015ed3:	85 c0                	test   eax,eax
c0015ed5:	74 65                	je     c0015f3c <terminateTask(int)+0xcc>
c0015ed7:	83 ec 0c             	sub    esp,0xc
c0015eda:	c6 05 4c 91 02 c0 01 	mov    BYTE PTR ds:0xc002914c,0x1
c0015ee1:	50                   	push   eax
c0015ee2:	e8 01 fb ff ff       	call   c00159e8 <unblockTask(ThreadControlBlock*)>
c0015ee7:	83 c4 10             	add    esp,0x10
c0015eea:	66 90                	xchg   ax,ax
c0015eec:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015ef1:	83 e8 01             	sub    eax,0x1
c0015ef4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015ef9:	75 01                	jne    c0015efc <terminateTask(int)+0x8c>
c0015efb:	fb                   	sti    
c0015efc:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015f01:	83 e8 01             	sub    eax,0x1
c0015f04:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015f09:	75 09                	jne    c0015f14 <terminateTask(int)+0xa4>
c0015f0b:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c0015f12:	75 3c                	jne    c0015f50 <terminateTask(int)+0xe0>
c0015f14:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015f19:	83 e8 01             	sub    eax,0x1
c0015f1c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015f21:	75 01                	jne    c0015f24 <terminateTask(int)+0xb4>
c0015f23:	fb                   	sti    
c0015f24:	fa                   	cli    
c0015f25:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015f2a:	83 c0 01             	add    eax,0x1
c0015f2d:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015f32:	66 90                	xchg   ax,ax
c0015f34:	e8 97 f5 ff ff       	call   c00154d0 <schedule()>
c0015f39:	eb d9                	jmp    c0015f14 <terminateTask(int)+0xa4>
c0015f3b:	90                   	nop
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	68 36 1b 02 c0       	push   0xc0021b36
c0015f44:	e8 f0 49 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0015f49:	83 c4 10             	add    esp,0x10
c0015f4c:	eb 9e                	jmp    c0015eec <terminateTask(int)+0x7c>
c0015f4e:	66 90                	xchg   ax,ax
c0015f50:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015f5a:	eb d8                	jmp    c0015f34 <terminateTask(int)+0xc4>

c0015f5c <Thr::terminateFromIRQ(int)>:
c0015f5c:	83 ec 18             	sub    esp,0x18
c0015f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f63:	50                   	push   eax
c0015f64:	e8 07 ff ff ff       	call   c0015e70 <terminateTask(int)>
c0015f69:	90                   	nop
c0015f6a:	66 90                	xchg   ax,ax

c0015f6c <Semaphore::release()>:
c0015f6c:	83 ec 0c             	sub    esp,0xc
c0015f6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f73:	fa                   	cli    
c0015f74:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015f79:	83 c0 01             	add    eax,0x1
c0015f7c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015f81:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015f86:	8d 48 01             	lea    ecx,[eax+0x1]
c0015f89:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015f8f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015f92:	85 c9                	test   ecx,ecx
c0015f94:	74 42                	je     c0015fd8 <Semaphore::release()+0x6c>
c0015f96:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015f99:	83 ec 0c             	sub    esp,0xc
c0015f9c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f9f:	51                   	push   ecx
c0015fa0:	e8 43 fa ff ff       	call   c00159e8 <unblockTask(ThreadControlBlock*)>
c0015fa5:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015faa:	83 c4 10             	add    esp,0x10
c0015fad:	83 e8 01             	sub    eax,0x1
c0015fb0:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015fb5:	85 c0                	test   eax,eax
c0015fb7:	75 0b                	jne    c0015fc4 <Semaphore::release()+0x58>
c0015fb9:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015fbe:	85 c0                	test   eax,eax
c0015fc0:	75 22                	jne    c0015fe4 <Semaphore::release()+0x78>
c0015fc2:	66 90                	xchg   ax,ax
c0015fc4:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015fc9:	83 e8 01             	sub    eax,0x1
c0015fcc:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015fd1:	75 01                	jne    c0015fd4 <Semaphore::release()+0x68>
c0015fd3:	fb                   	sti    
c0015fd4:	83 c4 0c             	add    esp,0xc
c0015fd7:	c3                   	ret    
c0015fd8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015fdb:	83 e9 01             	sub    ecx,0x1
c0015fde:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015fe1:	eb cd                	jmp    c0015fb0 <Semaphore::release()+0x44>
c0015fe3:	90                   	nop
c0015fe4:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015fee:	e8 dd f4 ff ff       	call   c00154d0 <schedule()>
c0015ff3:	eb cf                	jmp    c0015fc4 <Semaphore::release()+0x58>
c0015ff5:	8d 76 00             	lea    esi,[esi+0x0]

c0015ff8 <__static_initialization_and_destruction_0(int, int)>:
c0015ff8:	83 ec 0c             	sub    esp,0xc
c0015ffb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016000:	0f 85 8e 00 00 00    	jne    c0016094 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016006:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001600e:	0f 85 80 00 00 00    	jne    c0016094 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016014:	83 ec 0c             	sub    esp,0xc
c0016017:	68 84 91 02 c0       	push   0xc0029184
c001601c:	e8 83 94 00 00       	call   c001f4a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016021:	83 c4 10             	add    esp,0x10
c0016024:	83 ec 04             	sub    esp,0x4
c0016027:	68 0c 28 02 c0       	push   0xc002280c
c001602c:	68 84 91 02 c0       	push   0xc0029184
c0016031:	68 54 f4 01 c0       	push   0xc001f454
c0016036:	e8 81 47 ff ff       	call   c000a7bc <__cxa_atexit>
c001603b:	83 c4 10             	add    esp,0x10
c001603e:	83 ec 0c             	sub    esp,0xc
c0016041:	68 78 91 02 c0       	push   0xc0029178
c0016046:	e8 59 94 00 00       	call   c001f4a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001604b:	83 c4 10             	add    esp,0x10
c001604e:	83 ec 04             	sub    esp,0x4
c0016051:	68 0c 28 02 c0       	push   0xc002280c
c0016056:	68 78 91 02 c0       	push   0xc0029178
c001605b:	68 54 f4 01 c0       	push   0xc001f454
c0016060:	e8 57 47 ff ff       	call   c000a7bc <__cxa_atexit>
c0016065:	83 c4 10             	add    esp,0x10
c0016068:	83 ec 0c             	sub    esp,0xc
c001606b:	68 6c 91 02 c0       	push   0xc002916c
c0016070:	e8 2f 94 00 00       	call   c001f4a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016075:	83 c4 10             	add    esp,0x10
c0016078:	83 ec 04             	sub    esp,0x4
c001607b:	68 0c 28 02 c0       	push   0xc002280c
c0016080:	68 6c 91 02 c0       	push   0xc002916c
c0016085:	68 54 f4 01 c0       	push   0xc001f454
c001608a:	e8 2d 47 ff ff       	call   c000a7bc <__cxa_atexit>
c001608f:	83 c4 10             	add    esp,0x10
c0016092:	66 90                	xchg   ax,ax
c0016094:	90                   	nop
c0016095:	83 c4 0c             	add    esp,0xc
c0016098:	c3                   	ret    
c0016099:	8d 76 00             	lea    esi,[esi+0x0]

c001609c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	83 ec 08             	sub    esp,0x8
c00160a2:	68 ff ff 00 00       	push   0xffff
c00160a7:	6a 01                	push   0x1
c00160a9:	e8 4a ff ff ff       	call   c0015ff8 <__static_initialization_and_destruction_0(int, int)>
c00160ae:	83 c4 10             	add    esp,0x10
c00160b1:	83 c4 0c             	add    esp,0xc
c00160b4:	c3                   	ret    

c00160b5 <Vm::inbv(unsigned short)>:
c00160b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160b9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00160be:	75 06                	jne    c00160c6 <Vm::inbv(unsigned short)+0x11>
c00160c0:	a0 cc 91 02 c0       	mov    al,ds:0xc00291cc
c00160c5:	c3                   	ret    
c00160c6:	ec                   	in     al,dx
c00160c7:	c3                   	ret    

c00160c8 <Vm::outbv(unsigned short, unsigned char)>:
c00160c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160d0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00160d5:	75 25                	jne    c00160fc <Vm::outbv(unsigned short, unsigned char)+0x34>
c00160d7:	8b 0d cc 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291cc
c00160dd:	8d 51 01             	lea    edx,[ecx+0x1]
c00160e0:	88 81 e0 91 02 c0    	mov    BYTE PTR [ecx-0x3ffd6e20],al
c00160e6:	89 15 cc 91 02 c0    	mov    DWORD PTR ds:0xc00291cc,edx
c00160ec:	83 fa 20             	cmp    edx,0x20
c00160ef:	75 0c                	jne    c00160fd <Vm::outbv(unsigned short, unsigned char)+0x35>
c00160f1:	c7 05 cc 91 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x1f
c00160fb:	c3                   	ret    
c00160fc:	ee                   	out    dx,al
c00160fd:	c3                   	ret    

c00160fe <Vm::realToLinear(unsigned short, unsigned short)>:
c00160fe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016103:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016108:	c1 e0 04             	shl    eax,0x4
c001610b:	01 d0                	add    eax,edx
c001610d:	c3                   	ret    

c001610e <Vm::getSegment(unsigned int)>:
c001610e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016112:	c1 e8 10             	shr    eax,0x10
c0016115:	c3                   	ret    

c0016116 <Vm::getOffset(unsigned int)>:
c0016116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001611a:	c3                   	ret    

c001611b <Vm::mainloop2()>:
c001611b:	83 ec 18             	sub    esp,0x18
c001611e:	fa                   	cli    
c001611f:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0016125:	6a 02                	push   0x2
c0016127:	c6 05 c5 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c5,0x1
c001612e:	e8 89 f5 ff ff       	call   c00156bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016133:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016138:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001613c:	52                   	push   edx
c001613d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016141:	52                   	push   edx
c0016142:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016146:	52                   	push   edx
c0016147:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001614b:	50                   	push   eax
c001614c:	e8 be a0 fe ff       	call   c000020f <goToVM86>
c0016151:	83 c4 2c             	add    esp,0x2c
c0016154:	c3                   	ret    

c0016155 <Vm::mainVm8086Loop(void*)>:
c0016155:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001615a:	48                   	dec    eax
c001615b:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016160:	75 01                	jne    c0016163 <Vm::mainVm8086Loop(void*)+0xe>
c0016162:	fb                   	sti    
c0016163:	eb b6                	jmp    c001611b <Vm::mainloop2()>

c0016165 <Vm::mainloop3(unsigned long)>:
c0016165:	83 ec 18             	sub    esp,0x18
c0016168:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001616c:	fa                   	cli    
c001616d:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0016173:	6a 02                	push   0x2
c0016175:	c6 05 c4 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c4,0x1
c001617c:	a3 c0 91 02 c0       	mov    ds:0xc00291c0,eax
c0016181:	e8 36 f5 ff ff       	call   c00156bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016186:	83 c4 1c             	add    esp,0x1c
c0016189:	eb 90                	jmp    c001611b <Vm::mainloop2()>

c001618b <Vm::initialise8086()>:
c001618b:	83 ec 0c             	sub    esp,0xc
c001618e:	68 80 00 00 00       	push   0x80
c0016193:	6a 00                	push   0x0
c0016195:	68 55 61 01 c0       	push   0xc0016155
c001619a:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00161a0:	e8 db f0 ff ff       	call   c0015280 <Process::createThread(void (*)(void*), void*, int)>
c00161a5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00161ac:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00161b1:	68 00 01 00 00       	push   0x100
c00161b6:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c00161bb:	6a 00                	push   0x0
c00161bd:	6a 00                	push   0x0
c00161bf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00161c5:	e8 44 3d ff ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00161ca:	83 c4 2c             	add    esp,0x2c
c00161cd:	c3                   	ret    

c00161ce <Vm::finish8086()>:
c00161ce:	53                   	push   ebx
c00161cf:	83 ec 08             	sub    esp,0x8
c00161d2:	fa                   	cli    
c00161d3:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00161d9:	80 3d c4 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291c4,0x0
c00161e0:	75 15                	jne    c00161f7 <Vm::finish8086()+0x29>
c00161e2:	e8 e9 f2 ff ff       	call   c00154d0 <schedule()>
c00161e7:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00161ec:	48                   	dec    eax
c00161ed:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00161f2:	75 de                	jne    c00161d2 <Vm::finish8086()+0x4>
c00161f4:	fb                   	sti    
c00161f5:	eb db                	jmp    c00161d2 <Vm::finish8086()+0x4>
c00161f7:	83 ec 0c             	sub    esp,0xc
c00161fa:	8b 1d c0 91 02 c0    	mov    ebx,DWORD PTR ds:0xc00291c0
c0016200:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c0016206:	c6 05 c4 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c4,0x0
c001620d:	e8 d6 f7 ff ff       	call   c00159e8 <unblockTask(ThreadControlBlock*)>
c0016212:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016217:	83 c4 10             	add    esp,0x10
c001621a:	8d 50 ff             	lea    edx,[eax-0x1]
c001621d:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0016223:	85 d2                	test   edx,edx
c0016225:	75 01                	jne    c0016228 <Vm::finish8086()+0x5a>
c0016227:	fb                   	sti    
c0016228:	89 d8                	mov    eax,ebx
c001622a:	83 c4 08             	add    esp,0x8
c001622d:	5b                   	pop    ebx
c001622e:	c3                   	ret    

c001622f <Vm::getOutput8086(unsigned char*)>:
c001622f:	57                   	push   edi
c0016230:	8b 0d cc 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291cc
c0016236:	56                   	push   esi
c0016237:	be e0 91 02 c0       	mov    esi,0xc00291e0
c001623c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016240:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016242:	a1 cc 91 02 c0       	mov    eax,ds:0xc00291cc
c0016247:	5e                   	pop    esi
c0016248:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c0016252:	5f                   	pop    edi
c0016253:	c3                   	ret    

c0016254 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016254:	55                   	push   ebp
c0016255:	57                   	push   edi
c0016256:	56                   	push   esi
c0016257:	53                   	push   ebx
c0016258:	83 ec 0c             	sub    esp,0xc
c001625b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001625f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016263:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016267:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001626b:	fa                   	cli    
c001626c:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0016272:	80 3d c5 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291c5,0x0
c0016279:	75 15                	jne    c0016290 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001627b:	e8 50 f2 ff ff       	call   c00154d0 <schedule()>
c0016280:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016285:	48                   	dec    eax
c0016286:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001628b:	75 de                	jne    c001626b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001628d:	fb                   	sti    
c001628e:	eb db                	jmp    c001626b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016290:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016295:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c001629f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00162a3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00162a7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00162ab:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00162af:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00162b3:	0f b7 ff             	movzx  edi,di
c00162b6:	0f b7 f6             	movzx  esi,si
c00162b9:	50                   	push   eax
c00162ba:	6a 20                	push   0x20
c00162bc:	6a 00                	push   0x0
c00162be:	68 e0 91 02 c0       	push   0xc00291e0
c00162c3:	e8 28 a2 fe ff       	call   c00004f0 <memset>
c00162c8:	5a                   	pop    edx
c00162c9:	59                   	pop    ecx
c00162ca:	57                   	push   edi
c00162cb:	56                   	push   esi
c00162cc:	e8 2d fe ff ff       	call   c00160fe <Vm::realToLinear(unsigned short, unsigned short)>
c00162d1:	83 c4 10             	add    esp,0x10
c00162d4:	89 c7                	mov    edi,eax
c00162d6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00162da:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00162de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00162e0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00162e5:	c6 05 c5 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c5,0x0
c00162ec:	48                   	dec    eax
c00162ed:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00162f2:	75 01                	jne    c00162f5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00162f4:	fb                   	sti    
c00162f5:	83 ec 0c             	sub    esp,0xc
c00162f8:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c00162fe:	e8 e5 f6 ff ff       	call   c00159e8 <unblockTask(ThreadControlBlock*)>
c0016303:	83 c4 1c             	add    esp,0x1c
c0016306:	b0 01                	mov    al,0x1
c0016308:	5b                   	pop    ebx
c0016309:	5e                   	pop    esi
c001630a:	5f                   	pop    edi
c001630b:	5d                   	pop    ebp
c001630c:	c3                   	ret    

c001630d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001630d:	55                   	push   ebp
c001630e:	57                   	push   edi
c001630f:	56                   	push   esi
c0016310:	53                   	push   ebx
c0016311:	83 ec 34             	sub    esp,0x34
c0016314:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016318:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001631c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016320:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016324:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016328:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001632c:	68 64 1c 02 c0       	push   0xc0021c64
c0016331:	e8 03 46 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016336:	83 c4 10             	add    esp,0x10
c0016339:	fa                   	cli    
c001633a:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0016340:	8a 1d c5 91 02 c0    	mov    bl,BYTE PTR ds:0xc00291c5
c0016346:	84 db                	test   bl,bl
c0016348:	75 15                	jne    c001635f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c001634a:	e8 81 f1 ff ff       	call   c00154d0 <schedule()>
c001634f:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016354:	48                   	dec    eax
c0016355:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001635a:	75 dd                	jne    c0016339 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001635c:	fb                   	sti    
c001635d:	eb da                	jmp    c0016339 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001635f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016363:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016368:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c0016372:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016376:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001637a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001637e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016382:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016386:	50                   	push   eax
c0016387:	6a 20                	push   0x20
c0016389:	6a 00                	push   0x0
c001638b:	68 e0 91 02 c0       	push   0xc00291e0
c0016390:	e8 5b a1 fe ff       	call   c00004f0 <memset>
c0016395:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001639c:	e8 0d 17 ff ff       	call   c0007aae <malloc>
c00163a1:	83 c4 0c             	add    esp,0xc
c00163a4:	89 c5                	mov    ebp,eax
c00163a6:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00163ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163b0:	50                   	push   eax
c00163b1:	e8 da 4d ff ff       	call   c000b190 <File::File(char const*, Process*)>
c00163b6:	83 c4 10             	add    esp,0x10
c00163b9:	85 ed                	test   ebp,ebp
c00163bb:	75 0a                	jne    c00163c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00163bd:	83 ec 0c             	sub    esp,0xc
c00163c0:	68 86 1c 02 c0       	push   0xc0021c86
c00163c5:	eb 2b                	jmp    c00163f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00163c7:	50                   	push   eax
c00163c8:	8d 44 24 17          	lea    eax,[esp+0x17]
c00163cc:	50                   	push   eax
c00163cd:	8d 44 24 20          	lea    eax,[esp+0x20]
c00163d1:	50                   	push   eax
c00163d2:	55                   	push   ebp
c00163d3:	e8 76 51 ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c00163d8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00163dc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00163e0:	83 c4 10             	add    esp,0x10
c00163e3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00163e8:	74 27                	je     c0016411 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00163ea:	83 ec 0c             	sub    esp,0xc
c00163ed:	68 9a 1c 02 c0       	push   0xc0021c9a
c00163f2:	e8 1a a8 ff ff       	call   c0010c11 <KePanic(char const*)>
c00163f7:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00163fc:	83 c4 10             	add    esp,0x10
c00163ff:	48                   	dec    eax
c0016400:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016405:	85 c0                	test   eax,eax
c0016407:	75 01                	jne    c001640a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016409:	fb                   	sti    
c001640a:	31 db                	xor    ebx,ebx
c001640c:	e9 90 00 00 00       	jmp    c00164a1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016411:	51                   	push   ecx
c0016412:	51                   	push   ecx
c0016413:	6a 01                	push   0x1
c0016415:	55                   	push   ebp
c0016416:	e8 31 4e ff ff       	call   c000b24c <File::open(FileOpenMode)>
c001641b:	83 c4 10             	add    esp,0x10
c001641e:	85 c0                	test   eax,eax
c0016420:	74 26                	je     c0016448 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016422:	83 ec 0c             	sub    esp,0xc
c0016425:	68 b3 1c 02 c0       	push   0xc0021cb3
c001642a:	e8 e2 a7 ff ff       	call   c0010c11 <KePanic(char const*)>
c001642f:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016434:	83 c4 10             	add    esp,0x10
c0016437:	48                   	dec    eax
c0016438:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001643d:	85 c0                	test   eax,eax
c001643f:	75 c9                	jne    c001640a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016441:	fb                   	sti    
c0016442:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016446:	eb 59                	jmp    c00164a1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016448:	0f b7 ff             	movzx  edi,di
c001644b:	50                   	push   eax
c001644c:	0f b7 f6             	movzx  esi,si
c001644f:	50                   	push   eax
c0016450:	57                   	push   edi
c0016451:	56                   	push   esi
c0016452:	e8 a7 fc ff ff       	call   c00160fe <Vm::realToLinear(unsigned short, unsigned short)>
c0016457:	5a                   	pop    edx
c0016458:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001645b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001645f:	51                   	push   ecx
c0016460:	50                   	push   eax
c0016461:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016465:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016469:	55                   	push   ebp
c001646a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001646d:	83 c4 14             	add    esp,0x14
c0016470:	55                   	push   ebp
c0016471:	e8 34 4e ff ff       	call   c000b2aa <File::close()>
c0016476:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001647b:	83 c4 10             	add    esp,0x10
c001647e:	48                   	dec    eax
c001647f:	c6 05 c5 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c5,0x0
c0016486:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001648b:	85 c0                	test   eax,eax
c001648d:	75 01                	jne    c0016490 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001648f:	fb                   	sti    
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c0016499:	e8 4a f5 ff ff       	call   c00159e8 <unblockTask(ThreadControlBlock*)>
c001649e:	83 c4 10             	add    esp,0x10
c00164a1:	83 c4 2c             	add    esp,0x2c
c00164a4:	88 d8                	mov    al,bl
c00164a6:	5b                   	pop    ebx
c00164a7:	5e                   	pop    esi
c00164a8:	5f                   	pop    edi
c00164a9:	5d                   	pop    ebp
c00164aa:	c3                   	ret    

c00164ab <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00164ab:	57                   	push   edi
c00164ac:	56                   	push   esi
c00164ad:	53                   	push   ebx
c00164ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00164ba:	83 e8 06             	sub    eax,0x6
c00164bd:	0f b7 c0             	movzx  eax,ax
c00164c0:	50                   	push   eax
c00164c1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00164c6:	50                   	push   eax
c00164c7:	e8 32 fc ff ff       	call   c00160fe <Vm::realToLinear(unsigned short, unsigned short)>
c00164cc:	5a                   	pop    edx
c00164cd:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00164d0:	59                   	pop    ecx
c00164d1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00164d4:	8d 51 fa             	lea    edx,[ecx-0x6]
c00164d7:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164dd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00164e0:	8d 56 02             	lea    edx,[esi+0x2]
c00164e3:	66 89 10             	mov    WORD PTR [eax],dx
c00164e6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00164ea:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00164ee:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00164f1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00164f5:	0f b6 f1             	movzx  esi,cl
c00164f8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00164fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016502:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016506:	0f b6 d5             	movzx  edx,ch
c0016509:	74 0a                	je     c0016515 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c001650b:	c1 e2 08             	shl    edx,0x8
c001650e:	09 f2                	or     edx,esi
c0016510:	80 ce 02             	or     dh,0x2
c0016513:	eb 08                	jmp    c001651d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016515:	c1 e2 08             	shl    edx,0x8
c0016518:	09 f2                	or     edx,esi
c001651a:	80 e6 fd             	and    dh,0xfd
c001651d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016521:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016526:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001652a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016532:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016535:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c001653d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016540:	5b                   	pop    ebx
c0016541:	5e                   	pop    esi
c0016542:	5f                   	pop    edi
c0016543:	c3                   	ret    

c0016544 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016544:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016549:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001654e:	c1 e0 04             	shl    eax,0x4
c0016551:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016554:	c3                   	ret    

c0016555 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016555:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001655a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001655f:	c1 e0 04             	shl    eax,0x4
c0016562:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016566:	c3                   	ret    

c0016567 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016567:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001656c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016571:	c1 e0 04             	shl    eax,0x4
c0016574:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016577:	c3                   	ret    

c0016578 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016578:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001657d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016582:	c1 e0 04             	shl    eax,0x4
c0016585:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016589:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001658c:	c3                   	ret    

c001658d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001658d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016592:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016597:	c1 e0 04             	shl    eax,0x4
c001659a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001659e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00165a2:	c3                   	ret    

c00165a3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00165a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00165a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00165ad:	c1 e0 04             	shl    eax,0x4
c00165b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165b4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00165b7:	c3                   	ret    

c00165b8 <Vm::faultHandler(regs*)>:
c00165b8:	55                   	push   ebp
c00165b9:	57                   	push   edi
c00165ba:	56                   	push   esi
c00165bb:	53                   	push   ebx
c00165bc:	83 ec 2c             	sub    esp,0x2c
c00165bf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00165c3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165c6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00165ca:	0f b7 f8             	movzx  edi,ax
c00165cd:	52                   	push   edx
c00165ce:	0f b7 c0             	movzx  eax,ax
c00165d1:	50                   	push   eax
c00165d2:	e8 27 fb ff ff       	call   c00160fe <Vm::realToLinear(unsigned short, unsigned short)>
c00165d7:	5a                   	pop    edx
c00165d8:	59                   	pop    ecx
c00165d9:	89 c1                	mov    ecx,eax
c00165db:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00165de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165e2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00165e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00165eb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00165ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165f2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00165f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00165fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016603:	e8 f6 fa ff ff       	call   c00160fe <Vm::realToLinear(unsigned short, unsigned short)>
c0016608:	5e                   	pop    esi
c0016609:	be 06 00 00 00       	mov    esi,0x6
c001660e:	5d                   	pop    ebp
c001660f:	31 ed                	xor    ebp,ebp
c0016611:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016616:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016619:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001661f:	0f 84 74 02 00 00    	je     c0016899 <Vm::faultHandler(regs*)+0x2e1>
c0016625:	0f 87 94 00 00 00    	ja     c00166bf <Vm::faultHandler(regs*)+0x107>
c001662b:	83 fa 66             	cmp    edx,0x66
c001662e:	0f 84 e2 01 00 00    	je     c0016816 <Vm::faultHandler(regs*)+0x25e>
c0016634:	77 47                	ja     c001667d <Vm::faultHandler(regs*)+0xc5>
c0016636:	83 fa 36             	cmp    edx,0x36
c0016639:	0f 84 ca 01 00 00    	je     c0016809 <Vm::faultHandler(regs*)+0x251>
c001663f:	77 1a                	ja     c001665b <Vm::faultHandler(regs*)+0xa3>
c0016641:	83 fa 26             	cmp    edx,0x26
c0016644:	0f 84 98 01 00 00    	je     c00167e2 <Vm::faultHandler(regs*)+0x22a>
c001664a:	83 fa 2e             	cmp    edx,0x2e
c001664d:	0f 85 21 06 00 00    	jne    c0016c74 <Vm::faultHandler(regs*)+0x6bc>
c0016653:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016656:	31 f6                	xor    esi,esi
c0016658:	41                   	inc    ecx
c0016659:	eb bb                	jmp    c0016616 <Vm::faultHandler(regs*)+0x5e>
c001665b:	83 fa 64             	cmp    edx,0x64
c001665e:	0f 84 8b 01 00 00    	je     c00167ef <Vm::faultHandler(regs*)+0x237>
c0016664:	0f 87 92 01 00 00    	ja     c00167fc <Vm::faultHandler(regs*)+0x244>
c001666a:	83 fa 3e             	cmp    edx,0x3e
c001666d:	0f 85 01 06 00 00    	jne    c0016c74 <Vm::faultHandler(regs*)+0x6bc>
c0016673:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016676:	be 01 00 00 00       	mov    esi,0x1
c001667b:	eb db                	jmp    c0016658 <Vm::faultHandler(regs*)+0xa0>
c001667d:	83 fa 6d             	cmp    edx,0x6d
c0016680:	0f 84 34 03 00 00    	je     c00169ba <Vm::faultHandler(regs*)+0x402>
c0016686:	77 17                	ja     c001669f <Vm::faultHandler(regs*)+0xe7>
c0016688:	83 fa 67             	cmp    edx,0x67
c001668b:	0f 84 92 01 00 00    	je     c0016823 <Vm::faultHandler(regs*)+0x26b>
c0016691:	83 fa 6c             	cmp    edx,0x6c
c0016694:	0f 84 b1 02 00 00    	je     c001694b <Vm::faultHandler(regs*)+0x393>
c001669a:	e9 d5 05 00 00       	jmp    c0016c74 <Vm::faultHandler(regs*)+0x6bc>
c001669f:	83 fa 6f             	cmp    edx,0x6f
c00166a2:	0f 84 3d 04 00 00    	je     c0016ae5 <Vm::faultHandler(regs*)+0x52d>
c00166a8:	0f 82 9f 03 00 00    	jb     c0016a4d <Vm::faultHandler(regs*)+0x495>
c00166ae:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00166b4:	0f 84 76 01 00 00    	je     c0016830 <Vm::faultHandler(regs*)+0x278>
c00166ba:	e9 b5 05 00 00       	jmp    c0016c74 <Vm::faultHandler(regs*)+0x6bc>
c00166bf:	81 fa ec 00 00 00    	cmp    edx,0xec
c00166c5:	0f 84 51 05 00 00    	je     c0016c1c <Vm::faultHandler(regs*)+0x664>
c00166cb:	0f 87 a9 00 00 00    	ja     c001677a <Vm::faultHandler(regs*)+0x1c2>
c00166d1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00166d7:	0f 84 d0 04 00 00    	je     c0016bad <Vm::faultHandler(regs*)+0x5f5>
c00166dd:	77 78                	ja     c0016757 <Vm::faultHandler(regs*)+0x19f>
c00166df:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00166e5:	0f 84 0e 02 00 00    	je     c00168f9 <Vm::faultHandler(regs*)+0x341>
c00166eb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00166f1:	0f 85 7d 05 00 00    	jne    c0016c74 <Vm::faultHandler(regs*)+0x6bc>
c00166f7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00166fb:	89 d1                	mov    ecx,edx
c00166fd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016700:	c1 e1 08             	shl    ecx,0x8
c0016703:	09 ca                	or     edx,ecx
c0016705:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016708:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001670c:	89 d1                	mov    ecx,edx
c001670e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016712:	c1 e1 08             	shl    ecx,0x8
c0016715:	09 ca                	or     edx,ecx
c0016717:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001671a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001671e:	89 d1                	mov    ecx,edx
c0016720:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016724:	c1 e1 08             	shl    ecx,0x8
c0016727:	09 ca                	or     edx,ecx
c0016729:	81 ca 00 02 02 00    	or     edx,0x20200
c001672f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016732:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016736:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001673c:	d1 e8                	shr    eax,1
c001673e:	83 e0 01             	and    eax,0x1
c0016741:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016744:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016747:	83 c0 06             	add    eax,0x6
c001674a:	25 ff ff 00 00       	and    eax,0xffff
c001674f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016752:	e9 19 05 00 00       	jmp    c0016c70 <Vm::faultHandler(regs*)+0x6b8>
c0016757:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001675d:	0f 84 8f 04 00 00    	je     c0016bf2 <Vm::faultHandler(regs*)+0x63a>
c0016763:	0f 82 60 04 00 00    	jb     c0016bc9 <Vm::faultHandler(regs*)+0x611>
c0016769:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001676f:	0f 84 94 04 00 00    	je     c0016c09 <Vm::faultHandler(regs*)+0x651>
c0016775:	e9 fa 04 00 00       	jmp    c0016c74 <Vm::faultHandler(regs*)+0x6bc>
c001677a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016780:	0f 84 d7 04 00 00    	je     c0016c5d <Vm::faultHandler(regs*)+0x6a5>
c0016786:	77 2e                	ja     c00167b6 <Vm::faultHandler(regs*)+0x1fe>
c0016788:	81 fa ed 00 00 00    	cmp    edx,0xed
c001678e:	0f 84 a4 04 00 00    	je     c0016c38 <Vm::faultHandler(regs*)+0x680>
c0016794:	81 fa ee 00 00 00    	cmp    edx,0xee
c001679a:	0f 85 d4 04 00 00    	jne    c0016c74 <Vm::faultHandler(regs*)+0x6bc>
c00167a0:	50                   	push   eax
c00167a1:	50                   	push   eax
c00167a2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00167a6:	50                   	push   eax
c00167a7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167ab:	50                   	push   eax
c00167ac:	e8 17 f9 ff ff       	call   c00160c8 <Vm::outbv(unsigned short, unsigned char)>
c00167b1:	e9 9f 04 00 00       	jmp    c0016c55 <Vm::faultHandler(regs*)+0x69d>
c00167b6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00167bc:	0f 84 6d 01 00 00    	je     c001692f <Vm::faultHandler(regs*)+0x377>
c00167c2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00167c8:	0f 84 6f 01 00 00    	je     c001693d <Vm::faultHandler(regs*)+0x385>
c00167ce:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00167d4:	0f 85 9a 04 00 00    	jne    c0016c74 <Vm::faultHandler(regs*)+0x6bc>
c00167da:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167dd:	e9 76 fe ff ff       	jmp    c0016658 <Vm::faultHandler(regs*)+0xa0>
c00167e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167e5:	be 02 00 00 00       	mov    esi,0x2
c00167ea:	e9 69 fe ff ff       	jmp    c0016658 <Vm::faultHandler(regs*)+0xa0>
c00167ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167f2:	be 03 00 00 00       	mov    esi,0x3
c00167f7:	e9 5c fe ff ff       	jmp    c0016658 <Vm::faultHandler(regs*)+0xa0>
c00167fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00167ff:	be 04 00 00 00       	mov    esi,0x4
c0016804:	e9 4f fe ff ff       	jmp    c0016658 <Vm::faultHandler(regs*)+0xa0>
c0016809:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001680c:	be 05 00 00 00       	mov    esi,0x5
c0016811:	e9 42 fe ff ff       	jmp    c0016658 <Vm::faultHandler(regs*)+0xa0>
c0016816:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016819:	bd 01 00 00 00       	mov    ebp,0x1
c001681e:	e9 35 fe ff ff       	jmp    c0016658 <Vm::faultHandler(regs*)+0xa0>
c0016823:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016826:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001682b:	e9 28 fe ff ff       	jmp    c0016658 <Vm::faultHandler(regs*)+0xa0>
c0016830:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016833:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016837:	83 e5 01             	and    ebp,0x1
c001683a:	74 30                	je     c001686c <Vm::faultHandler(regs*)+0x2b4>
c001683c:	83 e9 04             	sub    ecx,0x4
c001683f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016845:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001684b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001684e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016851:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016857:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001685b:	0f 84 0c 04 00 00    	je     c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c0016861:	80 ce 02             	or     dh,0x2
c0016864:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016867:	e9 01 04 00 00       	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c001686c:	83 e9 02             	sub    ecx,0x2
c001686f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016875:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016878:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001687c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016882:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016886:	74 05                	je     c001688d <Vm::faultHandler(regs*)+0x2d5>
c0016888:	80 ce 02             	or     dh,0x2
c001688b:	eb 03                	jmp    c0016890 <Vm::faultHandler(regs*)+0x2d8>
c001688d:	80 e6 fd             	and    dh,0xfd
c0016890:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016894:	e9 d4 03 00 00       	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c0016899:	83 e5 01             	and    ebp,0x1
c001689c:	74 2a                	je     c00168c8 <Vm::faultHandler(regs*)+0x310>
c001689e:	8b 10                	mov    edx,DWORD PTR [eax]
c00168a0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00168a6:	81 ca 00 02 02 00    	or     edx,0x20200
c00168ac:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00168af:	8b 00                	mov    eax,DWORD PTR [eax]
c00168b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168b7:	c1 e8 09             	shr    eax,0x9
c00168ba:	83 e0 01             	and    eax,0x1
c00168bd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00168c0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00168c3:	83 c0 04             	add    eax,0x4
c00168c6:	eb 24                	jmp    c00168ec <Vm::faultHandler(regs*)+0x334>
c00168c8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00168cb:	81 ca 00 02 02 00    	or     edx,0x20200
c00168d1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00168d4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00168d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168dd:	c1 e8 09             	shr    eax,0x9
c00168e0:	83 e0 01             	and    eax,0x1
c00168e3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00168e6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00168e9:	83 c0 02             	add    eax,0x2
c00168ec:	25 ff ff 00 00       	and    eax,0xffff
c00168f1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00168f4:	e9 74 03 00 00       	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c00168f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168fd:	3d ee 00 00 00       	cmp    eax,0xee
c0016902:	75 10                	jne    c0016914 <Vm::faultHandler(regs*)+0x35c>
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001690a:	e8 56 f8 ff ff       	call   c0016165 <Vm::mainloop3(unsigned long)>
c001690f:	e9 44 03 00 00       	jmp    c0016c58 <Vm::faultHandler(regs*)+0x6a0>
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001691b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001691f:	51                   	push   ecx
c0016920:	50                   	push   eax
c0016921:	53                   	push   ebx
c0016922:	e8 84 fb ff ff       	call   c00164ab <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016927:	83 c4 20             	add    esp,0x20
c001692a:	e9 41 03 00 00       	jmp    c0016c70 <Vm::faultHandler(regs*)+0x6b8>
c001692f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016934:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016938:	e9 30 03 00 00       	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c001693d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016942:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016946:	e9 22 03 00 00       	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c001694b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001694e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016953:	74 2b                	je     c0016980 <Vm::faultHandler(regs*)+0x3c8>
c0016955:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001695c:	76 22                	jbe    c0016980 <Vm::faultHandler(regs*)+0x3c8>
c001695e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016962:	50                   	push   eax
c0016963:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016967:	50                   	push   eax
c0016968:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001696c:	50                   	push   eax
c001696d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016971:	50                   	push   eax
c0016972:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016976:	50                   	push   eax
c0016977:	6a 6c                	push   0x6c
c0016979:	6a 6c                	push   0x6c
c001697b:	e9 bd 01 00 00       	jmp    c0016b3d <Vm::faultHandler(regs*)+0x585>
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016987:	0f b7 f6             	movzx  esi,si
c001698a:	50                   	push   eax
c001698b:	e8 25 f7 ff ff       	call   c00160b5 <Vm::inbv(unsigned short)>
c0016990:	83 c4 0c             	add    esp,0xc
c0016993:	0f b6 c0             	movzx  eax,al
c0016996:	50                   	push   eax
c0016997:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001699b:	50                   	push   eax
c001699c:	56                   	push   esi
c001699d:	e8 d6 fb ff ff       	call   c0016578 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00169a2:	83 c4 10             	add    esp,0x10
c00169a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00169a8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00169ac:	74 03                	je     c00169b1 <Vm::faultHandler(regs*)+0x3f9>
c00169ae:	48                   	dec    eax
c00169af:	eb 01                	jmp    c00169b2 <Vm::faultHandler(regs*)+0x3fa>
c00169b1:	40                   	inc    eax
c00169b2:	0f b7 c0             	movzx  eax,ax
c00169b5:	e9 8b 00 00 00       	jmp    c0016a45 <Vm::faultHandler(regs*)+0x48d>
c00169ba:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00169bd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00169c0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00169c5:	74 29                	je     c00169f0 <Vm::faultHandler(regs*)+0x438>
c00169c7:	3d ff ff 00 00       	cmp    eax,0xffff
c00169cc:	76 22                	jbe    c00169f0 <Vm::faultHandler(regs*)+0x438>
c00169ce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00169d2:	50                   	push   eax
c00169d3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169d7:	50                   	push   eax
c00169d8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169dc:	50                   	push   eax
c00169dd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169e1:	50                   	push   eax
c00169e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169e6:	50                   	push   eax
c00169e7:	6a 6d                	push   0x6d
c00169e9:	6a 6d                	push   0x6d
c00169eb:	e9 4d 01 00 00       	jmp    c0016b3d <Vm::faultHandler(regs*)+0x585>
c00169f0:	0f b7 c8             	movzx  ecx,ax
c00169f3:	0f b7 f6             	movzx  esi,si
c00169f6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00169f9:	83 e5 01             	and    ebp,0x1
c00169fc:	74 20                	je     c0016a1e <Vm::faultHandler(regs*)+0x466>
c00169fe:	ed                   	in     eax,dx
c00169ff:	55                   	push   ebp
c0016a00:	50                   	push   eax
c0016a01:	51                   	push   ecx
c0016a02:	56                   	push   esi
c0016a03:	e8 9b fb ff ff       	call   c00165a3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016a08:	83 c4 10             	add    esp,0x10
c0016a0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a0e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a12:	74 05                	je     c0016a19 <Vm::faultHandler(regs*)+0x461>
c0016a14:	83 e8 04             	sub    eax,0x4
c0016a17:	eb 27                	jmp    c0016a40 <Vm::faultHandler(regs*)+0x488>
c0016a19:	83 c0 04             	add    eax,0x4
c0016a1c:	eb 22                	jmp    c0016a40 <Vm::faultHandler(regs*)+0x488>
c0016a1e:	66 ed                	in     ax,dx
c0016a20:	0f b7 c0             	movzx  eax,ax
c0016a23:	57                   	push   edi
c0016a24:	50                   	push   eax
c0016a25:	51                   	push   ecx
c0016a26:	56                   	push   esi
c0016a27:	e8 61 fb ff ff       	call   c001658d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016a2c:	83 c4 10             	add    esp,0x10
c0016a2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a32:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a36:	74 05                	je     c0016a3d <Vm::faultHandler(regs*)+0x485>
c0016a38:	83 e8 02             	sub    eax,0x2
c0016a3b:	eb 03                	jmp    c0016a40 <Vm::faultHandler(regs*)+0x488>
c0016a3d:	83 c0 02             	add    eax,0x2
c0016a40:	25 ff ff 00 00       	and    eax,0xffff
c0016a45:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016a48:	e9 20 02 00 00       	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c0016a4d:	8d 46 ff             	lea    eax,[esi-0x1]
c0016a50:	0f b6 f0             	movzx  esi,al
c0016a53:	83 fe 05             	cmp    esi,0x5
c0016a56:	77 23                	ja     c0016a7b <Vm::faultHandler(regs*)+0x4c3>
c0016a58:	ff 24 b5 28 1d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde2d8]
c0016a5f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016a64:	eb 15                	jmp    c0016a7b <Vm::faultHandler(regs*)+0x4c3>
c0016a66:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016a6a:	eb 0f                	jmp    c0016a7b <Vm::faultHandler(regs*)+0x4c3>
c0016a6c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016a70:	eb 09                	jmp    c0016a7b <Vm::faultHandler(regs*)+0x4c3>
c0016a72:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016a76:	eb 03                	jmp    c0016a7b <Vm::faultHandler(regs*)+0x4c3>
c0016a78:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016a7b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016a7e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016a83:	74 29                	je     c0016aae <Vm::faultHandler(regs*)+0x4f6>
c0016a85:	3d ff ff 00 00       	cmp    eax,0xffff
c0016a8a:	76 22                	jbe    c0016aae <Vm::faultHandler(regs*)+0x4f6>
c0016a8c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a90:	50                   	push   eax
c0016a91:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a95:	50                   	push   eax
c0016a96:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a9a:	50                   	push   eax
c0016a9b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a9f:	50                   	push   eax
c0016aa0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016aa4:	50                   	push   eax
c0016aa5:	6a 6e                	push   0x6e
c0016aa7:	6a 6e                	push   0x6e
c0016aa9:	e9 8f 00 00 00       	jmp    c0016b3d <Vm::faultHandler(regs*)+0x585>
c0016aae:	0f b7 c0             	movzx  eax,ax
c0016ab1:	52                   	push   edx
c0016ab2:	52                   	push   edx
c0016ab3:	50                   	push   eax
c0016ab4:	57                   	push   edi
c0016ab5:	e8 8a fa ff ff       	call   c0016544 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016aba:	59                   	pop    ecx
c0016abb:	0f b6 c0             	movzx  eax,al
c0016abe:	5e                   	pop    esi
c0016abf:	50                   	push   eax
c0016ac0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ac4:	50                   	push   eax
c0016ac5:	e8 fe f5 ff ff       	call   c00160c8 <Vm::outbv(unsigned short, unsigned char)>
c0016aca:	83 c4 10             	add    esp,0x10
c0016acd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016ad0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016ad4:	74 03                	je     c0016ad9 <Vm::faultHandler(regs*)+0x521>
c0016ad6:	48                   	dec    eax
c0016ad7:	eb 01                	jmp    c0016ada <Vm::faultHandler(regs*)+0x522>
c0016ad9:	40                   	inc    eax
c0016ada:	0f b7 c0             	movzx  eax,ax
c0016add:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016ae0:	e9 88 01 00 00       	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c0016ae5:	8d 46 ff             	lea    eax,[esi-0x1]
c0016ae8:	0f b6 f0             	movzx  esi,al
c0016aeb:	83 fe 05             	cmp    esi,0x5
c0016aee:	77 1e                	ja     c0016b0e <Vm::faultHandler(regs*)+0x556>
c0016af0:	ff 24 b5 40 1d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde2c0]
c0016af7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016afb:	eb 11                	jmp    c0016b0e <Vm::faultHandler(regs*)+0x556>
c0016afd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016b00:	eb 0c                	jmp    c0016b0e <Vm::faultHandler(regs*)+0x556>
c0016b02:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016b05:	eb 07                	jmp    c0016b0e <Vm::faultHandler(regs*)+0x556>
c0016b07:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016b0a:	eb 02                	jmp    c0016b0e <Vm::faultHandler(regs*)+0x556>
c0016b0c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016b0e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016b11:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016b16:	74 37                	je     c0016b4f <Vm::faultHandler(regs*)+0x597>
c0016b18:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016b1e:	76 2f                	jbe    c0016b4f <Vm::faultHandler(regs*)+0x597>
c0016b20:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b24:	50                   	push   eax
c0016b25:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b29:	50                   	push   eax
c0016b2a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b2e:	50                   	push   eax
c0016b2f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b33:	50                   	push   eax
c0016b34:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b38:	50                   	push   eax
c0016b39:	6a 6f                	push   0x6f
c0016b3b:	6a 6f                	push   0x6f
c0016b3d:	68 cc 1c 02 c0       	push   0xc0021ccc
c0016b42:	e8 f2 3d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016b47:	83 c4 20             	add    esp,0x20
c0016b4a:	e9 83 01 00 00       	jmp    c0016cd2 <Vm::faultHandler(regs*)+0x71a>
c0016b4f:	0f b7 d7             	movzx  edx,di
c0016b52:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016b55:	0f b7 c6             	movzx  eax,si
c0016b58:	81 e1 00 04 00 00    	and    ecx,0x400
c0016b5e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016b61:	83 e5 01             	and    ebp,0x1
c0016b64:	74 1d                	je     c0016b83 <Vm::faultHandler(regs*)+0x5cb>
c0016b66:	55                   	push   ebp
c0016b67:	55                   	push   ebp
c0016b68:	50                   	push   eax
c0016b69:	52                   	push   edx
c0016b6a:	e8 f8 f9 ff ff       	call   c0016567 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016b6f:	83 c4 10             	add    esp,0x10
c0016b72:	89 fa                	mov    edx,edi
c0016b74:	ef                   	out    dx,eax
c0016b75:	85 c9                	test   ecx,ecx
c0016b77:	74 05                	je     c0016b7e <Vm::faultHandler(regs*)+0x5c6>
c0016b79:	83 ee 04             	sub    esi,0x4
c0016b7c:	eb 21                	jmp    c0016b9f <Vm::faultHandler(regs*)+0x5e7>
c0016b7e:	83 c6 04             	add    esi,0x4
c0016b81:	eb 1c                	jmp    c0016b9f <Vm::faultHandler(regs*)+0x5e7>
c0016b83:	55                   	push   ebp
c0016b84:	55                   	push   ebp
c0016b85:	50                   	push   eax
c0016b86:	52                   	push   edx
c0016b87:	e8 c9 f9 ff ff       	call   c0016555 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016b8c:	83 c4 10             	add    esp,0x10
c0016b8f:	89 fa                	mov    edx,edi
c0016b91:	66 ef                	out    dx,ax
c0016b93:	85 c9                	test   ecx,ecx
c0016b95:	74 05                	je     c0016b9c <Vm::faultHandler(regs*)+0x5e4>
c0016b97:	83 ee 02             	sub    esi,0x2
c0016b9a:	eb 03                	jmp    c0016b9f <Vm::faultHandler(regs*)+0x5e7>
c0016b9c:	83 c6 02             	add    esi,0x2
c0016b9f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016ba5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016ba8:	e9 c0 00 00 00       	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c0016bad:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016bb4:	83 ec 0c             	sub    esp,0xc
c0016bb7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016bbb:	50                   	push   eax
c0016bbc:	e8 f4 f4 ff ff       	call   c00160b5 <Vm::inbv(unsigned short)>
c0016bc1:	0f b6 c0             	movzx  eax,al
c0016bc4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016bc7:	eb 3a                	jmp    c0016c03 <Vm::faultHandler(regs*)+0x64b>
c0016bc9:	83 e5 01             	and    ebp,0x1
c0016bcc:	74 07                	je     c0016bd5 <Vm::faultHandler(regs*)+0x61d>
c0016bce:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016bd2:	ed                   	in     eax,dx
c0016bd3:	eb 14                	jmp    c0016be9 <Vm::faultHandler(regs*)+0x631>
c0016bd5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016bd8:	66 31 f6             	xor    si,si
c0016bdb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016bde:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016be2:	66 ed                	in     ax,dx
c0016be4:	0f b7 c0             	movzx  eax,ax
c0016be7:	09 f0                	or     eax,esi
c0016be9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016bec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016bf0:	eb 7e                	jmp    c0016c70 <Vm::faultHandler(regs*)+0x6b8>
c0016bf2:	52                   	push   edx
c0016bf3:	52                   	push   edx
c0016bf4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016bf8:	50                   	push   eax
c0016bf9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016bfd:	50                   	push   eax
c0016bfe:	e8 c5 f4 ff ff       	call   c00160c8 <Vm::outbv(unsigned short, unsigned char)>
c0016c03:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016c07:	eb 4f                	jmp    c0016c58 <Vm::faultHandler(regs*)+0x6a0>
c0016c09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016c0c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016c10:	83 e5 01             	and    ebp,0x1
c0016c13:	74 03                	je     c0016c18 <Vm::faultHandler(regs*)+0x660>
c0016c15:	ef                   	out    dx,eax
c0016c16:	eb d4                	jmp    c0016bec <Vm::faultHandler(regs*)+0x634>
c0016c18:	66 ef                	out    dx,ax
c0016c1a:	eb d0                	jmp    c0016bec <Vm::faultHandler(regs*)+0x634>
c0016c1c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016c23:	83 ec 0c             	sub    esp,0xc
c0016c26:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016c2a:	50                   	push   eax
c0016c2b:	e8 85 f4 ff ff       	call   c00160b5 <Vm::inbv(unsigned short)>
c0016c30:	0f b6 c0             	movzx  eax,al
c0016c33:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016c36:	eb 1d                	jmp    c0016c55 <Vm::faultHandler(regs*)+0x69d>
c0016c38:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016c3b:	83 e5 01             	and    ebp,0x1
c0016c3e:	74 03                	je     c0016c43 <Vm::faultHandler(regs*)+0x68b>
c0016c40:	ed                   	in     eax,dx
c0016c41:	eb 0d                	jmp    c0016c50 <Vm::faultHandler(regs*)+0x698>
c0016c43:	66 ed                	in     ax,dx
c0016c45:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016c48:	0f b7 c0             	movzx  eax,ax
c0016c4b:	66 31 d2             	xor    dx,dx
c0016c4e:	09 d0                	or     eax,edx
c0016c50:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016c53:	eb 18                	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c0016c55:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c58:	83 c4 10             	add    esp,0x10
c0016c5b:	eb 13                	jmp    c0016c70 <Vm::faultHandler(regs*)+0x6b8>
c0016c5d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016c60:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016c63:	83 e5 01             	and    ebp,0x1
c0016c66:	74 03                	je     c0016c6b <Vm::faultHandler(regs*)+0x6b3>
c0016c68:	ef                   	out    dx,eax
c0016c69:	eb 02                	jmp    c0016c6d <Vm::faultHandler(regs*)+0x6b5>
c0016c6b:	66 ef                	out    dx,ax
c0016c6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c70:	b0 01                	mov    al,0x1
c0016c72:	eb 60                	jmp    c0016cd4 <Vm::faultHandler(regs*)+0x71c>
c0016c74:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016c78:	50                   	push   eax
c0016c79:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016c7d:	50                   	push   eax
c0016c7e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016c82:	50                   	push   eax
c0016c83:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016c87:	50                   	push   eax
c0016c88:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016c8c:	50                   	push   eax
c0016c8d:	52                   	push   edx
c0016c8e:	52                   	push   edx
c0016c8f:	68 f9 1c 02 c0       	push   0xc0021cf9
c0016c94:	e8 a0 3c ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016c99:	83 c4 20             	add    esp,0x20
c0016c9c:	83 ec 0c             	sub    esp,0xc
c0016c9f:	6a 60                	push   0x60
c0016ca1:	e8 0f f4 ff ff       	call   c00160b5 <Vm::inbv(unsigned short)>
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	0f b6 d0             	movzx  edx,al
c0016cac:	83 fa 1c             	cmp    edx,0x1c
c0016caf:	74 05                	je     c0016cb6 <Vm::faultHandler(regs*)+0x6fe>
c0016cb1:	83 fa 5a             	cmp    edx,0x5a
c0016cb4:	75 e6                	jne    c0016c9c <Vm::faultHandler(regs*)+0x6e4>
c0016cb6:	0f b6 c0             	movzx  eax,al
c0016cb9:	83 f8 1c             	cmp    eax,0x1c
c0016cbc:	74 05                	je     c0016cc3 <Vm::faultHandler(regs*)+0x70b>
c0016cbe:	83 f8 5a             	cmp    eax,0x5a
c0016cc1:	75 0f                	jne    c0016cd2 <Vm::faultHandler(regs*)+0x71a>
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	6a 60                	push   0x60
c0016cc8:	e8 e8 f3 ff ff       	call   c00160b5 <Vm::inbv(unsigned short)>
c0016ccd:	83 c4 10             	add    esp,0x10
c0016cd0:	eb e4                	jmp    c0016cb6 <Vm::faultHandler(regs*)+0x6fe>
c0016cd2:	31 c0                	xor    eax,eax
c0016cd4:	83 c4 2c             	add    esp,0x2c
c0016cd7:	5b                   	pop    ebx
c0016cd8:	5e                   	pop    esi
c0016cd9:	5f                   	pop    edi
c0016cda:	5d                   	pop    ebp
c0016cdb:	c3                   	ret    

c0016cdc <noCopro(unsigned long)>:
c0016cdc:	c3                   	ret    

c0016cdd <nmiHandler(regs*, void*)>:
c0016cdd:	83 ec 0c             	sub    esp,0xc
c0016ce0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016ce5:	83 ec 0c             	sub    esp,0xc
c0016ce8:	50                   	push   eax
c0016ce9:	e8 c0 05 ff ff       	call   c00072ae <Computer::handleNMI()>
c0016cee:	83 c4 10             	add    esp,0x10
c0016cf1:	90                   	nop
c0016cf2:	83 c4 0c             	add    esp,0xc
c0016cf5:	c3                   	ret    

c0016cf6 <doubleFault(regs*, void*)>:
c0016cf6:	55                   	push   ebp
c0016cf7:	89 e5                	mov    ebp,esp
c0016cf9:	83 ec 08             	sub    esp,0x8
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	68 58 1d 02 c0       	push   0xc0021d58
c0016d04:	e8 08 9f ff ff       	call   c0010c11 <KePanic(char const*)>
c0016d09:	83 c4 10             	add    esp,0x10
c0016d0c:	90                   	nop
c0016d0d:	c9                   	leave  
c0016d0e:	c3                   	ret    

c0016d0f <displayDebugInfo(regs*)>:
c0016d0f:	83 ec 1c             	sub    esp,0x1c
c0016d12:	0f 20 c0             	mov    eax,cr0
c0016d15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d19:	0f 20 d0             	mov    eax,cr2
c0016d1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d20:	0f 20 d8             	mov    eax,cr3
c0016d23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d27:	0f 20 e0             	mov    eax,cr4
c0016d2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d31:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d34:	83 ec 08             	sub    esp,0x8
c0016d37:	50                   	push   eax
c0016d38:	68 74 1d 02 c0       	push   0xc0021d74
c0016d3d:	e8 f7 3b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016d42:	83 c4 10             	add    esp,0x10
c0016d45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d49:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016d4c:	83 ec 08             	sub    esp,0x8
c0016d4f:	50                   	push   eax
c0016d50:	68 65 1d 02 c0       	push   0xc0021d65
c0016d55:	e8 df 3b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016d5a:	83 c4 10             	add    esp,0x10
c0016d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d61:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016d64:	83 ec 08             	sub    esp,0x8
c0016d67:	50                   	push   eax
c0016d68:	68 70 1d 02 c0       	push   0xc0021d70
c0016d6d:	e8 c7 3b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016d72:	83 c4 10             	add    esp,0x10
c0016d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d79:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d7c:	83 ec 08             	sub    esp,0x8
c0016d7f:	50                   	push   eax
c0016d80:	68 7f 1d 02 c0       	push   0xc0021d7f
c0016d85:	e8 af 3b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d91:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016d94:	83 ec 08             	sub    esp,0x8
c0016d97:	50                   	push   eax
c0016d98:	68 8a 1d 02 c0       	push   0xc0021d8a
c0016d9d:	e8 97 3b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016da2:	83 c4 10             	add    esp,0x10
c0016da5:	83 ec 08             	sub    esp,0x8
c0016da8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dac:	68 95 1d 02 c0       	push   0xc0021d95
c0016db1:	e8 83 3b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	83 ec 08             	sub    esp,0x8
c0016dbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016dc0:	68 a0 1d 02 c0       	push   0xc0021da0
c0016dc5:	e8 6f 3b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016dca:	83 c4 10             	add    esp,0x10
c0016dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dd1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016dd4:	c1 e0 05             	shl    eax,0x5
c0016dd7:	8d 90 20 2d 02 c0    	lea    edx,[eax-0x3ffdd2e0]
c0016ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016de1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016de4:	83 ec 04             	sub    esp,0x4
c0016de7:	52                   	push   edx
c0016de8:	50                   	push   eax
c0016de9:	68 ab 1d 02 c0       	push   0xc0021dab
c0016dee:	e8 46 3b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016dfb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e01:	83 ec 0c             	sub    esp,0xc
c0016e04:	50                   	push   eax
c0016e05:	e8 41 19 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c0016e0a:	83 c4 10             	add    esp,0x10
c0016e0d:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e18:	83 ec 08             	sub    esp,0x8
c0016e1b:	68 ba 1d 02 c0       	push   0xc0021dba
c0016e20:	50                   	push   eax
c0016e21:	e8 72 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e26:	83 c4 10             	add    esp,0x10
c0016e29:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e2e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e38:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016e3b:	83 ec 08             	sub    esp,0x8
c0016e3e:	52                   	push   edx
c0016e3f:	50                   	push   eax
c0016e40:	e8 0d 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016e45:	83 c4 10             	add    esp,0x10
c0016e48:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e53:	83 ec 08             	sub    esp,0x8
c0016e56:	68 c8 1d 02 c0       	push   0xc0021dc8
c0016e5b:	50                   	push   eax
c0016e5c:	e8 37 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e61:	83 c4 10             	add    esp,0x10
c0016e64:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e69:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e6f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016e74:	8b 12                	mov    edx,DWORD PTR [edx]
c0016e76:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016e79:	83 c2 0c             	add    edx,0xc
c0016e7c:	83 ec 08             	sub    esp,0x8
c0016e7f:	52                   	push   edx
c0016e80:	50                   	push   eax
c0016e81:	e8 12 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e86:	83 c4 10             	add    esp,0x10
c0016e89:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e94:	83 ec 08             	sub    esp,0x8
c0016e97:	68 d1 1d 02 c0       	push   0xc0021dd1
c0016e9c:	50                   	push   eax
c0016e9d:	e8 f6 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016ea2:	83 c4 10             	add    esp,0x10
c0016ea5:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016eaa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016eb0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016eb4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016eb7:	83 ec 08             	sub    esp,0x8
c0016eba:	52                   	push   edx
c0016ebb:	50                   	push   eax
c0016ebc:	e8 91 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016ec1:	83 c4 10             	add    esp,0x10
c0016ec4:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ec9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ecf:	83 ec 08             	sub    esp,0x8
c0016ed2:	68 d9 1d 02 c0       	push   0xc0021dd9
c0016ed7:	50                   	push   eax
c0016ed8:	e8 bb 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016edd:	83 c4 10             	add    esp,0x10
c0016ee0:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ee5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016eeb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016eef:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016ef2:	83 ec 08             	sub    esp,0x8
c0016ef5:	52                   	push   edx
c0016ef6:	50                   	push   eax
c0016ef7:	e8 56 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016efc:	83 c4 10             	add    esp,0x10
c0016eff:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f04:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f0a:	83 ec 08             	sub    esp,0x8
c0016f0d:	68 e1 1d 02 c0       	push   0xc0021de1
c0016f12:	50                   	push   eax
c0016f13:	e8 80 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f18:	83 c4 10             	add    esp,0x10
c0016f1b:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f2a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016f2d:	83 ec 08             	sub    esp,0x8
c0016f30:	52                   	push   edx
c0016f31:	50                   	push   eax
c0016f32:	e8 1b 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f37:	83 c4 10             	add    esp,0x10
c0016f3a:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f45:	83 ec 08             	sub    esp,0x8
c0016f48:	68 e9 1d 02 c0       	push   0xc0021de9
c0016f4d:	50                   	push   eax
c0016f4e:	e8 45 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f53:	83 c4 10             	add    esp,0x10
c0016f56:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f65:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016f68:	83 ec 08             	sub    esp,0x8
c0016f6b:	52                   	push   edx
c0016f6c:	50                   	push   eax
c0016f6d:	e8 e0 1a ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f72:	83 c4 10             	add    esp,0x10
c0016f75:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f80:	83 ec 08             	sub    esp,0x8
c0016f83:	68 f1 1d 02 c0       	push   0xc0021df1
c0016f88:	50                   	push   eax
c0016f89:	e8 0a 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f8e:	83 c4 10             	add    esp,0x10
c0016f91:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fa0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016fa3:	83 ec 08             	sub    esp,0x8
c0016fa6:	52                   	push   edx
c0016fa7:	50                   	push   eax
c0016fa8:	e8 a5 1a ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016fb5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fbb:	83 ec 08             	sub    esp,0x8
c0016fbe:	68 f9 1d 02 c0       	push   0xc0021df9
c0016fc3:	50                   	push   eax
c0016fc4:	e8 cf 1a ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016fd1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fdb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016fde:	83 ec 08             	sub    esp,0x8
c0016fe1:	52                   	push   edx
c0016fe2:	50                   	push   eax
c0016fe3:	e8 6a 1a ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016fe8:	83 c4 10             	add    esp,0x10
c0016feb:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ff0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ff6:	83 ec 08             	sub    esp,0x8
c0016ff9:	68 01 1e 02 c0       	push   0xc0021e01
c0016ffe:	50                   	push   eax
c0016fff:	e8 94 1a ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017004:	83 c4 10             	add    esp,0x10
c0017007:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c001700c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017012:	83 ec 08             	sub    esp,0x8
c0017015:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017019:	50                   	push   eax
c001701a:	e8 33 1a ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c001701f:	83 c4 10             	add    esp,0x10
c0017022:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0017027:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001702d:	83 ec 08             	sub    esp,0x8
c0017030:	68 0a 1e 02 c0       	push   0xc0021e0a
c0017035:	50                   	push   eax
c0017036:	e8 5d 1a ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0017043:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017049:	83 ec 08             	sub    esp,0x8
c001704c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017050:	50                   	push   eax
c0017051:	e8 fc 19 ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0017056:	83 c4 10             	add    esp,0x10
c0017059:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c001705e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017064:	83 ec 08             	sub    esp,0x8
c0017067:	68 12 1e 02 c0       	push   0xc0021e12
c001706c:	50                   	push   eax
c001706d:	e8 26 1a ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017072:	83 c4 10             	add    esp,0x10
c0017075:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c001707a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017080:	83 ec 08             	sub    esp,0x8
c0017083:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017087:	50                   	push   eax
c0017088:	e8 c5 19 ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c001708d:	83 c4 10             	add    esp,0x10
c0017090:	fa                   	cli    
c0017091:	f4                   	hlt    
c0017092:	eb fe                	jmp    c0017092 <displayDebugInfo(regs*)+0x383>

c0017094 <HalSystemIdle()>:
c0017094:	56                   	push   esi
c0017095:	53                   	push   ebx
c0017096:	83 ec 14             	sub    esp,0x14
c0017099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001709e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170a4:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00170aa:	83 e0 04             	and    eax,0x4
c00170ad:	0f b6 c0             	movzx  eax,al
c00170b0:	85 c0                	test   eax,eax
c00170b2:	0f 95 c0             	setne  al
c00170b5:	0f b6 c0             	movzx  eax,al
c00170b8:	85 c0                	test   eax,eax
c00170ba:	74 4c                	je     c0017108 <HalSystemIdle()+0x74>
c00170bc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00170c1:	83 ec 08             	sub    esp,0x8
c00170c4:	68 e1 00 00 00       	push   0xe1
c00170c9:	50                   	push   eax
c00170ca:	e8 e9 ff fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c00170cf:	83 c4 10             	add    esp,0x10
c00170d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00170da:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00170df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170e3:	83 e2 02             	and    edx,0x2
c00170e6:	89 d3                	mov    ebx,edx
c00170e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170ec:	83 e2 00             	and    edx,0x0
c00170ef:	89 d6                	mov    esi,edx
c00170f1:	56                   	push   esi
c00170f2:	53                   	push   ebx
c00170f3:	68 e1 00 00 00       	push   0xe1
c00170f8:	50                   	push   eax
c00170f9:	e8 e6 ff fe ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c00170fe:	83 c4 10             	add    esp,0x10
c0017101:	e8 8e 90 fe ff       	call   c0000194 <doTPAUSE>
c0017106:	eb 01                	jmp    c0017109 <HalSystemIdle()+0x75>
c0017108:	f4                   	hlt    
c0017109:	90                   	nop
c001710a:	83 c4 14             	add    esp,0x14
c001710d:	5b                   	pop    ebx
c001710e:	5e                   	pop    esi
c001710f:	c3                   	ret    

c0017110 <displayProgramFault(char const*)>:
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	83 ec 0c             	sub    esp,0xc
c0017116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001711a:	e8 1a 38 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017127:	8b 00                	mov    eax,DWORD PTR [eax]
c0017129:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001712c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017132:	85 c0                	test   eax,eax
c0017134:	74 21                	je     c0017157 <displayProgramFault(char const*)+0x47>
c0017136:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001713b:	8b 00                	mov    eax,DWORD PTR [eax]
c001713d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017140:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017146:	6a 04                	push   0x4
c0017148:	6a 0f                	push   0xf
c001714a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001714e:	50                   	push   eax
c001714f:	e8 b6 19 ff ff       	call   c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017154:	83 c4 10             	add    esp,0x10
c0017157:	90                   	nop
c0017158:	83 c4 0c             	add    esp,0xc
c001715b:	c3                   	ret    

c001715c <gpFault(regs*, void*)>:
c001715c:	83 ec 1c             	sub    esp,0x1c
c001715f:	c7 05 14 92 02 c0 b8 65 01 c0 	mov    DWORD PTR ds:0xc0029214,0xc00165b8
c0017169:	a1 14 92 02 c0       	mov    eax,ds:0xc0029214
c001716e:	85 c0                	test   eax,eax
c0017170:	74 1e                	je     c0017190 <gpFault(regs*, void*)+0x34>
c0017172:	a1 14 92 02 c0       	mov    eax,ds:0xc0029214
c0017177:	83 ec 0c             	sub    esp,0xc
c001717a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001717e:	ff d0                	call   eax
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017187:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001718c:	85 c0                	test   eax,eax
c001718e:	75 2e                	jne    c00171be <gpFault(regs*, void*)+0x62>
c0017190:	83 ec 0c             	sub    esp,0xc
c0017193:	68 1a 1e 02 c0       	push   0xc0021e1a
c0017198:	e8 73 ff ff ff       	call   c0017110 <displayProgramFault(char const*)>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	83 ec 0c             	sub    esp,0xc
c00171a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171a7:	e8 63 fb ff ff       	call   c0016d0f <displayDebugInfo(regs*)>
c00171ac:	83 c4 10             	add    esp,0x10
c00171af:	83 ec 0c             	sub    esp,0xc
c00171b2:	6a 00                	push   0x0
c00171b4:	e8 a3 ed ff ff       	call   c0015f5c <Thr::terminateFromIRQ(int)>
c00171b9:	83 c4 10             	add    esp,0x10
c00171bc:	eb 01                	jmp    c00171bf <gpFault(regs*, void*)+0x63>
c00171be:	90                   	nop
c00171bf:	83 c4 1c             	add    esp,0x1c
c00171c2:	c3                   	ret    

c00171c3 <pgFault(regs*, void*)>:
c00171c3:	83 ec 1c             	sub    esp,0x1c
c00171c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171ca:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00171cd:	0f 20 d0             	mov    eax,cr2
c00171d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171d8:	83 ec 04             	sub    esp,0x4
c00171db:	52                   	push   edx
c00171dc:	50                   	push   eax
c00171dd:	68 f8 1e 02 c0       	push   0xc0021ef8
c00171e2:	e8 52 37 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00171e7:	83 c4 10             	add    esp,0x10
c00171ea:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00171ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00171f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00171f4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00171fa:	0f 20 d2             	mov    edx,cr2
c00171fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017201:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017205:	83 ec 08             	sub    esp,0x8
c0017208:	52                   	push   edx
c0017209:	50                   	push   eax
c001720a:	e8 75 31 ff ff       	call   c000a384 <VAS::tryLoadBackOffDisk(unsigned long)>
c001720f:	83 c4 10             	add    esp,0x10
c0017212:	0f b6 c0             	movzx  eax,al
c0017215:	85 c0                	test   eax,eax
c0017217:	75 2e                	jne    c0017247 <pgFault(regs*, void*)+0x84>
c0017219:	83 ec 0c             	sub    esp,0xc
c001721c:	68 33 1e 02 c0       	push   0xc0021e33
c0017221:	e8 ea fe ff ff       	call   c0017110 <displayProgramFault(char const*)>
c0017226:	83 c4 10             	add    esp,0x10
c0017229:	83 ec 0c             	sub    esp,0xc
c001722c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017230:	e8 da fa ff ff       	call   c0016d0f <displayDebugInfo(regs*)>
c0017235:	83 c4 10             	add    esp,0x10
c0017238:	83 ec 0c             	sub    esp,0xc
c001723b:	6a 00                	push   0x0
c001723d:	e8 1a ed ff ff       	call   c0015f5c <Thr::terminateFromIRQ(int)>
c0017242:	83 c4 10             	add    esp,0x10
c0017245:	eb 01                	jmp    c0017248 <pgFault(regs*, void*)+0x85>
c0017247:	90                   	nop
c0017248:	83 c4 1c             	add    esp,0x1c
c001724b:	c3                   	ret    

c001724c <otherISRHandler(regs*, void*)>:
c001724c:	83 ec 0c             	sub    esp,0xc
c001724f:	83 ec 0c             	sub    esp,0xc
c0017252:	68 20 1f 02 c0       	push   0xc0021f20
c0017257:	e8 b4 fe ff ff       	call   c0017110 <displayProgramFault(char const*)>
c001725c:	83 c4 10             	add    esp,0x10
c001725f:	83 ec 0c             	sub    esp,0xc
c0017262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017266:	e8 a4 fa ff ff       	call   c0016d0f <displayDebugInfo(regs*)>
c001726b:	83 c4 10             	add    esp,0x10
c001726e:	83 ec 0c             	sub    esp,0xc
c0017271:	6a 00                	push   0x0
c0017273:	e8 e4 ec ff ff       	call   c0015f5c <Thr::terminateFromIRQ(int)>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	90                   	nop
c001727c:	83 c4 0c             	add    esp,0xc
c001727f:	c3                   	ret    

c0017280 <opcodeFault(regs*, void*)>:
c0017280:	55                   	push   ebp
c0017281:	89 e5                	mov    ebp,esp
c0017283:	83 ec 08             	sub    esp,0x8
c0017286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017289:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001728c:	83 ec 08             	sub    esp,0x8
c001728f:	50                   	push   eax
c0017290:	68 3e 1e 02 c0       	push   0xc0021e3e
c0017295:	e8 9f 36 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001729a:	83 c4 10             	add    esp,0x10
c001729d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00172a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00172a8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00172ae:	0f b6 c0             	movzx  eax,al
c00172b1:	85 c0                	test   eax,eax
c00172b3:	74 21                	je     c00172d6 <opcodeFault(regs*, void*)+0x56>
c00172b5:	83 ec 0c             	sub    esp,0xc
c00172b8:	68 48 1f 02 c0       	push   0xc0021f48
c00172bd:	e8 77 36 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00172c2:	83 c4 10             	add    esp,0x10
c00172c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00172c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00172cb:	8d 50 19             	lea    edx,[eax+0x19]
c00172ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00172d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00172d4:	eb 2b                	jmp    c0017301 <opcodeFault(regs*, void*)+0x81>
c00172d6:	83 ec 0c             	sub    esp,0xc
c00172d9:	68 4c 1e 02 c0       	push   0xc0021e4c
c00172de:	e8 2d fe ff ff       	call   c0017110 <displayProgramFault(char const*)>
c00172e3:	83 c4 10             	add    esp,0x10
c00172e6:	83 ec 0c             	sub    esp,0xc
c00172e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00172ec:	e8 1e fa ff ff       	call   c0016d0f <displayDebugInfo(regs*)>
c00172f1:	83 c4 10             	add    esp,0x10
c00172f4:	83 ec 0c             	sub    esp,0xc
c00172f7:	6a 00                	push   0x0
c00172f9:	e8 5e ec ff ff       	call   c0015f5c <Thr::terminateFromIRQ(int)>
c00172fe:	83 c4 10             	add    esp,0x10
c0017301:	c9                   	leave  
c0017302:	c3                   	ret    

c0017303 <i386SaveCoprocessor(void*)>:
c0017303:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017307:	83 c0 3f             	add    eax,0x3f
c001730a:	83 e0 c0             	and    eax,0xffffffc0
c001730d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017311:	ff 25 10 92 02 c0    	jmp    DWORD PTR ds:0xc0029210

c0017317 <i386LoadCoprocessor(void*)>:
c0017317:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001731b:	83 c0 3f             	add    eax,0x3f
c001731e:	83 e0 c0             	and    eax,0xffffffc0
c0017321:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017325:	ff 25 0c 92 02 c0    	jmp    DWORD PTR ds:0xc002920c

c001732b <x87EmulHandler(regs*, void*)>:
c001732b:	53                   	push   ebx
c001732c:	83 ec 08             	sub    esp,0x8
c001732f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017334:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017338:	74 10                	je     c001734a <x87EmulHandler(regs*, void*)+0x1f>
c001733a:	83 ec 0c             	sub    esp,0xc
c001733d:	68 59 1e 02 c0       	push   0xc0021e59
c0017342:	e8 ca 98 ff ff       	call   c0010c11 <KePanic(char const*)>
c0017347:	83 c4 10             	add    esp,0x10
c001734a:	0f 20 c0             	mov    eax,cr0
c001734d:	a8 08                	test   al,0x8
c001734f:	74 59                	je     c00173aa <x87EmulHandler(regs*, void*)+0x7f>
c0017351:	0f 06                	clts   
c0017353:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c0017358:	85 c0                	test   eax,eax
c001735a:	74 0e                	je     c001736a <x87EmulHandler(regs*, void*)+0x3f>
c001735c:	83 ec 0c             	sub    esp,0xc
c001735f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017362:	e8 9c ff ff ff       	call   c0017303 <i386SaveCoprocessor(void*)>
c0017367:	83 c4 10             	add    esp,0x10
c001736a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017370:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017374:	75 12                	jne    c0017388 <x87EmulHandler(regs*, void*)+0x5d>
c0017376:	83 ec 0c             	sub    esp,0xc
c0017379:	68 40 02 00 00       	push   0x240
c001737e:	e8 2b 07 ff ff       	call   c0007aae <malloc>
c0017383:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017386:	eb 10                	jmp    c0017398 <x87EmulHandler(regs*, void*)+0x6d>
c0017388:	83 ec 0c             	sub    esp,0xc
c001738b:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c0017390:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017393:	e8 7f ff ff ff       	call   c0017317 <i386LoadCoprocessor(void*)>
c0017398:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001739d:	83 c4 10             	add    esp,0x10
c00173a0:	a3 08 92 02 c0       	mov    ds:0xc0029208,eax
c00173a5:	83 c4 08             	add    esp,0x8
c00173a8:	5b                   	pop    ebx
c00173a9:	c3                   	ret    
c00173aa:	83 ec 0c             	sub    esp,0xc
c00173ad:	68 6d 1e 02 c0       	push   0xc0021e6d
c00173b2:	e8 82 35 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00173b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00173bf:	83 c4 18             	add    esp,0x18
c00173c2:	5b                   	pop    ebx
c00173c3:	e9 94 eb ff ff       	jmp    c0015f5c <Thr::terminateFromIRQ(int)>

c00173c8 <HalInitialiseCoprocessor()>:
c00173c8:	83 ec 10             	sub    esp,0x10
c00173cb:	c7 05 08 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029208,0x0
c00173d5:	6a 00                	push   0x0
c00173d7:	68 2b 73 01 c0       	push   0xc001732b
c00173dc:	6a 07                	push   0x7
c00173de:	e8 eb 51 ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c00173e3:	e8 48 70 00 00       	call   c001e430 <avxDetect>
c00173e8:	83 c4 10             	add    esp,0x10
c00173eb:	85 c0                	test   eax,eax
c00173ed:	74 1c                	je     c001740b <HalInitialiseCoprocessor()+0x43>
c00173ef:	c7 05 10 92 02 c0 5a e4 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e45a
c00173f9:	c7 05 0c 92 02 c0 6b e4 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e46b
c0017403:	83 c4 0c             	add    esp,0xc
c0017406:	e9 71 70 00 00       	jmp    c001e47c <avxInit>
c001740b:	e8 b0 73 00 00       	call   c001e7c0 <absolutelyNoChanceInHell>
c0017410:	85 c0                	test   eax,eax
c0017412:	74 1c                	je     c0017430 <HalInitialiseCoprocessor()+0x68>
c0017414:	c7 05 10 92 02 c0 d8 e7 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e7d8
c001741e:	c7 05 0c 92 02 c0 e0 e7 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e7e0
c0017428:	83 c4 0c             	add    esp,0xc
c001742b:	e9 b8 73 00 00       	jmp    c001e7e8 <sseInit>
c0017430:	e8 d1 73 00 00       	call   c001e806 <x87Detect>
c0017435:	85 c0                	test   eax,eax
c0017437:	74 1c                	je     c0017455 <HalInitialiseCoprocessor()+0x8d>
c0017439:	c7 05 10 92 02 c0 21 e8 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e821
c0017443:	c7 05 0c 92 02 c0 28 e8 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e828
c001744d:	83 c4 0c             	add    esp,0xc
c0017450:	e9 da 73 00 00       	jmp    c001e82f <x87Init>
c0017455:	c7 05 10 92 02 c0 dc 6c 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc0016cdc
c001745f:	c7 05 0c 92 02 c0 dc 6c 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc0016cdc
c0017469:	0f 20 c0             	mov    eax,cr0
c001746c:	83 c8 04             	or     eax,0x4
c001746f:	0f 22 c0             	mov    cr0,eax
c0017472:	83 c4 0c             	add    esp,0xc
c0017475:	c3                   	ret    

c0017476 <HalPanic(char const*)>:
c0017476:	53                   	push   ebx
c0017477:	83 ec 10             	sub    esp,0x10
c001747a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001747e:	fa                   	cli    
c001747f:	53                   	push   ebx
c0017480:	68 83 1e 02 c0       	push   0xc0021e83
c0017485:	e8 af 34 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001748a:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c001748f:	83 c4 10             	add    esp,0x10
c0017492:	85 c0                	test   eax,eax
c0017494:	74 09                	je     c001749f <HalPanic(char const*)+0x29>
c0017496:	83 ec 0c             	sub    esp,0xc
c0017499:	53                   	push   ebx
c001749a:	ff d0                	call   eax
c001749c:	83 c4 10             	add    esp,0x10
c001749f:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c00174a4:	85 c0                	test   eax,eax
c00174a6:	0f 84 dc 00 00 00    	je     c0017588 <HalPanic(char const*)+0x112>
c00174ac:	52                   	push   edx
c00174ad:	6a 01                	push   0x1
c00174af:	6a 0f                	push   0xf
c00174b1:	50                   	push   eax
c00174b2:	e8 ef 10 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00174b7:	59                   	pop    ecx
c00174b8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174be:	e8 d3 12 ff ff       	call   c0008796 <VgaText::clearScreen()>
c00174c3:	58                   	pop    eax
c00174c4:	5a                   	pop    edx
c00174c5:	68 84 02 02 c0       	push   0xc0020284
c00174ca:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174d0:	e8 09 11 ff ff       	call   c00085de <VgaText::setTitle(char*)>
c00174d5:	83 c4 0c             	add    esp,0xc
c00174d8:	6a 01                	push   0x1
c00174da:	6a 0f                	push   0xf
c00174dc:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174e2:	e8 bf 10 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00174e7:	59                   	pop    ecx
c00174e8:	58                   	pop    eax
c00174e9:	68 9c 1e 02 c0       	push   0xc0021e9c
c00174ee:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00174f4:	e8 9f 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00174f9:	83 c4 0c             	add    esp,0xc
c00174fc:	6a 0f                	push   0xf
c00174fe:	6a 01                	push   0x1
c0017500:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017506:	e8 9b 10 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001750b:	58                   	pop    eax
c001750c:	5a                   	pop    edx
c001750d:	68 a5 1e 02 c0       	push   0xc0021ea5
c0017512:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017518:	e8 7b 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c001751d:	83 c4 0c             	add    esp,0xc
c0017520:	6a 01                	push   0x1
c0017522:	6a 0f                	push   0xf
c0017524:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001752a:	e8 77 10 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001752f:	59                   	pop    ecx
c0017530:	58                   	pop    eax
c0017531:	68 e9 1e 02 c0       	push   0xc0021ee9
c0017536:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001753c:	e8 57 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017541:	58                   	pop    eax
c0017542:	5a                   	pop    edx
c0017543:	68 b2 1e 02 c0       	push   0xc0021eb2
c0017548:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001754e:	e8 45 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017553:	59                   	pop    ecx
c0017554:	58                   	pop    eax
c0017555:	68 ec 1e 02 c0       	push   0xc0021eec
c001755a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017560:	e8 33 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017565:	58                   	pop    eax
c0017566:	5a                   	pop    edx
c0017567:	53                   	push   ebx
c0017568:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001756e:	e8 25 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017573:	59                   	pop    ecx
c0017574:	5b                   	pop    ebx
c0017575:	68 e9 1e 02 c0       	push   0xc0021ee9
c001757a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017580:	e8 13 15 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017585:	83 c4 10             	add    esp,0x10
c0017588:	eb fe                	jmp    c0017588 <HalPanic(char const*)+0x112>

c001758a <HalQueryPerformanceCounter()>:
c001758a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001758f:	31 d2                	xor    edx,edx
c0017591:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017597:	31 c0                	xor    eax,eax
c0017599:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00175a0:	74 02                	je     c00175a4 <HalQueryPerformanceCounter()+0x1a>
c00175a2:	0f 31                	rdtsc  
c00175a4:	c3                   	ret    

c00175a5 <HalInitialise()>:
c00175a5:	53                   	push   ebx
c00175a6:	83 ec 08             	sub    esp,0x8
c00175a9:	e8 50 52 ff ff       	call   c000c7fe <setupINTS()>
c00175ae:	80 3d 80 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028780,0x0
c00175b5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00175ba:	75 0f                	jne    c00175cb <HalInitialise()+0x26>
c00175bc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00175c2:	83 e2 fe             	and    edx,0xfffffffe
c00175c5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00175cb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00175d1:	c6 05 00 92 02 c0 00 	mov    BYTE PTR ds:0xc0029200,0x0
c00175d8:	83 e2 fe             	and    edx,0xfffffffe
c00175db:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00175e1:	e8 9e 02 00 00       	call   c0017884 <picOpen()>
c00175e6:	80 3d 00 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029200,0x0
c00175ed:	74 0a                	je     c00175f9 <HalInitialise()+0x54>
c00175ef:	e8 e0 01 00 00       	call   c00177d4 <picDisable()>
c00175f4:	e8 ad 67 00 00       	call   c001dda6 <apicOpen()>
c00175f9:	bb 0f 00 00 00       	mov    ebx,0xf
c00175fe:	50                   	push   eax
c00175ff:	6a 00                	push   0x0
c0017601:	68 4c 72 01 c0       	push   0xc001724c
c0017606:	6a 00                	push   0x0
c0017608:	e8 c1 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c001760d:	83 c4 0c             	add    esp,0xc
c0017610:	6a 00                	push   0x0
c0017612:	68 4c 72 01 c0       	push   0xc001724c
c0017617:	6a 01                	push   0x1
c0017619:	e8 b0 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c001761e:	83 c4 0c             	add    esp,0xc
c0017621:	6a 00                	push   0x0
c0017623:	68 dd 6c 01 c0       	push   0xc0016cdd
c0017628:	6a 02                	push   0x2
c001762a:	e8 9f 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c001762f:	83 c4 0c             	add    esp,0xc
c0017632:	6a 00                	push   0x0
c0017634:	68 4c 72 01 c0       	push   0xc001724c
c0017639:	6a 03                	push   0x3
c001763b:	e8 8e 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017640:	83 c4 0c             	add    esp,0xc
c0017643:	6a 00                	push   0x0
c0017645:	68 4c 72 01 c0       	push   0xc001724c
c001764a:	6a 04                	push   0x4
c001764c:	e8 7d 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017651:	83 c4 0c             	add    esp,0xc
c0017654:	6a 00                	push   0x0
c0017656:	68 4c 72 01 c0       	push   0xc001724c
c001765b:	6a 05                	push   0x5
c001765d:	e8 6c 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017662:	83 c4 0c             	add    esp,0xc
c0017665:	6a 00                	push   0x0
c0017667:	68 80 72 01 c0       	push   0xc0017280
c001766c:	6a 06                	push   0x6
c001766e:	e8 5b 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017673:	83 c4 0c             	add    esp,0xc
c0017676:	6a 00                	push   0x0
c0017678:	68 f6 6c 01 c0       	push   0xc0016cf6
c001767d:	6a 08                	push   0x8
c001767f:	e8 4a 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017684:	83 c4 0c             	add    esp,0xc
c0017687:	6a 00                	push   0x0
c0017689:	68 4c 72 01 c0       	push   0xc001724c
c001768e:	6a 09                	push   0x9
c0017690:	e8 39 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017695:	83 c4 0c             	add    esp,0xc
c0017698:	6a 00                	push   0x0
c001769a:	68 4c 72 01 c0       	push   0xc001724c
c001769f:	6a 0a                	push   0xa
c00176a1:	e8 28 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176a6:	83 c4 0c             	add    esp,0xc
c00176a9:	6a 00                	push   0x0
c00176ab:	68 4c 72 01 c0       	push   0xc001724c
c00176b0:	6a 0b                	push   0xb
c00176b2:	e8 17 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176b7:	83 c4 0c             	add    esp,0xc
c00176ba:	6a 00                	push   0x0
c00176bc:	68 5c 71 01 c0       	push   0xc001715c
c00176c1:	6a 0d                	push   0xd
c00176c3:	e8 06 4f ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176c8:	83 c4 0c             	add    esp,0xc
c00176cb:	6a 00                	push   0x0
c00176cd:	68 c3 71 01 c0       	push   0xc00171c3
c00176d2:	6a 0e                	push   0xe
c00176d4:	e8 f5 4e ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176d9:	83 c4 10             	add    esp,0x10
c00176dc:	50                   	push   eax
c00176dd:	6a 00                	push   0x0
c00176df:	68 4c 72 01 c0       	push   0xc001724c
c00176e4:	53                   	push   ebx
c00176e5:	43                   	inc    ebx
c00176e6:	e8 e3 4e ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c00176eb:	83 c4 10             	add    esp,0x10
c00176ee:	83 fb 1e             	cmp    ebx,0x1e
c00176f1:	75 e9                	jne    c00176dc <HalInitialise()+0x137>
c00176f3:	50                   	push   eax
c00176f4:	6a 00                	push   0x0
c00176f6:	68 f9 1e 01 c0       	push   0xc0011ef9
c00176fb:	6a 60                	push   0x60
c00176fd:	e8 cc 4e ff ff       	call   c000c5ce <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017702:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017707:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017711:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017718:	e8 91 03 ff ff       	call   c0007aae <malloc>
c001771d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017720:	89 c3                	mov    ebx,eax
c0017722:	e8 3b 09 00 00       	call   c0018062 <RTC::RTC()>
c0017727:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017731:	5a                   	pop    edx
c0017732:	59                   	pop    ecx
c0017733:	53                   	push   ebx
c0017734:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001773a:	e8 5b 49 ff ff       	call   c000c09a <Device::addChild(Device*)>
c001773f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017741:	6a 00                	push   0x0
c0017743:	6a 00                	push   0x0
c0017745:	6a 00                	push   0x0
c0017747:	53                   	push   ebx
c0017748:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001774b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017750:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017756:	83 c4 28             	add    esp,0x28
c0017759:	5b                   	pop    ebx
c001775a:	c3                   	ret    

c001775b <HalMakeBeep(int)>:
c001775b:	53                   	push   ebx
c001775c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017760:	85 db                	test   ebx,ebx
c0017762:	75 07                	jne    c001776b <HalMakeBeep(int)+0x10>
c0017764:	e4 61                	in     al,0x61
c0017766:	83 e0 fc             	and    eax,0xfffffffc
c0017769:	eb 26                	jmp    c0017791 <HalMakeBeep(int)+0x36>
c001776b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017770:	99                   	cdq    
c0017771:	f7 fb                	idiv   ebx
c0017773:	89 c1                	mov    ecx,eax
c0017775:	b0 b6                	mov    al,0xb6
c0017777:	e6 43                	out    0x43,al
c0017779:	88 c8                	mov    al,cl
c001777b:	e6 42                	out    0x42,al
c001777d:	89 c8                	mov    eax,ecx
c001777f:	c1 e8 08             	shr    eax,0x8
c0017782:	e6 42                	out    0x42,al
c0017784:	e4 61                	in     al,0x61
c0017786:	89 c2                	mov    edx,eax
c0017788:	83 ca 03             	or     edx,0x3
c001778b:	38 d0                	cmp    al,dl
c001778d:	74 04                	je     c0017793 <HalMakeBeep(int)+0x38>
c001778f:	88 d0                	mov    al,dl
c0017791:	e6 61                	out    0x61,al
c0017793:	5b                   	pop    ebx
c0017794:	c3                   	ret    

c0017795 <HalGetRand()>:
c0017795:	31 c0                	xor    eax,eax
c0017797:	c3                   	ret    

c0017798 <HalEndOfInterrupt(int)>:
c0017798:	80 3d 00 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029200,0x0
c001779f:	74 23                	je     c00177c4 <HalEndOfInterrupt(int)+0x2c>
c00177a1:	83 ec 14             	sub    esp,0x14
c00177a4:	6a 1b                	push   0x1b
c00177a6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00177ac:	e8 07 f9 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c00177b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00177b6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00177c0:	83 c4 1c             	add    esp,0x1c
c00177c3:	c3                   	ret    
c00177c4:	e9 3f 02 00 00       	jmp    c0017a08 <picEOI(int)>

c00177c9 <HalRestart()>:
c00177c9:	c3                   	ret    

c00177ca <HalShutdown()>:
c00177ca:	c3                   	ret    

c00177cb <HalSleep()>:
c00177cb:	c3                   	ret    

c00177cc <picIoWait()>:
c00177cc:	eb 00                	jmp    c00177ce <picIoWait()+0x2>
c00177ce:	eb 00                	jmp    c00177d0 <picIoWait()+0x4>
c00177d0:	90                   	nop
c00177d1:	c3                   	ret    
c00177d2:	66 90                	xchg   ax,ax

c00177d4 <picDisable()>:
c00177d4:	83 ec 10             	sub    esp,0x10
c00177d7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00177de:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00177e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00177e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00177ec:	ee                   	out    dx,al
c00177ed:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00177f4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00177f9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00177fd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017802:	ee                   	out    dx,al
c0017803:	90                   	nop
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	c3                   	ret    

c0017808 <picGetIRQReg(int)>:
c0017808:	83 ec 10             	sub    esp,0x10
c001780b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001780f:	0f b6 c0             	movzx  eax,al
c0017812:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017819:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001781d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017821:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017826:	ee                   	out    dx,al
c0017827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001782b:	0f b6 c0             	movzx  eax,al
c001782e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017835:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017839:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001783d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017842:	ee                   	out    dx,al
c0017843:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001784a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001784f:	89 c2                	mov    edx,eax
c0017851:	ec                   	in     al,dx
c0017852:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017856:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001785a:	0f b6 c0             	movzx  eax,al
c001785d:	c1 e0 08             	shl    eax,0x8
c0017860:	89 c1                	mov    ecx,eax
c0017862:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017869:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001786e:	89 c2                	mov    edx,eax
c0017870:	ec                   	in     al,dx
c0017871:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017875:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017879:	0f b6 c0             	movzx  eax,al
c001787c:	09 c8                	or     eax,ecx
c001787e:	83 c4 10             	add    esp,0x10
c0017881:	c3                   	ret    
c0017882:	66 90                	xchg   ax,ax

c0017884 <picOpen()>:
c0017884:	83 ec 50             	sub    esp,0x50
c0017887:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001788e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017893:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017897:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001789b:	ee                   	out    dx,al
c001789c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00178a3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00178a8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00178ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178b0:	ee                   	out    dx,al
c00178b1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00178b9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00178c1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00178c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178cc:	89 c2                	mov    edx,eax
c00178ce:	ec                   	in     al,dx
c00178cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00178d3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00178d7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00178db:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00178e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178e6:	89 c2                	mov    edx,eax
c00178e8:	ec                   	in     al,dx
c00178e9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00178ed:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00178f1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00178f5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00178fc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017901:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017905:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017909:	ee                   	out    dx,al
c001790a:	e8 bd fe ff ff       	call   c00177cc <picIoWait()>
c001790f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017916:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001791b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001791f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017923:	ee                   	out    dx,al
c0017924:	e8 a3 fe ff ff       	call   c00177cc <picIoWait()>
c0017929:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001792d:	0f b6 c0             	movzx  eax,al
c0017930:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017937:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001793b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001793f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017943:	ee                   	out    dx,al
c0017944:	e8 83 fe ff ff       	call   c00177cc <picIoWait()>
c0017949:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001794d:	0f b6 c0             	movzx  eax,al
c0017950:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017957:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001795b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001795f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017963:	ee                   	out    dx,al
c0017964:	e8 63 fe ff ff       	call   c00177cc <picIoWait()>
c0017969:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017970:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017975:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017979:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001797d:	ee                   	out    dx,al
c001797e:	e8 49 fe ff ff       	call   c00177cc <picIoWait()>
c0017983:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001798a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001798f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017993:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017997:	ee                   	out    dx,al
c0017998:	e8 2f fe ff ff       	call   c00177cc <picIoWait()>
c001799d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00179a4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00179a9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00179ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00179b1:	ee                   	out    dx,al
c00179b2:	e8 15 fe ff ff       	call   c00177cc <picIoWait()>
c00179b7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00179be:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00179c3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00179c7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00179cb:	ee                   	out    dx,al
c00179cc:	e8 fb fd ff ff       	call   c00177cc <picIoWait()>
c00179d1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00179d6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00179dd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00179e1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00179e5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179e9:	ee                   	out    dx,al
c00179ea:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00179ef:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00179f6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00179fa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00179fe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017a02:	ee                   	out    dx,al
c0017a03:	90                   	nop
c0017a04:	83 c4 50             	add    esp,0x50
c0017a07:	c3                   	ret    

c0017a08 <picEOI(int)>:
c0017a08:	83 ec 10             	sub    esp,0x10
c0017a0b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017a10:	75 1e                	jne    c0017a30 <picEOI(int)+0x28>
c0017a12:	6a 0b                	push   0xb
c0017a14:	e8 ef fd ff ff       	call   c0017808 <picGetIRQReg(int)>
c0017a19:	83 c4 04             	add    esp,0x4
c0017a1c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017a21:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017a26:	25 80 00 00 00       	and    eax,0x80
c0017a2b:	74 73                	je     c0017aa0 <picEOI(int)+0x98>
c0017a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0017a30:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017a35:	75 31                	jne    c0017a68 <picEOI(int)+0x60>
c0017a37:	6a 0b                	push   0xb
c0017a39:	e8 ca fd ff ff       	call   c0017808 <picGetIRQReg(int)>
c0017a3e:	83 c4 04             	add    esp,0x4
c0017a41:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017a46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a4a:	98                   	cwde   
c0017a4b:	85 c0                	test   eax,eax
c0017a4d:	78 19                	js     c0017a68 <picEOI(int)+0x60>
c0017a4f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017a56:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017a5b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017a5f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017a64:	ee                   	out    dx,al
c0017a65:	eb 3d                	jmp    c0017aa4 <picEOI(int)+0x9c>
c0017a67:	90                   	nop
c0017a68:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017a6d:	7e 19                	jle    c0017a88 <picEOI(int)+0x80>
c0017a6f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017a76:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017a7b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017a7f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017a84:	ee                   	out    dx,al
c0017a85:	8d 76 00             	lea    esi,[esi+0x0]
c0017a88:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017a8f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017a94:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017a98:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017a9d:	ee                   	out    dx,al
c0017a9e:	eb 04                	jmp    c0017aa4 <picEOI(int)+0x9c>
c0017aa0:	90                   	nop
c0017aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0017aa4:	83 c4 10             	add    esp,0x10
c0017aa7:	c3                   	ret    

c0017aa8 <RTC::open(int, int, void*)>:
c0017aa8:	31 c0                	xor    eax,eax
c0017aaa:	c3                   	ret    
c0017aab:	90                   	nop

c0017aac <RTC::close(int, int, void*)>:
c0017aac:	31 c0                	xor    eax,eax
c0017aae:	c3                   	ret    
c0017aaf:	90                   	nop

c0017ab0 <RTC::timeInSecondsUTC()>:
c0017ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ab4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017aba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017ac0:	c3                   	ret    
c0017ac1:	90                   	nop

c0017ac2 <RTC::timeInDatetimeUTC()>:
c0017ac2:	53                   	push   ebx
c0017ac3:	83 ec 14             	sub    esp,0x14
c0017ac6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ace:	8b 10                	mov    edx,DWORD PTR [eax]
c0017ad0:	50                   	push   eax
c0017ad1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017ad4:	83 c4 0c             	add    esp,0xc
c0017ad7:	52                   	push   edx
c0017ad8:	50                   	push   eax
c0017ad9:	53                   	push   ebx
c0017ada:	e8 2f 43 ff ff       	call   c000be0e <secondsToDatetime(unsigned long long)>
c0017adf:	89 d8                	mov    eax,ebx
c0017ae1:	83 c4 14             	add    esp,0x14
c0017ae4:	5b                   	pop    ebx
c0017ae5:	c2 04 00             	ret    0x4

c0017ae8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017ae8:	56                   	push   esi
c0017ae9:	53                   	push   ebx
c0017aea:	83 ec 14             	sub    esp,0x14
c0017aed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017af1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017af3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017af6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017afa:	52                   	push   edx
c0017afb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b03:	50                   	push   eax
c0017b04:	e8 05 43 ff ff       	call   c000be0e <secondsToDatetime(unsigned long long)>
c0017b09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b15:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017b19:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017b1d:	89 f0                	mov    eax,esi
c0017b1f:	83 c4 20             	add    esp,0x20
c0017b22:	5b                   	pop    ebx
c0017b23:	5e                   	pop    esi
c0017b24:	ff e0                	jmp    eax

c0017b26 <RTC::~RTC()>:
c0017b26:	83 ec 0c             	sub    esp,0xc
c0017b29:	ba 88 1f 02 c0       	mov    edx,0xc0021f88
c0017b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b32:	89 10                	mov    DWORD PTR [eax],edx
c0017b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b38:	83 ec 0c             	sub    esp,0xc
c0017b3b:	50                   	push   eax
c0017b3c:	e8 5f 40 ff ff       	call   c000bba0 <Clock::~Clock()>
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	90                   	nop
c0017b45:	83 c4 0c             	add    esp,0xc
c0017b48:	c3                   	ret    
c0017b49:	90                   	nop

c0017b4a <RTC::~RTC()>:
c0017b4a:	83 ec 0c             	sub    esp,0xc
c0017b4d:	83 ec 0c             	sub    esp,0xc
c0017b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b54:	e8 cd ff ff ff       	call   c0017b26 <RTC::~RTC()>
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	83 ec 08             	sub    esp,0x8
c0017b5f:	68 60 01 00 00       	push   0x160
c0017b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b68:	e8 9f 2c ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0017b6d:	83 c4 10             	add    esp,0x10
c0017b70:	83 c4 0c             	add    esp,0xc
c0017b73:	c3                   	ret    

c0017b74 <RTC::get_update_in_progress_flag()>:
c0017b74:	83 ec 14             	sub    esp,0x14
c0017b77:	6a 0a                	push   0xa
c0017b79:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b7f:	e8 ec f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b84:	83 c4 1c             	add    esp,0x1c
c0017b87:	0f b6 c0             	movzx  eax,al
c0017b8a:	c1 e8 07             	shr    eax,0x7
c0017b8d:	c3                   	ret    

c0017b8e <RTC::completeRTCRefresh()>:
c0017b8e:	55                   	push   ebp
c0017b8f:	57                   	push   edi
c0017b90:	56                   	push   esi
c0017b91:	53                   	push   ebx
c0017b92:	83 ec 3c             	sub    esp,0x3c
c0017b95:	8b 1d 8c 84 02 c0    	mov    ebx,DWORD PTR ds:0xc002848c
c0017b9b:	83 ec 0c             	sub    esp,0xc
c0017b9e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017ba2:	e8 cd ff ff ff       	call   c0017b74 <RTC::get_update_in_progress_flag()>
c0017ba7:	83 c4 10             	add    esp,0x10
c0017baa:	84 c0                	test   al,al
c0017bac:	74 0e                	je     c0017bbc <RTC::completeRTCRefresh()+0x2e>
c0017bae:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017bb4:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c0017bba:	73 df                	jae    c0017b9b <RTC::completeRTCRefresh()+0xd>
c0017bbc:	51                   	push   ecx
c0017bbd:	51                   	push   ecx
c0017bbe:	6a 00                	push   0x0
c0017bc0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bc6:	e8 a5 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bcb:	5b                   	pop    ebx
c0017bcc:	89 c7                	mov    edi,eax
c0017bce:	5e                   	pop    esi
c0017bcf:	6a 02                	push   0x2
c0017bd1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bd7:	e8 94 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bdc:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017be0:	5d                   	pop    ebp
c0017be1:	58                   	pop    eax
c0017be2:	6a 04                	push   0x4
c0017be4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bea:	e8 81 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bef:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017bf3:	58                   	pop    eax
c0017bf4:	5a                   	pop    edx
c0017bf5:	6a 07                	push   0x7
c0017bf7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bfd:	e8 6e f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c02:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017c06:	59                   	pop    ecx
c0017c07:	5b                   	pop    ebx
c0017c08:	6a 08                	push   0x8
c0017c0a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c10:	e8 5b f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c15:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c19:	5e                   	pop    esi
c0017c1a:	5d                   	pop    ebp
c0017c1b:	6a 09                	push   0x9
c0017c1d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c23:	e8 48 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c28:	0f b6 c0             	movzx  eax,al
c0017c2b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c2f:	83 c4 10             	add    esp,0x10
c0017c32:	8b 1d 8c 84 02 c0    	mov    ebx,DWORD PTR ds:0xc002848c
c0017c38:	83 ec 0c             	sub    esp,0xc
c0017c3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017c3f:	e8 30 ff ff ff       	call   c0017b74 <RTC::get_update_in_progress_flag()>
c0017c44:	83 c4 10             	add    esp,0x10
c0017c47:	84 c0                	test   al,al
c0017c49:	74 0e                	je     c0017c59 <RTC::completeRTCRefresh()+0xcb>
c0017c4b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017c51:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c0017c57:	73 df                	jae    c0017c38 <RTC::completeRTCRefresh()+0xaa>
c0017c59:	51                   	push   ecx
c0017c5a:	51                   	push   ecx
c0017c5b:	6a 00                	push   0x0
c0017c5d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c63:	e8 08 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c68:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017c6c:	5b                   	pop    ebx
c0017c6d:	5e                   	pop    esi
c0017c6e:	6a 02                	push   0x2
c0017c70:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c76:	e8 f5 f4 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c7b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017c7f:	5d                   	pop    ebp
c0017c80:	58                   	pop    eax
c0017c81:	6a 04                	push   0x4
c0017c83:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c89:	e8 e2 f4 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c8e:	88 c3                	mov    bl,al
c0017c90:	58                   	pop    eax
c0017c91:	5a                   	pop    edx
c0017c92:	6a 07                	push   0x7
c0017c94:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c9a:	e8 d1 f4 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c9f:	59                   	pop    ecx
c0017ca0:	89 c6                	mov    esi,eax
c0017ca2:	5d                   	pop    ebp
c0017ca3:	6a 08                	push   0x8
c0017ca5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017cab:	e8 c0 f4 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017cb0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017cb4:	58                   	pop    eax
c0017cb5:	5a                   	pop    edx
c0017cb6:	6a 09                	push   0x9
c0017cb8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017cbe:	e8 ad f4 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017cc3:	89 f9                	mov    ecx,edi
c0017cc5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017cc9:	0f b6 e8             	movzx  ebp,al
c0017ccc:	83 c4 10             	add    esp,0x10
c0017ccf:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017cd3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017cd8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0017cdd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017ce1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ce5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0017ce9:	0f 94 c0             	sete   al
c0017cec:	0f b6 fb             	movzx  edi,bl
c0017cef:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0017cf3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0017cf8:	0f 94 c2             	sete   dl
c0017cfb:	21 d0                	and    eax,edx
c0017cfd:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017d01:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017d05:	0f 94 c2             	sete   dl
c0017d08:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017d0c:	21 c2                	and    edx,eax
c0017d0e:	89 f0                	mov    eax,esi
c0017d10:	0f b6 c0             	movzx  eax,al
c0017d13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d17:	89 f0                	mov    eax,esi
c0017d19:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017d1d:	0f 94 c0             	sete   al
c0017d20:	21 d0                	and    eax,edx
c0017d22:	31 d2                	xor    edx,edx
c0017d24:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017d28:	0f 94 c2             	sete   dl
c0017d2b:	85 c2                	test   edx,eax
c0017d2d:	75 27                	jne    c0017d56 <RTC::completeRTCRefresh()+0x1c8>
c0017d2f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017d33:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017d37:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017d3b:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017d3f:	89 f0                	mov    eax,esi
c0017d41:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017d45:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017d49:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017d4d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017d51:	e9 dc fe ff ff       	jmp    c0017c32 <RTC::completeRTCRefresh()+0xa4>
c0017d56:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017d5a:	75 d3                	jne    c0017d2f <RTC::completeRTCRefresh()+0x1a1>
c0017d5c:	52                   	push   edx
c0017d5d:	52                   	push   edx
c0017d5e:	6a 0b                	push   0xb
c0017d60:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d66:	e8 05 f4 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017d6b:	83 c4 10             	add    esp,0x10
c0017d6e:	a8 04                	test   al,0x4
c0017d70:	75 7a                	jne    c0017dec <RTC::completeRTCRefresh()+0x25e>
c0017d72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017d76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d7a:	83 e1 0f             	and    ecx,0xf
c0017d7d:	c1 ea 04             	shr    edx,0x4
c0017d80:	c1 ef 04             	shr    edi,0x4
c0017d83:	6b d2 0a             	imul   edx,edx,0xa
c0017d86:	83 e6 0f             	and    esi,0xf
c0017d89:	01 d1                	add    ecx,edx
c0017d8b:	c1 ed 04             	shr    ebp,0x4
c0017d8e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017d92:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017d96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d9a:	c1 ea 04             	shr    edx,0x4
c0017d9d:	83 e1 0f             	and    ecx,0xf
c0017da0:	6b d2 0a             	imul   edx,edx,0xa
c0017da3:	6b ed 0a             	imul   ebp,ebp,0xa
c0017da6:	01 d1                	add    ecx,edx
c0017da8:	89 fa                	mov    edx,edi
c0017daa:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017dae:	83 e2 07             	and    edx,0x7
c0017db1:	89 d9                	mov    ecx,ebx
c0017db3:	6b d2 0a             	imul   edx,edx,0xa
c0017db6:	83 e1 0f             	and    ecx,0xf
c0017db9:	83 e3 80             	and    ebx,0xffffff80
c0017dbc:	01 d1                	add    ecx,edx
c0017dbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dc2:	09 cb                	or     ebx,ecx
c0017dc4:	c1 ea 04             	shr    edx,0x4
c0017dc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017dcb:	6b d2 0a             	imul   edx,edx,0xa
c0017dce:	83 e1 0f             	and    ecx,0xf
c0017dd1:	01 d6                	add    esi,edx
c0017dd3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dd7:	c1 ea 04             	shr    edx,0x4
c0017dda:	6b d2 0a             	imul   edx,edx,0xa
c0017ddd:	01 d1                	add    ecx,edx
c0017ddf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017de3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017de7:	83 e2 0f             	and    edx,0xf
c0017dea:	01 d5                	add    ebp,edx
c0017dec:	a8 02                	test   al,0x2
c0017dee:	75 15                	jne    c0017e05 <RTC::completeRTCRefresh()+0x277>
c0017df0:	f6 c3 80             	test   bl,0x80
c0017df3:	74 10                	je     c0017e05 <RTC::completeRTCRefresh()+0x277>
c0017df5:	83 e3 7f             	and    ebx,0x7f
c0017df8:	b9 18 00 00 00       	mov    ecx,0x18
c0017dfd:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017e00:	99                   	cdq    
c0017e01:	f7 f9                	idiv   ecx
c0017e03:	88 d3                	mov    bl,dl
c0017e05:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017e0b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017e11:	77 06                	ja     c0017e19 <RTC::completeRTCRefresh()+0x28b>
c0017e13:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017e19:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017e1e:	31 c9                	xor    ecx,ecx
c0017e20:	c1 e0 10             	shl    eax,0x10
c0017e23:	89 cd                	mov    ebp,ecx
c0017e25:	c1 e7 10             	shl    edi,0x10
c0017e28:	31 d2                	xor    edx,edx
c0017e2a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017e30:	09 c5                	or     ebp,eax
c0017e32:	89 f0                	mov    eax,esi
c0017e34:	89 e9                	mov    ecx,ebp
c0017e36:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017e3a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017e3e:	88 c2                	mov    dl,al
c0017e40:	88 d9                	mov    cl,bl
c0017e42:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0017e46:	0f b7 c2             	movzx  eax,dx
c0017e49:	09 f8                	or     eax,edi
c0017e4b:	89 c2                	mov    edx,eax
c0017e4d:	50                   	push   eax
c0017e4e:	50                   	push   eax
c0017e4f:	51                   	push   ecx
c0017e50:	52                   	push   edx
c0017e51:	e8 39 3e ff ff       	call   c000bc8f <datetimeToSeconds(datetime_t)>
c0017e56:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017e5a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017e60:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017e66:	83 c4 4c             	add    esp,0x4c
c0017e69:	5b                   	pop    ebx
c0017e6a:	5e                   	pop    esi
c0017e6b:	5f                   	pop    edi
c0017e6c:	5d                   	pop    ebp
c0017e6d:	c3                   	ret    

c0017e6e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017e6e:	55                   	push   ebp
c0017e6f:	57                   	push   edi
c0017e70:	56                   	push   esi
c0017e71:	53                   	push   ebx
c0017e72:	83 ec 30             	sub    esp,0x30
c0017e75:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017e79:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017e7d:	6a 00                	push   0x0
c0017e7f:	6a 00                	push   0x0
c0017e81:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e87:	e8 fe f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e8c:	83 c4 0c             	add    esp,0xc
c0017e8f:	6a 00                	push   0x0
c0017e91:	6a 02                	push   0x2
c0017e93:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e99:	e8 ec f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e9e:	31 d2                	xor    edx,edx
c0017ea0:	89 f9                	mov    ecx,edi
c0017ea2:	89 f8                	mov    eax,edi
c0017ea4:	c1 e9 10             	shr    ecx,0x10
c0017ea7:	0f b6 c4             	movzx  eax,ah
c0017eaa:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017eae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017eb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017eb6:	b9 64 00 00 00       	mov    ecx,0x64
c0017ebb:	89 f0                	mov    eax,esi
c0017ebd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ec1:	89 f0                	mov    eax,esi
c0017ec3:	0f b6 c4             	movzx  eax,ah
c0017ec6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017eca:	89 f0                	mov    eax,esi
c0017ecc:	c1 e8 10             	shr    eax,0x10
c0017ecf:	f7 f1                	div    ecx
c0017ed1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017ed5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017ed9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017edd:	59                   	pop    ecx
c0017ede:	5b                   	pop    ebx
c0017edf:	89 fb                	mov    ebx,edi
c0017ee1:	6a 0b                	push   0xb
c0017ee3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ee9:	e8 82 f2 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	89 c5                	mov    ebp,eax
c0017ef3:	a8 04                	test   al,0x4
c0017ef5:	75 6e                	jne    c0017f65 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017ef7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017efb:	31 d2                	xor    edx,edx
c0017efd:	0f b6 c1             	movzx  eax,cl
c0017f00:	b9 0a 00 00 00       	mov    ecx,0xa
c0017f05:	f7 f1                	div    ecx
c0017f07:	c1 e0 04             	shl    eax,0x4
c0017f0a:	09 d0                	or     eax,edx
c0017f0c:	31 d2                	xor    edx,edx
c0017f0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f12:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017f17:	f7 f1                	div    ecx
c0017f19:	c1 e0 04             	shl    eax,0x4
c0017f1c:	09 d0                	or     eax,edx
c0017f1e:	31 d2                	xor    edx,edx
c0017f20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f24:	0f b6 c3             	movzx  eax,bl
c0017f27:	f7 f1                	div    ecx
c0017f29:	c1 e0 04             	shl    eax,0x4
c0017f2c:	09 d0                	or     eax,edx
c0017f2e:	31 d2                	xor    edx,edx
c0017f30:	89 c3                	mov    ebx,eax
c0017f32:	89 f0                	mov    eax,esi
c0017f34:	0f b6 c0             	movzx  eax,al
c0017f37:	f7 f1                	div    ecx
c0017f39:	c1 e0 04             	shl    eax,0x4
c0017f3c:	09 d0                	or     eax,edx
c0017f3e:	31 d2                	xor    edx,edx
c0017f40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017f49:	f7 f1                	div    ecx
c0017f4b:	c1 e0 04             	shl    eax,0x4
c0017f4e:	09 d0                	or     eax,edx
c0017f50:	31 d2                	xor    edx,edx
c0017f52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f5a:	f7 f1                	div    ecx
c0017f5c:	c1 e0 04             	shl    eax,0x4
c0017f5f:	09 d0                	or     eax,edx
c0017f61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f65:	83 e5 02             	and    ebp,0x2
c0017f68:	75 1e                	jne    c0017f88 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017f6a:	0f b6 c3             	movzx  eax,bl
c0017f6d:	83 f8 0b             	cmp    eax,0xb
c0017f70:	76 10                	jbe    c0017f82 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017f72:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017f75:	88 d3                	mov    bl,dl
c0017f77:	84 d2                	test   dl,dl
c0017f79:	75 02                	jne    c0017f7d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017f7b:	b3 0c                	mov    bl,0xc
c0017f7d:	83 cb 80             	or     ebx,0xffffff80
c0017f80:	eb 06                	jmp    c0017f88 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017f82:	85 c0                	test   eax,eax
c0017f84:	75 02                	jne    c0017f88 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017f86:	b3 0c                	mov    bl,0xc
c0017f88:	0f b6 db             	movzx  ebx,bl
c0017f8b:	50                   	push   eax
c0017f8c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017f91:	52                   	push   edx
c0017f92:	6a 00                	push   0x0
c0017f94:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f9a:	e8 eb f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f9f:	83 c4 0c             	add    esp,0xc
c0017fa2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017fa7:	50                   	push   eax
c0017fa8:	6a 02                	push   0x2
c0017faa:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017fb0:	e8 d5 f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fb5:	83 c4 0c             	add    esp,0xc
c0017fb8:	53                   	push   ebx
c0017fb9:	6a 04                	push   0x4
c0017fbb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017fc1:	e8 c4 f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fc6:	83 c4 0c             	add    esp,0xc
c0017fc9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017fce:	52                   	push   edx
c0017fcf:	6a 07                	push   0x7
c0017fd1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017fd7:	e8 ae f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fdc:	83 c4 0c             	add    esp,0xc
c0017fdf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017fe4:	50                   	push   eax
c0017fe5:	6a 08                	push   0x8
c0017fe7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017fed:	e8 98 f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ff2:	83 c4 0c             	add    esp,0xc
c0017ff5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017ffa:	55                   	push   ebp
c0017ffb:	6a 09                	push   0x9
c0017ffd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018003:	e8 82 f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0018008:	5a                   	pop    edx
c0018009:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001800d:	e8 7c fb ff ff       	call   c0017b8e <RTC::completeRTCRefresh()>
c0018012:	83 c4 3c             	add    esp,0x3c
c0018015:	b0 01                	mov    al,0x1
c0018017:	5b                   	pop    ebx
c0018018:	5e                   	pop    esi
c0018019:	5f                   	pop    edi
c001801a:	5d                   	pop    ebp
c001801b:	c3                   	ret    

c001801c <rtcIRQHandler(regs*, void*)>:
c001801c:	53                   	push   ebx
c001801d:	83 ec 10             	sub    esp,0x10
c0018020:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018024:	6a 0c                	push   0xc
c0018026:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001802c:	e8 3f f1 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0018031:	83 c4 10             	add    esp,0x10
c0018034:	a8 80                	test   al,0x80
c0018036:	74 24                	je     c001805c <rtcIRQHandler(regs*, void*)+0x40>
c0018038:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001803f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018046:	66 ff 05 18 92 02 c0 	inc    WORD PTR ds:0xc0029218
c001804d:	75 0d                	jne    c001805c <rtcIRQHandler(regs*, void*)+0x40>
c001804f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018053:	83 c4 08             	add    esp,0x8
c0018056:	5b                   	pop    ebx
c0018057:	e9 32 fb ff ff       	jmp    c0017b8e <RTC::completeRTCRefresh()>
c001805c:	83 c4 08             	add    esp,0x8
c001805f:	5b                   	pop    ebx
c0018060:	c3                   	ret    
c0018061:	90                   	nop

c0018062 <RTC::RTC()>:
c0018062:	83 ec 1c             	sub    esp,0x1c
c0018065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018069:	83 ec 08             	sub    esp,0x8
c001806c:	68 6b 1f 02 c0       	push   0xc0021f6b
c0018071:	50                   	push   eax
c0018072:	e8 f3 3a ff ff       	call   c000bb6a <Clock::Clock(char const*)>
c0018077:	83 c4 10             	add    esp,0x10
c001807a:	ba 88 1f 02 c0       	mov    edx,0xc0021f88
c001807f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018083:	89 10                	mov    DWORD PTR [eax],edx
c0018085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018089:	83 ec 0c             	sub    esp,0xc
c001808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018090:	6a 01                	push   0x1
c0018092:	68 1c 80 01 c0       	push   0xc001801c
c0018097:	6a 08                	push   0x8
c0018099:	50                   	push   eax
c001809a:	e8 a7 3f ff ff       	call   c000c046 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001809f:	83 c4 20             	add    esp,0x20
c00180a2:	89 c2                	mov    edx,eax
c00180a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180a8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00180ae:	fa                   	cli    
c00180af:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00180b4:	83 c0 01             	add    eax,0x1
c00180b7:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00180bc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00180c1:	83 ec 08             	sub    esp,0x8
c00180c4:	6a 0b                	push   0xb
c00180c6:	50                   	push   eax
c00180c7:	e8 a4 f0 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00180cc:	83 c4 10             	add    esp,0x10
c00180cf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180d3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00180d8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00180dc:	83 ca 10             	or     edx,0x10
c00180df:	0f b6 d2             	movzx  edx,dl
c00180e2:	83 ec 04             	sub    esp,0x4
c00180e5:	52                   	push   edx
c00180e6:	6a 0b                	push   0xb
c00180e8:	50                   	push   eax
c00180e9:	e8 9c f1 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c00180ee:	83 c4 10             	add    esp,0x10
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180f8:	e8 91 fa ff ff       	call   c0017b8e <RTC::completeRTCRefresh()>
c00180fd:	83 c4 10             	add    esp,0x10
c0018100:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0018105:	83 e8 01             	sub    eax,0x1
c0018108:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001810d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0018112:	85 c0                	test   eax,eax
c0018114:	75 01                	jne    c0018117 <RTC::RTC()+0xb5>
c0018116:	fb                   	sti    
c0018117:	90                   	nop
c0018118:	83 c4 1c             	add    esp,0x1c
c001811b:	c3                   	ret    

c001811c <HalConsoleScroll(int, int)>:
c001811c:	83 ec 10             	sub    esp,0x10
c001811f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018127:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001812f:	90                   	nop
c0018130:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018135:	0f 8f e1 00 00 00    	jg     c001821c <HalConsoleScroll(int, int)+0x100>
c001813b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018143:	90                   	nop
c0018144:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001814c:	0f 8f be 00 00 00    	jg     c0018210 <HalConsoleScroll(int, int)+0xf4>
c0018152:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018156:	89 d0                	mov    eax,edx
c0018158:	c1 e0 02             	shl    eax,0x2
c001815b:	01 d0                	add    eax,edx
c001815d:	c1 e0 05             	shl    eax,0x5
c0018160:	89 c2                	mov    edx,eax
c0018162:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018166:	01 d0                	add    eax,edx
c0018168:	89 c2                	mov    edx,eax
c001816a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001816e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018171:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018175:	89 d0                	mov    eax,edx
c0018177:	c1 e0 02             	shl    eax,0x2
c001817a:	01 d0                	add    eax,edx
c001817c:	c1 e0 05             	shl    eax,0x5
c001817f:	89 c2                	mov    edx,eax
c0018181:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018185:	01 d0                	add    eax,edx
c0018187:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001818d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018191:	01 c2                	add    edx,eax
c0018193:	8a 01                	mov    al,BYTE PTR [ecx]
c0018195:	88 02                	mov    BYTE PTR [edx],al
c0018197:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001819c:	75 66                	jne    c0018204 <HalConsoleScroll(int, int)+0xe8>
c001819e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181a2:	83 e0 01             	and    eax,0x1
c00181a5:	74 39                	je     c00181e0 <HalConsoleScroll(int, int)+0xc4>
c00181a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181ab:	83 e0 0f             	and    eax,0xf
c00181ae:	88 c2                	mov    dl,al
c00181b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181b4:	c1 e0 04             	shl    eax,0x4
c00181b7:	09 d0                	or     eax,edx
c00181b9:	88 c1                	mov    cl,al
c00181bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00181bf:	89 d0                	mov    eax,edx
c00181c1:	c1 e0 02             	shl    eax,0x2
c00181c4:	01 d0                	add    eax,edx
c00181c6:	c1 e0 05             	shl    eax,0x5
c00181c9:	89 c2                	mov    edx,eax
c00181cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181cf:	01 d0                	add    eax,edx
c00181d1:	89 c2                	mov    edx,eax
c00181d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181d7:	01 d0                	add    eax,edx
c00181d9:	88 ca                	mov    dl,cl
c00181db:	88 10                	mov    BYTE PTR [eax],dl
c00181dd:	eb 25                	jmp    c0018204 <HalConsoleScroll(int, int)+0xe8>
c00181df:	90                   	nop
c00181e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00181e4:	89 d0                	mov    eax,edx
c00181e6:	c1 e0 02             	shl    eax,0x2
c00181e9:	01 d0                	add    eax,edx
c00181eb:	c1 e0 05             	shl    eax,0x5
c00181ee:	89 c2                	mov    edx,eax
c00181f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181f4:	01 d0                	add    eax,edx
c00181f6:	89 c2                	mov    edx,eax
c00181f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181fc:	01 d0                	add    eax,edx
c00181fe:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018201:	8d 76 00             	lea    esi,[esi+0x0]
c0018204:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018209:	e9 36 ff ff ff       	jmp    c0018144 <HalConsoleScroll(int, int)+0x28>
c001820e:	66 90                	xchg   ax,ax
c0018210:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018215:	e9 16 ff ff ff       	jmp    c0018130 <HalConsoleScroll(int, int)+0x14>
c001821a:	66 90                	xchg   ax,ax
c001821c:	90                   	nop
c001821d:	83 c4 10             	add    esp,0x10
c0018220:	c3                   	ret    
c0018221:	8d 76 00             	lea    esi,[esi+0x0]

c0018224 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018224:	83 ec 14             	sub    esp,0x14
c0018227:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001822b:	88 04 24             	mov    BYTE PTR [esp],al
c001822e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018231:	0f b6 c0             	movzx  eax,al
c0018234:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018238:	89 d1                	mov    ecx,edx
c001823a:	83 e1 0f             	and    ecx,0xf
c001823d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018241:	c1 e2 04             	shl    edx,0x4
c0018244:	0f b6 d2             	movzx  edx,dl
c0018247:	09 ca                	or     edx,ecx
c0018249:	c1 e2 08             	shl    edx,0x8
c001824c:	09 d0                	or     eax,edx
c001824e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018253:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001825b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001825f:	89 d0                	mov    eax,edx
c0018261:	c1 e0 02             	shl    eax,0x2
c0018264:	01 d0                	add    eax,edx
c0018266:	c1 e0 04             	shl    eax,0x4
c0018269:	89 c2                	mov    edx,eax
c001826b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001826f:	01 d0                	add    eax,edx
c0018271:	01 c0                	add    eax,eax
c0018273:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018277:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001827b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018280:	66 89 02             	mov    WORD PTR [edx],ax
c0018283:	90                   	nop
c0018284:	83 c4 14             	add    esp,0x14
c0018287:	c3                   	ret    

c0018288 <HalConsoleCursorUpdate(int, int)>:
c0018288:	83 ec 20             	sub    esp,0x20
c001828b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001828f:	89 c2                	mov    edx,eax
c0018291:	c1 e2 02             	shl    edx,0x2
c0018294:	01 d0                	add    eax,edx
c0018296:	c1 e0 04             	shl    eax,0x4
c0018299:	89 c2                	mov    edx,eax
c001829b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001829f:	01 d0                	add    eax,edx
c00182a1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00182a6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00182ad:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00182b2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00182b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00182ba:	ee                   	out    dx,al
c00182bb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00182c0:	0f b6 c0             	movzx  eax,al
c00182c3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00182ca:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00182ce:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00182d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182d6:	ee                   	out    dx,al
c00182d7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00182de:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00182e3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00182e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182eb:	ee                   	out    dx,al
c00182ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00182f1:	c1 e8 08             	shr    eax,0x8
c00182f4:	0f b6 c0             	movzx  eax,al
c00182f7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00182fe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018302:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018306:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001830a:	ee                   	out    dx,al
c001830b:	90                   	nop
c001830c:	83 c4 20             	add    esp,0x20
c001830f:	c3                   	ret    

c0018310 <FAT::getName()>:
c0018310:	b8 bc 1f 02 c0       	mov    eax,0xc0021fbc
c0018315:	c3                   	ret    
c0018316:	66 90                	xchg   ax,ax

c0018318 <FAT::tell(void*, unsigned long long*)>:
c0018318:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001831d:	75 09                	jne    c0018328 <FAT::tell(void*, unsigned long long*)+0x10>
c001831f:	b8 04 00 00 00       	mov    eax,0x4
c0018324:	c3                   	ret    
c0018325:	8d 76 00             	lea    esi,[esi+0x0]
c0018328:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001832d:	75 09                	jne    c0018338 <FAT::tell(void*, unsigned long long*)+0x20>
c001832f:	b8 04 00 00 00       	mov    eax,0x4
c0018334:	c3                   	ret    
c0018335:	8d 76 00             	lea    esi,[esi+0x0]
c0018338:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001833c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001833f:	ba 00 00 00 00       	mov    edx,0x0
c0018344:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018348:	89 01                	mov    DWORD PTR [ecx],eax
c001834a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001834d:	b8 00 00 00 00       	mov    eax,0x0
c0018352:	c3                   	ret    
c0018353:	90                   	nop

c0018354 <FAT::stat(void*, unsigned long long*)>:
c0018354:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018359:	75 09                	jne    c0018364 <FAT::stat(void*, unsigned long long*)+0x10>
c001835b:	b8 04 00 00 00       	mov    eax,0x4
c0018360:	c3                   	ret    
c0018361:	8d 76 00             	lea    esi,[esi+0x0]
c0018364:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018369:	75 09                	jne    c0018374 <FAT::stat(void*, unsigned long long*)+0x20>
c001836b:	b8 04 00 00 00       	mov    eax,0x4
c0018370:	c3                   	ret    
c0018371:	8d 76 00             	lea    esi,[esi+0x0]
c0018374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018378:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001837b:	ba 00 00 00 00       	mov    edx,0x0
c0018380:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018384:	89 01                	mov    DWORD PTR [ecx],eax
c0018386:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018389:	b8 00 00 00 00       	mov    eax,0x0
c001838e:	c3                   	ret    
c001838f:	90                   	nop

c0018390 <FAT::~FAT()>:
c0018390:	83 ec 0c             	sub    esp,0xc
c0018393:	ba 08 20 02 c0       	mov    edx,0xc0022008
c0018398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001839c:	89 10                	mov    DWORD PTR [eax],edx
c001839e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183a2:	83 ec 0c             	sub    esp,0xc
c00183a5:	50                   	push   eax
c00183a6:	e8 a9 2b ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	90                   	nop
c00183af:	83 c4 0c             	add    esp,0xc
c00183b2:	c3                   	ret    
c00183b3:	90                   	nop

c00183b4 <FAT::~FAT()>:
c00183b4:	83 ec 0c             	sub    esp,0xc
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183be:	e8 cd ff ff ff       	call   c0018390 <FAT::~FAT()>
c00183c3:	83 c4 10             	add    esp,0x10
c00183c6:	83 ec 08             	sub    esp,0x8
c00183c9:	6a 08                	push   0x8
c00183cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183cf:	e8 38 24 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	83 c4 0c             	add    esp,0xc
c00183da:	c3                   	ret    
c00183db:	90                   	nop

c00183dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00183dc:	83 ec 1c             	sub    esp,0x1c
c00183df:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00183e6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00183eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183ef:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00183f6:	83 f8 ff             	cmp    eax,0xffffffff
c00183f9:	75 35                	jne    c0018430 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00183fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183ff:	88 c2                	mov    dl,al
c0018401:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018406:	01 d0                	add    eax,edx
c0018408:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001840c:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c0018412:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018416:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c001841d:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018422:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018426:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c001842d:	eb 19                	jmp    c0018448 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001842f:	90                   	nop
c0018430:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018434:	88 c2                	mov    dl,al
c0018436:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001843a:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018441:	01 d0                	add    eax,edx
c0018443:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018447:	90                   	nop
c0018448:	83 ec 04             	sub    esp,0x4
c001844b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001844f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018453:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018457:	50                   	push   eax
c0018458:	e8 72 cb fe ff       	call   c0004fcf <f_getlabel>
c001845d:	83 c4 10             	add    esp,0x10
c0018460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018464:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018469:	75 09                	jne    c0018474 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001846b:	b8 00 00 00 00       	mov    eax,0x0
c0018470:	eb 0a                	jmp    c001847c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018472:	66 90                	xchg   ax,ax
c0018474:	b8 01 00 00 00       	mov    eax,0x1
c0018479:	8d 76 00             	lea    esi,[esi+0x0]
c001847c:	83 c4 1c             	add    esp,0x1c
c001847f:	c3                   	ret    

c0018480 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018480:	57                   	push   edi
c0018481:	83 ec 58             	sub    esp,0x58
c0018484:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001848c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018490:	b8 00 00 00 00       	mov    eax,0x0
c0018495:	b9 0f 00 00 00       	mov    ecx,0xf
c001849a:	fc                   	cld    
c001849b:	89 d7                	mov    edi,edx
c001849d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001849f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00184a3:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00184aa:	83 f8 ff             	cmp    eax,0xffffffff
c00184ad:	75 35                	jne    c00184e4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00184af:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184b3:	88 c2                	mov    dl,al
c00184b5:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00184ba:	01 d0                	add    eax,edx
c00184bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00184c0:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c00184c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00184ca:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c00184d1:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00184d6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00184da:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c00184e1:	eb 19                	jmp    c00184fc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00184e3:	90                   	nop
c00184e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184e8:	88 c2                	mov    dl,al
c00184ea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00184ee:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00184f5:	01 d0                	add    eax,edx
c00184f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00184fb:	90                   	nop
c00184fc:	83 ec 08             	sub    esp,0x8
c00184ff:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018503:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018507:	50                   	push   eax
c0018508:	e8 33 83 fe ff       	call   c0000840 <strcat>
c001850d:	83 c4 10             	add    esp,0x10
c0018510:	83 ec 0c             	sub    esp,0xc
c0018513:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018517:	50                   	push   eax
c0018518:	e8 03 cc fe ff       	call   c0005120 <f_setlabel>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018524:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018529:	75 09                	jne    c0018534 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001852b:	b8 00 00 00 00       	mov    eax,0x0
c0018530:	eb 0a                	jmp    c001853c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018532:	66 90                	xchg   ax,ax
c0018534:	b8 01 00 00 00       	mov    eax,0x1
c0018539:	8d 76 00             	lea    esi,[esi+0x0]
c001853c:	83 c4 58             	add    esp,0x58
c001853f:	5f                   	pop    edi
c0018540:	c3                   	ret    
c0018541:	90                   	nop
c0018542:	66 90                	xchg   ax,ax

c0018544 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018544:	83 ec 2c             	sub    esp,0x2c
c0018547:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001854f:	83 ec 08             	sub    esp,0x8
c0018552:	68 e0 1f 02 c0       	push   0xc0021fe0
c0018557:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001855b:	e8 f0 81 fe ff       	call   c0000750 <strcmp>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	85 c0                	test   eax,eax
c0018565:	0f 94 c0             	sete   al
c0018568:	0f b6 c0             	movzx  eax,al
c001856b:	85 c0                	test   eax,eax
c001856d:	74 0d                	je     c001857c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001856f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018577:	e9 c0 00 00 00       	jmp    c001863c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001857c:	83 ec 08             	sub    esp,0x8
c001857f:	68 d2 1f 02 c0       	push   0xc0021fd2
c0018584:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018588:	e8 c3 81 fe ff       	call   c0000750 <strcmp>
c001858d:	83 c4 10             	add    esp,0x10
c0018590:	85 c0                	test   eax,eax
c0018592:	0f 94 c0             	sete   al
c0018595:	0f b6 c0             	movzx  eax,al
c0018598:	85 c0                	test   eax,eax
c001859a:	74 10                	je     c00185ac <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001859c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00185a4:	e9 93 00 00 00       	jmp    c001863c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00185a9:	8d 76 00             	lea    esi,[esi+0x0]
c00185ac:	83 ec 08             	sub    esp,0x8
c00185af:	68 d8 1f 02 c0       	push   0xc0021fd8
c00185b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00185b8:	e8 93 81 fe ff       	call   c0000750 <strcmp>
c00185bd:	83 c4 10             	add    esp,0x10
c00185c0:	85 c0                	test   eax,eax
c00185c2:	0f 94 c0             	sete   al
c00185c5:	0f b6 c0             	movzx  eax,al
c00185c8:	85 c0                	test   eax,eax
c00185ca:	74 0c                	je     c00185d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00185cc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00185d4:	eb 66                	jmp    c001863c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00185d6:	66 90                	xchg   ax,ax
c00185d8:	83 ec 08             	sub    esp,0x8
c00185db:	68 3c f9 01 c0       	push   0xc001f93c
c00185e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00185e4:	e8 67 81 fe ff       	call   c0000750 <strcmp>
c00185e9:	83 c4 10             	add    esp,0x10
c00185ec:	85 c0                	test   eax,eax
c00185ee:	0f 94 c0             	sete   al
c00185f1:	0f b6 c0             	movzx  eax,al
c00185f4:	85 c0                	test   eax,eax
c00185f6:	74 0c                	je     c0018604 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00185f8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018600:	eb 3a                	jmp    c001863c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018602:	66 90                	xchg   ax,ax
c0018604:	83 ec 08             	sub    esp,0x8
c0018607:	68 de 1f 02 c0       	push   0xc0021fde
c001860c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018610:	e8 3b 81 fe ff       	call   c0000750 <strcmp>
c0018615:	83 c4 10             	add    esp,0x10
c0018618:	85 c0                	test   eax,eax
c001861a:	0f 94 c0             	sete   al
c001861d:	0f b6 c0             	movzx  eax,al
c0018620:	85 c0                	test   eax,eax
c0018622:	74 0c                	je     c0018630 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018624:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001862c:	eb 0e                	jmp    c001863c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001862e:	66 90                	xchg   ax,ax
c0018630:	b8 08 00 00 00       	mov    eax,0x8
c0018635:	e9 ea 00 00 00       	jmp    c0018724 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001863a:	66 90                	xchg   ax,ax
c001863c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018643:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018648:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001864c:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018653:	83 f8 ff             	cmp    eax,0xffffffff
c0018656:	75 34                	jne    c001868c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018658:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001865c:	88 c2                	mov    dl,al
c001865e:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018663:	01 d0                	add    eax,edx
c0018665:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018669:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c001866f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018673:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c001867a:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001867f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018683:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c001868a:	eb 18                	jmp    c00186a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001868c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018690:	88 c2                	mov    dl,al
c0018692:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018696:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001869d:	01 d0                	add    eax,edx
c001869f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00186a3:	90                   	nop
c00186a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186a8:	88 04 24             	mov    BYTE PTR [esp],al
c00186ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186b3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00186bb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00186c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00186c8:	83 ec 0c             	sub    esp,0xc
c00186cb:	68 00 20 00 00       	push   0x2000
c00186d0:	e8 d9 f3 fe ff       	call   c0007aae <malloc>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00186dc:	68 00 20 00 00       	push   0x2000
c00186e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186e9:	50                   	push   eax
c00186ea:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00186ee:	50                   	push   eax
c00186ef:	e8 29 cd fe ff       	call   c000541d <f_mkfs>
c00186f4:	83 c4 10             	add    esp,0x10
c00186f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00186fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018700:	75 0a                	jne    c001870c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018702:	b8 00 00 00 00       	mov    eax,0x0
c0018707:	eb 1b                	jmp    c0018724 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018709:	8d 76 00             	lea    esi,[esi+0x0]
c001870c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018711:	75 09                	jne    c001871c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018713:	b8 09 00 00 00       	mov    eax,0x9
c0018718:	eb 0a                	jmp    c0018724 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001871a:	66 90                	xchg   ax,ax
c001871c:	b8 01 00 00 00       	mov    eax,0x1
c0018721:	8d 76 00             	lea    esi,[esi+0x0]
c0018724:	83 c4 2c             	add    esp,0x2c
c0018727:	c3                   	ret    

c0018728 <FAT::tryMount(LogicalDisk*, int)>:
c0018728:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001872e:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018733:	83 f8 14             	cmp    eax,0x14
c0018736:	75 18                	jne    c0018750 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018738:	83 ec 0c             	sub    esp,0xc
c001873b:	68 e4 1f 02 c0       	push   0xc0021fe4
c0018740:	e8 cc 84 ff ff       	call   c0010c11 <KePanic(char const*)>
c0018745:	83 c4 10             	add    esp,0x10
c0018748:	b0 00                	mov    al,0x0
c001874a:	e9 ed 01 00 00       	jmp    c001893c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001874f:	90                   	nop
c0018750:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018757:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001875d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018763:	3d 00 02 00 00       	cmp    eax,0x200
c0018768:	74 0a                	je     c0018774 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001876a:	b0 00                	mov    al,0x0
c001876c:	e9 cb 01 00 00       	jmp    c001893c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018771:	8d 76 00             	lea    esi,[esi+0x0]
c0018774:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001877c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018783:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001878a:	83 f8 ff             	cmp    eax,0xffffffff
c001878d:	74 09                	je     c0018798 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001878f:	b0 01                	mov    al,0x1
c0018791:	e9 a6 01 00 00       	jmp    c001893c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018796:	66 90                	xchg   ax,ax
c0018798:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00187a2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00187aa:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00187b1:	88 c2                	mov    dl,al
c00187b3:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00187b8:	01 d0                	add    eax,edx
c00187ba:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00187c1:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c00187c7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00187ce:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c00187d5:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00187da:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00187e1:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c00187e8:	83 ec 0c             	sub    esp,0xc
c00187eb:	68 34 02 00 00       	push   0x234
c00187f0:	e8 b9 f2 fe ff       	call   c0007aae <malloc>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00187ff:	83 ec 04             	sub    esp,0x4
c0018802:	6a 00                	push   0x0
c0018804:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001880b:	50                   	push   eax
c001880c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018813:	e8 e0 b3 fe ff       	call   c0003bf8 <f_mount>
c0018818:	83 c4 10             	add    esp,0x10
c001881b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018822:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001882a:	74 1c                	je     c0018848 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001882c:	83 ec 0c             	sub    esp,0xc
c001882f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018836:	e8 93 f2 fe ff       	call   c0007ace <rfree>
c001883b:	83 c4 10             	add    esp,0x10
c001883e:	b0 00                	mov    al,0x0
c0018840:	e9 f7 00 00 00       	jmp    c001893c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018845:	8d 76 00             	lea    esi,[esi+0x0]
c0018848:	83 ec 04             	sub    esp,0x4
c001884b:	68 00 01 00 00       	push   0x100
c0018850:	6a 00                	push   0x0
c0018852:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018859:	50                   	push   eax
c001885a:	e8 91 7c fe ff       	call   c00004f0 <memset>
c001885f:	83 c4 10             	add    esp,0x10
c0018862:	83 ec 08             	sub    esp,0x8
c0018865:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001886c:	50                   	push   eax
c001886d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018874:	50                   	push   eax
c0018875:	e8 c6 7f fe ff       	call   c0000840 <strcat>
c001887a:	83 c4 10             	add    esp,0x10
c001887d:	83 ec 08             	sub    esp,0x8
c0018880:	68 f2 1f 02 c0       	push   0xc0021ff2
c0018885:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001888c:	50                   	push   eax
c001888d:	e8 ae 7f fe ff       	call   c0000840 <strcat>
c0018892:	83 c4 10             	add    esp,0x10
c0018895:	83 ec 04             	sub    esp,0x4
c0018898:	6a 01                	push   0x1
c001889a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00188a1:	50                   	push   eax
c00188a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00188a6:	50                   	push   eax
c00188a7:	e8 ae b3 fe ff       	call   c0003c5a <f_open>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00188b6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00188bd:	85 c0                	test   eax,eax
c00188bf:	74 0b                	je     c00188cc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00188c1:	78 31                	js     c00188f4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00188c3:	83 e8 04             	sub    eax,0x4
c00188c6:	83 f8 01             	cmp    eax,0x1
c00188c9:	77 29                	ja     c00188f4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00188cb:	90                   	nop
c00188cc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00188d4:	83 ec 0c             	sub    esp,0xc
c00188d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00188db:	50                   	push   eax
c00188dc:	e8 48 bb fe ff       	call   c0004429 <f_close>
c00188e1:	83 c4 10             	add    esp,0x10
c00188e4:	90                   	nop
c00188e5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00188ed:	85 c0                	test   eax,eax
c00188ef:	74 43                	je     c0018934 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00188f1:	eb 31                	jmp    c0018924 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00188f3:	90                   	nop
c00188f4:	83 ec 0c             	sub    esp,0xc
c00188f7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00188fe:	e8 cb f1 fe ff       	call   c0007ace <rfree>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	83 ec 04             	sub    esp,0x4
c0018909:	6a 00                	push   0x0
c001890b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018912:	50                   	push   eax
c0018913:	6a 00                	push   0x0
c0018915:	e8 de b2 fe ff       	call   c0003bf8 <f_mount>
c001891a:	83 c4 10             	add    esp,0x10
c001891d:	b0 00                	mov    al,0x0
c001891f:	eb 1b                	jmp    c001893c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018921:	8d 76 00             	lea    esi,[esi+0x0]
c0018924:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018929:	83 c0 01             	add    eax,0x1
c001892c:	a3 20 92 02 c0       	mov    ds:0xc0029220,eax
c0018931:	8d 76 00             	lea    esi,[esi+0x0]
c0018934:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001893b:	90                   	nop
c001893c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018942:	c3                   	ret    
c0018943:	90                   	nop

c0018944 <FAT::allocateSwapfile(char const*, int)>:
c0018944:	55                   	push   ebp
c0018945:	57                   	push   edi
c0018946:	56                   	push   esi
c0018947:	53                   	push   ebx
c0018948:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001894e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018959:	83 ec 0c             	sub    esp,0xc
c001895c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018963:	e8 46 f1 fe ff       	call   c0007aae <malloc>
c0018968:	83 c4 10             	add    esp,0x10
c001896b:	89 c7                	mov    edi,eax
c001896d:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0018972:	83 ec 04             	sub    esp,0x4
c0018975:	50                   	push   eax
c0018976:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001897d:	57                   	push   edi
c001897e:	e8 0d 28 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c0018983:	83 c4 10             	add    esp,0x10
c0018986:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001898d:	83 ec 04             	sub    esp,0x4
c0018990:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018994:	50                   	push   eax
c0018995:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018999:	50                   	push   eax
c001899a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00189a1:	e8 a8 2b ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c00189a6:	83 c4 10             	add    esp,0x10
c00189a9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00189b0:	c1 e0 14             	shl    eax,0x14
c00189b3:	89 c7                	mov    edi,eax
c00189b5:	89 c5                	mov    ebp,eax
c00189b7:	c1 fd 1f             	sar    ebp,0x1f
c00189ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189c2:	89 f9                	mov    ecx,edi
c00189c4:	31 c1                	xor    ecx,eax
c00189c6:	89 cb                	mov    ebx,ecx
c00189c8:	89 e9                	mov    ecx,ebp
c00189ca:	31 d1                	xor    ecx,edx
c00189cc:	89 ce                	mov    esi,ecx
c00189ce:	89 f0                	mov    eax,esi
c00189d0:	09 d8                	or     eax,ebx
c00189d2:	0f 84 9c 00 00 00    	je     c0018a74 <FAT::allocateSwapfile(char const*, int)+0x130>
c00189d8:	83 ec 0c             	sub    esp,0xc
c00189db:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00189e2:	e8 33 2a ff ff       	call   c000b41a <File::unlink()>
c00189e7:	83 c4 10             	add    esp,0x10
c00189ea:	83 ec 08             	sub    esp,0x8
c00189ed:	6a 12                	push   0x12
c00189ef:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00189f6:	e8 51 28 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c00189fb:	83 c4 10             	add    esp,0x10
c00189fe:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018a05:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018a0b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018a12:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018a19:	c1 e0 14             	shl    eax,0x14
c0018a1c:	83 ec 04             	sub    esp,0x4
c0018a1f:	6a 01                	push   0x1
c0018a21:	50                   	push   eax
c0018a22:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018a29:	e8 82 c8 fe ff       	call   c00052b0 <f_expand>
c0018a2e:	83 c4 10             	add    esp,0x10
c0018a31:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a3a:	83 c0 10             	add    eax,0x10
c0018a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a3f:	83 ec 0c             	sub    esp,0xc
c0018a42:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018a46:	52                   	push   edx
c0018a47:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018a4b:	52                   	push   edx
c0018a4c:	6a 00                	push   0x0
c0018a4e:	68 00 04 00 00       	push   0x400
c0018a53:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018a5a:	ff d0                	call   eax
c0018a5c:	83 c4 20             	add    esp,0x20
c0018a5f:	83 ec 0c             	sub    esp,0xc
c0018a62:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018a69:	e8 3c 28 ff ff       	call   c000b2aa <File::close()>
c0018a6e:	83 c4 10             	add    esp,0x10
c0018a71:	8d 76 00             	lea    esi,[esi+0x0]
c0018a74:	83 ec 08             	sub    esp,0x8
c0018a77:	6a 01                	push   0x1
c0018a79:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018a80:	e8 c7 27 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c0018a85:	83 c4 10             	add    esp,0x10
c0018a88:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a91:	83 c0 0c             	add    eax,0xc
c0018a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a96:	83 ec 0c             	sub    esp,0xc
c0018a99:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018a9d:	52                   	push   edx
c0018a9e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018aa2:	52                   	push   edx
c0018aa3:	6a 00                	push   0x0
c0018aa5:	6a 04                	push   0x4
c0018aa7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018aae:	ff d0                	call   eax
c0018ab0:	83 c4 20             	add    esp,0x20
c0018ab3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018aba:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018ac0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018ac7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0018ace:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018ad1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018ad8:	83 ec 0c             	sub    esp,0xc
c0018adb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018ae2:	e8 c3 27 ff ff       	call   c000b2aa <File::close()>
c0018ae7:	83 c4 10             	add    esp,0x10
c0018aea:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018af1:	ba 00 00 00 00       	mov    edx,0x0
c0018af6:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018afc:	5b                   	pop    ebx
c0018afd:	5e                   	pop    esi
c0018afe:	5f                   	pop    edi
c0018aff:	5d                   	pop    ebp
c0018b00:	c3                   	ret    
c0018b01:	90                   	nop
c0018b02:	66 90                	xchg   ax,ax

c0018b04 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018b04:	57                   	push   edi
c0018b05:	56                   	push   esi
c0018b06:	53                   	push   ebx
c0018b07:	81 ec 50 02 00 00    	sub    esp,0x250
c0018b0d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018b15:	74 0d                	je     c0018b24 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018b17:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018b1f:	75 0f                	jne    c0018b30 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018b21:	8d 76 00             	lea    esi,[esi+0x0]
c0018b24:	b8 04 00 00 00       	mov    eax,0x4
c0018b29:	e9 3a 01 00 00       	jmp    c0018c68 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018b2e:	66 90                	xchg   ax,ax
c0018b30:	83 ec 08             	sub    esp,0x8
c0018b33:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018b3a:	50                   	push   eax
c0018b3b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018b42:	e8 af bb fe ff       	call   c00046f6 <f_readdir>
c0018b47:	83 c4 10             	add    esp,0x10
c0018b4a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018b51:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018b58:	83 ec 0c             	sub    esp,0xc
c0018b5b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018b62:	83 c0 16             	add    eax,0x16
c0018b65:	50                   	push   eax
c0018b66:	e8 05 7a fe ff       	call   c0000570 <strlen>
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	ba 00 00 00 00       	mov    edx,0x0
c0018b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b77:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018b7b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018b82:	0f b6 c0             	movzx  eax,al
c0018b85:	83 e0 10             	and    eax,0x10
c0018b88:	74 0a                	je     c0018b94 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018b8a:	b8 02 00 00 00       	mov    eax,0x2
c0018b8f:	eb 0b                	jmp    c0018b9c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018b91:	8d 76 00             	lea    esi,[esi+0x0]
c0018b94:	b8 01 00 00 00       	mov    eax,0x1
c0018b99:	8d 76 00             	lea    esi,[esi+0x0]
c0018b9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ba0:	83 ec 08             	sub    esp,0x8
c0018ba3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018baa:	83 c0 16             	add    eax,0x16
c0018bad:	50                   	push   eax
c0018bae:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018bb2:	83 c0 10             	add    eax,0x10
c0018bb5:	50                   	push   eax
c0018bb6:	e8 85 7a fe ff       	call   c0000640 <strcpy>
c0018bbb:	83 c4 10             	add    esp,0x10
c0018bbe:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018bc5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018bcc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018bd0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018bd7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018bde:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018be5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018bec:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018bf3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018bfa:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018c01:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018c08:	89 c6                	mov    esi,eax
c0018c0a:	89 d7                	mov    edi,edx
c0018c0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c0e:	89 c8                	mov    eax,ecx
c0018c10:	89 fa                	mov    edx,edi
c0018c12:	89 f3                	mov    ebx,esi
c0018c14:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018c1b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018c22:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018c29:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018c30:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018c36:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018c3d:	0f be c0             	movsx  eax,al
c0018c40:	85 c0                	test   eax,eax
c0018c42:	75 08                	jne    c0018c4c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018c44:	b8 07 00 00 00       	mov    eax,0x7
c0018c49:	eb 1d                	jmp    c0018c68 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018c4b:	90                   	nop
c0018c4c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018c53:	85 c0                	test   eax,eax
c0018c55:	75 09                	jne    c0018c60 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018c57:	b8 00 00 00 00       	mov    eax,0x0
c0018c5c:	eb 0a                	jmp    c0018c68 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018c5e:	66 90                	xchg   ax,ax
c0018c60:	b8 01 00 00 00       	mov    eax,0x1
c0018c65:	8d 76 00             	lea    esi,[esi+0x0]
c0018c68:	81 c4 50 02 00 00    	add    esp,0x250
c0018c6e:	5b                   	pop    ebx
c0018c6f:	5e                   	pop    esi
c0018c70:	5f                   	pop    edi
c0018c71:	c3                   	ret    
c0018c72:	66 90                	xchg   ax,ax

c0018c74 <FAT::read(void*, unsigned long, void*, int*)>:
c0018c74:	83 ec 1c             	sub    esp,0x1c
c0018c77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c7c:	74 0a                	je     c0018c88 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018c7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018c83:	75 0b                	jne    c0018c90 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018c85:	8d 76 00             	lea    esi,[esi+0x0]
c0018c88:	b8 04 00 00 00       	mov    eax,0x4
c0018c8d:	eb 41                	jmp    c0018cd0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018c8f:	90                   	nop
c0018c90:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c94:	50                   	push   eax
c0018c95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018ca1:	e8 77 b2 fe ff       	call   c0003f1d <f_read>
c0018ca6:	83 c4 10             	add    esp,0x10
c0018ca9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cb1:	89 c2                	mov    edx,eax
c0018cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cb7:	89 10                	mov    DWORD PTR [eax],edx
c0018cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018cbd:	85 c0                	test   eax,eax
c0018cbf:	75 07                	jne    c0018cc8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018cc1:	b8 00 00 00 00       	mov    eax,0x0
c0018cc6:	eb 08                	jmp    c0018cd0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018cc8:	b8 01 00 00 00       	mov    eax,0x1
c0018ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd0:	83 c4 1c             	add    esp,0x1c
c0018cd3:	c3                   	ret    

c0018cd4 <FAT::write(void*, unsigned long, void*, int*)>:
c0018cd4:	83 ec 1c             	sub    esp,0x1c
c0018cd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018cdc:	74 0a                	je     c0018ce8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018cde:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018ce3:	75 0b                	jne    c0018cf0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce8:	b8 04 00 00 00       	mov    eax,0x4
c0018ced:	eb 41                	jmp    c0018d30 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018cef:	90                   	nop
c0018cf0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018cf4:	50                   	push   eax
c0018cf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018cfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d01:	e8 16 b4 fe ff       	call   c000411c <f_write>
c0018d06:	83 c4 10             	add    esp,0x10
c0018d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d11:	89 c2                	mov    edx,eax
c0018d13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d17:	89 10                	mov    DWORD PTR [eax],edx
c0018d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d1d:	85 c0                	test   eax,eax
c0018d1f:	75 07                	jne    c0018d28 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018d21:	b8 00 00 00 00       	mov    eax,0x0
c0018d26:	eb 08                	jmp    c0018d30 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018d28:	b8 01 00 00 00       	mov    eax,0x1
c0018d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d30:	83 c4 1c             	add    esp,0x1c
c0018d33:	c3                   	ret    

c0018d34 <FAT::close(void*)>:
c0018d34:	83 ec 1c             	sub    esp,0x1c
c0018d37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018d3c:	75 0a                	jne    c0018d48 <FAT::close(void*)+0x14>
c0018d3e:	b8 04 00 00 00       	mov    eax,0x4
c0018d43:	eb 3f                	jmp    c0018d84 <FAT::close(void*)+0x50>
c0018d45:	8d 76 00             	lea    esi,[esi+0x0]
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d4f:	e8 d5 b6 fe ff       	call   c0004429 <f_close>
c0018d54:	83 c4 10             	add    esp,0x10
c0018d57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d5b:	83 ec 0c             	sub    esp,0xc
c0018d5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d62:	e8 57 ed fe ff       	call   c0007abe <free>
c0018d67:	83 c4 10             	add    esp,0x10
c0018d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d6e:	85 c0                	test   eax,eax
c0018d70:	75 0a                	jne    c0018d7c <FAT::close(void*)+0x48>
c0018d72:	b8 00 00 00 00       	mov    eax,0x0
c0018d77:	eb 0b                	jmp    c0018d84 <FAT::close(void*)+0x50>
c0018d79:	8d 76 00             	lea    esi,[esi+0x0]
c0018d7c:	b8 01 00 00 00       	mov    eax,0x1
c0018d81:	8d 76 00             	lea    esi,[esi+0x0]
c0018d84:	83 c4 1c             	add    esp,0x1c
c0018d87:	c3                   	ret    

c0018d88 <FAT::closeDir(void*)>:
c0018d88:	83 ec 1c             	sub    esp,0x1c
c0018d8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018d90:	75 0a                	jne    c0018d9c <FAT::closeDir(void*)+0x14>
c0018d92:	b8 04 00 00 00       	mov    eax,0x4
c0018d97:	eb 3f                	jmp    c0018dd8 <FAT::closeDir(void*)+0x50>
c0018d99:	8d 76 00             	lea    esi,[esi+0x0]
c0018d9c:	83 ec 0c             	sub    esp,0xc
c0018d9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018da3:	e8 2c b9 fe ff       	call   c00046d4 <f_closedir>
c0018da8:	83 c4 10             	add    esp,0x10
c0018dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018daf:	83 ec 0c             	sub    esp,0xc
c0018db2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018db6:	e8 03 ed fe ff       	call   c0007abe <free>
c0018dbb:	83 c4 10             	add    esp,0x10
c0018dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018dc2:	85 c0                	test   eax,eax
c0018dc4:	75 0a                	jne    c0018dd0 <FAT::closeDir(void*)+0x48>
c0018dc6:	b8 00 00 00 00       	mov    eax,0x0
c0018dcb:	eb 0b                	jmp    c0018dd8 <FAT::closeDir(void*)+0x50>
c0018dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018dd0:	b8 01 00 00 00       	mov    eax,0x1
c0018dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018dd8:	83 c4 1c             	add    esp,0x1c
c0018ddb:	c3                   	ret    

c0018ddc <FAT::truncate(void*, unsigned long long)>:
c0018ddc:	83 ec 2c             	sub    esp,0x2c
c0018ddf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018de3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018de7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018deb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018def:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018df4:	75 0a                	jne    c0018e00 <FAT::truncate(void*, unsigned long long)+0x24>
c0018df6:	b8 04 00 00 00       	mov    eax,0x4
c0018dfb:	eb 47                	jmp    c0018e44 <FAT::truncate(void*, unsigned long long)+0x68>
c0018dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018e00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018e04:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018e07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018e13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e17:	83 ec 08             	sub    esp,0x8
c0018e1a:	50                   	push   eax
c0018e1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018e1f:	e8 34 b6 fe ff       	call   c0004458 <f_lseek>
c0018e24:	83 c4 10             	add    esp,0x10
c0018e27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e2f:	85 c0                	test   eax,eax
c0018e31:	75 09                	jne    c0018e3c <FAT::truncate(void*, unsigned long long)+0x60>
c0018e33:	b8 00 00 00 00       	mov    eax,0x0
c0018e38:	eb 0a                	jmp    c0018e44 <FAT::truncate(void*, unsigned long long)+0x68>
c0018e3a:	66 90                	xchg   ax,ax
c0018e3c:	b8 01 00 00 00       	mov    eax,0x1
c0018e41:	8d 76 00             	lea    esi,[esi+0x0]
c0018e44:	83 c4 2c             	add    esp,0x2c
c0018e47:	c3                   	ret    

c0018e48 <FAT::seek(void*, unsigned long long)>:
c0018e48:	83 ec 2c             	sub    esp,0x2c
c0018e4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018e57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e5b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018e60:	75 0a                	jne    c0018e6c <FAT::seek(void*, unsigned long long)+0x24>
c0018e62:	b8 04 00 00 00       	mov    eax,0x4
c0018e67:	eb 33                	jmp    c0018e9c <FAT::seek(void*, unsigned long long)+0x54>
c0018e69:	8d 76 00             	lea    esi,[esi+0x0]
c0018e6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e70:	83 ec 08             	sub    esp,0x8
c0018e73:	50                   	push   eax
c0018e74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018e78:	e8 db b5 fe ff       	call   c0004458 <f_lseek>
c0018e7d:	83 c4 10             	add    esp,0x10
c0018e80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e88:	85 c0                	test   eax,eax
c0018e8a:	75 08                	jne    c0018e94 <FAT::seek(void*, unsigned long long)+0x4c>
c0018e8c:	b8 00 00 00 00       	mov    eax,0x0
c0018e91:	eb 09                	jmp    c0018e9c <FAT::seek(void*, unsigned long long)+0x54>
c0018e93:	90                   	nop
c0018e94:	b8 01 00 00 00       	mov    eax,0x1
c0018e99:	8d 76 00             	lea    esi,[esi+0x0]
c0018e9c:	83 c4 2c             	add    esp,0x2c
c0018e9f:	c3                   	ret    

c0018ea0 <fatWrapperReadDisk>:
c0018ea0:	53                   	push   ebx
c0018ea1:	83 ec 18             	sub    esp,0x18
c0018ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ea8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018eac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018eb1:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0018eb8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018ebc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ec0:	ba 00 00 00 00       	mov    edx,0x0
c0018ec5:	83 ec 0c             	sub    esp,0xc
c0018ec8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018ecc:	53                   	push   ebx
c0018ecd:	52                   	push   edx
c0018ece:	50                   	push   eax
c0018ecf:	51                   	push   ecx
c0018ed0:	e8 a7 45 ff ff       	call   c000d47c <LogicalDisk::read(unsigned long long, int, void*)>
c0018ed5:	83 c4 20             	add    esp,0x20
c0018ed8:	83 c4 18             	add    esp,0x18
c0018edb:	5b                   	pop    ebx
c0018edc:	c3                   	ret    
c0018edd:	8d 76 00             	lea    esi,[esi+0x0]

c0018ee0 <fatWrapperWriteDisk>:
c0018ee0:	53                   	push   ebx
c0018ee1:	83 ec 18             	sub    esp,0x18
c0018ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ee8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018eec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ef1:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0018ef8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018efc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f00:	ba 00 00 00 00       	mov    edx,0x0
c0018f05:	83 ec 0c             	sub    esp,0xc
c0018f08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018f0c:	53                   	push   ebx
c0018f0d:	52                   	push   edx
c0018f0e:	50                   	push   eax
c0018f0f:	51                   	push   ecx
c0018f10:	e8 d3 45 ff ff       	call   c000d4e8 <LogicalDisk::write(unsigned long long, int, void*)>
c0018f15:	83 c4 20             	add    esp,0x20
c0018f18:	83 c4 18             	add    esp,0x18
c0018f1b:	5b                   	pop    ebx
c0018f1c:	c3                   	ret    
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]

c0018f20 <fatWrapperIoctl>:
c0018f20:	53                   	push   ebx
c0018f21:	83 ec 28             	sub    esp,0x28
c0018f24:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018f28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018f2c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018f30:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018f34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f39:	83 f8 02             	cmp    eax,0x2
c0018f3c:	75 32                	jne    c0018f70 <fatWrapperIoctl+0x50>
c0018f3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018f46:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f4b:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0018f52:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f58:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f62:	66 89 02             	mov    WORD PTR [edx],ax
c0018f65:	b8 00 00 00 00       	mov    eax,0x0
c0018f6a:	e9 c5 00 00 00       	jmp    c0019034 <fatWrapperIoctl+0x114>
c0018f6f:	90                   	nop
c0018f70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f75:	83 f8 01             	cmp    eax,0x1
c0018f78:	75 6a                	jne    c0018fe4 <fatWrapperIoctl+0xc4>
c0018f7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f82:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f87:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0018f8e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f94:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018f9a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018fa0:	89 c8                	mov    eax,ecx
c0018fa2:	89 da                	mov    edx,ebx
c0018fa4:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018fa8:	c1 e0 0a             	shl    eax,0xa
c0018fab:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018fb0:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c0018fb7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018fbd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018fc3:	89 cb                	mov    ebx,ecx
c0018fc5:	c1 fb 1f             	sar    ebx,0x1f
c0018fc8:	53                   	push   ebx
c0018fc9:	51                   	push   ecx
c0018fca:	52                   	push   edx
c0018fcb:	50                   	push   eax
c0018fcc:	e8 6f 5b 00 00       	call   c001eb40 <__udivdi3>
c0018fd1:	83 c4 10             	add    esp,0x10
c0018fd4:	89 c2                	mov    edx,eax
c0018fd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018fda:	89 10                	mov    DWORD PTR [eax],edx
c0018fdc:	b8 00 00 00 00       	mov    eax,0x0
c0018fe1:	eb 51                	jmp    c0019034 <fatWrapperIoctl+0x114>
c0018fe3:	90                   	nop
c0018fe4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fe9:	85 c0                	test   eax,eax
c0018feb:	75 07                	jne    c0018ff4 <fatWrapperIoctl+0xd4>
c0018fed:	b8 00 00 00 00       	mov    eax,0x0
c0018ff2:	eb 40                	jmp    c0019034 <fatWrapperIoctl+0x114>
c0018ff4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ff9:	83 f8 03             	cmp    eax,0x3
c0018ffc:	75 1a                	jne    c0019018 <fatWrapperIoctl+0xf8>
c0018ffe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019002:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019006:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001900a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019010:	b8 00 00 00 00       	mov    eax,0x0
c0019015:	eb 1d                	jmp    c0019034 <fatWrapperIoctl+0x114>
c0019017:	90                   	nop
c0019018:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001901d:	83 f8 04             	cmp    eax,0x4
c0019020:	75 0a                	jne    c001902c <fatWrapperIoctl+0x10c>
c0019022:	b8 00 00 00 00       	mov    eax,0x0
c0019027:	eb 0b                	jmp    c0019034 <fatWrapperIoctl+0x114>
c0019029:	8d 76 00             	lea    esi,[esi+0x0]
c001902c:	b8 04 00 00 00       	mov    eax,0x4
c0019031:	8d 76 00             	lea    esi,[esi+0x0]
c0019034:	83 c4 28             	add    esp,0x28
c0019037:	5b                   	pop    ebx
c0019038:	c3                   	ret    
c0019039:	90                   	nop
c001903a:	66 90                	xchg   ax,ax

c001903c <FAT::FAT()>:
c001903c:	83 ec 1c             	sub    esp,0x1c
c001903f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019043:	83 ec 0c             	sub    esp,0xc
c0019046:	50                   	push   eax
c0019047:	e8 e4 1e ff ff       	call   c000af30 <Filesystem::Filesystem()>
c001904c:	83 c4 10             	add    esp,0x10
c001904f:	ba 08 20 02 c0       	mov    edx,0xc0022008
c0019054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019058:	89 10                	mov    DWORD PTR [eax],edx
c001905a:	c7 05 20 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029220,0x0
c0019064:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001906c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019071:	7f 19                	jg     c001908c <FAT::FAT()+0x50>
c0019073:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019077:	c7 04 85 40 92 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6dc0],0xffffffff
c0019082:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019087:	eb e3                	jmp    c001906c <FAT::FAT()+0x30>
c0019089:	8d 76 00             	lea    esi,[esi+0x0]
c001908c:	90                   	nop
c001908d:	83 c4 1c             	add    esp,0x1c
c0019090:	c3                   	ret    
c0019091:	90                   	nop
c0019092:	66 90                	xchg   ax,ax

c0019094 <FAT::fixFilepath(char*)>:
c0019094:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019098:	8a 00                	mov    al,BYTE PTR [eax]
c001909a:	0f be c0             	movsx  eax,al
c001909d:	83 f8 40             	cmp    eax,0x40
c00190a0:	7e 2e                	jle    c00190d0 <FAT::fixFilepath(char*)+0x3c>
c00190a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190a6:	8a 00                	mov    al,BYTE PTR [eax]
c00190a8:	83 e8 41             	sub    eax,0x41
c00190ab:	88 c2                	mov    dl,al
c00190ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190b1:	88 10                	mov    BYTE PTR [eax],dl
c00190b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190b7:	8a 00                	mov    al,BYTE PTR [eax]
c00190b9:	0f be c0             	movsx  eax,al
c00190bc:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00190c3:	83 c0 30             	add    eax,0x30
c00190c6:	88 c2                	mov    dl,al
c00190c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190cc:	88 10                	mov    BYTE PTR [eax],dl
c00190ce:	66 90                	xchg   ax,ax
c00190d0:	90                   	nop
c00190d1:	c3                   	ret    
c00190d2:	66 90                	xchg   ax,ax

c00190d4 <FAT::open(char const*, void**, FileOpenMode)>:
c00190d4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00190da:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00190e2:	74 0c                	je     c00190f0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00190e4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00190ec:	75 0e                	jne    c00190fc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00190ee:	66 90                	xchg   ax,ax
c00190f0:	b8 04 00 00 00       	mov    eax,0x4
c00190f5:	e9 46 01 00 00       	jmp    c0019240 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00190fa:	66 90                	xchg   ax,ax
c00190fc:	83 ec 08             	sub    esp,0x8
c00190ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019106:	8d 44 24 14          	lea    eax,[esp+0x14]
c001910a:	50                   	push   eax
c001910b:	e8 30 75 fe ff       	call   c0000640 <strcpy>
c0019110:	83 c4 10             	add    esp,0x10
c0019113:	83 ec 08             	sub    esp,0x8
c0019116:	8d 44 24 10          	lea    eax,[esp+0x10]
c001911a:	50                   	push   eax
c001911b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019122:	e8 6d ff ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c0019127:	83 c4 10             	add    esp,0x10
c001912a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019132:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019139:	83 e0 01             	and    eax,0x1
c001913c:	74 12                	je     c0019150 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001913e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019145:	83 c8 01             	or     eax,0x1
c0019148:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001914f:	90                   	nop
c0019150:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019157:	83 e0 04             	and    eax,0x4
c001915a:	74 24                	je     c0019180 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001915c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019163:	83 c8 30             	or     eax,0x30
c0019166:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001916d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019174:	83 c8 02             	or     eax,0x2
c0019177:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001917e:	66 90                	xchg   ax,ax
c0019180:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019187:	83 e0 02             	and    eax,0x2
c001918a:	74 14                	je     c00191a0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001918c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019193:	83 c8 02             	or     eax,0x2
c0019196:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001919d:	8d 76 00             	lea    esi,[esi+0x0]
c00191a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00191a7:	83 e0 08             	and    eax,0x8
c00191aa:	74 14                	je     c00191c0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00191ac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00191b3:	83 c8 04             	or     eax,0x4
c00191b6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00191bd:	8d 76 00             	lea    esi,[esi+0x0]
c00191c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00191c7:	83 e0 10             	and    eax,0x10
c00191ca:	74 14                	je     c00191e0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00191cc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00191d3:	83 c8 08             	or     eax,0x8
c00191d6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00191dd:	8d 76 00             	lea    esi,[esi+0x0]
c00191e0:	83 ec 0c             	sub    esp,0xc
c00191e3:	68 28 02 00 00       	push   0x228
c00191e8:	e8 c1 e8 fe ff       	call   c0007aae <malloc>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	89 c2                	mov    edx,eax
c00191f2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00191f9:	89 10                	mov    DWORD PTR [eax],edx
c00191fb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019203:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001920a:	8b 00                	mov    eax,DWORD PTR [eax]
c001920c:	83 ec 04             	sub    esp,0x4
c001920f:	52                   	push   edx
c0019210:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019214:	52                   	push   edx
c0019215:	50                   	push   eax
c0019216:	e8 3f aa fe ff       	call   c0003c5a <f_open>
c001921b:	83 c4 10             	add    esp,0x10
c001921e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019225:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001922d:	74 09                	je     c0019238 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001922f:	b8 01 00 00 00       	mov    eax,0x1
c0019234:	eb 0a                	jmp    c0019240 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019236:	66 90                	xchg   ax,ax
c0019238:	b8 00 00 00 00       	mov    eax,0x0
c001923d:	8d 76 00             	lea    esi,[esi+0x0]
c0019240:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019246:	c3                   	ret    
c0019247:	90                   	nop

c0019248 <FAT::openDir(char const*, void**)>:
c0019248:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001924e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019256:	74 0c                	je     c0019264 <FAT::openDir(char const*, void**)+0x1c>
c0019258:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019260:	75 0e                	jne    c0019270 <FAT::openDir(char const*, void**)+0x28>
c0019262:	66 90                	xchg   ax,ax
c0019264:	b8 04 00 00 00       	mov    eax,0x4
c0019269:	e9 82 00 00 00       	jmp    c00192f0 <FAT::openDir(char const*, void**)+0xa8>
c001926e:	66 90                	xchg   ax,ax
c0019270:	83 ec 08             	sub    esp,0x8
c0019273:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001927a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001927e:	50                   	push   eax
c001927f:	e8 bc 73 fe ff       	call   c0000640 <strcpy>
c0019284:	83 c4 10             	add    esp,0x10
c0019287:	83 ec 08             	sub    esp,0x8
c001928a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001928e:	50                   	push   eax
c001928f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019296:	e8 f9 fd ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c001929b:	83 c4 10             	add    esp,0x10
c001929e:	83 ec 0c             	sub    esp,0xc
c00192a1:	6a 30                	push   0x30
c00192a3:	e8 06 e8 fe ff       	call   c0007aae <malloc>
c00192a8:	83 c4 10             	add    esp,0x10
c00192ab:	89 c2                	mov    edx,eax
c00192ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00192b4:	89 10                	mov    DWORD PTR [eax],edx
c00192b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00192bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00192bf:	83 ec 08             	sub    esp,0x8
c00192c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00192c6:	52                   	push   edx
c00192c7:	50                   	push   eax
c00192c8:	e8 3c b3 fe ff       	call   c0004609 <f_opendir>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00192d7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00192df:	74 07                	je     c00192e8 <FAT::openDir(char const*, void**)+0xa0>
c00192e1:	b8 01 00 00 00       	mov    eax,0x1
c00192e6:	eb 08                	jmp    c00192f0 <FAT::openDir(char const*, void**)+0xa8>
c00192e8:	b8 00 00 00 00       	mov    eax,0x0
c00192ed:	8d 76 00             	lea    esi,[esi+0x0]
c00192f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00192f6:	c3                   	ret    
c00192f7:	90                   	nop

c00192f8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00192f8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00192fe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019306:	75 0c                	jne    c0019314 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019308:	b8 04 00 00 00       	mov    eax,0x4
c001930d:	e9 d6 00 00 00       	jmp    c00193e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019312:	66 90                	xchg   ax,ax
c0019314:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001931c:	75 0a                	jne    c0019328 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001931e:	b8 04 00 00 00       	mov    eax,0x4
c0019323:	e9 c0 00 00 00       	jmp    c00193e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019328:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019330:	75 0a                	jne    c001933c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019332:	b8 04 00 00 00       	mov    eax,0x4
c0019337:	e9 ac 00 00 00       	jmp    c00193e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001933c:	83 ec 08             	sub    esp,0x8
c001933f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019346:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001934d:	50                   	push   eax
c001934e:	e8 ed 72 fe ff       	call   c0000640 <strcpy>
c0019353:	83 c4 10             	add    esp,0x10
c0019356:	83 ec 08             	sub    esp,0x8
c0019359:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019360:	50                   	push   eax
c0019361:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019368:	e8 27 fd ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	83 ec 08             	sub    esp,0x8
c0019373:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019377:	50                   	push   eax
c0019378:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001937f:	50                   	push   eax
c0019380:	e8 03 b4 fe ff       	call   c0004788 <f_stat>
c0019385:	83 c4 10             	add    esp,0x10
c0019388:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001938f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019396:	85 c0                	test   eax,eax
c0019398:	74 0a                	je     c00193a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001939a:	83 f8 04             	cmp    eax,0x4
c001939d:	74 39                	je     c00193d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001939f:	eb 3f                	jmp    c00193e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00193a1:	8d 76 00             	lea    esi,[esi+0x0]
c00193a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00193a8:	0f b6 c0             	movzx  eax,al
c00193ab:	83 e0 10             	and    eax,0x10
c00193ae:	0f 95 c2             	setne  dl
c00193b1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00193b8:	88 10                	mov    BYTE PTR [eax],dl
c00193ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193be:	ba 00 00 00 00       	mov    edx,0x0
c00193c3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00193ca:	89 01                	mov    DWORD PTR [ecx],eax
c00193cc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00193cf:	b8 00 00 00 00       	mov    eax,0x0
c00193d4:	eb 12                	jmp    c00193e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00193d6:	66 90                	xchg   ax,ax
c00193d8:	b8 02 00 00 00       	mov    eax,0x2
c00193dd:	eb 09                	jmp    c00193e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00193df:	90                   	nop
c00193e0:	b8 01 00 00 00       	mov    eax,0x1
c00193e5:	8d 76 00             	lea    esi,[esi+0x0]
c00193e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00193ee:	c3                   	ret    
c00193ef:	90                   	nop

c00193f0 <FAT::unlink(char const*)>:
c00193f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00193f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00193fe:	75 08                	jne    c0019408 <FAT::unlink(char const*)+0x18>
c0019400:	b8 04 00 00 00       	mov    eax,0x4
c0019405:	eb 61                	jmp    c0019468 <FAT::unlink(char const*)+0x78>
c0019407:	90                   	nop
c0019408:	83 ec 08             	sub    esp,0x8
c001940b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019412:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019416:	50                   	push   eax
c0019417:	e8 24 72 fe ff       	call   c0000640 <strcpy>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	83 ec 08             	sub    esp,0x8
c0019422:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019426:	50                   	push   eax
c0019427:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001942e:	e8 61 fc ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c0019433:	83 c4 10             	add    esp,0x10
c0019436:	83 ec 0c             	sub    esp,0xc
c0019439:	8d 44 24 18          	lea    eax,[esp+0x18]
c001943d:	50                   	push   eax
c001943e:	e8 b7 b5 fe ff       	call   c00049fa <f_unlink>
c0019443:	83 c4 10             	add    esp,0x10
c0019446:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001944d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019454:	85 c0                	test   eax,eax
c0019456:	75 08                	jne    c0019460 <FAT::unlink(char const*)+0x70>
c0019458:	b8 00 00 00 00       	mov    eax,0x0
c001945d:	eb 09                	jmp    c0019468 <FAT::unlink(char const*)+0x78>
c001945f:	90                   	nop
c0019460:	b8 01 00 00 00       	mov    eax,0x1
c0019465:	8d 76 00             	lea    esi,[esi+0x0]
c0019468:	81 c4 1c 01 00 00    	add    esp,0x11c
c001946e:	c3                   	ret    
c001946f:	90                   	nop

c0019470 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019470:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019476:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001947d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019484:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019488:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001948c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019494:	75 0a                	jne    c00194a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019496:	b8 04 00 00 00       	mov    eax,0x4
c001949b:	e9 7c 01 00 00       	jmp    c001961c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c00194a0:	83 ec 08             	sub    esp,0x8
c00194a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00194aa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194ae:	50                   	push   eax
c00194af:	e8 8c 71 fe ff       	call   c0000640 <strcpy>
c00194b4:	83 c4 10             	add    esp,0x10
c00194b7:	83 ec 08             	sub    esp,0x8
c00194ba:	8d 44 24 20          	lea    eax,[esp+0x20]
c00194be:	50                   	push   eax
c00194bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00194c6:	e8 c9 fb ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00194d6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00194de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194e3:	83 e0 01             	and    eax,0x1
c00194e6:	74 14                	je     c00194fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c00194e8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00194ef:	83 c8 01             	or     eax,0x1
c00194f2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00194f9:	8d 76 00             	lea    esi,[esi+0x0]
c00194fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019501:	83 e0 02             	and    eax,0x2
c0019504:	74 12                	je     c0019518 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019506:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001950d:	83 c8 20             	or     eax,0x20
c0019510:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019517:	90                   	nop
c0019518:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001951d:	83 e0 04             	and    eax,0x4
c0019520:	74 12                	je     c0019534 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019522:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019529:	83 c8 04             	or     eax,0x4
c001952c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019533:	90                   	nop
c0019534:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019539:	83 e0 08             	and    eax,0x8
c001953c:	74 12                	je     c0019550 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001953e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019545:	83 c8 02             	or     eax,0x2
c0019548:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001954f:	90                   	nop
c0019550:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019555:	83 e0 01             	and    eax,0x1
c0019558:	74 12                	je     c001956c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001955a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019561:	83 c8 01             	or     eax,0x1
c0019564:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001956b:	90                   	nop
c001956c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019571:	83 e0 02             	and    eax,0x2
c0019574:	74 12                	je     c0019588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019576:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001957d:	83 c8 20             	or     eax,0x20
c0019580:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019587:	90                   	nop
c0019588:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001958d:	83 e0 04             	and    eax,0x4
c0019590:	74 12                	je     c00195a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019592:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019599:	83 c8 04             	or     eax,0x4
c001959c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00195a3:	90                   	nop
c00195a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195a9:	83 e0 08             	and    eax,0x8
c00195ac:	74 12                	je     c00195c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00195ae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00195b5:	83 c8 02             	or     eax,0x2
c00195b8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00195bf:	90                   	nop
c00195c0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00195c7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00195ce:	09 d0                	or     eax,edx
c00195d0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00195d7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00195df:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00195e7:	83 ec 04             	sub    esp,0x4
c00195ea:	52                   	push   edx
c00195eb:	50                   	push   eax
c00195ec:	8d 44 24 24          	lea    eax,[esp+0x24]
c00195f0:	50                   	push   eax
c00195f1:	e8 79 b8 fe ff       	call   c0004e6f <f_chmod>
c00195f6:	83 c4 10             	add    esp,0x10
c00195f9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019600:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019607:	85 c0                	test   eax,eax
c0019609:	75 09                	jne    c0019614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001960b:	b8 00 00 00 00       	mov    eax,0x0
c0019610:	eb 0a                	jmp    c001961c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019612:	66 90                	xchg   ax,ax
c0019614:	b8 01 00 00 00       	mov    eax,0x1
c0019619:	8d 76 00             	lea    esi,[esi+0x0]
c001961c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019622:	c3                   	ret    
c0019623:	90                   	nop

c0019624 <FAT::rename(char const*, char const*)>:
c0019624:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001962a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019632:	74 0c                	je     c0019640 <FAT::rename(char const*, char const*)+0x1c>
c0019634:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001963c:	75 0e                	jne    c001964c <FAT::rename(char const*, char const*)+0x28>
c001963e:	66 90                	xchg   ax,ax
c0019640:	b8 04 00 00 00       	mov    eax,0x4
c0019645:	e9 9e 00 00 00       	jmp    c00196e8 <FAT::rename(char const*, char const*)+0xc4>
c001964a:	66 90                	xchg   ax,ax
c001964c:	83 ec 08             	sub    esp,0x8
c001964f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019656:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001965d:	50                   	push   eax
c001965e:	e8 dd 6f fe ff       	call   c0000640 <strcpy>
c0019663:	83 c4 10             	add    esp,0x10
c0019666:	83 ec 08             	sub    esp,0x8
c0019669:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019670:	50                   	push   eax
c0019671:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019678:	e8 17 fa ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c001967d:	83 c4 10             	add    esp,0x10
c0019680:	83 ec 08             	sub    esp,0x8
c0019683:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001968a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001968e:	50                   	push   eax
c001968f:	e8 ac 6f fe ff       	call   c0000640 <strcpy>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	83 ec 08             	sub    esp,0x8
c001969a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001969e:	50                   	push   eax
c001969f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00196a6:	e8 e9 f9 ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c00196ab:	83 c4 10             	add    esp,0x10
c00196ae:	83 ec 08             	sub    esp,0x8
c00196b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196b5:	50                   	push   eax
c00196b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00196bd:	50                   	push   eax
c00196be:	e8 f4 b5 fe ff       	call   c0004cb7 <f_rename>
c00196c3:	83 c4 10             	add    esp,0x10
c00196c6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00196cd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00196d4:	85 c0                	test   eax,eax
c00196d6:	75 08                	jne    c00196e0 <FAT::rename(char const*, char const*)+0xbc>
c00196d8:	b8 00 00 00 00       	mov    eax,0x0
c00196dd:	eb 09                	jmp    c00196e8 <FAT::rename(char const*, char const*)+0xc4>
c00196df:	90                   	nop
c00196e0:	b8 01 00 00 00       	mov    eax,0x1
c00196e5:	8d 76 00             	lea    esi,[esi+0x0]
c00196e8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00196ee:	c3                   	ret    
c00196ef:	90                   	nop

c00196f0 <FAT::mkdir(char const*)>:
c00196f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196fe:	75 08                	jne    c0019708 <FAT::mkdir(char const*)+0x18>
c0019700:	b8 04 00 00 00       	mov    eax,0x4
c0019705:	eb 61                	jmp    c0019768 <FAT::mkdir(char const*)+0x78>
c0019707:	90                   	nop
c0019708:	83 ec 08             	sub    esp,0x8
c001970b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019712:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019716:	50                   	push   eax
c0019717:	e8 24 6f fe ff       	call   c0000640 <strcpy>
c001971c:	83 c4 10             	add    esp,0x10
c001971f:	83 ec 08             	sub    esp,0x8
c0019722:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019726:	50                   	push   eax
c0019727:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001972e:	e8 61 f9 ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c0019733:	83 c4 10             	add    esp,0x10
c0019736:	83 ec 0c             	sub    esp,0xc
c0019739:	8d 44 24 18          	lea    eax,[esp+0x18]
c001973d:	50                   	push   eax
c001973e:	e8 d9 b3 fe ff       	call   c0004b1c <f_mkdir>
c0019743:	83 c4 10             	add    esp,0x10
c0019746:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001974d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019754:	85 c0                	test   eax,eax
c0019756:	75 08                	jne    c0019760 <FAT::mkdir(char const*)+0x70>
c0019758:	b8 00 00 00 00       	mov    eax,0x0
c001975d:	eb 09                	jmp    c0019768 <FAT::mkdir(char const*)+0x78>
c001975f:	90                   	nop
c0019760:	b8 01 00 00 00       	mov    eax,0x1
c0019765:	8d 76 00             	lea    esi,[esi+0x0]
c0019768:	81 c4 1c 01 00 00    	add    esp,0x11c
c001976e:	c3                   	ret    
c001976f:	90                   	nop

c0019770 <FAT::exists(char const*)>:
c0019770:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019776:	83 ec 08             	sub    esp,0x8
c0019779:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019780:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019784:	50                   	push   eax
c0019785:	e8 b6 6e fe ff       	call   c0000640 <strcpy>
c001978a:	83 c4 10             	add    esp,0x10
c001978d:	83 ec 08             	sub    esp,0x8
c0019790:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019794:	50                   	push   eax
c0019795:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001979c:	e8 f3 f8 ff ff       	call   c0019094 <FAT::fixFilepath(char*)>
c00197a1:	83 c4 10             	add    esp,0x10
c00197a4:	83 ec 08             	sub    esp,0x8
c00197a7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00197ae:	50                   	push   eax
c00197af:	8d 44 24 10          	lea    eax,[esp+0x10]
c00197b3:	50                   	push   eax
c00197b4:	e8 cf af fe ff       	call   c0004788 <f_stat>
c00197b9:	83 c4 10             	add    esp,0x10
c00197bc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00197c3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00197ca:	85 c0                	test   eax,eax
c00197cc:	75 06                	jne    c00197d4 <FAT::exists(char const*)+0x64>
c00197ce:	b0 01                	mov    al,0x1
c00197d0:	eb 06                	jmp    c00197d8 <FAT::exists(char const*)+0x68>
c00197d2:	66 90                	xchg   ax,ax
c00197d4:	b0 00                	mov    al,0x0
c00197d6:	66 90                	xchg   ax,ax
c00197d8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00197de:	c3                   	ret    
c00197df:	90                   	nop

c00197e0 <isoReadDiscSectorHelper>:
c00197e0:	83 ec 2c             	sub    esp,0x2c
c00197e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00197e7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197eb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00197f0:	83 e8 41             	sub    eax,0x41
c00197f3:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c00197fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00197fe:	ba 00 00 00 00       	mov    edx,0x0
c0019803:	83 ec 0c             	sub    esp,0xc
c0019806:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001980a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001980e:	52                   	push   edx
c001980f:	50                   	push   eax
c0019810:	51                   	push   ecx
c0019811:	e8 66 3c ff ff       	call   c000d47c <LogicalDisk::read(unsigned long long, int, void*)>
c0019816:	83 c4 20             	add    esp,0x20
c0019819:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001981d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019822:	74 0c                	je     c0019830 <isoReadDiscSectorHelper+0x50>
c0019824:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019828:	c1 e0 0b             	shl    eax,0xb
c001982b:	eb 0b                	jmp    c0019838 <isoReadDiscSectorHelper+0x58>
c001982d:	8d 76 00             	lea    esi,[esi+0x0]
c0019830:	b8 00 00 00 00       	mov    eax,0x0
c0019835:	8d 76 00             	lea    esi,[esi+0x0]
c0019838:	83 c4 2c             	add    esp,0x2c
c001983b:	c3                   	ret    

c001983c <iso_kprintf>:
c001983c:	83 ec 0c             	sub    esp,0xc
c001983f:	83 ec 08             	sub    esp,0x8
c0019842:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019846:	68 b6 1d 02 c0       	push   0xc0021db6
c001984b:	e8 e9 10 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019850:	83 c4 10             	add    esp,0x10
c0019853:	90                   	nop
c0019854:	83 c4 0c             	add    esp,0xc
c0019857:	c3                   	ret    

c0019858 <iso_kprintfd>:
c0019858:	83 ec 0c             	sub    esp,0xc
c001985b:	83 ec 08             	sub    esp,0x8
c001985e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019862:	68 1a 07 02 c0       	push   0xc002071a
c0019867:	e8 cd 10 ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001986c:	83 c4 10             	add    esp,0x10
c001986f:	90                   	nop
c0019870:	83 c4 0c             	add    esp,0xc
c0019873:	c3                   	ret    

c0019874 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019874:	b8 08 00 00 00       	mov    eax,0x8
c0019879:	c3                   	ret    

c001987a <ISO9660::truncate(void*, unsigned long long)>:
c001987a:	b8 01 00 00 00       	mov    eax,0x1
c001987f:	c3                   	ret    

c0019880 <ISO9660::getName()>:
c0019880:	b8 6c 20 02 c0       	mov    eax,0xc002206c
c0019885:	c3                   	ret    

c0019886 <ISO9660::closeDir(void*)>:
c0019886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001988a:	8b 00                	mov    eax,DWORD PTR [eax]
c001988c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001988f:	90                   	nop

c0019890 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019890:	b8 01 00 00 00       	mov    eax,0x1
c0019895:	c3                   	ret    

c0019896 <ISO9660::unlink(char const*)>:
c0019896:	b8 01 00 00 00       	mov    eax,0x1
c001989b:	c3                   	ret    

c001989c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001989c:	b8 03 00 00 00       	mov    eax,0x3
c00198a1:	c3                   	ret    

c00198a2 <ISO9660::rename(char const*, char const*)>:
c00198a2:	b8 01 00 00 00       	mov    eax,0x1
c00198a7:	c3                   	ret    

c00198a8 <ISO9660::mkdir(char const*)>:
c00198a8:	b8 01 00 00 00       	mov    eax,0x1
c00198ad:	c3                   	ret    

c00198ae <ISO9660::~ISO9660()>:
c00198ae:	83 ec 0c             	sub    esp,0xc
c00198b1:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c00198b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198ba:	89 10                	mov    DWORD PTR [eax],edx
c00198bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198c0:	83 ec 0c             	sub    esp,0xc
c00198c3:	50                   	push   eax
c00198c4:	e8 8b 16 ff ff       	call   c000af54 <Filesystem::~Filesystem()>
c00198c9:	83 c4 10             	add    esp,0x10
c00198cc:	90                   	nop
c00198cd:	83 c4 0c             	add    esp,0xc
c00198d0:	c3                   	ret    
c00198d1:	90                   	nop

c00198d2 <ISO9660::~ISO9660()>:
c00198d2:	83 ec 0c             	sub    esp,0xc
c00198d5:	83 ec 0c             	sub    esp,0xc
c00198d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198dc:	e8 cd ff ff ff       	call   c00198ae <ISO9660::~ISO9660()>
c00198e1:	83 c4 10             	add    esp,0x10
c00198e4:	83 ec 08             	sub    esp,0x8
c00198e7:	6a 08                	push   0x8
c00198e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198ed:	e8 1a 0f ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00198f2:	83 c4 10             	add    esp,0x10
c00198f5:	83 c4 0c             	add    esp,0xc
c00198f8:	c3                   	ret    
c00198f9:	90                   	nop

c00198fa <ISO9660::exists(char const*)>:
c00198fa:	83 ec 18             	sub    esp,0x18
c00198fd:	68 87 20 02 c0       	push   0xc0022087
c0019902:	e8 0a 73 ff ff       	call   c0010c11 <KePanic(char const*)>
c0019907:	31 c0                	xor    eax,eax
c0019909:	83 c4 1c             	add    esp,0x1c
c001990c:	c3                   	ret    
c001990d:	90                   	nop

c001990e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001990e:	56                   	push   esi
c001990f:	53                   	push   ebx
c0019910:	53                   	push   ebx
c0019911:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019915:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019919:	85 db                	test   ebx,ebx
c001991b:	0f 84 ca 00 00 00    	je     c00199eb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019921:	85 f6                	test   esi,esi
c0019923:	0f 84 c2 00 00 00    	je     c00199eb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019929:	b8 03 00 00 00       	mov    eax,0x3
c001992e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019933:	0f 85 b7 00 00 00    	jne    c00199f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019939:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001993b:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019942:	38 0d 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,cl
c0019948:	74 1b                	je     c0019965 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001994a:	85 c0                	test   eax,eax
c001994c:	74 10                	je     c001995e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001994e:	83 ec 0c             	sub    esp,0xc
c0019951:	68 a5 20 02 c0       	push   0xc00220a5
c0019956:	e8 b6 72 ff ff       	call   c0010c11 <KePanic(char const*)>
c001995b:	83 c4 10             	add    esp,0x10
c001995e:	8a 03                	mov    al,BYTE PTR [ebx]
c0019960:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019965:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019968:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c001996f:	85 c0                	test   eax,eax
c0019971:	74 09                	je     c001997c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019973:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001997a:	74 48                	je     c00199c4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001997c:	83 ec 0c             	sub    esp,0xc
c001997f:	68 b5 20 02 c0       	push   0xc00220b5
c0019984:	e8 b0 0f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019989:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001998c:	83 c4 10             	add    esp,0x10
c001998f:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019996:	85 c0                	test   eax,eax
c0019998:	74 17                	je     c00199b1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001999a:	83 ec 0c             	sub    esp,0xc
c001999d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00199a4:	68 d5 20 02 c0       	push   0xc00220d5
c00199a9:	e8 8b 0f ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c00199ae:	83 c4 10             	add    esp,0x10
c00199b1:	83 ec 0c             	sub    esp,0xc
c00199b4:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c00199bb:	50                   	push   eax
c00199bc:	e8 85 d0 fe ff       	call   c0006a46 <init_percd>
c00199c1:	83 c4 10             	add    esp,0x10
c00199c4:	83 c3 03             	add    ebx,0x3
c00199c7:	51                   	push   ecx
c00199c8:	51                   	push   ecx
c00199c9:	6a 00                	push   0x0
c00199cb:	53                   	push   ebx
c00199cc:	e8 3c cb fe ff       	call   c000650d <iso_open>
c00199d1:	83 c4 10             	add    esp,0x10
c00199d4:	89 c2                	mov    edx,eax
c00199d6:	b8 01 00 00 00       	mov    eax,0x1
c00199db:	83 fa ff             	cmp    edx,0xffffffff
c00199de:	74 10                	je     c00199f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00199e0:	83 c2 32             	add    edx,0x32
c00199e3:	31 c0                	xor    eax,eax
c00199e5:	01 d2                	add    edx,edx
c00199e7:	89 16                	mov    DWORD PTR [esi],edx
c00199e9:	eb 05                	jmp    c00199f0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00199eb:	b8 04 00 00 00       	mov    eax,0x4
c00199f0:	5a                   	pop    edx
c00199f1:	5b                   	pop    ebx
c00199f2:	5e                   	pop    esi
c00199f3:	c3                   	ret    

c00199f4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00199f4:	53                   	push   ebx
c00199f5:	83 ec 08             	sub    esp,0x8
c00199f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a00:	85 c0                	test   eax,eax
c0019a02:	74 2d                	je     c0019a31 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019a04:	85 db                	test   ebx,ebx
c0019a06:	74 29                	je     c0019a31 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019a08:	b9 02 00 00 00       	mov    ecx,0x2
c0019a0d:	52                   	push   edx
c0019a0e:	99                   	cdq    
c0019a0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a13:	f7 f9                	idiv   ecx
c0019a15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019a19:	83 e8 32             	sub    eax,0x32
c0019a1c:	50                   	push   eax
c0019a1d:	e8 93 cb fe ff       	call   c00065b5 <iso_read>
c0019a22:	83 c4 10             	add    esp,0x10
c0019a25:	89 03                	mov    DWORD PTR [ebx],eax
c0019a27:	09 d0                	or     eax,edx
c0019a29:	0f 94 c0             	sete   al
c0019a2c:	0f b6 c0             	movzx  eax,al
c0019a2f:	eb 05                	jmp    c0019a36 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019a31:	b8 04 00 00 00       	mov    eax,0x4
c0019a36:	83 c4 08             	add    esp,0x8
c0019a39:	5b                   	pop    ebx
c0019a3a:	c3                   	ret    
c0019a3b:	90                   	nop

c0019a3c <ISO9660::seek(void*, unsigned long long)>:
c0019a3c:	57                   	push   edi
c0019a3d:	56                   	push   esi
c0019a3e:	b8 04 00 00 00       	mov    eax,0x4
c0019a43:	51                   	push   ecx
c0019a44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a48:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019a4c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019a50:	85 d2                	test   edx,edx
c0019a52:	74 26                	je     c0019a7a <ISO9660::seek(void*, unsigned long long)+0x3e>
c0019a54:	6a 00                	push   0x0
c0019a56:	b9 02 00 00 00       	mov    ecx,0x2
c0019a5b:	57                   	push   edi
c0019a5c:	89 d0                	mov    eax,edx
c0019a5e:	56                   	push   esi
c0019a5f:	99                   	cdq    
c0019a60:	f7 f9                	idiv   ecx
c0019a62:	83 e8 32             	sub    eax,0x32
c0019a65:	50                   	push   eax
c0019a66:	e8 60 cc fe ff       	call   c00066cb <iso_seek>
c0019a6b:	83 c4 10             	add    esp,0x10
c0019a6e:	31 f0                	xor    eax,esi
c0019a70:	31 fa                	xor    edx,edi
c0019a72:	09 d0                	or     eax,edx
c0019a74:	0f 95 c0             	setne  al
c0019a77:	0f b6 c0             	movzx  eax,al
c0019a7a:	5a                   	pop    edx
c0019a7b:	5e                   	pop    esi
c0019a7c:	5f                   	pop    edi
c0019a7d:	c3                   	ret    

c0019a7e <ISO9660::tell(void*, unsigned long long*)>:
c0019a7e:	53                   	push   ebx
c0019a7f:	83 ec 08             	sub    esp,0x8
c0019a82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a86:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a8a:	85 c0                	test   eax,eax
c0019a8c:	74 24                	je     c0019ab2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019a8e:	85 db                	test   ebx,ebx
c0019a90:	74 20                	je     c0019ab2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019a92:	83 ec 0c             	sub    esp,0xc
c0019a95:	b9 02 00 00 00       	mov    ecx,0x2
c0019a9a:	99                   	cdq    
c0019a9b:	f7 f9                	idiv   ecx
c0019a9d:	83 e8 32             	sub    eax,0x32
c0019aa0:	50                   	push   eax
c0019aa1:	e8 a9 cc fe ff       	call   c000674f <iso_tell>
c0019aa6:	83 c4 10             	add    esp,0x10
c0019aa9:	89 03                	mov    DWORD PTR [ebx],eax
c0019aab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019aae:	31 c0                	xor    eax,eax
c0019ab0:	eb 05                	jmp    c0019ab7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019ab2:	b8 04 00 00 00       	mov    eax,0x4
c0019ab7:	83 c4 08             	add    esp,0x8
c0019aba:	5b                   	pop    ebx
c0019abb:	c3                   	ret    

c0019abc <ISO9660::stat(void*, unsigned long long*)>:
c0019abc:	53                   	push   ebx
c0019abd:	83 ec 14             	sub    esp,0x14
c0019ac0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019ac4:	68 f9 20 02 c0       	push   0xc00220f9
c0019ac9:	e8 6b 0e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019ace:	83 c4 10             	add    esp,0x10
c0019ad1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019ad6:	74 2c                	je     c0019b04 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019ad8:	85 db                	test   ebx,ebx
c0019ada:	74 28                	je     c0019b04 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019adc:	83 ec 0c             	sub    esp,0xc
c0019adf:	b9 02 00 00 00       	mov    ecx,0x2
c0019ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae8:	99                   	cdq    
c0019ae9:	f7 f9                	idiv   ecx
c0019aeb:	83 e8 32             	sub    eax,0x32
c0019aee:	50                   	push   eax
c0019aef:	e8 8c cc fe ff       	call   c0006780 <iso_total>
c0019af4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019afb:	89 03                	mov    DWORD PTR [ebx],eax
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	31 c0                	xor    eax,eax
c0019b02:	eb 05                	jmp    c0019b09 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019b04:	b8 04 00 00 00       	mov    eax,0x4
c0019b09:	83 c4 08             	add    esp,0x8
c0019b0c:	5b                   	pop    ebx
c0019b0d:	c3                   	ret    

c0019b0e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019b0e:	55                   	push   ebp
c0019b0f:	57                   	push   edi
c0019b10:	56                   	push   esi
c0019b11:	53                   	push   ebx
c0019b12:	83 ec 18             	sub    esp,0x18
c0019b15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019b19:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019b1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019b21:	68 01 21 02 c0       	push   0xc0022101
c0019b26:	e8 0e 0e ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019b2b:	83 c4 10             	add    esp,0x10
c0019b2e:	85 ff                	test   edi,edi
c0019b30:	0f 94 c0             	sete   al
c0019b33:	85 f6                	test   esi,esi
c0019b35:	0f 94 c2             	sete   dl
c0019b38:	09 d0                	or     eax,edx
c0019b3a:	a8 01                	test   al,0x1
c0019b3c:	0f 85 dd 00 00 00    	jne    c0019c1f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019b42:	85 db                	test   ebx,ebx
c0019b44:	0f 84 d5 00 00 00    	je     c0019c1f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019b4a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019b4d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0019b53:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019b5a:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019b61:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019b63:	38 0d 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,cl
c0019b69:	74 1b                	je     c0019b86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019b6b:	85 c0                	test   eax,eax
c0019b6d:	74 10                	je     c0019b7f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019b6f:	83 ec 0c             	sub    esp,0xc
c0019b72:	68 a5 20 02 c0       	push   0xc00220a5
c0019b77:	e8 95 70 ff ff       	call   c0010c11 <KePanic(char const*)>
c0019b7c:	83 c4 10             	add    esp,0x10
c0019b7f:	8a 03                	mov    al,BYTE PTR [ebx]
c0019b81:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019b86:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b89:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019b90:	85 c0                	test   eax,eax
c0019b92:	74 09                	je     c0019b9d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0019b94:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019b9b:	74 51                	je     c0019bee <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019b9d:	83 ec 0c             	sub    esp,0xc
c0019ba0:	68 09 21 02 c0       	push   0xc0022109
c0019ba5:	e8 8f 0d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019baa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019bad:	83 c4 10             	add    esp,0x10
c0019bb0:	83 3c 85 1c 83 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7ce4],0x0
c0019bb8:	74 21                	je     c0019bdb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019bba:	83 ec 0c             	sub    esp,0xc
c0019bbd:	68 29 21 02 c0       	push   0xc0022129
c0019bc2:	e8 72 0d ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019bc7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019bca:	83 c4 10             	add    esp,0x10
c0019bcd:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019bd4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019bdb:	83 ec 0c             	sub    esp,0xc
c0019bde:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019be5:	50                   	push   eax
c0019be6:	e8 5b ce fe ff       	call   c0006a46 <init_percd>
c0019beb:	83 c4 10             	add    esp,0x10
c0019bee:	83 c3 03             	add    ebx,0x3
c0019bf1:	52                   	push   edx
c0019bf2:	52                   	push   edx
c0019bf3:	6a 00                	push   0x0
c0019bf5:	53                   	push   ebx
c0019bf6:	e8 12 c9 fe ff       	call   c000650d <iso_open>
c0019bfb:	83 c4 10             	add    esp,0x10
c0019bfe:	89 c5                	mov    ebp,eax
c0019c00:	83 f8 ff             	cmp    eax,0xffffffff
c0019c03:	75 21                	jne    c0019c26 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019c05:	50                   	push   eax
c0019c06:	50                   	push   eax
c0019c07:	6a 01                	push   0x1
c0019c09:	53                   	push   ebx
c0019c0a:	e8 fe c8 fe ff       	call   c000650d <iso_open>
c0019c0f:	83 c4 10             	add    esp,0x10
c0019c12:	ba 02 00 00 00       	mov    edx,0x2
c0019c17:	40                   	inc    eax
c0019c18:	74 2b                	je     c0019c45 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019c1a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019c1d:	eb 24                	jmp    c0019c43 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019c1f:	ba 04 00 00 00       	mov    edx,0x4
c0019c24:	eb 1f                	jmp    c0019c45 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019c26:	83 ec 0c             	sub    esp,0xc
c0019c29:	50                   	push   eax
c0019c2a:	e8 51 cb fe ff       	call   c0006780 <iso_total>
c0019c2f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019c36:	89 07                	mov    DWORD PTR [edi],eax
c0019c38:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019c3b:	e8 57 c9 fe ff       	call   c0006597 <iso_close>
c0019c40:	83 c4 10             	add    esp,0x10
c0019c43:	31 d2                	xor    edx,edx
c0019c45:	83 c4 0c             	add    esp,0xc
c0019c48:	89 d0                	mov    eax,edx
c0019c4a:	5b                   	pop    ebx
c0019c4b:	5e                   	pop    esi
c0019c4c:	5f                   	pop    edi
c0019c4d:	5d                   	pop    ebp
c0019c4e:	c3                   	ret    
c0019c4f:	90                   	nop

c0019c50 <ISO9660::close(void*)>:
c0019c50:	83 ec 0c             	sub    esp,0xc
c0019c53:	b8 04 00 00 00       	mov    eax,0x4
c0019c58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c5c:	85 d2                	test   edx,edx
c0019c5e:	74 1b                	je     c0019c7b <ISO9660::close(void*)+0x2b>
c0019c60:	83 ec 0c             	sub    esp,0xc
c0019c63:	b9 02 00 00 00       	mov    ecx,0x2
c0019c68:	89 d0                	mov    eax,edx
c0019c6a:	99                   	cdq    
c0019c6b:	f7 f9                	idiv   ecx
c0019c6d:	83 e8 32             	sub    eax,0x32
c0019c70:	50                   	push   eax
c0019c71:	e8 21 c9 fe ff       	call   c0006597 <iso_close>
c0019c76:	83 c4 10             	add    esp,0x10
c0019c79:	31 c0                	xor    eax,eax
c0019c7b:	83 c4 0c             	add    esp,0xc
c0019c7e:	c3                   	ret    
c0019c7f:	90                   	nop

c0019c80 <ISO9660::openDir(char const*, void**)>:
c0019c80:	56                   	push   esi
c0019c81:	53                   	push   ebx
c0019c82:	50                   	push   eax
c0019c83:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c87:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019c8b:	85 db                	test   ebx,ebx
c0019c8d:	0f 84 bd 00 00 00    	je     c0019d50 <ISO9660::openDir(char const*, void**)+0xd0>
c0019c93:	85 f6                	test   esi,esi
c0019c95:	0f 84 b5 00 00 00    	je     c0019d50 <ISO9660::openDir(char const*, void**)+0xd0>
c0019c9b:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019c9d:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019ca4:	38 15 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,dl
c0019caa:	74 1b                	je     c0019cc7 <ISO9660::openDir(char const*, void**)+0x47>
c0019cac:	85 c0                	test   eax,eax
c0019cae:	74 10                	je     c0019cc0 <ISO9660::openDir(char const*, void**)+0x40>
c0019cb0:	83 ec 0c             	sub    esp,0xc
c0019cb3:	68 a5 20 02 c0       	push   0xc00220a5
c0019cb8:	e8 54 6f ff ff       	call   c0010c11 <KePanic(char const*)>
c0019cbd:	83 c4 10             	add    esp,0x10
c0019cc0:	8a 03                	mov    al,BYTE PTR [ebx]
c0019cc2:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019cc7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019cca:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019cd1:	85 c0                	test   eax,eax
c0019cd3:	74 10                	je     c0019ce5 <ISO9660::openDir(char const*, void**)+0x65>
c0019cd5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019cdc:	74 1a                	je     c0019cf8 <ISO9660::openDir(char const*, void**)+0x78>
c0019cde:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019ce5:	83 ec 0c             	sub    esp,0xc
c0019ce8:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019cef:	50                   	push   eax
c0019cf0:	e8 51 cd fe ff       	call   c0006a46 <init_percd>
c0019cf5:	83 c4 10             	add    esp,0x10
c0019cf8:	83 c3 03             	add    ebx,0x3
c0019cfb:	50                   	push   eax
c0019cfc:	50                   	push   eax
c0019cfd:	6a 01                	push   0x1
c0019cff:	53                   	push   ebx
c0019d00:	e8 08 c8 fe ff       	call   c000650d <iso_open>
c0019d05:	83 c4 10             	add    esp,0x10
c0019d08:	89 c3                	mov    ebx,eax
c0019d0a:	83 f8 ff             	cmp    eax,0xffffffff
c0019d0d:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019d12:	75 1c                	jne    c0019d30 <ISO9660::openDir(char const*, void**)+0xb0>
c0019d14:	53                   	push   ebx
c0019d15:	53                   	push   ebx
c0019d16:	68 4d 21 02 c0       	push   0xc002214d
c0019d1b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019d21:	e8 72 ed fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019d26:	83 c4 10             	add    esp,0x10
c0019d29:	b8 01 00 00 00       	mov    eax,0x1
c0019d2e:	eb 25                	jmp    c0019d55 <ISO9660::openDir(char const*, void**)+0xd5>
c0019d30:	01 db                	add    ebx,ebx
c0019d32:	51                   	push   ecx
c0019d33:	83 c3 65             	add    ebx,0x65
c0019d36:	51                   	push   ecx
c0019d37:	68 60 21 02 c0       	push   0xc0022160
c0019d3c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019d42:	e8 51 ed fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019d47:	89 1e                	mov    DWORD PTR [esi],ebx
c0019d49:	83 c4 10             	add    esp,0x10
c0019d4c:	31 c0                	xor    eax,eax
c0019d4e:	eb 05                	jmp    c0019d55 <ISO9660::openDir(char const*, void**)+0xd5>
c0019d50:	b8 04 00 00 00       	mov    eax,0x4
c0019d55:	5a                   	pop    edx
c0019d56:	5b                   	pop    ebx
c0019d57:	5e                   	pop    esi
c0019d58:	c3                   	ret    
c0019d59:	90                   	nop

c0019d5a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019d5a:	55                   	push   ebp
c0019d5b:	57                   	push   edi
c0019d5c:	56                   	push   esi
c0019d5d:	53                   	push   ebx
c0019d5e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d64:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019d6b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019d72:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019d7a:	0f 84 e7 00 00 00    	je     c0019e67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019d80:	85 db                	test   ebx,ebx
c0019d82:	0f 84 df 00 00 00    	je     c0019e67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019d88:	83 ec 0c             	sub    esp,0xc
c0019d8b:	68 73 21 02 c0       	push   0xc0022173
c0019d90:	e8 a4 0b ff ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c0019d95:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0019d9c:	b9 02 00 00 00       	mov    ecx,0x2
c0019da1:	99                   	cdq    
c0019da2:	f7 f9                	idiv   ecx
c0019da4:	83 e8 32             	sub    eax,0x32
c0019da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019daa:	e8 23 ca fe ff       	call   c00067d2 <iso_readdir>
c0019daf:	83 c4 10             	add    esp,0x10
c0019db2:	89 c6                	mov    esi,eax
c0019db4:	85 c0                	test   eax,eax
c0019db6:	75 37                	jne    c0019def <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019db8:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019dbd:	56                   	push   esi
c0019dbe:	56                   	push   esi
c0019dbf:	68 7e 21 02 c0       	push   0xc002217e
c0019dc4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019dca:	e8 c9 ec fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019dcf:	83 c4 0c             	add    esp,0xc
c0019dd2:	68 10 01 00 00       	push   0x110
c0019dd7:	6a 00                	push   0x0
c0019dd9:	57                   	push   edi
c0019dda:	e8 11 67 fe ff       	call   c00004f0 <memset>
c0019ddf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019de5:	83 c4 10             	add    esp,0x10
c0019de8:	b8 01 00 00 00       	mov    eax,0x1
c0019ded:	eb 7d                	jmp    c0019e6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019def:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019df5:	8d 68 08             	lea    ebp,[eax+0x8]
c0019df8:	83 ec 0c             	sub    esp,0xc
c0019dfb:	55                   	push   ebp
c0019dfc:	e8 6f 67 fe ff       	call   c0000570 <strlen>
c0019e01:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019e09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019e14:	75 0a                	jne    c0019e20 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019e16:	b8 02 00 00 00       	mov    eax,0x2
c0019e1b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019e1e:	74 05                	je     c0019e25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019e20:	b8 01 00 00 00       	mov    eax,0x1
c0019e25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e29:	50                   	push   eax
c0019e2a:	50                   	push   eax
c0019e2b:	55                   	push   ebp
c0019e2c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019e30:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019e34:	50                   	push   eax
c0019e35:	e8 06 68 fe ff       	call   c0000640 <strcpy>
c0019e3a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019e41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e43:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019e49:	5a                   	pop    edx
c0019e4a:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019e4f:	59                   	pop    ecx
c0019e50:	68 91 21 02 c0       	push   0xc0022191
c0019e55:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019e5b:	e8 38 ec fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	31 c0                	xor    eax,eax
c0019e65:	eb 05                	jmp    c0019e6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019e67:	b8 04 00 00 00       	mov    eax,0x4
c0019e6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e72:	5b                   	pop    ebx
c0019e73:	5e                   	pop    esi
c0019e74:	5f                   	pop    edi
c0019e75:	5d                   	pop    ebp
c0019e76:	c3                   	ret    

c0019e77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019e77:	57                   	push   edi
c0019e78:	56                   	push   esi
c0019e79:	53                   	push   ebx
c0019e7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e7e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e82:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019e86:	39 35 24 93 02 c0    	cmp    DWORD PTR ds:0xc0029324,esi
c0019e8c:	0f be cb             	movsx  ecx,bl
c0019e8f:	75 0b                	jne    c0019e9c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019e91:	0f be 05 c0 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022fc0
c0019e98:	39 c8                	cmp    eax,ecx
c0019e9a:	74 47                	je     c0019ee3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019e9c:	83 ec 0c             	sub    esp,0xc
c0019e9f:	31 d2                	xor    edx,edx
c0019ea1:	68 40 93 02 c0       	push   0xc0029340
c0019ea6:	6a 01                	push   0x1
c0019ea8:	52                   	push   edx
c0019ea9:	56                   	push   esi
c0019eaa:	ff 34 8d 1c 83 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7ce4]
c0019eb1:	e8 c6 35 ff ff       	call   c000d47c <LogicalDisk::read(unsigned long long, int, void*)>
c0019eb6:	83 c4 20             	add    esp,0x20
c0019eb9:	85 c0                	test   eax,eax
c0019ebb:	75 0e                	jne    c0019ecb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019ebd:	89 35 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,esi
c0019ec3:	88 1d c0 2f 02 c0    	mov    BYTE PTR ds:0xc0022fc0,bl
c0019ec9:	eb 18                	jmp    c0019ee3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019ecb:	50                   	push   eax
c0019ecc:	68 00 08 00 00       	push   0x800
c0019ed1:	6a 00                	push   0x0
c0019ed3:	57                   	push   edi
c0019ed4:	e8 17 66 fe ff       	call   c00004f0 <memset>
c0019ed9:	83 c4 10             	add    esp,0x10
c0019edc:	b8 01 00 00 00       	mov    eax,0x1
c0019ee1:	eb 0e                	jmp    c0019ef1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019ee3:	be 40 93 02 c0       	mov    esi,0xc0029340
c0019ee8:	b9 00 08 00 00       	mov    ecx,0x800
c0019eed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019eef:	31 c0                	xor    eax,eax
c0019ef1:	5b                   	pop    ebx
c0019ef2:	5e                   	pop    esi
c0019ef3:	5f                   	pop    edi
c0019ef4:	c3                   	ret    
c0019ef5:	90                   	nop

c0019ef6 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019ef6:	53                   	push   ebx
c0019ef7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019efd:	c7 05 24 93 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029324,0xdeadbeef
c0019f07:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019f0e:	8d 58 41             	lea    ebx,[eax+0x41]
c0019f11:	0f be db             	movsx  ebx,bl
c0019f14:	53                   	push   ebx
c0019f15:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f19:	50                   	push   eax
c0019f1a:	6a 10                	push   0x10
c0019f1c:	e8 56 ff ff ff       	call   c0019e77 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019f21:	83 c4 10             	add    esp,0x10
c0019f24:	31 d2                	xor    edx,edx
c0019f26:	85 c0                	test   eax,eax
c0019f28:	75 33                	jne    c0019f5d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019f2a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019f2f:	75 2c                	jne    c0019f5d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019f31:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019f36:	75 25                	jne    c0019f5d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019f38:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019f3d:	75 1e                	jne    c0019f5d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019f3f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019f44:	75 17                	jne    c0019f5d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019f46:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019f4b:	75 10                	jne    c0019f5d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019f4d:	83 ec 0c             	sub    esp,0xc
c0019f50:	53                   	push   ebx
c0019f51:	e8 f0 ca fe ff       	call   c0006a46 <init_percd>
c0019f56:	83 c4 10             	add    esp,0x10
c0019f59:	40                   	inc    eax
c0019f5a:	0f 95 c2             	setne  dl
c0019f5d:	88 d0                	mov    al,dl
c0019f5f:	81 c4 08 08 00 00    	add    esp,0x808
c0019f65:	5b                   	pop    ebx
c0019f66:	c3                   	ret    
c0019f67:	90                   	nop

c0019f68 <ISO9660::ISO9660()>:
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f6f:	83 ec 0c             	sub    esp,0xc
c0019f72:	50                   	push   eax
c0019f73:	e8 b8 0f ff ff       	call   c000af30 <Filesystem::Filesystem()>
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0019f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f84:	89 10                	mov    DWORD PTR [eax],edx
c0019f86:	e8 cd cb fe ff       	call   c0006b58 <fs_iso9660_init>
c0019f8b:	90                   	nop
c0019f8c:	83 c4 0c             	add    esp,0xc
c0019f8f:	c3                   	ret    

c0019f90 <SoundCard::beginPlayback()>:
c0019f90:	c7 44 24 04 10 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022210
c0019f98:	e9 74 6c ff ff       	jmp    c0010c11 <KePanic(char const*)>
c0019f9d:	90                   	nop

c0019f9e <SoundCard::stopPlayback()>:
c0019f9e:	c7 44 24 04 10 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022210
c0019fa6:	e9 66 6c ff ff       	jmp    c0010c11 <KePanic(char const*)>
c0019fab:	90                   	nop

c0019fac <SoundCard::SoundCard(char const*)>:
c0019fac:	83 ec 1c             	sub    esp,0x1c
c0019faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fb3:	83 ec 08             	sub    esp,0x8
c0019fb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019fba:	50                   	push   eax
c0019fbb:	e8 72 22 ff ff       	call   c000c232 <Device::Device(char const*)>
c0019fc0:	83 c4 10             	add    esp,0x10
c0019fc3:	ba 5c 22 02 c0       	mov    edx,0xc002225c
c0019fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fcc:	89 10                	mov    DWORD PTR [eax],edx
c0019fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fd2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fdd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019feb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ff9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a007:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a011:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a019:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a01e:	7f 1a                	jg     c001a03a <SoundCard::SoundCard(char const*)+0x8e>
c001a020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a024:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a028:	83 c2 54             	add    edx,0x54
c001a02b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a033:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a038:	eb df                	jmp    c001a019 <SoundCard::SoundCard(char const*)+0x6d>
c001a03a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a03e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a045:	90                   	nop
c001a046:	83 c4 1c             	add    esp,0x1c
c001a049:	c3                   	ret    

c001a04a <SoundCard::~SoundCard()>:
c001a04a:	83 ec 0c             	sub    esp,0xc
c001a04d:	ba 5c 22 02 c0       	mov    edx,0xc002225c
c001a052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a056:	89 10                	mov    DWORD PTR [eax],edx
c001a058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05c:	83 ec 0c             	sub    esp,0xc
c001a05f:	50                   	push   eax
c001a060:	e8 37 1f ff ff       	call   c000bf9c <Device::~Device()>
c001a065:	83 c4 10             	add    esp,0x10
c001a068:	90                   	nop
c001a069:	83 c4 0c             	add    esp,0xc
c001a06c:	c3                   	ret    
c001a06d:	90                   	nop

c001a06e <SoundCard::~SoundCard()>:
c001a06e:	83 ec 0c             	sub    esp,0xc
c001a071:	83 ec 0c             	sub    esp,0xc
c001a074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a078:	e8 cd ff ff ff       	call   c001a04a <SoundCard::~SoundCard()>
c001a07d:	83 c4 10             	add    esp,0x10
c001a080:	83 ec 08             	sub    esp,0x8
c001a083:	68 e8 01 00 00       	push   0x1e8
c001a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a08c:	e8 7b 07 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a091:	83 c4 10             	add    esp,0x10
c001a094:	83 c4 0c             	add    esp,0xc
c001a097:	c3                   	ret    

c001a098 <SoundCard::configureRates(int, int, int)>:
c001a098:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a09c:	31 c0                	xor    eax,eax
c001a09e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a0a5:	75 20                	jne    c001a0c7 <SoundCard::configureRates(int, int, int)+0x2f>
c001a0a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0ab:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0b5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0bf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a0c5:	b0 01                	mov    al,0x1
c001a0c7:	c3                   	ret    

c001a0c8 <SoundCard::getSamples16(int, short*)>:
c001a0c8:	55                   	push   ebp
c001a0c9:	57                   	push   edi
c001a0ca:	31 ff                	xor    edi,edi
c001a0cc:	56                   	push   esi
c001a0cd:	53                   	push   ebx
c001a0ce:	31 db                	xor    ebx,ebx
c001a0d0:	83 ec 10             	sub    esp,0x10
c001a0d3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a0d7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a0db:	8d 04 36             	lea    eax,[esi+esi*1]
c001a0de:	50                   	push   eax
c001a0df:	6a 00                	push   0x0
c001a0e1:	55                   	push   ebp
c001a0e2:	e8 09 64 fe ff       	call   c00004f0 <memset>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a0ee:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a0f5:	85 c0                	test   eax,eax
c001a0f7:	74 1b                	je     c001a114 <SoundCard::getSamples16(int, short*)+0x4c>
c001a0f9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a0fd:	75 15                	jne    c001a114 <SoundCard::getSamples16(int, short*)+0x4c>
c001a0ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a103:	55                   	push   ebp
c001a104:	56                   	push   esi
c001a105:	50                   	push   eax
c001a106:	e8 f1 02 00 00       	call   c001a3fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	39 c7                	cmp    edi,eax
c001a110:	7d 02                	jge    c001a114 <SoundCard::getSamples16(int, short*)+0x4c>
c001a112:	89 c7                	mov    edi,eax
c001a114:	43                   	inc    ebx
c001a115:	83 fb 20             	cmp    ebx,0x20
c001a118:	75 d0                	jne    c001a0ea <SoundCard::getSamples16(int, short*)+0x22>
c001a11a:	83 c4 0c             	add    esp,0xc
c001a11d:	89 f8                	mov    eax,edi
c001a11f:	5b                   	pop    ebx
c001a120:	5e                   	pop    esi
c001a121:	5f                   	pop    edi
c001a122:	5d                   	pop    ebp
c001a123:	c3                   	ret    

c001a124 <SoundCard::getSamples32(int, int*)>:
c001a124:	55                   	push   ebp
c001a125:	57                   	push   edi
c001a126:	31 ff                	xor    edi,edi
c001a128:	56                   	push   esi
c001a129:	31 f6                	xor    esi,esi
c001a12b:	53                   	push   ebx
c001a12c:	83 ec 10             	sub    esp,0x10
c001a12f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a133:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a137:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a13b:	c1 e0 02             	shl    eax,0x2
c001a13e:	50                   	push   eax
c001a13f:	6a 00                	push   0x0
c001a141:	55                   	push   ebp
c001a142:	e8 a9 63 fe ff       	call   c00004f0 <memset>
c001a147:	83 c4 10             	add    esp,0x10
c001a14a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a151:	85 c0                	test   eax,eax
c001a153:	74 1b                	je     c001a170 <SoundCard::getSamples32(int, int*)+0x4c>
c001a155:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a159:	75 15                	jne    c001a170 <SoundCard::getSamples32(int, int*)+0x4c>
c001a15b:	53                   	push   ebx
c001a15c:	55                   	push   ebp
c001a15d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a161:	50                   	push   eax
c001a162:	e8 61 03 00 00       	call   c001a4c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a167:	83 c4 10             	add    esp,0x10
c001a16a:	39 c6                	cmp    esi,eax
c001a16c:	7d 02                	jge    c001a170 <SoundCard::getSamples32(int, int*)+0x4c>
c001a16e:	89 c6                	mov    esi,eax
c001a170:	47                   	inc    edi
c001a171:	83 ff 20             	cmp    edi,0x20
c001a174:	75 d4                	jne    c001a14a <SoundCard::getSamples32(int, int*)+0x26>
c001a176:	85 f6                	test   esi,esi
c001a178:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a17f:	75 0f                	jne    c001a190 <SoundCard::getSamples32(int, int*)+0x6c>
c001a181:	85 c0                	test   eax,eax
c001a183:	74 1b                	je     c001a1a0 <SoundCard::getSamples32(int, int*)+0x7c>
c001a185:	83 ec 0c             	sub    esp,0xc
c001a188:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a18a:	53                   	push   ebx
c001a18b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a18e:	eb 0d                	jmp    c001a19d <SoundCard::getSamples32(int, int*)+0x79>
c001a190:	85 c0                	test   eax,eax
c001a192:	75 0c                	jne    c001a1a0 <SoundCard::getSamples32(int, int*)+0x7c>
c001a194:	83 ec 0c             	sub    esp,0xc
c001a197:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a199:	53                   	push   ebx
c001a19a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	83 c4 0c             	add    esp,0xc
c001a1a3:	89 f0                	mov    eax,esi
c001a1a5:	5b                   	pop    ebx
c001a1a6:	5e                   	pop    esi
c001a1a7:	5f                   	pop    edi
c001a1a8:	5d                   	pop    ebp
c001a1a9:	c3                   	ret    

c001a1aa <SoundCard::addChannel(SoundPort*)>:
c001a1aa:	83 ec 0c             	sub    esp,0xc
c001a1ad:	31 c0                	xor    eax,eax
c001a1af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1b3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a1bb:	74 1b                	je     c001a1d8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a1bd:	40                   	inc    eax
c001a1be:	83 f8 20             	cmp    eax,0x20
c001a1c1:	75 f0                	jne    c001a1b3 <SoundCard::addChannel(SoundPort*)+0x9>
c001a1c3:	83 ec 0c             	sub    esp,0xc
c001a1c6:	68 35 22 02 c0       	push   0xc0022235
c001a1cb:	e8 41 6a ff ff       	call   c0010c11 <KePanic(char const*)>
c001a1d0:	83 c4 10             	add    esp,0x10
c001a1d3:	83 c8 ff             	or     eax,0xffffffff
c001a1d6:	eb 0b                	jmp    c001a1e3 <SoundCard::addChannel(SoundPort*)+0x39>
c001a1d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a1dc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a1e3:	83 c4 0c             	add    esp,0xc
c001a1e6:	c3                   	ret    
c001a1e7:	90                   	nop

c001a1e8 <SoundCard::removeChannel(int)>:
c001a1e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1f0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a1fb:	c3                   	ret    

c001a1fc <SoundPort::SoundPort(int, int, int, int)>:
c001a1fc:	83 ec 0c             	sub    esp,0xc
c001a1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a203:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a20e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a216:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a21a:	89 10                	mov    DWORD PTR [eax],edx
c001a21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a220:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a224:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a22b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a22f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a232:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a237:	75 13                	jne    c001a24c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a23d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a23f:	05 a0 0f 00 00       	add    eax,0xfa0
c001a244:	01 c0                	add    eax,eax
c001a246:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a24a:	66 90                	xchg   ax,ax
c001a24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a250:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a254:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a25b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a266:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a269:	c1 e0 02             	shl    eax,0x2
c001a26c:	83 ec 0c             	sub    esp,0xc
c001a26f:	50                   	push   eax
c001a270:	e8 39 d8 fe ff       	call   c0007aae <malloc>
c001a275:	83 c4 10             	add    esp,0x10
c001a278:	89 c2                	mov    edx,eax
c001a27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a27e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a281:	90                   	nop
c001a282:	83 c4 0c             	add    esp,0xc
c001a285:	c3                   	ret    
c001a286:	66 90                	xchg   ax,ax

c001a288 <SoundPort::~SoundPort()>:
c001a288:	83 ec 0c             	sub    esp,0xc
c001a28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a28f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a292:	85 c0                	test   eax,eax
c001a294:	74 1e                	je     c001a2b4 <SoundPort::~SoundPort()+0x2c>
c001a296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a29a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a29d:	83 ec 0c             	sub    esp,0xc
c001a2a0:	50                   	push   eax
c001a2a1:	e8 18 d8 fe ff       	call   c0007abe <free>
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2ad:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a2b4:	90                   	nop
c001a2b5:	83 c4 0c             	add    esp,0xc
c001a2b8:	c3                   	ret    
c001a2b9:	90                   	nop
c001a2ba:	66 90                	xchg   ax,ax

c001a2bc <SoundPort::unpause()>:
c001a2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a2c4:	c3                   	ret    
c001a2c5:	90                   	nop
c001a2c6:	66 90                	xchg   ax,ax

c001a2c8 <SoundPort::pause()>:
c001a2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2cc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a2d0:	c3                   	ret    
c001a2d1:	90                   	nop
c001a2d2:	66 90                	xchg   ax,ax

c001a2d4 <SoundPort::getBufferUsed()>:
c001a2d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a2db:	c3                   	ret    

c001a2dc <SoundPort::getBufferSize()>:
c001a2dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a2e3:	c3                   	ret    

c001a2e4 <SoundPort::buffer16(short*, int)>:
c001a2e4:	55                   	push   ebp
c001a2e5:	57                   	push   edi
c001a2e6:	56                   	push   esi
c001a2e7:	53                   	push   ebx
c001a2e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2ec:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a2f0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a2f3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a2f6:	74 68                	je     c001a360 <SoundPort::buffer16(short*, int)+0x7c>
c001a2f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a2fc:	85 c9                	test   ecx,ecx
c001a2fe:	7e 60                	jle    c001a360 <SoundPort::buffer16(short*, int)+0x7c>
c001a300:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a304:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a307:	c1 e1 0f             	shl    ecx,0xf
c001a30a:	8d 70 01             	lea    esi,[eax+0x1]
c001a30d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a310:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a313:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a316:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a319:	74 4d                	je     c001a368 <SoundPort::buffer16(short*, int)+0x84>
c001a31b:	31 f6                	xor    esi,esi
c001a31d:	eb 21                	jmp    c001a340 <SoundPort::buffer16(short*, int)+0x5c>
c001a31f:	90                   	nop
c001a320:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a325:	8d 79 01             	lea    edi,[ecx+0x1]
c001a328:	c1 e3 0f             	shl    ebx,0xf
c001a32b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a32e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a331:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a334:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a337:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a33a:	74 1c                	je     c001a358 <SoundPort::buffer16(short*, int)+0x74>
c001a33c:	89 c6                	mov    esi,eax
c001a33e:	66 90                	xchg   ax,ax
c001a340:	8d 46 01             	lea    eax,[esi+0x1]
c001a343:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a347:	75 d7                	jne    c001a320 <SoundPort::buffer16(short*, int)+0x3c>
c001a349:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	5b                   	pop    ebx
c001a351:	5e                   	pop    esi
c001a352:	5f                   	pop    edi
c001a353:	5d                   	pop    ebp
c001a354:	c3                   	ret    
c001a355:	8d 76 00             	lea    esi,[esi+0x0]
c001a358:	5b                   	pop    ebx
c001a359:	8d 46 02             	lea    eax,[esi+0x2]
c001a35c:	5e                   	pop    esi
c001a35d:	5f                   	pop    edi
c001a35e:	5d                   	pop    ebp
c001a35f:	c3                   	ret    
c001a360:	5b                   	pop    ebx
c001a361:	31 c0                	xor    eax,eax
c001a363:	5e                   	pop    esi
c001a364:	5f                   	pop    edi
c001a365:	5d                   	pop    ebp
c001a366:	c3                   	ret    
c001a367:	90                   	nop
c001a368:	b8 01 00 00 00       	mov    eax,0x1
c001a36d:	eb e1                	jmp    c001a350 <SoundPort::buffer16(short*, int)+0x6c>
c001a36f:	90                   	nop

c001a370 <SoundPort::buffer32(int*, int)>:
c001a370:	55                   	push   ebp
c001a371:	57                   	push   edi
c001a372:	56                   	push   esi
c001a373:	53                   	push   ebx
c001a374:	83 ec 04             	sub    esp,0x4
c001a377:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a37b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a37f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a382:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a386:	89 04 24             	mov    DWORD PTR [esp],eax
c001a389:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a38c:	74 5a                	je     c001a3e8 <SoundPort::buffer32(int*, int)+0x78>
c001a38e:	85 c0                	test   eax,eax
c001a390:	7e 56                	jle    c001a3e8 <SoundPort::buffer32(int*, int)+0x78>
c001a392:	8d 71 01             	lea    esi,[ecx+0x1]
c001a395:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a398:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a39b:	8b 37                	mov    esi,DWORD PTR [edi]
c001a39d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a3a0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a3a3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a3a6:	74 4c                	je     c001a3f4 <SoundPort::buffer32(int*, int)+0x84>
c001a3a8:	31 f6                	xor    esi,esi
c001a3aa:	eb 1c                	jmp    c001a3c8 <SoundPort::buffer32(int*, int)+0x58>
c001a3ac:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a3af:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a3b2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a3b5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a3b8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a3bc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a3bf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a3c2:	74 18                	je     c001a3dc <SoundPort::buffer32(int*, int)+0x6c>
c001a3c4:	89 de                	mov    esi,ebx
c001a3c6:	66 90                	xchg   ax,ax
c001a3c8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a3cb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a3ce:	75 dc                	jne    c001a3ac <SoundPort::buffer32(int*, int)+0x3c>
c001a3d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a3d3:	90                   	nop
c001a3d4:	83 c4 04             	add    esp,0x4
c001a3d7:	5b                   	pop    ebx
c001a3d8:	5e                   	pop    esi
c001a3d9:	5f                   	pop    edi
c001a3da:	5d                   	pop    ebp
c001a3db:	c3                   	ret    
c001a3dc:	83 c4 04             	add    esp,0x4
c001a3df:	8d 46 02             	lea    eax,[esi+0x2]
c001a3e2:	5b                   	pop    ebx
c001a3e3:	5e                   	pop    esi
c001a3e4:	5f                   	pop    edi
c001a3e5:	5d                   	pop    ebp
c001a3e6:	c3                   	ret    
c001a3e7:	90                   	nop
c001a3e8:	83 c4 04             	add    esp,0x4
c001a3eb:	31 c0                	xor    eax,eax
c001a3ed:	5b                   	pop    ebx
c001a3ee:	5e                   	pop    esi
c001a3ef:	5f                   	pop    edi
c001a3f0:	5d                   	pop    ebp
c001a3f1:	c3                   	ret    
c001a3f2:	66 90                	xchg   ax,ax
c001a3f4:	b8 01 00 00 00       	mov    eax,0x1
c001a3f9:	eb d9                	jmp    c001a3d4 <SoundPort::buffer32(int*, int)+0x64>
c001a3fb:	90                   	nop

c001a3fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a3fc:	57                   	push   edi
c001a3fd:	56                   	push   esi
c001a3fe:	53                   	push   ebx
c001a3ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a403:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a407:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001a40d:	39 03                	cmp    DWORD PTR [ebx],eax
c001a40f:	74 13                	je     c001a424 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001a411:	83 ec 0c             	sub    esp,0xc
c001a414:	68 88 22 02 c0       	push   0xc0022288
c001a419:	e8 f3 67 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a41e:	83 c4 10             	add    esp,0x10
c001a421:	8d 76 00             	lea    esi,[esi+0x0]
c001a424:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001a42a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a42d:	74 11                	je     c001a440 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001a42f:	83 ec 0c             	sub    esp,0xc
c001a432:	68 c7 22 02 c0       	push   0xc00222c7
c001a437:	e8 d5 67 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a43c:	83 c4 10             	add    esp,0x10
c001a43f:	90                   	nop
c001a440:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001a446:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a449:	74 11                	je     c001a45c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001a44b:	83 ec 0c             	sub    esp,0xc
c001a44e:	68 c7 22 02 c0       	push   0xc00222c7
c001a453:	e8 b9 67 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a458:	83 c4 10             	add    esp,0x10
c001a45b:	90                   	nop
c001a45c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a45f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001a463:	7e 07                	jle    c001a46c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001a465:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a469:	8d 76 00             	lea    esi,[esi+0x0]
c001a46c:	85 f6                	test   esi,esi
c001a46e:	7e 2c                	jle    c001a49c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001a470:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a474:	8d 3c 36             	lea    edi,[esi+esi*1]
c001a477:	31 c9                	xor    ecx,ecx
c001a479:	01 d7                	add    edi,edx
c001a47b:	90                   	nop
c001a47c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001a47f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001a482:	85 c0                	test   eax,eax
c001a484:	79 06                	jns    c001a48c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001a486:	05 ff 7f 00 00       	add    eax,0x7fff
c001a48b:	90                   	nop
c001a48c:	c1 f8 0f             	sar    eax,0xf
c001a48f:	83 c1 04             	add    ecx,0x4
c001a492:	66 01 02             	add    WORD PTR [edx],ax
c001a495:	83 c2 02             	add    edx,0x2
c001a498:	39 d7                	cmp    edi,edx
c001a49a:	75 e0                	jne    c001a47c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001a49c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a49f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a4a2:	83 ec 04             	sub    esp,0x4
c001a4a5:	29 f0                	sub    eax,esi
c001a4a7:	c1 e0 02             	shl    eax,0x2
c001a4aa:	50                   	push   eax
c001a4ab:	8d 04 b2             	lea    eax,[edx+esi*4]
c001a4ae:	50                   	push   eax
c001a4af:	52                   	push   edx
c001a4b0:	e8 1b 5f fe ff       	call   c00003d0 <memmove>
c001a4b5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a4b8:	83 c4 10             	add    esp,0x10
c001a4bb:	29 f0                	sub    eax,esi
c001a4bd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a4c0:	89 f0                	mov    eax,esi
c001a4c2:	5b                   	pop    ebx
c001a4c3:	5e                   	pop    esi
c001a4c4:	5f                   	pop    edi
c001a4c5:	c3                   	ret    
c001a4c6:	66 90                	xchg   ax,ax

c001a4c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001a4c8:	57                   	push   edi
c001a4c9:	56                   	push   esi
c001a4ca:	53                   	push   ebx
c001a4cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4cf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a4d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4d7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001a4dd:	39 06                	cmp    DWORD PTR [esi],eax
c001a4df:	74 13                	je     c001a4f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001a4e1:	83 ec 0c             	sub    esp,0xc
c001a4e4:	68 a8 22 02 c0       	push   0xc00222a8
c001a4e9:	e8 23 67 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a4ee:	83 c4 10             	add    esp,0x10
c001a4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001a4fa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001a4fd:	74 11                	je     c001a510 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001a4ff:	83 ec 0c             	sub    esp,0xc
c001a502:	68 e3 22 02 c0       	push   0xc00222e3
c001a507:	e8 05 67 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a50c:	83 c4 10             	add    esp,0x10
c001a50f:	90                   	nop
c001a510:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001a516:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001a519:	74 11                	je     c001a52c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001a51b:	83 ec 0c             	sub    esp,0xc
c001a51e:	68 e3 22 02 c0       	push   0xc00222e3
c001a523:	e8 e9 66 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a528:	83 c4 10             	add    esp,0x10
c001a52b:	90                   	nop
c001a52c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a52f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001a533:	7e 07                	jle    c001a53c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a535:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a539:	8d 76 00             	lea    esi,[esi+0x0]
c001a53c:	85 ff                	test   edi,edi
c001a53e:	7e 1c                	jle    c001a55c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001a540:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a547:	31 c0                	xor    eax,eax
c001a549:	8d 76 00             	lea    esi,[esi+0x0]
c001a54c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a54f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a552:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001a555:	83 c0 04             	add    eax,0x4
c001a558:	39 c1                	cmp    ecx,eax
c001a55a:	75 f0                	jne    c001a54c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a55c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a55f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a562:	83 ec 04             	sub    esp,0x4
c001a565:	29 f8                	sub    eax,edi
c001a567:	c1 e0 02             	shl    eax,0x2
c001a56a:	50                   	push   eax
c001a56b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a56e:	50                   	push   eax
c001a56f:	52                   	push   edx
c001a570:	e8 5b 5e fe ff       	call   c00003d0 <memmove>
c001a575:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	29 f8                	sub    eax,edi
c001a57d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001a580:	89 f8                	mov    eax,edi
c001a582:	5b                   	pop    ebx
c001a583:	5e                   	pop    esi
c001a584:	5f                   	pop    edi
c001a585:	c3                   	ret    

c001a586 <PCI::open(int, int, void*)>:
c001a586:	83 ec 18             	sub    esp,0x18
c001a589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a58d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a591:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a597:	8b 10                	mov    edx,DWORD PTR [eax]
c001a599:	50                   	push   eax
c001a59a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a59d:	31 c0                	xor    eax,eax
c001a59f:	83 c4 1c             	add    esp,0x1c
c001a5a2:	c3                   	ret    
c001a5a3:	90                   	nop

c001a5a4 <PCI::close(int, int, void*)>:
c001a5a4:	31 c0                	xor    eax,eax
c001a5a6:	c3                   	ret    
c001a5a7:	90                   	nop

c001a5a8 <PCI::PCI()>:
c001a5a8:	83 ec 0c             	sub    esp,0xc
c001a5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5af:	83 ec 08             	sub    esp,0x8
c001a5b2:	68 ff 22 02 c0       	push   0xc00222ff
c001a5b7:	50                   	push   eax
c001a5b8:	e8 3f 14 ff ff       	call   c000b9fc <Bus::Bus(char const*)>
c001a5bd:	83 c4 10             	add    esp,0x10
c001a5c0:	ba a8 23 02 c0       	mov    edx,0xc00223a8
c001a5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5c9:	89 10                	mov    DWORD PTR [eax],edx
c001a5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5cf:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5dd:	a3 40 9b 02 c0       	mov    ds:0xc0029b40,eax
c001a5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a5ec:	0f b6 d0             	movzx  edx,al
c001a5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5f3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a604:	0f b6 d0             	movzx  edx,al
c001a607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a60b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a614:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a61a:	8d 50 01             	lea    edx,[eax+0x1]
c001a61d:	88 d1                	mov    cl,dl
c001a61f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a623:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a629:	0f b6 d0             	movzx  edx,al
c001a62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a630:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a634:	83 c9 c0             	or     ecx,0xffffffc0
c001a637:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a63b:	90                   	nop
c001a63c:	83 c4 0c             	add    esp,0xc
c001a63f:	c3                   	ret    

c001a640 <PCI::readBAR8(unsigned int, int)>:
c001a640:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a648:	f6 c2 01             	test   dl,0x1
c001a64b:	74 07                	je     c001a654 <PCI::readBAR8(unsigned int, int)+0x14>
c001a64d:	83 e2 fc             	and    edx,0xfffffffc
c001a650:	01 c2                	add    edx,eax
c001a652:	ec                   	in     al,dx
c001a653:	c3                   	ret    
c001a654:	83 e2 f0             	and    edx,0xfffffff0
c001a657:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a65a:	c3                   	ret    
c001a65b:	90                   	nop

c001a65c <PCI::readBAR16(unsigned int, int)>:
c001a65c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a664:	f6 c2 01             	test   dl,0x1
c001a667:	74 08                	je     c001a671 <PCI::readBAR16(unsigned int, int)+0x15>
c001a669:	83 e2 fc             	and    edx,0xfffffffc
c001a66c:	01 c2                	add    edx,eax
c001a66e:	66 ed                	in     ax,dx
c001a670:	c3                   	ret    
c001a671:	83 e2 f0             	and    edx,0xfffffff0
c001a674:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a678:	c3                   	ret    
c001a679:	90                   	nop

c001a67a <PCI::readBAR32(unsigned int, int)>:
c001a67a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a67e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a682:	f6 c2 01             	test   dl,0x1
c001a685:	74 07                	je     c001a68e <PCI::readBAR32(unsigned int, int)+0x14>
c001a687:	83 e2 fc             	and    edx,0xfffffffc
c001a68a:	01 c2                	add    edx,eax
c001a68c:	ed                   	in     eax,dx
c001a68d:	c3                   	ret    
c001a68e:	83 e2 f0             	and    edx,0xfffffff0
c001a691:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a694:	c3                   	ret    
c001a695:	90                   	nop

c001a696 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a696:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a69a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a69e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6a2:	f6 c2 01             	test   dl,0x1
c001a6a5:	74 07                	je     c001a6ae <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a6a7:	83 e2 fc             	and    edx,0xfffffffc
c001a6aa:	01 ca                	add    edx,ecx
c001a6ac:	ee                   	out    dx,al
c001a6ad:	c3                   	ret    
c001a6ae:	83 e2 f0             	and    edx,0xfffffff0
c001a6b1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a6b4:	c3                   	ret    
c001a6b5:	90                   	nop

c001a6b6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a6b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6c2:	f6 c2 01             	test   dl,0x1
c001a6c5:	74 08                	je     c001a6cf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a6c7:	83 e2 fc             	and    edx,0xfffffffc
c001a6ca:	01 ca                	add    edx,ecx
c001a6cc:	66 ef                	out    dx,ax
c001a6ce:	c3                   	ret    
c001a6cf:	83 e2 f0             	and    edx,0xfffffff0
c001a6d2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a6d6:	c3                   	ret    
c001a6d7:	90                   	nop

c001a6d8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a6d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6e4:	f6 c2 01             	test   dl,0x1
c001a6e7:	74 07                	je     c001a6f0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a6e9:	83 e2 fc             	and    edx,0xfffffffc
c001a6ec:	01 ca                	add    edx,ecx
c001a6ee:	ef                   	out    dx,eax
c001a6ef:	c3                   	ret    
c001a6f0:	83 e2 f0             	and    edx,0xfffffff0
c001a6f3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a6f6:	c3                   	ret    
c001a6f7:	90                   	nop

c001a6f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a6f8:	55                   	push   ebp
c001a6f9:	57                   	push   edi
c001a6fa:	56                   	push   esi
c001a6fb:	53                   	push   ebx
c001a6fc:	83 ec 0c             	sub    esp,0xc
c001a6ff:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a704:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a708:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a70c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a710:	83 fe 07             	cmp    esi,0x7
c001a713:	76 10                	jbe    c001a725 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a715:	83 ec 0c             	sub    esp,0xc
c001a718:	68 07 23 02 c0       	push   0xc0022307
c001a71d:	e8 ef 64 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a722:	83 c4 10             	add    esp,0x10
c001a725:	0f b6 db             	movzx  ebx,bl
c001a728:	83 fb 0f             	cmp    ebx,0xf
c001a72b:	76 10                	jbe    c001a73d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a72d:	83 ec 0c             	sub    esp,0xc
c001a730:	68 37 23 02 c0       	push   0xc0022337
c001a735:	e8 d7 64 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a73a:	83 c4 10             	add    esp,0x10
c001a73d:	8d 04 36             	lea    eax,[esi+esi*1]
c001a740:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a745:	83 c8 f0             	or     eax,0xfffffff0
c001a748:	ee                   	out    dx,al
c001a749:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a74e:	89 e8                	mov    eax,ebp
c001a750:	ee                   	out    dx,al
c001a751:	83 c4 0c             	add    esp,0xc
c001a754:	89 d8                	mov    eax,ebx
c001a756:	89 f9                	mov    ecx,edi
c001a758:	c1 e0 08             	shl    eax,0x8
c001a75b:	0f b6 d9             	movzx  ebx,cl
c001a75e:	83 e3 fc             	and    ebx,0xfffffffc
c001a761:	09 d8                	or     eax,ebx
c001a763:	5b                   	pop    ebx
c001a764:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a769:	5e                   	pop    esi
c001a76a:	5f                   	pop    edi
c001a76b:	5d                   	pop    ebp
c001a76c:	c3                   	ret    
c001a76d:	90                   	nop

c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a76e:	57                   	push   edi
c001a76f:	56                   	push   esi
c001a770:	53                   	push   ebx
c001a771:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a775:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a779:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a77f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a783:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a787:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a78b:	83 ff 01             	cmp    edi,0x1
c001a78e:	75 3f                	jne    c001a7cf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a790:	89 de                	mov    esi,ebx
c001a792:	0f b6 c0             	movzx  eax,al
c001a795:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a79b:	c1 e0 10             	shl    eax,0x10
c001a79e:	0f b6 c9             	movzx  ecx,cl
c001a7a1:	09 f0                	or     eax,esi
c001a7a3:	c1 e1 08             	shl    ecx,0x8
c001a7a6:	0f b6 d2             	movzx  edx,dl
c001a7a9:	09 c8                	or     eax,ecx
c001a7ab:	c1 e2 0b             	shl    edx,0xb
c001a7ae:	09 d0                	or     eax,edx
c001a7b0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a7b5:	0d 00 00 00 80       	or     eax,0x80000000
c001a7ba:	ef                   	out    dx,eax
c001a7bb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a7c0:	ed                   	in     eax,dx
c001a7c1:	83 e3 02             	and    ebx,0x2
c001a7c4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a7cb:	d3 e8                	shr    eax,cl
c001a7cd:	eb 44                	jmp    c001a813 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a7cf:	83 ff 02             	cmp    edi,0x2
c001a7d2:	75 2d                	jne    c001a801 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a7d4:	83 ec 0c             	sub    esp,0xc
c001a7d7:	0f b6 c9             	movzx  ecx,cl
c001a7da:	0f b6 d2             	movzx  edx,dl
c001a7dd:	0f b6 fb             	movzx  edi,bl
c001a7e0:	0f b6 c0             	movzx  eax,al
c001a7e3:	57                   	push   edi
c001a7e4:	51                   	push   ecx
c001a7e5:	52                   	push   edx
c001a7e6:	50                   	push   eax
c001a7e7:	56                   	push   esi
c001a7e8:	e8 0b ff ff ff       	call   c001a6f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7ed:	89 c2                	mov    edx,eax
c001a7ef:	ed                   	in     eax,dx
c001a7f0:	83 e3 02             	and    ebx,0x2
c001a7f3:	83 c4 20             	add    esp,0x20
c001a7f6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a7fd:	d3 e8                	shr    eax,cl
c001a7ff:	eb 12                	jmp    c001a813 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a801:	83 ec 0c             	sub    esp,0xc
c001a804:	68 67 23 02 c0       	push   0xc0022367
c001a809:	e8 03 64 ff ff       	call   c0010c11 <KePanic(char const*)>
c001a80e:	83 c4 10             	add    esp,0x10
c001a811:	31 c0                	xor    eax,eax
c001a813:	5b                   	pop    ebx
c001a814:	5e                   	pop    esi
c001a815:	5f                   	pop    edi
c001a816:	c3                   	ret    
c001a817:	90                   	nop

c001a818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a818:	83 ec 18             	sub    esp,0x18
c001a81b:	6a 00                	push   0x0
c001a81d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a822:	50                   	push   eax
c001a823:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a828:	50                   	push   eax
c001a829:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a82e:	50                   	push   eax
c001a82f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a833:	e8 36 ff ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a838:	83 c4 2c             	add    esp,0x2c
c001a83b:	c3                   	ret    

c001a83c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a83c:	83 ec 18             	sub    esp,0x18
c001a83f:	6a 0e                	push   0xe
c001a841:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a846:	50                   	push   eax
c001a847:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a84c:	50                   	push   eax
c001a84d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a852:	50                   	push   eax
c001a853:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a857:	e8 12 ff ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a85c:	83 c4 2c             	add    esp,0x2c
c001a85f:	0f b6 c0             	movzx  eax,al
c001a862:	c3                   	ret    
c001a863:	90                   	nop

c001a864 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a864:	55                   	push   ebp
c001a865:	57                   	push   edi
c001a866:	56                   	push   esi
c001a867:	53                   	push   ebx
c001a868:	83 ec 18             	sub    esp,0x18
c001a86b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a870:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a875:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a87a:	6a 0a                	push   0xa
c001a87c:	56                   	push   esi
c001a87d:	55                   	push   ebp
c001a87e:	57                   	push   edi
c001a87f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a883:	e8 e6 fe ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a888:	83 c4 14             	add    esp,0x14
c001a88b:	89 c3                	mov    ebx,eax
c001a88d:	6a 0a                	push   0xa
c001a88f:	0f b6 db             	movzx  ebx,bl
c001a892:	56                   	push   esi
c001a893:	55                   	push   ebp
c001a894:	57                   	push   edi
c001a895:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a899:	e8 d0 fe ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a89e:	83 c4 2c             	add    esp,0x2c
c001a8a1:	25 00 ff 00 00       	and    eax,0xff00
c001a8a6:	09 d8                	or     eax,ebx
c001a8a8:	5b                   	pop    ebx
c001a8a9:	5e                   	pop    esi
c001a8aa:	5f                   	pop    edi
c001a8ab:	5d                   	pop    ebp
c001a8ac:	c3                   	ret    
c001a8ad:	90                   	nop

c001a8ae <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a8ae:	83 ec 18             	sub    esp,0x18
c001a8b1:	6a 08                	push   0x8
c001a8b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8b8:	50                   	push   eax
c001a8b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8be:	50                   	push   eax
c001a8bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8c4:	50                   	push   eax
c001a8c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8c9:	e8 a0 fe ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8ce:	83 c4 2c             	add    esp,0x2c
c001a8d1:	0f b6 c4             	movzx  eax,ah
c001a8d4:	c3                   	ret    
c001a8d5:	90                   	nop

c001a8d6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a8d6:	83 ec 18             	sub    esp,0x18
c001a8d9:	6a 08                	push   0x8
c001a8db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8e0:	50                   	push   eax
c001a8e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8e6:	50                   	push   eax
c001a8e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a8ec:	50                   	push   eax
c001a8ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8f1:	e8 78 fe ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8f6:	83 c4 2c             	add    esp,0x2c
c001a8f9:	c3                   	ret    

c001a8fa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a8fa:	83 ec 18             	sub    esp,0x18
c001a8fd:	6a 3c                	push   0x3c
c001a8ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a904:	50                   	push   eax
c001a905:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a90a:	50                   	push   eax
c001a90b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a910:	50                   	push   eax
c001a911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a915:	e8 54 fe ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a91a:	83 c4 2c             	add    esp,0x2c
c001a91d:	c3                   	ret    

c001a91e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a91e:	83 ec 18             	sub    esp,0x18
c001a921:	6a 18                	push   0x18
c001a923:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a928:	50                   	push   eax
c001a929:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a92e:	50                   	push   eax
c001a92f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a934:	50                   	push   eax
c001a935:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a939:	e8 30 fe ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a93e:	83 c4 2c             	add    esp,0x2c
c001a941:	0f b6 c4             	movzx  eax,ah
c001a944:	c3                   	ret    
c001a945:	90                   	nop

c001a946 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a946:	55                   	push   ebp
c001a947:	57                   	push   edi
c001a948:	56                   	push   esi
c001a949:	53                   	push   ebx
c001a94a:	83 ec 28             	sub    esp,0x28
c001a94d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a951:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a956:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a95b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a960:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a967:	8d 43 12             	lea    eax,[ebx+0x12]
c001a96a:	83 c3 10             	add    ebx,0x10
c001a96d:	0f b6 c0             	movzx  eax,al
c001a970:	0f b6 db             	movzx  ebx,bl
c001a973:	50                   	push   eax
c001a974:	51                   	push   ecx
c001a975:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a979:	57                   	push   edi
c001a97a:	55                   	push   ebp
c001a97b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a97f:	e8 ea fd ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a984:	83 c4 14             	add    esp,0x14
c001a987:	89 c6                	mov    esi,eax
c001a989:	53                   	push   ebx
c001a98a:	c1 e6 10             	shl    esi,0x10
c001a98d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a991:	51                   	push   ecx
c001a992:	57                   	push   edi
c001a993:	55                   	push   ebp
c001a994:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a998:	e8 d1 fd ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a99d:	83 c4 3c             	add    esp,0x3c
c001a9a0:	0f b7 c0             	movzx  eax,ax
c001a9a3:	5b                   	pop    ebx
c001a9a4:	09 f0                	or     eax,esi
c001a9a6:	5e                   	pop    esi
c001a9a7:	5f                   	pop    edi
c001a9a8:	5d                   	pop    ebp
c001a9a9:	c3                   	ret    

c001a9aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a9aa:	55                   	push   ebp
c001a9ab:	57                   	push   edi
c001a9ac:	56                   	push   esi
c001a9ad:	53                   	push   ebx
c001a9ae:	83 ec 0c             	sub    esp,0xc
c001a9b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a9b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a9b9:	89 f5                	mov    ebp,esi
c001a9bb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a9c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a9c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a9c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a9cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a9d1:	83 f9 01             	cmp    ecx,0x1
c001a9d4:	75 5d                	jne    c001aa33 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a9d6:	0f b6 c8             	movzx  ecx,al
c001a9d9:	0f b6 d2             	movzx  edx,dl
c001a9dc:	c1 e1 10             	shl    ecx,0x10
c001a9df:	c1 e2 0b             	shl    edx,0xb
c001a9e2:	89 f0                	mov    eax,esi
c001a9e4:	25 fc 00 00 00       	and    eax,0xfc
c001a9e9:	09 c1                	or     ecx,eax
c001a9eb:	89 e8                	mov    eax,ebp
c001a9ed:	0f b6 c0             	movzx  eax,al
c001a9f0:	c1 e0 08             	shl    eax,0x8
c001a9f3:	09 c1                	or     ecx,eax
c001a9f5:	09 d1                	or     ecx,edx
c001a9f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a9fc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001aa02:	89 c8                	mov    eax,ecx
c001aa04:	ef                   	out    dx,eax
c001aa05:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aa0a:	ed                   	in     eax,dx
c001aa0b:	0f b7 db             	movzx  ebx,bx
c001aa0e:	83 e6 02             	and    esi,0x2
c001aa11:	74 0a                	je     c001aa1d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001aa13:	0f b7 d0             	movzx  edx,ax
c001aa16:	c1 e3 10             	shl    ebx,0x10
c001aa19:	09 d3                	or     ebx,edx
c001aa1b:	eb 05                	jmp    c001aa22 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001aa1d:	66 31 c0             	xor    ax,ax
c001aa20:	09 c3                	or     ebx,eax
c001aa22:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aa27:	89 c8                	mov    eax,ecx
c001aa29:	ef                   	out    dx,eax
c001aa2a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aa2f:	89 d8                	mov    eax,ebx
c001aa31:	eb 41                	jmp    c001aa74 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001aa33:	83 f9 02             	cmp    ecx,0x2
c001aa36:	75 45                	jne    c001aa7d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001aa38:	83 ec 0c             	sub    esp,0xc
c001aa3b:	0f b6 d2             	movzx  edx,dl
c001aa3e:	89 f1                	mov    ecx,esi
c001aa40:	0f b6 c0             	movzx  eax,al
c001aa43:	0f b6 f1             	movzx  esi,cl
c001aa46:	89 e9                	mov    ecx,ebp
c001aa48:	56                   	push   esi
c001aa49:	0f b6 c9             	movzx  ecx,cl
c001aa4c:	51                   	push   ecx
c001aa4d:	52                   	push   edx
c001aa4e:	50                   	push   eax
c001aa4f:	57                   	push   edi
c001aa50:	e8 a3 fc ff ff       	call   c001a6f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa55:	89 c2                	mov    edx,eax
c001aa57:	ed                   	in     eax,dx
c001aa58:	83 c4 20             	add    esp,0x20
c001aa5b:	0f b7 db             	movzx  ebx,bx
c001aa5e:	f6 c2 02             	test   dl,0x2
c001aa61:	74 0c                	je     c001aa6f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001aa63:	0f b7 c8             	movzx  ecx,ax
c001aa66:	89 d8                	mov    eax,ebx
c001aa68:	c1 e0 10             	shl    eax,0x10
c001aa6b:	09 c8                	or     eax,ecx
c001aa6d:	eb 05                	jmp    c001aa74 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001aa6f:	66 31 c0             	xor    ax,ax
c001aa72:	09 d8                	or     eax,ebx
c001aa74:	ef                   	out    dx,eax
c001aa75:	83 c4 0c             	add    esp,0xc
c001aa78:	5b                   	pop    ebx
c001aa79:	5e                   	pop    esi
c001aa7a:	5f                   	pop    edi
c001aa7b:	5d                   	pop    ebp
c001aa7c:	c3                   	ret    
c001aa7d:	c7 44 24 20 67 23 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022367
c001aa85:	83 c4 0c             	add    esp,0xc
c001aa88:	5b                   	pop    ebx
c001aa89:	5e                   	pop    esi
c001aa8a:	5f                   	pop    edi
c001aa8b:	5d                   	pop    ebp
c001aa8c:	e9 80 61 ff ff       	jmp    c0010c11 <KePanic(char const*)>
c001aa91:	90                   	nop

c001aa92 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001aa92:	55                   	push   ebp
c001aa93:	57                   	push   edi
c001aa94:	56                   	push   esi
c001aa95:	53                   	push   ebx
c001aa96:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001aa9c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001aaa3:	80 3d 4c 9b 02 c0 00 	cmp    BYTE PTR ds:0xc0029b4c,0x0
c001aaaa:	0f 85 bd 00 00 00    	jne    c001ab6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001aab0:	83 ec 0c             	sub    esp,0xc
c001aab3:	68 14 01 00 00       	push   0x114
c001aab8:	e8 f1 cf fe ff       	call   c0007aae <malloc>
c001aabd:	83 c4 0c             	add    esp,0xc
c001aac0:	89 c3                	mov    ebx,eax
c001aac2:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c001aac8:	68 6d 23 02 c0       	push   0xc002236d
c001aacd:	50                   	push   eax
c001aace:	e8 bd 06 ff ff       	call   c000b190 <File::File(char const*, Process*)>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	85 db                	test   ebx,ebx
c001aad8:	0f 84 67 02 00 00    	je     c001ad45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001aade:	56                   	push   esi
c001aadf:	56                   	push   esi
c001aae0:	6a 01                	push   0x1
c001aae2:	53                   	push   ebx
c001aae3:	e8 64 07 ff ff       	call   c000b24c <File::open(FileOpenMode)>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	85 c0                	test   eax,eax
c001aaed:	0f 85 52 02 00 00    	jne    c001ad45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001aaf3:	52                   	push   edx
c001aaf4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001aaf8:	50                   	push   eax
c001aaf9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001aafd:	50                   	push   eax
c001aafe:	53                   	push   ebx
c001aaff:	e8 4a 0a ff ff       	call   c000b54e <File::stat(unsigned long long*, bool*)>
c001ab04:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ab08:	40                   	inc    eax
c001ab09:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab0c:	e8 9d cf fe ff       	call   c0007aae <malloc>
c001ab11:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ab15:	a3 48 9b 02 c0       	mov    ds:0xc0029b48,eax
c001ab1a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001ab1e:	59                   	pop    ecx
c001ab1f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ab21:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001ab25:	51                   	push   ecx
c001ab26:	50                   	push   eax
c001ab27:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ab2b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ab2f:	53                   	push   ebx
c001ab30:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ab33:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001ab37:	83 c4 20             	add    esp,0x20
c001ab3a:	89 c8                	mov    eax,ecx
c001ab3c:	99                   	cdq    
c001ab3d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001ab41:	0f 85 fe 01 00 00    	jne    c001ad45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001ab47:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001ab4b:	0f 85 f4 01 00 00    	jne    c001ad45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001ab51:	83 ec 0c             	sub    esp,0xc
c001ab54:	53                   	push   ebx
c001ab55:	e8 50 07 ff ff       	call   c000b2aa <File::close()>
c001ab5a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ab5e:	c6 05 4c 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029b4c,0x1
c001ab65:	a3 44 9b 02 c0       	mov    ds:0xc0029b44,eax
c001ab6a:	83 c4 10             	add    esp,0x10
c001ab6d:	a1 44 9b 02 c0       	mov    eax,ds:0xc0029b44
c001ab72:	8b 1d 48 9b 02 c0    	mov    ebx,DWORD PTR ds:0xc0029b48
c001ab78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab7c:	31 f6                	xor    esi,esi
c001ab7e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001ab86:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001ab8d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001ab92:	31 c9                	xor    ecx,ecx
c001ab94:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001ab9c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001aba1:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001aba9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001abad:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001abb5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001abb9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001abbd:	0f 8e 82 01 00 00    	jle    c001ad45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001abc3:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001abc6:	d4 40                	aam    0x40
c001abc8:	d5 39                	aad    0x39
c001abca:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001abce:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001abd2:	d4 40                	aam    0x40
c001abd4:	d5 39                	aad    0x39
c001abd6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001abda:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001abde:	d4 40                	aam    0x40
c001abe0:	d5 39                	aad    0x39
c001abe2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001abe6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001abea:	d4 40                	aam    0x40
c001abec:	d5 39                	aad    0x39
c001abee:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001abf2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001abf6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001abfa:	3c 56                	cmp    al,0x56
c001abfc:	74 43                	je     c001ac41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001abfe:	d4 40                	aam    0x40
c001ac00:	d5 39                	aad    0x39
c001ac02:	8d 48 d0             	lea    ecx,[eax-0x30]
c001ac05:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001ac09:	0f b6 c9             	movzx  ecx,cl
c001ac0c:	c1 e1 04             	shl    ecx,0x4
c001ac0f:	d4 40                	aam    0x40
c001ac11:	d5 39                	aad    0x39
c001ac13:	83 e8 30             	sub    eax,0x30
c001ac16:	0f b6 c0             	movzx  eax,al
c001ac19:	09 c1                	or     ecx,eax
c001ac1b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001ac1f:	c1 e1 04             	shl    ecx,0x4
c001ac22:	d4 40                	aam    0x40
c001ac24:	d5 39                	aad    0x39
c001ac26:	83 e8 30             	sub    eax,0x30
c001ac29:	0f b6 c0             	movzx  eax,al
c001ac2c:	09 c1                	or     ecx,eax
c001ac2e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001ac32:	c1 e1 04             	shl    ecx,0x4
c001ac35:	d4 40                	aam    0x40
c001ac37:	d5 39                	aad    0x39
c001ac39:	83 e8 30             	sub    eax,0x30
c001ac3c:	0f b6 c0             	movzx  eax,al
c001ac3f:	09 c1                	or     ecx,eax
c001ac41:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001ac45:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ac49:	3c 58                	cmp    al,0x58
c001ac4b:	74 47                	je     c001ac94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001ac4d:	d4 40                	aam    0x40
c001ac4f:	d5 39                	aad    0x39
c001ac51:	8d 50 d0             	lea    edx,[eax-0x30]
c001ac54:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001ac58:	0f b6 d2             	movzx  edx,dl
c001ac5b:	c1 e2 04             	shl    edx,0x4
c001ac5e:	d4 40                	aam    0x40
c001ac60:	d5 39                	aad    0x39
c001ac62:	83 e8 30             	sub    eax,0x30
c001ac65:	0f b6 c0             	movzx  eax,al
c001ac68:	09 c2                	or     edx,eax
c001ac6a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001ac6e:	c1 e2 04             	shl    edx,0x4
c001ac71:	d4 40                	aam    0x40
c001ac73:	d5 39                	aad    0x39
c001ac75:	83 e8 30             	sub    eax,0x30
c001ac78:	0f b6 c0             	movzx  eax,al
c001ac7b:	09 c2                	or     edx,eax
c001ac7d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001ac81:	c1 e2 04             	shl    edx,0x4
c001ac84:	d4 40                	aam    0x40
c001ac86:	d5 39                	aad    0x39
c001ac88:	83 e8 30             	sub    eax,0x30
c001ac8b:	0f b6 c0             	movzx  eax,al
c001ac8e:	09 c2                	or     edx,eax
c001ac90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac94:	83 c6 10             	add    esi,0x10
c001ac97:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001ac9b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001ac9f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aca3:	83 fa 0a             	cmp    edx,0xa
c001aca6:	74 0b                	je     c001acb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001aca8:	47                   	inc    edi
c001aca9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001acad:	75 19                	jne    c001acc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001acaf:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001acb3:	31 c0                	xor    eax,eax
c001acb5:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001acba:	0f 94 c0             	sete   al
c001acbd:	01 c6                	add    esi,eax
c001acbf:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001acc4:	75 0b                	jne    c001acd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001acc6:	eb 14                	jmp    c001acdc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001acc8:	46                   	inc    esi
c001acc9:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001accc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001accf:	eb ca                	jmp    c001ac9b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001acd1:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001acd6:	0f 85 dd fe ff ff    	jne    c001abb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001acdc:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001ace1:	74 10                	je     c001acf3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001ace3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001ace8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001aced:	0f 85 c6 fe ff ff    	jne    c001abb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001acf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acf7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001acfb:	83 e8 30             	sub    eax,0x30
c001acfe:	83 ef 30             	sub    edi,0x30
c001ad01:	c1 e0 04             	shl    eax,0x4
c001ad04:	09 f8                	or     eax,edi
c001ad06:	0f b6 c0             	movzx  eax,al
c001ad09:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ad0d:	0f 85 a6 fe ff ff    	jne    c001abb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ad13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ad1b:	83 e8 30             	sub    eax,0x30
c001ad1e:	83 ef 30             	sub    edi,0x30
c001ad21:	c1 e0 04             	shl    eax,0x4
c001ad24:	09 f8                	or     eax,edi
c001ad26:	0f b6 c0             	movzx  eax,al
c001ad29:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ad2d:	0f 85 86 fe ff ff    	jne    c001abb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ad33:	50                   	push   eax
c001ad34:	50                   	push   eax
c001ad35:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ad39:	50                   	push   eax
c001ad3a:	55                   	push   ebp
c001ad3b:	e8 00 59 fe ff       	call   c0000640 <strcpy>
c001ad40:	83 c4 10             	add    esp,0x10
c001ad43:	eb 06                	jmp    c001ad4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001ad45:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001ad49:	31 ed                	xor    ebp,ebp
c001ad4b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ad51:	89 e8                	mov    eax,ebp
c001ad53:	5b                   	pop    ebx
c001ad54:	5e                   	pop    esi
c001ad55:	5f                   	pop    edi
c001ad56:	5d                   	pop    ebp
c001ad57:	c3                   	ret    

c001ad58 <PCI::checkBus(unsigned char)>:
c001ad58:	56                   	push   esi
c001ad59:	53                   	push   ebx
c001ad5a:	31 db                	xor    ebx,ebx
c001ad5c:	51                   	push   ecx
c001ad5d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ad62:	52                   	push   edx
c001ad63:	53                   	push   ebx
c001ad64:	43                   	inc    ebx
c001ad65:	56                   	push   esi
c001ad66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad6a:	e8 03 03 00 00       	call   c001b072 <PCI::checkDevice(unsigned char, unsigned char)>
c001ad6f:	83 c4 10             	add    esp,0x10
c001ad72:	83 fb 20             	cmp    ebx,0x20
c001ad75:	75 eb                	jne    c001ad62 <PCI::checkBus(unsigned char)+0xa>
c001ad77:	58                   	pop    eax
c001ad78:	5b                   	pop    ebx
c001ad79:	5e                   	pop    esi
c001ad7a:	c3                   	ret    
c001ad7b:	90                   	nop

c001ad7c <PCI::foundDevice(PCIDeviceInfo)>:
c001ad7c:	55                   	push   ebp
c001ad7d:	57                   	push   edi
c001ad7e:	56                   	push   esi
c001ad7f:	53                   	push   ebx
c001ad80:	83 ec 1c             	sub    esp,0x1c
c001ad83:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ad88:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ad8c:	3d ff ff 00 00       	cmp    eax,0xffff
c001ad91:	0f 84 57 01 00 00    	je     c001aeee <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ad97:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ad9c:	66 3d 06 04          	cmp    ax,0x406
c001ada0:	75 2c                	jne    c001adce <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ada2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ada7:	50                   	push   eax
c001ada8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001adad:	50                   	push   eax
c001adae:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001adb3:	50                   	push   eax
c001adb4:	53                   	push   ebx
c001adb5:	e8 64 fb ff ff       	call   c001a91e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001adba:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001adbe:	0f b6 c0             	movzx  eax,al
c001adc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001adc5:	83 c4 2c             	add    esp,0x2c
c001adc8:	5b                   	pop    ebx
c001adc9:	5e                   	pop    esi
c001adca:	5f                   	pop    edi
c001adcb:	5d                   	pop    ebp
c001adcc:	eb 8a                	jmp    c001ad58 <PCI::checkBus(unsigned char)>
c001adce:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001add2:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001add8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001addc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ade0:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001ade5:	85 d2                	test   edx,edx
c001ade7:	74 36                	je     c001ae1f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001ade9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001adec:	85 c9                	test   ecx,ecx
c001adee:	74 2b                	je     c001ae1b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001adf0:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001adf6:	31 ee                	xor    esi,ebp
c001adf8:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001adfe:	75 1b                	jne    c001ae1b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ae00:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001ae04:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001ae0a:	75 0f                	jne    c001ae1b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ae0c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ae13:	39 f9                	cmp    ecx,edi
c001ae15:	0f 84 d3 00 00 00    	je     c001aeee <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ae1b:	8b 12                	mov    edx,DWORD PTR [edx]
c001ae1d:	eb c6                	jmp    c001ade5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ae1f:	3d 01 06 00 00       	cmp    eax,0x601
c001ae24:	75 19                	jne    c001ae3f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001ae26:	83 ec 0c             	sub    esp,0xc
c001ae29:	68 64 01 00 00       	push   0x164
c001ae2e:	e8 7b cc fe ff       	call   c0007aae <malloc>
c001ae33:	89 c5                	mov    ebp,eax
c001ae35:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae38:	e8 a1 0e 00 00       	call   c001bcde <SATABus::SATABus()>
c001ae3d:	eb 1e                	jmp    c001ae5d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001ae3f:	3d 01 01 00 00       	cmp    eax,0x101
c001ae44:	75 62                	jne    c001aea8 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001ae46:	83 ec 0c             	sub    esp,0xc
c001ae49:	68 70 02 00 00       	push   0x270
c001ae4e:	e8 5b cc fe ff       	call   c0007aae <malloc>
c001ae53:	89 c5                	mov    ebp,eax
c001ae55:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae58:	e8 e5 02 00 00       	call   c001b142 <IDE::IDE()>
c001ae5d:	5f                   	pop    edi
c001ae5e:	58                   	pop    eax
c001ae5f:	55                   	push   ebp
c001ae60:	53                   	push   ebx
c001ae61:	e8 34 12 ff ff       	call   c000c09a <Device::addChild(Device*)>
c001ae66:	83 ec 1c             	sub    esp,0x1c
c001ae69:	b9 09 00 00 00       	mov    ecx,0x9
c001ae6e:	fc                   	cld    
c001ae6f:	89 e7                	mov    edi,esp
c001ae71:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ae75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ae77:	55                   	push   ebp
c001ae78:	e8 63 11 ff ff       	call   c000bfe0 <Device::preOpenPCI(PCIDeviceInfo)>
c001ae7d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ae80:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ae84:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ae8c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ae94:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ae9c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ae9f:	83 c4 4c             	add    esp,0x4c
c001aea2:	5b                   	pop    ebx
c001aea3:	5e                   	pop    esi
c001aea4:	5f                   	pop    edi
c001aea5:	5d                   	pop    ebp
c001aea6:	ff e0                	jmp    eax
c001aea8:	83 ec 0c             	sub    esp,0xc
c001aeab:	68 58 01 00 00       	push   0x158
c001aeb0:	e8 f9 cb fe ff       	call   c0007aae <malloc>
c001aeb5:	89 c5                	mov    ebp,eax
c001aeb7:	58                   	pop    eax
c001aeb8:	5a                   	pop    edx
c001aeb9:	68 86 23 02 c0       	push   0xc0022386
c001aebe:	55                   	push   ebp
c001aebf:	e8 74 14 ff ff       	call   c000c338 <DriverlessDevice::DriverlessDevice(char const*)>
c001aec4:	59                   	pop    ecx
c001aec5:	5e                   	pop    esi
c001aec6:	55                   	push   ebp
c001aec7:	53                   	push   ebx
c001aec8:	e8 cd 11 ff ff       	call   c000c09a <Device::addChild(Device*)>
c001aecd:	83 c4 10             	add    esp,0x10
c001aed0:	b9 09 00 00 00       	mov    ecx,0x9
c001aed5:	fc                   	cld    
c001aed6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001aeda:	89 fe                	mov    esi,edi
c001aedc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aede:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001aee2:	83 c4 1c             	add    esp,0x1c
c001aee5:	5b                   	pop    ebx
c001aee6:	5e                   	pop    esi
c001aee7:	5f                   	pop    edi
c001aee8:	5d                   	pop    ebp
c001aee9:	e9 f2 10 ff ff       	jmp    c000bfe0 <Device::preOpenPCI(PCIDeviceInfo)>
c001aeee:	83 c4 1c             	add    esp,0x1c
c001aef1:	5b                   	pop    ebx
c001aef2:	5e                   	pop    esi
c001aef3:	5f                   	pop    edi
c001aef4:	5d                   	pop    ebp
c001aef5:	c3                   	ret    

c001aef6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001aef6:	55                   	push   ebp
c001aef7:	57                   	push   edi
c001aef8:	56                   	push   esi
c001aef9:	53                   	push   ebx
c001aefa:	83 ec 68             	sub    esp,0x68
c001aefd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001af01:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af0c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af13:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001af18:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af1c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af23:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001af28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001af2c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001af31:	6a 0c                	push   0xc
c001af33:	57                   	push   edi
c001af34:	53                   	push   ebx
c001af35:	56                   	push   esi
c001af36:	55                   	push   ebp
c001af37:	e8 32 f8 ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af3c:	83 c4 20             	add    esp,0x20
c001af3f:	57                   	push   edi
c001af40:	53                   	push   ebx
c001af41:	56                   	push   esi
c001af42:	55                   	push   ebp
c001af43:	e8 1c f9 ff ff       	call   c001a864 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001af48:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001af4d:	57                   	push   edi
c001af4e:	53                   	push   ebx
c001af4f:	56                   	push   esi
c001af50:	55                   	push   ebp
c001af51:	e8 a4 f9 ff ff       	call   c001a8fa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001af56:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001af5a:	83 c4 14             	add    esp,0x14
c001af5d:	6a 3c                	push   0x3c
c001af5f:	57                   	push   edi
c001af60:	53                   	push   ebx
c001af61:	56                   	push   esi
c001af62:	55                   	push   ebp
c001af63:	e8 06 f8 ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af68:	0f b6 c4             	movzx  eax,ah
c001af6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001af6f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001af73:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001af77:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001af7c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001af82:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001af88:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af8c:	83 c4 20             	add    esp,0x20
c001af8f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001af94:	74 30                	je     c001afc6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001af96:	31 c0                	xor    eax,eax
c001af98:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001af9c:	7e 28                	jle    c001afc6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001af9e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001afa6:	39 cb                	cmp    ebx,ecx
c001afa8:	75 19                	jne    c001afc3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001afaa:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001afb2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001afb6:	75 0b                	jne    c001afc3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001afb8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001afbf:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001afc3:	40                   	inc    eax
c001afc4:	eb d2                	jmp    c001af98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001afc6:	31 d2                	xor    edx,edx
c001afc8:	83 ec 0c             	sub    esp,0xc
c001afcb:	57                   	push   edi
c001afcc:	53                   	push   ebx
c001afcd:	56                   	push   esi
c001afce:	52                   	push   edx
c001afcf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001afd3:	55                   	push   ebp
c001afd4:	e8 6d f9 ff ff       	call   c001a946 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afd9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001afdd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001afe1:	42                   	inc    edx
c001afe2:	83 c4 20             	add    esp,0x20
c001afe5:	83 fa 06             	cmp    edx,0x6
c001afe8:	75 de                	jne    c001afc8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001afea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001afee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aff2:	c1 e2 08             	shl    edx,0x8
c001aff5:	83 ec 0c             	sub    esp,0xc
c001aff8:	0f b6 c4             	movzx  eax,ah
c001affb:	09 d0                	or     eax,edx
c001affd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b002:	6a 02                	push   0x2
c001b004:	57                   	push   edi
c001b005:	53                   	push   ebx
c001b006:	56                   	push   esi
c001b007:	55                   	push   ebp
c001b008:	e8 61 f7 ff ff       	call   c001a76e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b00d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b012:	83 c4 20             	add    esp,0x20
c001b015:	57                   	push   edi
c001b016:	53                   	push   ebx
c001b017:	56                   	push   esi
c001b018:	55                   	push   ebp
c001b019:	e8 90 f8 ff ff       	call   c001a8ae <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b01e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b022:	57                   	push   edi
c001b023:	53                   	push   ebx
c001b024:	56                   	push   esi
c001b025:	55                   	push   ebp
c001b026:	e8 ed f7 ff ff       	call   c001a818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b02b:	b9 09 00 00 00       	mov    ecx,0x9
c001b030:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b035:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b039:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b03d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b041:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b045:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b049:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b04d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b051:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b055:	83 ec 0c             	sub    esp,0xc
c001b058:	fc                   	cld    
c001b059:	89 e7                	mov    edi,esp
c001b05b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b05f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b061:	55                   	push   ebp
c001b062:	e8 15 fd ff ff       	call   c001ad7c <PCI::foundDevice(PCIDeviceInfo)>
c001b067:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b06d:	5b                   	pop    ebx
c001b06e:	5e                   	pop    esi
c001b06f:	5f                   	pop    edi
c001b070:	5d                   	pop    ebp
c001b071:	c3                   	ret    

c001b072 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b072:	55                   	push   ebp
c001b073:	57                   	push   edi
c001b074:	56                   	push   esi
c001b075:	53                   	push   ebx
c001b076:	83 ec 0c             	sub    esp,0xc
c001b079:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b07d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b082:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b087:	6a 00                	push   0x0
c001b089:	56                   	push   esi
c001b08a:	57                   	push   edi
c001b08b:	55                   	push   ebp
c001b08c:	e8 87 f7 ff ff       	call   c001a818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b091:	6a 00                	push   0x0
c001b093:	56                   	push   esi
c001b094:	57                   	push   edi
c001b095:	55                   	push   ebp
c001b096:	e8 5b fe ff ff       	call   c001aef6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b09b:	83 c4 20             	add    esp,0x20
c001b09e:	6a 00                	push   0x0
c001b0a0:	56                   	push   esi
c001b0a1:	57                   	push   edi
c001b0a2:	55                   	push   ebp
c001b0a3:	e8 94 f7 ff ff       	call   c001a83c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b0a8:	83 c4 10             	add    esp,0x10
c001b0ab:	a8 80                	test   al,0x80
c001b0ad:	74 2d                	je     c001b0dc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b0af:	bb 01 00 00 00       	mov    ebx,0x1
c001b0b4:	53                   	push   ebx
c001b0b5:	56                   	push   esi
c001b0b6:	57                   	push   edi
c001b0b7:	55                   	push   ebp
c001b0b8:	e8 5b f7 ff ff       	call   c001a818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b0bd:	83 c4 10             	add    esp,0x10
c001b0c0:	0f b7 c0             	movzx  eax,ax
c001b0c3:	3d ff ff 00 00       	cmp    eax,0xffff
c001b0c8:	74 0c                	je     c001b0d6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b0ca:	53                   	push   ebx
c001b0cb:	56                   	push   esi
c001b0cc:	57                   	push   edi
c001b0cd:	55                   	push   ebp
c001b0ce:	e8 23 fe ff ff       	call   c001aef6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b0d3:	83 c4 10             	add    esp,0x10
c001b0d6:	43                   	inc    ebx
c001b0d7:	83 fb 08             	cmp    ebx,0x8
c001b0da:	75 d8                	jne    c001b0b4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b0dc:	83 c4 0c             	add    esp,0xc
c001b0df:	5b                   	pop    ebx
c001b0e0:	5e                   	pop    esi
c001b0e1:	5f                   	pop    edi
c001b0e2:	5d                   	pop    ebp
c001b0e3:	c3                   	ret    

c001b0e4 <PCI::detect()>:
c001b0e4:	56                   	push   esi
c001b0e5:	53                   	push   ebx
c001b0e6:	53                   	push   ebx
c001b0e7:	31 db                	xor    ebx,ebx
c001b0e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0ed:	6a 00                	push   0x0
c001b0ef:	6a 00                	push   0x0
c001b0f1:	6a 00                	push   0x0
c001b0f3:	56                   	push   esi
c001b0f4:	e8 43 f7 ff ff       	call   c001a83c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b0f9:	83 c4 10             	add    esp,0x10
c001b0fc:	a8 80                	test   al,0x80
c001b0fe:	75 21                	jne    c001b121 <PCI::detect()+0x3d>
c001b100:	51                   	push   ecx
c001b101:	51                   	push   ecx
c001b102:	6a 00                	push   0x0
c001b104:	56                   	push   esi
c001b105:	e8 4e fc ff ff       	call   c001ad58 <PCI::checkBus(unsigned char)>
c001b10a:	83 c4 10             	add    esp,0x10
c001b10d:	eb 2a                	jmp    c001b139 <PCI::detect()+0x55>
c001b10f:	52                   	push   edx
c001b110:	52                   	push   edx
c001b111:	53                   	push   ebx
c001b112:	43                   	inc    ebx
c001b113:	56                   	push   esi
c001b114:	e8 3f fc ff ff       	call   c001ad58 <PCI::checkBus(unsigned char)>
c001b119:	83 c4 10             	add    esp,0x10
c001b11c:	83 fb 08             	cmp    ebx,0x8
c001b11f:	74 18                	je     c001b139 <PCI::detect()+0x55>
c001b121:	53                   	push   ebx
c001b122:	6a 00                	push   0x0
c001b124:	6a 00                	push   0x0
c001b126:	56                   	push   esi
c001b127:	e8 ec f6 ff ff       	call   c001a818 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b12c:	83 c4 10             	add    esp,0x10
c001b12f:	0f b7 c0             	movzx  eax,ax
c001b132:	3d ff ff 00 00       	cmp    eax,0xffff
c001b137:	74 d6                	je     c001b10f <PCI::detect()+0x2b>
c001b139:	58                   	pop    eax
c001b13a:	5b                   	pop    ebx
c001b13b:	5e                   	pop    esi
c001b13c:	c3                   	ret    
c001b13d:	90                   	nop

c001b13e <IDE::close(int, int, void*)>:
c001b13e:	83 c8 ff             	or     eax,0xffffffff
c001b141:	c3                   	ret    

c001b142 <IDE::IDE()>:
c001b142:	83 ec 0c             	sub    esp,0xc
c001b145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b149:	83 ec 08             	sub    esp,0x8
c001b14c:	68 cc 23 02 c0       	push   0xc00223cc
c001b151:	50                   	push   eax
c001b152:	e8 85 12 ff ff       	call   c000c3dc <HardDiskController::HardDiskController(char const*)>
c001b157:	83 c4 10             	add    esp,0x10
c001b15a:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001b15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b163:	89 10                	mov    DWORD PTR [eax],edx
c001b165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b169:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b170:	90                   	nop
c001b171:	83 c4 0c             	add    esp,0xc
c001b174:	c3                   	ret    
c001b175:	90                   	nop

c001b176 <IDE::prepareInterrupt(unsigned char)>:
c001b176:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b17b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b17f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b187:	c3                   	ret    

c001b188 <selectDrive(unsigned char, unsigned char)>:
c001b188:	c3                   	ret    
c001b189:	90                   	nop

c001b18a <IDE::getBase(unsigned char)>:
c001b18a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b18f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b193:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b19b:	c3                   	ret    

c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b19c:	55                   	push   ebp
c001b19d:	57                   	push   edi
c001b19e:	56                   	push   esi
c001b19f:	53                   	push   ebx
c001b1a0:	83 ec 1c             	sub    esp,0x1c
c001b1a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b1a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1ab:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b1ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b1b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b1b6:	80 f9 03             	cmp    cl,0x3
c001b1b9:	77 4f                	ja     c001b20a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b1bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1bf:	0f b6 fa             	movzx  edi,dl
c001b1c2:	0f b6 db             	movzx  ebx,bl
c001b1c5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b1c8:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b1cd:	80 ca 80             	or     dl,0x80
c001b1d0:	52                   	push   edx
c001b1d1:	6a 0c                	push   0xc
c001b1d3:	57                   	push   edi
c001b1d4:	56                   	push   esi
c001b1d5:	e8 c2 ff ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1da:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b1df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1e3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b1e7:	ee                   	out    dx,al
c001b1e8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b1ed:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b1f1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b1f5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b1f9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b201:	83 c4 2c             	add    esp,0x2c
c001b204:	5b                   	pop    ebx
c001b205:	5e                   	pop    esi
c001b206:	5f                   	pop    edi
c001b207:	5d                   	pop    ebp
c001b208:	eb 92                	jmp    c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b20a:	0f b6 cb             	movzx  ecx,bl
c001b20d:	83 f9 07             	cmp    ecx,0x7
c001b210:	77 12                	ja     c001b224 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b212:	0f b6 d2             	movzx  edx,dl
c001b215:	0f b6 db             	movzx  ebx,bl
c001b218:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b220:	01 da                	add    edx,ebx
c001b222:	eb 2f                	jmp    c001b253 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b224:	83 f9 0d             	cmp    ecx,0xd
c001b227:	77 13                	ja     c001b23c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b229:	0f b6 d2             	movzx  edx,dl
c001b22c:	0f b6 db             	movzx  ebx,bl
c001b22f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b236:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b23a:	eb 17                	jmp    c001b253 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b23c:	83 f9 15             	cmp    ecx,0x15
c001b23f:	77 13                	ja     c001b254 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b241:	0f b6 d2             	movzx  edx,dl
c001b244:	0f b6 db             	movzx  ebx,bl
c001b247:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b24f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b253:	ee                   	out    dx,al
c001b254:	83 c4 1c             	add    esp,0x1c
c001b257:	5b                   	pop    ebx
c001b258:	5e                   	pop    esi
c001b259:	5f                   	pop    edi
c001b25a:	5d                   	pop    ebp
c001b25b:	c3                   	ret    

c001b25c <IDE::read(unsigned char, unsigned char)>:
c001b25c:	55                   	push   ebp
c001b25d:	57                   	push   edi
c001b25e:	56                   	push   esi
c001b25f:	53                   	push   ebx
c001b260:	83 ec 1c             	sub    esp,0x1c
c001b263:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b267:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b26b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b26e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b272:	3c 03                	cmp    al,0x3
c001b274:	77 40                	ja     c001b2b6 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b276:	0f b6 f9             	movzx  edi,cl
c001b279:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b27c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b281:	0c 80                	or     al,0x80
c001b283:	50                   	push   eax
c001b284:	6a 0c                	push   0xc
c001b286:	57                   	push   edi
c001b287:	56                   	push   esi
c001b288:	e8 0f ff ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b28d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b292:	0f b6 d3             	movzx  edx,bl
c001b295:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b299:	ec                   	in     al,dx
c001b29a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b29e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b2a3:	52                   	push   edx
c001b2a4:	6a 0c                	push   0xc
c001b2a6:	57                   	push   edi
c001b2a7:	56                   	push   esi
c001b2a8:	e8 ef fe ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2ad:	83 c4 20             	add    esp,0x20
c001b2b0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b2b4:	eb 4c                	jmp    c001b302 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b2b6:	0f b6 d3             	movzx  edx,bl
c001b2b9:	83 fa 07             	cmp    edx,0x7
c001b2bc:	77 12                	ja     c001b2d0 <IDE::read(unsigned char, unsigned char)+0x74>
c001b2be:	0f b6 c9             	movzx  ecx,cl
c001b2c1:	0f b6 d3             	movzx  edx,bl
c001b2c4:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b2cc:	01 c2                	add    edx,eax
c001b2ce:	eb 31                	jmp    c001b301 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b2d0:	83 fa 0d             	cmp    edx,0xd
c001b2d3:	77 13                	ja     c001b2e8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b2d5:	0f b6 c9             	movzx  ecx,cl
c001b2d8:	0f b6 d3             	movzx  edx,bl
c001b2db:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b2e2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b2e6:	eb 19                	jmp    c001b301 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b2e8:	31 c0                	xor    eax,eax
c001b2ea:	83 fa 15             	cmp    edx,0x15
c001b2ed:	77 13                	ja     c001b302 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b2ef:	0f b6 c9             	movzx  ecx,cl
c001b2f2:	0f b6 d3             	movzx  edx,bl
c001b2f5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b2fd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b301:	ec                   	in     al,dx
c001b302:	83 c4 1c             	add    esp,0x1c
c001b305:	5b                   	pop    ebx
c001b306:	5e                   	pop    esi
c001b307:	5f                   	pop    edi
c001b308:	5d                   	pop    ebp
c001b309:	c3                   	ret    

c001b30a <IDE::waitInterrupt(unsigned char)>:
c001b30a:	55                   	push   ebp
c001b30b:	57                   	push   edi
c001b30c:	56                   	push   esi
c001b30d:	53                   	push   ebx
c001b30e:	31 db                	xor    ebx,ebx
c001b310:	83 ec 0c             	sub    esp,0xc
c001b313:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b317:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b31c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b324:	89 e8                	mov    eax,ebp
c001b326:	84 c0                	test   al,al
c001b328:	75 30                	jne    c001b35a <IDE::waitInterrupt(unsigned char)+0x50>
c001b32a:	50                   	push   eax
c001b32b:	6a 0c                	push   0xc
c001b32d:	56                   	push   esi
c001b32e:	57                   	push   edi
c001b32f:	e8 28 ff ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	a8 01                	test   al,0x1
c001b339:	75 27                	jne    c001b362 <IDE::waitInterrupt(unsigned char)+0x58>
c001b33b:	f6 c3 04             	test   bl,0x4
c001b33e:	75 12                	jne    c001b352 <IDE::waitInterrupt(unsigned char)+0x48>
c001b340:	83 fb 32             	cmp    ebx,0x32
c001b343:	7e 0d                	jle    c001b352 <IDE::waitInterrupt(unsigned char)+0x48>
c001b345:	83 ec 0c             	sub    esp,0xc
c001b348:	6a 64                	push   0x64
c001b34a:	e8 b1 a4 ff ff       	call   c0015800 <milliTenthSleep(unsigned int)>
c001b34f:	83 c4 10             	add    esp,0x10
c001b352:	83 fb 3c             	cmp    ebx,0x3c
c001b355:	74 0b                	je     c001b362 <IDE::waitInterrupt(unsigned char)+0x58>
c001b357:	43                   	inc    ebx
c001b358:	eb c2                	jmp    c001b31c <IDE::waitInterrupt(unsigned char)+0x12>
c001b35a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b362:	83 c4 0c             	add    esp,0xc
c001b365:	89 e8                	mov    eax,ebp
c001b367:	5b                   	pop    ebx
c001b368:	5e                   	pop    esi
c001b369:	5f                   	pop    edi
c001b36a:	5d                   	pop    ebp
c001b36b:	c3                   	ret    

c001b36c <ideChannel0IRQHandler(regs*, void*)>:
c001b36c:	83 ec 10             	sub    esp,0x10
c001b36f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b373:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b37a:	6a 07                	push   0x7
c001b37c:	6a 00                	push   0x0
c001b37e:	50                   	push   eax
c001b37f:	e8 d8 fe ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b384:	83 c4 1c             	add    esp,0x1c
c001b387:	c3                   	ret    

c001b388 <ideChannel1IRQHandler(regs*, void*)>:
c001b388:	83 ec 10             	sub    esp,0x10
c001b38b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b38f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b396:	6a 07                	push   0x7
c001b398:	6a 01                	push   0x1
c001b39a:	50                   	push   eax
c001b39b:	e8 bc fe ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b3a0:	83 c4 1c             	add    esp,0x1c
c001b3a3:	c3                   	ret    

c001b3a4 <IDE::enableIRQs(unsigned char, bool)>:
c001b3a4:	57                   	push   edi
c001b3a5:	b8 02 00 00 00       	mov    eax,0x2
c001b3aa:	56                   	push   esi
c001b3ab:	53                   	push   ebx
c001b3ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3b4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b3b9:	74 02                	je     c001b3bd <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b3bb:	31 c0                	xor    eax,eax
c001b3bd:	0f b6 db             	movzx  ebx,bl
c001b3c0:	bf 04 00 00 00       	mov    edi,0x4
c001b3c5:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b3cc:	50                   	push   eax
c001b3cd:	6a 0c                	push   0xc
c001b3cf:	53                   	push   ebx
c001b3d0:	56                   	push   esi
c001b3d1:	e8 c6 fd ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	50                   	push   eax
c001b3da:	6a 0c                	push   0xc
c001b3dc:	53                   	push   ebx
c001b3dd:	56                   	push   esi
c001b3de:	e8 79 fe ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	4f                   	dec    edi
c001b3e7:	75 f0                	jne    c001b3d9 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b3e9:	5b                   	pop    ebx
c001b3ea:	5e                   	pop    esi
c001b3eb:	5f                   	pop    edi
c001b3ec:	c3                   	ret    
c001b3ed:	90                   	nop

c001b3ee <IDE::open(int, int, void*)>:
c001b3ee:	55                   	push   ebp
c001b3ef:	57                   	push   edi
c001b3f0:	56                   	push   esi
c001b3f1:	53                   	push   ebx
c001b3f2:	83 ec 1c             	sub    esp,0x1c
c001b3f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b3f9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b402:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b40b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b412:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b419:	0f 85 de 02 00 00    	jne    c001b6fd <IDE::open(int, int, void*)+0x30f>
c001b41f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b425:	88 04 24             	mov    BYTE PTR [esp],al
c001b428:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b42b:	83 e0 7f             	and    eax,0x7f
c001b42e:	83 f8 05             	cmp    eax,0x5
c001b431:	74 05                	je     c001b438 <IDE::open(int, int, void*)+0x4a>
c001b433:	83 f8 0f             	cmp    eax,0xf
c001b436:	75 32                	jne    c001b46a <IDE::open(int, int, void*)+0x7c>
c001b438:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b43e:	83 e0 fc             	and    eax,0xfffffffc
c001b441:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b448:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b44e:	83 e0 fc             	and    eax,0xfffffffc
c001b451:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b458:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b45e:	83 e0 fc             	and    eax,0xfffffffc
c001b461:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b468:	eb 14                	jmp    c001b47e <IDE::open(int, int, void*)+0x90>
c001b46a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b474:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b47e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b485:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b48c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b490:	89 c6                	mov    esi,eax
c001b492:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b497:	c1 e6 10             	shl    esi,0x10
c001b49a:	89 e8                	mov    eax,ebp
c001b49c:	89 fa                	mov    edx,edi
c001b49e:	c1 e0 0b             	shl    eax,0xb
c001b4a1:	09 f0                	or     eax,esi
c001b4a3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b4aa:	c1 e6 08             	shl    esi,0x8
c001b4ad:	09 c6                	or     esi,eax
c001b4af:	89 f0                	mov    eax,esi
c001b4b1:	0d 08 00 00 80       	or     eax,0x80000008
c001b4b6:	ef                   	out    dx,eax
c001b4b7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b4bc:	89 ca                	mov    edx,ecx
c001b4be:	ed                   	in     eax,dx
c001b4bf:	c1 e8 10             	shr    eax,0x10
c001b4c2:	3d ff ff 00 00       	cmp    eax,0xffff
c001b4c7:	0f 84 f9 00 00 00    	je     c001b5c6 <IDE::open(int, int, void*)+0x1d8>
c001b4cd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b4d3:	89 fa                	mov    edx,edi
c001b4d5:	89 f0                	mov    eax,esi
c001b4d7:	ef                   	out    dx,eax
c001b4d8:	b0 fe                	mov    al,0xfe
c001b4da:	89 ca                	mov    edx,ecx
c001b4dc:	ee                   	out    dx,al
c001b4dd:	89 f0                	mov    eax,esi
c001b4df:	89 fa                	mov    edx,edi
c001b4e1:	ef                   	out    dx,eax
c001b4e2:	89 ca                	mov    edx,ecx
c001b4e4:	ed                   	in     eax,dx
c001b4e5:	3c fe                	cmp    al,0xfe
c001b4e7:	0f 85 a9 00 00 00    	jne    c001b596 <IDE::open(int, int, void*)+0x1a8>
c001b4ed:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001b4f3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b4fa:	74 33                	je     c001b52f <IDE::open(int, int, void*)+0x141>
c001b4fc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b502:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b506:	40                   	inc    eax
c001b507:	83 ec 0c             	sub    esp,0xc
c001b50a:	0f b6 c0             	movzx  eax,al
c001b50d:	50                   	push   eax
c001b50e:	55                   	push   ebp
c001b50f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b513:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b519:	51                   	push   ecx
c001b51a:	e8 ed 3a ff ff       	call   c000f00c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b51f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b524:	83 c4 1c             	add    esp,0x1c
c001b527:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b52d:	eb 0a                	jmp    c001b539 <IDE::open(int, int, void*)+0x14b>
c001b52f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b539:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b540:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b547:	c1 e1 10             	shl    ecx,0x10
c001b54a:	c1 e0 08             	shl    eax,0x8
c001b54d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b552:	09 c1                	or     ecx,eax
c001b554:	89 fa                	mov    edx,edi
c001b556:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b55d:	c1 e0 0b             	shl    eax,0xb
c001b560:	09 c1                	or     ecx,eax
c001b562:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b568:	89 c8                	mov    eax,ecx
c001b56a:	ef                   	out    dx,eax
c001b56b:	be fc 0c 00 00       	mov    esi,0xcfc
c001b570:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b576:	89 f2                	mov    edx,esi
c001b578:	ee                   	out    dx,al
c001b579:	89 c8                	mov    eax,ecx
c001b57b:	89 fa                	mov    edx,edi
c001b57d:	ef                   	out    dx,eax
c001b57e:	89 f2                	mov    edx,esi
c001b580:	ed                   	in     eax,dx
c001b581:	0f b6 c0             	movzx  eax,al
c001b584:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b58a:	74 4a                	je     c001b5d6 <IDE::open(int, int, void*)+0x1e8>
c001b58c:	83 ec 0c             	sub    esp,0xc
c001b58f:	68 e4 23 02 c0       	push   0xc00223e4
c001b594:	eb 38                	jmp    c001b5ce <IDE::open(int, int, void*)+0x1e0>
c001b596:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b59f:	75 1b                	jne    c001b5bc <IDE::open(int, int, void*)+0x1ce>
c001b5a1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b5a5:	3d 80 00 00 00       	cmp    eax,0x80
c001b5aa:	74 07                	je     c001b5b3 <IDE::open(int, int, void*)+0x1c5>
c001b5ac:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b5b1:	75 09                	jne    c001b5bc <IDE::open(int, int, void*)+0x1ce>
c001b5b3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b5ba:	eb 1a                	jmp    c001b5d6 <IDE::open(int, int, void*)+0x1e8>
c001b5bc:	83 ec 0c             	sub    esp,0xc
c001b5bf:	68 ec 23 02 c0       	push   0xc00223ec
c001b5c4:	eb 08                	jmp    c001b5ce <IDE::open(int, int, void*)+0x1e0>
c001b5c6:	83 ec 0c             	sub    esp,0xc
c001b5c9:	68 1d 24 02 c0       	push   0xc002241d
c001b5ce:	e8 3e 56 ff ff       	call   c0010c11 <KePanic(char const*)>
c001b5d3:	83 c4 10             	add    esp,0x10
c001b5d6:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b5dd:	74 1a                	je     c001b5f9 <IDE::open(int, int, void*)+0x20b>
c001b5df:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b5e5:	83 e0 fc             	and    eax,0xfffffffc
c001b5e8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b5ef:	83 c0 08             	add    eax,0x8
c001b5f2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b5f9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b5ff:	89 c2                	mov    edx,eax
c001b601:	83 e2 0f             	and    edx,0xf
c001b604:	83 fa 08             	cmp    edx,0x8
c001b607:	75 0a                	jne    c001b613 <IDE::open(int, int, void*)+0x225>
c001b609:	83 e8 02             	sub    eax,0x2
c001b60c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b613:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b619:	89 c2                	mov    edx,eax
c001b61b:	83 e2 0f             	and    edx,0xf
c001b61e:	83 fa 08             	cmp    edx,0x8
c001b621:	75 0a                	jne    c001b62d <IDE::open(int, int, void*)+0x23f>
c001b623:	83 e8 02             	sub    eax,0x2
c001b626:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b62d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b634:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b63b:	89 d0                	mov    eax,edx
c001b63d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b640:	8d 7a 01             	lea    edi,[edx+0x1]
c001b643:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b647:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b64b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b64f:	83 e1 3f             	and    ecx,0x3f
c001b652:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b656:	89 f9                	mov    ecx,edi
c001b658:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b65f:	0f b6 c9             	movzx  ecx,cl
c001b662:	8d 78 02             	lea    edi,[eax+0x2]
c001b665:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b668:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b66c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b670:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b674:	83 e2 3f             	and    edx,0x3f
c001b677:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b67b:	89 f9                	mov    ecx,edi
c001b67d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b683:	0f b6 d1             	movzx  edx,cl
c001b686:	8d 78 03             	lea    edi,[eax+0x3]
c001b689:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b68c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b690:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b694:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b698:	83 e1 3f             	and    ecx,0x3f
c001b69b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b69f:	89 f9                	mov    ecx,edi
c001b6a1:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b6a7:	0f b6 c9             	movzx  ecx,cl
c001b6aa:	8d 78 04             	lea    edi,[eax+0x4]
c001b6ad:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b6b0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b6b4:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b6b8:	89 fa                	mov    edx,edi
c001b6ba:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b6c0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b6c4:	83 e2 3f             	and    edx,0x3f
c001b6c7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b6cb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b6d2:	66 85 f6             	test   si,si
c001b6d5:	74 65                	je     c001b73c <IDE::open(int, int, void*)+0x34e>
c001b6d7:	89 f9                	mov    ecx,edi
c001b6d9:	83 c0 05             	add    eax,0x5
c001b6dc:	0f b6 d1             	movzx  edx,cl
c001b6df:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b6e2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b6e6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b6ea:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b6f0:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b6f4:	83 e0 3f             	and    eax,0x3f
c001b6f7:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b6fb:	eb 3f                	jmp    c001b73c <IDE::open(int, int, void*)+0x34e>
c001b6fd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b703:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b70a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b711:	05 06 02 00 00       	add    eax,0x206
c001b716:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b71d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b724:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b72b:	05 06 02 00 00       	add    eax,0x206
c001b730:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b737:	e9 bd fe ff ff       	jmp    c001b5f9 <IDE::open(int, int, void*)+0x20b>
c001b73c:	50                   	push   eax
c001b73d:	50                   	push   eax
c001b73e:	6a 00                	push   0x0
c001b740:	53                   	push   ebx
c001b741:	e8 30 fa ff ff       	call   c001b176 <IDE::prepareInterrupt(unsigned char)>
c001b746:	5a                   	pop    edx
c001b747:	59                   	pop    ecx
c001b748:	6a 01                	push   0x1
c001b74a:	53                   	push   ebx
c001b74b:	e8 26 fa ff ff       	call   c001b176 <IDE::prepareInterrupt(unsigned char)>
c001b750:	83 c4 0c             	add    esp,0xc
c001b753:	6a 00                	push   0x0
c001b755:	6a 00                	push   0x0
c001b757:	53                   	push   ebx
c001b758:	e8 47 fc ff ff       	call   c001b3a4 <IDE::enableIRQs(unsigned char, bool)>
c001b75d:	83 c4 0c             	add    esp,0xc
c001b760:	6a 00                	push   0x0
c001b762:	6a 01                	push   0x1
c001b764:	53                   	push   ebx
c001b765:	e8 3a fc ff ff       	call   c001b3a4 <IDE::enableIRQs(unsigned char, bool)>
c001b76a:	83 c4 10             	add    esp,0x10
c001b76d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b774:	74 34                	je     c001b7aa <IDE::open(int, int, void*)+0x3bc>
c001b776:	83 ec 0c             	sub    esp,0xc
c001b779:	53                   	push   ebx
c001b77a:	6a 01                	push   0x1
c001b77c:	68 6c b3 01 c0       	push   0xc001b36c
c001b781:	6a 0e                	push   0xe
c001b783:	53                   	push   ebx
c001b784:	e8 bd 08 ff ff       	call   c000c046 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b789:	83 c4 14             	add    esp,0x14
c001b78c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b792:	53                   	push   ebx
c001b793:	6a 01                	push   0x1
c001b795:	68 88 b3 01 c0       	push   0xc001b388
c001b79a:	6a 0f                	push   0xf
c001b79c:	53                   	push   ebx
c001b79d:	e8 a4 08 ff ff       	call   c000c046 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b7a2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b7a8:	eb 38                	jmp    c001b7e2 <IDE::open(int, int, void*)+0x3f4>
c001b7aa:	83 ec 0c             	sub    esp,0xc
c001b7ad:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b7b7:	53                   	push   ebx
c001b7b8:	6a 00                	push   0x0
c001b7ba:	68 6c b3 01 c0       	push   0xc001b36c
c001b7bf:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b7c5:	53                   	push   ebx
c001b7c6:	e8 7b 08 ff ff       	call   c000c046 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b7cb:	83 c4 14             	add    esp,0x14
c001b7ce:	53                   	push   ebx
c001b7cf:	6a 00                	push   0x0
c001b7d1:	68 88 b3 01 c0       	push   0xc001b388
c001b7d6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b7dc:	53                   	push   ebx
c001b7dd:	e8 64 08 ff ff       	call   c000c046 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b7e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7e4:	83 c4 20             	add    esp,0x20
c001b7e7:	83 ec 0c             	sub    esp,0xc
c001b7ea:	53                   	push   ebx
c001b7eb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b7ee:	83 c4 0c             	add    esp,0xc
c001b7f1:	6a 07                	push   0x7
c001b7f3:	6a 00                	push   0x0
c001b7f5:	53                   	push   ebx
c001b7f6:	e8 61 fa ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b7fb:	83 c4 0c             	add    esp,0xc
c001b7fe:	6a 07                	push   0x7
c001b800:	6a 01                	push   0x1
c001b802:	53                   	push   ebx
c001b803:	e8 54 fa ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b808:	83 c4 0c             	add    esp,0xc
c001b80b:	6a 01                	push   0x1
c001b80d:	6a 00                	push   0x0
c001b80f:	53                   	push   ebx
c001b810:	e8 8f fb ff ff       	call   c001b3a4 <IDE::enableIRQs(unsigned char, bool)>
c001b815:	83 c4 0c             	add    esp,0xc
c001b818:	6a 01                	push   0x1
c001b81a:	6a 01                	push   0x1
c001b81c:	53                   	push   ebx
c001b81d:	e8 82 fb ff ff       	call   c001b3a4 <IDE::enableIRQs(unsigned char, bool)>
c001b822:	83 c4 2c             	add    esp,0x2c
c001b825:	31 c0                	xor    eax,eax
c001b827:	5b                   	pop    ebx
c001b828:	5e                   	pop    esi
c001b829:	5f                   	pop    edi
c001b82a:	5d                   	pop    ebp
c001b82b:	c3                   	ret    

c001b82c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b82c:	55                   	push   ebp
c001b82d:	57                   	push   edi
c001b82e:	56                   	push   esi
c001b82f:	53                   	push   ebx
c001b830:	83 ec 1c             	sub    esp,0x1c
c001b833:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b837:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b83b:	8d 42 f8             	lea    eax,[edx-0x8]
c001b83e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b842:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b846:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b84a:	3c 03                	cmp    al,0x3
c001b84c:	77 5a                	ja     c001b8a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b84e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b852:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b856:	0f b6 db             	movzx  ebx,bl
c001b859:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b85c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b861:	0c 80                	or     al,0x80
c001b863:	50                   	push   eax
c001b864:	6a 0c                	push   0xc
c001b866:	53                   	push   ebx
c001b867:	56                   	push   esi
c001b868:	e8 2f f9 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b86d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b872:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b876:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b87a:	0f b6 d2             	movzx  edx,dl
c001b87d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b881:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b883:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b888:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b88c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b890:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b894:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b89c:	83 c4 2c             	add    esp,0x2c
c001b89f:	5b                   	pop    ebx
c001b8a0:	5e                   	pop    esi
c001b8a1:	5f                   	pop    edi
c001b8a2:	5d                   	pop    ebp
c001b8a3:	e9 f4 f8 ff ff       	jmp    c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8a8:	0f b6 c2             	movzx  eax,dl
c001b8ab:	83 f8 07             	cmp    eax,0x7
c001b8ae:	77 12                	ja     c001b8c2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b8b0:	0f b6 c2             	movzx  eax,dl
c001b8b3:	0f b6 db             	movzx  ebx,bl
c001b8b6:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b8be:	01 c2                	add    edx,eax
c001b8c0:	eb 2f                	jmp    c001b8f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b8c2:	83 f8 0d             	cmp    eax,0xd
c001b8c5:	77 13                	ja     c001b8da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b8c7:	0f b6 db             	movzx  ebx,bl
c001b8ca:	0f b6 d2             	movzx  edx,dl
c001b8cd:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b8d4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8d8:	eb 17                	jmp    c001b8f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b8da:	83 f8 15             	cmp    eax,0x15
c001b8dd:	77 14                	ja     c001b8f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b8df:	0f b6 db             	movzx  ebx,bl
c001b8e2:	0f b6 d2             	movzx  edx,dl
c001b8e5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b8ed:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8f1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b8f3:	83 c4 1c             	add    esp,0x1c
c001b8f6:	5b                   	pop    ebx
c001b8f7:	5e                   	pop    esi
c001b8f8:	5f                   	pop    edi
c001b8f9:	5d                   	pop    ebp
c001b8fa:	c3                   	ret    
c001b8fb:	90                   	nop

c001b8fc <IDE::detect()>:
c001b8fc:	55                   	push   ebp
c001b8fd:	57                   	push   edi
c001b8fe:	56                   	push   esi
c001b8ff:	53                   	push   ebx
c001b900:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b906:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b90d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b914:	0f 85 a4 02 00 00    	jne    c001bbbe <IDE::detect()+0x2c2>
c001b91a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b921:	31 f6                	xor    esi,esi
c001b923:	31 ed                	xor    ebp,ebp
c001b925:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b92d:	89 e8                	mov    eax,ebp
c001b92f:	c1 e0 06             	shl    eax,0x6
c001b932:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b93a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b93e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b946:	c1 e0 04             	shl    eax,0x4
c001b949:	83 c8 a0             	or     eax,0xffffffa0
c001b94c:	0f b6 c0             	movzx  eax,al
c001b94f:	50                   	push   eax
c001b950:	6a 06                	push   0x6
c001b952:	56                   	push   esi
c001b953:	53                   	push   ebx
c001b954:	e8 43 f8 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b959:	83 c4 0c             	add    esp,0xc
c001b95c:	6a 0c                	push   0xc
c001b95e:	56                   	push   esi
c001b95f:	53                   	push   ebx
c001b960:	e8 f7 f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b965:	83 c4 0c             	add    esp,0xc
c001b968:	6a 0c                	push   0xc
c001b96a:	56                   	push   esi
c001b96b:	53                   	push   ebx
c001b96c:	e8 eb f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b971:	83 c4 0c             	add    esp,0xc
c001b974:	6a 0c                	push   0xc
c001b976:	56                   	push   esi
c001b977:	53                   	push   ebx
c001b978:	e8 df f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b97d:	83 c4 0c             	add    esp,0xc
c001b980:	6a 0c                	push   0xc
c001b982:	56                   	push   esi
c001b983:	53                   	push   ebx
c001b984:	e8 d3 f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b989:	68 ec 00 00 00       	push   0xec
c001b98e:	6a 07                	push   0x7
c001b990:	56                   	push   esi
c001b991:	53                   	push   ebx
c001b992:	e8 05 f8 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b997:	83 c4 1c             	add    esp,0x1c
c001b99a:	6a 0c                	push   0xc
c001b99c:	56                   	push   esi
c001b99d:	53                   	push   ebx
c001b99e:	e8 b9 f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b9a3:	83 c4 0c             	add    esp,0xc
c001b9a6:	6a 0c                	push   0xc
c001b9a8:	56                   	push   esi
c001b9a9:	53                   	push   ebx
c001b9aa:	e8 ad f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b9af:	83 c4 0c             	add    esp,0xc
c001b9b2:	6a 0c                	push   0xc
c001b9b4:	56                   	push   esi
c001b9b5:	53                   	push   ebx
c001b9b6:	e8 a1 f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b9bb:	83 c4 0c             	add    esp,0xc
c001b9be:	6a 0c                	push   0xc
c001b9c0:	56                   	push   esi
c001b9c1:	53                   	push   ebx
c001b9c2:	e8 95 f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b9c7:	83 c4 0c             	add    esp,0xc
c001b9ca:	6a 0c                	push   0xc
c001b9cc:	56                   	push   esi
c001b9cd:	53                   	push   ebx
c001b9ce:	e8 89 f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	84 c0                	test   al,al
c001b9d8:	0f 84 60 01 00 00    	je     c001bb3e <IDE::detect()+0x242>
c001b9de:	31 ff                	xor    edi,edi
c001b9e0:	50                   	push   eax
c001b9e1:	6a 0c                	push   0xc
c001b9e3:	56                   	push   esi
c001b9e4:	53                   	push   ebx
c001b9e5:	e8 72 f8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001b9ea:	83 c4 10             	add    esp,0x10
c001b9ed:	a8 01                	test   al,0x1
c001b9ef:	0f 85 6a 01 00 00    	jne    c001bb5f <IDE::detect()+0x263>
c001b9f5:	a8 80                	test   al,0x80
c001b9f7:	75 04                	jne    c001b9fd <IDE::detect()+0x101>
c001b9f9:	a8 08                	test   al,0x8
c001b9fb:	75 23                	jne    c001ba20 <IDE::detect()+0x124>
c001b9fd:	47                   	inc    edi
c001b9fe:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ba04:	7e da                	jle    c001b9e0 <IDE::detect()+0xe4>
c001ba06:	83 ec 0c             	sub    esp,0xc
c001ba09:	6a 32                	push   0x32
c001ba0b:	e8 f0 9d ff ff       	call   c0015800 <milliTenthSleep(unsigned int)>
c001ba10:	83 c4 10             	add    esp,0x10
c001ba13:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ba19:	75 c5                	jne    c001b9e0 <IDE::detect()+0xe4>
c001ba1b:	e9 3f 01 00 00       	jmp    c001bb5f <IDE::detect()+0x263>
c001ba20:	31 c9                	xor    ecx,ecx
c001ba22:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ba26:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ba2a:	83 ec 0c             	sub    esp,0xc
c001ba2d:	68 80 00 00 00       	push   0x80
c001ba32:	57                   	push   edi
c001ba33:	6a 00                	push   0x0
c001ba35:	56                   	push   esi
c001ba36:	53                   	push   ebx
c001ba37:	e8 f0 fd ff ff       	call   c001b82c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ba3c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ba41:	89 e8                	mov    eax,ebp
c001ba43:	89 d1                	mov    ecx,edx
c001ba45:	c1 e0 06             	shl    eax,0x6
c001ba48:	01 d8                	add    eax,ebx
c001ba4a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ba51:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ba58:	89 f2                	mov    edx,esi
c001ba5a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ba60:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ba64:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ba6a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ba6e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ba75:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ba7d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ba84:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ba8c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ba92:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ba99:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ba9f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001baa3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001baa7:	83 c4 20             	add    esp,0x20
c001baaa:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001baad:	83 c0 02             	add    eax,0x2
c001bab0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001bab6:	83 c7 02             	add    edi,0x2
c001bab9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001babc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001bac2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001bac6:	75 e2                	jne    c001baaa <IDE::detect()+0x1ae>
c001bac8:	89 e8                	mov    eax,ebp
c001baca:	c1 e0 06             	shl    eax,0x6
c001bacd:	01 d8                	add    eax,ebx
c001bacf:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001bad6:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001badd:	c1 ea 09             	shr    edx,0x9
c001bae0:	83 e2 01             	and    edx,0x1
c001bae3:	80 e1 01             	and    cl,0x1
c001bae6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001baec:	75 22                	jne    c001bb10 <IDE::detect()+0x214>
c001baee:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001baf5:	74 46                	je     c001bb3d <IDE::detect()+0x241>
c001baf7:	83 ec 0c             	sub    esp,0xc
c001bafa:	68 7c 01 00 00       	push   0x17c
c001baff:	e8 aa bf fe ff       	call   c0007aae <malloc>
c001bb04:	89 c7                	mov    edi,eax
c001bb06:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb09:	e8 1a 05 00 00       	call   c001c028 <ATA::ATA()>
c001bb0e:	eb 17                	jmp    c001bb27 <IDE::detect()+0x22b>
c001bb10:	83 ec 0c             	sub    esp,0xc
c001bb13:	68 84 01 00 00       	push   0x184
c001bb18:	e8 91 bf fe ff       	call   c0007aae <malloc>
c001bb1d:	89 c7                	mov    edi,eax
c001bb1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb22:	e8 45 0e 00 00       	call   c001c96c <ATAPI::ATAPI()>
c001bb27:	5a                   	pop    edx
c001bb28:	59                   	pop    ecx
c001bb29:	57                   	push   edi
c001bb2a:	53                   	push   ebx
c001bb2b:	e8 6a 05 ff ff       	call   c000c09a <Device::addChild(Device*)>
c001bb30:	8b 07                	mov    eax,DWORD PTR [edi]
c001bb32:	53                   	push   ebx
c001bb33:	55                   	push   ebp
c001bb34:	6a 00                	push   0x0
c001bb36:	57                   	push   edi
c001bb37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb3a:	83 c4 20             	add    esp,0x20
c001bb3d:	45                   	inc    ebp
c001bb3e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001bb43:	74 0d                	je     c001bb52 <IDE::detect()+0x256>
c001bb45:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001bb4d:	e9 db fd ff ff       	jmp    c001b92d <IDE::detect()+0x31>
c001bb52:	4e                   	dec    esi
c001bb53:	74 69                	je     c001bbbe <IDE::detect()+0x2c2>
c001bb55:	be 01 00 00 00       	mov    esi,0x1
c001bb5a:	e9 c6 fd ff ff       	jmp    c001b925 <IDE::detect()+0x29>
c001bb5f:	50                   	push   eax
c001bb60:	6a 04                	push   0x4
c001bb62:	56                   	push   esi
c001bb63:	53                   	push   ebx
c001bb64:	e8 f3 f6 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001bb69:	83 c4 0c             	add    esp,0xc
c001bb6c:	89 c7                	mov    edi,eax
c001bb6e:	6a 05                	push   0x5
c001bb70:	56                   	push   esi
c001bb71:	53                   	push   ebx
c001bb72:	e8 e5 f6 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	89 f9                	mov    ecx,edi
c001bb7c:	0f b6 c0             	movzx  eax,al
c001bb7f:	0f b6 f9             	movzx  edi,cl
c001bb82:	83 ff 14             	cmp    edi,0x14
c001bb85:	75 07                	jne    c001bb8e <IDE::detect()+0x292>
c001bb87:	3d eb 00 00 00       	cmp    eax,0xeb
c001bb8c:	eb 0a                	jmp    c001bb98 <IDE::detect()+0x29c>
c001bb8e:	3d 96 00 00 00       	cmp    eax,0x96
c001bb93:	75 a9                	jne    c001bb3e <IDE::detect()+0x242>
c001bb95:	83 ff 69             	cmp    edi,0x69
c001bb98:	75 a4                	jne    c001bb3e <IDE::detect()+0x242>
c001bb9a:	68 a1 00 00 00       	push   0xa1
c001bb9f:	6a 07                	push   0x7
c001bba1:	56                   	push   esi
c001bba2:	53                   	push   ebx
c001bba3:	e8 f4 f5 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bba8:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001bbaf:	e8 4c 9c ff ff       	call   c0015800 <milliTenthSleep(unsigned int)>
c001bbb4:	83 c4 10             	add    esp,0x10
c001bbb7:	b1 01                	mov    cl,0x1
c001bbb9:	e9 64 fe ff ff       	jmp    c001ba22 <IDE::detect()+0x126>
c001bbbe:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bbc4:	5b                   	pop    ebx
c001bbc5:	5e                   	pop    esi
c001bbc6:	5f                   	pop    edi
c001bbc7:	5d                   	pop    ebp
c001bbc8:	c3                   	ret    
c001bbc9:	90                   	nop

c001bbca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001bbca:	55                   	push   ebp
c001bbcb:	57                   	push   edi
c001bbcc:	56                   	push   esi
c001bbcd:	53                   	push   ebx
c001bbce:	83 ec 1c             	sub    esp,0x1c
c001bbd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bbd5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bbd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbdd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001bbe1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bbe5:	88 c3                	mov    bl,al
c001bbe7:	25 ff 00 00 00       	and    eax,0xff
c001bbec:	0f 84 88 00 00 00    	je     c001bc7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bbf2:	83 ec 0c             	sub    esp,0xc
c001bbf5:	89 c7                	mov    edi,eax
c001bbf7:	68 47 24 02 c0       	push   0xc0022447
c001bbfc:	e8 38 ed fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001bc01:	83 c4 10             	add    esp,0x10
c001bc04:	83 ff 01             	cmp    edi,0x1
c001bc07:	74 6b                	je     c001bc74 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001bc09:	83 ff 02             	cmp    edi,0x2
c001bc0c:	75 58                	jne    c001bc66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001bc0e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001bc13:	01 ff                	add    edi,edi
c001bc15:	50                   	push   eax
c001bc16:	09 fe                	or     esi,edi
c001bc18:	6a 01                	push   0x1
c001bc1a:	89 f0                	mov    eax,esi
c001bc1c:	0f b6 f0             	movzx  esi,al
c001bc1f:	c1 e6 06             	shl    esi,0x6
c001bc22:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001bc2a:	50                   	push   eax
c001bc2b:	55                   	push   ebp
c001bc2c:	e8 2b f6 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001bc31:	83 c4 10             	add    esp,0x10
c001bc34:	a8 01                	test   al,0x1
c001bc36:	74 02                	je     c001bc3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001bc38:	b3 07                	mov    bl,0x7
c001bc3a:	a8 02                	test   al,0x2
c001bc3c:	74 02                	je     c001bc40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001bc3e:	b3 03                	mov    bl,0x3
c001bc40:	a8 04                	test   al,0x4
c001bc42:	74 02                	je     c001bc46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001bc44:	b3 14                	mov    bl,0x14
c001bc46:	a8 08                	test   al,0x8
c001bc48:	74 02                	je     c001bc4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001bc4a:	b3 03                	mov    bl,0x3
c001bc4c:	a8 10                	test   al,0x10
c001bc4e:	74 02                	je     c001bc52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001bc50:	b3 15                	mov    bl,0x15
c001bc52:	a8 20                	test   al,0x20
c001bc54:	74 02                	je     c001bc58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001bc56:	b3 03                	mov    bl,0x3
c001bc58:	a8 40                	test   al,0x40
c001bc5a:	74 02                	je     c001bc5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001bc5c:	b3 16                	mov    bl,0x16
c001bc5e:	a8 80                	test   al,0x80
c001bc60:	74 18                	je     c001bc7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc62:	b3 0d                	mov    bl,0xd
c001bc64:	eb 14                	jmp    c001bc7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc66:	83 ff 03             	cmp    edi,0x3
c001bc69:	74 0d                	je     c001bc78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001bc6b:	83 ff 04             	cmp    edi,0x4
c001bc6e:	75 0a                	jne    c001bc7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc70:	b3 08                	mov    bl,0x8
c001bc72:	eb 06                	jmp    c001bc7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc74:	b3 13                	mov    bl,0x13
c001bc76:	eb 02                	jmp    c001bc7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bc78:	b3 17                	mov    bl,0x17
c001bc7a:	83 c4 1c             	add    esp,0x1c
c001bc7d:	88 d8                	mov    al,bl
c001bc7f:	5b                   	pop    ebx
c001bc80:	5e                   	pop    esi
c001bc81:	5f                   	pop    edi
c001bc82:	5d                   	pop    ebp
c001bc83:	c3                   	ret    

c001bc84 <IDE::polling(unsigned char, unsigned int)>:
c001bc84:	57                   	push   edi
c001bc85:	56                   	push   esi
c001bc86:	53                   	push   ebx
c001bc87:	bb 04 00 00 00       	mov    ebx,0x4
c001bc8c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001bc90:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bc95:	52                   	push   edx
c001bc96:	6a 0c                	push   0xc
c001bc98:	56                   	push   esi
c001bc99:	57                   	push   edi
c001bc9a:	e8 bd f5 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001bc9f:	83 c4 10             	add    esp,0x10
c001bca2:	4b                   	dec    ebx
c001bca3:	75 f0                	jne    c001bc95 <IDE::polling(unsigned char, unsigned int)+0x11>
c001bca5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bcaa:	50                   	push   eax
c001bcab:	6a 0c                	push   0xc
c001bcad:	56                   	push   esi
c001bcae:	57                   	push   edi
c001bcaf:	e8 a8 f5 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001bcb4:	83 c4 10             	add    esp,0x10
c001bcb7:	a8 01                	test   al,0x1
c001bcb9:	75 17                	jne    c001bcd2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bcbb:	a8 20                	test   al,0x20
c001bcbd:	75 0f                	jne    c001bcce <IDE::polling(unsigned char, unsigned int)+0x4a>
c001bcbf:	4b                   	dec    ebx
c001bcc0:	74 10                	je     c001bcd2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bcc2:	a8 80                	test   al,0x80
c001bcc4:	75 e4                	jne    c001bcaa <IDE::polling(unsigned char, unsigned int)+0x26>
c001bcc6:	a8 08                	test   al,0x8
c001bcc8:	74 e0                	je     c001bcaa <IDE::polling(unsigned char, unsigned int)+0x26>
c001bcca:	31 c0                	xor    eax,eax
c001bccc:	eb 06                	jmp    c001bcd4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bcce:	b0 01                	mov    al,0x1
c001bcd0:	eb 02                	jmp    c001bcd4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bcd2:	b0 02                	mov    al,0x2
c001bcd4:	5b                   	pop    ebx
c001bcd5:	5e                   	pop    esi
c001bcd6:	5f                   	pop    edi
c001bcd7:	c3                   	ret    

c001bcd8 <SATABus::close(int, int, void*)>:
c001bcd8:	31 c0                	xor    eax,eax
c001bcda:	c3                   	ret    
c001bcdb:	90                   	nop

c001bcdc <SATABus::detect()>:
c001bcdc:	c3                   	ret    
c001bcdd:	90                   	nop

c001bcde <SATABus::SATABus()>:
c001bcde:	83 ec 0c             	sub    esp,0xc
c001bce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce5:	83 ec 08             	sub    esp,0x8
c001bce8:	68 80 24 02 c0       	push   0xc0022480
c001bced:	50                   	push   eax
c001bcee:	e8 e9 06 ff ff       	call   c000c3dc <HardDiskController::HardDiskController(char const*)>
c001bcf3:	83 c4 10             	add    esp,0x10
c001bcf6:	ba ac 24 02 c0       	mov    edx,0xc00224ac
c001bcfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcff:	89 10                	mov    DWORD PTR [eax],edx
c001bd01:	83 ec 0c             	sub    esp,0xc
c001bd04:	6a 50                	push   0x50
c001bd06:	e8 76 c1 fe ff       	call   c0007e81 <Phys::allocateContiguousPages(int)>
c001bd0b:	83 c4 10             	add    esp,0x10
c001bd0e:	89 c2                	mov    edx,eax
c001bd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bd1a:	83 ec 0c             	sub    esp,0xc
c001bd1d:	6a 50                	push   0x50
c001bd1f:	e8 dd d8 fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	89 c2                	mov    edx,eax
c001bd29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd2d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bd33:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001bd38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd3c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001bd42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd46:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bd4c:	83 ec 0c             	sub    esp,0xc
c001bd4f:	6a 03                	push   0x3
c001bd51:	6a 50                	push   0x50
c001bd53:	51                   	push   ecx
c001bd54:	52                   	push   edx
c001bd55:	50                   	push   eax
c001bd56:	e8 b3 e1 fe ff       	call   c0009f0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001bd5b:	83 c4 20             	add    esp,0x20
c001bd5e:	90                   	nop
c001bd5f:	83 c4 0c             	add    esp,0xc
c001bd62:	c3                   	ret    
c001bd63:	90                   	nop

c001bd64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001bd64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd68:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001bd6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bd6e:	09 c2                	or     edx,eax
c001bd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bd7a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd7c:	31 c0                	xor    eax,eax
c001bd7e:	c1 e9 08             	shr    ecx,0x8
c001bd81:	83 e1 0f             	and    ecx,0xf
c001bd84:	39 c8                	cmp    eax,ecx
c001bd86:	74 0a                	je     c001bd92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001bd88:	f6 c2 01             	test   dl,0x1
c001bd8b:	74 08                	je     c001bd95 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001bd8d:	d1 ea                	shr    edx,1
c001bd8f:	40                   	inc    eax
c001bd90:	eb f2                	jmp    c001bd84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001bd92:	83 c8 ff             	or     eax,0xffffffff
c001bd95:	c3                   	ret    

c001bd96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001bd96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd9a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001bd9d:	89 c2                	mov    edx,eax
c001bd9f:	c1 ea 08             	shr    edx,0x8
c001bda2:	83 e2 0f             	and    edx,0xf
c001bda5:	4a                   	dec    edx
c001bda6:	75 32                	jne    c001bdda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bda8:	83 e0 0f             	and    eax,0xf
c001bdab:	83 f8 03             	cmp    eax,0x3
c001bdae:	75 2a                	jne    c001bdda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bdb0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001bdb3:	b8 02 00 00 00       	mov    eax,0x2
c001bdb8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001bdbe:	74 1c                	je     c001bddc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bdc0:	b8 04 00 00 00       	mov    eax,0x4
c001bdc5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001bdcb:	74 0f                	je     c001bddc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bdcd:	31 c0                	xor    eax,eax
c001bdcf:	83 fa 03             	cmp    edx,0x3
c001bdd2:	0f 94 c0             	sete   al
c001bdd5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001bdd9:	c3                   	ret    
c001bdda:	31 c0                	xor    eax,eax
c001bddc:	c3                   	ret    
c001bddd:	90                   	nop

c001bdde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001bdde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bde2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bde5:	0f ba e2 0f          	bt     edx,0xf
c001bde9:	72 f7                	jb     c001bde2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001bdeb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bdee:	83 ca 10             	or     edx,0x10
c001bdf1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdf4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bdf7:	83 ca 01             	or     edx,0x1
c001bdfa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdfd:	c3                   	ret    

c001bdfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001bdfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be02:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001be05:	83 e2 fe             	and    edx,0xfffffffe
c001be08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001be0b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001be0e:	83 e2 ef             	and    edx,0xffffffef
c001be11:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001be14:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001be17:	0f ba e2 0e          	bt     edx,0xe
c001be1b:	72 f7                	jb     c001be14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001be1d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001be20:	0f ba e2 0f          	bt     edx,0xf
c001be24:	72 ee                	jb     c001be14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001be26:	c3                   	ret    
c001be27:	90                   	nop

c001be28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001be28:	55                   	push   ebp
c001be29:	57                   	push   edi
c001be2a:	56                   	push   esi
c001be2b:	53                   	push   ebx
c001be2c:	83 ec 1c             	sub    esp,0x1c
c001be2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be37:	53                   	push   ebx
c001be38:	56                   	push   esi
c001be39:	e8 c0 ff ff ff       	call   c001bdfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001be3e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001be42:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001be48:	83 ec 0c             	sub    esp,0xc
c001be4b:	c1 e5 0a             	shl    ebp,0xa
c001be4e:	01 e8                	add    eax,ebp
c001be50:	89 03                	mov    DWORD PTR [ebx],eax
c001be52:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be54:	68 00 04 00 00       	push   0x400
c001be59:	6a 00                	push   0x0
c001be5b:	50                   	push   eax
c001be5c:	e8 8f 46 fe ff       	call   c00004f0 <memset>
c001be61:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001be67:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001be6b:	01 e8                	add    eax,ebp
c001be6d:	83 c4 1c             	add    esp,0x1c
c001be70:	89 03                	mov    DWORD PTR [ebx],eax
c001be72:	c1 e2 08             	shl    edx,0x8
c001be75:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001be7c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001be82:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001be88:	01 f8                	add    eax,edi
c001be8a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001be8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001be90:	68 00 01 00 00       	push   0x100
c001be95:	6a 00                	push   0x0
c001be97:	50                   	push   eax
c001be98:	e8 53 46 fe ff       	call   c00004f0 <memset>
c001be9d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001bea3:	01 fa                	add    edx,edi
c001bea5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bea9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001beac:	c1 e7 0d             	shl    edi,0xd
c001beaf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001beb6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001bebc:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001bec2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bec6:	31 ff                	xor    edi,edi
c001bec8:	83 c4 10             	add    esp,0x10
c001becb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001bed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bed5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001bedb:	83 c5 20             	add    ebp,0x20
c001bede:	01 f8                	add    eax,edi
c001bee0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bee3:	52                   	push   edx
c001bee4:	68 00 01 00 00       	push   0x100
c001bee9:	6a 00                	push   0x0
c001beeb:	50                   	push   eax
c001beec:	e8 ff 45 fe ff       	call   c00004f0 <memset>
c001bef1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bef5:	83 c4 10             	add    esp,0x10
c001bef8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001befe:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001bf05:	01 f8                	add    eax,edi
c001bf07:	81 c7 00 01 00 00    	add    edi,0x100
c001bf0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bf10:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001bf16:	75 b3                	jne    c001becb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001bf18:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bf1f:	50                   	push   eax
c001bf20:	50                   	push   eax
c001bf21:	53                   	push   ebx
c001bf22:	56                   	push   esi
c001bf23:	e8 b6 fe ff ff       	call   c001bdde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001bf28:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bf2f:	83 c4 2c             	add    esp,0x2c
c001bf32:	5b                   	pop    ebx
c001bf33:	5e                   	pop    esi
c001bf34:	5f                   	pop    edi
c001bf35:	5d                   	pop    ebp
c001bf36:	c3                   	ret    
c001bf37:	90                   	nop

c001bf38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001bf38:	55                   	push   ebp
c001bf39:	57                   	push   edi
c001bf3a:	56                   	push   esi
c001bf3b:	53                   	push   ebx
c001bf3c:	31 db                	xor    ebx,ebx
c001bf3e:	83 ec 0c             	sub    esp,0xc
c001bf41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf45:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bf49:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001bf4c:	f7 c7 01 00 00 00    	test   edi,0x1
c001bf52:	74 7a                	je     c001bfce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bf54:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bf58:	89 d8                	mov    eax,ebx
c001bf5a:	c1 e0 07             	shl    eax,0x7
c001bf5d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001bf64:	55                   	push   ebp
c001bf65:	56                   	push   esi
c001bf66:	e8 2b fe ff ff       	call   c001bd96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001bf6b:	5a                   	pop    edx
c001bf6c:	83 f8 01             	cmp    eax,0x1
c001bf6f:	59                   	pop    ecx
c001bf70:	75 21                	jne    c001bf93 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001bf72:	50                   	push   eax
c001bf73:	53                   	push   ebx
c001bf74:	55                   	push   ebp
c001bf75:	56                   	push   esi
c001bf76:	e8 ad fe ff ff       	call   c001be28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bf7b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001bf82:	e8 27 bb fe ff       	call   c0007aae <malloc>
c001bf87:	89 c5                	mov    ebp,eax
c001bf89:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf8c:	e8 99 10 00 00       	call   c001d02a <SATA::SATA()>
c001bf91:	eb 24                	jmp    c001bfb7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001bf93:	83 f8 04             	cmp    eax,0x4
c001bf96:	75 36                	jne    c001bfce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bf98:	51                   	push   ecx
c001bf99:	53                   	push   ebx
c001bf9a:	55                   	push   ebp
c001bf9b:	56                   	push   esi
c001bf9c:	e8 87 fe ff ff       	call   c001be28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bfa1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001bfa8:	e8 01 bb fe ff       	call   c0007aae <malloc>
c001bfad:	89 c5                	mov    ebp,eax
c001bfaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001bfb2:	e8 d5 17 00 00       	call   c001d78c <SATAPI::SATAPI()>
c001bfb7:	58                   	pop    eax
c001bfb8:	5a                   	pop    edx
c001bfb9:	55                   	push   ebp
c001bfba:	56                   	push   esi
c001bfbb:	e8 da 00 ff ff       	call   c000c09a <Device::addChild(Device*)>
c001bfc0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bfc3:	56                   	push   esi
c001bfc4:	6a 00                	push   0x0
c001bfc6:	53                   	push   ebx
c001bfc7:	55                   	push   ebp
c001bfc8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bfcb:	83 c4 20             	add    esp,0x20
c001bfce:	d1 ef                	shr    edi,1
c001bfd0:	43                   	inc    ebx
c001bfd1:	83 fb 20             	cmp    ebx,0x20
c001bfd4:	0f 85 72 ff ff ff    	jne    c001bf4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001bfda:	83 c4 0c             	add    esp,0xc
c001bfdd:	5b                   	pop    ebx
c001bfde:	5e                   	pop    esi
c001bfdf:	5f                   	pop    edi
c001bfe0:	5d                   	pop    ebp
c001bfe1:	c3                   	ret    

c001bfe2 <SATABus::open(int, int, void*)>:
c001bfe2:	83 ec 14             	sub    esp,0x14
c001bfe5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfe9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bfef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bff5:	52                   	push   edx
c001bff6:	50                   	push   eax
c001bff7:	e8 3c ff ff ff       	call   c001bf38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bffc:	31 c0                	xor    eax,eax
c001bffe:	83 c4 1c             	add    esp,0x1c
c001c001:	c3                   	ret    

c001c002 <ATA::close(int, int, void*)>:
c001c002:	83 ec 0c             	sub    esp,0xc
c001c005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c009:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c00f:	85 c0                	test   eax,eax
c001c011:	74 0c                	je     c001c01f <ATA::close(int, int, void*)+0x1d>
c001c013:	83 ec 0c             	sub    esp,0xc
c001c016:	8b 10                	mov    edx,DWORD PTR [eax]
c001c018:	50                   	push   eax
c001c019:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	31 c0                	xor    eax,eax
c001c021:	83 c4 0c             	add    esp,0xc
c001c024:	c3                   	ret    
c001c025:	90                   	nop

c001c026 <ATA::powerSaving(PowerSavingLevel)>:
c001c026:	c3                   	ret    
c001c027:	90                   	nop

c001c028 <ATA::ATA()>:
c001c028:	83 ec 0c             	sub    esp,0xc
c001c02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02f:	83 ec 04             	sub    esp,0x4
c001c032:	68 00 02 00 00       	push   0x200
c001c037:	68 79 25 02 c0       	push   0xc0022579
c001c03c:	50                   	push   eax
c001c03d:	e8 24 04 ff ff       	call   c000c466 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c042:	83 c4 10             	add    esp,0x10
c001c045:	ba ec 24 02 c0       	mov    edx,0xc00224ec
c001c04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c04e:	89 10                	mov    DWORD PTR [eax],edx
c001c050:	90                   	nop
c001c051:	83 c4 0c             	add    esp,0xc
c001c054:	c3                   	ret    
c001c055:	90                   	nop

c001c056 <ATA::flush(bool)>:
c001c056:	53                   	push   ebx
c001c057:	83 ec 08             	sub    esp,0x8
c001c05a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c05e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c063:	83 f8 01             	cmp    eax,0x1
c001c066:	19 c0                	sbb    eax,eax
c001c068:	83 e0 fd             	and    eax,0xfffffffd
c001c06b:	05 ea 00 00 00       	add    eax,0xea
c001c070:	50                   	push   eax
c001c071:	6a 07                	push   0x7
c001c073:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c07a:	50                   	push   eax
c001c07b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c081:	e8 16 f1 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c086:	83 c4 0c             	add    esp,0xc
c001c089:	6a 00                	push   0x0
c001c08b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c092:	50                   	push   eax
c001c093:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c099:	e8 e6 fb ff ff       	call   c001bc84 <IDE::polling(unsigned char, unsigned int)>
c001c09e:	83 c4 18             	add    esp,0x18
c001c0a1:	5b                   	pop    ebx
c001c0a2:	c3                   	ret    
c001c0a3:	90                   	nop

c001c0a4 <ATA::readyForCommand()>:
c001c0a4:	56                   	push   esi
c001c0a5:	53                   	push   ebx
c001c0a6:	53                   	push   ebx
c001c0a7:	31 db                	xor    ebx,ebx
c001c0a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c0ad:	51                   	push   ecx
c001c0ae:	6a 0c                	push   0xc
c001c0b0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c0b7:	50                   	push   eax
c001c0b8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c0be:	e8 99 f1 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001c0c3:	83 c4 10             	add    esp,0x10
c001c0c6:	a8 88                	test   al,0x88
c001c0c8:	74 1f                	je     c001c0e9 <ATA::readyForCommand()+0x45>
c001c0ca:	43                   	inc    ebx
c001c0cb:	83 fb 63             	cmp    ebx,0x63
c001c0ce:	7e dd                	jle    c001c0ad <ATA::readyForCommand()+0x9>
c001c0d0:	83 ec 0c             	sub    esp,0xc
c001c0d3:	6a 0a                	push   0xa
c001c0d5:	e8 26 97 ff ff       	call   c0015800 <milliTenthSleep(unsigned int)>
c001c0da:	83 c4 10             	add    esp,0x10
c001c0dd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c0e3:	75 c8                	jne    c001c0ad <ATA::readyForCommand()+0x9>
c001c0e5:	31 c0                	xor    eax,eax
c001c0e7:	eb 02                	jmp    c001c0eb <ATA::readyForCommand()+0x47>
c001c0e9:	b0 01                	mov    al,0x1
c001c0eb:	5a                   	pop    edx
c001c0ec:	5b                   	pop    ebx
c001c0ed:	5e                   	pop    esi
c001c0ee:	c3                   	ret    
c001c0ef:	90                   	nop

c001c0f0 <ATA::access(unsigned long long, int, void*, bool)>:
c001c0f0:	55                   	push   ebp
c001c0f1:	57                   	push   edi
c001c0f2:	56                   	push   esi
c001c0f3:	53                   	push   ebx
c001c0f4:	83 ec 2c             	sub    esp,0x2c
c001c0f7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c0fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c0ff:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c103:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c107:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c10b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c10f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c113:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c119:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c11d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c123:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c127:	c1 e0 06             	shl    eax,0x6
c001c12a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c132:	74 5d                	je     c001c191 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c134:	89 fa                	mov    edx,edi
c001c136:	89 f0                	mov    eax,esi
c001c138:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c13c:	c1 ea 1c             	shr    edx,0x1c
c001c13f:	89 d1                	mov    ecx,edx
c001c141:	09 c1                	or     ecx,eax
c001c143:	74 25                	je     c001c16a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c145:	31 ed                	xor    ebp,ebp
c001c147:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c14e:	89 fa                	mov    edx,edi
c001c150:	89 f0                	mov    eax,esi
c001c152:	0f ad d0             	shrd   eax,edx,cl
c001c155:	d3 ea                	shr    edx,cl
c001c157:	f6 c1 20             	test   cl,0x20
c001c15a:	74 02                	je     c001c15e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c15c:	89 d0                	mov    eax,edx
c001c15e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c162:	45                   	inc    ebp
c001c163:	83 fd 06             	cmp    ebp,0x6
c001c166:	75 df                	jne    c001c147 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c168:	eb 76                	jmp    c001c1e0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c16a:	89 f0                	mov    eax,esi
c001c16c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c171:	89 fa                	mov    edx,edi
c001c173:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c17a:	0f ac d0 10          	shrd   eax,edx,0x10
c001c17e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c183:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c187:	c1 ee 18             	shr    esi,0x18
c001c18a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c18f:	eb 56                	jmp    c001c1e7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c191:	6a 00                	push   0x0
c001c193:	6a 3f                	push   0x3f
c001c195:	57                   	push   edi
c001c196:	56                   	push   esi
c001c197:	e8 a4 2a 00 00       	call   c001ec40 <__umoddi3>
c001c19c:	83 c4 10             	add    esp,0x10
c001c19f:	40                   	inc    eax
c001c1a0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c1a4:	6a 00                	push   0x0
c001c1a6:	68 f0 03 00 00       	push   0x3f0
c001c1ab:	57                   	push   edi
c001c1ac:	56                   	push   esi
c001c1ad:	e8 8e 29 00 00       	call   c001eb40 <__udivdi3>
c001c1b2:	83 c4 10             	add    esp,0x10
c001c1b5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c1ba:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c1c1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c1c6:	6a 00                	push   0x0
c001c1c8:	6a 3f                	push   0x3f
c001c1ca:	57                   	push   edi
c001c1cb:	56                   	push   esi
c001c1cc:	e8 6f 29 00 00       	call   c001eb40 <__udivdi3>
c001c1d1:	83 c4 10             	add    esp,0x10
c001c1d4:	83 e0 0f             	and    eax,0xf
c001c1d7:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c1dc:	89 c6                	mov    esi,eax
c001c1de:	eb 07                	jmp    c001c1e7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c1e0:	31 f6                	xor    esi,esi
c001c1e2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c1e7:	bf 01 00 00 00       	mov    edi,0x1
c001c1ec:	50                   	push   eax
c001c1ed:	6a 00                	push   0x0
c001c1ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1f6:	50                   	push   eax
c001c1f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1fb:	e8 a4 f1 ff ff       	call   c001b3a4 <IDE::enableIRQs(unsigned char, bool)>
c001c200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c203:	e8 9c fe ff ff       	call   c001c0a4 <ATA::readyForCommand()>
c001c208:	83 c4 10             	add    esp,0x10
c001c20b:	84 c0                	test   al,al
c001c20d:	0f 84 69 02 00 00    	je     c001c47c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c213:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c219:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c21f:	c1 e0 04             	shl    eax,0x4
c001c222:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c229:	09 c6                	or     esi,eax
c001c22b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c230:	75 05                	jne    c001c237 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c232:	83 ce a0             	or     esi,0xffffffa0
c001c235:	eb 03                	jmp    c001c23a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c237:	83 ce e0             	or     esi,0xffffffe0
c001c23a:	89 f0                	mov    eax,esi
c001c23c:	0f b6 f0             	movzx  esi,al
c001c23f:	56                   	push   esi
c001c240:	6a 06                	push   0x6
c001c242:	51                   	push   ecx
c001c243:	52                   	push   edx
c001c244:	e8 53 ef ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c249:	83 c4 10             	add    esp,0x10
c001c24c:	6a 00                	push   0x0
c001c24e:	6a 01                	push   0x1
c001c250:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c257:	50                   	push   eax
c001c258:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c25e:	e8 39 ef ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c26b:	83 f8 02             	cmp    eax,0x2
c001c26e:	75 6e                	jne    c001c2de <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c270:	6a 00                	push   0x0
c001c272:	6a 08                	push   0x8
c001c274:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c27b:	50                   	push   eax
c001c27c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c282:	e8 15 ef ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c287:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c28c:	50                   	push   eax
c001c28d:	6a 09                	push   0x9
c001c28f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c296:	50                   	push   eax
c001c297:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c29d:	e8 fa ee ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2a2:	83 c4 20             	add    esp,0x20
c001c2a5:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c2aa:	50                   	push   eax
c001c2ab:	6a 0a                	push   0xa
c001c2ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2b4:	50                   	push   eax
c001c2b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2bb:	e8 dc ee ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2c0:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c2c5:	50                   	push   eax
c001c2c6:	6a 0b                	push   0xb
c001c2c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2cf:	50                   	push   eax
c001c2d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2d6:	e8 c1 ee ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2db:	83 c4 20             	add    esp,0x20
c001c2de:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c2e3:	50                   	push   eax
c001c2e4:	6a 02                	push   0x2
c001c2e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c2ed:	50                   	push   eax
c001c2ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2f4:	e8 a3 ee ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2f9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c2fe:	50                   	push   eax
c001c2ff:	6a 03                	push   0x3
c001c301:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c308:	50                   	push   eax
c001c309:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c30f:	e8 88 ee ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c314:	83 c4 20             	add    esp,0x20
c001c317:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c31c:	50                   	push   eax
c001c31d:	6a 04                	push   0x4
c001c31f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c326:	50                   	push   eax
c001c327:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c32d:	e8 6a ee ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c332:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c337:	50                   	push   eax
c001c338:	6a 05                	push   0x5
c001c33a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c341:	50                   	push   eax
c001c342:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c348:	e8 4f ee ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c34d:	83 c4 20             	add    esp,0x20
c001c350:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c355:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c35a:	74 11                	je     c001c36d <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c35c:	b8 30 00 00 00       	mov    eax,0x30
c001c361:	83 fa 02             	cmp    edx,0x2
c001c364:	75 16                	jne    c001c37c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c366:	b8 34 00 00 00       	mov    eax,0x34
c001c36b:	eb 0f                	jmp    c001c37c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c36d:	b8 20 00 00 00       	mov    eax,0x20
c001c372:	83 fa 02             	cmp    edx,0x2
c001c375:	75 05                	jne    c001c37c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c377:	b8 24 00 00 00       	mov    eax,0x24
c001c37c:	50                   	push   eax
c001c37d:	6a 07                	push   0x7
c001c37f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c386:	50                   	push   eax
c001c387:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c38d:	e8 0a ee ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c392:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c39e:	85 f6                	test   esi,esi
c001c3a0:	0f 84 b3 00 00 00    	je     c001c459 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c3a6:	50                   	push   eax
c001c3a7:	6a 01                	push   0x1
c001c3a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3b0:	50                   	push   eax
c001c3b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3b7:	e8 c8 f8 ff ff       	call   c001bc84 <IDE::polling(unsigned char, unsigned int)>
c001c3bc:	83 c4 10             	add    esp,0x10
c001c3bf:	0f b6 f8             	movzx  edi,al
c001c3c2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c3c8:	85 ff                	test   edi,edi
c001c3ca:	74 1d                	je     c001c3e9 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001c3cc:	57                   	push   edi
c001c3cd:	0f b6 d2             	movzx  edx,dl
c001c3d0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c3d7:	50                   	push   eax
c001c3d8:	52                   	push   edx
c001c3d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3df:	e8 e6 f7 ff ff       	call   c001bbca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c3e4:	e9 90 00 00 00       	jmp    c001c479 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001c3e9:	85 ed                	test   ebp,ebp
c001c3eb:	74 3b                	je     c001c428 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001c3ed:	31 c9                	xor    ecx,ecx
c001c3ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c3f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3f7:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001c3fb:	50                   	push   eax
c001c3fc:	50                   	push   eax
c001c3fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c404:	50                   	push   eax
c001c405:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c40b:	e8 7a ed ff ff       	call   c001b18a <IDE::getBase(unsigned char)>
c001c410:	89 c2                	mov    edx,eax
c001c412:	89 f8                	mov    eax,edi
c001c414:	66 ef                	out    dx,ax
c001c416:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c41a:	83 c4 10             	add    esp,0x10
c001c41d:	41                   	inc    ecx
c001c41e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c424:	75 c9                	jne    c001c3ef <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001c426:	eb 23                	jmp    c001c44b <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001c428:	0f b6 d2             	movzx  edx,dl
c001c42b:	51                   	push   ecx
c001c42c:	51                   	push   ecx
c001c42d:	52                   	push   edx
c001c42e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c434:	e8 51 ed ff ff       	call   c001b18a <IDE::getBase(unsigned char)>
c001c439:	b9 00 01 00 00       	mov    ecx,0x100
c001c43e:	89 c2                	mov    edx,eax
c001c440:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c444:	fc                   	cld    
c001c445:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c448:	83 c4 10             	add    esp,0x10
c001c44b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001c453:	4e                   	dec    esi
c001c454:	e9 45 ff ff ff       	jmp    c001c39e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001c459:	31 ff                	xor    edi,edi
c001c45b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c460:	74 1a                	je     c001c47c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c462:	50                   	push   eax
c001c463:	50                   	push   eax
c001c464:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001c469:	83 f8 02             	cmp    eax,0x2
c001c46c:	0f 94 c0             	sete   al
c001c46f:	0f b6 c0             	movzx  eax,al
c001c472:	50                   	push   eax
c001c473:	53                   	push   ebx
c001c474:	e8 dd fb ff ff       	call   c001c056 <ATA::flush(bool)>
c001c479:	83 c4 10             	add    esp,0x10
c001c47c:	83 c4 2c             	add    esp,0x2c
c001c47f:	89 f8                	mov    eax,edi
c001c481:	5b                   	pop    ebx
c001c482:	5e                   	pop    esi
c001c483:	5f                   	pop    edi
c001c484:	5d                   	pop    ebp
c001c485:	c3                   	ret    

c001c486 <ATA::detectCHS()>:
c001c486:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c48a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c490:	c1 e0 06             	shl    eax,0x6
c001c493:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c499:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c4a3:	c7 44 24 04 d0 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224d0
c001c4ab:	e9 61 47 ff ff       	jmp    c0010c11 <KePanic(char const*)>

c001c4b0 <ATA::open(int, int, void*)>:
c001c4b0:	53                   	push   ebx
c001c4b1:	83 ec 08             	sub    esp,0x8
c001c4b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c4b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4c0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c4c6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c4cc:	c1 e0 06             	shl    eax,0x6
c001c4cf:	01 d0                	add    eax,edx
c001c4d1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c4d8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c4de:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c4e5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c4ef:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c4f5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c4fc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c503:	75 0c                	jne    c001c511 <ATA::open(int, int, void*)+0x61>
c001c505:	83 ec 0c             	sub    esp,0xc
c001c508:	53                   	push   ebx
c001c509:	e8 78 ff ff ff       	call   c001c486 <ATA::detectCHS()>
c001c50e:	83 c4 10             	add    esp,0x10
c001c511:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c517:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c51d:	c1 e0 06             	shl    eax,0x6
c001c520:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c527:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c531:	d1 e8                	shr    eax,1
c001c533:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c539:	6a 04                	push   0x4
c001c53b:	6a 0c                	push   0xc
c001c53d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c544:	50                   	push   eax
c001c545:	52                   	push   edx
c001c546:	e8 51 ec ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c54b:	90                   	nop
c001c54c:	90                   	nop
c001c54d:	6a 00                	push   0x0
c001c54f:	6a 0c                	push   0xc
c001c551:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c558:	50                   	push   eax
c001c559:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c55f:	e8 38 ec ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c564:	83 c4 14             	add    esp,0x14
c001c567:	53                   	push   ebx
c001c568:	e8 61 ff fe ff       	call   c000c4ce <PhysicalDisk::startCache()>
c001c56d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c570:	e8 9d 11 ff ff       	call   c000d712 <createPartitionsForDisk(PhysicalDisk*)>
c001c575:	31 c0                	xor    eax,eax
c001c577:	83 c4 18             	add    esp,0x18
c001c57a:	5b                   	pop    ebx
c001c57b:	c3                   	ret    

c001c57c <combineCharAndColour(char, unsigned char)>:
c001c57c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c581:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c587:	c1 e0 08             	shl    eax,0x8
c001c58a:	09 d0                	or     eax,edx
c001c58c:	c3                   	ret    

c001c58d <combineColours(unsigned char, unsigned char)>:
c001c58d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c592:	c1 e0 04             	shl    eax,0x4
c001c595:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c599:	c3                   	ret    

c001c59a <ATA::read(unsigned long long, int, void*)>:
c001c59a:	55                   	push   ebp
c001c59b:	57                   	push   edi
c001c59c:	56                   	push   esi
c001c59d:	be 04 00 00 00       	mov    esi,0x4
c001c5a2:	53                   	push   ebx
c001c5a3:	83 ec 0c             	sub    esp,0xc
c001c5a6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5ae:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c5b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c5b5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c5b9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c5bf:	0f 87 a1 01 00 00    	ja     c001c766 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c5c5:	be 06 00 00 00       	mov    esi,0x6
c001c5ca:	85 c9                	test   ecx,ecx
c001c5cc:	0f 84 94 01 00 00    	je     c001c766 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c5d2:	55                   	push   ebp
c001c5d3:	55                   	push   ebp
c001c5d4:	6a 00                	push   0x0
c001c5d6:	51                   	push   ecx
c001c5d7:	53                   	push   ebx
c001c5d8:	52                   	push   edx
c001c5d9:	50                   	push   eax
c001c5da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5de:	e8 0d fb ff ff       	call   c001c0f0 <ATA::access(unsigned long long, int, void*, bool)>
c001c5e3:	83 c4 20             	add    esp,0x20
c001c5e6:	89 c6                	mov    esi,eax
c001c5e8:	85 c0                	test   eax,eax
c001c5ea:	0f 85 71 01 00 00    	jne    c001c761 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c5f0:	03 1d 54 9b 02 c0    	add    ebx,DWORD PTR ds:0xc0029b54
c001c5f6:	89 da                	mov    edx,ebx
c001c5f8:	50                   	push   eax
c001c5f9:	bd 10 27 00 00       	mov    ebp,0x2710
c001c5fe:	50                   	push   eax
c001c5ff:	89 1d 54 9b 02 c0    	mov    DWORD PTR ds:0xc0029b54,ebx
c001c605:	6a 0f                	push   0xf
c001c607:	6a 00                	push   0x0
c001c609:	e8 7f ff ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001c60e:	59                   	pop    ecx
c001c60f:	b9 0a 00 00 00       	mov    ecx,0xa
c001c614:	5b                   	pop    ebx
c001c615:	0f b6 d8             	movzx  ebx,al
c001c618:	89 d0                	mov    eax,edx
c001c61a:	53                   	push   ebx
c001c61b:	99                   	cdq    
c001c61c:	f7 fd                	idiv   ebp
c001c61e:	99                   	cdq    
c001c61f:	f7 f9                	idiv   ecx
c001c621:	83 c2 30             	add    edx,0x30
c001c624:	0f b6 d2             	movzx  edx,dl
c001c627:	52                   	push   edx
c001c628:	e8 4f ff ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c62d:	5f                   	pop    edi
c001c62e:	bf e8 03 00 00       	mov    edi,0x3e8
c001c633:	5a                   	pop    edx
c001c634:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c63a:	53                   	push   ebx
c001c63b:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c640:	99                   	cdq    
c001c641:	f7 ff                	idiv   edi
c001c643:	99                   	cdq    
c001c644:	f7 f9                	idiv   ecx
c001c646:	8d 42 30             	lea    eax,[edx+0x30]
c001c649:	0f b6 c0             	movzx  eax,al
c001c64c:	50                   	push   eax
c001c64d:	e8 2a ff ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c652:	5f                   	pop    edi
c001c653:	bf 64 00 00 00       	mov    edi,0x64
c001c658:	5a                   	pop    edx
c001c659:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c65f:	53                   	push   ebx
c001c660:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c665:	99                   	cdq    
c001c666:	f7 ff                	idiv   edi
c001c668:	99                   	cdq    
c001c669:	f7 f9                	idiv   ecx
c001c66b:	8d 42 30             	lea    eax,[edx+0x30]
c001c66e:	0f b6 c0             	movzx  eax,al
c001c671:	50                   	push   eax
c001c672:	e8 05 ff ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c677:	5a                   	pop    edx
c001c678:	5a                   	pop    edx
c001c679:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c67f:	53                   	push   ebx
c001c680:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c685:	99                   	cdq    
c001c686:	f7 f9                	idiv   ecx
c001c688:	99                   	cdq    
c001c689:	f7 f9                	idiv   ecx
c001c68b:	8d 42 30             	lea    eax,[edx+0x30]
c001c68e:	0f b6 c0             	movzx  eax,al
c001c691:	50                   	push   eax
c001c692:	e8 e5 fe ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c697:	5a                   	pop    edx
c001c698:	5a                   	pop    edx
c001c699:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c69f:	53                   	push   ebx
c001c6a0:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c6a5:	99                   	cdq    
c001c6a6:	f7 f9                	idiv   ecx
c001c6a8:	83 c2 30             	add    edx,0x30
c001c6ab:	0f b6 d2             	movzx  edx,dl
c001c6ae:	52                   	push   edx
c001c6af:	e8 c8 fe ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c6b4:	5a                   	pop    edx
c001c6b5:	5a                   	pop    edx
c001c6b6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c6bc:	53                   	push   ebx
c001c6bd:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c6c2:	99                   	cdq    
c001c6c3:	f7 fd                	idiv   ebp
c001c6c5:	99                   	cdq    
c001c6c6:	f7 f9                	idiv   ecx
c001c6c8:	8d 42 30             	lea    eax,[edx+0x30]
c001c6cb:	0f b6 c0             	movzx  eax,al
c001c6ce:	50                   	push   eax
c001c6cf:	e8 a8 fe ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c6d4:	5d                   	pop    ebp
c001c6d5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c6da:	5a                   	pop    edx
c001c6db:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c6e1:	53                   	push   ebx
c001c6e2:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c6e7:	99                   	cdq    
c001c6e8:	f7 fd                	idiv   ebp
c001c6ea:	99                   	cdq    
c001c6eb:	f7 f9                	idiv   ecx
c001c6ed:	8d 42 30             	lea    eax,[edx+0x30]
c001c6f0:	0f b6 c0             	movzx  eax,al
c001c6f3:	50                   	push   eax
c001c6f4:	e8 83 fe ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c6f9:	5d                   	pop    ebp
c001c6fa:	5a                   	pop    edx
c001c6fb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c701:	53                   	push   ebx
c001c702:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c707:	99                   	cdq    
c001c708:	f7 ff                	idiv   edi
c001c70a:	99                   	cdq    
c001c70b:	f7 f9                	idiv   ecx
c001c70d:	8d 42 30             	lea    eax,[edx+0x30]
c001c710:	0f b6 c0             	movzx  eax,al
c001c713:	50                   	push   eax
c001c714:	e8 63 fe ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c719:	5f                   	pop    edi
c001c71a:	5d                   	pop    ebp
c001c71b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c721:	53                   	push   ebx
c001c722:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c727:	99                   	cdq    
c001c728:	f7 f9                	idiv   ecx
c001c72a:	99                   	cdq    
c001c72b:	f7 f9                	idiv   ecx
c001c72d:	8d 42 30             	lea    eax,[edx+0x30]
c001c730:	0f b6 c0             	movzx  eax,al
c001c733:	50                   	push   eax
c001c734:	e8 43 fe ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c739:	5a                   	pop    edx
c001c73a:	5f                   	pop    edi
c001c73b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c741:	53                   	push   ebx
c001c742:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c747:	99                   	cdq    
c001c748:	f7 f9                	idiv   ecx
c001c74a:	83 c2 30             	add    edx,0x30
c001c74d:	0f b6 d2             	movzx  edx,dl
c001c750:	52                   	push   edx
c001c751:	e8 26 fe ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c756:	83 c4 10             	add    esp,0x10
c001c759:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c75f:	eb 05                	jmp    c001c766 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c761:	be 01 00 00 00       	mov    esi,0x1
c001c766:	83 c4 0c             	add    esp,0xc
c001c769:	89 f0                	mov    eax,esi
c001c76b:	5b                   	pop    ebx
c001c76c:	5e                   	pop    esi
c001c76d:	5f                   	pop    edi
c001c76e:	5d                   	pop    ebp
c001c76f:	c3                   	ret    

c001c770 <ATA::write(unsigned long long, int, void*)>:
c001c770:	55                   	push   ebp
c001c771:	57                   	push   edi
c001c772:	56                   	push   esi
c001c773:	be 04 00 00 00       	mov    esi,0x4
c001c778:	53                   	push   ebx
c001c779:	83 ec 0c             	sub    esp,0xc
c001c77c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c780:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c784:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c787:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c78b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c78f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c795:	0f 87 9c 01 00 00    	ja     c001c937 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c79b:	be 06 00 00 00       	mov    esi,0x6
c001c7a0:	85 c9                	test   ecx,ecx
c001c7a2:	0f 84 8f 01 00 00    	je     c001c937 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c7a8:	55                   	push   ebp
c001c7a9:	55                   	push   ebp
c001c7aa:	6a 01                	push   0x1
c001c7ac:	51                   	push   ecx
c001c7ad:	53                   	push   ebx
c001c7ae:	52                   	push   edx
c001c7af:	50                   	push   eax
c001c7b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c7b4:	e8 37 f9 ff ff       	call   c001c0f0 <ATA::access(unsigned long long, int, void*, bool)>
c001c7b9:	83 c4 20             	add    esp,0x20
c001c7bc:	89 c6                	mov    esi,eax
c001c7be:	85 c0                	test   eax,eax
c001c7c0:	0f 85 6c 01 00 00    	jne    c001c932 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c7c6:	01 1d 50 9b 02 c0    	add    DWORD PTR ds:0xc0029b50,ebx
c001c7cc:	bd 10 27 00 00       	mov    ebp,0x2710
c001c7d1:	50                   	push   eax
c001c7d2:	50                   	push   eax
c001c7d3:	6a 0f                	push   0xf
c001c7d5:	6a 00                	push   0x0
c001c7d7:	e8 b1 fd ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001c7dc:	5a                   	pop    edx
c001c7dd:	0f b6 d8             	movzx  ebx,al
c001c7e0:	59                   	pop    ecx
c001c7e1:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c7e6:	53                   	push   ebx
c001c7e7:	b9 0a 00 00 00       	mov    ecx,0xa
c001c7ec:	99                   	cdq    
c001c7ed:	f7 fd                	idiv   ebp
c001c7ef:	99                   	cdq    
c001c7f0:	f7 f9                	idiv   ecx
c001c7f2:	8d 42 30             	lea    eax,[edx+0x30]
c001c7f5:	0f b6 c0             	movzx  eax,al
c001c7f8:	50                   	push   eax
c001c7f9:	e8 7e fd ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c7fe:	5f                   	pop    edi
c001c7ff:	bf e8 03 00 00       	mov    edi,0x3e8
c001c804:	5a                   	pop    edx
c001c805:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c80b:	53                   	push   ebx
c001c80c:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c811:	99                   	cdq    
c001c812:	f7 ff                	idiv   edi
c001c814:	99                   	cdq    
c001c815:	f7 f9                	idiv   ecx
c001c817:	8d 42 30             	lea    eax,[edx+0x30]
c001c81a:	0f b6 c0             	movzx  eax,al
c001c81d:	50                   	push   eax
c001c81e:	e8 59 fd ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c823:	5f                   	pop    edi
c001c824:	bf 64 00 00 00       	mov    edi,0x64
c001c829:	5a                   	pop    edx
c001c82a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c830:	53                   	push   ebx
c001c831:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c836:	99                   	cdq    
c001c837:	f7 ff                	idiv   edi
c001c839:	99                   	cdq    
c001c83a:	f7 f9                	idiv   ecx
c001c83c:	8d 42 30             	lea    eax,[edx+0x30]
c001c83f:	0f b6 c0             	movzx  eax,al
c001c842:	50                   	push   eax
c001c843:	e8 34 fd ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c848:	5a                   	pop    edx
c001c849:	5a                   	pop    edx
c001c84a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c850:	53                   	push   ebx
c001c851:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c856:	99                   	cdq    
c001c857:	f7 f9                	idiv   ecx
c001c859:	99                   	cdq    
c001c85a:	f7 f9                	idiv   ecx
c001c85c:	8d 42 30             	lea    eax,[edx+0x30]
c001c85f:	0f b6 c0             	movzx  eax,al
c001c862:	50                   	push   eax
c001c863:	e8 14 fd ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c868:	5a                   	pop    edx
c001c869:	5a                   	pop    edx
c001c86a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c870:	53                   	push   ebx
c001c871:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c876:	99                   	cdq    
c001c877:	f7 f9                	idiv   ecx
c001c879:	8d 42 30             	lea    eax,[edx+0x30]
c001c87c:	0f b6 c0             	movzx  eax,al
c001c87f:	50                   	push   eax
c001c880:	e8 f7 fc ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c885:	5a                   	pop    edx
c001c886:	5a                   	pop    edx
c001c887:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c88d:	53                   	push   ebx
c001c88e:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c893:	99                   	cdq    
c001c894:	f7 fd                	idiv   ebp
c001c896:	99                   	cdq    
c001c897:	f7 f9                	idiv   ecx
c001c899:	8d 42 30             	lea    eax,[edx+0x30]
c001c89c:	0f b6 c0             	movzx  eax,al
c001c89f:	50                   	push   eax
c001c8a0:	e8 d7 fc ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c8a5:	5d                   	pop    ebp
c001c8a6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c8ab:	5a                   	pop    edx
c001c8ac:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c8b2:	53                   	push   ebx
c001c8b3:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c8b8:	99                   	cdq    
c001c8b9:	f7 fd                	idiv   ebp
c001c8bb:	99                   	cdq    
c001c8bc:	f7 f9                	idiv   ecx
c001c8be:	8d 42 30             	lea    eax,[edx+0x30]
c001c8c1:	0f b6 c0             	movzx  eax,al
c001c8c4:	50                   	push   eax
c001c8c5:	e8 b2 fc ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c8ca:	5d                   	pop    ebp
c001c8cb:	5a                   	pop    edx
c001c8cc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c8d2:	53                   	push   ebx
c001c8d3:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c8d8:	99                   	cdq    
c001c8d9:	f7 ff                	idiv   edi
c001c8db:	99                   	cdq    
c001c8dc:	f7 f9                	idiv   ecx
c001c8de:	8d 42 30             	lea    eax,[edx+0x30]
c001c8e1:	0f b6 c0             	movzx  eax,al
c001c8e4:	50                   	push   eax
c001c8e5:	e8 92 fc ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c8ea:	5f                   	pop    edi
c001c8eb:	5d                   	pop    ebp
c001c8ec:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c8f2:	53                   	push   ebx
c001c8f3:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c8f8:	99                   	cdq    
c001c8f9:	f7 f9                	idiv   ecx
c001c8fb:	99                   	cdq    
c001c8fc:	f7 f9                	idiv   ecx
c001c8fe:	8d 42 30             	lea    eax,[edx+0x30]
c001c901:	0f b6 c0             	movzx  eax,al
c001c904:	50                   	push   eax
c001c905:	e8 72 fc ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c90a:	5a                   	pop    edx
c001c90b:	5f                   	pop    edi
c001c90c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c912:	53                   	push   ebx
c001c913:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c918:	99                   	cdq    
c001c919:	f7 f9                	idiv   ecx
c001c91b:	83 c2 30             	add    edx,0x30
c001c91e:	0f b6 d2             	movzx  edx,dl
c001c921:	52                   	push   edx
c001c922:	e8 55 fc ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001c927:	83 c4 10             	add    esp,0x10
c001c92a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c930:	eb 05                	jmp    c001c937 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c932:	be 01 00 00 00       	mov    esi,0x1
c001c937:	83 c4 0c             	add    esp,0xc
c001c93a:	89 f0                	mov    eax,esi
c001c93c:	5b                   	pop    ebx
c001c93d:	5e                   	pop    esi
c001c93e:	5f                   	pop    edi
c001c93f:	5d                   	pop    ebp
c001c940:	c3                   	ret    
c001c941:	90                   	nop

c001c942 <ATAPI::write(unsigned long long, int, void*)>:
c001c942:	b8 03 00 00 00       	mov    eax,0x3
c001c947:	c3                   	ret    

c001c948 <ATAPI::close(int, int, void*)>:
c001c948:	83 ec 0c             	sub    esp,0xc
c001c94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c955:	85 c0                	test   eax,eax
c001c957:	74 0c                	je     c001c965 <ATAPI::close(int, int, void*)+0x1d>
c001c959:	83 ec 0c             	sub    esp,0xc
c001c95c:	8b 10                	mov    edx,DWORD PTR [eax]
c001c95e:	50                   	push   eax
c001c95f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c962:	83 c4 10             	add    esp,0x10
c001c965:	31 c0                	xor    eax,eax
c001c967:	83 c4 0c             	add    esp,0xc
c001c96a:	c3                   	ret    
c001c96b:	90                   	nop

c001c96c <ATAPI::ATAPI()>:
c001c96c:	83 ec 0c             	sub    esp,0xc
c001c96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c973:	83 ec 04             	sub    esp,0x4
c001c976:	68 00 08 00 00       	push   0x800
c001c97b:	68 19 26 02 c0       	push   0xc0022619
c001c980:	50                   	push   eax
c001c981:	e8 e0 fa fe ff       	call   c000c466 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c986:	83 c4 10             	add    esp,0x10
c001c989:	ba 34 25 02 c0       	mov    edx,0xc0022534
c001c98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c992:	89 10                	mov    DWORD PTR [eax],edx
c001c994:	90                   	nop
c001c995:	83 c4 0c             	add    esp,0xc
c001c998:	c3                   	ret    
c001c999:	90                   	nop

c001c99a <ATAPI::readyForCommand()>:
c001c99a:	56                   	push   esi
c001c99b:	53                   	push   ebx
c001c99c:	53                   	push   ebx
c001c99d:	31 db                	xor    ebx,ebx
c001c99f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9a3:	51                   	push   ecx
c001c9a4:	6a 0c                	push   0xc
c001c9a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c9ad:	50                   	push   eax
c001c9ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c9b4:	e8 a3 e8 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001c9b9:	83 c4 10             	add    esp,0x10
c001c9bc:	a8 88                	test   al,0x88
c001c9be:	74 25                	je     c001c9e5 <ATAPI::readyForCommand()+0x4b>
c001c9c0:	43                   	inc    ebx
c001c9c1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c9c7:	7e da                	jle    c001c9a3 <ATAPI::readyForCommand()+0x9>
c001c9c9:	83 ec 0c             	sub    esp,0xc
c001c9cc:	68 5e 01 00 00       	push   0x15e
c001c9d1:	e8 2a 8e ff ff       	call   c0015800 <milliTenthSleep(unsigned int)>
c001c9d6:	83 c4 10             	add    esp,0x10
c001c9d9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c9df:	75 c2                	jne    c001c9a3 <ATAPI::readyForCommand()+0x9>
c001c9e1:	31 c0                	xor    eax,eax
c001c9e3:	eb 02                	jmp    c001c9e7 <ATAPI::readyForCommand()+0x4d>
c001c9e5:	b0 01                	mov    al,0x1
c001c9e7:	5a                   	pop    edx
c001c9e8:	5b                   	pop    ebx
c001c9e9:	5e                   	pop    esi
c001c9ea:	c3                   	ret    
c001c9eb:	90                   	nop

c001c9ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c9ec:	55                   	push   ebp
c001c9ed:	57                   	push   edi
c001c9ee:	56                   	push   esi
c001c9ef:	53                   	push   ebx
c001c9f0:	83 ec 20             	sub    esp,0x20
c001c9f3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c9f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c9fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c9ff:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ca03:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ca07:	6a 01                	push   0x1
c001ca09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca10:	50                   	push   eax
c001ca11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca17:	e8 88 e9 ff ff       	call   c001b3a4 <IDE::enableIRQs(unsigned char, bool)>
c001ca1c:	5e                   	pop    esi
c001ca1d:	58                   	pop    eax
c001ca1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca25:	50                   	push   eax
c001ca26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca2c:	e8 45 e7 ff ff       	call   c001b176 <IDE::prepareInterrupt(unsigned char)>
c001ca31:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca34:	e8 61 ff ff ff       	call   c001c99a <ATAPI::readyForCommand()>
c001ca39:	83 c4 10             	add    esp,0x10
c001ca3c:	84 c0                	test   al,al
c001ca3e:	75 0a                	jne    c001ca4a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ca40:	bb 01 00 00 00       	mov    ebx,0x1
c001ca45:	e9 60 02 00 00       	jmp    c001ccaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001ca4a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001ca50:	c1 e0 04             	shl    eax,0x4
c001ca53:	0f b6 c0             	movzx  eax,al
c001ca56:	50                   	push   eax
c001ca57:	6a 06                	push   0x6
c001ca59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca60:	50                   	push   eax
c001ca61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca67:	e8 30 e7 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6c:	6a 00                	push   0x0
c001ca6e:	6a 01                	push   0x1
c001ca70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca77:	50                   	push   eax
c001ca78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca7e:	e8 19 e7 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca83:	83 c4 20             	add    esp,0x20
c001ca86:	0f b6 c3             	movzx  eax,bl
c001ca89:	0f b6 df             	movzx  ebx,bh
c001ca8c:	50                   	push   eax
c001ca8d:	6a 04                	push   0x4
c001ca8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca96:	50                   	push   eax
c001ca97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca9d:	e8 fa e6 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa2:	53                   	push   ebx
c001caa3:	6a 05                	push   0x5
c001caa5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caac:	50                   	push   eax
c001caad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cab3:	e8 e4 e6 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cab8:	83 c4 20             	add    esp,0x20
c001cabb:	68 a0 00 00 00       	push   0xa0
c001cac0:	6a 07                	push   0x7
c001cac2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cac9:	50                   	push   eax
c001caca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cad0:	e8 c7 e6 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cad5:	83 c4 0c             	add    esp,0xc
c001cad8:	6a 01                	push   0x1
c001cada:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cae1:	50                   	push   eax
c001cae2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cae8:	e8 97 f1 ff ff       	call   c001bc84 <IDE::polling(unsigned char, unsigned int)>
c001caed:	83 c4 10             	add    esp,0x10
c001caf0:	0f b6 d8             	movzx  ebx,al
c001caf3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001caf9:	85 db                	test   ebx,ebx
c001cafb:	74 20                	je     c001cb1d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cafd:	53                   	push   ebx
c001cafe:	0f b6 c0             	movzx  eax,al
c001cb01:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001cb08:	52                   	push   edx
c001cb09:	50                   	push   eax
c001cb0a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb10:	e8 b5 f0 ff ff       	call   c001bbca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb15:	83 c4 10             	add    esp,0x10
c001cb18:	e9 8d 01 00 00       	jmp    c001ccaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001cb1d:	0f b6 c0             	movzx  eax,al
c001cb20:	53                   	push   ebx
c001cb21:	53                   	push   ebx
c001cb22:	50                   	push   eax
c001cb23:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb29:	e8 5c e6 ff ff       	call   c001b18a <IDE::getBase(unsigned char)>
c001cb2e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cb32:	b9 06 00 00 00       	mov    ecx,0x6
c001cb37:	89 c2                	mov    edx,eax
c001cb39:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cb3c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cb40:	83 c4 10             	add    esp,0x10
c001cb43:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001cb48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb4c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cb52:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cb59:	85 db                	test   ebx,ebx
c001cb5b:	0f 84 ec 00 00 00    	je     c001cc4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001cb61:	51                   	push   ecx
c001cb62:	51                   	push   ecx
c001cb63:	52                   	push   edx
c001cb64:	50                   	push   eax
c001cb65:	e8 a0 e7 ff ff       	call   c001b30a <IDE::waitInterrupt(unsigned char)>
c001cb6a:	83 c4 10             	add    esp,0x10
c001cb6d:	84 c0                	test   al,al
c001cb6f:	0f 84 cb fe ff ff    	je     c001ca40 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cb75:	56                   	push   esi
c001cb76:	56                   	push   esi
c001cb77:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb7e:	50                   	push   eax
c001cb7f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb85:	e8 ec e5 ff ff       	call   c001b176 <IDE::prepareInterrupt(unsigned char)>
c001cb8a:	83 c4 0c             	add    esp,0xc
c001cb8d:	6a 04                	push   0x4
c001cb8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb96:	50                   	push   eax
c001cb97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb9d:	e8 ba e6 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001cba2:	83 c4 0c             	add    esp,0xc
c001cba5:	89 c6                	mov    esi,eax
c001cba7:	6a 05                	push   0x5
c001cba9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbb0:	50                   	push   eax
c001cbb1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbb7:	e8 a0 e6 ff ff       	call   c001b25c <IDE::read(unsigned char, unsigned char)>
c001cbbc:	89 f1                	mov    ecx,esi
c001cbbe:	0f b6 c0             	movzx  eax,al
c001cbc1:	0f b6 f1             	movzx  esi,cl
c001cbc4:	c1 e0 08             	shl    eax,0x8
c001cbc7:	09 c6                	or     esi,eax
c001cbc9:	d1 fe                	sar    esi,1
c001cbcb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cbcf:	83 c4 10             	add    esp,0x10
c001cbd2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001cbd7:	74 41                	je     c001cc1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001cbd9:	31 c9                	xor    ecx,ecx
c001cbdb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cbe1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cbe8:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cbec:	75 0a                	jne    c001cbf8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001cbee:	01 c9                	add    ecx,ecx
c001cbf0:	01 cd                	add    ebp,ecx
c001cbf2:	4b                   	dec    ebx
c001cbf3:	e9 54 ff ff ff       	jmp    c001cb4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001cbf8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cbfd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cc01:	51                   	push   ecx
c001cc02:	51                   	push   ecx
c001cc03:	52                   	push   edx
c001cc04:	50                   	push   eax
c001cc05:	e8 80 e5 ff ff       	call   c001b18a <IDE::getBase(unsigned char)>
c001cc0a:	89 c2                	mov    edx,eax
c001cc0c:	89 f0                	mov    eax,esi
c001cc0e:	66 ef                	out    dx,ax
c001cc10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc14:	83 c4 10             	add    esp,0x10
c001cc17:	41                   	inc    ecx
c001cc18:	eb c1                	jmp    c001cbdb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001cc1a:	31 f6                	xor    esi,esi
c001cc1c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cc22:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cc29:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cc2d:	75 06                	jne    c001cc35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001cc2f:	01 f6                	add    esi,esi
c001cc31:	01 f5                	add    ebp,esi
c001cc33:	eb bd                	jmp    c001cbf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001cc35:	51                   	push   ecx
c001cc36:	51                   	push   ecx
c001cc37:	52                   	push   edx
c001cc38:	50                   	push   eax
c001cc39:	e8 4c e5 ff ff       	call   c001b18a <IDE::getBase(unsigned char)>
c001cc3e:	89 c2                	mov    edx,eax
c001cc40:	66 ed                	in     ax,dx
c001cc42:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cc47:	83 c4 10             	add    esp,0x10
c001cc4a:	46                   	inc    esi
c001cc4b:	eb cf                	jmp    c001cc1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001cc4d:	51                   	push   ecx
c001cc4e:	51                   	push   ecx
c001cc4f:	52                   	push   edx
c001cc50:	50                   	push   eax
c001cc51:	e8 b4 e6 ff ff       	call   c001b30a <IDE::waitInterrupt(unsigned char)>
c001cc56:	83 c4 10             	add    esp,0x10
c001cc59:	84 c0                	test   al,al
c001cc5b:	0f 84 df fd ff ff    	je     c001ca40 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cc61:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cc66:	52                   	push   edx
c001cc67:	52                   	push   edx
c001cc68:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc6f:	50                   	push   eax
c001cc70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc76:	e8 fb e4 ff ff       	call   c001b176 <IDE::prepareInterrupt(unsigned char)>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	50                   	push   eax
c001cc7f:	50                   	push   eax
c001cc80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc87:	50                   	push   eax
c001cc88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc8e:	e8 f7 e4 ff ff       	call   c001b18a <IDE::getBase(unsigned char)>
c001cc93:	8d 50 07             	lea    edx,[eax+0x7]
c001cc96:	ec                   	in     al,dx
c001cc97:	83 c4 10             	add    esp,0x10
c001cc9a:	a8 88                	test   al,0x88
c001cc9c:	74 0a                	je     c001cca8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001cc9e:	4b                   	dec    ebx
c001cc9f:	75 dd                	jne    c001cc7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001cca1:	bb 02 00 00 00       	mov    ebx,0x2
c001cca6:	eb 02                	jmp    c001ccaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001cca8:	31 db                	xor    ebx,ebx
c001ccaa:	83 c4 1c             	add    esp,0x1c
c001ccad:	89 d8                	mov    eax,ebx
c001ccaf:	5b                   	pop    ebx
c001ccb0:	5e                   	pop    esi
c001ccb1:	5f                   	pop    edi
c001ccb2:	5d                   	pop    ebp
c001ccb3:	c3                   	ret    

c001ccb4 <ATAPI::diskRemoved()>:
c001ccb4:	53                   	push   ebx
c001ccb5:	83 ec 14             	sub    esp,0x14
c001ccb8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ccbc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ccc3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ccc9:	e8 34 07 ff ff       	call   c000d402 <LogicalDisk::unmount()>
c001ccce:	58                   	pop    eax
c001cccf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ccd5:	e8 0a 11 ff ff       	call   c000dde4 <VCache::writeWriteBuffer()>
c001ccda:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001cce0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cce4:	83 c4 18             	add    esp,0x18
c001cce7:	5b                   	pop    ebx
c001cce8:	e9 e7 10 ff ff       	jmp    c000ddd4 <VCache::invalidateReadBuffer()>
c001cced:	90                   	nop

c001ccee <ATAPI::eject()>:
c001ccee:	57                   	push   edi
c001ccef:	b9 03 00 00 00       	mov    ecx,0x3
c001ccf4:	53                   	push   ebx
c001ccf5:	83 ec 14             	sub    esp,0x14
c001ccf8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccfc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cd00:	fc                   	cld    
c001cd01:	31 c0                	xor    eax,eax
c001cd03:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cd05:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cd0a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cd0f:	50                   	push   eax
c001cd10:	50                   	push   eax
c001cd11:	6a 00                	push   0x0
c001cd13:	6a 00                	push   0x0
c001cd15:	6a 00                	push   0x0
c001cd17:	6a 02                	push   0x2
c001cd19:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd1d:	50                   	push   eax
c001cd1e:	53                   	push   ebx
c001cd1f:	e8 c8 fc ff ff       	call   c001c9ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd24:	83 c4 14             	add    esp,0x14
c001cd27:	53                   	push   ebx
c001cd28:	e8 87 ff ff ff       	call   c001ccb4 <ATAPI::diskRemoved()>
c001cd2d:	83 c4 24             	add    esp,0x24
c001cd30:	31 c0                	xor    eax,eax
c001cd32:	5b                   	pop    ebx
c001cd33:	5f                   	pop    edi
c001cd34:	c3                   	ret    
c001cd35:	90                   	nop

c001cd36 <ATAPI::diskInserted()>:
c001cd36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd3a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001cd41:	c3                   	ret    

c001cd42 <ATAPI::detectMedia()>:
c001cd42:	56                   	push   esi
c001cd43:	53                   	push   ebx
c001cd44:	83 ec 28             	sub    esp,0x28
c001cd47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd4b:	6a 0c                	push   0xc
c001cd4d:	6a 00                	push   0x0
c001cd4f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cd53:	56                   	push   esi
c001cd54:	e8 97 37 fe ff       	call   c00004f0 <memset>
c001cd59:	58                   	pop    eax
c001cd5a:	5a                   	pop    edx
c001cd5b:	6a 00                	push   0x0
c001cd5d:	6a 00                	push   0x0
c001cd5f:	6a 00                	push   0x0
c001cd61:	6a 00                	push   0x0
c001cd63:	56                   	push   esi
c001cd64:	53                   	push   ebx
c001cd65:	e8 82 fc ff ff       	call   c001c9ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd6a:	83 c4 1c             	add    esp,0x1c
c001cd6d:	6a 0c                	push   0xc
c001cd6f:	6a 00                	push   0x0
c001cd71:	56                   	push   esi
c001cd72:	e8 79 37 fe ff       	call   c00004f0 <memset>
c001cd77:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cd7c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cd81:	59                   	pop    ecx
c001cd82:	58                   	pop    eax
c001cd83:	6a 01                	push   0x1
c001cd85:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cd89:	50                   	push   eax
c001cd8a:	6a 00                	push   0x0
c001cd8c:	6a 12                	push   0x12
c001cd8e:	56                   	push   esi
c001cd8f:	53                   	push   ebx
c001cd90:	e8 57 fc ff ff       	call   c001c9ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd95:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cd99:	83 c4 20             	add    esp,0x20
c001cd9c:	83 e0 7f             	and    eax,0x7f
c001cd9f:	83 f8 70             	cmp    eax,0x70
c001cda2:	74 15                	je     c001cdb9 <ATAPI::detectMedia()+0x77>
c001cda4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdab:	75 0c                	jne    c001cdb9 <ATAPI::detectMedia()+0x77>
c001cdad:	83 ec 0c             	sub    esp,0xc
c001cdb0:	53                   	push   ebx
c001cdb1:	e8 80 ff ff ff       	call   c001cd36 <ATAPI::diskInserted()>
c001cdb6:	83 c4 10             	add    esp,0x10
c001cdb9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cdbd:	83 e0 0f             	and    eax,0xf
c001cdc0:	83 f8 02             	cmp    eax,0x2
c001cdc3:	75 1b                	jne    c001cde0 <ATAPI::detectMedia()+0x9e>
c001cdc5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cdca:	75 2d                	jne    c001cdf9 <ATAPI::detectMedia()+0xb7>
c001cdcc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdd3:	74 24                	je     c001cdf9 <ATAPI::detectMedia()+0xb7>
c001cdd5:	83 ec 0c             	sub    esp,0xc
c001cdd8:	53                   	push   ebx
c001cdd9:	e8 d6 fe ff ff       	call   c001ccb4 <ATAPI::diskRemoved()>
c001cdde:	eb 16                	jmp    c001cdf6 <ATAPI::detectMedia()+0xb4>
c001cde0:	85 c0                	test   eax,eax
c001cde2:	75 15                	jne    c001cdf9 <ATAPI::detectMedia()+0xb7>
c001cde4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdeb:	75 0c                	jne    c001cdf9 <ATAPI::detectMedia()+0xb7>
c001cded:	83 ec 0c             	sub    esp,0xc
c001cdf0:	53                   	push   ebx
c001cdf1:	e8 40 ff ff ff       	call   c001cd36 <ATAPI::diskInserted()>
c001cdf6:	83 c4 10             	add    esp,0x10
c001cdf9:	83 c4 24             	add    esp,0x24
c001cdfc:	5b                   	pop    ebx
c001cdfd:	5e                   	pop    esi
c001cdfe:	c3                   	ret    
c001cdff:	90                   	nop

c001ce00 <ATAPI::open(int, int, void*)>:
c001ce00:	56                   	push   esi
c001ce01:	53                   	push   ebx
c001ce02:	50                   	push   eax
c001ce03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ce0f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ce15:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ce1b:	c1 e0 06             	shl    eax,0x6
c001ce1e:	01 d0                	add    eax,edx
c001ce20:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ce27:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ce2d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ce34:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ce3e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ce44:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ce4b:	6a 04                	push   0x4
c001ce4d:	6a 0c                	push   0xc
c001ce4f:	51                   	push   ecx
c001ce50:	52                   	push   edx
c001ce51:	e8 46 e3 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce56:	90                   	nop
c001ce57:	90                   	nop
c001ce58:	6a 00                	push   0x0
c001ce5a:	6a 0c                	push   0xc
c001ce5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce63:	50                   	push   eax
c001ce64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce6a:	e8 2d e3 ff ff       	call   c001b19c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce6f:	83 c4 14             	add    esp,0x14
c001ce72:	68 78 01 00 00       	push   0x178
c001ce77:	e8 32 ac fe ff       	call   c0007aae <malloc>
c001ce7c:	83 c4 0c             	add    esp,0xc
c001ce7f:	89 c6                	mov    esi,eax
c001ce81:	6a 00                	push   0x0
c001ce83:	68 ff ff ff 7f       	push   0x7fffffff
c001ce88:	6a 00                	push   0x0
c001ce8a:	6a 00                	push   0x0
c001ce8c:	53                   	push   ebx
c001ce8d:	68 cb 26 02 c0       	push   0xc00226cb
c001ce92:	50                   	push   eax
c001ce93:	e8 a8 03 ff ff       	call   c000d240 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ce98:	83 c4 14             	add    esp,0x14
c001ce9b:	56                   	push   esi
c001ce9c:	e8 5f 04 ff ff       	call   c000d300 <LogicalDisk::assignDriveLetter()>
c001cea1:	5a                   	pop    edx
c001cea2:	0f be c0             	movsx  eax,al
c001cea5:	59                   	pop    ecx
c001cea6:	50                   	push   eax
c001cea7:	68 1c 25 02 c0       	push   0xc002251c
c001ceac:	e8 88 da fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001ceb1:	58                   	pop    eax
c001ceb2:	5a                   	pop    edx
c001ceb3:	56                   	push   esi
c001ceb4:	53                   	push   ebx
c001ceb5:	e8 e0 f1 fe ff       	call   c000c09a <Device::addChild(Device*)>
c001ceba:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001cec0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cec3:	e8 06 f6 fe ff       	call   c000c4ce <PhysicalDisk::startCache()>
c001cec8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cecf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ced2:	e8 6b fe ff ff       	call   c001cd42 <ATAPI::detectMedia()>
c001ced7:	83 c4 14             	add    esp,0x14
c001ceda:	31 c0                	xor    eax,eax
c001cedc:	5b                   	pop    ebx
c001cedd:	5e                   	pop    esi
c001cede:	c3                   	ret    
c001cedf:	90                   	nop

c001cee0 <ATAPI::read(unsigned long long, int, void*)>:
c001cee0:	55                   	push   ebp
c001cee1:	57                   	push   edi
c001cee2:	56                   	push   esi
c001cee3:	53                   	push   ebx
c001cee4:	83 ec 1c             	sub    esp,0x1c
c001cee7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ceeb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ceef:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cef3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cefa:	74 3c                	je     c001cf38 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001cefc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cf00:	b9 03 00 00 00       	mov    ecx,0x3
c001cf05:	fc                   	cld    
c001cf06:	31 c0                	xor    eax,eax
c001cf08:	0f ce                	bswap  esi
c001cf0a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cf0c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cf11:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001cf15:	89 e8                	mov    eax,ebp
c001cf17:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cf1b:	50                   	push   eax
c001cf1c:	50                   	push   eax
c001cf1d:	55                   	push   ebp
c001cf1e:	c1 e5 0b             	shl    ebp,0xb
c001cf21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf25:	6a 00                	push   0x0
c001cf27:	55                   	push   ebp
c001cf28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cf2c:	50                   	push   eax
c001cf2d:	53                   	push   ebx
c001cf2e:	e8 b9 fa ff ff       	call   c001c9ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cf33:	83 c4 20             	add    esp,0x20
c001cf36:	eb 1a                	jmp    c001cf52 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001cf38:	83 ec 0c             	sub    esp,0xc
c001cf3b:	53                   	push   ebx
c001cf3c:	e8 01 fe ff ff       	call   c001cd42 <ATAPI::detectMedia()>
c001cf41:	83 c4 10             	add    esp,0x10
c001cf44:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cf4b:	75 af                	jne    c001cefc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cf4d:	b8 02 00 00 00       	mov    eax,0x2
c001cf52:	83 c4 1c             	add    esp,0x1c
c001cf55:	5b                   	pop    ebx
c001cf56:	5e                   	pop    esi
c001cf57:	5f                   	pop    edi
c001cf58:	5d                   	pop    ebp
c001cf59:	c3                   	ret    

c001cf5a <SATA::close(int, int, void*)>:
c001cf5a:	83 ec 0c             	sub    esp,0xc
c001cf5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf61:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf67:	85 c0                	test   eax,eax
c001cf69:	74 0c                	je     c001cf77 <SATA::close(int, int, void*)+0x1d>
c001cf6b:	83 ec 0c             	sub    esp,0xc
c001cf6e:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf70:	50                   	push   eax
c001cf71:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	31 c0                	xor    eax,eax
c001cf79:	83 c4 0c             	add    esp,0xc
c001cf7c:	c3                   	ret    
c001cf7d:	90                   	nop

c001cf7e <SATA::powerSaving(PowerSavingLevel)>:
c001cf7e:	c3                   	ret    
c001cf7f:	90                   	nop

c001cf80 <SATA::open(int, int, void*)>:
c001cf80:	56                   	push   esi
c001cf81:	53                   	push   ebx
c001cf82:	50                   	push   eax
c001cf83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf8b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cf95:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cf9b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cfa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfa9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cfb3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cfb9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cfc0:	e8 ed ad fe ff       	call   c0007db2 <Phys::allocatePage()>
c001cfc5:	89 c6                	mov    esi,eax
c001cfc7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cfcd:	81 c6 00 10 00 00    	add    esi,0x1000
c001cfd3:	e8 da ad fe ff       	call   c0007db2 <Phys::allocatePage()>
c001cfd8:	39 c6                	cmp    esi,eax
c001cfda:	74 10                	je     c001cfec <SATA::open(int, int, void*)+0x6c>
c001cfdc:	83 ec 0c             	sub    esp,0xc
c001cfdf:	68 64 25 02 c0       	push   0xc0022564
c001cfe4:	e8 28 3c ff ff       	call   c0010c11 <KePanic(char const*)>
c001cfe9:	83 c4 10             	add    esp,0x10
c001cfec:	83 ec 0c             	sub    esp,0xc
c001cfef:	6a 02                	push   0x2
c001cff1:	e8 0b c6 fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001cff6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cffc:	6a 03                	push   0x3
c001cffe:	50                   	push   eax
c001cfff:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d005:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d00b:	e8 04 cd fe ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d010:	83 c4 14             	add    esp,0x14
c001d013:	53                   	push   ebx
c001d014:	e8 b5 f4 fe ff       	call   c000c4ce <PhysicalDisk::startCache()>
c001d019:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d01c:	e8 f1 06 ff ff       	call   c000d712 <createPartitionsForDisk(PhysicalDisk*)>
c001d021:	83 c4 14             	add    esp,0x14
c001d024:	31 c0                	xor    eax,eax
c001d026:	5b                   	pop    ebx
c001d027:	5e                   	pop    esi
c001d028:	c3                   	ret    
c001d029:	90                   	nop

c001d02a <SATA::SATA()>:
c001d02a:	83 ec 0c             	sub    esp,0xc
c001d02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d031:	83 ec 04             	sub    esp,0x4
c001d034:	68 00 02 00 00       	push   0x200
c001d039:	68 78 25 02 c0       	push   0xc0022578
c001d03e:	50                   	push   eax
c001d03f:	e8 22 f4 fe ff       	call   c000c466 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d044:	83 c4 10             	add    esp,0x10
c001d047:	ba e8 25 02 c0       	mov    edx,0xc00225e8
c001d04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d050:	89 10                	mov    DWORD PTR [eax],edx
c001d052:	90                   	nop
c001d053:	83 c4 0c             	add    esp,0xc
c001d056:	c3                   	ret    
c001d057:	90                   	nop

c001d058 <SATA::access(unsigned long long, int, void*, bool)>:
c001d058:	55                   	push   ebp
c001d059:	57                   	push   edi
c001d05a:	56                   	push   esi
c001d05b:	53                   	push   ebx
c001d05c:	83 ec 2c             	sub    esp,0x2c
c001d05f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d063:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d067:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d06b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d06f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d073:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d078:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d07c:	7e 10                	jle    c001d08e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d07e:	83 ec 0c             	sub    esp,0xc
c001d081:	68 88 25 02 c0       	push   0xc0022588
c001d086:	e8 86 3b ff ff       	call   c0010c11 <KePanic(char const*)>
c001d08b:	83 c4 10             	add    esp,0x10
c001d08e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d094:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d09a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d0a4:	89 d0                	mov    eax,edx
c001d0a6:	c1 e0 07             	shl    eax,0x7
c001d0a9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d0ad:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d0b7:	51                   	push   ecx
c001d0b8:	8d 42 02             	lea    eax,[edx+0x2]
c001d0bb:	51                   	push   ecx
c001d0bc:	c1 e0 07             	shl    eax,0x7
c001d0bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d0c3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d0c7:	50                   	push   eax
c001d0c8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d0ce:	e8 91 ec ff ff       	call   c001bd64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d0d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0d7:	83 c4 10             	add    esp,0x10
c001d0da:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d0df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d0e3:	0f 84 57 01 00 00    	je     c001d240 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d0e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d0ed:	c1 e0 09             	shl    eax,0x9
c001d0f0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d0f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d0f9:	74 0e                	je     c001d109 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d0fb:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d101:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d105:	89 c1                	mov    ecx,eax
c001d107:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d109:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d10f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d113:	8d 42 02             	lea    eax,[edx+0x2]
c001d116:	c1 e0 07             	shl    eax,0x7
c001d119:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d11d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d11f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d125:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d12b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d12f:	c1 e1 05             	shl    ecx,0x5
c001d132:	01 c8                	add    eax,ecx
c001d134:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d138:	83 e1 01             	and    ecx,0x1
c001d13b:	89 ce                	mov    esi,ecx
c001d13d:	8a 08                	mov    cl,BYTE PTR [eax]
c001d13f:	c1 e6 06             	shl    esi,0x6
c001d142:	83 e1 bf             	and    ecx,0xffffffbf
c001d145:	09 f1                	or     ecx,esi
c001d147:	88 08                	mov    BYTE PTR [eax],cl
c001d149:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d14b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d151:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d157:	89 08                	mov    DWORD PTR [eax],ecx
c001d159:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d15f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d165:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d16b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d16e:	50                   	push   eax
c001d16f:	68 90 00 00 00       	push   0x90
c001d174:	6a 00                	push   0x0
c001d176:	56                   	push   esi
c001d177:	e8 74 33 fe ff       	call   c00004f0 <memset>
c001d17c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d182:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d188:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d18c:	83 c4 10             	add    esp,0x10
c001d18f:	48                   	dec    eax
c001d190:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d195:	89 c1                	mov    ecx,eax
c001d197:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d19d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d1a2:	09 c8                	or     eax,ecx
c001d1a4:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d1aa:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d1b0:	83 c8 80             	or     eax,0xffffff80
c001d1b3:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d1b9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d1bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1c0:	25 00 7f 00 00       	and    eax,0x7f00
c001d1c5:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d1ca:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d1cf:	66 89 06             	mov    WORD PTR [esi],ax
c001d1d2:	b0 35                	mov    al,0x35
c001d1d4:	75 02                	jne    c001d1d8 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d1d6:	b0 25                	mov    al,0x25
c001d1d8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d1db:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d1df:	89 e8                	mov    eax,ebp
c001d1e1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d1e5:	c1 e8 10             	shr    eax,0x10
c001d1e8:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d1eb:	89 e8                	mov    eax,ebp
c001d1ed:	c1 e8 18             	shr    eax,0x18
c001d1f0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d1f3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d1f7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d1fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1fe:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d201:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d205:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d209:	89 d6                	mov    esi,edx
c001d20b:	31 c0                	xor    eax,eax
c001d20d:	c1 e6 07             	shl    esi,0x7
c001d210:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d214:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d21a:	80 e1 88             	and    cl,0x88
c001d21d:	74 0a                	je     c001d229 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d21f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d224:	74 0a                	je     c001d230 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d226:	40                   	inc    eax
c001d227:	eb eb                	jmp    c001d214 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d229:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d22e:	75 17                	jne    c001d247 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d230:	83 ec 0c             	sub    esp,0xc
c001d233:	68 c1 25 02 c0       	push   0xc00225c1
c001d238:	e8 fc d6 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d23d:	83 c4 10             	add    esp,0x10
c001d240:	b8 01 00 00 00       	mov    eax,0x1
c001d245:	eb 5d                	jmp    c001d2a4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d247:	b8 01 00 00 00       	mov    eax,0x1
c001d24c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d250:	c1 e2 07             	shl    edx,0x7
c001d253:	d3 e0                	shl    eax,cl
c001d255:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d259:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d25f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d265:	85 c8                	test   eax,ecx
c001d267:	74 16                	je     c001d27f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d269:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d26f:	0f ba e1 1e          	bt     ecx,0x1e
c001d273:	73 ea                	jae    c001d25f <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d275:	83 ec 0c             	sub    esp,0xc
c001d278:	68 cf 25 02 c0       	push   0xc00225cf
c001d27d:	eb b9                	jmp    c001d238 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d27f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d285:	0f ba e0 1e          	bt     eax,0x1e
c001d289:	72 b5                	jb     c001d240 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d28b:	31 c0                	xor    eax,eax
c001d28d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d292:	75 10                	jne    c001d2a4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d294:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d29a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d29e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d2a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d2a4:	83 c4 2c             	add    esp,0x2c
c001d2a7:	5b                   	pop    ebx
c001d2a8:	5e                   	pop    esi
c001d2a9:	5f                   	pop    edi
c001d2aa:	5d                   	pop    ebp
c001d2ab:	c3                   	ret    

c001d2ac <SATA::read(unsigned long long, int, void*)>:
c001d2ac:	55                   	push   ebp
c001d2ad:	57                   	push   edi
c001d2ae:	56                   	push   esi
c001d2af:	be 04 00 00 00       	mov    esi,0x4
c001d2b4:	53                   	push   ebx
c001d2b5:	83 ec 0c             	sub    esp,0xc
c001d2b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d2bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2c0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d2c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2c7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2cb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d2d1:	0f 87 1a 02 00 00    	ja     c001d4f1 <SATA::read(unsigned long long, int, void*)+0x245>
c001d2d7:	be 06 00 00 00       	mov    esi,0x6
c001d2dc:	85 c9                	test   ecx,ecx
c001d2de:	0f 84 0d 02 00 00    	je     c001d4f1 <SATA::read(unsigned long long, int, void*)+0x245>
c001d2e4:	56                   	push   esi
c001d2e5:	56                   	push   esi
c001d2e6:	6a 00                	push   0x0
c001d2e8:	51                   	push   ecx
c001d2e9:	53                   	push   ebx
c001d2ea:	52                   	push   edx
c001d2eb:	50                   	push   eax
c001d2ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2f0:	e8 63 fd ff ff       	call   c001d058 <SATA::access(unsigned long long, int, void*, bool)>
c001d2f5:	83 c4 20             	add    esp,0x20
c001d2f8:	89 c6                	mov    esi,eax
c001d2fa:	85 c0                	test   eax,eax
c001d2fc:	0f 85 ea 01 00 00    	jne    c001d4ec <SATA::read(unsigned long long, int, void*)+0x240>
c001d302:	01 1d 54 9b 02 c0    	add    DWORD PTR ds:0xc0029b54,ebx
c001d308:	bb 0a 00 00 00       	mov    ebx,0xa
c001d30d:	50                   	push   eax
c001d30e:	50                   	push   eax
c001d30f:	6a 0f                	push   0xf
c001d311:	6a 00                	push   0x0
c001d313:	e8 75 f2 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d318:	5a                   	pop    edx
c001d319:	0f b6 c0             	movzx  eax,al
c001d31c:	59                   	pop    ecx
c001d31d:	b9 10 27 00 00       	mov    ecx,0x2710
c001d322:	50                   	push   eax
c001d323:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d328:	99                   	cdq    
c001d329:	f7 f9                	idiv   ecx
c001d32b:	99                   	cdq    
c001d32c:	f7 fb                	idiv   ebx
c001d32e:	8d 42 30             	lea    eax,[edx+0x30]
c001d331:	0f b6 c0             	movzx  eax,al
c001d334:	50                   	push   eax
c001d335:	e8 42 f2 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d33a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d340:	5f                   	pop    edi
c001d341:	5d                   	pop    ebp
c001d342:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d347:	6a 0f                	push   0xf
c001d349:	6a 00                	push   0x0
c001d34b:	e8 3d f2 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d350:	5a                   	pop    edx
c001d351:	0f b6 c0             	movzx  eax,al
c001d354:	59                   	pop    ecx
c001d355:	50                   	push   eax
c001d356:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d35b:	99                   	cdq    
c001d35c:	f7 fd                	idiv   ebp
c001d35e:	99                   	cdq    
c001d35f:	f7 fb                	idiv   ebx
c001d361:	8d 42 30             	lea    eax,[edx+0x30]
c001d364:	0f b6 c0             	movzx  eax,al
c001d367:	50                   	push   eax
c001d368:	e8 0f f2 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d36d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d373:	5f                   	pop    edi
c001d374:	bf 64 00 00 00       	mov    edi,0x64
c001d379:	58                   	pop    eax
c001d37a:	6a 0f                	push   0xf
c001d37c:	6a 00                	push   0x0
c001d37e:	e8 0a f2 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d383:	5a                   	pop    edx
c001d384:	0f b6 c0             	movzx  eax,al
c001d387:	59                   	pop    ecx
c001d388:	50                   	push   eax
c001d389:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d38e:	99                   	cdq    
c001d38f:	f7 ff                	idiv   edi
c001d391:	99                   	cdq    
c001d392:	f7 fb                	idiv   ebx
c001d394:	8d 42 30             	lea    eax,[edx+0x30]
c001d397:	0f b6 c0             	movzx  eax,al
c001d39a:	50                   	push   eax
c001d39b:	e8 dc f1 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d3a0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d3a6:	58                   	pop    eax
c001d3a7:	5a                   	pop    edx
c001d3a8:	6a 0f                	push   0xf
c001d3aa:	6a 00                	push   0x0
c001d3ac:	e8 dc f1 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d3b1:	59                   	pop    ecx
c001d3b2:	0f b6 c0             	movzx  eax,al
c001d3b5:	5a                   	pop    edx
c001d3b6:	50                   	push   eax
c001d3b7:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d3bc:	99                   	cdq    
c001d3bd:	f7 fb                	idiv   ebx
c001d3bf:	99                   	cdq    
c001d3c0:	f7 fb                	idiv   ebx
c001d3c2:	8d 42 30             	lea    eax,[edx+0x30]
c001d3c5:	0f b6 c0             	movzx  eax,al
c001d3c8:	50                   	push   eax
c001d3c9:	e8 ae f1 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d3ce:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d3d4:	59                   	pop    ecx
c001d3d5:	58                   	pop    eax
c001d3d6:	6a 0f                	push   0xf
c001d3d8:	6a 00                	push   0x0
c001d3da:	e8 ae f1 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d3df:	5a                   	pop    edx
c001d3e0:	0f b6 c0             	movzx  eax,al
c001d3e3:	59                   	pop    ecx
c001d3e4:	50                   	push   eax
c001d3e5:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d3ea:	99                   	cdq    
c001d3eb:	f7 fb                	idiv   ebx
c001d3ed:	8d 42 30             	lea    eax,[edx+0x30]
c001d3f0:	0f b6 c0             	movzx  eax,al
c001d3f3:	50                   	push   eax
c001d3f4:	e8 83 f1 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d3f9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d3ff:	58                   	pop    eax
c001d400:	5a                   	pop    edx
c001d401:	6a 0f                	push   0xf
c001d403:	6a 00                	push   0x0
c001d405:	e8 83 f1 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d40a:	59                   	pop    ecx
c001d40b:	0f b6 c0             	movzx  eax,al
c001d40e:	5a                   	pop    edx
c001d40f:	b9 10 27 00 00       	mov    ecx,0x2710
c001d414:	50                   	push   eax
c001d415:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d41a:	99                   	cdq    
c001d41b:	f7 f9                	idiv   ecx
c001d41d:	99                   	cdq    
c001d41e:	f7 fb                	idiv   ebx
c001d420:	8d 42 30             	lea    eax,[edx+0x30]
c001d423:	0f b6 c0             	movzx  eax,al
c001d426:	50                   	push   eax
c001d427:	e8 50 f1 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d42c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d432:	59                   	pop    ecx
c001d433:	58                   	pop    eax
c001d434:	6a 0f                	push   0xf
c001d436:	6a 00                	push   0x0
c001d438:	e8 50 f1 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d43d:	5a                   	pop    edx
c001d43e:	0f b6 c0             	movzx  eax,al
c001d441:	59                   	pop    ecx
c001d442:	50                   	push   eax
c001d443:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d448:	99                   	cdq    
c001d449:	f7 fd                	idiv   ebp
c001d44b:	99                   	cdq    
c001d44c:	f7 fb                	idiv   ebx
c001d44e:	8d 42 30             	lea    eax,[edx+0x30]
c001d451:	0f b6 c0             	movzx  eax,al
c001d454:	50                   	push   eax
c001d455:	e8 22 f1 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d45a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d460:	5d                   	pop    ebp
c001d461:	58                   	pop    eax
c001d462:	6a 0f                	push   0xf
c001d464:	6a 00                	push   0x0
c001d466:	e8 22 f1 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d46b:	5a                   	pop    edx
c001d46c:	0f b6 c0             	movzx  eax,al
c001d46f:	59                   	pop    ecx
c001d470:	50                   	push   eax
c001d471:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d476:	99                   	cdq    
c001d477:	f7 ff                	idiv   edi
c001d479:	99                   	cdq    
c001d47a:	f7 fb                	idiv   ebx
c001d47c:	8d 42 30             	lea    eax,[edx+0x30]
c001d47f:	0f b6 c0             	movzx  eax,al
c001d482:	50                   	push   eax
c001d483:	e8 f4 f0 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d488:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d48e:	5f                   	pop    edi
c001d48f:	5d                   	pop    ebp
c001d490:	6a 0f                	push   0xf
c001d492:	6a 00                	push   0x0
c001d494:	e8 f4 f0 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d499:	5a                   	pop    edx
c001d49a:	0f b6 c0             	movzx  eax,al
c001d49d:	59                   	pop    ecx
c001d49e:	50                   	push   eax
c001d49f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d4a4:	99                   	cdq    
c001d4a5:	f7 fb                	idiv   ebx
c001d4a7:	99                   	cdq    
c001d4a8:	f7 fb                	idiv   ebx
c001d4aa:	8d 42 30             	lea    eax,[edx+0x30]
c001d4ad:	0f b6 c0             	movzx  eax,al
c001d4b0:	50                   	push   eax
c001d4b1:	e8 c6 f0 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d4b6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4bc:	5f                   	pop    edi
c001d4bd:	5d                   	pop    ebp
c001d4be:	6a 0f                	push   0xf
c001d4c0:	6a 00                	push   0x0
c001d4c2:	e8 c6 f0 ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d4c7:	5a                   	pop    edx
c001d4c8:	0f b6 c0             	movzx  eax,al
c001d4cb:	59                   	pop    ecx
c001d4cc:	50                   	push   eax
c001d4cd:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d4d2:	99                   	cdq    
c001d4d3:	f7 fb                	idiv   ebx
c001d4d5:	83 c2 30             	add    edx,0x30
c001d4d8:	0f b6 d2             	movzx  edx,dl
c001d4db:	52                   	push   edx
c001d4dc:	e8 9b f0 ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d4e1:	83 c4 10             	add    esp,0x10
c001d4e4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4ea:	eb 05                	jmp    c001d4f1 <SATA::read(unsigned long long, int, void*)+0x245>
c001d4ec:	be 01 00 00 00       	mov    esi,0x1
c001d4f1:	83 c4 0c             	add    esp,0xc
c001d4f4:	89 f0                	mov    eax,esi
c001d4f6:	5b                   	pop    ebx
c001d4f7:	5e                   	pop    esi
c001d4f8:	5f                   	pop    edi
c001d4f9:	5d                   	pop    ebp
c001d4fa:	c3                   	ret    
c001d4fb:	90                   	nop

c001d4fc <SATA::write(unsigned long long, int, void*)>:
c001d4fc:	55                   	push   ebp
c001d4fd:	b8 04 00 00 00       	mov    eax,0x4
c001d502:	57                   	push   edi
c001d503:	56                   	push   esi
c001d504:	53                   	push   ebx
c001d505:	83 ec 1c             	sub    esp,0x1c
c001d508:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d50c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d510:	8d 75 ff             	lea    esi,[ebp-0x1]
c001d513:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d517:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d51b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d521:	0f 87 32 02 00 00    	ja     c001d759 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d527:	b8 06 00 00 00       	mov    eax,0x6
c001d52c:	85 ff                	test   edi,edi
c001d52e:	0f 84 25 02 00 00    	je     c001d759 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d534:	89 ee                	mov    esi,ebp
c001d536:	c1 e6 09             	shl    esi,0x9
c001d539:	01 fe                	add    esi,edi
c001d53b:	89 c8                	mov    eax,ecx
c001d53d:	89 da                	mov    edx,ebx
c001d53f:	83 c0 01             	add    eax,0x1
c001d542:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d546:	83 d2 00             	adc    edx,0x0
c001d549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d54d:	50                   	push   eax
c001d54e:	50                   	push   eax
c001d54f:	6a 01                	push   0x1
c001d551:	57                   	push   edi
c001d552:	81 c7 00 02 00 00    	add    edi,0x200
c001d558:	6a 01                	push   0x1
c001d55a:	53                   	push   ebx
c001d55b:	51                   	push   ecx
c001d55c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d560:	e8 f3 fa ff ff       	call   c001d058 <SATA::access(unsigned long long, int, void*, bool)>
c001d565:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d569:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d56d:	83 c4 20             	add    esp,0x20
c001d570:	39 f7                	cmp    edi,esi
c001d572:	75 c7                	jne    c001d53b <SATA::write(unsigned long long, int, void*)+0x3f>
c001d574:	bb 0a 00 00 00       	mov    ebx,0xa
c001d579:	01 2d 50 9b 02 c0    	add    DWORD PTR ds:0xc0029b50,ebp
c001d57f:	bd 10 27 00 00       	mov    ebp,0x2710
c001d584:	50                   	push   eax
c001d585:	50                   	push   eax
c001d586:	6a 0f                	push   0xf
c001d588:	6a 00                	push   0x0
c001d58a:	e8 fe ef ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d58f:	5a                   	pop    edx
c001d590:	0f b6 c0             	movzx  eax,al
c001d593:	59                   	pop    ecx
c001d594:	50                   	push   eax
c001d595:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d59a:	99                   	cdq    
c001d59b:	f7 fd                	idiv   ebp
c001d59d:	99                   	cdq    
c001d59e:	f7 fb                	idiv   ebx
c001d5a0:	8d 42 30             	lea    eax,[edx+0x30]
c001d5a3:	0f b6 c0             	movzx  eax,al
c001d5a6:	50                   	push   eax
c001d5a7:	e8 d0 ef ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d5ac:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d5b2:	5e                   	pop    esi
c001d5b3:	5f                   	pop    edi
c001d5b4:	bf e8 03 00 00       	mov    edi,0x3e8
c001d5b9:	6a 0f                	push   0xf
c001d5bb:	6a 00                	push   0x0
c001d5bd:	e8 cb ef ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d5c2:	5a                   	pop    edx
c001d5c3:	0f b6 c0             	movzx  eax,al
c001d5c6:	59                   	pop    ecx
c001d5c7:	50                   	push   eax
c001d5c8:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d5cd:	99                   	cdq    
c001d5ce:	f7 ff                	idiv   edi
c001d5d0:	99                   	cdq    
c001d5d1:	f7 fb                	idiv   ebx
c001d5d3:	8d 42 30             	lea    eax,[edx+0x30]
c001d5d6:	0f b6 c0             	movzx  eax,al
c001d5d9:	50                   	push   eax
c001d5da:	e8 9d ef ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d5df:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d5e5:	5e                   	pop    esi
c001d5e6:	be 64 00 00 00       	mov    esi,0x64
c001d5eb:	58                   	pop    eax
c001d5ec:	6a 0f                	push   0xf
c001d5ee:	6a 00                	push   0x0
c001d5f0:	e8 98 ef ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d5f5:	5a                   	pop    edx
c001d5f6:	0f b6 c0             	movzx  eax,al
c001d5f9:	59                   	pop    ecx
c001d5fa:	50                   	push   eax
c001d5fb:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d600:	99                   	cdq    
c001d601:	f7 fe                	idiv   esi
c001d603:	99                   	cdq    
c001d604:	f7 fb                	idiv   ebx
c001d606:	8d 42 30             	lea    eax,[edx+0x30]
c001d609:	0f b6 c0             	movzx  eax,al
c001d60c:	50                   	push   eax
c001d60d:	e8 6a ef ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d612:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d618:	58                   	pop    eax
c001d619:	5a                   	pop    edx
c001d61a:	6a 0f                	push   0xf
c001d61c:	6a 00                	push   0x0
c001d61e:	e8 6a ef ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d623:	59                   	pop    ecx
c001d624:	0f b6 c0             	movzx  eax,al
c001d627:	5a                   	pop    edx
c001d628:	50                   	push   eax
c001d629:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d62e:	99                   	cdq    
c001d62f:	f7 fb                	idiv   ebx
c001d631:	99                   	cdq    
c001d632:	f7 fb                	idiv   ebx
c001d634:	8d 42 30             	lea    eax,[edx+0x30]
c001d637:	0f b6 c0             	movzx  eax,al
c001d63a:	50                   	push   eax
c001d63b:	e8 3c ef ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d640:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d646:	59                   	pop    ecx
c001d647:	58                   	pop    eax
c001d648:	6a 0f                	push   0xf
c001d64a:	6a 00                	push   0x0
c001d64c:	e8 3c ef ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d651:	5a                   	pop    edx
c001d652:	0f b6 c0             	movzx  eax,al
c001d655:	59                   	pop    ecx
c001d656:	50                   	push   eax
c001d657:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d65c:	99                   	cdq    
c001d65d:	f7 fb                	idiv   ebx
c001d65f:	83 c2 30             	add    edx,0x30
c001d662:	0f b6 d2             	movzx  edx,dl
c001d665:	52                   	push   edx
c001d666:	e8 11 ef ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d66b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d671:	58                   	pop    eax
c001d672:	5a                   	pop    edx
c001d673:	6a 0f                	push   0xf
c001d675:	6a 00                	push   0x0
c001d677:	e8 11 ef ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d67c:	59                   	pop    ecx
c001d67d:	0f b6 c0             	movzx  eax,al
c001d680:	5a                   	pop    edx
c001d681:	50                   	push   eax
c001d682:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d687:	99                   	cdq    
c001d688:	f7 fd                	idiv   ebp
c001d68a:	99                   	cdq    
c001d68b:	f7 fb                	idiv   ebx
c001d68d:	8d 42 30             	lea    eax,[edx+0x30]
c001d690:	0f b6 c0             	movzx  eax,al
c001d693:	50                   	push   eax
c001d694:	e8 e3 ee ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d699:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d69f:	59                   	pop    ecx
c001d6a0:	5d                   	pop    ebp
c001d6a1:	6a 0f                	push   0xf
c001d6a3:	6a 00                	push   0x0
c001d6a5:	e8 e3 ee ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d6aa:	5a                   	pop    edx
c001d6ab:	0f b6 c0             	movzx  eax,al
c001d6ae:	59                   	pop    ecx
c001d6af:	50                   	push   eax
c001d6b0:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d6b5:	99                   	cdq    
c001d6b6:	f7 ff                	idiv   edi
c001d6b8:	99                   	cdq    
c001d6b9:	f7 fb                	idiv   ebx
c001d6bb:	8d 42 30             	lea    eax,[edx+0x30]
c001d6be:	0f b6 c0             	movzx  eax,al
c001d6c1:	50                   	push   eax
c001d6c2:	e8 b5 ee ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d6c7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d6cd:	5f                   	pop    edi
c001d6ce:	5d                   	pop    ebp
c001d6cf:	6a 0f                	push   0xf
c001d6d1:	6a 00                	push   0x0
c001d6d3:	e8 b5 ee ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d6d8:	5a                   	pop    edx
c001d6d9:	0f b6 c0             	movzx  eax,al
c001d6dc:	59                   	pop    ecx
c001d6dd:	50                   	push   eax
c001d6de:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d6e3:	99                   	cdq    
c001d6e4:	f7 fe                	idiv   esi
c001d6e6:	99                   	cdq    
c001d6e7:	f7 fb                	idiv   ebx
c001d6e9:	8d 42 30             	lea    eax,[edx+0x30]
c001d6ec:	0f b6 c0             	movzx  eax,al
c001d6ef:	50                   	push   eax
c001d6f0:	e8 87 ee ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d6f5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d6fb:	5e                   	pop    esi
c001d6fc:	5f                   	pop    edi
c001d6fd:	6a 0f                	push   0xf
c001d6ff:	6a 00                	push   0x0
c001d701:	e8 87 ee ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d706:	5d                   	pop    ebp
c001d707:	0f b6 c0             	movzx  eax,al
c001d70a:	5a                   	pop    edx
c001d70b:	50                   	push   eax
c001d70c:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d711:	99                   	cdq    
c001d712:	f7 fb                	idiv   ebx
c001d714:	99                   	cdq    
c001d715:	f7 fb                	idiv   ebx
c001d717:	8d 42 30             	lea    eax,[edx+0x30]
c001d71a:	0f b6 c0             	movzx  eax,al
c001d71d:	50                   	push   eax
c001d71e:	e8 59 ee ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d723:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d729:	59                   	pop    ecx
c001d72a:	5e                   	pop    esi
c001d72b:	6a 0f                	push   0xf
c001d72d:	6a 00                	push   0x0
c001d72f:	e8 59 ee ff ff       	call   c001c58d <combineColours(unsigned char, unsigned char)>
c001d734:	5f                   	pop    edi
c001d735:	0f b6 c0             	movzx  eax,al
c001d738:	5d                   	pop    ebp
c001d739:	50                   	push   eax
c001d73a:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d73f:	99                   	cdq    
c001d740:	f7 fb                	idiv   ebx
c001d742:	83 c2 30             	add    edx,0x30
c001d745:	0f b6 d2             	movzx  edx,dl
c001d748:	52                   	push   edx
c001d749:	e8 2e ee ff ff       	call   c001c57c <combineCharAndColour(char, unsigned char)>
c001d74e:	83 c4 10             	add    esp,0x10
c001d751:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d757:	31 c0                	xor    eax,eax
c001d759:	83 c4 1c             	add    esp,0x1c
c001d75c:	5b                   	pop    ebx
c001d75d:	5e                   	pop    esi
c001d75e:	5f                   	pop    edi
c001d75f:	5d                   	pop    ebp
c001d760:	c3                   	ret    
c001d761:	90                   	nop

c001d762 <SATAPI::write(unsigned long long, int, void*)>:
c001d762:	b8 03 00 00 00       	mov    eax,0x3
c001d767:	c3                   	ret    

c001d768 <SATAPI::close(int, int, void*)>:
c001d768:	83 ec 0c             	sub    esp,0xc
c001d76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d76f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d775:	85 c0                	test   eax,eax
c001d777:	74 0c                	je     c001d785 <SATAPI::close(int, int, void*)+0x1d>
c001d779:	83 ec 0c             	sub    esp,0xc
c001d77c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d77e:	50                   	push   eax
c001d77f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d782:	83 c4 10             	add    esp,0x10
c001d785:	31 c0                	xor    eax,eax
c001d787:	83 c4 0c             	add    esp,0xc
c001d78a:	c3                   	ret    
c001d78b:	90                   	nop

c001d78c <SATAPI::SATAPI()>:
c001d78c:	83 ec 0c             	sub    esp,0xc
c001d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d793:	83 ec 04             	sub    esp,0x4
c001d796:	68 00 08 00 00       	push   0x800
c001d79b:	68 18 26 02 c0       	push   0xc0022618
c001d7a0:	50                   	push   eax
c001d7a1:	e8 c0 ec fe ff       	call   c000c466 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d7a6:	83 c4 10             	add    esp,0x10
c001d7a9:	ba 0c 27 02 c0       	mov    edx,0xc002270c
c001d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b2:	89 10                	mov    DWORD PTR [eax],edx
c001d7b4:	90                   	nop
c001d7b5:	83 c4 0c             	add    esp,0xc
c001d7b8:	c3                   	ret    
c001d7b9:	90                   	nop

c001d7ba <SATAPI::diskRemoved()>:
c001d7ba:	c3                   	ret    
c001d7bb:	90                   	nop

c001d7bc <SATAPI::diskInserted()>:
c001d7bc:	83 ec 18             	sub    esp,0x18
c001d7bf:	68 24 26 02 c0       	push   0xc0022624
c001d7c4:	e8 70 d1 fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d7c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7cd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d7d4:	83 c4 1c             	add    esp,0x1c
c001d7d7:	c3                   	ret    

c001d7d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d7d8:	55                   	push   ebp
c001d7d9:	57                   	push   edi
c001d7da:	56                   	push   esi
c001d7db:	53                   	push   ebx
c001d7dc:	83 ec 34             	sub    esp,0x34
c001d7df:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d7e3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d7e7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d7eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d7ef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d7f3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d7f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d803:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d809:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d80d:	83 c0 02             	add    eax,0x2
c001d810:	c1 e0 07             	shl    eax,0x7
c001d813:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d817:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d81b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d81f:	c1 e0 07             	shl    eax,0x7
c001d822:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d826:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d82a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d834:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d838:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d83e:	e8 21 e5 ff ff       	call   c001bd64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d843:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d847:	83 c4 10             	add    esp,0x10
c001d84a:	b8 01 00 00 00       	mov    eax,0x1
c001d84f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d854:	0f 84 53 02 00 00    	je     c001daad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d85a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d864:	8b 00                	mov    eax,DWORD PTR [eax]
c001d866:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d86c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d872:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d876:	c1 e1 05             	shl    ecx,0x5
c001d879:	01 c8                	add    eax,ecx
c001d87b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d87d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d883:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d889:	89 08                	mov    DWORD PTR [eax],ecx
c001d88b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d891:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d897:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d89d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d8a0:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d8a3:	50                   	push   eax
c001d8a4:	68 90 00 00 00       	push   0x90
c001d8a9:	6a 00                	push   0x0
c001d8ab:	53                   	push   ebx
c001d8ac:	e8 3f 2c fe ff       	call   c00004f0 <memset>
c001d8b1:	b9 0c 00 00 00       	mov    ecx,0xc
c001d8b6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d8ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d8bc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d8c2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d8c6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d8cc:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d8d0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d8d4:	48                   	dec    eax
c001d8d5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d8da:	89 c1                	mov    ecx,eax
c001d8dc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d8e2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d8e7:	09 c8                	or     eax,ecx
c001d8e9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d8ef:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d8f5:	83 c8 80             	or     eax,0xffffff80
c001d8f8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d8fe:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d901:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d905:	25 00 7f 00 00       	and    eax,0x7f00
c001d90a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d90e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d913:	66 89 03             	mov    WORD PTR [ebx],ax
c001d916:	89 d0                	mov    eax,edx
c001d918:	c1 ea 18             	shr    edx,0x18
c001d91b:	c1 e8 10             	shr    eax,0x10
c001d91e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d921:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d924:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d928:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d92b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d92f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d932:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d936:	83 c4 10             	add    esp,0x10
c001d939:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d93d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d941:	31 c0                	xor    eax,eax
c001d943:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d949:	80 e1 88             	and    cl,0x88
c001d94c:	74 0a                	je     c001d958 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d94e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d953:	74 0a                	je     c001d95f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d955:	40                   	inc    eax
c001d956:	eb eb                	jmp    c001d943 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d958:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d95d:	75 43                	jne    c001d9a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d95f:	83 ec 0c             	sub    esp,0xc
c001d962:	68 3c 26 02 c0       	push   0xc002263c
c001d967:	e8 cd cf fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d96c:	58                   	pop    eax
c001d96d:	5a                   	pop    edx
c001d96e:	68 51 26 02 c0       	push   0xc0022651
c001d973:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001d979:	e8 1a b1 fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c001d97e:	59                   	pop    ecx
c001d97f:	5b                   	pop    ebx
c001d980:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d984:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d98a:	e8 6f e4 ff ff       	call   c001bdfe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d98f:	5e                   	pop    esi
c001d990:	5f                   	pop    edi
c001d991:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d995:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d99b:	e8 3e e4 ff ff       	call   c001bdde <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d9a0:	eb 48                	jmp    c001d9ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d9a2:	be 01 00 00 00       	mov    esi,0x1
c001d9a7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d9ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d9af:	d3 e6                	shl    esi,cl
c001d9b1:	c1 e7 07             	shl    edi,0x7
c001d9b4:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d9ba:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d9bf:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d9c3:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d9c9:	85 c6                	test   esi,eax
c001d9cb:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d9d1:	0f 84 a3 00 00 00    	je     c001da7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d9d7:	0f ba e0 1e          	bt     eax,0x1e
c001d9db:	73 1a                	jae    c001d9f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d9dd:	83 ec 0c             	sub    esp,0xc
c001d9e0:	68 63 26 02 c0       	push   0xc0022663
c001d9e5:	e8 4f cf fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001d9ea:	83 c4 10             	add    esp,0x10
c001d9ed:	b8 01 00 00 00       	mov    eax,0x1
c001d9f2:	e9 b6 00 00 00       	jmp    c001daad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d9f7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d9fd:	83 f8 0d             	cmp    eax,0xd
c001da00:	77 0a                	ja     c001da0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001da02:	83 ec 0c             	sub    esp,0xc
c001da05:	68 c8 00 00 00       	push   0xc8
c001da0a:	eb 28                	jmp    c001da34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001da0c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001da12:	83 f8 0d             	cmp    eax,0xd
c001da15:	77 0a                	ja     c001da21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001da17:	83 ec 0c             	sub    esp,0xc
c001da1a:	68 58 02 00 00       	push   0x258
c001da1f:	eb 13                	jmp    c001da34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001da21:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001da27:	83 f8 06             	cmp    eax,0x6
c001da2a:	77 10                	ja     c001da3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001da2c:	83 ec 0c             	sub    esp,0xc
c001da2f:	68 dc 05 00 00       	push   0x5dc
c001da34:	e8 c7 7d ff ff       	call   c0015800 <milliTenthSleep(unsigned int)>
c001da39:	83 c4 10             	add    esp,0x10
c001da3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001da40:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001da43:	75 06                	jne    c001da4b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001da45:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001da49:	74 15                	je     c001da60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001da4b:	83 fb 06             	cmp    ebx,0x6
c001da4e:	77 10                	ja     c001da60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001da50:	83 ec 0c             	sub    esp,0xc
c001da53:	68 c4 09 00 00       	push   0x9c4
c001da58:	e8 a3 7d ff ff       	call   c0015800 <milliTenthSleep(unsigned int)>
c001da5d:	83 c4 10             	add    esp,0x10
c001da60:	43                   	inc    ebx
c001da61:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001da67:	0f 85 56 ff ff ff    	jne    c001d9c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001da6d:	83 ec 0c             	sub    esp,0xc
c001da70:	68 76 26 02 c0       	push   0xc0022676
c001da75:	e9 6b ff ff ff       	jmp    c001d9e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001da7a:	0f ba e0 1e          	bt     eax,0x1e
c001da7e:	73 0d                	jae    c001da8d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	68 8a 26 02 c0       	push   0xc002268a
c001da88:	e9 58 ff ff ff       	jmp    c001d9e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001da8d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001da92:	74 17                	je     c001daab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001da94:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001da99:	74 10                	je     c001daab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001da9b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001daa1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001daa5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001daa9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001daab:	31 c0                	xor    eax,eax
c001daad:	83 c4 2c             	add    esp,0x2c
c001dab0:	5b                   	pop    ebx
c001dab1:	5e                   	pop    esi
c001dab2:	5f                   	pop    edi
c001dab3:	5d                   	pop    ebp
c001dab4:	c3                   	ret    
c001dab5:	90                   	nop

c001dab6 <SATAPI::eject()>:
c001dab6:	57                   	push   edi
c001dab7:	b9 03 00 00 00       	mov    ecx,0x3
c001dabc:	83 ec 18             	sub    esp,0x18
c001dabf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dac3:	fc                   	cld    
c001dac4:	31 c0                	xor    eax,eax
c001dac6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dac8:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dacd:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dad2:	50                   	push   eax
c001dad3:	6a 00                	push   0x0
c001dad5:	6a 00                	push   0x0
c001dad7:	6a 00                	push   0x0
c001dad9:	6a 00                	push   0x0
c001dadb:	6a 02                	push   0x2
c001dadd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dae1:	50                   	push   eax
c001dae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dae6:	e8 ed fc ff ff       	call   c001d7d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001daeb:	31 c0                	xor    eax,eax
c001daed:	83 c4 38             	add    esp,0x38
c001daf0:	5f                   	pop    edi
c001daf1:	c3                   	ret    

c001daf2 <SATAPI::detectMedia()>:
c001daf2:	53                   	push   ebx
c001daf3:	83 ec 14             	sub    esp,0x14
c001daf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dafa:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001db00:	e8 df 02 ff ff       	call   c000dde4 <VCache::writeWriteBuffer()>
c001db05:	59                   	pop    ecx
c001db06:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001db0c:	e8 c3 02 ff ff       	call   c000ddd4 <VCache::invalidateReadBuffer()>
c001db11:	c7 04 24 9f 26 02 c0 	mov    DWORD PTR [esp],0xc002269f
c001db18:	e8 1c ce fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001db1d:	83 c4 10             	add    esp,0x10
c001db20:	31 c0                	xor    eax,eax
c001db22:	8b 14 85 20 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7be0]
c001db29:	85 d2                	test   edx,edx
c001db2b:	74 0f                	je     c001db3c <SATAPI::detectMedia()+0x4a>
c001db2d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001db33:	75 07                	jne    c001db3c <SATAPI::detectMedia()+0x4a>
c001db35:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001db3c:	40                   	inc    eax
c001db3d:	83 f8 1a             	cmp    eax,0x1a
c001db40:	75 e0                	jne    c001db22 <SATAPI::detectMedia()+0x30>
c001db42:	83 c4 08             	add    esp,0x8
c001db45:	5b                   	pop    ebx
c001db46:	c3                   	ret    
c001db47:	90                   	nop

c001db48 <SATAPI::open(int, int, void*)>:
c001db48:	56                   	push   esi
c001db49:	53                   	push   ebx
c001db4a:	51                   	push   ecx
c001db4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db53:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db5d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db63:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db71:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db7b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db81:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001db88:	e8 25 a2 fe ff       	call   c0007db2 <Phys::allocatePage()>
c001db8d:	89 c6                	mov    esi,eax
c001db8f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001db95:	81 c6 00 10 00 00    	add    esi,0x1000
c001db9b:	e8 12 a2 fe ff       	call   c0007db2 <Phys::allocatePage()>
c001dba0:	39 c6                	cmp    esi,eax
c001dba2:	74 10                	je     c001dbb4 <SATAPI::open(int, int, void*)+0x6c>
c001dba4:	83 ec 0c             	sub    esp,0xc
c001dba7:	68 b4 26 02 c0       	push   0xc00226b4
c001dbac:	e8 60 30 ff ff       	call   c0010c11 <KePanic(char const*)>
c001dbb1:	83 c4 10             	add    esp,0x10
c001dbb4:	83 ec 0c             	sub    esp,0xc
c001dbb7:	6a 02                	push   0x2
c001dbb9:	e8 43 ba fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001dbbe:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001dbc4:	6a 03                	push   0x3
c001dbc6:	50                   	push   eax
c001dbc7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001dbcd:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001dbd3:	e8 3c c1 fe ff       	call   c0009d14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbd8:	83 c4 14             	add    esp,0x14
c001dbdb:	68 78 01 00 00       	push   0x178
c001dbe0:	e8 c9 9e fe ff       	call   c0007aae <malloc>
c001dbe5:	83 c4 0c             	add    esp,0xc
c001dbe8:	89 c6                	mov    esi,eax
c001dbea:	6a 00                	push   0x0
c001dbec:	68 ff ff ff 7f       	push   0x7fffffff
c001dbf1:	6a 00                	push   0x0
c001dbf3:	6a 00                	push   0x0
c001dbf5:	53                   	push   ebx
c001dbf6:	68 ca 26 02 c0       	push   0xc00226ca
c001dbfb:	50                   	push   eax
c001dbfc:	e8 3f f6 fe ff       	call   c000d240 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001dc01:	83 c4 14             	add    esp,0x14
c001dc04:	56                   	push   esi
c001dc05:	e8 f6 f6 fe ff       	call   c000d300 <LogicalDisk::assignDriveLetter()>
c001dc0a:	5a                   	pop    edx
c001dc0b:	0f be c0             	movsx  eax,al
c001dc0e:	59                   	pop    ecx
c001dc0f:	50                   	push   eax
c001dc10:	68 1c 25 02 c0       	push   0xc002251c
c001dc15:	e8 1f cd fe ff       	call   c000a939 <Dbg::kprintf(char const*, ...)>
c001dc1a:	58                   	pop    eax
c001dc1b:	5a                   	pop    edx
c001dc1c:	56                   	push   esi
c001dc1d:	53                   	push   ebx
c001dc1e:	e8 77 e4 fe ff       	call   c000c09a <Device::addChild(Device*)>
c001dc23:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001dc29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc2c:	e8 9d e8 fe ff       	call   c000c4ce <PhysicalDisk::startCache()>
c001dc31:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001dc38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc3b:	e8 b2 fe ff ff       	call   c001daf2 <SATAPI::detectMedia()>
c001dc40:	83 c4 14             	add    esp,0x14
c001dc43:	31 c0                	xor    eax,eax
c001dc45:	5b                   	pop    ebx
c001dc46:	5e                   	pop    esi
c001dc47:	c3                   	ret    

c001dc48 <SATAPI::read(unsigned long long, int, void*)>:
c001dc48:	57                   	push   edi
c001dc49:	56                   	push   esi
c001dc4a:	53                   	push   ebx
c001dc4b:	83 ec 30             	sub    esp,0x30
c001dc4e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc52:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001dc56:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001dc5a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc66:	83 fe 04             	cmp    esi,0x4
c001dc69:	7e 10                	jle    c001dc7b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001dc6b:	83 ec 0c             	sub    esp,0xc
c001dc6e:	68 d8 26 02 c0       	push   0xc00226d8
c001dc73:	e8 99 2f ff ff       	call   c0010c11 <KePanic(char const*)>
c001dc78:	83 c4 10             	add    esp,0x10
c001dc7b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dc81:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001dc87:	51                   	push   ecx
c001dc88:	50                   	push   eax
c001dc89:	83 c0 02             	add    eax,0x2
c001dc8c:	c1 e0 07             	shl    eax,0x7
c001dc8f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001dc95:	50                   	push   eax
c001dc96:	52                   	push   edx
c001dc97:	e8 8c e1 ff ff       	call   c001be28 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001dc9c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001dca0:	b9 03 00 00 00       	mov    ecx,0x3
c001dca5:	fc                   	cld    
c001dca6:	31 c0                	xor    eax,eax
c001dca8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dcaa:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001dcaf:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001dcb4:	83 c4 0c             	add    esp,0xc
c001dcb7:	6a 00                	push   0x0
c001dcb9:	6a 00                	push   0x0
c001dcbb:	6a 00                	push   0x0
c001dcbd:	6a 00                	push   0x0
c001dcbf:	6a 02                	push   0x2
c001dcc1:	8d 44 24 30          	lea    eax,[esp+0x30]
c001dcc5:	50                   	push   eax
c001dcc6:	53                   	push   ebx
c001dcc7:	e8 0c fb ff ff       	call   c001d7d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001dccc:	83 c4 20             	add    esp,0x20
c001dccf:	85 c0                	test   eax,eax
c001dcd1:	75 44                	jne    c001dd17 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001dcd3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001dcd7:	b9 03 00 00 00       	mov    ecx,0x3
c001dcdc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dcde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dce2:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001dce7:	0f c8                	bswap  eax
c001dce9:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001dced:	89 f0                	mov    eax,esi
c001dcef:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001dcf3:	50                   	push   eax
c001dcf4:	56                   	push   esi
c001dcf5:	c1 e6 0b             	shl    esi,0xb
c001dcf8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dcfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dd00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dd04:	56                   	push   esi
c001dd05:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001dd09:	50                   	push   eax
c001dd0a:	53                   	push   ebx
c001dd0b:	e8 c8 fa ff ff       	call   c001d7d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001dd10:	83 c4 20             	add    esp,0x20
c001dd13:	85 c0                	test   eax,eax
c001dd15:	74 14                	je     c001dd2b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001dd17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd1b:	83 ec 0c             	sub    esp,0xc
c001dd1e:	53                   	push   ebx
c001dd1f:	e8 ce fd ff ff       	call   c001daf2 <SATAPI::detectMedia()>
c001dd24:	83 c4 10             	add    esp,0x10
c001dd27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd2b:	83 c4 30             	add    esp,0x30
c001dd2e:	5b                   	pop    ebx
c001dd2f:	5e                   	pop    esi
c001dd30:	5f                   	pop    edi
c001dd31:	c3                   	ret    

c001dd32 <IOAPIC::close(int, int, void*)>:
c001dd32:	b8 00 00 00 00       	mov    eax,0x0
c001dd37:	c3                   	ret    

c001dd38 <apicGetBase()>:
c001dd38:	55                   	push   ebp
c001dd39:	89 e5                	mov    ebp,esp
c001dd3b:	83 ec 18             	sub    esp,0x18
c001dd3e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dd43:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dd49:	83 e0 08             	and    eax,0x8
c001dd4c:	0f b6 c0             	movzx  eax,al
c001dd4f:	85 c0                	test   eax,eax
c001dd51:	75 07                	jne    c001dd5a <apicGetBase()+0x22>
c001dd53:	b8 00 00 00 00       	mov    eax,0x0
c001dd58:	eb 21                	jmp    c001dd7b <apicGetBase()+0x43>
c001dd5a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dd5f:	83 ec 08             	sub    esp,0x8
c001dd62:	6a 1b                	push   0x1b
c001dd64:	50                   	push   eax
c001dd65:	e8 4e 93 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001dd6a:	83 c4 10             	add    esp,0x10
c001dd6d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dd70:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dd73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd76:	25 00 00 ff ff       	and    eax,0xffff0000
c001dd7b:	c9                   	leave  
c001dd7c:	c3                   	ret    
c001dd7d:	90                   	nop

c001dd7e <IOAPIC::IOAPIC()>:
c001dd7e:	83 ec 0c             	sub    esp,0xc
c001dd81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd85:	83 ec 08             	sub    esp,0x8
c001dd88:	68 3c 27 02 c0       	push   0xc002273c
c001dd8d:	50                   	push   eax
c001dd8e:	e8 9f e4 fe ff       	call   c000c232 <Device::Device(char const*)>
c001dd93:	83 c4 10             	add    esp,0x10
c001dd96:	ba 4c 27 02 c0       	mov    edx,0xc002274c
c001dd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9f:	89 10                	mov    DWORD PTR [eax],edx
c001dda1:	90                   	nop
c001dda2:	83 c4 0c             	add    esp,0xc
c001dda5:	c3                   	ret    

c001dda6 <apicOpen()>:
c001dda6:	55                   	push   ebp
c001dda7:	89 e5                	mov    ebp,esp
c001dda9:	53                   	push   ebx
c001ddaa:	83 ec 34             	sub    esp,0x34
c001ddad:	a0 a0 9b 02 c0       	mov    al,ds:0xc0029ba0
c001ddb2:	83 f0 01             	xor    eax,0x1
c001ddb5:	0f b6 c0             	movzx  eax,al
c001ddb8:	85 c0                	test   eax,eax
c001ddba:	0f 84 a3 00 00 00    	je     c001de63 <apicOpen()+0xbd>
c001ddc0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ddc4:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c001ddc9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ddcd:	0f b6 c0             	movzx  eax,al
c001ddd0:	39 c2                	cmp    edx,eax
c001ddd2:	0f 83 84 00 00 00    	jae    c001de5c <apicOpen()+0xb6>
c001ddd8:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001dddf:	83 ec 0c             	sub    esp,0xc
c001dde2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001dde5:	e8 c4 9c fe ff       	call   c0007aae <malloc>
c001ddea:	83 c4 10             	add    esp,0x10
c001dded:	89 c3                	mov    ebx,eax
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	53                   	push   ebx
c001ddf3:	e8 86 ff ff ff       	call   c001dd7e <IOAPIC::IOAPIC()>
c001ddf8:	83 c4 10             	add    esp,0x10
c001ddfb:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ddfe:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001de02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001de05:	89 14 85 80 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6480],edx
c001de0c:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c001de11:	83 c0 01             	add    eax,0x1
c001de14:	a3 60 9b 02 c0       	mov    ds:0xc0029b60,eax
c001de19:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001de1e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001de24:	83 ec 08             	sub    esp,0x8
c001de27:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001de2a:	50                   	push   eax
c001de2b:	e8 6a e2 fe ff       	call   c000c09a <Device::addChild(Device*)>
c001de30:	83 c4 10             	add    esp,0x10
c001de33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001de36:	8b 00                	mov    eax,DWORD PTR [eax]
c001de38:	83 c0 08             	add    eax,0x8
c001de3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001de3d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001de41:	6a 00                	push   0x0
c001de43:	6a 00                	push   0x0
c001de45:	52                   	push   edx
c001de46:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001de49:	ff d0                	call   eax
c001de4b:	83 c4 10             	add    esp,0x10
c001de4e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001de51:	83 c0 01             	add    eax,0x1
c001de54:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001de57:	e9 68 ff ff ff       	jmp    c001ddc4 <apicOpen()+0x1e>
c001de5c:	c6 05 a0 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029ba0,0x1
c001de63:	e8 d0 fe ff ff       	call   c001dd38 <apicGetBase()>
c001de68:	05 f0 00 00 00       	add    eax,0xf0
c001de6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001de70:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001de73:	8b 00                	mov    eax,DWORD PTR [eax]
c001de75:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001de78:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001de7f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001de86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001de89:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001de8c:	89 10                	mov    DWORD PTR [eax],edx
c001de8e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001de95:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c001de9a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001de9d:	7d 7c                	jge    c001df1b <apicOpen()+0x175>
c001de9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dea2:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dea9:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001deac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001deaf:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001deb6:	c1 e8 08             	shr    eax,0x8
c001deb9:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001debd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dec0:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dec7:	c1 e8 18             	shr    eax,0x18
c001deca:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001decd:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ded1:	3d ff 00 00 00       	cmp    eax,0xff
c001ded6:	75 3a                	jne    c001df12 <apicOpen()+0x16c>
c001ded8:	e8 5b fe ff ff       	call   c001dd38 <apicGetBase()>
c001dedd:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001dee1:	83 fa 01             	cmp    edx,0x1
c001dee4:	75 07                	jne    c001deed <apicOpen()+0x147>
c001dee6:	ba 60 03 00 00       	mov    edx,0x360
c001deeb:	eb 05                	jmp    c001def2 <apicOpen()+0x14c>
c001deed:	ba 50 03 00 00       	mov    edx,0x350
c001def2:	01 d0                	add    eax,edx
c001def4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001def7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001defa:	8b 00                	mov    eax,DWORD PTR [eax]
c001defc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001deff:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001df06:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001df0a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001df0d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001df10:	89 10                	mov    DWORD PTR [eax],edx
c001df12:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001df16:	e9 7a ff ff ff       	jmp    c001de95 <apicOpen()+0xef>
c001df1b:	90                   	nop
c001df1c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001df1f:	c9                   	leave  
c001df20:	c3                   	ret    
c001df21:	90                   	nop

c001df22 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001df22:	55                   	push   ebp
c001df23:	89 e5                	mov    ebp,esp
c001df25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df2e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001df31:	72 1d                	jb     c001df50 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001df33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df36:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001df3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df3f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001df45:	01 d0                	add    eax,edx
c001df47:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001df4a:	73 04                	jae    c001df50 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001df4c:	b0 01                	mov    al,0x1
c001df4e:	eb 02                	jmp    c001df52 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001df50:	b0 00                	mov    al,0x0
c001df52:	5d                   	pop    ebp
c001df53:	c3                   	ret    

c001df54 <IOAPIC::read(int)>:
c001df54:	55                   	push   ebp
c001df55:	89 e5                	mov    ebp,esp
c001df57:	83 ec 10             	sub    esp,0x10
c001df5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001df63:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001df66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df69:	0f b6 d0             	movzx  edx,al
c001df6c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df6f:	89 10                	mov    DWORD PTR [eax],edx
c001df71:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df74:	83 c0 10             	add    eax,0x10
c001df77:	8b 00                	mov    eax,DWORD PTR [eax]
c001df79:	c9                   	leave  
c001df7a:	c3                   	ret    
c001df7b:	90                   	nop

c001df7c <IOAPIC::open(int, int, void*)>:
c001df7c:	55                   	push   ebp
c001df7d:	89 e5                	mov    ebp,esp
c001df7f:	57                   	push   edi
c001df80:	56                   	push   esi
c001df81:	53                   	push   ebx
c001df82:	83 ec 04             	sub    esp,0x4
c001df85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001df8b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001df91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001df9a:	8b 14 85 c0 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7840]
c001dfa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfa4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dfaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dfb3:	8b 14 85 40 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77c0]
c001dfba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfbd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dfc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfc6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001dfcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfcf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dfd5:	0f b6 f0             	movzx  esi,al
c001dfd8:	89 d0                	mov    eax,edx
c001dfda:	ba 00 00 00 00       	mov    edx,0x0
c001dfdf:	89 c7                	mov    edi,eax
c001dfe1:	83 e7 ff             	and    edi,0xffffffff
c001dfe4:	89 f9                	mov    ecx,edi
c001dfe6:	0f b6 da             	movzx  ebx,dl
c001dfe9:	89 c8                	mov    eax,ecx
c001dfeb:	89 da                	mov    edx,ebx
c001dfed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dff0:	8d 5e 08             	lea    ebx,[esi+0x8]
c001dff3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dff7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dffb:	83 e0 00             	and    eax,0x0
c001dffe:	09 d0                	or     eax,edx
c001e000:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e007:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e00d:	8d 50 01             	lea    edx,[eax+0x1]
c001e010:	88 d1                	mov    cl,dl
c001e012:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e015:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e01b:	0f b6 d0             	movzx  edx,al
c001e01e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e021:	83 c2 08             	add    edx,0x8
c001e024:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e028:	0f b6 c9             	movzx  ecx,cl
c001e02b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e031:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e035:	6a 01                	push   0x1
c001e037:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e03a:	e8 15 ff ff ff       	call   c001df54 <IOAPIC::read(int)>
c001e03f:	83 c4 08             	add    esp,0x8
c001e042:	c1 f8 10             	sar    eax,0x10
c001e045:	0f b6 c0             	movzx  eax,al
c001e048:	8d 50 01             	lea    edx,[eax+0x1]
c001e04b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e04e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e054:	b8 00 00 00 00       	mov    eax,0x0
c001e059:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e05c:	5b                   	pop    ebx
c001e05d:	5e                   	pop    esi
c001e05e:	5f                   	pop    edi
c001e05f:	5d                   	pop    ebp
c001e060:	c3                   	ret    
c001e061:	90                   	nop

c001e062 <IOAPIC::write(int, int)>:
c001e062:	55                   	push   ebp
c001e063:	89 e5                	mov    ebp,esp
c001e065:	83 ec 10             	sub    esp,0x10
c001e068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e06b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e071:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e074:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e077:	0f b6 d0             	movzx  edx,al
c001e07a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e07d:	89 10                	mov    DWORD PTR [eax],edx
c001e07f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e082:	8d 50 10             	lea    edx,[eax+0x10]
c001e085:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e088:	89 02                	mov    DWORD PTR [edx],eax
c001e08a:	90                   	nop
c001e08b:	c9                   	leave  
c001e08c:	c3                   	ret    
c001e08d:	90                   	nop

c001e08e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e08e:	55                   	push   ebp
c001e08f:	89 e5                	mov    ebp,esp
c001e091:	53                   	push   ebx
c001e092:	83 ec 2c             	sub    esp,0x2c
c001e095:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e098:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e09b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e09e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e0a1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e0a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e0a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e0aa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e0ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e0b0:	88 d8                	mov    al,bl
c001e0b2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e0b5:	88 c8                	mov    al,cl
c001e0b7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e0ba:	88 d0                	mov    al,dl
c001e0bc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e0bf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e0c3:	83 c0 08             	add    eax,0x8
c001e0c6:	01 c0                	add    eax,eax
c001e0c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e0cb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e0cf:	83 c0 08             	add    eax,0x8
c001e0d2:	01 c0                	add    eax,eax
c001e0d4:	83 c0 01             	add    eax,0x1
c001e0d7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e0da:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e0dd:	50                   	push   eax
c001e0de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0e1:	e8 6e fe ff ff       	call   c001df54 <IOAPIC::read(int)>
c001e0e6:	83 c4 08             	add    esp,0x8
c001e0e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e0ec:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e0f3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e0f6:	c1 e0 18             	shl    eax,0x18
c001e0f9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e0fc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e0ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e102:	52                   	push   edx
c001e103:	50                   	push   eax
c001e104:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e107:	e8 56 ff ff ff       	call   c001e062 <IOAPIC::write(int, int)>
c001e10c:	83 c4 0c             	add    esp,0xc
c001e10f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e112:	50                   	push   eax
c001e113:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e116:	e8 39 fe ff ff       	call   c001df54 <IOAPIC::read(int)>
c001e11b:	83 c4 08             	add    esp,0x8
c001e11e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e121:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e128:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e12f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e136:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e13a:	85 c0                	test   eax,eax
c001e13c:	74 09                	je     c001e147 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e13e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e145:	eb 07                	jmp    c001e14e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e147:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e14e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e152:	85 c0                	test   eax,eax
c001e154:	74 09                	je     c001e15f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e156:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e15d:	eb 07                	jmp    c001e166 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e15f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e166:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e16d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e171:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e174:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e177:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e17a:	52                   	push   edx
c001e17b:	50                   	push   eax
c001e17c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e17f:	e8 de fe ff ff       	call   c001e062 <IOAPIC::write(int, int)>
c001e184:	83 c4 0c             	add    esp,0xc
c001e187:	90                   	nop
c001e188:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e18b:	c9                   	leave  
c001e18c:	c3                   	ret    
c001e18d:	66 90                	xchg   ax,ax
c001e18f:	90                   	nop

c001e190 <APICTimer::close(int, int, void*)>:
c001e190:	b8 00 00 00 00       	mov    eax,0x0
c001e195:	c3                   	ret    
c001e196:	66 90                	xchg   ax,ax

c001e198 <apicTimerHandler(regs*, void*)>:
c001e198:	83 ec 0c             	sub    esp,0xc
c001e19b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e19f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e1a1:	b8 10 27 00 00       	mov    eax,0x2710
c001e1a6:	ba 00 00 00 00       	mov    edx,0x0
c001e1ab:	f7 f1                	div    ecx
c001e1ad:	83 ec 0c             	sub    esp,0xc
c001e1b0:	50                   	push   eax
c001e1b1:	e8 46 f9 fe ff       	call   c000dafc <timerHandler(unsigned int)>
c001e1b6:	83 c4 10             	add    esp,0x10
c001e1b9:	90                   	nop
c001e1ba:	83 c4 0c             	add    esp,0xc
c001e1bd:	c3                   	ret    
c001e1be:	66 90                	xchg   ax,ax

c001e1c0 <APICTimer::open(int, int, void*)>:
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1c9:	83 c0 24             	add    eax,0x24
c001e1cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1ce:	83 ec 08             	sub    esp,0x8
c001e1d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1d9:	ff d0                	call   eax
c001e1db:	83 c4 10             	add    esp,0x10
c001e1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1f4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e1fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1fe:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e204:	83 ec 0c             	sub    esp,0xc
c001e207:	51                   	push   ecx
c001e208:	6a 01                	push   0x1
c001e20a:	68 98 e1 01 c0       	push   0xc001e198
c001e20f:	52                   	push   edx
c001e210:	50                   	push   eax
c001e211:	e8 30 de fe ff       	call   c000c046 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e216:	83 c4 20             	add    esp,0x20
c001e219:	89 c2                	mov    edx,eax
c001e21b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e225:	b8 00 00 00 00       	mov    eax,0x0
c001e22a:	83 c4 0c             	add    esp,0xc
c001e22d:	c3                   	ret    
c001e22e:	66 90                	xchg   ax,ax

c001e230 <APICTimer::write(int)>:
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	83 ec 0c             	sub    esp,0xc
c001e236:	68 70 27 02 c0       	push   0xc0022770
c001e23b:	e8 d1 29 ff ff       	call   c0010c11 <KePanic(char const*)>
c001e240:	83 c4 10             	add    esp,0x10
c001e243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e247:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e24b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e251:	90                   	nop
c001e252:	83 c4 0c             	add    esp,0xc
c001e255:	c3                   	ret    
c001e256:	66 90                	xchg   ax,ax

c001e258 <APICTimer::APICTimer()>:
c001e258:	83 ec 0c             	sub    esp,0xc
c001e25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25f:	83 ec 08             	sub    esp,0x8
c001e262:	68 80 27 02 c0       	push   0xc0022780
c001e267:	50                   	push   eax
c001e268:	e8 c3 f7 fe ff       	call   c000da30 <Timer::Timer(char const*)>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	ba 94 27 02 c0       	mov    edx,0xc0022794
c001e275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e279:	89 10                	mov    DWORD PTR [eax],edx
c001e27b:	90                   	nop
c001e27c:	83 c4 0c             	add    esp,0xc
c001e27f:	c3                   	ret    

c001e280 <PIT::write(int)>:
c001e280:	83 ec 10             	sub    esp,0x10
c001e283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e287:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e28b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e295:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c001e29a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e29f:	89 c2                	mov    edx,eax
c001e2a1:	c1 fa 1f             	sar    edx,0x1f
c001e2a4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e2a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2ac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e2b3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e2b8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e2bc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e2c1:	ee                   	out    dx,al
c001e2c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2c6:	0f b6 c0             	movzx  eax,al
c001e2c9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e2d0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e2d4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e2d8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e2dd:	ee                   	out    dx,al
c001e2de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2e2:	c1 f8 08             	sar    eax,0x8
c001e2e5:	0f b6 c0             	movzx  eax,al
c001e2e8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e2ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e2f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e2f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e2fc:	ee                   	out    dx,al
c001e2fd:	90                   	nop
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	c3                   	ret    
c001e302:	66 90                	xchg   ax,ax

c001e304 <pitHandler(regs*, void*)>:
c001e304:	83 ec 0c             	sub    esp,0xc
c001e307:	8b 0d a4 9b 02 c0    	mov    ecx,DWORD PTR ds:0xc0029ba4
c001e30d:	b8 10 27 00 00       	mov    eax,0x2710
c001e312:	89 c2                	mov    edx,eax
c001e314:	c1 fa 1f             	sar    edx,0x1f
c001e317:	f7 f9                	idiv   ecx
c001e319:	83 ec 0c             	sub    esp,0xc
c001e31c:	50                   	push   eax
c001e31d:	e8 da f7 fe ff       	call   c000dafc <timerHandler(unsigned int)>
c001e322:	83 c4 10             	add    esp,0x10
c001e325:	90                   	nop
c001e326:	83 c4 0c             	add    esp,0xc
c001e329:	c3                   	ret    
c001e32a:	66 90                	xchg   ax,ax

c001e32c <PIT::open(int, int, void*)>:
c001e32c:	83 ec 0c             	sub    esp,0xc
c001e32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e333:	8b 00                	mov    eax,DWORD PTR [eax]
c001e335:	83 c0 24             	add    eax,0x24
c001e338:	8b 00                	mov    eax,DWORD PTR [eax]
c001e33a:	83 ec 08             	sub    esp,0x8
c001e33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e345:	ff d0                	call   eax
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34e:	83 ec 0c             	sub    esp,0xc
c001e351:	6a 00                	push   0x0
c001e353:	6a 01                	push   0x1
c001e355:	68 04 e3 01 c0       	push   0xc001e304
c001e35a:	6a 00                	push   0x0
c001e35c:	50                   	push   eax
c001e35d:	e8 e4 dc fe ff       	call   c000c046 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e362:	83 c4 20             	add    esp,0x20
c001e365:	89 c2                	mov    edx,eax
c001e367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e371:	b8 00 00 00 00       	mov    eax,0x0
c001e376:	83 c4 0c             	add    esp,0xc
c001e379:	c3                   	ret    
c001e37a:	66 90                	xchg   ax,ax

c001e37c <PIT::close(int, int, void*)>:
c001e37c:	83 ec 0c             	sub    esp,0xc
c001e37f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e383:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e391:	6a 01                	push   0x1
c001e393:	68 04 e3 01 c0       	push   0xc001e304
c001e398:	6a 00                	push   0x0
c001e39a:	50                   	push   eax
c001e39b:	e8 dc dc fe ff       	call   c000c07c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e3a0:	83 c4 10             	add    esp,0x10
c001e3a3:	b8 00 00 00 00       	mov    eax,0x0
c001e3a8:	83 c4 0c             	add    esp,0xc
c001e3ab:	c3                   	ret    

c001e3ac <PIT::PIT()>:
c001e3ac:	83 ec 0c             	sub    esp,0xc
c001e3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b3:	83 ec 08             	sub    esp,0x8
c001e3b6:	68 bc 27 02 c0       	push   0xc00227bc
c001e3bb:	50                   	push   eax
c001e3bc:	e8 6f f6 fe ff       	call   c000da30 <Timer::Timer(char const*)>
c001e3c1:	83 c4 10             	add    esp,0x10
c001e3c4:	ba e4 27 02 c0       	mov    edx,0xc00227e4
c001e3c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3cd:	89 10                	mov    DWORD PTR [eax],edx
c001e3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3d9:	0f b6 d0             	movzx  edx,al
c001e3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3f1:	0f b6 d0             	movzx  edx,al
c001e3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e401:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e407:	8d 50 01             	lea    edx,[eax+0x1]
c001e40a:	88 d1                	mov    cl,dl
c001e40c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e410:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e416:	0f b6 d0             	movzx  edx,al
c001e419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e421:	83 e1 3f             	and    ecx,0x3f
c001e424:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e428:	90                   	nop
c001e429:	83 c4 0c             	add    esp,0xc
c001e42c:	c3                   	ret    
c001e42d:	66 90                	xchg   ax,ax
c001e42f:	90                   	nop

c001e430 <avxDetect>:
c001e430:	b8 01 00 00 00       	mov    eax,0x1
c001e435:	0f a2                	cpuid  
c001e437:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001e43d:	74 15                	je     c001e454 <avxDetect.noAVX>
c001e43f:	b8 01 00 00 00       	mov    eax,0x1
c001e444:	0f a2                	cpuid  
c001e446:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001e44c:	74 06                	je     c001e454 <avxDetect.noAVX>
c001e44e:	b8 01 00 00 00       	mov    eax,0x1
c001e453:	c3                   	ret    

c001e454 <avxDetect.noAVX>:
c001e454:	b8 00 00 00 00       	mov    eax,0x0
c001e459:	c3                   	ret    

c001e45a <avxSave>:
c001e45a:	53                   	push   ebx
c001e45b:	52                   	push   edx
c001e45c:	31 c0                	xor    eax,eax
c001e45e:	48                   	dec    eax
c001e45f:	89 c2                	mov    edx,eax
c001e461:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e465:	0f ae 23             	xsave  [ebx]
c001e468:	5a                   	pop    edx
c001e469:	5b                   	pop    ebx
c001e46a:	c3                   	ret    

c001e46b <avxLoad>:
c001e46b:	53                   	push   ebx
c001e46c:	52                   	push   edx
c001e46d:	31 c0                	xor    eax,eax
c001e46f:	48                   	dec    eax
c001e470:	89 c2                	mov    edx,eax
c001e472:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e476:	0f ae 2b             	xrstor [ebx]
c001e479:	5a                   	pop    edx
c001e47a:	5b                   	pop    ebx
c001e47b:	c3                   	ret    

c001e47c <avxInit>:
c001e47c:	e8 67 03 00 00       	call   c001e7e8 <sseInit>
c001e481:	50                   	push   eax
c001e482:	51                   	push   ecx
c001e483:	0f 20 e0             	mov    eax,cr4
c001e486:	0d 00 00 04 00       	or     eax,0x40000
c001e48b:	0f 22 e0             	mov    cr4,eax
c001e48e:	31 c9                	xor    ecx,ecx
c001e490:	0f 01 d0             	xgetbv 
c001e493:	0d 07 00 00 00       	or     eax,0x7
c001e498:	0f 01 d1             	xsetbv 
c001e49b:	59                   	pop    ecx
c001e49c:	58                   	pop    eax
c001e49d:	c3                   	ret    

c001e49e <avxClose>:
c001e49e:	c3                   	ret    

c001e49f <wouldSheSayYes>:
c001e49f:	c3                   	ret    
c001e4a0:	49                   	dec    ecx
c001e4a1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001e4a5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001e4a9:	75 20                	jne    c001e4cb <isr0+0xb>
c001e4ab:	4e                   	dec    esi
c001e4ac:	79 61                	jns    c001e50f <isr7+0x3>
c001e4ae:	68 2e 2e 2e 00       	push   0x2e2e2e
c001e4b3:	66 90                	xchg   ax,ax
c001e4b5:	66 90                	xchg   ax,ax
c001e4b7:	66 90                	xchg   ax,ax
c001e4b9:	66 90                	xchg   ax,ax
c001e4bb:	66 90                	xchg   ax,ax
c001e4bd:	66 90                	xchg   ax,ax
c001e4bf:	90                   	nop

c001e4c0 <isr0>:
c001e4c0:	fa                   	cli    
c001e4c1:	68 00 00 00 00       	push   0x0
c001e4c6:	68 00 00 00 00       	push   0x0
c001e4cb:	e9 56 01 00 00       	jmp    c001e626 <int_common_stub>

c001e4d0 <isr1>:
c001e4d0:	fa                   	cli    
c001e4d1:	6a 00                	push   0x0
c001e4d3:	6a 01                	push   0x1
c001e4d5:	e9 4c 01 00 00       	jmp    c001e626 <int_common_stub>

c001e4da <isr2>:
c001e4da:	fa                   	cli    
c001e4db:	6a 00                	push   0x0
c001e4dd:	6a 02                	push   0x2
c001e4df:	e9 42 01 00 00       	jmp    c001e626 <int_common_stub>

c001e4e4 <isr3>:
c001e4e4:	fa                   	cli    
c001e4e5:	6a 00                	push   0x0
c001e4e7:	6a 03                	push   0x3
c001e4e9:	e9 38 01 00 00       	jmp    c001e626 <int_common_stub>

c001e4ee <isr4>:
c001e4ee:	fa                   	cli    
c001e4ef:	6a 00                	push   0x0
c001e4f1:	6a 04                	push   0x4
c001e4f3:	e9 2e 01 00 00       	jmp    c001e626 <int_common_stub>

c001e4f8 <isr5>:
c001e4f8:	fa                   	cli    
c001e4f9:	6a 00                	push   0x0
c001e4fb:	6a 05                	push   0x5
c001e4fd:	e9 24 01 00 00       	jmp    c001e626 <int_common_stub>

c001e502 <isr6>:
c001e502:	fa                   	cli    
c001e503:	6a 00                	push   0x0
c001e505:	6a 06                	push   0x6
c001e507:	e9 1a 01 00 00       	jmp    c001e626 <int_common_stub>

c001e50c <isr7>:
c001e50c:	fa                   	cli    
c001e50d:	6a 00                	push   0x0
c001e50f:	6a 07                	push   0x7
c001e511:	e9 10 01 00 00       	jmp    c001e626 <int_common_stub>

c001e516 <isr8>:
c001e516:	fa                   	cli    
c001e517:	6a 08                	push   0x8
c001e519:	e9 08 01 00 00       	jmp    c001e626 <int_common_stub>

c001e51e <isr9>:
c001e51e:	fa                   	cli    
c001e51f:	6a 00                	push   0x0
c001e521:	6a 09                	push   0x9
c001e523:	e9 fe 00 00 00       	jmp    c001e626 <int_common_stub>

c001e528 <isr10>:
c001e528:	fa                   	cli    
c001e529:	6a 0a                	push   0xa
c001e52b:	e9 f6 00 00 00       	jmp    c001e626 <int_common_stub>

c001e530 <isr11>:
c001e530:	fa                   	cli    
c001e531:	6a 0b                	push   0xb
c001e533:	e9 ee 00 00 00       	jmp    c001e626 <int_common_stub>

c001e538 <isr12>:
c001e538:	fa                   	cli    
c001e539:	6a 0c                	push   0xc
c001e53b:	e9 e6 00 00 00       	jmp    c001e626 <int_common_stub>

c001e540 <isr13>:
c001e540:	fa                   	cli    
c001e541:	6a 0d                	push   0xd
c001e543:	53                   	push   ebx
c001e544:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e548:	81 fb 16 e7 01 c0    	cmp    ebx,0xc001e716
c001e54e:	5b                   	pop    ebx
c001e54f:	0f 84 c3 01 00 00    	je     c001e718 <finishSignal2>
c001e555:	e9 cc 00 00 00       	jmp    c001e626 <int_common_stub>

c001e55a <isr14>:
c001e55a:	fa                   	cli    
c001e55b:	6a 0e                	push   0xe
c001e55d:	e9 c4 00 00 00       	jmp    c001e626 <int_common_stub>

c001e562 <isr15>:
c001e562:	fa                   	cli    
c001e563:	6a 00                	push   0x0
c001e565:	6a 0f                	push   0xf
c001e567:	e9 ba 00 00 00       	jmp    c001e626 <int_common_stub>

c001e56c <isr16>:
c001e56c:	fa                   	cli    
c001e56d:	6a 00                	push   0x0
c001e56f:	6a 10                	push   0x10
c001e571:	e9 b0 00 00 00       	jmp    c001e626 <int_common_stub>

c001e576 <isr17>:
c001e576:	fa                   	cli    
c001e577:	6a 00                	push   0x0
c001e579:	6a 11                	push   0x11
c001e57b:	e9 a6 00 00 00       	jmp    c001e626 <int_common_stub>

c001e580 <isr18>:
c001e580:	fa                   	cli    
c001e581:	6a 00                	push   0x0
c001e583:	6a 12                	push   0x12
c001e585:	e9 9c 00 00 00       	jmp    c001e626 <int_common_stub>

c001e58a <irq3>:
c001e58a:	fa                   	cli    
c001e58b:	6a 00                	push   0x0
c001e58d:	6a 23                	push   0x23
c001e58f:	e9 92 00 00 00       	jmp    c001e626 <int_common_stub>

c001e594 <irq4>:
c001e594:	fa                   	cli    
c001e595:	6a 00                	push   0x0
c001e597:	6a 24                	push   0x24
c001e599:	e9 88 00 00 00       	jmp    c001e626 <int_common_stub>

c001e59e <irq5>:
c001e59e:	fa                   	cli    
c001e59f:	6a 00                	push   0x0
c001e5a1:	6a 25                	push   0x25
c001e5a3:	e9 7e 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5a8 <irq6>:
c001e5a8:	fa                   	cli    
c001e5a9:	6a 00                	push   0x0
c001e5ab:	6a 26                	push   0x26
c001e5ad:	e9 74 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5b2 <irq7>:
c001e5b2:	fa                   	cli    
c001e5b3:	6a 00                	push   0x0
c001e5b5:	6a 27                	push   0x27
c001e5b7:	e9 6a 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5bc <irq8>:
c001e5bc:	fa                   	cli    
c001e5bd:	6a 00                	push   0x0
c001e5bf:	6a 28                	push   0x28
c001e5c1:	e9 60 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5c6 <irq9>:
c001e5c6:	fa                   	cli    
c001e5c7:	6a 00                	push   0x0
c001e5c9:	6a 29                	push   0x29
c001e5cb:	e9 56 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5d0 <irq10>:
c001e5d0:	fa                   	cli    
c001e5d1:	6a 00                	push   0x0
c001e5d3:	6a 2a                	push   0x2a
c001e5d5:	e9 4c 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5da <irq11>:
c001e5da:	fa                   	cli    
c001e5db:	6a 00                	push   0x0
c001e5dd:	6a 2b                	push   0x2b
c001e5df:	e9 42 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5e4 <irq12>:
c001e5e4:	fa                   	cli    
c001e5e5:	6a 00                	push   0x0
c001e5e7:	6a 2c                	push   0x2c
c001e5e9:	e9 38 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5ee <irq13>:
c001e5ee:	fa                   	cli    
c001e5ef:	6a 00                	push   0x0
c001e5f1:	6a 2d                	push   0x2d
c001e5f3:	e9 2e 00 00 00       	jmp    c001e626 <int_common_stub>

c001e5f8 <irq14>:
c001e5f8:	fa                   	cli    
c001e5f9:	6a 00                	push   0x0
c001e5fb:	6a 2e                	push   0x2e
c001e5fd:	e9 24 00 00 00       	jmp    c001e626 <int_common_stub>

c001e602 <irq15>:
c001e602:	fa                   	cli    
c001e603:	6a 00                	push   0x0
c001e605:	6a 2f                	push   0x2f
c001e607:	e9 1a 00 00 00       	jmp    c001e626 <int_common_stub>

c001e60c <irq1>:
c001e60c:	fa                   	cli    
c001e60d:	6a 00                	push   0x0
c001e60f:	6a 21                	push   0x21
c001e611:	eb 13                	jmp    c001e626 <int_common_stub>

c001e613 <irq2>:
c001e613:	fa                   	cli    
c001e614:	6a 00                	push   0x0
c001e616:	6a 22                	push   0x22
c001e618:	eb 0c                	jmp    c001e626 <int_common_stub>

c001e61a <isr96>:
c001e61a:	6a 00                	push   0x0
c001e61c:	6a 60                	push   0x60
c001e61e:	fb                   	sti    
c001e61f:	eb 37                	jmp    c001e658 <syscall_common_stub>

c001e621 <irq0>:
c001e621:	fa                   	cli    
c001e622:	6a 00                	push   0x0
c001e624:	6a 20                	push   0x20

c001e626 <int_common_stub>:
c001e626:	60                   	pusha  
c001e627:	1e                   	push   ds
c001e628:	06                   	push   es
c001e629:	0f a0                	push   fs
c001e62b:	0f a8                	push   gs
c001e62d:	66 b8 10 00          	mov    ax,0x10
c001e631:	66 8e d8             	mov    ds,ax
c001e634:	66 8e c0             	mov    es,ax
c001e637:	66 8e e0             	mov    fs,ax
c001e63a:	66 8e e8             	mov    gs,ax
c001e63d:	54                   	push   esp
c001e63e:	fc                   	cld    
c001e63f:	e8 00 df fe ff       	call   c000c544 <int_handler>
c001e644:	81 c4 04 00 00 00    	add    esp,0x4
c001e64a:	0f a9                	pop    gs
c001e64c:	0f a1                	pop    fs
c001e64e:	07                   	pop    es
c001e64f:	1f                   	pop    ds
c001e650:	61                   	popa   
c001e651:	81 c4 08 00 00 00    	add    esp,0x8
c001e657:	cf                   	iret   

c001e658 <syscall_common_stub>:
c001e658:	60                   	pusha  
c001e659:	1e                   	push   ds
c001e65a:	06                   	push   es
c001e65b:	0f a0                	push   fs
c001e65d:	0f a8                	push   gs
c001e65f:	66 b8 10 00          	mov    ax,0x10
c001e663:	66 8e d8             	mov    ds,ax
c001e666:	66 8e c0             	mov    es,ax
c001e669:	66 8e e0             	mov    fs,ax
c001e66c:	66 8e e8             	mov    gs,ax
c001e66f:	54                   	push   esp
c001e670:	fc                   	cld    
c001e671:	e8 ce de fe ff       	call   c000c544 <int_handler>
c001e676:	81 c4 04 00 00 00    	add    esp,0x4
c001e67c:	0f a9                	pop    gs
c001e67e:	0f a1                	pop    fs
c001e680:	07                   	pop    es
c001e681:	1f                   	pop    ds
c001e682:	e8 9f 2b ff ff       	call   c0011226 <KiCheckSignalZ>
c001e687:	3d 00 00 00 00       	cmp    eax,0x0
c001e68c:	0f 84 c0 00 00 00    	je     c001e752 <skipSignals>
c001e692:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e697:	61                   	popa   
c001e698:	53                   	push   ebx
c001e699:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e69f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e6a2:	5b                   	pop    ebx
c001e6a3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e6a8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e6ab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e6ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6b1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e6b4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e6b7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e6ba:	81 c4 08 00 00 00    	add    esp,0x8
c001e6c0:	5e                   	pop    esi
c001e6c1:	5b                   	pop    ebx
c001e6c2:	59                   	pop    ecx
c001e6c3:	5a                   	pop    edx
c001e6c4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e6c7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e6ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e6cd:	52                   	push   edx
c001e6ce:	51                   	push   ecx
c001e6cf:	53                   	push   ebx
c001e6d0:	56                   	push   esi
c001e6d1:	81 ec 08 00 00 00    	sub    esp,0x8
c001e6d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e6da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e6dd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e6e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e6e6:	60                   	pusha  
c001e6e7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e6ed:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e6f0:	89 e3                	mov    ebx,esp
c001e6f2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e6f5:	52                   	push   edx
c001e6f6:	68 16 e7 01 c0       	push   0xc001e716
c001e6fb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e6fe:	89 dc                	mov    esp,ebx
c001e700:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e703:	68 23 00 00 00       	push   0x23
c001e708:	51                   	push   ecx
c001e709:	68 02 02 00 00       	push   0x202
c001e70e:	68 1b 00 00 00       	push   0x1b
c001e713:	ff 36                	push   DWORD PTR [esi]
c001e715:	cf                   	iret   

c001e716 <finishSignal>:
c001e716:	cd 0f                	int    0xf

c001e718 <finishSignal2>:
c001e718:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e71e:	e8 80 2b ff ff       	call   c00112a3 <KiFinishSignalZ>
c001e723:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e729:	68 23 00 00 00       	push   0x23
c001e72e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e731:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e734:	68 1b 00 00 00       	push   0x1b
c001e739:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e73c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e73f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e742:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e745:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e748:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e74b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e74e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e751:	cf                   	iret   

c001e752 <skipSignals>:
c001e752:	61                   	popa   
c001e753:	81 c4 08 00 00 00    	add    esp,0x8
c001e759:	cf                   	iret   
c001e75a:	90                   	nop
c001e75b:	90                   	nop

c001e75c <irq16>:
c001e75c:	fa                   	cli    
c001e75d:	6a 00                	push   0x0
c001e75f:	6a 30                	push   0x30
c001e761:	e9 c0 fe ff ff       	jmp    c001e626 <int_common_stub>

c001e766 <irq17>:
c001e766:	fa                   	cli    
c001e767:	6a 00                	push   0x0
c001e769:	6a 31                	push   0x31
c001e76b:	e9 b6 fe ff ff       	jmp    c001e626 <int_common_stub>

c001e770 <irq18>:
c001e770:	fa                   	cli    
c001e771:	6a 00                	push   0x0
c001e773:	6a 32                	push   0x32
c001e775:	e9 ac fe ff ff       	jmp    c001e626 <int_common_stub>

c001e77a <irq19>:
c001e77a:	fa                   	cli    
c001e77b:	6a 00                	push   0x0
c001e77d:	6a 33                	push   0x33
c001e77f:	e9 a2 fe ff ff       	jmp    c001e626 <int_common_stub>

c001e784 <irq20>:
c001e784:	fa                   	cli    
c001e785:	6a 00                	push   0x0
c001e787:	6a 34                	push   0x34
c001e789:	e9 98 fe ff ff       	jmp    c001e626 <int_common_stub>

c001e78e <irq21>:
c001e78e:	fa                   	cli    
c001e78f:	6a 00                	push   0x0
c001e791:	6a 35                	push   0x35
c001e793:	e9 8e fe ff ff       	jmp    c001e626 <int_common_stub>

c001e798 <irq22>:
c001e798:	fa                   	cli    
c001e799:	6a 00                	push   0x0
c001e79b:	6a 36                	push   0x36
c001e79d:	e9 84 fe ff ff       	jmp    c001e626 <int_common_stub>

c001e7a2 <irq23>:
c001e7a2:	fa                   	cli    
c001e7a3:	6a 00                	push   0x0
c001e7a5:	6a 37                	push   0x37
c001e7a7:	e9 7a fe ff ff       	jmp    c001e626 <int_common_stub>
c001e7ac:	66 90                	xchg   ax,ax
c001e7ae:	66 90                	xchg   ax,ax

c001e7b0 <i386GetRDRAND>:
c001e7b0:	b9 64 00 00 00       	mov    ecx,0x64

c001e7b5 <retry>:
c001e7b5:	0f c7 f0             	rdrand eax
c001e7b8:	72 05                	jb     c001e7bf <retry.done>
c001e7ba:	e2 f9                	loop   c001e7b5 <retry>

c001e7bc <retry.fail>:
c001e7bc:	31 c0                	xor    eax,eax
c001e7be:	c3                   	ret    

c001e7bf <retry.done>:
c001e7bf:	c3                   	ret    

c001e7c0 <absolutelyNoChanceInHell>:
c001e7c0:	b8 01 00 00 00       	mov    eax,0x1
c001e7c5:	0f a2                	cpuid  
c001e7c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e7cd:	74 06                	je     c001e7d5 <sseDetect.noSSE>
c001e7cf:	b8 01 00 00 00       	mov    eax,0x1
c001e7d4:	c3                   	ret    

c001e7d5 <sseDetect.noSSE>:
c001e7d5:	31 c0                	xor    eax,eax
c001e7d7:	c3                   	ret    

c001e7d8 <sseSave>:
c001e7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7dc:	0f ae 00             	fxsave [eax]
c001e7df:	c3                   	ret    

c001e7e0 <sseLoad>:
c001e7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7e4:	0f ae 08             	fxrstor [eax]
c001e7e7:	c3                   	ret    

c001e7e8 <sseInit>:
c001e7e8:	e8 42 00 00 00       	call   c001e82f <x87Init>
c001e7ed:	0f 20 e0             	mov    eax,cr4
c001e7f0:	66 0d 00 06          	or     ax,0x600
c001e7f4:	0f 22 e0             	mov    cr4,eax
c001e7f7:	c3                   	ret    

c001e7f8 <sseClose>:
c001e7f8:	c3                   	ret    
c001e7f9:	66 90                	xchg   ax,ax
c001e7fb:	66 90                	xchg   ax,ax
c001e7fd:	66 90                	xchg   ax,ax
c001e7ff:	90                   	nop

c001e800 <value_37F>:
c001e800:	7f 03                	jg     c001e805 <value_37A+0x1>

c001e802 <value_37E>:
c001e802:	7e 03                	jle    c001e807 <x87Detect+0x1>

c001e804 <value_37A>:
c001e804:	7a 03                	jp     c001e809 <x87Detect+0x3>

c001e806 <x87Detect>:
c001e806:	b8 01 00 00 00       	mov    eax,0x1
c001e80b:	0f a2                	cpuid  
c001e80d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e813:	74 06                	je     c001e81b <x87Detect.nox87>
c001e815:	b8 01 00 00 00       	mov    eax,0x1
c001e81a:	c3                   	ret    

c001e81b <x87Detect.nox87>:
c001e81b:	b8 00 00 00 00       	mov    eax,0x0
c001e820:	c3                   	ret    

c001e821 <x87Save>:
c001e821:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e825:	dd 30                	fnsave [eax]
c001e827:	c3                   	ret    

c001e828 <x87Load>:
c001e828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e82c:	dd 20                	frstor [eax]
c001e82e:	c3                   	ret    

c001e82f <x87Init>:
c001e82f:	0f 20 c0             	mov    eax,cr0
c001e832:	66 25 fb ff          	and    ax,0xfffb
c001e836:	66 0d 22 00          	or     ax,0x22
c001e83a:	0f 22 c0             	mov    cr0,eax
c001e83d:	db e3                	fninit 
c001e83f:	0f 06                	clts   
c001e841:	d9 2d 04 e8 01 c0    	fldcw  WORD PTR ds:0xc001e804
c001e847:	c3                   	ret    

c001e848 <x87Close>:
c001e848:	c3                   	ret    
c001e849:	66 90                	xchg   ax,ax
c001e84b:	90                   	nop

c001e84c <__do_global_ctors_aux>:
c001e84c:	a1 00 f8 01 c0       	mov    eax,ds:0xc001f800
c001e851:	83 f8 ff             	cmp    eax,0xffffffff
c001e854:	74 1a                	je     c001e870 <__do_global_ctors_aux+0x24>
c001e856:	55                   	push   ebp
c001e857:	89 e5                	mov    ebp,esp
c001e859:	53                   	push   ebx
c001e85a:	52                   	push   edx
c001e85b:	bb 00 f8 01 c0       	mov    ebx,0xc001f800
c001e860:	ff d0                	call   eax
c001e862:	83 eb 04             	sub    ebx,0x4
c001e865:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e867:	83 f8 ff             	cmp    eax,0xffffffff
c001e86a:	75 f4                	jne    c001e860 <__do_global_ctors_aux+0x14>
c001e86c:	58                   	pop    eax
c001e86d:	5b                   	pop    ebx
c001e86e:	5d                   	pop    ebp
c001e86f:	c3                   	ret    
c001e870:	c3                   	ret    
c001e871:	66 90                	xchg   ax,ax
c001e873:	90                   	nop

c001e874 <__divdi3>:
c001e874:	55                   	push   ebp
c001e875:	57                   	push   edi
c001e876:	56                   	push   esi
c001e877:	53                   	push   ebx
c001e878:	83 ec 1c             	sub    esp,0x1c
c001e87b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e87f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e883:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e886:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e88a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e88e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e892:	85 db                	test   ebx,ebx
c001e894:	0f 88 8e 00 00 00    	js     c001e928 <__divdi3+0xb4>
c001e89a:	89 dd                	mov    ebp,ebx
c001e89c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e8a4:	89 d3                	mov    ebx,edx
c001e8a6:	85 d2                	test   edx,edx
c001e8a8:	79 0d                	jns    c001e8b7 <__divdi3+0x43>
c001e8aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e8ae:	f7 d8                	neg    eax
c001e8b0:	83 d2 00             	adc    edx,0x0
c001e8b3:	f7 da                	neg    edx
c001e8b5:	89 d3                	mov    ebx,edx
c001e8b7:	89 c7                	mov    edi,eax
c001e8b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e8bc:	85 db                	test   ebx,ebx
c001e8be:	75 48                	jne    c001e908 <__divdi3+0x94>
c001e8c0:	39 ef                	cmp    edi,ebp
c001e8c2:	76 24                	jbe    c001e8e8 <__divdi3+0x74>
c001e8c4:	89 ea                	mov    edx,ebp
c001e8c6:	f7 f7                	div    edi
c001e8c8:	89 c1                	mov    ecx,eax
c001e8ca:	31 f6                	xor    esi,esi
c001e8cc:	89 c8                	mov    eax,ecx
c001e8ce:	89 f2                	mov    edx,esi
c001e8d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e8d4:	85 c9                	test   ecx,ecx
c001e8d6:	74 07                	je     c001e8df <__divdi3+0x6b>
c001e8d8:	f7 d8                	neg    eax
c001e8da:	83 d2 00             	adc    edx,0x0
c001e8dd:	f7 da                	neg    edx
c001e8df:	83 c4 1c             	add    esp,0x1c
c001e8e2:	5b                   	pop    ebx
c001e8e3:	5e                   	pop    esi
c001e8e4:	5f                   	pop    edi
c001e8e5:	5d                   	pop    ebp
c001e8e6:	c3                   	ret    
c001e8e7:	90                   	nop
c001e8e8:	85 ff                	test   edi,edi
c001e8ea:	75 0b                	jne    c001e8f7 <__divdi3+0x83>
c001e8ec:	b8 01 00 00 00       	mov    eax,0x1
c001e8f1:	31 d2                	xor    edx,edx
c001e8f3:	f7 f3                	div    ebx
c001e8f5:	89 c7                	mov    edi,eax
c001e8f7:	31 d2                	xor    edx,edx
c001e8f9:	89 e8                	mov    eax,ebp
c001e8fb:	f7 f7                	div    edi
c001e8fd:	89 c6                	mov    esi,eax
c001e8ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e902:	f7 f7                	div    edi
c001e904:	89 c1                	mov    ecx,eax
c001e906:	eb c4                	jmp    c001e8cc <__divdi3+0x58>
c001e908:	39 eb                	cmp    ebx,ebp
c001e90a:	77 3c                	ja     c001e948 <__divdi3+0xd4>
c001e90c:	0f bd f3             	bsr    esi,ebx
c001e90f:	83 f6 1f             	xor    esi,0x1f
c001e912:	75 40                	jne    c001e954 <__divdi3+0xe0>
c001e914:	39 eb                	cmp    ebx,ebp
c001e916:	72 09                	jb     c001e921 <__divdi3+0xad>
c001e918:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e91b:	0f 87 97 00 00 00    	ja     c001e9b8 <__divdi3+0x144>
c001e921:	b9 01 00 00 00       	mov    ecx,0x1
c001e926:	eb a4                	jmp    c001e8cc <__divdi3+0x58>
c001e928:	f7 d9                	neg    ecx
c001e92a:	83 d3 00             	adc    ebx,0x0
c001e92d:	f7 db                	neg    ebx
c001e92f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e932:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e936:	89 dd                	mov    ebp,ebx
c001e938:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e940:	e9 5f ff ff ff       	jmp    c001e8a4 <__divdi3+0x30>
c001e945:	8d 76 00             	lea    esi,[esi+0x0]
c001e948:	31 f6                	xor    esi,esi
c001e94a:	31 c9                	xor    ecx,ecx
c001e94c:	e9 7b ff ff ff       	jmp    c001e8cc <__divdi3+0x58>
c001e951:	8d 76 00             	lea    esi,[esi+0x0]
c001e954:	b8 20 00 00 00       	mov    eax,0x20
c001e959:	29 f0                	sub    eax,esi
c001e95b:	89 f1                	mov    ecx,esi
c001e95d:	d3 e3                	shl    ebx,cl
c001e95f:	89 fa                	mov    edx,edi
c001e961:	88 c1                	mov    cl,al
c001e963:	d3 ea                	shr    edx,cl
c001e965:	09 da                	or     edx,ebx
c001e967:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e96b:	89 f1                	mov    ecx,esi
c001e96d:	d3 e7                	shl    edi,cl
c001e96f:	89 eb                	mov    ebx,ebp
c001e971:	88 c1                	mov    cl,al
c001e973:	d3 eb                	shr    ebx,cl
c001e975:	89 f1                	mov    ecx,esi
c001e977:	d3 e5                	shl    ebp,cl
c001e979:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e97c:	88 c1                	mov    cl,al
c001e97e:	d3 ea                	shr    edx,cl
c001e980:	09 d5                	or     ebp,edx
c001e982:	89 e8                	mov    eax,ebp
c001e984:	89 da                	mov    edx,ebx
c001e986:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e98a:	89 d3                	mov    ebx,edx
c001e98c:	89 c5                	mov    ebp,eax
c001e98e:	f7 e7                	mul    edi
c001e990:	39 d3                	cmp    ebx,edx
c001e992:	72 18                	jb     c001e9ac <__divdi3+0x138>
c001e994:	74 0a                	je     c001e9a0 <__divdi3+0x12c>
c001e996:	89 e9                	mov    ecx,ebp
c001e998:	31 f6                	xor    esi,esi
c001e99a:	e9 2d ff ff ff       	jmp    c001e8cc <__divdi3+0x58>
c001e99f:	90                   	nop
c001e9a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e9a3:	89 f1                	mov    ecx,esi
c001e9a5:	d3 e7                	shl    edi,cl
c001e9a7:	39 c7                	cmp    edi,eax
c001e9a9:	73 eb                	jae    c001e996 <__divdi3+0x122>
c001e9ab:	90                   	nop
c001e9ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e9af:	31 f6                	xor    esi,esi
c001e9b1:	e9 16 ff ff ff       	jmp    c001e8cc <__divdi3+0x58>
c001e9b6:	66 90                	xchg   ax,ax
c001e9b8:	31 c9                	xor    ecx,ecx
c001e9ba:	e9 0d ff ff ff       	jmp    c001e8cc <__divdi3+0x58>
c001e9bf:	90                   	nop

c001e9c0 <__moddi3>:
c001e9c0:	55                   	push   ebp
c001e9c1:	57                   	push   edi
c001e9c2:	56                   	push   esi
c001e9c3:	53                   	push   ebx
c001e9c4:	83 ec 2c             	sub    esp,0x2c
c001e9c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e9cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e9cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e9d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e9d7:	85 db                	test   ebx,ebx
c001e9d9:	0f 88 85 00 00 00    	js     c001ea64 <__moddi3+0xa4>
c001e9df:	89 de                	mov    esi,ebx
c001e9e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e9e9:	89 d7                	mov    edi,edx
c001e9eb:	85 d2                	test   edx,edx
c001e9ed:	79 09                	jns    c001e9f8 <__moddi3+0x38>
c001e9ef:	f7 d8                	neg    eax
c001e9f1:	83 d2 00             	adc    edx,0x0
c001e9f4:	f7 da                	neg    edx
c001e9f6:	89 d7                	mov    edi,edx
c001e9f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9fc:	89 cd                	mov    ebp,ecx
c001e9fe:	85 ff                	test   edi,edi
c001ea00:	75 52                	jne    c001ea54 <__moddi3+0x94>
c001ea02:	89 c3                	mov    ebx,eax
c001ea04:	39 f0                	cmp    eax,esi
c001ea06:	76 24                	jbe    c001ea2c <__moddi3+0x6c>
c001ea08:	89 c8                	mov    eax,ecx
c001ea0a:	89 f2                	mov    edx,esi
c001ea0c:	f7 f3                	div    ebx
c001ea0e:	89 d6                	mov    esi,edx
c001ea10:	89 f0                	mov    eax,esi
c001ea12:	31 d2                	xor    edx,edx
c001ea14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea18:	85 c9                	test   ecx,ecx
c001ea1a:	74 07                	je     c001ea23 <__moddi3+0x63>
c001ea1c:	f7 d8                	neg    eax
c001ea1e:	83 d2 00             	adc    edx,0x0
c001ea21:	f7 da                	neg    edx
c001ea23:	83 c4 2c             	add    esp,0x2c
c001ea26:	5b                   	pop    ebx
c001ea27:	5e                   	pop    esi
c001ea28:	5f                   	pop    edi
c001ea29:	5d                   	pop    ebp
c001ea2a:	c3                   	ret    
c001ea2b:	90                   	nop
c001ea2c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea30:	85 db                	test   ebx,ebx
c001ea32:	75 0d                	jne    c001ea41 <__moddi3+0x81>
c001ea34:	b8 01 00 00 00       	mov    eax,0x1
c001ea39:	31 d2                	xor    edx,edx
c001ea3b:	f7 f7                	div    edi
c001ea3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea41:	89 f0                	mov    eax,esi
c001ea43:	31 d2                	xor    edx,edx
c001ea45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ea49:	f7 f7                	div    edi
c001ea4b:	89 e8                	mov    eax,ebp
c001ea4d:	f7 f7                	div    edi
c001ea4f:	89 d6                	mov    esi,edx
c001ea51:	eb bd                	jmp    c001ea10 <__moddi3+0x50>
c001ea53:	90                   	nop
c001ea54:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ea58:	39 f7                	cmp    edi,esi
c001ea5a:	76 20                	jbe    c001ea7c <__moddi3+0xbc>
c001ea5c:	89 c8                	mov    eax,ecx
c001ea5e:	89 f2                	mov    edx,esi
c001ea60:	eb b2                	jmp    c001ea14 <__moddi3+0x54>
c001ea62:	66 90                	xchg   ax,ax
c001ea64:	f7 d9                	neg    ecx
c001ea66:	83 d3 00             	adc    ebx,0x0
c001ea69:	f7 db                	neg    ebx
c001ea6b:	89 de                	mov    esi,ebx
c001ea6d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001ea75:	e9 6f ff ff ff       	jmp    c001e9e9 <__moddi3+0x29>
c001ea7a:	66 90                	xchg   ax,ax
c001ea7c:	0f bd c7             	bsr    eax,edi
c001ea7f:	83 f0 1f             	xor    eax,0x1f
c001ea82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ea86:	75 24                	jne    c001eaac <__moddi3+0xec>
c001ea88:	39 f7                	cmp    edi,esi
c001ea8a:	72 06                	jb     c001ea92 <__moddi3+0xd2>
c001ea8c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001ea90:	77 0c                	ja     c001ea9e <__moddi3+0xde>
c001ea92:	89 e9                	mov    ecx,ebp
c001ea94:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001ea98:	19 fe                	sbb    esi,edi
c001ea9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ea9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eaa2:	89 f2                	mov    edx,esi
c001eaa4:	e9 6b ff ff ff       	jmp    c001ea14 <__moddi3+0x54>
c001eaa9:	8d 76 00             	lea    esi,[esi+0x0]
c001eaac:	b8 20 00 00 00       	mov    eax,0x20
c001eab1:	89 c2                	mov    edx,eax
c001eab3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eab7:	29 da                	sub    edx,ebx
c001eab9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001eabd:	88 d9                	mov    cl,bl
c001eabf:	d3 e7                	shl    edi,cl
c001eac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eac5:	88 d1                	mov    cl,dl
c001eac7:	d3 e8                	shr    eax,cl
c001eac9:	09 c7                	or     edi,eax
c001eacb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001eacf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ead3:	89 d8                	mov    eax,ebx
c001ead5:	88 d9                	mov    cl,bl
c001ead7:	d3 e7                	shl    edi,cl
c001ead9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eadd:	89 f3                	mov    ebx,esi
c001eadf:	88 d1                	mov    cl,dl
c001eae1:	d3 eb                	shr    ebx,cl
c001eae3:	89 c7                	mov    edi,eax
c001eae5:	88 c1                	mov    cl,al
c001eae7:	d3 e6                	shl    esi,cl
c001eae9:	89 e8                	mov    eax,ebp
c001eaeb:	88 d1                	mov    cl,dl
c001eaed:	d3 e8                	shr    eax,cl
c001eaef:	09 f0                	or     eax,esi
c001eaf1:	89 f9                	mov    ecx,edi
c001eaf3:	d3 e5                	shl    ebp,cl
c001eaf5:	89 da                	mov    edx,ebx
c001eaf7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001eafb:	89 d3                	mov    ebx,edx
c001eafd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eb01:	89 c6                	mov    esi,eax
c001eb03:	89 d1                	mov    ecx,edx
c001eb05:	39 d3                	cmp    ebx,edx
c001eb07:	72 27                	jb     c001eb30 <__moddi3+0x170>
c001eb09:	74 21                	je     c001eb2c <__moddi3+0x16c>
c001eb0b:	29 f5                	sub    ebp,esi
c001eb0d:	19 cb                	sbb    ebx,ecx
c001eb0f:	89 de                	mov    esi,ebx
c001eb11:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001eb15:	d3 e6                	shl    esi,cl
c001eb17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001eb1b:	89 f9                	mov    ecx,edi
c001eb1d:	d3 ed                	shr    ebp,cl
c001eb1f:	09 ee                	or     esi,ebp
c001eb21:	89 f0                	mov    eax,esi
c001eb23:	d3 eb                	shr    ebx,cl
c001eb25:	89 da                	mov    edx,ebx
c001eb27:	e9 e8 fe ff ff       	jmp    c001ea14 <__moddi3+0x54>
c001eb2c:	39 c5                	cmp    ebp,eax
c001eb2e:	73 db                	jae    c001eb0b <__moddi3+0x14b>
c001eb30:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001eb34:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001eb38:	89 d1                	mov    ecx,edx
c001eb3a:	89 c6                	mov    esi,eax
c001eb3c:	eb cd                	jmp    c001eb0b <__moddi3+0x14b>
c001eb3e:	66 90                	xchg   ax,ax

c001eb40 <__udivdi3>:
c001eb40:	55                   	push   ebp
c001eb41:	57                   	push   edi
c001eb42:	56                   	push   esi
c001eb43:	53                   	push   ebx
c001eb44:	83 ec 1c             	sub    esp,0x1c
c001eb47:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001eb4b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eb4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eb53:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eb57:	85 d2                	test   edx,edx
c001eb59:	75 41                	jne    c001eb9c <__udivdi3+0x5c>
c001eb5b:	39 f7                	cmp    edi,esi
c001eb5d:	76 15                	jbe    c001eb74 <__udivdi3+0x34>
c001eb5f:	89 e8                	mov    eax,ebp
c001eb61:	89 f2                	mov    edx,esi
c001eb63:	f7 f7                	div    edi
c001eb65:	31 db                	xor    ebx,ebx
c001eb67:	89 da                	mov    edx,ebx
c001eb69:	83 c4 1c             	add    esp,0x1c
c001eb6c:	5b                   	pop    ebx
c001eb6d:	5e                   	pop    esi
c001eb6e:	5f                   	pop    edi
c001eb6f:	5d                   	pop    ebp
c001eb70:	c3                   	ret    
c001eb71:	8d 76 00             	lea    esi,[esi+0x0]
c001eb74:	89 f9                	mov    ecx,edi
c001eb76:	85 ff                	test   edi,edi
c001eb78:	75 0b                	jne    c001eb85 <__udivdi3+0x45>
c001eb7a:	b8 01 00 00 00       	mov    eax,0x1
c001eb7f:	31 d2                	xor    edx,edx
c001eb81:	f7 f7                	div    edi
c001eb83:	89 c1                	mov    ecx,eax
c001eb85:	31 d2                	xor    edx,edx
c001eb87:	89 f0                	mov    eax,esi
c001eb89:	f7 f1                	div    ecx
c001eb8b:	89 c3                	mov    ebx,eax
c001eb8d:	89 e8                	mov    eax,ebp
c001eb8f:	f7 f1                	div    ecx
c001eb91:	89 da                	mov    edx,ebx
c001eb93:	83 c4 1c             	add    esp,0x1c
c001eb96:	5b                   	pop    ebx
c001eb97:	5e                   	pop    esi
c001eb98:	5f                   	pop    edi
c001eb99:	5d                   	pop    ebp
c001eb9a:	c3                   	ret    
c001eb9b:	90                   	nop
c001eb9c:	39 f2                	cmp    edx,esi
c001eb9e:	77 1c                	ja     c001ebbc <__udivdi3+0x7c>
c001eba0:	0f bd da             	bsr    ebx,edx
c001eba3:	83 f3 1f             	xor    ebx,0x1f
c001eba6:	75 24                	jne    c001ebcc <__udivdi3+0x8c>
c001eba8:	39 f2                	cmp    edx,esi
c001ebaa:	72 08                	jb     c001ebb4 <__udivdi3+0x74>
c001ebac:	39 ef                	cmp    edi,ebp
c001ebae:	0f 87 84 00 00 00    	ja     c001ec38 <__udivdi3+0xf8>
c001ebb4:	b8 01 00 00 00       	mov    eax,0x1
c001ebb9:	eb ac                	jmp    c001eb67 <__udivdi3+0x27>
c001ebbb:	90                   	nop
c001ebbc:	31 db                	xor    ebx,ebx
c001ebbe:	31 c0                	xor    eax,eax
c001ebc0:	89 da                	mov    edx,ebx
c001ebc2:	83 c4 1c             	add    esp,0x1c
c001ebc5:	5b                   	pop    ebx
c001ebc6:	5e                   	pop    esi
c001ebc7:	5f                   	pop    edi
c001ebc8:	5d                   	pop    ebp
c001ebc9:	c3                   	ret    
c001ebca:	66 90                	xchg   ax,ax
c001ebcc:	b8 20 00 00 00       	mov    eax,0x20
c001ebd1:	29 d8                	sub    eax,ebx
c001ebd3:	88 d9                	mov    cl,bl
c001ebd5:	d3 e2                	shl    edx,cl
c001ebd7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ebdb:	89 fa                	mov    edx,edi
c001ebdd:	88 c1                	mov    cl,al
c001ebdf:	d3 ea                	shr    edx,cl
c001ebe1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ebe5:	09 d1                	or     ecx,edx
c001ebe7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ebeb:	88 d9                	mov    cl,bl
c001ebed:	d3 e7                	shl    edi,cl
c001ebef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ebf3:	89 f7                	mov    edi,esi
c001ebf5:	88 c1                	mov    cl,al
c001ebf7:	d3 ef                	shr    edi,cl
c001ebf9:	88 d9                	mov    cl,bl
c001ebfb:	d3 e6                	shl    esi,cl
c001ebfd:	89 ea                	mov    edx,ebp
c001ebff:	88 c1                	mov    cl,al
c001ec01:	d3 ea                	shr    edx,cl
c001ec03:	09 d6                	or     esi,edx
c001ec05:	89 f0                	mov    eax,esi
c001ec07:	89 fa                	mov    edx,edi
c001ec09:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ec0d:	89 d7                	mov    edi,edx
c001ec0f:	89 c6                	mov    esi,eax
c001ec11:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ec15:	39 d7                	cmp    edi,edx
c001ec17:	72 13                	jb     c001ec2c <__udivdi3+0xec>
c001ec19:	74 09                	je     c001ec24 <__udivdi3+0xe4>
c001ec1b:	89 f0                	mov    eax,esi
c001ec1d:	31 db                	xor    ebx,ebx
c001ec1f:	e9 43 ff ff ff       	jmp    c001eb67 <__udivdi3+0x27>
c001ec24:	88 d9                	mov    cl,bl
c001ec26:	d3 e5                	shl    ebp,cl
c001ec28:	39 c5                	cmp    ebp,eax
c001ec2a:	73 ef                	jae    c001ec1b <__udivdi3+0xdb>
c001ec2c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec2f:	31 db                	xor    ebx,ebx
c001ec31:	e9 31 ff ff ff       	jmp    c001eb67 <__udivdi3+0x27>
c001ec36:	66 90                	xchg   ax,ax
c001ec38:	31 c0                	xor    eax,eax
c001ec3a:	e9 28 ff ff ff       	jmp    c001eb67 <__udivdi3+0x27>
c001ec3f:	90                   	nop

c001ec40 <__umoddi3>:
c001ec40:	55                   	push   ebp
c001ec41:	57                   	push   edi
c001ec42:	56                   	push   esi
c001ec43:	53                   	push   ebx
c001ec44:	83 ec 1c             	sub    esp,0x1c
c001ec47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ec4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ec4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ec53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ec57:	89 da                	mov    edx,ebx
c001ec59:	85 c0                	test   eax,eax
c001ec5b:	75 37                	jne    c001ec94 <__umoddi3+0x54>
c001ec5d:	39 df                	cmp    edi,ebx
c001ec5f:	76 13                	jbe    c001ec74 <__umoddi3+0x34>
c001ec61:	89 f0                	mov    eax,esi
c001ec63:	f7 f7                	div    edi
c001ec65:	89 d0                	mov    eax,edx
c001ec67:	31 d2                	xor    edx,edx
c001ec69:	83 c4 1c             	add    esp,0x1c
c001ec6c:	5b                   	pop    ebx
c001ec6d:	5e                   	pop    esi
c001ec6e:	5f                   	pop    edi
c001ec6f:	5d                   	pop    ebp
c001ec70:	c3                   	ret    
c001ec71:	8d 76 00             	lea    esi,[esi+0x0]
c001ec74:	89 fd                	mov    ebp,edi
c001ec76:	85 ff                	test   edi,edi
c001ec78:	75 0b                	jne    c001ec85 <__umoddi3+0x45>
c001ec7a:	b8 01 00 00 00       	mov    eax,0x1
c001ec7f:	31 d2                	xor    edx,edx
c001ec81:	f7 f7                	div    edi
c001ec83:	89 c5                	mov    ebp,eax
c001ec85:	89 d8                	mov    eax,ebx
c001ec87:	31 d2                	xor    edx,edx
c001ec89:	f7 f5                	div    ebp
c001ec8b:	89 f0                	mov    eax,esi
c001ec8d:	f7 f5                	div    ebp
c001ec8f:	89 d0                	mov    eax,edx
c001ec91:	eb d4                	jmp    c001ec67 <__umoddi3+0x27>
c001ec93:	90                   	nop
c001ec94:	89 f1                	mov    ecx,esi
c001ec96:	39 d8                	cmp    eax,ebx
c001ec98:	76 0a                	jbe    c001eca4 <__umoddi3+0x64>
c001ec9a:	89 f0                	mov    eax,esi
c001ec9c:	83 c4 1c             	add    esp,0x1c
c001ec9f:	5b                   	pop    ebx
c001eca0:	5e                   	pop    esi
c001eca1:	5f                   	pop    edi
c001eca2:	5d                   	pop    ebp
c001eca3:	c3                   	ret    
c001eca4:	0f bd e8             	bsr    ebp,eax
c001eca7:	83 f5 1f             	xor    ebp,0x1f
c001ecaa:	75 1c                	jne    c001ecc8 <__umoddi3+0x88>
c001ecac:	39 d8                	cmp    eax,ebx
c001ecae:	72 04                	jb     c001ecb4 <__umoddi3+0x74>
c001ecb0:	39 f7                	cmp    edi,esi
c001ecb2:	77 08                	ja     c001ecbc <__umoddi3+0x7c>
c001ecb4:	89 da                	mov    edx,ebx
c001ecb6:	29 fe                	sub    esi,edi
c001ecb8:	19 c2                	sbb    edx,eax
c001ecba:	89 f1                	mov    ecx,esi
c001ecbc:	89 c8                	mov    eax,ecx
c001ecbe:	83 c4 1c             	add    esp,0x1c
c001ecc1:	5b                   	pop    ebx
c001ecc2:	5e                   	pop    esi
c001ecc3:	5f                   	pop    edi
c001ecc4:	5d                   	pop    ebp
c001ecc5:	c3                   	ret    
c001ecc6:	66 90                	xchg   ax,ax
c001ecc8:	ba 20 00 00 00       	mov    edx,0x20
c001eccd:	29 ea                	sub    edx,ebp
c001eccf:	89 e9                	mov    ecx,ebp
c001ecd1:	d3 e0                	shl    eax,cl
c001ecd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ecd7:	89 f8                	mov    eax,edi
c001ecd9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ecdd:	88 d1                	mov    cl,dl
c001ecdf:	d3 e8                	shr    eax,cl
c001ece1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ece5:	09 c1                	or     ecx,eax
c001ece7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eceb:	89 e9                	mov    ecx,ebp
c001eced:	d3 e7                	shl    edi,cl
c001ecef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ecf3:	89 d8                	mov    eax,ebx
c001ecf5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ecf9:	88 d1                	mov    cl,dl
c001ecfb:	d3 e8                	shr    eax,cl
c001ecfd:	89 c7                	mov    edi,eax
c001ecff:	89 e9                	mov    ecx,ebp
c001ed01:	d3 e3                	shl    ebx,cl
c001ed03:	89 f0                	mov    eax,esi
c001ed05:	88 d1                	mov    cl,dl
c001ed07:	d3 e8                	shr    eax,cl
c001ed09:	09 d8                	or     eax,ebx
c001ed0b:	89 e9                	mov    ecx,ebp
c001ed0d:	d3 e6                	shl    esi,cl
c001ed0f:	89 f3                	mov    ebx,esi
c001ed11:	89 fa                	mov    edx,edi
c001ed13:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ed17:	89 d1                	mov    ecx,edx
c001ed19:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ed1d:	89 c6                	mov    esi,eax
c001ed1f:	89 d7                	mov    edi,edx
c001ed21:	39 d1                	cmp    ecx,edx
c001ed23:	72 27                	jb     c001ed4c <__umoddi3+0x10c>
c001ed25:	74 21                	je     c001ed48 <__umoddi3+0x108>
c001ed27:	89 ca                	mov    edx,ecx
c001ed29:	29 f3                	sub    ebx,esi
c001ed2b:	19 fa                	sbb    edx,edi
c001ed2d:	89 d0                	mov    eax,edx
c001ed2f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ed33:	d3 e0                	shl    eax,cl
c001ed35:	89 e9                	mov    ecx,ebp
c001ed37:	d3 eb                	shr    ebx,cl
c001ed39:	09 d8                	or     eax,ebx
c001ed3b:	d3 ea                	shr    edx,cl
c001ed3d:	83 c4 1c             	add    esp,0x1c
c001ed40:	5b                   	pop    ebx
c001ed41:	5e                   	pop    esi
c001ed42:	5f                   	pop    edi
c001ed43:	5d                   	pop    ebp
c001ed44:	c3                   	ret    
c001ed45:	8d 76 00             	lea    esi,[esi+0x0]
c001ed48:	39 c3                	cmp    ebx,eax
c001ed4a:	73 db                	jae    c001ed27 <__umoddi3+0xe7>
c001ed4c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ed50:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ed54:	89 d7                	mov    edi,edx
c001ed56:	89 c6                	mov    esi,eax
c001ed58:	eb cd                	jmp    c001ed27 <__umoddi3+0xe7>

Disassembly of section .init:

c001ed5a <_init>:
c001ed5a:	55                   	push   ebp
c001ed5b:	89 e5                	mov    ebp,esp
c001ed5d:	e8 92 13 fe ff       	call   c00000f4 <frame_dummy>
c001ed62:	e8 e5 fa ff ff       	call   c001e84c <__do_global_ctors_aux>
c001ed67:	5d                   	pop    ebp
c001ed68:	c3                   	ret    

Disassembly of section .fini:

c001ed69 <_fini>:
c001ed69:	55                   	push   ebp
c001ed6a:	89 e5                	mov    ebp,esp
c001ed6c:	e8 13 13 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ed71:	5d                   	pop    ebp
c001ed72:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ed74 <Computer::~Computer()>:
c001ed74:	83 ec 0c             	sub    esp,0xc
c001ed77:	ba 94 00 02 c0       	mov    edx,0xc0020094
c001ed7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed80:	89 10                	mov    DWORD PTR [eax],edx
c001ed82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed86:	83 ec 0c             	sub    esp,0xc
c001ed89:	50                   	push   eax
c001ed8a:	e8 0d d2 fe ff       	call   c000bf9c <Device::~Device()>
c001ed8f:	83 c4 10             	add    esp,0x10
c001ed92:	90                   	nop
c001ed93:	83 c4 0c             	add    esp,0xc
c001ed96:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ed98 <Computer::~Computer()>:
c001ed98:	83 ec 0c             	sub    esp,0xc
c001ed9b:	83 ec 0c             	sub    esp,0xc
c001ed9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eda2:	e8 cd ff ff ff       	call   c001ed74 <Computer::~Computer()>
c001eda7:	83 c4 10             	add    esp,0x10
c001edaa:	83 ec 08             	sub    esp,0x8
c001edad:	68 70 01 00 00       	push   0x170
c001edb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edb6:	e8 51 ba fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001edbb:	83 c4 10             	add    esp,0x10
c001edbe:	83 c4 0c             	add    esp,0xc
c001edc1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001edc2 <idleCommon()>:
c001edc2:	83 ec 0c             	sub    esp,0xc
c001edc5:	fa                   	cli    
c001edc6:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001edcc:	e8 ff 66 ff ff       	call   c00154d0 <schedule()>
c001edd1:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001edd6:	48                   	dec    eax
c001edd7:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001eddc:	75 01                	jne    c001eddf <idleCommon()+0x1d>
c001edde:	fb                   	sti    
c001eddf:	83 c4 0c             	add    esp,0xc
c001ede2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ede4 <LinkedList<UnixFile>::~LinkedList()>:
c001ede4:	90                   	nop
c001ede5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ede6 <LinkedList<UnixFile>::LinkedList()>:
c001ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee26:	90                   	nop
c001ee27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ee28 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ee28:	83 ec 0c             	sub    esp,0xc
c001ee2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee30:	75 10                	jne    c001ee42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ee32:	83 ec 0c             	sub    esp,0xc
c001ee35:	68 a8 02 02 c0       	push   0xc00202a8
c001ee3a:	e8 d2 1d ff ff       	call   c0010c11 <KePanic(char const*)>
c001ee3f:	83 c4 10             	add    esp,0x10
c001ee42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee46:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee48:	85 c0                	test   eax,eax
c001ee4a:	74 34                	je     c001ee80 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee53:	85 c0                	test   eax,eax
c001ee55:	74 29                	je     c001ee80 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ee57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee6d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee7e:	eb 65                	jmp    c001eee5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ee80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee86:	85 c0                	test   eax,eax
c001ee88:	75 4b                	jne    c001eed5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ee8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee91:	85 c0                	test   eax,eax
c001ee93:	75 40                	jne    c001eed5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ee95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee9d:	89 10                	mov    DWORD PTR [eax],edx
c001ee9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eea7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eeb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eeb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eebf:	85 c0                	test   eax,eax
c001eec1:	74 22                	je     c001eee5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eec3:	83 ec 0c             	sub    esp,0xc
c001eec6:	68 ca 02 02 c0       	push   0xc00202ca
c001eecb:	e8 41 1d ff ff       	call   c0010c11 <KePanic(char const*)>
c001eed0:	83 c4 10             	add    esp,0x10
c001eed3:	eb 10                	jmp    c001eee5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eed5:	83 ec 0c             	sub    esp,0xc
c001eed8:	68 d4 02 02 c0       	push   0xc00202d4
c001eedd:	e8 2f 1d ff ff       	call   c0010c11 <KePanic(char const*)>
c001eee2:	83 c4 10             	add    esp,0x10
c001eee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeec:	8d 50 01             	lea    edx,[eax+0x1]
c001eeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eef6:	90                   	nop
c001eef7:	83 c4 0c             	add    esp,0xc
c001eefa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001eefc <LinkedList<UnixFile>::getFirstElement()>:
c001eefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ef04 <LinkedList<UnixFile>::removeFirst()>:
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef0d:	85 c0                	test   eax,eax
c001ef0f:	75 12                	jne    c001ef23 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ef11:	83 ec 0c             	sub    esp,0xc
c001ef14:	68 e0 02 02 c0       	push   0xc00202e0
c001ef19:	e8 f3 1c ff ff       	call   c0010c11 <KePanic(char const*)>
c001ef1e:	83 c4 10             	add    esp,0x10
c001ef21:	eb 7e                	jmp    c001efa1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ef23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef2d:	85 c0                	test   eax,eax
c001ef2f:	74 10                	je     c001ef41 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ef31:	83 ec 0c             	sub    esp,0xc
c001ef34:	68 2b 03 02 c0       	push   0xc002032b
c001ef39:	e8 d3 1c ff ff       	call   c0010c11 <KePanic(char const*)>
c001ef3e:	83 c4 10             	add    esp,0x10
c001ef41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef45:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef4a:	85 c0                	test   eax,eax
c001ef4c:	75 33                	jne    c001ef81 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ef4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef6a:	83 f8 01             	cmp    eax,0x1
c001ef6d:	74 21                	je     c001ef90 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ef6f:	83 ec 0c             	sub    esp,0xc
c001ef72:	68 04 03 02 c0       	push   0xc0020304
c001ef77:	e8 95 1c ff ff       	call   c0010c11 <KePanic(char const*)>
c001ef7c:	83 c4 10             	add    esp,0x10
c001ef7f:	eb 0f                	jmp    c001ef90 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ef81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef87:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8e:	89 10                	mov    DWORD PTR [eax],edx
c001ef90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef97:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001efa1:	83 c4 0c             	add    esp,0xc
c001efa4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001efa6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001efa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001efaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001efae <DriverlessDevice::~DriverlessDevice()>:
c001efae:	ba 5c 0d 02 c0       	mov    edx,0xc0020d5c
c001efb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb7:	89 10                	mov    DWORD PTR [eax],edx
c001efb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbd:	50                   	push   eax
c001efbe:	e8 d9 cf fe ff       	call   c000bf9c <Device::~Device()>
c001efc3:	83 c4 04             	add    esp,0x4
c001efc6:	90                   	nop
c001efc7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001efc8 <DriverlessDevice::~DriverlessDevice()>:
c001efc8:	83 ec 0c             	sub    esp,0xc
c001efcb:	83 ec 0c             	sub    esp,0xc
c001efce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd2:	e8 d7 ff ff ff       	call   c001efae <DriverlessDevice::~DriverlessDevice()>
c001efd7:	83 c4 10             	add    esp,0x10
c001efda:	83 ec 08             	sub    esp,0x8
c001efdd:	68 58 01 00 00       	push   0x158
c001efe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe6:	e8 21 b8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001efeb:	83 c4 10             	add    esp,0x10
c001efee:	83 c4 0c             	add    esp,0xc
c001eff1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eff2 <LinkedList<Device>::addElement(Device*)>:
c001eff2:	83 ec 0c             	sub    esp,0xc
c001eff5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001effa:	75 10                	jne    c001f00c <LinkedList<Device>::addElement(Device*)+0x1a>
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	68 a8 02 02 c0       	push   0xc00202a8
c001f004:	e8 08 1c ff ff       	call   c0010c11 <KePanic(char const*)>
c001f009:	83 c4 10             	add    esp,0x10
c001f00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f010:	8b 00                	mov    eax,DWORD PTR [eax]
c001f012:	85 c0                	test   eax,eax
c001f014:	74 3a                	je     c001f050 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f01d:	85 c0                	test   eax,eax
c001f01f:	74 2f                	je     c001f050 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f025:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f028:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f02c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f036:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f03a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f044:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f04e:	eb 68                	jmp    c001f0b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f054:	8b 00                	mov    eax,DWORD PTR [eax]
c001f056:	85 c0                	test   eax,eax
c001f058:	75 4e                	jne    c001f0a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f061:	85 c0                	test   eax,eax
c001f063:	75 43                	jne    c001f0a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f069:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f06d:	89 10                	mov    DWORD PTR [eax],edx
c001f06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f077:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f081:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f092:	85 c0                	test   eax,eax
c001f094:	74 22                	je     c001f0b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f096:	83 ec 0c             	sub    esp,0xc
c001f099:	68 ca 02 02 c0       	push   0xc00202ca
c001f09e:	e8 6e 1b ff ff       	call   c0010c11 <KePanic(char const*)>
c001f0a3:	83 c4 10             	add    esp,0x10
c001f0a6:	eb 10                	jmp    c001f0b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	68 d4 02 02 c0       	push   0xc00202d4
c001f0b0:	e8 5c 1b ff ff       	call   c0010c11 <KePanic(char const*)>
c001f0b5:	83 c4 10             	add    esp,0x10
c001f0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0bf:	8d 50 01             	lea    edx,[eax+0x1]
c001f0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f0c9:	90                   	nop
c001f0ca:	83 c4 0c             	add    esp,0xc
c001f0cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f0ce <LinkedList<Device>::LinkedList()>:
c001f0ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f0e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f0ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f107:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f10e:	90                   	nop
c001f10f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f110 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f114:	8b 00                	mov    eax,DWORD PTR [eax]
c001f116:	85 c0                	test   eax,eax
c001f118:	75 0e                	jne    c001f128 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f11a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f11e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f121:	85 c0                	test   eax,eax
c001f123:	75 03                	jne    c001f128 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f125:	b0 01                	mov    al,0x1
c001f127:	c3                   	ret    
c001f128:	b0 00                	mov    al,0x0
c001f12a:	90                   	nop
c001f12b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f12c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f12c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f130:	8b 00                	mov    eax,DWORD PTR [eax]
c001f132:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f134 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f134:	83 ec 0c             	sub    esp,0xc
c001f137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f13d:	85 c0                	test   eax,eax
c001f13f:	75 17                	jne    c001f158 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f141:	83 ec 0c             	sub    esp,0xc
c001f144:	68 e0 02 02 c0       	push   0xc00202e0
c001f149:	e8 c3 1a ff ff       	call   c0010c11 <KePanic(char const*)>
c001f14e:	83 c4 10             	add    esp,0x10
c001f151:	e9 96 00 00 00       	jmp    c001f1ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f156:	66 90                	xchg   ax,ax
c001f158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f15f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f162:	85 c0                	test   eax,eax
c001f164:	0f 95 c0             	setne  al
c001f167:	0f b6 c0             	movzx  eax,al
c001f16a:	85 c0                	test   eax,eax
c001f16c:	74 12                	je     c001f180 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f16e:	83 ec 0c             	sub    esp,0xc
c001f171:	68 2b 03 02 c0       	push   0xc002032b
c001f176:	e8 96 1a ff ff       	call   c0010c11 <KePanic(char const*)>
c001f17b:	83 c4 10             	add    esp,0x10
c001f17e:	66 90                	xchg   ax,ax
c001f180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f184:	8b 00                	mov    eax,DWORD PTR [eax]
c001f186:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f189:	85 c0                	test   eax,eax
c001f18b:	0f 94 c0             	sete   al
c001f18e:	0f b6 c0             	movzx  eax,al
c001f191:	85 c0                	test   eax,eax
c001f193:	74 33                	je     c001f1c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f199:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f1b1:	83 f8 01             	cmp    eax,0x1
c001f1b4:	74 22                	je     c001f1d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f1b6:	83 ec 0c             	sub    esp,0xc
c001f1b9:	68 04 03 02 c0       	push   0xc0020304
c001f1be:	e8 4e 1a ff ff       	call   c0010c11 <KePanic(char const*)>
c001f1c3:	83 c4 10             	add    esp,0x10
c001f1c6:	eb 10                	jmp    c001f1d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d5:	89 10                	mov    DWORD PTR [eax],edx
c001f1d7:	90                   	nop
c001f1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f1df:	8d 50 ff             	lea    edx,[eax-0x1]
c001f1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f1e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f1ec:	83 c4 0c             	add    esp,0xc
c001f1ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f1f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f1f0:	83 ec 0c             	sub    esp,0xc
c001f1f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f1f8:	75 12                	jne    c001f20c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	68 a8 02 02 c0       	push   0xc00202a8
c001f202:	e8 0a 1a ff ff       	call   c0010c11 <KePanic(char const*)>
c001f207:	83 c4 10             	add    esp,0x10
c001f20a:	66 90                	xchg   ax,ax
c001f20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f210:	8b 00                	mov    eax,DWORD PTR [eax]
c001f212:	85 c0                	test   eax,eax
c001f214:	74 36                	je     c001f24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f21a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f21d:	85 c0                	test   eax,eax
c001f21f:	74 2b                	je     c001f24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f225:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f228:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f22c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f233:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f237:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f241:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f248:	eb 6a                	jmp    c001f2b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f24a:	66 90                	xchg   ax,ax
c001f24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f250:	8b 00                	mov    eax,DWORD PTR [eax]
c001f252:	85 c0                	test   eax,eax
c001f254:	75 4e                	jne    c001f2a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f25d:	85 c0                	test   eax,eax
c001f25f:	75 43                	jne    c001f2a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f265:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f269:	89 10                	mov    DWORD PTR [eax],edx
c001f26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f273:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f27d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f28b:	85 c0                	test   eax,eax
c001f28d:	74 25                	je     c001f2b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f28f:	83 ec 0c             	sub    esp,0xc
c001f292:	68 ca 02 02 c0       	push   0xc00202ca
c001f297:	e8 75 19 ff ff       	call   c0010c11 <KePanic(char const*)>
c001f29c:	83 c4 10             	add    esp,0x10
c001f29f:	eb 13                	jmp    c001f2b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f2a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2a4:	83 ec 0c             	sub    esp,0xc
c001f2a7:	68 d4 02 02 c0       	push   0xc00202d4
c001f2ac:	e8 60 19 ff ff       	call   c0010c11 <KePanic(char const*)>
c001f2b1:	83 c4 10             	add    esp,0x10
c001f2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f2bb:	8d 50 01             	lea    edx,[eax+0x1]
c001f2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f2c5:	90                   	nop
c001f2c6:	83 c4 0c             	add    esp,0xc
c001f2c9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f2cc <ACPI::~ACPI()>:
c001f2cc:	83 ec 0c             	sub    esp,0xc
c001f2cf:	ba 60 13 02 c0       	mov    edx,0xc0021360
c001f2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d8:	89 10                	mov    DWORD PTR [eax],edx
c001f2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2de:	83 ec 0c             	sub    esp,0xc
c001f2e1:	50                   	push   eax
c001f2e2:	e8 b5 cc fe ff       	call   c000bf9c <Device::~Device()>
c001f2e7:	83 c4 10             	add    esp,0x10
c001f2ea:	90                   	nop
c001f2eb:	83 c4 0c             	add    esp,0xc
c001f2ee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f2f0 <ACPI::~ACPI()>:
c001f2f0:	83 ec 0c             	sub    esp,0xc
c001f2f3:	83 ec 0c             	sub    esp,0xc
c001f2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2fa:	e8 cd ff ff ff       	call   c001f2cc <ACPI::~ACPI()>
c001f2ff:	83 c4 10             	add    esp,0x10
c001f302:	83 ec 08             	sub    esp,0x8
c001f305:	68 64 12 00 00       	push   0x1264
c001f30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f30e:	e8 f9 b4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f313:	83 c4 10             	add    esp,0x10
c001f316:	83 c4 0c             	add    esp,0xc
c001f319:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f31c <LinkedList<Device>::~LinkedList()>:
c001f31c:	90                   	nop
c001f31d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f320 <LinkedList<Device>::isEmpty()>:
c001f320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f324:	8b 00                	mov    eax,DWORD PTR [eax]
c001f326:	85 c0                	test   eax,eax
c001f328:	75 0e                	jne    c001f338 <LinkedList<Device>::isEmpty()+0x18>
c001f32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f32e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f331:	85 c0                	test   eax,eax
c001f333:	75 03                	jne    c001f338 <LinkedList<Device>::isEmpty()+0x18>
c001f335:	b0 01                	mov    al,0x1
c001f337:	c3                   	ret    
c001f338:	b0 00                	mov    al,0x0
c001f33a:	90                   	nop
c001f33b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f33c <LinkedList<Device>::getFirstElement()>:
c001f33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f340:	8b 00                	mov    eax,DWORD PTR [eax]
c001f342:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f344 <LinkedList<Device>::removeFirst()>:
c001f344:	83 ec 0c             	sub    esp,0xc
c001f347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f34d:	85 c0                	test   eax,eax
c001f34f:	75 17                	jne    c001f368 <LinkedList<Device>::removeFirst()+0x24>
c001f351:	83 ec 0c             	sub    esp,0xc
c001f354:	68 e0 02 02 c0       	push   0xc00202e0
c001f359:	e8 b3 18 ff ff       	call   c0010c11 <KePanic(char const*)>
c001f35e:	83 c4 10             	add    esp,0x10
c001f361:	e9 92 00 00 00       	jmp    c001f3f8 <LinkedList<Device>::removeFirst()+0xb4>
c001f366:	66 90                	xchg   ax,ax
c001f368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f36c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f36f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f375:	85 c0                	test   eax,eax
c001f377:	74 13                	je     c001f38c <LinkedList<Device>::removeFirst()+0x48>
c001f379:	83 ec 0c             	sub    esp,0xc
c001f37c:	68 2b 03 02 c0       	push   0xc002032b
c001f381:	e8 8b 18 ff ff       	call   c0010c11 <KePanic(char const*)>
c001f386:	83 c4 10             	add    esp,0x10
c001f389:	8d 76 00             	lea    esi,[esi+0x0]
c001f38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f390:	8b 00                	mov    eax,DWORD PTR [eax]
c001f392:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f398:	85 c0                	test   eax,eax
c001f39a:	75 34                	jne    c001f3d0 <LinkedList<Device>::removeFirst()+0x8c>
c001f39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f3b8:	83 f8 01             	cmp    eax,0x1
c001f3bb:	74 27                	je     c001f3e4 <LinkedList<Device>::removeFirst()+0xa0>
c001f3bd:	83 ec 0c             	sub    esp,0xc
c001f3c0:	68 04 03 02 c0       	push   0xc0020304
c001f3c5:	e8 47 18 ff ff       	call   c0010c11 <KePanic(char const*)>
c001f3ca:	83 c4 10             	add    esp,0x10
c001f3cd:	eb 15                	jmp    c001f3e4 <LinkedList<Device>::removeFirst()+0xa0>
c001f3cf:	90                   	nop
c001f3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3d6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e0:	89 10                	mov    DWORD PTR [eax],edx
c001f3e2:	66 90                	xchg   ax,ax
c001f3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f3eb:	8d 50 ff             	lea    edx,[eax-0x1]
c001f3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001f3f8:	83 c4 0c             	add    esp,0xc
c001f3fb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f3fc <CPU::~CPU()>:
c001f3fc:	83 ec 0c             	sub    esp,0xc
c001f3ff:	ba 08 15 02 c0       	mov    edx,0xc0021508
c001f404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f408:	89 10                	mov    DWORD PTR [eax],edx
c001f40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f40e:	83 ec 0c             	sub    esp,0xc
c001f411:	50                   	push   eax
c001f412:	e8 85 cb fe ff       	call   c000bf9c <Device::~Device()>
c001f417:	83 c4 10             	add    esp,0x10
c001f41a:	90                   	nop
c001f41b:	83 c4 0c             	add    esp,0xc
c001f41e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f420 <CPU::~CPU()>:
c001f420:	83 ec 0c             	sub    esp,0xc
c001f423:	83 ec 0c             	sub    esp,0xc
c001f426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f42a:	e8 cd ff ff ff       	call   c001f3fc <CPU::~CPU()>
c001f42f:	83 c4 10             	add    esp,0x10
c001f432:	83 ec 08             	sub    esp,0x8
c001f435:	68 94 11 00 00       	push   0x1194
c001f43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f43e:	e8 c9 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f443:	83 c4 10             	add    esp,0x10
c001f446:	83 c4 0c             	add    esp,0xc
c001f449:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f44c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f450:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f453:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f454 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f454:	90                   	nop
c001f455:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f458 <ThreadControlBlock::ThreadControlBlock()>:
c001f458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f45c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f467:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f46e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f472:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f479:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f47d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001f484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f488:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001f48f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f493:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001f497:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f49b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001f49f:	90                   	nop
c001f4a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f4a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4e4:	90                   	nop
c001f4e5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f4e6 <PCI::~PCI()>:
c001f4e6:	83 ec 0c             	sub    esp,0xc
c001f4e9:	ba a8 23 02 c0       	mov    edx,0xc00223a8
c001f4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f2:	89 10                	mov    DWORD PTR [eax],edx
c001f4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f8:	83 ec 0c             	sub    esp,0xc
c001f4fb:	50                   	push   eax
c001f4fc:	e8 33 c5 fe ff       	call   c000ba34 <Bus::~Bus()>
c001f501:	83 c4 10             	add    esp,0x10
c001f504:	90                   	nop
c001f505:	83 c4 0c             	add    esp,0xc
c001f508:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f50a <PCI::~PCI()>:
c001f50a:	83 ec 0c             	sub    esp,0xc
c001f50d:	83 ec 0c             	sub    esp,0xc
c001f510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f514:	e8 cd ff ff ff       	call   c001f4e6 <PCI::~PCI()>
c001f519:	83 c4 10             	add    esp,0x10
c001f51c:	83 ec 08             	sub    esp,0x8
c001f51f:	68 5c 01 00 00       	push   0x15c
c001f524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f528:	e8 df b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	83 c4 0c             	add    esp,0xc
c001f533:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f534 <IDE::~IDE()>:
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001f53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f540:	89 10                	mov    DWORD PTR [eax],edx
c001f542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f546:	83 ec 0c             	sub    esp,0xc
c001f549:	50                   	push   eax
c001f54a:	e8 c5 ce fe ff       	call   c000c414 <HardDiskController::~HardDiskController()>
c001f54f:	83 c4 10             	add    esp,0x10
c001f552:	90                   	nop
c001f553:	83 c4 0c             	add    esp,0xc
c001f556:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f558 <IDE::~IDE()>:
c001f558:	83 ec 0c             	sub    esp,0xc
c001f55b:	83 ec 0c             	sub    esp,0xc
c001f55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f562:	e8 cd ff ff ff       	call   c001f534 <IDE::~IDE()>
c001f567:	83 c4 10             	add    esp,0x10
c001f56a:	83 ec 08             	sub    esp,0x8
c001f56d:	68 70 02 00 00       	push   0x270
c001f572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f576:	e8 91 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f57b:	83 c4 10             	add    esp,0x10
c001f57e:	83 c4 0c             	add    esp,0xc
c001f581:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f582 <SATABus::~SATABus()>:
c001f582:	83 ec 0c             	sub    esp,0xc
c001f585:	ba ac 24 02 c0       	mov    edx,0xc00224ac
c001f58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58e:	89 10                	mov    DWORD PTR [eax],edx
c001f590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f594:	83 ec 0c             	sub    esp,0xc
c001f597:	50                   	push   eax
c001f598:	e8 77 ce fe ff       	call   c000c414 <HardDiskController::~HardDiskController()>
c001f59d:	83 c4 10             	add    esp,0x10
c001f5a0:	90                   	nop
c001f5a1:	83 c4 0c             	add    esp,0xc
c001f5a4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f5a6 <SATABus::~SATABus()>:
c001f5a6:	83 ec 0c             	sub    esp,0xc
c001f5a9:	83 ec 0c             	sub    esp,0xc
c001f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b0:	e8 cd ff ff ff       	call   c001f582 <SATABus::~SATABus()>
c001f5b5:	83 c4 10             	add    esp,0x10
c001f5b8:	83 ec 08             	sub    esp,0x8
c001f5bb:	68 64 01 00 00       	push   0x164
c001f5c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c4:	e8 43 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f5c9:	83 c4 10             	add    esp,0x10
c001f5cc:	83 c4 0c             	add    esp,0xc
c001f5cf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f5d0 <ATA::~ATA()>:
c001f5d0:	83 ec 0c             	sub    esp,0xc
c001f5d3:	ba ec 24 02 c0       	mov    edx,0xc00224ec
c001f5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5dc:	89 10                	mov    DWORD PTR [eax],edx
c001f5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	50                   	push   eax
c001f5e6:	e8 0b cf fe ff       	call   c000c4f6 <PhysicalDisk::~PhysicalDisk()>
c001f5eb:	83 c4 10             	add    esp,0x10
c001f5ee:	90                   	nop
c001f5ef:	83 c4 0c             	add    esp,0xc
c001f5f2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f5f4 <ATA::~ATA()>:
c001f5f4:	83 ec 0c             	sub    esp,0xc
c001f5f7:	83 ec 0c             	sub    esp,0xc
c001f5fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5fe:	e8 cd ff ff ff       	call   c001f5d0 <ATA::~ATA()>
c001f603:	83 c4 10             	add    esp,0x10
c001f606:	83 ec 08             	sub    esp,0x8
c001f609:	68 7c 01 00 00       	push   0x17c
c001f60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f612:	e8 f5 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f617:	83 c4 10             	add    esp,0x10
c001f61a:	83 c4 0c             	add    esp,0xc
c001f61d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f61e <ATAPI::~ATAPI()>:
c001f61e:	83 ec 0c             	sub    esp,0xc
c001f621:	ba 34 25 02 c0       	mov    edx,0xc0022534
c001f626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62a:	89 10                	mov    DWORD PTR [eax],edx
c001f62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f630:	83 ec 0c             	sub    esp,0xc
c001f633:	50                   	push   eax
c001f634:	e8 bd ce fe ff       	call   c000c4f6 <PhysicalDisk::~PhysicalDisk()>
c001f639:	83 c4 10             	add    esp,0x10
c001f63c:	90                   	nop
c001f63d:	83 c4 0c             	add    esp,0xc
c001f640:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f642 <ATAPI::~ATAPI()>:
c001f642:	83 ec 0c             	sub    esp,0xc
c001f645:	83 ec 0c             	sub    esp,0xc
c001f648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f64c:	e8 cd ff ff ff       	call   c001f61e <ATAPI::~ATAPI()>
c001f651:	83 c4 10             	add    esp,0x10
c001f654:	83 ec 08             	sub    esp,0x8
c001f657:	68 84 01 00 00       	push   0x184
c001f65c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f660:	e8 a7 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f665:	83 c4 10             	add    esp,0x10
c001f668:	83 c4 0c             	add    esp,0xc
c001f66b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f66c <SATA::~SATA()>:
c001f66c:	83 ec 0c             	sub    esp,0xc
c001f66f:	ba e8 25 02 c0       	mov    edx,0xc00225e8
c001f674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f678:	89 10                	mov    DWORD PTR [eax],edx
c001f67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67e:	83 ec 0c             	sub    esp,0xc
c001f681:	50                   	push   eax
c001f682:	e8 6f ce fe ff       	call   c000c4f6 <PhysicalDisk::~PhysicalDisk()>
c001f687:	83 c4 10             	add    esp,0x10
c001f68a:	90                   	nop
c001f68b:	83 c4 0c             	add    esp,0xc
c001f68e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f690 <SATA::~SATA()>:
c001f690:	83 ec 0c             	sub    esp,0xc
c001f693:	83 ec 0c             	sub    esp,0xc
c001f696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f69a:	e8 cd ff ff ff       	call   c001f66c <SATA::~SATA()>
c001f69f:	83 c4 10             	add    esp,0x10
c001f6a2:	83 ec 08             	sub    esp,0x8
c001f6a5:	68 7c 01 00 00       	push   0x17c
c001f6aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6ae:	e8 59 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f6b3:	83 c4 10             	add    esp,0x10
c001f6b6:	83 c4 0c             	add    esp,0xc
c001f6b9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f6ba <SATAPI::~SATAPI()>:
c001f6ba:	83 ec 0c             	sub    esp,0xc
c001f6bd:	ba 0c 27 02 c0       	mov    edx,0xc002270c
c001f6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c6:	89 10                	mov    DWORD PTR [eax],edx
c001f6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cc:	83 ec 0c             	sub    esp,0xc
c001f6cf:	50                   	push   eax
c001f6d0:	e8 21 ce fe ff       	call   c000c4f6 <PhysicalDisk::~PhysicalDisk()>
c001f6d5:	83 c4 10             	add    esp,0x10
c001f6d8:	90                   	nop
c001f6d9:	83 c4 0c             	add    esp,0xc
c001f6dc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f6de <SATAPI::~SATAPI()>:
c001f6de:	83 ec 0c             	sub    esp,0xc
c001f6e1:	83 ec 0c             	sub    esp,0xc
c001f6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6e8:	e8 cd ff ff ff       	call   c001f6ba <SATAPI::~SATAPI()>
c001f6ed:	83 c4 10             	add    esp,0x10
c001f6f0:	83 ec 08             	sub    esp,0x8
c001f6f3:	68 84 01 00 00       	push   0x184
c001f6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6fc:	e8 0b b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f701:	83 c4 10             	add    esp,0x10
c001f704:	83 c4 0c             	add    esp,0xc
c001f707:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f708 <IOAPIC::~IOAPIC()>:
c001f708:	83 ec 0c             	sub    esp,0xc
c001f70b:	ba 4c 27 02 c0       	mov    edx,0xc002274c
c001f710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f714:	89 10                	mov    DWORD PTR [eax],edx
c001f716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71a:	83 ec 0c             	sub    esp,0xc
c001f71d:	50                   	push   eax
c001f71e:	e8 79 c8 fe ff       	call   c000bf9c <Device::~Device()>
c001f723:	83 c4 10             	add    esp,0x10
c001f726:	90                   	nop
c001f727:	83 c4 0c             	add    esp,0xc
c001f72a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f72c <IOAPIC::~IOAPIC()>:
c001f72c:	83 ec 0c             	sub    esp,0xc
c001f72f:	83 ec 0c             	sub    esp,0xc
c001f732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f736:	e8 cd ff ff ff       	call   c001f708 <IOAPIC::~IOAPIC()>
c001f73b:	83 c4 10             	add    esp,0x10
c001f73e:	83 ec 08             	sub    esp,0x8
c001f741:	68 68 01 00 00       	push   0x168
c001f746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f74a:	e8 bd b0 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f74f:	83 c4 10             	add    esp,0x10
c001f752:	83 c4 0c             	add    esp,0xc
c001f755:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f758 <APICTimer::~APICTimer()>:
c001f758:	83 ec 0c             	sub    esp,0xc
c001f75b:	ba 94 27 02 c0       	mov    edx,0xc0022794
c001f760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f764:	89 10                	mov    DWORD PTR [eax],edx
c001f766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76a:	83 ec 0c             	sub    esp,0xc
c001f76d:	50                   	push   eax
c001f76e:	e8 f5 e2 fe ff       	call   c000da68 <Timer::~Timer()>
c001f773:	83 c4 10             	add    esp,0x10
c001f776:	90                   	nop
c001f777:	83 c4 0c             	add    esp,0xc
c001f77a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f77c <APICTimer::~APICTimer()>:
c001f77c:	83 ec 0c             	sub    esp,0xc
c001f77f:	83 ec 0c             	sub    esp,0xc
c001f782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f786:	e8 cd ff ff ff       	call   c001f758 <APICTimer::~APICTimer()>
c001f78b:	83 c4 10             	add    esp,0x10
c001f78e:	83 ec 08             	sub    esp,0x8
c001f791:	68 60 01 00 00       	push   0x160
c001f796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f79a:	e8 6d b0 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f79f:	83 c4 10             	add    esp,0x10
c001f7a2:	83 c4 0c             	add    esp,0xc
c001f7a5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f7a8 <PIT::~PIT()>:
c001f7a8:	83 ec 0c             	sub    esp,0xc
c001f7ab:	ba e4 27 02 c0       	mov    edx,0xc00227e4
c001f7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b4:	89 10                	mov    DWORD PTR [eax],edx
c001f7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ba:	83 ec 0c             	sub    esp,0xc
c001f7bd:	50                   	push   eax
c001f7be:	e8 a5 e2 fe ff       	call   c000da68 <Timer::~Timer()>
c001f7c3:	83 c4 10             	add    esp,0x10
c001f7c6:	90                   	nop
c001f7c7:	83 c4 0c             	add    esp,0xc
c001f7ca:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f7cc <PIT::~PIT()>:
c001f7cc:	83 ec 0c             	sub    esp,0xc
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d6:	e8 cd ff ff ff       	call   c001f7a8 <PIT::~PIT()>
c001f7db:	83 c4 10             	add    esp,0x10
c001f7de:	83 ec 08             	sub    esp,0x8
c001f7e1:	68 5c 01 00 00       	push   0x15c
c001f7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ea:	e8 1d b0 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f7ef:	83 c4 10             	add    esp,0x10
c001f7f2:	83 c4 0c             	add    esp,0xc
c001f7f5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be f9 15 02 c0       	mov    esi,0xc00215f9
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 15 16 02 c0       	mov    esi,0xc0021615
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
