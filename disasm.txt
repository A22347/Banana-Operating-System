
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8d 9e 00 00       	call   c0009ead <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c5 31 02 00       	call   c00231ea <_init>
c0000025:	c3                   	ret    
c0000026:	bb 6e 3e 02 c0       	mov    ebx,0xc0023e6e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 7c 3e 02 c0    	cmp    ebx,0xc0023e7c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 86 02 c0       	mov    eax,0xc0028638
c0000049:	3d 38 86 02 c0       	cmp    eax,0xc0028638
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 86 02 c0       	push   0xc0028638
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 86 02 c0       	mov    eax,0xc0028638
c0000075:	2d 38 86 02 c0       	sub    eax,0xc0028638
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 86 02 c0       	push   0xc0028638
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 87 02 c0 00 	cmp    BYTE PTR ds:0xc00287c0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 84 3e 02 c0       	mov    ebx,0xc0023e84
c00000bb:	81 eb 80 3e 02 c0    	sub    ebx,0xc0023e80
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 80 3e 02 c0       	mov    esi,0xc0023e80
c00000ca:	a1 c4 87 02 c0       	mov    eax,ds:0xc00287c4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 87 02 c0       	mov    ds:0xc00287c4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 87 02 c0       	mov    eax,ds:0xc00287c4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 86 02 c0       	push   0xc0028638
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 87 02 c0 01 	mov    BYTE PTR ds:0xc00287c0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 87 02 c0       	push   0xc00287c8
c000012c:	68 38 86 02 c0       	push   0xc0028638
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <getRDRAND>:
c0000219:	b9 64 00 00 00       	mov    ecx,0x64

c000021e <retry>:
c000021e:	0f c7 f0             	rdrand eax
c0000221:	72 05                	jb     c0000228 <retry.done>
c0000223:	e2 f9                	loop   c000021e <retry>

c0000225 <retry.fail>:
c0000225:	31 c0                	xor    eax,eax
c0000227:	c3                   	ret    

c0000228 <retry.done>:
c0000228:	c3                   	ret    

c0000229 <detectCPUID>:
c0000229:	9c                   	pushf  
c000022a:	9c                   	pushf  
c000022b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000232:	9d                   	popf   
c0000233:	9c                   	pushf  
c0000234:	58                   	pop    eax
c0000235:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000238:	9d                   	popf   
c0000239:	25 00 00 20 00       	and    eax,0x200000
c000023e:	c3                   	ret    

c000023f <goToVM86>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000245:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000248:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000024b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000024e:	25 ff ff 00 00       	and    eax,0xffff
c0000253:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000259:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000025f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000265:	52                   	push   edx
c0000266:	51                   	push   ecx
c0000267:	68 02 02 02 00       	push   0x20202
c000026c:	53                   	push   ebx
c000026d:	50                   	push   eax
c000026e:	cf                   	iret   

c000026f <goToUsermode>:
c000026f:	55                   	push   ebp
c0000270:	89 e5                	mov    ebp,esp
c0000272:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000275:	66 b8 23 00          	mov    ax,0x23
c0000279:	66 8e d8             	mov    ds,ax
c000027c:	66 8e c0             	mov    es,ax
c000027f:	66 8e e0             	mov    fs,ax
c0000282:	66 8e e8             	mov    gs,ax
c0000285:	89 e0                	mov    eax,esp
c0000287:	68 23 00 00 00       	push   0x23
c000028c:	50                   	push   eax
c000028d:	68 02 02 00 00       	push   0x202
c0000292:	68 1b 00 00 00       	push   0x1b
c0000297:	53                   	push   ebx
c0000298:	cf                   	iret   

c0000299 <switchToThreadASMFirstTime>:
c0000299:	9c                   	pushf  
c000029a:	fa                   	cli    
c000029b:	50                   	push   eax
c000029c:	53                   	push   ebx
c000029d:	51                   	push   ecx
c000029e:	52                   	push   edx
c000029f:	56                   	push   esi
c00002a0:	57                   	push   edi
c00002a1:	55                   	push   ebp
c00002a2:	e9 11 00 00 00       	jmp    c00002b8 <commonThreadSwitch>

c00002a7 <switchToThreadASM>:
c00002a7:	9c                   	pushf  
c00002a8:	50                   	push   eax
c00002a9:	53                   	push   ebx
c00002aa:	51                   	push   ecx
c00002ab:	52                   	push   edx
c00002ac:	56                   	push   esi
c00002ad:	57                   	push   edi
c00002ae:	55                   	push   ebp
c00002af:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002b5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002b8 <commonThreadSwitch>:
c00002b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002bc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002c4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002c7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ca:	0f 20 d9             	mov    ecx,cr3
c00002cd:	39 c8                	cmp    eax,ecx
c00002cf:	74 03                	je     c00002d4 <commonThreadSwitch.doneVAS>
c00002d1:	0f 22 d8             	mov    cr3,eax

c00002d4 <commonThreadSwitch.doneVAS>:
c00002d4:	0f 20 c0             	mov    eax,cr0
c00002d7:	0c 08                	or     al,0x8
c00002d9:	0f 22 c0             	mov    cr0,eax
c00002dc:	85 d2                	test   edx,edx
c00002de:	75 11                	jne    c00002f1 <commonThreadSwitch.firstTime>
c00002e0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002e3:	e8 00 85 01 00       	call   c00187e8 <changeTSS>
c00002e8:	5d                   	pop    ebp
c00002e9:	5f                   	pop    edi
c00002ea:	5e                   	pop    esi
c00002eb:	5a                   	pop    edx
c00002ec:	59                   	pop    ecx
c00002ed:	5b                   	pop    ebx
c00002ee:	58                   	pop    eax
c00002ef:	9d                   	popf   
c00002f0:	c3                   	ret    

c00002f1 <commonThreadSwitch.firstTime>:
c00002f1:	fa                   	cli    
c00002f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002f5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002fa:	60                   	pusha  
c00002fb:	e8 68 cb 00 00       	call   c000ce68 <mapVASFirstTime>
c0000300:	61                   	popa   
c0000301:	89 c4                	mov    esp,eax
c0000303:	56                   	push   esi
c0000304:	52                   	push   edx
c0000305:	e8 de 84 01 00       	call   c00187e8 <changeTSS>
c000030a:	5a                   	pop    edx
c000030b:	5e                   	pop    esi
c000030c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000313:	5d                   	pop    ebp
c0000314:	5f                   	pop    edi
c0000315:	5e                   	pop    esi
c0000316:	59                   	pop    ecx
c0000317:	59                   	pop    ecx
c0000318:	5b                   	pop    ebx
c0000319:	58                   	pop    eax
c000031a:	81 c4 04 00 00 00    	add    esp,0x4
c0000320:	6a 02                	push   0x2
c0000322:	9d                   	popf   
c0000323:	52                   	push   edx
c0000324:	e8 a7 89 01 00       	call   c0018cd0 <taskStartupFunction>
c0000329:	5a                   	pop    edx
c000032a:	50                   	push   eax
c000032b:	ff d2                	call   edx
c000032d:	e8 ea 8f 01 00       	call   c001931c <taskReturned>
c0000332:	e9 fb ff ff ff       	jmp    c0000332 <commonThreadSwitch.firstTime+0x41>

c0000337 <asmQuickAcquireLock>:
c0000337:	55                   	push   ebp
c0000338:	89 e5                	mov    ebp,esp
c000033a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000033d <asmQuickAcquireLock.retry>:
c000033d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000342:	72 02                	jb     c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000344:	fa                   	cli    
c0000345:	c3                   	ret    

c0000346 <asmQuickAcquireLock.spin_with_pause>:
c0000346:	f3 90                	pause  
c0000348:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000034e:	75 f6                	jne    c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000350:	e9 e8 ff ff ff       	jmp    c000033d <asmQuickAcquireLock.retry>

c0000355 <asmQuickReleaseLock>:
c0000355:	55                   	push   ebp
c0000356:	89 e5                	mov    ebp,esp
c0000358:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000035f:	5d                   	pop    ebp
c0000360:	c3                   	ret    

c0000361 <asmAcquireLock>:
c0000361:	55                   	push   ebp
c0000362:	89 e5                	mov    ebp,esp
c0000364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000367 <asmAcquireLock.retry>:
c0000367:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000036c:	72 05                	jb     c0000373 <asmAcquireLock.spin_with_pause>
c000036e:	9c                   	pushf  
c000036f:	58                   	pop    eax
c0000370:	fa                   	cli    
c0000371:	5d                   	pop    ebp
c0000372:	c3                   	ret    

c0000373 <asmAcquireLock.spin_with_pause>:
c0000373:	f3 90                	pause  
c0000375:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000037b:	75 f6                	jne    c0000373 <asmAcquireLock.spin_with_pause>
c000037d:	e9 e5 ff ff ff       	jmp    c0000367 <asmAcquireLock.retry>

c0000382 <asmReleaseLock>:
c0000382:	55                   	push   ebp
c0000383:	89 e5                	mov    ebp,esp
c0000385:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000388:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000038b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000391:	52                   	push   edx
c0000392:	9d                   	popf   
c0000393:	5d                   	pop    ebp
c0000394:	c3                   	ret    

c0000395 <loadGDT>:
c0000395:	0f 01 15 10 8c 02 c0 	lgdtd  ds:0xc0028c10
c000039c:	66 b8 10 00          	mov    ax,0x10
c00003a0:	66 8e d8             	mov    ds,ax
c00003a3:	66 8e c0             	mov    es,ax
c00003a6:	66 8e e0             	mov    fs,ax
c00003a9:	66 8e e8             	mov    gs,ax
c00003ac:	66 8e d0             	mov    ss,ax
c00003af:	e9 00 00 00 00       	jmp    c00003b4 <flush2>

c00003b4 <flush2>:
c00003b4:	c3                   	ret    

c00003b5 <isr0>:
c00003b5:	fa                   	cli    
c00003b6:	68 00 00 00 00       	push   0x0
c00003bb:	68 00 00 00 00       	push   0x0
c00003c0:	e9 44 01 00 00       	jmp    c0000509 <int_common_stub>

c00003c5 <isr1>:
c00003c5:	fa                   	cli    
c00003c6:	6a 00                	push   0x0
c00003c8:	6a 01                	push   0x1
c00003ca:	e9 3a 01 00 00       	jmp    c0000509 <int_common_stub>

c00003cf <isr2>:
c00003cf:	fa                   	cli    
c00003d0:	6a 00                	push   0x0
c00003d2:	6a 02                	push   0x2
c00003d4:	e9 30 01 00 00       	jmp    c0000509 <int_common_stub>

c00003d9 <isr3>:
c00003d9:	fa                   	cli    
c00003da:	6a 00                	push   0x0
c00003dc:	6a 03                	push   0x3
c00003de:	e9 26 01 00 00       	jmp    c0000509 <int_common_stub>

c00003e3 <isr4>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 04                	push   0x4
c00003e8:	e9 1c 01 00 00       	jmp    c0000509 <int_common_stub>

c00003ed <isr5>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 05                	push   0x5
c00003f2:	e9 12 01 00 00       	jmp    c0000509 <int_common_stub>

c00003f7 <isr6>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 06                	push   0x6
c00003fc:	e9 08 01 00 00       	jmp    c0000509 <int_common_stub>

c0000401 <isr7>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 07                	push   0x7
c0000406:	e9 fe 00 00 00       	jmp    c0000509 <int_common_stub>

c000040b <isr8>:
c000040b:	fa                   	cli    
c000040c:	6a 08                	push   0x8
c000040e:	e9 f6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000413 <isr9>:
c0000413:	fa                   	cli    
c0000414:	6a 00                	push   0x0
c0000416:	6a 09                	push   0x9
c0000418:	e9 ec 00 00 00       	jmp    c0000509 <int_common_stub>

c000041d <isr10>:
c000041d:	fa                   	cli    
c000041e:	6a 0a                	push   0xa
c0000420:	e9 e4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000425 <isr11>:
c0000425:	fa                   	cli    
c0000426:	6a 0b                	push   0xb
c0000428:	e9 dc 00 00 00       	jmp    c0000509 <int_common_stub>

c000042d <isr12>:
c000042d:	fa                   	cli    
c000042e:	6a 0c                	push   0xc
c0000430:	e9 d4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000435 <isr13>:
c0000435:	fa                   	cli    
c0000436:	6a 0d                	push   0xd
c0000438:	e9 cc 00 00 00       	jmp    c0000509 <int_common_stub>

c000043d <isr14>:
c000043d:	fa                   	cli    
c000043e:	6a 0e                	push   0xe
c0000440:	e9 c4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000445 <isr15>:
c0000445:	fa                   	cli    
c0000446:	6a 00                	push   0x0
c0000448:	6a 0f                	push   0xf
c000044a:	e9 ba 00 00 00       	jmp    c0000509 <int_common_stub>

c000044f <isr16>:
c000044f:	fa                   	cli    
c0000450:	6a 00                	push   0x0
c0000452:	6a 10                	push   0x10
c0000454:	e9 b0 00 00 00       	jmp    c0000509 <int_common_stub>

c0000459 <isr17>:
c0000459:	fa                   	cli    
c000045a:	6a 00                	push   0x0
c000045c:	6a 11                	push   0x11
c000045e:	e9 a6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000463 <isr18>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 12                	push   0x12
c0000468:	e9 9c 00 00 00       	jmp    c0000509 <int_common_stub>

c000046d <irq3>:
c000046d:	fa                   	cli    
c000046e:	6a 00                	push   0x0
c0000470:	6a 23                	push   0x23
c0000472:	e9 92 00 00 00       	jmp    c0000509 <int_common_stub>

c0000477 <irq4>:
c0000477:	fa                   	cli    
c0000478:	6a 00                	push   0x0
c000047a:	6a 24                	push   0x24
c000047c:	e9 88 00 00 00       	jmp    c0000509 <int_common_stub>

c0000481 <irq5>:
c0000481:	fa                   	cli    
c0000482:	6a 00                	push   0x0
c0000484:	6a 25                	push   0x25
c0000486:	e9 7e 00 00 00       	jmp    c0000509 <int_common_stub>

c000048b <irq6>:
c000048b:	fa                   	cli    
c000048c:	6a 00                	push   0x0
c000048e:	6a 26                	push   0x26
c0000490:	e9 74 00 00 00       	jmp    c0000509 <int_common_stub>

c0000495 <irq7>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 27                	push   0x27
c000049a:	e9 6a 00 00 00       	jmp    c0000509 <int_common_stub>

c000049f <irq8>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 28                	push   0x28
c00004a4:	e9 60 00 00 00       	jmp    c0000509 <int_common_stub>

c00004a9 <irq9>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 29                	push   0x29
c00004ae:	e9 56 00 00 00       	jmp    c0000509 <int_common_stub>

c00004b3 <irq10>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 2a                	push   0x2a
c00004b8:	e9 4c 00 00 00       	jmp    c0000509 <int_common_stub>

c00004bd <irq11>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 2b                	push   0x2b
c00004c2:	e9 42 00 00 00       	jmp    c0000509 <int_common_stub>

c00004c7 <irq12>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 2c                	push   0x2c
c00004cc:	e9 38 00 00 00       	jmp    c0000509 <int_common_stub>

c00004d1 <irq13>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 2d                	push   0x2d
c00004d6:	e9 2e 00 00 00       	jmp    c0000509 <int_common_stub>

c00004db <irq14>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 2e                	push   0x2e
c00004e0:	e9 24 00 00 00       	jmp    c0000509 <int_common_stub>

c00004e5 <irq15>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 2f                	push   0x2f
c00004ea:	e9 1a 00 00 00       	jmp    c0000509 <int_common_stub>

c00004ef <irq1>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 21                	push   0x21
c00004f4:	eb 13                	jmp    c0000509 <int_common_stub>

c00004f6 <irq2>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 22                	push   0x22
c00004fb:	eb 0c                	jmp    c0000509 <int_common_stub>

c00004fd <isr96>:
c00004fd:	6a 00                	push   0x0
c00004ff:	6a 60                	push   0x60
c0000501:	fb                   	sti    
c0000502:	eb 05                	jmp    c0000509 <int_common_stub>

c0000504 <irq0>:
c0000504:	fa                   	cli    
c0000505:	6a 00                	push   0x0
c0000507:	6a 20                	push   0x20

c0000509 <int_common_stub>:
c0000509:	60                   	pusha  
c000050a:	1e                   	push   ds
c000050b:	06                   	push   es
c000050c:	0f a0                	push   fs
c000050e:	0f a8                	push   gs
c0000510:	66 b8 10 00          	mov    ax,0x10
c0000514:	66 8e d8             	mov    ds,ax
c0000517:	66 8e c0             	mov    es,ax
c000051a:	66 8e e0             	mov    fs,ax
c000051d:	66 8e e8             	mov    gs,ax
c0000520:	54                   	push   esp
c0000521:	fc                   	cld    
c0000522:	e8 3a ea 00 00       	call   c000ef61 <int_handler>
c0000527:	81 c4 04 00 00 00    	add    esp,0x4
c000052d:	0f a9                	pop    gs
c000052f:	0f a1                	pop    fs
c0000531:	07                   	pop    es
c0000532:	1f                   	pop    ds
c0000533:	61                   	popa   
c0000534:	81 c4 08 00 00 00    	add    esp,0x8
c000053a:	cf                   	iret   

c000053b <irq16>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 30                	push   0x30
c0000540:	e9 c4 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000545 <irq17>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 31                	push   0x31
c000054a:	e9 ba ff ff ff       	jmp    c0000509 <int_common_stub>

c000054f <irq18>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 32                	push   0x32
c0000554:	e9 b0 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000559 <irq19>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 33                	push   0x33
c000055e:	e9 a6 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000563 <irq20>:
c0000563:	fa                   	cli    
c0000564:	6a 00                	push   0x0
c0000566:	6a 34                	push   0x34
c0000568:	e9 9c ff ff ff       	jmp    c0000509 <int_common_stub>

c000056d <irq21>:
c000056d:	fa                   	cli    
c000056e:	6a 00                	push   0x0
c0000570:	6a 35                	push   0x35
c0000572:	e9 92 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000577 <irq22>:
c0000577:	fa                   	cli    
c0000578:	6a 00                	push   0x0
c000057a:	6a 36                	push   0x36
c000057c:	e9 88 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000581 <irq23>:
c0000581:	fa                   	cli    
c0000582:	6a 00                	push   0x0
c0000584:	6a 37                	push   0x37
c0000586:	e9 7e ff ff ff       	jmp    c0000509 <int_common_stub>

c000058b <memcpy>:
c000058b:	e9 7a 83 00 00       	jmp    c000890a <__not_memcpy>

c0000590 <memcmp>:
c0000590:	56                   	push   esi
c0000591:	53                   	push   ebx
c0000592:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000059a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000059e:	85 f6                	test   esi,esi
c00005a0:	74 1d                	je     c00005bf <memcmp+0x2f>
c00005a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a4:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a7:	38 cb                	cmp    bl,cl
c00005a9:	75 19                	jne    c00005c4 <memcmp+0x34>
c00005ab:	01 c6                	add    esi,eax
c00005ad:	eb 0a                	jmp    c00005b9 <memcmp+0x29>
c00005af:	90                   	nop
c00005b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005b2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005b5:	38 d9                	cmp    cl,bl
c00005b7:	75 0b                	jne    c00005c4 <memcmp+0x34>
c00005b9:	40                   	inc    eax
c00005ba:	42                   	inc    edx
c00005bb:	39 f0                	cmp    eax,esi
c00005bd:	75 f1                	jne    c00005b0 <memcmp+0x20>
c00005bf:	31 c0                	xor    eax,eax
c00005c1:	5b                   	pop    ebx
c00005c2:	5e                   	pop    esi
c00005c3:	c3                   	ret    
c00005c4:	0f b6 c1             	movzx  eax,cl
c00005c7:	29 d8                	sub    eax,ebx
c00005c9:	5b                   	pop    ebx
c00005ca:	5e                   	pop    esi
c00005cb:	c3                   	ret    

c00005cc <memmove>:
c00005cc:	55                   	push   ebp
c00005cd:	57                   	push   edi
c00005ce:	56                   	push   esi
c00005cf:	53                   	push   ebx
c00005d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005dc:	39 dd                	cmp    ebp,ebx
c00005de:	0f 83 80 00 00 00    	jae    c0000664 <memmove+0x98>
c00005e4:	85 d2                	test   edx,edx
c00005e6:	74 74                	je     c000065c <memmove+0x90>
c00005e8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005eb:	8d 75 04             	lea    esi,[ebp+0x4]
c00005ee:	39 cd                	cmp    ebp,ecx
c00005f0:	0f 93 c1             	setae  cl
c00005f3:	39 f3                	cmp    ebx,esi
c00005f5:	0f 93 c0             	setae  al
c00005f8:	89 c6                	mov    esi,eax
c00005fa:	09 ce                	or     esi,ecx
c00005fc:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ff:	89 f0                	mov    eax,esi
c0000601:	83 f9 0c             	cmp    ecx,0xc
c0000604:	0f 97 c1             	seta   cl
c0000607:	84 c8                	test   al,cl
c0000609:	74 75                	je     c0000680 <memmove+0xb4>
c000060b:	89 e9                	mov    ecx,ebp
c000060d:	09 d9                	or     ecx,ebx
c000060f:	83 e1 03             	and    ecx,0x3
c0000612:	75 6c                	jne    c0000680 <memmove+0xb4>
c0000614:	89 d7                	mov    edi,edx
c0000616:	89 d9                	mov    ecx,ebx
c0000618:	83 e7 fc             	and    edi,0xfffffffc
c000061b:	89 ee                	mov    esi,ebp
c000061d:	01 df                	add    edi,ebx
c000061f:	90                   	nop
c0000620:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000622:	83 c6 04             	add    esi,0x4
c0000625:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000628:	83 c1 04             	add    ecx,0x4
c000062b:	39 f9                	cmp    ecx,edi
c000062d:	75 f1                	jne    c0000620 <memmove+0x54>
c000062f:	89 d1                	mov    ecx,edx
c0000631:	89 d7                	mov    edi,edx
c0000633:	83 e1 fc             	and    ecx,0xfffffffc
c0000636:	29 cf                	sub    edi,ecx
c0000638:	01 cb                	add    ebx,ecx
c000063a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000063e:	39 ca                	cmp    edx,ecx
c0000640:	74 1a                	je     c000065c <memmove+0x90>
c0000642:	8a 03                	mov    al,BYTE PTR [ebx]
c0000644:	83 ff 01             	cmp    edi,0x1
c0000647:	88 06                	mov    BYTE PTR [esi],al
c0000649:	74 11                	je     c000065c <memmove+0x90>
c000064b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000064e:	83 ff 02             	cmp    edi,0x2
c0000651:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000654:	74 06                	je     c000065c <memmove+0x90>
c0000656:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000659:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000065c:	5b                   	pop    ebx
c000065d:	89 e8                	mov    eax,ebp
c000065f:	5e                   	pop    esi
c0000660:	5f                   	pop    edi
c0000661:	5d                   	pop    ebp
c0000662:	c3                   	ret    
c0000663:	90                   	nop
c0000664:	76 f6                	jbe    c000065c <memmove+0x90>
c0000666:	85 d2                	test   edx,edx
c0000668:	74 f2                	je     c000065c <memmove+0x90>
c000066a:	4b                   	dec    ebx
c000066b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000066e:	66 90                	xchg   ax,ax
c0000670:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000673:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000676:	4a                   	dec    edx
c0000677:	75 f7                	jne    c0000670 <memmove+0xa4>
c0000679:	5b                   	pop    ebx
c000067a:	89 e8                	mov    eax,ebp
c000067c:	5e                   	pop    esi
c000067d:	5f                   	pop    edi
c000067e:	5d                   	pop    ebp
c000067f:	c3                   	ret    
c0000680:	01 ea                	add    edx,ebp
c0000682:	89 e9                	mov    ecx,ebp
c0000684:	8a 03                	mov    al,BYTE PTR [ebx]
c0000686:	41                   	inc    ecx
c0000687:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000068a:	43                   	inc    ebx
c000068b:	39 d1                	cmp    ecx,edx
c000068d:	75 f5                	jne    c0000684 <memmove+0xb8>
c000068f:	eb cb                	jmp    c000065c <memmove+0x90>
c0000691:	8d 76 00             	lea    esi,[esi+0x0]

c0000694 <memset>:
c0000694:	57                   	push   edi
c0000695:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000699:	85 c9                	test   ecx,ecx
c000069b:	74 0b                	je     c00006a8 <memset+0x14>
c000069d:	fc                   	cld    
c000069e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00006a6:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00006a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ac:	5f                   	pop    edi
c00006ad:	c3                   	ret    
c00006ae:	66 90                	xchg   ax,ax

c00006b0 <strlen>:
c00006b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006b4:	31 c0                	xor    eax,eax
c00006b6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006b9:	74 09                	je     c00006c4 <strlen+0x14>
c00006bb:	90                   	nop
c00006bc:	40                   	inc    eax
c00006bd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006c1:	75 f9                	jne    c00006bc <strlen+0xc>
c00006c3:	c3                   	ret    
c00006c4:	c3                   	ret    
c00006c5:	8d 76 00             	lea    esi,[esi+0x0]

c00006c8 <strpbrk>:
c00006c8:	57                   	push   edi
c00006c9:	56                   	push   esi
c00006ca:	53                   	push   ebx
c00006cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006d3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006d5:	84 db                	test   bl,bl
c00006d7:	74 21                	je     c00006fa <strpbrk+0x32>
c00006d9:	8a 07                	mov    al,BYTE PTR [edi]
c00006db:	84 c0                	test   al,al
c00006dd:	74 14                	je     c00006f3 <strpbrk+0x2b>
c00006df:	38 d8                	cmp    al,bl
c00006e1:	74 19                	je     c00006fc <strpbrk+0x34>
c00006e3:	89 fa                	mov    edx,edi
c00006e5:	eb 05                	jmp    c00006ec <strpbrk+0x24>
c00006e7:	90                   	nop
c00006e8:	38 d9                	cmp    cl,bl
c00006ea:	74 10                	je     c00006fc <strpbrk+0x34>
c00006ec:	42                   	inc    edx
c00006ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006ef:	84 c9                	test   cl,cl
c00006f1:	75 f5                	jne    c00006e8 <strpbrk+0x20>
c00006f3:	46                   	inc    esi
c00006f4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006f6:	84 db                	test   bl,bl
c00006f8:	75 e1                	jne    c00006db <strpbrk+0x13>
c00006fa:	31 f6                	xor    esi,esi
c00006fc:	89 f0                	mov    eax,esi
c00006fe:	5b                   	pop    ebx
c00006ff:	5e                   	pop    esi
c0000700:	5f                   	pop    edi
c0000701:	c3                   	ret    
c0000702:	66 90                	xchg   ax,ax

c0000704 <strtok>:
c0000704:	56                   	push   esi
c0000705:	53                   	push   ebx
c0000706:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000070a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000070e:	85 db                	test   ebx,ebx
c0000710:	75 07                	jne    c0000719 <strtok+0x15>
c0000712:	eb 2c                	jmp    c0000740 <strtok+0x3c>
c0000714:	43                   	inc    ebx
c0000715:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000719:	56                   	push   esi
c000071a:	53                   	push   ebx
c000071b:	e8 a8 ff ff ff       	call   c00006c8 <strpbrk>
c0000720:	5a                   	pop    edx
c0000721:	a3 e0 87 02 c0       	mov    ds:0xc00287e0,eax
c0000726:	59                   	pop    ecx
c0000727:	39 d8                	cmp    eax,ebx
c0000729:	74 e9                	je     c0000714 <strtok+0x10>
c000072b:	85 c0                	test   eax,eax
c000072d:	74 1b                	je     c000074a <strtok+0x46>
c000072f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000732:	8d 50 01             	lea    edx,[eax+0x1]
c0000735:	89 d8                	mov    eax,ebx
c0000737:	89 15 e0 87 02 c0    	mov    DWORD PTR ds:0xc00287e0,edx
c000073d:	5b                   	pop    ebx
c000073e:	5e                   	pop    esi
c000073f:	c3                   	ret    
c0000740:	8b 1d e0 87 02 c0    	mov    ebx,DWORD PTR ds:0xc00287e0
c0000746:	85 db                	test   ebx,ebx
c0000748:	75 cf                	jne    c0000719 <strtok+0x15>
c000074a:	31 c0                	xor    eax,eax
c000074c:	5b                   	pop    ebx
c000074d:	5e                   	pop    esi
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strcpy>:
c0000750:	53                   	push   ebx
c0000751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000755:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000759:	89 c3                	mov    ebx,eax
c000075b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075d:	84 d2                	test   dl,dl
c000075f:	74 0d                	je     c000076e <strcpy+0x1e>
c0000761:	8d 76 00             	lea    esi,[esi+0x0]
c0000764:	88 13                	mov    BYTE PTR [ebx],dl
c0000766:	41                   	inc    ecx
c0000767:	43                   	inc    ebx
c0000768:	8a 11                	mov    dl,BYTE PTR [ecx]
c000076a:	84 d2                	test   dl,dl
c000076c:	75 f6                	jne    c0000764 <strcpy+0x14>
c000076e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000771:	5b                   	pop    ebx
c0000772:	c3                   	ret    
c0000773:	90                   	nop

c0000774 <strncpy>:
c0000774:	55                   	push   ebp
c0000775:	57                   	push   edi
c0000776:	56                   	push   esi
c0000777:	53                   	push   ebx
c0000778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000077c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000780:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000784:	85 c0                	test   eax,eax
c0000786:	74 39                	je     c00007c1 <strncpy+0x4d>
c0000788:	8a 1e                	mov    bl,BYTE PTR [esi]
c000078a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000078d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000790:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000793:	84 db                	test   bl,bl
c0000795:	74 31                	je     c00007c8 <strncpy+0x54>
c0000797:	85 c9                	test   ecx,ecx
c0000799:	74 26                	je     c00007c1 <strncpy+0x4d>
c000079b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000079e:	8d 48 fe             	lea    ecx,[eax-0x2]
c00007a1:	8d 55 02             	lea    edx,[ebp+0x2]
c00007a4:	8d 46 02             	lea    eax,[esi+0x2]
c00007a7:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00007aa:	84 db                	test   bl,bl
c00007ac:	75 0f                	jne    c00007bd <strncpy+0x49>
c00007ae:	eb 18                	jmp    c00007c8 <strncpy+0x54>
c00007b0:	40                   	inc    eax
c00007b1:	42                   	inc    edx
c00007b2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007b5:	49                   	dec    ecx
c00007b6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 0b                	je     c00007c8 <strncpy+0x54>
c00007bd:	85 c9                	test   ecx,ecx
c00007bf:	75 ef                	jne    c00007b0 <strncpy+0x3c>
c00007c1:	5b                   	pop    ebx
c00007c2:	89 e8                	mov    eax,ebp
c00007c4:	5e                   	pop    esi
c00007c5:	5f                   	pop    edi
c00007c6:	5d                   	pop    ebp
c00007c7:	c3                   	ret    
c00007c8:	85 c9                	test   ecx,ecx
c00007ca:	74 f5                	je     c00007c1 <strncpy+0x4d>
c00007cc:	fc                   	cld    
c00007cd:	31 c0                	xor    eax,eax
c00007cf:	89 d7                	mov    edi,edx
c00007d1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007d3:	89 e8                	mov    eax,ebp
c00007d5:	5b                   	pop    ebx
c00007d6:	5e                   	pop    esi
c00007d7:	5f                   	pop    edi
c00007d8:	5d                   	pop    ebp
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strcmp>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007e6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007e8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007eb:	38 d1                	cmp    cl,dl
c00007ed:	75 1d                	jne    c000080c <strcmp+0x30>
c00007ef:	84 c9                	test   cl,cl
c00007f1:	74 21                	je     c0000814 <strcmp+0x38>
c00007f3:	b8 01 00 00 00       	mov    eax,0x1
c00007f8:	eb 07                	jmp    c0000801 <strcmp+0x25>
c00007fa:	66 90                	xchg   ax,ax
c00007fc:	40                   	inc    eax
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 13                	je     c0000814 <strcmp+0x38>
c0000801:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000804:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000808:	38 ca                	cmp    dl,cl
c000080a:	74 f0                	je     c00007fc <strcmp+0x20>
c000080c:	0f b6 c2             	movzx  eax,dl
c000080f:	5b                   	pop    ebx
c0000810:	29 c8                	sub    eax,ecx
c0000812:	5e                   	pop    esi
c0000813:	c3                   	ret    
c0000814:	31 c0                	xor    eax,eax
c0000816:	5b                   	pop    ebx
c0000817:	5e                   	pop    esi
c0000818:	c3                   	ret    
c0000819:	8d 76 00             	lea    esi,[esi+0x0]

c000081c <strchr>:
c000081c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000820:	8a 10                	mov    dl,BYTE PTR [eax]
c0000822:	84 d2                	test   dl,dl
c0000824:	74 15                	je     c000083b <strchr+0x1f>
c0000826:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000082a:	38 ca                	cmp    dl,cl
c000082c:	75 06                	jne    c0000834 <strchr+0x18>
c000082e:	eb 0e                	jmp    c000083e <strchr+0x22>
c0000830:	38 ca                	cmp    dl,cl
c0000832:	74 09                	je     c000083d <strchr+0x21>
c0000834:	40                   	inc    eax
c0000835:	8a 10                	mov    dl,BYTE PTR [eax]
c0000837:	84 d2                	test   dl,dl
c0000839:	75 f5                	jne    c0000830 <strchr+0x14>
c000083b:	31 c0                	xor    eax,eax
c000083d:	c3                   	ret    
c000083e:	c3                   	ret    
c000083f:	90                   	nop

c0000840 <strncmp>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084f:	85 ff                	test   edi,edi
c0000851:	74 28                	je     c000087b <strncmp+0x3b>
c0000853:	8a 16                	mov    dl,BYTE PTR [esi]
c0000855:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000858:	38 d1                	cmp    cl,dl
c000085a:	75 28                	jne    c0000884 <strncmp+0x44>
c000085c:	8d 46 01             	lea    eax,[esi+0x1]
c000085f:	84 c9                	test   cl,cl
c0000861:	74 18                	je     c000087b <strncmp+0x3b>
c0000863:	01 fe                	add    esi,edi
c0000865:	eb 0f                	jmp    c0000876 <strncmp+0x36>
c0000867:	90                   	nop
c0000868:	8a 10                	mov    dl,BYTE PTR [eax]
c000086a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	75 13                	jne    c0000884 <strncmp+0x44>
c0000871:	40                   	inc    eax
c0000872:	84 d2                	test   dl,dl
c0000874:	74 05                	je     c000087b <strncmp+0x3b>
c0000876:	43                   	inc    ebx
c0000877:	39 c6                	cmp    esi,eax
c0000879:	75 ed                	jne    c0000868 <strncmp+0x28>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	8d 76 00             	lea    esi,[esi+0x0]
c0000884:	5b                   	pop    ebx
c0000885:	0f b6 c2             	movzx  eax,dl
c0000888:	5e                   	pop    esi
c0000889:	29 c8                	sub    eax,ecx
c000088b:	5f                   	pop    edi
c000088c:	c3                   	ret    
c000088d:	8d 76 00             	lea    esi,[esi+0x0]

c0000890 <strcat>:
c0000890:	56                   	push   esi
c0000891:	53                   	push   ebx
c0000892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000089a:	89 c3                	mov    ebx,eax
c000089c:	eb 04                	jmp    c00008a2 <strcat+0x12>
c000089e:	66 90                	xchg   ax,ax
c00008a0:	89 d3                	mov    ebx,edx
c00008a2:	8d 53 01             	lea    edx,[ebx+0x1]
c00008a5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x10>
c00008ab:	31 d2                	xor    edx,edx
c00008ad:	8d 76 00             	lea    esi,[esi+0x0]
c00008b0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008b3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008b6:	42                   	inc    edx
c00008b7:	84 c9                	test   cl,cl
c00008b9:	75 f5                	jne    c00008b0 <strcat+0x20>
c00008bb:	5b                   	pop    ebx
c00008bc:	5e                   	pop    esi
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strncat>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ce:	85 f6                	test   esi,esi
c00008d0:	74 1e                	je     c00008f0 <strncat+0x30>
c00008d2:	89 c2                	mov    edx,eax
c00008d4:	42                   	inc    edx
c00008d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008d9:	75 f9                	jne    c00008d4 <strncat+0x14>
c00008db:	01 ce                	add    esi,ecx
c00008dd:	eb 06                	jmp    c00008e5 <strncat+0x25>
c00008df:	90                   	nop
c00008e0:	39 f1                	cmp    ecx,esi
c00008e2:	74 10                	je     c00008f4 <strncat+0x34>
c00008e4:	42                   	inc    edx
c00008e5:	41                   	inc    ecx
c00008e6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008e9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008ec:	84 db                	test   bl,bl
c00008ee:	75 f0                	jne    c00008e0 <strncat+0x20>
c00008f0:	5b                   	pop    ebx
c00008f1:	5e                   	pop    esi
c00008f2:	c3                   	ret    
c00008f3:	90                   	nop
c00008f4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f7:	5b                   	pop    ebx
c00008f8:	5e                   	pop    esi
c00008f9:	c3                   	ret    
c00008fa:	66 90                	xchg   ax,ax

c00008fc <strstr>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	57                   	push   edi
c0000908:	e8 a3 fd ff ff       	call   c00006b0 <strlen>
c000090d:	59                   	pop    ecx
c000090e:	85 c0                	test   eax,eax
c0000910:	74 2a                	je     c000093c <strstr+0x40>
c0000912:	89 c6                	mov    esi,eax
c0000914:	eb 12                	jmp    c0000928 <strstr+0x2c>
c0000916:	66 90                	xchg   ax,ax
c0000918:	56                   	push   esi
c0000919:	57                   	push   edi
c000091a:	53                   	push   ebx
c000091b:	e8 70 fc ff ff       	call   c0000590 <memcmp>
c0000920:	83 c4 0c             	add    esp,0xc
c0000923:	85 c0                	test   eax,eax
c0000925:	74 15                	je     c000093c <strstr+0x40>
c0000927:	43                   	inc    ebx
c0000928:	53                   	push   ebx
c0000929:	e8 82 fd ff ff       	call   c00006b0 <strlen>
c000092e:	5a                   	pop    edx
c000092f:	39 f0                	cmp    eax,esi
c0000931:	73 e5                	jae    c0000918 <strstr+0x1c>
c0000933:	5b                   	pop    ebx
c0000934:	31 c0                	xor    eax,eax
c0000936:	5e                   	pop    esi
c0000937:	5f                   	pop    edi
c0000938:	c3                   	ret    
c0000939:	8d 76 00             	lea    esi,[esi+0x0]
c000093c:	89 d8                	mov    eax,ebx
c000093e:	5b                   	pop    ebx
c000093f:	5e                   	pop    esi
c0000940:	5f                   	pop    edi
c0000941:	c3                   	ret    
c0000942:	66 90                	xchg   ax,ax

c0000944 <toupper>:
c0000944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000948:	0f b6 d0             	movzx  edx,al
c000094b:	f6 82 a0 3e 02 c0 02 	test   BYTE PTR [edx-0x3ffdc160],0x2
c0000952:	74 03                	je     c0000957 <toupper+0x13>
c0000954:	83 e8 20             	sub    eax,0x20
c0000957:	c3                   	ret    

c0000958 <tolower>:
c0000958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000095c:	0f b6 d0             	movzx  edx,al
c000095f:	f6 82 a0 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc160],0x1
c0000966:	74 03                	je     c000096b <tolower+0x13>
c0000968:	83 c0 20             	add    eax,0x20
c000096b:	c3                   	ret    

c000096c <simple_strtoul>:
c000096c:	55                   	push   ebp
c000096d:	57                   	push   edi
c000096e:	56                   	push   esi
c000096f:	53                   	push   ebx
c0000970:	83 ec 08             	sub    esp,0x8
c0000973:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000977:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000097b:	90                   	nop
c000097c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000097f:	f6 82 a0 3e 02 c0 08 	test   BYTE PTR [edx-0x3ffdc160],0x8
c0000986:	75 05                	jne    c000098d <simple_strtoul+0x21>
c0000988:	80 fa 09             	cmp    dl,0x9
c000098b:	75 03                	jne    c0000990 <simple_strtoul+0x24>
c000098d:	41                   	inc    ecx
c000098e:	eb ec                	jmp    c000097c <simple_strtoul+0x10>
c0000990:	80 fa 2d             	cmp    dl,0x2d
c0000993:	0f 84 1b 01 00 00    	je     c0000ab4 <simple_strtoul+0x148>
c0000999:	80 fa 2b             	cmp    dl,0x2b
c000099c:	0f 84 c2 00 00 00    	je     c0000a64 <simple_strtoul+0xf8>
c00009a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009aa:	85 f6                	test   esi,esi
c00009ac:	0f 85 c3 00 00 00    	jne    c0000a75 <simple_strtoul+0x109>
c00009b2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b4:	80 fa 30             	cmp    dl,0x30
c00009b7:	0f 84 47 01 00 00    	je     c0000b04 <simple_strtoul+0x198>
c00009bd:	be 0a 00 00 00       	mov    esi,0xa
c00009c2:	84 d2                	test   dl,dl
c00009c4:	0f 84 6f 01 00 00    	je     c0000b39 <simple_strtoul+0x1cd>
c00009ca:	31 ed                	xor    ebp,ebp
c00009cc:	31 ff                	xor    edi,edi
c00009ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009d5:	eb 2b                	jmp    c0000a02 <simple_strtoul+0x96>
c00009d7:	90                   	nop
c00009d8:	83 eb 30             	sub    ebx,0x30
c00009db:	39 f3                	cmp    ebx,esi
c00009dd:	73 4d                	jae    c0000a2c <simple_strtoul+0xc0>
c00009df:	31 d2                	xor    edx,edx
c00009e1:	89 d8                	mov    eax,ebx
c00009e3:	f7 d0                	not    eax
c00009e5:	f7 f6                	div    esi
c00009e7:	39 f8                	cmp    eax,edi
c00009e9:	0f 82 b1 00 00 00    	jb     c0000aa0 <simple_strtoul+0x134>
c00009ef:	0f af fe             	imul   edi,esi
c00009f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f9:	01 df                	add    edi,ebx
c00009fb:	41                   	inc    ecx
c00009fc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009fe:	84 d2                	test   dl,dl
c0000a00:	74 2a                	je     c0000a2c <simple_strtoul+0xc0>
c0000a02:	0f b6 da             	movzx  ebx,dl
c0000a05:	f6 83 a0 3e 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc160],0x4
c0000a0c:	75 ca                	jne    c00009d8 <simple_strtoul+0x6c>
c0000a0e:	0f be d2             	movsx  edx,dl
c0000a11:	52                   	push   edx
c0000a12:	e8 2d ff ff ff       	call   c0000944 <toupper>
c0000a17:	5b                   	pop    ebx
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 a0 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc160],0x1
c0000a22:	74 08                	je     c0000a2c <simple_strtoul+0xc0>
c0000a24:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a27:	39 f3                	cmp    ebx,esi
c0000a29:	72 b4                	jb     c00009df <simple_strtoul+0x73>
c0000a2b:	90                   	nop
c0000a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a30:	85 c0                	test   eax,eax
c0000a32:	74 14                	je     c0000a48 <simple_strtoul+0xdc>
c0000a34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a37:	09 f8                	or     eax,edi
c0000a39:	75 71                	jne    c0000aac <simple_strtoul+0x140>
c0000a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a3f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a43:	31 ff                	xor    edi,edi
c0000a45:	89 30                	mov    DWORD PTR [eax],esi
c0000a47:	90                   	nop
c0000a48:	4d                   	dec    ebp
c0000a49:	75 05                	jne    c0000a50 <simple_strtoul+0xe4>
c0000a4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a50:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a55:	75 02                	jne    c0000a59 <simple_strtoul+0xed>
c0000a57:	f7 df                	neg    edi
c0000a59:	83 c4 08             	add    esp,0x8
c0000a5c:	89 f8                	mov    eax,edi
c0000a5e:	5b                   	pop    ebx
c0000a5f:	5e                   	pop    esi
c0000a60:	5f                   	pop    edi
c0000a61:	5d                   	pop    ebp
c0000a62:	c3                   	ret    
c0000a63:	90                   	nop
c0000a64:	41                   	inc    ecx
c0000a65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a6d:	85 f6                	test   esi,esi
c0000a6f:	0f 84 3d ff ff ff    	je     c00009b2 <simple_strtoul+0x46>
c0000a75:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a78:	83 f8 22             	cmp    eax,0x22
c0000a7b:	77 6a                	ja     c0000ae7 <simple_strtoul+0x17b>
c0000a7d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a7f:	83 fe 08             	cmp    esi,0x8
c0000a82:	0f 84 a2 00 00 00    	je     c0000b2a <simple_strtoul+0x1be>
c0000a88:	83 fe 10             	cmp    esi,0x10
c0000a8b:	0f 85 31 ff ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000a91:	80 fa 30             	cmp    dl,0x30
c0000a94:	74 2c                	je     c0000ac2 <simple_strtoul+0x156>
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	e9 22 ff ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000aa0:	bd 01 00 00 00       	mov    ebp,0x1
c0000aa5:	31 ff                	xor    edi,edi
c0000aa7:	e9 4f ff ff ff       	jmp    c00009fb <simple_strtoul+0x8f>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	89 08                	mov    DWORD PTR [eax],ecx
c0000ab2:	eb 94                	jmp    c0000a48 <simple_strtoul+0xdc>
c0000ab4:	41                   	inc    ecx
c0000ab5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000abd:	e9 e8 fe ff ff       	jmp    c00009aa <simple_strtoul+0x3e>
c0000ac2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac9:	50                   	push   eax
c0000aca:	e8 89 fe ff ff       	call   c0000958 <tolower>
c0000acf:	5e                   	pop    esi
c0000ad0:	83 f8 78             	cmp    eax,0x78
c0000ad3:	0f 84 84 00 00 00    	je     c0000b5d <simple_strtoul+0x1f1>
c0000ad9:	41                   	inc    ecx
c0000ada:	be 10 00 00 00       	mov    esi,0x10
c0000adf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ae2:	e9 db fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000ae7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aeb:	85 ff                	test   edi,edi
c0000aed:	74 5c                	je     c0000b4b <simple_strtoul+0x1df>
c0000aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af3:	85 c9                	test   ecx,ecx
c0000af5:	75 4e                	jne    c0000b45 <simple_strtoul+0x1d9>
c0000af7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000afd:	31 ff                	xor    edi,edi
c0000aff:	e9 4c ff ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b04:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b08:	88 04 24             	mov    BYTE PTR [esp],al
c0000b0b:	50                   	push   eax
c0000b0c:	e8 47 fe ff ff       	call   c0000958 <tolower>
c0000b11:	5d                   	pop    ebp
c0000b12:	83 f8 78             	cmp    eax,0x78
c0000b15:	74 3b                	je     c0000b52 <simple_strtoul+0x1e6>
c0000b17:	41                   	inc    ecx
c0000b18:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b1b:	80 fa 30             	cmp    dl,0x30
c0000b1e:	74 13                	je     c0000b33 <simple_strtoul+0x1c7>
c0000b20:	be 08 00 00 00       	mov    esi,0x8
c0000b25:	e9 98 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000b2a:	80 fa 30             	cmp    dl,0x30
c0000b2d:	0f 85 8f fe ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000b33:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b36:	41                   	inc    ecx
c0000b37:	eb e7                	jmp    c0000b20 <simple_strtoul+0x1b4>
c0000b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b3d:	85 d2                	test   edx,edx
c0000b3f:	74 0a                	je     c0000b4b <simple_strtoul+0x1df>
c0000b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b45:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b49:	89 30                	mov    DWORD PTR [eax],esi
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	e9 fe fe ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b52:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 34 ff ff ff       	jmp    c0000a91 <simple_strtoul+0x125>
c0000b5d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b60:	be 10 00 00 00       	mov    esi,0x10
c0000b65:	83 c1 02             	add    ecx,0x2
c0000b68:	e9 55 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>

c0000b6d <largebin_index>:
c0000b6d:	89 c2                	mov    edx,eax
c0000b6f:	c1 ea 08             	shr    edx,0x8
c0000b72:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b78:	77 10                	ja     c0000b8a <largebin_index+0x1d>
c0000b7a:	0f bd d2             	bsr    edx,edx
c0000b7d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b80:	d3 e8                	shr    eax,cl
c0000b82:	83 e0 03             	and    eax,0x3
c0000b85:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b89:	c3                   	ret    
c0000b8a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b8f:	c3                   	ret    

c0000b90 <malloc_init_state>:
c0000b90:	53                   	push   ebx
c0000b91:	8d 50 34             	lea    edx,[eax+0x34]
c0000b94:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b9a:	89 d1                	mov    ecx,edx
c0000b9c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b9f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000ba2:	83 c2 08             	add    edx,0x8
c0000ba5:	39 da                	cmp    edx,ebx
c0000ba7:	75 f3                	jne    c0000b9c <malloc_init_state+0xc>
c0000ba9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bab:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000bb5:	83 e2 03             	and    edx,0x3
c0000bb8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bc2:	83 ca 48             	or     edx,0x48
c0000bc5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bcf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bd9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000be0:	89 10                	mov    DWORD PTR [eax],edx
c0000be2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000be5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bef:	5b                   	pop    ebx
c0000bf0:	c3                   	ret    

c0000bf1 <malloc_consolidate>:
c0000bf1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bf3:	85 d2                	test   edx,edx
c0000bf5:	0f 84 d8 00 00 00    	je     c0000cd3 <malloc_consolidate+0xe2>
c0000bfb:	55                   	push   ebp
c0000bfc:	83 e2 fd             	and    edx,0xfffffffd
c0000bff:	57                   	push   edi
c0000c00:	89 c5                	mov    ebp,eax
c0000c02:	56                   	push   esi
c0000c03:	8d 78 34             	lea    edi,[eax+0x34]
c0000c06:	53                   	push   ebx
c0000c07:	83 ec 10             	sub    esp,0x10
c0000c0a:	89 10                	mov    DWORD PTR [eax],edx
c0000c0c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c10:	c1 ea 03             	shr    edx,0x3
c0000c13:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c17:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c1b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c1e:	85 d2                	test   edx,edx
c0000c20:	0f 84 98 00 00 00    	je     c0000cbe <malloc_consolidate+0xcd>
c0000c26:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c2d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c30:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c37:	89 f9                	mov    ecx,edi
c0000c39:	83 e1 fe             	and    ecx,0xfffffffe
c0000c3c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c3f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c42:	83 e3 fc             	and    ebx,0xfffffffc
c0000c45:	83 e7 01             	and    edi,0x1
c0000c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c4b:	75 14                	jne    c0000c61 <malloc_consolidate+0x70>
c0000c4d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c4f:	29 fa                	sub    edx,edi
c0000c51:	01 f9                	add    ecx,edi
c0000c53:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c56:	89 fb                	mov    ebx,edi
c0000c58:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c5b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c5e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c61:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c64:	74 40                	je     c0000ca6 <malloc_consolidate+0xb5>
c0000c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c69:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c6c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c70:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c73:	83 e7 01             	and    edi,0x1
c0000c76:	75 0e                	jne    c0000c86 <malloc_consolidate+0x95>
c0000c78:	01 d9                	add    ecx,ebx
c0000c7a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c7d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c80:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c83:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c86:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c89:	89 ce                	mov    esi,ecx
c0000c8b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c8e:	83 ce 01             	or     esi,0x1
c0000c91:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c94:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c97:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c9a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c9e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ca1:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ca4:	eb 0c                	jmp    c0000cb2 <malloc_consolidate+0xc1>
c0000ca6:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ca9:	83 c9 01             	or     ecx,0x1
c0000cac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000caf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000cb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000cb6:	85 d2                	test   edx,edx
c0000cb8:	0f 85 6f ff ff ff    	jne    c0000c2d <malloc_consolidate+0x3c>
c0000cbe:	83 c5 04             	add    ebp,0x4
c0000cc1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cc5:	0f 85 50 ff ff ff    	jne    c0000c1b <malloc_consolidate+0x2a>
c0000ccb:	83 c4 10             	add    esp,0x10
c0000cce:	5b                   	pop    ebx
c0000ccf:	5e                   	pop    esi
c0000cd0:	5f                   	pop    edi
c0000cd1:	5d                   	pop    ebp
c0000cd2:	c3                   	ret    
c0000cd3:	e9 b8 fe ff ff       	jmp    c0000b90 <malloc_init_state>

c0000cd8 <dlfree>:
c0000cd8:	57                   	push   edi
c0000cd9:	56                   	push   esi
c0000cda:	53                   	push   ebx
c0000cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cdf:	85 db                	test   ebx,ebx
c0000ce1:	0f 84 e2 00 00 00    	je     c0000dc9 <dlfree+0xf1>
c0000ce7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cea:	8b 0d 00 88 02 c0    	mov    ecx,DWORD PTR ds:0xc0028800
c0000cf0:	89 f0                	mov    eax,esi
c0000cf2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cf5:	83 e0 fc             	and    eax,0xfffffffc
c0000cf8:	39 c1                	cmp    ecx,eax
c0000cfa:	72 24                	jb     c0000d20 <dlfree+0x48>
c0000cfc:	83 c9 03             	or     ecx,0x3
c0000cff:	c1 e8 03             	shr    eax,0x3
c0000d02:	89 0d 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,ecx
c0000d08:	83 e8 02             	sub    eax,0x2
c0000d0b:	8b 0c 85 04 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd77fc]
c0000d12:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d14:	89 14 85 04 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77fc],edx
c0000d1b:	e9 a9 00 00 00       	jmp    c0000dc9 <dlfree+0xf1>
c0000d20:	83 e6 02             	and    esi,0x2
c0000d23:	0f 85 a0 00 00 00    	jne    c0000dc9 <dlfree+0xf1>
c0000d29:	83 c9 01             	or     ecx,0x1
c0000d2c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d2f:	89 0d 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,ecx
c0000d35:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d38:	83 e1 fc             	and    ecx,0xfffffffc
c0000d3b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d3f:	75 13                	jne    c0000d54 <dlfree+0x7c>
c0000d41:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d44:	29 da                	sub    edx,ebx
c0000d46:	01 d8                	add    eax,ebx
c0000d48:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d4b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d4e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d51:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d54:	39 35 2c 88 02 c0    	cmp    DWORD PTR ds:0xc002882c,esi
c0000d5a:	74 40                	je     c0000d9c <dlfree+0xc4>
c0000d5c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d60:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d63:	80 e3 01             	and    bl,0x1
c0000d66:	75 0e                	jne    c0000d76 <dlfree+0x9e>
c0000d68:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d6b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d6e:	01 c8                	add    eax,ecx
c0000d70:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d73:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d76:	8b 0d 3c 88 02 c0    	mov    ecx,DWORD PTR ds:0xc002883c
c0000d7c:	c7 42 0c 34 88 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028834
c0000d83:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d86:	89 15 3c 88 02 c0    	mov    DWORD PTR ds:0xc002883c,edx
c0000d8c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d8f:	89 c1                	mov    ecx,eax
c0000d91:	83 c9 01             	or     ecx,0x1
c0000d94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d97:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d9a:	eb 10                	jmp    c0000dac <dlfree+0xd4>
c0000d9c:	01 c8                	add    eax,ecx
c0000d9e:	89 c1                	mov    ecx,eax
c0000da0:	83 c9 01             	or     ecx,0x1
c0000da3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000da6:	89 15 2c 88 02 c0    	mov    DWORD PTR ds:0xc002882c,edx
c0000dac:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000db1:	76 16                	jbe    c0000dc9 <dlfree+0xf1>
c0000db3:	f6 05 00 88 02 c0 02 	test   BYTE PTR ds:0xc0028800,0x2
c0000dba:	74 0d                	je     c0000dc9 <dlfree+0xf1>
c0000dbc:	5b                   	pop    ebx
c0000dbd:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0000dc2:	5e                   	pop    esi
c0000dc3:	5f                   	pop    edi
c0000dc4:	e9 28 fe ff ff       	jmp    c0000bf1 <malloc_consolidate>
c0000dc9:	5b                   	pop    ebx
c0000dca:	5e                   	pop    esi
c0000dcb:	5f                   	pop    edi
c0000dcc:	c3                   	ret    

c0000dcd <sYSMALLOc>:
c0000dcd:	55                   	push   ebp
c0000dce:	57                   	push   edi
c0000dcf:	56                   	push   esi
c0000dd0:	53                   	push   ebx
c0000dd1:	89 d3                	mov    ebx,edx
c0000dd3:	83 ec 2c             	sub    esp,0x2c
c0000dd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dda:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000de0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000de3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000de6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dea:	74 1f                	je     c0000e0b <sYSMALLOc+0x3e>
c0000dec:	89 d8                	mov    eax,ebx
c0000dee:	e8 fe fd ff ff       	call   c0000bf1 <malloc_consolidate>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dfa:	83 e8 07             	sub    eax,0x7
c0000dfd:	50                   	push   eax
c0000dfe:	e8 30 02 00 00       	call   c0001033 <dlmalloc>
c0000e03:	83 c4 10             	add    esp,0x10
c0000e06:	e9 20 02 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e0b:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e0e:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e14:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e17:	83 e0 fc             	and    eax,0xfffffffc
c0000e1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e22:	83 c0 10             	add    eax,0x10
c0000e25:	01 c1                	add    ecx,eax
c0000e27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e2b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e32:	74 04                	je     c0000e38 <sYSMALLOc+0x6b>
c0000e34:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e38:	f7 da                	neg    edx
c0000e3a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e3e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e42:	21 d1                	and    ecx,edx
c0000e44:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e48:	7f 07                	jg     c0000e51 <sYSMALLOc+0x84>
c0000e4a:	31 c0                	xor    eax,eax
c0000e4c:	e9 da 01 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e51:	83 ec 0c             	sub    esp,0xc
c0000e54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e58:	e8 53 8e 00 00       	call   c0009cb0 <sbrk>
c0000e5d:	83 c4 10             	add    esp,0x10
c0000e60:	89 c6                	mov    esi,eax
c0000e62:	83 f8 ff             	cmp    eax,0xffffffff
c0000e65:	74 e3                	je     c0000e4a <sYSMALLOc+0x7d>
c0000e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e6b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e6f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e72:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e78:	39 f1                	cmp    ecx,esi
c0000e7a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e80:	75 13                	jne    c0000e95 <sYSMALLOc+0xc8>
c0000e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e86:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e8a:	83 c8 01             	or     eax,0x1
c0000e8d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e90:	e9 3e 01 00 00       	jmp    c0000fd3 <sYSMALLOc+0x206>
c0000e95:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e9b:	88 d0                	mov    al,dl
c0000e9d:	83 e0 01             	and    eax,0x1
c0000ea0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ea5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000ea9:	0f 95 c0             	setne  al
c0000eac:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000eb0:	39 f1                	cmp    ecx,esi
c0000eb2:	76 12                	jbe    c0000ec6 <sYSMALLOc+0xf9>
c0000eb4:	84 c0                	test   al,al
c0000eb6:	74 0e                	je     c0000ec6 <sYSMALLOc+0xf9>
c0000eb8:	83 e2 fe             	and    edx,0xfffffffe
c0000ebb:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ec1:	e9 83 00 00 00       	jmp    c0000f49 <sYSMALLOc+0x17c>
c0000ec6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ecb:	74 7c                	je     c0000f49 <sYSMALLOc+0x17c>
c0000ecd:	84 c0                	test   al,al
c0000ecf:	74 0c                	je     c0000edd <sYSMALLOc+0x110>
c0000ed1:	89 f0                	mov    eax,esi
c0000ed3:	29 c8                	sub    eax,ecx
c0000ed5:	01 e8                	add    eax,ebp
c0000ed7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000edd:	89 f2                	mov    edx,esi
c0000edf:	83 e2 07             	and    edx,0x7
c0000ee2:	74 0c                	je     c0000ef0 <sYSMALLOc+0x123>
c0000ee4:	b8 08 00 00 00       	mov    eax,0x8
c0000ee9:	29 d0                	sub    eax,edx
c0000eeb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eee:	eb 04                	jmp    c0000ef4 <sYSMALLOc+0x127>
c0000ef0:	89 f5                	mov    ebp,esi
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ef8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000efc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f00:	01 c1                	add    ecx,eax
c0000f02:	83 ec 0c             	sub    esp,0xc
c0000f05:	01 f1                	add    ecx,esi
c0000f07:	01 ca                	add    edx,ecx
c0000f09:	29 c8                	sub    eax,ecx
c0000f0b:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000f0f:	01 c2                	add    edx,eax
c0000f11:	52                   	push   edx
c0000f12:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f16:	e8 95 8d 00 00       	call   c0009cb0 <sbrk>
c0000f1b:	83 c4 10             	add    esp,0x10
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f25:	75 0f                	jne    c0000f36 <sYSMALLOc+0x169>
c0000f27:	83 ec 0c             	sub    esp,0xc
c0000f2a:	6a 00                	push   0x0
c0000f2c:	e8 7f 8d 00 00       	call   c0009cb0 <sbrk>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	eb 30                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f36:	39 c6                	cmp    esi,eax
c0000f38:	76 33                	jbe    c0000f6d <sYSMALLOc+0x1a0>
c0000f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f3e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f45:	01 f0                	add    eax,esi
c0000f47:	eb 1d                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f49:	83 ec 0c             	sub    esp,0xc
c0000f4c:	89 f5                	mov    ebp,esi
c0000f4e:	6a 00                	push   0x0
c0000f50:	e8 5b 8d 00 00       	call   c0009cb0 <sbrk>
c0000f55:	89 c2                	mov    edx,eax
c0000f57:	29 f2                	sub    edx,esi
c0000f59:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f5d:	83 c4 10             	add    esp,0x10
c0000f60:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f66:	31 d2                	xor    edx,edx
c0000f68:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6b:	74 66                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f6d:	29 e8                	sub    eax,ebp
c0000f6f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f72:	01 d0                	add    eax,edx
c0000f74:	83 c8 01             	or     eax,0x1
c0000f77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f7a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f80:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f85:	74 4c                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f8b:	83 e8 0c             	sub    eax,0xc
c0000f8e:	83 e0 f8             	and    eax,0xfffffff8
c0000f91:	89 c2                	mov    edx,eax
c0000f93:	83 ca 01             	or     edx,0x1
c0000f96:	83 f8 0f             	cmp    eax,0xf
c0000f99:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f9c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000fa4:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fac:	76 25                	jbe    c0000fd3 <sYSMALLOc+0x206>
c0000fae:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fb4:	83 ec 0c             	sub    esp,0xc
c0000fb7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fc1:	83 c7 08             	add    edi,0x8
c0000fc4:	57                   	push   edi
c0000fc5:	e8 0e fd ff ff       	call   c0000cd8 <dlfree>
c0000fca:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fd0:	83 c4 10             	add    esp,0x10
c0000fd3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fdf:	73 06                	jae    c0000fe7 <sYSMALLOc+0x21a>
c0000fe1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fe7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fed:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ff3:	73 06                	jae    c0000ffb <sYSMALLOc+0x22e>
c0000ff5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ffb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ffe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001001:	83 e2 fc             	and    edx,0xfffffffc
c0001004:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001008:	0f 82 3c fe ff ff    	jb     c0000e4a <sYSMALLOc+0x7d>
c000100e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001012:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001015:	29 fa                	sub    edx,edi
c0001017:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000101a:	83 ca 01             	or     edx,0x1
c000101d:	89 fb                	mov    ebx,edi
c000101f:	83 c0 08             	add    eax,0x8
c0001022:	83 cb 01             	or     ebx,0x1
c0001025:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001028:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000102b:	83 c4 2c             	add    esp,0x2c
c000102e:	5b                   	pop    ebx
c000102f:	5e                   	pop    esi
c0001030:	5f                   	pop    edi
c0001031:	5d                   	pop    ebp
c0001032:	c3                   	ret    

c0001033 <dlmalloc>:
c0001033:	55                   	push   ebp
c0001034:	57                   	push   edi
c0001035:	56                   	push   esi
c0001036:	53                   	push   ebx
c0001037:	83 ec 1c             	sub    esp,0x1c
c000103a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000103e:	83 f8 df             	cmp    eax,0xffffffdf
c0001041:	0f 87 70 03 00 00    	ja     c00013b7 <dlmalloc+0x384>
c0001047:	83 c0 0b             	add    eax,0xb
c000104a:	be 10 00 00 00       	mov    esi,0x10
c000104f:	83 f8 0f             	cmp    eax,0xf
c0001052:	76 05                	jbe    c0001059 <dlmalloc+0x26>
c0001054:	83 e0 f8             	and    eax,0xfffffff8
c0001057:	89 c6                	mov    esi,eax
c0001059:	8b 3d 00 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028800
c000105f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001065:	75 17                	jne    c000107e <dlmalloc+0x4b>
c0001067:	85 ff                	test   edi,edi
c0001069:	0f 85 05 03 00 00    	jne    c0001374 <dlmalloc+0x341>
c000106f:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0001074:	e8 78 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c0001079:	e9 f6 02 00 00       	jmp    c0001374 <dlmalloc+0x341>
c000107e:	39 f7                	cmp    edi,esi
c0001080:	72 1f                	jb     c00010a1 <dlmalloc+0x6e>
c0001082:	89 f2                	mov    edx,esi
c0001084:	c1 ea 03             	shr    edx,0x3
c0001087:	83 ea 02             	sub    edx,0x2
c000108a:	8b 04 95 04 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77fc]
c0001091:	85 c0                	test   eax,eax
c0001093:	74 0c                	je     c00010a1 <dlmalloc+0x6e>
c0001095:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001098:	89 0c 95 04 88 02 c0 	mov    DWORD PTR [edx*4-0x3ffd77fc],ecx
c000109f:	eb 30                	jmp    c00010d1 <dlmalloc+0x9e>
c00010a1:	89 f0                	mov    eax,esi
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	77 2e                	ja     c00010d9 <dlmalloc+0xa6>
c00010ab:	c1 e8 03             	shr    eax,0x3
c00010ae:	8d 14 c5 34 88 02 c0 	lea    edx,[eax*8-0x3ffd77cc]
c00010b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010bc:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010bf:	39 c3                	cmp    ebx,eax
c00010c1:	74 2e                	je     c00010f1 <dlmalloc+0xbe>
c00010c3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010c6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010cb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010ce:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010d1:	83 c0 08             	add    eax,0x8
c00010d4:	e9 e0 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c00010d9:	e8 8f fa ff ff       	call   c0000b6d <largebin_index>
c00010de:	83 e7 02             	and    edi,0x2
c00010e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010e5:	74 0a                	je     c00010f1 <dlmalloc+0xbe>
c00010e7:	b8 00 88 02 c0       	mov    eax,0xc0028800
c00010ec:	e8 00 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c00010f1:	8d 46 10             	lea    eax,[esi+0x10]
c00010f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010f8:	8b 1d 40 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028840
c00010fe:	81 fb 34 88 02 c0    	cmp    ebx,0xc0028834
c0001104:	0f 84 13 01 00 00    	je     c000121d <dlmalloc+0x1ea>
c000110a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000110d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001110:	83 e7 fc             	and    edi,0xfffffffc
c0001113:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001119:	77 4c                	ja     c0001167 <dlmalloc+0x134>
c000111b:	3d 34 88 02 c0       	cmp    eax,0xc0028834
c0001120:	75 45                	jne    c0001167 <dlmalloc+0x134>
c0001122:	39 1d 30 88 02 c0    	cmp    DWORD PTR ds:0xc0028830,ebx
c0001128:	75 3d                	jne    c0001167 <dlmalloc+0x134>
c000112a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000112e:	73 37                	jae    c0001167 <dlmalloc+0x134>
c0001130:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001133:	89 fa                	mov    edx,edi
c0001135:	a3 3c 88 02 c0       	mov    ds:0xc002883c,eax
c000113a:	a3 40 88 02 c0       	mov    ds:0xc0028840,eax
c000113f:	a3 30 88 02 c0       	mov    ds:0xc0028830,eax
c0001144:	29 f2                	sub    edx,esi
c0001146:	c7 40 08 34 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028834
c000114d:	c7 40 0c 34 88 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028834
c0001154:	83 ce 01             	or     esi,0x1
c0001157:	89 d1                	mov    ecx,edx
c0001159:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000115c:	83 c9 01             	or     ecx,0x1
c000115f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001162:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001165:	eb 15                	jmp    c000117c <dlmalloc+0x149>
c0001167:	a3 40 88 02 c0       	mov    ds:0xc0028840,eax
c000116c:	39 fe                	cmp    esi,edi
c000116e:	c7 40 08 34 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028834
c0001175:	75 0d                	jne    c0001184 <dlmalloc+0x151>
c0001177:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000117c:	8d 43 08             	lea    eax,[ebx+0x8]
c000117f:	e9 35 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001184:	89 f8                	mov    eax,edi
c0001186:	81 ff ff 00 00 00    	cmp    edi,0xff
c000118c:	77 19                	ja     c00011a7 <dlmalloc+0x174>
c000118e:	c1 e8 03             	shr    eax,0x3
c0001191:	8d 14 00             	lea    edx,[eax+eax*1]
c0001194:	83 c2 0d             	add    edx,0xd
c0001197:	8d 2c 95 f8 87 02 c0 	lea    ebp,[edx*4-0x3ffd7808]
c000119e:	8b 14 95 00 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7800]
c00011a5:	eb 46                	jmp    c00011ed <dlmalloc+0x1ba>
c00011a7:	e8 c1 f9 ff ff       	call   c0000b6d <largebin_index>
c00011ac:	8d 14 00             	lea    edx,[eax+eax*1]
c00011af:	83 c2 0d             	add    edx,0xd
c00011b2:	8d 0c 95 00 88 02 c0 	lea    ecx,[edx*4-0x3ffd7800]
c00011b9:	8b 14 95 00 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7800]
c00011c0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011c3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011c7:	89 d5                	mov    ebp,edx
c00011c9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011cd:	74 1e                	je     c00011ed <dlmalloc+0x1ba>
c00011cf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011d2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011d5:	77 12                	ja     c00011e9 <dlmalloc+0x1b6>
c00011d7:	83 cf 01             	or     edi,0x1
c00011da:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011dd:	76 05                	jbe    c00011e4 <dlmalloc+0x1b1>
c00011df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011e2:	eb f6                	jmp    c00011da <dlmalloc+0x1a7>
c00011e4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011e7:	eb 04                	jmp    c00011ed <dlmalloc+0x1ba>
c00011e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ed:	89 c7                	mov    edi,eax
c00011ef:	88 c1                	mov    cl,al
c00011f1:	c1 ff 05             	sar    edi,0x5
c00011f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011f8:	bf 01 00 00 00       	mov    edi,0x1
c00011fd:	d3 e7                	shl    edi,cl
c00011ff:	89 f8                	mov    eax,edi
c0001201:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001205:	09 04 bd 34 8b 02 c0 	or     DWORD PTR [edi*4-0x3ffd74cc],eax
c000120c:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000120f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001212:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001215:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001218:	e9 db fe ff ff       	jmp    c00010f8 <dlmalloc+0xc5>
c000121d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001223:	76 78                	jbe    c000129d <dlmalloc+0x26a>
c0001225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001229:	8d 04 c5 34 88 02 c0 	lea    eax,[eax*8-0x3ffd77cc]
c0001230:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001233:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001236:	39 ca                	cmp    edx,ecx
c0001238:	74 63                	je     c000129d <dlmalloc+0x26a>
c000123a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000123d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001240:	83 e3 fc             	and    ebx,0xfffffffc
c0001243:	39 de                	cmp    esi,ebx
c0001245:	77 52                	ja     c0001299 <dlmalloc+0x266>
c0001247:	89 df                	mov    edi,ebx
c0001249:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000124c:	29 f7                	sub    edi,esi
c000124e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001251:	01 d3                	add    ebx,edx
c0001253:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001256:	83 ff 0f             	cmp    edi,0xf
c0001259:	8d 42 08             	lea    eax,[edx+0x8]
c000125c:	77 09                	ja     c0001267 <dlmalloc+0x234>
c000125e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001262:	e9 52 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001267:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000126a:	83 ce 01             	or     esi,0x1
c000126d:	89 0d 3c 88 02 c0    	mov    DWORD PTR ds:0xc002883c,ecx
c0001273:	89 0d 40 88 02 c0    	mov    DWORD PTR ds:0xc0028840,ecx
c0001279:	c7 41 08 34 88 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028834
c0001280:	c7 41 0c 34 88 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028834
c0001287:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000128a:	89 fa                	mov    edx,edi
c000128c:	83 ca 01             	or     edx,0x1
c000128f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001292:	89 3b                	mov    DWORD PTR [ebx],edi
c0001294:	e9 20 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001299:	89 c2                	mov    edx,eax
c000129b:	eb 99                	jmp    c0001236 <dlmalloc+0x203>
c000129d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00012a1:	b8 01 00 00 00       	mov    eax,0x1
c00012a6:	41                   	inc    ecx
c00012a7:	89 cb                	mov    ebx,ecx
c00012a9:	8d 14 cd 2c 88 02 c0 	lea    edx,[ecx*8-0x3ffd77d4]
c00012b0:	c1 eb 05             	shr    ebx,0x5
c00012b3:	d3 e0                	shl    eax,cl
c00012b5:	8b 3c 9d 34 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd74cc]
c00012bc:	39 f8                	cmp    eax,edi
c00012be:	77 04                	ja     c00012c4 <dlmalloc+0x291>
c00012c0:	85 c0                	test   eax,eax
c00012c2:	75 26                	jne    c00012ea <dlmalloc+0x2b7>
c00012c4:	43                   	inc    ebx
c00012c5:	83 fb 02             	cmp    ebx,0x2
c00012c8:	0f 87 a6 00 00 00    	ja     c0001374 <dlmalloc+0x341>
c00012ce:	8b 3c 9d 34 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd74cc]
c00012d5:	85 ff                	test   edi,edi
c00012d7:	74 eb                	je     c00012c4 <dlmalloc+0x291>
c00012d9:	89 d8                	mov    eax,ebx
c00012db:	c1 e0 06             	shl    eax,0x6
c00012de:	8d 14 85 2c 88 02 c0 	lea    edx,[eax*4-0x3ffd77d4]
c00012e5:	b8 01 00 00 00       	mov    eax,0x1
c00012ea:	85 f8                	test   eax,edi
c00012ec:	75 07                	jne    c00012f5 <dlmalloc+0x2c2>
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	01 c0                	add    eax,eax
c00012f3:	eb f5                	jmp    c00012ea <dlmalloc+0x2b7>
c00012f5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012f8:	39 ca                	cmp    edx,ecx
c00012fa:	75 14                	jne    c0001310 <dlmalloc+0x2dd>
c00012fc:	89 c1                	mov    ecx,eax
c00012fe:	83 c2 08             	add    edx,0x8
c0001301:	f7 d1                	not    ecx
c0001303:	01 c0                	add    eax,eax
c0001305:	21 cf                	and    edi,ecx
c0001307:	89 3c 9d 34 8b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd74cc],edi
c000130e:	eb ac                	jmp    c00012bc <dlmalloc+0x289>
c0001310:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001313:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001316:	83 e0 fc             	and    eax,0xfffffffc
c0001319:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000131c:	89 c3                	mov    ebx,eax
c000131e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001321:	29 f3                	sub    ebx,esi
c0001323:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001326:	83 fb 0f             	cmp    ebx,0xf
c0001329:	8d 41 08             	lea    eax,[ecx+0x8]
c000132c:	77 09                	ja     c0001337 <dlmalloc+0x304>
c000132e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001332:	e9 82 00 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001337:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000133a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001340:	89 3d 3c 88 02 c0    	mov    DWORD PTR ds:0xc002883c,edi
c0001346:	89 3d 40 88 02 c0    	mov    DWORD PTR ds:0xc0028840,edi
c000134c:	c7 47 08 34 88 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028834
c0001353:	c7 47 0c 34 88 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028834
c000135a:	77 06                	ja     c0001362 <dlmalloc+0x32f>
c000135c:	89 3d 30 88 02 c0    	mov    DWORD PTR ds:0xc0028830,edi
c0001362:	83 ce 01             	or     esi,0x1
c0001365:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	83 c9 01             	or     ecx,0x1
c000136d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001370:	89 1a                	mov    DWORD PTR [edx],ebx
c0001372:	eb 45                	jmp    c00013b9 <dlmalloc+0x386>
c0001374:	a1 2c 88 02 c0       	mov    eax,ds:0xc002882c
c0001379:	8d 4e 10             	lea    ecx,[esi+0x10]
c000137c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000137f:	83 e2 fc             	and    edx,0xfffffffc
c0001382:	39 d1                	cmp    ecx,edx
c0001384:	77 1e                	ja     c00013a4 <dlmalloc+0x371>
c0001386:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001389:	89 f3                	mov    ebx,esi
c000138b:	89 0d 2c 88 02 c0    	mov    DWORD PTR ds:0xc002882c,ecx
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	29 f2                	sub    edx,esi
c0001396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001399:	83 ca 01             	or     edx,0x1
c000139c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139f:	e9 2d fd ff ff       	jmp    c00010d1 <dlmalloc+0x9e>
c00013a4:	83 c4 1c             	add    esp,0x1c
c00013a7:	89 f0                	mov    eax,esi
c00013a9:	5b                   	pop    ebx
c00013aa:	ba 00 88 02 c0       	mov    edx,0xc0028800
c00013af:	5e                   	pop    esi
c00013b0:	5f                   	pop    edi
c00013b1:	5d                   	pop    ebp
c00013b2:	e9 16 fa ff ff       	jmp    c0000dcd <sYSMALLOc>
c00013b7:	31 c0                	xor    eax,eax
c00013b9:	83 c4 1c             	add    esp,0x1c
c00013bc:	5b                   	pop    ebx
c00013bd:	5e                   	pop    esi
c00013be:	5f                   	pop    edi
c00013bf:	5d                   	pop    ebp
c00013c0:	c3                   	ret    

c00013c1 <iALLOc>:
c00013c1:	55                   	push   ebp
c00013c2:	89 c5                	mov    ebp,eax
c00013c4:	57                   	push   edi
c00013c5:	56                   	push   esi
c00013c6:	53                   	push   ebx
c00013c7:	83 ec 2c             	sub    esp,0x2c
c00013ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013ce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013d6:	83 3d 00 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028800,0x0
c00013dd:	75 12                	jne    c00013f1 <iALLOc+0x30>
c00013df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013e3:	b8 00 88 02 c0       	mov    eax,0xc0028800
c00013e8:	e8 04 f8 ff ff       	call   c0000bf1 <malloc_consolidate>
c00013ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f6:	74 12                	je     c000140a <iALLOc+0x49>
c00013f8:	85 ed                	test   ebp,ebp
c00013fa:	0f 84 64 01 00 00    	je     c0001564 <iALLOc+0x1a3>
c0001400:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001408:	eb 33                	jmp    c000143d <iALLOc+0x7c>
c000140a:	85 ed                	test   ebp,ebp
c000140c:	75 14                	jne    c0001422 <iALLOc+0x61>
c000140e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001416:	83 c4 2c             	add    esp,0x2c
c0001419:	5b                   	pop    ebx
c000141a:	5e                   	pop    esi
c000141b:	5f                   	pop    edi
c000141c:	5d                   	pop    ebp
c000141d:	e9 11 fc ff ff       	jmp    c0001033 <dlmalloc>
c0001422:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001429:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001431:	83 f8 0f             	cmp    eax,0xf
c0001434:	76 07                	jbe    c000143d <iALLOc+0x7c>
c0001436:	83 e0 f8             	and    eax,0xfffffff8
c0001439:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000143d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001442:	75 09                	jne    c000144d <iALLOc+0x8c>
c0001444:	89 d0                	mov    eax,edx
c0001446:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001449:	31 f6                	xor    esi,esi
c000144b:	eb 3b                	jmp    c0001488 <iALLOc+0xc7>
c000144d:	8b 02                	mov    eax,DWORD PTR [edx]
c000144f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001457:	83 c0 0b             	add    eax,0xb
c000145a:	83 f8 0f             	cmp    eax,0xf
c000145d:	76 07                	jbe    c0001466 <iALLOc+0xa5>
c000145f:	83 e0 f8             	and    eax,0xfffffff8
c0001462:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001466:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000146a:	0f af f5             	imul   esi,ebp
c000146d:	eb 25                	jmp    c0001494 <iALLOc+0xd3>
c000146f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001471:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001474:	bb 10 00 00 00       	mov    ebx,0x10
c0001479:	83 f9 0f             	cmp    ecx,0xf
c000147c:	76 05                	jbe    c0001483 <iALLOc+0xc2>
c000147e:	83 e1 f8             	and    ecx,0xfffffff8
c0001481:	89 cb                	mov    ebx,ecx
c0001483:	01 de                	add    esi,ebx
c0001485:	83 c0 04             	add    eax,0x4
c0001488:	39 c7                	cmp    edi,eax
c000148a:	75 e3                	jne    c000146f <iALLOc+0xae>
c000148c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001494:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001498:	8b 1d 54 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b54
c000149e:	83 ec 0c             	sub    esp,0xc
c00014a1:	c7 05 54 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b54,0x0
c00014ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00014af:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014b3:	50                   	push   eax
c00014b4:	e8 7a fb ff ff       	call   c0001033 <dlmalloc>
c00014b9:	83 c4 10             	add    esp,0x10
c00014bc:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c00014c2:	85 c0                	test   eax,eax
c00014c4:	0f 84 92 00 00 00    	je     c000155c <iALLOc+0x19b>
c00014ca:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014cd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014d0:	83 e3 fc             	and    ebx,0xfffffffc
c00014d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014d7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014dc:	74 1e                	je     c00014fc <iALLOc+0x13b>
c00014de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014e2:	89 d9                	mov    ecx,ebx
c00014e4:	52                   	push   edx
c00014e5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014e9:	83 e9 04             	sub    ecx,0x4
c00014ec:	51                   	push   ecx
c00014ed:	6a 00                	push   0x0
c00014ef:	50                   	push   eax
c00014f0:	e8 9f f1 ff ff       	call   c0000694 <memset>
c00014f5:	83 c4 10             	add    esp,0x10
c00014f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001501:	75 14                	jne    c0001517 <iALLOc+0x156>
c0001503:	8d 04 37             	lea    eax,[edi+esi*1]
c0001506:	29 f3                	sub    ebx,esi
c0001508:	8d 48 08             	lea    ecx,[eax+0x8]
c000150b:	83 cb 01             	or     ebx,0x1
c000150e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001512:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001515:	89 f3                	mov    ebx,esi
c0001517:	31 c0                	xor    eax,eax
c0001519:	4d                   	dec    ebp
c000151a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000151d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001521:	39 c5                	cmp    ebp,eax
c0001523:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001526:	74 2c                	je     c0001554 <iALLOc+0x193>
c0001528:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000152c:	85 c9                	test   ecx,ecx
c000152e:	75 15                	jne    c0001545 <iALLOc+0x184>
c0001530:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001533:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001536:	b9 10 00 00 00       	mov    ecx,0x10
c000153b:	83 fe 0f             	cmp    esi,0xf
c000153e:	76 05                	jbe    c0001545 <iALLOc+0x184>
c0001540:	83 e6 f8             	and    esi,0xfffffff8
c0001543:	89 f1                	mov    ecx,esi
c0001545:	89 ce                	mov    esi,ecx
c0001547:	29 cb                	sub    ebx,ecx
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	40                   	inc    eax
c000154d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001550:	01 cf                	add    edi,ecx
c0001552:	eb c6                	jmp    c000151a <iALLOc+0x159>
c0001554:	83 cb 01             	or     ebx,0x1
c0001557:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000155a:	eb 08                	jmp    c0001564 <iALLOc+0x1a3>
c000155c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001568:	83 c4 2c             	add    esp,0x2c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	c3                   	ret    

c0001570 <dlrealloc>:
c0001570:	55                   	push   ebp
c0001571:	57                   	push   edi
c0001572:	56                   	push   esi
c0001573:	53                   	push   ebx
c0001574:	83 ec 1c             	sub    esp,0x1c
c0001577:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000157b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000157f:	85 db                	test   ebx,ebx
c0001581:	75 10                	jne    c0001593 <dlrealloc+0x23>
c0001583:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001587:	83 c4 1c             	add    esp,0x1c
c000158a:	5b                   	pop    ebx
c000158b:	5e                   	pop    esi
c000158c:	5f                   	pop    edi
c000158d:	5d                   	pop    ebp
c000158e:	e9 a0 fa ff ff       	jmp    c0001033 <dlmalloc>
c0001593:	83 f8 df             	cmp    eax,0xffffffdf
c0001596:	76 07                	jbe    c000159f <dlrealloc+0x2f>
c0001598:	31 db                	xor    ebx,ebx
c000159a:	e9 6a 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c000159f:	83 c0 0b             	add    eax,0xb
c00015a2:	bd 10 00 00 00       	mov    ebp,0x10
c00015a7:	83 f8 0f             	cmp    eax,0xf
c00015aa:	76 05                	jbe    c00015b1 <dlrealloc+0x41>
c00015ac:	83 e0 f8             	and    eax,0xfffffff8
c00015af:	89 c5                	mov    ebp,eax
c00015b1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015b4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015b7:	89 c6                	mov    esi,eax
c00015b9:	83 e6 fc             	and    esi,0xfffffffc
c00015bc:	a8 02                	test   al,0x2
c00015be:	75 d8                	jne    c0001598 <dlrealloc+0x28>
c00015c0:	39 f5                	cmp    ebp,esi
c00015c2:	0f 86 04 01 00 00    	jbe    c00016cc <dlrealloc+0x15c>
c00015c8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015cb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015ce:	39 15 2c 88 02 c0    	cmp    DWORD PTR ds:0xc002882c,edx
c00015d4:	75 33                	jne    c0001609 <dlrealloc+0x99>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015df:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015e2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015e6:	77 49                	ja     c0001631 <dlrealloc+0xc1>
c00015e8:	01 ef                	add    edi,ebp
c00015ea:	83 e0 01             	and    eax,0x1
c00015ed:	09 e8                	or     eax,ebp
c00015ef:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015f2:	89 3d 2c 88 02 c0    	mov    DWORD PTR ds:0xc002882c,edi
c00015f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015fc:	29 e8                	sub    eax,ebp
c00015fe:	83 c8 01             	or     eax,0x1
c0001601:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001604:	e9 00 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c0001609:	89 c8                	mov    eax,ecx
c000160b:	83 e0 fe             	and    eax,0xfffffffe
c000160e:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001613:	75 1c                	jne    c0001631 <dlrealloc+0xc1>
c0001615:	83 e1 fc             	and    ecx,0xfffffffc
c0001618:	01 f1                	add    ecx,esi
c000161a:	39 cd                	cmp    ebp,ecx
c000161c:	77 13                	ja     c0001631 <dlrealloc+0xc1>
c000161e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001621:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001624:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001627:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000162a:	89 ce                	mov    esi,ecx
c000162c:	e9 9b 00 00 00       	jmp    c00016cc <dlrealloc+0x15c>
c0001631:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001635:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001638:	83 ec 0c             	sub    esp,0xc
c000163b:	50                   	push   eax
c000163c:	e8 f2 f9 ff ff       	call   c0001033 <dlmalloc>
c0001641:	83 c4 10             	add    esp,0x10
c0001644:	85 c0                	test   eax,eax
c0001646:	0f 84 4c ff ff ff    	je     c0001598 <dlrealloc+0x28>
c000164c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000164f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001653:	39 ca                	cmp    edx,ecx
c0001655:	75 0a                	jne    c0001661 <dlrealloc+0xf1>
c0001657:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000165a:	83 e0 fc             	and    eax,0xfffffffc
c000165d:	01 c6                	add    esi,eax
c000165f:	eb 6b                	jmp    c00016cc <dlrealloc+0x15c>
c0001661:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001664:	83 f9 27             	cmp    ecx,0x27
c0001667:	76 08                	jbe    c0001671 <dlrealloc+0x101>
c0001669:	89 de                	mov    esi,ebx
c000166b:	89 c7                	mov    edi,eax
c000166d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000166f:	eb 43                	jmp    c00016b4 <dlrealloc+0x144>
c0001671:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001673:	83 f9 13             	cmp    ecx,0x13
c0001676:	89 10                	mov    DWORD PTR [eax],edx
c0001678:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000167b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000167e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001681:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001684:	76 2e                	jbe    c00016b4 <dlrealloc+0x144>
c0001686:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001689:	83 f9 1b             	cmp    ecx,0x1b
c000168c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000168f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001695:	76 1d                	jbe    c00016b4 <dlrealloc+0x144>
c0001697:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000169a:	83 f9 23             	cmp    ecx,0x23
c000169d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00016a0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00016a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00016a6:	76 0c                	jbe    c00016b4 <dlrealloc+0x144>
c00016a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00016ab:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00016ae:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016b1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016b8:	83 ec 0c             	sub    esp,0xc
c00016bb:	53                   	push   ebx
c00016bc:	e8 17 f6 ff ff       	call   c0000cd8 <dlfree>
c00016c1:	83 c4 10             	add    esp,0x10
c00016c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016c8:	89 c3                	mov    ebx,eax
c00016ca:	eb 3d                	jmp    c0001709 <dlrealloc+0x199>
c00016cc:	89 f2                	mov    edx,esi
c00016ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016d1:	29 ea                	sub    edx,ebp
c00016d3:	83 e1 01             	and    ecx,0x1
c00016d6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016d9:	83 fa 0f             	cmp    edx,0xf
c00016dc:	77 0b                	ja     c00016e9 <dlrealloc+0x179>
c00016de:	09 ce                	or     esi,ecx
c00016e0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016e3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e7:	eb 20                	jmp    c0001709 <dlrealloc+0x199>
c00016e9:	01 ef                	add    edi,ebp
c00016eb:	83 ec 0c             	sub    esp,0xc
c00016ee:	09 cd                	or     ebp,ecx
c00016f0:	83 ca 01             	or     edx,0x1
c00016f3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016f6:	83 c7 08             	add    edi,0x8
c00016f9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016fc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001700:	57                   	push   edi
c0001701:	e8 d2 f5 ff ff       	call   c0000cd8 <dlfree>
c0001706:	83 c4 10             	add    esp,0x10
c0001709:	83 c4 1c             	add    esp,0x1c
c000170c:	89 d8                	mov    eax,ebx
c000170e:	5b                   	pop    ebx
c000170f:	5e                   	pop    esi
c0001710:	5f                   	pop    edi
c0001711:	5d                   	pop    ebp
c0001712:	c3                   	ret    

c0001713 <dlmemalign>:
c0001713:	55                   	push   ebp
c0001714:	57                   	push   edi
c0001715:	56                   	push   esi
c0001716:	53                   	push   ebx
c0001717:	83 ec 0c             	sub    esp,0xc
c000171a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000171e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001722:	83 fa 08             	cmp    edx,0x8
c0001725:	77 10                	ja     c0001737 <dlmemalign+0x24>
c0001727:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000172b:	83 c4 0c             	add    esp,0xc
c000172e:	5b                   	pop    ebx
c000172f:	5e                   	pop    esi
c0001730:	5f                   	pop    edi
c0001731:	5d                   	pop    ebp
c0001732:	e9 fc f8 ff ff       	jmp    c0001033 <dlmalloc>
c0001737:	bf 10 00 00 00       	mov    edi,0x10
c000173c:	83 fa 0f             	cmp    edx,0xf
c000173f:	76 13                	jbe    c0001754 <dlmemalign+0x41>
c0001741:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001744:	85 d1                	test   ecx,edx
c0001746:	75 04                	jne    c000174c <dlmemalign+0x39>
c0001748:	89 d7                	mov    edi,edx
c000174a:	eb 08                	jmp    c0001754 <dlmemalign+0x41>
c000174c:	39 d7                	cmp    edi,edx
c000174e:	73 04                	jae    c0001754 <dlmemalign+0x41>
c0001750:	01 ff                	add    edi,edi
c0001752:	eb f8                	jmp    c000174c <dlmemalign+0x39>
c0001754:	83 f8 df             	cmp    eax,0xffffffdf
c0001757:	76 07                	jbe    c0001760 <dlmemalign+0x4d>
c0001759:	31 c0                	xor    eax,eax
c000175b:	e9 ce 00 00 00       	jmp    c000182e <dlmemalign+0x11b>
c0001760:	83 c0 0b             	add    eax,0xb
c0001763:	bd 10 00 00 00       	mov    ebp,0x10
c0001768:	83 f8 0f             	cmp    eax,0xf
c000176b:	76 05                	jbe    c0001772 <dlmemalign+0x5f>
c000176d:	83 e0 f8             	and    eax,0xfffffff8
c0001770:	89 c5                	mov    ebp,eax
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001779:	50                   	push   eax
c000177a:	e8 b4 f8 ff ff       	call   c0001033 <dlmalloc>
c000177f:	83 c4 10             	add    esp,0x10
c0001782:	89 c1                	mov    ecx,eax
c0001784:	85 c0                	test   eax,eax
c0001786:	74 d1                	je     c0001759 <dlmemalign+0x46>
c0001788:	31 d2                	xor    edx,edx
c000178a:	8d 70 f8             	lea    esi,[eax-0x8]
c000178d:	f7 f7                	div    edi
c000178f:	85 d2                	test   edx,edx
c0001791:	74 62                	je     c00017f5 <dlmemalign+0xe2>
c0001793:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001797:	89 f8                	mov    eax,edi
c0001799:	f7 d8                	neg    eax
c000179b:	21 c3                	and    ebx,eax
c000179d:	83 eb 08             	sub    ebx,0x8
c00017a0:	89 d8                	mov    eax,ebx
c00017a2:	29 f0                	sub    eax,esi
c00017a4:	83 f8 0f             	cmp    eax,0xf
c00017a7:	77 02                	ja     c00017ab <dlmemalign+0x98>
c00017a9:	01 fb                	add    ebx,edi
c00017ab:	89 d8                	mov    eax,ebx
c00017ad:	29 f0                	sub    eax,esi
c00017af:	89 c6                	mov    esi,eax
c00017b1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017b4:	89 c2                	mov    edx,eax
c00017b6:	83 e2 fc             	and    edx,0xfffffffc
c00017b9:	29 f2                	sub    edx,esi
c00017bb:	a8 02                	test   al,0x2
c00017bd:	74 10                	je     c00017cf <dlmemalign+0xbc>
c00017bf:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017c2:	83 ca 02             	or     edx,0x2
c00017c5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017c8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ca:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017cd:	eb 5f                	jmp    c000182e <dlmemalign+0x11b>
c00017cf:	83 ec 0c             	sub    esp,0xc
c00017d2:	89 d0                	mov    eax,edx
c00017d4:	83 c8 01             	or     eax,0x1
c00017d7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017da:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017e2:	83 e0 01             	and    eax,0x1
c00017e5:	09 f0                	or     eax,esi
c00017e7:	89 de                	mov    esi,ebx
c00017e9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ec:	51                   	push   ecx
c00017ed:	e8 e6 f4 ff ff       	call   c0000cd8 <dlfree>
c00017f2:	83 c4 10             	add    esp,0x10
c00017f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017f8:	a8 02                	test   al,0x2
c00017fa:	75 2f                	jne    c000182b <dlmemalign+0x118>
c00017fc:	83 e0 fc             	and    eax,0xfffffffc
c00017ff:	8d 55 10             	lea    edx,[ebp+0x10]
c0001802:	39 c2                	cmp    edx,eax
c0001804:	73 25                	jae    c000182b <dlmemalign+0x118>
c0001806:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001809:	83 ec 0c             	sub    esp,0xc
c000180c:	29 e8                	sub    eax,ebp
c000180e:	83 c2 08             	add    edx,0x8
c0001811:	83 c8 01             	or     eax,0x1
c0001814:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001817:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000181a:	83 e0 01             	and    eax,0x1
c000181d:	09 c5                	or     ebp,eax
c000181f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001822:	52                   	push   edx
c0001823:	e8 b0 f4 ff ff       	call   c0000cd8 <dlfree>
c0001828:	83 c4 10             	add    esp,0x10
c000182b:	8d 46 08             	lea    eax,[esi+0x8]
c000182e:	83 c4 0c             	add    esp,0xc
c0001831:	5b                   	pop    ebx
c0001832:	5e                   	pop    esi
c0001833:	5f                   	pop    edi
c0001834:	5d                   	pop    ebp
c0001835:	c3                   	ret    

c0001836 <dlcalloc>:
c0001836:	53                   	push   ebx
c0001837:	83 ec 14             	sub    esp,0x14
c000183a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000183e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001843:	50                   	push   eax
c0001844:	e8 ea f7 ff ff       	call   c0001033 <dlmalloc>
c0001849:	83 c4 10             	add    esp,0x10
c000184c:	89 c3                	mov    ebx,eax
c000184e:	85 c0                	test   eax,eax
c0001850:	74 77                	je     c00018c9 <dlcalloc+0x93>
c0001852:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001855:	89 d0                	mov    eax,edx
c0001857:	83 e0 fc             	and    eax,0xfffffffc
c000185a:	80 e2 02             	and    dl,0x2
c000185d:	75 5a                	jne    c00018b9 <dlcalloc+0x83>
c000185f:	83 e8 04             	sub    eax,0x4
c0001862:	83 f8 27             	cmp    eax,0x27
c0001865:	76 03                	jbe    c000186a <dlcalloc+0x34>
c0001867:	51                   	push   ecx
c0001868:	eb 53                	jmp    c00018bd <dlcalloc+0x87>
c000186a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001870:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001877:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000187e:	83 f8 13             	cmp    eax,0x13
c0001881:	76 46                	jbe    c00018c9 <dlcalloc+0x93>
c0001883:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000188a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001891:	83 f8 1b             	cmp    eax,0x1b
c0001894:	76 33                	jbe    c00018c9 <dlcalloc+0x93>
c0001896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000189d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018a4:	83 f8 23             	cmp    eax,0x23
c00018a7:	76 20                	jbe    c00018c9 <dlcalloc+0x93>
c00018a9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018b0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018b7:	eb 10                	jmp    c00018c9 <dlcalloc+0x93>
c00018b9:	83 e8 08             	sub    eax,0x8
c00018bc:	52                   	push   edx
c00018bd:	50                   	push   eax
c00018be:	6a 00                	push   0x0
c00018c0:	53                   	push   ebx
c00018c1:	e8 ce ed ff ff       	call   c0000694 <memset>
c00018c6:	83 c4 10             	add    esp,0x10
c00018c9:	89 d8                	mov    eax,ebx
c00018cb:	83 c4 08             	add    esp,0x8
c00018ce:	5b                   	pop    ebx
c00018cf:	c3                   	ret    

c00018d0 <dlcfree>:
c00018d0:	e9 03 f4 ff ff       	jmp    c0000cd8 <dlfree>

c00018d5 <dlindependent_calloc>:
c00018d5:	83 ec 28             	sub    esp,0x28
c00018d8:	b9 03 00 00 00       	mov    ecx,0x3
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018f1:	e8 cb fa ff ff       	call   c00013c1 <iALLOc>
c00018f6:	83 c4 2c             	add    esp,0x2c
c00018f9:	c3                   	ret    

c00018fa <dlindependent_comalloc>:
c00018fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001902:	31 c9                	xor    ecx,ecx
c0001904:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000190c:	e9 b0 fa ff ff       	jmp    c00013c1 <iALLOc>

c0001911 <dlvalloc>:
c0001911:	83 ec 0c             	sub    esp,0xc
c0001914:	83 3d 00 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028800,0x0
c000191b:	75 0a                	jne    c0001927 <dlvalloc+0x16>
c000191d:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0001922:	e8 ca f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001927:	50                   	push   eax
c0001928:	50                   	push   eax
c0001929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000192d:	ff 35 5c 8b 02 c0    	push   DWORD PTR ds:0xc0028b5c
c0001933:	e8 db fd ff ff       	call   c0001713 <dlmemalign>
c0001938:	83 c4 1c             	add    esp,0x1c
c000193b:	c3                   	ret    

c000193c <dlpvalloc>:
c000193c:	83 ec 0c             	sub    esp,0xc
c000193f:	83 3d 00 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028800,0x0
c0001946:	75 0a                	jne    c0001952 <dlpvalloc+0x16>
c0001948:	b8 00 88 02 c0       	mov    eax,0xc0028800
c000194d:	e8 9f f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001952:	a1 5c 8b 02 c0       	mov    eax,ds:0xc0028b5c
c0001957:	89 c1                	mov    ecx,eax
c0001959:	52                   	push   edx
c000195a:	f7 d9                	neg    ecx
c000195c:	52                   	push   edx
c000195d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001961:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001965:	21 ca                	and    edx,ecx
c0001967:	52                   	push   edx
c0001968:	50                   	push   eax
c0001969:	e8 a5 fd ff ff       	call   c0001713 <dlmemalign>
c000196e:	83 c4 1c             	add    esp,0x1c
c0001971:	c3                   	ret    

c0001972 <dlmalloc_trim>:
c0001972:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0001977:	e8 75 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c000197c:	31 c0                	xor    eax,eax
c000197e:	c3                   	ret    

c000197f <dlmalloc_usable_size>:
c000197f:	53                   	push   ebx
c0001980:	31 c0                	xor    eax,eax
c0001982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001986:	85 c9                	test   ecx,ecx
c0001988:	74 24                	je     c00019ae <dlmalloc_usable_size+0x2f>
c000198a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000198d:	f6 c2 02             	test   dl,0x2
c0001990:	74 08                	je     c000199a <dlmalloc_usable_size+0x1b>
c0001992:	83 e2 fc             	and    edx,0xfffffffc
c0001995:	8d 42 f8             	lea    eax,[edx-0x8]
c0001998:	eb 14                	jmp    c00019ae <dlmalloc_usable_size+0x2f>
c000199a:	89 d3                	mov    ebx,edx
c000199c:	31 c0                	xor    eax,eax
c000199e:	83 e3 fe             	and    ebx,0xfffffffe
c00019a1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019a6:	74 06                	je     c00019ae <dlmalloc_usable_size+0x2f>
c00019a8:	83 e2 fc             	and    edx,0xfffffffc
c00019ab:	8d 42 fc             	lea    eax,[edx-0x4]
c00019ae:	5b                   	pop    ebx
c00019af:	c3                   	ret    

c00019b0 <dlmallinfo>:
c00019b0:	55                   	push   ebp
c00019b1:	57                   	push   edi
c00019b2:	56                   	push   esi
c00019b3:	53                   	push   ebx
c00019b4:	83 ec 08             	sub    esp,0x8
c00019b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019bb:	83 3d 2c 88 02 c0 00 	cmp    DWORD PTR ds:0xc002882c,0x0
c00019c2:	75 0a                	jne    c00019ce <dlmallinfo+0x1e>
c00019c4:	b8 00 88 02 c0       	mov    eax,0xc0028800
c00019c9:	e8 23 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c00019ce:	a1 2c 88 02 c0       	mov    eax,ds:0xc002882c
c00019d3:	31 ed                	xor    ebp,ebp
c00019d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019d8:	31 c9                	xor    ecx,ecx
c00019da:	83 e0 fc             	and    eax,0xfffffffc
c00019dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019e1:	31 c0                	xor    eax,eax
c00019e3:	8b 14 85 04 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77fc]
c00019ea:	85 d2                	test   edx,edx
c00019ec:	74 0e                	je     c00019fc <dlmallinfo+0x4c>
c00019ee:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019f1:	45                   	inc    ebp
c00019f2:	83 e6 fc             	and    esi,0xfffffffc
c00019f5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019f8:	01 f1                	add    ecx,esi
c00019fa:	eb ee                	jmp    c00019ea <dlmallinfo+0x3a>
c00019fc:	40                   	inc    eax
c00019fd:	83 f8 0a             	cmp    eax,0xa
c0001a00:	75 e1                	jne    c00019e3 <dlmallinfo+0x33>
c0001a02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a06:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a0d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a10:	b8 34 88 02 c0       	mov    eax,0xc0028834
c0001a15:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a18:	39 f0                	cmp    eax,esi
c0001a1a:	74 10                	je     c0001a2c <dlmallinfo+0x7c>
c0001a1c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a1f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a22:	83 e7 fc             	and    edi,0xfffffffc
c0001a25:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a28:	01 fa                	add    edx,edi
c0001a2a:	eb ec                	jmp    c0001a18 <dlmallinfo+0x68>
c0001a2c:	83 c0 08             	add    eax,0x8
c0001a2f:	3d 2c 8b 02 c0       	cmp    eax,0xc0028b2c
c0001a34:	75 df                	jne    c0001a15 <dlmallinfo+0x65>
c0001a36:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a39:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a3c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a3f:	a1 68 8b 02 c0       	mov    eax,ds:0xc0028b68
c0001a44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a47:	89 03                	mov    DWORD PTR [ebx],eax
c0001a49:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a4c:	8b 35 50 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b50
c0001a52:	29 d0                	sub    eax,edx
c0001a54:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a57:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a5a:	8b 35 64 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b64
c0001a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a64:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a67:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a6a:	8b 35 74 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b74
c0001a70:	89 d8                	mov    eax,ebx
c0001a72:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a75:	83 c4 08             	add    esp,0x8
c0001a78:	5b                   	pop    ebx
c0001a79:	5e                   	pop    esi
c0001a7a:	5f                   	pop    edi
c0001a7b:	5d                   	pop    ebp
c0001a7c:	c2 04 00             	ret    0x4

c0001a7f <dlmalloc_stats>:
c0001a7f:	83 ec 30             	sub    esp,0x30
c0001a82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a86:	50                   	push   eax
c0001a87:	e8 24 ff ff ff       	call   c00019b0 <dlmallinfo>
c0001a8c:	83 c4 30             	add    esp,0x30
c0001a8f:	c3                   	ret    

c0001a90 <dlmallopt>:
c0001a90:	56                   	push   esi
c0001a91:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0001a96:	53                   	push   ebx
c0001a97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a9f:	e8 4d f1 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001aa4:	8d 46 04             	lea    eax,[esi+0x4]
c0001aa7:	83 f8 05             	cmp    eax,0x5
c0001aaa:	77 67                	ja     c0001b13 <dlmallopt+0x83>
c0001aac:	ff 24 85 a4 3f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc05c]
c0001ab3:	83 fb 50             	cmp    ebx,0x50
c0001ab6:	77 5b                	ja     c0001b13 <dlmallopt+0x83>
c0001ab8:	ba 08 00 00 00       	mov    edx,0x8
c0001abd:	85 db                	test   ebx,ebx
c0001abf:	74 12                	je     c0001ad3 <dlmallopt+0x43>
c0001ac1:	83 c3 0b             	add    ebx,0xb
c0001ac4:	ba 10 00 00 00       	mov    edx,0x10
c0001ac9:	83 fb 0f             	cmp    ebx,0xf
c0001acc:	76 05                	jbe    c0001ad3 <dlmallopt+0x43>
c0001ace:	89 da                	mov    edx,ebx
c0001ad0:	83 e2 f8             	and    edx,0xfffffff8
c0001ad3:	a1 00 88 02 c0       	mov    eax,ds:0xc0028800
c0001ad8:	83 e0 03             	and    eax,0x3
c0001adb:	09 d0                	or     eax,edx
c0001add:	a3 00 88 02 c0       	mov    ds:0xc0028800,eax
c0001ae2:	eb 31                	jmp    c0001b15 <dlmallopt+0x85>
c0001ae4:	89 1d 44 8b 02 c0    	mov    DWORD PTR ds:0xc0028b44,ebx
c0001aea:	eb 06                	jmp    c0001af2 <dlmallopt+0x62>
c0001aec:	89 1d 48 8b 02 c0    	mov    DWORD PTR ds:0xc0028b48,ebx
c0001af2:	be 01 00 00 00       	mov    esi,0x1
c0001af7:	eb 1c                	jmp    c0001b15 <dlmallopt+0x85>
c0001af9:	89 1d 4c 8b 02 c0    	mov    DWORD PTR ds:0xc0028b4c,ebx
c0001aff:	eb f1                	jmp    c0001af2 <dlmallopt+0x62>
c0001b01:	31 f6                	xor    esi,esi
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	75 0e                	jne    c0001b15 <dlmallopt+0x85>
c0001b07:	c7 05 54 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b54,0x0
c0001b11:	eb df                	jmp    c0001af2 <dlmallopt+0x62>
c0001b13:	31 f6                	xor    esi,esi
c0001b15:	89 f0                	mov    eax,esi
c0001b17:	5b                   	pop    ebx
c0001b18:	5e                   	pop    esi
c0001b19:	c3                   	ret    

c0001b1a <disk_status>:
c0001b1a:	31 c0                	xor    eax,eax
c0001b1c:	c3                   	ret    

c0001b1d <disk_initialize>:
c0001b1d:	31 c0                	xor    eax,eax
c0001b1f:	c3                   	ret    

c0001b20 <disk_read>:
c0001b20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b25:	0f b6 04 85 c0 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d40]
c0001b2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b31:	e9 a2 a5 01 00       	jmp    c001c0d8 <fatWrapperReadDisk>

c0001b36 <disk_write>:
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 c0 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d40]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 d4 a5 01 00       	jmp    c001c120 <fatWrapperWriteDisk>

c0001b4c <disk_ioctl>:
c0001b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b55:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b5a:	0f b6 04 85 c0 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d40]
c0001b62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b66:	e9 fd a5 01 00       	jmp    c001c168 <fatWrapperIoctl>

c0001b6b <ld_word>:
c0001b6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_dword>:
c0001b78:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b7c:	89 d1                	mov    ecx,edx
c0001b7e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b82:	c1 e1 08             	shl    ecx,0x8
c0001b85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b88:	09 ca                	or     edx,ecx
c0001b8a:	c1 e2 08             	shl    edx,0x8
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	c3                   	ret    

c0001b90 <ld_qword>:
c0001b90:	57                   	push   edi
c0001b91:	56                   	push   esi
c0001b92:	53                   	push   ebx
c0001b93:	31 db                	xor    ebx,ebx
c0001b95:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b98:	89 df                	mov    edi,ebx
c0001b9a:	89 ce                	mov    esi,ecx
c0001b9c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ba0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba4:	c1 e6 08             	shl    esi,0x8
c0001ba7:	09 f2                	or     edx,esi
c0001ba9:	89 d6                	mov    esi,edx
c0001bab:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001baf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb3:	c1 e6 08             	shl    esi,0x8
c0001bb6:	09 f2                	or     edx,esi
c0001bb8:	89 d6                	mov    esi,edx
c0001bba:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bbe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bc5:	c1 e6 08             	shl    esi,0x8
c0001bc8:	89 fb                	mov    ebx,edi
c0001bca:	09 f2                	or     edx,esi
c0001bcc:	89 d1                	mov    ecx,edx
c0001bce:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bd2:	c1 e1 08             	shl    ecx,0x8
c0001bd5:	89 da                	mov    edx,ebx
c0001bd7:	09 c8                	or     eax,ecx
c0001bd9:	5b                   	pop    ebx
c0001bda:	5e                   	pop    esi
c0001bdb:	5f                   	pop    edi
c0001bdc:	c3                   	ret    

c0001bdd <st_word>:
c0001bdd:	66 89 10             	mov    WORD PTR [eax],dx
c0001be0:	c3                   	ret    

c0001be1 <st_dword>:
c0001be1:	89 10                	mov    DWORD PTR [eax],edx
c0001be3:	c3                   	ret    

c0001be4 <st_qword>:
c0001be4:	89 10                	mov    DWORD PTR [eax],edx
c0001be6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001be9:	c3                   	ret    

c0001bea <mem_cpy>:
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	74 10                	je     c0001bfe <mem_cpy+0x14>
c0001bee:	57                   	push   edi
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	56                   	push   esi
c0001bf2:	89 c7                	mov    edi,eax
c0001bf4:	89 d6                	mov    esi,edx
c0001bf6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bf7:	39 f9                	cmp    ecx,edi
c0001bf9:	75 fb                	jne    c0001bf6 <mem_cpy+0xc>
c0001bfb:	5e                   	pop    esi
c0001bfc:	5f                   	pop    edi
c0001bfd:	c3                   	ret    
c0001bfe:	c3                   	ret    

c0001bff <mem_set>:
c0001bff:	01 c1                	add    ecx,eax
c0001c01:	40                   	inc    eax
c0001c02:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001c05:	39 c8                	cmp    eax,ecx
c0001c07:	75 f8                	jne    c0001c01 <mem_set+0x2>
c0001c09:	c3                   	ret    

c0001c0a <mem_cmp>:
c0001c0a:	57                   	push   edi
c0001c0b:	56                   	push   esi
c0001c0c:	89 c6                	mov    esi,eax
c0001c0e:	53                   	push   ebx
c0001c0f:	46                   	inc    esi
c0001c10:	42                   	inc    edx
c0001c11:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c15:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c19:	29 fb                	sub    ebx,edi
c0001c1b:	89 cf                	mov    edi,ecx
c0001c1d:	29 f7                	sub    edi,esi
c0001c1f:	01 c7                	add    edi,eax
c0001c21:	74 04                	je     c0001c27 <mem_cmp+0x1d>
c0001c23:	85 db                	test   ebx,ebx
c0001c25:	74 e8                	je     c0001c0f <mem_cmp+0x5>
c0001c27:	89 d8                	mov    eax,ebx
c0001c29:	5b                   	pop    ebx
c0001c2a:	5e                   	pop    esi
c0001c2b:	5f                   	pop    edi
c0001c2c:	c3                   	ret    

c0001c2d <chk_chr>:
c0001c2d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c30:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c33:	74 07                	je     c0001c3c <chk_chr+0xf>
c0001c35:	39 d1                	cmp    ecx,edx
c0001c37:	74 03                	je     c0001c3c <chk_chr+0xf>
c0001c39:	40                   	inc    eax
c0001c3a:	eb f1                	jmp    c0001c2d <chk_chr>
c0001c3c:	89 c8                	mov    eax,ecx
c0001c3e:	c3                   	ret    

c0001c3f <dbc_1st>:
c0001c3f:	31 c0                	xor    eax,eax
c0001c41:	c3                   	ret    

c0001c42 <dbc_2nd>:
c0001c42:	31 c0                	xor    eax,eax
c0001c44:	c3                   	ret    

c0001c45 <tchar2uni>:
c0001c45:	57                   	push   edi
c0001c46:	89 c7                	mov    edi,eax
c0001c48:	56                   	push   esi
c0001c49:	53                   	push   ebx
c0001c4a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c4c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c4e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c51:	84 c9                	test   cl,cl
c0001c53:	78 0a                	js     c0001c5f <tchar2uni+0x1a>
c0001c55:	0f b6 d1             	movzx  edx,cl
c0001c58:	89 f3                	mov    ebx,esi
c0001c5a:	e9 9f 00 00 00       	jmp    c0001cfe <tchar2uni+0xb9>
c0001c5f:	88 ca                	mov    dl,cl
c0001c61:	83 e2 e0             	and    edx,0xffffffe0
c0001c64:	80 fa c0             	cmp    dl,0xc0
c0001c67:	75 0c                	jne    c0001c75 <tchar2uni+0x30>
c0001c69:	89 ca                	mov    edx,ecx
c0001c6b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c70:	83 e2 1f             	and    edx,0x1f
c0001c73:	eb 2e                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c75:	88 ca                	mov    dl,cl
c0001c77:	83 e2 f0             	and    edx,0xfffffff0
c0001c7a:	80 fa e0             	cmp    dl,0xe0
c0001c7d:	75 0c                	jne    c0001c8b <tchar2uni+0x46>
c0001c7f:	89 ca                	mov    edx,ecx
c0001c81:	b9 02 00 00 00       	mov    ecx,0x2
c0001c86:	83 e2 0f             	and    edx,0xf
c0001c89:	eb 18                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c8b:	88 ca                	mov    dl,cl
c0001c8d:	83 e2 f8             	and    edx,0xfffffff8
c0001c90:	88 d0                	mov    al,dl
c0001c92:	83 ca ff             	or     edx,0xffffffff
c0001c95:	3c f0                	cmp    al,0xf0
c0001c97:	75 6c                	jne    c0001d05 <tchar2uni+0xc0>
c0001c99:	89 ca                	mov    edx,ecx
c0001c9b:	b9 03 00 00 00       	mov    ecx,0x3
c0001ca0:	83 e2 07             	and    edx,0x7
c0001ca3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ca7:	46                   	inc    esi
c0001ca8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001cab:	88 c8                	mov    al,cl
c0001cad:	83 e0 c0             	and    eax,0xffffffc0
c0001cb0:	3c 80                	cmp    al,0x80
c0001cb2:	75 4e                	jne    c0001d02 <tchar2uni+0xbd>
c0001cb4:	c1 e2 06             	shl    edx,0x6
c0001cb7:	83 e1 3f             	and    ecx,0x3f
c0001cba:	09 ca                	or     edx,ecx
c0001cbc:	39 de                	cmp    esi,ebx
c0001cbe:	75 e7                	jne    c0001ca7 <tchar2uni+0x62>
c0001cc0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cc3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cc9:	77 37                	ja     c0001d02 <tchar2uni+0xbd>
c0001ccb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cd1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cd7:	76 29                	jbe    c0001d02 <tchar2uni+0xbd>
c0001cd9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cdf:	76 1d                	jbe    c0001cfe <tchar2uni+0xb9>
c0001ce1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ce7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ced:	c1 e1 06             	shl    ecx,0x6
c0001cf0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cf6:	09 ca                	or     edx,ecx
c0001cf8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cfe:	89 1f                	mov    DWORD PTR [edi],ebx
c0001d00:	eb 03                	jmp    c0001d05 <tchar2uni+0xc0>
c0001d02:	83 ca ff             	or     edx,0xffffffff
c0001d05:	5b                   	pop    ebx
c0001d06:	89 d0                	mov    eax,edx
c0001d08:	5e                   	pop    esi
c0001d09:	5f                   	pop    edi
c0001d0a:	c3                   	ret    

c0001d0b <put_utf>:
c0001d0b:	53                   	push   ebx
c0001d0c:	83 f8 7f             	cmp    eax,0x7f
c0001d0f:	89 c3                	mov    ebx,eax
c0001d11:	b0 00                	mov    al,0x0
c0001d13:	77 11                	ja     c0001d26 <put_utf+0x1b>
c0001d15:	85 c9                	test   ecx,ecx
c0001d17:	0f 84 e5 00 00 00    	je     c0001e02 <put_utf+0xf7>
c0001d1d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d1f:	b0 01                	mov    al,0x1
c0001d21:	e9 dc 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d2c:	77 23                	ja     c0001d51 <put_utf+0x46>
c0001d2e:	83 f9 01             	cmp    ecx,0x1
c0001d31:	0f 86 cb 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d37:	89 d8                	mov    eax,ebx
c0001d39:	83 e3 3f             	and    ebx,0x3f
c0001d3c:	c1 e8 06             	shr    eax,0x6
c0001d3f:	83 cb 80             	or     ebx,0xffffff80
c0001d42:	83 c8 c0             	or     eax,0xffffffc0
c0001d45:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d48:	88 02                	mov    BYTE PTR [edx],al
c0001d4a:	b0 02                	mov    al,0x2
c0001d4c:	e9 b1 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d51:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d57:	77 40                	ja     c0001d99 <put_utf+0x8e>
c0001d59:	83 f9 02             	cmp    ecx,0x2
c0001d5c:	0f 86 a0 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d62:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d68:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d6e:	0f 86 8e 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d74:	89 d8                	mov    eax,ebx
c0001d76:	c1 e8 0c             	shr    eax,0xc
c0001d79:	83 c8 e0             	or     eax,0xffffffe0
c0001d7c:	88 02                	mov    BYTE PTR [edx],al
c0001d7e:	89 d8                	mov    eax,ebx
c0001d80:	83 e3 3f             	and    ebx,0x3f
c0001d83:	c1 e8 06             	shr    eax,0x6
c0001d86:	83 cb 80             	or     ebx,0xffffff80
c0001d89:	83 e0 3f             	and    eax,0x3f
c0001d8c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d8f:	83 c8 80             	or     eax,0xffffff80
c0001d92:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d95:	b0 03                	mov    al,0x3
c0001d97:	eb 69                	jmp    c0001e02 <put_utf+0xf7>
c0001d99:	83 f9 03             	cmp    ecx,0x3
c0001d9c:	76 64                	jbe    c0001e02 <put_utf+0xf7>
c0001d9e:	89 d9                	mov    ecx,ebx
c0001da0:	0f b7 c3             	movzx  eax,bx
c0001da3:	66 31 c9             	xor    cx,cx
c0001da6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001dac:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001db2:	c1 e9 06             	shr    ecx,0x6
c0001db5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dbb:	77 43                	ja     c0001e00 <put_utf+0xf5>
c0001dbd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dc3:	77 3b                	ja     c0001e00 <put_utf+0xf5>
c0001dc5:	09 cb                	or     ebx,ecx
c0001dc7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	c1 e8 12             	shr    eax,0x12
c0001dd2:	83 c8 f0             	or     eax,0xfffffff0
c0001dd5:	88 02                	mov    BYTE PTR [edx],al
c0001dd7:	89 d8                	mov    eax,ebx
c0001dd9:	c1 e8 0c             	shr    eax,0xc
c0001ddc:	83 e0 3f             	and    eax,0x3f
c0001ddf:	83 c8 80             	or     eax,0xffffff80
c0001de2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001de5:	89 d8                	mov    eax,ebx
c0001de7:	83 e3 3f             	and    ebx,0x3f
c0001dea:	c1 e8 06             	shr    eax,0x6
c0001ded:	83 cb 80             	or     ebx,0xffffff80
c0001df0:	83 e0 3f             	and    eax,0x3f
c0001df3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001df6:	83 c8 80             	or     eax,0xffffff80
c0001df9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dfc:	b0 04                	mov    al,0x4
c0001dfe:	eb 02                	jmp    c0001e02 <put_utf+0xf7>
c0001e00:	31 c0                	xor    eax,eax
c0001e02:	5b                   	pop    ebx
c0001e03:	c3                   	ret    

c0001e04 <clst2sect>:
c0001e04:	89 c1                	mov    ecx,eax
c0001e06:	83 ea 02             	sub    edx,0x2
c0001e09:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001e0c:	83 e8 02             	sub    eax,0x2
c0001e0f:	39 d0                	cmp    eax,edx
c0001e11:	76 0d                	jbe    c0001e20 <clst2sect+0x1c>
c0001e13:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e17:	f7 e2                	mul    edx
c0001e19:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e1c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e1f:	c3                   	ret    
c0001e20:	31 c0                	xor    eax,eax
c0001e22:	31 d2                	xor    edx,edx
c0001e24:	c3                   	ret    

c0001e25 <clmt_clust>:
c0001e25:	57                   	push   edi
c0001e26:	89 cf                	mov    edi,ecx
c0001e28:	56                   	push   esi
c0001e29:	89 d6                	mov    esi,edx
c0001e2b:	53                   	push   ebx
c0001e2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e30:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e33:	89 f2                	mov    edx,esi
c0001e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e37:	c1 ef 09             	shr    edi,0x9
c0001e3a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e3e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e41:	89 f9                	mov    ecx,edi
c0001e43:	31 ff                	xor    edi,edi
c0001e45:	57                   	push   edi
c0001e46:	56                   	push   esi
c0001e47:	51                   	push   ecx
c0001e48:	52                   	push   edx
c0001e49:	e8 82 11 02 00       	call   c0022fd0 <__udivdi3>
c0001e4e:	83 c4 10             	add    esp,0x10
c0001e51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e53:	85 d2                	test   edx,edx
c0001e55:	74 10                	je     c0001e67 <clmt_clust+0x42>
c0001e57:	39 d0                	cmp    eax,edx
c0001e59:	72 07                	jb     c0001e62 <clmt_clust+0x3d>
c0001e5b:	29 d0                	sub    eax,edx
c0001e5d:	83 c3 08             	add    ebx,0x8
c0001e60:	eb ef                	jmp    c0001e51 <clmt_clust+0x2c>
c0001e62:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e65:	89 c2                	mov    edx,eax
c0001e67:	5b                   	pop    ebx
c0001e68:	89 d0                	mov    eax,edx
c0001e6a:	5e                   	pop    esi
c0001e6b:	5f                   	pop    edi
c0001e6c:	c3                   	ret    

c0001e6d <pick_lfn>:
c0001e6d:	55                   	push   ebp
c0001e6e:	57                   	push   edi
c0001e6f:	56                   	push   esi
c0001e70:	89 d6                	mov    esi,edx
c0001e72:	53                   	push   ebx
c0001e73:	89 c3                	mov    ebx,eax
c0001e75:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e78:	e8 ee fc ff ff       	call   c0001b6b <ld_word>
c0001e7d:	66 85 c0             	test   ax,ax
c0001e80:	74 04                	je     c0001e86 <pick_lfn+0x19>
c0001e82:	31 c0                	xor    eax,eax
c0001e84:	eb 5c                	jmp    c0001ee2 <pick_lfn+0x75>
c0001e86:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e89:	bd 01 00 00 00       	mov    ebp,0x1
c0001e8e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e91:	31 ff                	xor    edi,edi
c0001e93:	49                   	dec    ecx
c0001e94:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e97:	0f b6 87 c0 40 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdbf40]
c0001e9e:	01 f0                	add    eax,esi
c0001ea0:	e8 c6 fc ff ff       	call   c0001b6b <ld_word>
c0001ea5:	66 85 ed             	test   bp,bp
c0001ea8:	74 11                	je     c0001ebb <pick_lfn+0x4e>
c0001eaa:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001eb0:	77 d0                	ja     c0001e82 <pick_lfn+0x15>
c0001eb2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001eb6:	89 c5                	mov    ebp,eax
c0001eb8:	41                   	inc    ecx
c0001eb9:	eb 04                	jmp    c0001ebf <pick_lfn+0x52>
c0001ebb:	66 40                	inc    ax
c0001ebd:	75 c3                	jne    c0001e82 <pick_lfn+0x15>
c0001ebf:	47                   	inc    edi
c0001ec0:	83 ff 0d             	cmp    edi,0xd
c0001ec3:	75 d2                	jne    c0001e97 <pick_lfn+0x2a>
c0001ec5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ec8:	74 13                	je     c0001edd <pick_lfn+0x70>
c0001eca:	66 85 ed             	test   bp,bp
c0001ecd:	74 0e                	je     c0001edd <pick_lfn+0x70>
c0001ecf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ed5:	77 ab                	ja     c0001e82 <pick_lfn+0x15>
c0001ed7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001edd:	b8 01 00 00 00       	mov    eax,0x1
c0001ee2:	5b                   	pop    ebx
c0001ee3:	5e                   	pop    esi
c0001ee4:	5f                   	pop    edi
c0001ee5:	5d                   	pop    ebp
c0001ee6:	c3                   	ret    

c0001ee7 <put_lfn>:
c0001ee7:	55                   	push   ebp
c0001ee8:	31 ed                	xor    ebp,ebp
c0001eea:	57                   	push   edi
c0001eeb:	89 d7                	mov    edi,edx
c0001eed:	56                   	push   esi
c0001eee:	31 f6                	xor    esi,esi
c0001ef0:	53                   	push   ebx
c0001ef1:	83 ec 08             	sub    esp,0x8
c0001ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ef7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eff:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001f05:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001f08:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f0b:	31 d2                	xor    edx,edx
c0001f0d:	e8 cb fc ff ff       	call   c0001bdd <st_word>
c0001f12:	0f b6 d9             	movzx  ebx,cl
c0001f15:	4b                   	dec    ebx
c0001f16:	6b db 0d             	imul   ebx,ebx,0xd
c0001f19:	66 83 fe ff          	cmp    si,0xffff
c0001f1d:	74 08                	je     c0001f27 <put_lfn+0x40>
c0001f1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f22:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f26:	43                   	inc    ebx
c0001f27:	0f b6 85 c0 40 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdbf40]
c0001f2e:	0f b7 d6             	movzx  edx,si
c0001f31:	01 f8                	add    eax,edi
c0001f33:	e8 a5 fc ff ff       	call   c0001bdd <st_word>
c0001f38:	66 85 f6             	test   si,si
c0001f3b:	75 03                	jne    c0001f40 <put_lfn+0x59>
c0001f3d:	83 ce ff             	or     esi,0xffffffff
c0001f40:	45                   	inc    ebp
c0001f41:	83 fd 0d             	cmp    ebp,0xd
c0001f44:	75 d3                	jne    c0001f19 <put_lfn+0x32>
c0001f46:	66 46                	inc    si
c0001f48:	74 0a                	je     c0001f54 <put_lfn+0x6d>
c0001f4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f4d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f52:	75 09                	jne    c0001f5d <put_lfn+0x76>
c0001f54:	88 c8                	mov    al,cl
c0001f56:	83 c8 40             	or     eax,0x40
c0001f59:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f5d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f61:	88 07                	mov    BYTE PTR [edi],al
c0001f63:	83 c4 08             	add    esp,0x8
c0001f66:	5b                   	pop    ebx
c0001f67:	5e                   	pop    esi
c0001f68:	5f                   	pop    edi
c0001f69:	5d                   	pop    ebp
c0001f6a:	c3                   	ret    

c0001f6b <gen_numname>:
c0001f6b:	57                   	push   edi
c0001f6c:	89 cf                	mov    edi,ecx
c0001f6e:	56                   	push   esi
c0001f6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f74:	53                   	push   ebx
c0001f75:	89 c6                	mov    esi,eax
c0001f77:	83 ec 10             	sub    esp,0x10
c0001f7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f7e:	e8 67 fc ff ff       	call   c0001bea <mem_cpy>
c0001f83:	83 fb 05             	cmp    ebx,0x5
c0001f86:	76 2d                	jbe    c0001fb5 <gen_numname+0x4a>
c0001f88:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f8b:	66 85 c0             	test   ax,ax
c0001f8e:	74 25                	je     c0001fb5 <gen_numname+0x4a>
c0001f90:	83 c7 02             	add    edi,0x2
c0001f93:	ba 10 00 00 00       	mov    edx,0x10
c0001f98:	01 db                	add    ebx,ebx
c0001f9a:	89 c1                	mov    ecx,eax
c0001f9c:	66 d1 e8             	shr    ax,1
c0001f9f:	83 e1 01             	and    ecx,0x1
c0001fa2:	01 cb                	add    ebx,ecx
c0001fa4:	0f ba e3 10          	bt     ebx,0x10
c0001fa8:	73 06                	jae    c0001fb0 <gen_numname+0x45>
c0001faa:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fb0:	4a                   	dec    edx
c0001fb1:	75 e5                	jne    c0001f98 <gen_numname+0x2d>
c0001fb3:	eb d3                	jmp    c0001f88 <gen_numname+0x1d>
c0001fb5:	b8 07 00 00 00       	mov    eax,0x7
c0001fba:	88 d9                	mov    cl,bl
c0001fbc:	83 e1 0f             	and    ecx,0xf
c0001fbf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fc2:	80 fa 39             	cmp    dl,0x39
c0001fc5:	76 03                	jbe    c0001fca <gen_numname+0x5f>
c0001fc7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fca:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fcd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fd1:	89 da                	mov    edx,ebx
c0001fd3:	c1 ea 04             	shr    edx,0x4
c0001fd6:	83 fb 0f             	cmp    ebx,0xf
c0001fd9:	76 06                	jbe    c0001fe1 <gen_numname+0x76>
c0001fdb:	89 c8                	mov    eax,ecx
c0001fdd:	89 d3                	mov    ebx,edx
c0001fdf:	eb d9                	jmp    c0001fba <gen_numname+0x4f>
c0001fe1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fe6:	31 d2                	xor    edx,edx
c0001fe8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001feb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fee:	39 ca                	cmp    edx,ecx
c0001ff0:	73 18                	jae    c000200a <gen_numname+0x9f>
c0001ff2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff5:	3c 20                	cmp    al,0x20
c0001ff7:	74 11                	je     c000200a <gen_numname+0x9f>
c0001ff9:	e8 41 fc ff ff       	call   c0001c3f <dbc_1st>
c0001ffe:	85 c0                	test   eax,eax
c0002000:	74 05                	je     c0002007 <gen_numname+0x9c>
c0002002:	39 d3                	cmp    ebx,edx
c0002004:	74 04                	je     c000200a <gen_numname+0x9f>
c0002006:	42                   	inc    edx
c0002007:	42                   	inc    edx
c0002008:	eb e1                	jmp    c0001feb <gen_numname+0x80>
c000200a:	b0 20                	mov    al,0x20
c000200c:	83 f9 07             	cmp    ecx,0x7
c000200f:	77 05                	ja     c0002016 <gen_numname+0xab>
c0002011:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002015:	41                   	inc    ecx
c0002016:	42                   	inc    edx
c0002017:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000201b:	83 fa 07             	cmp    edx,0x7
c000201e:	76 ea                	jbe    c000200a <gen_numname+0x9f>
c0002020:	83 c4 10             	add    esp,0x10
c0002023:	5b                   	pop    ebx
c0002024:	5e                   	pop    esi
c0002025:	5f                   	pop    edi
c0002026:	c3                   	ret    

c0002027 <sum_sfn>:
c0002027:	31 c9                	xor    ecx,ecx
c0002029:	31 d2                	xor    edx,edx
c000202b:	d0 ca                	ror    dl,1
c000202d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002030:	41                   	inc    ecx
c0002031:	83 f9 0b             	cmp    ecx,0xb
c0002034:	75 f5                	jne    c000202b <sum_sfn+0x4>
c0002036:	88 d0                	mov    al,dl
c0002038:	c3                   	ret    

c0002039 <xdir_sum>:
c0002039:	56                   	push   esi
c000203a:	31 c9                	xor    ecx,ecx
c000203c:	53                   	push   ebx
c000203d:	31 d2                	xor    edx,edx
c000203f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002043:	43                   	inc    ebx
c0002044:	c1 e3 05             	shl    ebx,0x5
c0002047:	83 fa 02             	cmp    edx,0x2
c000204a:	74 0b                	je     c0002057 <xdir_sum+0x1e>
c000204c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002050:	66 d1 c9             	ror    cx,1
c0002053:	01 f1                	add    ecx,esi
c0002055:	eb 05                	jmp    c000205c <xdir_sum+0x23>
c0002057:	ba 03 00 00 00       	mov    edx,0x3
c000205c:	42                   	inc    edx
c000205d:	39 d3                	cmp    ebx,edx
c000205f:	77 e6                	ja     c0002047 <xdir_sum+0xe>
c0002061:	89 c8                	mov    eax,ecx
c0002063:	5b                   	pop    ebx
c0002064:	5e                   	pop    esi
c0002065:	c3                   	ret    

c0002066 <xsum32>:
c0002066:	d1 ca                	ror    edx,1
c0002068:	0f b6 c0             	movzx  eax,al
c000206b:	01 d0                	add    eax,edx
c000206d:	c3                   	ret    

c000206e <get_xfileinfo>:
c000206e:	55                   	push   ebp
c000206f:	31 c9                	xor    ecx,ecx
c0002071:	57                   	push   edi
c0002072:	bd 40 00 00 00       	mov    ebp,0x40
c0002077:	56                   	push   esi
c0002078:	31 ff                	xor    edi,edi
c000207a:	53                   	push   ebx
c000207b:	89 c6                	mov    esi,eax
c000207d:	83 ec 0c             	sub    esp,0xc
c0002080:	89 d3                	mov    ebx,edx
c0002082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002089:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000208d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002090:	76 6d                	jbe    c00020ff <get_xfileinfo+0x91>
c0002092:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002098:	76 0b                	jbe    c00020a5 <get_xfileinfo+0x37>
c000209a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000209e:	bf 01 00 00 00       	mov    edi,0x1
c00020a3:	eb 63                	jmp    c0002108 <get_xfileinfo+0x9a>
c00020a5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00020ab:	75 03                	jne    c00020b0 <get_xfileinfo+0x42>
c00020ad:	83 c5 02             	add    ebp,0x2
c00020b0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020b3:	83 c5 02             	add    ebp,0x2
c00020b6:	e8 b0 fa ff ff       	call   c0001b6b <ld_word>
c00020bb:	ff 04 24             	inc    DWORD PTR [esp]
c00020be:	66 85 c9             	test   cx,cx
c00020c1:	75 0d                	jne    c00020d0 <get_xfileinfo+0x62>
c00020c3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020c9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020ce:	76 2b                	jbe    c00020fb <get_xfileinfo+0x8d>
c00020d0:	c1 e1 10             	shl    ecx,0x10
c00020d3:	ba ff 00 00 00       	mov    edx,0xff
c00020d8:	0f b7 c0             	movzx  eax,ax
c00020db:	29 fa                	sub    edx,edi
c00020dd:	09 c8                	or     eax,ecx
c00020df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020e3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020eb:	e8 1b fc ff ff       	call   c0001d0b <put_utf>
c00020f0:	84 c0                	test   al,al
c00020f2:	74 a6                	je     c000209a <get_xfileinfo+0x2c>
c00020f4:	0f b6 c0             	movzx  eax,al
c00020f7:	01 c7                	add    edi,eax
c00020f9:	31 c0                	xor    eax,eax
c00020fb:	89 c1                	mov    ecx,eax
c00020fd:	eb 8a                	jmp    c0002089 <get_xfileinfo+0x1b>
c00020ff:	85 ff                	test   edi,edi
c0002101:	74 97                	je     c000209a <get_xfileinfo+0x2c>
c0002103:	66 85 c9             	test   cx,cx
c0002106:	75 92                	jne    c000209a <get_xfileinfo+0x2c>
c0002108:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000210d:	31 c0                	xor    eax,eax
c000210f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002113:	31 d2                	xor    edx,edx
c0002115:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002118:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000211b:	80 e1 10             	and    cl,0x10
c000211e:	75 08                	jne    c0002128 <get_xfileinfo+0xba>
c0002120:	8d 46 38             	lea    eax,[esi+0x38]
c0002123:	e8 68 fa ff ff       	call   c0001b90 <ld_qword>
c0002128:	89 03                	mov    DWORD PTR [ebx],eax
c000212a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000212d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002130:	e8 36 fa ff ff       	call   c0001b6b <ld_word>
c0002135:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002139:	8d 46 0e             	lea    eax,[esi+0xe]
c000213c:	e8 2a fa ff ff       	call   c0001b6b <ld_word>
c0002141:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002145:	83 c4 0c             	add    esp,0xc
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	5f                   	pop    edi
c000214b:	5d                   	pop    ebp
c000214c:	c3                   	ret    

c000214d <get_ldnumber>:
c000214d:	8b 10                	mov    edx,DWORD PTR [eax]
c000214f:	85 d2                	test   edx,edx
c0002151:	74 14                	je     c0002167 <get_ldnumber+0x1a>
c0002153:	56                   	push   esi
c0002154:	53                   	push   ebx
c0002155:	89 d3                	mov    ebx,edx
c0002157:	43                   	inc    ebx
c0002158:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215b:	80 f9 1f             	cmp    cl,0x1f
c000215e:	76 0d                	jbe    c000216d <get_ldnumber+0x20>
c0002160:	80 f9 3a             	cmp    cl,0x3a
c0002163:	75 f2                	jne    c0002157 <get_ldnumber+0xa>
c0002165:	eb 0a                	jmp    c0002171 <get_ldnumber+0x24>
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	89 c8                	mov    eax,ecx
c000216c:	c3                   	ret    
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	eb 24                	jmp    c0002195 <get_ldnumber+0x48>
c0002171:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002174:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002177:	80 f9 09             	cmp    cl,0x9
c000217a:	77 16                	ja     c0002192 <get_ldnumber+0x45>
c000217c:	83 c2 02             	add    edx,0x2
c000217f:	83 c9 ff             	or     ecx,0xffffffff
c0002182:	39 d3                	cmp    ebx,edx
c0002184:	75 0f                	jne    c0002195 <get_ldnumber+0x48>
c0002186:	89 f2                	mov    edx,esi
c0002188:	89 18                	mov    DWORD PTR [eax],ebx
c000218a:	0f be ca             	movsx  ecx,dl
c000218d:	83 e9 30             	sub    ecx,0x30
c0002190:	eb 03                	jmp    c0002195 <get_ldnumber+0x48>
c0002192:	83 c9 ff             	or     ecx,0xffffffff
c0002195:	89 c8                	mov    eax,ecx
c0002197:	5b                   	pop    ebx
c0002198:	5e                   	pop    esi
c0002199:	c3                   	ret    

c000219a <crc32>:
c000219a:	56                   	push   esi
c000219b:	89 d6                	mov    esi,edx
c000219d:	53                   	push   ebx
c000219e:	b2 01                	mov    dl,0x1
c00021a0:	bb 08 00 00 00       	mov    ebx,0x8
c00021a5:	89 f1                	mov    ecx,esi
c00021a7:	84 d1                	test   cl,dl
c00021a9:	0f 95 c1             	setne  cl
c00021ac:	0f b6 c9             	movzx  ecx,cl
c00021af:	31 c1                	xor    ecx,eax
c00021b1:	89 c8                	mov    eax,ecx
c00021b3:	d1 e8                	shr    eax,1
c00021b5:	80 e1 01             	and    cl,0x1
c00021b8:	74 05                	je     c00021bf <crc32+0x25>
c00021ba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021bf:	d1 e2                	shl    edx,1
c00021c1:	4b                   	dec    ebx
c00021c2:	75 e1                	jne    c00021a5 <crc32+0xb>
c00021c4:	5b                   	pop    ebx
c00021c5:	5e                   	pop    esi
c00021c6:	c3                   	ret    

c00021c7 <test_gpt_header>:
c00021c7:	55                   	push   ebp
c00021c8:	b9 10 00 00 00       	mov    ecx,0x10
c00021cd:	57                   	push   edi
c00021ce:	ba c0 3f 02 c0       	mov    edx,0xc0023fc0
c00021d3:	56                   	push   esi
c00021d4:	31 ff                	xor    edi,edi
c00021d6:	53                   	push   ebx
c00021d7:	89 c3                	mov    ebx,eax
c00021d9:	e8 2c fa ff ff       	call   c0001c0a <mem_cmp>
c00021de:	85 c0                	test   eax,eax
c00021e0:	75 55                	jne    c0002237 <test_gpt_header+0x70>
c00021e2:	89 c7                	mov    edi,eax
c00021e4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021e9:	83 ce ff             	or     esi,0xffffffff
c00021ec:	31 d2                	xor    edx,edx
c00021ee:	83 fd 03             	cmp    ebp,0x3
c00021f1:	76 05                	jbe    c00021f8 <test_gpt_header+0x31>
c00021f3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021f8:	89 f0                	mov    eax,esi
c00021fa:	45                   	inc    ebp
c00021fb:	e8 9a ff ff ff       	call   c000219a <crc32>
c0002200:	83 fd 4c             	cmp    ebp,0x4c
c0002203:	89 c6                	mov    esi,eax
c0002205:	75 e5                	jne    c00021ec <test_gpt_header+0x25>
c0002207:	8d 43 10             	lea    eax,[ebx+0x10]
c000220a:	f7 d6                	not    esi
c000220c:	e8 67 f9 ff ff       	call   c0001b78 <ld_dword>
c0002211:	39 c6                	cmp    esi,eax
c0002213:	75 22                	jne    c0002237 <test_gpt_header+0x70>
c0002215:	8d 43 54             	lea    eax,[ebx+0x54]
c0002218:	e8 5b f9 ff ff       	call   c0001b78 <ld_dword>
c000221d:	83 c0 80             	add    eax,0xffffff80
c0002220:	75 15                	jne    c0002237 <test_gpt_header+0x70>
c0002222:	8d 43 50             	lea    eax,[ebx+0x50]
c0002225:	e8 4e f9 ff ff       	call   c0001b78 <ld_dword>
c000222a:	3d 80 00 00 00       	cmp    eax,0x80
c000222f:	0f 96 c0             	setbe  al
c0002232:	0f b6 c0             	movzx  eax,al
c0002235:	89 c7                	mov    edi,eax
c0002237:	5b                   	pop    ebx
c0002238:	89 f8                	mov    eax,edi
c000223a:	5e                   	pop    esi
c000223b:	5f                   	pop    edi
c000223c:	5d                   	pop    ebp
c000223d:	c3                   	ret    

c000223e <make_rand>:
c000223e:	56                   	push   esi
c000223f:	85 c0                	test   eax,eax
c0002241:	53                   	push   ebx
c0002242:	75 05                	jne    c0002249 <make_rand+0xb>
c0002244:	b8 01 00 00 00       	mov    eax,0x1
c0002249:	01 d1                	add    ecx,edx
c000224b:	bb 08 00 00 00       	mov    ebx,0x8
c0002250:	89 c6                	mov    esi,eax
c0002252:	d1 e8                	shr    eax,1
c0002254:	83 e6 01             	and    esi,0x1
c0002257:	85 f6                	test   esi,esi
c0002259:	74 05                	je     c0002260 <make_rand+0x22>
c000225b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002260:	4b                   	dec    ebx
c0002261:	75 ed                	jne    c0002250 <make_rand+0x12>
c0002263:	42                   	inc    edx
c0002264:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002267:	39 ca                	cmp    edx,ecx
c0002269:	75 e0                	jne    c000224b <make_rand+0xd>
c000226b:	5b                   	pop    ebx
c000226c:	5e                   	pop    esi
c000226d:	c3                   	ret    

c000226e <validate>:
c000226e:	56                   	push   esi
c000226f:	53                   	push   ebx
c0002270:	89 d6                	mov    esi,edx
c0002272:	51                   	push   ecx
c0002273:	85 c0                	test   eax,eax
c0002275:	75 09                	jne    c0002280 <validate+0x12>
c0002277:	b8 09 00 00 00       	mov    eax,0x9
c000227c:	31 c9                	xor    ecx,ecx
c000227e:	eb 2f                	jmp    c00022af <validate+0x41>
c0002280:	89 c3                	mov    ebx,eax
c0002282:	8b 00                	mov    eax,DWORD PTR [eax]
c0002284:	85 c0                	test   eax,eax
c0002286:	74 ef                	je     c0002277 <validate+0x9>
c0002288:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000228b:	74 ea                	je     c0002277 <validate+0x9>
c000228d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002291:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002295:	75 e0                	jne    c0002277 <validate+0x9>
c0002297:	83 ec 0c             	sub    esp,0xc
c000229a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000229e:	50                   	push   eax
c000229f:	e8 76 f8 ff ff       	call   c0001b1a <disk_status>
c00022a4:	83 c4 10             	add    esp,0x10
c00022a7:	a8 01                	test   al,0x1
c00022a9:	75 cc                	jne    c0002277 <validate+0x9>
c00022ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022ad:	31 c0                	xor    eax,eax
c00022af:	89 0e                	mov    DWORD PTR [esi],ecx
c00022b1:	5a                   	pop    edx
c00022b2:	5b                   	pop    ebx
c00022b3:	5e                   	pop    esi
c00022b4:	c3                   	ret    

c00022b5 <sync_window>:
c00022b5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022b9:	0f 84 85 00 00 00    	je     c0002344 <sync_window+0x8f>
c00022bf:	55                   	push   ebp
c00022c0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022c3:	57                   	push   edi
c00022c4:	56                   	push   esi
c00022c5:	53                   	push   ebx
c00022c6:	89 c3                	mov    ebx,eax
c00022c8:	83 ec 28             	sub    esp,0x28
c00022cb:	6a 01                	push   0x1
c00022cd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022d0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022d3:	55                   	push   ebp
c00022d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022d8:	50                   	push   eax
c00022d9:	e8 58 f8 ff ff       	call   c0001b36 <disk_write>
c00022de:	83 c4 20             	add    esp,0x20
c00022e1:	ba 01 00 00 00       	mov    edx,0x1
c00022e6:	85 c0                	test   eax,eax
c00022e8:	75 50                	jne    c000233a <sync_window+0x85>
c00022ea:	31 ff                	xor    edi,edi
c00022ec:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022f7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022fa:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022fd:	89 c6                	mov    esi,eax
c00022ff:	89 d7                	mov    edi,edx
c0002301:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002304:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002308:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000230b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000230f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002313:	73 23                	jae    c0002338 <sync_window+0x83>
c0002315:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002319:	75 1d                	jne    c0002338 <sync_window+0x83>
c000231b:	83 ec 0c             	sub    esp,0xc
c000231e:	6a 01                	push   0x1
c0002320:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002324:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002328:	52                   	push   edx
c0002329:	50                   	push   eax
c000232a:	55                   	push   ebp
c000232b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000232f:	50                   	push   eax
c0002330:	e8 01 f8 ff ff       	call   c0001b36 <disk_write>
c0002335:	83 c4 20             	add    esp,0x20
c0002338:	31 d2                	xor    edx,edx
c000233a:	83 c4 1c             	add    esp,0x1c
c000233d:	89 d0                	mov    eax,edx
c000233f:	5b                   	pop    ebx
c0002340:	5e                   	pop    esi
c0002341:	5f                   	pop    edi
c0002342:	5d                   	pop    ebp
c0002343:	c3                   	ret    
c0002344:	31 d2                	xor    edx,edx
c0002346:	89 d0                	mov    eax,edx
c0002348:	c3                   	ret    

c0002349 <move_window>:
c0002349:	56                   	push   esi
c000234a:	53                   	push   ebx
c000234b:	89 c3                	mov    ebx,eax
c000234d:	83 ec 14             	sub    esp,0x14
c0002350:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002353:	75 07                	jne    c000235c <move_window+0x13>
c0002355:	31 f6                	xor    esi,esi
c0002357:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000235a:	74 59                	je     c00023b5 <move_window+0x6c>
c000235c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002360:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002364:	89 d8                	mov    eax,ebx
c0002366:	e8 4a ff ff ff       	call   c00022b5 <sync_window>
c000236b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000236f:	89 c6                	mov    esi,eax
c0002371:	85 c0                	test   eax,eax
c0002373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002377:	75 3c                	jne    c00023b5 <move_window+0x6c>
c0002379:	83 ec 0c             	sub    esp,0xc
c000237c:	8d 43 54             	lea    eax,[ebx+0x54]
c000237f:	6a 01                	push   0x1
c0002381:	51                   	push   ecx
c0002382:	52                   	push   edx
c0002383:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002387:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000238b:	50                   	push   eax
c000238c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002390:	50                   	push   eax
c0002391:	e8 8a f7 ff ff       	call   c0001b20 <disk_read>
c0002396:	83 c4 20             	add    esp,0x20
c0002399:	85 c0                	test   eax,eax
c000239b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000239f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00023a3:	74 0a                	je     c00023af <move_window+0x66>
c00023a5:	83 ca ff             	or     edx,0xffffffff
c00023a8:	be 01 00 00 00       	mov    esi,0x1
c00023ad:	89 d1                	mov    ecx,edx
c00023af:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023b2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023b5:	89 f0                	mov    eax,esi
c00023b7:	83 c4 14             	add    esp,0x14
c00023ba:	5b                   	pop    ebx
c00023bb:	5e                   	pop    esi
c00023bc:	c3                   	ret    

c00023bd <check_fs>:
c00023bd:	53                   	push   ebx
c00023be:	89 c3                	mov    ebx,eax
c00023c0:	83 ec 08             	sub    esp,0x8
c00023c3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023ce:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023d5:	e8 6f ff ff ff       	call   c0002349 <move_window>
c00023da:	ba 04 00 00 00       	mov    edx,0x4
c00023df:	85 c0                	test   eax,eax
c00023e1:	0f 85 89 00 00 00    	jne    c0002470 <check_fs+0xb3>
c00023e7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023ed:	e8 79 f7 ff ff       	call   c0001b6b <ld_word>
c00023f2:	ba 03 00 00 00       	mov    edx,0x3
c00023f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023fb:	75 73                	jne    c0002470 <check_fs+0xb3>
c00023fd:	ba e0 40 02 c0       	mov    edx,0xc00240e0
c0002402:	8d 43 54             	lea    eax,[ebx+0x54]
c0002405:	b9 0b 00 00 00       	mov    ecx,0xb
c000240a:	e8 fb f7 ff ff       	call   c0001c0a <mem_cmp>
c000240f:	ba 01 00 00 00       	mov    edx,0x1
c0002414:	85 c0                	test   eax,eax
c0002416:	74 58                	je     c0002470 <check_fs+0xb3>
c0002418:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000241b:	8d 50 18             	lea    edx,[eax+0x18]
c000241e:	80 fa 01             	cmp    dl,0x1
c0002421:	76 09                	jbe    c000242c <check_fs+0x6f>
c0002423:	ba 02 00 00 00       	mov    edx,0x2
c0002428:	3c eb                	cmp    al,0xeb
c000242a:	75 44                	jne    c0002470 <check_fs+0xb3>
c000242c:	ba f4 6f 02 c0       	mov    edx,0xc0026ff4
c0002431:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002437:	b9 03 00 00 00       	mov    ecx,0x3
c000243c:	e8 c9 f7 ff ff       	call   c0001c0a <mem_cmp>
c0002441:	31 d2                	xor    edx,edx
c0002443:	85 c0                	test   eax,eax
c0002445:	74 29                	je     c0002470 <check_fs+0xb3>
c0002447:	ba ec 40 02 c0       	mov    edx,0xc00240ec
c000244c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002452:	b9 05 00 00 00       	mov    ecx,0x5
c0002457:	e8 ae f7 ff ff       	call   c0001c0a <mem_cmp>
c000245c:	31 d2                	xor    edx,edx
c000245e:	85 c0                	test   eax,eax
c0002460:	74 0e                	je     c0002470 <check_fs+0xb3>
c0002462:	31 d2                	xor    edx,edx
c0002464:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000246b:	0f 95 c2             	setne  dl
c000246e:	01 d2                	add    edx,edx
c0002470:	89 d0                	mov    eax,edx
c0002472:	83 c4 08             	add    esp,0x8
c0002475:	5b                   	pop    ebx
c0002476:	c3                   	ret    

c0002477 <find_volume>:
c0002477:	55                   	push   ebp
c0002478:	31 c9                	xor    ecx,ecx
c000247a:	57                   	push   edi
c000247b:	56                   	push   esi
c000247c:	89 d6                	mov    esi,edx
c000247e:	53                   	push   ebx
c000247f:	31 d2                	xor    edx,edx
c0002481:	83 ec 3c             	sub    esp,0x3c
c0002484:	89 c3                	mov    ebx,eax
c0002486:	e8 32 ff ff ff       	call   c00023bd <check_fs>
c000248b:	83 f8 02             	cmp    eax,0x2
c000248e:	74 0e                	je     c000249e <find_volume+0x27>
c0002490:	0f 87 5d 01 00 00    	ja     c00025f3 <find_volume+0x17c>
c0002496:	85 f6                	test   esi,esi
c0002498:	0f 84 55 01 00 00    	je     c00025f3 <find_volume+0x17c>
c000249e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00024a5:	0f 85 dd 00 00 00    	jne    c0002588 <find_volume+0x111>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	ba 01 00 00 00       	mov    edx,0x1
c00024b2:	89 d8                	mov    eax,ebx
c00024b4:	e8 90 fe ff ff       	call   c0002349 <move_window>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	74 0a                	je     c00024c7 <find_volume+0x50>
c00024bd:	b8 04 00 00 00       	mov    eax,0x4
c00024c2:	e9 2c 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024c7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ca:	89 e8                	mov    eax,ebp
c00024cc:	e8 f6 fc ff ff       	call   c00021c7 <test_gpt_header>
c00024d1:	85 c0                	test   eax,eax
c00024d3:	75 0a                	jne    c00024df <find_volume+0x68>
c00024d5:	b8 03 00 00 00       	mov    eax,0x3
c00024da:	e9 14 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024df:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024e5:	e8 8e f6 ff ff       	call   c0001b78 <ld_dword>
c00024ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024ee:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024f4:	e8 97 f6 ff ff       	call   c0001b90 <ld_qword>
c00024f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002501:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002505:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002509:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002511:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002515:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002519:	74 ba                	je     c00024d5 <find_volume+0x5e>
c000251b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000251f:	31 c9                	xor    ecx,ecx
c0002521:	c1 e7 07             	shl    edi,0x7
c0002524:	89 d8                	mov    eax,ebx
c0002526:	89 fa                	mov    edx,edi
c0002528:	c1 ea 09             	shr    edx,0x9
c000252b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000252f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002533:	e8 11 fe ff ff       	call   c0002349 <move_window>
c0002538:	85 c0                	test   eax,eax
c000253a:	75 81                	jne    c00024bd <find_volume+0x46>
c000253c:	81 e7 80 01 00 00    	and    edi,0x180
c0002542:	b9 10 00 00 00       	mov    ecx,0x10
c0002547:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000254b:	ba d0 40 02 c0       	mov    edx,0xc00240d0
c0002550:	e8 b5 f6 ff ff       	call   c0001c0a <mem_cmp>
c0002555:	85 c0                	test   eax,eax
c0002557:	75 29                	jne    c0002582 <find_volume+0x10b>
c0002559:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000255d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002561:	e8 2a f6 ff ff       	call   c0001b90 <ld_qword>
c0002566:	89 d1                	mov    ecx,edx
c0002568:	89 c2                	mov    edx,eax
c000256a:	89 d8                	mov    eax,ebx
c000256c:	e8 4c fe ff ff       	call   c00023bd <check_fs>
c0002571:	85 f6                	test   esi,esi
c0002573:	75 07                	jne    c000257c <find_volume+0x105>
c0002575:	83 f8 01             	cmp    eax,0x1
c0002578:	77 08                	ja     c0002582 <find_volume+0x10b>
c000257a:	eb 77                	jmp    c00025f3 <find_volume+0x17c>
c000257c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002580:	74 71                	je     c00025f3 <find_volume+0x17c>
c0002582:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002586:	eb 89                	jmp    c0002511 <find_volume+0x9a>
c0002588:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000258c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002592:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000259c:	89 cd                	mov    ebp,ecx
c000259e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00025a2:	89 f8                	mov    eax,edi
c00025a4:	83 c7 10             	add    edi,0x10
c00025a7:	e8 cc f5 ff ff       	call   c0001b78 <ld_dword>
c00025ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025b0:	89 01                	mov    DWORD PTR [ecx],eax
c00025b2:	83 c1 04             	add    ecx,0x4
c00025b5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025b9:	75 e3                	jne    c000259e <find_volume+0x127>
c00025bb:	31 ff                	xor    edi,edi
c00025bd:	85 f6                	test   esi,esi
c00025bf:	74 03                	je     c00025c4 <find_volume+0x14d>
c00025c1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025c4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025c8:	85 d2                	test   edx,edx
c00025ca:	74 14                	je     c00025e0 <find_volume+0x169>
c00025cc:	31 c9                	xor    ecx,ecx
c00025ce:	89 d8                	mov    eax,ebx
c00025d0:	e8 e8 fd ff ff       	call   c00023bd <check_fs>
c00025d5:	83 f8 01             	cmp    eax,0x1
c00025d8:	76 19                	jbe    c00025f3 <find_volume+0x17c>
c00025da:	85 f6                	test   esi,esi
c00025dc:	74 0f                	je     c00025ed <find_volume+0x176>
c00025de:	eb 13                	jmp    c00025f3 <find_volume+0x17c>
c00025e0:	85 f6                	test   esi,esi
c00025e2:	0f 85 ed fe ff ff    	jne    c00024d5 <find_volume+0x5e>
c00025e8:	b8 03 00 00 00       	mov    eax,0x3
c00025ed:	47                   	inc    edi
c00025ee:	83 ff 03             	cmp    edi,0x3
c00025f1:	76 d1                	jbe    c00025c4 <find_volume+0x14d>
c00025f3:	83 c4 3c             	add    esp,0x3c
c00025f6:	5b                   	pop    ebx
c00025f7:	5e                   	pop    esi
c00025f8:	5f                   	pop    edi
c00025f9:	5d                   	pop    ebp
c00025fa:	c3                   	ret    

c00025fb <mount_volume>:
c00025fb:	55                   	push   ebp
c00025fc:	57                   	push   edi
c00025fd:	89 cf                	mov    edi,ecx
c00025ff:	56                   	push   esi
c0002600:	53                   	push   ebx
c0002601:	bb 0b 00 00 00       	mov    ebx,0xb
c0002606:	83 ec 3c             	sub    esp,0x3c
c0002609:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000260f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002613:	e8 35 fb ff ff       	call   c000214d <get_ldnumber>
c0002618:	85 c0                	test   eax,eax
c000261a:	0f 88 3a 05 00 00    	js     c0002b5a <mount_volume+0x55f>
c0002620:	8b 2c 85 a0 8b 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7460]
c0002627:	89 c6                	mov    esi,eax
c0002629:	bb 0c 00 00 00       	mov    ebx,0xc
c000262e:	85 ed                	test   ebp,ebp
c0002630:	0f 84 24 05 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000263a:	83 e7 fe             	and    edi,0xfffffffe
c000263d:	89 2a                	mov    DWORD PTR [edx],ebp
c000263f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002643:	74 32                	je     c0002677 <mount_volume+0x7c>
c0002645:	83 ec 0c             	sub    esp,0xc
c0002648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000264c:	50                   	push   eax
c000264d:	e8 c8 f4 ff ff       	call   c0001b1a <disk_status>
c0002652:	83 c4 10             	add    esp,0x10
c0002655:	a8 01                	test   al,0x1
c0002657:	75 1e                	jne    c0002677 <mount_volume+0x7c>
c0002659:	31 db                	xor    ebx,ebx
c000265b:	89 f9                	mov    ecx,edi
c000265d:	84 c9                	test   cl,cl
c000265f:	0f 84 f5 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002665:	a8 04                	test   al,0x4
c0002667:	0f 84 ed 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c000266d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002672:	e9 e3 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c0002677:	83 ec 0c             	sub    esp,0xc
c000267a:	89 f0                	mov    eax,esi
c000267c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002680:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002683:	0f b6 f0             	movzx  esi,al
c0002686:	bb 03 00 00 00       	mov    ebx,0x3
c000268b:	56                   	push   esi
c000268c:	e8 8c f4 ff ff       	call   c0001b1d <disk_initialize>
c0002691:	83 c4 10             	add    esp,0x10
c0002694:	a8 01                	test   al,0x1
c0002696:	0f 85 be 04 00 00    	jne    c0002b5a <mount_volume+0x55f>
c000269c:	89 f9                	mov    ecx,edi
c000269e:	84 c9                	test   cl,cl
c00026a0:	74 04                	je     c00026a6 <mount_volume+0xab>
c00026a2:	a8 04                	test   al,0x4
c00026a4:	75 c7                	jne    c000266d <mount_volume+0x72>
c00026a6:	31 d2                	xor    edx,edx
c00026a8:	89 e8                	mov    eax,ebp
c00026aa:	e8 c8 fd ff ff       	call   c0002477 <find_volume>
c00026af:	83 f8 04             	cmp    eax,0x4
c00026b2:	75 0a                	jne    c00026be <mount_volume+0xc3>
c00026b4:	bb 01 00 00 00       	mov    ebx,0x1
c00026b9:	e9 9c 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026be:	83 f8 01             	cmp    eax,0x1
c00026c1:	76 0a                	jbe    c00026cd <mount_volume+0xd2>
c00026c3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026c8:	e9 8d 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026cd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026d0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026db:	75 17                	jne    c00026f4 <mount_volume+0xf9>
c00026dd:	b8 0b 00 00 00       	mov    eax,0xb
c00026e2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026e7:	75 da                	jne    c00026c3 <mount_volume+0xc8>
c00026e9:	40                   	inc    eax
c00026ea:	83 f8 40             	cmp    eax,0x40
c00026ed:	75 f3                	jne    c00026e2 <mount_volume+0xe7>
c00026ef:	e9 5a 02 00 00       	jmp    c000294e <mount_volume+0x353>
c00026f4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026f7:	e8 6f f4 ff ff       	call   c0001b6b <ld_word>
c00026fc:	66 3d 00 02          	cmp    ax,0x200
c0002700:	75 c1                	jne    c00026c3 <mount_volume+0xc8>
c0002702:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002705:	e8 61 f4 ff ff       	call   c0001b6b <ld_word>
c000270a:	0f b7 c0             	movzx  eax,ax
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	85 c0                	test   eax,eax
c0002713:	75 0c                	jne    c0002721 <mount_volume+0x126>
c0002715:	8d 45 78             	lea    eax,[ebp+0x78]
c0002718:	e8 5b f4 ff ff       	call   c0001b78 <ld_dword>
c000271d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002725:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002728:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000272b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000272f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002732:	48                   	dec    eax
c0002733:	3c 01                	cmp    al,0x1
c0002735:	77 8c                	ja     c00026c3 <mount_volume+0xc8>
c0002737:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000273b:	89 c3                	mov    ebx,eax
c000273d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002741:	66 85 c0             	test   ax,ax
c0002744:	0f 84 79 ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c000274a:	8d 40 ff             	lea    eax,[eax-0x1]
c000274d:	85 d8                	test   eax,ebx
c000274f:	0f 85 6e ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002755:	8d 45 65             	lea    eax,[ebp+0x65]
c0002758:	e8 0e f4 ff ff       	call   c0001b6b <ld_word>
c000275d:	89 c7                	mov    edi,eax
c000275f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002763:	a8 0f                	test   al,0xf
c0002765:	0f 85 58 ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c000276b:	8d 45 67             	lea    eax,[ebp+0x67]
c000276e:	e8 f8 f3 ff ff       	call   c0001b6b <ld_word>
c0002773:	0f b7 f0             	movzx  esi,ax
c0002776:	85 f6                	test   esi,esi
c0002778:	75 0a                	jne    c0002784 <mount_volume+0x189>
c000277a:	8d 45 74             	lea    eax,[ebp+0x74]
c000277d:	e8 f6 f3 ff ff       	call   c0001b78 <ld_dword>
c0002782:	89 c6                	mov    esi,eax
c0002784:	8d 45 62             	lea    eax,[ebp+0x62]
c0002787:	e8 df f3 ff ff       	call   c0001b6b <ld_word>
c000278c:	66 85 c0             	test   ax,ax
c000278f:	0f 84 2e ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002795:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000279a:	0f b7 c8             	movzx  ecx,ax
c000279d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00027a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00027a6:	89 fa                	mov    edx,edi
c00027a8:	66 c1 ea 04          	shr    dx,0x4
c00027ac:	0f b7 d2             	movzx  edx,dx
c00027af:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027ba:	39 c6                	cmp    esi,eax
c00027bc:	0f 82 01 ff ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027c2:	29 c6                	sub    esi,eax
c00027c4:	31 d2                	xor    edx,edx
c00027c6:	89 f0                	mov    eax,esi
c00027c8:	f7 f3                	div    ebx
c00027ca:	39 de                	cmp    esi,ebx
c00027cc:	0f 82 f1 fe ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027d2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027d7:	0f 87 e6 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00027dd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027e2:	0f 86 63 03 00 00    	jbe    c0002b4b <mount_volume+0x550>
c00027e8:	bb 03 00 00 00       	mov    ebx,0x3
c00027ed:	8d 70 02             	lea    esi,[eax+0x2]
c00027f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027f8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027fb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fe:	31 d2                	xor    edx,edx
c0002800:	89 c8                	mov    eax,ecx
c0002802:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002805:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002809:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000280d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002811:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002815:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002818:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000281b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000281f:	31 d2                	xor    edx,edx
c0002821:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002825:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	83 fb 03             	cmp    ebx,0x3
c0002832:	75 2b                	jne    c000285f <mount_volume+0x264>
c0002834:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002837:	e8 2f f3 ff ff       	call   c0001b6b <ld_word>
c000283c:	66 09 c7             	or     di,ax
c000283f:	0f 85 7e fe ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002845:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000284b:	c1 e6 02             	shl    esi,0x2
c000284e:	e8 25 f3 ff ff       	call   c0001b78 <ld_dword>
c0002853:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000285a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000285d:	eb 30                	jmp    c000288f <mount_volume+0x294>
c000285f:	66 85 ff             	test   di,di
c0002862:	0f 84 5b fe ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002868:	31 d2                	xor    edx,edx
c000286a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000286e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002872:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002876:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002879:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000287c:	83 fb 02             	cmp    ebx,0x2
c000287f:	75 04                	jne    c0002885 <mount_volume+0x28a>
c0002881:	01 f6                	add    esi,esi
c0002883:	eb 0a                	jmp    c000288f <mount_volume+0x294>
c0002885:	8d 04 76             	lea    eax,[esi+esi*2]
c0002888:	83 e6 01             	and    esi,0x1
c000288b:	d1 e8                	shr    eax,1
c000288d:	01 c6                	add    esi,eax
c000288f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002895:	c1 ee 09             	shr    esi,0x9
c0002898:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000289c:	0f 87 21 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00028a2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00028a9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028b0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028b4:	83 fb 03             	cmp    ebx,0x3
c00028b7:	75 7a                	jne    c0002933 <mount_volume+0x338>
c00028b9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028bf:	e8 a7 f2 ff ff       	call   c0001b6b <ld_word>
c00028c4:	66 48                	dec    ax
c00028c6:	75 6b                	jne    c0002933 <mount_volume+0x338>
c00028c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028d0:	83 c2 01             	add    edx,0x1
c00028d3:	89 e8                	mov    eax,ebp
c00028d5:	83 d1 00             	adc    ecx,0x0
c00028d8:	e8 6c fa ff ff       	call   c0002349 <move_window>
c00028dd:	85 c0                	test   eax,eax
c00028df:	75 52                	jne    c0002933 <mount_volume+0x338>
c00028e1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028e5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028eb:	e8 7b f2 ff ff       	call   c0001b6b <ld_word>
c00028f0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028f4:	75 3d                	jne    c0002933 <mount_volume+0x338>
c00028f6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028f9:	e8 7a f2 ff ff       	call   c0001b78 <ld_dword>
c00028fe:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002903:	75 2e                	jne    c0002933 <mount_volume+0x338>
c0002905:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000290b:	e8 68 f2 ff ff       	call   c0001b78 <ld_dword>
c0002910:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002915:	75 1c                	jne    c0002933 <mount_volume+0x338>
c0002917:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000291d:	e8 56 f2 ff ff       	call   c0001b78 <ld_dword>
c0002922:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002925:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000292b:	e8 48 f2 ff ff       	call   c0001b78 <ld_dword>
c0002930:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002933:	66 a1 80 8b 02 c0    	mov    ax,ds:0xc0028b80
c0002939:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000293c:	40                   	inc    eax
c000293d:	31 db                	xor    ebx,ebx
c000293f:	66 a3 80 8b 02 c0    	mov    ds:0xc0028b80,ax
c0002945:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002949:	e9 0c 02 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c000294e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002954:	e8 12 f2 ff ff       	call   c0001b6b <ld_word>
c0002959:	66 3d 00 01          	cmp    ax,0x100
c000295d:	0f 85 60 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002963:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000296a:	0f 85 53 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002970:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002976:	e8 15 f2 ff ff       	call   c0001b90 <ld_qword>
c000297b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000297f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002983:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002989:	e8 ea f1 ff ff       	call   c0001b78 <ld_dword>
c000298e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002991:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002997:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000299a:	fe c8                	dec    al
c000299c:	0f 85 21 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c00029a2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00029a9:	bb 01 00 00 00       	mov    ebx,0x1
c00029ae:	d3 e3                	shl    ebx,cl
c00029b0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029b4:	66 85 db             	test   bx,bx
c00029b7:	0f 84 06 fd ff ff    	je     c00026c3 <mount_volume+0xc8>
c00029bd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029c3:	e8 b0 f1 ff ff       	call   c0001b78 <ld_dword>
c00029c8:	89 c6                	mov    esi,eax
c00029ca:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029cf:	0f 87 ee fc ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00029d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d9:	8d 40 02             	lea    eax,[eax+0x2]
c00029dc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029df:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029e6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029e9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029ef:	e8 84 f1 ff ff       	call   c0001b78 <ld_dword>
c00029f4:	31 d2                	xor    edx,edx
c00029f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002a06:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002a09:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002a0c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a12:	e8 61 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a17:	31 d2                	xor    edx,edx
c0002a19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a21:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a25:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a28:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a2b:	0f b7 c3             	movzx  eax,bx
c0002a2e:	31 d2                	xor    edx,edx
c0002a30:	0f af f0             	imul   esi,eax
c0002a33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a37:	89 f0                	mov    eax,esi
c0002a39:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a3d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a41:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a45:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a49:	39 c1                	cmp    ecx,eax
c0002a4b:	89 df                	mov    edi,ebx
c0002a4d:	19 d7                	sbb    edi,edx
c0002a4f:	0f 82 6e fc ff ff    	jb     c00026c3 <mount_volume+0xc8>
c0002a55:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a5b:	31 db                	xor    ebx,ebx
c0002a5d:	e8 16 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a62:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a69:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	75 39                	jne    c0002ab1 <mount_volume+0x4b6>
c0002a78:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a7c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a80:	0f 86 3d fc ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002a86:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a89:	31 ff                	xor    edi,edi
c0002a8b:	89 e8                	mov    eax,ebp
c0002a8d:	e8 72 f3 ff ff       	call   c0001e04 <clst2sect>
c0002a92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a96:	01 c6                	add    esi,eax
c0002a98:	89 e8                	mov    eax,ebp
c0002a9a:	11 d7                	adc    edi,edx
c0002a9c:	89 f2                	mov    edx,esi
c0002a9e:	89 f9                	mov    ecx,edi
c0002aa0:	e8 a4 f8 ff ff       	call   c0002349 <move_window>
c0002aa5:	85 c0                	test   eax,eax
c0002aa7:	0f 85 07 fc ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002aad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ab1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002ab6:	74 0b                	je     c0002ac3 <mount_volume+0x4c8>
c0002ab8:	83 c3 20             	add    ebx,0x20
c0002abb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ac1:	eb b1                	jmp    c0002a74 <mount_volume+0x479>
c0002ac3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ac6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aca:	e8 a9 f0 ff ff       	call   c0001b78 <ld_dword>
c0002acf:	89 c3                	mov    ebx,eax
c0002ad1:	83 f8 01             	cmp    eax,0x1
c0002ad4:	0f 86 e9 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ada:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002add:	0f 86 e0 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ae3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ae6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002aea:	0f af c2             	imul   eax,edx
c0002aed:	31 d2                	xor    edx,edx
c0002aef:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002af2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002af5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002af8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002afb:	31 c9                	xor    ecx,ecx
c0002afd:	89 da                	mov    edx,ebx
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	c1 ea 07             	shr    edx,0x7
c0002b04:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002b07:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002b0a:	e8 3a f8 ff ff       	call   c0002349 <move_window>
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 85 9d fb ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002b17:	89 d8                	mov    eax,ebx
c0002b19:	83 e0 7f             	and    eax,0x7f
c0002b1c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b1f:	e8 54 f0 ff ff       	call   c0001b78 <ld_dword>
c0002b24:	83 f8 ff             	cmp    eax,0xffffffff
c0002b27:	74 0a                	je     c0002b33 <mount_volume+0x538>
c0002b29:	43                   	inc    ebx
c0002b2a:	39 d8                	cmp    eax,ebx
c0002b2c:	74 cd                	je     c0002afb <mount_volume+0x500>
c0002b2e:	e9 90 fb ff ff       	jmp    c00026c3 <mount_volume+0xc8>
c0002b33:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b3a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b41:	bb 04 00 00 00       	mov    ebx,0x4
c0002b46:	e9 e8 fd ff ff       	jmp    c0002933 <mount_volume+0x338>
c0002b4b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b50:	19 db                	sbb    ebx,ebx
c0002b52:	83 c3 02             	add    ebx,0x2
c0002b55:	e9 93 fc ff ff       	jmp    c00027ed <mount_volume+0x1f2>
c0002b5a:	83 c4 3c             	add    esp,0x3c
c0002b5d:	89 d8                	mov    eax,ebx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <find_bitmap>:
c0002b64:	55                   	push   ebp
c0002b65:	57                   	push   edi
c0002b66:	89 c7                	mov    edi,eax
c0002b68:	56                   	push   esi
c0002b69:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b6c:	53                   	push   ebx
c0002b6d:	83 ec 1c             	sub    esp,0x1c
c0002b70:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b77:	83 e8 02             	sub    eax,0x2
c0002b7a:	39 f0                	cmp    eax,esi
c0002b7c:	77 02                	ja     c0002b80 <find_bitmap+0x1c>
c0002b7e:	31 f6                	xor    esi,esi
c0002b80:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b84:	89 f3                	mov    ebx,esi
c0002b86:	31 ed                	xor    ebp,ebp
c0002b88:	31 c9                	xor    ecx,ecx
c0002b8a:	89 da                	mov    edx,ebx
c0002b8c:	89 f8                	mov    eax,edi
c0002b8e:	c1 ea 0c             	shr    edx,0xc
c0002b91:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b94:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b97:	e8 ad f7 ff ff       	call   c0002349 <move_window>
c0002b9c:	85 c0                	test   eax,eax
c0002b9e:	75 68                	jne    c0002c08 <find_bitmap+0xa4>
c0002ba0:	89 da                	mov    edx,ebx
c0002ba2:	89 d9                	mov    ecx,ebx
c0002ba4:	c1 ea 03             	shr    edx,0x3
c0002ba7:	83 e1 07             	and    ecx,0x7
c0002baa:	b8 01 00 00 00       	mov    eax,0x1
c0002baf:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002bb5:	d3 e0                	shl    eax,cl
c0002bb7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002bba:	83 e9 02             	sub    ecx,0x2
c0002bbd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bc1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bc5:	43                   	inc    ebx
c0002bc6:	21 c1                	and    ecx,eax
c0002bc8:	d1 e0                	shl    eax,1
c0002bca:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bce:	77 09                	ja     c0002bd9 <find_bitmap+0x75>
c0002bd0:	31 db                	xor    ebx,ebx
c0002bd2:	ba 00 02 00 00       	mov    edx,0x200
c0002bd7:	31 c0                	xor    eax,eax
c0002bd9:	84 c9                	test   cl,cl
c0002bdb:	75 10                	jne    c0002bed <find_bitmap+0x89>
c0002bdd:	45                   	inc    ebp
c0002bde:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002be2:	75 0f                	jne    c0002bf3 <find_bitmap+0x8f>
c0002be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002be8:	83 c0 02             	add    eax,0x2
c0002beb:	eb 22                	jmp    c0002c0f <find_bitmap+0xab>
c0002bed:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bf1:	31 ed                	xor    ebp,ebp
c0002bf3:	39 de                	cmp    esi,ebx
c0002bf5:	74 16                	je     c0002c0d <find_bitmap+0xa9>
c0002bf7:	84 c0                	test   al,al
c0002bf9:	75 c6                	jne    c0002bc1 <find_bitmap+0x5d>
c0002bfb:	42                   	inc    edx
c0002bfc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002c02:	77 84                	ja     c0002b88 <find_bitmap+0x24>
c0002c04:	b0 01                	mov    al,0x1
c0002c06:	eb b9                	jmp    c0002bc1 <find_bitmap+0x5d>
c0002c08:	83 c8 ff             	or     eax,0xffffffff
c0002c0b:	eb 02                	jmp    c0002c0f <find_bitmap+0xab>
c0002c0d:	31 c0                	xor    eax,eax
c0002c0f:	83 c4 1c             	add    esp,0x1c
c0002c12:	5b                   	pop    ebx
c0002c13:	5e                   	pop    esi
c0002c14:	5f                   	pop    edi
c0002c15:	5d                   	pop    ebp
c0002c16:	c3                   	ret    

c0002c17 <change_bitmap>:
c0002c17:	55                   	push   ebp
c0002c18:	89 cd                	mov    ebp,ecx
c0002c1a:	57                   	push   edi
c0002c1b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c1e:	56                   	push   esi
c0002c1f:	89 c7                	mov    edi,eax
c0002c21:	53                   	push   ebx
c0002c22:	89 c8                	mov    eax,ecx
c0002c24:	83 ec 1c             	sub    esp,0x1c
c0002c27:	31 d2                	xor    edx,edx
c0002c29:	89 ce                	mov    esi,ecx
c0002c2b:	c1 e8 0c             	shr    eax,0xc
c0002c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c33:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c36:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c39:	c1 ee 03             	shr    esi,0x3
c0002c3c:	83 e1 07             	and    ecx,0x7
c0002c3f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c45:	d3 e3                	shl    ebx,cl
c0002c47:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c4b:	89 c1                	mov    ecx,eax
c0002c4d:	89 d3                	mov    ebx,edx
c0002c4f:	83 c1 01             	add    ecx,0x1
c0002c52:	83 d3 00             	adc    ebx,0x0
c0002c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c59:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c5d:	89 d1                	mov    ecx,edx
c0002c5f:	89 c2                	mov    edx,eax
c0002c61:	89 f8                	mov    eax,edi
c0002c63:	e8 e1 f6 ff ff       	call   c0002349 <move_window>
c0002c68:	89 c1                	mov    ecx,eax
c0002c6a:	85 c0                	test   eax,eax
c0002c6c:	75 48                	jne    c0002cb6 <change_bitmap+0x9f>
c0002c6e:	31 d2                	xor    edx,edx
c0002c70:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c74:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c78:	0f 95 c2             	setne  dl
c0002c7b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c7f:	74 3c                	je     c0002cbd <change_bitmap+0xa6>
c0002c81:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c85:	4d                   	dec    ebp
c0002c86:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c8a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c8e:	74 32                	je     c0002cc2 <change_bitmap+0xab>
c0002c90:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c94:	75 d8                	jne    c0002c6e <change_bitmap+0x57>
c0002c96:	8d 46 01             	lea    eax,[esi+0x1]
c0002c99:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c9e:	89 c3                	mov    ebx,eax
c0002ca0:	31 f6                	xor    esi,esi
c0002ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002caa:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cb0:	74 99                	je     c0002c4b <change_bitmap+0x34>
c0002cb2:	89 de                	mov    esi,ebx
c0002cb4:	eb b8                	jmp    c0002c6e <change_bitmap+0x57>
c0002cb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cbb:	eb 05                	jmp    c0002cc2 <change_bitmap+0xab>
c0002cbd:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc2:	83 c4 1c             	add    esp,0x1c
c0002cc5:	89 c8                	mov    eax,ecx
c0002cc7:	5b                   	pop    ebx
c0002cc8:	5e                   	pop    esi
c0002cc9:	5f                   	pop    edi
c0002cca:	5d                   	pop    ebp
c0002ccb:	c3                   	ret    

c0002ccc <put_fat>:
c0002ccc:	83 fa 01             	cmp    edx,0x1
c0002ccf:	0f 86 7b 01 00 00    	jbe    c0002e50 <put_fat+0x184>
c0002cd5:	55                   	push   ebp
c0002cd6:	57                   	push   edi
c0002cd7:	89 cf                	mov    edi,ecx
c0002cd9:	56                   	push   esi
c0002cda:	b9 02 00 00 00       	mov    ecx,0x2
c0002cdf:	53                   	push   ebx
c0002ce0:	89 c6                	mov    esi,eax
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 d3                	mov    ebx,edx
c0002ce7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cea:	0f 86 68 01 00 00    	jbe    c0002e58 <put_fat+0x18c>
c0002cf0:	8a 00                	mov    al,BYTE PTR [eax]
c0002cf2:	3c 02                	cmp    al,0x2
c0002cf4:	0f 84 c7 00 00 00    	je     c0002dc1 <put_fat+0xf5>
c0002cfa:	77 09                	ja     c0002d05 <put_fat+0x39>
c0002cfc:	fe c8                	dec    al
c0002cfe:	74 17                	je     c0002d17 <put_fat+0x4b>
c0002d00:	e9 53 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d05:	b9 02 00 00 00       	mov    ecx,0x2
c0002d0a:	3c 04                	cmp    al,0x4
c0002d0c:	0f 86 e1 00 00 00    	jbe    c0002df3 <put_fat+0x127>
c0002d12:	e9 41 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d17:	89 d5                	mov    ebp,edx
c0002d19:	31 c9                	xor    ecx,ecx
c0002d1b:	d1 ed                	shr    ebp,1
c0002d1d:	89 f0                	mov    eax,esi
c0002d1f:	01 d5                	add    ebp,edx
c0002d21:	89 ea                	mov    edx,ebp
c0002d23:	c1 ea 09             	shr    edx,0x9
c0002d26:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d29:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d2c:	e8 18 f6 ff ff       	call   c0002349 <move_window>
c0002d31:	89 c1                	mov    ecx,eax
c0002d33:	85 c0                	test   eax,eax
c0002d35:	0f 85 1d 01 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d3b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d42:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d45:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d4f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d53:	89 f8                	mov    eax,edi
c0002d55:	83 e3 01             	and    ebx,0x1
c0002d58:	74 0d                	je     c0002d67 <put_fat+0x9b>
c0002d5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d5d:	89 fa                	mov    edx,edi
c0002d5f:	83 e0 0f             	and    eax,0xf
c0002d62:	c1 e2 04             	shl    edx,0x4
c0002d65:	09 d0                	or     eax,edx
c0002d67:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6e:	31 c9                	xor    ecx,ecx
c0002d70:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d74:	c1 ea 09             	shr    edx,0x9
c0002d77:	89 f0                	mov    eax,esi
c0002d79:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d7c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d7f:	e8 c5 f5 ff ff       	call   c0002349 <move_window>
c0002d84:	89 c1                	mov    ecx,eax
c0002d86:	85 c0                	test   eax,eax
c0002d88:	0f 85 ca 00 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d8e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d92:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d98:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d9c:	85 db                	test   ebx,ebx
c0002d9e:	74 07                	je     c0002da7 <put_fat+0xdb>
c0002da0:	c1 ef 04             	shr    edi,0x4
c0002da3:	89 fa                	mov    edx,edi
c0002da5:	eb 0e                	jmp    c0002db5 <put_fat+0xe9>
c0002da7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002daa:	c1 ef 08             	shr    edi,0x8
c0002dad:	83 e2 f0             	and    edx,0xfffffff0
c0002db0:	83 e7 0f             	and    edi,0xf
c0002db3:	09 fa                	or     edx,edi
c0002db5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002db8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dbc:	e9 97 00 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002dc1:	31 c9                	xor    ecx,ecx
c0002dc3:	c1 ea 08             	shr    edx,0x8
c0002dc6:	89 f0                	mov    eax,esi
c0002dc8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dcb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dce:	e8 76 f5 ff ff       	call   c0002349 <move_window>
c0002dd3:	89 c1                	mov    ecx,eax
c0002dd5:	85 c0                	test   eax,eax
c0002dd7:	75 7f                	jne    c0002e58 <put_fat+0x18c>
c0002dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ddd:	01 db                	add    ebx,ebx
c0002ddf:	0f b7 d7             	movzx  edx,di
c0002de2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002de8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dec:	e8 ec ed ff ff       	call   c0001bdd <st_word>
c0002df1:	eb 53                	jmp    c0002e46 <put_fat+0x17a>
c0002df3:	31 c9                	xor    ecx,ecx
c0002df5:	c1 ea 07             	shr    edx,0x7
c0002df8:	89 f0                	mov    eax,esi
c0002dfa:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dfd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e00:	e8 44 f5 ff ff       	call   c0002349 <move_window>
c0002e05:	89 c1                	mov    ecx,eax
c0002e07:	85 c0                	test   eax,eax
c0002e09:	75 4d                	jne    c0002e58 <put_fat+0x18c>
c0002e0b:	c1 e3 02             	shl    ebx,0x2
c0002e0e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e14:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e17:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e1b:	74 1c                	je     c0002e39 <put_fat+0x16d>
c0002e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e21:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 4a ed ff ff       	call   c0001b78 <ld_dword>
c0002e2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e32:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e37:	09 c7                	or     edi,eax
c0002e39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e3d:	89 fa                	mov    edx,edi
c0002e3f:	89 d8                	mov    eax,ebx
c0002e41:	e8 9b ed ff ff       	call   c0001be1 <st_dword>
c0002e46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e4e:	eb 08                	jmp    c0002e58 <put_fat+0x18c>
c0002e50:	b9 02 00 00 00       	mov    ecx,0x2
c0002e55:	89 c8                	mov    eax,ecx
c0002e57:	c3                   	ret    
c0002e58:	83 c4 1c             	add    esp,0x1c
c0002e5b:	89 c8                	mov    eax,ecx
c0002e5d:	5b                   	pop    ebx
c0002e5e:	5e                   	pop    esi
c0002e5f:	5f                   	pop    edi
c0002e60:	5d                   	pop    ebp
c0002e61:	c3                   	ret    

c0002e62 <fill_last_frag>:
c0002e62:	57                   	push   edi
c0002e63:	89 cf                	mov    edi,ecx
c0002e65:	56                   	push   esi
c0002e66:	89 d6                	mov    esi,edx
c0002e68:	53                   	push   ebx
c0002e69:	89 c3                	mov    ebx,eax
c0002e6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e6e:	85 c0                	test   eax,eax
c0002e70:	74 21                	je     c0002e93 <fill_last_frag+0x31>
c0002e72:	89 f9                	mov    ecx,edi
c0002e74:	83 f8 01             	cmp    eax,0x1
c0002e77:	76 05                	jbe    c0002e7e <fill_last_frag+0x1c>
c0002e79:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e7c:	29 c1                	sub    ecx,eax
c0002e7e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e81:	29 c2                	sub    edx,eax
c0002e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e85:	e8 42 fe ff ff       	call   c0002ccc <put_fat>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 05                	jne    c0002e93 <fill_last_frag+0x31>
c0002e8e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e91:	eb d8                	jmp    c0002e6b <fill_last_frag+0x9>
c0002e93:	5b                   	pop    ebx
c0002e94:	5e                   	pop    esi
c0002e95:	5f                   	pop    edi
c0002e96:	c3                   	ret    

c0002e97 <fill_first_frag>:
c0002e97:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e9b:	75 2d                	jne    c0002eca <fill_first_frag+0x33>
c0002e9d:	57                   	push   edi
c0002e9e:	56                   	push   esi
c0002e9f:	53                   	push   ebx
c0002ea0:	89 c3                	mov    ebx,eax
c0002ea2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002ea5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ea8:	01 d7                	add    edi,edx
c0002eaa:	39 fa                	cmp    edx,edi
c0002eac:	74 14                	je     c0002ec2 <fill_first_frag+0x2b>
c0002eae:	8d 72 01             	lea    esi,[edx+0x1]
c0002eb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002eb3:	89 f1                	mov    ecx,esi
c0002eb5:	e8 12 fe ff ff       	call   c0002ccc <put_fat>
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	85 c0                	test   eax,eax
c0002ebe:	74 ea                	je     c0002eaa <fill_first_frag+0x13>
c0002ec0:	eb 0b                	jmp    c0002ecd <fill_first_frag+0x36>
c0002ec2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ec6:	31 c0                	xor    eax,eax
c0002ec8:	eb 03                	jmp    c0002ecd <fill_first_frag+0x36>
c0002eca:	31 c0                	xor    eax,eax
c0002ecc:	c3                   	ret    
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	5f                   	pop    edi
c0002ed0:	c3                   	ret    

c0002ed1 <get_fat>:
c0002ed1:	83 fa 01             	cmp    edx,0x1
c0002ed4:	0f 86 db 01 00 00    	jbe    c00030b5 <get_fat+0x1e4>
c0002eda:	55                   	push   ebp
c0002edb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee0:	57                   	push   edi
c0002ee1:	56                   	push   esi
c0002ee2:	53                   	push   ebx
c0002ee3:	83 ec 1c             	sub    esp,0x1c
c0002ee6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002eeb:	0f 86 cc 01 00 00    	jbe    c00030bd <get_fat+0x1ec>
c0002ef1:	89 c3                	mov    ebx,eax
c0002ef3:	89 d6                	mov    esi,edx
c0002ef5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ef7:	3c 02                	cmp    al,0x2
c0002ef9:	0f 84 99 00 00 00    	je     c0002f98 <get_fat+0xc7>
c0002eff:	77 09                	ja     c0002f0a <get_fat+0x39>
c0002f01:	fe c8                	dec    al
c0002f03:	74 1a                	je     c0002f1f <get_fat+0x4e>
c0002f05:	e9 b3 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f0a:	3c 03                	cmp    al,0x3
c0002f0c:	0f 84 b5 00 00 00    	je     c0002fc7 <get_fat+0xf6>
c0002f12:	3c 04                	cmp    al,0x4
c0002f14:	0f 84 e3 00 00 00    	je     c0002ffd <get_fat+0x12c>
c0002f1a:	e9 9e 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f1f:	89 d3                	mov    ebx,edx
c0002f21:	31 c9                	xor    ecx,ecx
c0002f23:	d1 eb                	shr    ebx,1
c0002f25:	89 f8                	mov    eax,edi
c0002f27:	01 d3                	add    ebx,edx
c0002f29:	89 da                	mov    edx,ebx
c0002f2b:	c1 ea 09             	shr    edx,0x9
c0002f2e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f31:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f34:	e8 10 f4 ff ff       	call   c0002349 <move_window>
c0002f39:	85 c0                	test   eax,eax
c0002f3b:	74 08                	je     c0002f45 <get_fat+0x74>
c0002f3d:	83 c9 ff             	or     ecx,0xffffffff
c0002f40:	e9 78 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f45:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f48:	31 c9                	xor    ecx,ecx
c0002f4a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f50:	89 ea                	mov    edx,ebp
c0002f52:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f56:	c1 ea 09             	shr    edx,0x9
c0002f59:	89 f8                	mov    eax,edi
c0002f5b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f61:	e8 e3 f3 ff ff       	call   c0002349 <move_window>
c0002f66:	85 c0                	test   eax,eax
c0002f68:	75 d3                	jne    c0002f3d <get_fat+0x6c>
c0002f6a:	0f b6 c3             	movzx  eax,bl
c0002f6d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f73:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f78:	c1 e3 08             	shl    ebx,0x8
c0002f7b:	09 c3                	or     ebx,eax
c0002f7d:	89 d9                	mov    ecx,ebx
c0002f7f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f85:	83 e6 01             	and    esi,0x1
c0002f88:	0f 84 2f 01 00 00    	je     c00030bd <get_fat+0x1ec>
c0002f8e:	89 d9                	mov    ecx,ebx
c0002f90:	c1 e9 04             	shr    ecx,0x4
c0002f93:	e9 25 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f98:	31 c9                	xor    ecx,ecx
c0002f9a:	c1 ea 08             	shr    edx,0x8
c0002f9d:	89 f8                	mov    eax,edi
c0002f9f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fa2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fa5:	e8 9f f3 ff ff       	call   c0002349 <move_window>
c0002faa:	85 c0                	test   eax,eax
c0002fac:	75 8f                	jne    c0002f3d <get_fat+0x6c>
c0002fae:	01 f6                	add    esi,esi
c0002fb0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fb6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fba:	e8 ac eb ff ff       	call   c0001b6b <ld_word>
c0002fbf:	0f b7 c8             	movzx  ecx,ax
c0002fc2:	e9 f6 00 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002fc7:	31 c9                	xor    ecx,ecx
c0002fc9:	c1 ea 07             	shr    edx,0x7
c0002fcc:	89 f8                	mov    eax,edi
c0002fce:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fd1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fd4:	e8 70 f3 ff ff       	call   c0002349 <move_window>
c0002fd9:	85 c0                	test   eax,eax
c0002fdb:	0f 85 5c ff ff ff    	jne    c0002f3d <get_fat+0x6c>
c0002fe1:	c1 e6 02             	shl    esi,0x2
c0002fe4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fea:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fee:	e8 85 eb ff ff       	call   c0001b78 <ld_dword>
c0002ff3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ff8:	e9 b4 00 00 00       	jmp    c00030b1 <get_fat+0x1e0>
c0002ffd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003000:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003003:	89 d1                	mov    ecx,edx
c0003005:	09 c1                	or     ecx,eax
c0003007:	74 06                	je     c000300f <get_fat+0x13e>
c0003009:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000300d:	75 0f                	jne    c000301e <get_fat+0x14d>
c000300f:	b9 01 00 00 00       	mov    ecx,0x1
c0003014:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003018:	0f 85 9f 00 00 00    	jne    c00030bd <get_fat+0x1ec>
c000301e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003022:	89 f5                	mov    ebp,esi
c0003024:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003029:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000302c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000302f:	80 f9 02             	cmp    cl,0x2
c0003032:	75 35                	jne    c0003069 <get_fat+0x198>
c0003034:	83 c0 ff             	add    eax,0xffffffff
c0003037:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000303c:	83 d2 ff             	adc    edx,0xffffffff
c000303f:	31 db                	xor    ebx,ebx
c0003041:	0f ac d0 09          	shrd   eax,edx,0x9
c0003045:	53                   	push   ebx
c0003046:	c1 ea 09             	shr    edx,0x9
c0003049:	51                   	push   ecx
c000304a:	52                   	push   edx
c000304b:	50                   	push   eax
c000304c:	e8 7f ff 01 00       	call   c0022fd0 <__udivdi3>
c0003051:	83 c4 10             	add    esp,0x10
c0003054:	b9 01 00 00 00       	mov    ecx,0x1
c0003059:	39 c5                	cmp    ebp,eax
c000305b:	77 60                	ja     c00030bd <get_fat+0x1ec>
c000305d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003062:	74 59                	je     c00030bd <get_fat+0x1ec>
c0003064:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003067:	eb 54                	jmp    c00030bd <get_fat+0x1ec>
c0003069:	80 f9 03             	cmp    cl,0x3
c000306c:	75 05                	jne    c0003073 <get_fat+0x1a2>
c000306e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003071:	77 f1                	ja     c0003064 <get_fat+0x193>
c0003073:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003078:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000307c:	75 3f                	jne    c00030bd <get_fat+0x1ec>
c000307e:	31 c9                	xor    ecx,ecx
c0003080:	89 f2                	mov    edx,esi
c0003082:	89 f8                	mov    eax,edi
c0003084:	c1 ea 07             	shr    edx,0x7
c0003087:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000308d:	e8 b7 f2 ff ff       	call   c0002349 <move_window>
c0003092:	85 c0                	test   eax,eax
c0003094:	0f 85 a3 fe ff ff    	jne    c0002f3d <get_fat+0x6c>
c000309a:	c1 e6 02             	shl    esi,0x2
c000309d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030a7:	e8 cc ea ff ff       	call   c0001b78 <ld_dword>
c00030ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030b1:	89 c1                	mov    ecx,eax
c00030b3:	eb 08                	jmp    c00030bd <get_fat+0x1ec>
c00030b5:	b9 01 00 00 00       	mov    ecx,0x1
c00030ba:	89 c8                	mov    eax,ecx
c00030bc:	c3                   	ret    
c00030bd:	83 c4 1c             	add    esp,0x1c
c00030c0:	89 c8                	mov    eax,ecx
c00030c2:	5b                   	pop    ebx
c00030c3:	5e                   	pop    esi
c00030c4:	5f                   	pop    edi
c00030c5:	5d                   	pop    ebp
c00030c6:	c3                   	ret    

c00030c7 <dir_sdi>:
c00030c7:	55                   	push   ebp
c00030c8:	57                   	push   edi
c00030c9:	56                   	push   esi
c00030ca:	53                   	push   ebx
c00030cb:	89 c3                	mov    ebx,eax
c00030cd:	83 ec 1c             	sub    esp,0x1c
c00030d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030d2:	31 c0                	xor    eax,eax
c00030d4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030d7:	0f 94 c0             	sete   al
c00030da:	48                   	dec    eax
c00030db:	25 00 00 20 f0       	and    eax,0xf0200000
c00030e0:	05 00 00 00 10       	add    eax,0x10000000
c00030e5:	39 d0                	cmp    eax,edx
c00030e7:	77 0a                	ja     c00030f3 <dir_sdi+0x2c>
c00030e9:	b8 02 00 00 00       	mov    eax,0x2
c00030ee:	e9 c4 00 00 00       	jmp    c00031b7 <dir_sdi+0xf0>
c00030f3:	89 d6                	mov    esi,edx
c00030f5:	f6 c2 1f             	test   dl,0x1f
c00030f8:	75 ef                	jne    c00030e9 <dir_sdi+0x22>
c00030fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030fd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003100:	85 c9                	test   ecx,ecx
c0003102:	75 2d                	jne    c0003131 <dir_sdi+0x6a>
c0003104:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003107:	77 1b                	ja     c0003124 <dir_sdi+0x5d>
c0003109:	89 f2                	mov    edx,esi
c000310b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000310f:	c1 ea 05             	shr    edx,0x5
c0003112:	39 c2                	cmp    edx,eax
c0003114:	73 d3                	jae    c00030e9 <dir_sdi+0x22>
c0003116:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003119:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000311c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000311f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003122:	eb 4b                	jmp    c000316f <dir_sdi+0xa8>
c0003124:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003127:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000312b:	85 c0                	test   eax,eax
c000312d:	74 da                	je     c0003109 <dir_sdi+0x42>
c000312f:	89 c1                	mov    ecx,eax
c0003131:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003135:	c1 e5 09             	shl    ebp,0x9
c0003138:	89 ca                	mov    edx,ecx
c000313a:	39 ee                	cmp    esi,ebp
c000313c:	72 1c                	jb     c000315a <dir_sdi+0x93>
c000313e:	89 d8                	mov    eax,ebx
c0003140:	e8 8c fd ff ff       	call   c0002ed1 <get_fat>
c0003145:	89 c1                	mov    ecx,eax
c0003147:	83 f8 ff             	cmp    eax,0xffffffff
c000314a:	74 66                	je     c00031b2 <dir_sdi+0xeb>
c000314c:	83 f8 01             	cmp    eax,0x1
c000314f:	76 98                	jbe    c00030e9 <dir_sdi+0x22>
c0003151:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003154:	76 93                	jbe    c00030e9 <dir_sdi+0x22>
c0003156:	29 ee                	sub    esi,ebp
c0003158:	eb de                	jmp    c0003138 <dir_sdi+0x71>
c000315a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000315e:	89 f8                	mov    eax,edi
c0003160:	e8 9f ec ff ff       	call   c0001e04 <clst2sect>
c0003165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003169:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000316f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003172:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003175:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003178:	89 d1                	mov    ecx,edx
c000317a:	09 c1                	or     ecx,eax
c000317c:	0f 84 67 ff ff ff    	je     c00030e9 <dir_sdi+0x22>
c0003182:	89 f1                	mov    ecx,esi
c0003184:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000318c:	c1 e9 09             	shr    ecx,0x9
c000318f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003193:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003197:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000319b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000319e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00031a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031a7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00031ae:	31 c0                	xor    eax,eax
c00031b0:	eb 05                	jmp    c00031b7 <dir_sdi+0xf0>
c00031b2:	b8 01 00 00 00       	mov    eax,0x1
c00031b7:	83 c4 1c             	add    esp,0x1c
c00031ba:	5b                   	pop    ebx
c00031bb:	5e                   	pop    esi
c00031bc:	5f                   	pop    edi
c00031bd:	5d                   	pop    ebp
c00031be:	c3                   	ret    

c00031bf <create_chain>:
c00031bf:	55                   	push   ebp
c00031c0:	89 c5                	mov    ebp,eax
c00031c2:	57                   	push   edi
c00031c3:	56                   	push   esi
c00031c4:	53                   	push   ebx
c00031c5:	83 ec 1c             	sub    esp,0x1c
c00031c8:	85 d2                	test   edx,edx
c00031ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031ce:	8b 30                	mov    esi,DWORD PTR [eax]
c00031d0:	75 0e                	jne    c00031e0 <create_chain+0x21>
c00031d2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031d5:	85 ff                	test   edi,edi
c00031d7:	74 39                	je     c0003212 <create_chain+0x53>
c00031d9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031dc:	77 39                	ja     c0003217 <create_chain+0x58>
c00031de:	eb 32                	jmp    c0003212 <create_chain+0x53>
c00031e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031e4:	e8 e8 fc ff ff       	call   c0002ed1 <get_fat>
c00031e9:	89 c3                	mov    ebx,eax
c00031eb:	83 f8 01             	cmp    eax,0x1
c00031ee:	77 0a                	ja     c00031fa <create_chain+0x3b>
c00031f0:	bb 01 00 00 00       	mov    ebx,0x1
c00031f5:	e9 ba 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c00031fa:	83 f8 ff             	cmp    eax,0xffffffff
c00031fd:	0f 84 62 01 00 00    	je     c0003365 <create_chain+0x1a6>
c0003203:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003206:	0f 87 a8 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c000320c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003210:	eb 05                	jmp    c0003217 <create_chain+0x58>
c0003212:	bf 01 00 00 00       	mov    edi,0x1
c0003217:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000321b:	75 07                	jne    c0003224 <create_chain+0x65>
c000321d:	31 db                	xor    ebx,ebx
c000321f:	e9 90 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c0003224:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003227:	75 74                	jne    c000329d <create_chain+0xde>
c0003229:	b9 01 00 00 00       	mov    ecx,0x1
c000322e:	89 fa                	mov    edx,edi
c0003230:	89 f0                	mov    eax,esi
c0003232:	e8 2d f9 ff ff       	call   c0002b64 <find_bitmap>
c0003237:	89 c3                	mov    ebx,eax
c0003239:	8d 40 ff             	lea    eax,[eax-0x1]
c000323c:	83 f8 fd             	cmp    eax,0xfffffffd
c000323f:	0f 87 6f 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c0003245:	83 ec 0c             	sub    esp,0xc
c0003248:	b9 01 00 00 00       	mov    ecx,0x1
c000324d:	6a 01                	push   0x1
c000324f:	89 da                	mov    edx,ebx
c0003251:	89 f0                	mov    eax,esi
c0003253:	e8 bf f9 ff ff       	call   c0002c17 <change_bitmap>
c0003258:	83 c4 10             	add    esp,0x10
c000325b:	83 f8 02             	cmp    eax,0x2
c000325e:	74 90                	je     c00031f0 <create_chain+0x31>
c0003260:	83 f8 01             	cmp    eax,0x1
c0003263:	0f 84 fc 00 00 00    	je     c0003365 <create_chain+0x1a6>
c0003269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000326e:	75 09                	jne    c0003279 <create_chain+0xba>
c0003270:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003274:	e9 0c 01 00 00       	jmp    c0003385 <create_chain+0x1c6>
c0003279:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000327d:	0f 85 e7 00 00 00    	jne    c000336a <create_chain+0x1ab>
c0003283:	8d 57 01             	lea    edx,[edi+0x1]
c0003286:	39 da                	cmp    edx,ebx
c0003288:	0f 84 f7 00 00 00    	je     c0003385 <create_chain+0x1c6>
c000328e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003291:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003295:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003298:	e9 cd 00 00 00       	jmp    c000336a <create_chain+0x1ab>
c000329d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00032a1:	75 41                	jne    c00032e4 <create_chain+0x125>
c00032a3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00032a6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032a9:	77 05                	ja     c00032b0 <create_chain+0xf1>
c00032ab:	bb 02 00 00 00       	mov    ebx,0x2
c00032b0:	89 da                	mov    edx,ebx
c00032b2:	89 e8                	mov    eax,ebp
c00032b4:	e8 18 fc ff ff       	call   c0002ed1 <get_fat>
c00032b9:	83 f8 01             	cmp    eax,0x1
c00032bc:	0f 84 2e ff ff ff    	je     c00031f0 <create_chain+0x31>
c00032c2:	83 f8 ff             	cmp    eax,0xffffffff
c00032c5:	0f 84 9a 00 00 00    	je     c0003365 <create_chain+0x1a6>
c00032cb:	85 c0                	test   eax,eax
c00032cd:	74 11                	je     c00032e0 <create_chain+0x121>
c00032cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032d2:	83 f8 01             	cmp    eax,0x1
c00032d5:	76 0d                	jbe    c00032e4 <create_chain+0x125>
c00032d7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032da:	76 08                	jbe    c00032e4 <create_chain+0x125>
c00032dc:	89 c7                	mov    edi,eax
c00032de:	eb 04                	jmp    c00032e4 <create_chain+0x125>
c00032e0:	85 db                	test   ebx,ebx
c00032e2:	75 38                	jne    c000331c <create_chain+0x15d>
c00032e4:	89 fb                	mov    ebx,edi
c00032e6:	43                   	inc    ebx
c00032e7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032ea:	77 0e                	ja     c00032fa <create_chain+0x13b>
c00032ec:	83 ff 01             	cmp    edi,0x1
c00032ef:	0f 86 28 ff ff ff    	jbe    c000321d <create_chain+0x5e>
c00032f5:	bb 02 00 00 00       	mov    ebx,0x2
c00032fa:	89 da                	mov    edx,ebx
c00032fc:	89 e8                	mov    eax,ebp
c00032fe:	e8 ce fb ff ff       	call   c0002ed1 <get_fat>
c0003303:	85 c0                	test   eax,eax
c0003305:	74 15                	je     c000331c <create_chain+0x15d>
c0003307:	83 f8 01             	cmp    eax,0x1
c000330a:	0f 84 e0 fe ff ff    	je     c00031f0 <create_chain+0x31>
c0003310:	40                   	inc    eax
c0003311:	74 52                	je     c0003365 <create_chain+0x1a6>
c0003313:	39 fb                	cmp    ebx,edi
c0003315:	75 cf                	jne    c00032e6 <create_chain+0x127>
c0003317:	e9 01 ff ff ff       	jmp    c000321d <create_chain+0x5e>
c000331c:	83 c9 ff             	or     ecx,0xffffffff
c000331f:	89 da                	mov    edx,ebx
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 a4 f9 ff ff       	call   c0002ccc <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 32                	jne    c000335e <create_chain+0x19f>
c000332c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003331:	74 11                	je     c0003344 <create_chain+0x185>
c0003333:	89 d9                	mov    ecx,ebx
c0003335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003339:	89 f0                	mov    eax,esi
c000333b:	e8 8c f9 ff ff       	call   c0002ccc <put_fat>
c0003340:	85 c0                	test   eax,eax
c0003342:	75 1a                	jne    c000335e <create_chain+0x19f>
c0003344:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003347:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000334a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000334d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003350:	39 d0                	cmp    eax,edx
c0003352:	77 04                	ja     c0003358 <create_chain+0x199>
c0003354:	48                   	dec    eax
c0003355:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003358:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000335c:	eb 56                	jmp    c00033b4 <create_chain+0x1f5>
c000335e:	48                   	dec    eax
c000335f:	0f 85 8b fe ff ff    	jne    c00031f0 <create_chain+0x31>
c0003365:	83 cb ff             	or     ebx,0xffffffff
c0003368:	eb 4a                	jmp    c00033b4 <create_chain+0x1f5>
c000336a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003371:	41                   	inc    ecx
c0003372:	39 d9                	cmp    ecx,ebx
c0003374:	75 19                	jne    c000338f <create_chain+0x1d0>
c0003376:	b9 02 00 00 00       	mov    ecx,0x2
c000337b:	85 d2                	test   edx,edx
c000337d:	74 03                	je     c0003382 <create_chain+0x1c3>
c000337f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003382:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003385:	85 c0                	test   eax,eax
c0003387:	0f 85 63 fe ff ff    	jne    c00031f0 <create_chain+0x31>
c000338d:	eb b5                	jmp    c0003344 <create_chain+0x185>
c000338f:	85 d2                	test   edx,edx
c0003391:	75 07                	jne    c000339a <create_chain+0x1db>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	89 d9                	mov    ecx,ebx
c000339c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033a0:	89 e8                	mov    eax,ebp
c00033a2:	e8 bb fa ff ff       	call   c0002e62 <fill_last_frag>
c00033a7:	85 c0                	test   eax,eax
c00033a9:	75 b3                	jne    c000335e <create_chain+0x19f>
c00033ab:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033b2:	eb 90                	jmp    c0003344 <create_chain+0x185>
c00033b4:	83 c4 1c             	add    esp,0x1c
c00033b7:	89 d8                	mov    eax,ebx
c00033b9:	5b                   	pop    ebx
c00033ba:	5e                   	pop    esi
c00033bb:	5f                   	pop    edi
c00033bc:	5d                   	pop    ebp
c00033bd:	c3                   	ret    

c00033be <remove_chain>:
c00033be:	55                   	push   ebp
c00033bf:	57                   	push   edi
c00033c0:	56                   	push   esi
c00033c1:	53                   	push   ebx
c00033c2:	83 ec 1c             	sub    esp,0x1c
c00033c5:	83 fa 01             	cmp    edx,0x1
c00033c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033cc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033ce:	77 0a                	ja     c00033da <remove_chain+0x1c>
c00033d0:	b8 02 00 00 00       	mov    eax,0x2
c00033d5:	e9 24 01 00 00       	jmp    c00034fe <remove_chain+0x140>
c00033da:	89 d6                	mov    esi,edx
c00033dc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033df:	76 ef                	jbe    c00033d0 <remove_chain+0x12>
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033e8:	75 06                	jne    c00033f0 <remove_chain+0x32>
c00033ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033ee:	eb 54                	jmp    c0003444 <remove_chain+0x86>
c00033f0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033f3:	75 06                	jne    c00033fb <remove_chain+0x3d>
c00033f5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033f9:	74 ef                	je     c00033ea <remove_chain+0x2c>
c00033fb:	83 c9 ff             	or     ecx,0xffffffff
c00033fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003402:	89 d8                	mov    eax,ebx
c0003404:	e8 c3 f8 ff ff       	call   c0002ccc <put_fat>
c0003409:	85 c0                	test   eax,eax
c000340b:	74 dd                	je     c00033ea <remove_chain+0x2c>
c000340d:	e9 ec 00 00 00       	jmp    c00034fe <remove_chain+0x140>
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	74 b9                	je     c00033d0 <remove_chain+0x12>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	74 6d                	je     c0003489 <remove_chain+0xcb>
c000341c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000341f:	75 6f                	jne    c0003490 <remove_chain+0xd2>
c0003421:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003424:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003427:	8d 51 fe             	lea    edx,[ecx-0x2]
c000342a:	39 d0                	cmp    eax,edx
c000342c:	73 08                	jae    c0003436 <remove_chain+0x78>
c000342e:	40                   	inc    eax
c000342f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003433:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003436:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003439:	39 e9                	cmp    ecx,ebp
c000343b:	75 64                	jne    c00034a1 <remove_chain+0xe3>
c000343d:	89 ee                	mov    esi,ebp
c000343f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003442:	76 0f                	jbe    c0003453 <remove_chain+0x95>
c0003444:	89 f2                	mov    edx,esi
c0003446:	89 f8                	mov    eax,edi
c0003448:	e8 84 fa ff ff       	call   c0002ed1 <get_fat>
c000344d:	89 c5                	mov    ebp,eax
c000344f:	85 c0                	test   eax,eax
c0003451:	75 bf                	jne    c0003412 <remove_chain+0x54>
c0003453:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003456:	0f 85 a0 00 00 00    	jne    c00034fc <remove_chain+0x13e>
c000345c:	eb 6c                	jmp    c00034ca <remove_chain+0x10c>
c000345e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003461:	84 c0                	test   al,al
c0003463:	75 7d                	jne    c00034e2 <remove_chain+0x124>
c0003465:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003468:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000346c:	0f 84 86 00 00 00    	je     c00034f8 <remove_chain+0x13a>
c0003472:	89 da                	mov    edx,ebx
c0003474:	89 f8                	mov    eax,edi
c0003476:	e8 56 fa ff ff       	call   c0002ed1 <get_fat>
c000347b:	83 f8 01             	cmp    eax,0x1
c000347e:	0f 86 4c ff ff ff    	jbe    c00033d0 <remove_chain+0x12>
c0003484:	83 f8 ff             	cmp    eax,0xffffffff
c0003487:	75 4e                	jne    c00034d7 <remove_chain+0x119>
c0003489:	b8 01 00 00 00       	mov    eax,0x1
c000348e:	eb 6e                	jmp    c00034fe <remove_chain+0x140>
c0003490:	31 c9                	xor    ecx,ecx
c0003492:	89 f2                	mov    edx,esi
c0003494:	89 d8                	mov    eax,ebx
c0003496:	e8 31 f8 ff ff       	call   c0002ccc <put_fat>
c000349b:	85 c0                	test   eax,eax
c000349d:	74 82                	je     c0003421 <remove_chain+0x63>
c000349f:	eb 5d                	jmp    c00034fe <remove_chain+0x140>
c00034a1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034a4:	75 1b                	jne    c00034c1 <remove_chain+0x103>
c00034a6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00034aa:	89 d8                	mov    eax,ebx
c00034ac:	83 ec 0c             	sub    esp,0xc
c00034af:	6a 00                	push   0x0
c00034b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034b5:	e8 5d f7 ff ff       	call   c0002c17 <change_bitmap>
c00034ba:	83 c4 10             	add    esp,0x10
c00034bd:	85 c0                	test   eax,eax
c00034bf:	75 3d                	jne    c00034fe <remove_chain+0x140>
c00034c1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034c5:	e9 73 ff ff ff       	jmp    c000343d <remove_chain+0x7f>
c00034ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034cf:	75 8d                	jne    c000345e <remove_chain+0xa0>
c00034d1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034d5:	eb 25                	jmp    c00034fc <remove_chain+0x13e>
c00034d7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034da:	89 c3                	mov    ebx,eax
c00034dc:	39 c2                	cmp    edx,eax
c00034de:	74 88                	je     c0003468 <remove_chain+0xaa>
c00034e0:	eb 1a                	jmp    c00034fc <remove_chain+0x13e>
c00034e2:	3c 03                	cmp    al,0x3
c00034e4:	75 16                	jne    c00034fc <remove_chain+0x13e>
c00034e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034e9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034ed:	77 0d                	ja     c00034fc <remove_chain+0x13e>
c00034ef:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034f2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034f6:	72 04                	jb     c00034fc <remove_chain+0x13e>
c00034f8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034fc:	31 c0                	xor    eax,eax
c00034fe:	83 c4 1c             	add    esp,0x1c
c0003501:	5b                   	pop    ebx
c0003502:	5e                   	pop    esi
c0003503:	5f                   	pop    edi
c0003504:	5d                   	pop    ebp
c0003505:	c3                   	ret    

c0003506 <dir_clear>:
c0003506:	55                   	push   ebp
c0003507:	57                   	push   edi
c0003508:	56                   	push   esi
c0003509:	89 c6                	mov    esi,eax
c000350b:	53                   	push   ebx
c000350c:	83 ec 1c             	sub    esp,0x1c
c000350f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003513:	e8 9d ed ff ff       	call   c00022b5 <sync_window>
c0003518:	85 c0                	test   eax,eax
c000351a:	0f 85 de 00 00 00    	jne    c00035fe <dir_clear+0xf8>
c0003520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003524:	89 f0                	mov    eax,esi
c0003526:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003529:	e8 d6 e8 ff ff       	call   c0001e04 <clst2sect>
c000352e:	b9 00 02 00 00       	mov    ecx,0x200
c0003533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003537:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000353b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000353e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003541:	89 e8                	mov    eax,ebp
c0003543:	31 d2                	xor    edx,edx
c0003545:	e8 b5 e6 ff ff       	call   c0001bff <mem_set>
c000354a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000354e:	c1 e3 09             	shl    ebx,0x9
c0003551:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003557:	76 1f                	jbe    c0003578 <dir_clear+0x72>
c0003559:	bb 00 80 00 00       	mov    ebx,0x8000
c000355e:	eb 18                	jmp    c0003578 <dir_clear+0x72>
c0003560:	83 ec 0c             	sub    esp,0xc
c0003563:	53                   	push   ebx
c0003564:	e8 6b 50 00 00       	call   c00085d4 <ff_memalloc>
c0003569:	83 c4 10             	add    esp,0x10
c000356c:	89 c7                	mov    edi,eax
c000356e:	85 c0                	test   eax,eax
c0003570:	0f 85 8f 00 00 00    	jne    c0003605 <dir_clear+0xff>
c0003576:	d1 eb                	shr    ebx,1
c0003578:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000357e:	77 e0                	ja     c0003560 <dir_clear+0x5a>
c0003580:	31 db                	xor    ebx,ebx
c0003582:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003586:	39 d8                	cmp    eax,ebx
c0003588:	76 66                	jbe    c00035f0 <dir_clear+0xea>
c000358a:	83 ec 0c             	sub    esp,0xc
c000358d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003591:	6a 01                	push   0x1
c0003593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000359b:	55                   	push   ebp
c000359c:	50                   	push   eax
c000359d:	e8 94 e5 ff ff       	call   c0001b36 <disk_write>
c00035a2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00035a7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00035ac:	83 c4 20             	add    esp,0x20
c00035af:	85 c0                	test   eax,eax
c00035b1:	75 3d                	jne    c00035f0 <dir_clear+0xea>
c00035b3:	43                   	inc    ebx
c00035b4:	eb cc                	jmp    c0003582 <dir_clear+0x7c>
c00035b6:	83 ec 0c             	sub    esp,0xc
c00035b9:	31 d2                	xor    edx,edx
c00035bb:	55                   	push   ebp
c00035bc:	89 d8                	mov    eax,ebx
c00035be:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035c2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035c6:	52                   	push   edx
c00035c7:	50                   	push   eax
c00035c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035cc:	57                   	push   edi
c00035cd:	50                   	push   eax
c00035ce:	e8 63 e5 ff ff       	call   c0001b36 <disk_write>
c00035d3:	83 c4 20             	add    esp,0x20
c00035d6:	85 c0                	test   eax,eax
c00035d8:	75 0a                	jne    c00035e4 <dir_clear+0xde>
c00035da:	01 eb                	add    ebx,ebp
c00035dc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e0:	39 d8                	cmp    eax,ebx
c00035e2:	77 d2                	ja     c00035b6 <dir_clear+0xb0>
c00035e4:	83 ec 0c             	sub    esp,0xc
c00035e7:	57                   	push   edi
c00035e8:	e8 ff 4f 00 00       	call   c00085ec <ff_memfree>
c00035ed:	83 c4 10             	add    esp,0x10
c00035f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035f4:	39 d8                	cmp    eax,ebx
c00035f6:	0f 95 c0             	setne  al
c00035f9:	0f b6 c0             	movzx  eax,al
c00035fc:	eb 19                	jmp    c0003617 <dir_clear+0x111>
c00035fe:	b8 01 00 00 00       	mov    eax,0x1
c0003603:	eb 12                	jmp    c0003617 <dir_clear+0x111>
c0003605:	89 d9                	mov    ecx,ebx
c0003607:	31 d2                	xor    edx,edx
c0003609:	c1 eb 09             	shr    ebx,0x9
c000360c:	e8 ee e5 ff ff       	call   c0001bff <mem_set>
c0003611:	89 dd                	mov    ebp,ebx
c0003613:	31 db                	xor    ebx,ebx
c0003615:	eb c5                	jmp    c00035dc <dir_clear+0xd6>
c0003617:	83 c4 1c             	add    esp,0x1c
c000361a:	5b                   	pop    ebx
c000361b:	5e                   	pop    esi
c000361c:	5f                   	pop    edi
c000361d:	5d                   	pop    ebp
c000361e:	c3                   	ret    

c000361f <dir_next>:
c000361f:	55                   	push   ebp
c0003620:	57                   	push   edi
c0003621:	56                   	push   esi
c0003622:	53                   	push   ebx
c0003623:	89 c3                	mov    ebx,eax
c0003625:	83 ec 1c             	sub    esp,0x1c
c0003628:	8b 28                	mov    ebp,DWORD PTR [eax]
c000362a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000362e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003631:	8d 78 20             	lea    edi,[eax+0x20]
c0003634:	31 c0                	xor    eax,eax
c0003636:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000363a:	0f 94 c0             	sete   al
c000363d:	48                   	dec    eax
c000363e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003643:	05 00 00 00 10       	add    eax,0x10000000
c0003648:	39 f8                	cmp    eax,edi
c000364a:	77 0e                	ja     c000365a <dir_next+0x3b>
c000364c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003653:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000365a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000365d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003660:	b8 04 00 00 00       	mov    eax,0x4
c0003665:	89 ce                	mov    esi,ecx
c0003667:	09 d6                	or     esi,edx
c0003669:	0f 84 da 00 00 00    	je     c0003749 <dir_next+0x12a>
c000366f:	89 f8                	mov    eax,edi
c0003671:	25 ff 01 00 00       	and    eax,0x1ff
c0003676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000367a:	0f 85 b9 00 00 00    	jne    c0003739 <dir_next+0x11a>
c0003680:	83 c2 01             	add    edx,0x1
c0003683:	83 d1 00             	adc    ecx,0x0
c0003686:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003689:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000368c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000368f:	85 d2                	test   edx,edx
c0003691:	75 29                	jne    c00036bc <dir_next+0x9d>
c0003693:	89 fa                	mov    edx,edi
c0003695:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003699:	c1 ea 05             	shr    edx,0x5
c000369c:	39 c2                	cmp    edx,eax
c000369e:	0f 82 95 00 00 00    	jb     c0003739 <dir_next+0x11a>
c00036a4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00036ab:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036b2:	b8 04 00 00 00       	mov    eax,0x4
c00036b7:	e9 8d 00 00 00       	jmp    c0003749 <dir_next+0x12a>
c00036bc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036c0:	89 f9                	mov    ecx,edi
c00036c2:	48                   	dec    eax
c00036c3:	c1 e9 09             	shr    ecx,0x9
c00036c6:	85 c8                	test   eax,ecx
c00036c8:	75 6f                	jne    c0003739 <dir_next+0x11a>
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	e8 00 f8 ff ff       	call   c0002ed1 <get_fat>
c00036d1:	89 c6                	mov    esi,eax
c00036d3:	83 f8 01             	cmp    eax,0x1
c00036d6:	77 07                	ja     c00036df <dir_next+0xc0>
c00036d8:	b8 02 00 00 00       	mov    eax,0x2
c00036dd:	eb 6a                	jmp    c0003749 <dir_next+0x12a>
c00036df:	83 f8 ff             	cmp    eax,0xffffffff
c00036e2:	75 07                	jne    c00036eb <dir_next+0xcc>
c00036e4:	b8 01 00 00 00       	mov    eax,0x1
c00036e9:	eb 5e                	jmp    c0003749 <dir_next+0x12a>
c00036eb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036ee:	77 37                	ja     c0003727 <dir_next+0x108>
c00036f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036f5:	74 ad                	je     c00036a4 <dir_next+0x85>
c00036f7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036fa:	89 d8                	mov    eax,ebx
c00036fc:	e8 be fa ff ff       	call   c00031bf <create_chain>
c0003701:	89 c6                	mov    esi,eax
c0003703:	b8 07 00 00 00       	mov    eax,0x7
c0003708:	85 f6                	test   esi,esi
c000370a:	74 3d                	je     c0003749 <dir_next+0x12a>
c000370c:	83 fe 01             	cmp    esi,0x1
c000370f:	74 c7                	je     c00036d8 <dir_next+0xb9>
c0003711:	83 fe ff             	cmp    esi,0xffffffff
c0003714:	74 ce                	je     c00036e4 <dir_next+0xc5>
c0003716:	89 f2                	mov    edx,esi
c0003718:	89 e8                	mov    eax,ebp
c000371a:	e8 e7 fd ff ff       	call   c0003506 <dir_clear>
c000371f:	85 c0                	test   eax,eax
c0003721:	75 c1                	jne    c00036e4 <dir_next+0xc5>
c0003723:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003727:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000372a:	89 f2                	mov    edx,esi
c000372c:	89 e8                	mov    eax,ebp
c000372e:	e8 d1 e6 ff ff       	call   c0001e04 <clst2sect>
c0003733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003736:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000373d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003740:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003744:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003747:	31 c0                	xor    eax,eax
c0003749:	83 c4 1c             	add    esp,0x1c
c000374c:	5b                   	pop    ebx
c000374d:	5e                   	pop    esi
c000374e:	5f                   	pop    edi
c000374f:	5d                   	pop    ebp
c0003750:	c3                   	ret    

c0003751 <load_xdir>:
c0003751:	55                   	push   ebp
c0003752:	57                   	push   edi
c0003753:	56                   	push   esi
c0003754:	89 c6                	mov    esi,eax
c0003756:	53                   	push   ebx
c0003757:	83 ec 1c             	sub    esp,0x1c
c000375a:	8b 00                	mov    eax,DWORD PTR [eax]
c000375c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000375f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003762:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003765:	e8 df eb ff ff       	call   c0002349 <move_window>
c000376a:	89 c3                	mov    ebx,eax
c000376c:	85 c0                	test   eax,eax
c000376e:	0f 85 0c 01 00 00    	jne    c0003880 <load_xdir+0x12f>
c0003774:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003777:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000377a:	0f 85 fb 00 00 00    	jne    c000387b <load_xdir+0x12a>
c0003780:	89 f8                	mov    eax,edi
c0003782:	b9 20 00 00 00       	mov    ecx,0x20
c0003787:	e8 5e e4 ff ff       	call   c0001bea <mem_cpy>
c000378c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003790:	40                   	inc    eax
c0003791:	c1 e0 05             	shl    eax,0x5
c0003794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003798:	83 e8 60             	sub    eax,0x60
c000379b:	3d 00 02 00 00       	cmp    eax,0x200
c00037a0:	0f 87 d5 00 00 00    	ja     c000387b <load_xdir+0x12a>
c00037a6:	31 d2                	xor    edx,edx
c00037a8:	89 f0                	mov    eax,esi
c00037aa:	e8 70 fe ff ff       	call   c000361f <dir_next>
c00037af:	89 c3                	mov    ebx,eax
c00037b1:	83 f8 04             	cmp    eax,0x4
c00037b4:	0f 84 c1 00 00 00    	je     c000387b <load_xdir+0x12a>
c00037ba:	85 c0                	test   eax,eax
c00037bc:	0f 85 be 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037c2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037c5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ca:	e8 7a eb ff ff       	call   c0002349 <move_window>
c00037cf:	89 c3                	mov    ebx,eax
c00037d1:	85 c0                	test   eax,eax
c00037d3:	0f 85 a7 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037d9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037dc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037df:	0f 85 96 00 00 00    	jne    c000387b <load_xdir+0x12a>
c00037e5:	8d 47 20             	lea    eax,[edi+0x20]
c00037e8:	b9 20 00 00 00       	mov    ecx,0x20
c00037ed:	e8 f8 e3 ff ff       	call   c0001bea <mem_cpy>
c00037f2:	31 d2                	xor    edx,edx
c00037f4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037f8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037fd:	83 c0 2c             	add    eax,0x2c
c0003800:	f7 f1                	div    ecx
c0003802:	c1 e0 05             	shl    eax,0x5
c0003805:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003809:	77 70                	ja     c000387b <load_xdir+0x12a>
c000380b:	bd 40 00 00 00       	mov    ebp,0x40
c0003810:	31 d2                	xor    edx,edx
c0003812:	89 f0                	mov    eax,esi
c0003814:	e8 06 fe ff ff       	call   c000361f <dir_next>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	83 f8 04             	cmp    eax,0x4
c000381e:	74 5b                	je     c000387b <load_xdir+0x12a>
c0003820:	85 c0                	test   eax,eax
c0003822:	75 5c                	jne    c0003880 <load_xdir+0x12f>
c0003824:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003827:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000382a:	8b 06                	mov    eax,DWORD PTR [esi]
c000382c:	e8 18 eb ff ff       	call   c0002349 <move_window>
c0003831:	89 c3                	mov    ebx,eax
c0003833:	85 c0                	test   eax,eax
c0003835:	75 49                	jne    c0003880 <load_xdir+0x12f>
c0003837:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000383a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000383d:	75 3c                	jne    c000387b <load_xdir+0x12a>
c000383f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003845:	77 0d                	ja     c0003854 <load_xdir+0x103>
c0003847:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000384a:	b9 20 00 00 00       	mov    ecx,0x20
c000384f:	e8 96 e3 ff ff       	call   c0001bea <mem_cpy>
c0003854:	83 c5 20             	add    ebp,0x20
c0003857:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000385b:	77 b3                	ja     c0003810 <load_xdir+0xbf>
c000385d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003863:	77 1b                	ja     c0003880 <load_xdir+0x12f>
c0003865:	89 f8                	mov    eax,edi
c0003867:	e8 cd e7 ff ff       	call   c0002039 <xdir_sum>
c000386c:	89 c1                	mov    ecx,eax
c000386e:	8d 47 02             	lea    eax,[edi+0x2]
c0003871:	e8 f5 e2 ff ff       	call   c0001b6b <ld_word>
c0003876:	66 39 c1             	cmp    cx,ax
c0003879:	74 05                	je     c0003880 <load_xdir+0x12f>
c000387b:	bb 02 00 00 00       	mov    ebx,0x2
c0003880:	83 c4 1c             	add    esp,0x1c
c0003883:	89 d8                	mov    eax,ebx
c0003885:	5b                   	pop    ebx
c0003886:	5e                   	pop    esi
c0003887:	5f                   	pop    edi
c0003888:	5d                   	pop    ebp
c0003889:	c3                   	ret    

c000388a <load_obj_xdir>:
c000388a:	53                   	push   ebx
c000388b:	89 c3                	mov    ebx,eax
c000388d:	83 ec 08             	sub    esp,0x8
c0003890:	8b 02                	mov    eax,DWORD PTR [edx]
c0003892:	89 03                	mov    DWORD PTR [ebx],eax
c0003894:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003897:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000389a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000389d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00038a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00038a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00038aa:	30 c0                	xor    al,al
c00038ac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038b3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038b6:	89 d8                	mov    eax,ebx
c00038b8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038bb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038be:	e8 04 f8 ff ff       	call   c00030c7 <dir_sdi>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 0b                	jne    c00038d2 <load_obj_xdir+0x48>
c00038c7:	89 d8                	mov    eax,ebx
c00038c9:	83 c4 08             	add    esp,0x8
c00038cc:	5b                   	pop    ebx
c00038cd:	e9 7f fe ff ff       	jmp    c0003751 <load_xdir>
c00038d2:	83 c4 08             	add    esp,0x8
c00038d5:	5b                   	pop    ebx
c00038d6:	c3                   	ret    

c00038d7 <dir_read>:
c00038d7:	55                   	push   ebp
c00038d8:	bd 04 00 00 00       	mov    ebp,0x4
c00038dd:	57                   	push   edi
c00038de:	56                   	push   esi
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	53                   	push   ebx
c00038e5:	89 c3                	mov    ebx,eax
c00038e7:	83 ec 1c             	sub    esp,0x1c
c00038ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ee:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038f5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038f8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038fb:	89 c8                	mov    eax,ecx
c00038fd:	09 d0                	or     eax,edx
c00038ff:	0f 84 25 01 00 00    	je     c0003a2a <dir_read+0x153>
c0003905:	89 f8                	mov    eax,edi
c0003907:	e8 3d ea ff ff       	call   c0002349 <move_window>
c000390c:	89 c5                	mov    ebp,eax
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 85 23 01 00 00    	jne    c0003a39 <dir_read+0x162>
c0003916:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003919:	8a 0a                	mov    cl,BYTE PTR [edx]
c000391b:	84 c9                	test   cl,cl
c000391d:	0f 84 11 01 00 00    	je     c0003a34 <dir_read+0x15d>
c0003923:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003926:	75 48                	jne    c0003970 <dir_read+0x99>
c0003928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000392d:	74 10                	je     c000393f <dir_read+0x68>
c000392f:	80 f9 83             	cmp    cl,0x83
c0003932:	0f 85 dd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003938:	31 ed                	xor    ebp,ebp
c000393a:	e9 08 01 00 00       	jmp    c0003a47 <dir_read+0x170>
c000393f:	80 f9 85             	cmp    cl,0x85
c0003942:	0f 85 cd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003948:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000394b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000394e:	89 d8                	mov    eax,ebx
c0003950:	e8 fc fd ff ff       	call   c0003751 <load_xdir>
c0003955:	89 c5                	mov    ebp,eax
c0003957:	85 c0                	test   eax,eax
c0003959:	0f 85 da 00 00 00    	jne    c0003a39 <dir_read+0x162>
c000395f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003962:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003965:	83 e0 3f             	and    eax,0x3f
c0003968:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000396b:	e9 d7 00 00 00       	jmp    c0003a47 <dir_read+0x170>
c0003970:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003973:	83 e0 3f             	and    eax,0x3f
c0003976:	80 f9 2e             	cmp    cl,0x2e
c0003979:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000397d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003980:	0f 84 8a 00 00 00    	je     c0003a10 <dir_read+0x139>
c0003986:	80 f9 e5             	cmp    cl,0xe5
c0003989:	0f 84 81 00 00 00    	je     c0003a10 <dir_read+0x139>
c000398f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003993:	83 e0 1f             	and    eax,0x1f
c0003996:	83 f8 08             	cmp    eax,0x8
c0003999:	0f 94 c0             	sete   al
c000399c:	0f b6 c0             	movzx  eax,al
c000399f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00039a3:	75 6b                	jne    c0003a10 <dir_read+0x139>
c00039a5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00039aa:	75 44                	jne    c00039f0 <dir_read+0x119>
c00039ac:	f6 c1 40             	test   cl,0x40
c00039af:	74 12                	je     c00039c3 <dir_read+0xec>
c00039b1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039b4:	83 e1 bf             	and    ecx,0xffffffbf
c00039b7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039be:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039c1:	eb 06                	jmp    c00039c9 <dir_read+0xf2>
c00039c3:	89 f0                	mov    eax,esi
c00039c5:	38 c8                	cmp    al,cl
c00039c7:	75 47                	jne    c0003a10 <dir_read+0x139>
c00039c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039d2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039d5:	75 3e                	jne    c0003a15 <dir_read+0x13e>
c00039d7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039db:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039de:	e8 8a e4 ff ff       	call   c0001e6d <pick_lfn>
c00039e3:	85 c0                	test   eax,eax
c00039e5:	74 2e                	je     c0003a15 <dir_read+0x13e>
c00039e7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039eb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039ee:	eb 25                	jmp    c0003a15 <dir_read+0x13e>
c00039f0:	89 f0                	mov    eax,esi
c00039f2:	84 c0                	test   al,al
c00039f4:	75 11                	jne    c0003a07 <dir_read+0x130>
c00039f6:	89 d0                	mov    eax,edx
c00039f8:	e8 2a e6 ff ff       	call   c0002027 <sum_sfn>
c00039fd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003a01:	0f 84 31 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a07:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003a0e:	eb 37                	jmp    c0003a47 <dir_read+0x170>
c0003a10:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a15:	31 d2                	xor    edx,edx
c0003a17:	89 d8                	mov    eax,ebx
c0003a19:	e8 01 fc ff ff       	call   c000361f <dir_next>
c0003a1e:	89 c5                	mov    ebp,eax
c0003a20:	85 c0                	test   eax,eax
c0003a22:	0f 84 cd fe ff ff    	je     c00038f5 <dir_read+0x1e>
c0003a28:	eb 0f                	jmp    c0003a39 <dir_read+0x162>
c0003a2a:	85 ed                	test   ebp,ebp
c0003a2c:	0f 84 06 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a32:	eb 05                	jmp    c0003a39 <dir_read+0x162>
c0003a34:	bd 04 00 00 00       	mov    ebp,0x4
c0003a39:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a47:	83 c4 1c             	add    esp,0x1c
c0003a4a:	89 e8                	mov    eax,ebp
c0003a4c:	5b                   	pop    ebx
c0003a4d:	5e                   	pop    esi
c0003a4e:	5f                   	pop    edi
c0003a4f:	5d                   	pop    ebp
c0003a50:	c3                   	ret    

c0003a51 <dir_alloc>:
c0003a51:	55                   	push   ebp
c0003a52:	89 d5                	mov    ebp,edx
c0003a54:	57                   	push   edi
c0003a55:	31 d2                	xor    edx,edx
c0003a57:	56                   	push   esi
c0003a58:	53                   	push   ebx
c0003a59:	89 c3                	mov    ebx,eax
c0003a5b:	83 ec 0c             	sub    esp,0xc
c0003a5e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a60:	e8 62 f6 ff ff       	call   c00030c7 <dir_sdi>
c0003a65:	85 c0                	test   eax,eax
c0003a67:	75 4e                	jne    c0003ab7 <dir_alloc+0x66>
c0003a69:	31 f6                	xor    esi,esi
c0003a6b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a71:	89 f8                	mov    eax,edi
c0003a73:	e8 d1 e8 ff ff       	call   c0002349 <move_window>
c0003a78:	85 c0                	test   eax,eax
c0003a7a:	75 3b                	jne    c0003ab7 <dir_alloc+0x66>
c0003a7c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a82:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a84:	75 07                	jne    c0003a8d <dir_alloc+0x3c>
c0003a86:	f7 d2                	not    edx
c0003a88:	c0 ea 07             	shr    dl,0x7
c0003a8b:	eb 0d                	jmp    c0003a9a <dir_alloc+0x49>
c0003a8d:	84 d2                	test   dl,dl
c0003a8f:	0f 94 c1             	sete   cl
c0003a92:	80 fa e5             	cmp    dl,0xe5
c0003a95:	0f 94 c2             	sete   dl
c0003a98:	09 ca                	or     edx,ecx
c0003a9a:	84 d2                	test   dl,dl
c0003a9c:	74 07                	je     c0003aa5 <dir_alloc+0x54>
c0003a9e:	46                   	inc    esi
c0003a9f:	39 ee                	cmp    esi,ebp
c0003aa1:	75 04                	jne    c0003aa7 <dir_alloc+0x56>
c0003aa3:	eb 1c                	jmp    c0003ac1 <dir_alloc+0x70>
c0003aa5:	31 f6                	xor    esi,esi
c0003aa7:	ba 01 00 00 00       	mov    edx,0x1
c0003aac:	89 d8                	mov    eax,ebx
c0003aae:	e8 6c fb ff ff       	call   c000361f <dir_next>
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	74 b4                	je     c0003a6b <dir_alloc+0x1a>
c0003ab7:	83 f8 04             	cmp    eax,0x4
c0003aba:	75 05                	jne    c0003ac1 <dir_alloc+0x70>
c0003abc:	b8 07 00 00 00       	mov    eax,0x7
c0003ac1:	83 c4 0c             	add    esp,0xc
c0003ac4:	5b                   	pop    ebx
c0003ac5:	5e                   	pop    esi
c0003ac6:	5f                   	pop    edi
c0003ac7:	5d                   	pop    ebp
c0003ac8:	c3                   	ret    

c0003ac9 <store_xdir>:
c0003ac9:	55                   	push   ebp
c0003aca:	57                   	push   edi
c0003acb:	89 c7                	mov    edi,eax
c0003acd:	56                   	push   esi
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 0c             	sub    esp,0xc
c0003ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ad4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ad7:	89 e8                	mov    eax,ebp
c0003ad9:	e8 5b e5 ff ff       	call   c0002039 <xdir_sum>
c0003ade:	0f b7 d0             	movzx  edx,ax
c0003ae1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ae4:	e8 f4 e0 ff ff       	call   c0001bdd <st_word>
c0003ae9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003aed:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003af0:	89 f8                	mov    eax,edi
c0003af2:	e8 d0 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003af7:	89 c6                	mov    esi,eax
c0003af9:	85 f6                	test   esi,esi
c0003afb:	75 3d                	jne    c0003b3a <store_xdir+0x71>
c0003afd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003b00:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003b03:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b05:	e8 3f e8 ff ff       	call   c0002349 <move_window>
c0003b0a:	89 c6                	mov    esi,eax
c0003b0c:	85 c0                	test   eax,eax
c0003b0e:	75 2a                	jne    c0003b3a <store_xdir+0x71>
c0003b10:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b13:	b9 20 00 00 00       	mov    ecx,0x20
c0003b18:	89 ea                	mov    edx,ebp
c0003b1a:	e8 cb e0 ff ff       	call   c0001bea <mem_cpy>
c0003b1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b27:	74 11                	je     c0003b3a <store_xdir+0x71>
c0003b29:	31 d2                	xor    edx,edx
c0003b2b:	89 f8                	mov    eax,edi
c0003b2d:	83 c5 20             	add    ebp,0x20
c0003b30:	e8 ea fa ff ff       	call   c000361f <dir_next>
c0003b35:	4b                   	dec    ebx
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	eb bf                	jmp    c0003af9 <store_xdir+0x30>
c0003b3a:	89 f0                	mov    eax,esi
c0003b3c:	83 fe 02             	cmp    esi,0x2
c0003b3f:	76 05                	jbe    c0003b46 <store_xdir+0x7d>
c0003b41:	b8 02 00 00 00       	mov    eax,0x2
c0003b46:	83 c4 0c             	add    esp,0xc
c0003b49:	5b                   	pop    ebx
c0003b4a:	5e                   	pop    esi
c0003b4b:	5f                   	pop    edi
c0003b4c:	5d                   	pop    ebp
c0003b4d:	c3                   	ret    

c0003b4e <dir_remove>:
c0003b4e:	57                   	push   edi
c0003b4f:	56                   	push   esi
c0003b50:	53                   	push   ebx
c0003b51:	89 c3                	mov    ebx,eax
c0003b53:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b56:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b58:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b5b:	83 fa ff             	cmp    edx,0xffffffff
c0003b5e:	74 09                	je     c0003b69 <dir_remove+0x1b>
c0003b60:	e8 62 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003b65:	85 c0                	test   eax,eax
c0003b67:	75 41                	jne    c0003baa <dir_remove+0x5c>
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f0                	mov    eax,esi
c0003b71:	e8 d3 e7 ff ff       	call   c0002349 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 26                	jne    c0003ba0 <dir_remove+0x52>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b80:	75 05                	jne    c0003b87 <dir_remove+0x39>
c0003b82:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b85:	eb 03                	jmp    c0003b8a <dir_remove+0x3c>
c0003b87:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b8e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b91:	73 17                	jae    c0003baa <dir_remove+0x5c>
c0003b93:	31 d2                	xor    edx,edx
c0003b95:	89 d8                	mov    eax,ebx
c0003b97:	e8 83 fa ff ff       	call   c000361f <dir_next>
c0003b9c:	85 c0                	test   eax,eax
c0003b9e:	74 c9                	je     c0003b69 <dir_remove+0x1b>
c0003ba0:	83 f8 04             	cmp    eax,0x4
c0003ba3:	75 05                	jne    c0003baa <dir_remove+0x5c>
c0003ba5:	b8 02 00 00 00       	mov    eax,0x2
c0003baa:	5b                   	pop    ebx
c0003bab:	5e                   	pop    esi
c0003bac:	5f                   	pop    edi
c0003bad:	c3                   	ret    

c0003bae <create_name>:
c0003bae:	55                   	push   ebp
c0003baf:	89 d5                	mov    ebp,edx
c0003bb1:	57                   	push   edi
c0003bb2:	89 c7                	mov    edi,eax
c0003bb4:	56                   	push   esi
c0003bb5:	31 f6                	xor    esi,esi
c0003bb7:	53                   	push   ebx
c0003bb8:	83 ec 3c             	sub    esp,0x3c
c0003bbb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bc1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bce:	e8 72 e0 ff ff       	call   c0001c45 <tchar2uni>
c0003bd3:	89 c3                	mov    ebx,eax
c0003bd5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bd8:	75 0a                	jne    c0003be4 <create_name+0x36>
c0003bda:	b8 06 00 00 00       	mov    eax,0x6
c0003bdf:	e9 9e 02 00 00       	jmp    c0003e82 <create_name+0x2d4>
c0003be4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003be9:	76 0c                	jbe    c0003bf7 <create_name+0x49>
c0003beb:	c1 e8 10             	shr    eax,0x10
c0003bee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bf2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bf6:	46                   	inc    esi
c0003bf7:	66 83 fb 1f          	cmp    bx,0x1f
c0003bfb:	76 4f                	jbe    c0003c4c <create_name+0x9e>
c0003bfd:	66 83 fb 5c          	cmp    bx,0x5c
c0003c01:	74 35                	je     c0003c38 <create_name+0x8a>
c0003c03:	66 83 fb 2f          	cmp    bx,0x2f
c0003c07:	74 2f                	je     c0003c38 <create_name+0x8a>
c0003c09:	66 83 fb 7f          	cmp    bx,0x7f
c0003c0d:	77 11                	ja     c0003c20 <create_name+0x72>
c0003c0f:	0f b7 d3             	movzx  edx,bx
c0003c12:	b8 f2 40 02 c0       	mov    eax,0xc00240f2
c0003c17:	e8 11 e0 ff ff       	call   c0001c2d <chk_chr>
c0003c1c:	85 c0                	test   eax,eax
c0003c1e:	75 ba                	jne    c0003bda <create_name+0x2c>
c0003c20:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c26:	77 b2                	ja     c0003bda <create_name+0x2c>
c0003c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c2c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c30:	46                   	inc    esi
c0003c31:	eb 97                	jmp    c0003bca <create_name+0x1c>
c0003c33:	40                   	inc    eax
c0003c34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c3e:	80 fa 2f             	cmp    dl,0x2f
c0003c41:	74 f0                	je     c0003c33 <create_name+0x85>
c0003c43:	80 fa 5c             	cmp    dl,0x5c
c0003c46:	74 eb                	je     c0003c33 <create_name+0x85>
c0003c48:	31 db                	xor    ebx,ebx
c0003c4a:	eb 02                	jmp    c0003c4e <create_name+0xa0>
c0003c4c:	b3 04                	mov    bl,0x4
c0003c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c52:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c55:	85 f6                	test   esi,esi
c0003c57:	74 18                	je     c0003c71 <create_name+0xc3>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c62:	66 83 f8 20          	cmp    ax,0x20
c0003c66:	74 06                	je     c0003c6e <create_name+0xc0>
c0003c68:	66 83 f8 2e          	cmp    ax,0x2e
c0003c6c:	75 03                	jne    c0003c71 <create_name+0xc3>
c0003c6e:	4e                   	dec    esi
c0003c6f:	eb e4                	jmp    c0003c55 <create_name+0xa7>
c0003c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c75:	31 ed                	xor    ebp,ebp
c0003c77:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c7d:	85 f6                	test   esi,esi
c0003c7f:	0f 84 55 ff ff ff    	je     c0003bda <create_name+0x2c>
c0003c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c89:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c8c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c90:	66 83 f8 20          	cmp    ax,0x20
c0003c94:	75 04                	jne    c0003c9a <create_name+0xec>
c0003c96:	89 d5                	mov    ebp,edx
c0003c98:	eb eb                	jmp    c0003c85 <create_name+0xd7>
c0003c9a:	85 ed                	test   ebp,ebp
c0003c9c:	75 06                	jne    c0003ca4 <create_name+0xf6>
c0003c9e:	66 83 f8 2e          	cmp    ax,0x2e
c0003ca2:	75 08                	jne    c0003cac <create_name+0xfe>
c0003ca4:	83 cb 03             	or     ebx,0x3
c0003ca7:	eb 03                	jmp    c0003cac <create_name+0xfe>
c0003ca9:	4e                   	dec    esi
c0003caa:	74 0c                	je     c0003cb8 <create_name+0x10a>
c0003cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cb0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003cb6:	75 f1                	jne    c0003ca9 <create_name+0xfb>
c0003cb8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cbd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cc0:	ba 20 00 00 00       	mov    edx,0x20
c0003cc5:	e8 35 df ff ff       	call   c0001bff <mem_set>
c0003cca:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cd2:	31 c9                	xor    ecx,ecx
c0003cd4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003ce8:	66 85 ed             	test   bp,bp
c0003ceb:	0f 84 30 01 00 00    	je     c0003e21 <create_name+0x273>
c0003cf1:	66 83 fd 20          	cmp    bp,0x20
c0003cf5:	74 10                	je     c0003d07 <create_name+0x159>
c0003cf7:	66 83 fd 2e          	cmp    bp,0x2e
c0003cfb:	75 13                	jne    c0003d10 <create_name+0x162>
c0003cfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d01:	0f 84 6b 01 00 00    	je     c0003e72 <create_name+0x2c4>
c0003d07:	83 cb 03             	or     ebx,0x3
c0003d0a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003d0e:	eb c9                	jmp    c0003cd9 <create_name+0x12b>
c0003d10:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d14:	73 0b                	jae    c0003d21 <create_name+0x173>
c0003d16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d1a:	75 47                	jne    c0003d63 <create_name+0x1b5>
c0003d1c:	e9 51 01 00 00       	jmp    c0003e72 <create_name+0x2c4>
c0003d21:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d26:	75 10                	jne    c0003d38 <create_name+0x18a>
c0003d28:	83 cb 03             	or     ebx,0x3
c0003d2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d33:	e9 e9 00 00 00       	jmp    c0003e21 <create_name+0x273>
c0003d38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d3c:	74 0d                	je     c0003d4b <create_name+0x19d>
c0003d3e:	83 cb 03             	or     ebx,0x3
c0003d41:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d45:	0f 87 d6 00 00 00    	ja     c0003e21 <create_name+0x273>
c0003d4b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d50:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d54:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d5c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d61:	eb a7                	jmp    c0003d0a <create_name+0x15c>
c0003d63:	66 83 fd 7f          	cmp    bp,0x7f
c0003d67:	76 68                	jbe    c0003dd1 <create_name+0x223>
c0003d69:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d6d:	88 da                	mov    dl,bl
c0003d6f:	83 ca 02             	or     edx,0x2
c0003d72:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d76:	50                   	push   eax
c0003d77:	50                   	push   eax
c0003d78:	68 b5 01 00 00       	push   0x1b5
c0003d7d:	55                   	push   ebp
c0003d7e:	e8 81 48 00 00       	call   c0008604 <ff_uni2oem>
c0003d83:	83 c4 10             	add    esp,0x10
c0003d86:	89 c5                	mov    ebp,eax
c0003d88:	a8 80                	test   al,0x80
c0003d8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d92:	74 0c                	je     c0003da0 <create_name+0x1f2>
c0003d94:	83 e5 7f             	and    ebp,0x7f
c0003d97:	0f b6 ad 40 40 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdbfc0]
c0003d9e:	eb 2a                	jmp    c0003dca <create_name+0x21c>
c0003da0:	66 3d ff 00          	cmp    ax,0xff
c0003da4:	76 24                	jbe    c0003dca <create_name+0x21c>
c0003da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003daa:	48                   	dec    eax
c0003dab:	39 c8                	cmp    eax,ecx
c0003dad:	77 0c                	ja     c0003dbb <create_name+0x20d>
c0003daf:	83 cb 03             	or     ebx,0x3
c0003db2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003db6:	e9 4f ff ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003dbb:	89 e8                	mov    eax,ebp
c0003dbd:	88 d3                	mov    bl,dl
c0003dbf:	66 c1 e8 08          	shr    ax,0x8
c0003dc3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003dc7:	41                   	inc    ecx
c0003dc8:	eb 4b                	jmp    c0003e15 <create_name+0x267>
c0003dca:	88 d3                	mov    bl,dl
c0003dcc:	66 85 ed             	test   bp,bp
c0003dcf:	74 19                	je     c0003dea <create_name+0x23c>
c0003dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dd5:	0f b7 d5             	movzx  edx,bp
c0003dd8:	b8 fb 40 02 c0       	mov    eax,0xc00240fb
c0003ddd:	e8 4b de ff ff       	call   c0001c2d <chk_chr>
c0003de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003de6:	85 c0                	test   eax,eax
c0003de8:	74 0a                	je     c0003df4 <create_name+0x246>
c0003dea:	83 cb 03             	or     ebx,0x3
c0003ded:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003df2:	eb 21                	jmp    c0003e15 <create_name+0x267>
c0003df4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 07                	ja     c0003e04 <create_name+0x256>
c0003dfd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003e02:	eb 11                	jmp    c0003e15 <create_name+0x267>
c0003e04:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003e07:	66 83 f8 19          	cmp    ax,0x19
c0003e0b:	77 08                	ja     c0003e15 <create_name+0x267>
c0003e0d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e12:	83 ed 20             	sub    ebp,0x20
c0003e15:	89 e8                	mov    eax,ebp
c0003e17:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e1b:	41                   	inc    ecx
c0003e1c:	e9 e9 fe ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003e21:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e25:	75 04                	jne    c0003e2b <create_name+0x27d>
c0003e27:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e2b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e30:	75 05                	jne    c0003e37 <create_name+0x289>
c0003e32:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e3b:	83 e0 0c             	and    eax,0xc
c0003e3e:	3c 0c                	cmp    al,0xc
c0003e40:	74 0b                	je     c0003e4d <create_name+0x29f>
c0003e42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e46:	83 e0 03             	and    eax,0x3
c0003e49:	3c 03                	cmp    al,0x3
c0003e4b:	75 05                	jne    c0003e52 <create_name+0x2a4>
c0003e4d:	83 cb 02             	or     ebx,0x2
c0003e50:	eb 19                	jmp    c0003e6b <create_name+0x2bd>
c0003e52:	f6 c3 02             	test   bl,0x2
c0003e55:	75 14                	jne    c0003e6b <create_name+0x2bd>
c0003e57:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e5c:	74 03                	je     c0003e61 <create_name+0x2b3>
c0003e5e:	83 cb 10             	or     ebx,0x10
c0003e61:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e66:	74 03                	je     c0003e6b <create_name+0x2bd>
c0003e68:	83 cb 08             	or     ebx,0x8
c0003e6b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e6e:	31 c0                	xor    eax,eax
c0003e70:	eb 10                	jmp    c0003e82 <create_name+0x2d4>
c0003e72:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e77:	0f 85 ce fe ff ff    	jne    c0003d4b <create_name+0x19d>
c0003e7d:	e9 a6 fe ff ff       	jmp    c0003d28 <create_name+0x17a>
c0003e82:	83 c4 3c             	add    esp,0x3c
c0003e85:	5b                   	pop    ebx
c0003e86:	5e                   	pop    esi
c0003e87:	5f                   	pop    edi
c0003e88:	5d                   	pop    ebp
c0003e89:	c3                   	ret    

c0003e8a <xname_sum>:
c0003e8a:	56                   	push   esi
c0003e8b:	53                   	push   ebx
c0003e8c:	89 c6                	mov    esi,eax
c0003e8e:	51                   	push   ecx
c0003e8f:	31 db                	xor    ebx,ebx
c0003e91:	83 c6 02             	add    esi,0x2
c0003e94:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e98:	66 85 c0             	test   ax,ax
c0003e9b:	74 1f                	je     c0003ebc <xname_sum+0x32>
c0003e9d:	83 ec 0c             	sub    esp,0xc
c0003ea0:	66 d1 cb             	ror    bx,1
c0003ea3:	50                   	push   eax
c0003ea4:	e8 67 48 00 00       	call   c0008710 <ff_wtoupper>
c0003ea9:	83 c4 10             	add    esp,0x10
c0003eac:	0f b6 d0             	movzx  edx,al
c0003eaf:	66 c1 e8 08          	shr    ax,0x8
c0003eb3:	01 d3                	add    ebx,edx
c0003eb5:	66 d1 cb             	ror    bx,1
c0003eb8:	01 c3                	add    ebx,eax
c0003eba:	eb d5                	jmp    c0003e91 <xname_sum+0x7>
c0003ebc:	89 d8                	mov    eax,ebx
c0003ebe:	5a                   	pop    edx
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	c3                   	ret    

c0003ec2 <create_xdir>:
c0003ec2:	55                   	push   ebp
c0003ec3:	b9 40 00 00 00       	mov    ecx,0x40
c0003ec8:	57                   	push   edi
c0003ec9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ece:	56                   	push   esi
c0003ecf:	31 ff                	xor    edi,edi
c0003ed1:	53                   	push   ebx
c0003ed2:	be 40 00 00 00       	mov    esi,0x40
c0003ed7:	89 c3                	mov    ebx,eax
c0003ed9:	83 ec 1c             	sub    esp,0x1c
c0003edc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ee0:	31 d2                	xor    edx,edx
c0003ee2:	e8 18 dd ff ff       	call   c0001bff <mem_set>
c0003ee7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eea:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003eee:	31 c9                	xor    ecx,ecx
c0003ef0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ef3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ef7:	83 c6 02             	add    esi,0x2
c0003efa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003efe:	66 85 ed             	test   bp,bp
c0003f01:	74 12                	je     c0003f15 <create_xdir+0x53>
c0003f03:	0f b6 c1             	movzx  eax,cl
c0003f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f0a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003f0e:	66 83 fd 01          	cmp    bp,0x1
c0003f12:	80 d9 ff             	sbb    cl,0xff
c0003f15:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f18:	0f b7 d5             	movzx  edx,bp
c0003f1b:	83 c6 02             	add    esi,0x2
c0003f1e:	e8 ba dc ff ff       	call   c0001bdd <st_word>
c0003f23:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f29:	75 d3                	jne    c0003efe <create_xdir+0x3c>
c0003f2b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f36:	0f b6 c1             	movzx  eax,cl
c0003f39:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f3e:	74 07                	je     c0003f47 <create_xdir+0x85>
c0003f40:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f45:	eb a9                	jmp    c0003ef0 <create_xdir+0x2e>
c0003f47:	8d 47 02             	lea    eax,[edi+0x2]
c0003f4a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f4d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f50:	89 d0                	mov    eax,edx
c0003f52:	e8 33 ff ff ff       	call   c0003e8a <xname_sum>
c0003f57:	83 c4 1c             	add    esp,0x1c
c0003f5a:	0f b7 d0             	movzx  edx,ax
c0003f5d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f60:	5b                   	pop    ebx
c0003f61:	5e                   	pop    esi
c0003f62:	5f                   	pop    edi
c0003f63:	5d                   	pop    ebp
c0003f64:	e9 74 dc ff ff       	jmp    c0001bdd <st_word>

c0003f69 <cmp_lfn>:
c0003f69:	55                   	push   ebp
c0003f6a:	57                   	push   edi
c0003f6b:	89 d7                	mov    edi,edx
c0003f6d:	56                   	push   esi
c0003f6e:	53                   	push   ebx
c0003f6f:	83 ec 1c             	sub    esp,0x1c
c0003f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f79:	e8 ed db ff ff       	call   c0001b6b <ld_word>
c0003f7e:	66 85 c0             	test   ax,ax
c0003f81:	74 07                	je     c0003f8a <cmp_lfn+0x21>
c0003f83:	31 c0                	xor    eax,eax
c0003f85:	e9 9a 00 00 00       	jmp    c0004024 <cmp_lfn+0xbb>
c0003f8a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f8c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f91:	83 e3 3f             	and    ebx,0x3f
c0003f94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f9c:	4b                   	dec    ebx
c0003f9d:	6b db 0d             	imul   ebx,ebx,0xd
c0003fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fa4:	0f b6 80 c0 40 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdbf40]
c0003fab:	01 f8                	add    eax,edi
c0003fad:	e8 b9 db ff ff       	call   c0001b6b <ld_word>
c0003fb2:	66 85 ed             	test   bp,bp
c0003fb5:	89 c6                	mov    esi,eax
c0003fb7:	74 3c                	je     c0003ff5 <cmp_lfn+0x8c>
c0003fb9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fbf:	77 c2                	ja     c0003f83 <cmp_lfn+0x1a>
c0003fc1:	83 ec 0c             	sub    esp,0xc
c0003fc4:	0f b7 c0             	movzx  eax,ax
c0003fc7:	50                   	push   eax
c0003fc8:	e8 43 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fcd:	89 c5                	mov    ebp,eax
c0003fcf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fda:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe1:	e8 2a 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fe6:	83 c4 10             	add    esp,0x10
c0003fe9:	39 c5                	cmp    ebp,eax
c0003feb:	75 96                	jne    c0003f83 <cmp_lfn+0x1a>
c0003fed:	89 f5                	mov    ebp,esi
c0003fef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ff3:	eb 04                	jmp    c0003ff9 <cmp_lfn+0x90>
c0003ff5:	66 46                	inc    si
c0003ff7:	75 8a                	jne    c0003f83 <cmp_lfn+0x1a>
c0003ff9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ffd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004002:	75 9c                	jne    c0003fa0 <cmp_lfn+0x37>
c0004004:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004007:	74 16                	je     c000401f <cmp_lfn+0xb6>
c0004009:	66 85 ed             	test   bp,bp
c000400c:	74 11                	je     c000401f <cmp_lfn+0xb6>
c000400e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004012:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004017:	0f 94 c0             	sete   al
c000401a:	0f b6 c0             	movzx  eax,al
c000401d:	eb 05                	jmp    c0004024 <cmp_lfn+0xbb>
c000401f:	b8 01 00 00 00       	mov    eax,0x1
c0004024:	83 c4 1c             	add    esp,0x1c
c0004027:	5b                   	pop    ebx
c0004028:	5e                   	pop    esi
c0004029:	5f                   	pop    edi
c000402a:	5d                   	pop    ebp
c000402b:	c3                   	ret    

c000402c <dir_find>:
c000402c:	55                   	push   ebp
c000402d:	31 d2                	xor    edx,edx
c000402f:	57                   	push   edi
c0004030:	56                   	push   esi
c0004031:	53                   	push   ebx
c0004032:	89 c3                	mov    ebx,eax
c0004034:	83 ec 1c             	sub    esp,0x1c
c0004037:	8b 30                	mov    esi,DWORD PTR [eax]
c0004039:	e8 89 f0 ff ff       	call   c00030c7 <dir_sdi>
c000403e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004041:	85 c0                	test   eax,eax
c0004043:	0f 85 9e 01 00 00    	jne    c00041e7 <dir_find+0x1bb>
c0004049:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000404c:	0f 85 8d 00 00 00    	jne    c00040df <dir_find+0xb3>
c0004052:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004055:	e8 30 fe ff ff       	call   c0003e8a <xname_sum>
c000405a:	89 c7                	mov    edi,eax
c000405c:	31 d2                	xor    edx,edx
c000405e:	89 d8                	mov    eax,ebx
c0004060:	e8 72 f8 ff ff       	call   c00038d7 <dir_read>
c0004065:	85 c0                	test   eax,eax
c0004067:	0f 85 5e 01 00 00    	jne    c00041cb <dir_find+0x19f>
c000406d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004070:	8d 41 24             	lea    eax,[ecx+0x24]
c0004073:	e8 f3 da ff ff       	call   c0001b6b <ld_word>
c0004078:	66 39 f8             	cmp    ax,di
c000407b:	75 df                	jne    c000405c <dir_find+0x30>
c000407d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004080:	31 ed                	xor    ebp,ebp
c0004082:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004086:	ba 40 00 00 00       	mov    edx,0x40
c000408b:	89 e9                	mov    ecx,ebp
c000408d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004091:	0f 84 42 01 00 00    	je     c00041d9 <dir_find+0x1ad>
c0004097:	f6 c2 1f             	test   dl,0x1f
c000409a:	75 03                	jne    c000409f <dir_find+0x73>
c000409c:	83 c2 02             	add    edx,0x2
c000409f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00040a3:	89 d0                	mov    eax,edx
c00040a5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00040a8:	e8 be da ff ff       	call   c0001b6b <ld_word>
c00040ad:	83 ec 0c             	sub    esp,0xc
c00040b0:	0f b7 c0             	movzx  eax,ax
c00040b3:	50                   	push   eax
c00040b4:	e8 57 46 00 00       	call   c0008710 <ff_wtoupper>
c00040b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040c0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040c7:	e8 44 46 00 00       	call   c0008710 <ff_wtoupper>
c00040cc:	83 c4 10             	add    esp,0x10
c00040cf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040d3:	75 87                	jne    c000405c <dir_find+0x30>
c00040d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040d9:	45                   	inc    ebp
c00040da:	83 c2 02             	add    edx,0x2
c00040dd:	eb ac                	jmp    c000408b <dir_find+0x5f>
c00040df:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040e6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040f6:	89 f0                	mov    eax,esi
c00040f8:	e8 4c e2 ff ff       	call   c0002349 <move_window>
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 c6 00 00 00    	jne    c00041cb <dir_find+0x19f>
c0004105:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004108:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000410b:	84 c9                	test   cl,cl
c000410d:	0f 84 bd 00 00 00    	je     c00041d0 <dir_find+0x1a4>
c0004113:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004116:	88 d0                	mov    al,dl
c0004118:	83 e0 3f             	and    eax,0x3f
c000411b:	80 f9 e5             	cmp    cl,0xe5
c000411e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004121:	0f 84 87 00 00 00    	je     c00041ae <dir_find+0x182>
c0004127:	80 e2 08             	and    dl,0x8
c000412a:	74 06                	je     c0004132 <dir_find+0x106>
c000412c:	3c 0f                	cmp    al,0xf
c000412e:	75 7e                	jne    c00041ae <dir_find+0x182>
c0004130:	eb 04                	jmp    c0004136 <dir_find+0x10a>
c0004132:	3c 0f                	cmp    al,0xf
c0004134:	75 4c                	jne    c0004182 <dir_find+0x156>
c0004136:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000413a:	75 7e                	jne    c00041ba <dir_find+0x18e>
c000413c:	f6 c1 40             	test   cl,0x40
c000413f:	74 12                	je     c0004153 <dir_find+0x127>
c0004141:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004144:	83 e1 bf             	and    ecx,0xffffffbf
c0004147:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000414b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000414e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004151:	eb 06                	jmp    c0004159 <dir_find+0x12d>
c0004153:	89 f8                	mov    eax,edi
c0004155:	38 c8                	cmp    al,cl
c0004157:	75 5c                	jne    c00041b5 <dir_find+0x189>
c0004159:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000415d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004162:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004165:	75 53                	jne    c00041ba <dir_find+0x18e>
c0004167:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000416b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416e:	89 ea                	mov    edx,ebp
c0004170:	e8 f4 fd ff ff       	call   c0003f69 <cmp_lfn>
c0004175:	85 c0                	test   eax,eax
c0004177:	74 41                	je     c00041ba <dir_find+0x18e>
c0004179:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000417d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004180:	eb 38                	jmp    c00041ba <dir_find+0x18e>
c0004182:	89 f8                	mov    eax,edi
c0004184:	84 c0                	test   al,al
c0004186:	75 0d                	jne    c0004195 <dir_find+0x169>
c0004188:	89 e8                	mov    eax,ebp
c000418a:	e8 98 de ff ff       	call   c0002027 <sum_sfn>
c000418f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004193:	74 52                	je     c00041e7 <dir_find+0x1bb>
c0004195:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004199:	75 13                	jne    c00041ae <dir_find+0x182>
c000419b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000419e:	b9 0b 00 00 00       	mov    ecx,0xb
c00041a3:	89 e8                	mov    eax,ebp
c00041a5:	e8 60 da ff ff       	call   c0001c0a <mem_cmp>
c00041aa:	85 c0                	test   eax,eax
c00041ac:	74 39                	je     c00041e7 <dir_find+0x1bb>
c00041ae:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041b5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ba:	31 d2                	xor    edx,edx
c00041bc:	89 d8                	mov    eax,ebx
c00041be:	e8 5c f4 ff ff       	call   c000361f <dir_next>
c00041c3:	85 c0                	test   eax,eax
c00041c5:	0f 84 25 ff ff ff    	je     c00040f0 <dir_find+0xc4>
c00041cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041ce:	eb 17                	jmp    c00041e7 <dir_find+0x1bb>
c00041d0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041d7:	eb 0e                	jmp    c00041e7 <dir_find+0x1bb>
c00041d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041dc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041e1:	0f 85 75 fe ff ff    	jne    c000405c <dir_find+0x30>
c00041e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041ea:	83 c4 1c             	add    esp,0x1c
c00041ed:	5b                   	pop    ebx
c00041ee:	5e                   	pop    esi
c00041ef:	5f                   	pop    edi
c00041f0:	5d                   	pop    ebp
c00041f1:	c3                   	ret    

c00041f2 <dir_register>:
c00041f2:	55                   	push   ebp
c00041f3:	57                   	push   edi
c00041f4:	56                   	push   esi
c00041f5:	be 06 00 00 00       	mov    esi,0x6
c00041fa:	53                   	push   ebx
c00041fb:	83 ec 6c             	sub    esp,0x6c
c00041fe:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004202:	0f 85 62 02 00 00    	jne    c000446a <dir_register+0x278>
c0004208:	8b 28                	mov    ebp,DWORD PTR [eax]
c000420a:	31 ff                	xor    edi,edi
c000420c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000420f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004214:	74 03                	je     c0004219 <dir_register+0x27>
c0004216:	47                   	inc    edi
c0004217:	eb f6                	jmp    c000420f <dir_register+0x1d>
c0004219:	89 c3                	mov    ebx,eax
c000421b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000421f:	0f 85 e1 00 00 00    	jne    c0004306 <dir_register+0x114>
c0004225:	83 c7 0e             	add    edi,0xe
c0004228:	b9 0f 00 00 00       	mov    ecx,0xf
c000422d:	89 f8                	mov    eax,edi
c000422f:	31 d2                	xor    edx,edx
c0004231:	f7 f1                	div    ecx
c0004233:	8d 50 02             	lea    edx,[eax+0x2]
c0004236:	89 c7                	mov    edi,eax
c0004238:	89 d8                	mov    eax,ebx
c000423a:	e8 12 f8 ff ff       	call   c0003a51 <dir_alloc>
c000423f:	89 c6                	mov    esi,eax
c0004241:	85 c0                	test   eax,eax
c0004243:	0f 85 21 02 00 00    	jne    c000446a <dir_register+0x278>
c0004249:	81 c7 01 00 00 08    	add    edi,0x8000001
c000424f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004252:	c1 e7 05             	shl    edi,0x5
c0004255:	29 f8                	sub    eax,edi
c0004257:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000425a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000425d:	a8 04                	test   al,0x4
c000425f:	0f 84 91 00 00 00    	je     c00042f6 <dir_register+0x104>
c0004265:	83 e0 fb             	and    eax,0xfffffffb
c0004268:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000426b:	89 d8                	mov    eax,ebx
c000426d:	e8 25 ec ff ff       	call   c0002e97 <fill_first_frag>
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 ee 01 00 00    	jne    c0004468 <dir_register+0x276>
c000427a:	83 c9 ff             	or     ecx,0xffffffff
c000427d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004280:	89 d8                	mov    eax,ebx
c0004282:	e8 db eb ff ff       	call   c0002e62 <fill_last_frag>
c0004287:	85 c0                	test   eax,eax
c0004289:	0f 85 d9 01 00 00    	jne    c0004468 <dir_register+0x276>
c000428f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004293:	74 61                	je     c00042f6 <dir_register+0x104>
c0004295:	89 da                	mov    edx,ebx
c0004297:	8d 44 24 14          	lea    eax,[esp+0x14]
c000429b:	e8 ea f5 ff ff       	call   c000388a <load_obj_xdir>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	0f 85 c0 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042a8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00042ac:	31 c9                	xor    ecx,ecx
c00042ae:	c1 e2 09             	shl    edx,0x9
c00042b1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042b4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042b7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042ba:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042c0:	83 c0 38             	add    eax,0x38
c00042c3:	e8 1c d9 ff ff       	call   c0001be4 <st_qword>
c00042c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042cb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042ce:	83 c0 28             	add    eax,0x28
c00042d1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042d4:	e8 0b d9 ff ff       	call   c0001be4 <st_qword>
c00042d9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042dc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042df:	83 c8 01             	or     eax,0x1
c00042e2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042e9:	e8 db f7 ff ff       	call   c0003ac9 <store_xdir>
c00042ee:	85 c0                	test   eax,eax
c00042f0:	0f 85 72 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042fc:	e8 c1 fb ff ff       	call   c0003ec2 <create_xdir>
c0004301:	e9 64 01 00 00       	jmp    c000446a <dir_register+0x278>
c0004306:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004309:	b9 0c 00 00 00       	mov    ecx,0xc
c000430e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004312:	89 c2                	mov    edx,eax
c0004314:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004318:	e8 cd d8 ff ff       	call   c0001bea <mem_cpy>
c000431d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004322:	74 58                	je     c000437c <dir_register+0x18a>
c0004324:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004328:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004330:	83 ec 0c             	sub    esp,0xc
c0004333:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000433a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000433e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004342:	e8 24 dc ff ff       	call   c0001f6b <gen_numname>
c0004347:	89 d8                	mov    eax,ebx
c0004349:	e8 de fc ff ff       	call   c000402c <dir_find>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	89 c6                	mov    esi,eax
c0004353:	85 c0                	test   eax,eax
c0004355:	75 15                	jne    c000436c <dir_register+0x17a>
c0004357:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000435b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004360:	75 ce                	jne    c0004330 <dir_register+0x13e>
c0004362:	be 07 00 00 00       	mov    esi,0x7
c0004367:	e9 fe 00 00 00       	jmp    c000446a <dir_register+0x278>
c000436c:	83 f8 04             	cmp    eax,0x4
c000436f:	0f 85 f5 00 00 00    	jne    c000446a <dir_register+0x278>
c0004375:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004379:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000437c:	b9 01 00 00 00       	mov    ecx,0x1
c0004381:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004386:	74 0f                	je     c0004397 <dir_register+0x1a5>
c0004388:	b9 0d 00 00 00       	mov    ecx,0xd
c000438d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004390:	31 d2                	xor    edx,edx
c0004392:	f7 f1                	div    ecx
c0004394:	8d 48 01             	lea    ecx,[eax+0x1]
c0004397:	89 ca                	mov    edx,ecx
c0004399:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439d:	89 d8                	mov    eax,ebx
c000439f:	e8 ad f6 ff ff       	call   c0003a51 <dir_alloc>
c00043a4:	89 c6                	mov    esi,eax
c00043a6:	85 c0                	test   eax,eax
c00043a8:	0f 85 bc 00 00 00    	jne    c000446a <dir_register+0x278>
c00043ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b2:	49                   	dec    ecx
c00043b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043b7:	74 6a                	je     c0004423 <dir_register+0x231>
c00043b9:	89 c8                	mov    eax,ecx
c00043bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043be:	c1 e0 05             	shl    eax,0x5
c00043c1:	29 c2                	sub    edx,eax
c00043c3:	89 d8                	mov    eax,ebx
c00043c5:	e8 fd ec ff ff       	call   c00030c7 <dir_sdi>
c00043ca:	89 c6                	mov    esi,eax
c00043cc:	85 c0                	test   eax,eax
c00043ce:	0f 85 96 00 00 00    	jne    c000446a <dir_register+0x278>
c00043d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043d8:	e8 4a dc ff ff       	call   c0002027 <sum_sfn>
c00043dd:	0f b6 f8             	movzx  edi,al
c00043e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043e6:	89 e8                	mov    eax,ebp
c00043e8:	e8 5c df ff ff       	call   c0002349 <move_window>
c00043ed:	89 c6                	mov    esi,eax
c00043ef:	85 c0                	test   eax,eax
c00043f1:	75 77                	jne    c000446a <dir_register+0x278>
c00043f3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043f8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043fb:	83 ec 0c             	sub    esp,0xc
c00043fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004401:	57                   	push   edi
c0004402:	e8 e0 da ff ff       	call   c0001ee7 <put_lfn>
c0004407:	31 d2                	xor    edx,edx
c0004409:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000440d:	89 d8                	mov    eax,ebx
c000440f:	e8 0b f2 ff ff       	call   c000361f <dir_next>
c0004414:	83 c4 10             	add    esp,0x10
c0004417:	89 c6                	mov    esi,eax
c0004419:	85 c0                	test   eax,eax
c000441b:	75 4d                	jne    c000446a <dir_register+0x278>
c000441d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004421:	75 bd                	jne    c00043e0 <dir_register+0x1ee>
c0004423:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004426:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004429:	89 e8                	mov    eax,ebp
c000442b:	e8 19 df ff ff       	call   c0002349 <move_window>
c0004430:	89 c6                	mov    esi,eax
c0004432:	85 c0                	test   eax,eax
c0004434:	75 34                	jne    c000446a <dir_register+0x278>
c0004436:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004439:	b9 20 00 00 00       	mov    ecx,0x20
c000443e:	31 d2                	xor    edx,edx
c0004440:	e8 ba d7 ff ff       	call   c0001bff <mem_set>
c0004445:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000444c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004451:	e8 94 d7 ff ff       	call   c0001bea <mem_cpy>
c0004456:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004459:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000445c:	83 e0 18             	and    eax,0x18
c000445f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004462:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004466:	eb 02                	jmp    c000446a <dir_register+0x278>
c0004468:	89 c6                	mov    esi,eax
c000446a:	83 c4 6c             	add    esp,0x6c
c000446d:	89 f0                	mov    eax,esi
c000446f:	5b                   	pop    ebx
c0004470:	5e                   	pop    esi
c0004471:	5f                   	pop    edi
c0004472:	5d                   	pop    ebp
c0004473:	c3                   	ret    

c0004474 <sync_fs>:
c0004474:	56                   	push   esi
c0004475:	53                   	push   ebx
c0004476:	53                   	push   ebx
c0004477:	89 c3                	mov    ebx,eax
c0004479:	e8 37 de ff ff       	call   c00022b5 <sync_window>
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 b1 00 00 00    	jne    c0004537 <sync_fs+0xc3>
c0004486:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004489:	0f 85 8e 00 00 00    	jne    c000451d <sync_fs+0xa9>
c000448f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004493:	0f 85 84 00 00 00    	jne    c000451d <sync_fs+0xa9>
c0004499:	b9 00 02 00 00       	mov    ecx,0x200
c000449e:	8d 73 54             	lea    esi,[ebx+0x54]
c00044a1:	31 d2                	xor    edx,edx
c00044a3:	89 f0                	mov    eax,esi
c00044a5:	e8 55 d7 ff ff       	call   c0001bff <mem_set>
c00044aa:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044b5:	e8 23 d7 ff ff       	call   c0001bdd <st_word>
c00044ba:	ba 52 52 61 41       	mov    edx,0x41615252
c00044bf:	89 f0                	mov    eax,esi
c00044c1:	e8 1b d7 ff ff       	call   c0001be1 <st_dword>
c00044c6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044cc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044d1:	e8 0b d7 ff ff       	call   c0001be1 <st_dword>
c00044d6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044d9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044df:	e8 fd d6 ff ff       	call   c0001be1 <st_dword>
c00044e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044e7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044ed:	e8 ef d6 ff ff       	call   c0001be1 <st_dword>
c00044f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044f8:	83 c0 01             	add    eax,0x1
c00044fb:	83 d2 00             	adc    edx,0x0
c00044fe:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004501:	83 ec 0c             	sub    esp,0xc
c0004504:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004507:	6a 01                	push   0x1
c0004509:	52                   	push   edx
c000450a:	50                   	push   eax
c000450b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000450f:	56                   	push   esi
c0004510:	50                   	push   eax
c0004511:	e8 20 d6 ff ff       	call   c0001b36 <disk_write>
c0004516:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000451a:	83 c4 20             	add    esp,0x20
c000451d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004521:	51                   	push   ecx
c0004522:	6a 00                	push   0x0
c0004524:	6a 00                	push   0x0
c0004526:	50                   	push   eax
c0004527:	e8 20 d6 ff ff       	call   c0001b4c <disk_ioctl>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	85 c0                	test   eax,eax
c0004531:	0f 95 c0             	setne  al
c0004534:	0f b6 c0             	movzx  eax,al
c0004537:	5a                   	pop    edx
c0004538:	5b                   	pop    ebx
c0004539:	5e                   	pop    esi
c000453a:	c3                   	ret    

c000453b <create_partition>:
c000453b:	55                   	push   ebp
c000453c:	0f b6 c0             	movzx  eax,al
c000453f:	57                   	push   edi
c0004540:	56                   	push   esi
c0004541:	53                   	push   ebx
c0004542:	83 ec 60             	sub    esp,0x60
c0004545:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004549:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000454d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004551:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004555:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004559:	50                   	push   eax
c000455a:	6a 01                	push   0x1
c000455c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004560:	e8 e7 d5 ff ff       	call   c0001b4c <disk_ioctl>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	85 c0                	test   eax,eax
c000456a:	74 0a                	je     c0004576 <create_partition+0x3b>
c000456c:	b8 01 00 00 00       	mov    eax,0x1
c0004571:	e9 67 05 00 00       	jmp    c0004add <create_partition+0x5a2>
c0004576:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000457a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000457e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004582:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004586:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000458b:	0f 86 ed 03 00 00    	jbe    c000497e <create_partition+0x443>
c0004591:	83 c0 df             	add    eax,0xffffffdf
c0004594:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000459c:	83 d2 ff             	adc    edx,0xffffffff
c000459f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00045a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00045a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00045af:	83 c0 bd             	add    eax,0xffffffbd
c00045b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045b9:	83 d2 ff             	adc    edx,0xffffffff
c00045bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045cc:	be 22 00 00 00       	mov    esi,0x22
c00045d1:	31 ff                	xor    edi,edi
c00045d3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045db:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045e3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045ef:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f5:	75 0e                	jne    c0004605 <create_partition+0xca>
c00045f7:	b9 00 02 00 00       	mov    ecx,0x200
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	89 d8                	mov    eax,ebx
c0004600:	e8 fa d5 ff ff       	call   c0001bff <mem_set>
c0004605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004609:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000460d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004611:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004614:	0f 84 23 01 00 00    	je     c000473d <create_partition+0x202>
c000461a:	89 f0                	mov    eax,esi
c000461c:	89 fa                	mov    edx,edi
c000461e:	05 ff 07 00 00       	add    eax,0x7ff
c0004623:	83 d2 00             	adc    edx,0x0
c0004626:	89 c1                	mov    ecx,eax
c0004628:	89 d7                	mov    edi,edx
c000462a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004630:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004634:	89 ce                	mov    esi,ecx
c0004636:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000463a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000463e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004642:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004645:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004649:	89 04 24             	mov    DWORD PTR [esp],eax
c000464c:	b8 64 00 00 00       	mov    eax,0x64
c0004651:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004654:	b8 00 00 00 00       	mov    eax,0x0
c0004659:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000465d:	72 41                	jb     c00046a0 <create_partition+0x165>
c000465f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004667:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000466b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004670:	01 c1                	add    ecx,eax
c0004672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004676:	f7 24 24             	mul    DWORD PTR [esp]
c0004679:	6a 00                	push   0x0
c000467b:	01 ca                	add    edx,ecx
c000467d:	6a 64                	push   0x64
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	e8 4a e9 01 00       	call   c0022fd0 <__udivdi3>
c0004686:	83 c4 10             	add    esp,0x10
c0004689:	05 ff 07 00 00       	add    eax,0x7ff
c000468e:	83 d2 00             	adc    edx,0x0
c0004691:	89 c1                	mov    ecx,eax
c0004693:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004697:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000469d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00046a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00046a7:	01 f0                	add    eax,esi
c00046a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00046ad:	11 fa                	adc    edx,edi
c00046af:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046b3:	19 d1                	sbb    ecx,edx
c00046b5:	73 2e                	jae    c00046e5 <create_partition+0x1aa>
c00046b7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046bb:	89 f8                	mov    eax,edi
c00046bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046c4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046d0:	73 6b                	jae    c000473d <create_partition+0x202>
c00046d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046da:	29 f0                	sub    eax,esi
c00046dc:	19 fa                	sbb    edx,edi
c00046de:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	74 4f                	je     c000473d <create_partition+0x202>
c00046ee:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046f1:	b9 10 00 00 00       	mov    ecx,0x10
c00046f6:	ba d0 40 02 c0       	mov    edx,0xc00240d0
c00046fb:	e8 ea d4 ff ff       	call   c0001bea <mem_cpy>
c0004700:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004704:	b9 10 00 00 00       	mov    ecx,0x10
c0004709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000470d:	e8 2c db ff ff       	call   c000223e <make_rand>
c0004712:	89 f2                	mov    edx,esi
c0004714:	89 f9                	mov    ecx,edi
c0004716:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000471a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000471e:	e8 c1 d4 ff ff       	call   c0001be4 <st_qword>
c0004723:	03 34 24             	add    esi,DWORD PTR [esp]
c0004726:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000472a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000472e:	89 f2                	mov    edx,esi
c0004730:	89 f9                	mov    ecx,edi
c0004732:	83 c2 ff             	add    edx,0xffffffff
c0004735:	83 d1 ff             	adc    ecx,0xffffffff
c0004738:	e8 a7 d4 ff ff       	call   c0001be4 <st_qword>
c000473d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004741:	83 e8 80             	sub    eax,0xffffff80
c0004744:	89 c5                	mov    ebp,eax
c0004746:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000474a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004750:	75 6b                	jne    c00047bd <create_partition+0x282>
c0004752:	45                   	inc    ebp
c0004753:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004757:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000475c:	e8 39 da ff ff       	call   c000219a <crc32>
c0004761:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000476b:	75 e5                	jne    c0004752 <create_partition+0x217>
c000476d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004771:	31 d2                	xor    edx,edx
c0004773:	83 ec 0c             	sub    esp,0xc
c0004776:	c1 ed 09             	shr    ebp,0x9
c0004779:	6a 01                	push   0x1
c000477b:	8d 45 02             	lea    eax,[ebp+0x2]
c000477e:	52                   	push   edx
c000477f:	50                   	push   eax
c0004780:	53                   	push   ebx
c0004781:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004785:	e8 ac d3 ff ff       	call   c0001b36 <disk_write>
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	85 c0                	test   eax,eax
c000478f:	0f 85 d7 fd ff ff    	jne    c000456c <create_partition+0x31>
c0004795:	83 ec 0c             	sub    esp,0xc
c0004798:	31 d2                	xor    edx,edx
c000479a:	6a 01                	push   0x1
c000479c:	89 e8                	mov    eax,ebp
c000479e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00047a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00047a6:	52                   	push   edx
c00047a7:	50                   	push   eax
c00047a8:	53                   	push   ebx
c00047a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ad:	e8 84 d3 ff ff       	call   c0001b36 <disk_write>
c00047b2:	83 c4 20             	add    esp,0x20
c00047b5:	85 c0                	test   eax,eax
c00047b7:	0f 85 af fd ff ff    	jne    c000456c <create_partition+0x31>
c00047bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047c5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ca:	74 0d                	je     c00047d9 <create_partition+0x29e>
c00047cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047d4:	e9 12 fe ff ff       	jmp    c00045eb <create_partition+0xb0>
c00047d9:	31 d2                	xor    edx,edx
c00047db:	b9 00 02 00 00       	mov    ecx,0x200
c00047e0:	89 d8                	mov    eax,ebx
c00047e2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047e5:	e8 15 d4 ff ff       	call   c0001bff <mem_set>
c00047ea:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047ed:	b9 10 00 00 00       	mov    ecx,0x10
c00047f2:	ba c0 3f 02 c0       	mov    edx,0xc0023fc0
c00047f7:	89 d8                	mov    eax,ebx
c00047f9:	e8 ec d3 ff ff       	call   c0001bea <mem_cpy>
c00047fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004802:	8d 43 58             	lea    eax,[ebx+0x58]
c0004805:	f7 d2                	not    edx
c0004807:	e8 d5 d3 ff ff       	call   c0001be1 <st_dword>
c000480c:	8d 43 18             	lea    eax,[ebx+0x18]
c000480f:	31 c9                	xor    ecx,ecx
c0004811:	89 04 24             	mov    DWORD PTR [esp],eax
c0004814:	ba 01 00 00 00       	mov    edx,0x1
c0004819:	e8 c6 d3 ff ff       	call   c0001be4 <st_qword>
c000481e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004822:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004826:	83 c2 ff             	add    edx,0xffffffff
c0004829:	89 e8                	mov    eax,ebp
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 b1 d3 ff ff       	call   c0001be4 <st_qword>
c0004833:	31 c9                	xor    ecx,ecx
c0004835:	8d 43 28             	lea    eax,[ebx+0x28]
c0004838:	ba 22 00 00 00       	mov    edx,0x22
c000483d:	e8 a2 d3 ff ff       	call   c0001be4 <st_qword>
c0004842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004846:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000484a:	83 c2 de             	add    edx,0xffffffde
c000484d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004850:	83 d1 ff             	adc    ecx,0xffffffff
c0004853:	31 f6                	xor    esi,esi
c0004855:	e8 8a d3 ff ff       	call   c0001be4 <st_qword>
c000485a:	8d 43 54             	lea    eax,[ebx+0x54]
c000485d:	ba 80 00 00 00       	mov    edx,0x80
c0004862:	e8 7a d3 ff ff       	call   c0001be1 <st_dword>
c0004867:	8d 43 50             	lea    eax,[ebx+0x50]
c000486a:	ba 80 00 00 00       	mov    edx,0x80
c000486f:	e8 6d d3 ff ff       	call   c0001be1 <st_dword>
c0004874:	ba 02 00 00 00       	mov    edx,0x2
c0004879:	89 f8                	mov    eax,edi
c000487b:	e8 61 d3 ff ff       	call   c0001be1 <st_dword>
c0004880:	8d 53 38             	lea    edx,[ebx+0x38]
c0004883:	b9 10 00 00 00       	mov    ecx,0x10
c0004888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000488c:	e8 ad d9 ff ff       	call   c000223e <make_rand>
c0004891:	83 c8 ff             	or     eax,0xffffffff
c0004894:	46                   	inc    esi
c0004895:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000489a:	e8 fb d8 ff ff       	call   c000219a <crc32>
c000489f:	83 fe 5c             	cmp    esi,0x5c
c00048a2:	75 f0                	jne    c0004894 <create_partition+0x359>
c00048a4:	f7 d0                	not    eax
c00048a6:	8d 73 10             	lea    esi,[ebx+0x10]
c00048a9:	89 c2                	mov    edx,eax
c00048ab:	89 f0                	mov    eax,esi
c00048ad:	e8 2f d3 ff ff       	call   c0001be1 <st_dword>
c00048b2:	83 ec 0c             	sub    esp,0xc
c00048b5:	6a 01                	push   0x1
c00048b7:	6a 00                	push   0x0
c00048b9:	6a 01                	push   0x1
c00048bb:	53                   	push   ebx
c00048bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c0:	e8 71 d2 ff ff       	call   c0001b36 <disk_write>
c00048c5:	83 c4 20             	add    esp,0x20
c00048c8:	85 c0                	test   eax,eax
c00048ca:	0f 85 9c fc ff ff    	jne    c000456c <create_partition+0x31>
c00048d0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048d4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048d8:	83 c2 ff             	add    edx,0xffffffff
c00048db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048de:	83 d1 ff             	adc    ecx,0xffffffff
c00048e1:	e8 fe d2 ff ff       	call   c0001be4 <st_qword>
c00048e6:	ba 01 00 00 00       	mov    edx,0x1
c00048eb:	31 c9                	xor    ecx,ecx
c00048ed:	89 e8                	mov    eax,ebp
c00048ef:	e8 f0 d2 ff ff       	call   c0001be4 <st_qword>
c00048f4:	89 f8                	mov    eax,edi
c00048f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048fe:	31 ff                	xor    edi,edi
c0004900:	e8 df d2 ff ff       	call   c0001be4 <st_qword>
c0004905:	89 f0                	mov    eax,esi
c0004907:	31 d2                	xor    edx,edx
c0004909:	e8 d3 d2 ff ff       	call   c0001be1 <st_dword>
c000490e:	83 c8 ff             	or     eax,0xffffffff
c0004911:	47                   	inc    edi
c0004912:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004917:	e8 7e d8 ff ff       	call   c000219a <crc32>
c000491c:	83 ff 5c             	cmp    edi,0x5c
c000491f:	75 f0                	jne    c0004911 <create_partition+0x3d6>
c0004921:	f7 d0                	not    eax
c0004923:	89 c2                	mov    edx,eax
c0004925:	89 f0                	mov    eax,esi
c0004927:	e8 b5 d2 ff ff       	call   c0001be1 <st_dword>
c000492c:	83 ec 0c             	sub    esp,0xc
c000492f:	6a 01                	push   0x1
c0004931:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004935:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004939:	83 c0 ff             	add    eax,0xffffffff
c000493c:	83 d2 ff             	adc    edx,0xffffffff
c000493f:	52                   	push   edx
c0004940:	50                   	push   eax
c0004941:	53                   	push   ebx
c0004942:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004946:	e8 eb d1 ff ff       	call   c0001b36 <disk_write>
c000494b:	83 c4 20             	add    esp,0x20
c000494e:	85 c0                	test   eax,eax
c0004950:	0f 85 16 fc ff ff    	jne    c000456c <create_partition+0x31>
c0004956:	31 d2                	xor    edx,edx
c0004958:	89 d8                	mov    eax,ebx
c000495a:	b9 00 02 00 00       	mov    ecx,0x200
c000495f:	e8 9b d2 ff ff       	call   c0001bff <mem_set>
c0004964:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000496a:	b9 10 00 00 00       	mov    ecx,0x10
c000496f:	ba d0 3f 02 c0       	mov    edx,0xc0023fd0
c0004974:	e8 71 d2 ff ff       	call   c0001bea <mem_cpy>
c0004979:	e9 21 01 00 00       	jmp    c0004a9f <create_partition+0x564>
c000497e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004982:	b9 05 00 00 00       	mov    ecx,0x5
c0004987:	89 04 24             	mov    DWORD PTR [esp],eax
c000498a:	bf 08 00 00 00       	mov    edi,0x8
c000498f:	89 f8                	mov    eax,edi
c0004991:	31 d2                	xor    edx,edx
c0004993:	0f b6 f0             	movzx  esi,al
c0004996:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004999:	f7 f6                	div    esi
c000499b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00049a0:	76 0a                	jbe    c00049ac <create_partition+0x471>
c00049a2:	d1 e7                	shl    edi,1
c00049a4:	49                   	dec    ecx
c00049a5:	75 e8                	jne    c000498f <create_partition+0x454>
c00049a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00049ac:	b9 00 02 00 00       	mov    ecx,0x200
c00049b1:	31 d2                	xor    edx,edx
c00049b3:	89 d8                	mov    eax,ebx
c00049b5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049bb:	e8 3f d2 ff ff       	call   c0001bff <mem_set>
c00049c0:	b9 64 00 00 00       	mov    ecx,0x64
c00049c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049c8:	31 d2                	xor    edx,edx
c00049ca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049d2:	f7 f1                	div    ecx
c00049d4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049dd:	89 f8                	mov    eax,edi
c00049df:	0f b6 c0             	movzx  eax,al
c00049e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049e6:	e9 80 00 00 00       	jmp    c0004a6b <create_partition+0x530>
c00049eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ee:	29 cf                	sub    edi,ecx
c00049f0:	89 ca                	mov    edx,ecx
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049f9:	e8 e3 d1 ff ff       	call   c0001be1 <st_dword>
c00049fe:	8d 46 04             	lea    eax,[esi+0x4]
c0004a01:	89 fa                	mov    edx,edi
c0004a03:	83 c6 10             	add    esi,0x10
c0004a06:	e8 d6 d1 ff ff       	call   c0001be1 <st_dword>
c0004a0b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004a0f:	31 d2                	xor    edx,edx
c0004a11:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a14:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a18:	89 c8                	mov    eax,ecx
c0004a1a:	01 f9                	add    ecx,edi
c0004a1c:	f7 f5                	div    ebp
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	31 d2                	xor    edx,edx
c0004a22:	45                   	inc    ebp
c0004a23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a27:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a2a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a2d:	89 c2                	mov    edx,eax
c0004a2f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a32:	c1 ea 02             	shr    edx,0x2
c0004a35:	83 e2 c0             	and    edx,0xffffffc0
c0004a38:	09 ea                	or     edx,ebp
c0004a3a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a3f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a42:	31 d2                	xor    edx,edx
c0004a44:	f7 f5                	div    ebp
c0004a46:	89 d7                	mov    edi,edx
c0004a48:	31 d2                	xor    edx,edx
c0004a4a:	47                   	inc    edi
c0004a4b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a4f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a52:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a55:	89 c5                	mov    ebp,eax
c0004a57:	c1 ed 02             	shr    ebp,0x2
c0004a5a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a5d:	09 ef                	or     edi,ebp
c0004a5f:	89 fa                	mov    edx,edi
c0004a61:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a64:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a69:	74 34                	je     c0004a9f <create_partition+0x564>
c0004a6b:	85 c9                	test   ecx,ecx
c0004a6d:	74 30                	je     c0004a9f <create_partition+0x564>
c0004a6f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a72:	76 2b                	jbe    c0004a9f <create_partition+0x564>
c0004a74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a78:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a7c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a7f:	83 ff 64             	cmp    edi,0x64
c0004a82:	76 4b                	jbe    c0004acf <create_partition+0x594>
c0004a84:	89 f8                	mov    eax,edi
c0004a86:	01 c8                	add    eax,ecx
c0004a88:	0f 82 5d ff ff ff    	jb     c00049eb <create_partition+0x4b0>
c0004a8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a91:	0f 87 54 ff ff ff    	ja     c00049eb <create_partition+0x4b0>
c0004a97:	85 ff                	test   edi,edi
c0004a99:	0f 85 51 ff ff ff    	jne    c00049f0 <create_partition+0x4b5>
c0004a9f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004aa5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004aaa:	e8 2e d1 ff ff       	call   c0001bdd <st_word>
c0004aaf:	83 ec 0c             	sub    esp,0xc
c0004ab2:	6a 01                	push   0x1
c0004ab4:	6a 00                	push   0x0
c0004ab6:	6a 00                	push   0x0
c0004ab8:	53                   	push   ebx
c0004ab9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004abd:	e8 74 d0 ff ff       	call   c0001b36 <disk_write>
c0004ac2:	83 c4 20             	add    esp,0x20
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	0f 95 c0             	setne  al
c0004aca:	0f b6 c0             	movzx  eax,al
c0004acd:	eb 0e                	jmp    c0004add <create_partition+0x5a2>
c0004acf:	74 07                	je     c0004ad8 <create_partition+0x59d>
c0004ad1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ad6:	eb ac                	jmp    c0004a84 <create_partition+0x549>
c0004ad8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004adb:	eb a7                	jmp    c0004a84 <create_partition+0x549>
c0004add:	83 c4 5c             	add    esp,0x5c
c0004ae0:	5b                   	pop    ebx
c0004ae1:	5e                   	pop    esi
c0004ae2:	5f                   	pop    edi
c0004ae3:	5d                   	pop    ebp
c0004ae4:	c3                   	ret    

c0004ae5 <get_fileinfo>:
c0004ae5:	55                   	push   ebp
c0004ae6:	57                   	push   edi
c0004ae7:	56                   	push   esi
c0004ae8:	53                   	push   ebx
c0004ae9:	83 ec 1c             	sub    esp,0x1c
c0004aec:	8b 30                	mov    esi,DWORD PTR [eax]
c0004aee:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004af2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004af6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004af9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004afc:	0f 84 dc 01 00 00    	je     c0004cde <get_fileinfo+0x1f9>
c0004b02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004b05:	75 0f                	jne    c0004b16 <get_fileinfo+0x31>
c0004b07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004b0a:	83 c4 1c             	add    esp,0x1c
c0004b0d:	5b                   	pop    ebx
c0004b0e:	5e                   	pop    esi
c0004b0f:	5f                   	pop    edi
c0004b10:	5d                   	pop    ebp
c0004b11:	e9 58 d5 ff ff       	jmp    c000206e <get_xfileinfo>
c0004b16:	89 d3                	mov    ebx,edx
c0004b18:	89 c6                	mov    esi,eax
c0004b1a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b1e:	74 6a                	je     c0004b8a <get_fileinfo+0xa5>
c0004b20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b28:	31 ed                	xor    ebp,ebp
c0004b2a:	31 ff                	xor    edi,edi
c0004b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b37:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b3b:	66 85 d2             	test   dx,dx
c0004b3e:	74 3e                	je     c0004b7e <get_fileinfo+0x99>
c0004b40:	66 85 ed             	test   bp,bp
c0004b43:	75 0c                	jne    c0004b51 <get_fileinfo+0x6c>
c0004b45:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b4b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b4f:	76 22                	jbe    c0004b73 <get_fileinfo+0x8e>
c0004b51:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b56:	89 e8                	mov    eax,ebp
c0004b58:	29 f9                	sub    ecx,edi
c0004b5a:	c1 e0 10             	shl    eax,0x10
c0004b5d:	09 d0                	or     eax,edx
c0004b5f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b63:	e8 a3 d1 ff ff       	call   c0001d0b <put_utf>
c0004b68:	84 c0                	test   al,al
c0004b6a:	74 10                	je     c0004b7c <get_fileinfo+0x97>
c0004b6c:	0f b6 c0             	movzx  eax,al
c0004b6f:	31 d2                	xor    edx,edx
c0004b71:	01 c7                	add    edi,eax
c0004b73:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b78:	89 d5                	mov    ebp,edx
c0004b7a:	eb b0                	jmp    c0004b2c <get_fileinfo+0x47>
c0004b7c:	31 ff                	xor    edi,edi
c0004b7e:	66 85 ed             	test   bp,bp
c0004b81:	74 02                	je     c0004b85 <get_fileinfo+0xa0>
c0004b83:	31 ff                	xor    edi,edi
c0004b85:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b8a:	31 ff                	xor    edi,edi
c0004b8c:	31 c9                	xor    ecx,ecx
c0004b8e:	83 f9 0a             	cmp    ecx,0xa
c0004b91:	0f 87 ad 00 00 00    	ja     c0004c44 <get_fileinfo+0x15f>
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b9d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ba1:	66 83 fa 20          	cmp    dx,0x20
c0004ba5:	0f 84 92 00 00 00    	je     c0004c3d <get_fileinfo+0x158>
c0004bab:	66 83 fa 05          	cmp    dx,0x5
c0004baf:	75 05                	jne    c0004bb6 <get_fileinfo+0xd1>
c0004bb1:	ba e5 00 00 00       	mov    edx,0xe5
c0004bb6:	83 ff 0b             	cmp    edi,0xb
c0004bb9:	77 0b                	ja     c0004bc6 <get_fileinfo+0xe1>
c0004bbb:	83 fd 09             	cmp    ebp,0x9
c0004bbe:	75 06                	jne    c0004bc6 <get_fileinfo+0xe1>
c0004bc0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bc5:	47                   	inc    edi
c0004bc6:	0f b7 c2             	movzx  eax,dx
c0004bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bcd:	e8 6d d0 ff ff       	call   c0001c3f <dbc_1st>
c0004bd2:	85 c0                	test   eax,eax
c0004bd4:	74 2f                	je     c0004c05 <get_fileinfo+0x120>
c0004bd6:	83 fd 08             	cmp    ebp,0x8
c0004bd9:	74 2a                	je     c0004c05 <get_fileinfo+0x120>
c0004bdb:	83 fd 0b             	cmp    ebp,0xb
c0004bde:	74 25                	je     c0004c05 <get_fileinfo+0x120>
c0004be0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004be3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004be7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004beb:	e8 52 d0 ff ff       	call   c0001c42 <dbc_2nd>
c0004bf0:	85 c0                	test   eax,eax
c0004bf2:	74 11                	je     c0004c05 <get_fileinfo+0x120>
c0004bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bfd:	c1 e2 08             	shl    edx,0x8
c0004c00:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004c03:	09 c2                	or     edx,eax
c0004c05:	0f b7 d2             	movzx  edx,dx
c0004c08:	50                   	push   eax
c0004c09:	50                   	push   eax
c0004c0a:	68 b5 01 00 00       	push   0x1b5
c0004c0f:	52                   	push   edx
c0004c10:	e8 87 3a 00 00       	call   c000869c <ff_oem2uni>
c0004c15:	83 c4 10             	add    esp,0x10
c0004c18:	66 85 c0             	test   ax,ax
c0004c1b:	75 04                	jne    c0004c21 <get_fileinfo+0x13c>
c0004c1d:	31 ff                	xor    edi,edi
c0004c1f:	eb 23                	jmp    c0004c44 <get_fileinfo+0x15f>
c0004c21:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c26:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c2a:	29 f9                	sub    ecx,edi
c0004c2c:	0f b7 c0             	movzx  eax,ax
c0004c2f:	e8 d7 d0 ff ff       	call   c0001d0b <put_utf>
c0004c34:	84 c0                	test   al,al
c0004c36:	74 e5                	je     c0004c1d <get_fileinfo+0x138>
c0004c38:	0f b6 c0             	movzx  eax,al
c0004c3b:	01 c7                	add    edi,eax
c0004c3d:	89 e9                	mov    ecx,ebp
c0004c3f:	e9 4a ff ff ff       	jmp    c0004b8e <get_fileinfo+0xa9>
c0004c44:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c49:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c4d:	75 54                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c4f:	85 ff                	test   edi,edi
c0004c51:	75 0b                	jne    c0004c5e <get_fileinfo+0x179>
c0004c53:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c57:	ba 01 00 00 00       	mov    edx,0x1
c0004c5c:	eb 33                	jmp    c0004c91 <get_fileinfo+0x1ac>
c0004c5e:	b1 08                	mov    cl,0x8
c0004c60:	31 d2                	xor    edx,edx
c0004c62:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c68:	84 c0                	test   al,al
c0004c6a:	74 25                	je     c0004c91 <get_fileinfo+0x1ac>
c0004c6c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c70:	74 16                	je     c0004c88 <get_fileinfo+0x1a3>
c0004c72:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c75:	66 83 ff 19          	cmp    di,0x19
c0004c79:	77 0f                	ja     c0004c8a <get_fileinfo+0x1a5>
c0004c7b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c7e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c81:	74 07                	je     c0004c8a <get_fileinfo+0x1a5>
c0004c83:	83 c0 20             	add    eax,0x20
c0004c86:	eb 02                	jmp    c0004c8a <get_fileinfo+0x1a5>
c0004c88:	b1 10                	mov    cl,0x10
c0004c8a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c8e:	42                   	inc    edx
c0004c8f:	eb d1                	jmp    c0004c62 <get_fileinfo+0x17d>
c0004c91:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c99:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c9d:	75 04                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c9f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ca3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ca6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ca9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004cac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004caf:	83 c0 1c             	add    eax,0x1c
c0004cb2:	e8 c1 ce ff ff       	call   c0001b78 <ld_dword>
c0004cb7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cbe:	89 03                	mov    DWORD PTR [ebx],eax
c0004cc0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc3:	83 c0 16             	add    eax,0x16
c0004cc6:	e8 a0 ce ff ff       	call   c0001b6b <ld_word>
c0004ccb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ccf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd2:	83 c0 18             	add    eax,0x18
c0004cd5:	e8 91 ce ff ff       	call   c0001b6b <ld_word>
c0004cda:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cde:	83 c4 1c             	add    esp,0x1c
c0004ce1:	5b                   	pop    ebx
c0004ce2:	5e                   	pop    esi
c0004ce3:	5f                   	pop    edi
c0004ce4:	5d                   	pop    ebp
c0004ce5:	c3                   	ret    

c0004ce6 <ld_clust.isra.0>:
c0004ce6:	56                   	push   esi
c0004ce7:	89 c6                	mov    esi,eax
c0004ce9:	53                   	push   ebx
c0004cea:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004ced:	89 d3                	mov    ebx,edx
c0004cef:	e8 77 ce ff ff       	call   c0001b6b <ld_word>
c0004cf4:	0f b7 c8             	movzx  ecx,ax
c0004cf7:	89 f0                	mov    eax,esi
c0004cf9:	3c 03                	cmp    al,0x3
c0004cfb:	75 0d                	jne    c0004d0a <ld_clust.isra.0+0x24>
c0004cfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d00:	e8 66 ce ff ff       	call   c0001b6b <ld_word>
c0004d05:	c1 e0 10             	shl    eax,0x10
c0004d08:	09 c1                	or     ecx,eax
c0004d0a:	89 c8                	mov    eax,ecx
c0004d0c:	5b                   	pop    ebx
c0004d0d:	5e                   	pop    esi
c0004d0e:	c3                   	ret    

c0004d0f <st_clust.isra.1>:
c0004d0f:	56                   	push   esi
c0004d10:	89 c6                	mov    esi,eax
c0004d12:	53                   	push   ebx
c0004d13:	89 d3                	mov    ebx,edx
c0004d15:	0f b7 d1             	movzx  edx,cx
c0004d18:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d1b:	e8 bd ce ff ff       	call   c0001bdd <st_word>
c0004d20:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d23:	75 0f                	jne    c0004d34 <st_clust.isra.1+0x25>
c0004d25:	c1 e9 10             	shr    ecx,0x10
c0004d28:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d2b:	89 ca                	mov    edx,ecx
c0004d2d:	5b                   	pop    ebx
c0004d2e:	5e                   	pop    esi
c0004d2f:	e9 a9 ce ff ff       	jmp    c0001bdd <st_word>
c0004d34:	5b                   	pop    ebx
c0004d35:	5e                   	pop    esi
c0004d36:	c3                   	ret    

c0004d37 <init_alloc_info.isra.2>:
c0004d37:	56                   	push   esi
c0004d38:	53                   	push   ebx
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	89 d3                	mov    ebx,edx
c0004d3d:	51                   	push   ecx
c0004d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d40:	83 c0 34             	add    eax,0x34
c0004d43:	e8 30 ce ff ff       	call   c0001b78 <ld_dword>
c0004d48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	83 c0 38             	add    eax,0x38
c0004d50:	e8 3b ce ff ff       	call   c0001b90 <ld_qword>
c0004d55:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d58:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d5d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d67:	83 e0 02             	and    eax,0x2
c0004d6a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d6d:	5b                   	pop    ebx
c0004d6e:	5b                   	pop    ebx
c0004d6f:	5e                   	pop    esi
c0004d70:	c3                   	ret    

c0004d71 <follow_path>:
c0004d71:	56                   	push   esi
c0004d72:	53                   	push   ebx
c0004d73:	89 c3                	mov    ebx,eax
c0004d75:	83 ec 14             	sub    esp,0x14
c0004d78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d7c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d82:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d84:	80 fa 5c             	cmp    dl,0x5c
c0004d87:	75 07                	jne    c0004d90 <follow_path+0x1f>
c0004d89:	40                   	inc    eax
c0004d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8e:	eb ee                	jmp    c0004d7e <follow_path+0xd>
c0004d90:	80 fa 2f             	cmp    dl,0x2f
c0004d93:	74 f4                	je     c0004d89 <follow_path+0x18>
c0004d95:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d9c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004da6:	77 52                	ja     c0004dfa <follow_path+0x89>
c0004da8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004dac:	31 d2                	xor    edx,edx
c0004dae:	89 d8                	mov    eax,ebx
c0004db0:	e8 12 e3 ff ff       	call   c00030c7 <dir_sdi>
c0004db5:	eb 7c                	jmp    c0004e33 <follow_path+0xc2>
c0004db7:	89 d8                	mov    eax,ebx
c0004db9:	e8 6e f2 ff ff       	call   c000402c <dir_find>
c0004dbe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	75 46                	jne    c0004e0b <follow_path+0x9a>
c0004dc5:	80 e2 04             	and    dl,0x4
c0004dc8:	75 69                	jne    c0004e33 <follow_path+0xc2>
c0004dca:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dce:	74 5e                	je     c0004e2e <follow_path+0xbd>
c0004dd0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dd2:	3c 04                	cmp    al,0x4
c0004dd4:	75 41                	jne    c0004e17 <follow_path+0xa6>
c0004dd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dd9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ddd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004de0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004de3:	30 c0                	xor    al,al
c0004de5:	09 d0                	or     eax,edx
c0004de7:	89 da                	mov    edx,ebx
c0004de9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dec:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004def:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004df2:	8d 46 10             	lea    eax,[esi+0x10]
c0004df5:	e8 3d ff ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004dfa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dfe:	89 d8                	mov    eax,ebx
c0004e00:	e8 a9 ed ff ff       	call   c0003bae <create_name>
c0004e05:	85 c0                	test   eax,eax
c0004e07:	74 ae                	je     c0004db7 <follow_path+0x46>
c0004e09:	eb 28                	jmp    c0004e33 <follow_path+0xc2>
c0004e0b:	83 f8 04             	cmp    eax,0x4
c0004e0e:	75 23                	jne    c0004e33 <follow_path+0xc2>
c0004e10:	80 e2 04             	and    dl,0x4
c0004e13:	74 19                	je     c0004e2e <follow_path+0xbd>
c0004e15:	eb 1c                	jmp    c0004e33 <follow_path+0xc2>
c0004e17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e20:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e24:	e8 bd fe ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0004e29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e2c:	eb cc                	jmp    c0004dfa <follow_path+0x89>
c0004e2e:	b8 05 00 00 00       	mov    eax,0x5
c0004e33:	83 c4 14             	add    esp,0x14
c0004e36:	5b                   	pop    ebx
c0004e37:	5e                   	pop    esi
c0004e38:	c3                   	ret    

c0004e39 <f_mount>:
c0004e39:	53                   	push   ebx
c0004e3a:	83 ec 18             	sub    esp,0x18
c0004e3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e4d:	e8 fb d2 ff ff       	call   c000214d <get_ldnumber>
c0004e52:	89 c2                	mov    edx,eax
c0004e54:	b8 0b 00 00 00       	mov    eax,0xb
c0004e59:	85 d2                	test   edx,edx
c0004e5b:	78 39                	js     c0004e96 <f_mount+0x5d>
c0004e5d:	8b 04 95 a0 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7460]
c0004e64:	85 c0                	test   eax,eax
c0004e66:	74 03                	je     c0004e6b <f_mount+0x32>
c0004e68:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6f:	85 c0                	test   eax,eax
c0004e71:	74 03                	je     c0004e76 <f_mount+0x3d>
c0004e73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7a:	89 04 95 a0 8b 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7460],eax
c0004e81:	31 c0                	xor    eax,eax
c0004e83:	84 db                	test   bl,bl
c0004e85:	74 0f                	je     c0004e96 <f_mount+0x5d>
c0004e87:	31 c9                	xor    ecx,ecx
c0004e89:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e91:	e8 65 d7 ff ff       	call   c00025fb <mount_volume>
c0004e96:	83 c4 18             	add    esp,0x18
c0004e99:	5b                   	pop    ebx
c0004e9a:	c3                   	ret    

c0004e9b <f_open>:
c0004e9b:	55                   	push   ebp
c0004e9c:	bd 09 00 00 00       	mov    ebp,0x9
c0004ea1:	57                   	push   edi
c0004ea2:	56                   	push   esi
c0004ea3:	53                   	push   ebx
c0004ea4:	83 ec 7c             	sub    esp,0x7c
c0004ea7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004eae:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004eb5:	85 db                	test   ebx,ebx
c0004eb7:	0f 84 10 04 00 00    	je     c00052cd <f_open+0x432>
c0004ebd:	89 fe                	mov    esi,edi
c0004ebf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ec3:	83 e6 3f             	and    esi,0x3f
c0004ec6:	89 f0                	mov    eax,esi
c0004ec8:	0f b6 c8             	movzx  ecx,al
c0004ecb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ed2:	e8 24 d7 ff ff       	call   c00025fb <mount_volume>
c0004ed7:	89 c5                	mov    ebp,eax
c0004ed9:	85 c0                	test   eax,eax
c0004edb:	0f 85 e6 03 00 00    	jne    c00052c7 <f_open+0x42c>
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eee:	83 ec 0c             	sub    esp,0xc
c0004ef1:	68 60 04 00 00       	push   0x460
c0004ef6:	e8 d9 36 00 00       	call   c00085d4 <ff_memalloc>
c0004efb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eff:	83 c4 10             	add    esp,0x10
c0004f02:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004f07:	0f 84 c0 03 00 00    	je     c00052cd <f_open+0x432>
c0004f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f15:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f1b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f1e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f21:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f2c:	e8 40 fe ff ff       	call   c0004d71 <follow_path>
c0004f31:	89 c5                	mov    ebp,eax
c0004f33:	85 c0                	test   eax,eax
c0004f35:	75 0c                	jne    c0004f43 <f_open+0xa8>
c0004f37:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f3c:	79 05                	jns    c0004f43 <f_open+0xa8>
c0004f3e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f43:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f49:	0f 84 84 01 00 00    	je     c00050d3 <f_open+0x238>
c0004f4f:	85 ed                	test   ebp,ebp
c0004f51:	74 20                	je     c0004f73 <f_open+0xd8>
c0004f53:	83 fd 04             	cmp    ebp,0x4
c0004f56:	0f 85 58 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f60:	83 ce 08             	or     esi,0x8
c0004f63:	e8 8a f2 ff ff       	call   c00041f2 <dir_register>
c0004f68:	89 c5                	mov    ebp,eax
c0004f6a:	85 c0                	test   eax,eax
c0004f6c:	74 2f                	je     c0004f9d <f_open+0x102>
c0004f6e:	e9 41 03 00 00       	jmp    c00052b4 <f_open+0x419>
c0004f73:	bd 07 00 00 00       	mov    ebp,0x7
c0004f78:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f7d:	0f 85 31 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f83:	bd 08 00 00 00       	mov    ebp,0x8
c0004f88:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f8e:	0f 85 20 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f94:	83 e7 08             	and    edi,0x8
c0004f97:	0f 84 65 01 00 00    	je     c0005102 <f_open+0x267>
c0004f9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa1:	8a 02                	mov    al,BYTE PTR [edx]
c0004fa3:	3c 04                	cmp    al,0x4
c0004fa5:	0f 85 97 00 00 00    	jne    c0005042 <f_open+0x1a7>
c0004fab:	8d 42 10             	lea    eax,[edx+0x10]
c0004fae:	89 13                	mov    DWORD PTR [ebx],edx
c0004fb0:	89 da                	mov    edx,ebx
c0004fb2:	e8 80 fd ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004fb7:	31 d2                	xor    edx,edx
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc5:	83 c0 02             	add    eax,0x2
c0004fc8:	e8 32 cc ff ff       	call   c0001bff <mem_set>
c0004fcd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fd2:	31 d2                	xor    edx,edx
c0004fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fdb:	83 c0 26             	add    eax,0x26
c0004fde:	e8 1c cc ff ff       	call   c0001bff <mem_set>
c0004fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fea:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fee:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ff3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff6:	83 c0 08             	add    eax,0x8
c0004ff9:	e8 e3 cb ff ff       	call   c0001be1 <st_dword>
c0004ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005002:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005005:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005009:	8d 44 24 24          	lea    eax,[esp+0x24]
c000500d:	e8 b7 ea ff ff       	call   c0003ac9 <store_xdir>
c0005012:	89 c5                	mov    ebp,eax
c0005014:	85 c0                	test   eax,eax
c0005016:	0f 85 98 02 00 00    	jne    c00052b4 <f_open+0x419>
c000501c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000501f:	85 d2                	test   edx,edx
c0005021:	0f 84 db 00 00 00    	je     c0005102 <f_open+0x267>
c0005027:	31 c9                	xor    ecx,ecx
c0005029:	89 d8                	mov    eax,ebx
c000502b:	e8 8e e3 ff ff       	call   c00033be <remove_chain>
c0005030:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005034:	89 c5                	mov    ebp,eax
c0005036:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005039:	48                   	dec    eax
c000503a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000503d:	e9 b8 00 00 00       	jmp    c00050fa <f_open+0x25f>
c0005042:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005046:	89 ea                	mov    edx,ebp
c0005048:	e8 99 fc ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000504d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005052:	89 c7                	mov    edi,eax
c0005054:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005057:	e8 85 cb ff ff       	call   c0001be1 <st_dword>
c000505c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005060:	31 c9                	xor    ecx,ecx
c0005062:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000506e:	e8 9c fc ff ff       	call   c0004d0f <st_clust.isra.1>
c0005073:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005077:	31 d2                	xor    edx,edx
c0005079:	83 c0 1c             	add    eax,0x1c
c000507c:	e8 60 cb ff ff       	call   c0001be1 <st_dword>
c0005081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005085:	85 ff                	test   edi,edi
c0005087:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000508b:	74 75                	je     c0005102 <f_open+0x267>
c000508d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005091:	31 c9                	xor    ecx,ecx
c0005093:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005096:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a1:	89 fa                	mov    edx,edi
c00050a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a7:	e8 12 e3 ff ff       	call   c00033be <remove_chain>
c00050ac:	89 c5                	mov    ebp,eax
c00050ae:	85 c0                	test   eax,eax
c00050b0:	0f 85 fe 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c2:	4f                   	dec    edi
c00050c3:	e8 81 d2 ff ff       	call   c0002349 <move_window>
c00050c8:	89 c5                	mov    ebp,eax
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050d1:	eb 27                	jmp    c00050fa <f_open+0x25f>
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	0f 85 d9 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050db:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050df:	bd 04 00 00 00       	mov    ebp,0x4
c00050e4:	a8 10                	test   al,0x10
c00050e6:	0f 85 c8 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050ec:	83 e7 02             	and    edi,0x2
c00050ef:	74 11                	je     c0005102 <f_open+0x267>
c00050f1:	bd 07 00 00 00       	mov    ebp,0x7
c00050f6:	a8 01                	test   al,0x1
c00050f8:	eb 02                	jmp    c00050fc <f_open+0x261>
c00050fa:	85 ed                	test   ebp,ebp
c00050fc:	0f 85 b2 01 00 00    	jne    c00052b4 <f_open+0x419>
c0005102:	f7 c6 08 00 00 00    	test   esi,0x8
c0005108:	74 03                	je     c000510d <f_open+0x272>
c000510a:	83 ce 40             	or     esi,0x40
c000510d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005111:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005114:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005117:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000511a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000511d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005121:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005124:	8a 02                	mov    al,BYTE PTR [edx]
c0005126:	3c 04                	cmp    al,0x4
c0005128:	75 2a                	jne    c0005154 <f_open+0x2b9>
c000512a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000512e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005133:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000513a:	30 c0                	xor    al,al
c000513c:	09 c8                	or     eax,ecx
c000513e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005141:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005145:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005148:	8d 42 10             	lea    eax,[edx+0x10]
c000514b:	89 da                	mov    edx,ebx
c000514d:	e8 e5 fb ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005152:	eb 1c                	jmp    c0005170 <f_open+0x2d5>
c0005154:	89 fa                	mov    edx,edi
c0005156:	e8 8b fb ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000515b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000515e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005161:	e8 12 ca ff ff       	call   c0001b78 <ld_dword>
c0005166:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000516d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005174:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000517b:	89 03                	mov    DWORD PTR [ebx],eax
c000517d:	31 d2                	xor    edx,edx
c000517f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005183:	b9 00 02 00 00       	mov    ecx,0x200
c0005188:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000518c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005190:	89 f0                	mov    eax,esi
c0005192:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005199:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000519c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00051a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00051a6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00051ad:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051b8:	e8 42 ca ff ff       	call   c0001bff <mem_set>
c00051bd:	83 e6 20             	and    esi,0x20
c00051c0:	75 07                	jne    c00051c9 <f_open+0x32e>
c00051c2:	31 ed                	xor    ebp,ebp
c00051c4:	e9 eb 00 00 00       	jmp    c00052b4 <f_open+0x419>
c00051c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051cc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051db:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051df:	74 e1                	je     c00051c2 <f_open+0x327>
c00051e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051ec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051f6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051fa:	31 ff                	xor    edi,edi
c00051fc:	c1 e5 09             	shl    ebp,0x9
c00051ff:	89 ee                	mov    esi,ebp
c0005201:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005205:	89 f8                	mov    eax,edi
c0005207:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000520b:	73 22                	jae    c000522f <f_open+0x394>
c000520d:	89 d8                	mov    eax,ebx
c000520f:	e8 bd dc ff ff       	call   c0002ed1 <get_fat>
c0005214:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005218:	89 c2                	mov    edx,eax
c000521a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000521e:	83 f8 01             	cmp    eax,0x1
c0005221:	76 10                	jbe    c0005233 <f_open+0x398>
c0005223:	83 f8 ff             	cmp    eax,0xffffffff
c0005226:	75 d9                	jne    c0005201 <f_open+0x366>
c0005228:	bd 01 00 00 00       	mov    ebp,0x1
c000522d:	eb 09                	jmp    c0005238 <f_open+0x39d>
c000522f:	31 ed                	xor    ebp,ebp
c0005231:	eb 05                	jmp    c0005238 <f_open+0x39d>
c0005233:	bd 02 00 00 00       	mov    ebp,0x2
c0005238:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000523b:	85 ed                	test   ebp,ebp
c000523d:	75 75                	jne    c00052b4 <f_open+0x419>
c000523f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005243:	25 ff 01 00 00       	and    eax,0x1ff
c0005248:	0f 84 74 ff ff ff    	je     c00051c2 <f_open+0x327>
c000524e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	89 c8                	mov    eax,ecx
c0005259:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000525d:	e8 a2 cb ff ff       	call   c0001e04 <clst2sect>
c0005262:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005266:	89 d7                	mov    edi,edx
c0005268:	09 c7                	or     edi,eax
c000526a:	74 48                	je     c00052b4 <f_open+0x419>
c000526c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005270:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005274:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000527c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005280:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005284:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005288:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000528b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000528f:	83 ec 0c             	sub    esp,0xc
c0005292:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005295:	6a 01                	push   0x1
c0005297:	52                   	push   edx
c0005298:	50                   	push   eax
c0005299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000529d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a1:	50                   	push   eax
c00052a2:	e8 79 c8 ff ff       	call   c0001b20 <disk_read>
c00052a7:	83 c4 20             	add    esp,0x20
c00052aa:	85 c0                	test   eax,eax
c00052ac:	0f 95 c0             	setne  al
c00052af:	0f b6 c0             	movzx  eax,al
c00052b2:	89 c5                	mov    ebp,eax
c00052b4:	83 ec 0c             	sub    esp,0xc
c00052b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052bb:	e8 2c 33 00 00       	call   c00085ec <ff_memfree>
c00052c0:	83 c4 10             	add    esp,0x10
c00052c3:	85 ed                	test   ebp,ebp
c00052c5:	74 06                	je     c00052cd <f_open+0x432>
c00052c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052cd:	83 c4 7c             	add    esp,0x7c
c00052d0:	89 e8                	mov    eax,ebp
c00052d2:	5b                   	pop    ebx
c00052d3:	5e                   	pop    esi
c00052d4:	5f                   	pop    edi
c00052d5:	5d                   	pop    ebp
c00052d6:	c3                   	ret    

c00052d7 <f_read>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052ec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052f0:	89 d8                	mov    eax,ebx
c00052f2:	e8 77 cf ff ff       	call   c000226e <validate>
c00052f7:	89 c5                	mov    ebp,eax
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 4c 02 00 00    	jne    c000554d <f_read+0x276>
c0005301:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005305:	85 ed                	test   ebp,ebp
c0005307:	0f 85 40 02 00 00    	jne    c000554d <f_read+0x276>
c000530d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005311:	0f 84 31 02 00 00    	je     c0005548 <f_read+0x271>
c0005317:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000531a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000531d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005320:	bf 00 00 00 00       	mov    edi,0x0
c0005325:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005328:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000532c:	89 d1                	mov    ecx,edx
c000532e:	19 f9                	sbb    ecx,edi
c0005330:	0f 83 cf 00 00 00    	jae    c0005405 <f_read+0x12e>
c0005336:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000533a:	e9 c6 00 00 00       	jmp    c0005405 <f_read+0x12e>
c000533f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005342:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005345:	89 d0                	mov    eax,edx
c0005347:	25 ff 01 00 00       	and    eax,0x1ff
c000534c:	0f 85 c9 01 00 00    	jne    c000551b <f_read+0x244>
c0005352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005356:	89 d6                	mov    esi,edx
c0005358:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000535c:	89 cf                	mov    edi,ecx
c000535e:	48                   	dec    eax
c000535f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005363:	21 f0                	and    eax,esi
c0005365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005369:	0f 84 a6 00 00 00    	je     c0005415 <f_read+0x13e>
c000536f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005373:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005376:	89 c8                	mov    eax,ecx
c0005378:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000537b:	e8 84 ca ff ff       	call   c0001e04 <clst2sect>
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	0f 84 b4 00 00 00    	je     c000543e <f_read+0x167>
c000538a:	31 ff                	xor    edi,edi
c000538c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005390:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005393:	01 c6                	add    esi,eax
c0005395:	11 d7                	adc    edi,edx
c0005397:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000539f:	0f 86 fd 00 00 00    	jbe    c00054a2 <f_read+0x1cb>
c00053a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00053ad:	c1 e8 09             	shr    eax,0x9
c00053b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053b7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053ba:	39 c2                	cmp    edx,eax
c00053bc:	76 07                	jbe    c00053c5 <f_read+0xee>
c00053be:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053cc:	57                   	push   edi
c00053cd:	56                   	push   esi
c00053ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053d6:	50                   	push   eax
c00053d7:	e8 44 c7 ff ff       	call   c0001b20 <disk_read>
c00053dc:	83 c4 20             	add    esp,0x20
c00053df:	85 c0                	test   eax,eax
c00053e1:	75 6e                	jne    c0005451 <f_read+0x17a>
c00053e3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053e7:	78 7e                	js     c0005467 <f_read+0x190>
c00053e9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053ec:	c1 e6 09             	shl    esi,0x9
c00053ef:	31 ff                	xor    edi,edi
c00053f1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053fd:	01 30                	add    DWORD PTR [eax],esi
c00053ff:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005402:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005405:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000540a:	0f 85 2f ff ff ff    	jne    c000533f <f_read+0x68>
c0005410:	e9 38 01 00 00       	jmp    c000554d <f_read+0x276>
c0005415:	89 c8                	mov    eax,ecx
c0005417:	09 d0                	or     eax,edx
c0005419:	75 05                	jne    c0005420 <f_read+0x149>
c000541b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000541e:	eb 19                	jmp    c0005439 <f_read+0x162>
c0005420:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005424:	74 09                	je     c000542f <f_read+0x158>
c0005426:	89 d8                	mov    eax,ebx
c0005428:	e8 f8 c9 ff ff       	call   c0001e25 <clmt_clust>
c000542d:	eb 0a                	jmp    c0005439 <f_read+0x162>
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 98 da ff ff       	call   c0002ed1 <get_fat>
c0005439:	83 f8 01             	cmp    eax,0x1
c000543c:	77 0e                	ja     c000544c <f_read+0x175>
c000543e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005442:	bd 02 00 00 00       	mov    ebp,0x2
c0005447:	e9 01 01 00 00       	jmp    c000554d <f_read+0x276>
c000544c:	83 f8 ff             	cmp    eax,0xffffffff
c000544f:	75 0e                	jne    c000545f <f_read+0x188>
c0005451:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005455:	bd 01 00 00 00       	mov    ebp,0x1
c000545a:	e9 ee 00 00 00       	jmp    c000554d <f_read+0x276>
c000545f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005462:	e9 08 ff ff ff       	jmp    c000536f <f_read+0x98>
c0005467:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000546a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000546d:	29 f0                	sub    eax,esi
c000546f:	19 fa                	sbb    edx,edi
c0005471:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005474:	89 d7                	mov    edi,edx
c0005476:	ba 00 00 00 00       	mov    edx,0x0
c000547b:	89 f9                	mov    ecx,edi
c000547d:	19 d1                	sbb    ecx,edx
c000547f:	0f 83 64 ff ff ff    	jae    c00053e9 <f_read+0x112>
c0005485:	89 c7                	mov    edi,eax
c0005487:	8d 53 50             	lea    edx,[ebx+0x50]
c000548a:	c1 e7 09             	shl    edi,0x9
c000548d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005491:	b9 00 02 00 00       	mov    ecx,0x200
c0005496:	01 f8                	add    eax,edi
c0005498:	e8 4d c7 ff ff       	call   c0001bea <mem_cpy>
c000549d:	e9 47 ff ff ff       	jmp    c00053e9 <f_read+0x112>
c00054a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00054af:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054b3:	75 05                	jne    c00054ba <f_read+0x1e3>
c00054b5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054b8:	74 5b                	je     c0005515 <f_read+0x23e>
c00054ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00054bd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c5:	79 2a                	jns    c00054f1 <f_read+0x21a>
c00054c7:	83 ec 0c             	sub    esp,0xc
c00054ca:	6a 01                	push   0x1
c00054cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054dc:	50                   	push   eax
c00054dd:	e8 54 c6 ff ff       	call   c0001b36 <disk_write>
c00054e2:	83 c4 20             	add    esp,0x20
c00054e5:	85 c0                	test   eax,eax
c00054e7:	0f 85 64 ff ff ff    	jne    c0005451 <f_read+0x17a>
c00054ed:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054f1:	83 ec 0c             	sub    esp,0xc
c00054f4:	6a 01                	push   0x1
c00054f6:	57                   	push   edi
c00054f7:	56                   	push   esi
c00054f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005500:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005504:	50                   	push   eax
c0005505:	e8 16 c6 ff ff       	call   c0001b20 <disk_read>
c000550a:	83 c4 20             	add    esp,0x20
c000550d:	85 c0                	test   eax,eax
c000550f:	0f 85 3c ff ff ff    	jne    c0005451 <f_read+0x17a>
c0005515:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005518:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000551b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000551e:	ba 00 02 00 00       	mov    edx,0x200
c0005523:	25 ff 01 00 00       	and    eax,0x1ff
c0005528:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000552c:	29 c2                	sub    edx,eax
c000552e:	39 d6                	cmp    esi,edx
c0005530:	76 02                	jbe    c0005534 <f_read+0x25d>
c0005532:	89 d6                	mov    esi,edx
c0005534:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005538:	89 f1                	mov    ecx,esi
c000553a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000553e:	e8 a7 c6 ff ff       	call   c0001bea <mem_cpy>
c0005543:	e9 a7 fe ff ff       	jmp    c00053ef <f_read+0x118>
c0005548:	bd 07 00 00 00       	mov    ebp,0x7
c000554d:	83 c4 2c             	add    esp,0x2c
c0005550:	89 e8                	mov    eax,ebp
c0005552:	5b                   	pop    ebx
c0005553:	5e                   	pop    esi
c0005554:	5f                   	pop    edi
c0005555:	5d                   	pop    ebp
c0005556:	c3                   	ret    

c0005557 <f_write>:
c0005557:	55                   	push   ebp
c0005558:	57                   	push   edi
c0005559:	56                   	push   esi
c000555a:	53                   	push   ebx
c000555b:	83 ec 2c             	sub    esp,0x2c
c000555e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005562:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005566:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000556c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005570:	89 d8                	mov    eax,ebx
c0005572:	e8 f7 cc ff ff       	call   c000226e <validate>
c0005577:	89 c5                	mov    ebp,eax
c0005579:	85 c0                	test   eax,eax
c000557b:	0f 85 86 02 00 00    	jne    c0005807 <f_write+0x2b0>
c0005581:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005585:	85 ed                	test   ebp,ebp
c0005587:	0f 85 7a 02 00 00    	jne    c0005807 <f_write+0x2b0>
c000558d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005591:	0f 84 6b 02 00 00    	je     c0005802 <f_write+0x2ab>
c0005597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000559b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000559e:	0f 84 43 01 00 00    	je     c00056e7 <f_write+0x190>
c00055a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055a7:	89 c1                	mov    ecx,eax
c00055a9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00055ad:	0f 83 34 01 00 00    	jae    c00056e7 <f_write+0x190>
c00055b3:	f7 d0                	not    eax
c00055b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055b9:	e9 29 01 00 00       	jmp    c00056e7 <f_write+0x190>
c00055be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055c1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055c4:	89 d0                	mov    eax,edx
c00055c6:	25 ff 01 00 00       	and    eax,0x1ff
c00055cb:	0f 85 00 02 00 00    	jne    c00057d1 <f_write+0x27a>
c00055d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055d5:	89 d6                	mov    esi,edx
c00055d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055db:	89 cf                	mov    edi,ecx
c00055dd:	48                   	dec    eax
c00055de:	0f ac fe 09          	shrd   esi,edi,0x9
c00055e2:	21 f0                	and    eax,esi
c00055e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055e8:	0f 84 06 01 00 00    	je     c00056f4 <f_write+0x19d>
c00055ee:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055f2:	0f 88 6e 01 00 00    	js     c0005766 <f_write+0x20f>
c00055f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ff:	89 c8                	mov    eax,ecx
c0005601:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005605:	e8 fa c7 ff ff       	call   c0001e04 <clst2sect>
c000560a:	89 d1                	mov    ecx,edx
c000560c:	09 c1                	or     ecx,eax
c000560e:	0f 84 1c 01 00 00    	je     c0005730 <f_write+0x1d9>
c0005614:	31 ff                	xor    edi,edi
c0005616:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000561a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000561e:	01 c6                	add    esi,eax
c0005620:	11 d7                	adc    edi,edx
c0005622:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000562a:	0f 86 63 01 00 00    	jbe    c0005793 <f_write+0x23c>
c0005630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005638:	c1 e8 09             	shr    eax,0x9
c000563b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005643:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005647:	39 c2                	cmp    edx,eax
c0005649:	76 08                	jbe    c0005653 <f_write+0xfc>
c000564b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000564f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005653:	83 ec 0c             	sub    esp,0xc
c0005656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000565a:	57                   	push   edi
c000565b:	56                   	push   esi
c000565c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005660:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 cc c4 ff ff       	call   c0001b36 <disk_write>
c000566a:	83 c4 20             	add    esp,0x20
c000566d:	85 c0                	test   eax,eax
c000566f:	0f 85 ce 00 00 00    	jne    c0005743 <f_write+0x1ec>
c0005675:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005678:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000567b:	29 f0                	sub    eax,esi
c000567d:	19 fa                	sbb    edx,edi
c000567f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005683:	89 d7                	mov    edi,edx
c0005685:	ba 00 00 00 00       	mov    edx,0x0
c000568a:	89 f9                	mov    ecx,edi
c000568c:	19 d1                	sbb    ecx,edx
c000568e:	73 1c                	jae    c00056ac <f_write+0x155>
c0005690:	89 c7                	mov    edi,eax
c0005692:	b9 00 02 00 00       	mov    ecx,0x200
c0005697:	c1 e7 09             	shl    edi,0x9
c000569a:	8d 43 50             	lea    eax,[ebx+0x50]
c000569d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00056a1:	89 fa                	mov    edx,edi
c00056a3:	e8 42 c5 ff ff       	call   c0001bea <mem_cpy>
c00056a8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056b0:	c1 e6 09             	shl    esi,0x9
c00056b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056b7:	31 ff                	xor    edi,edi
c00056b9:	01 30                	add    DWORD PTR [eax],esi
c00056bb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056bf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056c6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056cc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056cf:	89 c1                	mov    ecx,eax
c00056d1:	39 f2                	cmp    edx,esi
c00056d3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056d6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056d9:	19 f9                	sbb    ecx,edi
c00056db:	73 04                	jae    c00056e1 <f_write+0x18a>
c00056dd:	89 f2                	mov    edx,esi
c00056df:	89 f8                	mov    eax,edi
c00056e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056ec:	0f 85 cc fe ff ff    	jne    c00055be <f_write+0x67>
c00056f2:	eb 2e                	jmp    c0005722 <f_write+0x1cb>
c00056f4:	89 c8                	mov    eax,ecx
c00056f6:	09 d0                	or     eax,edx
c00056f8:	75 0b                	jne    c0005705 <f_write+0x1ae>
c00056fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056fd:	31 d2                	xor    edx,edx
c00056ff:	85 c0                	test   eax,eax
c0005701:	75 28                	jne    c000572b <f_write+0x1d4>
c0005703:	eb 12                	jmp    c0005717 <f_write+0x1c0>
c0005705:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005709:	74 09                	je     c0005714 <f_write+0x1bd>
c000570b:	89 d8                	mov    eax,ebx
c000570d:	e8 13 c7 ff ff       	call   c0001e25 <clmt_clust>
c0005712:	eb 0a                	jmp    c000571e <f_write+0x1c7>
c0005714:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005717:	89 d8                	mov    eax,ebx
c0005719:	e8 a1 da ff ff       	call   c00031bf <create_chain>
c000571e:	85 c0                	test   eax,eax
c0005720:	75 09                	jne    c000572b <f_write+0x1d4>
c0005722:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005726:	e9 dc 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000572b:	83 f8 01             	cmp    eax,0x1
c000572e:	75 0e                	jne    c000573e <f_write+0x1e7>
c0005730:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005734:	bd 02 00 00 00       	mov    ebp,0x2
c0005739:	e9 c9 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000573e:	83 f8 ff             	cmp    eax,0xffffffff
c0005741:	75 0e                	jne    c0005751 <f_write+0x1fa>
c0005743:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005747:	bd 01 00 00 00       	mov    ebp,0x1
c000574c:	e9 b6 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c0005751:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005754:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005758:	0f 85 90 fe ff ff    	jne    c00055ee <f_write+0x97>
c000575e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005761:	e9 88 fe ff ff       	jmp    c00055ee <f_write+0x97>
c0005766:	83 ec 0c             	sub    esp,0xc
c0005769:	8d 43 50             	lea    eax,[ebx+0x50]
c000576c:	6a 01                	push   0x1
c000576e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005771:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005774:	50                   	push   eax
c0005775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005779:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000577d:	50                   	push   eax
c000577e:	e8 b3 c3 ff ff       	call   c0001b36 <disk_write>
c0005783:	83 c4 20             	add    esp,0x20
c0005786:	85 c0                	test   eax,eax
c0005788:	75 b9                	jne    c0005743 <f_write+0x1ec>
c000578a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000578e:	e9 65 fe ff ff       	jmp    c00055f8 <f_write+0xa1>
c0005793:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005796:	75 05                	jne    c000579d <f_write+0x246>
c0005798:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000579b:	74 2e                	je     c00057cb <f_write+0x274>
c000579d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00057a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00057a6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00057a9:	73 20                	jae    c00057cb <f_write+0x274>
c00057ab:	83 ec 0c             	sub    esp,0xc
c00057ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b1:	6a 01                	push   0x1
c00057b3:	57                   	push   edi
c00057b4:	56                   	push   esi
c00057b5:	50                   	push   eax
c00057b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057ba:	50                   	push   eax
c00057bb:	e8 60 c3 ff ff       	call   c0001b20 <disk_read>
c00057c0:	83 c4 20             	add    esp,0x20
c00057c3:	85 c0                	test   eax,eax
c00057c5:	0f 85 78 ff ff ff    	jne    c0005743 <f_write+0x1ec>
c00057cb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057ce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057d4:	ba 00 02 00 00       	mov    edx,0x200
c00057d9:	25 ff 01 00 00       	and    eax,0x1ff
c00057de:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057e2:	29 c2                	sub    edx,eax
c00057e4:	39 d6                	cmp    esi,edx
c00057e6:	76 02                	jbe    c00057ea <f_write+0x293>
c00057e8:	89 d6                	mov    esi,edx
c00057ea:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057ee:	89 f1                	mov    ecx,esi
c00057f0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057f4:	e8 f1 c3 ff ff       	call   c0001bea <mem_cpy>
c00057f9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057fd:	e9 b1 fe ff ff       	jmp    c00056b3 <f_write+0x15c>
c0005802:	bd 07 00 00 00       	mov    ebp,0x7
c0005807:	83 c4 2c             	add    esp,0x2c
c000580a:	89 e8                	mov    eax,ebp
c000580c:	5b                   	pop    ebx
c000580d:	5e                   	pop    esi
c000580e:	5f                   	pop    edi
c000580f:	5d                   	pop    ebp
c0005810:	c3                   	ret    

c0005811 <f_sync>:
c0005811:	56                   	push   esi
c0005812:	53                   	push   ebx
c0005813:	83 ec 64             	sub    esp,0x64
c0005816:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000581a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000581e:	89 d8                	mov    eax,ebx
c0005820:	e8 49 ca ff ff       	call   c000226e <validate>
c0005825:	85 c0                	test   eax,eax
c0005827:	0f 85 ba 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000582d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005830:	f6 c2 40             	test   dl,0x40
c0005833:	0f 84 ae 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c0005839:	84 d2                	test   dl,dl
c000583b:	79 33                	jns    c0005870 <f_sync+0x5f>
c000583d:	83 ec 0c             	sub    esp,0xc
c0005840:	8d 43 50             	lea    eax,[ebx+0x50]
c0005843:	6a 01                	push   0x1
c0005845:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584b:	50                   	push   eax
c000584c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005850:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005854:	50                   	push   eax
c0005855:	e8 dc c2 ff ff       	call   c0001b36 <disk_write>
c000585a:	83 c4 20             	add    esp,0x20
c000585d:	89 c2                	mov    edx,eax
c000585f:	b8 01 00 00 00       	mov    eax,0x1
c0005864:	85 d2                	test   edx,edx
c0005866:	0f 85 7b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000586c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005874:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005877:	0f 85 11 01 00 00    	jne    c000598e <f_sync+0x17d>
c000587d:	89 d8                	mov    eax,ebx
c000587f:	e8 13 d6 ff ff       	call   c0002e97 <fill_first_frag>
c0005884:	85 c0                	test   eax,eax
c0005886:	0f 85 5b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000588c:	83 c9 ff             	or     ecx,0xffffffff
c000588f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005892:	89 d8                	mov    eax,ebx
c0005894:	e8 c9 d5 ff ff       	call   c0002e62 <fill_last_frag>
c0005899:	85 c0                	test   eax,eax
c000589b:	0f 85 46 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	68 60 04 00 00       	push   0x460
c00058a9:	e8 26 2d 00 00       	call   c00085d4 <ff_memalloc>
c00058ae:	83 c4 10             	add    esp,0x10
c00058b1:	89 c6                	mov    esi,eax
c00058b3:	b8 11 00 00 00       	mov    eax,0x11
c00058b8:	85 f6                	test   esi,esi
c00058ba:	0f 84 27 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c00058c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ca:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058d0:	89 da                	mov    edx,ebx
c00058d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058d6:	e8 af df ff ff       	call   c000388a <load_obj_xdir>
c00058db:	85 c0                	test   eax,eax
c00058dd:	0f 85 95 00 00 00    	jne    c0005978 <f_sync+0x167>
c00058e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058ea:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058ee:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058f1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058f4:	83 ca 01             	or     edx,0x1
c00058f7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005900:	83 c0 34             	add    eax,0x34
c0005903:	e8 d9 c2 ff ff       	call   c0001be1 <st_dword>
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005915:	83 c0 38             	add    eax,0x38
c0005918:	e8 c7 c2 ff ff       	call   c0001be4 <st_qword>
c000591d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005924:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005927:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592a:	83 c0 28             	add    eax,0x28
c000592d:	e8 b2 c2 ff ff       	call   c0001be4 <st_qword>
c0005932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005936:	ba 00 00 21 50       	mov    edx,0x50210000
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 0c             	add    eax,0xc
c0005941:	e8 9b c2 ff ff       	call   c0001be1 <st_dword>
c0005946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000594d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005951:	31 d2                	xor    edx,edx
c0005953:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005956:	83 c0 10             	add    eax,0x10
c0005959:	e8 83 c2 ff ff       	call   c0001be1 <st_dword>
c000595e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005962:	e8 62 e1 ff ff       	call   c0003ac9 <store_xdir>
c0005967:	85 c0                	test   eax,eax
c0005969:	75 0d                	jne    c0005978 <f_sync+0x167>
c000596b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596f:	e8 00 eb ff ff       	call   c0004474 <sync_fs>
c0005974:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000597c:	83 ec 0c             	sub    esp,0xc
c000597f:	56                   	push   esi
c0005980:	e8 67 2c 00 00       	call   c00085ec <ff_memfree>
c0005985:	83 c4 10             	add    esp,0x10
c0005988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000598c:	eb 59                	jmp    c00059e7 <f_sync+0x1d6>
c000598e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005991:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005994:	e8 b0 c9 ff ff       	call   c0002349 <move_window>
c0005999:	85 c0                	test   eax,eax
c000599b:	75 4a                	jne    c00059e7 <f_sync+0x1d6>
c000599d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00059a0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00059a4:	89 f2                	mov    edx,esi
c00059a6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00059a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00059ab:	e8 5f f3 ff ff       	call   c0004d0f <st_clust.isra.1>
c00059b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059b3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059b6:	e8 26 c2 ff ff       	call   c0001be1 <st_dword>
c00059bb:	8d 46 16             	lea    eax,[esi+0x16]
c00059be:	ba 00 00 21 50       	mov    edx,0x50210000
c00059c3:	e8 19 c2 ff ff       	call   c0001be1 <st_dword>
c00059c8:	8d 46 12             	lea    eax,[esi+0x12]
c00059cb:	31 d2                	xor    edx,edx
c00059cd:	e8 0b c2 ff ff       	call   c0001bdd <st_word>
c00059d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059d6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	e8 91 ea ff ff       	call   c0004474 <sync_fs>
c00059e3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059e7:	83 c4 64             	add    esp,0x64
c00059ea:	5b                   	pop    ebx
c00059eb:	5e                   	pop    esi
c00059ec:	c3                   	ret    

c00059ed <f_close>:
c00059ed:	53                   	push   ebx
c00059ee:	83 ec 24             	sub    esp,0x24
c00059f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059f5:	53                   	push   ebx
c00059f6:	e8 16 fe ff ff       	call   c0005811 <f_sync>
c00059fb:	83 c4 10             	add    esp,0x10
c00059fe:	85 c0                	test   eax,eax
c0005a00:	75 15                	jne    c0005a17 <f_close+0x2a>
c0005a02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005a06:	89 d8                	mov    eax,ebx
c0005a08:	e8 61 c8 ff ff       	call   c000226e <validate>
c0005a0d:	85 c0                	test   eax,eax
c0005a0f:	75 06                	jne    c0005a17 <f_close+0x2a>
c0005a11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a17:	83 c4 18             	add    esp,0x18
c0005a1a:	5b                   	pop    ebx
c0005a1b:	c3                   	ret    

c0005a1c <f_lseek>:
c0005a1c:	55                   	push   ebp
c0005a1d:	57                   	push   edi
c0005a1e:	56                   	push   esi
c0005a1f:	53                   	push   ebx
c0005a20:	83 ec 3c             	sub    esp,0x3c
c0005a23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a2b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a36:	89 d8                	mov    eax,ebx
c0005a38:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a3c:	e8 2d c8 ff ff       	call   c000226e <validate>
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 7a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a4d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a55:	85 c0                	test   eax,eax
c0005a57:	0f 85 6a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a61:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a64:	74 0c                	je     c0005a72 <f_lseek+0x56>
c0005a66:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a69:	85 c0                	test   eax,eax
c0005a6b:	75 1f                	jne    c0005a8c <f_lseek+0x70>
c0005a6d:	e9 b5 01 00 00       	jmp    c0005c27 <f_lseek+0x20b>
c0005a72:	83 c9 ff             	or     ecx,0xffffffff
c0005a75:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	e8 e3 d3 ff ff       	call   c0002e62 <fill_last_frag>
c0005a7f:	85 c0                	test   eax,eax
c0005a81:	74 e3                	je     c0005a66 <f_lseek+0x4a>
c0005a83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a87:	e9 3b 04 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005a8c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a91:	0f 85 ac 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005a97:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a9b:	0f 85 a2 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005aa1:	8d 78 04             	lea    edi,[eax+0x4]
c0005aa4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005aa9:	be 02 00 00 00       	mov    esi,0x2
c0005aae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab2:	85 ed                	test   ebp,ebp
c0005ab4:	74 73                	je     c0005b29 <f_lseek+0x10d>
c0005ab6:	89 e9                	mov    ecx,ebp
c0005ab8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005abf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ac2:	89 ca                	mov    edx,ecx
c0005ac4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ac8:	89 d8                	mov    eax,ebx
c0005aca:	e8 02 d4 ff ff       	call   c0002ed1 <get_fat>
c0005acf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ad3:	83 f8 01             	cmp    eax,0x1
c0005ad6:	77 11                	ja     c0005ae9 <f_lseek+0xcd>
c0005ad8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005adc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ae4:	e9 de 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ae9:	83 f8 ff             	cmp    eax,0xffffffff
c0005aec:	75 11                	jne    c0005aff <f_lseek+0xe3>
c0005aee:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005af2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005afa:	e9 c8 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005aff:	8d 51 01             	lea    edx,[ecx+0x1]
c0005b02:	89 c1                	mov    ecx,eax
c0005b04:	39 c2                	cmp    edx,eax
c0005b06:	74 b7                	je     c0005abf <f_lseek+0xa3>
c0005b08:	83 c6 02             	add    esi,0x2
c0005b0b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005b0f:	72 0b                	jb     c0005b1c <f_lseek+0x100>
c0005b11:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b14:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b17:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b19:	83 c7 08             	add    edi,0x8
c0005b1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b20:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b23:	76 04                	jbe    c0005b29 <f_lseek+0x10d>
c0005b25:	89 c5                	mov    ebp,eax
c0005b27:	eb 8d                	jmp    c0005ab6 <f_lseek+0x9a>
c0005b29:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b2c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b30:	89 30                	mov    DWORD PTR [eax],esi
c0005b32:	0f 87 87 03 00 00    	ja     c0005ebf <f_lseek+0x4a3>
c0005b38:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b3e:	e9 84 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005b43:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b46:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b55:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b60:	73 0f                	jae    c0005b71 <f_lseek+0x155>
c0005b62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b7c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b87:	0f 84 3a 03 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005b8d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b91:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b95:	83 c6 ff             	add    esi,0xffffffff
c0005b98:	89 d8                	mov    eax,ebx
c0005b9a:	83 d7 ff             	adc    edi,0xffffffff
c0005b9d:	89 f2                	mov    edx,esi
c0005b9f:	89 f9                	mov    ecx,edi
c0005ba1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ba5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ba8:	e8 78 c2 ff ff       	call   c0001e25 <clmt_clust>
c0005bad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005bb1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bb4:	89 c2                	mov    edx,eax
c0005bb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bba:	89 c8                	mov    eax,ecx
c0005bbc:	e8 43 c2 ff ff       	call   c0001e04 <clst2sect>
c0005bc1:	89 d7                	mov    edi,edx
c0005bc3:	09 c7                	or     edi,eax
c0005bc5:	0f 84 0d ff ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005bcb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bcf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bd5:	0f 84 ec 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005bdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005be3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005be6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bee:	4d                   	dec    ebp
c0005bef:	31 ff                	xor    edi,edi
c0005bf1:	21 ee                	and    esi,ebp
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005bf8:	11 d7                	adc    edi,edx
c0005bfa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bfd:	39 fa                	cmp    edx,edi
c0005bff:	75 08                	jne    c0005c09 <f_lseek+0x1ed>
c0005c01:	39 f0                	cmp    eax,esi
c0005c03:	0f 84 be 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005c09:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c0c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c10:	0f 89 80 02 00 00    	jns    c0005e96 <f_lseek+0x47a>
c0005c16:	83 ec 0c             	sub    esp,0xc
c0005c19:	6a 01                	push   0x1
c0005c1b:	52                   	push   edx
c0005c1c:	50                   	push   eax
c0005c1d:	55                   	push   ebp
c0005c1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c22:	e9 5a 02 00 00       	jmp    c0005e81 <f_lseek+0x465>
c0005c27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c2b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c2e:	74 16                	je     c0005c46 <f_lseek+0x22a>
c0005c30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c35:	76 0f                	jbe    c0005c46 <f_lseek+0x22a>
c0005c37:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c4c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c4f:	89 c7                	mov    edi,eax
c0005c51:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c55:	73 0d                	jae    c0005c64 <f_lseek+0x248>
c0005c57:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c5b:	75 07                	jne    c0005c64 <f_lseek+0x248>
c0005c5d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c6a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c6e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c75:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c7c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c7f:	75 09                	jne    c0005c8a <f_lseek+0x26e>
c0005c81:	31 f6                	xor    esi,esi
c0005c83:	31 ff                	xor    edi,edi
c0005c85:	e9 af 01 00 00       	jmp    c0005e39 <f_lseek+0x41d>
c0005c8a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c8e:	89 d7                	mov    edi,edx
c0005c90:	c1 e1 09             	shl    ecx,0x9
c0005c93:	09 c7                	or     edi,eax
c0005c95:	89 cd                	mov    ebp,ecx
c0005c97:	74 6d                	je     c0005d06 <f_lseek+0x2ea>
c0005c99:	83 c0 ff             	add    eax,0xffffffff
c0005c9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ca0:	83 d2 ff             	adc    edx,0xffffffff
c0005ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005caa:	83 c0 ff             	add    eax,0xffffffff
c0005cad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005cb1:	83 d2 ff             	adc    edx,0xffffffff
c0005cb4:	31 ff                	xor    edi,edi
c0005cb6:	57                   	push   edi
c0005cb7:	51                   	push   ecx
c0005cb8:	52                   	push   edx
c0005cb9:	50                   	push   eax
c0005cba:	e8 11 d3 01 00       	call   c0022fd0 <__udivdi3>
c0005cbf:	83 c4 10             	add    esp,0x10
c0005cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cca:	57                   	push   edi
c0005ccb:	55                   	push   ebp
c0005ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd4:	e8 f7 d2 01 00       	call   c0022fd0 <__udivdi3>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005ce0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ce4:	19 d1                	sbb    ecx,edx
c0005ce6:	72 1e                	jb     c0005d06 <f_lseek+0x2ea>
c0005ce8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cec:	89 e9                	mov    ecx,ebp
c0005cee:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cf1:	f7 d9                	neg    ecx
c0005cf3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cf6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cfa:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005cfd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005d00:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005d04:	eb 28                	jmp    c0005d2e <f_lseek+0x312>
c0005d06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	75 1e                	jne    c0005d2b <f_lseek+0x30f>
c0005d0d:	31 d2                	xor    edx,edx
c0005d0f:	89 d8                	mov    eax,ebx
c0005d11:	e8 a9 d4 ff ff       	call   c00031bf <create_chain>
c0005d16:	83 f8 01             	cmp    eax,0x1
c0005d19:	0f 84 b9 fd ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005d1f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d22:	0f 84 c6 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005d28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d2b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d2e:	85 c0                	test   eax,eax
c0005d30:	0f 84 4b ff ff ff    	je     c0005c81 <f_lseek+0x265>
c0005d36:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d42:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d4c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	0f 83 9d 00 00 00    	jae    c0005df6 <f_lseek+0x3da>
c0005d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d61:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d64:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d68:	01 f2                	add    edx,esi
c0005d6a:	11 f9                	adc    ecx,edi
c0005d6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d74:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d77:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d7a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d7d:	f6 c1 02             	test   cl,0x2
c0005d80:	74 35                	je     c0005db7 <f_lseek+0x39b>
c0005d82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d86:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d89:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d8c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d90:	73 16                	jae    c0005da8 <f_lseek+0x38c>
c0005d92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d9a:	88 ca                	mov    dl,cl
c0005d9c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d9f:	83 ca 40             	or     edx,0x40
c0005da2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005da5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005da8:	89 c2                	mov    edx,eax
c0005daa:	89 d8                	mov    eax,ebx
c0005dac:	e8 0e d4 ff ff       	call   c00031bf <create_chain>
c0005db1:	85 c0                	test   eax,eax
c0005db3:	75 0b                	jne    c0005dc0 <f_lseek+0x3a4>
c0005db5:	eb 30                	jmp    c0005de7 <f_lseek+0x3cb>
c0005db7:	89 c2                	mov    edx,eax
c0005db9:	89 d8                	mov    eax,ebx
c0005dbb:	e8 11 d1 ff ff       	call   c0002ed1 <get_fat>
c0005dc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005dc3:	0f 84 25 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005dc9:	83 f8 01             	cmp    eax,0x1
c0005dcc:	0f 86 06 fd ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005dd2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dd6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dd9:	0f 86 f9 fc ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005ddf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005de2:	e9 5b ff ff ff       	jmp    c0005d42 <f_lseek+0x326>
c0005de7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005df6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005df9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005dfd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005e00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005e03:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005e06:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005e0c:	0f 84 6f fe ff ff    	je     c0005c81 <f_lseek+0x265>
c0005e12:	89 c2                	mov    edx,eax
c0005e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e18:	e8 e7 bf ff ff       	call   c0001e04 <clst2sect>
c0005e1d:	89 d7                	mov    edi,edx
c0005e1f:	09 c7                	or     edi,eax
c0005e21:	0f 84 b1 fc ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005e27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e2e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e32:	c1 ef 09             	shr    edi,0x9
c0005e35:	01 c6                	add    esi,eax
c0005e37:	11 d7                	adc    edi,edx
c0005e39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e3f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e42:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e45:	19 d1                	sbb    ecx,edx
c0005e47:	73 0a                	jae    c0005e53 <f_lseek+0x437>
c0005e49:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e4c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e4f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e53:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e58:	74 6d                	je     c0005ec7 <f_lseek+0x4ab>
c0005e5a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e60:	39 fa                	cmp    edx,edi
c0005e62:	75 04                	jne    c0005e68 <f_lseek+0x44c>
c0005e64:	39 f0                	cmp    eax,esi
c0005e66:	74 5f                	je     c0005ec7 <f_lseek+0x4ab>
c0005e68:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e6b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e6f:	79 25                	jns    c0005e96 <f_lseek+0x47a>
c0005e71:	83 ec 0c             	sub    esp,0xc
c0005e74:	6a 01                	push   0x1
c0005e76:	52                   	push   edx
c0005e77:	50                   	push   eax
c0005e78:	55                   	push   ebp
c0005e79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e7d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e81:	50                   	push   eax
c0005e82:	e8 af bc ff ff       	call   c0001b36 <disk_write>
c0005e87:	83 c4 20             	add    esp,0x20
c0005e8a:	85 c0                	test   eax,eax
c0005e8c:	0f 85 5c fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005e92:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e96:	83 ec 0c             	sub    esp,0xc
c0005e99:	6a 01                	push   0x1
c0005e9b:	57                   	push   edi
c0005e9c:	56                   	push   esi
c0005e9d:	55                   	push   ebp
c0005e9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ea2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ea6:	50                   	push   eax
c0005ea7:	e8 74 bc ff ff       	call   c0001b20 <disk_read>
c0005eac:	83 c4 20             	add    esp,0x20
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	0f 85 37 fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005eb7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ebd:	eb 08                	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ebf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ecb:	83 c4 3c             	add    esp,0x3c
c0005ece:	5b                   	pop    ebx
c0005ecf:	5e                   	pop    esi
c0005ed0:	5f                   	pop    edi
c0005ed1:	5d                   	pop    ebp
c0005ed2:	c3                   	ret    

c0005ed3 <f_opendir>:
c0005ed3:	56                   	push   esi
c0005ed4:	b8 09 00 00 00       	mov    eax,0x9
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 24             	sub    esp,0x24
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	85 db                	test   ebx,ebx
c0005ee3:	0f 84 e6 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005ee9:	31 c9                	xor    ecx,ecx
c0005eeb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eef:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ef3:	e8 03 c7 ff ff       	call   c00025fb <mount_volume>
c0005ef8:	85 c0                	test   eax,eax
c0005efa:	0f 85 c9 00 00 00    	jne    c0005fc9 <f_opendir+0xf6>
c0005f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f04:	83 ec 0c             	sub    esp,0xc
c0005f07:	89 03                	mov    DWORD PTR [ebx],eax
c0005f09:	68 60 04 00 00       	push   0x460
c0005f0e:	e8 c1 26 00 00       	call   c00085d4 <ff_memalloc>
c0005f13:	83 c4 10             	add    esp,0x10
c0005f16:	89 c6                	mov    esi,eax
c0005f18:	b8 11 00 00 00       	mov    eax,0x11
c0005f1d:	85 f6                	test   esi,esi
c0005f1f:	0f 84 aa 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f29:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f39:	89 d8                	mov    eax,ebx
c0005f3b:	e8 31 ee ff ff       	call   c0004d71 <follow_path>
c0005f40:	85 c0                	test   eax,eax
c0005f42:	75 61                	jne    c0005fa5 <f_opendir+0xd2>
c0005f44:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f48:	78 46                	js     c0005f90 <f_opendir+0xbd>
c0005f4a:	b8 05 00 00 00       	mov    eax,0x5
c0005f4f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f53:	74 50                	je     c0005fa5 <f_opendir+0xd2>
c0005f55:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f59:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f5b:	3c 04                	cmp    al,0x4
c0005f5d:	75 26                	jne    c0005f85 <f_opendir+0xb2>
c0005f5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f65:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f68:	30 d2                	xor    dl,dl
c0005f6a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f6e:	09 c2                	or     edx,eax
c0005f70:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f73:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f76:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f79:	89 da                	mov    edx,ebx
c0005f7b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f7e:	e8 b4 ed ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005f83:	eb 0b                	jmp    c0005f90 <f_opendir+0xbd>
c0005f85:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f88:	e8 59 ed ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0005f8d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f94:	31 d2                	xor    edx,edx
c0005f96:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f9a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f9e:	89 d8                	mov    eax,ebx
c0005fa0:	e8 22 d1 ff ff       	call   c00030c7 <dir_sdi>
c0005fa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fa9:	83 ec 0c             	sub    esp,0xc
c0005fac:	56                   	push   esi
c0005fad:	e8 3a 26 00 00       	call   c00085ec <ff_memfree>
c0005fb2:	83 c4 10             	add    esp,0x10
c0005fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb9:	83 f8 04             	cmp    eax,0x4
c0005fbc:	74 06                	je     c0005fc4 <f_opendir+0xf1>
c0005fbe:	85 c0                	test   eax,eax
c0005fc0:	74 0d                	je     c0005fcf <f_opendir+0xfc>
c0005fc2:	eb 05                	jmp    c0005fc9 <f_opendir+0xf6>
c0005fc4:	b8 05 00 00 00       	mov    eax,0x5
c0005fc9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fcf:	83 c4 24             	add    esp,0x24
c0005fd2:	5b                   	pop    ebx
c0005fd3:	5e                   	pop    esi
c0005fd4:	c3                   	ret    

c0005fd5 <f_closedir>:
c0005fd5:	53                   	push   ebx
c0005fd6:	83 ec 18             	sub    esp,0x18
c0005fd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fdd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fe1:	89 d8                	mov    eax,ebx
c0005fe3:	e8 86 c2 ff ff       	call   c000226e <validate>
c0005fe8:	85 c0                	test   eax,eax
c0005fea:	75 06                	jne    c0005ff2 <f_closedir+0x1d>
c0005fec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ff2:	83 c4 18             	add    esp,0x18
c0005ff5:	5b                   	pop    ebx
c0005ff6:	c3                   	ret    

c0005ff7 <f_readdir>:
c0005ff7:	57                   	push   edi
c0005ff8:	56                   	push   esi
c0005ff9:	53                   	push   ebx
c0005ffa:	83 ec 20             	sub    esp,0x20
c0005ffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006001:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	89 d8                	mov    eax,ebx
c000600b:	e8 5e c2 ff ff       	call   c000226e <validate>
c0006010:	85 c0                	test   eax,eax
c0006012:	75 77                	jne    c000608b <f_readdir+0x94>
c0006014:	85 ff                	test   edi,edi
c0006016:	75 0b                	jne    c0006023 <f_readdir+0x2c>
c0006018:	31 d2                	xor    edx,edx
c000601a:	89 d8                	mov    eax,ebx
c000601c:	e8 a6 d0 ff ff       	call   c00030c7 <dir_sdi>
c0006021:	eb 68                	jmp    c000608b <f_readdir+0x94>
c0006023:	83 ec 0c             	sub    esp,0xc
c0006026:	68 60 04 00 00       	push   0x460
c000602b:	e8 a4 25 00 00       	call   c00085d4 <ff_memalloc>
c0006030:	83 c4 10             	add    esp,0x10
c0006033:	89 c6                	mov    esi,eax
c0006035:	b8 11 00 00 00       	mov    eax,0x11
c000603a:	85 f6                	test   esi,esi
c000603c:	74 4d                	je     c000608b <f_readdir+0x94>
c000603e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006042:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006048:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604e:	31 d2                	xor    edx,edx
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 80 d8 ff ff       	call   c00038d7 <dir_read>
c0006057:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000605c:	75 19                	jne    c0006077 <f_readdir+0x80>
c000605e:	89 fa                	mov    edx,edi
c0006060:	89 d8                	mov    eax,ebx
c0006062:	e8 7e ea ff ff       	call   c0004ae5 <get_fileinfo>
c0006067:	31 d2                	xor    edx,edx
c0006069:	89 d8                	mov    eax,ebx
c000606b:	e8 af d5 ff ff       	call   c000361f <dir_next>
c0006070:	83 f8 04             	cmp    eax,0x4
c0006073:	75 02                	jne    c0006077 <f_readdir+0x80>
c0006075:	31 c0                	xor    eax,eax
c0006077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000607b:	83 ec 0c             	sub    esp,0xc
c000607e:	56                   	push   esi
c000607f:	e8 68 25 00 00       	call   c00085ec <ff_memfree>
c0006084:	83 c4 10             	add    esp,0x10
c0006087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000608b:	83 c4 20             	add    esp,0x20
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	5f                   	pop    edi
c0006091:	c3                   	ret    

c0006092 <f_stat>:
c0006092:	57                   	push   edi
c0006093:	31 c9                	xor    ecx,ecx
c0006095:	56                   	push   esi
c0006096:	53                   	push   ebx
c0006097:	83 ec 50             	sub    esp,0x50
c000609a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000609e:	8d 54 24 04          	lea    edx,[esp+0x4]
c00060a2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00060a6:	e8 50 c5 ff ff       	call   c00025fb <mount_volume>
c00060ab:	89 c3                	mov    ebx,eax
c00060ad:	85 c0                	test   eax,eax
c00060af:	75 67                	jne    c0006118 <f_stat+0x86>
c00060b1:	83 ec 0c             	sub    esp,0xc
c00060b4:	bb 11 00 00 00       	mov    ebx,0x11
c00060b9:	68 60 04 00 00       	push   0x460
c00060be:	e8 11 25 00 00       	call   c00085d4 <ff_memalloc>
c00060c3:	83 c4 10             	add    esp,0x10
c00060c6:	89 c6                	mov    esi,eax
c00060c8:	85 c0                	test   eax,eax
c00060ca:	74 4c                	je     c0006118 <f_stat+0x86>
c00060cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060d0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060d6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060dc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e4:	e8 88 ec ff ff       	call   c0004d71 <follow_path>
c00060e9:	89 c3                	mov    ebx,eax
c00060eb:	85 c0                	test   eax,eax
c00060ed:	75 1d                	jne    c000610c <f_stat+0x7a>
c00060ef:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060f4:	78 11                	js     c0006107 <f_stat+0x75>
c00060f6:	85 ff                	test   edi,edi
c00060f8:	74 12                	je     c000610c <f_stat+0x7a>
c00060fa:	89 fa                	mov    edx,edi
c00060fc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006100:	e8 e0 e9 ff ff       	call   c0004ae5 <get_fileinfo>
c0006105:	eb 05                	jmp    c000610c <f_stat+0x7a>
c0006107:	bb 06 00 00 00       	mov    ebx,0x6
c000610c:	83 ec 0c             	sub    esp,0xc
c000610f:	56                   	push   esi
c0006110:	e8 d7 24 00 00       	call   c00085ec <ff_memfree>
c0006115:	83 c4 10             	add    esp,0x10
c0006118:	83 c4 50             	add    esp,0x50
c000611b:	89 d8                	mov    eax,ebx
c000611d:	5b                   	pop    ebx
c000611e:	5e                   	pop    esi
c000611f:	5f                   	pop    edi
c0006120:	c3                   	ret    

c0006121 <f_getfree>:
c0006121:	55                   	push   ebp
c0006122:	31 c9                	xor    ecx,ecx
c0006124:	57                   	push   edi
c0006125:	56                   	push   esi
c0006126:	53                   	push   ebx
c0006127:	83 ec 5c             	sub    esp,0x5c
c000612a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000612e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006132:	e8 c4 c4 ff ff       	call   c00025fb <mount_volume>
c0006137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000613b:	85 c0                	test   eax,eax
c000613d:	0f 85 9d 01 00 00    	jne    c00062e0 <f_getfree+0x1bf>
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000614b:	89 02                	mov    DWORD PTR [edx],eax
c000614d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006150:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006153:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006156:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000615a:	39 f2                	cmp    edx,esi
c000615c:	77 0b                	ja     c0006169 <f_getfree+0x48>
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 10                	mov    DWORD PTR [eax],edx
c0006164:	e9 77 01 00 00       	jmp    c00062e0 <f_getfree+0x1bf>
c0006169:	8a 10                	mov    dl,BYTE PTR [eax]
c000616b:	80 fa 01             	cmp    dl,0x1
c000616e:	75 3a                	jne    c00061aa <f_getfree+0x89>
c0006170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006174:	be 02 00 00 00       	mov    esi,0x2
c0006179:	31 db                	xor    ebx,ebx
c000617b:	89 f2                	mov    edx,esi
c000617d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006181:	e8 4b cd ff ff       	call   c0002ed1 <get_fat>
c0006186:	83 f8 ff             	cmp    eax,0xffffffff
c0006189:	0f 84 28 01 00 00    	je     c00062b7 <f_getfree+0x196>
c000618f:	83 f8 01             	cmp    eax,0x1
c0006192:	0f 84 29 01 00 00    	je     c00062c1 <f_getfree+0x1a0>
c0006198:	83 d3 00             	adc    ebx,0x0
c000619b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000619f:	46                   	inc    esi
c00061a0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00061a3:	77 d6                	ja     c000617b <f_getfree+0x5a>
c00061a5:	e9 25 01 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c00061aa:	80 fa 04             	cmp    dl,0x4
c00061ad:	0f 85 88 00 00 00    	jne    c000623b <f_getfree+0x11a>
c00061b3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061b6:	31 ed                	xor    ebp,ebp
c00061b8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061c3:	31 db                	xor    ebx,ebx
c00061c5:	85 ed                	test   ebp,ebp
c00061c7:	75 3f                	jne    c0006208 <f_getfree+0xe7>
c00061c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061d1:	83 c0 01             	add    eax,0x1
c00061d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061d8:	83 d2 00             	adc    edx,0x0
c00061db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061eb:	e8 59 c1 ff ff       	call   c0002349 <move_window>
c00061f0:	85 c0                	test   eax,eax
c00061f2:	0f 85 d3 00 00 00    	jne    c00062cb <f_getfree+0x1aa>
c00061f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006200:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006204:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006208:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000620c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000620f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006213:	89 cf                	mov    edi,ecx
c0006215:	85 f6                	test   esi,esi
c0006217:	74 12                	je     c000622b <f_getfree+0x10a>
c0006219:	88 c1                	mov    cl,al
c000621b:	83 e1 01             	and    ecx,0x1
c000621e:	80 f9 01             	cmp    cl,0x1
c0006221:	83 d3 00             	adc    ebx,0x0
c0006224:	d0 e8                	shr    al,1
c0006226:	4e                   	dec    esi
c0006227:	39 fe                	cmp    esi,edi
c0006229:	75 ea                	jne    c0006215 <f_getfree+0xf4>
c000622b:	45                   	inc    ebp
c000622c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006232:	85 f6                	test   esi,esi
c0006234:	75 8f                	jne    c00061c5 <f_getfree+0xa4>
c0006236:	e9 94 00 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c000623b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000623e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006241:	31 f6                	xor    esi,esi
c0006243:	31 db                	xor    ebx,ebx
c0006245:	85 f6                	test   esi,esi
c0006247:	75 1b                	jne    c0006264 <f_getfree+0x143>
c0006249:	89 d7                	mov    edi,edx
c000624b:	89 cd                	mov    ebp,ecx
c000624d:	83 c7 01             	add    edi,0x1
c0006250:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006254:	83 d5 00             	adc    ebp,0x0
c0006257:	e8 ed c0 ff ff       	call   c0002349 <move_window>
c000625c:	85 c0                	test   eax,eax
c000625e:	75 6b                	jne    c00062cb <f_getfree+0x1aa>
c0006260:	89 fa                	mov    edx,edi
c0006262:	89 e9                	mov    ecx,ebp
c0006264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006268:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000626c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006270:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006273:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006277:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000627b:	75 11                	jne    c000628e <f_getfree+0x16d>
c000627d:	e8 e9 b8 ff ff       	call   c0001b6b <ld_word>
c0006282:	66 83 f8 01          	cmp    ax,0x1
c0006286:	83 d3 00             	adc    ebx,0x0
c0006289:	83 c6 02             	add    esi,0x2
c000628c:	eb 13                	jmp    c00062a1 <f_getfree+0x180>
c000628e:	e8 e5 b8 ff ff       	call   c0001b78 <ld_dword>
c0006293:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006298:	83 f8 01             	cmp    eax,0x1
c000629b:	83 d3 00             	adc    ebx,0x0
c000629e:	83 c6 04             	add    esi,0x4
c00062a1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00062a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00062ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00062af:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062b3:	75 90                	jne    c0006245 <f_getfree+0x124>
c00062b5:	eb 18                	jmp    c00062cf <f_getfree+0x1ae>
c00062b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062bf:	eb 0e                	jmp    c00062cf <f_getfree+0x1ae>
c00062c1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062c9:	eb 04                	jmp    c00062cf <f_getfree+0x1ae>
c00062cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062d3:	89 18                	mov    DWORD PTR [eax],ebx
c00062d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062d9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062dc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062e4:	83 c4 5c             	add    esp,0x5c
c00062e7:	5b                   	pop    ebx
c00062e8:	5e                   	pop    esi
c00062e9:	5f                   	pop    edi
c00062ea:	5d                   	pop    ebp
c00062eb:	c3                   	ret    

c00062ec <f_truncate>:
c00062ec:	56                   	push   esi
c00062ed:	53                   	push   ebx
c00062ee:	83 ec 14             	sub    esp,0x14
c00062f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062f9:	89 d8                	mov    eax,ebx
c00062fb:	e8 6e bf ff ff       	call   c000226e <validate>
c0006300:	89 c6                	mov    esi,eax
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 d2 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c000630a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000630e:	85 f6                	test   esi,esi
c0006310:	0f 85 c6 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c0006316:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000631a:	0f 84 b7 00 00 00    	je     c00063d7 <f_truncate+0xeb>
c0006320:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006323:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006326:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006329:	89 d1                	mov    ecx,edx
c000632b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000632e:	0f 83 a8 00 00 00    	jae    c00063dc <f_truncate+0xf0>
c0006334:	09 c2                	or     edx,eax
c0006336:	75 15                	jne    c000634d <f_truncate+0x61>
c0006338:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000633b:	31 c9                	xor    ecx,ecx
c000633d:	89 d8                	mov    eax,ebx
c000633f:	e8 7a d0 ff ff       	call   c00033be <remove_chain>
c0006344:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000634b:	eb 35                	jmp    c0006382 <f_truncate+0x96>
c000634d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006350:	89 d8                	mov    eax,ebx
c0006352:	e8 7a cb ff ff       	call   c0002ed1 <get_fat>
c0006357:	89 c2                	mov    edx,eax
c0006359:	b8 01 00 00 00       	mov    eax,0x1
c000635e:	83 fa ff             	cmp    edx,0xffffffff
c0006361:	74 1f                	je     c0006382 <f_truncate+0x96>
c0006363:	b8 02 00 00 00       	mov    eax,0x2
c0006368:	83 fa 01             	cmp    edx,0x1
c000636b:	74 15                	je     c0006382 <f_truncate+0x96>
c000636d:	31 c0                	xor    eax,eax
c000636f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006373:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006376:	76 0a                	jbe    c0006382 <f_truncate+0x96>
c0006378:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000637b:	89 d8                	mov    eax,ebx
c000637d:	e8 3c d0 ff ff       	call   c00033be <remove_chain>
c0006382:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006385:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006388:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000638b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000638e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006391:	83 ca 40             	or     edx,0x40
c0006394:	85 c0                	test   eax,eax
c0006396:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006399:	75 35                	jne    c00063d0 <f_truncate+0xe4>
c000639b:	84 d2                	test   dl,dl
c000639d:	79 3d                	jns    c00063dc <f_truncate+0xf0>
c000639f:	83 ec 0c             	sub    esp,0xc
c00063a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00063a5:	6a 01                	push   0x1
c00063a7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00063aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00063ad:	50                   	push   eax
c00063ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063b2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063b6:	50                   	push   eax
c00063b7:	e8 7a b7 ff ff       	call   c0001b36 <disk_write>
c00063bc:	83 c4 20             	add    esp,0x20
c00063bf:	85 c0                	test   eax,eax
c00063c1:	75 08                	jne    c00063cb <f_truncate+0xdf>
c00063c3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063c7:	31 f6                	xor    esi,esi
c00063c9:	eb 11                	jmp    c00063dc <f_truncate+0xf0>
c00063cb:	b8 01 00 00 00       	mov    eax,0x1
c00063d0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063d3:	89 c6                	mov    esi,eax
c00063d5:	eb 05                	jmp    c00063dc <f_truncate+0xf0>
c00063d7:	be 07 00 00 00       	mov    esi,0x7
c00063dc:	89 f0                	mov    eax,esi
c00063de:	83 c4 14             	add    esp,0x14
c00063e1:	5b                   	pop    ebx
c00063e2:	5e                   	pop    esi
c00063e3:	c3                   	ret    

c00063e4 <f_unlink>:
c00063e4:	56                   	push   esi
c00063e5:	b9 02 00 00 00       	mov    ecx,0x2
c00063ea:	53                   	push   ebx
c00063eb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063f1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063f5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063fc:	e8 fa c1 ff ff       	call   c00025fb <mount_volume>
c0006401:	85 c0                	test   eax,eax
c0006403:	0f 85 55 01 00 00    	jne    c000655e <f_unlink+0x17a>
c0006409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000640d:	83 ec 0c             	sub    esp,0xc
c0006410:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006414:	68 60 04 00 00       	push   0x460
c0006419:	e8 b6 21 00 00       	call   c00085d4 <ff_memalloc>
c000641e:	83 c4 10             	add    esp,0x10
c0006421:	89 c3                	mov    ebx,eax
c0006423:	b8 11 00 00 00       	mov    eax,0x11
c0006428:	85 db                	test   ebx,ebx
c000642a:	0f 84 2e 01 00 00    	je     c000655e <f_unlink+0x17a>
c0006430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006434:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000643a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000643d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006440:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006447:	8d 44 24 48          	lea    eax,[esp+0x48]
c000644b:	e8 21 e9 ff ff       	call   c0004d71 <follow_path>
c0006450:	85 c0                	test   eax,eax
c0006452:	0f 85 f2 00 00 00    	jne    c000654a <f_unlink+0x166>
c0006458:	b8 06 00 00 00       	mov    eax,0x6
c000645d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006465:	0f 88 df 00 00 00    	js     c000654a <f_unlink+0x166>
c000646b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006470:	74 0a                	je     c000647c <f_unlink+0x98>
c0006472:	b8 07 00 00 00       	mov    eax,0x7
c0006477:	e9 ce 00 00 00       	jmp    c000654a <f_unlink+0x166>
c000647c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006480:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006484:	8a 02                	mov    al,BYTE PTR [edx]
c0006486:	3c 04                	cmp    al,0x4
c0006488:	75 12                	jne    c000649c <f_unlink+0xb8>
c000648a:	8d 42 10             	lea    eax,[edx+0x10]
c000648d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006491:	e8 a1 e8 ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0006496:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000649a:	eb 0e                	jmp    c00064aa <f_unlink+0xc6>
c000649c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00064a3:	e8 3e e8 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c00064a8:	89 c6                	mov    esi,eax
c00064aa:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00064af:	75 12                	jne    c00064c3 <f_unlink+0xdf>
c00064b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064b5:	e8 94 d6 ff ff       	call   c0003b4e <dir_remove>
c00064ba:	85 c0                	test   eax,eax
c00064bc:	74 6c                	je     c000652a <f_unlink+0x146>
c00064be:	e9 87 00 00 00       	jmp    c000654a <f_unlink+0x166>
c00064c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064ce:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064d5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064d8:	75 21                	jne    c00064fb <f_unlink+0x117>
c00064da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064e2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064e9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064f0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064f4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064fb:	31 d2                	xor    edx,edx
c00064fd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006504:	e8 be cb ff ff       	call   c00030c7 <dir_sdi>
c0006509:	85 c0                	test   eax,eax
c000650b:	75 3d                	jne    c000654a <f_unlink+0x166>
c000650d:	31 d2                	xor    edx,edx
c000650f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006516:	e8 bc d3 ff ff       	call   c00038d7 <dir_read>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 84 4f ff ff ff    	je     c0006472 <f_unlink+0x8e>
c0006523:	83 f8 04             	cmp    eax,0x4
c0006526:	75 22                	jne    c000654a <f_unlink+0x166>
c0006528:	eb 87                	jmp    c00064b1 <f_unlink+0xcd>
c000652a:	85 f6                	test   esi,esi
c000652c:	75 0b                	jne    c0006539 <f_unlink+0x155>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	e8 3d df ff ff       	call   c0004474 <sync_fs>
c0006537:	eb 11                	jmp    c000654a <f_unlink+0x166>
c0006539:	31 c9                	xor    ecx,ecx
c000653b:	89 f2                	mov    edx,esi
c000653d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006541:	e8 78 ce ff ff       	call   c00033be <remove_chain>
c0006546:	85 c0                	test   eax,eax
c0006548:	74 e4                	je     c000652e <f_unlink+0x14a>
c000654a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000654e:	83 ec 0c             	sub    esp,0xc
c0006551:	53                   	push   ebx
c0006552:	e8 95 20 00 00       	call   c00085ec <ff_memfree>
c0006557:	83 c4 10             	add    esp,0x10
c000655a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000655e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006564:	5b                   	pop    ebx
c0006565:	5e                   	pop    esi
c0006566:	c3                   	ret    

c0006567 <f_mkdir>:
c0006567:	57                   	push   edi
c0006568:	b9 02 00 00 00       	mov    ecx,0x2
c000656d:	56                   	push   esi
c000656e:	53                   	push   ebx
c000656f:	83 c4 80             	add    esp,0xffffff80
c0006572:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006576:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000657d:	e8 79 c0 ff ff       	call   c00025fb <mount_volume>
c0006582:	89 c3                	mov    ebx,eax
c0006584:	85 c0                	test   eax,eax
c0006586:	0f 85 fe 01 00 00    	jne    c000678a <f_mkdir+0x223>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	bb 11 00 00 00       	mov    ebx,0x11
c0006595:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006599:	83 ec 0c             	sub    esp,0xc
c000659c:	68 60 04 00 00       	push   0x460
c00065a1:	e8 2e 20 00 00       	call   c00085d4 <ff_memalloc>
c00065a6:	83 c4 10             	add    esp,0x10
c00065a9:	89 c7                	mov    edi,eax
c00065ab:	85 c0                	test   eax,eax
c00065ad:	0f 84 d7 01 00 00    	je     c000678a <f_mkdir+0x223>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065bd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065c3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065ce:	e8 9e e7 ff ff       	call   c0004d71 <follow_path>
c00065d3:	89 c3                	mov    ebx,eax
c00065d5:	85 c0                	test   eax,eax
c00065d7:	74 3e                	je     c0006617 <f_mkdir+0xb0>
c00065d9:	83 f8 04             	cmp    eax,0x4
c00065dc:	75 3e                	jne    c000661c <f_mkdir+0xb5>
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	31 d2                	xor    edx,edx
c00065e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065ec:	e8 ce cb ff ff       	call   c00031bf <create_chain>
c00065f1:	89 c6                	mov    esi,eax
c00065f3:	85 c0                	test   eax,eax
c00065f5:	74 0c                	je     c0006603 <f_mkdir+0x9c>
c00065f7:	bb 02 00 00 00       	mov    ebx,0x2
c00065fc:	83 f8 01             	cmp    eax,0x1
c00065ff:	74 07                	je     c0006608 <f_mkdir+0xa1>
c0006601:	eb 2a                	jmp    c000662d <f_mkdir+0xc6>
c0006603:	bb 07 00 00 00       	mov    ebx,0x7
c0006608:	31 c9                	xor    ecx,ecx
c000660a:	89 f2                	mov    edx,esi
c000660c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006610:	e8 a9 cd ff ff       	call   c00033be <remove_chain>
c0006615:	eb 05                	jmp    c000661c <f_mkdir+0xb5>
c0006617:	bb 08 00 00 00       	mov    ebx,0x8
c000661c:	83 ec 0c             	sub    esp,0xc
c000661f:	57                   	push   edi
c0006620:	e8 c7 1f 00 00       	call   c00085ec <ff_memfree>
c0006625:	83 c4 10             	add    esp,0x10
c0006628:	e9 5d 01 00 00       	jmp    c000678a <f_mkdir+0x223>
c000662d:	bb 01 00 00 00       	mov    ebx,0x1
c0006632:	83 f8 ff             	cmp    eax,0xffffffff
c0006635:	74 d1                	je     c0006608 <f_mkdir+0xa1>
c0006637:	89 f2                	mov    edx,esi
c0006639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663d:	e8 c4 ce ff ff       	call   c0003506 <dir_clear>
c0006642:	89 c3                	mov    ebx,eax
c0006644:	85 c0                	test   eax,eax
c0006646:	75 c0                	jne    c0006608 <f_mkdir+0xa1>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000664f:	74 69                	je     c00066ba <f_mkdir+0x153>
c0006651:	b9 0b 00 00 00       	mov    ecx,0xb
c0006656:	83 c0 54             	add    eax,0x54
c0006659:	ba 20 00 00 00       	mov    edx,0x20
c000665e:	e8 9c b5 ff ff       	call   c0001bff <mem_set>
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	ba 00 00 21 50       	mov    edx,0x50210000
c000666c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006670:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006674:	83 c0 6a             	add    eax,0x6a
c0006677:	e8 65 b5 ff ff       	call   c0001be1 <st_dword>
c000667c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006680:	89 f1                	mov    ecx,esi
c0006682:	8d 50 54             	lea    edx,[eax+0x54]
c0006685:	e8 85 e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	b9 20 00 00 00       	mov    ecx,0x20
c0006693:	8d 50 54             	lea    edx,[eax+0x54]
c0006696:	83 c0 74             	add    eax,0x74
c0006699:	e8 4c b5 ff ff       	call   c0001bea <mem_cpy>
c000669e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00066a6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00066aa:	8d 50 74             	lea    edx,[eax+0x74]
c00066ad:	e8 5d e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c00066b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066be:	e8 2f db ff ff       	call   c00041f2 <dir_register>
c00066c3:	89 c3                	mov    ebx,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 85 3b ff ff ff    	jne    c0006608 <f_mkdir+0xa1>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d4:	75 74                	jne    c000674a <f_mkdir+0x1e3>
c00066d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066de:	83 c0 0c             	add    eax,0xc
c00066e1:	e8 fb b4 ff ff       	call   c0001be1 <st_dword>
c00066e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ea:	89 f2                	mov    edx,esi
c00066ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ef:	83 c0 34             	add    eax,0x34
c00066f2:	e8 ea b4 ff ff       	call   c0001be1 <st_dword>
c00066f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	c1 e2 09             	shl    edx,0x9
c0006705:	83 c0 38             	add    eax,0x38
c0006708:	e8 d4 b4 ff ff       	call   c0001be1 <st_dword>
c000670d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006711:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006715:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006718:	c1 e2 09             	shl    edx,0x9
c000671b:	83 c0 28             	add    eax,0x28
c000671e:	e8 be b4 ff ff       	call   c0001be1 <st_dword>
c0006723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006727:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000672a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000672e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006731:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006735:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006739:	e8 8b d3 ff ff       	call   c0003ac9 <store_xdir>
c000673e:	89 c3                	mov    ebx,eax
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 d4 fe ff ff    	jne    c000661c <f_mkdir+0xb5>
c0006748:	eb 30                	jmp    c000677a <f_mkdir+0x213>
c000674a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000674e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006753:	83 c0 16             	add    eax,0x16
c0006756:	e8 86 b4 ff ff       	call   c0001be1 <st_dword>
c000675b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675f:	89 f1                	mov    ecx,esi
c0006761:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006765:	e8 a5 e5 ff ff       	call   c0004d0f <st_clust.isra.1>
c000676a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000676e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	e8 f1 dc ff ff       	call   c0004474 <sync_fs>
c0006783:	89 c3                	mov    ebx,eax
c0006785:	e9 92 fe ff ff       	jmp    c000661c <f_mkdir+0xb5>
c000678a:	83 ec 80             	sub    esp,0xffffff80
c000678d:	89 d8                	mov    eax,ebx
c000678f:	5b                   	pop    ebx
c0006790:	5e                   	pop    esi
c0006791:	5f                   	pop    edi
c0006792:	c3                   	ret    

c0006793 <f_rename>:
c0006793:	55                   	push   ebp
c0006794:	57                   	push   edi
c0006795:	56                   	push   esi
c0006796:	53                   	push   ebx
c0006797:	81 ec fc 00 00 00    	sub    esp,0xfc
c000679d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00067a4:	e8 a4 b9 ff ff       	call   c000214d <get_ldnumber>
c00067a9:	b9 02 00 00 00       	mov    ecx,0x2
c00067ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067b2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067b9:	e8 3d be ff ff       	call   c00025fb <mount_volume>
c00067be:	85 c0                	test   eax,eax
c00067c0:	0f 85 b5 02 00 00    	jne    c0006a7b <f_rename+0x2e8>
c00067c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ca:	83 ec 0c             	sub    esp,0xc
c00067cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067d1:	68 60 04 00 00       	push   0x460
c00067d6:	e8 f9 1d 00 00       	call   c00085d4 <ff_memalloc>
c00067db:	83 c4 10             	add    esp,0x10
c00067de:	89 c3                	mov    ebx,eax
c00067e0:	b8 11 00 00 00       	mov    eax,0x11
c00067e5:	85 db                	test   ebx,ebx
c00067e7:	0f 84 8e 02 00 00    	je     c0006a7b <f_rename+0x2e8>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067f7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067fd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006804:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006808:	e8 64 e5 ff ff       	call   c0004d71 <follow_path>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 85 52 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006815:	b8 06 00 00 00       	mov    eax,0x6
c000681a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006822:	0f 85 3f 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000682f:	0f 85 05 01 00 00    	jne    c000693a <f_rename+0x1a7>
c0006835:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006838:	b9 40 00 00 00       	mov    ecx,0x40
c000683d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006841:	e8 a4 b3 ff ff       	call   c0001bea <mem_cpy>
c0006846:	b9 4c 00 00 00       	mov    ecx,0x4c
c000684b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000684f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006856:	e8 8f b3 ff ff       	call   c0001bea <mem_cpy>
c000685b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006862:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006869:	e8 03 e5 ff ff       	call   c0004d71 <follow_path>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 29                	jne    c000689b <f_rename+0x108>
c0006872:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006876:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000687d:	74 0a                	je     c0006889 <f_rename+0xf6>
c000687f:	b8 08 00 00 00       	mov    eax,0x8
c0006884:	e9 de 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c0006889:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006890:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006897:	75 e6                	jne    c000687f <f_rename+0xec>
c0006899:	eb 09                	jmp    c00068a4 <f_rename+0x111>
c000689b:	83 f8 04             	cmp    eax,0x4
c000689e:	0f 85 c3 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068a4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068ab:	e8 42 d9 ff ff       	call   c00041f2 <dir_register>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	0f 85 af 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068bf:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068c2:	89 c5                	mov    ebp,eax
c00068c4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068cb:	8d 46 24             	lea    eax,[esi+0x24]
c00068ce:	e8 98 b2 ff ff       	call   c0001b6b <ld_word>
c00068d3:	b9 40 00 00 00       	mov    ecx,0x40
c00068d8:	89 c7                	mov    edi,eax
c00068da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068de:	89 f0                	mov    eax,esi
c00068e0:	e8 05 b3 ff ff       	call   c0001bea <mem_cpy>
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	89 e9                	mov    ecx,ebp
c00068eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ee:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068f1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ff:	0f b7 d7             	movzx  edx,di
c0006902:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006905:	83 c0 24             	add    eax,0x24
c0006908:	e8 d0 b2 ff ff       	call   c0001bdd <st_word>
c000690d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006911:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006914:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006917:	a8 10                	test   al,0x10
c0006919:	75 06                	jne    c0006921 <f_rename+0x18e>
c000691b:	83 c8 20             	or     eax,0x20
c000691e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006921:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006928:	e8 9c d1 ff ff       	call   c0003ac9 <store_xdir>
c000692d:	85 c0                	test   eax,eax
c000692f:	0f 84 1c 01 00 00    	je     c0006a51 <f_rename+0x2be>
c0006935:	e9 2d 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c000693a:	b9 20 00 00 00       	mov    ecx,0x20
c000693f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006946:	8d 44 24 18          	lea    eax,[esp+0x18]
c000694a:	e8 9b b2 ff ff       	call   c0001bea <mem_cpy>
c000694f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006954:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 86 b2 ff ff       	call   c0001bea <mem_cpy>
c0006964:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000696b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006972:	e8 fa e3 ff ff       	call   c0004d71 <follow_path>
c0006977:	85 c0                	test   eax,eax
c0006979:	75 27                	jne    c00069a2 <f_rename+0x20f>
c000697b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000697f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006986:	0f 85 f3 fe ff ff    	jne    c000687f <f_rename+0xec>
c000698c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006993:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000699a:	0f 85 df fe ff ff    	jne    c000687f <f_rename+0xec>
c00069a0:	eb 09                	jmp    c00069ab <f_rename+0x218>
c00069a2:	83 f8 04             	cmp    eax,0x4
c00069a5:	0f 85 bc 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069ab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069b2:	e8 3b d8 ff ff       	call   c00041f2 <dir_register>
c00069b7:	85 c0                	test   eax,eax
c00069b9:	0f 85 a8 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069bf:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069c6:	b9 13 00 00 00       	mov    ecx,0x13
c00069cb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069ce:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069d2:	e8 13 b2 ff ff       	call   c0001bea <mem_cpy>
c00069d7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069db:	a8 10                	test   al,0x10
c00069dd:	75 03                	jne    c00069e2 <f_rename+0x24f>
c00069df:	83 c8 20             	or     eax,0x20
c00069e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069ed:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069f1:	74 5e                	je     c0006a51 <f_rename+0x2be>
c00069f3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069fa:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069fe:	74 51                	je     c0006a51 <f_rename+0x2be>
c0006a00:	89 f2                	mov    edx,esi
c0006a02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006a06:	8a 07                	mov    al,BYTE PTR [edi]
c0006a08:	e8 d9 e2 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0006a0d:	89 c2                	mov    edx,eax
c0006a0f:	89 f8                	mov    eax,edi
c0006a11:	e8 ee b3 ff ff       	call   c0001e04 <clst2sect>
c0006a16:	89 c6                	mov    esi,eax
c0006a18:	89 d1                	mov    ecx,edx
c0006a1a:	b8 02 00 00 00       	mov    eax,0x2
c0006a1f:	09 f2                	or     edx,esi
c0006a21:	74 44                	je     c0006a67 <f_rename+0x2d4>
c0006a23:	89 f2                	mov    edx,esi
c0006a25:	89 f8                	mov    eax,edi
c0006a27:	e8 1d b9 ff ff       	call   c0002349 <move_window>
c0006a2c:	85 c0                	test   eax,eax
c0006a2e:	75 37                	jne    c0006a67 <f_rename+0x2d4>
c0006a30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a34:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a38:	75 17                	jne    c0006a51 <f_rename+0x2be>
c0006a3a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a3d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a44:	e8 c6 e2 ff ff       	call   c0004d0f <st_clust.isra.1>
c0006a49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a51:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a55:	e8 f4 d0 ff ff       	call   c0003b4e <dir_remove>
c0006a5a:	85 c0                	test   eax,eax
c0006a5c:	75 09                	jne    c0006a67 <f_rename+0x2d4>
c0006a5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a62:	e8 0d da ff ff       	call   c0004474 <sync_fs>
c0006a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	53                   	push   ebx
c0006a6f:	e8 78 1b 00 00       	call   c00085ec <ff_memfree>
c0006a74:	83 c4 10             	add    esp,0x10
c0006a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a7b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a81:	5b                   	pop    ebx
c0006a82:	5e                   	pop    esi
c0006a83:	5f                   	pop    edi
c0006a84:	5d                   	pop    ebp
c0006a85:	c3                   	ret    

c0006a86 <f_chmod>:
c0006a86:	57                   	push   edi
c0006a87:	b9 02 00 00 00       	mov    ecx,0x2
c0006a8c:	56                   	push   esi
c0006a8d:	53                   	push   ebx
c0006a8e:	83 ec 60             	sub    esp,0x60
c0006a91:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a95:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a99:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a9d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006aa1:	e8 55 bb ff ff       	call   c00025fb <mount_volume>
c0006aa6:	85 c0                	test   eax,eax
c0006aa8:	0f 85 af 00 00 00    	jne    c0006b5d <f_chmod+0xd7>
c0006aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab2:	83 ec 0c             	sub    esp,0xc
c0006ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006ab9:	68 60 04 00 00       	push   0x460
c0006abe:	e8 11 1b 00 00       	call   c00085d4 <ff_memalloc>
c0006ac3:	83 c4 10             	add    esp,0x10
c0006ac6:	89 c6                	mov    esi,eax
c0006ac8:	b8 11 00 00 00       	mov    eax,0x11
c0006acd:	85 f6                	test   esi,esi
c0006acf:	0f 84 88 00 00 00    	je     c0006b5d <f_chmod+0xd7>
c0006ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006adf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ae2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ae5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ae9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aed:	e8 7f e2 ff ff       	call   c0004d71 <follow_path>
c0006af2:	85 c0                	test   eax,eax
c0006af4:	75 53                	jne    c0006b49 <f_chmod+0xc3>
c0006af6:	b8 06 00 00 00       	mov    eax,0x6
c0006afb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006b00:	75 47                	jne    c0006b49 <f_chmod+0xc3>
c0006b02:	89 f9                	mov    ecx,edi
c0006b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b08:	83 e1 27             	and    ecx,0x27
c0006b0b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b0e:	75 1d                	jne    c0006b2d <f_chmod+0xa7>
c0006b10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b13:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b16:	21 cb                	and    ebx,ecx
c0006b18:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b1b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b22:	e8 a2 cf ff ff       	call   c0003ac9 <store_xdir>
c0006b27:	85 c0                	test   eax,eax
c0006b29:	75 1e                	jne    c0006b49 <f_chmod+0xc3>
c0006b2b:	eb 13                	jmp    c0006b40 <f_chmod+0xba>
c0006b2d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b31:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b34:	21 cb                	and    ebx,ecx
c0006b36:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b39:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b3c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b44:	e8 2b d9 ff ff       	call   c0004474 <sync_fs>
c0006b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b4d:	83 ec 0c             	sub    esp,0xc
c0006b50:	56                   	push   esi
c0006b51:	e8 96 1a 00 00       	call   c00085ec <ff_memfree>
c0006b56:	83 c4 10             	add    esp,0x10
c0006b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b5d:	83 c4 60             	add    esp,0x60
c0006b60:	5b                   	pop    ebx
c0006b61:	5e                   	pop    esi
c0006b62:	5f                   	pop    edi
c0006b63:	c3                   	ret    

c0006b64 <f_utime>:
c0006b64:	56                   	push   esi
c0006b65:	b9 02 00 00 00       	mov    ecx,0x2
c0006b6a:	53                   	push   ebx
c0006b6b:	83 ec 64             	sub    esp,0x64
c0006b6e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b72:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b76:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b7a:	e8 7c ba ff ff       	call   c00025fb <mount_volume>
c0006b7f:	85 c0                	test   eax,eax
c0006b81:	0f 85 b5 00 00 00    	jne    c0006c3c <f_utime+0xd8>
c0006b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8b:	83 ec 0c             	sub    esp,0xc
c0006b8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b92:	68 60 04 00 00       	push   0x460
c0006b97:	e8 38 1a 00 00       	call   c00085d4 <ff_memalloc>
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	89 c3                	mov    ebx,eax
c0006ba1:	b8 11 00 00 00       	mov    eax,0x11
c0006ba6:	85 db                	test   ebx,ebx
c0006ba8:	0f 84 8e 00 00 00    	je     c0006c3c <f_utime+0xd8>
c0006bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006bb8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bbb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc6:	e8 a6 e1 ff ff       	call   c0004d71 <follow_path>
c0006bcb:	85 c0                	test   eax,eax
c0006bcd:	75 59                	jne    c0006c28 <f_utime+0xc4>
c0006bcf:	b8 06 00 00 00       	mov    eax,0x6
c0006bd4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd9:	75 4d                	jne    c0006c28 <f_utime+0xc4>
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006be3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006be7:	c1 e2 10             	shl    edx,0x10
c0006bea:	09 ca                	or     edx,ecx
c0006bec:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bef:	75 1a                	jne    c0006c0b <f_utime+0xa7>
c0006bf1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bf4:	83 c0 0c             	add    eax,0xc
c0006bf7:	e8 e5 af ff ff       	call   c0001be1 <st_dword>
c0006bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c00:	e8 c4 ce ff ff       	call   c0003ac9 <store_xdir>
c0006c05:	85 c0                	test   eax,eax
c0006c07:	75 1f                	jne    c0006c28 <f_utime+0xc4>
c0006c09:	eb 14                	jmp    c0006c1f <f_utime+0xbb>
c0006c0b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006c0f:	83 c0 16             	add    eax,0x16
c0006c12:	e8 ca af ff ff       	call   c0001be1 <st_dword>
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c23:	e8 4c d8 ff ff       	call   c0004474 <sync_fs>
c0006c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2c:	83 ec 0c             	sub    esp,0xc
c0006c2f:	53                   	push   ebx
c0006c30:	e8 b7 19 00 00       	call   c00085ec <ff_memfree>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c3c:	83 c4 64             	add    esp,0x64
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	c3                   	ret    

c0006c42 <f_getlabel>:
c0006c42:	55                   	push   ebp
c0006c43:	31 c9                	xor    ecx,ecx
c0006c45:	57                   	push   edi
c0006c46:	56                   	push   esi
c0006c47:	53                   	push   ebx
c0006c48:	83 ec 6c             	sub    esp,0x6c
c0006c4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c56:	e8 a0 b9 ff ff       	call   c00025fb <mount_volume>
c0006c5b:	89 c6                	mov    esi,eax
c0006c5d:	85 c0                	test   eax,eax
c0006c5f:	0f 85 c1 01 00 00    	jne    c0006e26 <f_getlabel+0x1e4>
c0006c65:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c6d:	0f 84 5f 01 00 00    	je     c0006dd2 <f_getlabel+0x190>
c0006c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c77:	31 d2                	xor    edx,edx
c0006c79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c89:	e8 39 c4 ff ff       	call   c00030c7 <dir_sdi>
c0006c8e:	85 c0                	test   eax,eax
c0006c90:	0f 85 2d 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006c96:	ba 01 00 00 00       	mov    edx,0x1
c0006c9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9f:	e8 33 cc ff ff       	call   c00038d7 <dir_read>
c0006ca4:	85 c0                	test   eax,eax
c0006ca6:	0f 85 17 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cb3:	74 09                	je     c0006cbe <f_getlabel+0x7c>
c0006cb5:	31 db                	xor    ebx,ebx
c0006cb7:	31 c9                	xor    ecx,ecx
c0006cb9:	e9 c8 00 00 00       	jmp    c0006d86 <f_getlabel+0x144>
c0006cbe:	31 ed                	xor    ebp,ebp
c0006cc0:	31 db                	xor    ebx,ebx
c0006cc2:	31 ff                	xor    edi,edi
c0006cc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cc8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ccc:	39 fa                	cmp    edx,edi
c0006cce:	76 4b                	jbe    c0006d1b <f_getlabel+0xd9>
c0006cd0:	47                   	inc    edi
c0006cd1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cd4:	01 d0                	add    eax,edx
c0006cd6:	e8 90 ae ff ff       	call   c0001b6b <ld_word>
c0006cdb:	66 85 ed             	test   bp,bp
c0006cde:	75 0d                	jne    c0006ced <f_getlabel+0xab>
c0006ce0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ce6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ceb:	76 28                	jbe    c0006d15 <f_getlabel+0xd3>
c0006ced:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cf4:	89 e9                	mov    ecx,ebp
c0006cf6:	01 da                	add    edx,ebx
c0006cf8:	c1 e1 10             	shl    ecx,0x10
c0006cfb:	0f b7 c0             	movzx  eax,ax
c0006cfe:	09 c8                	or     eax,ecx
c0006d00:	b9 04 00 00 00       	mov    ecx,0x4
c0006d05:	e8 01 b0 ff ff       	call   c0001d0b <put_utf>
c0006d0a:	84 c0                	test   al,al
c0006d0c:	74 0b                	je     c0006d19 <f_getlabel+0xd7>
c0006d0e:	0f b6 c0             	movzx  eax,al
c0006d11:	01 c3                	add    ebx,eax
c0006d13:	31 c0                	xor    eax,eax
c0006d15:	89 c5                	mov    ebp,eax
c0006d17:	eb ab                	jmp    c0006cc4 <f_getlabel+0x82>
c0006d19:	31 db                	xor    ebx,ebx
c0006d1b:	66 85 ed             	test   bp,bp
c0006d1e:	74 02                	je     c0006d22 <f_getlabel+0xe0>
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d29:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d2d:	e9 a0 00 00 00       	jmp    c0006dd2 <f_getlabel+0x190>
c0006d32:	83 ff 0b             	cmp    edi,0xb
c0006d35:	74 11                	je     c0006d48 <f_getlabel+0x106>
c0006d37:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d40:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d43:	c1 e0 08             	shl    eax,0x8
c0006d46:	09 c2                	or     edx,eax
c0006d48:	0f b7 d2             	movzx  edx,dx
c0006d4b:	50                   	push   eax
c0006d4c:	50                   	push   eax
c0006d4d:	68 b5 01 00 00       	push   0x1b5
c0006d52:	52                   	push   edx
c0006d53:	e8 44 19 00 00       	call   c000869c <ff_oem2uni>
c0006d58:	83 c4 10             	add    esp,0x10
c0006d5b:	66 85 c0             	test   ax,ax
c0006d5e:	74 46                	je     c0006da6 <f_getlabel+0x164>
c0006d60:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d67:	0f b7 c0             	movzx  eax,ax
c0006d6a:	01 da                	add    edx,ebx
c0006d6c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d71:	e8 95 af ff ff       	call   c0001d0b <put_utf>
c0006d76:	84 c0                	test   al,al
c0006d78:	74 2c                	je     c0006da6 <f_getlabel+0x164>
c0006d7a:	0f b6 c0             	movzx  eax,al
c0006d7d:	01 c3                	add    ebx,eax
c0006d7f:	83 ff 0b             	cmp    edi,0xb
c0006d82:	74 24                	je     c0006da8 <f_getlabel+0x166>
c0006d84:	89 f9                	mov    ecx,edi
c0006d86:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d8a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d8d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d92:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d9b:	e8 9f ae ff ff       	call   c0001c3f <dbc_1st>
c0006da0:	85 c0                	test   eax,eax
c0006da2:	74 a4                	je     c0006d48 <f_getlabel+0x106>
c0006da4:	eb 8c                	jmp    c0006d32 <f_getlabel+0xf0>
c0006da6:	31 db                	xor    ebx,ebx
c0006da8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006daf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006db2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006db9:	74 17                	je     c0006dd2 <f_getlabel+0x190>
c0006dbb:	4b                   	dec    ebx
c0006dbc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006dbf:	74 ee                	je     c0006daf <f_getlabel+0x16d>
c0006dc1:	eb 0f                	jmp    c0006dd2 <f_getlabel+0x190>
c0006dc3:	83 f8 04             	cmp    eax,0x4
c0006dc6:	75 5c                	jne    c0006e24 <f_getlabel+0x1e2>
c0006dc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dcf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dd2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dda:	74 4a                	je     c0006e26 <f_getlabel+0x1e4>
c0006ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006de3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006de6:	e8 5e b5 ff ff       	call   c0002349 <move_window>
c0006deb:	89 c6                	mov    esi,eax
c0006ded:	85 c0                	test   eax,eax
c0006def:	75 35                	jne    c0006e26 <f_getlabel+0x1e4>
c0006df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006df5:	b8 43 00 00 00       	mov    eax,0x43
c0006dfa:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dfc:	80 f9 03             	cmp    cl,0x3
c0006dff:	74 0f                	je     c0006e10 <f_getlabel+0x1ce>
c0006e01:	31 c0                	xor    eax,eax
c0006e03:	80 f9 04             	cmp    cl,0x4
c0006e06:	0f 94 c0             	sete   al
c0006e09:	48                   	dec    eax
c0006e0a:	83 e0 c3             	and    eax,0xffffffc3
c0006e0d:	83 c0 64             	add    eax,0x64
c0006e10:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e14:	e8 5f ad ff ff       	call   c0001b78 <ld_dword>
c0006e19:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e20:	89 07                	mov    DWORD PTR [edi],eax
c0006e22:	eb 02                	jmp    c0006e26 <f_getlabel+0x1e4>
c0006e24:	89 c6                	mov    esi,eax
c0006e26:	83 c4 6c             	add    esp,0x6c
c0006e29:	89 f0                	mov    eax,esi
c0006e2b:	5b                   	pop    ebx
c0006e2c:	5e                   	pop    esi
c0006e2d:	5f                   	pop    edi
c0006e2e:	5d                   	pop    ebp
c0006e2f:	c3                   	ret    

c0006e30 <f_setlabel>:
c0006e30:	56                   	push   esi
c0006e31:	b9 02 00 00 00       	mov    ecx,0x2
c0006e36:	53                   	push   ebx
c0006e37:	83 ec 74             	sub    esp,0x74
c0006e3a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e3e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e45:	e8 b1 b7 ff ff       	call   c00025fb <mount_volume>
c0006e4a:	89 c6                	mov    esi,eax
c0006e4c:	85 c0                	test   eax,eax
c0006e4e:	0f 85 41 02 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e58:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e5b:	0f 85 8e 00 00 00    	jne    c0006eef <f_setlabel+0xbf>
c0006e61:	b9 16 00 00 00       	mov    ecx,0x16
c0006e66:	31 d2                	xor    edx,edx
c0006e68:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e6c:	31 db                	xor    ebx,ebx
c0006e6e:	e8 8c ad ff ff       	call   c0001bff <mem_set>
c0006e73:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e7d:	0f 86 0a 01 00 00    	jbe    c0006f8d <f_setlabel+0x15d>
c0006e83:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e8a:	e8 b6 ad ff ff       	call   c0001c45 <tchar2uni>
c0006e8f:	89 c6                	mov    esi,eax
c0006e91:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e96:	76 2a                	jbe    c0006ec2 <f_setlabel+0x92>
c0006e98:	83 f8 ff             	cmp    eax,0xffffffff
c0006e9b:	74 05                	je     c0006ea2 <f_setlabel+0x72>
c0006e9d:	83 fb 09             	cmp    ebx,0x9
c0006ea0:	76 0a                	jbe    c0006eac <f_setlabel+0x7c>
c0006ea2:	be 06 00 00 00       	mov    esi,0x6
c0006ea7:	e9 e9 01 00 00       	jmp    c0007095 <f_setlabel+0x265>
c0006eac:	89 c2                	mov    edx,eax
c0006eae:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006eb5:	c1 ea 10             	shr    edx,0x10
c0006eb8:	01 c8                	add    eax,ecx
c0006eba:	43                   	inc    ebx
c0006ebb:	e8 1d ad ff ff       	call   c0001bdd <st_word>
c0006ec0:	eb 04                	jmp    c0006ec6 <f_setlabel+0x96>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	74 dc                	je     c0006ea2 <f_setlabel+0x72>
c0006ec6:	89 f2                	mov    edx,esi
c0006ec8:	b8 17 40 02 c0       	mov    eax,0xc0024017
c0006ecd:	e8 5b ad ff ff       	call   c0001c2d <chk_chr>
c0006ed2:	85 c0                	test   eax,eax
c0006ed4:	75 cc                	jne    c0006ea2 <f_setlabel+0x72>
c0006ed6:	83 fb 0a             	cmp    ebx,0xa
c0006ed9:	77 c7                	ja     c0006ea2 <f_setlabel+0x72>
c0006edb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ede:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ee2:	0f b7 d6             	movzx  edx,si
c0006ee5:	01 c8                	add    eax,ecx
c0006ee7:	43                   	inc    ebx
c0006ee8:	e8 f0 ac ff ff       	call   c0001bdd <st_word>
c0006eed:	eb 84                	jmp    c0006e73 <f_setlabel+0x43>
c0006eef:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ef4:	ba 20 00 00 00       	mov    edx,0x20
c0006ef9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006efd:	31 db                	xor    ebx,ebx
c0006eff:	e8 fb ac ff ff       	call   c0001bff <mem_set>
c0006f04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f0e:	76 60                	jbe    c0006f70 <f_setlabel+0x140>
c0006f10:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f17:	e8 29 ad ff ff       	call   c0001c45 <tchar2uni>
c0006f1c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f21:	0f 87 7b ff ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0006f27:	83 ec 0c             	sub    esp,0xc
c0006f2a:	50                   	push   eax
c0006f2b:	e8 e0 17 00 00       	call   c0008710 <ff_wtoupper>
c0006f30:	5a                   	pop    edx
c0006f31:	59                   	pop    ecx
c0006f32:	68 b5 01 00 00       	push   0x1b5
c0006f37:	50                   	push   eax
c0006f38:	e8 c7 16 00 00       	call   c0008604 <ff_uni2oem>
c0006f3d:	83 c4 10             	add    esp,0x10
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	66 85 c0             	test   ax,ax
c0006f45:	0f 84 57 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f4b:	0f b7 d0             	movzx  edx,ax
c0006f4e:	b8 10 40 02 c0       	mov    eax,0xc0024010
c0006f53:	e8 d5 ac ff ff       	call   c0001c2d <chk_chr>
c0006f58:	85 c0                	test   eax,eax
c0006f5a:	0f 85 42 ff ff ff    	jne    c0006ea2 <f_setlabel+0x72>
c0006f60:	66 81 fe ff 00       	cmp    si,0xff
c0006f65:	0f 87 14 01 00 00    	ja     c000707f <f_setlabel+0x24f>
c0006f6b:	e9 fa 00 00 00       	jmp    c000706a <f_setlabel+0x23a>
c0006f70:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f75:	0f 84 27 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f7b:	85 db                	test   ebx,ebx
c0006f7d:	74 0e                	je     c0006f8d <f_setlabel+0x15d>
c0006f7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f82:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f87:	75 04                	jne    c0006f8d <f_setlabel+0x15d>
c0006f89:	89 c3                	mov    ebx,eax
c0006f8b:	eb ee                	jmp    c0006f7b <f_setlabel+0x14b>
c0006f8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f91:	31 d2                	xor    edx,edx
c0006f93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 1f c1 ff ff       	call   c00030c7 <dir_sdi>
c0006fa8:	89 c6                	mov    esi,eax
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 85 e3 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006fb2:	ba 01 00 00 00       	mov    edx,0x1
c0006fb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fbb:	e8 17 c9 ff ff       	call   c00038d7 <dir_read>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	75 21                	jne    c0006fe5 <f_setlabel+0x1b5>
c0006fc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fc8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fcc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fcf:	74 5d                	je     c000702e <f_setlabel+0x1fe>
c0006fd1:	85 db                	test   ebx,ebx
c0006fd3:	74 0b                	je     c0006fe0 <f_setlabel+0x1b0>
c0006fd5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fda:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fde:	eb 70                	jmp    c0007050 <f_setlabel+0x220>
c0006fe0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fe3:	eb 70                	jmp    c0007055 <f_setlabel+0x225>
c0006fe5:	83 f8 04             	cmp    eax,0x4
c0006fe8:	75 7c                	jne    c0007066 <f_setlabel+0x236>
c0006fea:	85 db                	test   ebx,ebx
c0006fec:	0f 84 a3 00 00 00    	je     c0007095 <f_setlabel+0x265>
c0006ff2:	ba 01 00 00 00       	mov    edx,0x1
c0006ff7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ffb:	e8 51 ca ff ff       	call   c0003a51 <dir_alloc>
c0007000:	89 c6                	mov    esi,eax
c0007002:	85 c0                	test   eax,eax
c0007004:	0f 85 8b 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c000700a:	31 d2                	xor    edx,edx
c000700c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007010:	b9 20 00 00 00       	mov    ecx,0x20
c0007015:	e8 e5 ab ff ff       	call   c0001bff <mem_set>
c000701a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000701e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007021:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007025:	75 18                	jne    c000703f <f_setlabel+0x20f>
c0007027:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000702a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007031:	b9 16 00 00 00       	mov    ecx,0x16
c0007036:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000703a:	83 c0 02             	add    eax,0x2
c000703d:	eb 9b                	jmp    c0006fda <f_setlabel+0x1aa>
c000703f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007043:	b9 0b 00 00 00       	mov    ecx,0xb
c0007048:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000704c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007050:	e8 95 ab ff ff       	call   c0001bea <mem_cpy>
c0007055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007059:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000705d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007061:	e8 0e d4 ff ff       	call   c0004474 <sync_fs>
c0007066:	89 c6                	mov    esi,eax
c0007068:	eb 2b                	jmp    c0007095 <f_setlabel+0x265>
c000706a:	83 fb 0a             	cmp    ebx,0xa
c000706d:	0f 87 2f fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007073:	89 f0                	mov    eax,esi
c0007075:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007079:	43                   	inc    ebx
c000707a:	e9 85 fe ff ff       	jmp    c0006f04 <f_setlabel+0xd4>
c000707f:	83 fb 09             	cmp    ebx,0x9
c0007082:	0f 87 1a fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007088:	89 f0                	mov    eax,esi
c000708a:	66 c1 e8 08          	shr    ax,0x8
c000708e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007092:	43                   	inc    ebx
c0007093:	eb de                	jmp    c0007073 <f_setlabel+0x243>
c0007095:	89 f0                	mov    eax,esi
c0007097:	83 c4 74             	add    esp,0x74
c000709a:	5b                   	pop    ebx
c000709b:	5e                   	pop    esi
c000709c:	c3                   	ret    

c000709d <f_expand>:
c000709d:	55                   	push   ebp
c000709e:	57                   	push   edi
c000709f:	56                   	push   esi
c00070a0:	53                   	push   ebx
c00070a1:	83 ec 3c             	sub    esp,0x3c
c00070a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00070a8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00070ac:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070b8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070bc:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070c4:	89 d8                	mov    eax,ebx
c00070c6:	e8 a3 b1 ff ff       	call   c000226e <validate>
c00070cb:	89 c5                	mov    ebp,eax
c00070cd:	85 c0                	test   eax,eax
c00070cf:	0f 85 f4 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070d5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070d9:	85 ed                	test   ebp,ebp
c00070db:	0f 85 e8 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070e5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070e9:	75 0a                	jne    c00070f5 <f_expand+0x58>
c00070eb:	bd 07 00 00 00       	mov    ebp,0x7
c00070f0:	e9 d4 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00070f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070f8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070fb:	75 ee                	jne    c00070eb <f_expand+0x4e>
c00070fd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0007101:	74 e8                	je     c00070eb <f_expand+0x4e>
c0007103:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0007107:	8a 0e                	mov    cl,BYTE PTR [esi]
c0007109:	80 f9 04             	cmp    cl,0x4
c000710c:	74 07                	je     c0007115 <f_expand+0x78>
c000710e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007113:	77 d6                	ja     c00070eb <f_expand+0x4e>
c0007115:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007119:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000711d:	c1 e0 09             	shl    eax,0x9
c0007120:	8d 50 ff             	lea    edx,[eax-0x1]
c0007123:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007127:	0f 95 c2             	setne  dl
c000712a:	0f b6 d2             	movzx  edx,dl
c000712d:	89 d7                	mov    edi,edx
c000712f:	31 d2                	xor    edx,edx
c0007131:	52                   	push   edx
c0007132:	50                   	push   eax
c0007133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000713b:	e8 90 be 01 00       	call   c0022fd0 <__udivdi3>
c0007140:	83 c4 10             	add    esp,0x10
c0007143:	01 f8                	add    eax,edi
c0007145:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007149:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000714c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007150:	83 ff 01             	cmp    edi,0x1
c0007153:	76 05                	jbe    c000715a <f_expand+0xbd>
c0007155:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007158:	77 05                	ja     c000715f <f_expand+0xc2>
c000715a:	bf 02 00 00 00       	mov    edi,0x2
c000715f:	80 f9 04             	cmp    cl,0x4
c0007162:	75 19                	jne    c000717d <f_expand+0xe0>
c0007164:	89 f0                	mov    eax,esi
c0007166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000716a:	89 fa                	mov    edx,edi
c000716c:	e8 f3 b9 ff ff       	call   c0002b64 <find_bitmap>
c0007171:	89 c6                	mov    esi,eax
c0007173:	85 c0                	test   eax,eax
c0007175:	0f 84 70 ff ff ff    	je     c00070eb <f_expand+0x4e>
c000717b:	eb 7f                	jmp    c00071fc <f_expand+0x15f>
c000717d:	89 fe                	mov    esi,edi
c000717f:	89 f9                	mov    ecx,edi
c0007181:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007189:	89 ca                	mov    edx,ecx
c000718b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000718f:	89 d8                	mov    eax,ebx
c0007191:	e8 3b bd ff ff       	call   c0002ed1 <get_fat>
c0007196:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000719a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000719e:	41                   	inc    ecx
c000719f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071a3:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c00071a6:	77 05                	ja     c00071ad <f_expand+0x110>
c00071a8:	b9 02 00 00 00       	mov    ecx,0x2
c00071ad:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071b2:	74 3e                	je     c00071f2 <f_expand+0x155>
c00071b4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071b9:	75 0a                	jne    c00071c5 <f_expand+0x128>
c00071bb:	bd 01 00 00 00       	mov    ebp,0x1
c00071c0:	e9 04 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071c5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ca:	75 13                	jne    c00071df <f_expand+0x142>
c00071cc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071d4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071d8:	75 0f                	jne    c00071e9 <f_expand+0x14c>
c00071da:	e9 ce 00 00 00       	jmp    c00072ad <f_expand+0x210>
c00071df:	89 ce                	mov    esi,ecx
c00071e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071e9:	39 f9                	cmp    ecx,edi
c00071eb:	75 9c                	jne    c0007189 <f_expand+0xec>
c00071ed:	e9 f9 fe ff ff       	jmp    c00070eb <f_expand+0x4e>
c00071f2:	bd 02 00 00 00       	mov    ebp,0x2
c00071f7:	e9 cd 00 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071fc:	83 f8 ff             	cmp    eax,0xffffffff
c00071ff:	74 ba                	je     c00071bb <f_expand+0x11e>
c0007201:	8d 7e ff             	lea    edi,[esi-0x1]
c0007204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007208:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000720c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007211:	74 51                	je     c0007264 <f_expand+0x1c7>
c0007213:	83 ec 0c             	sub    esp,0xc
c0007216:	89 f2                	mov    edx,esi
c0007218:	6a 01                	push   0x1
c000721a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000721e:	e8 f4 b9 ff ff       	call   c0002c17 <change_bitmap>
c0007223:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007227:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000722b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000722f:	83 c4 10             	add    esp,0x10
c0007232:	85 c0                	test   eax,eax
c0007234:	74 2e                	je     c0007264 <f_expand+0x1c7>
c0007236:	eb 71                	jmp    c00072a9 <f_expand+0x20c>
c0007238:	83 c9 ff             	or     ecx,0xffffffff
c000723b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007240:	74 03                	je     c0007245 <f_expand+0x1a8>
c0007242:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007245:	89 fa                	mov    edx,edi
c0007247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000724b:	e8 7c ba ff ff       	call   c0002ccc <put_fat>
c0007250:	85 c0                	test   eax,eax
c0007252:	75 55                	jne    c00072a9 <f_expand+0x20c>
c0007254:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007258:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000725c:	47                   	inc    edi
c000725d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007262:	75 d4                	jne    c0007238 <f_expand+0x19b>
c0007264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000726c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007271:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007274:	74 53                	je     c00072c9 <f_expand+0x22c>
c0007276:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007279:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000727d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007281:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007285:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007289:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000728c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000728f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007292:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007298:	39 ca                	cmp    edx,ecx
c000729a:	77 2d                	ja     c00072c9 <f_expand+0x22c>
c000729c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00072a0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00072a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00072a7:	eb 20                	jmp    c00072c9 <f_expand+0x22c>
c00072a9:	89 c5                	mov    ebp,eax
c00072ab:	eb 1c                	jmp    c00072c9 <f_expand+0x22c>
c00072ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072b2:	74 0c                	je     c00072c0 <f_expand+0x223>
c00072b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072b8:	89 f7                	mov    edi,esi
c00072ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072be:	eb 9d                	jmp    c000725d <f_expand+0x1c0>
c00072c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	eb 9b                	jmp    c0007264 <f_expand+0x1c7>
c00072c9:	83 c4 3c             	add    esp,0x3c
c00072cc:	89 e8                	mov    eax,ebp
c00072ce:	5b                   	pop    ebx
c00072cf:	5e                   	pop    esi
c00072d0:	5f                   	pop    edi
c00072d1:	5d                   	pop    ebp
c00072d2:	c3                   	ret    

c00072d3 <f_forward>:
c00072d3:	55                   	push   ebp
c00072d4:	57                   	push   edi
c00072d5:	56                   	push   esi
c00072d6:	53                   	push   ebx
c00072d7:	83 ec 2c             	sub    esp,0x2c
c00072da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072de:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072e8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072ec:	89 d8                	mov    eax,ebx
c00072ee:	e8 7b af ff ff       	call   c000226e <validate>
c00072f3:	89 c5                	mov    ebp,eax
c00072f5:	85 c0                	test   eax,eax
c00072f7:	0f 85 aa 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c00072fd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007301:	85 ed                	test   ebp,ebp
c0007303:	0f 85 9e 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c0007309:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000730d:	0f 84 8f 01 00 00    	je     c00074a2 <f_forward+0x1cf>
c0007313:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007316:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007319:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000731c:	bf 00 00 00 00       	mov    edi,0x0
c0007321:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007324:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007328:	89 d1                	mov    ecx,edx
c000732a:	19 f9                	sbb    ecx,edi
c000732c:	0f 83 cf 00 00 00    	jae    c0007401 <f_forward+0x12e>
c0007332:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007336:	e9 c6 00 00 00       	jmp    c0007401 <f_forward+0x12e>
c000733b:	50                   	push   eax
c000733c:	50                   	push   eax
c000733d:	6a 00                	push   0x0
c000733f:	6a 00                	push   0x0
c0007341:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007345:	83 c4 10             	add    esp,0x10
c0007348:	85 c0                	test   eax,eax
c000734a:	0f 84 57 01 00 00    	je     c00074a7 <f_forward+0x1d4>
c0007350:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007353:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007357:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000735a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000735e:	89 d7                	mov    edi,edx
c0007360:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007363:	89 c6                	mov    esi,eax
c0007365:	0f ac fe 09          	shrd   esi,edi,0x9
c0007369:	21 ce                	and    esi,ecx
c000736b:	89 c1                	mov    ecx,eax
c000736d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007373:	0f 84 98 00 00 00    	je     c0007411 <f_forward+0x13e>
c0007379:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000737d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007380:	89 c8                	mov    eax,ecx
c0007382:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007386:	e8 79 aa ff ff       	call   c0001e04 <clst2sect>
c000738b:	89 d7                	mov    edi,edx
c000738d:	09 c7                	or     edi,eax
c000738f:	0f 84 9e 00 00 00    	je     c0007433 <f_forward+0x160>
c0007395:	31 ff                	xor    edi,edi
c0007397:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000739a:	01 c6                	add    esi,eax
c000739c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00073a0:	11 d7                	adc    edi,edx
c00073a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00073a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00073a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ac:	39 fa                	cmp    edx,edi
c00073ae:	0f 85 a2 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073b4:	39 f0                	cmp    eax,esi
c00073b6:	0f 85 9a 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073bc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073bf:	ba 00 02 00 00       	mov    edx,0x200
c00073c4:	25 ff 01 00 00       	and    eax,0x1ff
c00073c9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073cd:	29 c2                	sub    edx,eax
c00073cf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073d2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073d5:	39 d1                	cmp    ecx,edx
c00073d7:	76 02                	jbe    c00073db <f_forward+0x108>
c00073d9:	89 d1                	mov    ecx,edx
c00073db:	8d 73 50             	lea    esi,[ebx+0x50]
c00073de:	52                   	push   edx
c00073df:	01 c6                	add    esi,eax
c00073e1:	52                   	push   edx
c00073e2:	51                   	push   ecx
c00073e3:	56                   	push   esi
c00073e4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073e8:	83 c4 10             	add    esp,0x10
c00073eb:	85 c0                	test   eax,eax
c00073ed:	74 44                	je     c0007433 <f_forward+0x160>
c00073ef:	31 ff                	xor    edi,edi
c00073f1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073f4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073f7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073fb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ff:	01 07                	add    DWORD PTR [edi],eax
c0007401:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007406:	0f 85 2f ff ff ff    	jne    c000733b <f_forward+0x68>
c000740c:	e9 96 00 00 00       	jmp    c00074a7 <f_forward+0x1d4>
c0007411:	85 f6                	test   esi,esi
c0007413:	0f 85 60 ff ff ff    	jne    c0007379 <f_forward+0xa6>
c0007419:	89 d7                	mov    edi,edx
c000741b:	09 c7                	or     edi,eax
c000741d:	75 05                	jne    c0007424 <f_forward+0x151>
c000741f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007422:	eb 0a                	jmp    c000742e <f_forward+0x15b>
c0007424:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007427:	89 d8                	mov    eax,ebx
c0007429:	e8 a3 ba ff ff       	call   c0002ed1 <get_fat>
c000742e:	83 f8 01             	cmp    eax,0x1
c0007431:	77 0b                	ja     c000743e <f_forward+0x16b>
c0007433:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007437:	bd 02 00 00 00       	mov    ebp,0x2
c000743c:	eb 69                	jmp    c00074a7 <f_forward+0x1d4>
c000743e:	83 f8 ff             	cmp    eax,0xffffffff
c0007441:	75 0b                	jne    c000744e <f_forward+0x17b>
c0007443:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007447:	bd 01 00 00 00       	mov    ebp,0x1
c000744c:	eb 59                	jmp    c00074a7 <f_forward+0x1d4>
c000744e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007451:	e9 23 ff ff ff       	jmp    c0007379 <f_forward+0xa6>
c0007456:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000745a:	79 20                	jns    c000747c <f_forward+0x1a9>
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	6a 01                	push   0x1
c0007461:	52                   	push   edx
c0007462:	50                   	push   eax
c0007463:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007467:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000746b:	50                   	push   eax
c000746c:	e8 c5 a6 ff ff       	call   c0001b36 <disk_write>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	85 c0                	test   eax,eax
c0007476:	75 cb                	jne    c0007443 <f_forward+0x170>
c0007478:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000747c:	83 ec 0c             	sub    esp,0xc
c000747f:	6a 01                	push   0x1
c0007481:	57                   	push   edi
c0007482:	56                   	push   esi
c0007483:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007487:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000748b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000748f:	50                   	push   eax
c0007490:	e8 8b a6 ff ff       	call   c0001b20 <disk_read>
c0007495:	83 c4 20             	add    esp,0x20
c0007498:	85 c0                	test   eax,eax
c000749a:	0f 84 1c ff ff ff    	je     c00073bc <f_forward+0xe9>
c00074a0:	eb a1                	jmp    c0007443 <f_forward+0x170>
c00074a2:	bd 07 00 00 00       	mov    ebp,0x7
c00074a7:	83 c4 2c             	add    esp,0x2c
c00074aa:	89 e8                	mov    eax,ebp
c00074ac:	5b                   	pop    ebx
c00074ad:	5e                   	pop    esi
c00074ae:	5f                   	pop    edi
c00074af:	5d                   	pop    ebp
c00074b0:	c3                   	ret    

c00074b1 <f_mkfs>:
c00074b1:	55                   	push   ebp
c00074b2:	57                   	push   edi
c00074b3:	56                   	push   esi
c00074b4:	53                   	push   ebx
c00074b5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074ba:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074c0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074c7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074ce:	e8 7a ac ff ff       	call   c000214d <get_ldnumber>
c00074d3:	85 c0                	test   eax,eax
c00074d5:	0f 88 ec 10 00 00    	js     c00085c7 <f_mkfs+0x1116>
c00074db:	8b 14 85 a0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7460]
c00074e2:	85 d2                	test   edx,edx
c00074e4:	74 03                	je     c00074e9 <f_mkfs+0x38>
c00074e6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074e9:	85 f6                	test   esi,esi
c00074eb:	75 05                	jne    c00074f2 <f_mkfs+0x41>
c00074ed:	be 00 40 02 c0       	mov    esi,0xc0024000
c00074f2:	83 ec 0c             	sub    esp,0xc
c00074f5:	0f b6 c0             	movzx  eax,al
c00074f8:	bb 03 00 00 00       	mov    ebx,0x3
c00074fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007505:	e8 13 a6 ff ff       	call   c0001b1d <disk_initialize>
c000750a:	83 c4 10             	add    esp,0x10
c000750d:	a8 01                	test   al,0x1
c000750f:	0f 85 b2 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007515:	bb 0a 00 00 00       	mov    ebx,0xa
c000751a:	a8 04                	test   al,0x4
c000751c:	0f 85 a5 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007522:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007525:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007529:	85 c0                	test   eax,eax
c000752b:	75 20                	jne    c000754d <f_mkfs+0x9c>
c000752d:	51                   	push   ecx
c000752e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007532:	50                   	push   eax
c0007533:	6a 03                	push   0x3
c0007535:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007539:	e8 0e a6 ff ff       	call   c0001b4c <disk_ioctl>
c000753e:	83 c4 10             	add    esp,0x10
c0007541:	85 c0                	test   eax,eax
c0007543:	74 08                	je     c000754d <f_mkfs+0x9c>
c0007545:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007551:	8d 42 ff             	lea    eax,[edx-0x1]
c0007554:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007559:	77 04                	ja     c000755f <f_mkfs+0xae>
c000755b:	85 c2                	test   edx,eax
c000755d:	74 08                	je     c0007567 <f_mkfs+0xb6>
c000755f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007567:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000756a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000756e:	48                   	dec    eax
c000756f:	3c 01                	cmp    al,0x1
c0007571:	76 05                	jbe    c0007578 <f_mkfs+0xc7>
c0007573:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007578:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000757b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000757f:	48                   	dec    eax
c0007580:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007585:	77 07                	ja     c000758e <f_mkfs+0xdd>
c0007587:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000758c:	74 08                	je     c0007596 <f_mkfs+0xe5>
c000758e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007596:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007599:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000759f:	77 07                	ja     c00075a8 <f_mkfs+0xf7>
c00075a1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00075a4:	85 d8                	test   eax,ebx
c00075a6:	74 02                	je     c00075aa <f_mkfs+0xf9>
c00075a8:	31 db                	xor    ebx,ebx
c00075aa:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075b5:	77 0a                	ja     c00075c1 <f_mkfs+0x110>
c00075b7:	bb 11 00 00 00       	mov    ebx,0x11
c00075bc:	e9 06 10 00 00       	jmp    c00085c7 <f_mkfs+0x1116>
c00075c1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075c8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ca:	85 ed                	test   ebp,ebp
c00075cc:	75 1e                	jne    c00075ec <f_mkfs+0x13b>
c00075ce:	83 ec 0c             	sub    esp,0xc
c00075d1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075d8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075dd:	50                   	push   eax
c00075de:	e8 f1 0f 00 00       	call   c00085d4 <ff_memalloc>
c00075e3:	83 c4 10             	add    esp,0x10
c00075e6:	89 c5                	mov    ebp,eax
c00075e8:	85 c0                	test   eax,eax
c00075ea:	74 cb                	je     c00075b7 <f_mkfs+0x106>
c00075ec:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075f4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075fc:	52                   	push   edx
c00075fd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007601:	50                   	push   eax
c0007602:	6a 01                	push   0x1
c0007604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007608:	e8 3f a5 ff ff       	call   c0001b4c <disk_ioctl>
c000760d:	83 c4 10             	add    esp,0x10
c0007610:	85 c0                	test   eax,eax
c0007612:	0f 85 4a 0f 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007618:	89 f1                	mov    ecx,esi
c000761a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007622:	83 e1 0f             	and    ecx,0xf
c0007625:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000762d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007631:	83 e6 08             	and    esi,0x8
c0007634:	75 56                	jne    c000768c <f_mkfs+0x1db>
c0007636:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000763a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000763e:	83 ff 00             	cmp    edi,0x0
c0007641:	76 20                	jbe    c0007663 <f_mkfs+0x1b2>
c0007643:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007648:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007650:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007656:	83 d7 ff             	adc    edi,0xffffffff
c0007659:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000765d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007661:	eb 21                	jmp    c0007684 <f_mkfs+0x1d3>
c0007663:	ba 3f 00 00 00       	mov    edx,0x3f
c0007668:	39 f2                	cmp    edx,esi
c000766a:	19 f8                	sbb    eax,edi
c000766c:	73 1e                	jae    c000768c <f_mkfs+0x1db>
c000766e:	83 c6 c1             	add    esi,0xffffffc1
c0007671:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007679:	83 d7 ff             	adc    edi,0xffffffff
c000767c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007680:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007684:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000768c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007690:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007694:	89 04 24             	mov    DWORD PTR [esp],eax
c0007697:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000769b:	31 c0                	xor    eax,eax
c000769d:	ba 7f 00 00 00       	mov    edx,0x7f
c00076a2:	89 c7                	mov    edi,eax
c00076a4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00076a7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00076ab:	0f 83 c5 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c00076b1:	89 df                	mov    edi,ebx
c00076b3:	c1 ef 09             	shr    edi,0x9
c00076b6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076ba:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076c1:	c1 ef 09             	shr    edi,0x9
c00076c4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076c9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076cd:	74 29                	je     c00076f8 <f_mkfs+0x247>
c00076cf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076d5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076da:	0f 97 c2             	seta   dl
c00076dd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076e4:	0f 92 c0             	setb   al
c00076e7:	08 c2                	or     dl,al
c00076e9:	75 5b                	jne    c0007746 <f_mkfs+0x295>
c00076eb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ef:	83 e0 07             	and    eax,0x7
c00076f2:	3c 04                	cmp    al,0x4
c00076f4:	74 50                	je     c0007746 <f_mkfs+0x295>
c00076f6:	eb 1b                	jmp    c0007713 <f_mkfs+0x262>
c00076f8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076fd:	0f 87 73 0a 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007703:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007709:	76 08                	jbe    c0007713 <f_mkfs+0x262>
c000770b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007713:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007717:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000771b:	83 e0 01             	and    eax,0x1
c000771e:	80 e1 02             	and    cl,0x2
c0007721:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007725:	74 0d                	je     c0007734 <f_mkfs+0x283>
c0007727:	84 c0                	test   al,al
c0007729:	0f 84 53 09 00 00    	je     c0008082 <f_mkfs+0xbd1>
c000772f:	e9 12 08 00 00       	jmp    c0007f46 <f_mkfs+0xa95>
c0007734:	bb 13 00 00 00       	mov    ebx,0x13
c0007739:	84 c0                	test   al,al
c000773b:	0f 85 05 08 00 00    	jne    c0007f46 <f_mkfs+0xa95>
c0007741:	e9 39 0e 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0007746:	31 c0                	xor    eax,eax
c0007748:	ba ff 0f 00 00       	mov    edx,0xfff
c000774d:	89 c7                	mov    edi,eax
c000774f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007752:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007756:	0f 83 1a 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c000775c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007762:	77 39                	ja     c000779d <f_mkfs+0x2ec>
c0007764:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007769:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007771:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007774:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007778:	73 08                	jae    c0007782 <f_mkfs+0x2d1>
c000777a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007782:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007787:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000778a:	b8 00 00 00 00       	mov    eax,0x0
c000778f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007793:	73 08                	jae    c000779d <f_mkfs+0x2ec>
c0007795:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000779d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00077a5:	83 c0 20             	add    eax,0x20
c00077a8:	83 d2 00             	adc    edx,0x0
c00077ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077af:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077b7:	31 d2                	xor    edx,edx
c00077b9:	31 ff                	xor    edi,edi
c00077bb:	52                   	push   edx
c00077bc:	89 fb                	mov    ebx,edi
c00077be:	50                   	push   eax
c00077bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c7:	e8 04 b8 01 00       	call   c0022fd0 <__udivdi3>
c00077cc:	83 c4 10             	add    esp,0x10
c00077cf:	c1 e0 02             	shl    eax,0x2
c00077d2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077d6:	05 07 02 00 00       	add    eax,0x207
c00077db:	89 f1                	mov    ecx,esi
c00077dd:	c1 e8 09             	shr    eax,0x9
c00077e0:	83 c1 ff             	add    ecx,0xffffffff
c00077e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077e7:	83 d3 ff             	adc    ebx,0xffffffff
c00077ea:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077ee:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077f2:	31 d2                	xor    edx,edx
c00077f4:	01 c8                	add    eax,ecx
c00077f6:	11 da                	adc    edx,ebx
c00077f8:	89 c1                	mov    ecx,eax
c00077fa:	f7 de                	neg    esi
c00077fc:	89 d0                	mov    eax,edx
c00077fe:	83 d7 00             	adc    edi,0x0
c0007801:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007805:	f7 df                	neg    edi
c0007807:	21 f1                	and    ecx,esi
c0007809:	21 f8                	and    eax,edi
c000780b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000780f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007813:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007817:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000781b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000781f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007822:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007826:	0f ac d0 01          	shrd   eax,edx,0x1
c000782a:	89 df                	mov    edi,ebx
c000782c:	d1 ea                	shr    edx,1
c000782e:	39 c1                	cmp    ecx,eax
c0007830:	19 d7                	sbb    edi,edx
c0007832:	0f 83 3e 09 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c0007838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000783c:	31 d2                	xor    edx,edx
c000783e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007846:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000784a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007851:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007855:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007859:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000785d:	83 f8 0f             	cmp    eax,0xf
c0007860:	0f 86 10 09 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c0007866:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000786e:	0f 87 02 09 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007874:	31 d2                	xor    edx,edx
c0007876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000787a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007882:	83 c0 07             	add    eax,0x7
c0007885:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000788d:	c1 e8 03             	shr    eax,0x3
c0007890:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007897:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	c1 e0 09             	shl    eax,0x9
c00078a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078a6:	48                   	dec    eax
c00078a7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00078af:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078b3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b7:	31 d2                	xor    edx,edx
c00078b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078bd:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078cd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078d1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078d5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078d9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078dd:	31 ff                	xor    edi,edi
c00078df:	31 f6                	xor    esi,esi
c00078e1:	31 db                	xor    ebx,ebx
c00078e3:	85 ff                	test   edi,edi
c00078e5:	74 05                	je     c00078ec <f_mkfs+0x43b>
c00078e7:	4f                   	dec    edi
c00078e8:	74 44                	je     c000792e <f_mkfs+0x47d>
c00078ea:	eb 4f                	jmp    c000793b <f_mkfs+0x48a>
c00078ec:	83 ec 0c             	sub    esp,0xc
c00078ef:	0f b7 c3             	movzx  eax,bx
c00078f2:	50                   	push   eax
c00078f3:	e8 18 0e 00 00       	call   c0008710 <ff_wtoupper>
c00078f8:	83 c4 10             	add    esp,0x10
c00078fb:	89 c1                	mov    ecx,eax
c00078fd:	8d 53 01             	lea    edx,[ebx+0x1]
c0007900:	66 39 c3             	cmp    bx,ax
c0007903:	75 3e                	jne    c0007943 <f_mkfs+0x492>
c0007905:	be 01 00 00 00       	mov    esi,0x1
c000790a:	89 df                	mov    edi,ebx
c000790c:	66 01 f7             	add    di,si
c000790f:	75 07                	jne    c0007918 <f_mkfs+0x467>
c0007911:	83 fe 7f             	cmp    esi,0x7f
c0007914:	77 31                	ja     c0007947 <f_mkfs+0x496>
c0007916:	eb 16                	jmp    c000792e <f_mkfs+0x47d>
c0007918:	83 ec 0c             	sub    esp,0xc
c000791b:	0f b7 ff             	movzx  edi,di
c000791e:	57                   	push   edi
c000791f:	e8 ec 0d 00 00       	call   c0008710 <ff_wtoupper>
c0007924:	83 c4 10             	add    esp,0x10
c0007927:	39 c7                	cmp    edi,eax
c0007929:	75 e6                	jne    c0007911 <f_mkfs+0x460>
c000792b:	46                   	inc    esi
c000792c:	eb dc                	jmp    c000790a <f_mkfs+0x459>
c000792e:	31 c0                	xor    eax,eax
c0007930:	89 d9                	mov    ecx,ebx
c0007932:	4e                   	dec    esi
c0007933:	0f 95 c0             	setne  al
c0007936:	43                   	inc    ebx
c0007937:	89 c7                	mov    edi,eax
c0007939:	eb 14                	jmp    c000794f <f_mkfs+0x49e>
c000793b:	89 f1                	mov    ecx,esi
c000793d:	01 f3                	add    ebx,esi
c000793f:	31 ff                	xor    edi,edi
c0007941:	eb 0c                	jmp    c000794f <f_mkfs+0x49e>
c0007943:	89 d3                	mov    ebx,edx
c0007945:	eb 08                	jmp    c000794f <f_mkfs+0x49e>
c0007947:	bf 02 00 00 00       	mov    edi,0x2
c000794c:	83 c9 ff             	or     ecx,0xffffffff
c000794f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007953:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007956:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000795a:	0f b6 c1             	movzx  eax,cl
c000795d:	e8 04 a7 ff ff       	call   c0002066 <xsum32>
c0007962:	66 c1 e9 08          	shr    cx,0x8
c0007966:	89 c2                	mov    edx,eax
c0007968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000796b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000796f:	0f b7 c1             	movzx  eax,cx
c0007972:	e8 ef a6 ff ff       	call   c0002066 <xsum32>
c0007977:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000797c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007980:	66 85 db             	test   bx,bx
c0007983:	74 1f                	je     c00079a4 <f_mkfs+0x4f3>
c0007985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007988:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000798f:	83 c0 02             	add    eax,0x2
c0007992:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007998:	39 c2                	cmp    edx,eax
c000799a:	74 08                	je     c00079a4 <f_mkfs+0x4f3>
c000799c:	89 04 24             	mov    DWORD PTR [esp],eax
c000799f:	e9 3f ff ff ff       	jmp    c00078e3 <f_mkfs+0x432>
c00079a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079a7:	83 ec 0c             	sub    esp,0xc
c00079aa:	05 01 02 00 00       	add    eax,0x201
c00079af:	c1 e8 09             	shr    eax,0x9
c00079b2:	50                   	push   eax
c00079b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bf:	55                   	push   ebp
c00079c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079c4:	e8 6d a1 ff ff       	call   c0001b36 <disk_write>
c00079c9:	83 c4 20             	add    esp,0x20
c00079cc:	85 c0                	test   eax,eax
c00079ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079d1:	0f 85 8b 0b 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00079d7:	89 d0                	mov    eax,edx
c00079d9:	31 d2                	xor    edx,edx
c00079db:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079df:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079e3:	66 85 db             	test   bx,bx
c00079e6:	74 04                	je     c00079ec <f_mkfs+0x53b>
c00079e8:	31 c0                	xor    eax,eax
c00079ea:	eb b0                	jmp    c000799c <f_mkfs+0x4eb>
c00079ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079f0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079f4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079f8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079fe:	31 d2                	xor    edx,edx
c0007a00:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007a0b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007a0f:	c1 eb 09             	shr    ebx,0x9
c0007a12:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a1d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a25:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a29:	8d 70 01             	lea    esi,[eax+0x1]
c0007a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a34:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a3b:	31 d2                	xor    edx,edx
c0007a3d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a45:	89 c1                	mov    ecx,eax
c0007a47:	89 e8                	mov    eax,ebp
c0007a49:	e8 b1 a1 ff ff       	call   c0001bff <mem_set>
c0007a4e:	31 c0                	xor    eax,eax
c0007a50:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a53:	76 10                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a55:	83 fe 07             	cmp    esi,0x7
c0007a58:	76 0b                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a5a:	40                   	inc    eax
c0007a5b:	83 ee 08             	sub    esi,0x8
c0007a5e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a63:	eb eb                	jmp    c0007a50 <f_mkfs+0x59f>
c0007a65:	b2 01                	mov    dl,0x1
c0007a67:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a6b:	85 f6                	test   esi,esi
c0007a6d:	74 0c                	je     c0007a7b <f_mkfs+0x5ca>
c0007a6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a72:	76 07                	jbe    c0007a7b <f_mkfs+0x5ca>
c0007a74:	08 11                	or     BYTE PTR [ecx],dl
c0007a76:	4e                   	dec    esi
c0007a77:	d1 e2                	shl    edx,1
c0007a79:	eb f0                	jmp    c0007a6b <f_mkfs+0x5ba>
c0007a7b:	89 df                	mov    edi,ebx
c0007a7d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a81:	76 04                	jbe    c0007a87 <f_mkfs+0x5d6>
c0007a83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a87:	83 ec 0c             	sub    esp,0xc
c0007a8a:	57                   	push   edi
c0007a8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a93:	55                   	push   ebp
c0007a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a98:	e8 99 a0 ff ff       	call   c0001b36 <disk_write>
c0007a9d:	83 c4 20             	add    esp,0x20
c0007aa0:	85 c0                	test   eax,eax
c0007aa2:	0f 85 ba 0a 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007aa8:	31 d2                	xor    edx,edx
c0007aaa:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007aae:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007ab2:	29 fb                	sub    ebx,edi
c0007ab4:	0f 85 7a ff ff ff    	jne    c0007a34 <f_mkfs+0x583>
c0007aba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007abe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ac6:	31 f6                	xor    esi,esi
c0007ac8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007acc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007acf:	31 d2                	xor    edx,edx
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 27 a1 ff ff       	call   c0001bff <mem_set>
c0007ad8:	31 c9                	xor    ecx,ecx
c0007ada:	85 db                	test   ebx,ebx
c0007adc:	75 40                	jne    c0007b1e <f_mkfs+0x66d>
c0007ade:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ae3:	89 e8                	mov    eax,ebp
c0007ae5:	bb 02 00 00 00       	mov    ebx,0x2
c0007aea:	e8 f2 a0 ff ff       	call   c0001be1 <st_dword>
c0007aef:	8d 45 04             	lea    eax,[ebp+0x4]
c0007af2:	83 ca ff             	or     edx,0xffffffff
c0007af5:	e8 e7 a0 ff ff       	call   c0001be1 <st_dword>
c0007afa:	b9 08 00 00 00       	mov    ecx,0x8
c0007aff:	eb 1d                	jmp    c0007b1e <f_mkfs+0x66d>
c0007b01:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b04:	76 3b                	jbe    c0007b41 <f_mkfs+0x690>
c0007b06:	43                   	inc    ebx
c0007b07:	83 fe 01             	cmp    esi,0x1
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	77 03                	ja     c0007b11 <f_mkfs+0x660>
c0007b0e:	83 ca ff             	or     edx,0xffffffff
c0007b11:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b15:	4e                   	dec    esi
c0007b16:	e8 c6 a0 ff ff       	call   c0001be1 <st_dword>
c0007b1b:	83 c1 04             	add    ecx,0x4
c0007b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b22:	85 f6                	test   esi,esi
c0007b24:	75 db                	jne    c0007b01 <f_mkfs+0x650>
c0007b26:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b2b:	77 14                	ja     c0007b41 <f_mkfs+0x690>
c0007b2d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b31:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b38:	85 f6                	test   esi,esi
c0007b3a:	74 05                	je     c0007b41 <f_mkfs+0x690>
c0007b3c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b3f:	77 dd                	ja     c0007b1e <f_mkfs+0x66d>
c0007b41:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b45:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b49:	39 cf                	cmp    edi,ecx
c0007b4b:	76 02                	jbe    c0007b4f <f_mkfs+0x69e>
c0007b4d:	89 cf                	mov    edi,ecx
c0007b4f:	83 ec 0c             	sub    esp,0xc
c0007b52:	57                   	push   edi
c0007b53:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b5b:	55                   	push   ebp
c0007b5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b60:	e8 d1 9f ff ff       	call   c0001b36 <disk_write>
c0007b65:	83 c4 20             	add    esp,0x20
c0007b68:	85 c0                	test   eax,eax
c0007b6a:	0f 85 f2 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007b70:	31 d2                	xor    edx,edx
c0007b72:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b76:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b7a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b7e:	0f 85 48 ff ff ff    	jne    c0007acc <f_mkfs+0x61b>
c0007b84:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b87:	31 d2                	xor    edx,edx
c0007b89:	89 e8                	mov    eax,ebp
c0007b8b:	31 ff                	xor    edi,edi
c0007b8d:	e8 6d a0 ff ff       	call   c0001bff <mem_set>
c0007b92:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b95:	ba 02 00 00 00       	mov    edx,0x2
c0007b9a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b9e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007ba2:	e8 3a a0 ff ff       	call   c0001be1 <st_dword>
c0007ba7:	8d 45 38             	lea    eax,[ebp+0x38]
c0007baa:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007bae:	e8 2e a0 ff ff       	call   c0001be1 <st_dword>
c0007bb3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007bb6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007bba:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bbe:	e8 1e a0 ff ff       	call   c0001be1 <st_dword>
c0007bc3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bce:	83 c2 02             	add    edx,0x2
c0007bd1:	e8 0b a0 ff ff       	call   c0001be1 <st_dword>
c0007bd6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bd9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bdd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007be1:	e8 fb 9f ff ff       	call   c0001be1 <st_dword>
c0007be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bea:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bef:	89 c6                	mov    esi,eax
c0007bf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bf5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007c00:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007c03:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c07:	39 cb                	cmp    ebx,ecx
c0007c09:	76 02                	jbe    c0007c0d <f_mkfs+0x75c>
c0007c0b:	89 cb                	mov    ebx,ecx
c0007c0d:	83 ec 0c             	sub    esp,0xc
c0007c10:	53                   	push   ebx
c0007c11:	57                   	push   edi
c0007c12:	56                   	push   esi
c0007c13:	55                   	push   ebp
c0007c14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c18:	e8 19 9f ff ff       	call   c0001b36 <disk_write>
c0007c1d:	83 c4 20             	add    esp,0x20
c0007c20:	85 c0                	test   eax,eax
c0007c22:	0f 85 3a 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007c28:	31 d2                	xor    edx,edx
c0007c2a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c2f:	89 e8                	mov    eax,ebp
c0007c31:	e8 c9 9f ff ff       	call   c0001bff <mem_set>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	01 de                	add    esi,ebx
c0007c3a:	11 d7                	adc    edi,edx
c0007c3c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c3f:	75 bf                	jne    c0007c00 <f_mkfs+0x74f>
c0007c41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c49:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c51:	b9 00 02 00 00       	mov    ecx,0x200
c0007c56:	31 d2                	xor    edx,edx
c0007c58:	89 e8                	mov    eax,ebp
c0007c5a:	e8 a0 9f ff ff       	call   c0001bff <mem_set>
c0007c5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c64:	ba e0 40 02 c0       	mov    edx,0xc00240e0
c0007c69:	89 e8                	mov    eax,ebp
c0007c6b:	e8 7a 9f ff ff       	call   c0001bea <mem_cpy>
c0007c70:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c77:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c7b:	e8 64 9f ff ff       	call   c0001be4 <st_qword>
c0007c80:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c84:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c87:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c8b:	e8 54 9f ff ff       	call   c0001be4 <st_qword>
c0007c90:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c93:	ba 20 00 00 00       	mov    edx,0x20
c0007c98:	e8 44 9f ff ff       	call   c0001be1 <st_dword>
c0007c9d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ca5:	e8 37 9f ff ff       	call   c0001be1 <st_dword>
c0007caa:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007cae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007cb2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007cb6:	e8 26 9f ff ff       	call   c0001be1 <st_dword>
c0007cbb:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cbe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cc2:	e8 1a 9f ff ff       	call   c0001be1 <st_dword>
c0007cc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007ccb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cce:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cd1:	e8 0b 9f ff ff       	call   c0001be1 <st_dword>
c0007cd6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cd9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cde:	e8 fe 9e ff ff       	call   c0001be1 <st_dword>
c0007ce3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ce6:	ba 00 01 00 00       	mov    edx,0x100
c0007ceb:	e8 ed 9e ff ff       	call   c0001bdd <st_word>
c0007cf0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cf4:	b8 0a 00 00 00       	mov    eax,0xa
c0007cf9:	48                   	dec    eax
c0007cfa:	74 05                	je     c0007d01 <f_mkfs+0x850>
c0007cfc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cff:	eb f8                	jmp    c0007cf9 <f_mkfs+0x848>
c0007d01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d05:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007d09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d0d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d11:	74 05                	je     c0007d18 <f_mkfs+0x867>
c0007d13:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d16:	eb f5                	jmp    c0007d0d <f_mkfs+0x85c>
c0007d18:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d1b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d20:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d26:	31 db                	xor    ebx,ebx
c0007d28:	e8 b0 9e ff ff       	call   c0001bdd <st_word>
c0007d2d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d33:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d3b:	e8 9d 9e ff ff       	call   c0001bdd <st_word>
c0007d40:	31 c9                	xor    ecx,ecx
c0007d42:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d45:	83 f8 01             	cmp    eax,0x1
c0007d48:	76 13                	jbe    c0007d5d <f_mkfs+0x8ac>
c0007d4a:	83 f9 70             	cmp    ecx,0x70
c0007d4d:	74 0e                	je     c0007d5d <f_mkfs+0x8ac>
c0007d4f:	89 da                	mov    edx,ebx
c0007d51:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d56:	e8 0b a3 ff ff       	call   c0002066 <xsum32>
c0007d5b:	89 c3                	mov    ebx,eax
c0007d5d:	41                   	inc    ecx
c0007d5e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d64:	75 dc                	jne    c0007d42 <f_mkfs+0x891>
c0007d66:	89 f0                	mov    eax,esi
c0007d68:	89 fa                	mov    edx,edi
c0007d6a:	83 c0 01             	add    eax,0x1
c0007d6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d71:	83 d2 00             	adc    edx,0x0
c0007d74:	83 ec 0c             	sub    esp,0xc
c0007d77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d7b:	6a 01                	push   0x1
c0007d7d:	57                   	push   edi
c0007d7e:	56                   	push   esi
c0007d7f:	55                   	push   ebp
c0007d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d84:	e8 ad 9d ff ff       	call   c0001b36 <disk_write>
c0007d89:	83 c4 20             	add    esp,0x20
c0007d8c:	85 c0                	test   eax,eax
c0007d8e:	0f 85 ce 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	b9 00 02 00 00       	mov    ecx,0x200
c0007d9b:	89 e8                	mov    eax,ebp
c0007d9d:	e8 5d 9e ff ff       	call   c0001bff <mem_set>
c0007da2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007da7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007daa:	e8 2e 9e ff ff       	call   c0001bdd <st_word>
c0007daf:	89 f0                	mov    eax,esi
c0007db1:	89 fa                	mov    edx,edi
c0007db3:	83 c0 09             	add    eax,0x9
c0007db6:	83 d2 00             	adc    edx,0x0
c0007db9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007dc0:	31 c9                	xor    ecx,ecx
c0007dc2:	41                   	inc    ecx
c0007dc3:	89 da                	mov    edx,ebx
c0007dc5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dca:	e8 97 a2 ff ff       	call   c0002066 <xsum32>
c0007dcf:	89 c3                	mov    ebx,eax
c0007dd1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dd7:	75 e9                	jne    c0007dc2 <f_mkfs+0x911>
c0007dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ddd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007de1:	83 c0 01             	add    eax,0x1
c0007de4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007de8:	83 d2 00             	adc    edx,0x0
c0007deb:	83 ec 0c             	sub    esp,0xc
c0007dee:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007df2:	6a 01                	push   0x1
c0007df4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007df8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dfc:	55                   	push   ebp
c0007dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e01:	e8 30 9d ff ff       	call   c0001b36 <disk_write>
c0007e06:	83 c4 20             	add    esp,0x20
c0007e09:	85 c0                	test   eax,eax
c0007e0b:	0f 85 51 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e15:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e19:	75 09                	jne    c0007e24 <f_mkfs+0x973>
c0007e1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e1e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e22:	74 12                	je     c0007e36 <f_mkfs+0x985>
c0007e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e34:	eb 8a                	jmp    c0007dc0 <f_mkfs+0x90f>
c0007e36:	31 d2                	xor    edx,edx
c0007e38:	b9 00 02 00 00       	mov    ecx,0x200
c0007e3d:	89 e8                	mov    eax,ebp
c0007e3f:	e8 bb 9d ff ff       	call   c0001bff <mem_set>
c0007e44:	83 c6 0b             	add    esi,0xb
c0007e47:	83 d7 00             	adc    edi,0x0
c0007e4a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e4e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e52:	31 c9                	xor    ecx,ecx
c0007e54:	41                   	inc    ecx
c0007e55:	89 da                	mov    edx,ebx
c0007e57:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e5c:	e8 05 a2 ff ff       	call   c0002066 <xsum32>
c0007e61:	89 c3                	mov    ebx,eax
c0007e63:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e69:	75 e9                	jne    c0007e54 <f_mkfs+0x9a3>
c0007e6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e6e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e72:	83 c6 01             	add    esi,0x1
c0007e75:	83 d7 00             	adc    edi,0x0
c0007e78:	83 ec 0c             	sub    esp,0xc
c0007e7b:	6a 01                	push   0x1
c0007e7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e85:	55                   	push   ebp
c0007e86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e8a:	e8 a7 9c ff ff       	call   c0001b36 <disk_write>
c0007e8f:	83 c4 20             	add    esp,0x20
c0007e92:	85 c0                	test   eax,eax
c0007e94:	0f 85 c8 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e9a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e9e:	75 06                	jne    c0007ea6 <f_mkfs+0x9f5>
c0007ea0:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007ea4:	74 09                	je     c0007eaf <f_mkfs+0x9fe>
c0007ea6:	89 34 24             	mov    DWORD PTR [esp],esi
c0007ea9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007ead:	eb a3                	jmp    c0007e52 <f_mkfs+0x9a1>
c0007eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	01 e8                	add    eax,ebp
c0007eb7:	e8 25 9d ff ff       	call   c0001be1 <st_dword>
c0007ebc:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ec1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ec9:	75 e4                	jne    c0007eaf <f_mkfs+0x9fe>
c0007ecb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ece:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ed2:	83 c6 02             	add    esi,0x2
c0007ed5:	83 d7 00             	adc    edi,0x0
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	6a 01                	push   0x1
c0007edd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee5:	55                   	push   ebp
c0007ee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eea:	e8 47 9c ff ff       	call   c0001b36 <disk_write>
c0007eef:	83 c4 20             	add    esp,0x20
c0007ef2:	85 c0                	test   eax,eax
c0007ef4:	0f 85 68 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007efa:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eff:	74 0d                	je     c0007f0e <f_mkfs+0xa5d>
c0007f01:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007f09:	e9 43 fd ff ff       	jmp    c0007c51 <f_mkfs+0x7a0>
c0007f0e:	b1 07                	mov    cl,0x7
c0007f10:	e9 e3 05 00 00       	jmp    c00084f8 <f_mkfs+0x1047>
c0007f15:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f1a:	0f 85 4f 02 00 00    	jne    c000816f <f_mkfs+0xcbe>
c0007f20:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f25:	0f 86 22 02 00 00    	jbe    c000814d <f_mkfs+0xc9c>
c0007f2b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f30:	0f 85 81 06 00 00    	jne    c00085b7 <f_mkfs+0x1106>
c0007f36:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f3d:	83 f8 40             	cmp    eax,0x40
c0007f40:	0f 87 51 06 00 00    	ja     c0008597 <f_mkfs+0x10e6>
c0007f46:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f4a:	85 ff                	test   edi,edi
c0007f4c:	75 1c                	jne    c0007f6a <f_mkfs+0xab9>
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	ba e0 3f 02 c0       	mov    edx,0xc0023fe0
c0007f56:	c1 e9 0c             	shr    ecx,0xc
c0007f59:	bf 01 00 00 00       	mov    edi,0x1
c0007f5e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f61:	66 85 c0             	test   ax,ax
c0007f64:	0f 85 95 01 00 00    	jne    c00080ff <f_mkfs+0xc4e>
c0007f6a:	31 d2                	xor    edx,edx
c0007f6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f6f:	f7 f7                	div    edi
c0007f71:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f76:	0f 86 95 01 00 00    	jbe    c0008111 <f_mkfs+0xc60>
c0007f7c:	83 c0 02             	add    eax,0x2
c0007f7f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f84:	01 c0                	add    eax,eax
c0007f86:	05 ff 01 00 00       	add    eax,0x1ff
c0007f8b:	be 01 00 00 00       	mov    esi,0x1
c0007f90:	c1 e8 09             	shr    eax,0x9
c0007f93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f9b:	c1 e0 05             	shl    eax,0x5
c0007f9e:	c1 e8 09             	shr    eax,0x9
c0007fa1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007fa5:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fb0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fb4:	89 f0                	mov    eax,esi
c0007fb6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fba:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fc2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fca:	31 d2                	xor    edx,edx
c0007fcc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fd1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fd5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fd9:	31 db                	xor    ebx,ebx
c0007fdb:	01 c8                	add    eax,ecx
c0007fdd:	11 da                	adc    edx,ebx
c0007fdf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fe3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fe7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007feb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fef:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ff3:	f7 da                	neg    edx
c0007ff5:	21 d1                	and    ecx,edx
c0007ff7:	29 d9                	sub    ecx,ebx
c0007ff9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ffe:	0f 85 20 01 00 00    	jne    c0008124 <f_mkfs+0xc73>
c0008004:	31 db                	xor    ebx,ebx
c0008006:	01 ce                	add    esi,ecx
c0008008:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c000800c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008010:	31 d2                	xor    edx,edx
c0008012:	89 f8                	mov    eax,edi
c0008014:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008018:	c1 e0 04             	shl    eax,0x4
c000801b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000801f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008023:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008027:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000802b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000802e:	19 d3                	sbb    ebx,edx
c0008030:	0f 82 40 01 00 00    	jb     c0008176 <f_mkfs+0xcc5>
c0008036:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008039:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000803d:	89 c8                	mov    eax,ecx
c000803f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008044:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008048:	29 f0                	sub    eax,esi
c000804a:	29 d0                	sub    eax,edx
c000804c:	31 d2                	xor    edx,edx
c000804e:	f7 f7                	div    edi
c0008050:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008055:	89 c3                	mov    ebx,eax
c0008057:	0f 85 b8 fe ff ff    	jne    c0007f15 <f_mkfs+0xa64>
c000805d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008062:	0f 87 1d 01 00 00    	ja     c0008185 <f_mkfs+0xcd4>
c0008068:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000806d:	0f 85 03 01 00 00    	jne    c0008176 <f_mkfs+0xcc5>
c0008073:	83 ff 01             	cmp    edi,0x1
c0008076:	0f 86 fa 00 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c000807c:	d1 ef                	shr    edi,1
c000807e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008082:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008086:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008089:	85 db                	test   ebx,ebx
c000808b:	75 2d                	jne    c00080ba <f_mkfs+0xc09>
c000808d:	89 cb                	mov    ebx,ecx
c000808f:	ba f0 3f 02 c0       	mov    edx,0xc0023ff0
c0008094:	c1 eb 11             	shr    ebx,0x11
c0008097:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000809f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00080a2:	66 85 c0             	test   ax,ax
c00080a5:	74 11                	je     c00080b8 <f_mkfs+0xc07>
c00080a7:	83 c2 02             	add    edx,0x2
c00080aa:	39 d8                	cmp    eax,ebx
c00080ac:	77 0a                	ja     c00080b8 <f_mkfs+0xc07>
c00080ae:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080b2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080b6:	eb e7                	jmp    c000809f <f_mkfs+0xbee>
c00080b8:	31 db                	xor    ebx,ebx
c00080ba:	31 d2                	xor    edx,edx
c00080bc:	89 c8                	mov    eax,ecx
c00080be:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080c2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080c9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080ce:	c1 ea 09             	shr    edx,0x9
c00080d1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080da:	0f 87 96 00 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c00080e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080f0:	be 20 00 00 00       	mov    esi,0x20
c00080f5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080fa:	e9 a6 fe ff ff       	jmp    c0007fa5 <f_mkfs+0xaf4>
c00080ff:	83 c2 02             	add    edx,0x2
c0008102:	39 c8                	cmp    eax,ecx
c0008104:	0f 87 60 fe ff ff    	ja     c0007f6a <f_mkfs+0xab9>
c000810a:	01 ff                	add    edi,edi
c000810c:	e9 4d fe ff ff       	jmp    c0007f5e <f_mkfs+0xaad>
c0008111:	8d 04 40             	lea    eax,[eax+eax*2]
c0008114:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008119:	40                   	inc    eax
c000811a:	d1 e8                	shr    eax,1
c000811c:	83 c0 03             	add    eax,0x3
c000811f:	e9 62 fe ff ff       	jmp    c0007f86 <f_mkfs+0xad5>
c0008124:	31 d2                	xor    edx,edx
c0008126:	89 c8                	mov    eax,ecx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	85 d2                	test   edx,edx
c000812e:	74 0c                	je     c000813c <f_mkfs+0xc8b>
c0008130:	49                   	dec    ecx
c0008131:	46                   	inc    esi
c0008132:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008137:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000813c:	89 c8                	mov    eax,ecx
c000813e:	31 d2                	xor    edx,edx
c0008140:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008144:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008148:	e9 c3 fe ff ff       	jmp    c0008010 <f_mkfs+0xb5f>
c000814d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008152:	77 31                	ja     c0008185 <f_mkfs+0xcd4>
c0008154:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008159:	75 1b                	jne    c0008176 <f_mkfs+0xcc5>
c000815b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000815e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008162:	3d 80 00 00 00       	cmp    eax,0x80
c0008167:	0f 86 d9 fd ff ff    	jbe    c0007f46 <f_mkfs+0xa95>
c000816d:	eb 07                	jmp    c0008176 <f_mkfs+0xcc5>
c000816f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008174:	76 0a                	jbe    c0008180 <f_mkfs+0xccf>
c0008176:	bb 0e 00 00 00       	mov    ebx,0xe
c000817b:	e9 ff 03 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0008180:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008185:	31 d2                	xor    edx,edx
c0008187:	b9 00 02 00 00       	mov    ecx,0x200
c000818c:	89 e8                	mov    eax,ebp
c000818e:	e8 6c 9a ff ff       	call   c0001bff <mem_set>
c0008193:	b9 0b 00 00 00       	mov    ecx,0xb
c0008198:	ba 02 41 02 c0       	mov    edx,0xc0024102
c000819d:	89 e8                	mov    eax,ebp
c000819f:	e8 46 9a ff ff       	call   c0001bea <mem_cpy>
c00081a4:	8d 45 0b             	lea    eax,[ebp+0xb]
c00081a7:	ba 00 02 00 00       	mov    edx,0x200
c00081ac:	e8 2c 9a ff ff       	call   c0001bdd <st_word>
c00081b1:	89 f8                	mov    eax,edi
c00081b3:	0f b7 d6             	movzx  edx,si
c00081b6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081b9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081bc:	e8 1c 9a ff ff       	call   c0001bdd <st_word>
c00081c1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081c5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ca:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081cd:	75 08                	jne    c00081d7 <f_mkfs+0xd26>
c00081cf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081d7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081de:	e8 fa 99 ff ff       	call   c0001bdd <st_word>
c00081e3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081e8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081ec:	39 d0                	cmp    eax,edx
c00081ee:	b8 00 00 00 00       	mov    eax,0x0
c00081f3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081f7:	72 0a                	jb     c0008203 <f_mkfs+0xd52>
c00081f9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081fc:	e8 dc 99 ff ff       	call   c0001bdd <st_word>
c0008201:	eb 08                	jmp    c000820b <f_mkfs+0xd5a>
c0008203:	8d 45 20             	lea    eax,[ebp+0x20]
c0008206:	e8 d6 99 ff ff       	call   c0001be1 <st_dword>
c000820b:	8d 45 18             	lea    eax,[ebp+0x18]
c000820e:	ba 3f 00 00 00       	mov    edx,0x3f
c0008213:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008217:	e8 c1 99 ff ff       	call   c0001bdd <st_word>
c000821c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000821f:	ba ff 00 00 00       	mov    edx,0xff
c0008224:	e8 b4 99 ff ff       	call   c0001bdd <st_word>
c0008229:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000822c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008230:	e8 ac 99 ff ff       	call   c0001be1 <st_dword>
c0008235:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000823a:	75 57                	jne    c0008293 <f_mkfs+0xde2>
c000823c:	8d 45 43             	lea    eax,[ebp+0x43]
c000823f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008244:	e8 98 99 ff ff       	call   c0001be1 <st_dword>
c0008249:	8d 45 24             	lea    eax,[ebp+0x24]
c000824c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008250:	e8 8c 99 ff ff       	call   c0001be1 <st_dword>
c0008255:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008258:	ba 02 00 00 00       	mov    edx,0x2
c000825d:	e8 7f 99 ff ff       	call   c0001be1 <st_dword>
c0008262:	8d 45 30             	lea    eax,[ebp+0x30]
c0008265:	ba 01 00 00 00       	mov    edx,0x1
c000826a:	e8 6e 99 ff ff       	call   c0001bdd <st_word>
c000826f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008272:	ba 06 00 00 00       	mov    edx,0x6
c0008277:	e8 61 99 ff ff       	call   c0001bdd <st_word>
c000827c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008280:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008284:	8d 45 47             	lea    eax,[ebp+0x47]
c0008287:	b9 13 00 00 00       	mov    ecx,0x13
c000828c:	ba 0e 41 02 c0       	mov    edx,0xc002410e
c0008291:	eb 2f                	jmp    c00082c2 <f_mkfs+0xe11>
c0008293:	8d 45 27             	lea    eax,[ebp+0x27]
c0008296:	ba 00 00 21 50       	mov    edx,0x50210000
c000829b:	e8 41 99 ff ff       	call   c0001be1 <st_dword>
c00082a0:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00082a5:	8d 45 16             	lea    eax,[ebp+0x16]
c00082a8:	e8 30 99 ff ff       	call   c0001bdd <st_word>
c00082ad:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082b1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082b5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082b8:	b9 13 00 00 00       	mov    ecx,0x13
c00082bd:	ba 22 41 02 c0       	mov    edx,0xc0024122
c00082c2:	e8 23 99 ff ff       	call   c0001bea <mem_cpy>
c00082c7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082cd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082d2:	89 f0                	mov    eax,esi
c00082d4:	e8 04 99 ff ff       	call   c0001bdd <st_word>
c00082d9:	83 ec 0c             	sub    esp,0xc
c00082dc:	6a 01                	push   0x1
c00082de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 46 98 ff ff       	call   c0001b36 <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 67 02 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	0f 85 b7 00 00 00    	jne    c00083bd <f_mkfs+0xf0c>
c0008306:	83 ec 0c             	sub    esp,0xc
c0008309:	6a 01                	push   0x1
c000830b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008313:	83 c0 06             	add    eax,0x6
c0008316:	83 d2 00             	adc    edx,0x0
c0008319:	52                   	push   edx
c000831a:	50                   	push   eax
c000831b:	55                   	push   ebp
c000831c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008320:	e8 11 98 ff ff       	call   c0001b36 <disk_write>
c0008325:	83 c4 20             	add    esp,0x20
c0008328:	b9 00 02 00 00       	mov    ecx,0x200
c000832d:	31 d2                	xor    edx,edx
c000832f:	89 e8                	mov    eax,ebp
c0008331:	e8 c9 98 ff ff       	call   c0001bff <mem_set>
c0008336:	ba 52 52 61 41       	mov    edx,0x41615252
c000833b:	89 e8                	mov    eax,ebp
c000833d:	e8 9f 98 ff ff       	call   c0001be1 <st_dword>
c0008342:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008348:	ba 72 72 41 61       	mov    edx,0x61417272
c000834d:	e8 8f 98 ff ff       	call   c0001be1 <st_dword>
c0008352:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008355:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000835b:	e8 81 98 ff ff       	call   c0001be1 <st_dword>
c0008360:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008366:	ba 02 00 00 00       	mov    edx,0x2
c000836b:	e8 71 98 ff ff       	call   c0001be1 <st_dword>
c0008370:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008375:	89 f0                	mov    eax,esi
c0008377:	e8 61 98 ff ff       	call   c0001bdd <st_word>
c000837c:	83 ec 0c             	sub    esp,0xc
c000837f:	6a 01                	push   0x1
c0008381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008389:	83 c0 07             	add    eax,0x7
c000838c:	83 d2 00             	adc    edx,0x0
c000838f:	52                   	push   edx
c0008390:	50                   	push   eax
c0008391:	55                   	push   ebp
c0008392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008396:	e8 9b 97 ff ff       	call   c0001b36 <disk_write>
c000839b:	83 c4 14             	add    esp,0x14
c000839e:	6a 01                	push   0x1
c00083a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083a8:	83 c0 01             	add    eax,0x1
c00083ab:	83 d2 00             	adc    edx,0x0
c00083ae:	52                   	push   edx
c00083af:	50                   	push   eax
c00083b0:	55                   	push   ebp
c00083b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083b5:	e8 7c 97 ff ff       	call   c0001b36 <disk_write>
c00083ba:	83 c4 20             	add    esp,0x20
c00083bd:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083c4:	31 d2                	xor    edx,edx
c00083c6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083cc:	31 db                	xor    ebx,ebx
c00083ce:	89 e8                	mov    eax,ebp
c00083d0:	e8 2a 98 ff ff       	call   c0001bff <mem_set>
c00083d5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083e1:	0f 94 c3             	sete   bl
c00083e4:	4b                   	dec    ebx
c00083e5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083eb:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083f6:	75 21                	jne    c0008419 <f_mkfs+0xf68>
c00083f8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083fd:	89 e8                	mov    eax,ebp
c00083ff:	e8 dd 97 ff ff       	call   c0001be1 <st_dword>
c0008404:	8d 45 04             	lea    eax,[ebp+0x4]
c0008407:	83 ca ff             	or     edx,0xffffffff
c000840a:	e8 d2 97 ff ff       	call   c0001be1 <st_dword>
c000840f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008412:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008417:	eb 04                	jmp    c000841d <f_mkfs+0xf6c>
c0008419:	89 da                	mov    edx,ebx
c000841b:	89 e8                	mov    eax,ebp
c000841d:	e8 bf 97 ff ff       	call   c0001be1 <st_dword>
c0008422:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000842a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000842e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008432:	39 ce                	cmp    esi,ecx
c0008434:	76 02                	jbe    c0008438 <f_mkfs+0xf87>
c0008436:	89 ce                	mov    esi,ecx
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	56                   	push   esi
c000843c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008444:	55                   	push   ebp
c0008445:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008449:	e8 e8 96 ff ff       	call   c0001b36 <disk_write>
c000844e:	83 c4 20             	add    esp,0x20
c0008451:	85 c0                	test   eax,eax
c0008453:	0f 85 09 01 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0008459:	31 d2                	xor    edx,edx
c000845b:	b9 00 02 00 00       	mov    ecx,0x200
c0008460:	89 e8                	mov    eax,ebp
c0008462:	e8 98 97 ff ff       	call   c0001bff <mem_set>
c0008467:	31 d2                	xor    edx,edx
c0008469:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000846d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008471:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008475:	75 b3                	jne    c000842a <f_mkfs+0xf79>
c0008477:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000847a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008481:	40                   	inc    eax
c0008482:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008486:	0f 87 65 ff ff ff    	ja     c00083f1 <f_mkfs+0xf40>
c000848c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008491:	74 04                	je     c0008497 <f_mkfs+0xfe6>
c0008493:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008497:	89 fb                	mov    ebx,edi
c0008499:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000849d:	76 04                	jbe    c00084a3 <f_mkfs+0xff2>
c000849f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00084a3:	83 ec 0c             	sub    esp,0xc
c00084a6:	53                   	push   ebx
c00084a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084af:	55                   	push   ebp
c00084b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b4:	e8 7d 96 ff ff       	call   c0001b36 <disk_write>
c00084b9:	83 c4 20             	add    esp,0x20
c00084bc:	85 c0                	test   eax,eax
c00084be:	0f 85 9e 00 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00084c4:	31 d2                	xor    edx,edx
c00084c6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ca:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084ce:	29 df                	sub    edi,ebx
c00084d0:	75 c5                	jne    c0008497 <f_mkfs+0xfe6>
c00084d2:	b1 0c                	mov    cl,0xc
c00084d4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084d9:	74 1d                	je     c00084f8 <f_mkfs+0x1047>
c00084db:	b8 ff ff 00 00       	mov    eax,0xffff
c00084e0:	b1 06                	mov    cl,0x6
c00084e2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084e6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084ea:	72 0c                	jb     c00084f8 <f_mkfs+0x1047>
c00084ec:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084f1:	0f 94 c1             	sete   cl
c00084f4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084f8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084fd:	75 4c                	jne    c000854b <f_mkfs+0x109a>
c00084ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008503:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008507:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000850e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008515:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008520:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000852b:	0f b6 c9             	movzx  ecx,cl
c000852e:	83 ec 0c             	sub    esp,0xc
c0008531:	55                   	push   ebp
c0008532:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000853d:	e8 f9 bf ff ff       	call   c000453b <create_partition>
c0008542:	83 c4 10             	add    esp,0x10
c0008545:	89 c3                	mov    ebx,eax
c0008547:	85 c0                	test   eax,eax
c0008549:	75 34                	jne    c000857f <f_mkfs+0x10ce>
c000854b:	31 db                	xor    ebx,ebx
c000854d:	50                   	push   eax
c000854e:	6a 00                	push   0x0
c0008550:	6a 00                	push   0x0
c0008552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008556:	e8 f1 95 ff ff       	call   c0001b4c <disk_ioctl>
c000855b:	83 c4 10             	add    esp,0x10
c000855e:	85 c0                	test   eax,eax
c0008560:	74 1d                	je     c000857f <f_mkfs+0x10ce>
c0008562:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856a:	75 0c                	jne    c0008578 <f_mkfs+0x10c7>
c000856c:	83 ec 0c             	sub    esp,0xc
c000856f:	55                   	push   ebp
c0008570:	e8 77 00 00 00       	call   c00085ec <ff_memfree>
c0008575:	83 c4 10             	add    esp,0x10
c0008578:	bb 01 00 00 00       	mov    ebx,0x1
c000857d:	eb 48                	jmp    c00085c7 <f_mkfs+0x1116>
c000857f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008587:	75 3e                	jne    c00085c7 <f_mkfs+0x1116>
c0008589:	83 ec 0c             	sub    esp,0xc
c000858c:	55                   	push   ebp
c000858d:	e8 5a 00 00 00       	call   c00085ec <ff_memfree>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	eb 30                	jmp    c00085c7 <f_mkfs+0x1116>
c0008597:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000859c:	0f 85 eb fa ff ff    	jne    c000808d <f_mkfs+0xbdc>
c00085a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00085a6:	81 ff 80 00 00 00    	cmp    edi,0x80
c00085ac:	0f 86 b8 f9 ff ff    	jbe    c0007f6a <f_mkfs+0xab9>
c00085b2:	e9 bf fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085b7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085bc:	0f 85 c0 fa ff ff    	jne    c0008082 <f_mkfs+0xbd1>
c00085c2:	e9 af fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085c7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085cd:	89 d8                	mov    eax,ebx
c00085cf:	5b                   	pop    ebx
c00085d0:	5e                   	pop    esi
c00085d1:	5f                   	pop    edi
c00085d2:	5d                   	pop    ebp
c00085d3:	c3                   	ret    

c00085d4 <ff_memalloc>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 04 18 00 00       	call   c0009de7 <malloc>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	83 c4 0c             	add    esp,0xc
c00085e9:	c3                   	ret    
c00085ea:	66 90                	xchg   ax,ax

c00085ec <ff_memfree>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	83 ec 0c             	sub    esp,0xc
c00085f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f6:	e8 fc 17 00 00       	call   c0009df7 <free>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	90                   	nop
c00085ff:	83 c4 0c             	add    esp,0xc
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <ff_uni2oem>:
c0008604:	83 ec 14             	sub    esp,0x14
c0008607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000860b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000860f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008616:	c7 44 24 0c 40 44 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024440
c000861e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008623:	77 0b                	ja     c0008630 <ff_uni2oem+0x2c>
c0008625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008629:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000862e:	eb 60                	jmp    c0008690 <ff_uni2oem+0x8c>
c0008630:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008638:	77 56                	ja     c0008690 <ff_uni2oem+0x8c>
c000863a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008640:	75 4e                	jne    c0008690 <ff_uni2oem+0x8c>
c0008642:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008649:	eb 0d                	jmp    c0008658 <ff_uni2oem+0x54>
c000864b:	90                   	nop
c000864c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008651:	40                   	inc    eax
c0008652:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008657:	90                   	nop
c0008658:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000865e:	77 1c                	ja     c000867c <ff_uni2oem+0x78>
c0008660:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008665:	01 c0                	add    eax,eax
c0008667:	89 c2                	mov    edx,eax
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	01 d0                	add    eax,edx
c000866f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008672:	0f b7 c0             	movzx  eax,ax
c0008675:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008679:	75 d1                	jne    c000864c <ff_uni2oem+0x48>
c000867b:	90                   	nop
c000867c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008681:	83 e8 80             	sub    eax,0xffffff80
c0008684:	25 ff 00 00 00       	and    eax,0xff
c0008689:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000868e:	66 90                	xchg   ax,ax
c0008690:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008695:	83 c4 14             	add    esp,0x14
c0008698:	c3                   	ret    
c0008699:	8d 76 00             	lea    esi,[esi+0x0]

c000869c <ff_oem2uni>:
c000869c:	83 ec 18             	sub    esp,0x18
c000869f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086a7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00086ac:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086b0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086b7:	c7 44 24 10 40 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024440
c00086bf:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086c5:	77 0d                	ja     c00086d4 <ff_oem2uni+0x38>
c00086c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086cb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086d0:	eb 32                	jmp    c0008704 <ff_oem2uni+0x68>
c00086d2:	66 90                	xchg   ax,ax
c00086d4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086da:	75 28                	jne    c0008704 <ff_oem2uni+0x68>
c00086dc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086e3:	77 1f                	ja     c0008704 <ff_oem2uni+0x68>
c00086e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086ea:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086ef:	01 c0                	add    eax,eax
c00086f1:	89 c2                	mov    edx,eax
c00086f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f7:	01 d0                	add    eax,edx
c00086f9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008701:	8d 76 00             	lea    esi,[esi+0x0]
c0008704:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008709:	83 c4 18             	add    esp,0x18
c000870c:	c3                   	ret    
c000870d:	8d 76 00             	lea    esi,[esi+0x0]

c0008710 <ff_wtoupper>:
c0008710:	83 ec 10             	sub    esp,0x10
c0008713:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000871b:	0f 87 4f 01 00 00    	ja     c0008870 <ff_wtoupper+0x160>
c0008721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008725:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000872a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008731:	77 09                	ja     c000873c <ff_wtoupper+0x2c>
c0008733:	b8 40 42 02 c0       	mov    eax,0xc0024240
c0008738:	eb 0a                	jmp    c0008744 <ff_wtoupper+0x34>
c000873a:	66 90                	xchg   ax,ax
c000873c:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008748:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000874c:	8d 50 02             	lea    edx,[eax+0x2]
c000874f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008753:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008756:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000875b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008761:	0f 84 fd 00 00 00    	je     c0008864 <ff_wtoupper+0x154>
c0008767:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000876c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008771:	0f 82 ed 00 00 00    	jb     c0008864 <ff_wtoupper+0x154>
c0008777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000877b:	8d 50 02             	lea    edx,[eax+0x2]
c000877e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008782:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008785:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000878a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000878f:	66 c1 e8 08          	shr    ax,0x8
c0008793:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008798:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000879f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00087a4:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00087a9:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00087ae:	01 ca                	add    edx,ecx
c00087b0:	39 d0                	cmp    eax,edx
c00087b2:	0f 8d 8c 00 00 00    	jge    c0008844 <ff_wtoupper+0x134>
c00087b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087bd:	83 f8 08             	cmp    eax,0x8
c00087c0:	0f 87 9a 00 00 00    	ja     c0008860 <ff_wtoupper+0x150>
c00087c6:	8b 04 85 40 41 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbec0]
c00087cd:	ff e0                	jmp    eax
c00087cf:	90                   	nop
c00087d0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087d5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087da:	29 c2                	sub    edx,eax
c00087dc:	89 d0                	mov    eax,edx
c00087de:	01 c0                	add    eax,eax
c00087e0:	89 c2                	mov    edx,eax
c00087e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087e6:	01 d0                	add    eax,edx
c00087e8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087eb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087f0:	eb 4e                	jmp    c0008840 <ff_wtoupper+0x130>
c00087f2:	66 90                	xchg   ax,ax
c00087f4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087fd:	83 e0 01             	and    eax,0x1
c0008800:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008805:	eb 39                	jmp    c0008840 <ff_wtoupper+0x130>
c0008807:	90                   	nop
c0008808:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000880e:	eb 30                	jmp    c0008840 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008816:	eb 28                	jmp    c0008840 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000881e:	eb 20                	jmp    c0008840 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008826:	eb 18                	jmp    c0008840 <ff_wtoupper+0x130>
c0008828:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000882e:	eb 10                	jmp    c0008840 <ff_wtoupper+0x130>
c0008830:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008836:	eb 08                	jmp    c0008840 <ff_wtoupper+0x130>
c0008838:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000883f:	90                   	nop
c0008840:	eb 1e                	jmp    c0008860 <ff_wtoupper+0x150>
c0008842:	66 90                	xchg   ax,ax
c0008844:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000884a:	0f 85 f8 fe ff ff    	jne    c0008748 <ff_wtoupper+0x38>
c0008850:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008855:	01 c0                	add    eax,eax
c0008857:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000885b:	e9 e8 fe ff ff       	jmp    c0008748 <ff_wtoupper+0x38>
c0008860:	90                   	nop
c0008861:	8d 76 00             	lea    esi,[esi+0x0]
c0008864:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008869:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000886d:	8d 76 00             	lea    esi,[esi+0x0]
c0008870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	c3                   	ret    

c0008878 <CPU::current()>:
c0008878:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000887d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008883:	c3                   	ret    

c0008884 <operator new(unsigned long)>:
c0008884:	e9 5e 15 00 00       	jmp    c0009de7 <malloc>

c0008889 <operator delete(void*)>:
c0008889:	e9 79 15 00 00       	jmp    c0009e07 <rfree>

c000888e <disableIRQs()>:
c000888e:	fa                   	cli    
c000888f:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0008895:	c3                   	ret    

c0008896 <enableIRQs()>:
c0008896:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000889b:	48                   	dec    eax
c000889c:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00088a1:	75 01                	jne    c00088a4 <enableIRQs()+0xe>
c00088a3:	fb                   	sti    
c00088a4:	c3                   	ret    

c00088a5 <lockScheduler()>:
c00088a5:	fa                   	cli    
c00088a6:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00088ac:	c3                   	ret    

c00088ad <unlockScheduler()>:
c00088ad:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00088b2:	48                   	dec    eax
c00088b3:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00088b8:	75 01                	jne    c00088bb <unlockScheduler()+0xe>
c00088ba:	fb                   	sti    
c00088bb:	c3                   	ret    

c00088bc <lockStuff()>:
c00088bc:	fa                   	cli    
c00088bd:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00088c3:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c00088c9:	c3                   	ret    

c00088ca <unlockStuff()>:
c00088ca:	83 ec 0c             	sub    esp,0xc
c00088cd:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00088d2:	48                   	dec    eax
c00088d3:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00088d8:	75 18                	jne    c00088f2 <unlockStuff()+0x28>
c00088da:	83 3d 20 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a120,0x0
c00088e1:	74 0f                	je     c00088f2 <unlockStuff()+0x28>
c00088e3:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c00088ed:	e8 4a 06 01 00       	call   c0018f3c <schedule()>
c00088f2:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00088f7:	48                   	dec    eax
c00088f8:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00088fd:	75 01                	jne    c0008900 <unlockStuff()+0x36>
c00088ff:	fb                   	sti    
c0008900:	83 c4 0c             	add    esp,0xc
c0008903:	c3                   	ret    

c0008904 <Virt::getAKernelVAS()>:
c0008904:	a1 34 8d 02 c0       	mov    eax,ds:0xc0028d34
c0008909:	c3                   	ret    

c000890a <__not_memcpy>:
c000890a:	57                   	push   edi
c000890b:	56                   	push   esi
c000890c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008910:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008918:	89 c7                	mov    edi,eax
c000891a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000891c:	5e                   	pop    esi
c000891d:	5f                   	pop    edi
c000891e:	c3                   	ret    
c000891f:	90                   	nop

c0008920 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	83 ec 08             	sub    esp,0x8
c0008926:	68 40 45 02 c0       	push   0xc0024540
c000892b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000892f:	e8 a8 7e ff ff       	call   c00007dc <strcmp>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	85 c0                	test   eax,eax
c0008939:	0f 94 c0             	sete   al
c000893c:	84 c0                	test   al,al
c000893e:	74 0c                	je     c000894c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008940:	b8 08 8c 02 c0       	mov    eax,0xc0028c08
c0008945:	e9 ea 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000894a:	66 90                	xchg   ax,ax
c000894c:	83 ec 08             	sub    esp,0x8
c000894f:	68 49 45 02 c0       	push   0xc0024549
c0008954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008958:	e8 7f 7e ff ff       	call   c00007dc <strcmp>
c000895d:	83 c4 10             	add    esp,0x10
c0008960:	85 c0                	test   eax,eax
c0008962:	0f 94 c0             	sete   al
c0008965:	84 c0                	test   al,al
c0008967:	74 0b                	je     c0008974 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008969:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c000896e:	e9 c1 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008973:	90                   	nop
c0008974:	83 ec 08             	sub    esp,0x8
c0008977:	68 53 45 02 c0       	push   0xc0024553
c000897c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008980:	e8 57 7e ff ff       	call   c00007dc <strcmp>
c0008985:	83 c4 10             	add    esp,0x10
c0008988:	85 c0                	test   eax,eax
c000898a:	0f 94 c0             	sete   al
c000898d:	84 c0                	test   al,al
c000898f:	74 0b                	je     c000899c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008991:	b8 04 2d 02 c0       	mov    eax,0xc0022d04
c0008996:	e9 99 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000899b:	90                   	nop
c000899c:	83 ec 08             	sub    esp,0x8
c000899f:	68 5c 45 02 c0       	push   0xc002455c
c00089a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a8:	e8 2f 7e ff ff       	call   c00007dc <strcmp>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	85 c0                	test   eax,eax
c00089b2:	0f 94 c0             	sete   al
c00089b5:	84 c0                	test   al,al
c00089b7:	74 07                	je     c00089c0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089b9:	b8 d0 30 02 c0       	mov    eax,0xc00230d0
c00089be:	eb 74                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089c0:	83 ec 08             	sub    esp,0x8
c00089c3:	68 66 45 02 c0       	push   0xc0024566
c00089c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089cc:	e8 0b 7e ff ff       	call   c00007dc <strcmp>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	85 c0                	test   eax,eax
c00089d6:	0f 94 c0             	sete   al
c00089d9:	84 c0                	test   al,al
c00089db:	74 07                	je     c00089e4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089dd:	b8 50 2e 02 c0       	mov    eax,0xc0022e50
c00089e2:	eb 50                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089e4:	83 ec 08             	sub    esp,0x8
c00089e7:	68 6f 45 02 c0       	push   0xc002456f
c00089ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f0:	e8 e7 7d ff ff       	call   c00007dc <strcmp>
c00089f5:	83 c4 10             	add    esp,0x10
c00089f8:	85 c0                	test   eax,eax
c00089fa:	0f 94 c0             	sete   al
c00089fd:	84 c0                	test   al,al
c00089ff:	74 07                	je     c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008a01:	b8 0c 8c 02 c0       	mov    eax,0xc0028c0c
c0008a06:	eb 2c                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a08:	83 ec 08             	sub    esp,0x8
c0008a0b:	68 7c 45 02 c0       	push   0xc002457c
c0008a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a14:	e8 c3 7d ff ff       	call   c00007dc <strcmp>
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	85 c0                	test   eax,eax
c0008a1e:	0f 94 c0             	sete   al
c0008a21:	84 c0                	test   al,al
c0008a23:	74 07                	je     c0008a2c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a25:	b8 0d 8c 02 c0       	mov    eax,0xc0028c0d
c0008a2a:	eb 08                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a2c:	b8 00 00 00 00       	mov    eax,0x0
c0008a31:	8d 76 00             	lea    esi,[esi+0x0]
c0008a34:	83 c4 0c             	add    esp,0xc
c0008a37:	c3                   	ret    

c0008a38 <Computer::close(int, int, void*)>:
c0008a38:	57                   	push   edi
c0008a39:	56                   	push   esi
c0008a3a:	53                   	push   ebx
c0008a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a47:	83 ec 0c             	sub    esp,0xc
c0008a4a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a50:	e8 a3 5d 00 00       	call   c000e7f8 <Device::closeAll()>
c0008a55:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a5b:	83 c4 10             	add    esp,0x10
c0008a5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a60:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a64:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a6c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a74:	5b                   	pop    ebx
c0008a75:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a78:	5e                   	pop    esi
c0008a79:	5f                   	pop    edi
c0008a7a:	ff e0                	jmp    eax

c0008a7c <Krnl::firstTask()>:
c0008a7c:	53                   	push   ebx
c0008a7d:	83 ec 14             	sub    esp,0x14
c0008a80:	68 89 45 02 c0       	push   0xc0024589
c0008a85:	e8 b7 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a8a:	fb                   	sti    
c0008a8b:	c7 04 24 a0 45 02 c0 	mov    DWORD PTR [esp],0xc00245a0
c0008a92:	e8 aa 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a97:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a9e:	e8 44 13 00 00       	call   c0009de7 <malloc>
c0008aa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008aaa:	89 c3                	mov    ebx,eax
c0008aac:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0008ab2:	68 b9 45 02 c0       	push   0xc00245b9
c0008ab7:	6a 01                	push   0x1
c0008ab9:	50                   	push   eax
c0008aba:	e8 59 00 01 00       	call   c0018b18 <Process::Process(bool, char const*, Process*, char**)>
c0008abf:	83 c4 20             	add    esp,0x20
c0008ac2:	68 ff 00 00 00       	push   0xff
c0008ac7:	6a 00                	push   0x0
c0008ac9:	68 df 97 00 c0       	push   0xc00097df
c0008ace:	53                   	push   ebx
c0008acf:	e8 4c 02 01 00       	call   c0018d20 <Process::createThread(void (*)(void*), void*, int)>
c0008ad4:	6a 7a                	push   0x7a
c0008ad6:	6a 00                	push   0x0
c0008ad8:	68 64 97 01 c0       	push   0xc0019764
c0008add:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0008ae3:	e8 38 02 01 00       	call   c0018d20 <Process::createThread(void (*)(void*), void*, int)>
c0008ae8:	83 c4 14             	add    esp,0x14
c0008aeb:	a3 08 a1 02 c0       	mov    ds:0xc002a108,eax
c0008af0:	68 ac 48 02 c0       	push   0xc00248ac
c0008af5:	c6 05 0d 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028c0d,0x1
c0008afc:	e8 40 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b01:	e8 39 10 01 00       	call   c0019b3f <Vm::initialise8086()>
c0008b06:	e8 87 49 00 00       	call   c000d492 <Fs::initVFS()>
c0008b0b:	c7 04 24 c6 45 02 c0 	mov    DWORD PTR [esp],0xc00245c6
c0008b12:	e8 2a 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b17:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0008b1c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b22:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b24:	6a 00                	push   0x0
c0008b26:	6a 00                	push   0x0
c0008b28:	6a 00                	push   0x0
c0008b2a:	50                   	push   eax
c0008b2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b2e:	83 c4 14             	add    esp,0x14
c0008b31:	68 ac 48 02 c0       	push   0xc00248ac
c0008b36:	e8 06 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b3b:	e8 46 e8 00 00       	call   c0017386 <Sys::loadSyscalls()>
c0008b40:	e8 8f c5 00 00       	call   c00150d4 <Krnl::loadSystemEnv()>
c0008b45:	e8 fa c9 00 00       	call   c0015544 <Krnl::setupPowerManager()>
c0008b4a:	83 c4 0c             	add    esp,0xc
c0008b4d:	6a 3a                	push   0x3a
c0008b4f:	68 e0 45 02 c0       	push   0xc00245e0
c0008b54:	68 e9 45 02 c0       	push   0xc00245e9
c0008b59:	e8 eb d5 00 00       	call   c0016149 <Reg::readIntWithDefault(char*, char*, int)>
c0008b5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b61:	e8 4a 55 00 00       	call   c000e0b0 <User::loadClockSettings(int)>
c0008b66:	c7 04 24 d0 48 02 c0 	mov    DWORD PTR [esp],0xc00248d0
c0008b6d:	e8 cf 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b72:	58                   	pop    eax
c0008b73:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0008b78:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b7e:	e8 35 5c 00 00       	call   c000e7b8 <Device::loadDriversForAll()>
c0008b83:	c7 04 24 f1 45 02 c0 	mov    DWORD PTR [esp],0xc00245f1
c0008b8a:	e8 b2 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b8f:	e8 a8 c0 00 00       	call   c0014c3c <Krnl::startCPUs()>
c0008b94:	c7 04 24 0b 46 02 c0 	mov    DWORD PTR [esp],0xc002460b
c0008b9b:	e8 a1 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008ba0:	5a                   	pop    edx
c0008ba1:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0008ba7:	59                   	pop    ecx
c0008ba8:	6a 01                	push   0x1
c0008baa:	68 1c 46 02 c0       	push   0xc002461c
c0008baf:	e8 a2 f9 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c0008bb4:	5a                   	pop    edx
c0008bb5:	59                   	pop    ecx
c0008bb6:	53                   	push   ebx
c0008bb7:	50                   	push   eax
c0008bb8:	e8 ca fb 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c0008bbd:	83 c4 10             	add    esp,0x10
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	6a 02                	push   0x2
c0008bc5:	e8 6a 05 01 00       	call   c0019134 <blockTask(TaskState)>
c0008bca:	83 c4 10             	add    esp,0x10
c0008bcd:	eb f1                	jmp    c0008bc0 <Krnl::firstTask()+0x144>
c0008bcf:	90                   	nop

c0008bd0 <Computer::Computer()>:
c0008bd0:	83 ec 0c             	sub    esp,0xc
c0008bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd7:	83 ec 08             	sub    esp,0x8
c0008bda:	68 38 46 02 c0       	push   0xc0024638
c0008bdf:	50                   	push   eax
c0008be0:	e8 8d 5c 00 00       	call   c000e872 <Device::Device(char const*)>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	ba 80 49 02 c0       	mov    edx,0xc0024980
c0008bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf1:	89 10                	mov    DWORD PTR [eax],edx
c0008bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c05:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c13:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c19:	83 ca 04             	or     edx,0x4
c0008c1c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	0f b6 d0             	movzx  edx,al
c0008c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c67:	0f b6 d0             	movzx  edx,al
c0008c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c72:	83 e1 3f             	and    ecx,0x3f
c0008c75:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	0f b6 d0             	movzx  edx,al
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0008cb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cb8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cbe:	0f b6 d0             	movzx  edx,al
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cc9:	83 e1 3f             	and    ecx,0x3f
c0008ccc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	0f b6 d0             	movzx  edx,al
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d08:	8d 50 01             	lea    edx,[eax+0x1]
c0008d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d0f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d15:	0f b6 d0             	movzx  edx,al
c0008d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d20:	83 e1 3f             	and    ecx,0x3f
c0008d23:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d27:	90                   	nop
c0008d28:	83 c4 0c             	add    esp,0xc
c0008d2b:	c3                   	ret    

c0008d2c <Computer::setBootMessage(char const*)>:
c0008d2c:	c3                   	ret    
c0008d2d:	90                   	nop

c0008d2e <Computer::detectFeatures()>:
c0008d2e:	55                   	push   ebp
c0008d2f:	57                   	push   edi
c0008d30:	56                   	push   esi
c0008d31:	53                   	push   ebx
c0008d32:	83 ec 1c             	sub    esp,0x1c
c0008d35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d39:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d43:	e8 e1 74 ff ff       	call   c0000229 <detectCPUID>
c0008d48:	85 c0                	test   eax,eax
c0008d4a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d50:	0f 95 c2             	setne  dl
c0008d53:	83 e0 fd             	and    eax,0xfffffffd
c0008d56:	d1 e2                	shl    edx,1
c0008d58:	09 d0                	or     eax,edx
c0008d5a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d60:	a8 02                	test   al,0x2
c0008d62:	75 46                	jne    c0008daa <Computer::detectFeatures()+0x7c>
c0008d64:	f6 05 21 8c 02 c0 04 	test   BYTE PTR ds:0xc0028c21,0x4
c0008d6b:	74 07                	je     c0008d74 <Computer::detectFeatures()+0x46>
c0008d6d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d74:	e8 1d 9f 01 00       	call   c0022c96 <x87Detect>
c0008d79:	83 e0 01             	and    eax,0x1
c0008d7c:	c1 e0 04             	shl    eax,0x4
c0008d7f:	88 c2                	mov    dl,al
c0008d81:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d87:	83 e0 ef             	and    eax,0xffffffef
c0008d8a:	09 d0                	or     eax,edx
c0008d8c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d92:	a8 10                	test   al,0x10
c0008d94:	0f 85 2a 01 00 00    	jne    c0008ec4 <Computer::detectFeatures()+0x196>
c0008d9a:	84 c0                	test   al,al
c0008d9c:	0f 88 45 01 00 00    	js     c0008ee7 <Computer::detectFeatures()+0x1b9>
c0008da2:	83 c4 1c             	add    esp,0x1c
c0008da5:	5b                   	pop    ebx
c0008da6:	5e                   	pop    esi
c0008da7:	5f                   	pop    edi
c0008da8:	5d                   	pop    ebp
c0008da9:	c3                   	ret    
c0008daa:	83 ec 0c             	sub    esp,0xc
c0008dad:	6a 20                	push   0x20
c0008daf:	e8 4e aa 00 00       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0008db4:	83 e0 01             	and    eax,0x1
c0008db7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dbe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dc4:	83 e0 f7             	and    eax,0xfffffff7
c0008dc7:	09 d0                	or     eax,edx
c0008dc9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dcf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dd6:	e8 27 aa 00 00       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0008ddb:	83 e0 01             	and    eax,0x1
c0008dde:	88 c2                	mov    dl,al
c0008de0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008de6:	83 e0 fe             	and    eax,0xfffffffe
c0008de9:	09 d0                	or     eax,edx
c0008deb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008df1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008df8:	e8 05 aa 00 00       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0008dfd:	c1 e0 07             	shl    eax,0x7
c0008e00:	88 c2                	mov    dl,al
c0008e02:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008e08:	83 e0 7f             	and    eax,0x7f
c0008e0b:	09 d0                	or     eax,edx
c0008e0d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e13:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e1a:	e8 e3 a9 00 00       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 e0 01             	and    eax,0x1
c0008e25:	c1 e0 05             	shl    eax,0x5
c0008e28:	88 c2                	mov    dl,al
c0008e2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e30:	83 e0 df             	and    eax,0xffffffdf
c0008e33:	09 d0                	or     eax,edx
c0008e35:	f7 05 20 8c 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028c20,0x401
c0008e3f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e45:	0f 84 c2 00 00 00    	je     c0008f0d <Computer::detectFeatures()+0x1df>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e5a:	88 c2                	mov    dl,al
c0008e5c:	83 e2 09             	and    edx,0x9
c0008e5f:	fe ca                	dec    dl
c0008e61:	75 09                	jne    c0008e6c <Computer::detectFeatures()+0x13e>
c0008e63:	83 e0 fe             	and    eax,0xfffffffe
c0008e66:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e73:	50                   	push   eax
c0008e74:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e78:	55                   	push   ebp
c0008e79:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e7d:	57                   	push   edi
c0008e7e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e82:	56                   	push   esi
c0008e83:	68 00 00 00 80       	push   0x80000000
c0008e88:	e8 f1 a8 00 00       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e8d:	83 c4 20             	add    esp,0x20
c0008e90:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e9b:	0f 86 c3 fe ff ff    	jbe    c0008d64 <Computer::detectFeatures()+0x36>
c0008ea1:	83 ec 0c             	sub    esp,0xc
c0008ea4:	50                   	push   eax
c0008ea5:	55                   	push   ebp
c0008ea6:	57                   	push   edi
c0008ea7:	56                   	push   esi
c0008ea8:	68 01 00 00 80       	push   0x80000001
c0008ead:	e8 cc a8 00 00       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008eb2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ebc:	83 c4 20             	add    esp,0x20
c0008ebf:	e9 a0 fe ff ff       	jmp    c0008d64 <Computer::detectFeatures()+0x36>
c0008ec4:	e8 87 9d 01 00       	call   c0022c50 <absolutelyNoChanceInHell>
c0008ec9:	88 c2                	mov    dl,al
c0008ecb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ed1:	c1 e2 07             	shl    edx,0x7
c0008ed4:	83 e0 7f             	and    eax,0x7f
c0008ed7:	09 d0                	or     eax,edx
c0008ed9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008edf:	84 c0                	test   al,al
c0008ee1:	0f 89 bb fe ff ff    	jns    c0008da2 <Computer::detectFeatures()+0x74>
c0008ee7:	e8 d4 9c 01 00       	call   c0022bc0 <avxDetect>
c0008eec:	83 e0 01             	and    eax,0x1
c0008eef:	c1 e0 05             	shl    eax,0x5
c0008ef2:	88 c2                	mov    dl,al
c0008ef4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008efa:	83 e0 df             	and    eax,0xffffffdf
c0008efd:	09 d0                	or     eax,edx
c0008eff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008f05:	83 c4 1c             	add    esp,0x1c
c0008f08:	5b                   	pop    ebx
c0008f09:	5e                   	pop    esi
c0008f0a:	5f                   	pop    edi
c0008f0b:	5d                   	pop    ebp
c0008f0c:	c3                   	ret    
c0008f0d:	83 ec 0c             	sub    esp,0xc
c0008f10:	68 00 02 00 00       	push   0x200
c0008f15:	e8 e8 a8 00 00       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0008f1a:	83 c4 10             	add    esp,0x10
c0008f1d:	83 e0 01             	and    eax,0x1
c0008f20:	88 c2                	mov    dl,al
c0008f22:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f28:	83 e0 fe             	and    eax,0xfffffffe
c0008f2b:	09 d0                	or     eax,edx
c0008f2d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f33:	e9 1c ff ff ff       	jmp    c0008e54 <Computer::detectFeatures()+0x126>

c0008f38 <Computer::displayFeatures()>:
c0008f38:	53                   	push   ebx
c0008f39:	83 ec 14             	sub    esp,0x14
c0008f3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f40:	68 48 46 02 c0       	push   0xc0024648
c0008f45:	e8 b1 41 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f54:	0f 85 73 02 00 00    	jne    c00091cd <Computer::displayFeatures()+0x295>
c0008f5a:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008f5f:	83 ec 08             	sub    esp,0x8
c0008f62:	50                   	push   eax
c0008f63:	68 5b 46 02 c0       	push   0xc002465b
c0008f68:	e8 8e 41 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0008f6d:	83 c4 10             	add    esp,0x10
c0008f70:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f77:	0f 85 8c 02 00 00    	jne    c0009209 <Computer::displayFeatures()+0x2d1>
c0008f7d:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008f82:	83 ec 08             	sub    esp,0x8
c0008f85:	50                   	push   eax
c0008f86:	68 6c 46 02 c0       	push   0xc002466c
c0008f8b:	e8 6b 41 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f9a:	0f 85 5f 02 00 00    	jne    c00091ff <Computer::displayFeatures()+0x2c7>
c0008fa0:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008fa5:	83 ec 08             	sub    esp,0x8
c0008fa8:	50                   	push   eax
c0008fa9:	68 7d 46 02 c0       	push   0xc002467d
c0008fae:	e8 48 41 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0008fb3:	83 c4 10             	add    esp,0x10
c0008fb6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fbd:	0f 85 32 02 00 00    	jne    c00091f5 <Computer::displayFeatures()+0x2bd>
c0008fc3:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008fc8:	83 ec 08             	sub    esp,0x8
c0008fcb:	50                   	push   eax
c0008fcc:	68 8e 46 02 c0       	push   0xc002468e
c0008fd1:	e8 25 41 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fe0:	0f 85 05 02 00 00    	jne    c00091eb <Computer::displayFeatures()+0x2b3>
c0008fe6:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0008feb:	83 ec 08             	sub    esp,0x8
c0008fee:	50                   	push   eax
c0008fef:	68 9f 46 02 c0       	push   0xc002469f
c0008ff4:	e8 02 41 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0008ff9:	83 c4 10             	add    esp,0x10
c0008ffc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0009003:	0f 85 d8 01 00 00    	jne    c00091e1 <Computer::displayFeatures()+0x2a9>
c0009009:	b8 45 46 02 c0       	mov    eax,0xc0024645
c000900e:	83 ec 08             	sub    esp,0x8
c0009011:	50                   	push   eax
c0009012:	68 b0 46 02 c0       	push   0xc00246b0
c0009017:	e8 df 40 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000901c:	83 c4 10             	add    esp,0x10
c000901f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009026:	0f 85 ab 01 00 00    	jne    c00091d7 <Computer::displayFeatures()+0x29f>
c000902c:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009031:	83 ec 08             	sub    esp,0x8
c0009034:	50                   	push   eax
c0009035:	68 c1 46 02 c0       	push   0xc00246c1
c000903a:	e8 bc 40 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000903f:	83 c4 10             	add    esp,0x10
c0009042:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009049:	0f 88 1b 02 00 00    	js     c000926a <Computer::displayFeatures()+0x332>
c000904f:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009054:	83 ec 08             	sub    esp,0x8
c0009057:	50                   	push   eax
c0009058:	68 d2 46 02 c0       	push   0xc00246d2
c000905d:	e8 99 40 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000906c:	0f 85 a1 01 00 00    	jne    c0009213 <Computer::displayFeatures()+0x2db>
c0009072:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009077:	83 ec 08             	sub    esp,0x8
c000907a:	50                   	push   eax
c000907b:	68 e3 46 02 c0       	push   0xc00246e3
c0009080:	e8 76 40 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009085:	83 c4 10             	add    esp,0x10
c0009088:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000908f:	0f 85 cb 01 00 00    	jne    c0009260 <Computer::displayFeatures()+0x328>
c0009095:	b8 45 46 02 c0       	mov    eax,0xc0024645
c000909a:	83 ec 08             	sub    esp,0x8
c000909d:	50                   	push   eax
c000909e:	68 f4 46 02 c0       	push   0xc00246f4
c00090a3:	e8 53 40 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090b2:	0f 85 9e 01 00 00    	jne    c0009256 <Computer::displayFeatures()+0x31e>
c00090b8:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	50                   	push   eax
c00090c1:	68 05 47 02 c0       	push   0xc0024705
c00090c6:	e8 30 40 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090d5:	0f 85 71 01 00 00    	jne    c000924c <Computer::displayFeatures()+0x314>
c00090db:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	50                   	push   eax
c00090e4:	68 16 47 02 c0       	push   0xc0024716
c00090e9:	e8 0d 40 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00090ee:	83 c4 10             	add    esp,0x10
c00090f1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090f8:	0f 85 44 01 00 00    	jne    c0009242 <Computer::displayFeatures()+0x30a>
c00090fe:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009103:	83 ec 08             	sub    esp,0x8
c0009106:	50                   	push   eax
c0009107:	68 27 47 02 c0       	push   0xc0024727
c000910c:	e8 ea 3f 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000911b:	0f 85 17 01 00 00    	jne    c0009238 <Computer::displayFeatures()+0x300>
c0009121:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009126:	83 ec 08             	sub    esp,0x8
c0009129:	50                   	push   eax
c000912a:	68 38 47 02 c0       	push   0xc0024738
c000912f:	e8 c7 3f 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009134:	83 c4 10             	add    esp,0x10
c0009137:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000913e:	0f 85 ea 00 00 00    	jne    c000922e <Computer::displayFeatures()+0x2f6>
c0009144:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0009149:	83 ec 08             	sub    esp,0x8
c000914c:	50                   	push   eax
c000914d:	68 49 47 02 c0       	push   0xc0024749
c0009152:	e8 a4 3f 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009157:	83 c4 10             	add    esp,0x10
c000915a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009161:	0f 88 0d 01 00 00    	js     c0009274 <Computer::displayFeatures()+0x33c>
c0009167:	b8 45 46 02 c0       	mov    eax,0xc0024645
c000916c:	83 ec 08             	sub    esp,0x8
c000916f:	50                   	push   eax
c0009170:	68 5a 47 02 c0       	push   0xc002475a
c0009175:	e8 81 3f 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009184:	0f 85 9a 00 00 00    	jne    c0009224 <Computer::displayFeatures()+0x2ec>
c000918a:	b8 45 46 02 c0       	mov    eax,0xc0024645
c000918f:	83 ec 08             	sub    esp,0x8
c0009192:	50                   	push   eax
c0009193:	68 6b 47 02 c0       	push   0xc002476b
c0009198:	e8 5e 3f 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000919d:	83 c4 10             	add    esp,0x10
c00091a0:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c00091a7:	75 74                	jne    c000921d <Computer::displayFeatures()+0x2e5>
c00091a9:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00091ae:	83 ec 08             	sub    esp,0x8
c00091b1:	50                   	push   eax
c00091b2:	68 7c 47 02 c0       	push   0xc002477c
c00091b7:	e8 3f 3f 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00091bc:	c7 44 24 20 7b 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc002677b
c00091c4:	83 c4 18             	add    esp,0x18
c00091c7:	5b                   	pop    ebx
c00091c8:	e9 2e 3f 00 00       	jmp    c000d0fb <Dbg::kprintf(char const*, ...)>
c00091cd:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091d2:	e9 88 fd ff ff       	jmp    c0008f5f <Computer::displayFeatures()+0x27>
c00091d7:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091dc:	e9 50 fe ff ff       	jmp    c0009031 <Computer::displayFeatures()+0xf9>
c00091e1:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091e6:	e9 23 fe ff ff       	jmp    c000900e <Computer::displayFeatures()+0xd6>
c00091eb:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091f0:	e9 f6 fd ff ff       	jmp    c0008feb <Computer::displayFeatures()+0xb3>
c00091f5:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00091fa:	e9 c9 fd ff ff       	jmp    c0008fc8 <Computer::displayFeatures()+0x90>
c00091ff:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009204:	e9 9c fd ff ff       	jmp    c0008fa5 <Computer::displayFeatures()+0x6d>
c0009209:	b8 41 46 02 c0       	mov    eax,0xc0024641
c000920e:	e9 6f fd ff ff       	jmp    c0008f82 <Computer::displayFeatures()+0x4a>
c0009213:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009218:	e9 5a fe ff ff       	jmp    c0009077 <Computer::displayFeatures()+0x13f>
c000921d:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009222:	eb 8a                	jmp    c00091ae <Computer::displayFeatures()+0x276>
c0009224:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009229:	e9 61 ff ff ff       	jmp    c000918f <Computer::displayFeatures()+0x257>
c000922e:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009233:	e9 11 ff ff ff       	jmp    c0009149 <Computer::displayFeatures()+0x211>
c0009238:	b8 41 46 02 c0       	mov    eax,0xc0024641
c000923d:	e9 e4 fe ff ff       	jmp    c0009126 <Computer::displayFeatures()+0x1ee>
c0009242:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009247:	e9 b7 fe ff ff       	jmp    c0009103 <Computer::displayFeatures()+0x1cb>
c000924c:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009251:	e9 8a fe ff ff       	jmp    c00090e0 <Computer::displayFeatures()+0x1a8>
c0009256:	b8 41 46 02 c0       	mov    eax,0xc0024641
c000925b:	e9 5d fe ff ff       	jmp    c00090bd <Computer::displayFeatures()+0x185>
c0009260:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009265:	e9 30 fe ff ff       	jmp    c000909a <Computer::displayFeatures()+0x162>
c000926a:	b8 41 46 02 c0       	mov    eax,0xc0024641
c000926f:	e9 e0 fd ff ff       	jmp    c0009054 <Computer::displayFeatures()+0x11c>
c0009274:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0009279:	e9 ee fe ff ff       	jmp    c000916c <Computer::displayFeatures()+0x234>

c000927e <Computer::rdmsr(unsigned int)>:
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009285:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000928c:	74 0a                	je     c0009298 <Computer::rdmsr(unsigned int)+0x1a>
c000928e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009292:	0f 32                	rdmsr  
c0009294:	83 c4 0c             	add    esp,0xc
c0009297:	c3                   	ret    
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	68 8d 47 02 c0       	push   0xc002478d
c00092a0:	e8 38 bf 00 00       	call   c00151dd <Krnl::panic(char const*)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	eb e4                	jmp    c000928e <Computer::rdmsr(unsigned int)+0x10>

c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>:
c00092aa:	57                   	push   edi
c00092ab:	56                   	push   esi
c00092ac:	52                   	push   edx
c00092ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092c0:	74 0e                	je     c00092d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092c6:	89 f0                	mov    eax,esi
c00092c8:	89 fa                	mov    edx,edi
c00092ca:	0f 30                	wrmsr  
c00092cc:	58                   	pop    eax
c00092cd:	5e                   	pop    esi
c00092ce:	5f                   	pop    edi
c00092cf:	c3                   	ret    
c00092d0:	83 ec 0c             	sub    esp,0xc
c00092d3:	68 93 47 02 c0       	push   0xc0024793
c00092d8:	e8 00 bf 00 00       	call   c00151dd <Krnl::panic(char const*)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	eb e0                	jmp    c00092c2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092e2 <Computer::shutdown()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 00                	push   0x0
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::restart()>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	8b 10                	mov    edx,DWORD PTR [eax]
c0009303:	6a 00                	push   0x0
c0009305:	6a 00                	push   0x0
c0009307:	6a 01                	push   0x1
c0009309:	50                   	push   eax
c000930a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000930d:	83 c4 1c             	add    esp,0x1c
c0009310:	c3                   	ret    
c0009311:	90                   	nop

c0009312 <Computer::sleep()>:
c0009312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009316:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000931c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009320:	e9 ab 9a 00 00       	jmp    c0012dd0 <ACPI::sleep()>
c0009325:	90                   	nop

c0009326 <Computer::nmiEnabled()>:
c0009326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000932a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009330:	c3                   	ret    
c0009331:	90                   	nop

c0009332 <Computer::readCMOS(unsigned char)>:
c0009332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009336:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000933d:	19 c0                	sbb    eax,eax
c000933f:	83 e0 80             	and    eax,0xffffff80
c0009342:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009346:	e6 70                	out    0x70,al
c0009348:	e4 71                	in     al,0x71
c000934a:	c3                   	ret    
c000934b:	90                   	nop

c000934c <Computer::enableNMI(bool)>:
c000934c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009354:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000935a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009362:	eb ce                	jmp    c0009332 <Computer::readCMOS(unsigned char)>

c0009364 <Computer::open(int, int, void*)>:
c0009364:	56                   	push   esi
c0009365:	53                   	push   ebx
c0009366:	83 ec 10             	sub    esp,0x10
c0009369:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000936d:	68 f0 48 02 c0       	push   0xc00248f0
c0009372:	e8 ca 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009377:	58                   	pop    eax
c0009378:	f6 05 20 8c 02 c0 04 	test   BYTE PTR ds:0xc0028c20,0x4
c000937f:	5a                   	pop    edx
c0009380:	0f 94 05 e0 7f 02 c0 	sete   BYTE PTR ds:0xc0027fe0
c0009387:	68 58 01 00 00       	push   0x158
c000938c:	68 99 47 02 c0       	push   0xc0024799
c0009391:	e8 65 3d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009396:	59                   	pop    ecx
c0009397:	5e                   	pop    esi
c0009398:	68 14 01 00 00       	push   0x114
c000939d:	68 af 47 02 c0       	push   0xc00247af
c00093a2:	e8 54 3d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00093a7:	58                   	pop    eax
c00093a8:	5a                   	pop    edx
c00093a9:	6a 14                	push   0x14
c00093ab:	68 c3 47 02 c0       	push   0xc00247c3
c00093b0:	e8 46 3d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00093b5:	59                   	pop    ecx
c00093b6:	5e                   	pop    esi
c00093b7:	68 1f 07 00 00       	push   0x71f
c00093bc:	68 d6 47 02 c0       	push   0xc00247d6
c00093c1:	e8 35 3d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00093c6:	58                   	pop    eax
c00093c7:	5a                   	pop    edx
c00093c8:	6a 5f                	push   0x5f
c00093ca:	68 ed 47 02 c0       	push   0xc00247ed
c00093cf:	e8 27 3d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00093d4:	c7 04 24 03 48 02 c0 	mov    DWORD PTR [esp],0xc0024803
c00093db:	e8 1b 3d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00093e0:	c7 04 24 15 48 02 c0 	mov    DWORD PTR [esp],0xc0024815
c00093e7:	e8 55 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00093ec:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093f3:	e8 ef 09 00 00       	call   c0009de7 <malloc>
c00093f8:	89 c6                	mov    esi,eax
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 86 92 00 00       	call   c0012688 <ACPI::ACPI()>
c0009402:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009408:	c7 04 24 2f 48 02 c0 	mov    DWORD PTR [esp],0xc002482f
c000940f:	e8 2d 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009414:	59                   	pop    ecx
c0009415:	5e                   	pop    esi
c0009416:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000941c:	53                   	push   ebx
c000941d:	e8 4c 52 00 00       	call   c000e66e <Device::addChild(Device*)>
c0009422:	c7 04 24 14 49 02 c0 	mov    DWORD PTR [esp],0xc0024914
c0009429:	e8 13 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000942e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009431:	e8 f8 f8 ff ff       	call   c0008d2e <Computer::detectFeatures()>
c0009436:	c7 04 24 34 49 02 c0 	mov    DWORD PTR [esp],0xc0024934
c000943d:	e8 ff 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	e8 ee fa ff ff       	call   c0008f38 <Computer::displayFeatures()>
c000944a:	c7 04 24 49 48 02 c0 	mov    DWORD PTR [esp],0xc0024849
c0009451:	e8 eb 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009456:	58                   	pop    eax
c0009457:	5a                   	pop    edx
c0009458:	6a 01                	push   0x1
c000945a:	53                   	push   ebx
c000945b:	e8 ec fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c0009460:	c7 04 24 f1 45 02 c0 	mov    DWORD PTR [esp],0xc00245f1
c0009467:	e8 d5 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000946c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009473:	e8 6f 09 00 00       	call   c0009de7 <malloc>
c0009478:	89 04 24             	mov    DWORD PTR [esp],eax
c000947b:	89 c6                	mov    esi,eax
c000947d:	e8 38 a4 00 00       	call   c00138ba <CPU::CPU()>
c0009482:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009488:	59                   	pop    ecx
c0009489:	58                   	pop    eax
c000948a:	56                   	push   esi
c000948b:	53                   	push   ebx
c000948c:	e8 dd 51 00 00       	call   c000e66e <Device::addChild(Device*)>
c0009491:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009497:	8b 10                	mov    edx,DWORD PTR [eax]
c0009499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000949d:	6a 00                	push   0x0
c000949f:	6a 00                	push   0x0
c00094a1:	50                   	push   eax
c00094a2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094a5:	83 c4 20             	add    esp,0x20
c00094a8:	e8 20 c1 00 00       	call   c00155cd <Krnl::initRNG()>
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	68 54 49 02 c0       	push   0xc0024954
c00094b5:	e8 87 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094ba:	e8 4b 57 00 00       	call   c000ec0a <setupFPU()>
c00094bf:	83 c4 10             	add    esp,0x10
c00094c2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094c8:	85 c0                	test   eax,eax
c00094ca:	74 1f                	je     c00094eb <Computer::open(int, int, void*)+0x187>
c00094cc:	83 ec 08             	sub    esp,0x8
c00094cf:	50                   	push   eax
c00094d0:	53                   	push   ebx
c00094d1:	e8 98 51 00 00       	call   c000e66e <Device::addChild(Device*)>
c00094d6:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00094de:	6a 00                	push   0x0
c00094e0:	6a 00                	push   0x0
c00094e2:	6a 00                	push   0x0
c00094e4:	50                   	push   eax
c00094e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094e8:	83 c4 20             	add    esp,0x20
c00094eb:	83 ec 0c             	sub    esp,0xc
c00094ee:	68 5a 48 02 c0       	push   0xc002485a
c00094f3:	e8 49 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094f8:	c7 04 24 7c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a7c
c00094ff:	e8 30 f9 00 00       	call   c0018e34 <setupMultitasking(void (*)())>
c0009504:	83 c4 14             	add    esp,0x14
c0009507:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000950c:	5b                   	pop    ebx
c000950d:	5e                   	pop    esi
c000950e:	c3                   	ret    
c000950f:	90                   	nop

c0009510 <Computer::disableNMI()>:
c0009510:	6a 00                	push   0x0
c0009512:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009516:	e8 31 fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c000951b:	58                   	pop    eax
c000951c:	5a                   	pop    edx
c000951d:	c3                   	ret    

c000951e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009522:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009529:	19 c0                	sbb    eax,eax
c000952b:	83 e0 80             	and    eax,0xffffff80
c000952e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009532:	e6 70                	out    0x70,al
c0009534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009538:	e6 71                	out    0x71,al
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <Computer::handleNMI()>:
c000953c:	56                   	push   esi
c000953d:	53                   	push   ebx
c000953e:	83 ec 10             	sub    esp,0x10
c0009541:	e4 92                	in     al,0x92
c0009543:	89 c6                	mov    esi,eax
c0009545:	e4 61                	in     al,0x61
c0009547:	68 75 48 02 c0       	push   0xc0024875
c000954c:	88 c3                	mov    bl,al
c000954e:	e8 a8 3b 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009553:	83 c4 10             	add    esp,0x10
c0009556:	83 e6 10             	and    esi,0x10
c0009559:	75 0d                	jne    c0009568 <Computer::handleNMI()+0x2c>
c000955b:	f6 c3 40             	test   bl,0x40
c000955e:	75 1d                	jne    c000957d <Computer::handleNMI()+0x41>
c0009560:	84 db                	test   bl,bl
c0009562:	78 2d                	js     c0009591 <Computer::handleNMI()+0x55>
c0009564:	58                   	pop    eax
c0009565:	5b                   	pop    ebx
c0009566:	5e                   	pop    esi
c0009567:	c3                   	ret    
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 86 48 02 c0       	push   0xc0024886
c0009570:	e8 68 bc 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	f6 c3 40             	test   bl,0x40
c000957b:	74 e3                	je     c0009560 <Computer::handleNMI()+0x24>
c000957d:	83 ec 0c             	sub    esp,0xc
c0009580:	68 93 48 02 c0       	push   0xc0024893
c0009585:	e8 53 bc 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000958a:	83 c4 10             	add    esp,0x10
c000958d:	84 db                	test   bl,bl
c000958f:	79 d3                	jns    c0009564 <Computer::handleNMI()+0x28>
c0009591:	c7 44 24 10 9d 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc002489d
c0009599:	5a                   	pop    edx
c000959a:	5b                   	pop    ebx
c000959b:	5e                   	pop    esi
c000959c:	e9 3c bc 00 00       	jmp    c00151dd <Krnl::panic(char const*)>
c00095a1:	90                   	nop

c00095a2 <Computer::setDiskActivityLight(int, bool)>:
c00095a2:	56                   	push   esi
c00095a3:	53                   	push   ebx
c00095a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00095a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00095ad:	77 1b                	ja     c00095ca <Computer::setDiskActivityLight(int, bool)+0x28>
c00095af:	e4 92                	in     al,0x92
c00095b1:	bb 40 00 00 00       	mov    ebx,0x40
c00095b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095ba:	89 da                	mov    edx,ebx
c00095bc:	d3 e2                	shl    edx,cl
c00095be:	89 f1                	mov    ecx,esi
c00095c0:	f7 d2                	not    edx
c00095c2:	d3 e3                	shl    ebx,cl
c00095c4:	21 d0                	and    eax,edx
c00095c6:	09 d8                	or     eax,ebx
c00095c8:	e6 92                	out    0x92,al
c00095ca:	5b                   	pop    ebx
c00095cb:	5e                   	pop    esi
c00095cc:	c3                   	ret    
c00095cd:	90                   	nop

c00095ce <GDTEntry::setBase(unsigned int)>:
c00095ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095d6:	89 c1                	mov    ecx,eax
c00095d8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095dc:	c1 e9 10             	shr    ecx,0x10
c00095df:	c1 e8 18             	shr    eax,0x18
c00095e2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095e5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095e8:	c3                   	ret    
c00095e9:	90                   	nop

c00095ea <GDTEntry::setLimit(unsigned int)>:
c00095ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095f2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095f5:	66 89 01             	mov    WORD PTR [ecx],ax
c00095f8:	83 e2 f0             	and    edx,0xfffffff0
c00095fb:	c1 e8 10             	shr    eax,0x10
c00095fe:	83 e0 0f             	and    eax,0xf
c0009601:	09 d0                	or     eax,edx
c0009603:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009606:	c3                   	ret    
c0009607:	90                   	nop

c0009608 <GDT::GDT()>:
c0009608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000960c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009616:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000961c:	90                   	nop
c000961d:	c3                   	ret    

c000961e <GDT::addEntry(GDTEntry)>:
c000961e:	53                   	push   ebx
c000961f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009627:	8b 02                	mov    eax,DWORD PTR [edx]
c0009629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000962d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009631:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009635:	8d 48 01             	lea    ecx,[eax+0x1]
c0009638:	c1 e0 03             	shl    eax,0x3
c000963b:	89 0a                	mov    DWORD PTR [edx],ecx
c000963d:	5b                   	pop    ebx
c000963e:	c3                   	ret    
c000963f:	90                   	nop

c0009640 <GDT::getNumberOfEntries()>:
c0009640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009644:	8b 00                	mov    eax,DWORD PTR [eax]
c0009646:	c3                   	ret    
c0009647:	90                   	nop

c0009648 <GDT::flush()>:
c0009648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000964c:	8b 10                	mov    edx,DWORD PTR [eax]
c000964e:	83 c0 04             	add    eax,0x4
c0009651:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009658:	a3 12 8c 02 c0       	mov    ds:0xc0028c12,eax
c000965d:	66 89 15 10 8c 02 c0 	mov    WORD PTR ds:0xc0028c10,dx
c0009664:	e9 2c 6d ff ff       	jmp    c0000395 <loadGDT>
c0009669:	90                   	nop

c000966a <GDT::setup()>:
c000966a:	57                   	push   edi
c000966b:	56                   	push   esi
c000966c:	53                   	push   ebx
c000966d:	83 ec 40             	sub    esp,0x40
c0009670:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009674:	6a 00                	push   0x0
c0009676:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000967a:	56                   	push   esi
c000967b:	e8 4e ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c0009680:	6a 00                	push   0x0
c0009682:	56                   	push   esi
c0009683:	e8 62 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c0009688:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009690:	6a 00                	push   0x0
c0009692:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009696:	56                   	push   esi
c0009697:	e8 32 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000969c:	68 ff ff ff 00       	push   0xffffff
c00096a1:	56                   	push   esi
c00096a2:	e8 43 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00096ab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096b0:	0d 00 9a c0 00       	or     eax,0xc09a00
c00096b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00096c2:	56                   	push   esi
c00096c3:	e8 06 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c00096c8:	68 ff ff ff 00       	push   0xffffff
c00096cd:	56                   	push   esi
c00096ce:	e8 17 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00096d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00096db:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00096df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00096e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e7:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096ec:	0d 00 92 c0 00       	or     eax,0xc09200
c00096f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00096f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00096f9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00096fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009705:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009709:	89 fa                	mov    edx,edi
c000970b:	80 cc 60             	or     ah,0x60
c000970e:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009714:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009718:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000971c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009724:	80 cc 60             	or     ah,0x60
c0009727:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000972b:	89 f8                	mov    eax,edi
c000972d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009732:	09 d0                	or     eax,edx
c0009734:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009738:	89 c7                	mov    edi,eax
c000973a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000973e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009742:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009746:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000974a:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009754:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009759:	09 d0                	or     eax,edx
c000975b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000975f:	83 c4 0c             	add    esp,0xc
c0009762:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009766:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000976a:	53                   	push   ebx
c000976b:	e8 ae fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009770:	83 c4 0c             	add    esp,0xc
c0009773:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009777:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000977b:	53                   	push   ebx
c000977c:	e8 9d fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009781:	83 c4 0c             	add    esp,0xc
c0009784:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009788:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000978c:	53                   	push   ebx
c000978d:	e8 8c fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009792:	83 c4 0c             	add    esp,0xc
c0009795:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009799:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000979d:	53                   	push   ebx
c000979e:	e8 7b fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097a3:	83 c4 0c             	add    esp,0xc
c00097a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ae:	53                   	push   ebx
c00097af:	e8 6a fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097b4:	83 c4 0c             	add    esp,0xc
c00097b7:	57                   	push   edi
c00097b8:	56                   	push   esi
c00097b9:	53                   	push   ebx
c00097ba:	e8 5f fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097bf:	83 c4 0c             	add    esp,0xc
c00097c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097ca:	53                   	push   ebx
c00097cb:	e8 4e fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097d3:	e8 70 fe ff ff       	call   c0009648 <GDT::flush()>
c00097d8:	83 c4 50             	add    esp,0x50
c00097db:	5b                   	pop    ebx
c00097dc:	5e                   	pop    esi
c00097dd:	5f                   	pop    edi
c00097de:	c3                   	ret    

c00097df <idleFunction(void*)>:
c00097df:	53                   	push   ebx
c00097e0:	83 ec 08             	sub    esp,0x8
c00097e3:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00097e8:	48                   	dec    eax
c00097e9:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00097ee:	75 01                	jne    c00097f1 <idleFunction(void*)+0x12>
c00097f0:	fb                   	sti    
c00097f1:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00097f6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00097fc:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009803:	74 3c                	je     c0009841 <idleFunction(void*)+0x62>
c0009805:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000980c:	74 33                	je     c0009841 <idleFunction(void*)+0x62>
c000980e:	31 db                	xor    ebx,ebx
c0009810:	52                   	push   edx
c0009811:	52                   	push   edx
c0009812:	68 e1 00 00 00       	push   0xe1
c0009817:	50                   	push   eax
c0009818:	e8 61 fa ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c000981d:	53                   	push   ebx
c000981e:	83 e0 02             	and    eax,0x2
c0009821:	50                   	push   eax
c0009822:	68 e1 00 00 00       	push   0xe1
c0009827:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c000982d:	e8 78 fa ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c0009832:	83 c4 20             	add    esp,0x20
c0009835:	e8 7a 69 ff ff       	call   c00001b4 <doTPAUSE>
c000983a:	e8 13 9a 01 00       	call   c0023252 <idleCommon()>
c000983f:	eb f4                	jmp    c0009835 <idleFunction(void*)+0x56>
c0009841:	fb                   	sti    
c0009842:	f4                   	hlt    
c0009843:	e8 0a 9a 01 00       	call   c0023252 <idleCommon()>
c0009848:	eb f7                	jmp    c0009841 <idleFunction(void*)+0x62>
c000984a:	66 90                	xchg   ax,ax

c000984c <IDTEntry::IDTEntry(bool)>:
c000984c:	83 ec 04             	sub    esp,0x4
c000984f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009853:	88 04 24             	mov    BYTE PTR [esp],al
c0009856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000985a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009864:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000986c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000986f:	83 e2 f0             	and    edx,0xfffffff0
c0009872:	83 ca 0e             	or     edx,0xe
c0009875:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000987f:	83 e2 ef             	and    edx,0xffffffef
c0009882:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009885:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009889:	74 05                	je     c0009890 <IDTEntry::IDTEntry(bool)+0x44>
c000988b:	b2 03                	mov    dl,0x3
c000988d:	eb 05                	jmp    c0009894 <IDTEntry::IDTEntry(bool)+0x48>
c000988f:	90                   	nop
c0009890:	b2 00                	mov    dl,0x0
c0009892:	66 90                	xchg   ax,ax
c0009894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009898:	83 e2 03             	and    edx,0x3
c000989b:	88 d1                	mov    cl,dl
c000989d:	c1 e1 05             	shl    ecx,0x5
c00098a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098a3:	83 e2 9f             	and    edx,0xffffff9f
c00098a6:	09 ca                	or     edx,ecx
c00098a8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098af:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098b2:	83 ca 80             	or     edx,0xffffff80
c00098b5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098b8:	90                   	nop
c00098b9:	83 c4 04             	add    esp,0x4
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <IDTEntry::setOffset(unsigned int)>:
c00098be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00098c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c6:	66 89 02             	mov    WORD PTR [edx],ax
c00098c9:	c1 e8 10             	shr    eax,0x10
c00098cc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00098d0:	c3                   	ret    
c00098d1:	90                   	nop
c00098d2:	66 90                	xchg   ax,ax

c00098d4 <IDT::IDT()>:
c00098d4:	90                   	nop
c00098d5:	c3                   	ret    

c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00098d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098da:	83 c0 30             	add    eax,0x30
c00098dd:	c3                   	ret    

c00098de <IDT::addEntry(IDTEntry, int)>:
c00098de:	53                   	push   ebx
c00098df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00098e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00098eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00098ef:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00098f2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00098f6:	5b                   	pop    ebx
c00098f7:	c3                   	ret    

c00098f8 <IDT::addEntry(int, void (*)(), bool)>:
c00098f8:	53                   	push   ebx
c00098f9:	83 ec 10             	sub    esp,0x10
c00098fc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009901:	50                   	push   eax
c0009902:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009906:	53                   	push   ebx
c0009907:	e8 40 ff ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c000990c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009910:	53                   	push   ebx
c0009911:	e8 a8 ff ff ff       	call   c00098be <IDTEntry::setOffset(unsigned int)>
c0009916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000991a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000991e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009922:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009926:	e8 b3 ff ff ff       	call   c00098de <IDT::addEntry(IDTEntry, int)>
c000992b:	83 c4 30             	add    esp,0x30
c000992e:	5b                   	pop    ebx
c000992f:	c3                   	ret    

c0009930 <IDT::flush()>:
c0009930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009934:	66 c7 05 18 8c 02 c0 ff 07 	mov    WORD PTR ds:0xc0028c18,0x7ff
c000993d:	a3 1a 8c 02 c0       	mov    ds:0xc0028c1a,eax
c0009942:	0f 01 1d 18 8c 02 c0 	lidtd  ds:0xc0028c18
c0009949:	c3                   	ret    

c000994a <IDT::setup()>:
c000994a:	57                   	push   edi
c000994b:	56                   	push   esi
c000994c:	53                   	push   ebx
c000994d:	83 ec 10             	sub    esp,0x10
c0009950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009954:	6a 00                	push   0x0
c0009956:	68 b5 03 00 c0       	push   0xc00003b5
c000995b:	6a 00                	push   0x0
c000995d:	53                   	push   ebx
c000995e:	e8 95 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009963:	6a 00                	push   0x0
c0009965:	68 c5 03 00 c0       	push   0xc00003c5
c000996a:	6a 01                	push   0x1
c000996c:	53                   	push   ebx
c000996d:	e8 86 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009972:	83 c4 20             	add    esp,0x20
c0009975:	6a 00                	push   0x0
c0009977:	68 cf 03 00 c0       	push   0xc00003cf
c000997c:	6a 02                	push   0x2
c000997e:	53                   	push   ebx
c000997f:	e8 74 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009984:	6a 00                	push   0x0
c0009986:	68 d9 03 00 c0       	push   0xc00003d9
c000998b:	6a 03                	push   0x3
c000998d:	53                   	push   ebx
c000998e:	e8 65 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009993:	83 c4 20             	add    esp,0x20
c0009996:	6a 00                	push   0x0
c0009998:	68 e3 03 00 c0       	push   0xc00003e3
c000999d:	6a 04                	push   0x4
c000999f:	53                   	push   ebx
c00099a0:	e8 53 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099a5:	6a 00                	push   0x0
c00099a7:	68 ed 03 00 c0       	push   0xc00003ed
c00099ac:	6a 05                	push   0x5
c00099ae:	53                   	push   ebx
c00099af:	e8 44 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099b4:	83 c4 20             	add    esp,0x20
c00099b7:	6a 00                	push   0x0
c00099b9:	68 f7 03 00 c0       	push   0xc00003f7
c00099be:	6a 06                	push   0x6
c00099c0:	53                   	push   ebx
c00099c1:	e8 32 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099c6:	6a 00                	push   0x0
c00099c8:	68 01 04 00 c0       	push   0xc0000401
c00099cd:	6a 07                	push   0x7
c00099cf:	53                   	push   ebx
c00099d0:	e8 23 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099d5:	83 c4 20             	add    esp,0x20
c00099d8:	6a 00                	push   0x0
c00099da:	68 0b 04 00 c0       	push   0xc000040b
c00099df:	6a 08                	push   0x8
c00099e1:	53                   	push   ebx
c00099e2:	e8 11 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099e7:	6a 00                	push   0x0
c00099e9:	68 13 04 00 c0       	push   0xc0000413
c00099ee:	6a 09                	push   0x9
c00099f0:	53                   	push   ebx
c00099f1:	e8 02 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099f6:	83 c4 20             	add    esp,0x20
c00099f9:	6a 00                	push   0x0
c00099fb:	68 1d 04 00 c0       	push   0xc000041d
c0009a00:	6a 0a                	push   0xa
c0009a02:	53                   	push   ebx
c0009a03:	e8 f0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a08:	6a 00                	push   0x0
c0009a0a:	68 25 04 00 c0       	push   0xc0000425
c0009a0f:	6a 0b                	push   0xb
c0009a11:	53                   	push   ebx
c0009a12:	e8 e1 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a17:	83 c4 20             	add    esp,0x20
c0009a1a:	6a 00                	push   0x0
c0009a1c:	68 2d 04 00 c0       	push   0xc000042d
c0009a21:	6a 0c                	push   0xc
c0009a23:	53                   	push   ebx
c0009a24:	e8 cf fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a29:	6a 00                	push   0x0
c0009a2b:	68 35 04 00 c0       	push   0xc0000435
c0009a30:	6a 0d                	push   0xd
c0009a32:	53                   	push   ebx
c0009a33:	e8 c0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a38:	83 c4 20             	add    esp,0x20
c0009a3b:	6a 00                	push   0x0
c0009a3d:	68 3d 04 00 c0       	push   0xc000043d
c0009a42:	6a 0e                	push   0xe
c0009a44:	53                   	push   ebx
c0009a45:	e8 ae fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a4a:	6a 00                	push   0x0
c0009a4c:	68 45 04 00 c0       	push   0xc0000445
c0009a51:	6a 0f                	push   0xf
c0009a53:	53                   	push   ebx
c0009a54:	e8 9f fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a59:	83 c4 20             	add    esp,0x20
c0009a5c:	6a 00                	push   0x0
c0009a5e:	68 4f 04 00 c0       	push   0xc000044f
c0009a63:	6a 10                	push   0x10
c0009a65:	53                   	push   ebx
c0009a66:	e8 8d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a6b:	6a 00                	push   0x0
c0009a6d:	68 59 04 00 c0       	push   0xc0000459
c0009a72:	6a 11                	push   0x11
c0009a74:	53                   	push   ebx
c0009a75:	e8 7e fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a7a:	83 c4 20             	add    esp,0x20
c0009a7d:	6a 00                	push   0x0
c0009a7f:	68 63 04 00 c0       	push   0xc0000463
c0009a84:	6a 12                	push   0x12
c0009a86:	53                   	push   ebx
c0009a87:	e8 6c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a8c:	6a 01                	push   0x1
c0009a8e:	68 fd 04 00 c0       	push   0xc00004fd
c0009a93:	6a 60                	push   0x60
c0009a95:	53                   	push   ebx
c0009a96:	e8 5d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a9b:	83 c4 20             	add    esp,0x20
c0009a9e:	6a 00                	push   0x0
c0009aa0:	68 04 05 00 c0       	push   0xc0000504
c0009aa5:	6a 20                	push   0x20
c0009aa7:	53                   	push   ebx
c0009aa8:	e8 4b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aad:	6a 00                	push   0x0
c0009aaf:	68 ef 04 00 c0       	push   0xc00004ef
c0009ab4:	6a 21                	push   0x21
c0009ab6:	53                   	push   ebx
c0009ab7:	e8 3c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009abc:	83 c4 20             	add    esp,0x20
c0009abf:	6a 00                	push   0x0
c0009ac1:	68 f6 04 00 c0       	push   0xc00004f6
c0009ac6:	6a 22                	push   0x22
c0009ac8:	53                   	push   ebx
c0009ac9:	e8 2a fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ace:	6a 00                	push   0x0
c0009ad0:	68 6d 04 00 c0       	push   0xc000046d
c0009ad5:	6a 23                	push   0x23
c0009ad7:	53                   	push   ebx
c0009ad8:	e8 1b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009add:	83 c4 20             	add    esp,0x20
c0009ae0:	6a 00                	push   0x0
c0009ae2:	68 77 04 00 c0       	push   0xc0000477
c0009ae7:	6a 24                	push   0x24
c0009ae9:	53                   	push   ebx
c0009aea:	e8 09 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aef:	6a 00                	push   0x0
c0009af1:	68 81 04 00 c0       	push   0xc0000481
c0009af6:	6a 25                	push   0x25
c0009af8:	53                   	push   ebx
c0009af9:	e8 fa fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009afe:	83 c4 20             	add    esp,0x20
c0009b01:	6a 00                	push   0x0
c0009b03:	68 8b 04 00 c0       	push   0xc000048b
c0009b08:	6a 26                	push   0x26
c0009b0a:	53                   	push   ebx
c0009b0b:	e8 e8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b10:	6a 00                	push   0x0
c0009b12:	68 95 04 00 c0       	push   0xc0000495
c0009b17:	6a 27                	push   0x27
c0009b19:	53                   	push   ebx
c0009b1a:	e8 d9 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b1f:	83 c4 20             	add    esp,0x20
c0009b22:	6a 00                	push   0x0
c0009b24:	68 9f 04 00 c0       	push   0xc000049f
c0009b29:	6a 28                	push   0x28
c0009b2b:	53                   	push   ebx
c0009b2c:	e8 c7 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b31:	6a 00                	push   0x0
c0009b33:	68 a9 04 00 c0       	push   0xc00004a9
c0009b38:	6a 29                	push   0x29
c0009b3a:	53                   	push   ebx
c0009b3b:	e8 b8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b40:	83 c4 20             	add    esp,0x20
c0009b43:	6a 00                	push   0x0
c0009b45:	68 b3 04 00 c0       	push   0xc00004b3
c0009b4a:	6a 2a                	push   0x2a
c0009b4c:	53                   	push   ebx
c0009b4d:	e8 a6 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b52:	6a 00                	push   0x0
c0009b54:	68 bd 04 00 c0       	push   0xc00004bd
c0009b59:	6a 2b                	push   0x2b
c0009b5b:	53                   	push   ebx
c0009b5c:	e8 97 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b61:	83 c4 20             	add    esp,0x20
c0009b64:	6a 00                	push   0x0
c0009b66:	68 c7 04 00 c0       	push   0xc00004c7
c0009b6b:	6a 2c                	push   0x2c
c0009b6d:	53                   	push   ebx
c0009b6e:	e8 85 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b73:	6a 00                	push   0x0
c0009b75:	68 d1 04 00 c0       	push   0xc00004d1
c0009b7a:	6a 2d                	push   0x2d
c0009b7c:	53                   	push   ebx
c0009b7d:	e8 76 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b82:	83 c4 20             	add    esp,0x20
c0009b85:	6a 00                	push   0x0
c0009b87:	68 db 04 00 c0       	push   0xc00004db
c0009b8c:	6a 2e                	push   0x2e
c0009b8e:	53                   	push   ebx
c0009b8f:	e8 64 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b94:	6a 00                	push   0x0
c0009b96:	68 e5 04 00 c0       	push   0xc00004e5
c0009b9b:	6a 2f                	push   0x2f
c0009b9d:	53                   	push   ebx
c0009b9e:	e8 55 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ba3:	83 c4 20             	add    esp,0x20
c0009ba6:	6a 00                	push   0x0
c0009ba8:	68 3b 05 00 c0       	push   0xc000053b
c0009bad:	6a 30                	push   0x30
c0009baf:	53                   	push   ebx
c0009bb0:	e8 43 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bb5:	6a 00                	push   0x0
c0009bb7:	68 45 05 00 c0       	push   0xc0000545
c0009bbc:	6a 31                	push   0x31
c0009bbe:	53                   	push   ebx
c0009bbf:	e8 34 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bc4:	83 c4 20             	add    esp,0x20
c0009bc7:	6a 00                	push   0x0
c0009bc9:	68 4f 05 00 c0       	push   0xc000054f
c0009bce:	6a 32                	push   0x32
c0009bd0:	53                   	push   ebx
c0009bd1:	e8 22 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bd6:	6a 00                	push   0x0
c0009bd8:	68 59 05 00 c0       	push   0xc0000559
c0009bdd:	6a 33                	push   0x33
c0009bdf:	53                   	push   ebx
c0009be0:	e8 13 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009be5:	83 c4 20             	add    esp,0x20
c0009be8:	6a 00                	push   0x0
c0009bea:	68 63 05 00 c0       	push   0xc0000563
c0009bef:	6a 34                	push   0x34
c0009bf1:	53                   	push   ebx
c0009bf2:	e8 01 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bf7:	6a 00                	push   0x0
c0009bf9:	68 6d 05 00 c0       	push   0xc000056d
c0009bfe:	6a 35                	push   0x35
c0009c00:	53                   	push   ebx
c0009c01:	e8 f2 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c06:	83 c4 20             	add    esp,0x20
c0009c09:	6a 00                	push   0x0
c0009c0b:	68 77 05 00 c0       	push   0xc0000577
c0009c10:	6a 36                	push   0x36
c0009c12:	53                   	push   ebx
c0009c13:	e8 e0 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c18:	6a 00                	push   0x0
c0009c1a:	68 81 05 00 c0       	push   0xc0000581
c0009c1f:	6a 37                	push   0x37
c0009c21:	53                   	push   ebx
c0009c22:	e8 d1 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c27:	83 c4 1c             	add    esp,0x1c
c0009c2a:	6a 03                	push   0x3
c0009c2c:	6a 02                	push   0x2
c0009c2e:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0009c34:	e8 d5 28 00 00       	call   c000c50e <VAS::allocatePages(int, int)>
c0009c39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009c40:	89 c6                	mov    esi,eax
c0009c42:	e8 a0 01 00 00       	call   c0009de7 <malloc>
c0009c47:	81 c6 00 20 00 00    	add    esi,0x2000
c0009c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c50:	89 c7                	mov    edi,eax
c0009c52:	e8 8d 1a 00 00       	call   c000b6e4 <TSS::TSS()>
c0009c57:	83 c4 0c             	add    esp,0xc
c0009c5a:	68 0b 04 00 c0       	push   0xc000040b
c0009c5f:	56                   	push   esi
c0009c60:	57                   	push   edi
c0009c61:	e8 c2 1a 00 00       	call   c000b728 <TSS::setup(unsigned long, unsigned long)>
c0009c66:	89 c6                	mov    esi,eax
c0009c68:	58                   	pop    eax
c0009c69:	5a                   	pop    edx
c0009c6a:	6a 00                	push   0x0
c0009c6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c70:	50                   	push   eax
c0009c71:	e8 d6 fb ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c0009c76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c7a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009c7f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009c86:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c90:	80 ce 05             	or     dh,0x5
c0009c93:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c9e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009ca4:	e8 87 fc ff ff       	call   c0009930 <IDT::flush()>
c0009ca9:	83 c4 20             	add    esp,0x20
c0009cac:	5b                   	pop    ebx
c0009cad:	5e                   	pop    esi
c0009cae:	5f                   	pop    edi
c0009caf:	c3                   	ret    

c0009cb0 <sbrk>:
c0009cb0:	55                   	push   ebp
c0009cb1:	57                   	push   edi
c0009cb2:	56                   	push   esi
c0009cb3:	53                   	push   ebx
c0009cb4:	83 ec 24             	sub    esp,0x24
c0009cb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cbb:	53                   	push   ebx
c0009cbc:	68 a4 49 02 c0       	push   0xc00249a4
c0009cc1:	e8 35 34 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	74 5f                	je     c0009d2c <sbrk+0x7c>
c0009ccd:	78 64                	js     c0009d33 <sbrk+0x83>
c0009ccf:	a1 7c 7e 02 c0       	mov    eax,ds:0xc0027e7c
c0009cd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cd8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009cde:	89 dd                	mov    ebp,ebx
c0009ce0:	78 69                	js     c0009d4b <sbrk+0x9b>
c0009ce2:	c1 fd 0c             	sar    ebp,0xc
c0009ce5:	bb 00 00 00 00       	mov    ebx,0x0
c0009cea:	8b 35 34 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d34
c0009cf0:	8b 3d 7c 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027e7c
c0009cf6:	e8 a3 07 00 00       	call   c000a49e <Phys::allocatePage()>
c0009cfb:	68 01 04 00 00       	push   0x401
c0009d00:	57                   	push   edi
c0009d01:	50                   	push   eax
c0009d02:	56                   	push   esi
c0009d03:	e8 04 27 00 00       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d08:	81 05 7c 7e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027e7c,0x1000
c0009d12:	43                   	inc    ebx
c0009d13:	83 c4 10             	add    esp,0x10
c0009d16:	39 dd                	cmp    ebp,ebx
c0009d18:	75 d0                	jne    c0009cea <sbrk+0x3a>
c0009d1a:	0f 20 d8             	mov    eax,cr3
c0009d1d:	0f 22 d8             	mov    cr3,eax
c0009d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d24:	83 c4 1c             	add    esp,0x1c
c0009d27:	5b                   	pop    ebx
c0009d28:	5e                   	pop    esi
c0009d29:	5f                   	pop    edi
c0009d2a:	5d                   	pop    ebp
c0009d2b:	c3                   	ret    
c0009d2c:	a1 7c 7e 02 c0       	mov    eax,ds:0xc0027e7c
c0009d31:	eb f1                	jmp    c0009d24 <sbrk+0x74>
c0009d33:	83 ec 08             	sub    esp,0x8
c0009d36:	53                   	push   ebx
c0009d37:	68 d0 49 02 c0       	push   0xc00249d0
c0009d3c:	e8 ba 33 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009d41:	83 c4 10             	add    esp,0x10
c0009d44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009d49:	eb d9                	jmp    c0009d24 <sbrk+0x74>
c0009d4b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009d51:	eb 8f                	jmp    c0009ce2 <sbrk+0x32>

c0009d53 <mmap>:
c0009d53:	83 ec 18             	sub    esp,0x18
c0009d56:	68 c2 49 02 c0       	push   0xc00249c2
c0009d5b:	e8 7d b4 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0009d60:	b8 00 00 00 00       	mov    eax,0x0
c0009d65:	83 c4 1c             	add    esp,0x1c
c0009d68:	c3                   	ret    

c0009d69 <munmap>:
c0009d69:	83 ec 18             	sub    esp,0x18
c0009d6c:	68 c7 49 02 c0       	push   0xc00249c7
c0009d71:	e8 67 b4 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0009d76:	b8 00 00 00 00       	mov    eax,0x0
c0009d7b:	83 c4 1c             	add    esp,0x1c
c0009d7e:	c3                   	ret    

c0009d7f <liballoc_lock()>:
c0009d7f:	fa                   	cli    
c0009d80:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0009d86:	b8 00 00 00 00       	mov    eax,0x0
c0009d8b:	c3                   	ret    

c0009d8c <liballoc_unlock()>:
c0009d8c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0009d91:	48                   	dec    eax
c0009d92:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0009d97:	75 01                	jne    c0009d9a <liballoc_unlock()+0xe>
c0009d99:	fb                   	sti    
c0009d9a:	b8 00 00 00 00       	mov    eax,0x0
c0009d9f:	c3                   	ret    

c0009da0 <liballoc_alloc(int)>:
c0009da0:	83 ec 10             	sub    esp,0x10
c0009da3:	6a 01                	push   0x1
c0009da5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009da9:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0009daf:	e8 5a 27 00 00       	call   c000c50e <VAS::allocatePages(int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	c3                   	ret    

c0009db8 <liballoc_free(void*, int)>:
c0009db8:	83 ec 14             	sub    esp,0x14
c0009dbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dbf:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0009dc5:	e8 ee 23 00 00       	call   c000c1b8 <VAS::freeAllocatedPages(unsigned long)>
c0009dca:	b8 00 00 00 00       	mov    eax,0x0
c0009dcf:	83 c4 1c             	add    esp,0x1c
c0009dd2:	c3                   	ret    

c0009dd3 <realloc>:
c0009dd3:	83 ec 14             	sub    esp,0x14
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 8d 77 ff ff       	call   c0001570 <dlrealloc>
c0009de3:	83 c4 1c             	add    esp,0x1c
c0009de6:	c3                   	ret    

c0009de7 <malloc>:
c0009de7:	83 ec 18             	sub    esp,0x18
c0009dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dee:	e8 40 72 ff ff       	call   c0001033 <dlmalloc>
c0009df3:	83 c4 1c             	add    esp,0x1c
c0009df6:	c3                   	ret    

c0009df7 <free>:
c0009df7:	83 ec 18             	sub    esp,0x18
c0009dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfe:	e8 d5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e03:	83 c4 1c             	add    esp,0x1c
c0009e06:	c3                   	ret    

c0009e07 <rfree>:
c0009e07:	83 ec 18             	sub    esp,0x18
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 c5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e13:	83 c4 1c             	add    esp,0x1c
c0009e16:	c3                   	ret    

c0009e17 <calloc>:
c0009e17:	56                   	push   esi
c0009e18:	53                   	push   ebx
c0009e19:	83 ec 10             	sub    esp,0x10
c0009e1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009e20:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009e25:	53                   	push   ebx
c0009e26:	e8 bc ff ff ff       	call   c0009de7 <malloc>
c0009e2b:	89 c6                	mov    esi,eax
c0009e2d:	83 c4 0c             	add    esp,0xc
c0009e30:	53                   	push   ebx
c0009e31:	6a 00                	push   0x0
c0009e33:	50                   	push   eax
c0009e34:	e8 5b 68 ff ff       	call   c0000694 <memset>
c0009e39:	89 f0                	mov    eax,esi
c0009e3b:	83 c4 14             	add    esp,0x14
c0009e3e:	5b                   	pop    ebx
c0009e3f:	5e                   	pop    esi
c0009e40:	c3                   	ret    

c0009e41 <Krnl::setBootMessage(char const*)>:
c0009e41:	57                   	push   edi
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009e4a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009e51:	68 9e 00 00 00       	push   0x9e
c0009e56:	6a 00                	push   0x0
c0009e58:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009e5c:	56                   	push   esi
c0009e5d:	e8 32 68 ff ff       	call   c0000694 <memset>
c0009e62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009e65:	e8 46 68 ff ff       	call   c00006b0 <strlen>
c0009e6a:	ba 50 00 00 00       	mov    edx,0x50
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	29 c2                	sub    edx,eax
c0009e74:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009e78:	d1 ea                	shr    edx,1
c0009e7a:	84 c0                	test   al,al
c0009e7c:	74 19                	je     c0009e97 <Krnl::setBootMessage(char const*)+0x56>
c0009e7e:	01 d2                	add    edx,edx
c0009e80:	43                   	inc    ebx
c0009e81:	01 f2                	add    edx,esi
c0009e83:	80 cc 0f             	or     ah,0xf
c0009e86:	83 c2 02             	add    edx,0x2
c0009e89:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e8d:	43                   	inc    ebx
c0009e8e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e93:	84 c0                	test   al,al
c0009e95:	75 ec                	jne    c0009e83 <Krnl::setBootMessage(char const*)+0x42>
c0009e97:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e9c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ea3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ea9:	5b                   	pop    ebx
c0009eaa:	5e                   	pop    esi
c0009eab:	5f                   	pop    edi
c0009eac:	c3                   	ret    

c0009ead <kernel_main>:
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 20             	sub    esp,0x20
c0009eb3:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009eb8:	a3 20 8c 02 c0       	mov    ds:0xc0028c20,eax
c0009ebd:	f6 c4 08             	test   ah,0x8
c0009ec0:	0f 85 7a 03 00 00    	jne    c000a240 <kernel_main+0x393>
c0009ec6:	31 f6                	xor    esi,esi
c0009ec8:	bf f9 03 00 00       	mov    edi,0x3f9
c0009ecd:	89 f0                	mov    eax,esi
c0009ecf:	89 fa                	mov    edx,edi
c0009ed1:	ee                   	out    dx,al
c0009ed2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ed7:	b0 80                	mov    al,0x80
c0009ed9:	89 da                	mov    edx,ebx
c0009edb:	ee                   	out    dx,al
c0009edc:	b1 03                	mov    cl,0x3
c0009ede:	ba f8 03 00 00       	mov    edx,0x3f8
c0009ee3:	88 c8                	mov    al,cl
c0009ee5:	ee                   	out    dx,al
c0009ee6:	89 f0                	mov    eax,esi
c0009ee8:	89 fa                	mov    edx,edi
c0009eea:	ee                   	out    dx,al
c0009eeb:	88 c8                	mov    al,cl
c0009eed:	89 da                	mov    edx,ebx
c0009eef:	ee                   	out    dx,al
c0009ef0:	b0 c7                	mov    al,0xc7
c0009ef2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ef7:	ee                   	out    dx,al
c0009ef8:	b0 0b                	mov    al,0xb
c0009efa:	ba fc 03 00 00       	mov    edx,0x3fc
c0009eff:	ee                   	out    dx,al
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 00 4a 02 c0       	push   0xc0024a00
c0009f08:	e8 ee 31 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0009f17:	0f 85 eb 02 00 00    	jne    c000a208 <kernel_main+0x35b>
c0009f1d:	e8 c6 0c 00 00       	call   c000abe8 <installVgaTextImplementation()>
c0009f22:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0009f29:	0f 85 94 02 00 00    	jne    c000a1c3 <kernel_main+0x316>
c0009f2f:	0f b6 05 80 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027e80
c0009f36:	84 c0                	test   al,al
c0009f38:	74 7b                	je     c0009fb5 <kernel_main+0x108>
c0009f3a:	31 db                	xor    ebx,ebx
c0009f3c:	bf 0a 00 00 00       	mov    edi,0xa
c0009f41:	be 05 00 00 00       	mov    esi,0x5
c0009f46:	31 c9                	xor    ecx,ecx
c0009f48:	eb 2a                	jmp    c0009f74 <kernel_main+0xc7>
c0009f4a:	3c 0d                	cmp    al,0xd
c0009f4c:	74 1a                	je     c0009f68 <kernel_main+0xbb>
c0009f4e:	3c 0a                	cmp    al,0xa
c0009f50:	74 40                	je     c0009f92 <kernel_main+0xe5>
c0009f52:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009f55:	80 cc 0e             	or     ah,0xe
c0009f58:	c1 e2 04             	shl    edx,0x4
c0009f5b:	01 ca                	add    edx,ecx
c0009f5d:	41                   	inc    ecx
c0009f5e:	01 fa                	add    edx,edi
c0009f60:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009f68:	43                   	inc    ebx
c0009f69:	0f b6 83 80 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8180]
c0009f70:	84 c0                	test   al,al
c0009f72:	74 32                	je     c0009fa6 <kernel_main+0xf9>
c0009f74:	80 b9 b6 7e 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd814a],0xdb
c0009f7b:	75 cd                	jne    c0009f4a <kernel_main+0x9d>
c0009f7d:	0f b6 91 b5 7e 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd814b]
c0009f84:	83 e2 fe             	and    edx,0xfffffffe
c0009f87:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f8d:	75 bb                	jne    c0009f4a <kernel_main+0x9d>
c0009f8f:	47                   	inc    edi
c0009f90:	eb b8                	jmp    c0009f4a <kernel_main+0x9d>
c0009f92:	43                   	inc    ebx
c0009f93:	46                   	inc    esi
c0009f94:	31 c9                	xor    ecx,ecx
c0009f96:	0f b6 83 80 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8180]
c0009f9d:	bf 0a 00 00 00       	mov    edi,0xa
c0009fa2:	84 c0                	test   al,al
c0009fa4:	75 ce                	jne    c0009f74 <kernel_main+0xc7>
c0009fa6:	8b 15 20 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c20
c0009fac:	80 e6 08             	and    dh,0x8
c0009faf:	0f 85 bf 00 00 00    	jne    c000a074 <kernel_main+0x1c7>
c0009fb5:	83 ec 0c             	sub    esp,0xc
c0009fb8:	68 9c 4a 02 c0       	push   0xc0024a9c
c0009fbd:	e8 7f fe ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009fc2:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009fc7:	05 ff 0f 00 00       	add    eax,0xfff
c0009fcc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd4:	e8 44 06 00 00       	call   c000a61d <Phys::physicalMemorySetup(unsigned int)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0009fe3:	0f 85 a2 01 00 00    	jne    c000a18b <kernel_main+0x2de>
c0009fe9:	e8 72 1f 00 00       	call   c000bf60 <Virt::virtualMemorySetup()>
c0009fee:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0009ff5:	0f 85 58 01 00 00    	jne    c000a153 <kernel_main+0x2a6>
c0009ffb:	83 ec 0c             	sub    esp,0xc
c0009ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c000a002:	56                   	push   esi
c000a003:	e8 2e 2b 00 00       	call   c000cb36 <VAS::VAS()>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 35 34 8d 02 c0    	mov    DWORD PTR ds:0xc0028d34,esi
c000a011:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c000a018:	0f 85 fd 00 00 00    	jne    c000a11b <kernel_main+0x26e>
c000a01e:	e8 fd 5f ff ff       	call   c0000020 <callGlobalConstructors>
c000a023:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c000a02a:	0f 85 b3 00 00 00    	jne    c000a0e3 <kernel_main+0x236>
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	68 ec 01 00 00       	push   0x1ec
c000a038:	e8 aa fd ff ff       	call   c0009de7 <malloc>
c000a03d:	89 c3                	mov    ebx,eax
c000a03f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a042:	e8 89 eb ff ff       	call   c0008bd0 <Computer::Computer()>
c000a047:	83 c4 10             	add    esp,0x10
c000a04a:	89 1d 08 8c 02 c0    	mov    DWORD PTR ds:0xc0028c08,ebx
c000a050:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c000a057:	75 53                	jne    c000a0ac <kernel_main+0x1ff>
c000a059:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a05b:	6a 00                	push   0x0
c000a05d:	6a 00                	push   0x0
c000a05f:	6a 00                	push   0x0
c000a061:	53                   	push   ebx
c000a062:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a065:	89 34 24             	mov    DWORD PTR [esp],esi
c000a068:	e8 23 22 00 00       	call   c000c290 <VAS::~VAS()>
c000a06d:	83 c4 30             	add    esp,0x30
c000a070:	5b                   	pop    ebx
c000a071:	5e                   	pop    esi
c000a072:	5f                   	pop    edi
c000a073:	c3                   	ret    
c000a074:	83 ec 0c             	sub    esp,0xc
c000a077:	68 4b 4a 02 c0       	push   0xc0024a4b
c000a07c:	e8 c0 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a08b:	0f 85 24 ff ff ff    	jne    c0009fb5 <kernel_main+0x108>
c000a091:	eb 04                	jmp    c000a097 <kernel_main+0x1ea>
c000a093:	3c 1c                	cmp    al,0x1c
c000a095:	74 06                	je     c000a09d <kernel_main+0x1f0>
c000a097:	e4 60                	in     al,0x60
c000a099:	3c 5a                	cmp    al,0x5a
c000a09b:	75 f6                	jne    c000a093 <kernel_main+0x1e6>
c000a09d:	e4 60                	in     al,0x60
c000a09f:	3c 5a                	cmp    al,0x5a
c000a0a1:	74 fa                	je     c000a09d <kernel_main+0x1f0>
c000a0a3:	3c 1c                	cmp    al,0x1c
c000a0a5:	74 f6                	je     c000a09d <kernel_main+0x1f0>
c000a0a7:	e9 09 ff ff ff       	jmp    c0009fb5 <kernel_main+0x108>
c000a0ac:	83 ec 0c             	sub    esp,0xc
c000a0af:	68 8a 4a 02 c0       	push   0xc0024a8a
c000a0b4:	e8 88 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a0c3:	74 0c                	je     c000a0d1 <kernel_main+0x224>
c000a0c5:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c000a0cb:	eb 8c                	jmp    c000a059 <kernel_main+0x1ac>
c000a0cd:	3c 1c                	cmp    al,0x1c
c000a0cf:	74 06                	je     c000a0d7 <kernel_main+0x22a>
c000a0d1:	e4 60                	in     al,0x60
c000a0d3:	3c 5a                	cmp    al,0x5a
c000a0d5:	75 f6                	jne    c000a0cd <kernel_main+0x220>
c000a0d7:	e4 60                	in     al,0x60
c000a0d9:	3c 5a                	cmp    al,0x5a
c000a0db:	74 fa                	je     c000a0d7 <kernel_main+0x22a>
c000a0dd:	3c 1c                	cmp    al,0x1c
c000a0df:	74 f6                	je     c000a0d7 <kernel_main+0x22a>
c000a0e1:	eb e2                	jmp    c000a0c5 <kernel_main+0x218>
c000a0e3:	83 ec 0c             	sub    esp,0xc
c000a0e6:	68 77 4a 02 c0       	push   0xc0024a77
c000a0eb:	e8 51 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0f0:	83 c4 10             	add    esp,0x10
c000a0f3:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a0fa:	0f 85 30 ff ff ff    	jne    c000a030 <kernel_main+0x183>
c000a100:	eb 04                	jmp    c000a106 <kernel_main+0x259>
c000a102:	3c 1c                	cmp    al,0x1c
c000a104:	74 06                	je     c000a10c <kernel_main+0x25f>
c000a106:	e4 60                	in     al,0x60
c000a108:	3c 5a                	cmp    al,0x5a
c000a10a:	75 f6                	jne    c000a102 <kernel_main+0x255>
c000a10c:	e4 60                	in     al,0x60
c000a10e:	3c 5a                	cmp    al,0x5a
c000a110:	74 fa                	je     c000a10c <kernel_main+0x25f>
c000a112:	3c 1c                	cmp    al,0x1c
c000a114:	74 f6                	je     c000a10c <kernel_main+0x25f>
c000a116:	e9 15 ff ff ff       	jmp    c000a030 <kernel_main+0x183>
c000a11b:	83 ec 0c             	sub    esp,0xc
c000a11e:	68 6d 4a 02 c0       	push   0xc0024a6d
c000a123:	e8 19 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a128:	83 c4 10             	add    esp,0x10
c000a12b:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a132:	0f 85 e6 fe ff ff    	jne    c000a01e <kernel_main+0x171>
c000a138:	eb 04                	jmp    c000a13e <kernel_main+0x291>
c000a13a:	3c 1c                	cmp    al,0x1c
c000a13c:	74 06                	je     c000a144 <kernel_main+0x297>
c000a13e:	e4 60                	in     al,0x60
c000a140:	3c 5a                	cmp    al,0x5a
c000a142:	75 f6                	jne    c000a13a <kernel_main+0x28d>
c000a144:	e4 60                	in     al,0x60
c000a146:	3c 5a                	cmp    al,0x5a
c000a148:	74 fa                	je     c000a144 <kernel_main+0x297>
c000a14a:	3c 1c                	cmp    al,0x1c
c000a14c:	74 f6                	je     c000a144 <kernel_main+0x297>
c000a14e:	e9 cb fe ff ff       	jmp    c000a01e <kernel_main+0x171>
c000a153:	83 ec 0c             	sub    esp,0xc
c000a156:	68 62 4a 02 c0       	push   0xc0024a62
c000a15b:	e8 e1 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a160:	83 c4 10             	add    esp,0x10
c000a163:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a16a:	0f 85 8b fe ff ff    	jne    c0009ffb <kernel_main+0x14e>
c000a170:	eb 04                	jmp    c000a176 <kernel_main+0x2c9>
c000a172:	3c 1c                	cmp    al,0x1c
c000a174:	74 06                	je     c000a17c <kernel_main+0x2cf>
c000a176:	e4 60                	in     al,0x60
c000a178:	3c 5a                	cmp    al,0x5a
c000a17a:	75 f6                	jne    c000a172 <kernel_main+0x2c5>
c000a17c:	e4 60                	in     al,0x60
c000a17e:	3c 5a                	cmp    al,0x5a
c000a180:	74 fa                	je     c000a17c <kernel_main+0x2cf>
c000a182:	3c 1c                	cmp    al,0x1c
c000a184:	74 f6                	je     c000a17c <kernel_main+0x2cf>
c000a186:	e9 70 fe ff ff       	jmp    c0009ffb <kernel_main+0x14e>
c000a18b:	83 ec 0c             	sub    esp,0xc
c000a18e:	68 57 4a 02 c0       	push   0xc0024a57
c000a193:	e8 a9 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a198:	83 c4 10             	add    esp,0x10
c000a19b:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a1a2:	0f 85 41 fe ff ff    	jne    c0009fe9 <kernel_main+0x13c>
c000a1a8:	eb 04                	jmp    c000a1ae <kernel_main+0x301>
c000a1aa:	3c 1c                	cmp    al,0x1c
c000a1ac:	74 06                	je     c000a1b4 <kernel_main+0x307>
c000a1ae:	e4 60                	in     al,0x60
c000a1b0:	3c 5a                	cmp    al,0x5a
c000a1b2:	75 f6                	jne    c000a1aa <kernel_main+0x2fd>
c000a1b4:	e4 60                	in     al,0x60
c000a1b6:	3c 5a                	cmp    al,0x5a
c000a1b8:	74 fa                	je     c000a1b4 <kernel_main+0x307>
c000a1ba:	3c 1c                	cmp    al,0x1c
c000a1bc:	74 f6                	je     c000a1b4 <kernel_main+0x307>
c000a1be:	e9 26 fe ff ff       	jmp    c0009fe9 <kernel_main+0x13c>
c000a1c3:	83 ec 0c             	sub    esp,0xc
c000a1c6:	68 39 4a 02 c0       	push   0xc0024a39
c000a1cb:	e8 71 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a1d0:	8b 15 20 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c20
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	f6 c2 80             	test   dl,0x80
c000a1dc:	74 18                	je     c000a1f6 <kernel_main+0x349>
c000a1de:	0f b6 05 80 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027e80
c000a1e5:	84 c0                	test   al,al
c000a1e7:	0f 85 4d fd ff ff    	jne    c0009f3a <kernel_main+0x8d>
c000a1ed:	e9 ba fd ff ff       	jmp    c0009fac <kernel_main+0xff>
c000a1f2:	3c 1c                	cmp    al,0x1c
c000a1f4:	74 06                	je     c000a1fc <kernel_main+0x34f>
c000a1f6:	e4 60                	in     al,0x60
c000a1f8:	3c 5a                	cmp    al,0x5a
c000a1fa:	75 f6                	jne    c000a1f2 <kernel_main+0x345>
c000a1fc:	e4 60                	in     al,0x60
c000a1fe:	3c 5a                	cmp    al,0x5a
c000a200:	74 fa                	je     c000a1fc <kernel_main+0x34f>
c000a202:	3c 1c                	cmp    al,0x1c
c000a204:	74 f6                	je     c000a1fc <kernel_main+0x34f>
c000a206:	eb d6                	jmp    c000a1de <kernel_main+0x331>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	68 2a 4a 02 c0       	push   0xc0024a2a
c000a210:	e8 2c fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a215:	83 c4 10             	add    esp,0x10
c000a218:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a21f:	0f 85 f8 fc ff ff    	jne    c0009f1d <kernel_main+0x70>
c000a225:	eb 04                	jmp    c000a22b <kernel_main+0x37e>
c000a227:	3c 1c                	cmp    al,0x1c
c000a229:	74 06                	je     c000a231 <kernel_main+0x384>
c000a22b:	e4 60                	in     al,0x60
c000a22d:	3c 5a                	cmp    al,0x5a
c000a22f:	75 f6                	jne    c000a227 <kernel_main+0x37a>
c000a231:	e4 60                	in     al,0x60
c000a233:	3c 5a                	cmp    al,0x5a
c000a235:	74 fa                	je     c000a231 <kernel_main+0x384>
c000a237:	3c 1c                	cmp    al,0x1c
c000a239:	74 f6                	je     c000a231 <kernel_main+0x384>
c000a23b:	e9 dd fc ff ff       	jmp    c0009f1d <kernel_main+0x70>
c000a240:	83 ec 0c             	sub    esp,0xc
c000a243:	68 17 4a 02 c0       	push   0xc0024a17
c000a248:	e8 f4 fb ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c000a257:	0f 85 69 fc ff ff    	jne    c0009ec6 <kernel_main+0x19>
c000a25d:	eb 04                	jmp    c000a263 <kernel_main+0x3b6>
c000a25f:	3c 1c                	cmp    al,0x1c
c000a261:	74 06                	je     c000a269 <kernel_main+0x3bc>
c000a263:	e4 60                	in     al,0x60
c000a265:	3c 5a                	cmp    al,0x5a
c000a267:	75 f6                	jne    c000a25f <kernel_main+0x3b2>
c000a269:	e4 60                	in     al,0x60
c000a26b:	3c 5a                	cmp    al,0x5a
c000a26d:	74 fa                	je     c000a269 <kernel_main+0x3bc>
c000a26f:	3c 1c                	cmp    al,0x1c
c000a271:	74 f6                	je     c000a269 <kernel_main+0x3bc>
c000a273:	e9 4e fc ff ff       	jmp    c0009ec6 <kernel_main+0x19>

c000a278 <Phys::allocateDMA(unsigned long)>:
c000a278:	55                   	push   ebp
c000a279:	31 ed                	xor    ebp,ebp
c000a27b:	57                   	push   edi
c000a27c:	56                   	push   esi
c000a27d:	53                   	push   ebx
c000a27e:	31 db                	xor    ebx,ebx
c000a280:	83 ec 28             	sub    esp,0x28
c000a283:	68 bb 4a 02 c0       	push   0xc0024abb
c000a288:	e8 6e 2e 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a28d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a29a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a2a2:	c1 ef 0c             	shr    edi,0xc
c000a2a5:	31 c0                	xor    eax,eax
c000a2a7:	eb 19                	jmp    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2a9:	85 c0                	test   eax,eax
c000a2ab:	75 06                	jne    c000a2b3 <Phys::allocateDMA(unsigned long)+0x3b>
c000a2ad:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a2b1:	89 dd                	mov    ebp,ebx
c000a2b3:	8d 70 01             	lea    esi,[eax+0x1]
c000a2b6:	39 f7                	cmp    edi,esi
c000a2b8:	74 3f                	je     c000a2f9 <Phys::allocateDMA(unsigned long)+0x81>
c000a2ba:	89 f0                	mov    eax,esi
c000a2bc:	43                   	inc    ebx
c000a2bd:	83 fb 0f             	cmp    ebx,0xf
c000a2c0:	7f 11                	jg     c000a2d3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a2c2:	80 bb 3c 8c 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd73c4],0x0
c000a2c9:	74 de                	je     c000a2a9 <Phys::allocateDMA(unsigned long)+0x31>
c000a2cb:	31 c0                	xor    eax,eax
c000a2cd:	43                   	inc    ebx
c000a2ce:	83 fb 0f             	cmp    ebx,0xf
c000a2d1:	7e ef                	jle    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2d3:	83 ec 0c             	sub    esp,0xc
c000a2d6:	68 eb 4a 02 c0       	push   0xc0024aeb
c000a2db:	e8 1b 2e 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a2e0:	c7 04 24 a8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024ba8
c000a2e7:	e8 f1 ae 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	31 c0                	xor    eax,eax
c000a2f1:	83 c4 1c             	add    esp,0x1c
c000a2f4:	5b                   	pop    ebx
c000a2f5:	5e                   	pop    esi
c000a2f6:	5f                   	pop    edi
c000a2f7:	5d                   	pop    ebp
c000a2f8:	c3                   	ret    
c000a2f9:	89 e9                	mov    ecx,ebp
c000a2fb:	c1 f9 04             	sar    ecx,0x4
c000a2fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a302:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a306:	89 ca                	mov    edx,ecx
c000a308:	4a                   	dec    edx
c000a309:	79 03                	jns    c000a30e <Phys::allocateDMA(unsigned long)+0x96>
c000a30b:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a30e:	c1 fa 04             	sar    edx,0x4
c000a311:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a315:	74 08                	je     c000a31f <Phys::allocateDMA(unsigned long)+0xa7>
c000a317:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a31b:	31 c0                	xor    eax,eax
c000a31d:	eb ae                	jmp    c000a2cd <Phys::allocateDMA(unsigned long)+0x55>
c000a31f:	85 f6                	test   esi,esi
c000a321:	74 15                	je     c000a338 <Phys::allocateDMA(unsigned long)+0xc0>
c000a323:	8d 95 3c 8c 02 c0    	lea    edx,[ebp-0x3ffd73c4]
c000a329:	8d 84 05 3d 8c 02 c0 	lea    eax,[ebp+eax*1-0x3ffd73c3]
c000a330:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a333:	42                   	inc    edx
c000a334:	39 d0                	cmp    eax,edx
c000a336:	75 f8                	jne    c000a330 <Phys::allocateDMA(unsigned long)+0xb8>
c000a338:	83 ec 0c             	sub    esp,0xc
c000a33b:	01 3d 34 8c 02 c0    	add    DWORD PTR ds:0xc0028c34,edi
c000a341:	68 d4 4a 02 c0       	push   0xc0024ad4
c000a346:	e8 b0 2d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a34b:	83 c4 10             	add    esp,0x10
c000a34e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a352:	85 c0                	test   eax,eax
c000a354:	74 23                	je     c000a379 <Phys::allocateDMA(unsigned long)+0x101>
c000a356:	83 ec 0c             	sub    esp,0xc
c000a359:	68 cc 7a 02 c0       	push   0xc0027acc
c000a35e:	e8 98 2d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a363:	c7 04 24 a8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024ba8
c000a36a:	e8 6e ae 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000a36f:	83 c4 10             	add    esp,0x10
c000a372:	89 f0                	mov    eax,esi
c000a374:	e9 43 ff ff ff       	jmp    c000a2bc <Phys::allocateDMA(unsigned long)+0x44>
c000a379:	c1 e5 0c             	shl    ebp,0xc
c000a37c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a382:	e9 6a ff ff ff       	jmp    c000a2f1 <Phys::allocateDMA(unsigned long)+0x79>

c000a387 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a387:	83 ec 18             	sub    esp,0x18
c000a38a:	68 ef 4a 02 c0       	push   0xc0024aef
c000a38f:	e8 67 2d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a394:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a398:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3a2:	c1 ea 0c             	shr    edx,0xc
c000a3a5:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a3aa:	29 15 34 8c 02 c0    	sub    DWORD PTR ds:0xc0028c34,edx
c000a3b0:	c1 e8 0c             	shr    eax,0xc
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	85 d2                	test   edx,edx
c000a3b8:	74 0f                	je     c000a3c9 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a3ba:	05 3c 8c 02 c0       	add    eax,0xc0028c3c
c000a3bf:	01 c2                	add    edx,eax
c000a3c1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a3c4:	40                   	inc    eax
c000a3c5:	39 d0                	cmp    eax,edx
c000a3c7:	75 f8                	jne    c000a3c1 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a3c9:	83 c4 0c             	add    esp,0xc
c000a3cc:	c3                   	ret    

c000a3cd <Phys::setPageState(unsigned long, bool)>:
c000a3cd:	56                   	push   esi
c000a3ce:	ba 01 00 00 00       	mov    edx,0x1
c000a3d3:	53                   	push   ebx
c000a3d4:	8b 35 c4 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027fc4
c000a3da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a3de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e2:	89 c8                	mov    eax,ecx
c000a3e4:	83 e1 07             	and    ecx,0x7
c000a3e7:	c1 e8 03             	shr    eax,0x3
c000a3ea:	d3 e3                	shl    ebx,cl
c000a3ec:	01 c6                	add    esi,eax
c000a3ee:	d3 e2                	shl    edx,cl
c000a3f0:	f7 d2                	not    edx
c000a3f2:	20 16                	and    BYTE PTR [esi],dl
c000a3f4:	03 05 c4 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027fc4
c000a3fa:	08 18                	or     BYTE PTR [eax],bl
c000a3fc:	5b                   	pop    ebx
c000a3fd:	5e                   	pop    esi
c000a3fe:	c3                   	ret    

c000a3ff <Phys::getPageState(unsigned long)>:
c000a3ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a403:	8b 15 c4 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027fc4
c000a409:	89 c8                	mov    eax,ecx
c000a40b:	83 e1 07             	and    ecx,0x7
c000a40e:	c1 e8 03             	shr    eax,0x3
c000a411:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a415:	d3 f8                	sar    eax,cl
c000a417:	83 e0 01             	and    eax,0x1
c000a41a:	c3                   	ret    

c000a41b <Phys::freePage(unsigned long)>:
c000a41b:	53                   	push   ebx
c000a41c:	83 ec 10             	sub    esp,0x10
c000a41f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a423:	53                   	push   ebx
c000a424:	68 05 4b 02 c0       	push   0xc0024b05
c000a429:	e8 cd 2c 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a42e:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	3d ff ff 00 00       	cmp    eax,0xffff
c000a43c:	76 3d                	jbe    c000a47b <Phys::freePage(unsigned long)+0x60>
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	c1 eb 0c             	shr    ebx,0xc
c000a444:	53                   	push   ebx
c000a445:	e8 b5 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a44a:	83 c4 10             	add    esp,0x10
c000a44d:	84 c0                	test   al,al
c000a44f:	74 19                	je     c000a46a <Phys::freePage(unsigned long)+0x4f>
c000a451:	83 ec 08             	sub    esp,0x8
c000a454:	ff 0d 34 8c 02 c0    	dec    DWORD PTR ds:0xc0028c34
c000a45a:	6a 00                	push   0x0
c000a45c:	53                   	push   ebx
c000a45d:	e8 6b ff ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	83 c4 08             	add    esp,0x8
c000a468:	5b                   	pop    ebx
c000a469:	c3                   	ret    
c000a46a:	c7 44 24 10 2f 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b2f
c000a472:	83 c4 08             	add    esp,0x8
c000a475:	5b                   	pop    ebx
c000a476:	e9 62 ad 00 00       	jmp    c00151dd <Krnl::panic(char const*)>
c000a47b:	83 ec 08             	sub    esp,0x8
c000a47e:	53                   	push   ebx
c000a47f:	68 18 4b 02 c0       	push   0xc0024b18
c000a484:	e8 72 2c 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a489:	58                   	pop    eax
c000a48a:	5a                   	pop    edx
c000a48b:	68 00 10 00 00       	push   0x1000
c000a490:	53                   	push   ebx
c000a491:	e8 f1 fe ff ff       	call   c000a387 <Phys::freeDMA(unsigned long, unsigned long)>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	83 c4 08             	add    esp,0x8
c000a49c:	5b                   	pop    ebx
c000a49d:	c3                   	ret    

c000a49e <Phys::allocatePage()>:
c000a49e:	56                   	push   esi
c000a49f:	53                   	push   ebx
c000a4a0:	83 ec 14             	sub    esp,0x14
c000a4a3:	8b 35 28 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028c28
c000a4a9:	89 f3                	mov    ebx,esi
c000a4ab:	eb 0a                	jmp    c000a4b7 <Phys::allocatePage()+0x19>
c000a4ad:	89 1d 28 8c 02 c0    	mov    DWORD PTR ds:0xc0028c28,ebx
c000a4b3:	39 de                	cmp    esi,ebx
c000a4b5:	74 24                	je     c000a4db <Phys::allocatePage()+0x3d>
c000a4b7:	53                   	push   ebx
c000a4b8:	e8 42 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a4bd:	5a                   	pop    edx
c000a4be:	84 c0                	test   al,al
c000a4c0:	74 69                	je     c000a52b <Phys::allocatePage()+0x8d>
c000a4c2:	43                   	inc    ebx
c000a4c3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a4c9:	75 e2                	jne    c000a4ad <Phys::allocatePage()+0xf>
c000a4cb:	31 db                	xor    ebx,ebx
c000a4cd:	c7 05 28 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c28,0x0
c000a4d7:	39 de                	cmp    esi,ebx
c000a4d9:	75 dc                	jne    c000a4b7 <Phys::allocatePage()+0x19>
c000a4db:	83 ec 0c             	sub    esp,0xc
c000a4de:	80 35 4c 8c 02 c0 01 	xor    BYTE PTR ds:0xc0028c4c,0x1
c000a4e5:	68 d0 4b 02 c0       	push   0xc0024bd0
c000a4ea:	e8 0c 2c 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a4ef:	58                   	pop    eax
c000a4f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a4f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a4fe:	e8 87 28 00 00       	call   c000cd8a <VAS::scanForEviction()>
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	85 c0                	test   eax,eax
c000a508:	75 62                	jne    c000a56c <Phys::allocatePage()+0xce>
c000a50a:	83 ec 0c             	sub    esp,0xc
c000a50d:	68 f4 4b 02 c0       	push   0xc0024bf4
c000a512:	e8 c6 ac 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000a517:	83 c4 10             	add    esp,0x10
c000a51a:	8b 1d 28 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c28
c000a520:	53                   	push   ebx
c000a521:	e8 d9 fe ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a526:	5a                   	pop    edx
c000a527:	84 c0                	test   al,al
c000a529:	75 97                	jne    c000a4c2 <Phys::allocatePage()+0x24>
c000a52b:	6a 01                	push   0x1
c000a52d:	53                   	push   ebx
c000a52e:	e8 9a fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a533:	5a                   	pop    edx
c000a534:	a1 34 8c 02 c0       	mov    eax,ds:0xc0028c34
c000a539:	59                   	pop    ecx
c000a53a:	40                   	inc    eax
c000a53b:	8b 15 28 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c28
c000a541:	a3 34 8c 02 c0       	mov    ds:0xc0028c34,eax
c000a546:	c1 e2 0c             	shl    edx,0xc
c000a549:	52                   	push   edx
c000a54a:	ff 35 38 8c 02 c0    	push   DWORD PTR ds:0xc0028c38
c000a550:	50                   	push   eax
c000a551:	68 45 4b 02 c0       	push   0xc0024b45
c000a556:	e8 a0 2b 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a55b:	a1 28 8c 02 c0       	mov    eax,ds:0xc0028c28
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	c1 e0 0c             	shl    eax,0xc
c000a566:	83 c4 14             	add    esp,0x14
c000a569:	5b                   	pop    ebx
c000a56a:	5e                   	pop    esi
c000a56b:	c3                   	ret    
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 c2                	mov    edx,eax
c000a571:	6a 01                	push   0x1
c000a573:	c1 ea 0c             	shr    edx,0xc
c000a576:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a57a:	52                   	push   edx
c000a57b:	e8 4d fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a587:	eb dd                	jmp    c000a566 <Phys::allocatePage()+0xc8>

c000a589 <Phys::allocateContiguousPages(int)>:
c000a589:	57                   	push   edi
c000a58a:	56                   	push   esi
c000a58b:	53                   	push   ebx
c000a58c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a590:	fa                   	cli    
c000a591:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c000a597:	31 db                	xor    ebx,ebx
c000a599:	85 db                	test   ebx,ebx
c000a59b:	75 11                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a59d:	e8 fc fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5a2:	83 fe 01             	cmp    esi,0x1
c000a5a5:	89 c7                	mov    edi,eax
c000a5a7:	74 21                	je     c000a5ca <Phys::allocateContiguousPages(int)+0x41>
c000a5a9:	bb 01 00 00 00       	mov    ebx,0x1
c000a5ae:	e8 eb fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5b3:	89 da                	mov    edx,ebx
c000a5b5:	c1 e2 0c             	shl    edx,0xc
c000a5b8:	01 fa                	add    edx,edi
c000a5ba:	39 c2                	cmp    edx,eax
c000a5bc:	74 20                	je     c000a5de <Phys::allocateContiguousPages(int)+0x55>
c000a5be:	bb 01 00 00 00       	mov    ebx,0x1
c000a5c3:	89 c7                	mov    edi,eax
c000a5c5:	83 fe 01             	cmp    esi,0x1
c000a5c8:	75 e4                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a5ca:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000a5cf:	48                   	dec    eax
c000a5d0:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000a5d5:	75 01                	jne    c000a5d8 <Phys::allocateContiguousPages(int)+0x4f>
c000a5d7:	fb                   	sti    
c000a5d8:	89 f8                	mov    eax,edi
c000a5da:	5b                   	pop    ebx
c000a5db:	5e                   	pop    esi
c000a5dc:	5f                   	pop    edi
c000a5dd:	c3                   	ret    
c000a5de:	43                   	inc    ebx
c000a5df:	39 f3                	cmp    ebx,esi
c000a5e1:	75 b6                	jne    c000a599 <Phys::allocateContiguousPages(int)+0x10>
c000a5e3:	eb e5                	jmp    c000a5ca <Phys::allocateContiguousPages(int)+0x41>

c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a5e5:	56                   	push   esi
c000a5e6:	53                   	push   ebx
c000a5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a5eb:	39 1d 2c 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c2c,ebx
c000a5f1:	73 06                	jae    c000a5f9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a5f3:	89 1d 2c 8c 02 c0    	mov    DWORD PTR ds:0xc0028c2c,ebx
c000a5f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5fd:	c1 eb 0c             	shr    ebx,0xc
c000a600:	c1 e8 0c             	shr    eax,0xc
c000a603:	39 d8                	cmp    eax,ebx
c000a605:	73 13                	jae    c000a61a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a607:	6a 00                	push   0x0
c000a609:	8d 70 01             	lea    esi,[eax+0x1]
c000a60c:	50                   	push   eax
c000a60d:	e8 bb fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a612:	5a                   	pop    edx
c000a613:	89 f0                	mov    eax,esi
c000a615:	59                   	pop    ecx
c000a616:	39 f3                	cmp    ebx,esi
c000a618:	75 ed                	jne    c000a607 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a61a:	5b                   	pop    ebx
c000a61b:	5e                   	pop    esi
c000a61c:	c3                   	ret    

c000a61d <Phys::physicalMemorySetup(unsigned int)>:
c000a61d:	55                   	push   ebp
c000a61e:	57                   	push   edi
c000a61f:	56                   	push   esi
c000a620:	53                   	push   ebx
c000a621:	31 db                	xor    ebx,ebx
c000a623:	83 ec 40             	sub    esp,0x40
c000a626:	6a 10                	push   0x10
c000a628:	6a 00                	push   0x0
c000a62a:	68 3c 8c 02 c0       	push   0xc0028c3c
c000a62f:	e8 60 60 ff ff       	call   c0000694 <memset>
c000a634:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a638:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a63d:	05 00 10 00 00       	add    eax,0x1000
c000a642:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a646:	5a                   	pop    edx
c000a647:	59                   	pop    ecx
c000a648:	50                   	push   eax
c000a649:	68 63 4b 02 c0       	push   0xc0024b63
c000a64e:	e8 a8 2a 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	83 ec 08             	sub    esp,0x8
c000a659:	6a 01                	push   0x1
c000a65b:	53                   	push   ebx
c000a65c:	43                   	inc    ebx
c000a65d:	e8 6b fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a662:	83 c4 10             	add    esp,0x10
c000a665:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a66b:	75 e9                	jne    c000a656 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a66d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a674:	66 85 c0             	test   ax,ax
c000a677:	0f 84 8e 01 00 00    	je     c000a80b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a67d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a681:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a68d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a696:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a69e:	eb 15                	jmp    c000a6b5 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a6a0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a6a4:	83 c3 18             	add    ebx,0x18
c000a6a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6ab:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a6af:	0f 84 66 01 00 00    	je     c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a6b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a6bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a6be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6c6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a6c8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a6cb:	01 f0                	add    eax,esi
c000a6cd:	55                   	push   ebp
c000a6ce:	11 fa                	adc    edx,edi
c000a6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a6d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a6d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a6dc:	56                   	push   esi
c000a6dd:	68 24 4c 02 c0       	push   0xc0024c24
c000a6e2:	e8 14 2a 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	09 f8                	or     eax,edi
c000a6f0:	0f 85 25 01 00 00    	jne    c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6f6:	4d                   	dec    ebp
c000a6f7:	75 a7                	jne    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6f9:	ba 00 00 08 00       	mov    edx,0x80000
c000a6fe:	89 c1                	mov    ecx,eax
c000a700:	39 f2                	cmp    edx,esi
c000a702:	19 f9                	sbb    ecx,edi
c000a704:	0f 82 a7 00 00 00    	jb     c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a70a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a70e:	89 c1                	mov    ecx,eax
c000a710:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a714:	0f 83 97 00 00 00    	jae    c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a71a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a71f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a723:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a727:	39 fa                	cmp    edx,edi
c000a729:	19 e8                	sbb    eax,ebp
c000a72b:	0f 82 9a 01 00 00    	jb     c000a8cb <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a731:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a735:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a739:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a73f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a744:	83 d5 ff             	adc    ebp,0xffffffff
c000a747:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a74b:	31 c0                	xor    eax,eax
c000a74d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a751:	39 fa                	cmp    edx,edi
c000a753:	89 c1                	mov    ecx,eax
c000a755:	19 e9                	sbb    ecx,ebp
c000a757:	0f 83 43 ff ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a75d:	be 00 00 08 00       	mov    esi,0x80000
c000a762:	51                   	push   ecx
c000a763:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a767:	57                   	push   edi
c000a768:	56                   	push   esi
c000a769:	68 48 4c 02 c0       	push   0xc0024c48
c000a76e:	e8 88 29 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a773:	5d                   	pop    ebp
c000a774:	58                   	pop    eax
c000a775:	57                   	push   edi
c000a776:	56                   	push   esi
c000a777:	e8 69 fe ff ff       	call   c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a77c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a78b:	03 05 38 8c 02 c0    	add    eax,DWORD PTR ds:0xc0028c38
c000a791:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a798:	a3 38 8c 02 c0       	mov    ds:0xc0028c38,eax
c000a79d:	52                   	push   edx
c000a79e:	50                   	push   eax
c000a79f:	68 89 4b 02 c0       	push   0xc0024b89
c000a7a4:	e8 52 29 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	e9 ef fe ff ff       	jmp    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7b1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a7b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a7bd:	39 ea                	cmp    edx,ebp
c000a7bf:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a7c3:	0f 82 d7 fe ff ff    	jb     c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7c9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a7ce:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a7d2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a7d6:	0f 83 c4 fe ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7dc:	39 ee                	cmp    esi,ebp
c000a7de:	89 f8                	mov    eax,edi
c000a7e0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a7e4:	0f 83 78 ff ff ff    	jae    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a7ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a7ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7f2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a7f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a7fa:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a7fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a802:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a806:	e9 57 ff ff ff       	jmp    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a80b:	83 ec 0c             	sub    esp,0xc
c000a80e:	68 7b 4b 02 c0       	push   0xc0024b7b
c000a813:	e8 c5 a9 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000a818:	83 c4 10             	add    esp,0x10
c000a81b:	83 ec 08             	sub    esp,0x8
c000a81e:	bb 60 00 00 00       	mov    ebx,0x60
c000a823:	6a 00                	push   0x0
c000a825:	6a 06                	push   0x6
c000a827:	e8 a1 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a82c:	58                   	pop    eax
c000a82d:	5a                   	pop    edx
c000a82e:	6a 00                	push   0x0
c000a830:	6a 07                	push   0x7
c000a832:	e8 96 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a837:	83 05 38 8c 02 c0 02 	add    DWORD PTR ds:0xc0028c38,0x2
c000a83e:	83 c4 10             	add    esp,0x10
c000a841:	83 ec 08             	sub    esp,0x8
c000a844:	6a 00                	push   0x0
c000a846:	53                   	push   ebx
c000a847:	43                   	inc    ebx
c000a848:	e8 80 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a84d:	83 c4 10             	add    esp,0x10
c000a850:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a856:	75 e9                	jne    c000a841 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a858:	a1 38 8c 02 c0       	mov    eax,ds:0xc0028c38
c000a85d:	bb 40 01 00 00       	mov    ebx,0x140
c000a862:	83 c0 20             	add    eax,0x20
c000a865:	a3 38 8c 02 c0       	mov    ds:0xc0028c38,eax
c000a86a:	eb 22                	jmp    c000a88e <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a86c:	83 ec 08             	sub    esp,0x8
c000a86f:	6a 00                	push   0x0
c000a871:	53                   	push   ebx
c000a872:	43                   	inc    ebx
c000a873:	e8 55 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a878:	a1 38 8c 02 c0       	mov    eax,ds:0xc0028c38
c000a87d:	83 c4 10             	add    esp,0x10
c000a880:	40                   	inc    eax
c000a881:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a887:	a3 38 8c 02 c0       	mov    ds:0xc0028c38,eax
c000a88c:	74 07                	je     c000a895 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a88e:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a893:	7e d7                	jle    c000a86c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a895:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a89a:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a89f:	7f 22                	jg     c000a8c3 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a8a1:	83 ec 08             	sub    esp,0x8
c000a8a4:	6a 00                	push   0x0
c000a8a6:	53                   	push   ebx
c000a8a7:	43                   	inc    ebx
c000a8a8:	e8 20 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a8ad:	a1 38 8c 02 c0       	mov    eax,ds:0xc0028c38
c000a8b2:	83 c4 10             	add    esp,0x10
c000a8b5:	40                   	inc    eax
c000a8b6:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a8bc:	a3 38 8c 02 c0       	mov    ds:0xc0028c38,eax
c000a8c1:	75 d7                	jne    c000a89a <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a8c3:	83 c4 3c             	add    esp,0x3c
c000a8c6:	5b                   	pop    ebx
c000a8c7:	5e                   	pop    esi
c000a8c8:	5f                   	pop    edi
c000a8c9:	5d                   	pop    ebp
c000a8ca:	c3                   	ret    
c000a8cb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a8d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a8db:	e9 51 fe ff ff       	jmp    c000a731 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a8e0 <Pipe::isAtty()>:
c000a8e0:	31 c0                	xor    eax,eax
c000a8e2:	c3                   	ret    
c000a8e3:	90                   	nop

c000a8e4 <Pipe::~Pipe()>:
c000a8e4:	83 ec 0c             	sub    esp,0xc
c000a8e7:	ba b4 4c 02 c0       	mov    edx,0xc0024cb4
c000a8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f0:	89 10                	mov    DWORD PTR [eax],edx
c000a8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f6:	83 ec 0c             	sub    esp,0xc
c000a8f9:	50                   	push   eax
c000a8fa:	e8 41 12 00 00       	call   c000bb40 <UnixFile::~UnixFile()>
c000a8ff:	83 c4 10             	add    esp,0x10
c000a902:	90                   	nop
c000a903:	83 c4 0c             	add    esp,0xc
c000a906:	c3                   	ret    
c000a907:	90                   	nop

c000a908 <Pipe::~Pipe()>:
c000a908:	83 ec 0c             	sub    esp,0xc
c000a90b:	83 ec 0c             	sub    esp,0xc
c000a90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a912:	e8 cd ff ff ff       	call   c000a8e4 <Pipe::~Pipe()>
c000a917:	83 c4 10             	add    esp,0x10
c000a91a:	83 ec 08             	sub    esp,0x8
c000a91d:	6a 20                	push   0x20
c000a91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a923:	e8 f2 26 00 00       	call   c000d01a <operator delete(void*, unsigned long)>
c000a928:	83 c4 10             	add    esp,0x10
c000a92b:	83 c4 0c             	add    esp,0xc
c000a92e:	c3                   	ret    
c000a92f:	90                   	nop

c000a930 <Pipe::read(unsigned long long, void*, int*)>:
c000a930:	55                   	push   ebp
c000a931:	57                   	push   edi
c000a932:	56                   	push   esi
c000a933:	53                   	push   ebx
c000a934:	83 ec 1c             	sub    esp,0x1c
c000a937:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a93b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a93f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a943:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a946:	89 c8                	mov    eax,ecx
c000a948:	99                   	cdq    
c000a949:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a94d:	74 24                	je     c000a973 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a94f:	39 f9                	cmp    ecx,edi
c000a951:	89 d1                	mov    ecx,edx
c000a953:	19 f1                	sbb    ecx,esi
c000a955:	73 1c                	jae    c000a973 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a957:	fa                   	cli    
c000a958:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c000a95e:	e8 d9 e5 00 00       	call   c0018f3c <schedule()>
c000a963:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000a968:	48                   	dec    eax
c000a969:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000a96e:	75 d3                	jne    c000a943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a970:	fb                   	sti    
c000a971:	eb d0                	jmp    c000a943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a973:	39 f8                	cmp    eax,edi
c000a975:	89 d1                	mov    ecx,edx
c000a977:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a97a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a97e:	19 f1                	sbb    ecx,esi
c000a980:	73 07                	jae    c000a989 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a982:	89 04 24             	mov    DWORD PTR [esp],eax
c000a985:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a989:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a98c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a98f:	29 f7                	sub    edi,esi
c000a991:	89 f8                	mov    eax,edi
c000a993:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a997:	99                   	cdq    
c000a998:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a99b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99f:	19 d0                	sbb    eax,edx
c000a9a1:	73 07                	jae    c000a9aa <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a9a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a9a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9aa:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a9ad:	89 ea                	mov    edx,ebp
c000a9af:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a9b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a9b8:	74 0d                	je     c000a9c7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a9ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9bd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a9c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a9c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9c7:	85 d2                	test   edx,edx
c000a9c9:	74 11                	je     c000a9dc <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9cf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a9d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a9d6:	89 d1                	mov    ecx,edx
c000a9d8:	89 c7                	mov    edi,eax
c000a9da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a9df:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a9e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a9e5:	99                   	cdq    
c000a9e6:	89 f7                	mov    edi,esi
c000a9e8:	03 04 24             	add    eax,DWORD PTR [esp]
c000a9eb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a9ef:	c1 ff 1f             	sar    edi,0x1f
c000a9f2:	57                   	push   edi
c000a9f3:	56                   	push   esi
c000a9f4:	52                   	push   edx
c000a9f5:	50                   	push   eax
c000a9f6:	e8 d5 86 01 00       	call   c00230d0 <__umoddi3>
c000a9fb:	83 c4 10             	add    esp,0x10
c000a9fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa01:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa06:	75 10                	jne    c000aa18 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000aa08:	83 ec 0c             	sub    esp,0xc
c000aa0b:	68 71 4c 02 c0       	push   0xc0024c71
c000aa10:	e8 c8 a7 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa1c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa1f:	89 10                	mov    DWORD PTR [eax],edx
c000aa21:	83 c4 1c             	add    esp,0x1c
c000aa24:	31 c0                	xor    eax,eax
c000aa26:	5b                   	pop    ebx
c000aa27:	5e                   	pop    esi
c000aa28:	5f                   	pop    edi
c000aa29:	5d                   	pop    ebp
c000aa2a:	c3                   	ret    
c000aa2b:	90                   	nop

c000aa2c <Pipe::write(unsigned long long, void*, int*)>:
c000aa2c:	55                   	push   ebp
c000aa2d:	57                   	push   edi
c000aa2e:	56                   	push   esi
c000aa2f:	53                   	push   ebx
c000aa30:	83 ec 1c             	sub    esp,0x1c
c000aa33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aa37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa3b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000aa3e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000aa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa49:	89 d8                	mov    eax,ebx
c000aa4b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000aa4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000aa52:	89 d6                	mov    esi,edx
c000aa54:	89 d7                	mov    edi,edx
c000aa56:	c1 ff 1f             	sar    edi,0x1f
c000aa59:	03 34 24             	add    esi,DWORD PTR [esp]
c000aa5c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000aa60:	c1 f8 1f             	sar    eax,0x1f
c000aa63:	39 f3                	cmp    ebx,esi
c000aa65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa6d:	19 f8                	sbb    eax,edi
c000aa6f:	b8 01 00 00 00       	mov    eax,0x1
c000aa74:	72 6e                	jb     c000aae4 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000aa76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000aa79:	01 d0                	add    eax,edx
c000aa7b:	99                   	cdq    
c000aa7c:	f7 fb                	idiv   ebx
c000aa7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa82:	29 d3                	sub    ebx,edx
c000aa84:	89 d7                	mov    edi,edx
c000aa86:	89 de                	mov    esi,ebx
c000aa88:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa8b:	c1 fb 1f             	sar    ebx,0x1f
c000aa8e:	39 f2                	cmp    edx,esi
c000aa90:	19 d8                	sbb    eax,ebx
c000aa92:	b8 00 00 00 00       	mov    eax,0x0
c000aa97:	72 04                	jb     c000aa9d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa99:	89 d0                	mov    eax,edx
c000aa9b:	29 f0                	sub    eax,esi
c000aa9d:	89 d3                	mov    ebx,edx
c000aa9f:	29 c3                	sub    ebx,eax
c000aaa1:	74 0b                	je     c000aaae <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aaa3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aaa6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aaaa:	89 d9                	mov    ecx,ebx
c000aaac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aaae:	85 c0                	test   eax,eax
c000aab0:	74 0d                	je     c000aabf <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aab2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aab6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aab9:	89 de                	mov    esi,ebx
c000aabb:	89 c1                	mov    ecx,eax
c000aabd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aabf:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aac2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aac7:	75 10                	jne    c000aad9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aac9:	83 ec 0c             	sub    esp,0xc
c000aacc:	68 8d 4c 02 c0       	push   0xc0024c8d
c000aad1:	e8 07 a7 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000aad6:	83 c4 10             	add    esp,0x10
c000aad9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aadd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aae0:	89 08                	mov    DWORD PTR [eax],ecx
c000aae2:	31 c0                	xor    eax,eax
c000aae4:	83 c4 1c             	add    esp,0x1c
c000aae7:	5b                   	pop    ebx
c000aae8:	5e                   	pop    esi
c000aae9:	5f                   	pop    edi
c000aaea:	5d                   	pop    ebp
c000aaeb:	c3                   	ret    

c000aaec <Pipe::Pipe(int)>:
c000aaec:	83 ec 0c             	sub    esp,0xc
c000aaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf3:	83 ec 08             	sub    esp,0x8
c000aaf6:	6a 00                	push   0x0
c000aaf8:	50                   	push   eax
c000aaf9:	e8 60 0e 00 00       	call   c000b95e <UnixFile::UnixFile(int)>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	ba b4 4c 02 c0       	mov    edx,0xc0024cb4
c000ab06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0a:	89 10                	mov    DWORD PTR [eax],edx
c000ab0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ab22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab26:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ab2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab31:	83 ec 0c             	sub    esp,0xc
c000ab34:	50                   	push   eax
c000ab35:	e8 ad f2 ff ff       	call   c0009de7 <malloc>
c000ab3a:	83 c4 10             	add    esp,0x10
c000ab3d:	89 c2                	mov    edx,eax
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ab4e:	90                   	nop
c000ab4f:	83 c4 0c             	add    esp,0xc
c000ab52:	c3                   	ret    
c000ab53:	90                   	nop

c000ab54 <VgaText::isAtty()>:
c000ab54:	b0 01                	mov    al,0x1
c000ab56:	c3                   	ret    
c000ab57:	90                   	nop

c000ab58 <VgaText::~VgaText()>:
c000ab58:	83 ec 0c             	sub    esp,0xc
c000ab5b:	ba 3c 4d 02 c0       	mov    edx,0xc0024d3c
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	89 10                	mov    DWORD PTR [eax],edx
c000ab66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	50                   	push   eax
c000ab6e:	e8 cd 0f 00 00       	call   c000bb40 <UnixFile::~UnixFile()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	90                   	nop
c000ab77:	83 c4 0c             	add    esp,0xc
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <VgaText::~VgaText()>:
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	83 ec 0c             	sub    esp,0xc
c000ab82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab86:	e8 cd ff ff ff       	call   c000ab58 <VgaText::~VgaText()>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	83 ec 08             	sub    esp,0x8
c000ab91:	68 b4 01 00 00       	push   0x1b4
c000ab96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9a:	e8 7b 24 00 00       	call   c000d01a <operator delete(void*, unsigned long)>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	83 c4 0c             	add    esp,0xc
c000aba5:	c3                   	ret    

c000aba6 <VgaText::read(unsigned long long, void*, int*)>:
c000aba6:	83 ec 10             	sub    esp,0x10
c000aba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000abb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb5:	e8 f7 59 00 00       	call   c00105b1 <readKeyboard(VgaText*, char*, unsigned long)>
c000abba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abbe:	89 02                	mov    DWORD PTR [edx],eax
c000abc0:	31 c0                	xor    eax,eax
c000abc2:	83 c4 1c             	add    esp,0x1c
c000abc5:	c3                   	ret    

c000abc6 <setTerminalScrollLock(bool)>:
c000abc6:	c3                   	ret    

c000abc7 <addToTerminalCycle(VgaText*)>:
c000abc7:	8b 15 80 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c80
c000abcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abd1:	85 d2                	test   edx,edx
c000abd3:	75 09                	jne    c000abde <addToTerminalCycle(VgaText*)+0x17>
c000abd5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000abd8:	a3 80 8c 02 c0       	mov    ds:0xc0028c80,eax
c000abdd:	c3                   	ret    
c000abde:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000abe1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000abe4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000abe7:	c3                   	ret    

c000abe8 <installVgaTextImplementation()>:
c000abe8:	83 ec 10             	sub    esp,0x10
c000abeb:	6a 20                	push   0x20
c000abed:	6a 00                	push   0x0
c000abef:	68 60 8c 02 c0       	push   0xc0028c60
c000abf4:	e8 9b 5a ff ff       	call   c0000694 <memset>
c000abf9:	83 c4 1c             	add    esp,0x1c
c000abfc:	c3                   	ret    

c000abfd <scrollTerminalScrollLock(int)>:
c000abfd:	c3                   	ret    

c000abfe <VgaText::updateTitle()>:
c000abfe:	53                   	push   ebx
c000abff:	31 c0                	xor    eax,eax
c000ac01:	83 ec 58             	sub    esp,0x58
c000ac04:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ac08:	89 e1                	mov    ecx,esp
c000ac0a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ac0e:	40                   	inc    eax
c000ac0f:	83 f8 50             	cmp    eax,0x50
c000ac12:	75 f6                	jne    c000ac0a <VgaText::updateTitle()+0xc>
c000ac14:	31 c0                	xor    eax,eax
c000ac16:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ac1d:	84 db                	test   bl,bl
c000ac1f:	74 06                	je     c000ac27 <VgaText::updateTitle()+0x29>
c000ac21:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ac24:	40                   	inc    eax
c000ac25:	eb ef                	jmp    c000ac16 <VgaText::updateTitle()+0x18>
c000ac27:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000ac2a:	85 c0                	test   eax,eax
c000ac2c:	74 09                	je     c000ac37 <VgaText::updateTitle()+0x39>
c000ac2e:	53                   	push   ebx
c000ac2f:	53                   	push   ebx
c000ac30:	51                   	push   ecx
c000ac31:	52                   	push   edx
c000ac32:	ff d0                	call   eax
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	83 c4 58             	add    esp,0x58
c000ac3a:	5b                   	pop    ebx
c000ac3b:	c3                   	ret    

c000ac3c <VgaText::load()>:
c000ac3c:	53                   	push   ebx
c000ac3d:	31 c0                	xor    eax,eax
c000ac3f:	83 ec 58             	sub    esp,0x58
c000ac42:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ac46:	89 e2                	mov    edx,esp
c000ac48:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ac4c:	40                   	inc    eax
c000ac4d:	83 f8 50             	cmp    eax,0x50
c000ac50:	75 f6                	jne    c000ac48 <VgaText::load()+0xc>
c000ac52:	31 c0                	xor    eax,eax
c000ac54:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ac5b:	84 c9                	test   cl,cl
c000ac5d:	74 06                	je     c000ac65 <VgaText::load()+0x29>
c000ac5f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ac62:	40                   	inc    eax
c000ac63:	eb ef                	jmp    c000ac54 <VgaText::load()+0x18>
c000ac65:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ac68:	85 c0                	test   eax,eax
c000ac6a:	74 09                	je     c000ac75 <VgaText::load()+0x39>
c000ac6c:	51                   	push   ecx
c000ac6d:	51                   	push   ecx
c000ac6e:	52                   	push   edx
c000ac6f:	53                   	push   ebx
c000ac70:	ff d0                	call   eax
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ac78:	85 c0                	test   eax,eax
c000ac7a:	74 09                	je     c000ac85 <VgaText::load()+0x49>
c000ac7c:	83 ec 0c             	sub    esp,0xc
c000ac7f:	53                   	push   ebx
c000ac80:	ff d0                	call   eax
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	83 c4 58             	add    esp,0x58
c000ac88:	5b                   	pop    ebx
c000ac89:	c3                   	ret    

c000ac8a <VgaText::updateCursor()>:
c000ac8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac8e:	39 05 84 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c84,eax
c000ac94:	75 09                	jne    c000ac9f <VgaText::updateCursor()+0x15>
c000ac96:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac99:	85 c0                	test   eax,eax
c000ac9b:	74 02                	je     c000ac9f <VgaText::updateCursor()+0x15>
c000ac9d:	ff e0                	jmp    eax
c000ac9f:	c3                   	ret    

c000aca0 <VgaText::doANSI_SGR(int)>:
c000aca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca8:	85 d2                	test   edx,edx
c000acaa:	75 0b                	jne    c000acb7 <VgaText::doANSI_SGR(int)+0x17>
c000acac:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000acaf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acb2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000acb5:	eb 59                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acb7:	83 fa 07             	cmp    edx,0x7
c000acba:	75 0b                	jne    c000acc7 <VgaText::doANSI_SGR(int)+0x27>
c000acbc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000acbf:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000acc2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000acc5:	eb 49                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acc7:	83 fa 1b             	cmp    edx,0x1b
c000acca:	74 e0                	je     c000acac <VgaText::doANSI_SGR(int)+0xc>
c000accc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000accf:	83 f9 07             	cmp    ecx,0x7
c000acd2:	77 09                	ja     c000acdd <VgaText::doANSI_SGR(int)+0x3d>
c000acd4:	8b 14 8d 00 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8000]
c000acdb:	eb 20                	jmp    c000acfd <VgaText::doANSI_SGR(int)+0x5d>
c000acdd:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ace0:	83 f9 07             	cmp    ecx,0x7
c000ace3:	77 09                	ja     c000acee <VgaText::doANSI_SGR(int)+0x4e>
c000ace5:	8b 14 8d 00 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8000]
c000acec:	eb 22                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acee:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000acf1:	83 f9 07             	cmp    ecx,0x7
c000acf4:	77 0b                	ja     c000ad01 <VgaText::doANSI_SGR(int)+0x61>
c000acf6:	8b 14 95 b8 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8148]
c000acfd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad00:	c3                   	ret    
c000ad01:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ad04:	83 f9 07             	cmp    ecx,0x7
c000ad07:	77 0a                	ja     c000ad13 <VgaText::doANSI_SGR(int)+0x73>
c000ad09:	8b 14 95 90 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8170]
c000ad10:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad13:	c3                   	ret    

c000ad14 <VgaText::setDefaultBgColour(VgaColour)>:
c000ad14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad1c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ad1f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad22:	c3                   	ret    
c000ad23:	90                   	nop

c000ad24 <VgaText::setDefaultFgColour(VgaColour)>:
c000ad24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad2c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000ad2f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad32:	c3                   	ret    
c000ad33:	90                   	nop

c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ad34:	53                   	push   ebx
c000ad35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ad39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad41:	51                   	push   ecx
c000ad42:	e8 cd ff ff ff       	call   c000ad14 <VgaText::setDefaultBgColour(VgaColour)>
c000ad47:	58                   	pop    eax
c000ad48:	5a                   	pop    edx
c000ad49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ad4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ad51:	5b                   	pop    ebx
c000ad52:	eb d0                	jmp    c000ad24 <VgaText::setDefaultFgColour(VgaColour)>

c000ad54 <VgaText::setTitleTextColour(VgaColour)>:
c000ad54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad5c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ad5f:	e9 9a fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>

c000ad64 <VgaText::setTitleColour(VgaColour)>:
c000ad64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad6c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ad6f:	e9 8a fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>

c000ad74 <VgaText::setTitle(char*)>:
c000ad74:	53                   	push   ebx
c000ad75:	83 ec 10             	sub    esp,0x10
c000ad78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad80:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad86:	50                   	push   eax
c000ad87:	e8 c4 59 ff ff       	call   c0000750 <strcpy>
c000ad8c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad90:	83 c4 18             	add    esp,0x18
c000ad93:	5b                   	pop    ebx
c000ad94:	e9 65 fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>
c000ad99:	90                   	nop

c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad9a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad9e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ada3:	83 e0 0f             	and    eax,0xf
c000ada6:	c1 e2 04             	shl    edx,0x4
c000ada9:	09 d0                	or     eax,edx
c000adab:	c3                   	ret    

c000adac <VgaText::scrollScreen()>:
c000adac:	55                   	push   ebp
c000adad:	b9 01 00 00 00       	mov    ecx,0x1
c000adb2:	57                   	push   edi
c000adb3:	56                   	push   esi
c000adb4:	53                   	push   ebx
c000adb5:	83 ec 0c             	sub    esp,0xc
c000adb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000adbc:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000adc2:	31 ff                	xor    edi,edi
c000adc4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000adc7:	83 f9 17             	cmp    ecx,0x17
c000adca:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000adcd:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000add4:	75 27                	jne    c000adfd <VgaText::scrollScreen()+0x51>
c000add6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000add9:	01 f5                	add    ebp,esi
c000addb:	f7 c7 01 00 00 00    	test   edi,0x1
c000ade1:	74 16                	je     c000adf9 <VgaText::scrollScreen()+0x4d>
c000ade3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ade7:	50                   	push   eax
c000ade8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000adec:	50                   	push   eax
c000aded:	e8 a8 ff ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000adf2:	5a                   	pop    edx
c000adf3:	5a                   	pop    edx
c000adf4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000adf7:	eb 04                	jmp    c000adfd <VgaText::scrollScreen()+0x51>
c000adf9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000adfd:	47                   	inc    edi
c000adfe:	46                   	inc    esi
c000adff:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ae05:	75 bd                	jne    c000adc4 <VgaText::scrollScreen()+0x18>
c000ae07:	41                   	inc    ecx
c000ae08:	83 f9 18             	cmp    ecx,0x18
c000ae0b:	75 af                	jne    c000adbc <VgaText::scrollScreen()+0x10>
c000ae0d:	39 1d 84 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c84,ebx
c000ae13:	75 1b                	jne    c000ae30 <VgaText::scrollScreen()+0x84>
c000ae15:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae19:	74 05                	je     c000ae20 <VgaText::scrollScreen()+0x74>
c000ae1b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ae1e:	eb 10                	jmp    c000ae30 <VgaText::scrollScreen()+0x84>
c000ae20:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ae23:	85 c0                	test   eax,eax
c000ae25:	74 09                	je     c000ae30 <VgaText::scrollScreen()+0x84>
c000ae27:	83 ec 0c             	sub    esp,0xc
c000ae2a:	53                   	push   ebx
c000ae2b:	ff d0                	call   eax
c000ae2d:	83 c4 10             	add    esp,0x10
c000ae30:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ae34:	83 c4 0c             	add    esp,0xc
c000ae37:	5b                   	pop    ebx
c000ae38:	5e                   	pop    esi
c000ae39:	5f                   	pop    edi
c000ae3a:	5d                   	pop    ebp
c000ae3b:	e9 4a fe ff ff       	jmp    c000ac8a <VgaText::updateCursor()>

c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ae40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ae45:	c1 e0 08             	shl    eax,0x8
c000ae48:	89 c2                	mov    edx,eax
c000ae4a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ae4f:	09 d0                	or     eax,edx
c000ae51:	c3                   	ret    

c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ae52:	56                   	push   esi
c000ae53:	53                   	push   ebx
c000ae54:	51                   	push   ecx
c000ae55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae59:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae5e:	50                   	push   eax
c000ae5f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae64:	50                   	push   eax
c000ae65:	e8 30 ff ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000ae6a:	5b                   	pop    ebx
c000ae6b:	0f b6 c0             	movzx  eax,al
c000ae6e:	5e                   	pop    esi
c000ae6f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ae74:	50                   	push   eax
c000ae75:	53                   	push   ebx
c000ae76:	e8 c5 ff ff ff       	call   c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>
c000ae7b:	5a                   	pop    edx
c000ae7c:	5e                   	pop    esi
c000ae7d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae80:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae86:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae8a:	0f b7 d2             	movzx  edx,dx
c000ae8d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae91:	39 0d 84 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c84,ecx
c000ae97:	75 10                	jne    c000aea9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae99:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae9c:	85 c0                	test   eax,eax
c000ae9e:	74 09                	je     c000aea9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aea0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aea4:	5a                   	pop    edx
c000aea5:	5b                   	pop    ebx
c000aea6:	5e                   	pop    esi
c000aea7:	ff e0                	jmp    eax
c000aea9:	58                   	pop    eax
c000aeaa:	5b                   	pop    ebx
c000aeab:	5e                   	pop    esi
c000aeac:	c3                   	ret    
c000aead:	90                   	nop

c000aeae <VgaText::getCursorX()>:
c000aeae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeb2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aeb5:	c3                   	ret    

c000aeb6 <VgaText::getCursorY()>:
c000aeb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeba:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aebd:	c3                   	ret    

c000aebe <VgaText::setCursor(int, int)>:
c000aebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aec6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aec9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aecd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aed0:	e9 b5 fd ff ff       	jmp    c000ac8a <VgaText::updateCursor()>

c000aed5 <setActiveTerminal(VgaText*)>:
c000aed5:	53                   	push   ebx
c000aed6:	83 ec 08             	sub    esp,0x8
c000aed9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aedd:	85 db                	test   ebx,ebx
c000aedf:	75 11                	jne    c000aef2 <setActiveTerminal(VgaText*)+0x1d>
c000aee1:	c7 44 24 10 c8 4c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024cc8
c000aee9:	83 c4 08             	add    esp,0x8
c000aeec:	5b                   	pop    ebx
c000aeed:	e9 eb a2 00 00       	jmp    c00151dd <Krnl::panic(char const*)>
c000aef2:	a1 84 8c 02 c0       	mov    eax,ds:0xc0028c84
c000aef7:	85 c0                	test   eax,eax
c000aef9:	74 0c                	je     c000af07 <setActiveTerminal(VgaText*)+0x32>
c000aefb:	83 ec 0c             	sub    esp,0xc
c000aefe:	50                   	push   eax
c000aeff:	e8 86 fd ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000af04:	83 c4 10             	add    esp,0x10
c000af07:	89 1d 84 8c 02 c0    	mov    DWORD PTR ds:0xc0028c84,ebx
c000af0d:	51                   	push   ecx
c000af0e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af11:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af14:	53                   	push   ebx
c000af15:	e8 a4 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000af21:	75 07                	jne    c000af2a <setActiveTerminal(VgaText*)+0x55>
c000af23:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000af2a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af2e:	83 c4 08             	add    esp,0x8
c000af31:	5b                   	pop    ebx
c000af32:	e9 05 fd ff ff       	jmp    c000ac3c <VgaText::load()>

c000af37 <doTerminalCycle()>:
c000af37:	83 ec 18             	sub    esp,0x18
c000af3a:	a1 80 8c 02 c0       	mov    eax,ds:0xc0028c80
c000af3f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000af42:	50                   	push   eax
c000af43:	a3 80 8c 02 c0       	mov    ds:0xc0028c80,eax
c000af48:	e8 88 ff ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c000af4d:	83 c4 1c             	add    esp,0x1c
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <VgaText::setCursorX(int)>:
c000af52:	83 ec 10             	sub    esp,0x10
c000af55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af59:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000af5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af60:	50                   	push   eax
c000af61:	e8 58 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af66:	83 c4 1c             	add    esp,0x1c
c000af69:	c3                   	ret    

c000af6a <VgaText::setCursorY(int)>:
c000af6a:	83 ec 10             	sub    esp,0x10
c000af6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af75:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000af78:	50                   	push   eax
c000af79:	e8 40 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af7e:	83 c4 1c             	add    esp,0x1c
c000af81:	c3                   	ret    

c000af82 <VgaText::incrementCursor(bool)>:
c000af82:	56                   	push   esi
c000af83:	53                   	push   ebx
c000af84:	51                   	push   ecx
c000af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af90:	40                   	inc    eax
c000af91:	83 f8 50             	cmp    eax,0x50
c000af94:	74 05                	je     c000af9b <VgaText::incrementCursor(bool)+0x19>
c000af96:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af99:	eb 24                	jmp    c000afbf <VgaText::incrementCursor(bool)+0x3d>
c000af9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afa5:	8d 50 01             	lea    edx,[eax+0x1]
c000afa8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afab:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afae:	75 0f                	jne    c000afbf <VgaText::incrementCursor(bool)+0x3d>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afb6:	53                   	push   ebx
c000afb7:	e8 f0 fd ff ff       	call   c000adac <VgaText::scrollScreen()>
c000afbc:	83 c4 10             	add    esp,0x10
c000afbf:	89 f0                	mov    eax,esi
c000afc1:	84 c0                	test   al,al
c000afc3:	74 0c                	je     c000afd1 <VgaText::incrementCursor(bool)+0x4f>
c000afc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000afc9:	5a                   	pop    edx
c000afca:	5b                   	pop    ebx
c000afcb:	5e                   	pop    esi
c000afcc:	e9 b9 fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000afd1:	58                   	pop    eax
c000afd2:	5b                   	pop    ebx
c000afd3:	5e                   	pop    esi
c000afd4:	c3                   	ret    
c000afd5:	90                   	nop

c000afd6 <VgaText::decrementCursor(bool)>:
c000afd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000afda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000afde:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000afe1:	85 c0                	test   eax,eax
c000afe3:	74 04                	je     c000afe9 <VgaText::decrementCursor(bool)+0x13>
c000afe5:	48                   	dec    eax
c000afe6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000afe9:	84 c9                	test   cl,cl
c000afeb:	74 09                	je     c000aff6 <VgaText::decrementCursor(bool)+0x20>
c000afed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aff1:	e9 94 fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000aff6:	c3                   	ret    
c000aff7:	90                   	nop

c000aff8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aff8:	53                   	push   ebx
c000aff9:	83 ec 08             	sub    esp,0x8
c000affc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b004:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b008:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b00c:	3c 07                	cmp    al,0x7
c000b00e:	75 2a                	jne    c000b03a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000b010:	a1 3c 8d 02 c0       	mov    eax,ds:0xc0028d3c
c000b015:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b01d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000b025:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000b02d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b031:	83 c4 08             	add    esp,0x8
c000b034:	5b                   	pop    ebx
c000b035:	e9 08 30 00 00       	jmp    c000e042 <Buzzer::beep(int, int, bool)>
c000b03a:	3c 0d                	cmp    al,0xd
c000b03c:	75 09                	jne    c000b047 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000b03e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b045:	eb 2c                	jmp    c000b073 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000b047:	3c 0a                	cmp    al,0xa
c000b049:	75 31                	jne    c000b07c <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000b04b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b04e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b055:	8d 50 01             	lea    edx,[eax+0x1]
c000b058:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000b05b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000b05e:	75 0f                	jne    c000b06f <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b066:	53                   	push   ebx
c000b067:	e8 40 fd ff ff       	call   c000adac <VgaText::scrollScreen()>
c000b06c:	83 c4 10             	add    esp,0x10
c000b06f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b073:	83 c4 08             	add    esp,0x8
c000b076:	5b                   	pop    ebx
c000b077:	e9 0e fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000b07c:	3c 08                	cmp    al,0x8
c000b07e:	75 25                	jne    c000b0a5 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b080:	50                   	push   eax
c000b081:	50                   	push   eax
c000b082:	6a 01                	push   0x1
c000b084:	53                   	push   ebx
c000b085:	e8 4c ff ff ff       	call   c000afd6 <VgaText::decrementCursor(bool)>
c000b08a:	5a                   	pop    edx
c000b08b:	59                   	pop    ecx
c000b08c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b08f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b092:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b095:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b098:	6a 20                	push   0x20
c000b09a:	53                   	push   ebx
c000b09b:	e8 b2 fd ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0a0:	83 c4 28             	add    esp,0x28
c000b0a3:	5b                   	pop    ebx
c000b0a4:	c3                   	ret    
c000b0a5:	83 ec 08             	sub    esp,0x8
c000b0a8:	0f be c0             	movsx  eax,al
c000b0ab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0b1:	51                   	push   ecx
c000b0b2:	52                   	push   edx
c000b0b3:	50                   	push   eax
c000b0b4:	53                   	push   ebx
c000b0b5:	e8 98 fd ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0ba:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b0be:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b0c6:	83 c4 28             	add    esp,0x28
c000b0c9:	5b                   	pop    ebx
c000b0ca:	e9 b3 fe ff ff       	jmp    c000af82 <VgaText::incrementCursor(bool)>
c000b0cf:	90                   	nop

c000b0d0 <VgaText::doUpdate()>:
c000b0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d4:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b0d7:	85 c0                	test   eax,eax
c000b0d9:	74 02                	je     c000b0dd <VgaText::doUpdate()+0xd>
c000b0db:	ff e0                	jmp    eax
c000b0dd:	c3                   	ret    

c000b0de <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b0de:	55                   	push   ebp
c000b0df:	31 ed                	xor    ebp,ebp
c000b0e1:	57                   	push   edi
c000b0e2:	56                   	push   esi
c000b0e3:	53                   	push   ebx
c000b0e4:	83 ec 1c             	sub    esp,0x1c
c000b0e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0eb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b0f7:	50                   	push   eax
c000b0f8:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0fd:	50                   	push   eax
c000b0fe:	e8 97 fc ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000b103:	59                   	pop    ecx
c000b104:	0f b6 c0             	movzx  eax,al
c000b107:	5e                   	pop    esi
c000b108:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b10d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b111:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b118:	0f b7 f6             	movzx  esi,si
c000b11b:	01 f6                	add    esi,esi
c000b11d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b120:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b123:	84 c0                	test   al,al
c000b125:	0f 84 fd 00 00 00    	je     c000b228 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b12b:	3c 0d                	cmp    al,0xd
c000b12d:	75 0c                	jne    c000b13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b12f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b136:	e9 e7 00 00 00       	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b13b:	3c 0a                	cmp    al,0xa
c000b13d:	75 47                	jne    c000b186 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b13f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b142:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b149:	8d 48 01             	lea    ecx,[eax+0x1]
c000b14c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b14f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b152:	75 0f                	jne    c000b163 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b15a:	53                   	push   ebx
c000b15b:	e8 4c fc ff ff       	call   c000adac <VgaText::scrollScreen()>
c000b160:	83 c4 10             	add    esp,0x10
c000b163:	83 ec 0c             	sub    esp,0xc
c000b166:	31 ed                	xor    ebp,ebp
c000b168:	53                   	push   ebx
c000b169:	e8 1c fb ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000b16e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b173:	83 c4 10             	add    esp,0x10
c000b176:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b179:	0f b7 f6             	movzx  esi,si
c000b17c:	01 f6                	add    esi,esi
c000b17e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b181:	e9 9c 00 00 00       	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b186:	3c 08                	cmp    al,0x8
c000b188:	75 35                	jne    c000b1bf <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b18a:	56                   	push   esi
c000b18b:	56                   	push   esi
c000b18c:	6a 01                	push   0x1
c000b18e:	53                   	push   ebx
c000b18f:	e8 42 fe ff ff       	call   c000afd6 <VgaText::decrementCursor(bool)>
c000b194:	58                   	pop    eax
c000b195:	5a                   	pop    edx
c000b196:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b199:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b19c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b19f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b1a2:	6a 20                	push   0x20
c000b1a4:	53                   	push   ebx
c000b1a5:	e8 a8 fc ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b1aa:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b1af:	83 c4 20             	add    esp,0x20
c000b1b2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b1b5:	0f b7 f6             	movzx  esi,si
c000b1b8:	01 f6                	add    esi,esi
c000b1ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b1bd:	eb 63                	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b1bf:	51                   	push   ecx
c000b1c0:	51                   	push   ecx
c000b1c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c5:	50                   	push   eax
c000b1c6:	e8 75 fc ff ff       	call   c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>
c000b1cb:	83 c4 10             	add    esp,0x10
c000b1ce:	66 89 06             	mov    WORD PTR [esi],ax
c000b1d1:	39 1d 84 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c84,ebx
c000b1d7:	75 21                	jne    c000b1fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1d9:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b1dc:	85 c0                	test   eax,eax
c000b1de:	74 1a                	je     c000b1fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1e0:	52                   	push   edx
c000b1e1:	52                   	push   edx
c000b1e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b1e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b1e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1f0:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b1f3:	51                   	push   ecx
c000b1f4:	53                   	push   ebx
c000b1f5:	ff d0                	call   eax
c000b1f7:	83 c4 20             	add    esp,0x20
c000b1fa:	83 c6 02             	add    esi,0x2
c000b1fd:	50                   	push   eax
c000b1fe:	50                   	push   eax
c000b1ff:	6a 00                	push   0x0
c000b201:	53                   	push   ebx
c000b202:	e8 7b fd ff ff       	call   c000af82 <VgaText::incrementCursor(bool)>
c000b207:	83 c4 10             	add    esp,0x10
c000b20a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b20e:	75 0d                	jne    c000b21d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b210:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b215:	0f b7 f6             	movzx  esi,si
c000b218:	01 f6                	add    esi,esi
c000b21a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b21d:	bd 01 00 00 00       	mov    ebp,0x1
c000b222:	47                   	inc    edi
c000b223:	e9 f8 fe ff ff       	jmp    c000b120 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	53                   	push   ebx
c000b22c:	e8 59 fa ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000b231:	83 c4 10             	add    esp,0x10
c000b234:	89 e8                	mov    eax,ebp
c000b236:	84 c0                	test   al,al
c000b238:	74 0c                	je     c000b246 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b23a:	83 ec 0c             	sub    esp,0xc
c000b23d:	53                   	push   ebx
c000b23e:	e8 8d fe ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b24d:	83 c4 1c             	add    esp,0x1c
c000b250:	5b                   	pop    ebx
c000b251:	5e                   	pop    esi
c000b252:	5f                   	pop    edi
c000b253:	5d                   	pop    ebp
c000b254:	c3                   	ret    
c000b255:	90                   	nop

c000b256 <VgaText::clearScreen()>:
c000b256:	57                   	push   edi
c000b257:	56                   	push   esi
c000b258:	31 f6                	xor    esi,esi
c000b25a:	53                   	push   ebx
c000b25b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b25f:	52                   	push   edx
c000b260:	6a 00                	push   0x0
c000b262:	6a 00                	push   0x0
c000b264:	53                   	push   ebx
c000b265:	e8 54 fc ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b26a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b271:	83 c4 10             	add    esp,0x10
c000b274:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b277:	7e 20                	jle    c000b299 <VgaText::clearScreen()+0x43>
c000b279:	31 ff                	xor    edi,edi
c000b27b:	50                   	push   eax
c000b27c:	50                   	push   eax
c000b27d:	56                   	push   esi
c000b27e:	57                   	push   edi
c000b27f:	47                   	inc    edi
c000b280:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b283:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b286:	6a 20                	push   0x20
c000b288:	53                   	push   ebx
c000b289:	e8 c4 fb ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b28e:	83 c4 20             	add    esp,0x20
c000b291:	83 ff 50             	cmp    edi,0x50
c000b294:	75 e5                	jne    c000b27b <VgaText::clearScreen()+0x25>
c000b296:	46                   	inc    esi
c000b297:	eb db                	jmp    c000b274 <VgaText::clearScreen()+0x1e>
c000b299:	83 ec 0c             	sub    esp,0xc
c000b29c:	53                   	push   ebx
c000b29d:	e8 2e fe ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b2a2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	5b                   	pop    ebx
c000b2ad:	5e                   	pop    esi
c000b2ae:	5f                   	pop    edi
c000b2af:	c3                   	ret    

c000b2b0 <VgaText::putchar(char)>:
c000b2b0:	56                   	push   esi
c000b2b1:	53                   	push   ebx
c000b2b2:	83 ec 14             	sub    esp,0x14
c000b2b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2bd:	3c 5b                	cmp    al,0x5b
c000b2bf:	75 18                	jne    c000b2d9 <VgaText::putchar(char)+0x29>
c000b2c1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b2c5:	74 1f                	je     c000b2e6 <VgaText::putchar(char)+0x36>
c000b2c7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b2cd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b2d4:	e9 bd 00 00 00       	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b2d9:	3c 1b                	cmp    al,0x1b
c000b2db:	75 09                	jne    c000b2e6 <VgaText::putchar(char)+0x36>
c000b2dd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b2e1:	e9 b0 00 00 00       	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b2e6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b2e9:	84 c9                	test   cl,cl
c000b2eb:	0f 84 92 00 00 00    	je     c000b383 <VgaText::putchar(char)+0xd3>
c000b2f1:	8d 50 c0             	lea    edx,[eax-0x40]
c000b2f4:	80 fa 3e             	cmp    dl,0x3e
c000b2f7:	77 76                	ja     c000b36f <VgaText::putchar(char)+0xbf>
c000b2f9:	3c 6d                	cmp    al,0x6d
c000b2fb:	75 47                	jne    c000b344 <VgaText::putchar(char)+0x94>
c000b2fd:	31 f6                	xor    esi,esi
c000b2ff:	31 d2                	xor    edx,edx
c000b301:	31 c0                	xor    eax,eax
c000b303:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b306:	7e 2d                	jle    c000b335 <VgaText::putchar(char)+0x85>
c000b308:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b30d:	80 fa 3b             	cmp    dl,0x3b
c000b310:	75 17                	jne    c000b329 <VgaText::putchar(char)+0x79>
c000b312:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b316:	50                   	push   eax
c000b317:	53                   	push   ebx
c000b318:	e8 83 f9 ff ff       	call   c000aca0 <VgaText::doANSI_SGR(int)>
c000b31d:	59                   	pop    ecx
c000b31e:	31 d2                	xor    edx,edx
c000b320:	58                   	pop    eax
c000b321:	31 c0                	xor    eax,eax
c000b323:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b327:	eb 09                	jmp    c000b332 <VgaText::putchar(char)+0x82>
c000b329:	6b c0 0a             	imul   eax,eax,0xa
c000b32c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b330:	88 ca                	mov    dl,cl
c000b332:	46                   	inc    esi
c000b333:	eb ce                	jmp    c000b303 <VgaText::putchar(char)+0x53>
c000b335:	84 d2                	test   dl,dl
c000b337:	74 2e                	je     c000b367 <VgaText::putchar(char)+0xb7>
c000b339:	50                   	push   eax
c000b33a:	53                   	push   ebx
c000b33b:	e8 60 f9 ff ff       	call   c000aca0 <VgaText::doANSI_SGR(int)>
c000b340:	58                   	pop    eax
c000b341:	5a                   	pop    edx
c000b342:	eb 23                	jmp    c000b367 <VgaText::putchar(char)+0xb7>
c000b344:	3c 4a                	cmp    al,0x4a
c000b346:	75 1f                	jne    c000b367 <VgaText::putchar(char)+0xb7>
c000b348:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b34c:	75 19                	jne    c000b367 <VgaText::putchar(char)+0xb7>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	53                   	push   ebx
c000b352:	e8 ff fe ff ff       	call   c000b256 <VgaText::clearScreen()>
c000b357:	83 c4 0c             	add    esp,0xc
c000b35a:	6a 00                	push   0x0
c000b35c:	6a 00                	push   0x0
c000b35e:	53                   	push   ebx
c000b35f:	e8 5a fb ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b364:	83 c4 10             	add    esp,0x10
c000b367:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b36d:	eb 27                	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b36f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b372:	83 fa 0e             	cmp    edx,0xe
c000b375:	7f 1f                	jg     c000b396 <VgaText::putchar(char)+0xe6>
c000b377:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b37a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b37d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b381:	eb 13                	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b383:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b386:	0f be c0             	movsx  eax,al
c000b389:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b38c:	50                   	push   eax
c000b38d:	53                   	push   ebx
c000b38e:	e8 65 fc ff ff       	call   c000aff8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	83 c4 14             	add    esp,0x14
c000b399:	5b                   	pop    ebx
c000b39a:	5e                   	pop    esi
c000b39b:	c3                   	ret    

c000b39c <VgaText::putx(unsigned int)>:
c000b39c:	57                   	push   edi
c000b39d:	b9 11 00 00 00       	mov    ecx,0x11
c000b3a2:	56                   	push   esi
c000b3a3:	be d6 4c 02 c0       	mov    esi,0xc0024cd6
c000b3a8:	53                   	push   ebx
c000b3a9:	83 ec 20             	sub    esp,0x20
c000b3ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b3b0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b3b4:	fc                   	cld    
c000b3b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3b7:	be 08 00 00 00       	mov    esi,0x8
c000b3bc:	50                   	push   eax
c000b3bd:	50                   	push   eax
c000b3be:	89 d8                	mov    eax,ebx
c000b3c0:	c1 e3 04             	shl    ebx,0x4
c000b3c3:	c1 e8 1c             	shr    eax,0x1c
c000b3c6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b3cb:	50                   	push   eax
c000b3cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b3d0:	e8 db fe ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b3d5:	83 c4 10             	add    esp,0x10
c000b3d8:	4e                   	dec    esi
c000b3d9:	75 e1                	jne    c000b3bc <VgaText::putx(unsigned int)+0x20>
c000b3db:	83 c4 20             	add    esp,0x20
c000b3de:	5b                   	pop    ebx
c000b3df:	5e                   	pop    esi
c000b3e0:	5f                   	pop    edi
c000b3e1:	c3                   	ret    

c000b3e2 <VgaText::puts(char const*)>:
c000b3e2:	53                   	push   ebx
c000b3e3:	83 ec 08             	sub    esp,0x8
c000b3e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b3ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b3ed:	84 c0                	test   al,al
c000b3ef:	74 12                	je     c000b403 <VgaText::puts(char const*)+0x21>
c000b3f1:	43                   	inc    ebx
c000b3f2:	51                   	push   ecx
c000b3f3:	51                   	push   ecx
c000b3f4:	50                   	push   eax
c000b3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f9:	e8 b2 fe ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	eb e7                	jmp    c000b3ea <VgaText::puts(char const*)+0x8>
c000b403:	83 c4 08             	add    esp,0x8
c000b406:	5b                   	pop    ebx
c000b407:	c3                   	ret    

c000b408 <VgaText::VgaText(char const*)>:
c000b408:	57                   	push   edi
c000b409:	56                   	push   esi
c000b40a:	53                   	push   ebx
c000b40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40f:	83 ec 08             	sub    esp,0x8
c000b412:	6a 00                	push   0x0
c000b414:	50                   	push   eax
c000b415:	e8 44 05 00 00       	call   c000b95e <UnixFile::UnixFile(int)>
c000b41a:	83 c4 10             	add    esp,0x10
c000b41d:	ba 3c 4d 02 c0       	mov    edx,0xc0024d3c
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	89 10                	mov    DWORD PTR [eax],edx
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b437:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b442:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b452:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b468:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b473:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47e:	8d 50 60             	lea    edx,[eax+0x60]
c000b481:	bb 60 8c 02 c0       	mov    ebx,0xc0028c60
c000b486:	b8 08 00 00 00       	mov    eax,0x8
c000b48b:	fc                   	cld    
c000b48c:	89 d7                	mov    edi,edx
c000b48e:	89 de                	mov    esi,ebx
c000b490:	89 c1                	mov    ecx,eax
c000b492:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b498:	05 82 00 00 00       	add    eax,0x82
c000b49d:	83 ec 08             	sub    esp,0x8
c000b4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a4:	50                   	push   eax
c000b4a5:	e8 a6 52 ff ff       	call   c0000750 <strcpy>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b4b8:	83 ec 0c             	sub    esp,0xc
c000b4bb:	6a 01                	push   0x1
c000b4bd:	e8 df 08 00 00       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	89 c2                	mov    edx,eax
c000b4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b4ce:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c000b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4db:	89 c6                	mov    esi,eax
c000b4dd:	e8 bc ef ff ff       	call   c000a49e <Phys::allocatePage()>
c000b4e2:	68 05 0c 00 00       	push   0xc05
c000b4e7:	56                   	push   esi
c000b4e8:	50                   	push   eax
c000b4e9:	53                   	push   ebx
c000b4ea:	e8 1d 0f 00 00       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4f9:	83 ec 04             	sub    esp,0x4
c000b4fc:	68 00 0f 00 00       	push   0xf00
c000b501:	6a 00                	push   0x0
c000b503:	50                   	push   eax
c000b504:	e8 8b 51 ff ff       	call   c0000694 <memset>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	83 ec 04             	sub    esp,0x4
c000b50f:	6a 00                	push   0x0
c000b511:	6a 07                	push   0x7
c000b513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b517:	e8 18 f8 ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	83 ec 04             	sub    esp,0x4
c000b522:	6a 00                	push   0x0
c000b524:	6a 00                	push   0x0
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	e8 8f f9 ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b52f:	83 c4 10             	add    esp,0x10
c000b532:	83 ec 0c             	sub    esp,0xc
c000b535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b539:	e8 18 fd ff ff       	call   c000b256 <VgaText::clearScreen()>
c000b53e:	83 c4 10             	add    esp,0x10
c000b541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b545:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54d:	05 02 01 00 00       	add    eax,0x102
c000b552:	83 ec 04             	sub    esp,0x4
c000b555:	6a 30                	push   0x30
c000b557:	6a 00                	push   0x0
c000b559:	50                   	push   eax
c000b55a:	e8 35 51 ff ff       	call   c0000694 <memset>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b566:	05 32 01 00 00       	add    eax,0x132
c000b56b:	83 ec 04             	sub    esp,0x4
c000b56e:	68 80 00 00 00       	push   0x80
c000b573:	6a 00                	push   0x0
c000b575:	50                   	push   eax
c000b576:	e8 19 51 ff ff       	call   c0000694 <memset>
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	90                   	nop
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	c3                   	ret    
c000b583:	90                   	nop

c000b584 <VgaText::receiveKey(unsigned char)>:
c000b584:	55                   	push   ebp
c000b585:	57                   	push   edi
c000b586:	56                   	push   esi
c000b587:	53                   	push   ebx
c000b588:	83 ec 1c             	sub    esp,0x1c
c000b58b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b58f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b593:	84 db                	test   bl,bl
c000b595:	0f 84 c6 00 00 00    	je     c000b661 <VgaText::receiveKey(unsigned char)+0xdd>
c000b59b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b5a1:	80 fb 08             	cmp    bl,0x8
c000b5a4:	75 2c                	jne    c000b5d2 <VgaText::receiveKey(unsigned char)+0x4e>
c000b5a6:	83 ec 0c             	sub    esp,0xc
c000b5a9:	57                   	push   edi
c000b5aa:	e8 01 51 ff ff       	call   c00006b0 <strlen>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	85 c0                	test   eax,eax
c000b5b4:	74 41                	je     c000b5f7 <VgaText::receiveKey(unsigned char)+0x73>
c000b5b6:	50                   	push   eax
c000b5b7:	50                   	push   eax
c000b5b8:	6a 08                	push   0x8
c000b5ba:	56                   	push   esi
c000b5bb:	e8 f0 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b5c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b5c3:	e8 e8 50 ff ff       	call   c00006b0 <strlen>
c000b5c8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b5d0:	eb 22                	jmp    c000b5f4 <VgaText::receiveKey(unsigned char)+0x70>
c000b5d2:	0f be c3             	movsx  eax,bl
c000b5d5:	52                   	push   edx
c000b5d6:	52                   	push   edx
c000b5d7:	50                   	push   eax
c000b5d8:	56                   	push   esi
c000b5d9:	e8 d2 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b5de:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b5e2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b5e7:	59                   	pop    ecx
c000b5e8:	5d                   	pop    ebp
c000b5e9:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b5ed:	50                   	push   eax
c000b5ee:	57                   	push   edi
c000b5ef:	e8 9c 52 ff ff       	call   c0000890 <strcat>
c000b5f4:	83 c4 10             	add    esp,0x10
c000b5f7:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b5fe:	75 05                	jne    c000b605 <VgaText::receiveKey(unsigned char)+0x81>
c000b600:	80 fb 0a             	cmp    bl,0xa
c000b603:	75 50                	jne    c000b655 <VgaText::receiveKey(unsigned char)+0xd1>
c000b605:	83 ec 0c             	sub    esp,0xc
c000b608:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b60e:	53                   	push   ebx
c000b60f:	e8 9c 50 ff ff       	call   c00006b0 <strlen>
c000b614:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b617:	89 c5                	mov    ebp,eax
c000b619:	e8 92 50 ff ff       	call   c00006b0 <strlen>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b625:	3d 80 00 00 00       	cmp    eax,0x80
c000b62a:	76 10                	jbe    c000b63c <VgaText::receiveKey(unsigned char)+0xb8>
c000b62c:	83 ec 0c             	sub    esp,0xc
c000b62f:	68 e7 4c 02 c0       	push   0xc0024ce7
c000b634:	e8 a4 9b 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	50                   	push   eax
c000b63d:	50                   	push   eax
c000b63e:	57                   	push   edi
c000b63f:	53                   	push   ebx
c000b640:	e8 4b 52 ff ff       	call   c0000890 <strcat>
c000b645:	83 c4 0c             	add    esp,0xc
c000b648:	6a 30                	push   0x30
c000b64a:	6a 00                	push   0x0
c000b64c:	57                   	push   edi
c000b64d:	e8 42 50 ff ff       	call   c0000694 <memset>
c000b652:	83 c4 10             	add    esp,0x10
c000b655:	83 ec 0c             	sub    esp,0xc
c000b658:	56                   	push   esi
c000b659:	e8 72 fa ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	83 c4 1c             	add    esp,0x1c
c000b664:	5b                   	pop    ebx
c000b665:	5e                   	pop    esi
c000b666:	5f                   	pop    edi
c000b667:	5d                   	pop    ebp
c000b668:	c3                   	ret    
c000b669:	90                   	nop

c000b66a <VgaText::write(unsigned long long, void*, int*)>:
c000b66a:	55                   	push   ebp
c000b66b:	57                   	push   edi
c000b66c:	56                   	push   esi
c000b66d:	53                   	push   ebx
c000b66e:	83 ec 0c             	sub    esp,0xc
c000b671:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b675:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b679:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b67d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b684:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b687:	39 eb                	cmp    ebx,ebp
c000b689:	74 13                	je     c000b69e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b68b:	43                   	inc    ebx
c000b68c:	50                   	push   eax
c000b68d:	50                   	push   eax
c000b68e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b692:	50                   	push   eax
c000b693:	56                   	push   esi
c000b694:	e8 17 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	eb e9                	jmp    c000b687 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b69e:	83 ec 0c             	sub    esp,0xc
c000b6a1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b6a8:	56                   	push   esi
c000b6a9:	e8 22 fa ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b6ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b6b2:	89 38                	mov    DWORD PTR [eax],edi
c000b6b4:	83 c4 1c             	add    esp,0x1c
c000b6b7:	31 c0                	xor    eax,eax
c000b6b9:	5b                   	pop    ebx
c000b6ba:	5e                   	pop    esi
c000b6bb:	5f                   	pop    edi
c000b6bc:	5d                   	pop    ebp
c000b6bd:	c3                   	ret    

c000b6be <newTerminal(char*)>:
c000b6be:	83 ec 28             	sub    esp,0x28
c000b6c1:	68 b4 01 00 00       	push   0x1b4
c000b6c6:	e8 1c e7 ff ff       	call   c0009de7 <malloc>
c000b6cb:	5a                   	pop    edx
c000b6cc:	59                   	pop    ecx
c000b6cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6d1:	50                   	push   eax
c000b6d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6d6:	e8 2d fd ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c000b6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6df:	83 c4 2c             	add    esp,0x2c
c000b6e2:	c3                   	ret    
c000b6e3:	90                   	nop

c000b6e4 <TSS::TSS()>:
c000b6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b6ef:	90                   	nop
c000b6f0:	c3                   	ret    
c000b6f1:	90                   	nop
c000b6f2:	66 90                	xchg   ax,ax

c000b6f4 <TSS::setESP(unsigned long)>:
c000b6f4:	55                   	push   ebp
c000b6f5:	89 e5                	mov    ebp,esp
c000b6f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b700:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b703:	90                   	nop
c000b704:	5d                   	pop    ebp
c000b705:	c3                   	ret    
c000b706:	66 90                	xchg   ax,ax

c000b708 <TSS::flush()>:
c000b708:	55                   	push   ebp
c000b709:	89 e5                	mov    ebp,esp
c000b70b:	83 ec 10             	sub    esp,0x10
c000b70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b711:	8b 00                	mov    eax,DWORD PTR [eax]
c000b713:	83 c8 03             	or     eax,0x3
c000b716:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b71a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b71e:	66 89 d0             	mov    ax,dx
c000b721:	0f 00 d8             	ltr    ax
c000b724:	90                   	nop
c000b725:	c9                   	leave  
c000b726:	c3                   	ret    
c000b727:	90                   	nop

c000b728 <TSS::setup(unsigned long, unsigned long)>:
c000b728:	55                   	push   ebp
c000b729:	89 e5                	mov    ebp,esp
c000b72b:	83 ec 18             	sub    esp,0x18
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	6a 68                	push   0x68
c000b733:	e8 af e6 ff ff       	call   c0009de7 <malloc>
c000b738:	83 c4 10             	add    esp,0x10
c000b73b:	89 c2                	mov    edx,eax
c000b73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b740:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b749:	83 ec 04             	sub    esp,0x4
c000b74c:	6a 68                	push   0x68
c000b74e:	6a 00                	push   0x0
c000b750:	50                   	push   eax
c000b751:	e8 3e 4f ff ff       	call   c0000694 <memset>
c000b756:	83 c4 10             	add    esp,0x10
c000b759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b75c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b75f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b76b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b77a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b783:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b78c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b79b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7a7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7b3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7bf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b7ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b7da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7e3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7f0:	0f 20 da             	mov    edx,cr3
c000b7f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b7f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b7f9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b802:	83 ec 08             	sub    esp,0x8
c000b805:	50                   	push   eax
c000b806:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b809:	50                   	push   eax
c000b80a:	e8 bf dd ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	83 ec 08             	sub    esp,0x8
c000b815:	6a 68                	push   0x68
c000b817:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b81a:	50                   	push   eax
c000b81b:	e8 ca dd ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c000b820:	83 c4 10             	add    esp,0x10
c000b823:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b827:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b82a:	83 e0 0f             	and    eax,0xf
c000b82d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b830:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b833:	83 c8 40             	or     eax,0x40
c000b836:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b839:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000b83e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b844:	05 78 01 00 00       	add    eax,0x178
c000b849:	83 ec 04             	sub    esp,0x4
c000b84c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b84f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b852:	50                   	push   eax
c000b853:	e8 c6 dd ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	89 c2                	mov    edx,eax
c000b85d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b860:	89 10                	mov    DWORD PTR [eax],edx
c000b862:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000b867:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b86d:	05 78 01 00 00       	add    eax,0x178
c000b872:	83 ec 0c             	sub    esp,0xc
c000b875:	50                   	push   eax
c000b876:	e8 cd dd ff ff       	call   c0009648 <GDT::flush()>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b881:	8b 00                	mov    eax,DWORD PTR [eax]
c000b883:	c9                   	leave  
c000b884:	c3                   	ret    
c000b885:	90                   	nop

c000b886 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b88a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b88e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b891:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b896:	75 08                	jne    c000b8a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b898:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b89e:	eb 38                	jmp    c000b8d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b8a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b8a5:	75 17                	jne    c000b8be <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b8a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8bb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b8be:	89 c1                	mov    ecx,eax
c000b8c0:	83 e1 fd             	and    ecx,0xfffffffd
c000b8c3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b8c9:	74 cd                	je     c000b898 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8cb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8d0:	83 e0 ef             	and    eax,0xffffffef
c000b8d3:	83 f8 08             	cmp    eax,0x8
c000b8d6:	76 c0                	jbe    c000b898 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8d8:	31 c0                	xor    eax,eax
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <ReservedFilename::isAtty()>:
c000b8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b8e3:	31 c0                	xor    eax,eax
c000b8e5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b8eb:	74 09                	je     c000b8f6 <ReservedFilename::isAtty()+0x1a>
c000b8ed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b8f3:	0f 94 c0             	sete   al
c000b8f6:	c3                   	ret    
c000b8f7:	90                   	nop

c000b8f8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b903:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b907:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b90c:	75 08                	jne    c000b916 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b90e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b914:	eb 3d                	jmp    c000b953 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b916:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b91b:	75 17                	jne    c000b934 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b91d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b922:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b925:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b92b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b92d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b931:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b934:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b939:	75 04                	jne    c000b93f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b93b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b93d:	eb 14                	jmp    c000b953 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b93f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b944:	74 c8                	je     c000b90e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b946:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b94b:	83 e0 ef             	and    eax,0xffffffef
c000b94e:	83 f8 08             	cmp    eax,0x8
c000b951:	76 bb                	jbe    c000b90e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b953:	31 c0                	xor    eax,eax
c000b955:	c3                   	ret    

c000b956 <UnixFile::getFileDescriptor()>:
c000b956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b95d:	c3                   	ret    

c000b95e <UnixFile::UnixFile(int)>:
c000b95e:	53                   	push   ebx
c000b95f:	83 ec 28             	sub    esp,0x28
c000b962:	ba 04 4e 02 c0       	mov    edx,0xc0024e04
c000b967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b96b:	89 10                	mov    DWORD PTR [eax],edx
c000b96d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b975:	0f 8f 8c 01 00 00    	jg     c000bb07 <UnixFile::UnixFile(int)+0x1a9>
c000b97b:	a1 40 80 02 c0       	mov    eax,ds:0xc0028040
c000b980:	8d 50 01             	lea    edx,[eax+0x1]
c000b983:	89 15 40 80 02 c0    	mov    DWORD PTR ds:0xc0028040,edx
c000b989:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b98d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b990:	83 ec 08             	sub    esp,0x8
c000b993:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b997:	68 18 8d 02 c0       	push   0xc0028d18
c000b99c:	e8 17 79 01 00       	call   c00232b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	a0 14 8d 02 c0       	mov    al,ds:0xc0028d14
c000b9a9:	83 f0 01             	xor    eax,0x1
c000b9ac:	84 c0                	test   al,al
c000b9ae:	0f 84 54 01 00 00    	je     c000bb08 <UnixFile::UnixFile(int)+0x1aa>
c000b9b4:	c6 05 14 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d14,0x1
c000b9bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b9c3:	83 ec 0c             	sub    esp,0xc
c000b9c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9ca:	e8 18 e4 ff ff       	call   c0009de7 <malloc>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	89 c3                	mov    ebx,eax
c000b9d4:	83 ec 08             	sub    esp,0x8
c000b9d7:	68 03 ff ff 0f       	push   0xfffff03
c000b9dc:	53                   	push   ebx
c000b9dd:	e8 2c 01 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000b9e2:	83 c4 10             	add    esp,0x10
c000b9e5:	89 1d 0c 8d 02 c0    	mov    DWORD PTR ds:0xc0028d0c,ebx
c000b9eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b9f3:	83 ec 0c             	sub    esp,0xc
c000b9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fa:	e8 e8 e3 ff ff       	call   c0009de7 <malloc>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	89 c3                	mov    ebx,eax
c000ba04:	83 ec 08             	sub    esp,0x8
c000ba07:	68 01 ff ff 0f       	push   0xfffff01
c000ba0c:	53                   	push   ebx
c000ba0d:	e8 fc 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba12:	83 c4 10             	add    esp,0x10
c000ba15:	89 1d 10 8d 02 c0    	mov    DWORD PTR ds:0xc0028d10,ebx
c000ba1b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000ba23:	83 ec 0c             	sub    esp,0xc
c000ba26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba2a:	e8 b8 e3 ff ff       	call   c0009de7 <malloc>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	89 c3                	mov    ebx,eax
c000ba34:	83 ec 08             	sub    esp,0x8
c000ba37:	68 00 ff ff 0f       	push   0xfffff00
c000ba3c:	53                   	push   ebx
c000ba3d:	e8 cc 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba42:	83 c4 10             	add    esp,0x10
c000ba45:	89 1d 04 8d 02 c0    	mov    DWORD PTR ds:0xc0028d04,ebx
c000ba4b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba5a:	e8 88 e3 ff ff       	call   c0009de7 <malloc>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	89 c3                	mov    ebx,eax
c000ba64:	83 ec 08             	sub    esp,0x8
c000ba67:	68 02 ff ff 0f       	push   0xfffff02
c000ba6c:	53                   	push   ebx
c000ba6d:	e8 9c 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	89 1d 08 8d 02 c0    	mov    DWORD PTR ds:0xc0028d08,ebx
c000ba7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba83:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba88:	7f 7e                	jg     c000bb08 <UnixFile::UnixFile(int)+0x1aa>
c000ba8a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba92:	83 ec 0c             	sub    esp,0xc
c000ba95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba99:	e8 49 e3 ff ff       	call   c0009de7 <malloc>
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	89 c3                	mov    ebx,eax
c000baa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baa7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000baac:	83 ec 08             	sub    esp,0x8
c000baaf:	50                   	push   eax
c000bab0:	53                   	push   ebx
c000bab1:	e8 58 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000babd:	89 1c 85 e0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7320],ebx
c000bac4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000bacc:	83 ec 0c             	sub    esp,0xc
c000bacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad3:	e8 0f e3 ff ff       	call   c0009de7 <malloc>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 c3                	mov    ebx,eax
c000badd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bae1:	05 20 ff ff 0f       	add    eax,0xfffff20
c000bae6:	83 ec 08             	sub    esp,0x8
c000bae9:	50                   	push   eax
c000baea:	53                   	push   ebx
c000baeb:	e8 1e 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000baf0:	83 c4 10             	add    esp,0x10
c000baf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baf7:	89 1c 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],ebx
c000bafe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bb02:	e9 7c ff ff ff       	jmp    c000ba83 <UnixFile::UnixFile(int)+0x125>
c000bb07:	90                   	nop
c000bb08:	83 c4 28             	add    esp,0x28
c000bb0b:	5b                   	pop    ebx
c000bb0c:	c3                   	ret    
c000bb0d:	90                   	nop

c000bb0e <ReservedFilename::ReservedFilename(int)>:
c000bb0e:	83 ec 0c             	sub    esp,0xc
c000bb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb15:	83 ec 08             	sub    esp,0x8
c000bb18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb1c:	50                   	push   eax
c000bb1d:	e8 3c fe ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	ba 20 4e 02 c0       	mov    edx,0xc0024e20
c000bb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2e:	89 10                	mov    DWORD PTR [eax],edx
c000bb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bb3b:	90                   	nop
c000bb3c:	83 c4 0c             	add    esp,0xc
c000bb3f:	c3                   	ret    

c000bb40 <UnixFile::~UnixFile()>:
c000bb40:	83 ec 1c             	sub    esp,0x1c
c000bb43:	ba 04 4e 02 c0       	mov    edx,0xc0024e04
c000bb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4c:	89 10                	mov    DWORD PTR [eax],edx
c000bb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb55:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bb5a:	7f 73                	jg     c000bbcf <UnixFile::~UnixFile()+0x8f>
c000bb5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bb64:	83 ec 0c             	sub    esp,0xc
c000bb67:	68 18 8d 02 c0       	push   0xc0028d18
c000bb6c:	e8 1b 78 01 00       	call   c002338c <LinkedList<UnixFile>::getFirstElement()>
c000bb71:	83 c4 10             	add    esp,0x10
c000bb74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	68 18 8d 02 c0       	push   0xc0028d18
c000bb80:	e8 0f 78 01 00       	call   c0023394 <LinkedList<UnixFile>::removeFirst()>
c000bb85:	83 c4 10             	add    esp,0x10
c000bb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb90:	74 40                	je     c000bbd2 <UnixFile::~UnixFile()+0x92>
c000bb92:	83 ec 08             	sub    esp,0x8
c000bb95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb99:	68 18 8d 02 c0       	push   0xc0028d18
c000bb9e:	e8 15 77 01 00       	call   c00232b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbaa:	8d 50 01             	lea    edx,[eax+0x1]
c000bbad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbb1:	3d 88 13 00 00       	cmp    eax,0x1388
c000bbb6:	0f 94 c0             	sete   al
c000bbb9:	84 c0                	test   al,al
c000bbbb:	74 a7                	je     c000bb64 <UnixFile::~UnixFile()+0x24>
c000bbbd:	83 ec 0c             	sub    esp,0xc
c000bbc0:	68 dc 4d 02 c0       	push   0xc0024ddc
c000bbc5:	e8 13 96 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	eb 95                	jmp    c000bb64 <UnixFile::~UnixFile()+0x24>
c000bbcf:	90                   	nop
c000bbd0:	eb 01                	jmp    c000bbd3 <UnixFile::~UnixFile()+0x93>
c000bbd2:	90                   	nop
c000bbd3:	90                   	nop
c000bbd4:	83 c4 1c             	add    esp,0x1c
c000bbd7:	c3                   	ret    

c000bbd8 <UnixFile::~UnixFile()>:
c000bbd8:	83 ec 0c             	sub    esp,0xc
c000bbdb:	83 ec 0c             	sub    esp,0xc
c000bbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe2:	e8 59 ff ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000bbe7:	83 c4 10             	add    esp,0x10
c000bbea:	83 ec 08             	sub    esp,0x8
c000bbed:	6a 0c                	push   0xc
c000bbef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf3:	e8 22 14 00 00       	call   c000d01a <operator delete(void*, unsigned long)>
c000bbf8:	83 c4 10             	add    esp,0x10
c000bbfb:	83 c4 0c             	add    esp,0xc
c000bbfe:	c3                   	ret    
c000bbff:	90                   	nop

c000bc00 <ReservedFilename::~ReservedFilename()>:
c000bc00:	83 ec 0c             	sub    esp,0xc
c000bc03:	ba 20 4e 02 c0       	mov    edx,0xc0024e20
c000bc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc0c:	89 10                	mov    DWORD PTR [eax],edx
c000bc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc12:	83 ec 0c             	sub    esp,0xc
c000bc15:	50                   	push   eax
c000bc16:	e8 25 ff ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000bc1b:	83 c4 10             	add    esp,0x10
c000bc1e:	90                   	nop
c000bc1f:	83 c4 0c             	add    esp,0xc
c000bc22:	c3                   	ret    
c000bc23:	90                   	nop

c000bc24 <ReservedFilename::~ReservedFilename()>:
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	83 ec 0c             	sub    esp,0xc
c000bc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc2e:	e8 cd ff ff ff       	call   c000bc00 <ReservedFilename::~ReservedFilename()>
c000bc33:	83 c4 10             	add    esp,0x10
c000bc36:	83 ec 08             	sub    esp,0x8
c000bc39:	6a 0c                	push   0xc
c000bc3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3f:	e8 d6 13 00 00       	call   c000d01a <operator delete(void*, unsigned long)>
c000bc44:	83 c4 10             	add    esp,0x10
c000bc47:	83 c4 0c             	add    esp,0xc
c000bc4a:	c3                   	ret    

c000bc4b <getFromFileDescriptor(int)>:
c000bc4b:	53                   	push   ebx
c000bc4c:	83 ec 08             	sub    esp,0x8
c000bc4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc53:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bc59:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bc5f:	7f 2c                	jg     c000bc8d <getFromFileDescriptor(int)+0x42>
c000bc61:	83 ec 0c             	sub    esp,0xc
c000bc64:	68 18 8d 02 c0       	push   0xc0028d18
c000bc69:	e8 1e 77 01 00       	call   c002338c <LinkedList<UnixFile>::getFirstElement()>
c000bc6e:	83 c4 10             	add    esp,0x10
c000bc71:	85 c0                	test   eax,eax
c000bc73:	75 04                	jne    c000bc79 <getFromFileDescriptor(int)+0x2e>
c000bc75:	31 c0                	xor    eax,eax
c000bc77:	eb 6e                	jmp    c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc79:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bc7c:	74 69                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc7e:	52                   	push   edx
c000bc7f:	52                   	push   edx
c000bc80:	50                   	push   eax
c000bc81:	68 18 8d 02 c0       	push   0xc0028d18
c000bc86:	e8 ab 77 01 00       	call   c0023436 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc8b:	eb e1                	jmp    c000bc6e <getFromFileDescriptor(int)+0x23>
c000bc8d:	a1 0c 8d 02 c0       	mov    eax,ds:0xc0028d0c
c000bc92:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc98:	74 4d                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc9a:	a1 10 8d 02 c0       	mov    eax,ds:0xc0028d10
c000bc9f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bca5:	74 40                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bca7:	a1 08 8d 02 c0       	mov    eax,ds:0xc0028d08
c000bcac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bcb2:	74 33                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcb4:	a1 04 8d 02 c0       	mov    eax,ds:0xc0028d04
c000bcb9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bcbf:	74 26                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcc1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bcc7:	83 f8 08             	cmp    eax,0x8
c000bcca:	77 09                	ja     c000bcd5 <getFromFileDescriptor(int)+0x8a>
c000bccc:	8b 04 85 e0 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7320]
c000bcd3:	eb 12                	jmp    c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcd5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bcdb:	83 fb 08             	cmp    ebx,0x8
c000bcde:	77 95                	ja     c000bc75 <getFromFileDescriptor(int)+0x2a>
c000bce0:	8b 04 9d a0 8c 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7360]
c000bce7:	83 c4 08             	add    esp,0x8
c000bcea:	5b                   	pop    ebx
c000bceb:	c3                   	ret    

c000bcec <__static_initialization_and_destruction_0(int, int)>:
c000bcec:	83 ec 0c             	sub    esp,0xc
c000bcef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bcf4:	75 34                	jne    c000bd2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bcf6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bcfe:	75 2a                	jne    c000bd2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bd00:	83 ec 0c             	sub    esp,0xc
c000bd03:	68 18 8d 02 c0       	push   0xc0028d18
c000bd08:	e8 69 75 01 00       	call   c0023276 <LinkedList<UnixFile>::LinkedList()>
c000bd0d:	83 c4 10             	add    esp,0x10
c000bd10:	83 ec 04             	sub    esp,0x4
c000bd13:	68 78 7e 02 c0       	push   0xc0027e78
c000bd18:	68 18 8d 02 c0       	push   0xc0028d18
c000bd1d:	68 74 32 02 c0       	push   0xc0023274
c000bd22:	e8 6d 12 00 00       	call   c000cf94 <__cxa_atexit>
c000bd27:	83 c4 10             	add    esp,0x10
c000bd2a:	90                   	nop
c000bd2b:	83 c4 0c             	add    esp,0xc
c000bd2e:	c3                   	ret    

c000bd2f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bd2f:	83 ec 0c             	sub    esp,0xc
c000bd32:	83 ec 08             	sub    esp,0x8
c000bd35:	68 ff ff 00 00       	push   0xffff
c000bd3a:	6a 01                	push   0x1
c000bd3c:	e8 ab ff ff ff       	call   c000bcec <__static_initialization_and_destruction_0(int, int)>
c000bd41:	83 c4 10             	add    esp,0x10
c000bd44:	83 c4 0c             	add    esp,0xc
c000bd47:	c3                   	ret    

c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bd48:	53                   	push   ebx
c000bd49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bd51:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bd57:	89 c8                	mov    eax,ecx
c000bd59:	d1 e8                	shr    eax,1
c000bd5b:	03 05 48 80 02 c0    	add    eax,DWORD PTR ds:0xc0028048
c000bd61:	83 e1 01             	and    ecx,0x1
c000bd64:	8a 10                	mov    dl,BYTE PTR [eax]
c000bd66:	75 09                	jne    c000bd71 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bd68:	83 e2 f0             	and    edx,0xfffffff0
c000bd6b:	09 da                	or     edx,ebx
c000bd6d:	88 10                	mov    BYTE PTR [eax],dl
c000bd6f:	5b                   	pop    ebx
c000bd70:	c3                   	ret    
c000bd71:	c1 e3 04             	shl    ebx,0x4
c000bd74:	83 e2 0f             	and    edx,0xf
c000bd77:	09 da                	or     edx,ebx
c000bd79:	88 10                	mov    BYTE PTR [eax],dl
c000bd7b:	5b                   	pop    ebx
c000bd7c:	c3                   	ret    

c000bd7d <Virt::getPageState(unsigned long)>:
c000bd7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd81:	8b 0d 48 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028048
c000bd87:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd8d:	89 d0                	mov    eax,edx
c000bd8f:	d1 e8                	shr    eax,1
c000bd91:	83 e2 01             	and    edx,0x1
c000bd94:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd97:	75 04                	jne    c000bd9d <Virt::getPageState(unsigned long)+0x20>
c000bd99:	83 e0 0f             	and    eax,0xf
c000bd9c:	c3                   	ret    
c000bd9d:	c0 e8 04             	shr    al,0x4
c000bda0:	c3                   	ret    

c000bda1 <Virt::allocateKernelVirtualPages(int)>:
c000bda1:	55                   	push   ebp
c000bda2:	31 ed                	xor    ebp,ebp
c000bda4:	57                   	push   edi
c000bda5:	56                   	push   esi
c000bda6:	53                   	push   ebx
c000bda7:	31 db                	xor    ebx,ebx
c000bda9:	83 ec 1c             	sub    esp,0x1c
c000bdac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdb0:	8b 3d 44 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028044
c000bdb6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bdbb:	57                   	push   edi
c000bdbc:	e8 bc ff ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000bdc1:	5a                   	pop    edx
c000bdc2:	84 c0                	test   al,al
c000bdc4:	75 3a                	jne    c000be00 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bdc6:	85 db                	test   ebx,ebx
c000bdc8:	75 02                	jne    c000bdcc <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bdca:	89 fd                	mov    ebp,edi
c000bdcc:	43                   	inc    ebx
c000bdcd:	39 f3                	cmp    ebx,esi
c000bdcf:	74 5a                	je     c000be2b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bdd1:	47                   	inc    edi
c000bdd2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bdd8:	76 31                	jbe    c000be0b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bdda:	c7 05 44 80 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0028044,0xc8000
c000bde4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bde9:	75 28                	jne    c000be13 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bdeb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bdf0:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bdf5:	57                   	push   edi
c000bdf6:	e8 82 ff ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000bdfb:	5a                   	pop    edx
c000bdfc:	84 c0                	test   al,al
c000bdfe:	74 c6                	je     c000bdc6 <Virt::allocateKernelVirtualPages(int)+0x25>
c000be00:	31 db                	xor    ebx,ebx
c000be02:	47                   	inc    edi
c000be03:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000be09:	77 cf                	ja     c000bdda <Virt::allocateKernelVirtualPages(int)+0x39>
c000be0b:	89 3d 44 80 02 c0    	mov    DWORD PTR ds:0xc0028044,edi
c000be11:	eb a8                	jmp    c000bdbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be13:	83 ec 0c             	sub    esp,0xc
c000be16:	68 34 4e 02 c0       	push   0xc0024e34
c000be1b:	e8 bd 93 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000be20:	8b 3d 44 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028044
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	eb 90                	jmp    c000bdbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be2b:	89 2d 44 80 02 c0    	mov    DWORD PTR ds:0xc0028044,ebp
c000be31:	4b                   	dec    ebx
c000be32:	74 5f                	je     c000be93 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000be34:	85 f6                	test   esi,esi
c000be36:	74 3d                	je     c000be75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be38:	89 e8                	mov    eax,ebp
c000be3a:	31 db                	xor    ebx,ebx
c000be3c:	8d 7e ff             	lea    edi,[esi-0x1]
c000be3f:	eb 14                	jmp    c000be55 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000be41:	6a 01                	push   0x1
c000be43:	43                   	inc    ebx
c000be44:	50                   	push   eax
c000be45:	e8 fe fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be4a:	58                   	pop    eax
c000be4b:	39 f3                	cmp    ebx,esi
c000be4d:	5a                   	pop    edx
c000be4e:	74 25                	je     c000be75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be50:	a1 44 80 02 c0       	mov    eax,ds:0xc0028044
c000be55:	8d 50 01             	lea    edx,[eax+0x1]
c000be58:	85 db                	test   ebx,ebx
c000be5a:	89 15 44 80 02 c0    	mov    DWORD PTR ds:0xc0028044,edx
c000be60:	74 20                	je     c000be82 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000be62:	39 df                	cmp    edi,ebx
c000be64:	75 db                	jne    c000be41 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000be66:	6a 03                	push   0x3
c000be68:	43                   	inc    ebx
c000be69:	50                   	push   eax
c000be6a:	e8 d9 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be6f:	59                   	pop    ecx
c000be70:	39 f3                	cmp    ebx,esi
c000be72:	58                   	pop    eax
c000be73:	75 db                	jne    c000be50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be75:	83 c4 1c             	add    esp,0x1c
c000be78:	89 e8                	mov    eax,ebp
c000be7a:	5b                   	pop    ebx
c000be7b:	c1 e0 0c             	shl    eax,0xc
c000be7e:	5e                   	pop    esi
c000be7f:	5f                   	pop    edi
c000be80:	5d                   	pop    ebp
c000be81:	c3                   	ret    
c000be82:	6a 02                	push   0x2
c000be84:	bb 01 00 00 00       	mov    ebx,0x1
c000be89:	50                   	push   eax
c000be8a:	e8 b9 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be8f:	58                   	pop    eax
c000be90:	5a                   	pop    edx
c000be91:	eb bd                	jmp    c000be50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be93:	6a 04                	push   0x4
c000be95:	8d 45 01             	lea    eax,[ebp+0x1]
c000be98:	55                   	push   ebp
c000be99:	a3 44 80 02 c0       	mov    ds:0xc0028044,eax
c000be9e:	e8 a5 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bea3:	59                   	pop    ecx
c000bea4:	89 e8                	mov    eax,ebp
c000bea6:	5b                   	pop    ebx
c000bea7:	c1 e0 0c             	shl    eax,0xc
c000beaa:	83 c4 1c             	add    esp,0x1c
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	5f                   	pop    edi
c000beb0:	5d                   	pop    ebp
c000beb1:	c3                   	ret    

c000beb2 <Virt::freeSwapfilePage(unsigned long)>:
c000beb2:	53                   	push   ebx
c000beb3:	8b 15 30 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d30
c000beb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bebd:	b8 01 00 00 00       	mov    eax,0x1
c000bec2:	89 cb                	mov    ebx,ecx
c000bec4:	d3 e0                	shl    eax,cl
c000bec6:	c1 eb 05             	shr    ebx,0x5
c000bec9:	f7 d0                	not    eax
c000becb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bece:	5b                   	pop    ebx
c000becf:	c3                   	ret    

c000bed0 <Virt::swapIDToSector(unsigned long)>:
c000bed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bed4:	0f af 05 4c 80 02 c0 	imul   eax,DWORD PTR ds:0xc002804c
c000bedb:	03 05 54 80 02 c0    	add    eax,DWORD PTR ds:0xc0028054
c000bee1:	c3                   	ret    

c000bee2 <Virt::allocateSwapfilePage()>:
c000bee2:	55                   	push   ebp
c000bee3:	31 d2                	xor    edx,edx
c000bee5:	57                   	push   edi
c000bee6:	56                   	push   esi
c000bee7:	53                   	push   ebx
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	8b 0d 4c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002804c
c000bef1:	a1 50 80 02 c0       	mov    eax,ds:0xc0028050
c000bef6:	f7 f1                	div    ecx
c000bef8:	39 0d 50 80 02 c0    	cmp    DWORD PTR ds:0xc0028050,ecx
c000befe:	72 2d                	jb     c000bf2d <Virt::allocateSwapfilePage()+0x4b>
c000bf00:	8b 35 30 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d30
c000bf06:	8b 16                	mov    edx,DWORD PTR [esi]
c000bf08:	f6 c2 01             	test   dl,0x1
c000bf0b:	74 3c                	je     c000bf49 <Virt::allocateSwapfilePage()+0x67>
c000bf0d:	31 c9                	xor    ecx,ecx
c000bf0f:	bf 01 00 00 00       	mov    edi,0x1
c000bf14:	eb 12                	jmp    c000bf28 <Virt::allocateSwapfilePage()+0x46>
c000bf16:	89 fd                	mov    ebp,edi
c000bf18:	89 ca                	mov    edx,ecx
c000bf1a:	d3 e5                	shl    ebp,cl
c000bf1c:	c1 ea 05             	shr    edx,0x5
c000bf1f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bf22:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf24:	85 ea                	test   edx,ebp
c000bf26:	74 2a                	je     c000bf52 <Virt::allocateSwapfilePage()+0x70>
c000bf28:	41                   	inc    ecx
c000bf29:	39 c8                	cmp    eax,ecx
c000bf2b:	77 e9                	ja     c000bf16 <Virt::allocateSwapfilePage()+0x34>
c000bf2d:	83 ec 0c             	sub    esp,0xc
c000bf30:	68 ec 4f 02 c0       	push   0xc0024fec
c000bf35:	e8 a3 92 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	31 c9                	xor    ecx,ecx
c000bf3f:	83 c4 0c             	add    esp,0xc
c000bf42:	89 c8                	mov    eax,ecx
c000bf44:	5b                   	pop    ebx
c000bf45:	5e                   	pop    esi
c000bf46:	5f                   	pop    edi
c000bf47:	5d                   	pop    ebp
c000bf48:	c3                   	ret    
c000bf49:	89 f3                	mov    ebx,esi
c000bf4b:	bd 01 00 00 00       	mov    ebp,0x1
c000bf50:	31 c9                	xor    ecx,ecx
c000bf52:	09 ea                	or     edx,ebp
c000bf54:	89 c8                	mov    eax,ecx
c000bf56:	89 13                	mov    DWORD PTR [ebx],edx
c000bf58:	83 c4 0c             	add    esp,0xc
c000bf5b:	5b                   	pop    ebx
c000bf5c:	5e                   	pop    esi
c000bf5d:	5f                   	pop    edi
c000bf5e:	5d                   	pop    ebp
c000bf5f:	c3                   	ret    

c000bf60 <Virt::virtualMemorySetup()>:
c000bf60:	53                   	push   ebx
c000bf61:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf66:	6a 0f                	push   0xf
c000bf68:	53                   	push   ebx
c000bf69:	43                   	inc    ebx
c000bf6a:	e8 d9 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf6f:	58                   	pop    eax
c000bf70:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf76:	5a                   	pop    edx
c000bf77:	75 ed                	jne    c000bf66 <Virt::virtualMemorySetup()+0x6>
c000bf79:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf7e:	6a 00                	push   0x0
c000bf80:	53                   	push   ebx
c000bf81:	43                   	inc    ebx
c000bf82:	e8 c1 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf87:	59                   	pop    ecx
c000bf88:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf8e:	58                   	pop    eax
c000bf8f:	75 ed                	jne    c000bf7e <Virt::virtualMemorySetup()+0x1e>
c000bf91:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf96:	6a 0f                	push   0xf
c000bf98:	53                   	push   ebx
c000bf99:	43                   	inc    ebx
c000bf9a:	e8 a9 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf9f:	58                   	pop    eax
c000bfa0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bfa6:	5a                   	pop    edx
c000bfa7:	75 ed                	jne    c000bf96 <Virt::virtualMemorySetup()+0x36>
c000bfa9:	5b                   	pop    ebx
c000bfaa:	c3                   	ret    

c000bfab <Virt::setupPageSwapping(int)>:
c000bfab:	53                   	push   ebx
c000bfac:	83 ec 0c             	sub    esp,0xc
c000bfaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bfb3:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000bfb8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bfbe:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfc0:	53                   	push   ebx
c000bfc1:	c1 e3 0b             	shl    ebx,0xb
c000bfc4:	68 03 50 02 c0       	push   0xc0025003
c000bfc9:	50                   	push   eax
c000bfca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bfcd:	89 1d 50 80 02 c0    	mov    DWORD PTR ds:0xc0028050,ebx
c000bfd3:	c6 05 58 80 02 c0 43 	mov    BYTE PTR ds:0xc0028058,0x43
c000bfda:	c1 eb 08             	shr    ebx,0x8
c000bfdd:	a3 54 80 02 c0       	mov    ds:0xc0028054,eax
c000bfe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bfe5:	c7 05 4c 80 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002804c,0x8
c000bfef:	e8 f3 dd ff ff       	call   c0009de7 <malloc>
c000bff4:	83 c4 0c             	add    esp,0xc
c000bff7:	89 c1                	mov    ecx,eax
c000bff9:	a3 30 8d 02 c0       	mov    ds:0xc0028d30,eax
c000bffe:	31 d2                	xor    edx,edx
c000c000:	a1 50 80 02 c0       	mov    eax,ds:0xc0028050
c000c005:	f7 35 4c 80 02 c0    	div    DWORD PTR ds:0xc002804c
c000c00b:	c1 e8 05             	shr    eax,0x5
c000c00e:	50                   	push   eax
c000c00f:	6a 00                	push   0x0
c000c011:	51                   	push   ecx
c000c012:	e8 7d 46 ff ff       	call   c0000694 <memset>
c000c017:	83 c4 18             	add    esp,0x18
c000c01a:	5b                   	pop    ebx
c000c01b:	c3                   	ret    

c000c01c <VAS::VAS(VAS*)>:
c000c01c:	83 ec 0c             	sub    esp,0xc
c000c01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c023:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c035:	83 ec 0c             	sub    esp,0xc
c000c038:	68 54 4e 02 c0       	push   0xc0024e54
c000c03d:	e8 9b 91 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000c042:	83 c4 10             	add    esp,0x10
c000c045:	90                   	nop
c000c046:	83 c4 0c             	add    esp,0xc
c000c049:	c3                   	ret    

c000c04a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c04a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c04e:	89 c2                	mov    edx,eax
c000c050:	c1 e8 0a             	shr    eax,0xa
c000c053:	c1 ea 16             	shr    edx,0x16
c000c056:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c05b:	19 c9                	sbb    ecx,ecx
c000c05d:	c1 e2 0c             	shl    edx,0xc
c000c060:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c066:	25 fc 0f 00 00       	and    eax,0xffc
c000c06b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c072:	01 d0                	add    eax,edx
c000c074:	c3                   	ret    
c000c075:	90                   	nop

c000c076 <VAS::getPageTableEntry(unsigned long)>:
c000c076:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c07a:	89 ca                	mov    edx,ecx
c000c07c:	c1 e9 0a             	shr    ecx,0xa
c000c07f:	c1 ea 16             	shr    edx,0x16
c000c082:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c088:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c08e:	c1 e0 0c             	shl    eax,0xc
c000c091:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c094:	c3                   	ret    

c000c095 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c095:	57                   	push   edi
c000c096:	56                   	push   esi
c000c097:	be 01 00 00 00       	mov    esi,0x1
c000c09c:	53                   	push   ebx
c000c09d:	83 ec 10             	sub    esp,0x10
c000c0a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c0a4:	c1 eb 0c             	shr    ebx,0xc
c000c0a7:	eb 3f                	jmp    c000c0e8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c0a9:	83 ec 08             	sub    esp,0x8
c000c0ac:	57                   	push   edi
c000c0ad:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c000c0b3:	e8 be ff ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0bd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0c1:	f6 c4 04             	test   ah,0x4
c000c0c4:	75 5f                	jne    c000c125 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c0c6:	80 fa 04             	cmp    dl,0x4
c000c0c9:	74 78                	je     c000c143 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c0cb:	80 fa 02             	cmp    dl,0x2
c000c0ce:	0f 84 88 00 00 00    	je     c000c15c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c0d4:	80 fa 03             	cmp    dl,0x3
c000c0d7:	0f 84 ad 00 00 00    	je     c000c18a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c0dd:	fe ca                	dec    dl
c000c0df:	0f 84 92 00 00 00    	je     c000c177 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c0e5:	43                   	inc    ebx
c000c0e6:	31 f6                	xor    esi,esi
c000c0e8:	53                   	push   ebx
c000c0e9:	89 df                	mov    edi,ebx
c000c0eb:	e8 8d fc ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000c0f0:	c1 e7 0c             	shl    edi,0xc
c000c0f3:	59                   	pop    ecx
c000c0f4:	84 c0                	test   al,al
c000c0f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0fa:	75 ad                	jne    c000c0a9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0fc:	83 ec 0c             	sub    esp,0xc
c000c0ff:	68 1a 50 02 c0       	push   0xc002501a
c000c104:	e8 d4 90 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000c109:	58                   	pop    eax
c000c10a:	5a                   	pop    edx
c000c10b:	57                   	push   edi
c000c10c:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c000c112:	e8 5f ff ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c117:	83 c4 10             	add    esp,0x10
c000c11a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c11c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c120:	f6 c4 04             	test   ah,0x4
c000c123:	74 c0                	je     c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c125:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c129:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	50                   	push   eax
c000c132:	e8 e4 e2 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c137:	83 c4 10             	add    esp,0x10
c000c13a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c13e:	80 fa 04             	cmp    dl,0x4
c000c141:	75 88                	jne    c000c0cb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c143:	89 f0                	mov    eax,esi
c000c145:	84 c0                	test   al,al
c000c147:	75 47                	jne    c000c190 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c149:	c7 44 24 20 78 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024e78
c000c151:	83 c4 10             	add    esp,0x10
c000c154:	5b                   	pop    ebx
c000c155:	5e                   	pop    esi
c000c156:	5f                   	pop    edi
c000c157:	e9 81 90 00 00       	jmp    c00151dd <Krnl::panic(char const*)>
c000c15c:	89 f0                	mov    eax,esi
c000c15e:	84 c0                	test   al,al
c000c160:	75 15                	jne    c000c177 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c162:	83 ec 0c             	sub    esp,0xc
c000c165:	68 36 50 02 c0       	push   0xc0025036
c000c16a:	e8 6e 90 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	e9 6e ff ff ff       	jmp    c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c177:	83 ec 08             	sub    esp,0x8
c000c17a:	6a 00                	push   0x0
c000c17c:	53                   	push   ebx
c000c17d:	e8 c6 fb ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	e9 5b ff ff ff       	jmp    c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c18a:	89 f0                	mov    eax,esi
c000c18c:	84 c0                	test   al,al
c000c18e:	75 15                	jne    c000c1a5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c190:	83 ec 08             	sub    esp,0x8
c000c193:	6a 00                	push   0x0
c000c195:	53                   	push   ebx
c000c196:	e8 ad fb ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c19b:	83 c4 10             	add    esp,0x10
c000c19e:	83 c4 10             	add    esp,0x10
c000c1a1:	5b                   	pop    ebx
c000c1a2:	5e                   	pop    esi
c000c1a3:	5f                   	pop    edi
c000c1a4:	c3                   	ret    
c000c1a5:	c7 44 24 20 52 50 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025052
c000c1ad:	83 c4 10             	add    esp,0x10
c000c1b0:	5b                   	pop    ebx
c000c1b1:	5e                   	pop    esi
c000c1b2:	5f                   	pop    edi
c000c1b3:	e9 25 90 00 00       	jmp    c00151dd <Krnl::panic(char const*)>

c000c1b8 <VAS::freeAllocatedPages(unsigned long)>:
c000c1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c1bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1c0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c1c4:	74 09                	je     c000c1cf <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c1c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c1ca:	e9 c6 fe ff ff       	jmp    c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1cf:	c7 44 24 04 9c 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e9c
c000c1d7:	e9 1f 0f 00 00       	jmp    c000d0fb <Dbg::kprintf(char const*, ...)>

c000c1dc <VAS::virtualToPhysical(unsigned long)>:
c000c1dc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1e4:	e8 8d fe ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c1e9:	5a                   	pop    edx
c000c1ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1ec:	59                   	pop    ecx
c000c1ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1f2:	c3                   	ret    
c000c1f3:	90                   	nop

c000c1f4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1f4:	55                   	push   ebp
c000c1f5:	57                   	push   edi
c000c1f6:	56                   	push   esi
c000c1f7:	53                   	push   ebx
c000c1f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1fc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c200:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c204:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c208:	85 db                	test   ebx,ebx
c000c20a:	7e 22                	jle    c000c22e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c20c:	c1 e3 0c             	shl    ebx,0xc
c000c20f:	01 f3                	add    ebx,esi
c000c211:	56                   	push   esi
c000c212:	81 c6 00 10 00 00    	add    esi,0x1000
c000c218:	55                   	push   ebp
c000c219:	e8 58 fe ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000c21e:	5a                   	pop    edx
c000c21f:	59                   	pop    ecx
c000c220:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c222:	21 f9                	and    ecx,edi
c000c224:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c228:	39 f3                	cmp    ebx,esi
c000c22a:	89 08                	mov    DWORD PTR [eax],ecx
c000c22c:	75 e3                	jne    c000c211 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c22e:	5b                   	pop    ebx
c000c22f:	5e                   	pop    esi
c000c230:	5f                   	pop    edi
c000c231:	5d                   	pop    ebp
c000c232:	c3                   	ret    
c000c233:	90                   	nop

c000c234 <VAS::setToWriteCombining(unsigned long, int)>:
c000c234:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c239:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c23f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c246:	75 01                	jne    c000c249 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c248:	c3                   	ret    
c000c249:	68 80 00 00 00       	push   0x80
c000c24e:	6a ff                	push   0xffffffff
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c25c:	e8 93 ff ff ff       	call   c000c1f4 <VAS::reflagRange(unsigned long, int, int, int)>
c000c261:	83 c4 14             	add    esp,0x14
c000c264:	c3                   	ret    
c000c265:	90                   	nop

c000c266 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c266:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c26b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c26f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c276:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c279:	19 c0                	sbb    eax,eax
c000c27b:	83 ca 03             	or     edx,0x3
c000c27e:	83 e0 fc             	and    eax,0xfffffffc
c000c281:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c288:	0f 20 d8             	mov    eax,cr3
c000c28b:	0f 22 d8             	mov    cr3,eax
c000c28e:	c3                   	ret    
c000c28f:	90                   	nop

c000c290 <VAS::~VAS()>:
c000c290:	83 ec 2c             	sub    esp,0x2c
c000c293:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c29b:	fa                   	cli    
c000c29c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000c2a1:	40                   	inc    eax
c000c2a2:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000c2a7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2b1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c2bb:	6a 01                	push   0x1
c000c2bd:	50                   	push   eax
c000c2be:	e8 a3 ff ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c000c2c3:	83 c4 0c             	add    esp,0xc
c000c2c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c2ce:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c2d6:	0f 8f d4 00 00 00    	jg     c000c3b0 <VAS::~VAS()+0x120>
c000c2dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2e7:	c1 e2 02             	shl    edx,0x2
c000c2ea:	01 d0                	add    eax,edx
c000c2ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f6:	83 e0 01             	and    eax,0x1
c000c2f9:	0f 84 a8 00 00 00    	je     c000c3a7 <VAS::~VAS()+0x117>
c000c2ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c307:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c30f:	7f 72                	jg     c000c383 <VAS::~VAS()+0xf3>
c000c311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c315:	c1 e0 0a             	shl    eax,0xa
c000c318:	89 c2                	mov    edx,eax
c000c31a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c31e:	01 d0                	add    eax,edx
c000c320:	c1 e0 0c             	shl    eax,0xc
c000c323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c327:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c32c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c32e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c331:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c337:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c33b:	6a 01                	push   0x1
c000c33d:	50                   	push   eax
c000c33e:	e8 07 fd ff ff       	call   c000c04a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c343:	83 c4 0c             	add    esp,0xc
c000c346:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c34a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c34e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c358:	25 01 04 00 00       	and    eax,0x401
c000c35d:	3d 01 04 00 00       	cmp    eax,0x401
c000c362:	75 19                	jne    c000c37d <VAS::~VAS()+0xed>
c000c364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c368:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c36d:	83 ec 0c             	sub    esp,0xc
c000c370:	50                   	push   eax
c000c371:	e8 a5 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c376:	83 c4 10             	add    esp,0x10
c000c379:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c37d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c381:	eb 84                	jmp    c000c307 <VAS::~VAS()+0x77>
c000c383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c387:	25 00 04 00 00       	and    eax,0x400
c000c38c:	74 19                	je     c000c3a7 <VAS::~VAS()+0x117>
c000c38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c392:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c397:	83 ec 0c             	sub    esp,0xc
c000c39a:	50                   	push   eax
c000c39b:	e8 7b e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3a7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c3ab:	e9 1e ff ff ff       	jmp    c000c2ce <VAS::~VAS()+0x3e>
c000c3b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3b7:	83 ec 0c             	sub    esp,0xc
c000c3ba:	50                   	push   eax
c000c3bb:	e8 d5 fc ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c3c0:	83 c4 10             	add    esp,0x10
c000c3c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	50                   	push   eax
c000c3ce:	e8 48 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c3de:	c1 e0 02             	shl    eax,0x2
c000c3e1:	83 ec 08             	sub    esp,0x8
c000c3e4:	50                   	push   eax
c000c3e5:	68 c0 4e 02 c0       	push   0xc0024ec0
c000c3ea:	e8 0c 0d 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000c3ef:	83 c4 10             	add    esp,0x10
c000c3f2:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000c3f7:	48                   	dec    eax
c000c3f8:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000c3fd:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000c402:	85 c0                	test   eax,eax
c000c404:	75 01                	jne    c000c407 <VAS::~VAS()+0x177>
c000c406:	fb                   	sti    
c000c407:	90                   	nop
c000c408:	83 c4 2c             	add    esp,0x2c
c000c40b:	c3                   	ret    

c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c40c:	55                   	push   ebp
c000c40d:	57                   	push   edi
c000c40e:	56                   	push   esi
c000c40f:	53                   	push   ebx
c000c410:	83 ec 1c             	sub    esp,0x1c
c000c413:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c417:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c41b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c421:	77 08                	ja     c000c42b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c423:	0f 20 d8             	mov    eax,cr3
c000c426:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c429:	75 47                	jne    c000c472 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c42b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c42f:	09 d8                	or     eax,ebx
c000c431:	a9 ff 0f 00 00       	test   eax,0xfff
c000c436:	75 57                	jne    c000c48f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c438:	89 de                	mov    esi,ebx
c000c43a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c43d:	c1 ee 16             	shr    esi,0x16
c000c440:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c447:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c44b:	74 54                	je     c000c4a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c44d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c451:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c457:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c45b:	c1 e6 0c             	shl    esi,0xc
c000c45e:	c1 eb 0a             	shr    ebx,0xa
c000c461:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c467:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c46a:	83 c4 1c             	add    esp,0x1c
c000c46d:	5b                   	pop    ebx
c000c46e:	5e                   	pop    esi
c000c46f:	5f                   	pop    edi
c000c470:	5d                   	pop    ebp
c000c471:	c3                   	ret    
c000c472:	83 ec 0c             	sub    esp,0xc
c000c475:	68 e0 4e 02 c0       	push   0xc0024ee0
c000c47a:	e8 7c 0c 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000c47f:	83 c4 10             	add    esp,0x10
c000c482:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c486:	09 d8                	or     eax,ebx
c000c488:	a9 ff 0f 00 00       	test   eax,0xfff
c000c48d:	74 a9                	je     c000c438 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c48f:	83 ec 0c             	sub    esp,0xc
c000c492:	68 48 4f 02 c0       	push   0xc0024f48
c000c497:	e8 41 8d 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	eb 97                	jmp    c000c438 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c4a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4a5:	e8 f4 df ff ff       	call   c000a49e <Phys::allocatePage()>
c000c4aa:	83 ec 0c             	sub    esp,0xc
c000c4ad:	89 c5                	mov    ebp,eax
c000c4af:	8b 0d 34 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d34
c000c4b5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4b9:	6a 01                	push   0x1
c000c4bb:	e8 e1 f8 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c4c0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4c7:	6a 01                	push   0x1
c000c4c9:	50                   	push   eax
c000c4ca:	55                   	push   ebp
c000c4cb:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4d5:	51                   	push   ecx
c000c4d6:	e8 27 02 00 00       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4db:	83 c4 1c             	add    esp,0x1c
c000c4de:	68 00 10 00 00       	push   0x1000
c000c4e3:	6a 00                	push   0x0
c000c4e5:	50                   	push   eax
c000c4e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ea:	e8 a5 41 ff ff       	call   c0000694 <memset>
c000c4ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4f6:	e8 9a fb ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4ff:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c502:	83 c4 10             	add    esp,0x10
c000c505:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c508:	e9 40 ff ff ff       	jmp    c000c44d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c50d:	90                   	nop

c000c50e <VAS::allocatePages(int, int)>:
c000c50e:	55                   	push   ebp
c000c50f:	57                   	push   edi
c000c510:	56                   	push   esi
c000c511:	53                   	push   ebx
c000c512:	83 ec 1c             	sub    esp,0x1c
c000c515:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c519:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c51e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c524:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c52a:	83 e0 01             	and    eax,0x1
c000c52d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c531:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c535:	0f 85 cc 00 00 00    	jne    c000c607 <VAS::allocatePages(int, int)+0xf9>
c000c53b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c53e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c542:	85 c0                	test   eax,eax
c000c544:	0f 84 a1 00 00 00    	je     c000c5eb <VAS::allocatePages(int, int)+0xdd>
c000c54a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c54e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c552:	c1 e6 0c             	shl    esi,0xc
c000c555:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c559:	85 c0                	test   eax,eax
c000c55b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c55e:	7e 33                	jle    c000c593 <VAS::allocatePages(int, int)+0x85>
c000c560:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c564:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c568:	81 cd 00 04 00 00    	or     ebp,0x400
c000c56e:	e8 2b df ff ff       	call   c000a49e <Phys::allocatePage()>
c000c573:	55                   	push   ebp
c000c574:	53                   	push   ebx
c000c575:	50                   	push   eax
c000c576:	57                   	push   edi
c000c577:	e8 90 fe ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c57c:	83 c4 10             	add    esp,0x10
c000c57f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c584:	74 03                	je     c000c589 <VAS::allocatePages(int, int)+0x7b>
c000c586:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c589:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c58f:	39 de                	cmp    esi,ebx
c000c591:	75 db                	jne    c000c56e <VAS::allocatePages(int, int)+0x60>
c000c593:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c598:	75 12                	jne    c000c5ac <VAS::allocatePages(int, int)+0x9e>
c000c59a:	0f 20 d8             	mov    eax,cr3
c000c59d:	0f 22 d8             	mov    cr3,eax
c000c5a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5a4:	83 c4 1c             	add    esp,0x1c
c000c5a7:	5b                   	pop    ebx
c000c5a8:	5e                   	pop    esi
c000c5a9:	5f                   	pop    edi
c000c5aa:	5d                   	pop    ebp
c000c5ab:	c3                   	ret    
c000c5ac:	c1 ee 0a             	shr    esi,0xa
c000c5af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5b3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c5b9:	c1 eb 0a             	shr    ebx,0xa
c000c5bc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c5c2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c5c8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c5ce:	39 c3                	cmp    ebx,eax
c000c5d0:	77 ce                	ja     c000c5a0 <VAS::allocatePages(int, int)+0x92>
c000c5d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c5db:	39 d8                	cmp    eax,ebx
c000c5dd:	73 f3                	jae    c000c5d2 <VAS::allocatePages(int, int)+0xc4>
c000c5df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5e3:	83 c4 1c             	add    esp,0x1c
c000c5e6:	5b                   	pop    ebx
c000c5e7:	5e                   	pop    esi
c000c5e8:	5f                   	pop    edi
c000c5e9:	5d                   	pop    ebp
c000c5ea:	c3                   	ret    
c000c5eb:	83 ec 0c             	sub    esp,0xc
c000c5ee:	68 6c 4f 02 c0       	push   0xc0024f6c
c000c5f3:	e8 e5 8b 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000c5f8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	e9 43 ff ff ff       	jmp    c000c54a <VAS::allocatePages(int, int)+0x3c>
c000c607:	83 ec 0c             	sub    esp,0xc
c000c60a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c60e:	e8 8e f7 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c613:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c61f:	0f 87 9b 00 00 00    	ja     c000c6c0 <VAS::allocatePages(int, int)+0x1b2>
c000c625:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c629:	85 d2                	test   edx,edx
c000c62b:	7e 3c                	jle    c000c669 <VAS::allocatePages(int, int)+0x15b>
c000c62d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c631:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c635:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c639:	c1 e5 0c             	shl    ebp,0xc
c000c63c:	81 ce 00 04 00 00    	or     esi,0x400
c000c642:	01 dd                	add    ebp,ebx
c000c644:	e8 55 de ff ff       	call   c000a49e <Phys::allocatePage()>
c000c649:	56                   	push   esi
c000c64a:	53                   	push   ebx
c000c64b:	50                   	push   eax
c000c64c:	57                   	push   edi
c000c64d:	e8 ba fd ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c65a:	74 03                	je     c000c65f <VAS::allocatePages(int, int)+0x151>
c000c65c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c65f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c665:	39 dd                	cmp    ebp,ebx
c000c667:	75 db                	jne    c000c644 <VAS::allocatePages(int, int)+0x136>
c000c669:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c66e:	0f 84 26 ff ff ff    	je     c000c59a <VAS::allocatePages(int, int)+0x8c>
c000c674:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c67c:	89 d3                	mov    ebx,edx
c000c67e:	c1 e0 0c             	shl    eax,0xc
c000c681:	c1 eb 0a             	shr    ebx,0xa
c000c684:	01 d0                	add    eax,edx
c000c686:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c68c:	c1 e8 0a             	shr    eax,0xa
c000c68f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c695:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c69a:	2d 00 00 40 00       	sub    eax,0x400000
c000c69f:	39 c3                	cmp    ebx,eax
c000c6a1:	0f 87 f9 fe ff ff    	ja     c000c5a0 <VAS::allocatePages(int, int)+0x92>
c000c6a7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c6aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6b0:	39 d8                	cmp    eax,ebx
c000c6b2:	73 f3                	jae    c000c6a7 <VAS::allocatePages(int, int)+0x199>
c000c6b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6b8:	83 c4 1c             	add    esp,0x1c
c000c6bb:	5b                   	pop    ebx
c000c6bc:	5e                   	pop    esi
c000c6bd:	5f                   	pop    edi
c000c6be:	5d                   	pop    ebp
c000c6bf:	c3                   	ret    
c000c6c0:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c6c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6cb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c6d2:	0f 84 4d ff ff ff    	je     c000c625 <VAS::allocatePages(int, int)+0x117>
c000c6d8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c6e0:	e9 40 ff ff ff       	jmp    c000c625 <VAS::allocatePages(int, int)+0x117>
c000c6e5:	90                   	nop

c000c6e6 <VAS::setCPUSpecific(unsigned long)>:
c000c6e6:	83 ec 0c             	sub    esp,0xc
c000c6e9:	6a 05                	push   0x5
c000c6eb:	68 00 00 40 c2       	push   0xc2400000
c000c6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f8:	e8 0f fd ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6fd:	83 c4 1c             	add    esp,0x1c
c000c700:	c3                   	ret    
c000c701:	90                   	nop

c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c702:	55                   	push   ebp
c000c703:	57                   	push   edi
c000c704:	56                   	push   esi
c000c705:	53                   	push   ebx
c000c706:	83 ec 1c             	sub    esp,0x1c
c000c709:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c70e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c712:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c718:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c71c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c722:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c726:	83 e0 01             	and    eax,0x1
c000c729:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c72d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c731:	85 c0                	test   eax,eax
c000c733:	7e 39                	jle    c000c76e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c735:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c739:	89 f3                	mov    ebx,esi
c000c73b:	c1 e0 0c             	shl    eax,0xc
c000c73e:	01 f0                	add    eax,esi
c000c740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c744:	55                   	push   ebp
c000c745:	53                   	push   ebx
c000c746:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c74a:	29 f0                	sub    eax,esi
c000c74c:	01 d8                	add    eax,ebx
c000c74e:	50                   	push   eax
c000c74f:	57                   	push   edi
c000c750:	e8 b7 fc ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c75d:	74 03                	je     c000c762 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c75f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c762:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c768:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c76c:	75 d6                	jne    c000c744 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c76e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c773:	75 10                	jne    c000c785 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c775:	0f 20 d8             	mov    eax,cr3
c000c778:	0f 22 d8             	mov    cr3,eax
c000c77b:	83 c4 1c             	add    esp,0x1c
c000c77e:	89 f0                	mov    eax,esi
c000c780:	5b                   	pop    ebx
c000c781:	5e                   	pop    esi
c000c782:	5f                   	pop    edi
c000c783:	5d                   	pop    ebp
c000c784:	c3                   	ret    
c000c785:	89 f3                	mov    ebx,esi
c000c787:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c78b:	c1 eb 0a             	shr    ebx,0xa
c000c78e:	c1 e0 0c             	shl    eax,0xc
c000c791:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c797:	01 f0                	add    eax,esi
c000c799:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c79f:	c1 e8 0a             	shr    eax,0xa
c000c7a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7a7:	2d 00 00 40 00       	sub    eax,0x400000
c000c7ac:	39 c3                	cmp    ebx,eax
c000c7ae:	77 cb                	ja     c000c77b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c7b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c7b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c7b9:	39 d8                	cmp    eax,ebx
c000c7bb:	73 f3                	jae    c000c7b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c7bd:	83 c4 1c             	add    esp,0x1c
c000c7c0:	89 f0                	mov    eax,esi
c000c7c2:	5b                   	pop    ebx
c000c7c3:	5e                   	pop    esi
c000c7c4:	5f                   	pop    edi
c000c7c5:	5d                   	pop    ebp
c000c7c6:	c3                   	ret    
c000c7c7:	90                   	nop

c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c7c8:	55                   	push   ebp
c000c7c9:	57                   	push   edi
c000c7ca:	56                   	push   esi
c000c7cb:	53                   	push   ebx
c000c7cc:	83 ec 1c             	sub    esp,0x1c
c000c7cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c7d7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c7db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c7df:	a9 ff 0f 00 00       	test   eax,0xfff
c000c7e4:	75 4a                	jne    c000c830 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c7e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c7ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7ed:	c1 eb 16             	shr    ebx,0x16
c000c7f0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7f7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7fb:	74 4d                	je     c000c84a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c801:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c805:	c1 e8 0a             	shr    eax,0xa
c000c808:	80 fa 01             	cmp    dl,0x1
c000c80b:	19 d2                	sbb    edx,edx
c000c80d:	c1 e3 0c             	shl    ebx,0xc
c000c810:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c814:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c81a:	25 fc 0f 00 00       	and    eax,0xffc
c000c81f:	01 d8                	add    eax,ebx
c000c821:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c828:	83 c4 1c             	add    esp,0x1c
c000c82b:	5b                   	pop    ebx
c000c82c:	5e                   	pop    esi
c000c82d:	5f                   	pop    edi
c000c82e:	5d                   	pop    ebp
c000c82f:	c3                   	ret    
c000c830:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	68 98 4f 02 c0       	push   0xc0024f98
c000c83c:	e8 9c 89 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000c841:	83 c4 10             	add    esp,0x10
c000c844:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c848:	eb 9c                	jmp    c000c7e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c84a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c84e:	e8 4b dc ff ff       	call   c000a49e <Phys::allocatePage()>
c000c853:	83 ec 0c             	sub    esp,0xc
c000c856:	89 c5                	mov    ebp,eax
c000c858:	8b 0d 34 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d34
c000c85e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c862:	6a 01                	push   0x1
c000c864:	e8 38 f5 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c869:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c870:	6a 01                	push   0x1
c000c872:	50                   	push   eax
c000c873:	55                   	push   ebp
c000c874:	81 cd 07 04 00 00    	or     ebp,0x407
c000c87a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c87e:	51                   	push   ecx
c000c87f:	e8 7e fe ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c884:	83 c4 1c             	add    esp,0x1c
c000c887:	68 00 10 00 00       	push   0x1000
c000c88c:	6a 00                	push   0x0
c000c88e:	50                   	push   eax
c000c88f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c893:	e8 fc 3d ff ff       	call   c0000694 <memset>
c000c898:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c89c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c89f:	e8 f1 f7 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c000c8a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c8a7:	83 c4 10             	add    esp,0x10
c000c8aa:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c8ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b1:	e9 47 ff ff ff       	jmp    c000c7fd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c8b6 <VAS::VAS(bool)>:
c000c8b6:	53                   	push   ebx
c000c8b7:	83 ec 28             	sub    esp,0x28
c000c8ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c8cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c8d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8dc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c8e0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c8e3:	e8 b6 db ff ff       	call   c000a49e <Phys::allocatePage()>
c000c8e8:	89 c2                	mov    edx,eax
c000c8ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8f1:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c000c8f7:	83 ec 0c             	sub    esp,0xc
c000c8fa:	6a 01                	push   0x1
c000c8fc:	e8 a0 f4 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 c2                	mov    edx,eax
c000c906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c90a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c90d:	83 ec 0c             	sub    esp,0xc
c000c910:	6a 03                	push   0x3
c000c912:	6a 01                	push   0x1
c000c914:	52                   	push   edx
c000c915:	50                   	push   eax
c000c916:	53                   	push   ebx
c000c917:	e8 e6 fd ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c91c:	83 c4 20             	add    esp,0x20
c000c91f:	89 c2                	mov    edx,eax
c000c921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c925:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c928:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c930:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c938:	7f 1c                	jg     c000c956 <VAS::VAS(bool)+0xa0>
c000c93a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c93e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c941:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c945:	c1 e2 02             	shl    edx,0x2
c000c948:	01 d0                	add    eax,edx
c000c94a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c950:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c954:	eb da                	jmp    c000c930 <VAS::VAS(bool)+0x7a>
c000c956:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c95e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c966:	7f 7a                	jg     c000c9e2 <VAS::VAS(bool)+0x12c>
c000c968:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c96c:	2d 00 02 00 00       	sub    eax,0x200
c000c971:	c1 e0 0c             	shl    eax,0xc
c000c974:	83 c8 03             	or     eax,0x3
c000c977:	89 c2                	mov    edx,eax
c000c979:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c97e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c984:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c98a:	83 e0 10             	and    eax,0x10
c000c98d:	84 c0                	test   al,al
c000c98f:	74 07                	je     c000c998 <VAS::VAS(bool)+0xe2>
c000c991:	b8 00 01 00 00       	mov    eax,0x100
c000c996:	eb 05                	jmp    c000c99d <VAS::VAS(bool)+0xe7>
c000c998:	b8 00 00 00 00       	mov    eax,0x0
c000c99d:	09 d0                	or     eax,edx
c000c99f:	89 c1                	mov    ecx,eax
c000c9a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9ac:	c1 e2 02             	shl    edx,0x2
c000c9af:	01 d0                	add    eax,edx
c000c9b1:	89 ca                	mov    edx,ecx
c000c9b3:	89 10                	mov    DWORD PTR [eax],edx
c000c9b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c9b9:	2d 40 03 00 00       	sub    eax,0x340
c000c9be:	83 f8 7f             	cmp    eax,0x7f
c000c9c1:	77 16                	ja     c000c9d9 <VAS::VAS(bool)+0x123>
c000c9c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9ce:	c1 e2 02             	shl    edx,0x2
c000c9d1:	01 d0                	add    eax,edx
c000c9d3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c9d9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c9dd:	e9 7c ff ff ff       	jmp    c000c95e <VAS::VAS(bool)+0xa8>
c000c9e2:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000c9e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9ed:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9f3:	83 e0 10             	and    eax,0x10
c000c9f6:	84 c0                	test   al,al
c000c9f8:	74 07                	je     c000ca01 <VAS::VAS(bool)+0x14b>
c000c9fa:	b8 03 41 00 00       	mov    eax,0x4103
c000c9ff:	eb 05                	jmp    c000ca06 <VAS::VAS(bool)+0x150>
c000ca01:	b8 03 40 00 00       	mov    eax,0x4003
c000ca06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ca0a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ca0d:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ca13:	89 02                	mov    DWORD PTR [edx],eax
c000ca15:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ca1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca20:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ca26:	83 ec 08             	sub    esp,0x8
c000ca29:	50                   	push   eax
c000ca2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca2e:	e8 b3 fc ff ff       	call   c000c6e6 <VAS::setCPUSpecific(unsigned long)>
c000ca33:	83 c4 10             	add    esp,0x10
c000ca36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca3a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000ca3d:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ca42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca48:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca4e:	83 e0 10             	and    eax,0x10
c000ca51:	84 c0                	test   al,al
c000ca53:	74 07                	je     c000ca5c <VAS::VAS(bool)+0x1a6>
c000ca55:	b8 00 01 00 00       	mov    eax,0x100
c000ca5a:	eb 05                	jmp    c000ca61 <VAS::VAS(bool)+0x1ab>
c000ca5c:	b8 00 00 00 00       	mov    eax,0x0
c000ca61:	09 c2                	or     edx,eax
c000ca63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca6a:	05 fc 0f 00 00       	add    eax,0xffc
c000ca6f:	83 ca 03             	or     edx,0x3
c000ca72:	89 10                	mov    DWORD PTR [eax],edx
c000ca74:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ca79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca7f:	83 ec 0c             	sub    esp,0xc
c000ca82:	50                   	push   eax
c000ca83:	e8 e6 1e 00 00       	call   c000e96e <Device::getName()>
c000ca88:	83 c4 10             	add    esp,0x10
c000ca8b:	83 ec 08             	sub    esp,0x8
c000ca8e:	68 6c 50 02 c0       	push   0xc002506c
c000ca93:	50                   	push   eax
c000ca94:	e8 43 3d ff ff       	call   c00007dc <strcmp>
c000ca99:	83 c4 10             	add    esp,0x10
c000ca9c:	85 c0                	test   eax,eax
c000ca9e:	0f 94 c0             	sete   al
c000caa1:	84 c0                	test   al,al
c000caa3:	0f 84 87 00 00 00    	je     c000cb30 <VAS::VAS(bool)+0x27a>
c000caa9:	fa                   	cli    
c000caaa:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000caaf:	40                   	inc    eax
c000cab0:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000cab5:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000caba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cac0:	05 7c 09 00 00       	add    eax,0x97c
c000cac5:	83 ec 0c             	sub    esp,0xc
c000cac8:	50                   	push   eax
c000cac9:	e8 08 ce ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cad6:	89 c3                	mov    ebx,eax
c000cad8:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000cadd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cae3:	05 7c 09 00 00       	add    eax,0x97c
c000cae8:	83 ec 0c             	sub    esp,0xc
c000caeb:	50                   	push   eax
c000caec:	e8 e5 cd ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caf1:	83 c4 10             	add    esp,0x10
c000caf4:	83 ec 08             	sub    esp,0x8
c000caf7:	50                   	push   eax
c000caf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cafc:	e8 75 f5 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cb01:	83 c4 10             	add    esp,0x10
c000cb04:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb06:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cb0b:	6a 11                	push   0x11
c000cb0d:	53                   	push   ebx
c000cb0e:	50                   	push   eax
c000cb0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb13:	e8 f4 f8 ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c000cb18:	83 c4 10             	add    esp,0x10
c000cb1b:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000cb20:	48                   	dec    eax
c000cb21:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000cb26:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000cb2b:	85 c0                	test   eax,eax
c000cb2d:	75 01                	jne    c000cb30 <VAS::VAS(bool)+0x27a>
c000cb2f:	fb                   	sti    
c000cb30:	90                   	nop
c000cb31:	83 c4 28             	add    esp,0x28
c000cb34:	5b                   	pop    ebx
c000cb35:	c3                   	ret    

c000cb36 <VAS::VAS()>:
c000cb36:	53                   	push   ebx
c000cb37:	83 ec 18             	sub    esp,0x18
c000cb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000cb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb54:	a3 34 8d 02 c0       	mov    ds:0xc0028d34,eax
c000cb59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb5d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000cb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb65:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000cb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000cb73:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000cb7b:	83 ec 0c             	sub    esp,0xc
c000cb7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb82:	e8 60 d2 ff ff       	call   c0009de7 <malloc>
c000cb87:	83 c4 10             	add    esp,0x10
c000cb8a:	89 c3                	mov    ebx,eax
c000cb8c:	83 ec 08             	sub    esp,0x8
c000cb8f:	6a 01                	push   0x1
c000cb91:	53                   	push   ebx
c000cb92:	e8 1f fd ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c000cb97:	83 c4 10             	add    esp,0x10
c000cb9a:	89 1d 2c 8d 02 c0    	mov    DWORD PTR ds:0xc0028d2c,ebx
c000cba0:	90                   	nop
c000cba1:	83 c4 18             	add    esp,0x18
c000cba4:	5b                   	pop    ebx
c000cba5:	c3                   	ret    

c000cba6 <VAS::evict(unsigned long)>:
c000cba6:	55                   	push   ebp
c000cba7:	57                   	push   edi
c000cba8:	56                   	push   esi
c000cba9:	53                   	push   ebx
c000cbaa:	83 ec 1c             	sub    esp,0x1c
c000cbad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbb1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cbb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cbb9:	e8 24 f3 ff ff       	call   c000bee2 <Virt::allocateSwapfilePage()>
c000cbbe:	89 c7                	mov    edi,eax
c000cbc0:	a1 4c 80 02 c0       	mov    eax,ds:0xc002804c
c000cbc5:	85 c0                	test   eax,eax
c000cbc7:	7e 3d                	jle    c000cc06 <VAS::evict(unsigned long)+0x60>
c000cbc9:	89 ee                	mov    esi,ebp
c000cbcb:	31 db                	xor    ebx,ebx
c000cbcd:	83 ec 0c             	sub    esp,0xc
c000cbd0:	57                   	push   edi
c000cbd1:	e8 fa f2 ff ff       	call   c000bed0 <Virt::swapIDToSector(unsigned long)>
c000cbd6:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbd9:	01 d8                	add    eax,ebx
c000cbdb:	6a 01                	push   0x1
c000cbdd:	31 d2                	xor    edx,edx
c000cbdf:	43                   	inc    ebx
c000cbe0:	52                   	push   edx
c000cbe1:	81 c6 00 02 00 00    	add    esi,0x200
c000cbe7:	50                   	push   eax
c000cbe8:	0f be 05 58 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028058
c000cbef:	ff 34 85 bc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f44]
c000cbf6:	e8 ef 3e 00 00       	call   c0010aea <LogicalDisk::write(unsigned long long, int, void*)>
c000cbfb:	83 c4 20             	add    esp,0x20
c000cbfe:	39 1d 4c 80 02 c0    	cmp    DWORD PTR ds:0xc002804c,ebx
c000cc04:	7f c7                	jg     c000cbcd <VAS::evict(unsigned long)+0x27>
c000cc06:	83 ec 08             	sub    esp,0x8
c000cc09:	c1 e7 0b             	shl    edi,0xb
c000cc0c:	55                   	push   ebp
c000cc0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc11:	e8 60 f4 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cc16:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc18:	89 d3                	mov    ebx,edx
c000cc1a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cc20:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cc26:	09 d7                	or     edi,edx
c000cc28:	89 38                	mov    DWORD PTR [eax],edi
c000cc2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cc2d:	ff 05 28 8d 02 c0    	inc    DWORD PTR ds:0xc0028d28
c000cc33:	e8 e3 d7 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000cc38:	0f 20 d8             	mov    eax,cr3
c000cc3b:	0f 22 d8             	mov    cr3,eax
c000cc3e:	ff 35 28 8d 02 c0    	push   DWORD PTR ds:0xc0028d28
c000cc44:	55                   	push   ebp
c000cc45:	53                   	push   ebx
c000cc46:	68 bc 4f 02 c0       	push   0xc0024fbc
c000cc4b:	e8 ab 04 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cc50:	a1 24 8d 02 c0       	mov    eax,ds:0xc0028d24
c000cc55:	c7 44 24 50 7a 50 02 c0 	mov    DWORD PTR [esp+0x50],0xc002507a
c000cc5d:	8d 50 01             	lea    edx,[eax+0x1]
c000cc60:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cc64:	89 15 24 8d 02 c0    	mov    DWORD PTR ds:0xc0028d24,edx
c000cc6a:	83 c4 3c             	add    esp,0x3c
c000cc6d:	5b                   	pop    ebx
c000cc6e:	5e                   	pop    esi
c000cc6f:	5f                   	pop    edi
c000cc70:	5d                   	pop    ebp
c000cc71:	e9 85 04 00 00       	jmp    c000d0fb <Dbg::kprintf(char const*, ...)>

c000cc76 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cc76:	55                   	push   ebp
c000cc77:	57                   	push   edi
c000cc78:	56                   	push   esi
c000cc79:	53                   	push   ebx
c000cc7a:	83 ec 14             	sub    esp,0x14
c000cc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc81:	68 8b 50 02 c0       	push   0xc002508b
c000cc86:	e8 70 04 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cc8b:	83 c4 10             	add    esp,0x10
c000cc8e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cc92:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cc98:	74 20                	je     c000ccba <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cc9a:	83 ec 08             	sub    esp,0x8
c000cc9d:	55                   	push   ebp
c000cc9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca2:	e8 cf f3 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cca7:	83 c4 10             	add    esp,0x10
c000ccaa:	89 c3                	mov    ebx,eax
c000ccac:	85 c0                	test   eax,eax
c000ccae:	74 0a                	je     c000ccba <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000ccb0:	8b 38                	mov    edi,DWORD PTR [eax]
c000ccb2:	f7 c7 01 00 00 00    	test   edi,0x1
c000ccb8:	74 0a                	je     c000ccc4 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000ccba:	31 c0                	xor    eax,eax
c000ccbc:	83 c4 0c             	add    esp,0xc
c000ccbf:	5b                   	pop    ebx
c000ccc0:	5e                   	pop    esi
c000ccc1:	5f                   	pop    edi
c000ccc2:	5d                   	pop    ebp
c000ccc3:	c3                   	ret    
c000ccc4:	e8 d5 d7 ff ff       	call   c000a49e <Phys::allocatePage()>
c000ccc9:	c1 ef 0b             	shr    edi,0xb
c000cccc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ccce:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000ccd4:	09 c2                	or     edx,eax
c000ccd6:	81 ca 01 08 00 00    	or     edx,0x801
c000ccdc:	89 13                	mov    DWORD PTR [ebx],edx
c000ccde:	8b 0d 4c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002804c
c000cce4:	85 c9                	test   ecx,ecx
c000cce6:	7e 3d                	jle    c000cd25 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cce8:	89 ee                	mov    esi,ebp
c000ccea:	31 db                	xor    ebx,ebx
c000ccec:	83 ec 0c             	sub    esp,0xc
c000ccef:	57                   	push   edi
c000ccf0:	e8 db f1 ff ff       	call   c000bed0 <Virt::swapIDToSector(unsigned long)>
c000ccf5:	89 34 24             	mov    DWORD PTR [esp],esi
c000ccf8:	01 d8                	add    eax,ebx
c000ccfa:	6a 01                	push   0x1
c000ccfc:	31 d2                	xor    edx,edx
c000ccfe:	43                   	inc    ebx
c000ccff:	52                   	push   edx
c000cd00:	81 c6 00 02 00 00    	add    esi,0x200
c000cd06:	50                   	push   eax
c000cd07:	0f be 05 58 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028058
c000cd0e:	ff 34 85 bc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f44]
c000cd15:	e8 64 3d 00 00       	call   c0010a7e <LogicalDisk::read(unsigned long long, int, void*)>
c000cd1a:	83 c4 20             	add    esp,0x20
c000cd1d:	39 1d 4c 80 02 c0    	cmp    DWORD PTR ds:0xc002804c,ebx
c000cd23:	7f c7                	jg     c000ccec <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cd25:	a1 28 8d 02 c0       	mov    eax,ds:0xc0028d28
c000cd2a:	48                   	dec    eax
c000cd2b:	52                   	push   edx
c000cd2c:	a3 28 8d 02 c0       	mov    ds:0xc0028d28,eax
c000cd31:	50                   	push   eax
c000cd32:	55                   	push   ebp
c000cd33:	68 9e 50 02 c0       	push   0xc002509e
c000cd38:	e8 be 03 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cd3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd40:	e8 6d f1 ff ff       	call   c000beb2 <Virt::freeSwapfilePage(unsigned long)>
c000cd45:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	48                   	dec    eax
c000cd4e:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000cd53:	85 c0                	test   eax,eax
c000cd55:	74 1d                	je     c000cd74 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cd57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cd5b:	25 ff 0f 00 00       	and    eax,0xfff
c000cd60:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cd65:	77 10                	ja     c000cd77 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cd67:	0f 20 d8             	mov    eax,cr3
c000cd6a:	0f 22 d8             	mov    cr3,eax
c000cd6d:	b0 01                	mov    al,0x1
c000cd6f:	e9 48 ff ff ff       	jmp    c000ccbc <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cd74:	fb                   	sti    
c000cd75:	eb e0                	jmp    c000cd57 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cd77:	83 ec 0c             	sub    esp,0xc
c000cd7a:	68 b3 50 02 c0       	push   0xc00250b3
c000cd7f:	e8 77 03 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cd84:	83 c4 10             	add    esp,0x10
c000cd87:	eb de                	jmp    c000cd67 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cd89:	90                   	nop

c000cd8a <VAS::scanForEviction()>:
c000cd8a:	57                   	push   edi
c000cd8b:	31 ff                	xor    edi,edi
c000cd8d:	56                   	push   esi
c000cd8e:	53                   	push   ebx
c000cd8f:	83 ec 10             	sub    esp,0x10
c000cd92:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd96:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd99:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd9f:	75 0e                	jne    c000cdaf <VAS::scanForEviction()+0x25>
c000cda1:	89 da                	mov    edx,ebx
c000cda3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cda6:	c1 ea 16             	shr    edx,0x16
c000cda9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cdad:	74 4e                	je     c000cdfd <VAS::scanForEviction()+0x73>
c000cdaf:	53                   	push   ebx
c000cdb0:	56                   	push   esi
c000cdb1:	e8 c0 f2 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cdb6:	5a                   	pop    edx
c000cdb7:	8b 10                	mov    edx,DWORD PTR [eax]
c000cdb9:	59                   	pop    ecx
c000cdba:	89 d1                	mov    ecx,edx
c000cdbc:	81 e1 01 08 00 00    	and    ecx,0x801
c000cdc2:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cdc8:	74 3e                	je     c000ce08 <VAS::scanForEviction()+0x7e>
c000cdca:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cdd0:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cdd6:	76 2b                	jbe    c000ce03 <VAS::scanForEviction()+0x79>
c000cdd8:	47                   	inc    edi
c000cdd9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cde0:	83 ff 03             	cmp    edi,0x3
c000cde3:	74 32                	je     c000ce17 <VAS::scanForEviction()+0x8d>
c000cde5:	31 db                	xor    ebx,ebx
c000cde7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cded:	75 c0                	jne    c000cdaf <VAS::scanForEviction()+0x25>
c000cdef:	89 da                	mov    edx,ebx
c000cdf1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cdf4:	c1 ea 16             	shr    edx,0x16
c000cdf7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cdfb:	75 b2                	jne    c000cdaf <VAS::scanForEviction()+0x25>
c000cdfd:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ce03:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ce06:	eb 91                	jmp    c000cd99 <VAS::scanForEviction()+0xf>
c000ce08:	f6 c2 20             	test   dl,0x20
c000ce0b:	74 13                	je     c000ce20 <VAS::scanForEviction()+0x96>
c000ce0d:	83 e2 df             	and    edx,0xffffffdf
c000ce10:	89 10                	mov    DWORD PTR [eax],edx
c000ce12:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ce15:	eb b3                	jmp    c000cdca <VAS::scanForEviction()+0x40>
c000ce17:	83 c4 10             	add    esp,0x10
c000ce1a:	31 c0                	xor    eax,eax
c000ce1c:	5b                   	pop    ebx
c000ce1d:	5e                   	pop    esi
c000ce1e:	5f                   	pop    edi
c000ce1f:	c3                   	ret    
c000ce20:	83 ec 08             	sub    esp,0x8
c000ce23:	89 d0                	mov    eax,edx
c000ce25:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ce2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce2e:	53                   	push   ebx
c000ce2f:	68 c3 50 02 c0       	push   0xc00250c3
c000ce34:	e8 c2 02 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000ce39:	58                   	pop    eax
c000ce3a:	5a                   	pop    edx
c000ce3b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce3e:	56                   	push   esi
c000ce3f:	e8 62 fd ff ff       	call   c000cba6 <VAS::evict(unsigned long)>
c000ce44:	59                   	pop    ecx
c000ce45:	5b                   	pop    ebx
c000ce46:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce49:	68 d7 50 02 c0       	push   0xc00250d7
c000ce4e:	e8 a8 02 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000ce53:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ce5a:	83 c4 10             	add    esp,0x10
c000ce5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce61:	83 c4 10             	add    esp,0x10
c000ce64:	5b                   	pop    ebx
c000ce65:	5e                   	pop    esi
c000ce66:	5f                   	pop    edi
c000ce67:	c3                   	ret    

c000ce68 <mapVASFirstTime>:
c000ce68:	55                   	push   ebp
c000ce69:	57                   	push   edi
c000ce6a:	56                   	push   esi
c000ce6b:	53                   	push   ebx
c000ce6c:	83 ec 0c             	sub    esp,0xc
c000ce6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ce74:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ce77:	4a                   	dec    edx
c000ce78:	0f 84 fe 00 00 00    	je     c000cf7c <mapVASFirstTime+0x114>
c000ce7e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ce81:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ce84:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ce89:	c1 e5 15             	shl    ebp,0x15
c000ce8c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ce91:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ce97:	29 eb                	sub    ebx,ebp
c000ce99:	29 ef                	sub    edi,ebp
c000ce9b:	83 ec 08             	sub    esp,0x8
c000ce9e:	53                   	push   ebx
c000ce9f:	68 03 51 02 c0       	push   0xc0025103
c000cea4:	e8 52 02 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cea9:	e8 f0 d5 ff ff       	call   c000a49e <Phys::allocatePage()>
c000ceae:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ceb5:	6a 01                	push   0x1
c000ceb7:	53                   	push   ebx
c000ceb8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cebe:	50                   	push   eax
c000cebf:	56                   	push   esi
c000cec0:	e8 3d f8 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cec5:	83 c4 20             	add    esp,0x20
c000cec8:	39 fb                	cmp    ebx,edi
c000ceca:	75 cf                	jne    c000ce9b <mapVASFirstTime+0x33>
c000cecc:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ced1:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ced6:	29 eb                	sub    ebx,ebp
c000ced8:	29 ef                	sub    edi,ebp
c000ceda:	83 ec 08             	sub    esp,0x8
c000cedd:	53                   	push   ebx
c000cede:	68 1f 51 02 c0       	push   0xc002511f
c000cee3:	e8 13 02 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cee8:	58                   	pop    eax
c000cee9:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ceed:	5a                   	pop    edx
c000ceee:	19 c0                	sbb    eax,eax
c000cef0:	83 e0 04             	and    eax,0x4
c000cef3:	05 03 04 00 00       	add    eax,0x403
c000cef8:	50                   	push   eax
c000cef9:	68 33 51 02 c0       	push   0xc0025133
c000cefe:	e8 f8 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cf03:	e8 96 d5 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cf08:	59                   	pop    ecx
c000cf09:	89 c5                	mov    ebp,eax
c000cf0b:	58                   	pop    eax
c000cf0c:	55                   	push   ebp
c000cf0d:	68 41 51 02 c0       	push   0xc0025141
c000cf12:	e8 e4 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cf17:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cf1b:	19 d2                	sbb    edx,edx
c000cf1d:	83 e2 04             	and    edx,0x4
c000cf20:	81 c2 03 04 00 00    	add    edx,0x403
c000cf26:	89 14 24             	mov    DWORD PTR [esp],edx
c000cf29:	6a 01                	push   0x1
c000cf2b:	53                   	push   ebx
c000cf2c:	55                   	push   ebp
c000cf2d:	56                   	push   esi
c000cf2e:	e8 cf f7 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cf33:	83 c4 18             	add    esp,0x18
c000cf36:	53                   	push   ebx
c000cf37:	56                   	push   esi
c000cf38:	e8 39 f1 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c000cf3d:	5a                   	pop    edx
c000cf3e:	59                   	pop    ecx
c000cf3f:	ff 30                	push   DWORD PTR [eax]
c000cf41:	68 5d 51 02 c0       	push   0xc002515d
c000cf46:	e8 b0 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cf4b:	0f 20 d8             	mov    eax,cr3
c000cf4e:	83 c4 0c             	add    esp,0xc
c000cf51:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cf57:	56                   	push   esi
c000cf58:	50                   	push   eax
c000cf59:	68 68 51 02 c0       	push   0xc0025168
c000cf5e:	e8 98 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	39 df                	cmp    edi,ebx
c000cf68:	0f 85 6c ff ff ff    	jne    c000ceda <mapVASFirstTime+0x72>
c000cf6e:	0f 20 d8             	mov    eax,cr3
c000cf71:	0f 22 d8             	mov    cr3,eax
c000cf74:	83 c4 0c             	add    esp,0xc
c000cf77:	5b                   	pop    ebx
c000cf78:	5e                   	pop    esi
c000cf79:	5f                   	pop    edi
c000cf7a:	5d                   	pop    ebp
c000cf7b:	c3                   	ret    
c000cf7c:	83 ec 0c             	sub    esp,0xc
c000cf7f:	68 ea 50 02 c0       	push   0xc00250ea
c000cf84:	e8 72 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cf89:	83 c4 10             	add    esp,0x10
c000cf8c:	83 c4 0c             	add    esp,0xc
c000cf8f:	5b                   	pop    ebx
c000cf90:	5e                   	pop    esi
c000cf91:	5f                   	pop    edi
c000cf92:	5d                   	pop    ebp
c000cf93:	c3                   	ret    

c000cf94 <__cxa_atexit>:
c000cf94:	31 c0                	xor    eax,eax
c000cf96:	c3                   	ret    

c000cf97 <__cxa_finalize>:
c000cf97:	c3                   	ret    

c000cf98 <__stack_chk_fail>:
c000cf98:	55                   	push   ebp
c000cf99:	89 e5                	mov    ebp,esp
c000cf9b:	83 ec 14             	sub    esp,0x14
c000cf9e:	68 80 51 02 c0       	push   0xc0025180
c000cfa3:	e8 53 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cfa8:	58                   	pop    eax
c000cfa9:	5a                   	pop    edx
c000cfaa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cfad:	68 d0 51 02 c0       	push   0xc00251d0
c000cfb2:	e8 44 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cfb7:	59                   	pop    ecx
c000cfb8:	58                   	pop    eax
c000cfb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cfbc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cfbf:	68 d0 51 02 c0       	push   0xc00251d0
c000cfc4:	e8 32 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cfc9:	5a                   	pop    edx
c000cfca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cfcd:	59                   	pop    ecx
c000cfce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfd0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cfd3:	68 d0 51 02 c0       	push   0xc00251d0
c000cfd8:	e8 1e 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cfdd:	5a                   	pop    edx
c000cfde:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cfe1:	59                   	pop    ecx
c000cfe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfe4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfe6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cfe9:	68 d0 51 02 c0       	push   0xc00251d0
c000cfee:	e8 08 01 00 00       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000cff3:	c7 04 24 d8 51 02 c0 	mov    DWORD PTR [esp],0xc00251d8
c000cffa:	e8 de 81 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000cfff:	83 c4 10             	add    esp,0x10
c000d002:	c9                   	leave  
c000d003:	c3                   	ret    

c000d004 <__cxa_pure_virtual>:
c000d004:	83 ec 18             	sub    esp,0x18
c000d007:	68 f0 51 02 c0       	push   0xc00251f0
c000d00c:	e8 cc 81 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000d011:	83 c4 1c             	add    esp,0x1c
c000d014:	c3                   	ret    

c000d015 <operator new[](unsigned long)>:
c000d015:	e9 cd cd ff ff       	jmp    c0009de7 <malloc>

c000d01a <operator delete(void*, unsigned long)>:
c000d01a:	e9 e8 cd ff ff       	jmp    c0009e07 <rfree>

c000d01f <operator delete[](void*)>:
c000d01f:	e9 e3 cd ff ff       	jmp    c0009e07 <rfree>

c000d024 <operator delete[](void*, unsigned long)>:
c000d024:	e9 de cd ff ff       	jmp    c0009e07 <rfree>

c000d029 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000d029:	55                   	push   ebp
c000d02a:	b9 11 00 00 00       	mov    ecx,0x11
c000d02f:	57                   	push   edi
c000d030:	56                   	push   esi
c000d031:	be d6 4c 02 c0       	mov    esi,0xc0024cd6
c000d036:	53                   	push   ebx
c000d037:	83 ec 20             	sub    esp,0x20
c000d03a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d03e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d042:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d046:	fc                   	cld    
c000d047:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d049:	89 ee                	mov    esi,ebp
c000d04b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d04f:	eb 02                	jmp    c000d053 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000d051:	89 c6                	mov    esi,eax
c000d053:	31 d2                	xor    edx,edx
c000d055:	41                   	inc    ecx
c000d056:	89 f0                	mov    eax,esi
c000d058:	f7 f3                	div    ebx
c000d05a:	39 de                	cmp    esi,ebx
c000d05c:	73 f3                	jae    c000d051 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000d05e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d061:	eb 02                	jmp    c000d065 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000d063:	89 c5                	mov    ebp,eax
c000d065:	31 d2                	xor    edx,edx
c000d067:	49                   	dec    ecx
c000d068:	89 e8                	mov    eax,ebp
c000d06a:	f7 f3                	div    ebx
c000d06c:	39 dd                	cmp    ebp,ebx
c000d06e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000d072:	88 11                	mov    BYTE PTR [ecx],dl
c000d074:	73 ed                	jae    c000d063 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000d076:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d07a:	83 c4 20             	add    esp,0x20
c000d07d:	5b                   	pop    ebx
c000d07e:	5e                   	pop    esi
c000d07f:	5f                   	pop    edi
c000d080:	5d                   	pop    ebp
c000d081:	c3                   	ret    

c000d082 <Dbg::logc(char)>:
c000d082:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d086:	f6 05 20 8c 02 c0 10 	test   BYTE PTR ds:0xc0028c20,0x10
c000d08d:	75 12                	jne    c000d0a1 <Dbg::logc(char)+0x1f>
c000d08f:	ba fd 03 00 00       	mov    edx,0x3fd
c000d094:	ec                   	in     al,dx
c000d095:	a8 20                	test   al,0x20
c000d097:	74 fb                	je     c000d094 <Dbg::logc(char)+0x12>
c000d099:	ba f8 03 00 00       	mov    edx,0x3f8
c000d09e:	88 c8                	mov    al,cl
c000d0a0:	ee                   	out    dx,al
c000d0a1:	c3                   	ret    

c000d0a2 <Dbg::logs(char*)>:
c000d0a2:	53                   	push   ebx
c000d0a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d0a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d0aa:	84 c0                	test   al,al
c000d0ac:	74 0f                	je     c000d0bd <Dbg::logs(char*)+0x1b>
c000d0ae:	50                   	push   eax
c000d0af:	43                   	inc    ebx
c000d0b0:	e8 cd ff ff ff       	call   c000d082 <Dbg::logc(char)>
c000d0b5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d0b8:	5a                   	pop    edx
c000d0b9:	84 c0                	test   al,al
c000d0bb:	75 f1                	jne    c000d0ae <Dbg::logs(char*)+0xc>
c000d0bd:	5b                   	pop    ebx
c000d0be:	c3                   	ret    

c000d0bf <Dbg::logWriteInt(unsigned int)>:
c000d0bf:	83 ec 10             	sub    esp,0x10
c000d0c2:	6a 0a                	push   0xa
c000d0c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0c8:	50                   	push   eax
c000d0c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0cd:	e8 57 ff ff ff       	call   c000d029 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d0d2:	50                   	push   eax
c000d0d3:	e8 ca ff ff ff       	call   c000d0a2 <Dbg::logs(char*)>
c000d0d8:	83 c4 20             	add    esp,0x20
c000d0db:	c3                   	ret    

c000d0dc <Dbg::logWriteIntBase(unsigned int, int)>:
c000d0dc:	83 ec 10             	sub    esp,0x10
c000d0df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d0e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0e7:	50                   	push   eax
c000d0e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ec:	e8 38 ff ff ff       	call   c000d029 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d0f1:	50                   	push   eax
c000d0f2:	e8 ab ff ff ff       	call   c000d0a2 <Dbg::logs(char*)>
c000d0f7:	83 c4 20             	add    esp,0x20
c000d0fa:	c3                   	ret    

c000d0fb <Dbg::kprintf(char const*, ...)>:
c000d0fb:	55                   	push   ebp
c000d0fc:	57                   	push   edi
c000d0fd:	56                   	push   esi
c000d0fe:	53                   	push   ebx
c000d0ff:	83 ec 0c             	sub    esp,0xc
c000d102:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d106:	f6 05 20 8c 02 c0 10 	test   BYTE PTR ds:0xc0028c20,0x10
c000d10d:	74 08                	je     c000d117 <Dbg::kprintf(char const*, ...)+0x1c>
c000d10f:	83 c4 0c             	add    esp,0xc
c000d112:	5b                   	pop    ebx
c000d113:	5e                   	pop    esi
c000d114:	5f                   	pop    edi
c000d115:	5d                   	pop    ebp
c000d116:	c3                   	ret    
c000d117:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d11b:	31 db                	xor    ebx,ebx
c000d11d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d121:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d124:	84 c0                	test   al,al
c000d126:	74 e7                	je     c000d10f <Dbg::kprintf(char const*, ...)+0x14>
c000d128:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d12b:	3c 25                	cmp    al,0x25
c000d12d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d130:	75 44                	jne    c000d176 <Dbg::kprintf(char const*, ...)+0x7b>
c000d132:	83 c3 02             	add    ebx,0x2
c000d135:	8a 07                	mov    al,BYTE PTR [edi]
c000d137:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d13a:	83 e8 25             	sub    eax,0x25
c000d13d:	3c 53                	cmp    al,0x53
c000d13f:	0f 87 c9 00 00 00    	ja     c000d20e <Dbg::kprintf(char const*, ...)+0x113>
c000d145:	0f b6 c0             	movzx  eax,al
c000d148:	ff 24 85 04 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdadfc]
c000d14f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d153:	89 c8                	mov    eax,ecx
c000d155:	83 c1 04             	add    ecx,0x4
c000d158:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d15c:	ff 30                	push   DWORD PTR [eax]
c000d15e:	e8 5c ff ff ff       	call   c000d0bf <Dbg::logWriteInt(unsigned int)>
c000d163:	5f                   	pop    edi
c000d164:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d168:	84 c0                	test   al,al
c000d16a:	74 a3                	je     c000d10f <Dbg::kprintf(char const*, ...)+0x14>
c000d16c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d16f:	3c 25                	cmp    al,0x25
c000d171:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d174:	74 bc                	je     c000d132 <Dbg::kprintf(char const*, ...)+0x37>
c000d176:	50                   	push   eax
c000d177:	89 eb                	mov    ebx,ebp
c000d179:	e8 04 ff ff ff       	call   c000d082 <Dbg::logc(char)>
c000d17e:	89 fd                	mov    ebp,edi
c000d180:	58                   	pop    eax
c000d181:	eb e1                	jmp    c000d164 <Dbg::kprintf(char const*, ...)+0x69>
c000d183:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d187:	89 c8                	mov    eax,ecx
c000d189:	83 c1 04             	add    ecx,0x4
c000d18c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d190:	ff 30                	push   DWORD PTR [eax]
c000d192:	e8 0b ff ff ff       	call   c000d0a2 <Dbg::logs(char*)>
c000d197:	58                   	pop    eax
c000d198:	eb ca                	jmp    c000d164 <Dbg::kprintf(char const*, ...)+0x69>
c000d19a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d19e:	89 d0                	mov    eax,edx
c000d1a0:	83 c2 04             	add    edx,0x4
c000d1a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1a7:	ff 30                	push   DWORD PTR [eax]
c000d1a9:	e8 11 ff ff ff       	call   c000d0bf <Dbg::logWriteInt(unsigned int)>
c000d1ae:	58                   	pop    eax
c000d1af:	eb b3                	jmp    c000d164 <Dbg::kprintf(char const*, ...)+0x69>
c000d1b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1b5:	89 d0                	mov    eax,edx
c000d1b7:	83 c2 04             	add    edx,0x4
c000d1ba:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d1bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1c1:	50                   	push   eax
c000d1c2:	e8 bb fe ff ff       	call   c000d082 <Dbg::logc(char)>
c000d1c7:	58                   	pop    eax
c000d1c8:	eb 9a                	jmp    c000d164 <Dbg::kprintf(char const*, ...)+0x69>
c000d1ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d1ce:	89 c8                	mov    eax,ecx
c000d1d0:	83 c1 04             	add    ecx,0x4
c000d1d3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d1d7:	6a 10                	push   0x10
c000d1d9:	ff 30                	push   DWORD PTR [eax]
c000d1db:	e8 fc fe ff ff       	call   c000d0dc <Dbg::logWriteIntBase(unsigned int, int)>
c000d1e0:	59                   	pop    ecx
c000d1e1:	5f                   	pop    edi
c000d1e2:	eb 80                	jmp    c000d164 <Dbg::kprintf(char const*, ...)+0x69>
c000d1e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1e8:	89 d0                	mov    eax,edx
c000d1ea:	83 c2 08             	add    edx,0x8
c000d1ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1f1:	6a 10                	push   0x10
c000d1f3:	ff 30                	push   DWORD PTR [eax]
c000d1f5:	e8 e2 fe ff ff       	call   c000d0dc <Dbg::logWriteIntBase(unsigned int, int)>
c000d1fa:	58                   	pop    eax
c000d1fb:	5a                   	pop    edx
c000d1fc:	e9 63 ff ff ff       	jmp    c000d164 <Dbg::kprintf(char const*, ...)+0x69>
c000d201:	6a 25                	push   0x25
c000d203:	e8 7a fe ff ff       	call   c000d082 <Dbg::logc(char)>
c000d208:	58                   	pop    eax
c000d209:	e9 56 ff ff ff       	jmp    c000d164 <Dbg::kprintf(char const*, ...)+0x69>
c000d20e:	6a 25                	push   0x25
c000d210:	e8 6d fe ff ff       	call   c000d082 <Dbg::logc(char)>
c000d215:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d218:	50                   	push   eax
c000d219:	e8 64 fe ff ff       	call   c000d082 <Dbg::logc(char)>
c000d21e:	5a                   	pop    edx
c000d21f:	59                   	pop    ecx
c000d220:	e9 3f ff ff ff       	jmp    c000d164 <Dbg::kprintf(char const*, ...)+0x69>
c000d225:	90                   	nop

c000d226 <File::read(unsigned long long, void*, int*)>:
c000d226:	53                   	push   ebx
c000d227:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d22b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d22f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d236:	3c 19                	cmp    al,0x19
c000d238:	77 35                	ja     c000d26f <File::read(unsigned long long, void*, int*)+0x49>
c000d23a:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d241:	85 c0                	test   eax,eax
c000d243:	74 2a                	je     c000d26f <File::read(unsigned long long, void*, int*)+0x49>
c000d245:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d24b:	85 c0                	test   eax,eax
c000d24d:	74 20                	je     c000d26f <File::read(unsigned long long, void*, int*)+0x49>
c000d24f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d253:	74 21                	je     c000d276 <File::read(unsigned long long, void*, int*)+0x50>
c000d255:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d257:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d25b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d261:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d265:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d269:	5b                   	pop    ebx
c000d26a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d26d:	ff e0                	jmp    eax
c000d26f:	b8 0b 00 00 00       	mov    eax,0xb
c000d274:	eb 05                	jmp    c000d27b <File::read(unsigned long long, void*, int*)+0x55>
c000d276:	b8 05 00 00 00       	mov    eax,0x5
c000d27b:	5b                   	pop    ebx
c000d27c:	c3                   	ret    
c000d27d:	90                   	nop

c000d27e <File::write(unsigned long long, void*, int*)>:
c000d27e:	53                   	push   ebx
c000d27f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d283:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d287:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d28e:	3c 19                	cmp    al,0x19
c000d290:	77 35                	ja     c000d2c7 <File::write(unsigned long long, void*, int*)+0x49>
c000d292:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d299:	85 c0                	test   eax,eax
c000d29b:	74 2a                	je     c000d2c7 <File::write(unsigned long long, void*, int*)+0x49>
c000d29d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2a3:	85 c0                	test   eax,eax
c000d2a5:	74 20                	je     c000d2c7 <File::write(unsigned long long, void*, int*)+0x49>
c000d2a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2ab:	74 21                	je     c000d2ce <File::write(unsigned long long, void*, int*)+0x50>
c000d2ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d2af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2b3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d2b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2c1:	5b                   	pop    ebx
c000d2c2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d2c5:	ff e0                	jmp    eax
c000d2c7:	b8 0b 00 00 00       	mov    eax,0xb
c000d2cc:	eb 05                	jmp    c000d2d3 <File::write(unsigned long long, void*, int*)+0x55>
c000d2ce:	b8 05 00 00 00       	mov    eax,0x5
c000d2d3:	5b                   	pop    ebx
c000d2d4:	c3                   	ret    
c000d2d5:	90                   	nop

c000d2d6 <Directory::read(unsigned long long, void*, int*)>:
c000d2d6:	53                   	push   ebx
c000d2d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d2db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d2df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d2e6:	3c 19                	cmp    al,0x19
c000d2e8:	77 35                	ja     c000d31f <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2ea:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d2f1:	85 c0                	test   eax,eax
c000d2f3:	74 2a                	je     c000d31f <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2fb:	85 c0                	test   eax,eax
c000d2fd:	74 20                	je     c000d31f <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d303:	74 21                	je     c000d326 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d305:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d307:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d30b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d311:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d315:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d319:	5b                   	pop    ebx
c000d31a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d31d:	ff e0                	jmp    eax
c000d31f:	b8 0b 00 00 00       	mov    eax,0xb
c000d324:	eb 05                	jmp    c000d32b <Directory::read(unsigned long long, void*, int*)+0x55>
c000d326:	b8 05 00 00 00       	mov    eax,0x5
c000d32b:	5b                   	pop    ebx
c000d32c:	c3                   	ret    
c000d32d:	90                   	nop

c000d32e <Directory::write(unsigned long long, void*, int*)>:
c000d32e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d332:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d339:	b8 0b 00 00 00       	mov    eax,0xb
c000d33e:	80 fa 19             	cmp    dl,0x19
c000d341:	77 18                	ja     c000d35b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d343:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000d34a:	85 d2                	test   edx,edx
c000d34c:	74 0d                	je     c000d35b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d34e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d355:	19 c0                	sbb    eax,eax
c000d357:	83 e0 0a             	and    eax,0xa
c000d35a:	40                   	inc    eax
c000d35b:	c3                   	ret    

c000d35c <File::isAtty()>:
c000d35c:	31 c0                	xor    eax,eax
c000d35e:	c3                   	ret    
c000d35f:	90                   	nop

c000d360 <Directory::isAtty()>:
c000d360:	31 c0                	xor    eax,eax
c000d362:	c3                   	ret    
c000d363:	90                   	nop

c000d364 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d364:	b8 0a 00 00 00       	mov    eax,0xa
c000d369:	c3                   	ret    

c000d36a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d36a:	b8 0a 00 00 00       	mov    eax,0xa
c000d36f:	c3                   	ret    

c000d370 <Filesystem::allocateSwapfile(char const*, int)>:
c000d370:	31 c0                	xor    eax,eax
c000d372:	31 d2                	xor    edx,edx
c000d374:	c3                   	ret    
c000d375:	90                   	nop

c000d376 <File::~File()>:
c000d376:	83 ec 0c             	sub    esp,0xc
c000d379:	ba 40 54 02 c0       	mov    edx,0xc0025440
c000d37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d382:	89 10                	mov    DWORD PTR [eax],edx
c000d384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d388:	83 ec 0c             	sub    esp,0xc
c000d38b:	50                   	push   eax
c000d38c:	e8 af e7 ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	90                   	nop
c000d395:	83 c4 0c             	add    esp,0xc
c000d398:	c3                   	ret    
c000d399:	90                   	nop

c000d39a <File::~File()>:
c000d39a:	83 ec 0c             	sub    esp,0xc
c000d39d:	83 ec 0c             	sub    esp,0xc
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 cd ff ff ff       	call   c000d376 <File::~File()>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	83 ec 08             	sub    esp,0x8
c000d3af:	68 14 01 00 00       	push   0x114
c000d3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b8:	e8 5d fc ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000d3bd:	83 c4 10             	add    esp,0x10
c000d3c0:	83 c4 0c             	add    esp,0xc
c000d3c3:	c3                   	ret    

c000d3c4 <Directory::~Directory()>:
c000d3c4:	83 ec 0c             	sub    esp,0xc
c000d3c7:	ba 5c 54 02 c0       	mov    edx,0xc002545c
c000d3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d0:	89 10                	mov    DWORD PTR [eax],edx
c000d3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d6:	83 ec 0c             	sub    esp,0xc
c000d3d9:	50                   	push   eax
c000d3da:	e8 61 e7 ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000d3df:	83 c4 10             	add    esp,0x10
c000d3e2:	90                   	nop
c000d3e3:	83 c4 0c             	add    esp,0xc
c000d3e6:	c3                   	ret    
c000d3e7:	90                   	nop

c000d3e8 <Directory::~Directory()>:
c000d3e8:	83 ec 0c             	sub    esp,0xc
c000d3eb:	83 ec 0c             	sub    esp,0xc
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 cd ff ff ff       	call   c000d3c4 <Directory::~Directory()>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	83 ec 08             	sub    esp,0x8
c000d3fd:	68 14 01 00 00       	push   0x114
c000d402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d406:	e8 0f fc ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	83 c4 0c             	add    esp,0xc
c000d411:	c3                   	ret    

c000d412 <Filesystem::Filesystem()>:
c000d412:	ba d8 53 02 c0       	mov    edx,0xc00253d8
c000d417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d41b:	89 10                	mov    DWORD PTR [eax],edx
c000d41d:	8b 15 38 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d38
c000d423:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d427:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d42a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d42e:	a3 38 8d 02 c0       	mov    ds:0xc0028d38,eax
c000d433:	90                   	nop
c000d434:	c3                   	ret    
c000d435:	90                   	nop

c000d436 <Filesystem::~Filesystem()>:
c000d436:	ba d8 53 02 c0       	mov    edx,0xc00253d8
c000d43b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d43f:	89 10                	mov    DWORD PTR [eax],edx
c000d441:	90                   	nop
c000d442:	c3                   	ret    
c000d443:	90                   	nop

c000d444 <Filesystem::~Filesystem()>:
c000d444:	83 ec 0c             	sub    esp,0xc
c000d447:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d44b:	e8 e6 ff ff ff       	call   c000d436 <Filesystem::~Filesystem()>
c000d450:	83 c4 04             	add    esp,0x4
c000d453:	83 ec 08             	sub    esp,0x8
c000d456:	6a 08                	push   0x8
c000d458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d45c:	e8 b9 fb ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000d461:	83 c4 10             	add    esp,0x10
c000d464:	83 c4 0c             	add    esp,0xc
c000d467:	c3                   	ret    

c000d468 <Fs::getcwd(Process*, char*, int)>:
c000d468:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d46c:	31 c0                	xor    eax,eax
c000d46e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d471:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d475:	7d 15                	jge    c000d48c <Fs::getcwd(Process*, char*, int)+0x24>
c000d477:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d47b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d482:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d485:	84 c9                	test   cl,cl
c000d487:	74 06                	je     c000d48f <Fs::getcwd(Process*, char*, int)+0x27>
c000d489:	40                   	inc    eax
c000d48a:	eb e2                	jmp    c000d46e <Fs::getcwd(Process*, char*, int)+0x6>
c000d48c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d48f:	31 c0                	xor    eax,eax
c000d491:	c3                   	ret    

c000d492 <Fs::initVFS()>:
c000d492:	83 ec 18             	sub    esp,0x18
c000d495:	6a 08                	push   0x8
c000d497:	e8 4b c9 ff ff       	call   c0009de7 <malloc>
c000d49c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d49f:	e8 d4 ed 00 00       	call   c001c278 <FAT::FAT()>
c000d4a4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d4ab:	e8 37 c9 ff ff       	call   c0009de7 <malloc>
c000d4b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4b3:	e8 50 00 01 00       	call   c001d508 <ISO9660::ISO9660()>
c000d4b8:	83 c4 1c             	add    esp,0x1c
c000d4bb:	c3                   	ret    

c000d4bc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d4bc:	55                   	push   ebp
c000d4bd:	57                   	push   edi
c000d4be:	56                   	push   esi
c000d4bf:	53                   	push   ebx
c000d4c0:	81 ec 10 04 00 00    	sub    esp,0x410
c000d4c6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d4cd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d4d4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d4db:	68 00 04 00 00       	push   0x400
c000d4e0:	6a 00                	push   0x0
c000d4e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d4e6:	56                   	push   esi
c000d4e7:	e8 a8 31 ff ff       	call   c0000694 <memset>
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d4f3:	75 0b                	jne    c000d500 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d4f5:	50                   	push   eax
c000d4f6:	50                   	push   eax
c000d4f7:	57                   	push   edi
c000d4f8:	56                   	push   esi
c000d4f9:	e8 52 32 ff ff       	call   c0000750 <strcpy>
c000d4fe:	eb 41                	jmp    c000d541 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d500:	8a 07                	mov    al,BYTE PTR [edi]
c000d502:	3c 5c                	cmp    al,0x5c
c000d504:	74 04                	je     c000d50a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d506:	3c 2f                	cmp    al,0x2f
c000d508:	75 18                	jne    c000d522 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d50a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d50d:	3c 60                	cmp    al,0x60
c000d50f:	7e 03                	jle    c000d514 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d511:	83 e8 20             	sub    eax,0x20
c000d514:	88 04 24             	mov    BYTE PTR [esp],al
c000d517:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d51e:	50                   	push   eax
c000d51f:	50                   	push   eax
c000d520:	eb 18                	jmp    c000d53a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d522:	50                   	push   eax
c000d523:	50                   	push   eax
c000d524:	55                   	push   ebp
c000d525:	56                   	push   esi
c000d526:	e8 25 32 ff ff       	call   c0000750 <strcpy>
c000d52b:	5a                   	pop    edx
c000d52c:	59                   	pop    ecx
c000d52d:	68 0a 6d 02 c0       	push   0xc0026d0a
c000d532:	56                   	push   esi
c000d533:	e8 58 33 ff ff       	call   c0000890 <strcat>
c000d538:	5d                   	pop    ebp
c000d539:	58                   	pop    eax
c000d53a:	57                   	push   edi
c000d53b:	56                   	push   esi
c000d53c:	e8 4f 33 ff ff       	call   c0000890 <strcat>
c000d541:	83 c4 10             	add    esp,0x10
c000d544:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d547:	3c 60                	cmp    al,0x60
c000d549:	7e 03                	jle    c000d54e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d54b:	83 e8 20             	sub    eax,0x20
c000d54e:	88 04 24             	mov    BYTE PTR [esp],al
c000d551:	88 03                	mov    BYTE PTR [ebx],al
c000d553:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d55a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d560:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d564:	bf 03 00 00 00       	mov    edi,0x3
c000d569:	b8 03 00 00 00       	mov    eax,0x3
c000d56e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d571:	84 d2                	test   dl,dl
c000d573:	0f 84 91 00 00 00    	je     c000d60a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d579:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d57c:	80 fa 5c             	cmp    dl,0x5c
c000d57f:	74 05                	je     c000d586 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d581:	80 fa 2f             	cmp    dl,0x2f
c000d584:	75 12                	jne    c000d598 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d586:	89 c5                	mov    ebp,eax
c000d588:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d58d:	74 09                	je     c000d598 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d58f:	40                   	inc    eax
c000d590:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d594:	89 cf                	mov    edi,ecx
c000d596:	eb d6                	jmp    c000d56e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d598:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d59d:	75 5b                	jne    c000d5fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d59f:	80 fa 2e             	cmp    dl,0x2e
c000d5a2:	75 56                	jne    c000d5fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d5a4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d5a8:	74 19                	je     c000d5c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d5aa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d5af:	74 53                	je     c000d604 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d5b1:	89 f9                	mov    ecx,edi
c000d5b3:	41                   	inc    ecx
c000d5b4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d5b7:	80 fa 2f             	cmp    dl,0x2f
c000d5ba:	74 f7                	je     c000d5b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d5bc:	80 fa 5c             	cmp    dl,0x5c
c000d5bf:	74 f2                	je     c000d5b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d5c1:	eb d1                	jmp    c000d594 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5c3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d5c8:	74 3a                	je     c000d604 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d5ca:	83 f8 03             	cmp    eax,0x3
c000d5cd:	74 c5                	je     c000d594 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5cf:	41                   	inc    ecx
c000d5d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d5d3:	80 fa 2f             	cmp    dl,0x2f
c000d5d6:	74 f7                	je     c000d5cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d5d8:	80 fa 5c             	cmp    dl,0x5c
c000d5db:	74 f2                	je     c000d5cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d5dd:	48                   	dec    eax
c000d5de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d5e2:	75 06                	jne    c000d5ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d5e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d5e8:	eb f3                	jmp    c000d5dd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d5ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d5ee:	74 07                	je     c000d5f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d5f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d5f4:	48                   	dec    eax
c000d5f5:	eb f3                	jmp    c000d5ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d5f7:	40                   	inc    eax
c000d5f8:	eb 9a                	jmp    c000d594 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5fa:	80 fa 2f             	cmp    dl,0x2f
c000d5fd:	74 95                	je     c000d594 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5ff:	80 fa 5c             	cmp    dl,0x5c
c000d602:	74 90                	je     c000d594 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d604:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d607:	40                   	inc    eax
c000d608:	eb 8a                	jmp    c000d594 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d60a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d60e:	83 ec 0c             	sub    esp,0xc
c000d611:	53                   	push   ebx
c000d612:	e8 99 30 ff ff       	call   c00006b0 <strlen>
c000d617:	83 c4 10             	add    esp,0x10
c000d61a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d61f:	75 26                	jne    c000d647 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d621:	83 ec 0c             	sub    esp,0xc
c000d624:	53                   	push   ebx
c000d625:	e8 86 30 ff ff       	call   c00006b0 <strlen>
c000d62a:	83 c4 10             	add    esp,0x10
c000d62d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d632:	74 26                	je     c000d65a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	53                   	push   ebx
c000d638:	e8 73 30 ff ff       	call   c00006b0 <strlen>
c000d63d:	83 c4 10             	add    esp,0x10
c000d640:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d645:	eb c7                	jmp    c000d60e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d647:	83 ec 0c             	sub    esp,0xc
c000d64a:	53                   	push   ebx
c000d64b:	e8 60 30 ff ff       	call   c00006b0 <strlen>
c000d650:	83 c4 10             	add    esp,0x10
c000d653:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d658:	74 c7                	je     c000d621 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d65a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d660:	5b                   	pop    ebx
c000d661:	5e                   	pop    esi
c000d662:	5f                   	pop    edi
c000d663:	5d                   	pop    ebp
c000d664:	c3                   	ret    
c000d665:	90                   	nop

c000d666 <File::File(char const*, Process*)>:
c000d666:	83 ec 0c             	sub    esp,0xc
c000d669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66d:	83 ec 08             	sub    esp,0x8
c000d670:	6a 00                	push   0x0
c000d672:	50                   	push   eax
c000d673:	e8 e6 e2 ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000d678:	83 c4 10             	add    esp,0x10
c000d67b:	ba 40 54 02 c0       	mov    edx,0xc0025440
c000d680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d684:	89 10                	mov    DWORD PTR [eax],edx
c000d686:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d68a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d694:	83 c0 0d             	add    eax,0xd
c000d697:	83 ec 04             	sub    esp,0x4
c000d69a:	52                   	push   edx
c000d69b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69f:	50                   	push   eax
c000d6a0:	e8 17 fe ff ff       	call   c000d4bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d6a5:	83 c4 10             	add    esp,0x10
c000d6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d6af:	8d 50 bf             	lea    edx,[eax-0x41]
c000d6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d6ce:	0f b6 c0             	movzx  eax,al
c000d6d1:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d6d8:	85 c0                	test   eax,eax
c000d6da:	74 5e                	je     c000d73a <File::File(char const*, Process*)+0xd4>
c000d6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d6e6:	0f b6 c0             	movzx  eax,al
c000d6e9:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d6f0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6f6:	85 c0                	test   eax,eax
c000d6f8:	75 40                	jne    c000d73a <File::File(char const*, Process*)+0xd4>
c000d6fa:	83 ec 0c             	sub    esp,0xc
c000d6fd:	68 7c 53 02 c0       	push   0xc002537c
c000d702:	e8 f4 f9 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000d707:	83 c4 10             	add    esp,0x10
c000d70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d714:	0f b6 c0             	movzx  eax,al
c000d717:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	50                   	push   eax
c000d722:	e8 55 32 00 00       	call   c001097c <LogicalDisk::mount()>
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	83 ec 0c             	sub    esp,0xc
c000d72d:	68 3b 77 02 c0       	push   0xc002773b
c000d732:	e8 c4 f9 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000d737:	83 c4 10             	add    esp,0x10
c000d73a:	90                   	nop
c000d73b:	83 c4 0c             	add    esp,0xc
c000d73e:	c3                   	ret    
c000d73f:	90                   	nop

c000d740 <File::open(FileOpenMode)>:
c000d740:	53                   	push   ebx
c000d741:	b8 0b 00 00 00       	mov    eax,0xb
c000d746:	83 ec 08             	sub    esp,0x8
c000d749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d74d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d754:	80 fa 19             	cmp    dl,0x19
c000d757:	77 40                	ja     c000d799 <File::open(FileOpenMode)+0x59>
c000d759:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000d760:	85 d2                	test   edx,edx
c000d762:	74 35                	je     c000d799 <File::open(FileOpenMode)+0x59>
c000d764:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d76a:	85 d2                	test   edx,edx
c000d76c:	74 2b                	je     c000d799 <File::open(FileOpenMode)+0x59>
c000d76e:	b8 06 00 00 00       	mov    eax,0x6
c000d773:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d777:	75 20                	jne    c000d799 <File::open(FileOpenMode)+0x59>
c000d779:	8b 02                	mov    eax,DWORD PTR [edx]
c000d77b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d785:	51                   	push   ecx
c000d786:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d789:	51                   	push   ecx
c000d78a:	52                   	push   edx
c000d78b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d78e:	83 c4 10             	add    esp,0x10
c000d791:	85 c0                	test   eax,eax
c000d793:	75 04                	jne    c000d799 <File::open(FileOpenMode)+0x59>
c000d795:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d799:	83 c4 08             	add    esp,0x8
c000d79c:	5b                   	pop    ebx
c000d79d:	c3                   	ret    

c000d79e <File::close()>:
c000d79e:	53                   	push   ebx
c000d79f:	b8 0b 00 00 00       	mov    eax,0xb
c000d7a4:	83 ec 08             	sub    esp,0x8
c000d7a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7ab:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7b2:	80 fa 19             	cmp    dl,0x19
c000d7b5:	77 41                	ja     c000d7f8 <File::close()+0x5a>
c000d7b7:	8b 1c 95 c0 91 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e40]
c000d7be:	85 db                	test   ebx,ebx
c000d7c0:	74 36                	je     c000d7f8 <File::close()+0x5a>
c000d7c2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d7c9:	74 2d                	je     c000d7f8 <File::close()+0x5a>
c000d7cb:	b8 05 00 00 00       	mov    eax,0x5
c000d7d0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7d4:	74 22                	je     c000d7f8 <File::close()+0x5a>
c000d7d6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d7da:	8b 04 95 c0 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e40]
c000d7e1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d7e7:	53                   	push   ebx
c000d7e8:	53                   	push   ebx
c000d7e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7eb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7f1:	50                   	push   eax
c000d7f2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	83 c4 08             	add    esp,0x8
c000d7fb:	5b                   	pop    ebx
c000d7fc:	c3                   	ret    
c000d7fd:	90                   	nop

c000d7fe <File::seek(unsigned long long)>:
c000d7fe:	56                   	push   esi
c000d7ff:	53                   	push   ebx
c000d800:	b8 0b 00 00 00       	mov    eax,0xb
c000d805:	51                   	push   ecx
c000d806:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d80a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d80e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d815:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d819:	80 fa 19             	cmp    dl,0x19
c000d81c:	77 31                	ja     c000d84f <File::seek(unsigned long long)+0x51>
c000d81e:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000d825:	85 d2                	test   edx,edx
c000d827:	74 26                	je     c000d84f <File::seek(unsigned long long)+0x51>
c000d829:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d82f:	85 d2                	test   edx,edx
c000d831:	74 1c                	je     c000d84f <File::seek(unsigned long long)+0x51>
c000d833:	b8 05 00 00 00       	mov    eax,0x5
c000d838:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d83c:	74 11                	je     c000d84f <File::seek(unsigned long long)+0x51>
c000d83e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d840:	53                   	push   ebx
c000d841:	51                   	push   ecx
c000d842:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d848:	52                   	push   edx
c000d849:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d84c:	83 c4 10             	add    esp,0x10
c000d84f:	5a                   	pop    edx
c000d850:	5b                   	pop    ebx
c000d851:	5e                   	pop    esi
c000d852:	c3                   	ret    
c000d853:	90                   	nop

c000d854 <File::tell(unsigned long long*)>:
c000d854:	83 ec 0c             	sub    esp,0xc
c000d857:	b8 0b 00 00 00       	mov    eax,0xb
c000d85c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d860:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d867:	80 fa 19             	cmp    dl,0x19
c000d86a:	77 34                	ja     c000d8a0 <File::tell(unsigned long long*)+0x4c>
c000d86c:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000d873:	85 d2                	test   edx,edx
c000d875:	74 29                	je     c000d8a0 <File::tell(unsigned long long*)+0x4c>
c000d877:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d87d:	85 d2                	test   edx,edx
c000d87f:	74 1f                	je     c000d8a0 <File::tell(unsigned long long*)+0x4c>
c000d881:	b8 05 00 00 00       	mov    eax,0x5
c000d886:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d88a:	74 14                	je     c000d8a0 <File::tell(unsigned long long*)+0x4c>
c000d88c:	50                   	push   eax
c000d88d:	8b 02                	mov    eax,DWORD PTR [edx]
c000d88f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d893:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d899:	52                   	push   edx
c000d89a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	83 c4 0c             	add    esp,0xc
c000d8a3:	c3                   	ret    

c000d8a4 <File::rewind()>:
c000d8a4:	83 ec 10             	sub    esp,0x10
c000d8a7:	6a 00                	push   0x0
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	e8 4a ff ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c000d8b4:	83 c4 1c             	add    esp,0x1c
c000d8b7:	c3                   	ret    

c000d8b8 <File::unlink()>:
c000d8b8:	83 ec 0c             	sub    esp,0xc
c000d8bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d8c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8cb:	80 f9 19             	cmp    cl,0x19
c000d8ce:	77 2f                	ja     c000d8ff <File::unlink()+0x47>
c000d8d0:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000d8d7:	85 c9                	test   ecx,ecx
c000d8d9:	74 24                	je     c000d8ff <File::unlink()+0x47>
c000d8db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e1:	85 c9                	test   ecx,ecx
c000d8e3:	74 1a                	je     c000d8ff <File::unlink()+0x47>
c000d8e5:	b8 06 00 00 00       	mov    eax,0x6
c000d8ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8ee:	75 0f                	jne    c000d8ff <File::unlink()+0x47>
c000d8f0:	83 c2 0d             	add    edx,0xd
c000d8f3:	50                   	push   eax
c000d8f4:	50                   	push   eax
c000d8f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8f7:	52                   	push   edx
c000d8f8:	51                   	push   ecx
c000d8f9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d8fc:	83 c4 10             	add    esp,0x10
c000d8ff:	83 c4 0c             	add    esp,0xc
c000d902:	c3                   	ret    
c000d903:	90                   	nop

c000d904 <File::rename(char const*)>:
c000d904:	83 ec 0c             	sub    esp,0xc
c000d907:	b8 0b 00 00 00       	mov    eax,0xb
c000d90c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d910:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d917:	80 f9 19             	cmp    cl,0x19
c000d91a:	77 32                	ja     c000d94e <File::rename(char const*)+0x4a>
c000d91c:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000d923:	85 c9                	test   ecx,ecx
c000d925:	74 27                	je     c000d94e <File::rename(char const*)+0x4a>
c000d927:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d92d:	85 c9                	test   ecx,ecx
c000d92f:	74 1d                	je     c000d94e <File::rename(char const*)+0x4a>
c000d931:	b8 06 00 00 00       	mov    eax,0x6
c000d936:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d93a:	75 12                	jne    c000d94e <File::rename(char const*)+0x4a>
c000d93c:	83 c2 0d             	add    edx,0xd
c000d93f:	50                   	push   eax
c000d940:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d942:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d946:	52                   	push   edx
c000d947:	51                   	push   ecx
c000d948:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	83 c4 0c             	add    esp,0xc
c000d951:	c3                   	ret    

c000d952 <File::chfatattr(unsigned char, unsigned char)>:
c000d952:	57                   	push   edi
c000d953:	b8 0b 00 00 00       	mov    eax,0xb
c000d958:	56                   	push   esi
c000d959:	53                   	push   ebx
c000d95a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d95e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d962:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d969:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d96d:	80 f9 19             	cmp    cl,0x19
c000d970:	77 37                	ja     c000d9a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d972:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000d979:	85 c9                	test   ecx,ecx
c000d97b:	74 2c                	je     c000d9a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d97d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d983:	85 c9                	test   ecx,ecx
c000d985:	74 22                	je     c000d9a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d987:	b8 06 00 00 00       	mov    eax,0x6
c000d98c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d990:	75 17                	jne    c000d9a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d992:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d994:	89 f0                	mov    eax,esi
c000d996:	83 c2 0d             	add    edx,0xd
c000d999:	0f b6 f0             	movzx  esi,al
c000d99c:	0f b6 db             	movzx  ebx,bl
c000d99f:	56                   	push   esi
c000d9a0:	53                   	push   ebx
c000d9a1:	52                   	push   edx
c000d9a2:	51                   	push   ecx
c000d9a3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d9a6:	83 c4 10             	add    esp,0x10
c000d9a9:	5b                   	pop    ebx
c000d9aa:	5e                   	pop    esi
c000d9ab:	5f                   	pop    edi
c000d9ac:	c3                   	ret    
c000d9ad:	90                   	nop

c000d9ae <File::exists()>:
c000d9ae:	83 ec 0c             	sub    esp,0xc
c000d9b1:	31 c0                	xor    eax,eax
c000d9b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9b7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9be:	80 f9 19             	cmp    cl,0x19
c000d9c1:	77 24                	ja     c000d9e7 <File::exists()+0x39>
c000d9c3:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000d9ca:	85 c9                	test   ecx,ecx
c000d9cc:	74 19                	je     c000d9e7 <File::exists()+0x39>
c000d9ce:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9d4:	85 c9                	test   ecx,ecx
c000d9d6:	74 0f                	je     c000d9e7 <File::exists()+0x39>
c000d9d8:	83 c2 0d             	add    edx,0xd
c000d9db:	50                   	push   eax
c000d9dc:	50                   	push   eax
c000d9dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9df:	52                   	push   edx
c000d9e0:	51                   	push   ecx
c000d9e1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d9e4:	83 c4 10             	add    esp,0x10
c000d9e7:	83 c4 0c             	add    esp,0xc
c000d9ea:	c3                   	ret    
c000d9eb:	90                   	nop

c000d9ec <File::stat(unsigned long long*, bool*)>:
c000d9ec:	56                   	push   esi
c000d9ed:	53                   	push   ebx
c000d9ee:	50                   	push   eax
c000d9ef:	b8 0b 00 00 00       	mov    eax,0xb
c000d9f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d9fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da07:	80 f9 19             	cmp    cl,0x19
c000da0a:	77 3d                	ja     c000da49 <File::stat(unsigned long long*, bool*)+0x5d>
c000da0c:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000da13:	85 c9                	test   ecx,ecx
c000da15:	74 32                	je     c000da49 <File::stat(unsigned long long*, bool*)+0x5d>
c000da17:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da1d:	85 c9                	test   ecx,ecx
c000da1f:	74 28                	je     c000da49 <File::stat(unsigned long long*, bool*)+0x5d>
c000da21:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da23:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000da27:	74 13                	je     c000da3c <File::stat(unsigned long long*, bool*)+0x50>
c000da29:	83 ec 04             	sub    esp,0x4
c000da2c:	56                   	push   esi
c000da2d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000da33:	51                   	push   ecx
c000da34:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000da37:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000da3a:	eb 0a                	jmp    c000da46 <File::stat(unsigned long long*, bool*)+0x5a>
c000da3c:	53                   	push   ebx
c000da3d:	83 c2 0d             	add    edx,0xd
c000da40:	56                   	push   esi
c000da41:	52                   	push   edx
c000da42:	51                   	push   ecx
c000da43:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000da46:	83 c4 10             	add    esp,0x10
c000da49:	5a                   	pop    edx
c000da4a:	5b                   	pop    ebx
c000da4b:	5e                   	pop    esi
c000da4c:	c3                   	ret    

c000da4d <Fs::setcwd(Process*, char*)>:
c000da4d:	55                   	push   ebp
c000da4e:	57                   	push   edi
c000da4f:	56                   	push   esi
c000da50:	53                   	push   ebx
c000da51:	81 ec 20 02 00 00    	sub    esp,0x220
c000da57:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000da5e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000da64:	57                   	push   edi
c000da65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000da6c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000da70:	56                   	push   esi
c000da71:	e8 46 fa ff ff       	call   c000d4bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000da76:	89 34 24             	mov    DWORD PTR [esp],esi
c000da79:	e8 32 2c ff ff       	call   c00006b0 <strlen>
c000da7e:	83 c4 10             	add    esp,0x10
c000da81:	83 f8 02             	cmp    eax,0x2
c000da84:	77 15                	ja     c000da9b <Fs::setcwd(Process*, char*)+0x4e>
c000da86:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000da8b:	83 eb 41             	sub    ebx,0x41
c000da8e:	8b 04 9d c0 91 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6e40]
c000da95:	85 c0                	test   eax,eax
c000da97:	75 1c                	jne    c000dab5 <Fs::setcwd(Process*, char*)+0x68>
c000da99:	eb 4c                	jmp    c000dae7 <Fs::setcwd(Process*, char*)+0x9a>
c000da9b:	83 ec 0c             	sub    esp,0xc
c000da9e:	56                   	push   esi
c000da9f:	e8 0c 2c ff ff       	call   c00006b0 <strlen>
c000daa4:	83 c4 10             	add    esp,0x10
c000daa7:	83 f8 03             	cmp    eax,0x3
c000daaa:	75 74                	jne    c000db20 <Fs::setcwd(Process*, char*)+0xd3>
c000daac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000dab1:	75 6d                	jne    c000db20 <Fs::setcwd(Process*, char*)+0xd3>
c000dab3:	eb d1                	jmp    c000da86 <Fs::setcwd(Process*, char*)+0x39>
c000dab5:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000dabc:	75 29                	jne    c000dae7 <Fs::setcwd(Process*, char*)+0x9a>
c000dabe:	83 ec 0c             	sub    esp,0xc
c000dac1:	68 54 53 02 c0       	push   0xc0025354
c000dac6:	e8 30 f6 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000dacb:	5a                   	pop    edx
c000dacc:	ff 34 9d c0 91 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6e40]
c000dad3:	e8 a4 2e 00 00       	call   c001097c <LogicalDisk::mount()>
c000dad8:	c7 04 24 3b 77 02 c0 	mov    DWORD PTR [esp],0xc002773b
c000dadf:	e8 17 f6 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000dae4:	83 c4 10             	add    esp,0x10
c000dae7:	b8 03 00 00 00       	mov    eax,0x3
c000daec:	83 fb 19             	cmp    ebx,0x19
c000daef:	0f 87 c6 00 00 00    	ja     c000dbbb <Fs::setcwd(Process*, char*)+0x16e>
c000daf5:	8b 14 9d c0 91 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6e40]
c000dafc:	b8 05 00 00 00       	mov    eax,0x5
c000db01:	85 d2                	test   edx,edx
c000db03:	0f 84 b2 00 00 00    	je     c000dbbb <Fs::setcwd(Process*, char*)+0x16e>
c000db09:	b8 06 00 00 00       	mov    eax,0x6
c000db0e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000db15:	0f 85 92 00 00 00    	jne    c000dbad <Fs::setcwd(Process*, char*)+0x160>
c000db1b:	e9 9b 00 00 00       	jmp    c000dbbb <Fs::setcwd(Process*, char*)+0x16e>
c000db20:	83 ec 0c             	sub    esp,0xc
c000db23:	68 14 01 00 00       	push   0x114
c000db28:	e8 ba c2 ff ff       	call   c0009de7 <malloc>
c000db2d:	83 c4 0c             	add    esp,0xc
c000db30:	89 c3                	mov    ebx,eax
c000db32:	55                   	push   ebp
c000db33:	56                   	push   esi
c000db34:	50                   	push   eax
c000db35:	e8 2c fb ff ff       	call   c000d666 <File::File(char const*, Process*)>
c000db3a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000db3f:	83 c4 0c             	add    esp,0xc
c000db42:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000db46:	50                   	push   eax
c000db47:	8d 44 24 10          	lea    eax,[esp+0x10]
c000db4b:	50                   	push   eax
c000db4c:	53                   	push   ebx
c000db4d:	e8 9a fe ff ff       	call   c000d9ec <File::stat(unsigned long long*, bool*)>
c000db52:	83 c4 10             	add    esp,0x10
c000db55:	83 f8 02             	cmp    eax,0x2
c000db58:	74 04                	je     c000db5e <Fs::setcwd(Process*, char*)+0x111>
c000db5a:	85 c0                	test   eax,eax
c000db5c:	74 1c                	je     c000db7a <Fs::setcwd(Process*, char*)+0x12d>
c000db5e:	b8 01 00 00 00       	mov    eax,0x1
c000db63:	85 db                	test   ebx,ebx
c000db65:	74 54                	je     c000dbbb <Fs::setcwd(Process*, char*)+0x16e>
c000db67:	83 ec 0c             	sub    esp,0xc
c000db6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db6c:	53                   	push   ebx
c000db6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db70:	83 c4 10             	add    esp,0x10
c000db73:	b8 01 00 00 00       	mov    eax,0x1
c000db78:	eb 41                	jmp    c000dbbb <Fs::setcwd(Process*, char*)+0x16e>
c000db7a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000db7f:	75 1c                	jne    c000db9d <Fs::setcwd(Process*, char*)+0x150>
c000db81:	b8 02 00 00 00       	mov    eax,0x2
c000db86:	85 db                	test   ebx,ebx
c000db88:	74 31                	je     c000dbbb <Fs::setcwd(Process*, char*)+0x16e>
c000db8a:	83 ec 0c             	sub    esp,0xc
c000db8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db8f:	53                   	push   ebx
c000db90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db93:	83 c4 10             	add    esp,0x10
c000db96:	b8 02 00 00 00       	mov    eax,0x2
c000db9b:	eb 1e                	jmp    c000dbbb <Fs::setcwd(Process*, char*)+0x16e>
c000db9d:	85 db                	test   ebx,ebx
c000db9f:	74 0c                	je     c000dbad <Fs::setcwd(Process*, char*)+0x160>
c000dba1:	83 ec 0c             	sub    esp,0xc
c000dba4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dba6:	53                   	push   ebx
c000dba7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dbaa:	83 c4 10             	add    esp,0x10
c000dbad:	50                   	push   eax
c000dbae:	50                   	push   eax
c000dbaf:	56                   	push   esi
c000dbb0:	57                   	push   edi
c000dbb1:	e8 9a 2b ff ff       	call   c0000750 <strcpy>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	31 c0                	xor    eax,eax
c000dbbb:	81 c4 1c 02 00 00    	add    esp,0x21c
c000dbc1:	5b                   	pop    ebx
c000dbc2:	5e                   	pop    esi
c000dbc3:	5f                   	pop    edi
c000dbc4:	5d                   	pop    ebp
c000dbc5:	c3                   	ret    

c000dbc6 <Directory::Directory(char const*, Process*)>:
c000dbc6:	83 ec 0c             	sub    esp,0xc
c000dbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbcd:	83 ec 08             	sub    esp,0x8
c000dbd0:	6a 00                	push   0x0
c000dbd2:	50                   	push   eax
c000dbd3:	e8 86 dd ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000dbd8:	83 c4 10             	add    esp,0x10
c000dbdb:	ba 5c 54 02 c0       	mov    edx,0xc002545c
c000dbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe4:	89 10                	mov    DWORD PTR [eax],edx
c000dbe6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dbea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf4:	83 c0 0d             	add    eax,0xd
c000dbf7:	83 ec 04             	sub    esp,0x4
c000dbfa:	52                   	push   edx
c000dbfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbff:	50                   	push   eax
c000dc00:	e8 b7 f8 ff ff       	call   c000d4bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000dc05:	83 c4 10             	add    esp,0x10
c000dc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dc0f:	8d 50 bf             	lea    edx,[eax-0x41]
c000dc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc16:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc20:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000dc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc28:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc2e:	0f b6 c0             	movzx  eax,al
c000dc31:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000dc38:	85 c0                	test   eax,eax
c000dc3a:	74 5e                	je     c000dc9a <Directory::Directory(char const*, Process*)+0xd4>
c000dc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc40:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc46:	0f b6 c0             	movzx  eax,al
c000dc49:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000dc50:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc56:	85 c0                	test   eax,eax
c000dc58:	75 40                	jne    c000dc9a <Directory::Directory(char const*, Process*)+0xd4>
c000dc5a:	83 ec 0c             	sub    esp,0xc
c000dc5d:	68 a4 53 02 c0       	push   0xc00253a4
c000dc62:	e8 94 f4 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000dc67:	83 c4 10             	add    esp,0x10
c000dc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc6e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc74:	0f b6 c0             	movzx  eax,al
c000dc77:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000dc7e:	83 ec 0c             	sub    esp,0xc
c000dc81:	50                   	push   eax
c000dc82:	e8 f5 2c 00 00       	call   c001097c <LogicalDisk::mount()>
c000dc87:	83 c4 10             	add    esp,0x10
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	68 3b 77 02 c0       	push   0xc002773b
c000dc92:	e8 64 f4 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000dc97:	83 c4 10             	add    esp,0x10
c000dc9a:	90                   	nop
c000dc9b:	83 c4 0c             	add    esp,0xc
c000dc9e:	c3                   	ret    
c000dc9f:	90                   	nop

c000dca0 <Directory::open()>:
c000dca0:	53                   	push   ebx
c000dca1:	b8 0b 00 00 00       	mov    eax,0xb
c000dca6:	83 ec 08             	sub    esp,0x8
c000dca9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dcb4:	80 fa 19             	cmp    dl,0x19
c000dcb7:	77 3d                	ja     c000dcf6 <Directory::open()+0x56>
c000dcb9:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000dcc0:	85 d2                	test   edx,edx
c000dcc2:	74 32                	je     c000dcf6 <Directory::open()+0x56>
c000dcc4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dcca:	85 d2                	test   edx,edx
c000dccc:	74 28                	je     c000dcf6 <Directory::open()+0x56>
c000dcce:	b8 06 00 00 00       	mov    eax,0x6
c000dcd3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dcd7:	75 1d                	jne    c000dcf6 <Directory::open()+0x56>
c000dcd9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dcdf:	50                   	push   eax
c000dce0:	8b 02                	mov    eax,DWORD PTR [edx]
c000dce2:	51                   	push   ecx
c000dce3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dce6:	51                   	push   ecx
c000dce7:	52                   	push   edx
c000dce8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dceb:	83 c4 10             	add    esp,0x10
c000dcee:	85 c0                	test   eax,eax
c000dcf0:	75 04                	jne    c000dcf6 <Directory::open()+0x56>
c000dcf2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dcf6:	83 c4 08             	add    esp,0x8
c000dcf9:	5b                   	pop    ebx
c000dcfa:	c3                   	ret    
c000dcfb:	90                   	nop

c000dcfc <Directory::close()>:
c000dcfc:	53                   	push   ebx
c000dcfd:	b8 0b 00 00 00       	mov    eax,0xb
c000dd02:	83 ec 08             	sub    esp,0x8
c000dd05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dd09:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd10:	80 fa 19             	cmp    dl,0x19
c000dd13:	77 41                	ja     c000dd56 <Directory::close()+0x5a>
c000dd15:	8b 1c 95 c0 91 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e40]
c000dd1c:	85 db                	test   ebx,ebx
c000dd1e:	74 36                	je     c000dd56 <Directory::close()+0x5a>
c000dd20:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dd27:	74 2d                	je     c000dd56 <Directory::close()+0x5a>
c000dd29:	b8 05 00 00 00       	mov    eax,0x5
c000dd2e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dd32:	74 22                	je     c000dd56 <Directory::close()+0x5a>
c000dd34:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dd38:	8b 04 95 c0 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e40]
c000dd3f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dd45:	53                   	push   ebx
c000dd46:	53                   	push   ebx
c000dd47:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd49:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dd4f:	50                   	push   eax
c000dd50:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	83 c4 08             	add    esp,0x8
c000dd59:	5b                   	pop    ebx
c000dd5a:	c3                   	ret    
c000dd5b:	90                   	nop

c000dd5c <Directory::unlink()>:
c000dd5c:	83 ec 0c             	sub    esp,0xc
c000dd5f:	b8 0b 00 00 00       	mov    eax,0xb
c000dd64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd68:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd6f:	80 f9 19             	cmp    cl,0x19
c000dd72:	77 2f                	ja     c000dda3 <Directory::unlink()+0x47>
c000dd74:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000dd7b:	85 c9                	test   ecx,ecx
c000dd7d:	74 24                	je     c000dda3 <Directory::unlink()+0x47>
c000dd7f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd85:	85 c9                	test   ecx,ecx
c000dd87:	74 1a                	je     c000dda3 <Directory::unlink()+0x47>
c000dd89:	b8 06 00 00 00       	mov    eax,0x6
c000dd8e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd92:	75 0f                	jne    c000dda3 <Directory::unlink()+0x47>
c000dd94:	83 c2 0d             	add    edx,0xd
c000dd97:	50                   	push   eax
c000dd98:	50                   	push   eax
c000dd99:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd9b:	52                   	push   edx
c000dd9c:	51                   	push   ecx
c000dd9d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dda0:	83 c4 10             	add    esp,0x10
c000dda3:	83 c4 0c             	add    esp,0xc
c000dda6:	c3                   	ret    
c000dda7:	90                   	nop

c000dda8 <Directory::rename(char const*)>:
c000dda8:	83 ec 0c             	sub    esp,0xc
c000ddab:	b8 0b 00 00 00       	mov    eax,0xb
c000ddb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddbb:	80 f9 19             	cmp    cl,0x19
c000ddbe:	77 32                	ja     c000ddf2 <Directory::rename(char const*)+0x4a>
c000ddc0:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000ddc7:	85 c9                	test   ecx,ecx
c000ddc9:	74 27                	je     c000ddf2 <Directory::rename(char const*)+0x4a>
c000ddcb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ddd1:	85 c9                	test   ecx,ecx
c000ddd3:	74 1d                	je     c000ddf2 <Directory::rename(char const*)+0x4a>
c000ddd5:	b8 06 00 00 00       	mov    eax,0x6
c000ddda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ddde:	75 12                	jne    c000ddf2 <Directory::rename(char const*)+0x4a>
c000dde0:	83 c2 0d             	add    edx,0xd
c000dde3:	50                   	push   eax
c000dde4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dde6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddea:	52                   	push   edx
c000ddeb:	51                   	push   ecx
c000ddec:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ddef:	83 c4 10             	add    esp,0x10
c000ddf2:	83 c4 0c             	add    esp,0xc
c000ddf5:	c3                   	ret    

c000ddf6 <Directory::exists()>:
c000ddf6:	83 ec 0c             	sub    esp,0xc
c000ddf9:	31 c0                	xor    eax,eax
c000ddfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000de06:	80 f9 19             	cmp    cl,0x19
c000de09:	77 24                	ja     c000de2f <Directory::exists()+0x39>
c000de0b:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000de12:	85 c9                	test   ecx,ecx
c000de14:	74 19                	je     c000de2f <Directory::exists()+0x39>
c000de16:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000de1c:	85 c9                	test   ecx,ecx
c000de1e:	74 0f                	je     c000de2f <Directory::exists()+0x39>
c000de20:	83 c2 0d             	add    edx,0xd
c000de23:	50                   	push   eax
c000de24:	50                   	push   eax
c000de25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de27:	52                   	push   edx
c000de28:	51                   	push   ecx
c000de29:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000de2c:	83 c4 10             	add    esp,0x10
c000de2f:	83 c4 0c             	add    esp,0xc
c000de32:	c3                   	ret    
c000de33:	90                   	nop

c000de34 <Directory::read(dirent*)>:
c000de34:	83 ec 1c             	sub    esp,0x1c
c000de37:	b8 0b 00 00 00       	mov    eax,0xb
c000de3c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000de40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000de47:	80 fa 19             	cmp    dl,0x19
c000de4a:	77 30                	ja     c000de7c <Directory::read(dirent*)+0x48>
c000de4c:	8b 14 95 c0 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e40]
c000de53:	85 d2                	test   edx,edx
c000de55:	74 25                	je     c000de7c <Directory::read(dirent*)+0x48>
c000de57:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000de5e:	74 1c                	je     c000de7c <Directory::read(dirent*)+0x48>
c000de60:	83 ec 0c             	sub    esp,0xc
c000de63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de65:	8d 54 24 18          	lea    edx,[esp+0x18]
c000de69:	52                   	push   edx
c000de6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de6e:	6a 00                	push   0x0
c000de70:	68 10 01 00 00       	push   0x110
c000de75:	51                   	push   ecx
c000de76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000de79:	83 c4 20             	add    esp,0x20
c000de7c:	83 c4 1c             	add    esp,0x1c
c000de7f:	c3                   	ret    

c000de80 <Directory::create()>:
c000de80:	83 ec 0c             	sub    esp,0xc
c000de83:	b8 0b 00 00 00       	mov    eax,0xb
c000de88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000de93:	80 f9 19             	cmp    cl,0x19
c000de96:	77 2f                	ja     c000dec7 <Directory::create()+0x47>
c000de98:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c000de9f:	85 c9                	test   ecx,ecx
c000dea1:	74 24                	je     c000dec7 <Directory::create()+0x47>
c000dea3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dea9:	85 c9                	test   ecx,ecx
c000deab:	74 1a                	je     c000dec7 <Directory::create()+0x47>
c000dead:	b8 06 00 00 00       	mov    eax,0x6
c000deb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000deb6:	75 0f                	jne    c000dec7 <Directory::create()+0x47>
c000deb8:	83 c2 0d             	add    edx,0xd
c000debb:	50                   	push   eax
c000debc:	50                   	push   eax
c000debd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000debf:	52                   	push   edx
c000dec0:	51                   	push   ecx
c000dec1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dec4:	83 c4 10             	add    esp,0x10
c000dec7:	83 c4 0c             	add    esp,0xc
c000deca:	c3                   	ret    
c000decb:	90                   	nop

c000decc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000decc:	b8 0a 00 00 00       	mov    eax,0xa
c000ded1:	c3                   	ret    
c000ded2:	66 90                	xchg   ax,ax

c000ded4 <Bus::Bus(char const*)>:
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedb:	83 ec 08             	sub    esp,0x8
c000dede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee2:	50                   	push   eax
c000dee3:	e8 8a 09 00 00       	call   c000e872 <Device::Device(char const*)>
c000dee8:	83 c4 10             	add    esp,0x10
c000deeb:	ba 78 54 02 c0       	mov    edx,0xc0025478
c000def0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def4:	89 10                	mov    DWORD PTR [eax],edx
c000def6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df04:	90                   	nop
c000df05:	83 c4 0c             	add    esp,0xc
c000df08:	c3                   	ret    
c000df09:	90                   	nop
c000df0a:	66 90                	xchg   ax,ax

c000df0c <Bus::~Bus()>:
c000df0c:	83 ec 0c             	sub    esp,0xc
c000df0f:	ba 78 54 02 c0       	mov    edx,0xc0025478
c000df14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df18:	89 10                	mov    DWORD PTR [eax],edx
c000df1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1e:	83 ec 0c             	sub    esp,0xc
c000df21:	50                   	push   eax
c000df22:	e8 15 06 00 00       	call   c000e53c <Device::~Device()>
c000df27:	83 c4 10             	add    esp,0x10
c000df2a:	90                   	nop
c000df2b:	83 c4 0c             	add    esp,0xc
c000df2e:	c3                   	ret    
c000df2f:	90                   	nop

c000df30 <Bus::~Bus()>:
c000df30:	83 ec 0c             	sub    esp,0xc
c000df33:	83 ec 0c             	sub    esp,0xc
c000df36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3a:	e8 cd ff ff ff       	call   c000df0c <Bus::~Bus()>
c000df3f:	83 c4 10             	add    esp,0x10
c000df42:	83 ec 08             	sub    esp,0x8
c000df45:	68 58 01 00 00       	push   0x158
c000df4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df4e:	e8 c7 f0 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000df53:	83 c4 10             	add    esp,0x10
c000df56:	83 c4 0c             	add    esp,0xc
c000df59:	c3                   	ret    
c000df5a:	66 90                	xchg   ax,ax

c000df5c <Buzzer::Buzzer(char const*)>:
c000df5c:	83 ec 0c             	sub    esp,0xc
c000df5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df63:	83 ec 08             	sub    esp,0x8
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	50                   	push   eax
c000df6b:	e8 02 09 00 00       	call   c000e872 <Device::Device(char const*)>
c000df70:	83 c4 10             	add    esp,0x10
c000df73:	ba a4 54 02 c0       	mov    edx,0xc00254a4
c000df78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7c:	89 10                	mov    DWORD PTR [eax],edx
c000df7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000df8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df90:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000df9a:	90                   	nop
c000df9b:	83 c4 0c             	add    esp,0xc
c000df9e:	c3                   	ret    
c000df9f:	90                   	nop

c000dfa0 <Buzzer::~Buzzer()>:
c000dfa0:	83 ec 0c             	sub    esp,0xc
c000dfa3:	ba a4 54 02 c0       	mov    edx,0xc00254a4
c000dfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfac:	89 10                	mov    DWORD PTR [eax],edx
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	83 ec 0c             	sub    esp,0xc
c000dfb5:	50                   	push   eax
c000dfb6:	e8 81 05 00 00       	call   c000e53c <Device::~Device()>
c000dfbb:	83 c4 10             	add    esp,0x10
c000dfbe:	90                   	nop
c000dfbf:	83 c4 0c             	add    esp,0xc
c000dfc2:	c3                   	ret    
c000dfc3:	90                   	nop

c000dfc4 <Buzzer::~Buzzer()>:
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	83 ec 0c             	sub    esp,0xc
c000dfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfce:	e8 cd ff ff ff       	call   c000dfa0 <Buzzer::~Buzzer()>
c000dfd3:	83 c4 10             	add    esp,0x10
c000dfd6:	83 ec 08             	sub    esp,0x8
c000dfd9:	68 5c 01 00 00       	push   0x15c
c000dfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe2:	e8 33 f0 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	83 c4 0c             	add    esp,0xc
c000dfed:	c3                   	ret    

c000dfee <Buzzer::stop()>:
c000dfee:	83 ec 14             	sub    esp,0x14
c000dff1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dff5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dff7:	6a 00                	push   0x0
c000dff9:	50                   	push   eax
c000dffa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dffd:	83 c4 1c             	add    esp,0x1c
c000e000:	c3                   	ret    

c000e001 <beepThread(void*)>:
c000e001:	53                   	push   ebx
c000e002:	83 ec 08             	sub    esp,0x8
c000e005:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000e00a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e00e:	48                   	dec    eax
c000e00f:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000e014:	75 02                	jne    c000e018 <beepThread(void*)+0x17>
c000e016:	fb                   	sti    
c000e017:	90                   	nop
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000e022:	50                   	push   eax
c000e023:	e8 0c b2 00 00       	call   c0019234 <milliTenthSleep(unsigned int)>
c000e028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e02b:	e8 be ff ff ff       	call   c000dfee <Buzzer::stop()>
c000e030:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000e038:	83 c4 18             	add    esp,0x18
c000e03b:	5b                   	pop    ebx
c000e03c:	e9 f3 b0 00 00       	jmp    c0019134 <blockTask(TaskState)>
c000e041:	90                   	nop

c000e042 <Buzzer::beep(int, int, bool)>:
c000e042:	57                   	push   edi
c000e043:	56                   	push   esi
c000e044:	53                   	push   ebx
c000e045:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e049:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e04d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e051:	50                   	push   eax
c000e052:	50                   	push   eax
c000e053:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e059:	53                   	push   ebx
c000e05a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e05d:	83 c4 10             	add    esp,0x10
c000e060:	89 f8                	mov    eax,edi
c000e062:	84 c0                	test   al,al
c000e064:	74 1e                	je     c000e084 <Buzzer::beep(int, int, bool)+0x42>
c000e066:	83 ec 0c             	sub    esp,0xc
c000e069:	6b f6 0a             	imul   esi,esi,0xa
c000e06c:	56                   	push   esi
c000e06d:	e8 c2 b1 00 00       	call   c0019234 <milliTenthSleep(unsigned int)>
c000e072:	83 c4 10             	add    esp,0x10
c000e075:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e079:	5b                   	pop    ebx
c000e07a:	5e                   	pop    esi
c000e07b:	5f                   	pop    edi
c000e07c:	e9 6d ff ff ff       	jmp    c000dfee <Buzzer::stop()>
c000e081:	8d 76 00             	lea    esi,[esi+0x0]
c000e084:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e08a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000e08f:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000e097:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000e09b:	c7 44 24 14 01 e0 00 c0 	mov    DWORD PTR [esp+0x14],0xc000e001
c000e0a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0a7:	5b                   	pop    ebx
c000e0a8:	5e                   	pop    esi
c000e0a9:	5f                   	pop    edi
c000e0aa:	e9 71 ac 00 00       	jmp    c0018d20 <Process::createThread(void (*)(void*), void*, int)>
c000e0af:	90                   	nop

c000e0b0 <User::loadClockSettings(int)>:
c000e0b0:	53                   	push   ebx
c000e0b1:	83 ec 14             	sub    esp,0x14
c000e0b4:	68 14 01 00 00       	push   0x114
c000e0b9:	e8 29 bd ff ff       	call   c0009de7 <malloc>
c000e0be:	83 c4 0c             	add    esp,0xc
c000e0c1:	89 c3                	mov    ebx,eax
c000e0c3:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c000e0c9:	68 cc 54 02 c0       	push   0xc00254cc
c000e0ce:	50                   	push   eax
c000e0cf:	e8 92 f5 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c000e0d4:	58                   	pop    eax
c000e0d5:	5a                   	pop    edx
c000e0d6:	6a 01                	push   0x1
c000e0d8:	53                   	push   ebx
c000e0d9:	e8 62 f6 ff ff       	call   c000d740 <File::open(FileOpenMode)>
c000e0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0e1:	e8 b8 f6 ff ff       	call   c000d79e <File::close()>
c000e0e6:	83 c4 10             	add    esp,0x10
c000e0e9:	85 db                	test   ebx,ebx
c000e0eb:	74 0f                	je     c000e0fc <User::loadClockSettings(int)+0x4c>
c000e0ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e0f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e0f6:	83 c4 08             	add    esp,0x8
c000e0f9:	5b                   	pop    ebx
c000e0fa:	ff e0                	jmp    eax
c000e0fc:	83 c4 08             	add    esp,0x8
c000e0ff:	5b                   	pop    ebx
c000e100:	c3                   	ret    
c000e101:	90                   	nop

c000e102 <Clock::Clock(char const*)>:
c000e102:	83 ec 0c             	sub    esp,0xc
c000e105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e109:	83 ec 08             	sub    esp,0x8
c000e10c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e110:	50                   	push   eax
c000e111:	e8 5c 07 00 00       	call   c000e872 <Device::Device(char const*)>
c000e116:	83 c4 10             	add    esp,0x10
c000e119:	ba f4 54 02 c0       	mov    edx,0xc00254f4
c000e11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e122:	89 10                	mov    DWORD PTR [eax],edx
c000e124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e128:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e132:	90                   	nop
c000e133:	83 c4 0c             	add    esp,0xc
c000e136:	c3                   	ret    
c000e137:	90                   	nop

c000e138 <Clock::~Clock()>:
c000e138:	83 ec 0c             	sub    esp,0xc
c000e13b:	ba f4 54 02 c0       	mov    edx,0xc00254f4
c000e140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e144:	89 10                	mov    DWORD PTR [eax],edx
c000e146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	50                   	push   eax
c000e14e:	e8 e9 03 00 00       	call   c000e53c <Device::~Device()>
c000e153:	83 c4 10             	add    esp,0x10
c000e156:	90                   	nop
c000e157:	83 c4 0c             	add    esp,0xc
c000e15a:	c3                   	ret    
c000e15b:	90                   	nop

c000e15c <Clock::~Clock()>:
c000e15c:	83 ec 0c             	sub    esp,0xc
c000e15f:	83 ec 0c             	sub    esp,0xc
c000e162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e166:	e8 cd ff ff ff       	call   c000e138 <Clock::~Clock()>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	83 ec 08             	sub    esp,0x8
c000e171:	68 58 01 00 00       	push   0x158
c000e176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17a:	e8 9b ee ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000e17f:	83 c4 10             	add    esp,0x10
c000e182:	83 c4 0c             	add    esp,0xc
c000e185:	c3                   	ret    

c000e186 <Clock::timeInSecondsLocal()>:
c000e186:	53                   	push   ebx
c000e187:	83 ec 14             	sub    esp,0x14
c000e18a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e18e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e190:	50                   	push   eax
c000e191:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e194:	0f b6 0d 40 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028d40
c000e19b:	03 0d 44 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d44
c000e1a1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1a7:	89 cb                	mov    ebx,ecx
c000e1a9:	c1 fb 1f             	sar    ebx,0x1f
c000e1ac:	01 c8                	add    eax,ecx
c000e1ae:	11 da                	adc    edx,ebx
c000e1b0:	83 c4 10             	add    esp,0x10
c000e1b3:	31 c9                	xor    ecx,ecx
c000e1b5:	80 3d 41 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d41,0x0
c000e1bc:	74 05                	je     c000e1c3 <Clock::timeInSecondsLocal()+0x3d>
c000e1be:	b9 08 07 00 00       	mov    ecx,0x708
c000e1c3:	31 db                	xor    ebx,ebx
c000e1c5:	01 c8                	add    eax,ecx
c000e1c7:	11 da                	adc    edx,ebx
c000e1c9:	83 c4 08             	add    esp,0x8
c000e1cc:	5b                   	pop    ebx
c000e1cd:	c3                   	ret    

c000e1ce <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e1ce:	57                   	push   edi
c000e1cf:	56                   	push   esi
c000e1d0:	53                   	push   ebx
c000e1d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e1d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e1db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1df:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e1e2:	0f b6 05 40 8d 02 c0 	movzx  eax,BYTE PTR ds:0xc0028d40
c000e1e9:	03 05 44 8d 02 c0    	add    eax,DWORD PTR ds:0xc0028d44
c000e1ef:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e1f5:	99                   	cdq    
c000e1f6:	29 c6                	sub    esi,eax
c000e1f8:	19 d7                	sbb    edi,edx
c000e1fa:	89 f0                	mov    eax,esi
c000e1fc:	89 fa                	mov    edx,edi
c000e1fe:	31 f6                	xor    esi,esi
c000e200:	80 3d 41 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d41,0x0
c000e207:	74 05                	je     c000e20e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e209:	be 08 07 00 00       	mov    esi,0x708
c000e20e:	31 ff                	xor    edi,edi
c000e210:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e214:	29 f0                	sub    eax,esi
c000e216:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e21a:	19 fa                	sbb    edx,edi
c000e21c:	89 d8                	mov    eax,ebx
c000e21e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e222:	5b                   	pop    ebx
c000e223:	5e                   	pop    esi
c000e224:	5f                   	pop    edi
c000e225:	ff e0                	jmp    eax

c000e227 <datetimeToSeconds(datetime_t)>:
c000e227:	55                   	push   ebp
c000e228:	57                   	push   edi
c000e229:	56                   	push   esi
c000e22a:	53                   	push   ebx
c000e22b:	83 ec 14             	sub    esp,0x14
c000e22e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e232:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e236:	89 d3                	mov    ebx,edx
c000e238:	0f b6 c6             	movzx  eax,dh
c000e23b:	c1 eb 10             	shr    ebx,0x10
c000e23e:	48                   	dec    eax
c000e23f:	66 81 eb 6c 07       	sub    bx,0x76c
c000e244:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e248:	0f b6 f5             	movzx  esi,ch
c000e24b:	89 cf                	mov    edi,ecx
c000e24d:	6b f6 3c             	imul   esi,esi,0x3c
c000e250:	c1 ef 10             	shr    edi,0x10
c000e253:	0f b6 c9             	movzx  ecx,cl
c000e256:	89 f8                	mov    eax,edi
c000e258:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e25e:	0f b6 f8             	movzx  edi,al
c000e261:	0f b6 d2             	movzx  edx,dl
c000e264:	01 fe                	add    esi,edi
c000e266:	01 f1                	add    ecx,esi
c000e268:	0f b7 f3             	movzx  esi,bx
c000e26b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e26f:	c1 f9 1f             	sar    ecx,0x1f
c000e272:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e277:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e27b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e280:	8b 0c 8d 40 55 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdaac0]
c000e287:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e28b:	76 29                	jbe    c000e2b6 <datetimeToSeconds(datetime_t)+0x8f>
c000e28d:	f6 c3 03             	test   bl,0x3
c000e290:	75 24                	jne    c000e2b6 <datetimeToSeconds(datetime_t)+0x8f>
c000e292:	31 d2                	xor    edx,edx
c000e294:	bf 64 00 00 00       	mov    edi,0x64
c000e299:	89 d8                	mov    eax,ebx
c000e29b:	66 f7 f7             	div    di
c000e29e:	66 85 d2             	test   dx,dx
c000e2a1:	75 12                	jne    c000e2b5 <datetimeToSeconds(datetime_t)+0x8e>
c000e2a3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e2a9:	bf 90 01 00 00       	mov    edi,0x190
c000e2ae:	99                   	cdq    
c000e2af:	f7 ff                	idiv   edi
c000e2b1:	85 d2                	test   edx,edx
c000e2b3:	75 01                	jne    c000e2b6 <datetimeToSeconds(datetime_t)+0x8f>
c000e2b5:	41                   	inc    ecx
c000e2b6:	66 83 fb 46          	cmp    bx,0x46
c000e2ba:	76 45                	jbe    c000e301 <datetimeToSeconds(datetime_t)+0xda>
c000e2bc:	bb 46 00 00 00       	mov    ebx,0x46
c000e2c1:	bf 64 00 00 00       	mov    edi,0x64
c000e2c6:	bd 90 01 00 00       	mov    ebp,0x190
c000e2cb:	b8 6d 01 00 00       	mov    eax,0x16d
c000e2d0:	f6 c3 03             	test   bl,0x3
c000e2d3:	75 23                	jne    c000e2f8 <datetimeToSeconds(datetime_t)+0xd1>
c000e2d5:	89 d8                	mov    eax,ebx
c000e2d7:	99                   	cdq    
c000e2d8:	f7 ff                	idiv   edi
c000e2da:	b8 6e 01 00 00       	mov    eax,0x16e
c000e2df:	85 d2                	test   edx,edx
c000e2e1:	75 15                	jne    c000e2f8 <datetimeToSeconds(datetime_t)+0xd1>
c000e2e3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e2e9:	99                   	cdq    
c000e2ea:	f7 fd                	idiv   ebp
c000e2ec:	83 fa 01             	cmp    edx,0x1
c000e2ef:	19 c0                	sbb    eax,eax
c000e2f1:	f7 d0                	not    eax
c000e2f3:	05 6e 01 00 00       	add    eax,0x16e
c000e2f8:	01 c1                	add    ecx,eax
c000e2fa:	43                   	inc    ebx
c000e2fb:	39 f3                	cmp    ebx,esi
c000e2fd:	7c cc                	jl     c000e2cb <datetimeToSeconds(datetime_t)+0xa4>
c000e2ff:	eb 35                	jmp    c000e336 <datetimeToSeconds(datetime_t)+0x10f>
c000e301:	74 33                	je     c000e336 <datetimeToSeconds(datetime_t)+0x10f>
c000e303:	b8 45 00 00 00       	mov    eax,0x45
c000e308:	89 c2                	mov    edx,eax
c000e30a:	83 e2 03             	and    edx,0x3
c000e30d:	39 f0                	cmp    eax,esi
c000e30f:	7e 0f                	jle    c000e320 <datetimeToSeconds(datetime_t)+0xf9>
c000e311:	83 fa 01             	cmp    edx,0x1
c000e314:	19 d2                	sbb    edx,edx
c000e316:	48                   	dec    eax
c000e317:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e31e:	eb e8                	jmp    c000e308 <datetimeToSeconds(datetime_t)+0xe1>
c000e320:	b8 6d 01 00 00       	mov    eax,0x16d
c000e325:	85 d2                	test   edx,edx
c000e327:	75 0b                	jne    c000e334 <datetimeToSeconds(datetime_t)+0x10d>
c000e329:	66 83 fb 01          	cmp    bx,0x1
c000e32d:	19 c0                	sbb    eax,eax
c000e32f:	05 6e 01 00 00       	add    eax,0x16e
c000e334:	29 c1                	sub    ecx,eax
c000e336:	b8 80 51 01 00       	mov    eax,0x15180
c000e33b:	f7 e9                	imul   ecx
c000e33d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e341:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e345:	83 c4 14             	add    esp,0x14
c000e348:	5b                   	pop    ebx
c000e349:	5e                   	pop    esi
c000e34a:	5f                   	pop    edi
c000e34b:	5d                   	pop    ebp
c000e34c:	c3                   	ret    
c000e34d:	90                   	nop

c000e34e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e34e:	57                   	push   edi
c000e34f:	56                   	push   esi
c000e350:	53                   	push   ebx
c000e351:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e355:	8b 06                	mov    eax,DWORD PTR [esi]
c000e357:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e35a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e35e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e362:	e8 c0 fe ff ff       	call   c000e227 <datetimeToSeconds(datetime_t)>
c000e367:	59                   	pop    ecx
c000e368:	0f b6 0d 40 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028d40
c000e36f:	5b                   	pop    ebx
c000e370:	03 0d 44 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d44
c000e376:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e37c:	89 cb                	mov    ebx,ecx
c000e37e:	c1 fb 1f             	sar    ebx,0x1f
c000e381:	29 c8                	sub    eax,ecx
c000e383:	19 da                	sbb    edx,ebx
c000e385:	31 c9                	xor    ecx,ecx
c000e387:	80 3d 41 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d41,0x0
c000e38e:	74 05                	je     c000e395 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e390:	b9 08 07 00 00       	mov    ecx,0x708
c000e395:	31 db                	xor    ebx,ebx
c000e397:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e39b:	29 c8                	sub    eax,ecx
c000e39d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e3a1:	19 da                	sbb    edx,ebx
c000e3a3:	89 f8                	mov    eax,edi
c000e3a5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e3a9:	5b                   	pop    ebx
c000e3aa:	5e                   	pop    esi
c000e3ab:	5f                   	pop    edi
c000e3ac:	ff e0                	jmp    eax

c000e3ae <secondsToDatetime(unsigned long long)>:
c000e3ae:	55                   	push   ebp
c000e3af:	57                   	push   edi
c000e3b0:	56                   	push   esi
c000e3b1:	53                   	push   ebx
c000e3b2:	83 ec 1c             	sub    esp,0x1c
c000e3b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e3b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e3bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e3c1:	6a 00                	push   0x0
c000e3c3:	68 80 51 01 00       	push   0x15180
c000e3c8:	55                   	push   ebp
c000e3c9:	57                   	push   edi
c000e3ca:	e8 01 4c 01 00       	call   c0022fd0 <__udivdi3>
c000e3cf:	83 c4 10             	add    esp,0x10
c000e3d2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e3d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3dc:	6a 00                	push   0x0
c000e3de:	68 80 51 01 00       	push   0x15180
c000e3e3:	55                   	push   ebp
c000e3e4:	57                   	push   edi
c000e3e5:	bf 10 0e 00 00       	mov    edi,0xe10
c000e3ea:	e8 e1 4c 01 00       	call   c00230d0 <__umoddi3>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	99                   	cdq    
c000e3f3:	f7 ff                	idiv   edi
c000e3f5:	bf 3c 00 00 00       	mov    edi,0x3c
c000e3fa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e3fd:	89 d0                	mov    eax,edx
c000e3ff:	99                   	cdq    
c000e400:	f7 ff                	idiv   edi
c000e402:	85 db                	test   ebx,ebx
c000e404:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e407:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e40a:	79 11                	jns    c000e41d <secondsToDatetime(unsigned long long)+0x6f>
c000e40c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e410:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e416:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e41b:	eb 07                	jmp    c000e424 <secondsToDatetime(unsigned long long)+0x76>
c000e41d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e422:	89 d8                	mov    eax,ebx
c000e424:	bf b4 05 00 00       	mov    edi,0x5b4
c000e429:	99                   	cdq    
c000e42a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e42f:	f7 f9                	idiv   ecx
c000e431:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e436:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e43a:	31 d2                	xor    edx,edx
c000e43c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e444:	01 c3                	add    ebx,eax
c000e446:	89 d8                	mov    eax,ebx
c000e448:	f7 f1                	div    ecx
c000e44a:	31 d2                	xor    edx,edx
c000e44c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e44f:	89 d8                	mov    eax,ebx
c000e451:	f7 f7                	div    edi
c000e453:	31 d2                	xor    edx,edx
c000e455:	29 c1                	sub    ecx,eax
c000e457:	89 d8                	mov    eax,ebx
c000e459:	f7 f5                	div    ebp
c000e45b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e460:	29 c1                	sub    ecx,eax
c000e462:	31 d2                	xor    edx,edx
c000e464:	89 c8                	mov    eax,ecx
c000e466:	f7 f5                	div    ebp
c000e468:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e471:	31 d2                	xor    edx,edx
c000e473:	89 c8                	mov    eax,ecx
c000e475:	f7 f5                	div    ebp
c000e477:	31 d2                	xor    edx,edx
c000e479:	01 c3                	add    ebx,eax
c000e47b:	89 c8                	mov    eax,ecx
c000e47d:	f7 f7                	div    edi
c000e47f:	bf 99 00 00 00       	mov    edi,0x99
c000e484:	29 c3                	sub    ebx,eax
c000e486:	31 d2                	xor    edx,edx
c000e488:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e490:	29 c3                	sub    ebx,eax
c000e492:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e495:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e498:	bb 05 00 00 00       	mov    ebx,0x5
c000e49d:	83 c1 02             	add    ecx,0x2
c000e4a0:	89 c8                	mov    eax,ecx
c000e4a2:	f7 f7                	div    edi
c000e4a4:	31 d2                	xor    edx,edx
c000e4a6:	89 c7                	mov    edi,eax
c000e4a8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e4ae:	83 c0 02             	add    eax,0x2
c000e4b1:	f7 f3                	div    ebx
c000e4b3:	89 eb                	mov    ebx,ebp
c000e4b5:	29 c3                	sub    ebx,eax
c000e4b7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e4bd:	88 1e                	mov    BYTE PTR [esi],bl
c000e4bf:	19 c0                	sbb    eax,eax
c000e4c1:	31 d2                	xor    edx,edx
c000e4c3:	83 e0 0c             	and    eax,0xc
c000e4c6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e4ca:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e4d2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e4d6:	83 f9 01             	cmp    ecx,0x1
c000e4d9:	0f 96 c2             	setbe  dl
c000e4dc:	41                   	inc    ecx
c000e4dd:	01 d0                	add    eax,edx
c000e4df:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e4e2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e4e6:	83 c4 1c             	add    esp,0x1c
c000e4e9:	89 f0                	mov    eax,esi
c000e4eb:	5b                   	pop    ebx
c000e4ec:	5e                   	pop    esi
c000e4ed:	5f                   	pop    edi
c000e4ee:	5d                   	pop    ebp
c000e4ef:	c2 04 00             	ret    0x4

c000e4f2 <Clock::timeInDatetimeLocal()>:
c000e4f2:	53                   	push   ebx
c000e4f3:	83 ec 14             	sub    esp,0x14
c000e4f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e4fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4fe:	e8 83 fc ff ff       	call   c000e186 <Clock::timeInSecondsLocal()>
c000e503:	83 c4 0c             	add    esp,0xc
c000e506:	52                   	push   edx
c000e507:	50                   	push   eax
c000e508:	53                   	push   ebx
c000e509:	e8 a0 fe ff ff       	call   c000e3ae <secondsToDatetime(unsigned long long)>
c000e50e:	89 d8                	mov    eax,ebx
c000e510:	83 c4 14             	add    esp,0x14
c000e513:	5b                   	pop    ebx
c000e514:	c2 04 00             	ret    0x4
c000e517:	90                   	nop

c000e518 <Device::hibernate()>:
c000e518:	c3                   	ret    
c000e519:	90                   	nop

c000e51a <Device::wake()>:
c000e51a:	c3                   	ret    
c000e51b:	90                   	nop

c000e51c <Device::detect()>:
c000e51c:	c3                   	ret    
c000e51d:	90                   	nop

c000e51e <Device::disableLegacy()>:
c000e51e:	c3                   	ret    
c000e51f:	90                   	nop

c000e520 <Device::powerSaving(PowerSavingLevel)>:
c000e520:	c3                   	ret    
c000e521:	90                   	nop

c000e522 <DriverlessDevice::close(int, int, void*)>:
c000e522:	31 c0                	xor    eax,eax
c000e524:	c3                   	ret    
c000e525:	90                   	nop

c000e526 <DriverlessDevice::detect()>:
c000e526:	c3                   	ret    
c000e527:	90                   	nop

c000e528 <DriverlessDevice::open(int, int, void*)>:
c000e528:	83 ec 18             	sub    esp,0x18
c000e52b:	68 70 55 02 c0       	push   0xc0025570
c000e530:	e8 a8 6c 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000e535:	83 c8 ff             	or     eax,0xffffffff
c000e538:	83 c4 1c             	add    esp,0x1c
c000e53b:	c3                   	ret    

c000e53c <Device::~Device()>:
c000e53c:	ba d0 55 02 c0       	mov    edx,0xc00255d0
c000e541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e545:	89 10                	mov    DWORD PTR [eax],edx
c000e547:	90                   	nop
c000e548:	c3                   	ret    
c000e549:	90                   	nop

c000e54a <Device::~Device()>:
c000e54a:	83 ec 0c             	sub    esp,0xc
c000e54d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e551:	e8 e6 ff ff ff       	call   c000e53c <Device::~Device()>
c000e556:	83 c4 04             	add    esp,0x4
c000e559:	83 ec 08             	sub    esp,0x8
c000e55c:	68 58 01 00 00       	push   0x158
c000e561:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e565:	e8 b0 ea ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000e56a:	83 c4 10             	add    esp,0x10
c000e56d:	83 c4 0c             	add    esp,0xc
c000e570:	c3                   	ret    
c000e571:	90                   	nop

c000e572 <Device::findAndLoadDriver()>:
c000e572:	c7 44 24 04 8e 55 02 c0 	mov    DWORD PTR [esp+0x4],0xc002558e
c000e57a:	e9 7c eb ff ff       	jmp    c000d0fb <Dbg::kprintf(char const*, ...)>
c000e57f:	90                   	nop

c000e580 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e580:	57                   	push   edi
c000e581:	b9 09 00 00 00       	mov    ecx,0x9
c000e586:	56                   	push   esi
c000e587:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e58b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e58f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e599:	81 c7 18 01 00 00    	add    edi,0x118
c000e59f:	fc                   	cld    
c000e5a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e5a2:	5e                   	pop    esi
c000e5a3:	5f                   	pop    edi
c000e5a4:	c3                   	ret    
c000e5a5:	90                   	nop

c000e5a6 <Device::preOpenACPI(void*, char*, char*)>:
c000e5a6:	57                   	push   edi
c000e5a7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e5ac:	56                   	push   esi
c000e5ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5b5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e5bf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e5c5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e5cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e5cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d1:	b9 0e 00 00 00       	mov    ecx,0xe
c000e5d6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e5dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5e2:	5e                   	pop    esi
c000e5e3:	5f                   	pop    edi
c000e5e4:	c3                   	ret    
c000e5e5:	90                   	nop

c000e5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5ea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e5ef:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e5f6:	75 0b                	jne    c000e603 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e5f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e601:	eb 1e                	jmp    c000e621 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e603:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000e608:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e60e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e614:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e616:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e61a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e61e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e621:	ff e0                	jmp    eax
c000e623:	90                   	nop

c000e624 <Device::getParent()>:
c000e624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e628:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e62e:	c3                   	ret    
c000e62f:	90                   	nop

c000e630 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e634:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e639:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e640:	75 0b                	jne    c000e64d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e642:	8b 00                	mov    eax,DWORD PTR [eax]
c000e644:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e648:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e64b:	eb 1e                	jmp    c000e66b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e64d:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000e652:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e658:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e65e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e660:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e664:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e668:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e66b:	ff e0                	jmp    eax
c000e66d:	90                   	nop

c000e66e <Device::addChild(Device*)>:
c000e66e:	53                   	push   ebx
c000e66f:	83 ec 08             	sub    esp,0x8
c000e672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e676:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e67a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e680:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e686:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e688:	85 d2                	test   edx,edx
c000e68a:	74 04                	je     c000e690 <Device::addChild(Device*)+0x22>
c000e68c:	89 d3                	mov    ebx,edx
c000e68e:	eb f6                	jmp    c000e686 <Device::addChild(Device*)+0x18>
c000e690:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e693:	83 ec 0c             	sub    esp,0xc
c000e696:	6a 08                	push   0x8
c000e698:	e8 4a b7 ff ff       	call   c0009de7 <malloc>
c000e69d:	89 03                	mov    DWORD PTR [ebx],eax
c000e69f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6ac:	83 c4 18             	add    esp,0x18
c000e6af:	5b                   	pop    ebx
c000e6b0:	c3                   	ret    
c000e6b1:	90                   	nop

c000e6b2 <Device::removeAllChildren()>:
c000e6b2:	56                   	push   esi
c000e6b3:	53                   	push   ebx
c000e6b4:	52                   	push   edx
c000e6b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6b9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e6bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6c2:	74 17                	je     c000e6db <Device::removeAllChildren()+0x29>
c000e6c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e6c7:	85 c0                	test   eax,eax
c000e6c9:	74 0c                	je     c000e6d7 <Device::removeAllChildren()+0x25>
c000e6cb:	83 ec 0c             	sub    esp,0xc
c000e6ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6d0:	50                   	push   eax
c000e6d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e6d4:	83 c4 10             	add    esp,0x10
c000e6d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6d9:	eb e4                	jmp    c000e6bf <Device::removeAllChildren()+0xd>
c000e6db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e6e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e6ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6f4:	58                   	pop    eax
c000e6f5:	5b                   	pop    ebx
c000e6f6:	5e                   	pop    esi
c000e6f7:	c3                   	ret    

c000e6f8 <Device::hibernateAll()>:
c000e6f8:	53                   	push   ebx
c000e6f9:	83 ec 14             	sub    esp,0x14
c000e6fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e700:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e702:	53                   	push   ebx
c000e703:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e706:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e70c:	83 c4 10             	add    esp,0x10
c000e70f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e712:	74 0f                	je     c000e723 <Device::hibernateAll()+0x2b>
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e71a:	e8 d9 ff ff ff       	call   c000e6f8 <Device::hibernateAll()>
c000e71f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e721:	eb e9                	jmp    c000e70c <Device::hibernateAll()+0x14>
c000e723:	83 c4 08             	add    esp,0x8
c000e726:	5b                   	pop    ebx
c000e727:	c3                   	ret    

c000e728 <Device::wakeAll()>:
c000e728:	53                   	push   ebx
c000e729:	83 ec 14             	sub    esp,0x14
c000e72c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e730:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e732:	53                   	push   ebx
c000e733:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e736:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e742:	74 0f                	je     c000e753 <Device::wakeAll()+0x2b>
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e74a:	e8 d9 ff ff ff       	call   c000e728 <Device::wakeAll()>
c000e74f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e751:	eb e9                	jmp    c000e73c <Device::wakeAll()+0x14>
c000e753:	83 c4 08             	add    esp,0x8
c000e756:	5b                   	pop    ebx
c000e757:	c3                   	ret    

c000e758 <Device::detectAll()>:
c000e758:	53                   	push   ebx
c000e759:	83 ec 14             	sub    esp,0x14
c000e75c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e760:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e762:	53                   	push   ebx
c000e763:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e766:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e76c:	83 c4 10             	add    esp,0x10
c000e76f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e772:	74 0f                	je     c000e783 <Device::detectAll()+0x2b>
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e77a:	e8 d9 ff ff ff       	call   c000e758 <Device::detectAll()>
c000e77f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e781:	eb e9                	jmp    c000e76c <Device::detectAll()+0x14>
c000e783:	83 c4 08             	add    esp,0x8
c000e786:	5b                   	pop    ebx
c000e787:	c3                   	ret    

c000e788 <Device::disableLegacyAll()>:
c000e788:	53                   	push   ebx
c000e789:	83 ec 14             	sub    esp,0x14
c000e78c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e790:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e792:	53                   	push   ebx
c000e793:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e796:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e79c:	83 c4 10             	add    esp,0x10
c000e79f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7a2:	74 0f                	je     c000e7b3 <Device::disableLegacyAll()+0x2b>
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7aa:	e8 d9 ff ff ff       	call   c000e788 <Device::disableLegacyAll()>
c000e7af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7b1:	eb e9                	jmp    c000e79c <Device::disableLegacyAll()+0x14>
c000e7b3:	83 c4 08             	add    esp,0x8
c000e7b6:	5b                   	pop    ebx
c000e7b7:	c3                   	ret    

c000e7b8 <Device::loadDriversForAll()>:
c000e7b8:	53                   	push   ebx
c000e7b9:	83 ec 08             	sub    esp,0x8
c000e7bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7c0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e7c7:	75 0c                	jne    c000e7d5 <Device::loadDriversForAll()+0x1d>
c000e7c9:	83 ec 0c             	sub    esp,0xc
c000e7cc:	53                   	push   ebx
c000e7cd:	e8 a0 fd ff ff       	call   c000e572 <Device::findAndLoadDriver()>
c000e7d2:	83 c4 10             	add    esp,0x10
c000e7d5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7de:	74 12                	je     c000e7f2 <Device::loadDriversForAll()+0x3a>
c000e7e0:	83 ec 0c             	sub    esp,0xc
c000e7e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7e6:	e8 cd ff ff ff       	call   c000e7b8 <Device::loadDriversForAll()>
c000e7eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7ed:	83 c4 10             	add    esp,0x10
c000e7f0:	eb e9                	jmp    c000e7db <Device::loadDriversForAll()+0x23>
c000e7f2:	83 c4 08             	add    esp,0x8
c000e7f5:	5b                   	pop    ebx
c000e7f6:	c3                   	ret    
c000e7f7:	90                   	nop

c000e7f8 <Device::closeAll()>:
c000e7f8:	53                   	push   ebx
c000e7f9:	83 ec 08             	sub    esp,0x8
c000e7fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e800:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e802:	6a 00                	push   0x0
c000e804:	6a 00                	push   0x0
c000e806:	6a 00                	push   0x0
c000e808:	53                   	push   ebx
c000e809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e80c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e812:	83 c4 10             	add    esp,0x10
c000e815:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e818:	74 0f                	je     c000e829 <Device::closeAll()+0x31>
c000e81a:	83 ec 0c             	sub    esp,0xc
c000e81d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e820:	e8 d3 ff ff ff       	call   c000e7f8 <Device::closeAll()>
c000e825:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e827:	eb e9                	jmp    c000e812 <Device::closeAll()+0x1a>
c000e829:	83 c4 08             	add    esp,0x8
c000e82c:	5b                   	pop    ebx
c000e82d:	c3                   	ret    

c000e82e <Device::powerSavingAll(PowerSavingLevel)>:
c000e82e:	56                   	push   esi
c000e82f:	53                   	push   ebx
c000e830:	83 ec 0c             	sub    esp,0xc
c000e833:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e837:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e83b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e83d:	56                   	push   esi
c000e83e:	53                   	push   ebx
c000e83f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e842:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e848:	83 c4 10             	add    esp,0x10
c000e84b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e84e:	74 0f                	je     c000e85f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e850:	52                   	push   edx
c000e851:	52                   	push   edx
c000e852:	56                   	push   esi
c000e853:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e856:	e8 d3 ff ff ff       	call   c000e82e <Device::powerSavingAll(PowerSavingLevel)>
c000e85b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e85d:	eb e9                	jmp    c000e848 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e85f:	58                   	pop    eax
c000e860:	5b                   	pop    ebx
c000e861:	5e                   	pop    esi
c000e862:	c3                   	ret    
c000e863:	90                   	nop

c000e864 <Device::setName(char const*)>:
c000e864:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e86c:	e9 df 1e ff ff       	jmp    c0000750 <strcpy>
c000e871:	90                   	nop

c000e872 <Device::Device(char const*)>:
c000e872:	83 ec 1c             	sub    esp,0x1c
c000e875:	ba d0 55 02 c0       	mov    edx,0xc00255d0
c000e87a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e87e:	89 10                	mov    DWORD PTR [eax],edx
c000e880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e884:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e892:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e89c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e8b8:	83 ec 08             	sub    esp,0x8
c000e8bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e8bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e8c3:	e8 9c ff ff ff       	call   c000e864 <Device::setName(char const*)>
c000e8c8:	83 c4 10             	add    esp,0x10
c000e8cb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e8d3:	83 ec 0c             	sub    esp,0xc
c000e8d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8da:	e8 08 b5 ff ff       	call   c0009de7 <malloc>
c000e8df:	83 c4 10             	add    esp,0x10
c000e8e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e8e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e8ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8f3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e8f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8fd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e903:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e90d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e913:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e91a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e91e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e929:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e934:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e942:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e94c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e950:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e95e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e968:	90                   	nop
c000e969:	83 c4 1c             	add    esp,0x1c
c000e96c:	c3                   	ret    
c000e96d:	90                   	nop

c000e96e <Device::getName()>:
c000e96e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e972:	05 d0 00 00 00       	add    eax,0xd0
c000e977:	c3                   	ret    

c000e978 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e978:	83 ec 0c             	sub    esp,0xc
c000e97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e986:	50                   	push   eax
c000e987:	e8 e6 fe ff ff       	call   c000e872 <Device::Device(char const*)>
c000e98c:	83 c4 10             	add    esp,0x10
c000e98f:	ba fc 55 02 c0       	mov    edx,0xc00255fc
c000e994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e998:	89 10                	mov    DWORD PTR [eax],edx
c000e99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e99e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e9a8:	90                   	nop
c000e9a9:	83 c4 0c             	add    esp,0xc
c000e9ac:	c3                   	ret    
c000e9ad:	90                   	nop

c000e9ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e9ae:	57                   	push   edi
c000e9af:	56                   	push   esi
c000e9b0:	53                   	push   ebx
c000e9b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e9b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e9bd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e9c3:	75 0c                	jne    c000e9d1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e9c5:	52                   	push   edx
c000e9c6:	52                   	push   edx
c000e9c7:	53                   	push   ebx
c000e9c8:	56                   	push   esi
c000e9c9:	e8 b4 4a 01 00       	call   c0023482 <LinkedList<Device>::addElement(Device*)>
c000e9ce:	83 c4 10             	add    esp,0x10
c000e9d1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e9d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e9da:	74 12                	je     c000e9ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e9dc:	50                   	push   eax
c000e9dd:	57                   	push   edi
c000e9de:	56                   	push   esi
c000e9df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e9e2:	e8 c7 ff ff ff       	call   c000e9ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e9e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e9e9:	83 c4 10             	add    esp,0x10
c000e9ec:	eb e9                	jmp    c000e9d7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e9ee:	5b                   	pop    ebx
c000e9ef:	5e                   	pop    esi
c000e9f0:	5f                   	pop    edi
c000e9f1:	c3                   	ret    

c000e9f2 <getDevicesOfType(DeviceType)>:
c000e9f2:	53                   	push   ebx
c000e9f3:	83 ec 14             	sub    esp,0x14
c000e9f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e9fa:	53                   	push   ebx
c000e9fb:	e8 5e 4b 01 00       	call   c002355e <LinkedList<Device>::LinkedList()>
c000ea00:	83 c4 0c             	add    esp,0xc
c000ea03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea07:	53                   	push   ebx
c000ea08:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c000ea0e:	e8 9b ff ff ff       	call   c000e9ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ea13:	89 d8                	mov    eax,ebx
c000ea15:	83 c4 18             	add    esp,0x18
c000ea18:	5b                   	pop    ebx
c000ea19:	c2 04 00             	ret    0x4

c000ea1c <HardDiskController::HardDiskController(char const*)>:
c000ea1c:	83 ec 0c             	sub    esp,0xc
c000ea1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea23:	83 ec 08             	sub    esp,0x8
c000ea26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea2a:	50                   	push   eax
c000ea2b:	e8 42 fe ff ff       	call   c000e872 <Device::Device(char const*)>
c000ea30:	83 c4 10             	add    esp,0x10
c000ea33:	ba 28 56 02 c0       	mov    edx,0xc0025628
c000ea38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3c:	89 10                	mov    DWORD PTR [eax],edx
c000ea3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea42:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ea4c:	90                   	nop
c000ea4d:	83 c4 0c             	add    esp,0xc
c000ea50:	c3                   	ret    
c000ea51:	90                   	nop
c000ea52:	66 90                	xchg   ax,ax

c000ea54 <HardDiskController::~HardDiskController()>:
c000ea54:	83 ec 0c             	sub    esp,0xc
c000ea57:	ba 28 56 02 c0       	mov    edx,0xc0025628
c000ea5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea60:	89 10                	mov    DWORD PTR [eax],edx
c000ea62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea66:	83 ec 0c             	sub    esp,0xc
c000ea69:	50                   	push   eax
c000ea6a:	e8 cd fa ff ff       	call   c000e53c <Device::~Device()>
c000ea6f:	83 c4 10             	add    esp,0x10
c000ea72:	90                   	nop
c000ea73:	83 c4 0c             	add    esp,0xc
c000ea76:	c3                   	ret    
c000ea77:	90                   	nop

c000ea78 <HardDiskController::~HardDiskController()>:
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	83 ec 0c             	sub    esp,0xc
c000ea7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea82:	e8 cd ff ff ff       	call   c000ea54 <HardDiskController::~HardDiskController()>
c000ea87:	83 c4 10             	add    esp,0x10
c000ea8a:	83 ec 08             	sub    esp,0x8
c000ea8d:	68 58 01 00 00       	push   0x158
c000ea92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea96:	e8 7f e5 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000ea9b:	83 c4 10             	add    esp,0x10
c000ea9e:	83 c4 0c             	add    esp,0xc
c000eaa1:	c3                   	ret    

c000eaa2 <PhysicalDisk::eject()>:
c000eaa2:	83 c8 ff             	or     eax,0xffffffff
c000eaa5:	c3                   	ret    

c000eaa6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000eaa6:	83 ec 0c             	sub    esp,0xc
c000eaa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaad:	83 ec 08             	sub    esp,0x8
c000eab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eab4:	50                   	push   eax
c000eab5:	e8 b8 fd ff ff       	call   c000e872 <Device::Device(char const*)>
c000eaba:	83 c4 10             	add    esp,0x10
c000eabd:	ba 54 56 02 c0       	mov    edx,0xc0025654
c000eac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac6:	89 10                	mov    DWORD PTR [eax],edx
c000eac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eacc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ead3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000eade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eae2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000eaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eaf4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000eafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eafe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eb08:	90                   	nop
c000eb09:	83 c4 0c             	add    esp,0xc
c000eb0c:	c3                   	ret    
c000eb0d:	90                   	nop

c000eb0e <PhysicalDisk::startCache()>:
c000eb0e:	56                   	push   esi
c000eb0f:	53                   	push   ebx
c000eb10:	83 ec 10             	sub    esp,0x10
c000eb13:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb17:	6a 44                	push   0x44
c000eb19:	e8 c9 b2 ff ff       	call   c0009de7 <malloc>
c000eb1e:	89 c6                	mov    esi,eax
c000eb20:	58                   	pop    eax
c000eb21:	5a                   	pop    edx
c000eb22:	53                   	push   ebx
c000eb23:	56                   	push   esi
c000eb24:	e8 6b 27 00 00       	call   c0011294 <VCache::VCache(PhysicalDisk*)>
c000eb29:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000eb2f:	83 c4 14             	add    esp,0x14
c000eb32:	5b                   	pop    ebx
c000eb33:	5e                   	pop    esi
c000eb34:	c3                   	ret    
c000eb35:	90                   	nop

c000eb36 <PhysicalDisk::~PhysicalDisk()>:
c000eb36:	83 ec 0c             	sub    esp,0xc
c000eb39:	ba 54 56 02 c0       	mov    edx,0xc0025654
c000eb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb42:	89 10                	mov    DWORD PTR [eax],edx
c000eb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb48:	83 ec 0c             	sub    esp,0xc
c000eb4b:	50                   	push   eax
c000eb4c:	e8 eb f9 ff ff       	call   c000e53c <Device::~Device()>
c000eb51:	83 c4 10             	add    esp,0x10
c000eb54:	90                   	nop
c000eb55:	83 c4 0c             	add    esp,0xc
c000eb58:	c3                   	ret    
c000eb59:	90                   	nop

c000eb5a <PhysicalDisk::~PhysicalDisk()>:
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	83 ec 0c             	sub    esp,0xc
c000eb60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb64:	e8 cd ff ff ff       	call   c000eb36 <PhysicalDisk::~PhysicalDisk()>
c000eb69:	83 c4 10             	add    esp,0x10
c000eb6c:	83 ec 08             	sub    esp,0x8
c000eb6f:	68 6c 01 00 00       	push   0x16c
c000eb74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb78:	e8 9d e4 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000eb7d:	83 c4 10             	add    esp,0x10
c000eb80:	83 c4 0c             	add    esp,0xc
c000eb83:	c3                   	ret    

c000eb84 <FPU::FPU(char const*)>:
c000eb84:	83 ec 0c             	sub    esp,0xc
c000eb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb8b:	83 ec 08             	sub    esp,0x8
c000eb8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb92:	50                   	push   eax
c000eb93:	e8 da fc ff ff       	call   c000e872 <Device::Device(char const*)>
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	ba b4 56 02 c0       	mov    edx,0xc00256b4
c000eba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba4:	89 10                	mov    DWORD PTR [eax],edx
c000eba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebaa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000ebb4:	90                   	nop
c000ebb5:	83 c4 0c             	add    esp,0xc
c000ebb8:	c3                   	ret    
c000ebb9:	90                   	nop
c000ebba:	66 90                	xchg   ax,ax

c000ebbc <FPU::~FPU()>:
c000ebbc:	83 ec 0c             	sub    esp,0xc
c000ebbf:	ba b4 56 02 c0       	mov    edx,0xc00256b4
c000ebc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc8:	89 10                	mov    DWORD PTR [eax],edx
c000ebca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebce:	83 ec 0c             	sub    esp,0xc
c000ebd1:	50                   	push   eax
c000ebd2:	e8 65 f9 ff ff       	call   c000e53c <Device::~Device()>
c000ebd7:	83 c4 10             	add    esp,0x10
c000ebda:	90                   	nop
c000ebdb:	83 c4 0c             	add    esp,0xc
c000ebde:	c3                   	ret    
c000ebdf:	90                   	nop

c000ebe0 <FPU::~FPU()>:
c000ebe0:	83 ec 0c             	sub    esp,0xc
c000ebe3:	83 ec 0c             	sub    esp,0xc
c000ebe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebea:	e8 cd ff ff ff       	call   c000ebbc <FPU::~FPU()>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	83 ec 08             	sub    esp,0x8
c000ebf5:	68 58 01 00 00       	push   0x158
c000ebfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebfe:	e8 17 e4 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000ec03:	83 c4 10             	add    esp,0x10
c000ec06:	83 c4 0c             	add    esp,0xc
c000ec09:	c3                   	ret    

c000ec0a <setupFPU()>:
c000ec0a:	53                   	push   ebx
c000ec0b:	83 ec 14             	sub    esp,0x14
c000ec0e:	68 84 56 02 c0       	push   0xc0025684
c000ec13:	e8 e3 e4 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000ec18:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000ec28:	74 1a                	je     c000ec44 <setupFPU()+0x3a>
c000ec2a:	83 ec 0c             	sub    esp,0xc
c000ec2d:	68 58 01 00 00       	push   0x158
c000ec32:	e8 b0 b1 ff ff       	call   c0009de7 <malloc>
c000ec37:	89 c3                	mov    ebx,eax
c000ec39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec3c:	e8 bb 2e 01 00       	call   c0021afc <AVX::AVX()>
c000ec41:	eb 6d                	jmp    c000ecb0 <setupFPU()+0xa6>
c000ec43:	90                   	nop
c000ec44:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000ec4a:	84 c0                	test   al,al
c000ec4c:	79 1a                	jns    c000ec68 <setupFPU()+0x5e>
c000ec4e:	83 ec 0c             	sub    esp,0xc
c000ec51:	68 58 01 00 00       	push   0x158
c000ec56:	e8 8c b1 ff ff       	call   c0009de7 <malloc>
c000ec5b:	89 c3                	mov    ebx,eax
c000ec5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec60:	e8 c7 2f 01 00       	call   c0021c2c <SSE::SSE()>
c000ec65:	eb 49                	jmp    c000ecb0 <setupFPU()+0xa6>
c000ec67:	90                   	nop
c000ec68:	a8 20                	test   al,0x20
c000ec6a:	74 1c                	je     c000ec88 <setupFPU()+0x7e>
c000ec6c:	83 ec 0c             	sub    esp,0xc
c000ec6f:	68 58 01 00 00       	push   0x158
c000ec74:	e8 6e b1 ff ff       	call   c0009de7 <malloc>
c000ec79:	89 c3                	mov    ebx,eax
c000ec7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec7e:	e8 0d 2f 01 00       	call   c0021b90 <MMX::MMX()>
c000ec83:	eb 2b                	jmp    c000ecb0 <setupFPU()+0xa6>
c000ec85:	8d 76 00             	lea    esi,[esi+0x0]
c000ec88:	a8 10                	test   al,0x10
c000ec8a:	74 2c                	je     c000ecb8 <setupFPU()+0xae>
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	68 97 56 02 c0       	push   0xc0025697
c000ec94:	e8 62 e4 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000ec99:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000eca0:	e8 42 b1 ff ff       	call   c0009de7 <malloc>
c000eca5:	89 c3                	mov    ebx,eax
c000eca7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecaa:	e8 0b 30 01 00       	call   c0021cba <x87::x87()>
c000ecaf:	90                   	nop
c000ecb0:	83 c4 10             	add    esp,0x10
c000ecb3:	eb 27                	jmp    c000ecdc <setupFPU()+0xd2>
c000ecb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb8:	83 e0 ef             	and    eax,0xffffffef
c000ecbb:	83 ec 0c             	sub    esp,0xc
c000ecbe:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ecc4:	68 a1 56 02 c0       	push   0xc00256a1
c000ecc9:	e8 2d e4 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000ecce:	0f 20 c0             	mov    eax,cr0
c000ecd1:	83 c8 04             	or     eax,0x4
c000ecd4:	0f 22 c0             	mov    cr0,eax
c000ecd7:	31 db                	xor    ebx,ebx
c000ecd9:	83 c4 10             	add    esp,0x10
c000ecdc:	89 d8                	mov    eax,ebx
c000ecde:	83 c4 08             	add    esp,0x8
c000ece1:	5b                   	pop    ebx
c000ece2:	c3                   	ret    
c000ece3:	90                   	nop

c000ece4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ece4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ece8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecec:	c1 e0 04             	shl    eax,0x4
c000ecef:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ecf3:	8d 50 10             	lea    edx,[eax+0x10]
c000ecf6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ecfc:	74 08                	je     c000ed06 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ecfe:	83 c0 04             	add    eax,0x4
c000ed01:	39 d0                	cmp    eax,edx
c000ed03:	75 f1                	jne    c000ecf6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ed05:	c3                   	ret    
c000ed06:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ed10:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ed1a:	eb e2                	jmp    c000ecfe <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ed1c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ed1c:	57                   	push   edi
c000ed1d:	31 c0                	xor    eax,eax
c000ed1f:	56                   	push   esi
c000ed20:	53                   	push   ebx
c000ed21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed25:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed29:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ed2d:	89 da                	mov    edx,ebx
c000ed2f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ed33:	c1 e2 04             	shl    edx,0x4
c000ed36:	01 ca                	add    edx,ecx
c000ed38:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ed40:	74 16                	je     c000ed58 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ed42:	40                   	inc    eax
c000ed43:	83 f8 04             	cmp    eax,0x4
c000ed46:	75 f0                	jne    c000ed38 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ed48:	c7 44 24 10 e4 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc00256e4
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	e9 85 64 00 00       	jmp    c00151dd <Krnl::panic(char const*)>
c000ed58:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ed5b:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ed5e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ed64:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ed6a:	5b                   	pop    ebx
c000ed6b:	5e                   	pop    esi
c000ed6c:	5f                   	pop    edi
c000ed6d:	c3                   	ret    

c000ed6e <doubleFault(regs*, void*)>:
c000ed6e:	55                   	push   ebp
c000ed6f:	89 e5                	mov    ebp,esp
c000ed71:	83 ec 08             	sub    esp,0x8
c000ed74:	83 ec 0c             	sub    esp,0xc
c000ed77:	68 f1 56 02 c0       	push   0xc00256f1
c000ed7c:	e8 5c 64 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	90                   	nop
c000ed85:	c9                   	leave  
c000ed86:	c3                   	ret    
c000ed87:	90                   	nop

c000ed88 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ed88:	56                   	push   esi
c000ed89:	53                   	push   ebx
c000ed8a:	50                   	push   eax
c000ed8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ed8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed93:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ed98:	75 35                	jne    c000edcf <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ed9a:	8d 43 20             	lea    eax,[ebx+0x20]
c000ed9d:	31 d2                	xor    edx,edx
c000ed9f:	89 c1                	mov    ecx,eax
c000eda1:	c1 e1 04             	shl    ecx,0x4
c000eda4:	01 f1                	add    ecx,esi
c000eda6:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000edae:	74 3e                	je     c000edee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000edb0:	42                   	inc    edx
c000edb1:	83 fa 04             	cmp    edx,0x4
c000edb4:	75 f0                	jne    c000eda6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000edb6:	83 ec 0c             	sub    esp,0xc
c000edb9:	68 0b 57 02 c0       	push   0xc002570b
c000edbe:	e8 1a 64 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000edc3:	83 c4 10             	add    esp,0x10
c000edc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000edcb:	5a                   	pop    edx
c000edcc:	5b                   	pop    ebx
c000edcd:	5e                   	pop    esi
c000edce:	c3                   	ret    
c000edcf:	83 ec 0c             	sub    esp,0xc
c000edd2:	56                   	push   esi
c000edd3:	e8 96 fb ff ff       	call   c000e96e <Device::getName()>
c000edd8:	83 c4 10             	add    esp,0x10
c000eddb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000edde:	75 ba                	jne    c000ed9a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ede0:	83 fb 0f             	cmp    ebx,0xf
c000ede3:	7f 29                	jg     c000ee0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ede5:	0f b6 9b 00 83 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7d00]
c000edec:	eb ac                	jmp    c000ed9a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000edee:	8d 04 82             	lea    eax,[edx+eax*4]
c000edf1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edf5:	8d 04 86             	lea    eax,[esi+eax*4]
c000edf8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000edfe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee02:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ee08:	89 d8                	mov    eax,ebx
c000ee0a:	5a                   	pop    edx
c000ee0b:	5b                   	pop    ebx
c000ee0c:	5e                   	pop    esi
c000ee0d:	c3                   	ret    
c000ee0e:	83 ec 0c             	sub    esp,0xc
c000ee11:	68 fe 56 02 c0       	push   0xc00256fe
c000ee16:	e8 c2 63 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000ee1b:	83 c4 10             	add    esp,0x10
c000ee1e:	e9 77 ff ff ff       	jmp    c000ed9a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ee23:	90                   	nop

c000ee24 <InterruptController::clearAllHandlers(int, bool)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	52                   	push   edx
c000ee27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ee2f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ee34:	75 61                	jne    c000ee97 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ee36:	8d 46 20             	lea    eax,[esi+0x20]
c000ee39:	c1 e6 04             	shl    esi,0x4
c000ee3c:	c1 e0 04             	shl    eax,0x4
c000ee3f:	01 de                	add    esi,ebx
c000ee41:	01 d8                	add    eax,ebx
c000ee43:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ee4d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ee57:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ee61:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ee6b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ee75:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ee7f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ee89:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ee93:	58                   	pop    eax
c000ee94:	5b                   	pop    ebx
c000ee95:	5e                   	pop    esi
c000ee96:	c3                   	ret    
c000ee97:	83 ec 0c             	sub    esp,0xc
c000ee9a:	53                   	push   ebx
c000ee9b:	e8 ce fa ff ff       	call   c000e96e <Device::getName()>
c000eea0:	83 c4 10             	add    esp,0x10
c000eea3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eea6:	75 8e                	jne    c000ee36 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eea8:	83 fe 0f             	cmp    esi,0xf
c000eeab:	7f 09                	jg     c000eeb6 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000eead:	0f b6 b6 00 83 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7d00]
c000eeb4:	eb 80                	jmp    c000ee36 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eeb6:	83 ec 0c             	sub    esp,0xc
c000eeb9:	68 18 57 02 c0       	push   0xc0025718
c000eebe:	e8 1a 63 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000eec3:	83 c4 10             	add    esp,0x10
c000eec6:	e9 6b ff ff ff       	jmp    c000ee36 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eecb:	90                   	nop

c000eecc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eecc:	56                   	push   esi
c000eecd:	53                   	push   ebx
c000eece:	52                   	push   edx
c000eecf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eed3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eed7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000eedc:	75 3a                	jne    c000ef18 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000eede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eee2:	8d 50 20             	lea    edx,[eax+0x20]
c000eee5:	c1 e2 04             	shl    edx,0x4
c000eee8:	8d 04 16             	lea    eax,[esi+edx*1]
c000eeeb:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eeef:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eef5:	74 0b                	je     c000ef02 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eef7:	83 c0 04             	add    eax,0x4
c000eefa:	39 d0                	cmp    eax,edx
c000eefc:	75 f1                	jne    c000eeef <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eefe:	58                   	pop    eax
c000eeff:	5b                   	pop    ebx
c000ef00:	5e                   	pop    esi
c000ef01:	c3                   	ret    
c000ef02:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ef0c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ef16:	eb df                	jmp    c000eef7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ef18:	83 ec 0c             	sub    esp,0xc
c000ef1b:	56                   	push   esi
c000ef1c:	e8 4d fa ff ff       	call   c000e96e <Device::getName()>
c000ef21:	83 c4 10             	add    esp,0x10
c000ef24:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ef27:	75 b5                	jne    c000eede <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef29:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ef2e:	7f 11                	jg     c000ef41 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ef30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef34:	0f b6 80 00 83 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7d00]
c000ef3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ef3f:	eb 9d                	jmp    c000eede <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef41:	83 ec 0c             	sub    esp,0xc
c000ef44:	68 25 57 02 c0       	push   0xc0025725
c000ef49:	e8 8f 62 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000ef4e:	83 c4 10             	add    esp,0x10
c000ef51:	eb 8b                	jmp    c000eede <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ef53 <nmiHandler(regs*, void*)>:
c000ef53:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ef58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef5c:	e9 db a5 ff ff       	jmp    c000953c <Computer::handleNMI()>

c000ef61 <int_handler>:
c000ef61:	55                   	push   ebp
c000ef62:	57                   	push   edi
c000ef63:	56                   	push   esi
c000ef64:	53                   	push   ebx
c000ef65:	83 ec 0c             	sub    esp,0xc
c000ef68:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ef6c:	80 3d e4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296e4,0x0
c000ef73:	74 0b                	je     c000ef80 <int_handler+0x1f>
c000ef75:	fa                   	cli    
c000ef76:	f4                   	hlt    
c000ef77:	80 3d e4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296e4,0x0
c000ef7e:	75 f5                	jne    c000ef75 <int_handler+0x14>
c000ef80:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000ef85:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ef88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ef8e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ef94:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ef97:	83 f8 17             	cmp    eax,0x17
c000ef9a:	77 13                	ja     c000efaf <int_handler+0x4e>
c000ef9c:	83 ec 08             	sub    esp,0x8
c000ef9f:	8b 17                	mov    edx,DWORD PTR [edi]
c000efa1:	8d 43 e0             	lea    eax,[ebx-0x20]
c000efa4:	0f b6 c0             	movzx  eax,al
c000efa7:	50                   	push   eax
c000efa8:	57                   	push   edi
c000efa9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000efac:	83 c4 10             	add    esp,0x10
c000efaf:	83 c3 15             	add    ebx,0x15
c000efb2:	c1 e3 04             	shl    ebx,0x4
c000efb5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000efb9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000efc0:	31 db                	xor    ebx,ebx
c000efc2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000efc6:	85 c0                	test   eax,eax
c000efc8:	74 13                	je     c000efdd <int_handler+0x7c>
c000efca:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000efcd:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000efd1:	74 1c                	je     c000efef <int_handler+0x8e>
c000efd3:	83 ec 08             	sub    esp,0x8
c000efd6:	52                   	push   edx
c000efd7:	56                   	push   esi
c000efd8:	ff d0                	call   eax
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	43                   	inc    ebx
c000efde:	83 fb 04             	cmp    ebx,0x4
c000efe1:	75 df                	jne    c000efc2 <int_handler+0x61>
c000efe3:	83 c4 0c             	add    esp,0xc
c000efe6:	31 c0                	xor    eax,eax
c000efe8:	5b                   	pop    ebx
c000efe9:	31 d2                	xor    edx,edx
c000efeb:	5e                   	pop    esi
c000efec:	5f                   	pop    edi
c000efed:	5d                   	pop    ebp
c000efee:	c3                   	ret    
c000efef:	83 ec 08             	sub    esp,0x8
c000eff2:	52                   	push   edx
c000eff3:	56                   	push   esi
c000eff4:	ff d0                	call   eax
c000eff6:	83 c4 10             	add    esp,0x10
c000eff9:	83 c4 0c             	add    esp,0xc
c000effc:	5b                   	pop    ebx
c000effd:	5e                   	pop    esi
c000effe:	5f                   	pop    edi
c000efff:	5d                   	pop    ebp
c000f000:	c3                   	ret    
c000f001:	90                   	nop

c000f002 <InterruptController::InterruptController(char const*)>:
c000f002:	83 ec 1c             	sub    esp,0x1c
c000f005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f009:	83 ec 08             	sub    esp,0x8
c000f00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f010:	50                   	push   eax
c000f011:	e8 5c f8 ff ff       	call   c000e872 <Device::Device(char const*)>
c000f016:	83 c4 10             	add    esp,0x10
c000f019:	ba 5c 5a 02 c0       	mov    edx,0xc0025a5c
c000f01e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f022:	89 10                	mov    DWORD PTR [eax],edx
c000f024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f028:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000f032:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f03a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000f042:	7f 5e                	jg     c000f0a2 <InterruptController::InterruptController(char const*)+0xa0>
c000f044:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f04c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000f051:	7f 49                	jg     c000f09c <InterruptController::InterruptController(char const*)+0x9a>
c000f053:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f057:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f05b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f062:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f066:	01 ca                	add    edx,ecx
c000f068:	83 c2 54             	add    edx,0x54
c000f06b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f077:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f07b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f086:	01 ca                	add    edx,ecx
c000f088:	81 c2 54 04 00 00    	add    edx,0x454
c000f08e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f096:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000f09a:	eb b0                	jmp    c000f04c <InterruptController::InterruptController(char const*)+0x4a>
c000f09c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000f0a0:	eb 98                	jmp    c000f03a <InterruptController::InterruptController(char const*)+0x38>
c000f0a2:	90                   	nop
c000f0a3:	83 c4 1c             	add    esp,0x1c
c000f0a6:	c3                   	ret    
c000f0a7:	90                   	nop

c000f0a8 <InterruptController::~InterruptController()>:
c000f0a8:	83 ec 0c             	sub    esp,0xc
c000f0ab:	ba 5c 5a 02 c0       	mov    edx,0xc0025a5c
c000f0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0b4:	89 10                	mov    DWORD PTR [eax],edx
c000f0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ba:	83 ec 0c             	sub    esp,0xc
c000f0bd:	50                   	push   eax
c000f0be:	e8 79 f4 ff ff       	call   c000e53c <Device::~Device()>
c000f0c3:	83 c4 10             	add    esp,0x10
c000f0c6:	90                   	nop
c000f0c7:	83 c4 0c             	add    esp,0xc
c000f0ca:	c3                   	ret    
c000f0cb:	90                   	nop

c000f0cc <InterruptController::~InterruptController()>:
c000f0cc:	83 ec 0c             	sub    esp,0xc
c000f0cf:	83 ec 0c             	sub    esp,0xc
c000f0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0d6:	e8 cd ff ff ff       	call   c000f0a8 <InterruptController::~InterruptController()>
c000f0db:	83 c4 10             	add    esp,0x10
c000f0de:	83 ec 08             	sub    esp,0x8
c000f0e1:	68 58 21 00 00       	push   0x2158
c000f0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0ea:	e8 2b df ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c000f0ef:	83 c4 10             	add    esp,0x10
c000f0f2:	83 c4 0c             	add    esp,0xc
c000f0f5:	c3                   	ret    

c000f0f6 <displayDebugInfo(regs*)>:
c000f0f6:	55                   	push   ebp
c000f0f7:	57                   	push   edi
c000f0f8:	56                   	push   esi
c000f0f9:	53                   	push   ebx
c000f0fa:	83 ec 24             	sub    esp,0x24
c000f0fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f101:	0f 20 c2             	mov    edx,cr0
c000f104:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f108:	0f 20 d7             	mov    edi,cr2
c000f10b:	0f 20 de             	mov    esi,cr3
c000f10e:	0f 20 e5             	mov    ebp,cr4
c000f111:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000f114:	68 32 57 02 c0       	push   0xc0025732
c000f119:	e8 dd df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f11e:	59                   	pop    ecx
c000f11f:	58                   	pop    eax
c000f120:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f123:	68 3d 57 02 c0       	push   0xc002573d
c000f128:	e8 ce df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f12d:	58                   	pop    eax
c000f12e:	5a                   	pop    edx
c000f12f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f132:	68 48 57 02 c0       	push   0xc0025748
c000f137:	e8 bf df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f13c:	59                   	pop    ecx
c000f13d:	58                   	pop    eax
c000f13e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f141:	68 53 57 02 c0       	push   0xc0025753
c000f146:	e8 b0 df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f14b:	58                   	pop    eax
c000f14c:	5a                   	pop    edx
c000f14d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f150:	68 5e 57 02 c0       	push   0xc002575e
c000f155:	e8 a1 df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f15a:	59                   	pop    ecx
c000f15b:	58                   	pop    eax
c000f15c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f15f:	68 69 57 02 c0       	push   0xc0025769
c000f164:	e8 92 df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f169:	58                   	pop    eax
c000f16a:	5a                   	pop    edx
c000f16b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f16e:	68 74 57 02 c0       	push   0xc0025774
c000f173:	e8 83 df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f178:	59                   	pop    ecx
c000f179:	58                   	pop    eax
c000f17a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f17d:	68 7f 57 02 c0       	push   0xc002577f
c000f182:	e8 74 df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f187:	58                   	pop    eax
c000f188:	5a                   	pop    edx
c000f189:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f18c:	68 8a 57 02 c0       	push   0xc002578a
c000f191:	e8 65 df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f196:	59                   	pop    ecx
c000f197:	58                   	pop    eax
c000f198:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f19b:	68 99 57 02 c0       	push   0xc0025799
c000f1a0:	e8 56 df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f1a5:	58                   	pop    eax
c000f1a6:	5a                   	pop    edx
c000f1a7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f1aa:	68 a4 57 02 c0       	push   0xc00257a4
c000f1af:	e8 47 df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f1b4:	59                   	pop    ecx
c000f1b5:	58                   	pop    eax
c000f1b6:	57                   	push   edi
c000f1b7:	68 af 57 02 c0       	push   0xc00257af
c000f1bc:	e8 3a df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f1c1:	58                   	pop    eax
c000f1c2:	5a                   	pop    edx
c000f1c3:	56                   	push   esi
c000f1c4:	68 ba 57 02 c0       	push   0xc00257ba
c000f1c9:	e8 2d df ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f1ce:	59                   	pop    ecx
c000f1cf:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f1d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1da:	e8 f6 bc ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c000f1df:	58                   	pop    eax
c000f1e0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f1e3:	5a                   	pop    edx
c000f1e4:	c1 e0 05             	shl    eax,0x5
c000f1e7:	05 60 80 02 c0       	add    eax,0xc0028060
c000f1ec:	50                   	push   eax
c000f1ed:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f1f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1f8:	e8 e5 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f1fd:	59                   	pop    ecx
c000f1fe:	58                   	pop    eax
c000f1ff:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f204:	68 c5 57 02 c0       	push   0xc00257c5
c000f209:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f20f:	e8 ce c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f214:	58                   	pop    eax
c000f215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f21a:	5a                   	pop    edx
c000f21b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f21e:	83 c0 0c             	add    eax,0xc
c000f221:	50                   	push   eax
c000f222:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f227:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f22d:	e8 b0 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f232:	59                   	pop    ecx
c000f233:	58                   	pop    eax
c000f234:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f239:	68 ce 57 02 c0       	push   0xc00257ce
c000f23e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f244:	e8 99 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f249:	58                   	pop    eax
c000f24a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f24f:	5a                   	pop    edx
c000f250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f253:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f259:	e8 3e c1 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f25e:	59                   	pop    ecx
c000f25f:	58                   	pop    eax
c000f260:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f265:	68 d6 57 02 c0       	push   0xc00257d6
c000f26a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f270:	e8 6d c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f275:	58                   	pop    eax
c000f276:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f27b:	5a                   	pop    edx
c000f27c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f27f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f285:	e8 12 c1 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f28a:	59                   	pop    ecx
c000f28b:	58                   	pop    eax
c000f28c:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f291:	68 de 57 02 c0       	push   0xc00257de
c000f296:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f29c:	e8 41 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2a1:	58                   	pop    eax
c000f2a2:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2a7:	5a                   	pop    edx
c000f2a8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f2ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2b1:	e8 e6 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2b6:	59                   	pop    ecx
c000f2b7:	58                   	pop    eax
c000f2b8:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2bd:	68 e6 57 02 c0       	push   0xc00257e6
c000f2c2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2c8:	e8 15 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2cd:	58                   	pop    eax
c000f2ce:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2d3:	5a                   	pop    edx
c000f2d4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f2d7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2dd:	e8 ba c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2e2:	59                   	pop    ecx
c000f2e3:	58                   	pop    eax
c000f2e4:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2e9:	68 ee 57 02 c0       	push   0xc00257ee
c000f2ee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2f4:	e8 e9 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2f9:	58                   	pop    eax
c000f2fa:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f2ff:	5a                   	pop    edx
c000f300:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f303:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f309:	e8 8e c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f30e:	59                   	pop    ecx
c000f30f:	58                   	pop    eax
c000f310:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f315:	68 f6 57 02 c0       	push   0xc00257f6
c000f31a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f320:	e8 bd c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f325:	58                   	pop    eax
c000f326:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f32b:	5a                   	pop    edx
c000f32c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f32f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f335:	e8 62 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f33a:	59                   	pop    ecx
c000f33b:	58                   	pop    eax
c000f33c:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f341:	68 fe 57 02 c0       	push   0xc00257fe
c000f346:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f34c:	e8 91 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f351:	58                   	pop    eax
c000f352:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f357:	5a                   	pop    edx
c000f358:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f35c:	52                   	push   edx
c000f35d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f363:	e8 34 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f368:	59                   	pop    ecx
c000f369:	58                   	pop    eax
c000f36a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f36f:	68 07 58 02 c0       	push   0xc0025807
c000f374:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f37a:	e8 63 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f37f:	58                   	pop    eax
c000f380:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f385:	5a                   	pop    edx
c000f386:	57                   	push   edi
c000f387:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f38d:	e8 0a c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f392:	59                   	pop    ecx
c000f393:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f398:	5f                   	pop    edi
c000f399:	68 0f 58 02 c0       	push   0xc002580f
c000f39e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3a4:	e8 39 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3a9:	58                   	pop    eax
c000f3aa:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3af:	5a                   	pop    edx
c000f3b0:	56                   	push   esi
c000f3b1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3b7:	e8 e0 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f3bc:	59                   	pop    ecx
c000f3bd:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3c2:	5e                   	pop    esi
c000f3c3:	68 17 58 02 c0       	push   0xc0025817
c000f3c8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3ce:	e8 0f c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3d3:	5f                   	pop    edi
c000f3d4:	58                   	pop    eax
c000f3d5:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3da:	55                   	push   ebp
c000f3db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3e1:	e8 b6 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f3e6:	58                   	pop    eax
c000f3e7:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f3ec:	5a                   	pop    edx
c000f3ed:	68 1f 58 02 c0       	push   0xc002581f
c000f3f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3f8:	e8 e5 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3fd:	0f 21 c0             	mov    eax,db0
c000f400:	59                   	pop    ecx
c000f401:	5e                   	pop    esi
c000f402:	50                   	push   eax
c000f403:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f408:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f40e:	e8 89 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f413:	5f                   	pop    edi
c000f414:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f419:	5d                   	pop    ebp
c000f41a:	68 28 58 02 c0       	push   0xc0025828
c000f41f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f425:	e8 b8 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f42a:	0f 21 c8             	mov    eax,db1
c000f42d:	5a                   	pop    edx
c000f42e:	59                   	pop    ecx
c000f42f:	50                   	push   eax
c000f430:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f435:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f43b:	e8 5c bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f440:	5e                   	pop    esi
c000f441:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f446:	5f                   	pop    edi
c000f447:	68 30 58 02 c0       	push   0xc0025830
c000f44c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f452:	e8 8b bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f457:	0f 21 d0             	mov    eax,db2
c000f45a:	5d                   	pop    ebp
c000f45b:	5a                   	pop    edx
c000f45c:	50                   	push   eax
c000f45d:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f462:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f468:	e8 2f bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f46d:	59                   	pop    ecx
c000f46e:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f473:	5e                   	pop    esi
c000f474:	68 38 58 02 c0       	push   0xc0025838
c000f479:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f47f:	e8 5e bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f484:	0f 21 d8             	mov    eax,db3
c000f487:	5f                   	pop    edi
c000f488:	5d                   	pop    ebp
c000f489:	50                   	push   eax
c000f48a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f48f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f495:	e8 02 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f49a:	58                   	pop    eax
c000f49b:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f4a0:	5a                   	pop    edx
c000f4a1:	68 40 58 02 c0       	push   0xc0025840
c000f4a6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4ac:	e8 31 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4b1:	0f 21 f0             	mov    eax,db6
c000f4b4:	59                   	pop    ecx
c000f4b5:	5e                   	pop    esi
c000f4b6:	50                   	push   eax
c000f4b7:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f4bc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4c2:	e8 d5 be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f4c7:	5f                   	pop    edi
c000f4c8:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f4cd:	5d                   	pop    ebp
c000f4ce:	68 48 58 02 c0       	push   0xc0025848
c000f4d3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4d9:	e8 04 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4de:	0f 21 f8             	mov    eax,db7
c000f4e1:	5a                   	pop    edx
c000f4e2:	59                   	pop    ecx
c000f4e3:	50                   	push   eax
c000f4e4:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f4e9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4ef:	e8 a8 be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f4f4:	5e                   	pop    esi
c000f4f5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f4f8:	e8 08 90 00 00       	call   c0018505 <Thr::getDriverNameFromAddress(unsigned long)>
c000f4fd:	83 c4 10             	add    esp,0x10
c000f500:	85 c0                	test   eax,eax
c000f502:	74 7d                	je     c000f581 <displayDebugInfo(regs*)+0x48b>
c000f504:	89 c6                	mov    esi,eax
c000f506:	50                   	push   eax
c000f507:	50                   	push   eax
c000f508:	56                   	push   esi
c000f509:	68 50 58 02 c0       	push   0xc0025850
c000f50e:	e8 e8 db ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f513:	5a                   	pop    edx
c000f514:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f519:	59                   	pop    ecx
c000f51a:	68 5e 58 02 c0       	push   0xc002585e
c000f51f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f525:	e8 b8 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f52a:	5f                   	pop    edi
c000f52b:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f530:	5d                   	pop    ebp
c000f531:	56                   	push   esi
c000f532:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f538:	e8 a5 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f53d:	58                   	pop    eax
c000f53e:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f543:	5a                   	pop    edx
c000f544:	68 6a 58 02 c0       	push   0xc002586a
c000f549:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f54f:	e8 8e be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f554:	59                   	pop    ecx
c000f555:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c000f55a:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f560:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f563:	e8 d4 8f 00 00       	call   c001853c <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f568:	5b                   	pop    ebx
c000f569:	5d                   	pop    ebp
c000f56a:	50                   	push   eax
c000f56b:	57                   	push   edi
c000f56c:	e8 2b be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f571:	58                   	pop    eax
c000f572:	5a                   	pop    edx
c000f573:	56                   	push   esi
c000f574:	68 76 58 02 c0       	push   0xc0025876
c000f579:	e8 7d db ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	fa                   	cli    
c000f582:	f4                   	hlt    
c000f583:	eb fe                	jmp    c000f583 <displayDebugInfo(regs*)+0x48d>

c000f585 <x87EmulHandler(regs*, void*)>:
c000f585:	53                   	push   ebx
c000f586:	83 ec 14             	sub    esp,0x14
c000f589:	68 86 58 02 c0       	push   0xc0025886
c000f58e:	e8 68 db ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f593:	0f 20 c2             	mov    edx,cr0
c000f596:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f59b:	83 c4 10             	add    esp,0x10
c000f59e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f5a2:	0f 85 0f 01 00 00    	jne    c000f6b7 <x87EmulHandler(regs*, void*)+0x132>
c000f5a8:	f6 05 21 8c 02 c0 40 	test   BYTE PTR ds:0xc0028c21,0x40
c000f5af:	75 30                	jne    c000f5e1 <x87EmulHandler(regs*, void*)+0x5c>
c000f5b1:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000f5b6:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f5bc:	85 c0                	test   eax,eax
c000f5be:	74 05                	je     c000f5c5 <x87EmulHandler(regs*, void*)+0x40>
c000f5c0:	83 e2 08             	and    edx,0x8
c000f5c3:	75 23                	jne    c000f5e8 <x87EmulHandler(regs*, void*)+0x63>
c000f5c5:	83 ec 0c             	sub    esp,0xc
c000f5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5cc:	e8 99 b4 00 00       	call   c001aa6a <Vm::x87Handler(regs*)>
c000f5d1:	83 c4 10             	add    esp,0x10
c000f5d4:	84 c0                	test   al,al
c000f5d6:	0f 84 db 00 00 00    	je     c000f6b7 <x87EmulHandler(regs*, void*)+0x132>
c000f5dc:	83 c4 08             	add    esp,0x8
c000f5df:	5b                   	pop    ebx
c000f5e0:	c3                   	ret    
c000f5e1:	0f 06                	clts   
c000f5e3:	83 c4 08             	add    esp,0x8
c000f5e6:	5b                   	pop    ebx
c000f5e7:	c3                   	ret    
c000f5e8:	83 ec 0c             	sub    esp,0xc
c000f5eb:	68 b6 58 02 c0       	push   0xc00258b6
c000f5f0:	e8 06 db ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f5f5:	0f 06                	clts   
c000f5f7:	a1 4c 8d 02 c0       	mov    eax,ds:0xc0028d4c
c000f5fc:	83 c4 10             	add    esp,0x10
c000f5ff:	85 c0                	test   eax,eax
c000f601:	74 33                	je     c000f636 <x87EmulHandler(regs*, void*)+0xb1>
c000f603:	83 ec 0c             	sub    esp,0xc
c000f606:	68 c3 58 02 c0       	push   0xc00258c3
c000f60b:	e8 eb da ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f610:	59                   	pop    ecx
c000f611:	a1 4c 8d 02 c0       	mov    eax,ds:0xc0028d4c
c000f616:	5b                   	pop    ebx
c000f617:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f61a:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c000f620:	83 c0 3f             	add    eax,0x3f
c000f623:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f629:	83 e0 c0             	and    eax,0xffffffc0
c000f62c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f62e:	50                   	push   eax
c000f62f:	52                   	push   edx
c000f630:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f633:	83 c4 10             	add    esp,0x10
c000f636:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f63b:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f63e:	85 c0                	test   eax,eax
c000f640:	74 4e                	je     c000f690 <x87EmulHandler(regs*, void*)+0x10b>
c000f642:	83 ec 0c             	sub    esp,0xc
c000f645:	68 ef 58 02 c0       	push   0xc00258ef
c000f64a:	e8 ac da ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f64f:	59                   	pop    ecx
c000f650:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f655:	5b                   	pop    ebx
c000f656:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f659:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c000f65f:	83 c0 3f             	add    eax,0x3f
c000f662:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f668:	83 e0 c0             	and    eax,0xffffffc0
c000f66b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f66d:	50                   	push   eax
c000f66e:	52                   	push   edx
c000f66f:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f672:	c7 04 24 05 59 02 c0 	mov    DWORD PTR [esp],0xc0025905
c000f679:	e8 7d da ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f67e:	83 c4 10             	add    esp,0x10
c000f681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f686:	a3 4c 8d 02 c0       	mov    ds:0xc0028d4c,eax
c000f68b:	83 c4 08             	add    esp,0x8
c000f68e:	5b                   	pop    ebx
c000f68f:	c3                   	ret    
c000f690:	83 ec 0c             	sub    esp,0xc
c000f693:	68 d6 58 02 c0       	push   0xc00258d6
c000f698:	e8 5e da ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f69d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f6a3:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c000f6aa:	e8 38 a7 ff ff       	call   c0009de7 <malloc>
c000f6af:	83 c4 10             	add    esp,0x10
c000f6b2:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f6b5:	eb ca                	jmp    c000f681 <x87EmulHandler(regs*, void*)+0xfc>
c000f6b7:	83 ec 0c             	sub    esp,0xc
c000f6ba:	68 a0 58 02 c0       	push   0xc00258a0
c000f6bf:	e8 37 da ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f6c4:	58                   	pop    eax
c000f6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6c9:	e8 28 fa ff ff       	call   c000f0f6 <displayDebugInfo(regs*)>

c000f6ce <gpFault(regs*, void*)>:
c000f6ce:	53                   	push   ebx
c000f6cf:	83 ec 14             	sub    esp,0x14
c000f6d2:	c7 05 48 8d 02 c0 27 9f 01 c0 	mov    DWORD PTR ds:0xc0028d48,0xc0019f27
c000f6dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f6e0:	53                   	push   ebx
c000f6e1:	e8 41 a8 00 00       	call   c0019f27 <Vm::faultHandler(regs*)>
c000f6e6:	83 c4 10             	add    esp,0x10
c000f6e9:	84 c0                	test   al,al
c000f6eb:	74 05                	je     c000f6f2 <gpFault(regs*, void*)+0x24>
c000f6ed:	83 c4 08             	add    esp,0x8
c000f6f0:	5b                   	pop    ebx
c000f6f1:	c3                   	ret    
c000f6f2:	83 ec 0c             	sub    esp,0xc
c000f6f5:	68 1a 59 02 c0       	push   0xc002591a
c000f6fa:	e8 fc d9 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f6ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f702:	e8 ef f9 ff ff       	call   c000f0f6 <displayDebugInfo(regs*)>

c000f707 <pgFault(regs*, void*)>:
c000f707:	53                   	push   ebx
c000f708:	83 ec 10             	sub    esp,0x10
c000f70b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f70f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f712:	68 35 59 02 c0       	push   0xc0025935
c000f717:	e8 df d9 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f71c:	0f 20 d0             	mov    eax,cr2
c000f71f:	5a                   	pop    edx
c000f720:	59                   	pop    ecx
c000f721:	50                   	push   eax
c000f722:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f727:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f72a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f730:	e8 41 d5 ff ff       	call   c000cc76 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f735:	83 c4 10             	add    esp,0x10
c000f738:	84 c0                	test   al,al
c000f73a:	74 05                	je     c000f741 <pgFault(regs*, void*)+0x3a>
c000f73c:	83 c4 08             	add    esp,0x8
c000f73f:	5b                   	pop    ebx
c000f740:	c3                   	ret    
c000f741:	83 ec 0c             	sub    esp,0xc
c000f744:	68 4a 59 02 c0       	push   0xc002594a
c000f749:	e8 ad d9 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f74e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f751:	e8 a0 f9 ff ff       	call   c000f0f6 <displayDebugInfo(regs*)>

c000f756 <otherISRHandler(regs*, void*)>:
c000f756:	53                   	push   ebx
c000f757:	83 ec 0c             	sub    esp,0xc
c000f75a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f75e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f761:	50                   	push   eax
c000f762:	50                   	push   eax
c000f763:	68 57 59 02 c0       	push   0xc0025957
c000f768:	e8 8e d9 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f76d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f770:	e8 81 f9 ff ff       	call   c000f0f6 <displayDebugInfo(regs*)>

c000f775 <opcodeFault(regs*, void*)>:
c000f775:	55                   	push   ebp
c000f776:	89 e5                	mov    ebp,esp
c000f778:	56                   	push   esi
c000f779:	53                   	push   ebx
c000f77a:	83 ec 30             	sub    esp,0x30
c000f77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f780:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f783:	83 ec 08             	sub    esp,0x8
c000f786:	50                   	push   eax
c000f787:	68 74 59 02 c0       	push   0xc0025974
c000f78c:	e8 6a d9 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f791:	83 c4 10             	add    esp,0x10
c000f794:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000f799:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f79f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f7a5:	84 c0                	test   al,al
c000f7a7:	74 24                	je     c000f7cd <opcodeFault(regs*, void*)+0x58>
c000f7a9:	83 ec 0c             	sub    esp,0xc
c000f7ac:	68 84 59 02 c0       	push   0xc0025984
c000f7b1:	e8 45 d9 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000f7b6:	83 c4 10             	add    esp,0x10
c000f7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7bf:	8d 50 19             	lea    edx,[eax+0x19]
c000f7c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7c8:	e9 7b 03 00 00       	jmp    c000fb48 <opcodeFault(regs*, void*)+0x3d3>
c000f7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7d6:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f7da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f7e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7e6:	8a 00                	mov    al,BYTE PTR [eax]
c000f7e8:	3c f0                	cmp    al,0xf0
c000f7ea:	75 17                	jne    c000f803 <opcodeFault(regs*, void*)+0x8e>
c000f7ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7f5:	8d 50 01             	lea    edx,[eax+0x1]
c000f7f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7fe:	e9 d6 00 00 00       	jmp    c000f8d9 <opcodeFault(regs*, void*)+0x164>
c000f803:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f806:	8a 00                	mov    al,BYTE PTR [eax]
c000f808:	3c f2                	cmp    al,0xf2
c000f80a:	74 09                	je     c000f815 <opcodeFault(regs*, void*)+0xa0>
c000f80c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f80f:	8a 00                	mov    al,BYTE PTR [eax]
c000f811:	3c f3                	cmp    al,0xf3
c000f813:	75 1b                	jne    c000f830 <opcodeFault(regs*, void*)+0xbb>
c000f815:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f819:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f81f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f822:	8d 50 01             	lea    edx,[eax+0x1]
c000f825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f828:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f82b:	e9 a9 00 00 00       	jmp    c000f8d9 <opcodeFault(regs*, void*)+0x164>
c000f830:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f833:	8a 00                	mov    al,BYTE PTR [eax]
c000f835:	3c 66                	cmp    al,0x66
c000f837:	75 1b                	jne    c000f854 <opcodeFault(regs*, void*)+0xdf>
c000f839:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f83d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f843:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f846:	8d 50 01             	lea    edx,[eax+0x1]
c000f849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f84c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f84f:	e9 85 00 00 00       	jmp    c000f8d9 <opcodeFault(regs*, void*)+0x164>
c000f854:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f857:	8a 00                	mov    al,BYTE PTR [eax]
c000f859:	3c 67                	cmp    al,0x67
c000f85b:	75 18                	jne    c000f875 <opcodeFault(regs*, void*)+0x100>
c000f85d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f861:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f867:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f86a:	8d 50 01             	lea    edx,[eax+0x1]
c000f86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f870:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f873:	eb 64                	jmp    c000f8d9 <opcodeFault(regs*, void*)+0x164>
c000f875:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f878:	8a 00                	mov    al,BYTE PTR [eax]
c000f87a:	3c 2e                	cmp    al,0x2e
c000f87c:	74 09                	je     c000f887 <opcodeFault(regs*, void*)+0x112>
c000f87e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f881:	8a 00                	mov    al,BYTE PTR [eax]
c000f883:	3c 3e                	cmp    al,0x3e
c000f885:	75 18                	jne    c000f89f <opcodeFault(regs*, void*)+0x12a>
c000f887:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f88b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f88e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f891:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f894:	8d 50 01             	lea    edx,[eax+0x1]
c000f897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f89a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f89d:	eb 3a                	jmp    c000f8d9 <opcodeFault(regs*, void*)+0x164>
c000f89f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8a2:	8a 00                	mov    al,BYTE PTR [eax]
c000f8a4:	3c 36                	cmp    al,0x36
c000f8a6:	74 1b                	je     c000f8c3 <opcodeFault(regs*, void*)+0x14e>
c000f8a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ab:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ad:	3c 26                	cmp    al,0x26
c000f8af:	74 12                	je     c000f8c3 <opcodeFault(regs*, void*)+0x14e>
c000f8b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b4:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b6:	3c 64                	cmp    al,0x64
c000f8b8:	74 09                	je     c000f8c3 <opcodeFault(regs*, void*)+0x14e>
c000f8ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8bd:	8a 00                	mov    al,BYTE PTR [eax]
c000f8bf:	3c 65                	cmp    al,0x65
c000f8c1:	75 16                	jne    c000f8d9 <opcodeFault(regs*, void*)+0x164>
c000f8c3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f8c7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8d0:	8d 50 01             	lea    edx,[eax+0x1]
c000f8d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8dc:	8a 00                	mov    al,BYTE PTR [eax]
c000f8de:	3c 0f                	cmp    al,0xf
c000f8e0:	0f 85 8d 01 00 00    	jne    c000fa73 <opcodeFault(regs*, void*)+0x2fe>
c000f8e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8e9:	40                   	inc    eax
c000f8ea:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ec:	3c c7                	cmp    al,0xc7
c000f8ee:	0f 85 7f 01 00 00    	jne    c000fa73 <opcodeFault(regs*, void*)+0x2fe>
c000f8f4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8fd:	8d 50 01             	lea    edx,[eax+0x1]
c000f900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f903:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f906:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f909:	50                   	push   eax
c000f90a:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f90d:	50                   	push   eax
c000f90e:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f911:	50                   	push   eax
c000f912:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f915:	e8 dc 4f 00 00       	call   c00148f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f91a:	83 c4 10             	add    esp,0x10
c000f91d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f920:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f923:	83 f0 01             	xor    eax,0x1
c000f926:	84 c0                	test   al,al
c000f928:	0f 84 45 01 00 00    	je     c000fa73 <opcodeFault(regs*, void*)+0x2fe>
c000f92e:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f931:	3c 01                	cmp    al,0x1
c000f933:	0f 85 3a 01 00 00    	jne    c000fa73 <opcodeFault(regs*, void*)+0x2fe>
c000f939:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f93c:	83 f0 01             	xor    eax,0x1
c000f93f:	84 c0                	test   al,al
c000f941:	0f 84 2c 01 00 00    	je     c000fa73 <opcodeFault(regs*, void*)+0x2fe>
c000f947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f94d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f950:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f957:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f95a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f95d:	89 c2                	mov    edx,eax
c000f95f:	b8 00 00 00 00       	mov    eax,0x0
c000f964:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f967:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f96d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f970:	ba 00 00 00 00       	mov    edx,0x0
c000f975:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f978:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f97b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f97e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f981:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f984:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f98b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f98e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f991:	89 c2                	mov    edx,eax
c000f993:	b8 00 00 00 00       	mov    eax,0x0
c000f998:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f99b:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f99e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f9a4:	ba 00 00 00 00       	mov    edx,0x0
c000f9a9:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f9ac:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f9af:	fa                   	cli    
c000f9b0:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000f9b5:	40                   	inc    eax
c000f9b6:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000f9bb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f9be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f9c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c3:	89 c1                	mov    ecx,eax
c000f9c5:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f9c8:	89 cb                	mov    ebx,ecx
c000f9ca:	89 d0                	mov    eax,edx
c000f9cc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f9cf:	89 c6                	mov    esi,eax
c000f9d1:	89 f0                	mov    eax,esi
c000f9d3:	09 d8                	or     eax,ebx
c000f9d5:	85 c0                	test   eax,eax
c000f9d7:	75 21                	jne    c000f9fa <opcodeFault(regs*, void*)+0x285>
c000f9d9:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f9dc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f9df:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f9e2:	89 01                	mov    DWORD PTR [ecx],eax
c000f9e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9ed:	83 c8 40             	or     eax,0x40
c000f9f0:	89 c2                	mov    edx,eax
c000f9f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f9f8:	eb 3e                	jmp    c000fa38 <opcodeFault(regs*, void*)+0x2c3>
c000f9fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f9fd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fa00:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa02:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fa05:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000fa08:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000fa0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa0e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000fa11:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000fa14:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000fa17:	89 d0                	mov    eax,edx
c000fa19:	31 d2                	xor    edx,edx
c000fa1b:	89 c3                	mov    ebx,eax
c000fa1d:	89 d6                	mov    esi,edx
c000fa1f:	89 da                	mov    edx,ebx
c000fa21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa24:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000fa27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa2d:	83 e0 bf             	and    eax,0xffffffbf
c000fa30:	89 c2                	mov    edx,eax
c000fa32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa35:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fa38:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000fa3d:	48                   	dec    eax
c000fa3e:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000fa43:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000fa48:	85 c0                	test   eax,eax
c000fa4a:	75 01                	jne    c000fa4d <opcodeFault(regs*, void*)+0x2d8>
c000fa4c:	fb                   	sti    
c000fa4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa53:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000fa56:	01 c2                	add    edx,eax
c000fa58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000fa5e:	83 ec 0c             	sub    esp,0xc
c000fa61:	68 a7 59 02 c0       	push   0xc00259a7
c000fa66:	e8 90 d6 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000fa6b:	83 c4 10             	add    esp,0x10
c000fa6e:	e9 d5 00 00 00       	jmp    c000fb48 <opcodeFault(regs*, void*)+0x3d3>
c000fa73:	83 ec 0c             	sub    esp,0xc
c000fa76:	68 ba 59 02 c0       	push   0xc00259ba
c000fa7b:	e8 7b d6 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000fa80:	83 c4 10             	add    esp,0x10
c000fa83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa86:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fa89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa8f:	c1 e0 04             	shl    eax,0x4
c000fa92:	01 d0                	add    eax,edx
c000fa94:	83 c0 03             	add    eax,0x3
c000fa97:	8a 00                	mov    al,BYTE PTR [eax]
c000fa99:	0f b6 d8             	movzx  ebx,al
c000fa9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa9f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000faa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000faa8:	c1 e0 04             	shl    eax,0x4
c000faab:	01 d0                	add    eax,edx
c000faad:	83 c0 02             	add    eax,0x2
c000fab0:	8a 00                	mov    al,BYTE PTR [eax]
c000fab2:	0f b6 c8             	movzx  ecx,al
c000fab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fabe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fac1:	c1 e0 04             	shl    eax,0x4
c000fac4:	01 d0                	add    eax,edx
c000fac6:	40                   	inc    eax
c000fac7:	8a 00                	mov    al,BYTE PTR [eax]
c000fac9:	0f b6 d0             	movzx  edx,al
c000facc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000facf:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000fad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fad8:	c1 e0 04             	shl    eax,0x4
c000fadb:	01 f0                	add    eax,esi
c000fadd:	8a 00                	mov    al,BYTE PTR [eax]
c000fadf:	0f b6 c0             	movzx  eax,al
c000fae2:	83 ec 0c             	sub    esp,0xc
c000fae5:	53                   	push   ebx
c000fae6:	51                   	push   ecx
c000fae7:	52                   	push   edx
c000fae8:	50                   	push   eax
c000fae9:	68 cc 59 02 c0       	push   0xc00259cc
c000faee:	e8 08 d6 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000faf3:	83 c4 20             	add    esp,0x20
c000faf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fafc:	83 c0 03             	add    eax,0x3
c000faff:	8a 00                	mov    al,BYTE PTR [eax]
c000fb01:	0f b6 d8             	movzx  ebx,al
c000fb04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb07:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb0a:	83 c0 02             	add    eax,0x2
c000fb0d:	8a 00                	mov    al,BYTE PTR [eax]
c000fb0f:	0f b6 c8             	movzx  ecx,al
c000fb12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb18:	40                   	inc    eax
c000fb19:	8a 00                	mov    al,BYTE PTR [eax]
c000fb1b:	0f b6 d0             	movzx  edx,al
c000fb1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb21:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fb24:	8a 00                	mov    al,BYTE PTR [eax]
c000fb26:	0f b6 c0             	movzx  eax,al
c000fb29:	83 ec 0c             	sub    esp,0xc
c000fb2c:	53                   	push   ebx
c000fb2d:	51                   	push   ecx
c000fb2e:	52                   	push   edx
c000fb2f:	50                   	push   eax
c000fb30:	68 f4 59 02 c0       	push   0xc00259f4
c000fb35:	e8 c1 d5 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c000fb3a:	83 c4 20             	add    esp,0x20
c000fb3d:	83 ec 0c             	sub    esp,0xc
c000fb40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb43:	e8 ae f5 ff ff       	call   c000f0f6 <displayDebugInfo(regs*)>
c000fb48:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fb4b:	5b                   	pop    ebx
c000fb4c:	5e                   	pop    esi
c000fb4d:	5d                   	pop    ebp
c000fb4e:	c3                   	ret    

c000fb4f <displayProgramFault(char const*)>:
c000fb4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fb57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000fb5d:	85 c0                	test   eax,eax
c000fb5f:	74 15                	je     c000fb76 <displayProgramFault(char const*)+0x27>
c000fb61:	83 ec 0c             	sub    esp,0xc
c000fb64:	6a 04                	push   0x4
c000fb66:	6a 0f                	push   0xf
c000fb68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb6c:	50                   	push   eax
c000fb6d:	e8 6c b5 ff ff       	call   c000b0de <VgaText::puts(char const*, VgaColour, VgaColour)>
c000fb72:	83 c4 1c             	add    esp,0x1c
c000fb75:	c3                   	ret    
c000fb76:	c3                   	ret    

c000fb77 <setupInterruptController()>:
c000fb77:	55                   	push   ebp
c000fb78:	89 e5                	mov    ebp,esp
c000fb7a:	53                   	push   ebx
c000fb7b:	83 ec 24             	sub    esp,0x24
c000fb7e:	b8 00 00 00 00       	mov    eax,0x0
c000fb83:	85 c0                	test   eax,eax
c000fb85:	0f 95 c0             	setne  al
c000fb88:	84 c0                	test   al,al
c000fb8a:	74 5b                	je     c000fbe7 <setupInterruptController()+0x70>
c000fb8c:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000fb93:	83 ec 0c             	sub    esp,0xc
c000fb96:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb99:	e8 49 a2 ff ff       	call   c0009de7 <malloc>
c000fb9e:	83 c4 10             	add    esp,0x10
c000fba1:	89 c3                	mov    ebx,eax
c000fba3:	83 ec 0c             	sub    esp,0xc
c000fba6:	53                   	push   ebx
c000fba7:	e8 4c 23 01 00       	call   c0021ef8 <APIC::APIC()>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fbb2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000fbb5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbb8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbba:	83 c0 08             	add    eax,0x8
c000fbbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbbf:	6a 00                	push   0x0
c000fbc1:	6a 00                	push   0x0
c000fbc3:	6a 00                	push   0x0
c000fbc5:	52                   	push   edx
c000fbc6:	ff d0                	call   eax
c000fbc8:	83 c4 10             	add    esp,0x10
c000fbcb:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000fbd0:	83 ec 08             	sub    esp,0x8
c000fbd3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbd6:	50                   	push   eax
c000fbd7:	e8 92 ea ff ff       	call   c000e66e <Device::addChild(Device*)>
c000fbdc:	83 c4 10             	add    esp,0x10
c000fbdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbe2:	e9 79 03 00 00       	jmp    c000ff60 <setupInterruptController()+0x3e9>
c000fbe7:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c000fbec:	84 c0                	test   al,al
c000fbee:	75 14                	jne    c000fc04 <setupInterruptController()+0x8d>
c000fbf0:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000fbf5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fbfb:	83 e2 fe             	and    edx,0xfffffffe
c000fbfe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fc04:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000fc09:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fc0f:	83 e0 01             	and    eax,0x1
c000fc12:	84 c0                	test   al,al
c000fc14:	0f 95 c0             	setne  al
c000fc17:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fc1a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fc21:	83 ec 0c             	sub    esp,0xc
c000fc24:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fc27:	e8 bb a1 ff ff       	call   c0009de7 <malloc>
c000fc2c:	83 c4 10             	add    esp,0x10
c000fc2f:	89 c3                	mov    ebx,eax
c000fc31:	83 ec 0c             	sub    esp,0xc
c000fc34:	53                   	push   ebx
c000fc35:	e8 16 28 01 00       	call   c0022450 <PIC::PIC()>
c000fc3a:	83 c4 10             	add    esp,0x10
c000fc3d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fc40:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc46:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc48:	83 c0 08             	add    eax,0x8
c000fc4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc4d:	6a 00                	push   0x0
c000fc4f:	6a 00                	push   0x0
c000fc51:	6a 00                	push   0x0
c000fc53:	52                   	push   edx
c000fc54:	ff d0                	call   eax
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fc5d:	74 73                	je     c000fcd2 <setupInterruptController()+0x15b>
c000fc5f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc65:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc67:	83 c0 0c             	add    eax,0xc
c000fc6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6c:	6a 00                	push   0x0
c000fc6e:	6a 00                	push   0x0
c000fc70:	6a 00                	push   0x0
c000fc72:	52                   	push   edx
c000fc73:	ff d0                	call   eax
c000fc75:	83 c4 10             	add    esp,0x10
c000fc78:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fc7c:	74 15                	je     c000fc93 <setupInterruptController()+0x11c>
c000fc7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc83:	83 c0 04             	add    eax,0x4
c000fc86:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc88:	83 ec 0c             	sub    esp,0xc
c000fc8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc8e:	ff d0                	call   eax
c000fc90:	83 c4 10             	add    esp,0x10
c000fc93:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fca0:	e8 42 a1 ff ff       	call   c0009de7 <malloc>
c000fca5:	83 c4 10             	add    esp,0x10
c000fca8:	89 c3                	mov    ebx,eax
c000fcaa:	83 ec 0c             	sub    esp,0xc
c000fcad:	53                   	push   ebx
c000fcae:	e8 45 22 01 00       	call   c0021ef8 <APIC::APIC()>
c000fcb3:	83 c4 10             	add    esp,0x10
c000fcb6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fcb9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fcbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc1:	83 c0 08             	add    eax,0x8
c000fcc4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc6:	6a 00                	push   0x0
c000fcc8:	6a 00                	push   0x0
c000fcca:	6a 00                	push   0x0
c000fccc:	52                   	push   edx
c000fccd:	ff d0                	call   eax
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c000fcd7:	83 ec 08             	sub    esp,0x8
c000fcda:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcdd:	50                   	push   eax
c000fcde:	e8 8b e9 ff ff       	call   c000e66e <Device::addChild(Device*)>
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	c7 05 4c 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d4c,0x0
c000fcf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf5:	83 c0 24             	add    eax,0x24
c000fcf8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcfa:	6a 00                	push   0x0
c000fcfc:	68 56 f7 00 c0       	push   0xc000f756
c000fd01:	6a 00                	push   0x0
c000fd03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd06:	ff d0                	call   eax
c000fd08:	83 c4 10             	add    esp,0x10
c000fd0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd10:	83 c0 24             	add    eax,0x24
c000fd13:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd15:	6a 00                	push   0x0
c000fd17:	68 56 f7 00 c0       	push   0xc000f756
c000fd1c:	6a 01                	push   0x1
c000fd1e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd21:	ff d0                	call   eax
c000fd23:	83 c4 10             	add    esp,0x10
c000fd26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd29:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd2b:	83 c0 24             	add    eax,0x24
c000fd2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd30:	6a 00                	push   0x0
c000fd32:	68 53 ef 00 c0       	push   0xc000ef53
c000fd37:	6a 02                	push   0x2
c000fd39:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd3c:	ff d0                	call   eax
c000fd3e:	83 c4 10             	add    esp,0x10
c000fd41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd44:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd46:	83 c0 24             	add    eax,0x24
c000fd49:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd4b:	6a 00                	push   0x0
c000fd4d:	68 56 f7 00 c0       	push   0xc000f756
c000fd52:	6a 03                	push   0x3
c000fd54:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd57:	ff d0                	call   eax
c000fd59:	83 c4 10             	add    esp,0x10
c000fd5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd61:	83 c0 24             	add    eax,0x24
c000fd64:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd66:	6a 00                	push   0x0
c000fd68:	68 56 f7 00 c0       	push   0xc000f756
c000fd6d:	6a 04                	push   0x4
c000fd6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd72:	ff d0                	call   eax
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd7a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7c:	83 c0 24             	add    eax,0x24
c000fd7f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd81:	6a 00                	push   0x0
c000fd83:	68 56 f7 00 c0       	push   0xc000f756
c000fd88:	6a 05                	push   0x5
c000fd8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd8d:	ff d0                	call   eax
c000fd8f:	83 c4 10             	add    esp,0x10
c000fd92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd97:	83 c0 24             	add    eax,0x24
c000fd9a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd9c:	6a 00                	push   0x0
c000fd9e:	68 75 f7 00 c0       	push   0xc000f775
c000fda3:	6a 06                	push   0x6
c000fda5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fda8:	ff d0                	call   eax
c000fdaa:	83 c4 10             	add    esp,0x10
c000fdad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb2:	83 c0 24             	add    eax,0x24
c000fdb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb7:	6a 00                	push   0x0
c000fdb9:	68 85 f5 00 c0       	push   0xc000f585
c000fdbe:	6a 07                	push   0x7
c000fdc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdc3:	ff d0                	call   eax
c000fdc5:	83 c4 10             	add    esp,0x10
c000fdc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdcd:	83 c0 24             	add    eax,0x24
c000fdd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdd2:	6a 00                	push   0x0
c000fdd4:	68 6e ed 00 c0       	push   0xc000ed6e
c000fdd9:	6a 08                	push   0x8
c000fddb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdde:	ff d0                	call   eax
c000fde0:	83 c4 10             	add    esp,0x10
c000fde3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde8:	83 c0 24             	add    eax,0x24
c000fdeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fded:	6a 00                	push   0x0
c000fdef:	68 56 f7 00 c0       	push   0xc000f756
c000fdf4:	6a 09                	push   0x9
c000fdf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdf9:	ff d0                	call   eax
c000fdfb:	83 c4 10             	add    esp,0x10
c000fdfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe03:	83 c0 24             	add    eax,0x24
c000fe06:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe08:	6a 00                	push   0x0
c000fe0a:	68 56 f7 00 c0       	push   0xc000f756
c000fe0f:	6a 0a                	push   0xa
c000fe11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe14:	ff d0                	call   eax
c000fe16:	83 c4 10             	add    esp,0x10
c000fe19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1e:	83 c0 24             	add    eax,0x24
c000fe21:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe23:	6a 00                	push   0x0
c000fe25:	68 56 f7 00 c0       	push   0xc000f756
c000fe2a:	6a 0b                	push   0xb
c000fe2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe2f:	ff d0                	call   eax
c000fe31:	83 c4 10             	add    esp,0x10
c000fe34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe37:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe39:	83 c0 24             	add    eax,0x24
c000fe3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3e:	6a 00                	push   0x0
c000fe40:	68 56 f7 00 c0       	push   0xc000f756
c000fe45:	6a 0c                	push   0xc
c000fe47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe4a:	ff d0                	call   eax
c000fe4c:	83 c4 10             	add    esp,0x10
c000fe4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe54:	83 c0 24             	add    eax,0x24
c000fe57:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe59:	6a 00                	push   0x0
c000fe5b:	68 ce f6 00 c0       	push   0xc000f6ce
c000fe60:	6a 0d                	push   0xd
c000fe62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe65:	ff d0                	call   eax
c000fe67:	83 c4 10             	add    esp,0x10
c000fe6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe6f:	83 c0 24             	add    eax,0x24
c000fe72:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe74:	6a 00                	push   0x0
c000fe76:	68 07 f7 00 c0       	push   0xc000f707
c000fe7b:	6a 0e                	push   0xe
c000fe7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe80:	ff d0                	call   eax
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe8a:	83 c0 24             	add    eax,0x24
c000fe8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe8f:	6a 00                	push   0x0
c000fe91:	68 56 f7 00 c0       	push   0xc000f756
c000fe96:	6a 0f                	push   0xf
c000fe98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe9b:	ff d0                	call   eax
c000fe9d:	83 c4 10             	add    esp,0x10
c000fea0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fea3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea5:	83 c0 24             	add    eax,0x24
c000fea8:	8b 00                	mov    eax,DWORD PTR [eax]
c000feaa:	6a 00                	push   0x0
c000feac:	68 56 f7 00 c0       	push   0xc000f756
c000feb1:	6a 10                	push   0x10
c000feb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000feb6:	ff d0                	call   eax
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000febe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec0:	83 c0 24             	add    eax,0x24
c000fec3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec5:	6a 00                	push   0x0
c000fec7:	68 56 f7 00 c0       	push   0xc000f756
c000fecc:	6a 11                	push   0x11
c000fece:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fed1:	ff d0                	call   eax
c000fed3:	83 c4 10             	add    esp,0x10
c000fed6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fed9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fedb:	83 c0 24             	add    eax,0x24
c000fede:	8b 00                	mov    eax,DWORD PTR [eax]
c000fee0:	6a 00                	push   0x0
c000fee2:	68 56 f7 00 c0       	push   0xc000f756
c000fee7:	6a 12                	push   0x12
c000fee9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000feec:	ff d0                	call   eax
c000feee:	83 c4 10             	add    esp,0x10
c000fef1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fef4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef6:	83 c0 24             	add    eax,0x24
c000fef9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fefb:	6a 00                	push   0x0
c000fefd:	68 56 f7 00 c0       	push   0xc000f756
c000ff02:	6a 13                	push   0x13
c000ff04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff07:	ff d0                	call   eax
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff11:	83 c0 24             	add    eax,0x24
c000ff14:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff16:	6a 00                	push   0x0
c000ff18:	68 56 f7 00 c0       	push   0xc000f756
c000ff1d:	6a 14                	push   0x14
c000ff1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff22:	ff d0                	call   eax
c000ff24:	83 c4 10             	add    esp,0x10
c000ff27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff2c:	83 c0 24             	add    eax,0x24
c000ff2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff31:	6a 00                	push   0x0
c000ff33:	68 56 f7 00 c0       	push   0xc000f756
c000ff38:	6a 1e                	push   0x1e
c000ff3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff3d:	ff d0                	call   eax
c000ff3f:	83 c4 10             	add    esp,0x10
c000ff42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff45:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff47:	83 c0 24             	add    eax,0x24
c000ff4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff4c:	6a 00                	push   0x0
c000ff4e:	68 7b 75 01 c0       	push   0xc001757b
c000ff53:	6a 60                	push   0x60
c000ff55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff58:	ff d0                	call   eax
c000ff5a:	83 c4 10             	add    esp,0x10
c000ff5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff60:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff63:	c9                   	leave  
c000ff64:	c3                   	ret    
c000ff65:	90                   	nop

c000ff66 <InterruptController::convertLegacyIRQNumber(int)>:
c000ff66:	55                   	push   ebp
c000ff67:	89 e5                	mov    ebp,esp
c000ff69:	83 ec 08             	sub    esp,0x8
c000ff6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff6f:	83 ec 0c             	sub    esp,0xc
c000ff72:	50                   	push   eax
c000ff73:	e8 f6 e9 ff ff       	call   c000e96e <Device::getName()>
c000ff78:	83 c4 10             	add    esp,0x10
c000ff7b:	8a 00                	mov    al,BYTE PTR [eax]
c000ff7d:	3c 41                	cmp    al,0x41
c000ff7f:	0f 94 c0             	sete   al
c000ff82:	84 c0                	test   al,al
c000ff84:	74 28                	je     c000ffae <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ff86:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000ff8a:	7f 12                	jg     c000ff9e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000ff8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff8f:	05 00 83 02 c0       	add    eax,0xc0028300
c000ff94:	8a 00                	mov    al,BYTE PTR [eax]
c000ff96:	0f b6 c0             	movzx  eax,al
c000ff99:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000ff9c:	eb 10                	jmp    c000ffae <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ff9e:	83 ec 0c             	sub    esp,0xc
c000ffa1:	68 1c 5a 02 c0       	push   0xc0025a1c
c000ffa6:	e8 32 52 00 00       	call   c00151dd <Krnl::panic(char const*)>
c000ffab:	83 c4 10             	add    esp,0x10
c000ffae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ffb1:	c9                   	leave  
c000ffb2:	c3                   	ret    
c000ffb3:	90                   	nop

c000ffb4 <startGUI(void*)>:
c000ffb4:	55                   	push   ebp
c000ffb5:	89 e5                	mov    ebp,esp
c000ffb7:	53                   	push   ebx
c000ffb8:	83 ec 04             	sub    esp,0x4
c000ffbb:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000ffc0:	48                   	dec    eax
c000ffc1:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c000ffc6:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c000ffcb:	85 c0                	test   eax,eax
c000ffcd:	75 01                	jne    c000ffd0 <startGUI(void*)+0x1c>
c000ffcf:	fb                   	sti    
c000ffd0:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c000ffd6:	83 ec 08             	sub    esp,0x8
c000ffd9:	6a 01                	push   0x1
c000ffdb:	68 9c 5a 02 c0       	push   0xc0025a9c
c000ffe0:	e8 71 85 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c000ffe5:	83 c4 10             	add    esp,0x10
c000ffe8:	83 ec 08             	sub    esp,0x8
c000ffeb:	53                   	push   ebx
c000ffec:	50                   	push   eax
c000ffed:	e8 95 87 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c000fff2:	83 c4 10             	add    esp,0x10
c000fff5:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c000fffb:	83 ec 08             	sub    esp,0x8
c000fffe:	6a 01                	push   0x1
c0010000:	68 b6 5a 02 c0       	push   0xc0025ab6
c0010005:	e8 4c 85 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	83 ec 08             	sub    esp,0x8
c0010010:	53                   	push   ebx
c0010011:	50                   	push   eax
c0010012:	e8 70 87 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c0010017:	83 c4 10             	add    esp,0x10
c001001a:	90                   	nop
c001001b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001001e:	c9                   	leave  
c001001f:	c3                   	ret    

c0010020 <startGUIVESA(void*)>:
c0010020:	55                   	push   ebp
c0010021:	89 e5                	mov    ebp,esp
c0010023:	53                   	push   ebx
c0010024:	83 ec 04             	sub    esp,0x4
c0010027:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001002c:	48                   	dec    eax
c001002d:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0010032:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0010037:	85 c0                	test   eax,eax
c0010039:	75 01                	jne    c001003c <startGUIVESA(void*)+0x1c>
c001003b:	fb                   	sti    
c001003c:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0010042:	83 ec 08             	sub    esp,0x8
c0010045:	6a 01                	push   0x1
c0010047:	68 d4 5a 02 c0       	push   0xc0025ad4
c001004c:	e8 05 85 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	83 ec 08             	sub    esp,0x8
c0010057:	53                   	push   ebx
c0010058:	50                   	push   eax
c0010059:	e8 29 87 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c001005e:	83 c4 10             	add    esp,0x10
c0010061:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0010067:	83 ec 08             	sub    esp,0x8
c001006a:	6a 01                	push   0x1
c001006c:	68 b6 5a 02 c0       	push   0xc0025ab6
c0010071:	e8 e0 84 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c0010076:	83 c4 10             	add    esp,0x10
c0010079:	83 ec 08             	sub    esp,0x8
c001007c:	53                   	push   ebx
c001007d:	50                   	push   eax
c001007e:	e8 04 87 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c0010083:	83 c4 10             	add    esp,0x10
c0010086:	90                   	nop
c0010087:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001008a:	c9                   	leave  
c001008b:	c3                   	ret    

c001008c <sendKeyToTerminal(unsigned char)>:
c001008c:	55                   	push   ebp
c001008d:	89 e5                	mov    ebp,esp
c001008f:	83 ec 28             	sub    esp,0x28
c0010092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010095:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0010098:	a1 84 8c 02 c0       	mov    eax,ds:0xc0028c84
c001009d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00100a1:	83 ec 08             	sub    esp,0x8
c00100a4:	52                   	push   edx
c00100a5:	50                   	push   eax
c00100a6:	e8 d9 b4 ff ff       	call   c000b584 <VgaText::receiveKey(unsigned char)>
c00100ab:	83 c4 10             	add    esp,0x10
c00100ae:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00100b2:	0f 85 8f 00 00 00    	jne    c0010147 <sendKeyToTerminal(unsigned char)+0xbb>
c00100b8:	fa                   	cli    
c00100b9:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00100be:	40                   	inc    eax
c00100bf:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00100c4:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00100c9:	40                   	inc    eax
c00100ca:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00100cf:	a1 60 8d 02 c0       	mov    eax,ds:0xc0028d60
c00100d4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00100d7:	c7 05 60 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d60,0x0
c00100e1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00100e5:	74 1f                	je     c0010106 <sendKeyToTerminal(unsigned char)+0x7a>
c00100e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00100ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00100f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00100f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00100f6:	83 ec 0c             	sub    esp,0xc
c00100f9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00100fc:	e8 f7 92 00 00       	call   c00193f8 <unblockTask(ThreadControlBlock*)>
c0010101:	83 c4 10             	add    esp,0x10
c0010104:	eb db                	jmp    c00100e1 <sendKeyToTerminal(unsigned char)+0x55>
c0010106:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c001010b:	48                   	dec    eax
c001010c:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c0010111:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0010116:	85 c0                	test   eax,eax
c0010118:	75 18                	jne    c0010132 <sendKeyToTerminal(unsigned char)+0xa6>
c001011a:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c001011f:	85 c0                	test   eax,eax
c0010121:	74 0f                	je     c0010132 <sendKeyToTerminal(unsigned char)+0xa6>
c0010123:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001012d:	e8 0a 8e 00 00       	call   c0018f3c <schedule()>
c0010132:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0010137:	48                   	dec    eax
c0010138:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001013d:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0010142:	85 c0                	test   eax,eax
c0010144:	75 01                	jne    c0010147 <sendKeyToTerminal(unsigned char)+0xbb>
c0010146:	fb                   	sti    
c0010147:	90                   	nop
c0010148:	c9                   	leave  
c0010149:	c3                   	ret    

c001014a <sendKeyboardToken(KeyboardToken)>:
c001014a:	55                   	push   ebp
c001014b:	89 e5                	mov    ebp,esp
c001014d:	83 ec 18             	sub    esp,0x18
c0010150:	e8 7a 53 00 00       	call   c00154cf <Krnl::userIOReceived()>
c0010155:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0010158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001015b:	0f b7 c0             	movzx  eax,ax
c001015e:	83 f2 01             	xor    edx,0x1
c0010161:	88 90 80 8d 02 c0    	mov    BYTE PTR [eax-0x3ffd7280],dl
c0010167:	a1 68 8d 02 c0       	mov    eax,ds:0xc0028d68
c001016c:	85 c0                	test   eax,eax
c001016e:	74 24                	je     c0010194 <sendKeyboardToken(KeyboardToken)+0x4a>
c0010170:	8b 0d 68 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d68
c0010176:	83 ec 04             	sub    esp,0x4
c0010179:	68 80 8d 02 c0       	push   0xc0028d80
c001017e:	83 ec 08             	sub    esp,0x8
c0010181:	89 e2                	mov    edx,esp
c0010183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010186:	89 02                	mov    DWORD PTR [edx],eax
c0010188:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001018b:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001018f:	ff d1                	call   ecx
c0010191:	83 c4 10             	add    esp,0x10
c0010194:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0010198:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001019b:	a0 88 91 02 c0       	mov    al,ds:0xc0029188
c00101a0:	38 c2                	cmp    dl,al
c00101a2:	74 1c                	je     c00101c0 <sendKeyboardToken(KeyboardToken)+0x76>
c00101a4:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00101a7:	a2 88 91 02 c0       	mov    ds:0xc0029188,al
c00101ac:	a0 88 91 02 c0       	mov    al,ds:0xc0029188
c00101b1:	0f b6 c0             	movzx  eax,al
c00101b4:	83 ec 0c             	sub    esp,0xc
c00101b7:	50                   	push   eax
c00101b8:	e8 09 aa ff ff       	call   c000abc6 <setTerminalScrollLock(bool)>
c00101bd:	83 c4 10             	add    esp,0x10
c00101c0:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00101c3:	84 c0                	test   al,al
c00101c5:	0f 84 ae 00 00 00    	je     c0010279 <sendKeyboardToken(KeyboardToken)+0x12f>
c00101cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101ce:	66 3d 10 03          	cmp    ax,0x310
c00101d2:	75 06                	jne    c00101da <sendKeyboardToken(KeyboardToken)+0x90>
c00101d4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00101da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101dd:	66 3d 11 03          	cmp    ax,0x311
c00101e1:	75 06                	jne    c00101e9 <sendKeyboardToken(KeyboardToken)+0x9f>
c00101e3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00101e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101ec:	66 3d 12 03          	cmp    ax,0x312
c00101f0:	75 06                	jne    c00101f8 <sendKeyboardToken(KeyboardToken)+0xae>
c00101f2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00101f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101fb:	66 3d 13 03          	cmp    ax,0x313
c00101ff:	75 06                	jne    c0010207 <sendKeyboardToken(KeyboardToken)+0xbd>
c0010201:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0010207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001020a:	66 3d 14 03          	cmp    ax,0x314
c001020e:	75 06                	jne    c0010216 <sendKeyboardToken(KeyboardToken)+0xcc>
c0010210:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0010216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010219:	66 3d 15 03          	cmp    ax,0x315
c001021d:	75 06                	jne    c0010225 <sendKeyboardToken(KeyboardToken)+0xdb>
c001021f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010228:	66 3d 16 03          	cmp    ax,0x316
c001022c:	75 06                	jne    c0010234 <sendKeyboardToken(KeyboardToken)+0xea>
c001022e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0010234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010237:	66 3d 17 03          	cmp    ax,0x317
c001023b:	75 06                	jne    c0010243 <sendKeyboardToken(KeyboardToken)+0xf9>
c001023d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0010243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010246:	66 3d 18 03          	cmp    ax,0x318
c001024a:	75 06                	jne    c0010252 <sendKeyboardToken(KeyboardToken)+0x108>
c001024c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0010252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010255:	66 3d 19 03          	cmp    ax,0x319
c0010259:	75 06                	jne    c0010261 <sendKeyboardToken(KeyboardToken)+0x117>
c001025b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0010261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010264:	66 3d 1a 03          	cmp    ax,0x31a
c0010268:	0f 85 c9 00 00 00    	jne    c0010337 <sendKeyboardToken(KeyboardToken)+0x1ed>
c001026e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0010274:	e9 be 00 00 00       	jmp    c0010337 <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001027c:	66 3d 10 03          	cmp    ax,0x310
c0010280:	75 0a                	jne    c001028c <sendKeyboardToken(KeyboardToken)+0x142>
c0010282:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0010288:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001028c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001028f:	66 3d 11 03          	cmp    ax,0x311
c0010293:	75 0a                	jne    c001029f <sendKeyboardToken(KeyboardToken)+0x155>
c0010295:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001029b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001029f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102a2:	66 3d 12 03          	cmp    ax,0x312
c00102a6:	75 0a                	jne    c00102b2 <sendKeyboardToken(KeyboardToken)+0x168>
c00102a8:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00102ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102b5:	66 3d 13 03          	cmp    ax,0x313
c00102b9:	75 0a                	jne    c00102c5 <sendKeyboardToken(KeyboardToken)+0x17b>
c00102bb:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00102c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102c8:	66 3d 14 03          	cmp    ax,0x314
c00102cc:	75 0a                	jne    c00102d8 <sendKeyboardToken(KeyboardToken)+0x18e>
c00102ce:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00102d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102db:	66 3d 15 03          	cmp    ax,0x315
c00102df:	75 0a                	jne    c00102eb <sendKeyboardToken(KeyboardToken)+0x1a1>
c00102e1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00102e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102ee:	66 3d 16 03          	cmp    ax,0x316
c00102f2:	75 0a                	jne    c00102fe <sendKeyboardToken(KeyboardToken)+0x1b4>
c00102f4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00102fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010301:	66 3d 17 03          	cmp    ax,0x317
c0010305:	75 0a                	jne    c0010311 <sendKeyboardToken(KeyboardToken)+0x1c7>
c0010307:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001030d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010314:	66 3d 18 03          	cmp    ax,0x318
c0010318:	75 0a                	jne    c0010324 <sendKeyboardToken(KeyboardToken)+0x1da>
c001031a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0010320:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010327:	66 3d 19 03          	cmp    ax,0x319
c001032b:	75 0a                	jne    c0010337 <sendKeyboardToken(KeyboardToken)+0x1ed>
c001032d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0010333:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001033a:	66 3d 00 02          	cmp    ax,0x200
c001033e:	75 2c                	jne    c001036c <sendKeyboardToken(KeyboardToken)+0x222>
c0010340:	a0 80 91 02 c0       	mov    al,ds:0xc0029180
c0010345:	83 f0 01             	xor    eax,0x1
c0010348:	84 c0                	test   al,al
c001034a:	74 20                	je     c001036c <sendKeyboardToken(KeyboardToken)+0x222>
c001034c:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c0010351:	6a 01                	push   0x1
c0010353:	6a 00                	push   0x0
c0010355:	68 b4 ff 00 c0       	push   0xc000ffb4
c001035a:	50                   	push   eax
c001035b:	e8 c0 89 00 00       	call   c0018d20 <Process::createThread(void (*)(void*), void*, int)>
c0010360:	83 c4 10             	add    esp,0x10
c0010363:	c6 05 80 91 02 c0 01 	mov    BYTE PTR ds:0xc0029180,0x1
c001036a:	eb 33                	jmp    c001039f <sendKeyboardToken(KeyboardToken)+0x255>
c001036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001036f:	66 3d 01 02          	cmp    ax,0x201
c0010373:	75 2a                	jne    c001039f <sendKeyboardToken(KeyboardToken)+0x255>
c0010375:	a0 80 91 02 c0       	mov    al,ds:0xc0029180
c001037a:	83 f0 01             	xor    eax,0x1
c001037d:	84 c0                	test   al,al
c001037f:	74 1e                	je     c001039f <sendKeyboardToken(KeyboardToken)+0x255>
c0010381:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c0010386:	6a 01                	push   0x1
c0010388:	6a 00                	push   0x0
c001038a:	68 20 00 01 c0       	push   0xc0010020
c001038f:	50                   	push   eax
c0010390:	e8 8b 89 00 00       	call   c0018d20 <Process::createThread(void (*)(void*), void*, int)>
c0010395:	83 c4 10             	add    esp,0x10
c0010398:	c6 05 80 91 02 c0 01 	mov    BYTE PTR ds:0xc0029180,0x1
c001039f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103a2:	66 3d 1d 03          	cmp    ax,0x31d
c00103a6:	75 06                	jne    c00103ae <sendKeyboardToken(KeyboardToken)+0x264>
c00103a8:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00103ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103b1:	66 3d 1c 03          	cmp    ax,0x31c
c00103b5:	75 06                	jne    c00103bd <sendKeyboardToken(KeyboardToken)+0x273>
c00103b7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00103bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103c0:	66 3d 1b 03          	cmp    ax,0x31b
c00103c4:	75 06                	jne    c00103cc <sendKeyboardToken(KeyboardToken)+0x282>
c00103c6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00103cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103cf:	66 3d 1e 03          	cmp    ax,0x31e
c00103d3:	75 06                	jne    c00103db <sendKeyboardToken(KeyboardToken)+0x291>
c00103d5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00103db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103de:	66 3d 1f 03          	cmp    ax,0x31f
c00103e2:	75 06                	jne    c00103ea <sendKeyboardToken(KeyboardToken)+0x2a0>
c00103e4:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00103ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103ed:	66 3d 1a 03          	cmp    ax,0x31a
c00103f1:	75 06                	jne    c00103f9 <sendKeyboardToken(KeyboardToken)+0x2af>
c00103f3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00103f9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00103fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010400:	83 f0 01             	xor    eax,0x1
c0010403:	84 c0                	test   al,al
c0010405:	74 77                	je     c001047e <sendKeyboardToken(KeyboardToken)+0x334>
c0010407:	a0 81 8e 02 c0       	mov    al,ds:0xc0028e81
c001040c:	84 c0                	test   al,al
c001040e:	74 41                	je     c0010451 <sendKeyboardToken(KeyboardToken)+0x307>
c0010410:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010414:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0010418:	74 2b                	je     c0010445 <sendKeyboardToken(KeyboardToken)+0x2fb>
c001041a:	8b 15 84 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029184
c0010420:	89 d0                	mov    eax,edx
c0010422:	c1 e0 02             	shl    eax,0x2
c0010425:	01 d0                	add    eax,edx
c0010427:	01 c0                	add    eax,eax
c0010429:	a3 84 91 02 c0       	mov    ds:0xc0029184,eax
c001042e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010431:	0f b7 c0             	movzx  eax,ax
c0010434:	8d 50 d0             	lea    edx,[eax-0x30]
c0010437:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c001043c:	01 d0                	add    eax,edx
c001043e:	a3 84 91 02 c0       	mov    ds:0xc0029184,eax
c0010443:	eb 6d                	jmp    c00104b2 <sendKeyboardToken(KeyboardToken)+0x368>
c0010445:	c7 05 84 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029184,0x0
c001044f:	eb 61                	jmp    c00104b2 <sendKeyboardToken(KeyboardToken)+0x368>
c0010451:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c0010456:	85 c0                	test   eax,eax
c0010458:	74 18                	je     c0010472 <sendKeyboardToken(KeyboardToken)+0x328>
c001045a:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c001045f:	0f b6 c0             	movzx  eax,al
c0010462:	83 ec 0c             	sub    esp,0xc
c0010465:	50                   	push   eax
c0010466:	e8 21 fc ff ff       	call   c001008c <sendKeyToTerminal(unsigned char)>
c001046b:	83 c4 10             	add    esp,0x10
c001046e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010472:	c7 05 84 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029184,0x0
c001047c:	eb 34                	jmp    c00104b2 <sendKeyboardToken(KeyboardToken)+0x368>
c001047e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010481:	66 3d 01 01          	cmp    ax,0x101
c0010485:	75 2b                	jne    c00104b2 <sendKeyboardToken(KeyboardToken)+0x368>
c0010487:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c001048c:	85 c0                	test   eax,eax
c001048e:	74 18                	je     c00104a8 <sendKeyboardToken(KeyboardToken)+0x35e>
c0010490:	a1 84 91 02 c0       	mov    eax,ds:0xc0029184
c0010495:	0f b6 c0             	movzx  eax,al
c0010498:	83 ec 0c             	sub    esp,0xc
c001049b:	50                   	push   eax
c001049c:	e8 eb fb ff ff       	call   c001008c <sendKeyToTerminal(unsigned char)>
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00104a8:	c7 05 84 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029184,0x0
c00104b2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00104b5:	83 f0 01             	xor    eax,0x1
c00104b8:	84 c0                	test   al,al
c00104ba:	74 4c                	je     c0010508 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00104bf:	83 f0 01             	xor    eax,0x1
c00104c2:	84 c0                	test   al,al
c00104c4:	74 42                	je     c0010508 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104c6:	a0 80 8e 02 c0       	mov    al,ds:0xc0028e80
c00104cb:	83 f0 01             	xor    eax,0x1
c00104ce:	84 c0                	test   al,al
c00104d0:	74 36                	je     c0010508 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104d5:	66 83 f8 1f          	cmp    ax,0x1f
c00104d9:	76 09                	jbe    c00104e4 <sendKeyboardToken(KeyboardToken)+0x39a>
c00104db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104de:	66 83 f8 7e          	cmp    ax,0x7e
c00104e2:	76 12                	jbe    c00104f6 <sendKeyboardToken(KeyboardToken)+0x3ac>
c00104e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104e7:	66 83 f8 0a          	cmp    ax,0xa
c00104eb:	74 09                	je     c00104f6 <sendKeyboardToken(KeyboardToken)+0x3ac>
c00104ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104f0:	66 83 f8 08          	cmp    ax,0x8
c00104f4:	75 12                	jne    c0010508 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104f9:	0f b6 c0             	movzx  eax,al
c00104fc:	83 ec 0c             	sub    esp,0xc
c00104ff:	50                   	push   eax
c0010500:	e8 87 fb ff ff       	call   c001008c <sendKeyToTerminal(unsigned char)>
c0010505:	83 c4 10             	add    esp,0x10
c0010508:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001050b:	83 f0 01             	xor    eax,0x1
c001050e:	84 c0                	test   al,al
c0010510:	74 4f                	je     c0010561 <sendKeyboardToken(KeyboardToken)+0x417>
c0010512:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010515:	83 f0 01             	xor    eax,0x1
c0010518:	84 c0                	test   al,al
c001051a:	74 45                	je     c0010561 <sendKeyboardToken(KeyboardToken)+0x417>
c001051c:	a0 80 8e 02 c0       	mov    al,ds:0xc0028e80
c0010521:	84 c0                	test   al,al
c0010523:	74 3c                	je     c0010561 <sendKeyboardToken(KeyboardToken)+0x417>
c0010525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010528:	66 83 f8 3f          	cmp    ax,0x3f
c001052c:	76 33                	jbe    c0010561 <sendKeyboardToken(KeyboardToken)+0x417>
c001052e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010531:	66 83 f8 7f          	cmp    ax,0x7f
c0010535:	77 2a                	ja     c0010561 <sendKeyboardToken(KeyboardToken)+0x417>
c0010537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001053a:	88 c2                	mov    dl,al
c001053c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001053f:	66 83 f8 5f          	cmp    ax,0x5f
c0010543:	76 04                	jbe    c0010549 <sendKeyboardToken(KeyboardToken)+0x3ff>
c0010545:	b0 20                	mov    al,0x20
c0010547:	eb 02                	jmp    c001054b <sendKeyboardToken(KeyboardToken)+0x401>
c0010549:	b0 00                	mov    al,0x0
c001054b:	29 c2                	sub    edx,eax
c001054d:	88 d0                	mov    al,dl
c001054f:	83 e8 40             	sub    eax,0x40
c0010552:	0f b6 c0             	movzx  eax,al
c0010555:	83 ec 0c             	sub    esp,0xc
c0010558:	50                   	push   eax
c0010559:	e8 2e fb ff ff       	call   c001008c <sendKeyToTerminal(unsigned char)>
c001055e:	83 c4 10             	add    esp,0x10
c0010561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010564:	66 3d 00 03          	cmp    ax,0x300
c0010568:	75 0f                	jne    c0010579 <sendKeyboardToken(KeyboardToken)+0x42f>
c001056a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001056d:	83 f0 01             	xor    eax,0x1
c0010570:	84 c0                	test   al,al
c0010572:	74 05                	je     c0010579 <sendKeyboardToken(KeyboardToken)+0x42f>
c0010574:	e8 be a9 ff ff       	call   c000af37 <doTerminalCycle()>
c0010579:	90                   	nop
c001057a:	c9                   	leave  
c001057b:	c3                   	ret    

c001057c <clearInternalKeybuffer(VgaText*)>:
c001057c:	55                   	push   ebp
c001057d:	89 e5                	mov    ebp,esp
c001057f:	83 ec 08             	sub    esp,0x8
c0010582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010585:	05 32 01 00 00       	add    eax,0x132
c001058a:	83 ec 0c             	sub    esp,0xc
c001058d:	50                   	push   eax
c001058e:	e8 1d 01 ff ff       	call   c00006b0 <strlen>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010599:	81 c2 32 01 00 00    	add    edx,0x132
c001059f:	83 ec 04             	sub    esp,0x4
c00105a2:	50                   	push   eax
c00105a3:	6a 00                	push   0x0
c00105a5:	52                   	push   edx
c00105a6:	e8 e9 00 ff ff       	call   c0000694 <memset>
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	90                   	nop
c00105af:	c9                   	leave  
c00105b0:	c3                   	ret    

c00105b1 <readKeyboard(VgaText*, char*, unsigned long)>:
c00105b1:	55                   	push   ebp
c00105b2:	89 e5                	mov    ebp,esp
c00105b4:	83 ec 18             	sub    esp,0x18
c00105b7:	a1 68 8d 02 c0       	mov    eax,ds:0xc0028d68
c00105bc:	85 c0                	test   eax,eax
c00105be:	74 2a                	je     c00105ea <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00105c0:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00105c6:	8b 0d 68 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d68
c00105cc:	83 ec 04             	sub    esp,0x4
c00105cf:	68 80 8d 02 c0       	push   0xc0028d80
c00105d4:	83 ec 08             	sub    esp,0x8
c00105d7:	89 e2                	mov    edx,esp
c00105d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00105dc:	89 02                	mov    DWORD PTR [edx],eax
c00105de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00105e1:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00105e5:	ff d1                	call   ecx
c00105e7:	83 c4 10             	add    esp,0x10
c00105ea:	fb                   	sti    
c00105eb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00105f2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00105f6:	0f 84 a1 00 00 00    	je     c001069d <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00105fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00105ff:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010605:	84 c0                	test   al,al
c0010607:	75 28                	jne    c0010631 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010609:	fa                   	cli    
c001060a:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001060f:	40                   	inc    eax
c0010610:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0010615:	e8 22 89 00 00       	call   c0018f3c <schedule()>
c001061a:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001061f:	48                   	dec    eax
c0010620:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0010625:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001062a:	85 c0                	test   eax,eax
c001062c:	75 ce                	jne    c00105fc <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001062e:	fb                   	sti    
c001062f:	eb cb                	jmp    c00105fc <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010631:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010634:	8d 50 01             	lea    edx,[eax+0x1]
c0010637:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001063a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001063d:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c0010643:	88 10                	mov    BYTE PTR [eax],dl
c0010645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010648:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001064e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010654:	05 32 01 00 00       	add    eax,0x132
c0010659:	83 ec 0c             	sub    esp,0xc
c001065c:	50                   	push   eax
c001065d:	e8 4e 00 ff ff       	call   c00006b0 <strlen>
c0010662:	83 c4 10             	add    esp,0x10
c0010665:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010668:	81 c2 32 01 00 00    	add    edx,0x132
c001066e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010671:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010674:	81 c2 32 01 00 00    	add    edx,0x132
c001067a:	83 ec 04             	sub    esp,0x4
c001067d:	50                   	push   eax
c001067e:	51                   	push   ecx
c001067f:	52                   	push   edx
c0010680:	e8 47 ff fe ff       	call   c00005cc <memmove>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001068b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001068e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0010692:	0f 85 5a ff ff ff    	jne    c00105f2 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010698:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001069b:	eb 03                	jmp    c00106a0 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c001069d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00106a0:	c9                   	leave  
c00106a1:	c3                   	ret    

c00106a2 <Keyboard::Keyboard(char const*)>:
c00106a2:	83 ec 0c             	sub    esp,0xc
c00106a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a9:	83 ec 08             	sub    esp,0x8
c00106ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b0:	50                   	push   eax
c00106b1:	e8 bc e1 ff ff       	call   c000e872 <Device::Device(char const*)>
c00106b6:	83 c4 10             	add    esp,0x10
c00106b9:	ba f8 5a 02 c0       	mov    edx,0xc0025af8
c00106be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c2:	89 10                	mov    DWORD PTR [eax],edx
c00106c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00106d2:	c6 05 64 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d64,0x1
c00106d9:	90                   	nop
c00106da:	83 c4 0c             	add    esp,0xc
c00106dd:	c3                   	ret    

c00106de <Keyboard::~Keyboard()>:
c00106de:	83 ec 0c             	sub    esp,0xc
c00106e1:	ba f8 5a 02 c0       	mov    edx,0xc0025af8
c00106e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ea:	89 10                	mov    DWORD PTR [eax],edx
c00106ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f0:	83 ec 0c             	sub    esp,0xc
c00106f3:	50                   	push   eax
c00106f4:	e8 43 de ff ff       	call   c000e53c <Device::~Device()>
c00106f9:	83 c4 10             	add    esp,0x10
c00106fc:	90                   	nop
c00106fd:	83 c4 0c             	add    esp,0xc
c0010700:	c3                   	ret    
c0010701:	90                   	nop

c0010702 <Keyboard::~Keyboard()>:
c0010702:	83 ec 0c             	sub    esp,0xc
c0010705:	83 ec 0c             	sub    esp,0xc
c0010708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070c:	e8 cd ff ff ff       	call   c00106de <Keyboard::~Keyboard()>
c0010711:	83 c4 10             	add    esp,0x10
c0010714:	83 ec 08             	sub    esp,0x8
c0010717:	68 5c 01 00 00       	push   0x15c
c001071c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010720:	e8 f5 c8 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0010725:	83 c4 10             	add    esp,0x10
c0010728:	83 c4 0c             	add    esp,0xc
c001072b:	c3                   	ret    

c001072c <LogicalDisk::close(int, int, void*)>:
c001072c:	83 c8 ff             	or     eax,0xffffffff
c001072f:	c3                   	ret    

c0010730 <LogicalDisk::~LogicalDisk()>:
c0010730:	83 ec 0c             	sub    esp,0xc
c0010733:	ba c8 5b 02 c0       	mov    edx,0xc0025bc8
c0010738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073c:	89 10                	mov    DWORD PTR [eax],edx
c001073e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010742:	83 ec 0c             	sub    esp,0xc
c0010745:	50                   	push   eax
c0010746:	e8 f1 dd ff ff       	call   c000e53c <Device::~Device()>
c001074b:	83 c4 10             	add    esp,0x10
c001074e:	90                   	nop
c001074f:	83 c4 0c             	add    esp,0xc
c0010752:	c3                   	ret    
c0010753:	90                   	nop

c0010754 <LogicalDisk::~LogicalDisk()>:
c0010754:	83 ec 0c             	sub    esp,0xc
c0010757:	83 ec 0c             	sub    esp,0xc
c001075a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001075e:	e8 cd ff ff ff       	call   c0010730 <LogicalDisk::~LogicalDisk()>
c0010763:	83 c4 10             	add    esp,0x10
c0010766:	83 ec 08             	sub    esp,0x8
c0010769:	68 74 01 00 00       	push   0x174
c001076e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010772:	e8 a3 c8 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0010777:	83 c4 10             	add    esp,0x10
c001077a:	83 c4 0c             	add    esp,0xc
c001077d:	c3                   	ret    

c001077e <LogicalDisk::open(int, int, void*)>:
c001077e:	83 ec 18             	sub    esp,0x18
c0010781:	68 24 5b 02 c0       	push   0xc0025b24
c0010786:	e8 52 4a 00 00       	call   c00151dd <Krnl::panic(char const*)>
c001078b:	83 c8 ff             	or     eax,0xffffffff
c001078e:	83 c4 1c             	add    esp,0x1c
c0010791:	c3                   	ret    

c0010792 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0010792:	53                   	push   ebx
c0010793:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001079b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001079f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00107a5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00107ab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00107b1:	77 10                	ja     c00107c3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00107b3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00107b9:	89 d3                	mov    ebx,edx
c00107bb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00107c1:	72 05                	jb     c00107c8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00107c3:	83 c8 ff             	or     eax,0xffffffff
c00107c6:	89 c2                	mov    edx,eax
c00107c8:	5b                   	pop    ebx
c00107c9:	c3                   	ret    

c00107ca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00107ca:	56                   	push   esi
c00107cb:	83 c8 ff             	or     eax,0xffffffff
c00107ce:	53                   	push   ebx
c00107cf:	89 c2                	mov    edx,eax
c00107d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107d5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00107d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00107e3:	77 27                	ja     c001080c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00107e5:	89 d8                	mov    eax,ebx
c00107e7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00107ed:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00107f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107f8:	89 c2                	mov    edx,eax
c00107fa:	73 10                	jae    c001080c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00107fc:	89 c8                	mov    eax,ecx
c00107fe:	89 da                	mov    edx,ebx
c0010800:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010806:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001080c:	5b                   	pop    ebx
c001080d:	5e                   	pop    esi
c001080e:	c3                   	ret    
c001080f:	90                   	nop

c0010810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010810:	83 ec 1c             	sub    esp,0x1c
c0010813:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001081b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001081f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010823:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010827:	89 04 24             	mov    DWORD PTR [esp],eax
c001082a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001082e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010836:	83 ec 08             	sub    esp,0x8
c0010839:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001083d:	50                   	push   eax
c001083e:	e8 2f e0 ff ff       	call   c000e872 <Device::Device(char const*)>
c0010843:	83 c4 10             	add    esp,0x10
c0010846:	ba c8 5b 02 c0       	mov    edx,0xc0025bc8
c001084b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001084f:	89 10                	mov    DWORD PTR [eax],edx
c0010851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010855:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001085c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010860:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001086b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010875:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001087d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010881:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010887:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001088d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010891:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010894:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010898:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001089e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00108a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00108ac:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00108b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00108c0:	90                   	nop
c00108c1:	83 c4 1c             	add    esp,0x1c
c00108c4:	c3                   	ret    
c00108c5:	90                   	nop

c00108c6 <LogicalDisk::assignDriveLetter()>:
c00108c6:	55                   	push   ebp
c00108c7:	57                   	push   edi
c00108c8:	56                   	push   esi
c00108c9:	53                   	push   ebx
c00108ca:	83 ec 14             	sub    esp,0x14
c00108cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108d1:	8b 3d a0 91 02 c0    	mov    edi,DWORD PTR ds:0xc00291a0
c00108d7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00108dd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00108e1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00108e7:	8b 3d a4 91 02 c0    	mov    edi,DWORD PTR ds:0xc00291a4
c00108ed:	3c 01                	cmp    al,0x1
c00108ef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00108f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00108f7:	19 c0                	sbb    eax,eax
c00108f9:	83 e0 02             	and    eax,0x2
c00108fc:	83 c0 41             	add    eax,0x41
c00108ff:	0f be e8             	movsx  ebp,al
c0010902:	3c 43                	cmp    al,0x43
c0010904:	75 10                	jne    c0010916 <LogicalDisk::assignDriveLetter()+0x50>
c0010906:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001090d:	75 5d                	jne    c001096c <LogicalDisk::assignDriveLetter()+0xa6>
c001090f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010914:	75 56                	jne    c001096c <LogicalDisk::assignDriveLetter()+0xa6>
c0010916:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010919:	ba 01 00 00 00       	mov    edx,0x1
c001091e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010922:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010926:	d3 e2                	shl    edx,cl
c0010928:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001092c:	89 d7                	mov    edi,edx
c001092e:	89 d6                	mov    esi,edx
c0010930:	c1 ff 1f             	sar    edi,0x1f
c0010933:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010937:	21 f9                	and    ecx,edi
c0010939:	09 d1                	or     ecx,edx
c001093b:	75 2f                	jne    c001096c <LogicalDisk::assignDriveLetter()+0xa6>
c001093d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010941:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010945:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001094b:	09 f2                	or     edx,esi
c001094d:	89 15 a0 91 02 c0    	mov    DWORD PTR ds:0xc00291a0,edx
c0010953:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010957:	09 fa                	or     edx,edi
c0010959:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001095d:	89 15 a4 91 02 c0    	mov    DWORD PTR ds:0xc00291a4,edx
c0010963:	89 1c bd c0 91 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6e40],ebx
c001096a:	eb 08                	jmp    c0010974 <LogicalDisk::assignDriveLetter()+0xae>
c001096c:	45                   	inc    ebp
c001096d:	40                   	inc    eax
c001096e:	3c 5b                	cmp    al,0x5b
c0010970:	75 90                	jne    c0010902 <LogicalDisk::assignDriveLetter()+0x3c>
c0010972:	31 c0                	xor    eax,eax
c0010974:	83 c4 14             	add    esp,0x14
c0010977:	5b                   	pop    ebx
c0010978:	5e                   	pop    esi
c0010979:	5f                   	pop    edi
c001097a:	5d                   	pop    ebp
c001097b:	c3                   	ret    

c001097c <LogicalDisk::mount()>:
c001097c:	56                   	push   esi
c001097d:	53                   	push   ebx
c001097e:	83 ec 1c             	sub    esp,0x1c
c0010981:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010985:	8b 1d 38 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d38
c001098b:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010992:	50                   	push   eax
c0010993:	68 48 5b 02 c0       	push   0xc0025b48
c0010998:	e8 5e c7 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001099d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00109a7:	83 c4 10             	add    esp,0x10
c00109aa:	85 db                	test   ebx,ebx
c00109ac:	74 4e                	je     c00109fc <LogicalDisk::mount()+0x80>
c00109ae:	83 ec 0c             	sub    esp,0xc
c00109b1:	68 69 5b 02 c0       	push   0xc0025b69
c00109b6:	e8 40 c7 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00109bb:	83 c4 0c             	add    esp,0xc
c00109be:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00109c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00109c7:	83 e8 41             	sub    eax,0x41
c00109ca:	50                   	push   eax
c00109cb:	56                   	push   esi
c00109cc:	53                   	push   ebx
c00109cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109d0:	83 c4 10             	add    esp,0x10
c00109d3:	84 c0                	test   al,al
c00109d5:	74 20                	je     c00109f7 <LogicalDisk::mount()+0x7b>
c00109d7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00109db:	83 ec 0c             	sub    esp,0xc
c00109de:	68 85 5b 02 c0       	push   0xc0025b85
c00109e3:	e8 13 c7 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00109e8:	83 c4 10             	add    esp,0x10
c00109eb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00109f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00109f5:	eb 07                	jmp    c00109fe <LogicalDisk::mount()+0x82>
c00109f7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00109fa:	eb ae                	jmp    c00109aa <LogicalDisk::mount()+0x2e>
c00109fc:	31 c0                	xor    eax,eax
c00109fe:	83 c4 14             	add    esp,0x14
c0010a01:	5b                   	pop    ebx
c0010a02:	5e                   	pop    esi
c0010a03:	c3                   	ret    

c0010a04 <LogicalDisk::unmount()>:
c0010a04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a08:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010a12:	c3                   	ret    
c0010a13:	90                   	nop

c0010a14 <LogicalDisk::eject()>:
c0010a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a18:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010a1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010a24:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010a27:	90                   	nop

c0010a28 <LogicalDisk::unassignDriveLetter()>:
c0010a28:	57                   	push   edi
c0010a29:	56                   	push   esi
c0010a2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a2e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010a35:	84 c9                	test   cl,cl
c0010a37:	75 0f                	jne    c0010a48 <LogicalDisk::unassignDriveLetter()+0x20>
c0010a39:	c7 44 24 0c 9e 5b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025b9e
c0010a41:	5e                   	pop    esi
c0010a42:	5f                   	pop    edi
c0010a43:	e9 95 47 00 00       	jmp    c00151dd <Krnl::panic(char const*)>
c0010a48:	83 e9 41             	sub    ecx,0x41
c0010a4b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010a52:	b8 01 00 00 00       	mov    eax,0x1
c0010a57:	c7 04 8d c0 91 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6e40],0x0
c0010a62:	d3 e0                	shl    eax,cl
c0010a64:	89 c7                	mov    edi,eax
c0010a66:	f7 d0                	not    eax
c0010a68:	c1 ff 1f             	sar    edi,0x1f
c0010a6b:	21 05 a0 91 02 c0    	and    DWORD PTR ds:0xc00291a0,eax
c0010a71:	89 fe                	mov    esi,edi
c0010a73:	f7 d6                	not    esi
c0010a75:	21 35 a4 91 02 c0    	and    DWORD PTR ds:0xc00291a4,esi
c0010a7b:	5e                   	pop    esi
c0010a7c:	5f                   	pop    edi
c0010a7d:	c3                   	ret    

c0010a7e <LogicalDisk::read(unsigned long long, int, void*)>:
c0010a7e:	57                   	push   edi
c0010a7f:	56                   	push   esi
c0010a80:	53                   	push   ebx
c0010a81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a89:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010a8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a91:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010a97:	77 41                	ja     c0010ada <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010a99:	99                   	cdq    
c0010a9a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010aa0:	01 c8                	add    eax,ecx
c0010aa2:	11 da                	adc    edx,ebx
c0010aa4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010aaa:	19 d7                	sbb    edi,edx
c0010aac:	72 33                	jb     c0010ae1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010aae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010ab4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010aba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010abe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010ac2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010ac8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010ace:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ad2:	5b                   	pop    ebx
c0010ad3:	5e                   	pop    esi
c0010ad4:	5f                   	pop    edi
c0010ad5:	e9 f4 0a 00 00       	jmp    c00115ce <VCache::read(unsigned long long, int, void*)>
c0010ada:	b8 05 00 00 00       	mov    eax,0x5
c0010adf:	eb 05                	jmp    c0010ae6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010ae1:	b8 07 00 00 00       	mov    eax,0x7
c0010ae6:	5b                   	pop    ebx
c0010ae7:	5e                   	pop    esi
c0010ae8:	5f                   	pop    edi
c0010ae9:	c3                   	ret    

c0010aea <LogicalDisk::write(unsigned long long, int, void*)>:
c0010aea:	57                   	push   edi
c0010aeb:	56                   	push   esi
c0010aec:	53                   	push   ebx
c0010aed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010af1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010af5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010af9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010afd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010b03:	77 41                	ja     c0010b46 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010b05:	99                   	cdq    
c0010b06:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010b0c:	01 c8                	add    eax,ecx
c0010b0e:	11 da                	adc    edx,ebx
c0010b10:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010b16:	19 d7                	sbb    edi,edx
c0010b18:	72 33                	jb     c0010b4d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010b1a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010b20:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010b26:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010b2a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010b2e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010b34:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b3e:	5b                   	pop    ebx
c0010b3f:	5e                   	pop    esi
c0010b40:	5f                   	pop    edi
c0010b41:	e9 8e 09 00 00       	jmp    c00114d4 <VCache::write(unsigned long long, int, void*)>
c0010b46:	b8 05 00 00 00       	mov    eax,0x5
c0010b4b:	eb 05                	jmp    c0010b52 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010b4d:	b8 07 00 00 00       	mov    eax,0x7
c0010b52:	5b                   	pop    ebx
c0010b53:	5e                   	pop    esi
c0010b54:	5f                   	pop    edi
c0010b55:	c3                   	ret    
c0010b56:	66 90                	xchg   ax,ax

c0010b58 <Mouse::Mouse(char const*)>:
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5f:	83 ec 08             	sub    esp,0x8
c0010b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b66:	50                   	push   eax
c0010b67:	e8 06 dd ff ff       	call   c000e872 <Device::Device(char const*)>
c0010b6c:	83 c4 10             	add    esp,0x10
c0010b6f:	ba f4 5b 02 c0       	mov    edx,0xc0025bf4
c0010b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b78:	89 10                	mov    DWORD PTR [eax],edx
c0010b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010b88:	90                   	nop
c0010b89:	83 c4 0c             	add    esp,0xc
c0010b8c:	c3                   	ret    
c0010b8d:	90                   	nop
c0010b8e:	66 90                	xchg   ax,ax

c0010b90 <Mouse::~Mouse()>:
c0010b90:	83 ec 0c             	sub    esp,0xc
c0010b93:	ba f4 5b 02 c0       	mov    edx,0xc0025bf4
c0010b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9c:	89 10                	mov    DWORD PTR [eax],edx
c0010b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba2:	83 ec 0c             	sub    esp,0xc
c0010ba5:	50                   	push   eax
c0010ba6:	e8 91 d9 ff ff       	call   c000e53c <Device::~Device()>
c0010bab:	83 c4 10             	add    esp,0x10
c0010bae:	90                   	nop
c0010baf:	83 c4 0c             	add    esp,0xc
c0010bb2:	c3                   	ret    
c0010bb3:	90                   	nop

c0010bb4 <Mouse::~Mouse()>:
c0010bb4:	83 ec 0c             	sub    esp,0xc
c0010bb7:	83 ec 0c             	sub    esp,0xc
c0010bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbe:	e8 cd ff ff ff       	call   c0010b90 <Mouse::~Mouse()>
c0010bc3:	83 c4 10             	add    esp,0x10
c0010bc6:	83 ec 08             	sub    esp,0x8
c0010bc9:	68 58 01 00 00       	push   0x158
c0010bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd2:	e8 43 c4 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0010bd7:	83 c4 10             	add    esp,0x10
c0010bda:	83 c4 0c             	add    esp,0xc
c0010bdd:	c3                   	ret    

c0010bde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010bde:	55                   	push   ebp
c0010bdf:	57                   	push   edi
c0010be0:	56                   	push   esi
c0010be1:	53                   	push   ebx
c0010be2:	81 ec 28 01 00 00    	sub    esp,0x128
c0010be8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010bef:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010bf6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010bfd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010c04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010c08:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010c0c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010c13:	e8 56 dd ff ff       	call   c000e96e <Device::getName()>
c0010c18:	5a                   	pop    edx
c0010c19:	59                   	pop    ecx
c0010c1a:	50                   	push   eax
c0010c1b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010c1f:	55                   	push   ebp
c0010c20:	e8 2b fb fe ff       	call   c0000750 <strcpy>
c0010c25:	5b                   	pop    ebx
c0010c26:	58                   	pop    eax
c0010c27:	68 18 5c 02 c0       	push   0xc0025c18
c0010c2c:	55                   	push   ebp
c0010c2d:	e8 5e fc fe ff       	call   c0000890 <strcat>
c0010c32:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010c39:	e8 a9 91 ff ff       	call   c0009de7 <malloc>
c0010c3e:	83 c4 0c             	add    esp,0xc
c0010c41:	89 c3                	mov    ebx,eax
c0010c43:	57                   	push   edi
c0010c44:	56                   	push   esi
c0010c45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c4d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010c54:	55                   	push   ebp
c0010c55:	50                   	push   eax
c0010c56:	e8 b5 fb ff ff       	call   c0010810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010c5b:	83 c4 14             	add    esp,0x14
c0010c5e:	53                   	push   ebx
c0010c5f:	e8 62 fc ff ff       	call   c00108c6 <LogicalDisk::assignDriveLetter()>
c0010c64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c67:	e8 10 fd ff ff       	call   c001097c <LogicalDisk::mount()>
c0010c6c:	58                   	pop    eax
c0010c6d:	5a                   	pop    edx
c0010c6e:	53                   	push   ebx
c0010c6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010c76:	e8 f3 d9 ff ff       	call   c000e66e <Device::addChild(Device*)>
c0010c7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010c81:	5b                   	pop    ebx
c0010c82:	5e                   	pop    esi
c0010c83:	5f                   	pop    edi
c0010c84:	5d                   	pop    ebp
c0010c85:	c3                   	ret    

c0010c86 <createPartitionsForDisk(PhysicalDisk*)>:
c0010c86:	55                   	push   ebp
c0010c87:	57                   	push   edi
c0010c88:	56                   	push   esi
c0010c89:	53                   	push   ebx
c0010c8a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010c90:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010c97:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010c9d:	3d 00 02 00 00       	cmp    eax,0x200
c0010ca2:	74 27                	je     c0010ccb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010ca4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010caa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010cb0:	83 ec 10             	sub    esp,0x10
c0010cb3:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010cb7:	99                   	cdq    
c0010cb8:	c1 e6 0a             	shl    esi,0xa
c0010cbb:	52                   	push   edx
c0010cbc:	89 fd                	mov    ebp,edi
c0010cbe:	50                   	push   eax
c0010cbf:	55                   	push   ebp
c0010cc0:	56                   	push   esi
c0010cc1:	e8 0a 23 01 00       	call   c0022fd0 <__udivdi3>
c0010cc6:	e9 b1 00 00 00       	jmp    c0010d7c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010ccb:	83 ec 0c             	sub    esp,0xc
c0010cce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cd0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010cd4:	56                   	push   esi
c0010cd5:	6a 01                	push   0x1
c0010cd7:	6a 00                	push   0x0
c0010cd9:	6a 00                	push   0x0
c0010cdb:	53                   	push   ebx
c0010cdc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010cdf:	83 c4 20             	add    esp,0x20
c0010ce2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010cea:	75 0a                	jne    c0010cf6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010cec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010cf4:	74 2c                	je     c0010d22 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010cf6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010cfc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010d02:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010d08:	83 ec 10             	sub    esp,0x10
c0010d0b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010d0f:	89 f7                	mov    edi,esi
c0010d11:	c1 e0 0a             	shl    eax,0xa
c0010d14:	c1 ff 1f             	sar    edi,0x1f
c0010d17:	57                   	push   edi
c0010d18:	56                   	push   esi
c0010d19:	52                   	push   edx
c0010d1a:	50                   	push   eax
c0010d1b:	e8 b0 22 01 00       	call   c0022fd0 <__udivdi3>
c0010d20:	eb 5a                	jmp    c0010d7c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010d22:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010d29:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010d30:	83 e1 7f             	and    ecx,0x7f
c0010d33:	83 e0 7f             	and    eax,0x7f
c0010d36:	01 c1                	add    ecx,eax
c0010d38:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010d3f:	83 e0 7f             	and    eax,0x7f
c0010d42:	01 c1                	add    ecx,eax
c0010d44:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010d4b:	83 e0 7f             	and    eax,0x7f
c0010d4e:	00 c1                	add    cl,al
c0010d50:	74 41                	je     c0010d93 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010d52:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010d58:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010d5e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010d64:	83 ec 10             	sub    esp,0x10
c0010d67:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010d6b:	89 f7                	mov    edi,esi
c0010d6d:	c1 e0 0a             	shl    eax,0xa
c0010d70:	c1 ff 1f             	sar    edi,0x1f
c0010d73:	57                   	push   edi
c0010d74:	56                   	push   esi
c0010d75:	52                   	push   edx
c0010d76:	50                   	push   eax
c0010d77:	e8 54 22 01 00       	call   c0022fd0 <__udivdi3>
c0010d7c:	83 c4 14             	add    esp,0x14
c0010d7f:	52                   	push   edx
c0010d80:	50                   	push   eax
c0010d81:	6a 00                	push   0x0
c0010d83:	6a 00                	push   0x0
c0010d85:	53                   	push   ebx
c0010d86:	e8 53 fe ff ff       	call   c0010bde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010d8b:	83 c4 20             	add    esp,0x20
c0010d8e:	e9 79 01 00 00       	jmp    c0010f0c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010d93:	89 f0                	mov    eax,esi
c0010d95:	31 f6                	xor    esi,esi
c0010d97:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010d9e:	75 02                	jne    c0010da2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010da0:	89 f1                	mov    ecx,esi
c0010da2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010da9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010db0:	c1 e2 08             	shl    edx,0x8
c0010db3:	c1 e7 10             	shl    edi,0x10
c0010db6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010dbe:	09 fa                	or     edx,edi
c0010dc0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010dc8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010dcf:	83 c0 10             	add    eax,0x10
c0010dd2:	09 fa                	or     edx,edi
c0010dd4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010ddb:	c1 e7 18             	shl    edi,0x18
c0010dde:	09 fa                	or     edx,edi
c0010de0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010de7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010deb:	c1 e7 10             	shl    edi,0x10
c0010dee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010df5:	c1 e2 08             	shl    edx,0x8
c0010df8:	09 fa                	or     edx,edi
c0010dfa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010e01:	09 fa                	or     edx,edi
c0010e03:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010e0a:	c1 e7 18             	shl    edi,0x18
c0010e0d:	09 fa                	or     edx,edi
c0010e0f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010e13:	46                   	inc    esi
c0010e14:	83 fe 04             	cmp    esi,0x4
c0010e17:	0f 85 7a ff ff ff    	jne    c0010d97 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e21:	83 f0 01             	xor    eax,0x1
c0010e24:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010e28:	75 57                	jne    c0010e81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e2e:	83 f0 01             	xor    eax,0x1
c0010e31:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010e35:	75 4a                	jne    c0010e81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e37:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010e3b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010e43:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e4b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010e51:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010e57:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010e5d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010e61:	89 f7                	mov    edi,esi
c0010e63:	c1 e0 0a             	shl    eax,0xa
c0010e66:	c1 ff 1f             	sar    edi,0x1f
c0010e69:	57                   	push   edi
c0010e6a:	56                   	push   esi
c0010e6b:	52                   	push   edx
c0010e6c:	50                   	push   eax
c0010e6d:	e8 5e 21 01 00       	call   c0022fd0 <__udivdi3>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010e79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010e7d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010e81:	84 c9                	test   cl,cl
c0010e83:	74 53                	je     c0010ed8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010e85:	0f b6 c9             	movzx  ecx,cl
c0010e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e90:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e94:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010e98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010ea0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010ea4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010ea8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010eac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010eb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010eb8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010ebc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010ec0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010ec4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010ec8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ecc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010ed0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010ed4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010ed8:	31 ed                	xor    ebp,ebp
c0010eda:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010ede:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010ee2:	89 f8                	mov    eax,edi
c0010ee4:	09 f0                	or     eax,esi
c0010ee6:	74 1e                	je     c0010f06 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010ee8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010eec:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010ef0:	89 d1                	mov    ecx,edx
c0010ef2:	09 c1                	or     ecx,eax
c0010ef4:	74 10                	je     c0010f06 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010ef6:	83 ec 0c             	sub    esp,0xc
c0010ef9:	57                   	push   edi
c0010efa:	56                   	push   esi
c0010efb:	52                   	push   edx
c0010efc:	50                   	push   eax
c0010efd:	53                   	push   ebx
c0010efe:	e8 db fc ff ff       	call   c0010bde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010f03:	83 c4 20             	add    esp,0x20
c0010f06:	45                   	inc    ebp
c0010f07:	83 fd 04             	cmp    ebp,0x4
c0010f0a:	75 ce                	jne    c0010eda <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010f0c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010f12:	5b                   	pop    ebx
c0010f13:	5e                   	pop    esi
c0010f14:	5f                   	pop    edi
c0010f15:	5d                   	pop    ebp
c0010f16:	c3                   	ret    
c0010f17:	90                   	nop

c0010f18 <Serial::Serial(char const*)>:
c0010f18:	83 ec 0c             	sub    esp,0xc
c0010f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1f:	83 ec 08             	sub    esp,0x8
c0010f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f26:	50                   	push   eax
c0010f27:	e8 46 d9 ff ff       	call   c000e872 <Device::Device(char const*)>
c0010f2c:	83 c4 10             	add    esp,0x10
c0010f2f:	ba 2c 5c 02 c0       	mov    edx,0xc0025c2c
c0010f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f38:	89 10                	mov    DWORD PTR [eax],edx
c0010f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010f48:	90                   	nop
c0010f49:	83 c4 0c             	add    esp,0xc
c0010f4c:	c3                   	ret    
c0010f4d:	90                   	nop
c0010f4e:	66 90                	xchg   ax,ax

c0010f50 <Serial::~Serial()>:
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	ba 2c 5c 02 c0       	mov    edx,0xc0025c2c
c0010f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5c:	89 10                	mov    DWORD PTR [eax],edx
c0010f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f62:	83 ec 0c             	sub    esp,0xc
c0010f65:	50                   	push   eax
c0010f66:	e8 d1 d5 ff ff       	call   c000e53c <Device::~Device()>
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	90                   	nop
c0010f6f:	83 c4 0c             	add    esp,0xc
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <Serial::~Serial()>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7e:	e8 cd ff ff ff       	call   c0010f50 <Serial::~Serial()>
c0010f83:	83 c4 10             	add    esp,0x10
c0010f86:	83 ec 08             	sub    esp,0x8
c0010f89:	68 58 01 00 00       	push   0x158
c0010f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f92:	e8 83 c0 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	83 c4 0c             	add    esp,0xc
c0010f9d:	c3                   	ret    
c0010f9e:	66 90                	xchg   ax,ax

c0010fa0 <Timer::Timer(char const*)>:
c0010fa0:	83 ec 0c             	sub    esp,0xc
c0010fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa7:	83 ec 08             	sub    esp,0x8
c0010faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fae:	50                   	push   eax
c0010faf:	e8 be d8 ff ff       	call   c000e872 <Device::Device(char const*)>
c0010fb4:	83 c4 10             	add    esp,0x10
c0010fb7:	ba 70 5c 02 c0       	mov    edx,0xc0025c70
c0010fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc0:	89 10                	mov    DWORD PTR [eax],edx
c0010fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010fd0:	90                   	nop
c0010fd1:	83 c4 0c             	add    esp,0xc
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop
c0010fd6:	66 90                	xchg   ax,ax

c0010fd8 <Timer::~Timer()>:
c0010fd8:	83 ec 0c             	sub    esp,0xc
c0010fdb:	ba 70 5c 02 c0       	mov    edx,0xc0025c70
c0010fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe4:	89 10                	mov    DWORD PTR [eax],edx
c0010fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fea:	83 ec 0c             	sub    esp,0xc
c0010fed:	50                   	push   eax
c0010fee:	e8 49 d5 ff ff       	call   c000e53c <Device::~Device()>
c0010ff3:	83 c4 10             	add    esp,0x10
c0010ff6:	90                   	nop
c0010ff7:	83 c4 0c             	add    esp,0xc
c0010ffa:	c3                   	ret    
c0010ffb:	90                   	nop

c0010ffc <Timer::~Timer()>:
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	83 ec 0c             	sub    esp,0xc
c0011002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011006:	e8 cd ff ff ff       	call   c0010fd8 <Timer::~Timer()>
c001100b:	83 c4 10             	add    esp,0x10
c001100e:	83 ec 08             	sub    esp,0x8
c0011011:	68 5c 01 00 00       	push   0x15c
c0011016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001101a:	e8 fb bf ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	83 c4 0c             	add    esp,0xc
c0011025:	c3                   	ret    

c0011026 <Timer::read()>:
c0011026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001102a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011030:	c3                   	ret    

c0011031 <timerHandler(unsigned int)>:
c0011031:	56                   	push   esi
c0011032:	53                   	push   ebx
c0011033:	51                   	push   ecx
c0011034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011038:	01 05 2c 92 02 c0    	add    DWORD PTR ds:0xc002922c,eax
c001103e:	80 3d 0d 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c0d,0x0
c0011045:	0f 84 49 01 00 00    	je     c0011194 <timerHandler(unsigned int)+0x163>
c001104b:	fa                   	cli    
c001104c:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0011052:	83 ec 0c             	sub    esp,0xc
c0011055:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c001105b:	68 38 a1 02 c0       	push   0xc002a138
c0011060:	e8 3b 25 01 00       	call   c00235a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	84 c0                	test   al,al
c001106a:	0f 85 a0 00 00 00    	jne    c0011110 <timerHandler(unsigned int)+0xdf>
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	68 38 a1 02 c0       	push   0xc002a138
c0011078:	e8 3f 25 01 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001107d:	83 c4 10             	add    esp,0x10
c0011080:	89 c6                	mov    esi,eax
c0011082:	66 90                	xchg   ax,ax
c0011084:	83 ec 0c             	sub    esp,0xc
c0011087:	68 38 a1 02 c0       	push   0xc002a138
c001108c:	e8 2b 25 01 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011091:	c7 04 24 38 a1 02 c0 	mov    DWORD PTR [esp],0xc002a138
c0011098:	89 c3                	mov    ebx,eax
c001109a:	e8 25 25 01 00       	call   c00235c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001109f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00110a2:	83 c4 10             	add    esp,0x10
c00110a5:	3b 05 2c 92 02 c0    	cmp    eax,DWORD PTR ds:0xc002922c
c00110ab:	77 23                	ja     c00110d0 <timerHandler(unsigned int)+0x9f>
c00110ad:	83 ec 0c             	sub    esp,0xc
c00110b0:	53                   	push   ebx
c00110b1:	e8 42 83 00 00       	call   c00193f8 <unblockTask(ThreadControlBlock*)>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	39 de                	cmp    esi,ebx
c00110bb:	75 27                	jne    c00110e4 <timerHandler(unsigned int)+0xb3>
c00110bd:	83 ec 0c             	sub    esp,0xc
c00110c0:	68 38 a1 02 c0       	push   0xc002a138
c00110c5:	e8 f2 24 01 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00110ca:	89 c6                	mov    esi,eax
c00110cc:	eb 12                	jmp    c00110e0 <timerHandler(unsigned int)+0xaf>
c00110ce:	66 90                	xchg   ax,ax
c00110d0:	52                   	push   edx
c00110d1:	52                   	push   edx
c00110d2:	53                   	push   ebx
c00110d3:	68 38 a1 02 c0       	push   0xc002a138
c00110d8:	e8 9f 25 01 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00110dd:	8d 76 00             	lea    esi,[esi+0x0]
c00110e0:	83 c4 10             	add    esp,0x10
c00110e3:	90                   	nop
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	68 38 a1 02 c0       	push   0xc002a138
c00110ec:	e8 af 24 01 00       	call   c00235a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00110f1:	83 c4 10             	add    esp,0x10
c00110f4:	84 c0                	test   al,al
c00110f6:	75 18                	jne    c0011110 <timerHandler(unsigned int)+0xdf>
c00110f8:	83 ec 0c             	sub    esp,0xc
c00110fb:	68 38 a1 02 c0       	push   0xc002a138
c0011100:	e8 b7 24 01 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011105:	83 c4 10             	add    esp,0x10
c0011108:	39 f0                	cmp    eax,esi
c001110a:	0f 85 74 ff ff ff    	jne    c0011084 <timerHandler(unsigned int)+0x53>
c0011110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011115:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0011119:	74 41                	je     c001115c <timerHandler(unsigned int)+0x12b>
c001111b:	80 3d 0c 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c0c,0x0
c0011122:	74 38                	je     c001115c <timerHandler(unsigned int)+0x12b>
c0011124:	fa                   	cli    
c0011125:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001112b:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c0011130:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011136:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0011139:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001113f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0011142:	72 08                	jb     c001114c <timerHandler(unsigned int)+0x11b>
c0011144:	e8 f3 7d 00 00       	call   c0018f3c <schedule()>
c0011149:	8d 76 00             	lea    esi,[esi+0x0]
c001114c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0011151:	48                   	dec    eax
c0011152:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0011157:	75 03                	jne    c001115c <timerHandler(unsigned int)+0x12b>
c0011159:	fb                   	sti    
c001115a:	66 90                	xchg   ax,ax
c001115c:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0011161:	48                   	dec    eax
c0011162:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c0011167:	75 1b                	jne    c0011184 <timerHandler(unsigned int)+0x153>
c0011169:	83 3d 20 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a120,0x0
c0011170:	74 12                	je     c0011184 <timerHandler(unsigned int)+0x153>
c0011172:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001117c:	e8 bb 7d 00 00       	call   c0018f3c <schedule()>
c0011181:	8d 76 00             	lea    esi,[esi+0x0]
c0011184:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0011189:	48                   	dec    eax
c001118a:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001118f:	75 03                	jne    c0011194 <timerHandler(unsigned int)+0x163>
c0011191:	fb                   	sti    
c0011192:	66 90                	xchg   ax,ax
c0011194:	58                   	pop    eax
c0011195:	5b                   	pop    ebx
c0011196:	5e                   	pop    esi
c0011197:	c3                   	ret    

c0011198 <setupTimer(int)>:
c0011198:	57                   	push   edi
c0011199:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001119e:	56                   	push   esi
c001119f:	53                   	push   ebx
c00111a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111aa:	83 ec 0c             	sub    esp,0xc
c00111ad:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00111b3:	e8 b6 d7 ff ff       	call   c000e96e <Device::getName()>
c00111b8:	83 c4 10             	add    esp,0x10
c00111bb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00111be:	0f 85 94 00 00 00    	jne    c0011258 <setupTimer(int)+0xc0>
c00111c4:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00111c9:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00111d0:	0f 84 82 00 00 00    	je     c0011258 <setupTimer(int)+0xc0>
c00111d6:	83 ec 0c             	sub    esp,0xc
c00111d9:	68 5c 01 00 00       	push   0x15c
c00111de:	e8 04 8c ff ff       	call   c0009de7 <malloc>
c00111e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00111e6:	89 c3                	mov    ebx,eax
c00111e8:	e8 4b 19 01 00       	call   c0022b38 <PIT::PIT()>
c00111ed:	59                   	pop    ecx
c00111ee:	5f                   	pop    edi
c00111ef:	53                   	push   ebx
c00111f0:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c00111f6:	e8 73 d4 ff ff       	call   c000e66e <Device::addChild(Device*)>
c00111fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111fd:	6a 00                	push   0x0
c00111ff:	6a 00                	push   0x0
c0011201:	56                   	push   esi
c0011202:	53                   	push   ebx
c0011203:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011206:	83 c4 14             	add    esp,0x14
c0011209:	68 60 01 00 00       	push   0x160
c001120e:	e8 d4 8b ff ff       	call   c0009de7 <malloc>
c0011213:	89 04 24             	mov    DWORD PTR [esp],eax
c0011216:	89 c7                	mov    edi,eax
c0011218:	e8 cf 17 01 00       	call   c00229ec <APICTimer::APICTimer()>
c001121d:	6a 00                	push   0x0
c001121f:	6a 00                	push   0x0
c0011221:	56                   	push   esi
c0011222:	57                   	push   edi
c0011223:	e8 c4 16 01 00       	call   c00228ec <APICTimer::open(int, int, void*)>
c0011228:	83 c4 20             	add    esp,0x20
c001122b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001122d:	6a 00                	push   0x0
c001122f:	6a 00                	push   0x0
c0011231:	6a 00                	push   0x0
c0011233:	53                   	push   ebx
c0011234:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011237:	58                   	pop    eax
c0011238:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001123d:	5a                   	pop    edx
c001123e:	57                   	push   edi
c001123f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011245:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001124b:	e8 1e d4 ff ff       	call   c000e66e <Device::addChild(Device*)>
c0011250:	83 c4 10             	add    esp,0x10
c0011253:	eb 37                	jmp    c001128c <setupTimer(int)+0xf4>
c0011255:	8d 76 00             	lea    esi,[esi+0x0]
c0011258:	83 ec 0c             	sub    esp,0xc
c001125b:	68 5c 01 00 00       	push   0x15c
c0011260:	e8 82 8b ff ff       	call   c0009de7 <malloc>
c0011265:	89 04 24             	mov    DWORD PTR [esp],eax
c0011268:	89 c3                	mov    ebx,eax
c001126a:	e8 c9 18 01 00       	call   c0022b38 <PIT::PIT()>
c001126f:	58                   	pop    eax
c0011270:	5a                   	pop    edx
c0011271:	53                   	push   ebx
c0011272:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0011278:	e8 f1 d3 ff ff       	call   c000e66e <Device::addChild(Device*)>
c001127d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001127f:	6a 00                	push   0x0
c0011281:	6a 00                	push   0x0
c0011283:	56                   	push   esi
c0011284:	53                   	push   ebx
c0011285:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011288:	83 c4 20             	add    esp,0x20
c001128b:	90                   	nop
c001128c:	89 d8                	mov    eax,ebx
c001128e:	5b                   	pop    ebx
c001128f:	5e                   	pop    esi
c0011290:	5f                   	pop    edi
c0011291:	c3                   	ret    
c0011292:	66 90                	xchg   ax,ax

c0011294 <VCache::VCache(PhysicalDisk*)>:
c0011294:	53                   	push   ebx
c0011295:	83 ec 18             	sub    esp,0x18
c0011298:	ba a0 5c 02 c0       	mov    edx,0xc0025ca0
c001129d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a1:	89 10                	mov    DWORD PTR [eax],edx
c00112a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00112ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00112b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00112c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00112cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00112d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00112dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00112e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00112f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112f4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00112fb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0011302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011306:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001130a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001130e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0011312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011316:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001131a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001131e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011325:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001132d:	83 ec 0c             	sub    esp,0xc
c0011330:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011334:	e8 ae 8a ff ff       	call   c0009de7 <malloc>
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	89 c3                	mov    ebx,eax
c001133e:	83 ec 0c             	sub    esp,0xc
c0011341:	53                   	push   ebx
c0011342:	e8 c5 79 00 00       	call   c0018d0c <Mutex::Mutex()>
c0011347:	83 c4 10             	add    esp,0x10
c001134a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001134e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0011351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011355:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011359:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001135c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011360:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0011367:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001136b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0011371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011375:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011378:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001137c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0011382:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011388:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001138c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001138f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0011392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011396:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001139a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001139e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113a4:	05 00 01 00 00       	add    eax,0x100
c00113a9:	c1 e0 04             	shl    eax,0x4
c00113ac:	83 ec 0c             	sub    esp,0xc
c00113af:	50                   	push   eax
c00113b0:	e8 32 8a ff ff       	call   c0009de7 <malloc>
c00113b5:	83 c4 10             	add    esp,0x10
c00113b8:	89 c2                	mov    edx,eax
c00113ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00113c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113c5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00113cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113d0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00113d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00113d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113de:	c1 e0 06             	shl    eax,0x6
c00113e1:	83 ec 0c             	sub    esp,0xc
c00113e4:	50                   	push   eax
c00113e5:	e8 fd 89 ff ff       	call   c0009de7 <malloc>
c00113ea:	83 c4 10             	add    esp,0x10
c00113ed:	89 c2                	mov    edx,eax
c00113ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113f3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00113f6:	90                   	nop
c00113f7:	83 c4 18             	add    esp,0x18
c00113fa:	5b                   	pop    ebx
c00113fb:	c3                   	ret    

c00113fc <VCache::invalidateReadBuffer()>:
c00113fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011400:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0011406:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001140a:	c3                   	ret    
c001140b:	90                   	nop

c001140c <VCache::writeWriteBuffer()>:
c001140c:	53                   	push   ebx
c001140d:	83 ec 08             	sub    esp,0x8
c0011410:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011414:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011418:	74 1e                	je     c0011438 <VCache::writeWriteBuffer()+0x2c>
c001141a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001141d:	83 ec 0c             	sub    esp,0xc
c0011420:	8b 10                	mov    edx,DWORD PTR [eax]
c0011422:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011428:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001142b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001142e:	50                   	push   eax
c001142f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011432:	83 c4 20             	add    esp,0x20
c0011435:	8d 76 00             	lea    esi,[esi+0x0]
c0011438:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001143f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0011446:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001144a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0011451:	83 c4 08             	add    esp,0x8
c0011454:	5b                   	pop    ebx
c0011455:	c3                   	ret    
c0011456:	66 90                	xchg   ax,ax

c0011458 <VCache::~VCache()>:
c0011458:	83 ec 0c             	sub    esp,0xc
c001145b:	ba a0 5c 02 c0       	mov    edx,0xc0025ca0
c0011460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011464:	89 10                	mov    DWORD PTR [eax],edx
c0011466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001146a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001146d:	84 c0                	test   al,al
c001146f:	74 0f                	je     c0011480 <VCache::~VCache()+0x28>
c0011471:	83 ec 0c             	sub    esp,0xc
c0011474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011478:	e8 8f ff ff ff       	call   c001140c <VCache::writeWriteBuffer()>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011484:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011487:	83 ec 0c             	sub    esp,0xc
c001148a:	50                   	push   eax
c001148b:	e8 67 89 ff ff       	call   c0009df7 <free>
c0011490:	83 c4 10             	add    esp,0x10
c0011493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011497:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001149a:	83 ec 0c             	sub    esp,0xc
c001149d:	50                   	push   eax
c001149e:	e8 54 89 ff ff       	call   c0009df7 <free>
c00114a3:	83 c4 10             	add    esp,0x10
c00114a6:	90                   	nop
c00114a7:	83 c4 0c             	add    esp,0xc
c00114aa:	c3                   	ret    
c00114ab:	90                   	nop

c00114ac <VCache::~VCache()>:
c00114ac:	83 ec 0c             	sub    esp,0xc
c00114af:	83 ec 0c             	sub    esp,0xc
c00114b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114b6:	e8 9d ff ff ff       	call   c0011458 <VCache::~VCache()>
c00114bb:	83 c4 10             	add    esp,0x10
c00114be:	83 ec 08             	sub    esp,0x8
c00114c1:	6a 44                	push   0x44
c00114c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c7:	e8 4e bb ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c00114cc:	83 c4 10             	add    esp,0x10
c00114cf:	83 c4 0c             	add    esp,0xc
c00114d2:	c3                   	ret    
c00114d3:	90                   	nop

c00114d4 <VCache::write(unsigned long long, int, void*)>:
c00114d4:	55                   	push   ebp
c00114d5:	31 c0                	xor    eax,eax
c00114d7:	57                   	push   edi
c00114d8:	56                   	push   esi
c00114d9:	53                   	push   ebx
c00114da:	83 ec 0c             	sub    esp,0xc
c00114dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00114e5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00114e9:	8d 76 00             	lea    esi,[esi+0x0]
c00114ec:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00114f0:	7d 1a                	jge    c001150c <VCache::write(unsigned long long, int, void*)+0x38>
c00114f2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00114f5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00114fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114ff:	0f af c8             	imul   ecx,eax
c0011502:	01 ca                	add    edx,ecx
c0011504:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011506:	40                   	inc    eax
c0011507:	eb e3                	jmp    c00114ec <VCache::write(unsigned long long, int, void*)+0x18>
c0011509:	8d 76 00             	lea    esi,[esi+0x0]
c001150c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011510:	74 0a                	je     c001151c <VCache::write(unsigned long long, int, void*)+0x48>
c0011512:	53                   	push   ebx
c0011513:	e8 e4 fe ff ff       	call   c00113fc <VCache::invalidateReadBuffer()>
c0011518:	58                   	pop    eax
c0011519:	8d 76 00             	lea    esi,[esi+0x0]
c001151c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011520:	74 5e                	je     c0011580 <VCache::write(unsigned long long, int, void*)+0xac>
c0011522:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0011525:	89 e8                	mov    eax,ebp
c0011527:	99                   	cdq    
c0011528:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001152b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001152e:	89 c1                	mov    ecx,eax
c0011530:	89 d0                	mov    eax,edx
c0011532:	31 f1                	xor    ecx,esi
c0011534:	31 f8                	xor    eax,edi
c0011536:	09 c1                	or     ecx,eax
c0011538:	75 3a                	jne    c0011574 <VCache::write(unsigned long long, int, void*)+0xa0>
c001153a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001153f:	75 33                	jne    c0011574 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011541:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011544:	89 ef                	mov    edi,ebp
c0011546:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001154c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011550:	0f af f9             	imul   edi,ecx
c0011553:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0011556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011558:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001155b:	40                   	inc    eax
c001155c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001155f:	83 f8 40             	cmp    eax,0x40
c0011562:	75 60                	jne    c00115c4 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011564:	83 ec 0c             	sub    esp,0xc
c0011567:	53                   	push   ebx
c0011568:	e8 9f fe ff ff       	call   c001140c <VCache::writeWriteBuffer()>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	eb 52                	jmp    c00115c4 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011572:	66 90                	xchg   ax,ax
c0011574:	83 ec 0c             	sub    esp,0xc
c0011577:	53                   	push   ebx
c0011578:	e8 8f fe ff ff       	call   c001140c <VCache::writeWriteBuffer()>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011583:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011588:	7f 22                	jg     c00115ac <VCache::write(unsigned long long, int, void*)+0xd8>
c001158a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001158d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011590:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011594:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0011598:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001159b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001159e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00115a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115aa:	eb 18                	jmp    c00115c4 <VCache::write(unsigned long long, int, void*)+0xf0>
c00115ac:	83 ec 0c             	sub    esp,0xc
c00115af:	8b 10                	mov    edx,DWORD PTR [eax]
c00115b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115b9:	57                   	push   edi
c00115ba:	56                   	push   esi
c00115bb:	50                   	push   eax
c00115bc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00115bf:	83 c4 20             	add    esp,0x20
c00115c2:	66 90                	xchg   ax,ax
c00115c4:	83 c4 0c             	add    esp,0xc
c00115c7:	31 c0                	xor    eax,eax
c00115c9:	5b                   	pop    ebx
c00115ca:	5e                   	pop    esi
c00115cb:	5f                   	pop    edi
c00115cc:	5d                   	pop    ebp
c00115cd:	c3                   	ret    

c00115ce <VCache::read(unsigned long long, int, void*)>:
c00115ce:	55                   	push   ebp
c00115cf:	31 c0                	xor    eax,eax
c00115d1:	57                   	push   edi
c00115d2:	56                   	push   esi
c00115d3:	53                   	push   ebx
c00115d4:	83 ec 1c             	sub    esp,0x1c
c00115d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00115db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00115df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00115e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00115e7:	90                   	nop
c00115e8:	39 e8                	cmp    eax,ebp
c00115ea:	7d 18                	jge    c0011604 <VCache::read(unsigned long long, int, void*)+0x36>
c00115ec:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00115ef:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00115f5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00115f9:	0f af c8             	imul   ecx,eax
c00115fc:	01 ca                	add    edx,ecx
c00115fe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011600:	40                   	inc    eax
c0011601:	eb e5                	jmp    c00115e8 <VCache::read(unsigned long long, int, void*)+0x1a>
c0011603:	90                   	nop
c0011604:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011608:	74 0e                	je     c0011618 <VCache::read(unsigned long long, int, void*)+0x4a>
c001160a:	83 ec 0c             	sub    esp,0xc
c001160d:	53                   	push   ebx
c001160e:	e8 f9 fd ff ff       	call   c001140c <VCache::writeWriteBuffer()>
c0011613:	83 c4 10             	add    esp,0x10
c0011616:	66 90                	xchg   ax,ax
c0011618:	83 fd 01             	cmp    ebp,0x1
c001161b:	0f 85 87 00 00 00    	jne    c00116a8 <VCache::read(unsigned long long, int, void*)+0xda>
c0011621:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011624:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011628:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001162f:	75 77                	jne    c00116a8 <VCache::read(unsigned long long, int, void*)+0xda>
c0011631:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011634:	89 e9                	mov    ecx,ebp
c0011636:	f7 d9                	neg    ecx
c0011638:	89 c8                	mov    eax,ecx
c001163a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001163e:	c1 f8 1f             	sar    eax,0x1f
c0011641:	21 f1                	and    ecx,esi
c0011643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011647:	89 c8                	mov    eax,ecx
c0011649:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001164d:	21 f9                	and    ecx,edi
c001164f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011653:	89 ca                	mov    edx,ecx
c0011655:	74 0d                	je     c0011664 <VCache::read(unsigned long long, int, void*)+0x96>
c0011657:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001165a:	75 08                	jne    c0011664 <VCache::read(unsigned long long, int, void*)+0x96>
c001165c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001165f:	74 27                	je     c0011688 <VCache::read(unsigned long long, int, void*)+0xba>
c0011661:	8d 76 00             	lea    esi,[esi+0x0]
c0011664:	83 ec 0c             	sub    esp,0xc
c0011667:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001166b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001166f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011672:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011675:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0011677:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001167a:	55                   	push   ebp
c001167b:	52                   	push   edx
c001167c:	50                   	push   eax
c001167d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011681:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011684:	83 c4 20             	add    esp,0x20
c0011687:	90                   	nop
c0011688:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001168b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001168f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011695:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011698:	48                   	dec    eax
c0011699:	21 c6                	and    esi,eax
c001169b:	0f af f1             	imul   esi,ecx
c001169e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00116a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116a3:	eb 23                	jmp    c00116c8 <VCache::read(unsigned long long, int, void*)+0xfa>
c00116a5:	8d 76 00             	lea    esi,[esi+0x0]
c00116a8:	83 ec 0c             	sub    esp,0xc
c00116ab:	53                   	push   ebx
c00116ac:	e8 4b fd ff ff       	call   c00113fc <VCache::invalidateReadBuffer()>
c00116b1:	5a                   	pop    edx
c00116b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00116b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00116bb:	55                   	push   ebp
c00116bc:	57                   	push   edi
c00116bd:	56                   	push   esi
c00116be:	50                   	push   eax
c00116bf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00116c2:	83 c4 20             	add    esp,0x20
c00116c5:	8d 76 00             	lea    esi,[esi+0x0]
c00116c8:	83 c4 1c             	add    esp,0x1c
c00116cb:	31 c0                	xor    eax,eax
c00116cd:	5b                   	pop    ebx
c00116ce:	5e                   	pop    esi
c00116cf:	5f                   	pop    edi
c00116d0:	5d                   	pop    ebp
c00116d1:	c3                   	ret    

c00116d2 <Video::putrect(int, int, int, int, unsigned int)>:
c00116d2:	55                   	push   ebp
c00116d3:	57                   	push   edi
c00116d4:	56                   	push   esi
c00116d5:	53                   	push   ebx
c00116d6:	83 ec 1c             	sub    esp,0x1c
c00116d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00116dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116e1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00116e5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00116e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116f1:	01 df                	add    edi,ebx
c00116f3:	39 fb                	cmp    ebx,edi
c00116f5:	7d 1f                	jge    c0011716 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00116f7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00116fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00116ff:	7d 12                	jge    c0011713 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011701:	8b 16                	mov    edx,DWORD PTR [esi]
c0011703:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011707:	53                   	push   ebx
c0011708:	55                   	push   ebp
c0011709:	45                   	inc    ebp
c001170a:	56                   	push   esi
c001170b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001170e:	83 c4 10             	add    esp,0x10
c0011711:	eb e8                	jmp    c00116fb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0011713:	43                   	inc    ebx
c0011714:	eb dd                	jmp    c00116f3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011716:	83 c4 1c             	add    esp,0x1c
c0011719:	5b                   	pop    ebx
c001171a:	5e                   	pop    esi
c001171b:	5f                   	pop    edi
c001171c:	5d                   	pop    ebp
c001171d:	c3                   	ret    

c001171e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001171e:	55                   	push   ebp
c001171f:	57                   	push   edi
c0011720:	31 ff                	xor    edi,edi
c0011722:	56                   	push   esi
c0011723:	53                   	push   ebx
c0011724:	83 ec 1c             	sub    esp,0x1c
c0011727:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001172b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001172f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011736:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001173b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001173f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011743:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011747:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001174a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001174e:	01 f9                	add    ecx,edi
c0011750:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011754:	7d 2f                	jge    c0011785 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011756:	31 f6                	xor    esi,esi
c0011758:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001175c:	01 f2                	add    edx,esi
c001175e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011762:	7d 1a                	jge    c001177e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011767:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001176a:	46                   	inc    esi
c001176b:	51                   	push   ecx
c001176c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011770:	52                   	push   edx
c0011771:	55                   	push   ebp
c0011772:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011775:	83 c4 10             	add    esp,0x10
c0011778:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001177c:	eb da                	jmp    c0011758 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001177e:	47                   	inc    edi
c001177f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011783:	eb c5                	jmp    c001174a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011785:	83 c4 1c             	add    esp,0x1c
c0011788:	5b                   	pop    ebx
c0011789:	5e                   	pop    esi
c001178a:	5f                   	pop    edi
c001178b:	5d                   	pop    ebp
c001178c:	c3                   	ret    
c001178d:	90                   	nop

c001178e <Video::blit(unsigned int*, int, int, int, int)>:
c001178e:	55                   	push   ebp
c001178f:	57                   	push   edi
c0011790:	56                   	push   esi
c0011791:	53                   	push   ebx
c0011792:	83 ec 1c             	sub    esp,0x1c
c0011795:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011799:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001179d:	85 c0                	test   eax,eax
c001179f:	79 02                	jns    c00117a3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00117a1:	31 c0                	xor    eax,eax
c00117a3:	c1 e0 02             	shl    eax,0x2
c00117a6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00117aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117b2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00117b6:	39 d8                	cmp    eax,ebx
c00117b8:	7e 49                	jle    c0011803 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00117ba:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00117c0:	7c 41                	jl     c0011803 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00117c2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00117c6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00117ca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00117ce:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00117d2:	39 f9                	cmp    ecx,edi
c00117d4:	7e 22                	jle    c00117f8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00117d6:	83 c5 04             	add    ebp,0x4
c00117d9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00117df:	7c 14                	jl     c00117f5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00117e1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00117e3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00117e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00117ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00117ee:	56                   	push   esi
c00117ef:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	47                   	inc    edi
c00117f6:	eb d2                	jmp    c00117ca <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00117f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117fc:	43                   	inc    ebx
c00117fd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011801:	eb ab                	jmp    c00117ae <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0011803:	83 c4 1c             	add    esp,0x1c
c0011806:	5b                   	pop    ebx
c0011807:	5e                   	pop    esi
c0011808:	5f                   	pop    edi
c0011809:	5d                   	pop    ebp
c001180a:	c3                   	ret    
c001180b:	90                   	nop

c001180c <Video::clearScreen(unsigned int)>:
c001180c:	57                   	push   edi
c001180d:	56                   	push   esi
c001180e:	53                   	push   ebx
c001180f:	31 db                	xor    ebx,ebx
c0011811:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011815:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001181b:	7e 1f                	jle    c001183c <Video::clearScreen(unsigned int)+0x30>
c001181d:	31 ff                	xor    edi,edi
c001181f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011825:	7e 12                	jle    c0011839 <Video::clearScreen(unsigned int)+0x2d>
c0011827:	8b 06                	mov    eax,DWORD PTR [esi]
c0011829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001182d:	53                   	push   ebx
c001182e:	57                   	push   edi
c001182f:	47                   	inc    edi
c0011830:	56                   	push   esi
c0011831:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011834:	83 c4 10             	add    esp,0x10
c0011837:	eb e6                	jmp    c001181f <Video::clearScreen(unsigned int)+0x13>
c0011839:	43                   	inc    ebx
c001183a:	eb d9                	jmp    c0011815 <Video::clearScreen(unsigned int)+0x9>
c001183c:	5b                   	pop    ebx
c001183d:	5e                   	pop    esi
c001183e:	5f                   	pop    edi
c001183f:	c3                   	ret    

c0011840 <Video::putpixel(int, int, unsigned int)>:
c0011840:	c7 44 24 04 a8 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025ca8
c0011848:	e9 90 39 00 00       	jmp    c00151dd <Krnl::panic(char const*)>
c001184d:	90                   	nop

c001184e <Video::Video(char const*)>:
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011855:	83 ec 08             	sub    esp,0x8
c0011858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001185c:	50                   	push   eax
c001185d:	e8 10 d0 ff ff       	call   c000e872 <Device::Device(char const*)>
c0011862:	83 c4 10             	add    esp,0x10
c0011865:	ba 18 5d 02 c0       	mov    edx,0xc0025d18
c001186a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186e:	89 10                	mov    DWORD PTR [eax],edx
c0011870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011874:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001187e:	90                   	nop
c001187f:	83 c4 0c             	add    esp,0xc
c0011882:	c3                   	ret    
c0011883:	90                   	nop

c0011884 <Video::~Video()>:
c0011884:	83 ec 0c             	sub    esp,0xc
c0011887:	ba 18 5d 02 c0       	mov    edx,0xc0025d18
c001188c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011890:	89 10                	mov    DWORD PTR [eax],edx
c0011892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011896:	83 ec 0c             	sub    esp,0xc
c0011899:	50                   	push   eax
c001189a:	e8 9d cc ff ff       	call   c000e53c <Device::~Device()>
c001189f:	83 c4 10             	add    esp,0x10
c00118a2:	90                   	nop
c00118a3:	83 c4 0c             	add    esp,0xc
c00118a6:	c3                   	ret    
c00118a7:	90                   	nop

c00118a8 <Video::~Video()>:
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	83 ec 0c             	sub    esp,0xc
c00118ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b2:	e8 cd ff ff ff       	call   c0011884 <Video::~Video()>
c00118b7:	83 c4 10             	add    esp,0x10
c00118ba:	83 ec 08             	sub    esp,0x8
c00118bd:	68 64 01 00 00       	push   0x164
c00118c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c6:	e8 4f b7 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	83 c4 0c             	add    esp,0xc
c00118d1:	c3                   	ret    

c00118d2 <Video::isMonochrome()>:
c00118d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00118dc:	c3                   	ret    
c00118dd:	90                   	nop

c00118de <Video::getWidth()>:
c00118de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00118e8:	c3                   	ret    
c00118e9:	90                   	nop

c00118ea <Video::getHeight()>:
c00118ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118f4:	c3                   	ret    
c00118f5:	90                   	nop

c00118f6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00118f6:	55                   	push   ebp
c00118f7:	57                   	push   edi
c00118f8:	56                   	push   esi
c00118f9:	53                   	push   ebx
c00118fa:	83 ec 2c             	sub    esp,0x2c
c00118fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011901:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011905:	83 f8 01             	cmp    eax,0x1
c0011908:	19 c9                	sbb    ecx,ecx
c001190a:	31 db                	xor    ebx,ebx
c001190c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011910:	89 cd                	mov    ebp,ecx
c0011912:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001191a:	f7 d5                	not    ebp
c001191c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011922:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011926:	01 d8                	add    eax,ebx
c0011928:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001192c:	56                   	push   esi
c001192d:	e8 b8 ff ff ff       	call   c00118ea <Video::getHeight()>
c0011932:	59                   	pop    ecx
c0011933:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011937:	7e 70                	jle    c00119a9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011939:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001193d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011941:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011944:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011948:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001194c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011953:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011957:	89 f8                	mov    eax,edi
c0011959:	83 c0 20             	add    eax,0x20
c001195c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011960:	56                   	push   esi
c0011961:	e8 78 ff ff ff       	call   c00118de <Video::getWidth()>
c0011966:	5a                   	pop    edx
c0011967:	39 c7                	cmp    edi,eax
c0011969:	7d 34                	jge    c001199f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001196b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011970:	74 05                	je     c0011977 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011972:	8b 06                	mov    eax,DWORD PTR [esi]
c0011974:	55                   	push   ebp
c0011975:	eb 0d                	jmp    c0011984 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011977:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001197c:	74 12                	je     c0011990 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001197e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011980:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011984:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011988:	57                   	push   edi
c0011989:	56                   	push   esi
c001198a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011994:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011998:	47                   	inc    edi
c0011999:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001199d:	75 c1                	jne    c0011960 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001199f:	43                   	inc    ebx
c00119a0:	83 fb 20             	cmp    ebx,0x20
c00119a3:	0f 85 79 ff ff ff    	jne    c0011922 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00119a9:	83 c4 2c             	add    esp,0x2c
c00119ac:	5b                   	pop    ebx
c00119ad:	5e                   	pop    esi
c00119ae:	5f                   	pop    edi
c00119af:	5d                   	pop    ebp
c00119b0:	c3                   	ret    
c00119b1:	90                   	nop

c00119b2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00119b2:	55                   	push   ebp
c00119b3:	57                   	push   edi
c00119b4:	56                   	push   esi
c00119b5:	53                   	push   ebx
c00119b6:	83 ec 28             	sub    esp,0x28
c00119b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00119bd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00119c1:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00119c5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00119c9:	c1 e6 08             	shl    esi,0x8
c00119cc:	01 c6                	add    esi,eax
c00119ce:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00119d2:	c1 e0 08             	shl    eax,0x8
c00119d5:	01 d0                	add    eax,edx
c00119d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119df:	0f af c6             	imul   eax,esi
c00119e2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00119e9:	50                   	push   eax
c00119ea:	e8 f8 83 ff ff       	call   c0009de7 <malloc>
c00119ef:	83 c4 10             	add    esp,0x10
c00119f2:	89 c7                	mov    edi,eax
c00119f4:	85 c0                	test   eax,eax
c00119f6:	75 10                	jne    c0011a08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00119f8:	83 ec 0c             	sub    esp,0xc
c00119fb:	68 c9 5c 02 c0       	push   0xc0025cc9
c0011a00:	e8 d8 37 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011a0b:	ba 12 00 00 00       	mov    edx,0x12
c0011a10:	84 c0                	test   al,al
c0011a12:	74 11                	je     c0011a25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011a14:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011a18:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011a1c:	c1 fa 03             	sar    edx,0x3
c0011a1f:	0f af d1             	imul   edx,ecx
c0011a22:	83 c2 12             	add    edx,0x12
c0011a25:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011a29:	74 04                	je     c0011a2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011a2b:	85 f6                	test   esi,esi
c0011a2d:	75 12                	jne    c0011a41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011a2f:	83 ec 0c             	sub    esp,0xc
c0011a32:	68 d9 5c 02 c0       	push   0xc0025cd9
c0011a37:	e8 bf b6 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0011a3c:	e9 b8 00 00 00       	jmp    c0011af9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011a41:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011a45:	80 f9 02             	cmp    cl,0x2
c0011a48:	0f 85 96 00 00 00    	jne    c0011ae4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011a4e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011a53:	75 0e                	jne    c0011a63 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011a55:	84 c0                	test   al,al
c0011a57:	75 0a                	jne    c0011a63 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011a59:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011a5c:	83 e8 18             	sub    eax,0x18
c0011a5f:	a8 f7                	test   al,0xf7
c0011a61:	74 0a                	je     c0011a6d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011a63:	83 ec 0c             	sub    esp,0xc
c0011a66:	68 ee 5c 02 c0       	push   0xc0025cee
c0011a6b:	eb 7f                	jmp    c0011aec <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011a6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a75:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011a7d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011a81:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a89:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011a8d:	75 0c                	jne    c0011a9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011a8f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011a94:	c1 e0 18             	shl    eax,0x18
c0011a97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a9b:	45                   	inc    ebp
c0011a9c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011aa1:	c1 e1 10             	shl    ecx,0x10
c0011aa4:	89 c8                	mov    eax,ecx
c0011aa6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011aab:	c1 e1 08             	shl    ecx,0x8
c0011aae:	09 c1                	or     ecx,eax
c0011ab0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011ab4:	09 c1                	or     ecx,eax
c0011ab6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011aba:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011abe:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011ac2:	c1 f8 03             	sar    eax,0x3
c0011ac5:	01 c2                	add    edx,eax
c0011ac7:	89 e8                	mov    eax,ebp
c0011ac9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011acd:	39 c6                	cmp    esi,eax
c0011acf:	7f b0                	jg     c0011a81 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011ad1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011ad5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ad9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011adc:	7e 22                	jle    c0011b00 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011ade:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011ae2:	eb 99                	jmp    c0011a7d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011ae4:	50                   	push   eax
c0011ae5:	50                   	push   eax
c0011ae6:	51                   	push   ecx
c0011ae7:	68 fc 5c 02 c0       	push   0xc0025cfc
c0011aec:	e8 0a b6 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0011af1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011af4:	e8 fe 82 ff ff       	call   c0009df7 <free>
c0011af9:	83 c4 10             	add    esp,0x10
c0011afc:	31 ff                	xor    edi,edi
c0011afe:	eb 0f                	jmp    c0011b0f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011b00:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b04:	89 30                	mov    DWORD PTR [eax],esi
c0011b06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011b0d:	89 30                	mov    DWORD PTR [eax],esi
c0011b0f:	83 c4 1c             	add    esp,0x1c
c0011b12:	89 f8                	mov    eax,edi
c0011b14:	5b                   	pop    ebx
c0011b15:	5e                   	pop    esi
c0011b16:	5f                   	pop    edi
c0011b17:	5d                   	pop    ebp
c0011b18:	c3                   	ret    
c0011b19:	90                   	nop

c0011b1a <Video::putTGA(int, int, unsigned char*, int)>:
c0011b1a:	55                   	push   ebp
c0011b1b:	57                   	push   edi
c0011b1c:	56                   	push   esi
c0011b1d:	53                   	push   ebx
c0011b1e:	83 ec 28             	sub    esp,0x28
c0011b21:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011b25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011b29:	50                   	push   eax
c0011b2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011b2e:	50                   	push   eax
c0011b2f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b33:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b37:	56                   	push   esi
c0011b38:	e8 75 fe ff ff       	call   c00119b2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011b3d:	83 c4 20             	add    esp,0x20
c0011b40:	85 c0                	test   eax,eax
c0011b42:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b46:	74 35                	je     c0011b7d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b48:	89 c7                	mov    edi,eax
c0011b4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b4e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011b52:	39 d8                	cmp    eax,ebx
c0011b54:	7e 27                	jle    c0011b7d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b56:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b5e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011b62:	39 e8                	cmp    eax,ebp
c0011b64:	7e 14                	jle    c0011b7a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011b66:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b68:	83 c7 04             	add    edi,0x4
c0011b6b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011b6e:	53                   	push   ebx
c0011b6f:	55                   	push   ebp
c0011b70:	45                   	inc    ebp
c0011b71:	56                   	push   esi
c0011b72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	eb e0                	jmp    c0011b5a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011b7a:	43                   	inc    ebx
c0011b7b:	eb cd                	jmp    c0011b4a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011b7d:	83 c4 1c             	add    esp,0x1c
c0011b80:	5b                   	pop    ebx
c0011b81:	5e                   	pop    esi
c0011b82:	5f                   	pop    edi
c0011b83:	5d                   	pop    ebp
c0011b84:	c3                   	ret    
c0011b85:	66 90                	xchg   ax,ax
c0011b87:	90                   	nop

c0011b88 <ACPI::close(int, int, void*)>:
c0011b88:	83 ec 1c             	sub    esp,0x1c
c0011b8b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011b93:	74 0b                	je     c0011ba0 <ACPI::close(int, int, void*)+0x18>
c0011b95:	b8 00 00 00 00       	mov    eax,0x0
c0011b9a:	e9 99 00 00 00       	jmp    c0011c38 <ACPI::close(int, int, void*)+0xb0>
c0011b9f:	90                   	nop
c0011ba0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011ba5:	75 29                	jne    c0011bd0 <ACPI::close(int, int, void*)+0x48>
c0011ba7:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c0011bac:	85 c0                	test   eax,eax
c0011bae:	74 08                	je     c0011bb8 <ACPI::close(int, int, void*)+0x30>
c0011bb0:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c0011bb5:	ff d0                	call   eax
c0011bb7:	90                   	nop
c0011bb8:	83 ec 0c             	sub    esp,0xc
c0011bbb:	68 58 5d 02 c0       	push   0xc0025d58
c0011bc0:	e8 18 36 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0011bc5:	83 c4 10             	add    esp,0x10
c0011bc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bcd:	eb 69                	jmp    c0011c38 <ACPI::close(int, int, void*)+0xb0>
c0011bcf:	90                   	nop
c0011bd0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011bd5:	75 59                	jne    c0011c30 <ACPI::close(int, int, void*)+0xa8>
c0011bd7:	a1 44 92 02 c0       	mov    eax,ds:0xc0029244
c0011bdc:	85 c0                	test   eax,eax
c0011bde:	74 08                	je     c0011be8 <ACPI::close(int, int, void*)+0x60>
c0011be0:	a1 44 92 02 c0       	mov    eax,ds:0xc0029244
c0011be5:	ff d0                	call   eax
c0011be7:	90                   	nop
c0011be8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011bed:	8d 76 00             	lea    esi,[esi+0x0]
c0011bf0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bf5:	83 e0 02             	and    eax,0x2
c0011bf8:	74 1e                	je     c0011c18 <ACPI::close(int, int, void*)+0x90>
c0011bfa:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c05:	89 c2                	mov    edx,eax
c0011c07:	ec                   	in     al,dx
c0011c08:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c0c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011c10:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011c14:	eb da                	jmp    c0011bf0 <ACPI::close(int, int, void*)+0x68>
c0011c16:	66 90                	xchg   ax,ax
c0011c18:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011c1f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011c24:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011c28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c2c:	ee                   	out    dx,al
c0011c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c35:	8d 76 00             	lea    esi,[esi+0x0]
c0011c38:	83 c4 1c             	add    esp,0x1c
c0011c3b:	c3                   	ret    

c0011c3c <findRSDP()>:
c0011c3c:	83 ec 1c             	sub    esp,0x1c
c0011c3f:	83 ec 0c             	sub    esp,0xc
c0011c42:	68 7b 5e 02 c0       	push   0xc0025e7b
c0011c47:	e8 f5 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011c54:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c5a:	83 e0 04             	and    eax,0x4
c0011c5d:	84 c0                	test   al,al
c0011c5f:	75 0b                	jne    c0011c6c <findRSDP()+0x30>
c0011c61:	b8 00 00 00 00       	mov    eax,0x0
c0011c66:	e9 a1 00 00 00       	jmp    c0011d0c <findRSDP()+0xd0>
c0011c6b:	90                   	nop
c0011c6c:	a1 38 8c 02 c0       	mov    eax,ds:0xc0028c38
c0011c71:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011c76:	7f 1c                	jg     c0011c94 <findRSDP()+0x58>
c0011c78:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011c7d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c83:	83 e2 fb             	and    edx,0xfffffffb
c0011c86:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c8c:	b8 00 00 00 00       	mov    eax,0x0
c0011c91:	eb 79                	jmp    c0011d0c <findRSDP()+0xd0>
c0011c93:	90                   	nop
c0011c94:	83 ec 0c             	sub    esp,0xc
c0011c97:	68 8b 5e 02 c0       	push   0xc0025e8b
c0011c9c:	e8 a0 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011ca1:	83 c4 10             	add    esp,0x10
c0011ca4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011cac:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011cb4:	77 3e                	ja     c0011cf4 <findRSDP()+0xb8>
c0011cb6:	83 ec 04             	sub    esp,0x4
c0011cb9:	6a 08                	push   0x8
c0011cbb:	68 a4 5e 02 c0       	push   0xc0025ea4
c0011cc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011cc4:	e8 c7 e8 fe ff       	call   c0000590 <memcmp>
c0011cc9:	83 c4 10             	add    esp,0x10
c0011ccc:	85 c0                	test   eax,eax
c0011cce:	0f 94 c0             	sete   al
c0011cd1:	84 c0                	test   al,al
c0011cd3:	74 17                	je     c0011cec <findRSDP()+0xb0>
c0011cd5:	83 ec 0c             	sub    esp,0xc
c0011cd8:	68 ad 5e 02 c0       	push   0xc0025ead
c0011cdd:	e8 5f 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011ce2:	83 c4 10             	add    esp,0x10
c0011ce5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ce9:	eb 21                	jmp    c0011d0c <findRSDP()+0xd0>
c0011ceb:	90                   	nop
c0011cec:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011cf1:	eb b9                	jmp    c0011cac <findRSDP()+0x70>
c0011cf3:	90                   	nop
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	68 bb 5e 02 c0       	push   0xc0025ebb
c0011cfc:	e8 40 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	b8 00 00 00 00       	mov    eax,0x0
c0011d09:	8d 76 00             	lea    esi,[esi+0x0]
c0011d0c:	83 c4 1c             	add    esp,0x1c
c0011d0f:	c3                   	ret    

c0011d10 <loadACPITables(unsigned char*)>:
c0011d10:	57                   	push   edi
c0011d11:	56                   	push   esi
c0011d12:	53                   	push   ebx
c0011d13:	83 ec 60             	sub    esp,0x60
c0011d16:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011d1b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d21:	83 e0 04             	and    eax,0x4
c0011d24:	84 c0                	test   al,al
c0011d26:	0f 84 3c 02 00 00    	je     c0011f68 <loadACPITables(unsigned char*)+0x258>
c0011d2c:	a0 60 94 02 c0       	mov    al,ds:0xc0029460
c0011d31:	84 c0                	test   al,al
c0011d33:	74 77                	je     c0011dac <loadACPITables(unsigned char*)+0x9c>
c0011d35:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d39:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011d3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011d41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d44:	83 e8 24             	sub    eax,0x24
c0011d47:	c1 e8 03             	shr    eax,0x3
c0011d4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011d4e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011d56:	66 90                	xchg   ax,ax
c0011d58:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011d5c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011d60:	0f 8d b6 00 00 00    	jge    c0011e1c <loadACPITables(unsigned char*)+0x10c>
c0011d66:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d6a:	83 c0 24             	add    eax,0x24
c0011d6d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011d71:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011d75:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011d79:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011d7d:	c1 e0 03             	shl    eax,0x3
c0011d80:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011d84:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011d8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8d:	89 c1                	mov    ecx,eax
c0011d8f:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0011d94:	8d 50 01             	lea    edx,[eax+0x1]
c0011d97:	89 15 4c 92 02 c0    	mov    DWORD PTR ds:0xc002924c,edx
c0011d9d:	89 ca                	mov    edx,ecx
c0011d9f:	89 14 c5 64 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d9c],edx
c0011da6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011daa:	eb ac                	jmp    c0011d58 <loadACPITables(unsigned char*)+0x48>
c0011dac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011db0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011db4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011db8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011dbb:	83 e8 24             	sub    eax,0x24
c0011dbe:	c1 e8 02             	shr    eax,0x2
c0011dc1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011dc5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0011dd0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011dd4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011dd8:	7d 42                	jge    c0011e1c <loadACPITables(unsigned char*)+0x10c>
c0011dda:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011dde:	83 c0 24             	add    eax,0x24
c0011de1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011de5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011de9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011ded:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011df1:	c1 e0 02             	shl    eax,0x2
c0011df4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011df8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dfc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011dfe:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0011e03:	8d 50 01             	lea    edx,[eax+0x1]
c0011e06:	89 15 4c 92 02 c0    	mov    DWORD PTR ds:0xc002924c,edx
c0011e0c:	89 ca                	mov    edx,ecx
c0011e0e:	89 14 c5 64 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d9c],edx
c0011e15:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011e19:	eb b5                	jmp    c0011dd0 <loadACPITables(unsigned char*)+0xc0>
c0011e1b:	90                   	nop
c0011e1c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011e24:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c0011e29:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011e2d:	0f 8d 39 01 00 00    	jge    c0011f6c <loadACPITables(unsigned char*)+0x25c>
c0011e33:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e37:	8b 04 c5 64 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6d9c]
c0011e3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e46:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e4e:	25 ff 0f 00 00       	and    eax,0xfff
c0011e53:	89 c6                	mov    esi,eax
c0011e55:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c0011e5b:	83 ec 0c             	sub    esp,0xc
c0011e5e:	6a 01                	push   0x1
c0011e60:	e8 3c 9f ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0011e65:	83 c4 10             	add    esp,0x10
c0011e68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e6c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e72:	83 ec 0c             	sub    esp,0xc
c0011e75:	6a 01                	push   0x1
c0011e77:	6a 01                	push   0x1
c0011e79:	50                   	push   eax
c0011e7a:	52                   	push   edx
c0011e7b:	53                   	push   ebx
c0011e7c:	e8 81 a8 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e81:	83 c4 20             	add    esp,0x20
c0011e84:	09 f0                	or     eax,esi
c0011e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e8a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e8e:	c1 e0 03             	shl    eax,0x3
c0011e91:	05 60 92 02 c0       	add    eax,0xc0029260
c0011e96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ea2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011eaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011eae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011eb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011eba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011ebe:	89 c6                	mov    esi,eax
c0011ec0:	89 d7                	mov    edi,edx
c0011ec2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ec4:	89 c8                	mov    eax,ecx
c0011ec6:	89 fa                	mov    edx,edi
c0011ec8:	89 f3                	mov    ebx,esi
c0011eca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011ece:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ed6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011edd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011ee1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ee5:	05 00 10 00 00       	add    eax,0x1000
c0011eea:	c1 e8 0c             	shr    eax,0xc
c0011eed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011ef9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011efd:	25 ff 0f 00 00       	and    eax,0xfff
c0011f02:	89 c6                	mov    esi,eax
c0011f04:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c0011f0a:	83 ec 0c             	sub    esp,0xc
c0011f0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011f11:	e8 8b 9e ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0011f16:	83 c4 10             	add    esp,0x10
c0011f19:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f1d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f23:	83 ec 0c             	sub    esp,0xc
c0011f26:	6a 01                	push   0x1
c0011f28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f2c:	50                   	push   eax
c0011f2d:	52                   	push   edx
c0011f2e:	53                   	push   ebx
c0011f2f:	e8 ce a7 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f34:	83 c4 20             	add    esp,0x20
c0011f37:	09 f0                	or     eax,esi
c0011f39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f41:	83 ec 0c             	sub    esp,0xc
c0011f44:	50                   	push   eax
c0011f45:	e8 4b a1 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f4a:	83 c4 10             	add    esp,0x10
c0011f4d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f55:	89 14 c5 64 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d9c],edx
c0011f5c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011f60:	e9 bf fe ff ff       	jmp    c0011e24 <loadACPITables(unsigned char*)+0x114>
c0011f65:	8d 76 00             	lea    esi,[esi+0x0]
c0011f68:	90                   	nop
c0011f69:	8d 76 00             	lea    esi,[esi+0x0]
c0011f6c:	83 c4 60             	add    esp,0x60
c0011f6f:	5b                   	pop    ebx
c0011f70:	5e                   	pop    esi
c0011f71:	5f                   	pop    edi
c0011f72:	c3                   	ret    
c0011f73:	90                   	nop

c0011f74 <findRSDT(unsigned char*)>:
c0011f74:	57                   	push   edi
c0011f75:	56                   	push   esi
c0011f76:	53                   	push   ebx
c0011f77:	83 ec 50             	sub    esp,0x50
c0011f7a:	83 ec 0c             	sub    esp,0xc
c0011f7d:	68 cf 5e 02 c0       	push   0xc0025ecf
c0011f82:	e8 ba 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011f87:	83 c4 10             	add    esp,0x10
c0011f8a:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0011f8f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011f95:	83 e0 04             	and    eax,0x4
c0011f98:	84 c0                	test   al,al
c0011f9a:	75 0c                	jne    c0011fa8 <findRSDT(unsigned char*)+0x34>
c0011f9c:	b8 00 00 00 00       	mov    eax,0x0
c0011fa1:	e9 86 01 00 00       	jmp    c001212c <findRSDT(unsigned char*)+0x1b8>
c0011fa6:	66 90                	xchg   ax,ax
c0011fa8:	83 ec 0c             	sub    esp,0xc
c0011fab:	68 e1 5e 02 c0       	push   0xc0025ee1
c0011fb0:	e8 8c 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011fb5:	83 c4 10             	add    esp,0x10
c0011fb8:	89 e0                	mov    eax,esp
c0011fba:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011fbe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011fc2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011fc6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011fce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011fd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011fda:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011fde:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011fe2:	89 c6                	mov    esi,eax
c0011fe4:	89 d7                	mov    edi,edx
c0011fe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fe8:	89 c8                	mov    eax,ecx
c0011fea:	89 fa                	mov    edx,edi
c0011fec:	89 f3                	mov    ebx,esi
c0011fee:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011ff2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011ff6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ffa:	83 ec 0c             	sub    esp,0xc
c0011ffd:	68 f3 5e 02 c0       	push   0xc0025ef3
c0012002:	e8 3a 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012007:	83 c4 10             	add    esp,0x10
c001200a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001200e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0012012:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001201a:	83 ec 0c             	sub    esp,0xc
c001201d:	68 05 5f 02 c0       	push   0xc0025f05
c0012022:	e8 1a 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012027:	83 c4 10             	add    esp,0x10
c001202a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001202e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012032:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001203a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001203e:	83 ec 04             	sub    esp,0x4
c0012041:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012045:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012049:	68 7c 5d 02 c0       	push   0xc0025d7c
c001204e:	e8 a8 b0 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001205a:	25 ff 0f 00 00       	and    eax,0xfff
c001205f:	89 c6                	mov    esi,eax
c0012061:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c0012067:	83 ec 0c             	sub    esp,0xc
c001206a:	6a 02                	push   0x2
c001206c:	e8 30 9d ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012078:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001207e:	83 ec 0c             	sub    esp,0xc
c0012081:	6a 01                	push   0x1
c0012083:	6a 02                	push   0x2
c0012085:	50                   	push   eax
c0012086:	52                   	push   edx
c0012087:	53                   	push   ebx
c0012088:	e8 75 a6 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001208d:	83 c4 20             	add    esp,0x20
c0012090:	09 f0                	or     eax,esi
c0012092:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012096:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001209a:	25 ff 0f 00 00       	and    eax,0xfff
c001209f:	89 c6                	mov    esi,eax
c00120a1:	8b 1d 34 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d34
c00120a7:	83 ec 0c             	sub    esp,0xc
c00120aa:	6a 02                	push   0x2
c00120ac:	e8 f0 9c ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00120b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00120be:	83 ec 0c             	sub    esp,0xc
c00120c1:	6a 01                	push   0x1
c00120c3:	6a 02                	push   0x2
c00120c5:	50                   	push   eax
c00120c6:	52                   	push   edx
c00120c7:	53                   	push   ebx
c00120c8:	e8 35 a6 ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120cd:	83 c4 20             	add    esp,0x20
c00120d0:	09 f0                	or     eax,esi
c00120d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00120d6:	83 ec 04             	sub    esp,0x4
c00120d9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00120dd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00120e1:	68 9c 5d 02 c0       	push   0xc0025d9c
c00120e6:	e8 10 b0 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00120eb:	83 c4 10             	add    esp,0x10
c00120ee:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00120f3:	75 13                	jne    c0012108 <findRSDT(unsigned char*)+0x194>
c00120f5:	c6 05 60 94 02 c0 00 	mov    BYTE PTR ds:0xc0029460,0x0
c00120fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012100:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0012104:	eb 22                	jmp    c0012128 <findRSDT(unsigned char*)+0x1b4>
c0012106:	66 90                	xchg   ax,ax
c0012108:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001210d:	75 11                	jne    c0012120 <findRSDT(unsigned char*)+0x1ac>
c001210f:	c6 05 60 94 02 c0 01 	mov    BYTE PTR ds:0xc0029460,0x1
c0012116:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001211a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001211e:	eb 08                	jmp    c0012128 <findRSDT(unsigned char*)+0x1b4>
c0012120:	b8 00 00 00 00       	mov    eax,0x0
c0012125:	eb 05                	jmp    c001212c <findRSDT(unsigned char*)+0x1b8>
c0012127:	90                   	nop
c0012128:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001212c:	83 c4 50             	add    esp,0x50
c001212f:	5b                   	pop    ebx
c0012130:	5e                   	pop    esi
c0012131:	5f                   	pop    edi
c0012132:	c3                   	ret    
c0012133:	90                   	nop

c0012134 <findDataTable(unsigned char*, char*)>:
c0012134:	83 ec 1c             	sub    esp,0x1c
c0012137:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001213c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012142:	83 e0 04             	and    eax,0x4
c0012145:	84 c0                	test   al,al
c0012147:	75 07                	jne    c0012150 <findDataTable(unsigned char*, char*)+0x1c>
c0012149:	b8 00 00 00 00       	mov    eax,0x0
c001214e:	eb 58                	jmp    c00121a8 <findDataTable(unsigned char*, char*)+0x74>
c0012150:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012158:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c001215d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012161:	7d 3d                	jge    c00121a0 <findDataTable(unsigned char*, char*)+0x6c>
c0012163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012167:	c1 e0 03             	shl    eax,0x3
c001216a:	05 60 92 02 c0       	add    eax,0xc0029260
c001216f:	83 ec 04             	sub    esp,0x4
c0012172:	6a 04                	push   0x4
c0012174:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012178:	50                   	push   eax
c0012179:	e8 12 e4 fe ff       	call   c0000590 <memcmp>
c001217e:	83 c4 10             	add    esp,0x10
c0012181:	85 c0                	test   eax,eax
c0012183:	0f 94 c0             	sete   al
c0012186:	84 c0                	test   al,al
c0012188:	74 0e                	je     c0012198 <findDataTable(unsigned char*, char*)+0x64>
c001218a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001218e:	8b 04 c5 64 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6d9c]
c0012195:	eb 11                	jmp    c00121a8 <findDataTable(unsigned char*, char*)+0x74>
c0012197:	90                   	nop
c0012198:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001219c:	eb ba                	jmp    c0012158 <findDataTable(unsigned char*, char*)+0x24>
c001219e:	66 90                	xchg   ax,ax
c00121a0:	b8 00 00 00 00       	mov    eax,0x0
c00121a5:	8d 76 00             	lea    esi,[esi+0x0]
c00121a8:	83 c4 1c             	add    esp,0x1c
c00121ab:	c3                   	ret    

c00121ac <scanMADT()>:
c00121ac:	53                   	push   ebx
c00121ad:	83 ec 38             	sub    esp,0x38
c00121b0:	83 ec 0c             	sub    esp,0xc
c00121b3:	68 17 5f 02 c0       	push   0xc0025f17
c00121b8:	e8 84 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00121bd:	83 c4 10             	add    esp,0x10
c00121c0:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c00121c5:	25 00 04 00 00       	and    eax,0x400
c00121ca:	74 14                	je     c00121e0 <scanMADT()+0x34>
c00121cc:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00121d1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121d7:	83 e2 fb             	and    edx,0xfffffffb
c00121da:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00121e0:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00121e5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00121eb:	83 e0 04             	and    eax,0x4
c00121ee:	84 c0                	test   al,al
c00121f0:	0f 84 82 04 00 00    	je     c0012678 <scanMADT()+0x4cc>
c00121f6:	83 ec 0c             	sub    esp,0xc
c00121f9:	68 24 5f 02 c0       	push   0xc0025f24
c00121fe:	e8 3e 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	e8 31 fa ff ff       	call   c0011c3c <findRSDP()>
c001220b:	a3 6c 94 02 c0       	mov    ds:0xc002946c,eax
c0012210:	a1 6c 94 02 c0       	mov    eax,ds:0xc002946c
c0012215:	85 c0                	test   eax,eax
c0012217:	75 1b                	jne    c0012234 <scanMADT()+0x88>
c0012219:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001221e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012224:	83 e2 fb             	and    edx,0xfffffffb
c0012227:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001222d:	e9 4e 04 00 00       	jmp    c0012680 <scanMADT()+0x4d4>
c0012232:	66 90                	xchg   ax,ax
c0012234:	83 ec 0c             	sub    esp,0xc
c0012237:	68 36 5f 02 c0       	push   0xc0025f36
c001223c:	e8 00 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012241:	83 c4 10             	add    esp,0x10
c0012244:	a1 6c 94 02 c0       	mov    eax,ds:0xc002946c
c0012249:	83 ec 0c             	sub    esp,0xc
c001224c:	50                   	push   eax
c001224d:	e8 22 fd ff ff       	call   c0011f74 <findRSDT(unsigned char*)>
c0012252:	83 c4 10             	add    esp,0x10
c0012255:	a3 68 94 02 c0       	mov    ds:0xc0029468,eax
c001225a:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c001225f:	85 c0                	test   eax,eax
c0012261:	75 19                	jne    c001227c <scanMADT()+0xd0>
c0012263:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0012268:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001226e:	83 e2 fb             	and    edx,0xfffffffb
c0012271:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012277:	e9 04 04 00 00       	jmp    c0012680 <scanMADT()+0x4d4>
c001227c:	83 ec 0c             	sub    esp,0xc
c001227f:	68 46 5f 02 c0       	push   0xc0025f46
c0012284:	e8 b8 7b ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012289:	83 c4 10             	add    esp,0x10
c001228c:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0012291:	83 ec 0c             	sub    esp,0xc
c0012294:	50                   	push   eax
c0012295:	e8 76 fa ff ff       	call   c0011d10 <loadACPITables(unsigned char*)>
c001229a:	83 c4 10             	add    esp,0x10
c001229d:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00122a2:	83 ec 08             	sub    esp,0x8
c00122a5:	68 5e 5f 02 c0       	push   0xc0025f5e
c00122aa:	50                   	push   eax
c00122ab:	e8 84 fe ff ff       	call   c0012134 <findDataTable(unsigned char*, char*)>
c00122b0:	83 c4 10             	add    esp,0x10
c00122b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00122b7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00122bc:	75 1a                	jne    c00122d8 <scanMADT()+0x12c>
c00122be:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00122c3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00122c9:	83 e2 fe             	and    edx,0xfffffffe
c00122cc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00122d2:	e9 a9 03 00 00       	jmp    c0012680 <scanMADT()+0x4d4>
c00122d7:	90                   	nop
c00122d8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00122e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122e7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00122eb:	0f 87 8f 03 00 00    	ja     c0012680 <scanMADT()+0x4d4>
c00122f1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00122f9:	0f 87 81 03 00 00    	ja     c0012680 <scanMADT()+0x4d4>
c00122ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012303:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012307:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001230b:	8d 50 01             	lea    edx,[eax+0x1]
c001230e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012312:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012316:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001231a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001231e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012322:	8d 50 01             	lea    edx,[eax+0x1]
c0012325:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012329:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001232d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012331:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0012335:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001233a:	0f 86 3c 03 00 00    	jbe    c001267c <scanMADT()+0x4d0>
c0012340:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0012345:	75 59                	jne    c00123a0 <scanMADT()+0x1f4>
c0012347:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001234b:	8d 50 01             	lea    edx,[eax+0x1]
c001234e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012352:	8a 15 60 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029660
c0012358:	0f b6 d2             	movzx  edx,dl
c001235b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001235f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012363:	88 82 a0 96 02 c0    	mov    BYTE PTR [edx-0x3ffd6960],al
c0012369:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001236d:	8d 50 01             	lea    edx,[eax+0x1]
c0012370:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012374:	8a 15 60 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029660
c001237a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001237d:	88 0d 60 96 02 c0    	mov    BYTE PTR ds:0xc0029660,cl
c0012383:	0f b6 d2             	movzx  edx,dl
c0012386:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001238a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001238e:	88 82 80 96 02 c0    	mov    BYTE PTR [edx-0x3ffd6980],al
c0012394:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012399:	e9 c6 02 00 00       	jmp    c0012664 <scanMADT()+0x4b8>
c001239e:	66 90                	xchg   ax,ax
c00123a0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00123a5:	0f 85 15 01 00 00    	jne    c00124c0 <scanMADT()+0x314>
c00123ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123af:	8d 50 01             	lea    edx,[eax+0x1]
c00123b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00123b6:	8a 15 20 95 02 c0    	mov    dl,BYTE PTR ds:0xc0029520
c00123bc:	0f b6 d2             	movzx  edx,dl
c00123bf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00123c3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00123c7:	88 82 40 95 02 c0    	mov    BYTE PTR [edx-0x3ffd6ac0],al
c00123cd:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00123d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123d9:	01 d0                	add    eax,edx
c00123db:	83 c0 2c             	add    eax,0x2c
c00123de:	8a 00                	mov    al,BYTE PTR [eax]
c00123e0:	0f b6 d0             	movzx  edx,al
c00123e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00123ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00123f2:	0f b6 c0             	movzx  eax,al
c00123f5:	c1 e0 08             	shl    eax,0x8
c00123f8:	89 d1                	mov    ecx,edx
c00123fa:	09 c1                	or     ecx,eax
c00123fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012400:	8d 50 02             	lea    edx,[eax+0x2]
c0012403:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012407:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001240b:	0f b6 c0             	movzx  eax,al
c001240e:	c1 e0 10             	shl    eax,0x10
c0012411:	09 c1                	or     ecx,eax
c0012413:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012417:	8d 50 03             	lea    edx,[eax+0x3]
c001241a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001241e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012422:	0f b6 c0             	movzx  eax,al
c0012425:	c1 e0 18             	shl    eax,0x18
c0012428:	09 c1                	or     ecx,eax
c001242a:	89 ca                	mov    edx,ecx
c001242c:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c0012431:	0f b6 c0             	movzx  eax,al
c0012434:	89 14 85 60 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6aa0],edx
c001243b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012440:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012444:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012448:	01 d0                	add    eax,edx
c001244a:	83 c0 2c             	add    eax,0x2c
c001244d:	8a 00                	mov    al,BYTE PTR [eax]
c001244f:	0f b6 d0             	movzx  edx,al
c0012452:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012456:	8d 48 01             	lea    ecx,[eax+0x1]
c0012459:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001245d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012461:	0f b6 c0             	movzx  eax,al
c0012464:	c1 e0 08             	shl    eax,0x8
c0012467:	89 d1                	mov    ecx,edx
c0012469:	09 c1                	or     ecx,eax
c001246b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001246f:	8d 50 02             	lea    edx,[eax+0x2]
c0012472:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012476:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001247a:	0f b6 c0             	movzx  eax,al
c001247d:	c1 e0 10             	shl    eax,0x10
c0012480:	09 c1                	or     ecx,eax
c0012482:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012486:	8d 50 03             	lea    edx,[eax+0x3]
c0012489:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001248d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012491:	0f b6 c0             	movzx  eax,al
c0012494:	c1 e0 18             	shl    eax,0x18
c0012497:	09 c1                	or     ecx,eax
c0012499:	89 ca                	mov    edx,ecx
c001249b:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c00124a0:	0f b6 c0             	movzx  eax,al
c00124a3:	89 14 85 e0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a20],edx
c00124aa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00124af:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c00124b4:	40                   	inc    eax
c00124b5:	a2 20 95 02 c0       	mov    ds:0xc0029520,al
c00124ba:	e9 a5 01 00 00       	jmp    c0012664 <scanMADT()+0x4b8>
c00124bf:	90                   	nop
c00124c0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00124c5:	0f 85 e9 00 00 00    	jne    c00125b4 <scanMADT()+0x408>
c00124cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124cf:	8d 50 01             	lea    edx,[eax+0x1]
c00124d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124da:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124de:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00124e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124e6:	8d 50 01             	lea    edx,[eax+0x1]
c00124e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124f1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124f5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00124f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012501:	01 d0                	add    eax,edx
c0012503:	83 c0 2c             	add    eax,0x2c
c0012506:	8a 00                	mov    al,BYTE PTR [eax]
c0012508:	0f b6 d0             	movzx  edx,al
c001250b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001250f:	8d 48 01             	lea    ecx,[eax+0x1]
c0012512:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012516:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001251a:	0f b6 c0             	movzx  eax,al
c001251d:	c1 e0 08             	shl    eax,0x8
c0012520:	89 d1                	mov    ecx,edx
c0012522:	09 c1                	or     ecx,eax
c0012524:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012528:	8d 50 02             	lea    edx,[eax+0x2]
c001252b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001252f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012533:	0f b6 c0             	movzx  eax,al
c0012536:	c1 e0 10             	shl    eax,0x10
c0012539:	09 c1                	or     ecx,eax
c001253b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001253f:	8d 50 03             	lea    edx,[eax+0x3]
c0012542:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012546:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001254a:	0f b6 c0             	movzx  eax,al
c001254d:	c1 e0 18             	shl    eax,0x18
c0012550:	09 c8                	or     eax,ecx
c0012552:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012556:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001255b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001255f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012563:	01 d0                	add    eax,edx
c0012565:	83 c0 2c             	add    eax,0x2c
c0012568:	8a 00                	mov    al,BYTE PTR [eax]
c001256a:	0f b6 c0             	movzx  eax,al
c001256d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012571:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012574:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012578:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001257c:	0f b6 d2             	movzx  edx,dl
c001257f:	c1 e2 08             	shl    edx,0x8
c0012582:	09 d0                	or     eax,edx
c0012584:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012589:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001258e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0012593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012597:	88 90 00 83 02 c0    	mov    BYTE PTR [eax-0x3ffd7d00],dl
c001259d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00125a2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00125a7:	66 89 84 12 00 95 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6b00],ax
c00125af:	e9 b0 00 00 00       	jmp    c0012664 <scanMADT()+0x4b8>
c00125b4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00125b9:	0f 85 99 00 00 00    	jne    c0012658 <scanMADT()+0x4ac>
c00125bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125c3:	8d 50 01             	lea    edx,[eax+0x1]
c00125c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00125ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00125d2:	0f b6 c0             	movzx  eax,al
c00125d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00125d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125e1:	01 d0                	add    eax,edx
c00125e3:	83 c0 2c             	add    eax,0x2c
c00125e6:	8a 00                	mov    al,BYTE PTR [eax]
c00125e8:	0f b6 d0             	movzx  edx,al
c00125eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00125f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00125fa:	0f b6 c0             	movzx  eax,al
c00125fd:	c1 e0 08             	shl    eax,0x8
c0012600:	09 d0                	or     eax,edx
c0012602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012606:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001260b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001260f:	8d 50 01             	lea    edx,[eax+0x1]
c0012612:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012616:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001261a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001261e:	0f b6 c0             	movzx  eax,al
c0012621:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012629:	c1 e0 08             	shl    eax,0x8
c001262c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012630:	89 c1                	mov    ecx,eax
c0012632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012636:	c1 e0 18             	shl    eax,0x18
c0012639:	89 c3                	mov    ebx,eax
c001263b:	a1 70 94 02 c0       	mov    eax,ds:0xc0029470
c0012640:	8d 50 01             	lea    edx,[eax+0x1]
c0012643:	89 15 70 94 02 c0    	mov    DWORD PTR ds:0xc0029470,edx
c0012649:	09 d9                	or     ecx,ebx
c001264b:	89 ca                	mov    edx,ecx
c001264d:	89 14 85 80 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b80],edx
c0012654:	eb 0e                	jmp    c0012664 <scanMADT()+0x4b8>
c0012656:	66 90                	xchg   ax,ax
c0012658:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001265d:	75 05                	jne    c0012664 <scanMADT()+0x4b8>
c001265f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012664:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012669:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001266d:	01 d0                	add    eax,edx
c001266f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012673:	e9 68 fc ff ff       	jmp    c00122e0 <scanMADT()+0x134>
c0012678:	90                   	nop
c0012679:	eb 05                	jmp    c0012680 <scanMADT()+0x4d4>
c001267b:	90                   	nop
c001267c:	90                   	nop
c001267d:	8d 76 00             	lea    esi,[esi+0x0]
c0012680:	83 c4 38             	add    esp,0x38
c0012683:	5b                   	pop    ebx
c0012684:	c3                   	ret    
c0012685:	90                   	nop
c0012686:	66 90                	xchg   ax,ax

c0012688 <ACPI::ACPI()>:
c0012688:	83 ec 0c             	sub    esp,0xc
c001268b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001268f:	83 ec 08             	sub    esp,0x8
c0012692:	68 63 5f 02 c0       	push   0xc0025f63
c0012697:	50                   	push   eax
c0012698:	e8 d5 c1 ff ff       	call   c000e872 <Device::Device(char const*)>
c001269d:	83 c4 10             	add    esp,0x10
c00126a0:	ba 24 61 02 c0       	mov    edx,0xc0026124
c00126a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126a9:	89 10                	mov    DWORD PTR [eax],edx
c00126ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00126b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126ba:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00126c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00126d2:	83 ec 0c             	sub    esp,0xc
c00126d5:	68 68 5f 02 c0       	push   0xc0025f68
c00126da:	e8 62 77 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	e8 c5 fa ff ff       	call   c00121ac <scanMADT()>
c00126e7:	90                   	nop
c00126e8:	83 c4 0c             	add    esp,0xc
c00126eb:	c3                   	ret    

c00126ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00126ec:	83 ec 2c             	sub    esp,0x2c
c00126ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00126f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00126fb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00126ff:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012704:	88 d0                	mov    al,dl
c0012706:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001270a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001270f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012717:	90                   	nop
c0012718:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001271c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012722:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012726:	0f 8d 9c 00 00 00    	jge    c00127c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c001272c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012730:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012734:	83 c2 2a             	add    edx,0x2a
c0012737:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001273b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012740:	75 7a                	jne    c00127bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012742:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012746:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001274a:	83 c2 2a             	add    edx,0x2a
c001274d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012751:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012755:	75 65                	jne    c00127bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012757:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001275c:	74 3a                	je     c0012798 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001275e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012762:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012766:	83 c2 2a             	add    edx,0x2a
c0012769:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001276d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012771:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012774:	39 c2                	cmp    edx,eax
c0012776:	74 10                	je     c0012788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012778:	83 ec 0c             	sub    esp,0xc
c001277b:	68 bc 5d 02 c0       	push   0xc0025dbc
c0012780:	e8 58 2a 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0012785:	83 c4 10             	add    esp,0x10
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	68 76 5f 02 c0       	push   0xc0025f76
c0012790:	e8 48 2a 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001279c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a4:	83 c2 2a             	add    edx,0x2a
c00127a7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00127ab:	8b 02                	mov    eax,DWORD PTR [edx]
c00127ad:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00127b0:	89 01                	mov    DWORD PTR [ecx],eax
c00127b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00127b5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00127ba:	66 90                	xchg   ax,ax
c00127bc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127c0:	e9 53 ff ff ff       	jmp    c0012718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00127c5:	8d 76 00             	lea    esi,[esi+0x0]
c00127c8:	90                   	nop
c00127c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127cd:	83 c4 2c             	add    esp,0x2c
c00127d0:	c2 04 00             	ret    0x4
c00127d3:	90                   	nop

c00127d4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00127d4:	83 ec 1c             	sub    esp,0x1c
c00127d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127db:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00127df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127e3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00127e8:	88 c8                	mov    al,cl
c00127ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00127ee:	88 d0                	mov    al,dl
c00127f0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00127f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127f8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00127fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012802:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012805:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012809:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001280d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012811:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012817:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001281b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001281e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012822:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0012827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001282b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012831:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012835:	8d 48 01             	lea    ecx,[eax+0x1]
c0012838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001283c:	83 c2 2a             	add    edx,0x2a
c001283f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012847:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001284d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012851:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012854:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012858:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001285c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012860:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012866:	8d 50 01             	lea    edx,[eax+0x1]
c0012869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001286d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012877:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001287d:	3d 00 02 00 00       	cmp    eax,0x200
c0012882:	75 10                	jne    c0012894 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012884:	83 ec 0c             	sub    esp,0xc
c0012887:	68 85 5f 02 c0       	push   0xc0025f85
c001288c:	e8 4c 29 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	90                   	nop
c0012895:	83 c4 1c             	add    esp,0x1c
c0012898:	c3                   	ret    
c0012899:	90                   	nop
c001289a:	66 90                	xchg   ax,ax

c001289c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001289c:	b8 00 00 00 00       	mov    eax,0x0
c00128a1:	c3                   	ret    
c00128a2:	66 90                	xchg   ax,ax

c00128a4 <ACPI::detectPCI()>:
c00128a4:	53                   	push   ebx
c00128a5:	83 ec 68             	sub    esp,0x68
c00128a8:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00128ad:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00128b2:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00128b7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00128bd:	83 e0 04             	and    eax,0x4
c00128c0:	84 c0                	test   al,al
c00128c2:	74 2c                	je     c00128f0 <ACPI::detectPCI()+0x4c>
c00128c4:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00128c9:	83 ec 08             	sub    esp,0x8
c00128cc:	68 a2 5f 02 c0       	push   0xc0025fa2
c00128d1:	50                   	push   eax
c00128d2:	e8 5d f8 ff ff       	call   c0012134 <findDataTable(unsigned char*, char*)>
c00128d7:	83 c4 10             	add    esp,0x10
c00128da:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00128de:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00128e3:	74 0b                	je     c00128f0 <ACPI::detectPCI()+0x4c>
c00128e5:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128ea:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00128ef:	90                   	nop
c00128f0:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00128f8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00128fc:	8a 00                	mov    al,BYTE PTR [eax]
c00128fe:	3c 01                	cmp    al,0x1
c0012900:	75 0e                	jne    c0012910 <ACPI::detectPCI()+0x6c>
c0012902:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012907:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001290c:	eb 2a                	jmp    c0012938 <ACPI::detectPCI()+0x94>
c001290e:	66 90                	xchg   ax,ax
c0012910:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012914:	8a 00                	mov    al,BYTE PTR [eax]
c0012916:	3c 02                	cmp    al,0x2
c0012918:	75 1e                	jne    c0012938 <ACPI::detectPCI()+0x94>
c001291a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001291f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012924:	74 12                	je     c0012938 <ACPI::detectPCI()+0x94>
c0012926:	83 ec 0c             	sub    esp,0xc
c0012929:	68 ec 5d 02 c0       	push   0xc0025dec
c001292e:	e8 aa 28 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	66 90                	xchg   ax,ax
c0012938:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c001293c:	83 f0 01             	xor    eax,0x1
c001293f:	84 c0                	test   al,al
c0012941:	74 41                	je     c0012984 <ACPI::detectPCI()+0xe0>
c0012943:	e8 08 d8 fe ff       	call   c0000150 <manualPCIProbe>
c0012948:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001294c:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012951:	75 0d                	jne    c0012960 <ACPI::detectPCI()+0xbc>
c0012953:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012958:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001295d:	eb 25                	jmp    c0012984 <ACPI::detectPCI()+0xe0>
c001295f:	90                   	nop
c0012960:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012965:	75 1d                	jne    c0012984 <ACPI::detectPCI()+0xe0>
c0012967:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001296c:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012971:	74 11                	je     c0012984 <ACPI::detectPCI()+0xe0>
c0012973:	83 ec 0c             	sub    esp,0xc
c0012976:	68 ec 5d 02 c0       	push   0xc0025dec
c001297b:	e8 5d 28 00 00       	call   c00151dd <Krnl::panic(char const*)>
c0012980:	83 c4 10             	add    esp,0x10
c0012983:	90                   	nop
c0012984:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012989:	0f 84 49 03 00 00    	je     c0012cd8 <ACPI::detectPCI()+0x434>
c001298f:	83 ec 0c             	sub    esp,0xc
c0012992:	68 a7 5f 02 c0       	push   0xc0025fa7
c0012997:	e8 a5 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001299c:	83 c4 10             	add    esp,0x10
c001299f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00129a4:	0f 84 8e 00 00 00    	je     c0012a38 <ACPI::detectPCI()+0x194>
c00129aa:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c00129af:	25 00 08 00 00       	and    eax,0x800
c00129b4:	0f 84 16 01 00 00    	je     c0012ad0 <ACPI::detectPCI()+0x22c>
c00129ba:	83 ec 0c             	sub    esp,0xc
c00129bd:	68 14 5e 02 c0       	push   0xc0025e14
c00129c2:	e8 7a 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00129c7:	83 c4 10             	add    esp,0x10
c00129ca:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c00129cf:	25 80 00 00 00       	and    eax,0x80
c00129d4:	0f 85 f6 00 00 00    	jne    c0012ad0 <ACPI::detectPCI()+0x22c>
c00129da:	66 90                	xchg   ax,ax
c00129dc:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00129e3:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00129e8:	89 c2                	mov    edx,eax
c00129ea:	ec                   	in     al,dx
c00129eb:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00129ef:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00129f3:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00129f7:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00129fc:	74 0a                	je     c0012a08 <ACPI::detectPCI()+0x164>
c00129fe:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012a03:	74 03                	je     c0012a08 <ACPI::detectPCI()+0x164>
c0012a05:	eb d5                	jmp    c00129dc <ACPI::detectPCI()+0x138>
c0012a07:	90                   	nop
c0012a08:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012a0f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012a14:	89 c2                	mov    edx,eax
c0012a16:	ec                   	in     al,dx
c0012a17:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012a1b:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012a1f:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0012a23:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012a28:	74 de                	je     c0012a08 <ACPI::detectPCI()+0x164>
c0012a2a:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012a2f:	0f 85 93 00 00 00    	jne    c0012ac8 <ACPI::detectPCI()+0x224>
c0012a35:	eb d1                	jmp    c0012a08 <ACPI::detectPCI()+0x164>
c0012a37:	90                   	nop
c0012a38:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012a3c:	83 f0 01             	xor    eax,0x1
c0012a3f:	84 c0                	test   al,al
c0012a41:	0f 84 89 00 00 00    	je     c0012ad0 <ACPI::detectPCI()+0x22c>
c0012a47:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012a4c:	25 00 08 00 00       	and    eax,0x800
c0012a51:	74 7d                	je     c0012ad0 <ACPI::detectPCI()+0x22c>
c0012a53:	83 ec 0c             	sub    esp,0xc
c0012a56:	68 38 5e 02 c0       	push   0xc0025e38
c0012a5b:	e8 e1 73 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012a60:	83 c4 10             	add    esp,0x10
c0012a63:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012a68:	25 80 00 00 00       	and    eax,0x80
c0012a6d:	75 61                	jne    c0012ad0 <ACPI::detectPCI()+0x22c>
c0012a6f:	90                   	nop
c0012a70:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012a77:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012a7c:	89 c2                	mov    edx,eax
c0012a7e:	ec                   	in     al,dx
c0012a7f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012a83:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012a87:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012a8b:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012a90:	74 0a                	je     c0012a9c <ACPI::detectPCI()+0x1f8>
c0012a92:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012a97:	74 03                	je     c0012a9c <ACPI::detectPCI()+0x1f8>
c0012a99:	eb d5                	jmp    c0012a70 <ACPI::detectPCI()+0x1cc>
c0012a9b:	90                   	nop
c0012a9c:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012aa3:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012aa8:	89 c2                	mov    edx,eax
c0012aaa:	ec                   	in     al,dx
c0012aab:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012aaf:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012ab3:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012ab7:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012abc:	74 de                	je     c0012a9c <ACPI::detectPCI()+0x1f8>
c0012abe:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012ac3:	75 07                	jne    c0012acc <ACPI::detectPCI()+0x228>
c0012ac5:	eb d5                	jmp    c0012a9c <ACPI::detectPCI()+0x1f8>
c0012ac7:	90                   	nop
c0012ac8:	90                   	nop
c0012ac9:	eb 05                	jmp    c0012ad0 <ACPI::detectPCI()+0x22c>
c0012acb:	90                   	nop
c0012acc:	90                   	nop
c0012acd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad0:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012ad8:	83 ec 0c             	sub    esp,0xc
c0012adb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012adf:	e8 03 73 ff ff       	call   c0009de7 <malloc>
c0012ae4:	83 c4 10             	add    esp,0x10
c0012ae7:	89 c3                	mov    ebx,eax
c0012ae9:	83 ec 0c             	sub    esp,0xc
c0012aec:	53                   	push   ebx
c0012aed:	e8 f0 b0 00 00       	call   c001dbe2 <PCI::PCI()>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012af9:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012afe:	25 00 08 00 00       	and    eax,0x800
c0012b03:	74 7b                	je     c0012b80 <ACPI::detectPCI()+0x2dc>
c0012b05:	83 ec 0c             	sub    esp,0xc
c0012b08:	68 bf 5f 02 c0       	push   0xc0025fbf
c0012b0d:	e8 2f 73 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012b12:	83 c4 10             	add    esp,0x10
c0012b15:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012b1a:	25 80 00 00 00       	and    eax,0x80
c0012b1f:	75 5f                	jne    c0012b80 <ACPI::detectPCI()+0x2dc>
c0012b21:	8d 76 00             	lea    esi,[esi+0x0]
c0012b24:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012b2b:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012b30:	89 c2                	mov    edx,eax
c0012b32:	ec                   	in     al,dx
c0012b33:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012b37:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012b3b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012b3f:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012b44:	74 0a                	je     c0012b50 <ACPI::detectPCI()+0x2ac>
c0012b46:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012b4b:	74 03                	je     c0012b50 <ACPI::detectPCI()+0x2ac>
c0012b4d:	eb d5                	jmp    c0012b24 <ACPI::detectPCI()+0x280>
c0012b4f:	90                   	nop
c0012b50:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012b57:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012b5c:	89 c2                	mov    edx,eax
c0012b5e:	ec                   	in     al,dx
c0012b5f:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012b63:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012b67:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b6b:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012b70:	74 de                	je     c0012b50 <ACPI::detectPCI()+0x2ac>
c0012b72:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012b77:	75 03                	jne    c0012b7c <ACPI::detectPCI()+0x2d8>
c0012b79:	eb d5                	jmp    c0012b50 <ACPI::detectPCI()+0x2ac>
c0012b7b:	90                   	nop
c0012b7c:	90                   	nop
c0012b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b80:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012b84:	83 ec 08             	sub    esp,0x8
c0012b87:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012b8b:	50                   	push   eax
c0012b8c:	e8 dd ba ff ff       	call   c000e66e <Device::addChild(Device*)>
c0012b91:	83 c4 10             	add    esp,0x10
c0012b94:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012b99:	25 00 08 00 00       	and    eax,0x800
c0012b9e:	74 78                	je     c0012c18 <ACPI::detectPCI()+0x374>
c0012ba0:	83 ec 0c             	sub    esp,0xc
c0012ba3:	68 c5 5f 02 c0       	push   0xc0025fc5
c0012ba8:	e8 94 72 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012bb5:	25 80 00 00 00       	and    eax,0x80
c0012bba:	75 5c                	jne    c0012c18 <ACPI::detectPCI()+0x374>
c0012bbc:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012bc3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012bc8:	89 c2                	mov    edx,eax
c0012bca:	ec                   	in     al,dx
c0012bcb:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012bcf:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012bd3:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012bd7:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012bdc:	74 0a                	je     c0012be8 <ACPI::detectPCI()+0x344>
c0012bde:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012be3:	74 03                	je     c0012be8 <ACPI::detectPCI()+0x344>
c0012be5:	eb d5                	jmp    c0012bbc <ACPI::detectPCI()+0x318>
c0012be7:	90                   	nop
c0012be8:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012bef:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012bf4:	89 c2                	mov    edx,eax
c0012bf6:	ec                   	in     al,dx
c0012bf7:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012bfb:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012bff:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012c03:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012c08:	74 de                	je     c0012be8 <ACPI::detectPCI()+0x344>
c0012c0a:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012c0f:	75 03                	jne    c0012c14 <ACPI::detectPCI()+0x370>
c0012c11:	eb d5                	jmp    c0012be8 <ACPI::detectPCI()+0x344>
c0012c13:	90                   	nop
c0012c14:	90                   	nop
c0012c15:	8d 76 00             	lea    esi,[esi+0x0]
c0012c18:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c1e:	83 c0 08             	add    eax,0x8
c0012c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c23:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012c28:	74 0a                	je     c0012c34 <ACPI::detectPCI()+0x390>
c0012c2a:	ba 01 00 00 00       	mov    edx,0x1
c0012c2f:	eb 0b                	jmp    c0012c3c <ACPI::detectPCI()+0x398>
c0012c31:	8d 76 00             	lea    esi,[esi+0x0]
c0012c34:	ba 02 00 00 00       	mov    edx,0x2
c0012c39:	8d 76 00             	lea    esi,[esi+0x0]
c0012c3c:	6a 00                	push   0x0
c0012c3e:	6a 00                	push   0x0
c0012c40:	52                   	push   edx
c0012c41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012c45:	ff d0                	call   eax
c0012c47:	83 c4 10             	add    esp,0x10
c0012c4a:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012c4f:	25 00 08 00 00       	and    eax,0x800
c0012c54:	0f 84 26 01 00 00    	je     c0012d80 <ACPI::detectPCI()+0x4dc>
c0012c5a:	83 ec 0c             	sub    esp,0xc
c0012c5d:	68 cb 5f 02 c0       	push   0xc0025fcb
c0012c62:	e8 da 71 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012c67:	83 c4 10             	add    esp,0x10
c0012c6a:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0012c6f:	25 80 00 00 00       	and    eax,0x80
c0012c74:	0f 85 06 01 00 00    	jne    c0012d80 <ACPI::detectPCI()+0x4dc>
c0012c7a:	66 90                	xchg   ax,ax
c0012c7c:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012c83:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c88:	89 c2                	mov    edx,eax
c0012c8a:	ec                   	in     al,dx
c0012c8b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012c8f:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012c93:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012c97:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012c9c:	74 0a                	je     c0012ca8 <ACPI::detectPCI()+0x404>
c0012c9e:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012ca3:	74 03                	je     c0012ca8 <ACPI::detectPCI()+0x404>
c0012ca5:	eb d5                	jmp    c0012c7c <ACPI::detectPCI()+0x3d8>
c0012ca7:	90                   	nop
c0012ca8:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012caf:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012cb4:	89 c2                	mov    edx,eax
c0012cb6:	ec                   	in     al,dx
c0012cb7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012cbb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012cbf:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012cc3:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012cc8:	74 de                	je     c0012ca8 <ACPI::detectPCI()+0x404>
c0012cca:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012ccf:	0f 85 a7 00 00 00    	jne    c0012d7c <ACPI::detectPCI()+0x4d8>
c0012cd5:	eb d1                	jmp    c0012ca8 <ACPI::detectPCI()+0x404>
c0012cd7:	90                   	nop
c0012cd8:	83 ec 0c             	sub    esp,0xc
c0012cdb:	68 d1 5f 02 c0       	push   0xc0025fd1
c0012ce0:	e8 16 a4 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0012ce5:	83 c4 10             	add    esp,0x10
c0012ce8:	83 ec 0c             	sub    esp,0xc
c0012ceb:	68 dc 5f 02 c0       	push   0xc0025fdc
c0012cf0:	e8 4c 71 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012cf5:	83 c4 10             	add    esp,0x10
c0012cf8:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012d00:	83 ec 0c             	sub    esp,0xc
c0012d03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d07:	e8 db 70 ff ff       	call   c0009de7 <malloc>
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	89 c3                	mov    ebx,eax
c0012d11:	83 ec 0c             	sub    esp,0xc
c0012d14:	53                   	push   ebx
c0012d15:	e8 32 c0 00 00       	call   c001ed4c <IDE::IDE()>
c0012d1a:	83 c4 10             	add    esp,0x10
c0012d1d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012d21:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012d25:	83 ec 08             	sub    esp,0x8
c0012d28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012d2c:	50                   	push   eax
c0012d2d:	e8 3c b9 ff ff       	call   c000e66e <Device::addChild(Device*)>
c0012d32:	83 c4 10             	add    esp,0x10
c0012d35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d39:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012d43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d47:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012d50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d54:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012d5d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d63:	83 c0 08             	add    eax,0x8
c0012d66:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d68:	6a 00                	push   0x0
c0012d6a:	6a 00                	push   0x0
c0012d6c:	6a 00                	push   0x0
c0012d6e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012d72:	ff d0                	call   eax
c0012d74:	83 c4 10             	add    esp,0x10
c0012d77:	eb 07                	jmp    c0012d80 <ACPI::detectPCI()+0x4dc>
c0012d79:	8d 76 00             	lea    esi,[esi+0x0]
c0012d7c:	90                   	nop
c0012d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d80:	90                   	nop
c0012d81:	83 c4 68             	add    esp,0x68
c0012d84:	5b                   	pop    ebx
c0012d85:	c3                   	ret    
c0012d86:	66 90                	xchg   ax,ax

c0012d88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012d88:	83 ec 1c             	sub    esp,0x1c
c0012d8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d8f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012d92:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012d96:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0012d9b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012da0:	83 ec 08             	sub    esp,0x8
c0012da3:	52                   	push   edx
c0012da4:	50                   	push   eax
c0012da5:	e8 88 65 ff ff       	call   c0009332 <Computer::readCMOS(unsigned char)>
c0012daa:	83 c4 10             	add    esp,0x10
c0012dad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012db1:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0012db6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012dbb:	83 ec 04             	sub    esp,0x4
c0012dbe:	6a 01                	push   0x1
c0012dc0:	52                   	push   edx
c0012dc1:	50                   	push   eax
c0012dc2:	e8 57 67 ff ff       	call   c000951e <Computer::writeCMOS(unsigned char, unsigned char)>
c0012dc7:	83 c4 10             	add    esp,0x10
c0012dca:	90                   	nop
c0012dcb:	83 c4 1c             	add    esp,0x1c
c0012dce:	c3                   	ret    
c0012dcf:	90                   	nop

c0012dd0 <ACPI::sleep()>:
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	83 ec 0c             	sub    esp,0xc
c0012dd6:	68 f1 5f 02 c0       	push   0xc0025ff1
c0012ddb:	e8 1b a3 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0012de0:	83 c4 10             	add    esp,0x10
c0012de3:	a1 40 92 02 c0       	mov    eax,ds:0xc0029240
c0012de8:	85 c0                	test   eax,eax
c0012dea:	74 18                	je     c0012e04 <ACPI::sleep()+0x34>
c0012dec:	83 ec 0c             	sub    esp,0xc
c0012def:	68 fe 5f 02 c0       	push   0xc0025ffe
c0012df4:	e8 02 a3 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	a1 40 92 02 c0       	mov    eax,ds:0xc0029240
c0012e01:	ff d0                	call   eax
c0012e03:	90                   	nop
c0012e04:	90                   	nop
c0012e05:	83 c4 0c             	add    esp,0xc
c0012e08:	c3                   	ret    
c0012e09:	90                   	nop
c0012e0a:	66 90                	xchg   ax,ax

c0012e0c <ACPI::open(int, int, void*)>:
c0012e0c:	57                   	push   edi
c0012e0d:	56                   	push   esi
c0012e0e:	53                   	push   ebx
c0012e0f:	81 ec 70 01 00 00    	sub    esp,0x170
c0012e15:	83 ec 0c             	sub    esp,0xc
c0012e18:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012e1f:	e8 80 fa ff ff       	call   c00128a4 <ACPI::detectPCI()>
c0012e24:	83 c4 10             	add    esp,0x10
c0012e27:	83 ec 0c             	sub    esp,0xc
c0012e2a:	68 5c 5e 02 c0       	push   0xc0025e5c
c0012e2f:	e8 0d 70 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	83 ec 0c             	sub    esp,0xc
c0012e3a:	68 18 60 02 c0       	push   0xc0026018
c0012e3f:	e8 9b 4c 00 00       	call   c0017adf <Thr::loadKernelSymbolTable(char const*)>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012e4f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012e64:	e8 7e 6f ff ff       	call   c0009de7 <malloc>
c0012e69:	83 c4 10             	add    esp,0x10
c0012e6c:	89 c3                	mov    ebx,eax
c0012e6e:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c0012e73:	83 ec 04             	sub    esp,0x4
c0012e76:	50                   	push   eax
c0012e77:	68 36 60 02 c0       	push   0xc0026036
c0012e7c:	53                   	push   ebx
c0012e7d:	e8 e4 a7 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0012e82:	83 c4 10             	add    esp,0x10
c0012e85:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012e8c:	83 ec 08             	sub    esp,0x8
c0012e8f:	6a 01                	push   0x1
c0012e91:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e98:	e8 a3 a8 ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0012e9d:	83 c4 10             	add    esp,0x10
c0012ea0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012ea7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012eaf:	75 17                	jne    c0012ec8 <ACPI::open(int, int, void*)+0xbc>
c0012eb1:	83 ec 0c             	sub    esp,0xc
c0012eb4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012ebb:	e8 de a8 ff ff       	call   c000d79e <File::close()>
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	eb 0b                	jmp    c0012ed0 <ACPI::open(int, int, void*)+0xc4>
c0012ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ec8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012ed0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012ed8:	74 1e                	je     c0012ef8 <ACPI::open(int, int, void*)+0xec>
c0012eda:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012ee1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ee3:	83 c0 08             	add    eax,0x8
c0012ee6:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ee8:	83 ec 0c             	sub    esp,0xc
c0012eeb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012ef2:	ff d0                	call   eax
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	90                   	nop
c0012ef8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012eff:	83 f0 01             	xor    eax,0x1
c0012f02:	84 c0                	test   al,al
c0012f04:	74 42                	je     c0012f48 <ACPI::open(int, int, void*)+0x13c>
c0012f06:	83 ec 0c             	sub    esp,0xc
c0012f09:	68 54 60 02 c0       	push   0xc0026054
c0012f0e:	e8 2e 6f ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	83 ec 04             	sub    esp,0x4
c0012f19:	6a 0c                	push   0xc
c0012f1b:	68 6f 60 02 c0       	push   0xc002606f
c0012f20:	68 80 60 02 c0       	push   0xc0026080
c0012f25:	e8 1f 32 00 00       	call   c0016149 <Reg::readIntWithDefault(char*, char*, int)>
c0012f2a:	83 c4 10             	add    esp,0x10
c0012f2d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012f34:	83 ec 0c             	sub    esp,0xc
c0012f37:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012f3e:	e8 68 90 ff ff       	call   c000bfab <Virt::setupPageSwapping(int)>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	66 90                	xchg   ax,ax
c0012f48:	83 ec 0c             	sub    esp,0xc
c0012f4b:	68 c6 45 02 c0       	push   0xc00245c6
c0012f50:	e8 ec 6e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0012f5e:	83 ec 08             	sub    esp,0x8
c0012f61:	6a 01                	push   0x1
c0012f63:	68 87 60 02 c0       	push   0xc0026087
c0012f68:	e8 e9 55 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	83 ec 08             	sub    esp,0x8
c0012f73:	53                   	push   ebx
c0012f74:	50                   	push   eax
c0012f75:	e8 0d 58 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012f84:	83 ec 08             	sub    esp,0x8
c0012f87:	6a 12                	push   0x12
c0012f89:	50                   	push   eax
c0012f8a:	e8 63 ba ff ff       	call   c000e9f2 <getDevicesOfType(DeviceType)>
c0012f8f:	83 c4 0c             	add    esp,0xc
c0012f92:	66 90                	xchg   ax,ax
c0012f94:	83 ec 0c             	sub    esp,0xc
c0012f97:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f9e:	50                   	push   eax
c0012f9f:	e8 08 08 01 00       	call   c00237ac <LinkedList<Device>::isEmpty()>
c0012fa4:	83 c4 10             	add    esp,0x10
c0012fa7:	83 f0 01             	xor    eax,0x1
c0012faa:	84 c0                	test   al,al
c0012fac:	0f 84 46 01 00 00    	je     c00130f8 <ACPI::open(int, int, void*)+0x2ec>
c0012fb2:	83 ec 0c             	sub    esp,0xc
c0012fb5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012fbc:	50                   	push   eax
c0012fbd:	e8 06 08 01 00       	call   c00237c8 <LinkedList<Device>::getFirstElement()>
c0012fc2:	83 c4 10             	add    esp,0x10
c0012fc5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012fd6:	50                   	push   eax
c0012fd7:	e8 f4 07 01 00       	call   c00237d0 <LinkedList<Device>::removeFirst()>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012fe6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012fed:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012ff4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ff8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012ffe:	ba 09 00 00 00       	mov    edx,0x9
c0013003:	fc                   	cld    
c0013004:	89 c7                	mov    edi,eax
c0013006:	89 de                	mov    esi,ebx
c0013008:	89 d1                	mov    ecx,edx
c001300a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001300c:	83 ec 08             	sub    esp,0x8
c001300f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0013013:	50                   	push   eax
c0013014:	83 ec 24             	sub    esp,0x24
c0013017:	89 e0                	mov    eax,esp
c0013019:	89 c3                	mov    ebx,eax
c001301b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001301f:	ba 09 00 00 00       	mov    edx,0x9
c0013024:	89 df                	mov    edi,ebx
c0013026:	89 c6                	mov    esi,eax
c0013028:	89 d1                	mov    ecx,edx
c001302a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001302c:	e8 8f b0 00 00       	call   c001e0c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0013031:	83 c4 30             	add    esp,0x30
c0013034:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001303b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0013043:	0f 84 4b ff ff ff    	je     c0012f94 <ACPI::open(int, int, void*)+0x188>
c0013049:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0013054:	83 ec 0c             	sub    esp,0xc
c0013057:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001305e:	e8 84 6d ff ff       	call   c0009de7 <malloc>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	89 c3                	mov    ebx,eax
c0013068:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c001306d:	83 ec 04             	sub    esp,0x4
c0013070:	50                   	push   eax
c0013071:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0013078:	53                   	push   ebx
c0013079:	e8 e8 a5 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0013088:	83 ec 0c             	sub    esp,0xc
c001308b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0013092:	e8 17 a9 ff ff       	call   c000d9ae <File::exists()>
c0013097:	83 c4 10             	add    esp,0x10
c001309a:	84 c0                	test   al,al
c001309c:	74 2a                	je     c00130c8 <ACPI::open(int, int, void*)+0x2bc>
c001309e:	83 ec 08             	sub    esp,0x8
c00130a1:	6a 01                	push   0x1
c00130a3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00130aa:	e8 a7 54 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	83 ec 08             	sub    esp,0x8
c00130b5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00130bc:	50                   	push   eax
c00130bd:	e8 c5 56 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	8d 76 00             	lea    esi,[esi+0x0]
c00130c8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00130d0:	0f 84 be fe ff ff    	je     c0012f94 <ACPI::open(int, int, void*)+0x188>
c00130d6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00130dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00130df:	83 c0 08             	add    eax,0x8
c00130e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00130e4:	83 ec 0c             	sub    esp,0xc
c00130e7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00130ee:	ff d0                	call   eax
c00130f0:	83 c4 10             	add    esp,0x10
c00130f3:	e9 9c fe ff ff       	jmp    c0012f94 <ACPI::open(int, int, void*)+0x188>
c00130f8:	83 ec 0c             	sub    esp,0xc
c00130fb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0013102:	50                   	push   eax
c0013103:	e8 a0 06 01 00       	call   c00237a8 <LinkedList<Device>::~LinkedList()>
c0013108:	83 c4 10             	add    esp,0x10
c001310b:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0013111:	83 ec 08             	sub    esp,0x8
c0013114:	6a 01                	push   0x1
c0013116:	68 a2 60 02 c0       	push   0xc00260a2
c001311b:	e8 36 54 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	83 ec 08             	sub    esp,0x8
c0013126:	53                   	push   ebx
c0013127:	50                   	push   eax
c0013128:	e8 5a 56 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	8b 1d 08 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c08
c0013136:	83 ec 08             	sub    esp,0x8
c0013139:	6a 01                	push   0x1
c001313b:	68 bf 60 02 c0       	push   0xc00260bf
c0013140:	e8 11 54 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	83 ec 08             	sub    esp,0x8
c001314b:	53                   	push   ebx
c001314c:	50                   	push   eax
c001314d:	e8 35 56 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001315a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013160:	83 e0 04             	and    eax,0x4
c0013163:	84 c0                	test   al,al
c0013165:	0f 84 15 01 00 00    	je     c0013280 <ACPI::open(int, int, void*)+0x474>
c001316b:	83 ec 0c             	sub    esp,0xc
c001316e:	68 dc 60 02 c0       	push   0xc00260dc
c0013173:	e8 c9 6c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0013178:	83 c4 10             	add    esp,0x10
c001317b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0013186:	83 ec 0c             	sub    esp,0xc
c0013189:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0013190:	e8 52 6c ff ff       	call   c0009de7 <malloc>
c0013195:	83 c4 10             	add    esp,0x10
c0013198:	89 c3                	mov    ebx,eax
c001319a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c001319f:	83 ec 04             	sub    esp,0x4
c00131a2:	50                   	push   eax
c00131a3:	68 f9 60 02 c0       	push   0xc00260f9
c00131a8:	53                   	push   ebx
c00131a9:	e8 b8 a4 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c00131ae:	83 c4 10             	add    esp,0x10
c00131b1:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00131b8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00131c0:	74 1a                	je     c00131dc <ACPI::open(int, int, void*)+0x3d0>
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00131cc:	e8 dd a7 ff ff       	call   c000d9ae <File::exists()>
c00131d1:	83 c4 10             	add    esp,0x10
c00131d4:	84 c0                	test   al,al
c00131d6:	74 04                	je     c00131dc <ACPI::open(int, int, void*)+0x3d0>
c00131d8:	b0 01                	mov    al,0x1
c00131da:	eb 04                	jmp    c00131e0 <ACPI::open(int, int, void*)+0x3d4>
c00131dc:	b0 00                	mov    al,0x0
c00131de:	66 90                	xchg   ax,ax
c00131e0:	84 c0                	test   al,al
c00131e2:	74 28                	je     c001320c <ACPI::open(int, int, void*)+0x400>
c00131e4:	83 ec 08             	sub    esp,0x8
c00131e7:	6a 01                	push   0x1
c00131e9:	68 f9 60 02 c0       	push   0xc00260f9
c00131ee:	e8 63 53 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c00131f3:	83 c4 10             	add    esp,0x10
c00131f6:	83 ec 08             	sub    esp,0x8
c00131f9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0013200:	50                   	push   eax
c0013201:	e8 81 55 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c0013206:	83 c4 10             	add    esp,0x10
c0013209:	8d 76 00             	lea    esi,[esi+0x0]
c001320c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013214:	74 2a                	je     c0013240 <ACPI::open(int, int, void*)+0x434>
c0013216:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001321e:	74 20                	je     c0013240 <ACPI::open(int, int, void*)+0x434>
c0013220:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0013227:	8b 00                	mov    eax,DWORD PTR [eax]
c0013229:	83 c0 08             	add    eax,0x8
c001322c:	8b 00                	mov    eax,DWORD PTR [eax]
c001322e:	83 ec 0c             	sub    esp,0xc
c0013231:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013238:	ff d0                	call   eax
c001323a:	83 c4 10             	add    esp,0x10
c001323d:	8d 76 00             	lea    esi,[esi+0x0]
c0013240:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0013245:	83 ec 08             	sub    esp,0x8
c0013248:	68 16 61 02 c0       	push   0xc0026116
c001324d:	50                   	push   eax
c001324e:	e8 e1 ee ff ff       	call   c0012134 <findDataTable(unsigned char*, char*)>
c0013253:	83 c4 10             	add    esp,0x10
c0013256:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001325d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0013265:	74 19                	je     c0013280 <ACPI::open(int, int, void*)+0x474>
c0013267:	83 ec 08             	sub    esp,0x8
c001326a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0013271:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0013278:	e8 0b fb ff ff       	call   c0012d88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001327d:	83 c4 10             	add    esp,0x10
c0013280:	b8 00 00 00 00       	mov    eax,0x0
c0013285:	81 c4 70 01 00 00    	add    esp,0x170
c001328b:	5b                   	pop    ebx
c001328c:	5e                   	pop    esi
c001328d:	5f                   	pop    edi
c001328e:	c3                   	ret    
c001328f:	90                   	nop

c0013290 <CPU::close(int, int, void*)>:
c0013290:	31 c0                	xor    eax,eax
c0013292:	c3                   	ret    
c0013293:	90                   	nop

c0013294 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0013294:	55                   	push   ebp
c0013295:	57                   	push   edi
c0013296:	56                   	push   esi
c0013297:	53                   	push   ebx
c0013298:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001329c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132a0:	89 ce                	mov    esi,ecx
c00132a2:	89 d5                	mov    ebp,edx
c00132a4:	80 f9 04             	cmp    cl,0x4
c00132a7:	75 28                	jne    c00132d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00132a9:	8d 42 f9             	lea    eax,[edx-0x7]
c00132ac:	3c 03                	cmp    al,0x3
c00132ae:	0f 86 63 01 00 00    	jbe    c0013417 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00132b4:	80 fa 03             	cmp    dl,0x3
c00132b7:	0f 84 5a 01 00 00    	je     c0013417 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00132bd:	8d 7a f2             	lea    edi,[edx-0xe]
c00132c0:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c00132c5:	89 fb                	mov    ebx,edi
c00132c7:	80 fb 01             	cmp    bl,0x1
c00132ca:	77 4e                	ja     c001331a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00132cc:	e9 52 01 00 00       	jmp    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132d1:	80 f9 05             	cmp    cl,0x5
c00132d4:	75 4d                	jne    c0013323 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00132d6:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c00132db:	80 fa 03             	cmp    dl,0x3
c00132de:	0f 86 3f 01 00 00    	jbe    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132e4:	8d 7a fa             	lea    edi,[edx-0x6]
c00132e7:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c00132ec:	89 fb                	mov    ebx,edi
c00132ee:	80 fb 01             	cmp    bl,0x1
c00132f1:	0f 86 2c 01 00 00    	jbe    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132f7:	b8 00 85 02 c0       	mov    eax,0xc0028500
c00132fc:	80 fa 08             	cmp    dl,0x8
c00132ff:	0f 84 1e 01 00 00    	je     c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013305:	89 d7                	mov    edi,edx
c0013307:	b8 10 85 02 c0       	mov    eax,0xc0028510
c001330c:	83 e7 fb             	and    edi,0xfffffffb
c001330f:	89 fb                	mov    ebx,edi
c0013311:	80 fb 09             	cmp    bl,0x9
c0013314:	0f 84 09 01 00 00    	je     c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001331a:	31 c0                	xor    eax,eax
c001331c:	89 eb                	mov    ebx,ebp
c001331e:	0f b6 fb             	movzx  edi,bl
c0013321:	eb 30                	jmp    c0013353 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0013323:	31 c0                	xor    eax,eax
c0013325:	80 f9 06             	cmp    cl,0x6
c0013328:	75 f2                	jne    c001331c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001332a:	80 fa 0a             	cmp    dl,0xa
c001332d:	77 ed                	ja     c001331c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001332f:	bf de 05 00 00       	mov    edi,0x5de
c0013334:	0f a3 d7             	bt     edi,edx
c0013337:	73 e3                	jae    c001331c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013339:	b8 20 85 02 c0       	mov    eax,0xc0028520
c001333e:	e9 e0 00 00 00       	jmp    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013343:	39 c7                	cmp    edi,eax
c0013345:	0f 84 d3 00 00 00    	je     c001341e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001334b:	40                   	inc    eax
c001334c:	3d d0 00 00 00       	cmp    eax,0xd0
c0013351:	74 09                	je     c001335c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0013353:	89 f3                	mov    ebx,esi
c0013355:	80 fb 0f             	cmp    bl,0xf
c0013358:	75 f1                	jne    c001334b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001335a:	eb e7                	jmp    c0013343 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001335c:	80 f9 10             	cmp    cl,0x10
c001335f:	75 14                	jne    c0013375 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0013361:	8d 42 fc             	lea    eax,[edx-0x4]
c0013364:	83 e0 fb             	and    eax,0xfffffffb
c0013367:	3c 02                	cmp    al,0x2
c0013369:	76 34                	jbe    c001339f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001336b:	b8 51 64 02 c0       	mov    eax,0xc0026451
c0013370:	80 fa 02             	cmp    dl,0x2
c0013373:	eb 24                	jmp    c0013399 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0013375:	80 f9 11             	cmp    cl,0x11
c0013378:	75 13                	jne    c001338d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001337a:	b8 51 64 02 c0       	mov    eax,0xc0026451
c001337f:	80 fa 03             	cmp    dl,0x3
c0013382:	0f 85 9b 00 00 00    	jne    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013388:	e9 91 00 00 00       	jmp    c001341e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001338d:	80 f9 12             	cmp    cl,0x12
c0013390:	75 14                	jne    c00133a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0013392:	b8 51 64 02 c0       	mov    eax,0xc0026451
c0013397:	fe ca                	dec    dl
c0013399:	0f 85 84 00 00 00    	jne    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001339f:	b8 40 85 02 c0       	mov    eax,0xc0028540
c00133a4:	eb 7d                	jmp    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133a6:	80 f9 14             	cmp    cl,0x14
c00133a9:	75 12                	jne    c00133bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00133ab:	4a                   	dec    edx
c00133ac:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00133b1:	80 fa 01             	cmp    dl,0x1
c00133b4:	77 6d                	ja     c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133b6:	b8 50 85 02 c0       	mov    eax,0xc0028550
c00133bb:	eb 66                	jmp    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133bd:	80 f9 15             	cmp    cl,0x15
c00133c0:	75 31                	jne    c00133f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00133c2:	b8 60 85 02 c0       	mov    eax,0xc0028560
c00133c7:	80 fa 01             	cmp    dl,0x1
c00133ca:	74 57                	je     c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133cc:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00133d1:	80 fa 13             	cmp    dl,0x13
c00133d4:	76 0c                	jbe    c00133e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00133d6:	80 fa 30             	cmp    dl,0x30
c00133d9:	75 48                	jne    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133db:	b8 80 85 02 c0       	mov    eax,0xc0028580
c00133e0:	eb 41                	jmp    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133e2:	b9 04 00 09 00       	mov    ecx,0x90004
c00133e7:	0f a3 d1             	bt     ecx,edx
c00133ea:	73 37                	jae    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133ec:	b8 70 85 02 c0       	mov    eax,0xc0028570
c00133f1:	eb 30                	jmp    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133f3:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00133f8:	80 f9 16             	cmp    cl,0x16
c00133fb:	75 26                	jne    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133fd:	b8 90 85 02 c0       	mov    eax,0xc0028590
c0013402:	84 d2                	test   dl,dl
c0013404:	74 1d                	je     c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013406:	b8 51 64 02 c0       	mov    eax,0xc0026451
c001340b:	80 fa 30             	cmp    dl,0x30
c001340e:	75 13                	jne    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013410:	b8 a0 85 02 c0       	mov    eax,0xc00285a0
c0013415:	eb 0c                	jmp    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013417:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c001341c:	eb 05                	jmp    c0013423 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001341e:	b8 30 85 02 c0       	mov    eax,0xc0028530
c0013423:	5b                   	pop    ebx
c0013424:	5e                   	pop    esi
c0013425:	5f                   	pop    edi
c0013426:	5d                   	pop    ebp
c0013427:	c3                   	ret    

c0013428 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0013428:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001342c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013430:	80 f9 04             	cmp    cl,0x4
c0013433:	75 6b                	jne    c00134a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0013435:	b8 20 83 02 c0       	mov    eax,0xc0028320
c001343a:	80 fa 01             	cmp    dl,0x1
c001343d:	0f 86 92 02 00 00    	jbe    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013443:	b8 30 83 02 c0       	mov    eax,0xc0028330
c0013448:	80 fa 02             	cmp    dl,0x2
c001344b:	0f 84 84 02 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013451:	b8 40 83 02 c0       	mov    eax,0xc0028340
c0013456:	80 fa 03             	cmp    dl,0x3
c0013459:	0f 84 76 02 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001345f:	b8 50 83 02 c0       	mov    eax,0xc0028350
c0013464:	80 fa 04             	cmp    dl,0x4
c0013467:	0f 84 68 02 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001346d:	b8 60 83 02 c0       	mov    eax,0xc0028360
c0013472:	80 fa 05             	cmp    dl,0x5
c0013475:	0f 84 5a 02 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001347b:	b8 40 83 02 c0       	mov    eax,0xc0028340
c0013480:	80 fa 07             	cmp    dl,0x7
c0013483:	0f 84 4c 02 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013489:	83 ea 08             	sub    edx,0x8
c001348c:	b8 51 64 02 c0       	mov    eax,0xc0026451
c0013491:	80 fa 01             	cmp    dl,0x1
c0013494:	0f 87 3b 02 00 00    	ja     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001349a:	b8 70 83 02 c0       	mov    eax,0xc0028370
c001349f:	c3                   	ret    
c00134a0:	80 f9 05             	cmp    cl,0x5
c00134a3:	75 45                	jne    c00134ea <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00134a5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00134a8:	b8 80 83 02 c0       	mov    eax,0xc0028380
c00134ad:	80 f9 02             	cmp    cl,0x2
c00134b0:	0f 86 1f 02 00 00    	jbe    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b6:	80 fa 04             	cmp    dl,0x4
c00134b9:	0f 84 f3 01 00 00    	je     c00136b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00134bf:	80 fa 07             	cmp    dl,0x7
c00134c2:	0f 84 0d 02 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134c8:	b8 90 83 02 c0       	mov    eax,0xc0028390
c00134cd:	80 fa 08             	cmp    dl,0x8
c00134d0:	0f 84 ff 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134d6:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00134db:	80 fa 09             	cmp    dl,0x9
c00134de:	0f 85 f1 01 00 00    	jne    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134e4:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c00134e9:	c3                   	ret    
c00134ea:	80 f9 06             	cmp    cl,0x6
c00134ed:	0f 85 85 01 00 00    	jne    c0013678 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00134f3:	b8 b0 83 02 c0       	mov    eax,0xc00283b0
c00134f8:	80 fa 01             	cmp    dl,0x1
c00134fb:	0f 84 d4 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013501:	8d 42 fb             	lea    eax,[edx-0x5]
c0013504:	3c 01                	cmp    al,0x1
c0013506:	0f 86 ac 01 00 00    	jbe    c00136b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001350c:	80 fa 03             	cmp    dl,0x3
c001350f:	0f 84 a3 01 00 00    	je     c00136b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013515:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013518:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c001351d:	80 f9 01             	cmp    cl,0x1
c0013520:	0f 86 af 01 00 00    	jbe    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013526:	80 fa 09             	cmp    dl,0x9
c0013529:	0f 84 8f 01 00 00    	je     c00136be <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001352f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013532:	80 f9 01             	cmp    cl,0x1
c0013535:	0f 86 9a 01 00 00    	jbe    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001353b:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c0013540:	80 fa 0d             	cmp    dl,0xd
c0013543:	0f 84 8c 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013549:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c001354e:	80 fa 0e             	cmp    dl,0xe
c0013551:	0f 84 7e 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013557:	b8 00 84 02 c0       	mov    eax,0xc0028400
c001355c:	80 fa 0f             	cmp    dl,0xf
c001355f:	0f 84 70 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013565:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c001356a:	80 fa 15             	cmp    dl,0x15
c001356d:	0f 84 62 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013573:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013576:	b8 00 84 02 c0       	mov    eax,0xc0028400
c001357b:	80 f9 01             	cmp    cl,0x1
c001357e:	0f 86 51 01 00 00    	jbe    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013584:	80 fa 1a             	cmp    dl,0x1a
c0013587:	0f 84 37 01 00 00    	je     c00136c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001358d:	80 fa 1c             	cmp    dl,0x1c
c0013590:	0f 84 34 01 00 00    	je     c00136ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0013596:	80 fa 1d             	cmp    dl,0x1d
c0013599:	0f 84 36 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001359f:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00135a4:	80 fa 25             	cmp    dl,0x25
c00135a7:	0f 84 28 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135ad:	8d 4a da             	lea    ecx,[edx-0x26]
c00135b0:	b8 20 84 02 c0       	mov    eax,0xc0028420
c00135b5:	80 f9 01             	cmp    cl,0x1
c00135b8:	0f 86 17 01 00 00    	jbe    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135be:	b8 40 84 02 c0       	mov    eax,0xc0028440
c00135c3:	80 fa 2a             	cmp    dl,0x2a
c00135c6:	0f 84 09 01 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135cc:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00135d1:	80 fa 2c             	cmp    dl,0x2c
c00135d4:	0f 84 fb 00 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135da:	b8 40 84 02 c0       	mov    eax,0xc0028440
c00135df:	80 fa 2d             	cmp    dl,0x2d
c00135e2:	0f 84 ed 00 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135e8:	b8 10 84 02 c0       	mov    eax,0xc0028410
c00135ed:	80 fa 2e             	cmp    dl,0x2e
c00135f0:	0f 84 df 00 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135f6:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00135fb:	80 fa 2f             	cmp    dl,0x2f
c00135fe:	0f 84 d1 00 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013604:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013607:	b8 20 84 02 c0       	mov    eax,0xc0028420
c001360c:	80 f9 01             	cmp    cl,0x1
c001360f:	0f 86 c0 00 00 00    	jbe    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013615:	b8 50 84 02 c0       	mov    eax,0xc0028450
c001361a:	80 fa 37             	cmp    dl,0x37
c001361d:	0f 84 b2 00 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013623:	b8 60 84 02 c0       	mov    eax,0xc0028460
c0013628:	80 fa 3a             	cmp    dl,0x3a
c001362b:	0f 84 a4 00 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013631:	b8 70 84 02 c0       	mov    eax,0xc0028470
c0013636:	80 fa 3c             	cmp    dl,0x3c
c0013639:	0f 84 96 00 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001363f:	b8 80 84 02 c0       	mov    eax,0xc0028480
c0013644:	80 fa 3d             	cmp    dl,0x3d
c0013647:	0f 84 88 00 00 00    	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001364d:	b8 60 84 02 c0       	mov    eax,0xc0028460
c0013652:	80 fa 3e             	cmp    dl,0x3e
c0013655:	74 7e                	je     c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013657:	8d 42 bb             	lea    eax,[edx-0x45]
c001365a:	3c 01                	cmp    al,0x1
c001365c:	76 72                	jbe    c00136d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001365e:	80 fa 3f             	cmp    dl,0x3f
c0013661:	74 6d                	je     c00136d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013663:	80 fa 4a             	cmp    dl,0x4a
c0013666:	74 0a                	je     c0013672 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013668:	b8 51 64 02 c0       	mov    eax,0xc0026451
c001366d:	80 fa 4d             	cmp    dl,0x4d
c0013670:	75 63                	jne    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013672:	b8 50 84 02 c0       	mov    eax,0xc0028450
c0013677:	c3                   	ret    
c0013678:	b8 51 64 02 c0       	mov    eax,0xc0026451
c001367d:	80 f9 0b             	cmp    cl,0xb
c0013680:	75 0a                	jne    c001368c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0013682:	fe ca                	dec    dl
c0013684:	75 4f                	jne    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013686:	b8 90 84 02 c0       	mov    eax,0xc0028490
c001368b:	c3                   	ret    
c001368c:	80 f9 0f             	cmp    cl,0xf
c001368f:	75 44                	jne    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013691:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c0013696:	80 fa 02             	cmp    dl,0x2
c0013699:	76 3a                	jbe    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001369b:	8d 42 fd             	lea    eax,[edx-0x3]
c001369e:	3c 01                	cmp    al,0x1
c00136a0:	76 0a                	jbe    c00136ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00136a2:	b8 51 64 02 c0       	mov    eax,0xc0026451
c00136a7:	80 fa 06             	cmp    dl,0x6
c00136aa:	75 29                	jne    c00136d5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00136ac:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c00136b1:	c3                   	ret    
c00136b2:	b8 90 83 02 c0       	mov    eax,0xc0028390
c00136b7:	c3                   	ret    
c00136b8:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c00136bd:	c3                   	ret    
c00136be:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c00136c3:	c3                   	ret    
c00136c4:	b8 10 84 02 c0       	mov    eax,0xc0028410
c00136c9:	c3                   	ret    
c00136ca:	b8 20 84 02 c0       	mov    eax,0xc0028420
c00136cf:	c3                   	ret    
c00136d0:	b8 70 84 02 c0       	mov    eax,0xc0028470
c00136d5:	c3                   	ret    

c00136d6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00136d6:	60                   	pusha  
c00136d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00136db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136e3:	9c                   	pushf  
c00136e4:	fa                   	cli    
c00136e5:	0f 09                	wbinvd 
c00136e7:	0f 30                	wrmsr  
c00136e9:	9d                   	popf   
c00136ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ee:	89 02                	mov    DWORD PTR [edx],eax
c00136f0:	61                   	popa   
c00136f1:	c3                   	ret    

c00136f2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00136f2:	60                   	pusha  
c00136f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00136f7:	9c                   	pushf  
c00136f8:	fa                   	cli    
c00136f9:	0f 09                	wbinvd 
c00136fb:	31 c0                	xor    eax,eax
c00136fd:	31 d2                	xor    edx,edx
c00136ff:	0f 32                	rdmsr  
c0013701:	9d                   	popf   
c0013702:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013706:	89 02                	mov    DWORD PTR [edx],eax
c0013708:	61                   	popa   
c0013709:	c3                   	ret    

c001370a <CPU::AMD_K6_writeback(int, int, int)>:
c001370a:	56                   	push   esi
c001370b:	53                   	push   ebx
c001370c:	83 ec 10             	sub    esp,0x10
c001370f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013713:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013718:	75 5d                	jne    c0013777 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001371a:	83 f8 08             	cmp    eax,0x8
c001371d:	75 09                	jne    c0013728 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001371f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013724:	7e 13                	jle    c0013739 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013726:	eb 30                	jmp    c0013758 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013728:	83 f8 06             	cmp    eax,0x6
c001372b:	7c 4a                	jl     c0013777 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001372d:	83 f8 07             	cmp    eax,0x7
c0013730:	7e 07                	jle    c0013739 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013732:	83 f8 09             	cmp    eax,0x9
c0013735:	74 21                	je     c0013758 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013737:	eb 3e                	jmp    c0013777 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013739:	89 e6                	mov    esi,esp
c001373b:	8b 1d 2c 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c2c
c0013741:	56                   	push   esi
c0013742:	c1 eb 15             	shr    ebx,0x15
c0013745:	68 82 00 00 c0       	push   0xc0000082
c001374a:	83 e3 7e             	and    ebx,0x7e
c001374d:	e8 a0 ff ff ff       	call   c00136f2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013752:	56                   	push   esi
c0013753:	6a 00                	push   0x0
c0013755:	53                   	push   ebx
c0013756:	eb 12                	jmp    c001376a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013758:	89 e3                	mov    ebx,esp
c001375a:	53                   	push   ebx
c001375b:	68 82 00 00 c0       	push   0xc0000082
c0013760:	e8 8d ff ff ff       	call   c00136f2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013765:	53                   	push   ebx
c0013766:	6a 00                	push   0x0
c0013768:	6a 00                	push   0x0
c001376a:	68 82 00 00 c0       	push   0xc0000082
c001376f:	e8 62 ff ff ff       	call   c00136d6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013774:	83 c4 18             	add    esp,0x18
c0013777:	83 c4 10             	add    esp,0x10
c001377a:	5b                   	pop    ebx
c001377b:	5e                   	pop    esi
c001377c:	c3                   	ret    
c001377d:	90                   	nop

c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001377e:	55                   	push   ebp
c001377f:	57                   	push   edi
c0013780:	56                   	push   esi
c0013781:	53                   	push   ebx
c0013782:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013786:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001378a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001378e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013792:	39 05 c0 85 02 c0    	cmp    DWORD PTR ds:0xc00285c0,eax
c0013798:	75 23                	jne    c00137bd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001379a:	a1 cc 96 02 c0       	mov    eax,ds:0xc00296cc
c001379f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137a3:	89 06                	mov    DWORD PTR [esi],eax
c00137a5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00137aa:	89 07                	mov    DWORD PTR [edi],eax
c00137ac:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00137b1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00137b4:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00137b9:	89 02                	mov    DWORD PTR [edx],eax
c00137bb:	eb 3f                	jmp    c00137fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00137bd:	31 c9                	xor    ecx,ecx
c00137bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c3:	0f a2                	cpuid  
c00137c5:	89 06                	mov    DWORD PTR [esi],eax
c00137c7:	89 1f                	mov    DWORD PTR [edi],ebx
c00137c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137cd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00137d0:	89 10                	mov    DWORD PTR [eax],edx
c00137d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137d6:	a3 c0 85 02 c0       	mov    ds:0xc00285c0,eax
c00137db:	8b 06                	mov    eax,DWORD PTR [esi]
c00137dd:	a3 cc 96 02 c0       	mov    ds:0xc00296cc,eax
c00137e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00137e4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00137e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00137ec:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00137f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00137f7:	a3 c0 96 02 c0       	mov    ds:0xc00296c0,eax
c00137fc:	5b                   	pop    ebx
c00137fd:	5e                   	pop    esi
c00137fe:	5f                   	pop    edi
c00137ff:	5d                   	pop    ebp
c0013800:	c3                   	ret    
c0013801:	90                   	nop

c0013802 <CPU::cpuidCheckEDX(unsigned int)>:
c0013802:	83 ec 10             	sub    esp,0x10
c0013805:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013809:	50                   	push   eax
c001380a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001380e:	50                   	push   eax
c001380f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013813:	50                   	push   eax
c0013814:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013818:	50                   	push   eax
c0013819:	6a 01                	push   0x1
c001381b:	e8 5e ff ff ff       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013820:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013824:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013828:	0f 95 c0             	setne  al
c001382b:	83 c4 24             	add    esp,0x24
c001382e:	c3                   	ret    
c001382f:	90                   	nop

c0013830 <CPU::cpuidCheckECX(unsigned int)>:
c0013830:	83 ec 10             	sub    esp,0x10
c0013833:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013837:	50                   	push   eax
c0013838:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001383c:	50                   	push   eax
c001383d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013841:	50                   	push   eax
c0013842:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013846:	50                   	push   eax
c0013847:	6a 01                	push   0x1
c0013849:	e8 30 ff ff ff       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001384e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013852:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013856:	0f 95 c0             	setne  al
c0013859:	83 c4 24             	add    esp,0x24
c001385c:	c3                   	ret    
c001385d:	90                   	nop

c001385e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001385e:	83 ec 10             	sub    esp,0x10
c0013861:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013865:	50                   	push   eax
c0013866:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001386a:	50                   	push   eax
c001386b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001386f:	50                   	push   eax
c0013870:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013874:	50                   	push   eax
c0013875:	6a 07                	push   0x7
c0013877:	e8 02 ff ff ff       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001387c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013880:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013884:	0f 95 c0             	setne  al
c0013887:	83 c4 24             	add    esp,0x24
c001388a:	c3                   	ret    
c001388b:	90                   	nop

c001388c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001388c:	83 ec 10             	sub    esp,0x10
c001388f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013893:	50                   	push   eax
c0013894:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013898:	50                   	push   eax
c0013899:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001389d:	50                   	push   eax
c001389e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00138a2:	50                   	push   eax
c00138a3:	6a 07                	push   0x7
c00138a5:	e8 d4 fe ff ff       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00138ae:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00138b2:	0f 95 c0             	setne  al
c00138b5:	83 c4 24             	add    esp,0x24
c00138b8:	c3                   	ret    
c00138b9:	90                   	nop

c00138ba <CPU::CPU()>:
c00138ba:	83 ec 0c             	sub    esp,0xc
c00138bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c1:	83 ec 08             	sub    esp,0x8
c00138c4:	68 51 64 02 c0       	push   0xc0026451
c00138c9:	50                   	push   eax
c00138ca:	e8 a3 af ff ff       	call   c000e872 <Device::Device(char const*)>
c00138cf:	83 c4 10             	add    esp,0x10
c00138d2:	ba b4 66 02 c0       	mov    edx,0xc00266b4
c00138d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138db:	89 10                	mov    DWORD PTR [eax],edx
c00138dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00138eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ef:	05 78 01 00 00       	add    eax,0x178
c00138f4:	83 ec 0c             	sub    esp,0xc
c00138f7:	50                   	push   eax
c00138f8:	e8 0b 5d ff ff       	call   c0009608 <GDT::GDT()>
c00138fd:	83 c4 10             	add    esp,0x10
c0013900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013904:	05 7c 09 00 00       	add    eax,0x97c
c0013909:	83 ec 0c             	sub    esp,0xc
c001390c:	50                   	push   eax
c001390d:	e8 c2 5f ff ff       	call   c00098d4 <IDT::IDT()>
c0013912:	83 c4 10             	add    esp,0x10
c0013915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013919:	05 7c 11 00 00       	add    eax,0x117c
c001391e:	83 ec 0c             	sub    esp,0xc
c0013921:	50                   	push   eax
c0013922:	e8 bd 7d ff ff       	call   c000b6e4 <TSS::TSS()>
c0013927:	83 c4 10             	add    esp,0x10
c001392a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013939:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013943:	90                   	nop
c0013944:	83 c4 0c             	add    esp,0xc
c0013947:	c3                   	ret    

c0013948 <CPU::displayFeatures()>:
c0013948:	53                   	push   ebx
c0013949:	83 ec 10             	sub    esp,0x10
c001394c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013950:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0013956:	68 48 61 02 c0       	push   0xc0026148
c001395b:	e8 9b 97 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013960:	58                   	pop    eax
c0013961:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0013967:	5a                   	pop    edx
c0013968:	50                   	push   eax
c0013969:	68 59 61 02 c0       	push   0xc0026159
c001396e:	e8 88 97 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013973:	59                   	pop    ecx
c0013974:	58                   	pop    eax
c0013975:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001397b:	c1 e8 0e             	shr    eax,0xe
c001397e:	0f b6 c0             	movzx  eax,al
c0013981:	50                   	push   eax
c0013982:	68 6a 61 02 c0       	push   0xc002616a
c0013987:	e8 6f 97 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001398c:	58                   	pop    eax
c001398d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013993:	5a                   	pop    edx
c0013994:	66 c1 e8 06          	shr    ax,0x6
c0013998:	0f b6 c0             	movzx  eax,al
c001399b:	50                   	push   eax
c001399c:	68 7b 61 02 c0       	push   0xc002617b
c00139a1:	e8 55 97 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00139a6:	c7 04 24 7b 67 02 c0 	mov    DWORD PTR [esp],0xc002677b
c00139ad:	e8 49 97 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00139b2:	83 c4 10             	add    esp,0x10
c00139b5:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00139ba:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00139c1:	74 05                	je     c00139c8 <CPU::displayFeatures()+0x80>
c00139c3:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00139c8:	51                   	push   ecx
c00139c9:	51                   	push   ecx
c00139ca:	50                   	push   eax
c00139cb:	68 8c 61 02 c0       	push   0xc002618c
c00139d0:	e8 26 97 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00139d5:	83 c4 10             	add    esp,0x10
c00139d8:	b8 41 46 02 c0       	mov    eax,0xc0024641
c00139dd:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00139e4:	78 05                	js     c00139eb <CPU::displayFeatures()+0xa3>
c00139e6:	b8 45 46 02 c0       	mov    eax,0xc0024645
c00139eb:	52                   	push   edx
c00139ec:	52                   	push   edx
c00139ed:	50                   	push   eax
c00139ee:	68 a3 61 02 c0       	push   0xc00261a3
c00139f3:	e8 03 97 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00139f8:	83 c4 10             	add    esp,0x10
c00139fb:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a00:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013a07:	75 05                	jne    c0013a0e <CPU::displayFeatures()+0xc6>
c0013a09:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a0e:	51                   	push   ecx
c0013a0f:	51                   	push   ecx
c0013a10:	50                   	push   eax
c0013a11:	68 ba 61 02 c0       	push   0xc00261ba
c0013a16:	e8 e0 96 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013a1b:	83 c4 10             	add    esp,0x10
c0013a1e:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a23:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013a2a:	75 05                	jne    c0013a31 <CPU::displayFeatures()+0xe9>
c0013a2c:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a31:	52                   	push   edx
c0013a32:	52                   	push   edx
c0013a33:	50                   	push   eax
c0013a34:	68 d1 61 02 c0       	push   0xc00261d1
c0013a39:	e8 bd 96 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013a3e:	83 c4 10             	add    esp,0x10
c0013a41:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a46:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013a4d:	75 05                	jne    c0013a54 <CPU::displayFeatures()+0x10c>
c0013a4f:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a54:	51                   	push   ecx
c0013a55:	51                   	push   ecx
c0013a56:	50                   	push   eax
c0013a57:	68 e8 61 02 c0       	push   0xc00261e8
c0013a5c:	e8 9a 96 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a69:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013a70:	75 05                	jne    c0013a77 <CPU::displayFeatures()+0x12f>
c0013a72:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a77:	52                   	push   edx
c0013a78:	52                   	push   edx
c0013a79:	50                   	push   eax
c0013a7a:	68 ff 61 02 c0       	push   0xc00261ff
c0013a7f:	e8 77 96 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013a8c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013a93:	75 05                	jne    c0013a9a <CPU::displayFeatures()+0x152>
c0013a95:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013a9a:	51                   	push   ecx
c0013a9b:	51                   	push   ecx
c0013a9c:	50                   	push   eax
c0013a9d:	68 16 62 02 c0       	push   0xc0026216
c0013aa2:	e8 54 96 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013aa7:	83 c4 10             	add    esp,0x10
c0013aaa:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013aaf:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0013ab6:	75 05                	jne    c0013abd <CPU::displayFeatures()+0x175>
c0013ab8:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013abd:	52                   	push   edx
c0013abe:	52                   	push   edx
c0013abf:	50                   	push   eax
c0013ac0:	68 2d 62 02 c0       	push   0xc002622d
c0013ac5:	e8 31 96 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013ad2:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013ad9:	75 05                	jne    c0013ae0 <CPU::displayFeatures()+0x198>
c0013adb:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013ae0:	51                   	push   ecx
c0013ae1:	51                   	push   ecx
c0013ae2:	50                   	push   eax
c0013ae3:	68 44 62 02 c0       	push   0xc0026244
c0013ae8:	e8 0e 96 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013af5:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013afc:	75 05                	jne    c0013b03 <CPU::displayFeatures()+0x1bb>
c0013afe:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b03:	52                   	push   edx
c0013b04:	52                   	push   edx
c0013b05:	50                   	push   eax
c0013b06:	68 5b 62 02 c0       	push   0xc002625b
c0013b0b:	e8 eb 95 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013b10:	83 c4 10             	add    esp,0x10
c0013b13:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b18:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013b1f:	75 05                	jne    c0013b26 <CPU::displayFeatures()+0x1de>
c0013b21:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b26:	51                   	push   ecx
c0013b27:	51                   	push   ecx
c0013b28:	50                   	push   eax
c0013b29:	68 72 62 02 c0       	push   0xc0026272
c0013b2e:	e8 c8 95 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b3b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013b42:	75 05                	jne    c0013b49 <CPU::displayFeatures()+0x201>
c0013b44:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b49:	52                   	push   edx
c0013b4a:	52                   	push   edx
c0013b4b:	50                   	push   eax
c0013b4c:	68 89 62 02 c0       	push   0xc0026289
c0013b51:	e8 a5 95 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013b56:	83 c4 10             	add    esp,0x10
c0013b59:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b5e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013b65:	75 05                	jne    c0013b6c <CPU::displayFeatures()+0x224>
c0013b67:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b6c:	51                   	push   ecx
c0013b6d:	51                   	push   ecx
c0013b6e:	50                   	push   eax
c0013b6f:	68 a0 62 02 c0       	push   0xc00262a0
c0013b74:	e8 82 95 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013b79:	83 c4 10             	add    esp,0x10
c0013b7c:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013b81:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013b88:	78 05                	js     c0013b8f <CPU::displayFeatures()+0x247>
c0013b8a:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013b8f:	52                   	push   edx
c0013b90:	52                   	push   edx
c0013b91:	50                   	push   eax
c0013b92:	68 b7 62 02 c0       	push   0xc00262b7
c0013b97:	e8 5f 95 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013b9c:	83 c4 10             	add    esp,0x10
c0013b9f:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013ba4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013bab:	75 05                	jne    c0013bb2 <CPU::displayFeatures()+0x26a>
c0013bad:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013bb2:	51                   	push   ecx
c0013bb3:	51                   	push   ecx
c0013bb4:	50                   	push   eax
c0013bb5:	68 ce 62 02 c0       	push   0xc00262ce
c0013bba:	e8 3c 95 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013bbf:	83 c4 10             	add    esp,0x10
c0013bc2:	b8 41 46 02 c0       	mov    eax,0xc0024641
c0013bc7:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013bce:	75 05                	jne    c0013bd5 <CPU::displayFeatures()+0x28d>
c0013bd0:	b8 45 46 02 c0       	mov    eax,0xc0024645
c0013bd5:	52                   	push   edx
c0013bd6:	52                   	push   edx
c0013bd7:	50                   	push   eax
c0013bd8:	68 e5 62 02 c0       	push   0xc00262e5
c0013bdd:	e8 19 95 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0013be2:	83 c4 18             	add    esp,0x18
c0013be5:	5b                   	pop    ebx
c0013be6:	c3                   	ret    
c0013be7:	90                   	nop

c0013be8 <CPU::detectFeatures()>:
c0013be8:	55                   	push   ebp
c0013be9:	57                   	push   edi
c0013bea:	56                   	push   esi
c0013beb:	53                   	push   ebx
c0013bec:	83 ec 50             	sub    esp,0x50
c0013bef:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013bf3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013bfd:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013c04:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013c0a:	6a 0d                	push   0xd
c0013c0c:	6a 00                	push   0x0
c0013c0e:	55                   	push   ebp
c0013c0f:	e8 80 ca fe ff       	call   c0000694 <memset>
c0013c14:	83 c4 10             	add    esp,0x10
c0013c17:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0013c1c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013c23:	0f 84 22 09 00 00    	je     c001454b <CPU::detectFeatures()+0x963>
c0013c29:	83 ec 0c             	sub    esp,0xc
c0013c2c:	89 ef                	mov    edi,ebp
c0013c2e:	6a 10                	push   0x10
c0013c30:	e8 cd fb ff ff       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0013c35:	83 e0 01             	and    eax,0x1
c0013c38:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c3b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c41:	83 e0 fd             	and    eax,0xfffffffd
c0013c44:	09 d0                	or     eax,edx
c0013c46:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c4c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013c53:	e8 aa fb ff ff       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0013c58:	83 e0 01             	and    eax,0x1
c0013c5b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013c62:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c68:	83 e0 fb             	and    eax,0xfffffffb
c0013c6b:	09 d0                	or     eax,edx
c0013c6d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c73:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013c7a:	e8 83 fb ff ff       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0013c7f:	83 e0 01             	and    eax,0x1
c0013c82:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013c89:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c8f:	83 e0 f7             	and    eax,0xfffffff7
c0013c92:	09 d0                	or     eax,edx
c0013c94:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c9a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013ca1:	e8 5c fb ff ff       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0013ca6:	83 e0 01             	and    eax,0x1
c0013ca9:	c1 e0 04             	shl    eax,0x4
c0013cac:	88 c2                	mov    dl,al
c0013cae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013cb4:	83 e0 ef             	and    eax,0xffffffef
c0013cb7:	09 d0                	or     eax,edx
c0013cb9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013cbf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013cc6:	e8 37 fb ff ff       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0013ccb:	83 e0 01             	and    eax,0x1
c0013cce:	c1 e0 05             	shl    eax,0x5
c0013cd1:	88 c2                	mov    dl,al
c0013cd3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013cd9:	83 e0 df             	and    eax,0xffffffdf
c0013cdc:	09 d0                	or     eax,edx
c0013cde:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ce4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013ceb:	e8 12 fb ff ff       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0013cf0:	83 e0 01             	and    eax,0x1
c0013cf3:	8d 14 00             	lea    edx,[eax+eax*1]
c0013cf6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013cfc:	83 e0 fd             	and    eax,0xfffffffd
c0013cff:	09 d0                	or     eax,edx
c0013d01:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013d07:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013d0e:	e8 ef fa ff ff       	call   c0013802 <CPU::cpuidCheckEDX(unsigned int)>
c0013d13:	83 e0 01             	and    eax,0x1
c0013d16:	c1 e0 06             	shl    eax,0x6
c0013d19:	88 c2                	mov    dl,al
c0013d1b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013d21:	83 e0 bf             	and    eax,0xffffffbf
c0013d24:	09 d0                	or     eax,edx
c0013d26:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013d2c:	58                   	pop    eax
c0013d2d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d31:	50                   	push   eax
c0013d32:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d36:	50                   	push   eax
c0013d37:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013d3b:	56                   	push   esi
c0013d3c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d40:	50                   	push   eax
c0013d41:	6a 00                	push   0x0
c0013d43:	e8 36 fa ff ff       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d48:	b8 04 00 00 00       	mov    eax,0x4
c0013d4d:	89 c1                	mov    ecx,eax
c0013d4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d51:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013d57:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013d5b:	89 c1                	mov    ecx,eax
c0013d5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d5f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013d65:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013d69:	89 c1                	mov    ecx,eax
c0013d6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d6d:	83 c4 18             	add    esp,0x18
c0013d70:	68 fc 62 02 c0       	push   0xc00262fc
c0013d75:	55                   	push   ebp
c0013d76:	e8 61 ca fe ff       	call   c00007dc <strcmp>
c0013d7b:	83 c4 10             	add    esp,0x10
c0013d7e:	85 c0                	test   eax,eax
c0013d80:	75 0f                	jne    c0013d91 <CPU::detectFeatures()+0x1a9>
c0013d82:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013d8c:	e9 22 02 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013d91:	50                   	push   eax
c0013d92:	50                   	push   eax
c0013d93:	68 09 63 02 c0       	push   0xc0026309
c0013d98:	55                   	push   ebp
c0013d99:	e8 3e ca fe ff       	call   c00007dc <strcmp>
c0013d9e:	83 c4 10             	add    esp,0x10
c0013da1:	85 c0                	test   eax,eax
c0013da3:	74 dd                	je     c0013d82 <CPU::detectFeatures()+0x19a>
c0013da5:	50                   	push   eax
c0013da6:	50                   	push   eax
c0013da7:	68 16 63 02 c0       	push   0xc0026316
c0013dac:	55                   	push   ebp
c0013dad:	e8 2a ca fe ff       	call   c00007dc <strcmp>
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	85 c0                	test   eax,eax
c0013db7:	74 2a                	je     c0013de3 <CPU::detectFeatures()+0x1fb>
c0013db9:	50                   	push   eax
c0013dba:	50                   	push   eax
c0013dbb:	68 23 63 02 c0       	push   0xc0026323
c0013dc0:	55                   	push   ebp
c0013dc1:	e8 16 ca fe ff       	call   c00007dc <strcmp>
c0013dc6:	83 c4 10             	add    esp,0x10
c0013dc9:	85 c0                	test   eax,eax
c0013dcb:	74 16                	je     c0013de3 <CPU::detectFeatures()+0x1fb>
c0013dcd:	50                   	push   eax
c0013dce:	50                   	push   eax
c0013dcf:	68 30 63 02 c0       	push   0xc0026330
c0013dd4:	55                   	push   ebp
c0013dd5:	e8 02 ca fe ff       	call   c00007dc <strcmp>
c0013dda:	83 c4 10             	add    esp,0x10
c0013ddd:	85 c0                	test   eax,eax
c0013ddf:	74 48                	je     c0013e29 <CPU::detectFeatures()+0x241>
c0013de1:	eb 0f                	jmp    c0013df2 <CPU::detectFeatures()+0x20a>
c0013de3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013ded:	e9 c1 01 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013df2:	50                   	push   eax
c0013df3:	50                   	push   eax
c0013df4:	68 3d 63 02 c0       	push   0xc002633d
c0013df9:	55                   	push   ebp
c0013dfa:	e8 dd c9 fe ff       	call   c00007dc <strcmp>
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	85 c0                	test   eax,eax
c0013e04:	74 23                	je     c0013e29 <CPU::detectFeatures()+0x241>
c0013e06:	57                   	push   edi
c0013e07:	57                   	push   edi
c0013e08:	68 4a 63 02 c0       	push   0xc002634a
c0013e0d:	55                   	push   ebp
c0013e0e:	e8 c9 c9 fe ff       	call   c00007dc <strcmp>
c0013e13:	83 c4 10             	add    esp,0x10
c0013e16:	85 c0                	test   eax,eax
c0013e18:	75 1e                	jne    c0013e38 <CPU::detectFeatures()+0x250>
c0013e1a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013e24:	e9 8a 01 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013e29:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013e33:	e9 7b 01 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013e38:	56                   	push   esi
c0013e39:	56                   	push   esi
c0013e3a:	68 57 63 02 c0       	push   0xc0026357
c0013e3f:	55                   	push   ebp
c0013e40:	e8 97 c9 fe ff       	call   c00007dc <strcmp>
c0013e45:	83 c4 10             	add    esp,0x10
c0013e48:	85 c0                	test   eax,eax
c0013e4a:	75 0f                	jne    c0013e5b <CPU::detectFeatures()+0x273>
c0013e4c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013e56:	e9 58 01 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013e5b:	51                   	push   ecx
c0013e5c:	51                   	push   ecx
c0013e5d:	68 16 63 02 c0       	push   0xc0026316
c0013e62:	55                   	push   ebp
c0013e63:	e8 74 c9 fe ff       	call   c00007dc <strcmp>
c0013e68:	83 c4 10             	add    esp,0x10
c0013e6b:	85 c0                	test   eax,eax
c0013e6d:	75 0f                	jne    c0013e7e <CPU::detectFeatures()+0x296>
c0013e6f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013e79:	e9 35 01 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013e7e:	52                   	push   edx
c0013e7f:	52                   	push   edx
c0013e80:	68 64 63 02 c0       	push   0xc0026364
c0013e85:	55                   	push   ebp
c0013e86:	e8 51 c9 fe ff       	call   c00007dc <strcmp>
c0013e8b:	83 c4 10             	add    esp,0x10
c0013e8e:	85 c0                	test   eax,eax
c0013e90:	75 0f                	jne    c0013ea1 <CPU::detectFeatures()+0x2b9>
c0013e92:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013e9c:	e9 12 01 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013ea1:	50                   	push   eax
c0013ea2:	50                   	push   eax
c0013ea3:	68 71 63 02 c0       	push   0xc0026371
c0013ea8:	55                   	push   ebp
c0013ea9:	e8 2e c9 fe ff       	call   c00007dc <strcmp>
c0013eae:	83 c4 10             	add    esp,0x10
c0013eb1:	85 c0                	test   eax,eax
c0013eb3:	75 0f                	jne    c0013ec4 <CPU::detectFeatures()+0x2dc>
c0013eb5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013ebf:	e9 ef 00 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013ec4:	50                   	push   eax
c0013ec5:	50                   	push   eax
c0013ec6:	68 7e 63 02 c0       	push   0xc002637e
c0013ecb:	55                   	push   ebp
c0013ecc:	e8 0b c9 fe ff       	call   c00007dc <strcmp>
c0013ed1:	83 c4 10             	add    esp,0x10
c0013ed4:	85 c0                	test   eax,eax
c0013ed6:	75 0f                	jne    c0013ee7 <CPU::detectFeatures()+0x2ff>
c0013ed8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013ee2:	e9 cc 00 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013ee7:	50                   	push   eax
c0013ee8:	50                   	push   eax
c0013ee9:	68 8b 63 02 c0       	push   0xc002638b
c0013eee:	55                   	push   ebp
c0013eef:	e8 e8 c8 fe ff       	call   c00007dc <strcmp>
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	85 c0                	test   eax,eax
c0013ef9:	75 0f                	jne    c0013f0a <CPU::detectFeatures()+0x322>
c0013efb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013f05:	e9 a9 00 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013f0a:	50                   	push   eax
c0013f0b:	50                   	push   eax
c0013f0c:	68 98 63 02 c0       	push   0xc0026398
c0013f11:	55                   	push   ebp
c0013f12:	e8 c5 c8 fe ff       	call   c00007dc <strcmp>
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	85 c0                	test   eax,eax
c0013f1c:	75 0f                	jne    c0013f2d <CPU::detectFeatures()+0x345>
c0013f1e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013f28:	e9 86 00 00 00       	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013f2d:	50                   	push   eax
c0013f2e:	50                   	push   eax
c0013f2f:	68 a5 63 02 c0       	push   0xc00263a5
c0013f34:	55                   	push   ebp
c0013f35:	e8 a2 c8 fe ff       	call   c00007dc <strcmp>
c0013f3a:	83 c4 10             	add    esp,0x10
c0013f3d:	85 c0                	test   eax,eax
c0013f3f:	75 0c                	jne    c0013f4d <CPU::detectFeatures()+0x365>
c0013f41:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013f4b:	eb 66                	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013f4d:	50                   	push   eax
c0013f4e:	50                   	push   eax
c0013f4f:	68 b2 63 02 c0       	push   0xc00263b2
c0013f54:	55                   	push   ebp
c0013f55:	e8 82 c8 fe ff       	call   c00007dc <strcmp>
c0013f5a:	83 c4 10             	add    esp,0x10
c0013f5d:	85 c0                	test   eax,eax
c0013f5f:	75 0c                	jne    c0013f6d <CPU::detectFeatures()+0x385>
c0013f61:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013f6b:	eb 46                	jmp    c0013fb3 <CPU::detectFeatures()+0x3cb>
c0013f6d:	57                   	push   edi
c0013f6e:	57                   	push   edi
c0013f6f:	68 bf 63 02 c0       	push   0xc00263bf
c0013f74:	55                   	push   ebp
c0013f75:	e8 62 c8 fe ff       	call   c00007dc <strcmp>
c0013f7a:	83 c4 10             	add    esp,0x10
c0013f7d:	85 c0                	test   eax,eax
c0013f7f:	74 e0                	je     c0013f61 <CPU::detectFeatures()+0x379>
c0013f81:	56                   	push   esi
c0013f82:	56                   	push   esi
c0013f83:	68 cc 63 02 c0       	push   0xc00263cc
c0013f88:	55                   	push   ebp
c0013f89:	e8 4e c8 fe ff       	call   c00007dc <strcmp>
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	85 c0                	test   eax,eax
c0013f93:	74 cc                	je     c0013f61 <CPU::detectFeatures()+0x379>
c0013f95:	51                   	push   ecx
c0013f96:	51                   	push   ecx
c0013f97:	68 d9 63 02 c0       	push   0xc00263d9
c0013f9c:	55                   	push   ebp
c0013f9d:	e8 3a c8 fe ff       	call   c00007dc <strcmp>
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	85 c0                	test   eax,eax
c0013fa7:	74 b8                	je     c0013f61 <CPU::detectFeatures()+0x379>
c0013fa9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013fb3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013fb8:	0f 86 be 00 00 00    	jbe    c001407c <CPU::detectFeatures()+0x494>
c0013fbe:	83 ec 0c             	sub    esp,0xc
c0013fc1:	68 80 00 00 00       	push   0x80
c0013fc6:	e8 93 f8 ff ff       	call   c001385e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013fcb:	83 e0 01             	and    eax,0x1
c0013fce:	c1 e0 06             	shl    eax,0x6
c0013fd1:	88 c2                	mov    dl,al
c0013fd3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013fd9:	83 e0 bf             	and    eax,0xffffffbf
c0013fdc:	09 d0                	or     eax,edx
c0013fde:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013fe4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013feb:	e8 6e f8 ff ff       	call   c001385e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013ff0:	83 e0 01             	and    eax,0x1
c0013ff3:	c1 e0 04             	shl    eax,0x4
c0013ff6:	88 c2                	mov    dl,al
c0013ff8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013ffe:	83 e0 ef             	and    eax,0xffffffef
c0014001:	09 d0                	or     eax,edx
c0014003:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014009:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014010:	e8 49 f8 ff ff       	call   c001385e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0014015:	c1 e0 07             	shl    eax,0x7
c0014018:	88 c2                	mov    dl,al
c001401a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014020:	83 e0 7f             	and    eax,0x7f
c0014023:	09 d0                	or     eax,edx
c0014025:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001402b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014032:	e8 55 f8 ff ff       	call   c001388c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0014037:	83 e0 01             	and    eax,0x1
c001403a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014041:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014047:	83 e0 f7             	and    eax,0xfffffff7
c001404a:	09 d0                	or     eax,edx
c001404c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014052:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014059:	e8 2e f8 ff ff       	call   c001388c <CPU::cpuidCheckExtendedECX(unsigned int)>
c001405e:	83 c4 10             	add    esp,0x10
c0014061:	83 e0 01             	and    eax,0x1
c0014064:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001406b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014071:	83 e0 fb             	and    eax,0xfffffffb
c0014074:	09 d0                	or     eax,edx
c0014076:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001407c:	83 ec 0c             	sub    esp,0xc
c001407f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014083:	50                   	push   eax
c0014084:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014088:	50                   	push   eax
c0014089:	8d 74 24 28          	lea    esi,[esp+0x28]
c001408d:	56                   	push   esi
c001408e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014092:	50                   	push   eax
c0014093:	6a 01                	push   0x1
c0014095:	e8 e4 f6 ff ff       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001409a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001409e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00140a4:	88 ca                	mov    dl,cl
c00140a6:	83 e0 f0             	and    eax,0xfffffff0
c00140a9:	83 e2 0f             	and    edx,0xf
c00140ac:	09 d0                	or     eax,edx
c00140ae:	88 ca                	mov    dl,cl
c00140b0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00140b6:	c0 ea 04             	shr    dl,0x4
c00140b9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00140bd:	0f b6 c2             	movzx  eax,dl
c00140c0:	83 c4 20             	add    esp,0x20
c00140c3:	c1 e0 06             	shl    eax,0x6
c00140c6:	89 c7                	mov    edi,eax
c00140c8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140ce:	66 25 3f c0          	and    ax,0xc03f
c00140d2:	09 f8                	or     eax,edi
c00140d4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00140db:	89 c8                	mov    eax,ecx
c00140dd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00140e4:	c1 e8 08             	shr    eax,0x8
c00140e7:	83 e5 3f             	and    ebp,0x3f
c00140ea:	83 e0 0f             	and    eax,0xf
c00140ed:	89 c7                	mov    edi,eax
c00140ef:	c1 e7 06             	shl    edi,0x6
c00140f2:	09 ef                	or     edi,ebp
c00140f4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00140fb:	89 fa                	mov    edx,edi
c00140fd:	83 e5 c0             	and    ebp,0xffffffc0
c0014100:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014106:	88 c2                	mov    dl,al
c0014108:	c0 ea 02             	shr    dl,0x2
c001410b:	89 d7                	mov    edi,edx
c001410d:	09 ef                	or     edi,ebp
c001410f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014115:	89 fa                	mov    edx,edi
c0014117:	83 e5 cf             	and    ebp,0xffffffcf
c001411a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014120:	89 cf                	mov    edi,ecx
c0014122:	c1 ef 0c             	shr    edi,0xc
c0014125:	83 e7 03             	and    edi,0x3
c0014128:	c1 e7 04             	shl    edi,0x4
c001412b:	09 ef                	or     edi,ebp
c001412d:	3c 06                	cmp    al,0x6
c001412f:	89 fa                	mov    edx,edi
c0014131:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014137:	74 04                	je     c001413d <CPU::detectFeatures()+0x555>
c0014139:	3c 0f                	cmp    al,0xf
c001413b:	75 5c                	jne    c0014199 <CPU::detectFeatures()+0x5b1>
c001413d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014141:	89 cf                	mov    edi,ecx
c0014143:	c1 ef 10             	shr    edi,0x10
c0014146:	c1 e7 04             	shl    edi,0x4
c0014149:	09 fa                	or     edx,edi
c001414b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0014151:	0f b6 d2             	movzx  edx,dl
c0014154:	66 81 e7 3f c0       	and    di,0xc03f
c0014159:	c1 e2 06             	shl    edx,0x6
c001415c:	09 fa                	or     edx,edi
c001415e:	3c 0f                	cmp    al,0xf
c0014160:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014167:	75 30                	jne    c0014199 <CPU::detectFeatures()+0x5b1>
c0014169:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001416f:	c1 e9 14             	shr    ecx,0x14
c0014172:	83 e0 3f             	and    eax,0x3f
c0014175:	83 c1 0f             	add    ecx,0xf
c0014178:	88 ca                	mov    dl,cl
c001417a:	c0 e9 02             	shr    cl,0x2
c001417d:	c1 e2 06             	shl    edx,0x6
c0014180:	09 d0                	or     eax,edx
c0014182:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014188:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001418e:	83 e0 c0             	and    eax,0xffffffc0
c0014191:	09 c1                	or     ecx,eax
c0014193:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014199:	83 ec 0c             	sub    esp,0xc
c001419c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00141a3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141a7:	50                   	push   eax
c00141a8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00141ac:	55                   	push   ebp
c00141ad:	56                   	push   esi
c00141ae:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00141b2:	57                   	push   edi
c00141b3:	68 00 00 00 80       	push   0x80000000
c00141b8:	e8 c1 f5 ff ff       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141bd:	83 c4 20             	add    esp,0x20
c00141c0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00141c8:	76 22                	jbe    c00141ec <CPU::detectFeatures()+0x604>
c00141ca:	83 ec 0c             	sub    esp,0xc
c00141cd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141d1:	50                   	push   eax
c00141d2:	55                   	push   ebp
c00141d3:	56                   	push   esi
c00141d4:	57                   	push   edi
c00141d5:	68 01 00 00 80       	push   0x80000001
c00141da:	e8 9f f5 ff ff       	call   c001377e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141df:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00141e9:	83 c4 20             	add    esp,0x20
c00141ec:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00141f2:	83 f8 01             	cmp    eax,0x1
c00141f5:	75 6f                	jne    c0014266 <CPU::detectFeatures()+0x67e>
c00141f7:	51                   	push   ecx
c00141f8:	51                   	push   ecx
c00141f9:	68 e5 63 02 c0       	push   0xc00263e5
c00141fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014202:	56                   	push   esi
c0014203:	e8 48 c5 fe ff       	call   c0000750 <strcpy>
c0014208:	5f                   	pop    edi
c0014209:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001420f:	5d                   	pop    ebp
c0014210:	66 c1 e8 06          	shr    ax,0x6
c0014214:	0f b6 c0             	movzx  eax,al
c0014217:	50                   	push   eax
c0014218:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001421e:	c1 e8 0e             	shr    eax,0xe
c0014221:	0f b6 c0             	movzx  eax,al
c0014224:	50                   	push   eax
c0014225:	e8 fe f1 ff ff       	call   c0013428 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001422a:	5a                   	pop    edx
c001422b:	59                   	pop    ecx
c001422c:	50                   	push   eax
c001422d:	56                   	push   esi
c001422e:	e8 5d c6 fe ff       	call   c0000890 <strcat>
c0014233:	5f                   	pop    edi
c0014234:	5d                   	pop    ebp
c0014235:	56                   	push   esi
c0014236:	53                   	push   ebx
c0014237:	e8 28 a6 ff ff       	call   c000e864 <Device::setName(char const*)>
c001423c:	58                   	pop    eax
c001423d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014243:	5a                   	pop    edx
c0014244:	68 ec 63 02 c0       	push   0xc00263ec
c0014249:	50                   	push   eax
c001424a:	e8 8d c5 fe ff       	call   c00007dc <strcmp>
c001424f:	83 c4 10             	add    esp,0x10
c0014252:	85 c0                	test   eax,eax
c0014254:	0f 85 71 03 00 00    	jne    c00145cb <CPU::detectFeatures()+0x9e3>
c001425a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014261:	e9 65 03 00 00       	jmp    c00145cb <CPU::detectFeatures()+0x9e3>
c0014266:	83 f8 02             	cmp    eax,0x2
c0014269:	0f 85 b5 00 00 00    	jne    c0014324 <CPU::detectFeatures()+0x73c>
c001426f:	57                   	push   edi
c0014270:	57                   	push   edi
c0014271:	68 fe 63 02 c0       	push   0xc00263fe
c0014276:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001427a:	56                   	push   esi
c001427b:	e8 d0 c4 fe ff       	call   c0000750 <strcpy>
c0014280:	5d                   	pop    ebp
c0014281:	58                   	pop    eax
c0014282:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014288:	66 c1 e8 06          	shr    ax,0x6
c001428c:	0f b6 c0             	movzx  eax,al
c001428f:	50                   	push   eax
c0014290:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014296:	c1 e8 0e             	shr    eax,0xe
c0014299:	0f b6 c0             	movzx  eax,al
c001429c:	50                   	push   eax
c001429d:	e8 f2 ef ff ff       	call   c0013294 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00142a2:	5a                   	pop    edx
c00142a3:	59                   	pop    ecx
c00142a4:	50                   	push   eax
c00142a5:	56                   	push   esi
c00142a6:	e8 e5 c5 fe ff       	call   c0000890 <strcat>
c00142ab:	5f                   	pop    edi
c00142ac:	5d                   	pop    ebp
c00142ad:	56                   	push   esi
c00142ae:	53                   	push   ebx
c00142af:	e8 b0 a5 ff ff       	call   c000e864 <Device::setName(char const*)>
c00142b4:	58                   	pop    eax
c00142b5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00142bb:	5a                   	pop    edx
c00142bc:	68 03 64 02 c0       	push   0xc0026403
c00142c1:	50                   	push   eax
c00142c2:	e8 15 c5 fe ff       	call   c00007dc <strcmp>
c00142c7:	83 c4 10             	add    esp,0x10
c00142ca:	85 c0                	test   eax,eax
c00142cc:	75 20                	jne    c00142ee <CPU::detectFeatures()+0x706>
c00142ce:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c00142d4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142da:	a8 01                	test   al,0x1
c00142dc:	74 10                	je     c00142ee <CPU::detectFeatures()+0x706>
c00142de:	83 e0 fe             	and    eax,0xfffffffe
c00142e1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142e7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00142ee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142f4:	c1 e8 0e             	shr    eax,0xe
c00142f7:	3c 05                	cmp    al,0x5
c00142f9:	0f 85 cc 02 00 00    	jne    c00145cb <CPU::detectFeatures()+0x9e3>
c00142ff:	56                   	push   esi
c0014300:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014306:	83 e0 0f             	and    eax,0xf
c0014309:	50                   	push   eax
c001430a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014310:	66 c1 e8 06          	shr    ax,0x6
c0014314:	0f b6 c0             	movzx  eax,al
c0014317:	50                   	push   eax
c0014318:	6a 05                	push   0x5
c001431a:	e8 eb f3 ff ff       	call   c001370a <CPU::AMD_K6_writeback(int, int, int)>
c001431f:	e9 1f 02 00 00       	jmp    c0014543 <CPU::detectFeatures()+0x95b>
c0014324:	8d 50 fd             	lea    edx,[eax-0x3]
c0014327:	83 fa 01             	cmp    edx,0x1
c001432a:	76 09                	jbe    c0014335 <CPU::detectFeatures()+0x74d>
c001432c:	83 f8 06             	cmp    eax,0x6
c001432f:	0f 85 91 01 00 00    	jne    c00144c6 <CPU::detectFeatures()+0x8de>
c0014335:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001433b:	c1 ea 0e             	shr    edx,0xe
c001433e:	80 fa 05             	cmp    dl,0x5
c0014341:	75 7b                	jne    c00143be <CPU::detectFeatures()+0x7d6>
c0014343:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014349:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001434e:	66 81 fa 00 01       	cmp    dx,0x100
c0014353:	75 0c                	jne    c0014361 <CPU::detectFeatures()+0x779>
c0014355:	51                   	push   ecx
c0014356:	51                   	push   ecx
c0014357:	68 0a 64 02 c0       	push   0xc002640a
c001435c:	e9 dc 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c0014361:	66 81 fa 00 02       	cmp    dx,0x200
c0014366:	75 0c                	jne    c0014374 <CPU::detectFeatures()+0x78c>
c0014368:	52                   	push   edx
c0014369:	52                   	push   edx
c001436a:	68 1d 64 02 c0       	push   0xc002641d
c001436f:	e9 c9 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c0014374:	66 81 fa 40 02       	cmp    dx,0x240
c0014379:	75 0c                	jne    c0014387 <CPU::detectFeatures()+0x79f>
c001437b:	50                   	push   eax
c001437c:	50                   	push   eax
c001437d:	68 2f 64 02 c0       	push   0xc002642f
c0014382:	e9 b6 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c0014387:	83 f8 06             	cmp    eax,0x6
c001438a:	75 0c                	jne    c0014398 <CPU::detectFeatures()+0x7b0>
c001438c:	50                   	push   eax
c001438d:	50                   	push   eax
c001438e:	68 41 64 02 c0       	push   0xc0026441
c0014393:	e9 a5 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c0014398:	83 f8 04             	cmp    eax,0x4
c001439b:	75 0c                	jne    c00143a9 <CPU::detectFeatures()+0x7c1>
c001439d:	50                   	push   eax
c001439e:	50                   	push   eax
c001439f:	68 4d 64 02 c0       	push   0xc002644d
c00143a4:	e9 94 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c00143a9:	83 f8 03             	cmp    eax,0x3
c00143ac:	0f 85 19 02 00 00    	jne    c00145cb <CPU::detectFeatures()+0x9e3>
c00143b2:	50                   	push   eax
c00143b3:	50                   	push   eax
c00143b4:	68 55 64 02 c0       	push   0xc0026455
c00143b9:	e9 7f 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c00143be:	80 fa 06             	cmp    dl,0x6
c00143c1:	0f 85 db 00 00 00    	jne    c00144a2 <CPU::detectFeatures()+0x8ba>
c00143c7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00143cd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00143d2:	66 81 fa 80 01       	cmp    dx,0x180
c00143d7:	75 0c                	jne    c00143e5 <CPU::detectFeatures()+0x7fd>
c00143d9:	50                   	push   eax
c00143da:	50                   	push   eax
c00143db:	68 60 64 02 c0       	push   0xc0026460
c00143e0:	e9 58 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c00143e5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00143eb:	66 f7 c1 80 ff       	test   cx,0xff80
c00143f0:	75 0c                	jne    c00143fe <CPU::detectFeatures()+0x816>
c00143f2:	50                   	push   eax
c00143f3:	50                   	push   eax
c00143f4:	68 70 64 02 c0       	push   0xc0026470
c00143f9:	e9 3f 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c00143fe:	66 81 fa 40 02       	cmp    dx,0x240
c0014403:	75 0c                	jne    c0014411 <CPU::detectFeatures()+0x829>
c0014405:	55                   	push   ebp
c0014406:	55                   	push   ebp
c0014407:	68 77 64 02 c0       	push   0xc0026477
c001440c:	e9 2c 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c0014411:	66 81 fa 80 02       	cmp    dx,0x280
c0014416:	75 0c                	jne    c0014424 <CPU::detectFeatures()+0x83c>
c0014418:	57                   	push   edi
c0014419:	57                   	push   edi
c001441a:	68 80 64 02 c0       	push   0xc0026480
c001441f:	e9 19 01 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c0014424:	66 81 fa 40 03       	cmp    dx,0x340
c0014429:	74 ed                	je     c0014418 <CPU::detectFeatures()+0x830>
c001442b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014430:	75 0c                	jne    c001443e <CPU::detectFeatures()+0x856>
c0014432:	56                   	push   esi
c0014433:	56                   	push   esi
c0014434:	68 87 64 02 c0       	push   0xc0026487
c0014439:	e9 ff 00 00 00       	jmp    c001453d <CPU::detectFeatures()+0x955>
c001443e:	83 f8 06             	cmp    eax,0x6
c0014441:	0f 84 45 ff ff ff    	je     c001438c <CPU::detectFeatures()+0x7a4>
c0014447:	83 f8 04             	cmp    eax,0x4
c001444a:	0f 84 4d ff ff ff    	je     c001439d <CPU::detectFeatures()+0x7b5>
c0014450:	83 f8 03             	cmp    eax,0x3
c0014453:	0f 85 72 01 00 00    	jne    c00145cb <CPU::detectFeatures()+0x9e3>
c0014459:	51                   	push   ecx
c001445a:	51                   	push   ecx
c001445b:	68 90 64 02 c0       	push   0xc0026490
c0014460:	53                   	push   ebx
c0014461:	e8 fe a3 ff ff       	call   c000e864 <Device::setName(char const*)>
c0014466:	b1 c1                	mov    cl,0xc1
c0014468:	88 c8                	mov    al,cl
c001446a:	e6 22                	out    0x22,al
c001446c:	e4 23                	in     al,0x23
c001446e:	88 c2                	mov    dl,al
c0014470:	88 c8                	mov    al,cl
c0014472:	e6 22                	out    0x22,al
c0014474:	88 d0                	mov    al,dl
c0014476:	83 c8 10             	or     eax,0x10
c0014479:	e6 23                	out    0x23,al
c001447b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014482:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014485:	89 d0                	mov    eax,edx
c0014487:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001448d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014491:	40                   	inc    eax
c0014492:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014498:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001449d:	e9 a1 00 00 00       	jmp    c0014543 <CPU::detectFeatures()+0x95b>
c00144a2:	83 f8 06             	cmp    eax,0x6
c00144a5:	0f 84 e1 fe ff ff    	je     c001438c <CPU::detectFeatures()+0x7a4>
c00144ab:	83 f8 04             	cmp    eax,0x4
c00144ae:	0f 84 e9 fe ff ff    	je     c001439d <CPU::detectFeatures()+0x7b5>
c00144b4:	83 f8 03             	cmp    eax,0x3
c00144b7:	0f 85 0e 01 00 00    	jne    c00145cb <CPU::detectFeatures()+0x9e3>
c00144bd:	52                   	push   edx
c00144be:	52                   	push   edx
c00144bf:	68 9b 64 02 c0       	push   0xc002649b
c00144c4:	eb 77                	jmp    c001453d <CPU::detectFeatures()+0x955>
c00144c6:	83 f8 07             	cmp    eax,0x7
c00144c9:	75 09                	jne    c00144d4 <CPU::detectFeatures()+0x8ec>
c00144cb:	50                   	push   eax
c00144cc:	50                   	push   eax
c00144cd:	68 a5 64 02 c0       	push   0xc00264a5
c00144d2:	eb 69                	jmp    c001453d <CPU::detectFeatures()+0x955>
c00144d4:	83 f8 0a             	cmp    eax,0xa
c00144d7:	75 09                	jne    c00144e2 <CPU::detectFeatures()+0x8fa>
c00144d9:	50                   	push   eax
c00144da:	50                   	push   eax
c00144db:	68 b0 64 02 c0       	push   0xc00264b0
c00144e0:	eb 5b                	jmp    c001453d <CPU::detectFeatures()+0x955>
c00144e2:	83 f8 0b             	cmp    eax,0xb
c00144e5:	75 09                	jne    c00144f0 <CPU::detectFeatures()+0x908>
c00144e7:	50                   	push   eax
c00144e8:	50                   	push   eax
c00144e9:	68 b8 64 02 c0       	push   0xc00264b8
c00144ee:	eb 4d                	jmp    c001453d <CPU::detectFeatures()+0x955>
c00144f0:	83 f8 08             	cmp    eax,0x8
c00144f3:	75 09                	jne    c00144fe <CPU::detectFeatures()+0x916>
c00144f5:	50                   	push   eax
c00144f6:	50                   	push   eax
c00144f7:	68 c1 64 02 c0       	push   0xc00264c1
c00144fc:	eb 3f                	jmp    c001453d <CPU::detectFeatures()+0x955>
c00144fe:	83 f8 09             	cmp    eax,0x9
c0014501:	75 09                	jne    c001450c <CPU::detectFeatures()+0x924>
c0014503:	50                   	push   eax
c0014504:	50                   	push   eax
c0014505:	68 c9 64 02 c0       	push   0xc00264c9
c001450a:	eb 31                	jmp    c001453d <CPU::detectFeatures()+0x955>
c001450c:	83 f8 05             	cmp    eax,0x5
c001450f:	75 09                	jne    c001451a <CPU::detectFeatures()+0x932>
c0014511:	50                   	push   eax
c0014512:	50                   	push   eax
c0014513:	68 d1 64 02 c0       	push   0xc00264d1
c0014518:	eb 23                	jmp    c001453d <CPU::detectFeatures()+0x955>
c001451a:	83 f8 0c             	cmp    eax,0xc
c001451d:	75 09                	jne    c0014528 <CPU::detectFeatures()+0x940>
c001451f:	55                   	push   ebp
c0014520:	55                   	push   ebp
c0014521:	68 df 64 02 c0       	push   0xc00264df
c0014526:	eb 15                	jmp    c001453d <CPU::detectFeatures()+0x955>
c0014528:	83 f8 0d             	cmp    eax,0xd
c001452b:	75 09                	jne    c0014536 <CPU::detectFeatures()+0x94e>
c001452d:	57                   	push   edi
c001452e:	57                   	push   edi
c001452f:	68 ea 64 02 c0       	push   0xc00264ea
c0014534:	eb 07                	jmp    c001453d <CPU::detectFeatures()+0x955>
c0014536:	56                   	push   esi
c0014537:	56                   	push   esi
c0014538:	68 fe 64 02 c0       	push   0xc00264fe
c001453d:	53                   	push   ebx
c001453e:	e8 21 a3 ff ff       	call   c000e864 <Device::setName(char const*)>
c0014543:	83 c4 10             	add    esp,0x10
c0014546:	e9 80 00 00 00       	jmp    c00145cb <CPU::detectFeatures()+0x9e3>
c001454b:	51                   	push   ecx
c001454c:	51                   	push   ecx
c001454d:	68 4a 63 02 c0       	push   0xc002634a
c0014552:	55                   	push   ebp
c0014553:	e8 f8 c1 fe ff       	call   c0000750 <strcpy>
c0014558:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014562:	e8 7c bc fe ff       	call   c00001e3 <is486>
c0014567:	83 c4 10             	add    esp,0x10
c001456a:	85 c0                	test   eax,eax
c001456c:	74 2b                	je     c0014599 <CPU::detectFeatures()+0x9b1>
c001456e:	52                   	push   edx
c001456f:	52                   	push   edx
c0014570:	68 0a 65 02 c0       	push   0xc002650a
c0014575:	53                   	push   ebx
c0014576:	e8 e9 a2 ff ff       	call   c000e864 <Device::setName(char const*)>
c001457b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014582:	0f 20 c0             	mov    eax,cr0
c0014585:	83 e0 14             	and    eax,0x14
c0014588:	83 c4 10             	add    esp,0x10
c001458b:	83 f8 04             	cmp    eax,0x4
c001458e:	75 1f                	jne    c00145af <CPU::detectFeatures()+0x9c7>
c0014590:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014597:	eb 32                	jmp    c00145cb <CPU::detectFeatures()+0x9e3>
c0014599:	50                   	push   eax
c001459a:	50                   	push   eax
c001459b:	68 15 65 02 c0       	push   0xc0026515
c00145a0:	53                   	push   ebx
c00145a1:	e8 be a2 ff ff       	call   c000e864 <Device::setName(char const*)>
c00145a6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00145ad:	eb d3                	jmp    c0014582 <CPU::detectFeatures()+0x99a>
c00145af:	e8 0a bc fe ff       	call   c00001be <hasLegacyFPU>
c00145b4:	83 e0 01             	and    eax,0x1
c00145b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00145ba:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00145c0:	83 e0 fd             	and    eax,0xfffffffd
c00145c3:	09 d0                	or     eax,edx
c00145c5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00145cb:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00145d2:	74 0e                	je     c00145e2 <CPU::detectFeatures()+0x9fa>
c00145d4:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00145d9:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00145e0:	eb 20                	jmp    c0014602 <CPU::detectFeatures()+0xa1a>
c00145e2:	e8 d7 bb fe ff       	call   c00001be <hasLegacyFPU>
c00145e7:	83 e0 01             	and    eax,0x1
c00145ea:	8d 14 00             	lea    edx,[eax+eax*1]
c00145ed:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00145f3:	83 e0 fd             	and    eax,0xfffffffd
c00145f6:	09 d0                	or     eax,edx
c00145f8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00145fe:	a8 02                	test   al,0x2
c0014600:	75 d2                	jne    c00145d4 <CPU::detectFeatures()+0x9ec>
c0014602:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014609:	83 c4 4c             	add    esp,0x4c
c001460c:	5b                   	pop    ebx
c001460d:	5e                   	pop    esi
c001460e:	5f                   	pop    edi
c001460f:	5d                   	pop    ebp
c0014610:	c3                   	ret    
c0014611:	90                   	nop

c0014612 <CPU::setupSMEP()>:
c0014612:	0f 20 e0             	mov    eax,cr4
c0014615:	0d 00 00 10 00       	or     eax,0x100000
c001461a:	0f 22 e0             	mov    cr4,eax
c001461d:	c3                   	ret    

c001461e <CPU::setupUMIP()>:
c001461e:	0f 20 e0             	mov    eax,cr4
c0014621:	80 cc 08             	or     ah,0x8
c0014624:	0f 22 e0             	mov    cr4,eax
c0014627:	c3                   	ret    

c0014628 <CPU::setupTSC()>:
c0014628:	0f 20 e0             	mov    eax,cr4
c001462b:	83 c8 04             	or     eax,0x4
c001462e:	0f 22 e0             	mov    cr4,eax
c0014631:	c3                   	ret    

c0014632 <CPU::setupLargePages()>:
c0014632:	0f 20 e0             	mov    eax,cr4
c0014635:	83 c8 10             	or     eax,0x10
c0014638:	0f 22 e0             	mov    cr4,eax
c001463b:	c3                   	ret    

c001463c <CPU::setupPAT()>:
c001463c:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0014641:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014648:	74 2c                	je     c0014676 <CPU::setupPAT()+0x3a>
c001464a:	53                   	push   ebx
c001464b:	83 ec 10             	sub    esp,0x10
c001464e:	68 77 02 00 00       	push   0x277
c0014653:	50                   	push   eax
c0014654:	e8 25 4c ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014659:	83 e2 f8             	and    edx,0xfffffff8
c001465c:	83 ca 01             	or     edx,0x1
c001465f:	52                   	push   edx
c0014660:	50                   	push   eax
c0014661:	68 77 02 00 00       	push   0x277
c0014666:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c001466c:	e8 39 4c ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c0014671:	83 c4 28             	add    esp,0x28
c0014674:	5b                   	pop    ebx
c0014675:	c3                   	ret    
c0014676:	c3                   	ret    
c0014677:	90                   	nop

c0014678 <CPU::setupMTRR()>:
c0014678:	c3                   	ret    
c0014679:	90                   	nop

c001467a <CPU::setupGlobalPages()>:
c001467a:	0f 20 e0             	mov    eax,cr4
c001467d:	0c 80                	or     al,0x80
c001467f:	0f 22 e0             	mov    cr4,eax
c0014682:	c3                   	ret    
c0014683:	90                   	nop

c0014684 <CPU::allowUsermodeDataAccess()>:
c0014684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014688:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001468f:	74 03                	je     c0014694 <CPU::allowUsermodeDataAccess()+0x10>
c0014691:	0f 01 cb             	stac   
c0014694:	c3                   	ret    
c0014695:	90                   	nop

c0014696 <CPU::prohibitUsermodeDataAccess()>:
c0014696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001469a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00146a1:	74 03                	je     c00146a6 <CPU::prohibitUsermodeDataAccess()+0x10>
c00146a3:	0f 01 ca             	clac   
c00146a6:	c3                   	ret    
c00146a7:	90                   	nop

c00146a8 <CPU::setupSMAP()>:
c00146a8:	0f 20 e0             	mov    eax,cr4
c00146ab:	0d 00 00 20 00       	or     eax,0x200000
c00146b0:	0f 22 e0             	mov    cr4,eax
c00146b3:	eb e1                	jmp    c0014696 <CPU::prohibitUsermodeDataAccess()>
c00146b5:	90                   	nop

c00146b6 <CPU::setupFeatures()>:
c00146b6:	53                   	push   ebx
c00146b7:	83 ec 08             	sub    esp,0x8
c00146ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146be:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00146c5:	74 18                	je     c00146df <CPU::setupFeatures()+0x29>
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	68 20 65 02 c0       	push   0xc0026520
c00146cf:	e8 27 8a ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00146d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146d7:	e8 42 ff ff ff       	call   c001461e <CPU::setupUMIP()>
c00146dc:	83 c4 10             	add    esp,0x10
c00146df:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00146e6:	74 18                	je     c0014700 <CPU::setupFeatures()+0x4a>
c00146e8:	83 ec 0c             	sub    esp,0xc
c00146eb:	68 2a 65 02 c0       	push   0xc002652a
c00146f0:	e8 06 8a ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00146f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146f8:	e8 2b ff ff ff       	call   c0014628 <CPU::setupTSC()>
c00146fd:	83 c4 10             	add    esp,0x10
c0014700:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014707:	74 18                	je     c0014721 <CPU::setupFeatures()+0x6b>
c0014709:	83 ec 0c             	sub    esp,0xc
c001470c:	68 33 65 02 c0       	push   0xc0026533
c0014711:	e8 e5 89 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0014716:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014719:	e8 14 ff ff ff       	call   c0014632 <CPU::setupLargePages()>
c001471e:	83 c4 10             	add    esp,0x10
c0014721:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014728:	74 18                	je     c0014742 <CPU::setupFeatures()+0x8c>
c001472a:	83 ec 0c             	sub    esp,0xc
c001472d:	68 3c 65 02 c0       	push   0xc002653c
c0014732:	e8 c4 89 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0014737:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001473a:	e8 3b ff ff ff       	call   c001467a <CPU::setupGlobalPages()>
c001473f:	83 c4 10             	add    esp,0x10
c0014742:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014749:	74 18                	je     c0014763 <CPU::setupFeatures()+0xad>
c001474b:	83 ec 0c             	sub    esp,0xc
c001474e:	68 4e 65 02 c0       	push   0xc002654e
c0014753:	e8 a3 89 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0014758:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001475b:	e8 dc fe ff ff       	call   c001463c <CPU::setupPAT()>
c0014760:	83 c4 10             	add    esp,0x10
c0014763:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001476a:	74 11                	je     c001477d <CPU::setupFeatures()+0xc7>
c001476c:	c7 44 24 10 57 65 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026557
c0014774:	83 c4 08             	add    esp,0x8
c0014777:	5b                   	pop    ebx
c0014778:	e9 7e 89 ff ff       	jmp    c000d0fb <Dbg::kprintf(char const*, ...)>
c001477d:	83 c4 08             	add    esp,0x8
c0014780:	5b                   	pop    ebx
c0014781:	c3                   	ret    

c0014782 <CPU::open(int, int, void*)>:
c0014782:	57                   	push   edi
c0014783:	56                   	push   esi
c0014784:	53                   	push   ebx
c0014785:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014789:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001478d:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001479c:	68 61 65 02 c0       	push   0xc0026561
c00147a1:	e8 9b 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147a6:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00147ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00147af:	e8 b6 4e ff ff       	call   c000966a <GDT::setup()>
c00147b4:	c7 04 24 73 65 02 c0 	mov    DWORD PTR [esp],0xc0026573
c00147bb:	e8 81 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147c0:	83 c4 0c             	add    esp,0xc
c00147c3:	6a 00                	push   0x0
c00147c5:	68 ef be ad de       	push   0xdeadbeef
c00147ca:	57                   	push   edi
c00147cb:	e8 58 6f ff ff       	call   c000b728 <TSS::setup(unsigned long, unsigned long)>
c00147d0:	c7 04 24 85 65 02 c0 	mov    DWORD PTR [esp],0xc0026585
c00147d7:	e8 65 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147df:	e8 24 6f ff ff       	call   c000b708 <TSS::flush()>
c00147e4:	c7 04 24 99 65 02 c0 	mov    DWORD PTR [esp],0xc0026599
c00147eb:	e8 51 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147f0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00147f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00147f9:	e8 4c 51 ff ff       	call   c000994a <IDT::setup()>
c00147fe:	c7 04 24 ab 65 02 c0 	mov    DWORD PTR [esp],0xc00265ab
c0014805:	e8 37 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001480a:	b8 00 04 00 00       	mov    eax,0x400
c001480f:	0f 23 f8             	mov    db7,eax
c0014812:	c7 04 24 c9 65 02 c0 	mov    DWORD PTR [esp],0xc00265c9
c0014819:	e8 23 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001481e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014828:	e8 71 5c ff ff       	call   c000a49e <Phys::allocatePage()>
c001482d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014833:	89 30                	mov    DWORD PTR [eax],esi
c0014835:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001483b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001483e:	c7 04 24 eb 65 02 c0 	mov    DWORD PTR [esp],0xc00265eb
c0014845:	e8 f7 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001484a:	58                   	pop    eax
c001484b:	5a                   	pop    edx
c001484c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014852:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014856:	e8 8b 7e ff ff       	call   c000c6e6 <VAS::setCPUSpecific(unsigned long)>
c001485b:	c7 04 24 13 66 02 c0 	mov    DWORD PTR [esp],0xc0026613
c0014862:	e8 da 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001486a:	e8 79 f3 ff ff       	call   c0013be8 <CPU::detectFeatures()>
c001486f:	c7 04 24 36 66 02 c0 	mov    DWORD PTR [esp],0xc0026636
c0014876:	e8 c6 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001487b:	e8 f7 b2 ff ff       	call   c000fb77 <setupInterruptController()>
c0014880:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014886:	c7 04 24 5a 66 02 c0 	mov    DWORD PTR [esp],0xc002665a
c001488d:	e8 af 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014892:	a1 20 8c 02 c0       	mov    eax,ds:0xc0028c20
c0014897:	83 e0 10             	and    eax,0x10
c001489a:	83 f8 01             	cmp    eax,0x1
c001489d:	19 c0                	sbb    eax,eax
c001489f:	83 e0 46             	and    eax,0x46
c00148a2:	83 c0 1e             	add    eax,0x1e
c00148a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00148a8:	e8 eb c8 ff ff       	call   c0011198 <setupTimer(int)>
c00148ad:	83 c4 10             	add    esp,0x10
c00148b0:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00148b6:	f6 05 20 8c 02 c0 20 	test   BYTE PTR ds:0xc0028c20,0x20
c00148bd:	74 18                	je     c00148d7 <CPU::open(int, int, void*)+0x155>
c00148bf:	83 ec 0c             	sub    esp,0xc
c00148c2:	68 75 66 02 c0       	push   0xc0026675
c00148c7:	e8 75 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148cf:	e8 e2 fd ff ff       	call   c00146b6 <CPU::setupFeatures()>
c00148d4:	83 c4 10             	add    esp,0x10
c00148d7:	83 ec 0c             	sub    esp,0xc
c00148da:	68 90 66 02 c0       	push   0xc0026690
c00148df:	e8 5d 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148e7:	e8 5c f0 ff ff       	call   c0013948 <CPU::displayFeatures()>
c00148ec:	83 c4 10             	add    esp,0x10
c00148ef:	31 c0                	xor    eax,eax
c00148f1:	5b                   	pop    ebx
c00148f2:	5e                   	pop    esi
c00148f3:	5f                   	pop    edi
c00148f4:	c3                   	ret    
c00148f5:	90                   	nop

c00148f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00148f6:	57                   	push   edi
c00148f7:	56                   	push   esi
c00148f8:	53                   	push   ebx
c00148f9:	51                   	push   ecx
c00148fa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148fe:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014901:	0f 02 c0             	lar    eax,ax
c0014904:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0014907:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001490b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001490e:	88 ca                	mov    dl,cl
c0014910:	c0 ea 06             	shr    dl,0x6
c0014913:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0014917:	89 ca                	mov    edx,ecx
c0014919:	66 c1 ea 03          	shr    dx,0x3
c001491d:	83 e2 07             	and    edx,0x7
c0014920:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014925:	88 17                	mov    BYTE PTR [edi],dl
c0014927:	0f 84 a6 01 00 00    	je     c0014ad3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001492d:	83 e1 07             	and    ecx,0x7
c0014930:	80 f9 04             	cmp    cl,0x4
c0014933:	0f 84 98 00 00 00    	je     c00149d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014939:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001493e:	0f 95 c0             	setne  al
c0014941:	80 f9 05             	cmp    cl,0x5
c0014944:	0f 95 c2             	setne  dl
c0014947:	08 c2                	or     dl,al
c0014949:	74 79                	je     c00149c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001494b:	84 c9                	test   cl,cl
c001494d:	75 05                	jne    c0014954 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001494f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014952:	eb 3c                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014954:	80 f9 01             	cmp    cl,0x1
c0014957:	75 05                	jne    c001495e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014959:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001495c:	eb 32                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001495e:	80 f9 02             	cmp    cl,0x2
c0014961:	75 05                	jne    c0014968 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0014963:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014966:	eb 28                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014968:	31 c0                	xor    eax,eax
c001496a:	80 f9 03             	cmp    cl,0x3
c001496d:	75 05                	jne    c0014974 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001496f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014972:	eb 1c                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014974:	80 f9 05             	cmp    cl,0x5
c0014977:	75 05                	jne    c001497e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014979:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001497c:	eb 12                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001497e:	80 f9 06             	cmp    cl,0x6
c0014981:	75 05                	jne    c0014988 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014983:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014986:	eb 08                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014988:	80 f9 07             	cmp    cl,0x7
c001498b:	75 03                	jne    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001498d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014990:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014995:	75 10                	jne    c00149a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0014997:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001499b:	b9 03 00 00 00       	mov    ecx,0x3
c00149a0:	01 d0                	add    eax,edx
c00149a2:	e9 37 01 00 00       	jmp    c0014ade <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149a7:	b9 02 00 00 00       	mov    ecx,0x2
c00149ac:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00149b1:	0f 85 27 01 00 00    	jne    c0014ade <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149b7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00149ba:	b9 06 00 00 00       	mov    ecx,0x6
c00149bf:	e9 1a 01 00 00       	jmp    c0014ade <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149c4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00149c7:	b9 06 00 00 00       	mov    ecx,0x6
c00149cc:	e9 0f 01 00 00       	jmp    c0014ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00149d1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00149d4:	88 ca                	mov    dl,cl
c00149d6:	c0 ea 06             	shr    dl,0x6
c00149d9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00149dd:	89 ca                	mov    edx,ecx
c00149df:	66 c1 ea 03          	shr    dx,0x3
c00149e3:	83 e2 07             	and    edx,0x7
c00149e6:	80 e1 07             	and    cl,0x7
c00149e9:	75 05                	jne    c00149f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00149eb:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00149ee:	eb 4c                	jmp    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149f0:	80 f9 01             	cmp    cl,0x1
c00149f3:	75 05                	jne    c00149fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00149f5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00149f8:	eb 42                	jmp    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149fa:	80 f9 02             	cmp    cl,0x2
c00149fd:	75 05                	jne    c0014a04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00149ff:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014a02:	eb 38                	jmp    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a04:	80 f9 03             	cmp    cl,0x3
c0014a07:	75 05                	jne    c0014a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014a09:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014a0c:	eb 2e                	jmp    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a0e:	80 f9 04             	cmp    cl,0x4
c0014a11:	75 12                	jne    c0014a25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014a13:	f6 c4 60             	test   ah,0x60
c0014a16:	75 08                	jne    c0014a20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014a18:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014a1b:	8d 78 14             	lea    edi,[eax+0x14]
c0014a1e:	eb 1c                	jmp    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a20:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014a23:	eb 17                	jmp    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a25:	80 f9 05             	cmp    cl,0x5
c0014a28:	75 05                	jne    c0014a2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014a2a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014a2d:	eb 0d                	jmp    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a2f:	80 f9 06             	cmp    cl,0x6
c0014a32:	75 05                	jne    c0014a39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014a34:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014a37:	eb 03                	jmp    c0014a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a39:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014a3c:	84 d2                	test   dl,dl
c0014a3e:	75 05                	jne    c0014a45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014a40:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014a43:	eb 3c                	jmp    c0014a81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a45:	80 fa 01             	cmp    dl,0x1
c0014a48:	75 05                	jne    c0014a4f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014a4a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014a4d:	eb 32                	jmp    c0014a81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a4f:	80 fa 02             	cmp    dl,0x2
c0014a52:	75 05                	jne    c0014a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014a54:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014a57:	eb 28                	jmp    c0014a81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a59:	80 fa 03             	cmp    dl,0x3
c0014a5c:	75 05                	jne    c0014a63 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014a5e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014a61:	eb 1e                	jmp    c0014a81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a63:	31 c0                	xor    eax,eax
c0014a65:	80 fa 04             	cmp    dl,0x4
c0014a68:	74 17                	je     c0014a81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a6a:	80 fa 05             	cmp    dl,0x5
c0014a6d:	75 05                	jne    c0014a74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014a6f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014a72:	eb 0d                	jmp    c0014a81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a74:	80 fa 06             	cmp    dl,0x6
c0014a77:	75 05                	jne    c0014a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014a79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a7c:	eb 03                	jmp    c0014a81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a7e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014a81:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014a86:	0f 94 c2             	sete   dl
c0014a89:	80 f9 05             	cmp    cl,0x5
c0014a8c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014a90:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014a95:	d3 e0                	shl    eax,cl
c0014a97:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014a9b:	74 0a                	je     c0014aa7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014a9d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014aa0:	b9 07 00 00 00       	mov    ecx,0x7
c0014aa5:	eb 37                	jmp    c0014ade <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014aa7:	01 f8                	add    eax,edi
c0014aa9:	b9 03 00 00 00       	mov    ecx,0x3
c0014aae:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014ab3:	74 2b                	je     c0014ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014ab5:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014aba:	75 0d                	jne    c0014ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014abc:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014ac0:	01 c8                	add    eax,ecx
c0014ac2:	b9 04 00 00 00       	mov    ecx,0x4
c0014ac7:	eb 17                	jmp    c0014ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014ac9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014acc:	b9 07 00 00 00       	mov    ecx,0x7
c0014ad1:	eb 0d                	jmp    c0014ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014ad3:	b9 02 00 00 00       	mov    ecx,0x2
c0014ad8:	b2 01                	mov    dl,0x1
c0014ada:	31 c0                	xor    eax,eax
c0014adc:	eb 02                	jmp    c0014ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014ade:	31 d2                	xor    edx,edx
c0014ae0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ae4:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014aea:	88 11                	mov    BYTE PTR [ecx],dl
c0014aec:	5a                   	pop    edx
c0014aed:	5b                   	pop    ebx
c0014aee:	5e                   	pop    esi
c0014aef:	5f                   	pop    edi
c0014af0:	c3                   	ret    

c0014af1 <Krnl::smpEntry()>:
c0014af1:	eb fe                	jmp    c0014af1 <Krnl::smpEntry()>

c0014af3 <Krnl::startCPU(int)>:
c0014af3:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0014af8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014aff:	0f 84 36 01 00 00    	je     c0014c3b <Krnl::startCPU(int)+0x148>
c0014b05:	53                   	push   ebx
c0014b06:	83 ec 10             	sub    esp,0x10
c0014b09:	fa                   	cli    
c0014b0a:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0014b10:	6a 1b                	push   0x1b
c0014b12:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0014b18:	e8 61 47 ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014b1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b22:	89 c3                	mov    ebx,eax
c0014b24:	58                   	pop    eax
c0014b25:	5a                   	pop    edx
c0014b26:	53                   	push   ebx
c0014b27:	68 d8 66 02 c0       	push   0xc00266d8
c0014b2c:	e8 ca 85 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0014b31:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b3f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b49:	c1 e0 18             	shl    eax,0x18
c0014b4c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014b52:	83 c4 10             	add    esp,0x10
c0014b55:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014b5b:	09 c2                	or     edx,eax
c0014b5d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014b63:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014b69:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014b6f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014b75:	80 cd c5             	or     ch,0xc5
c0014b78:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b7e:	f3 90                	pause  
c0014b80:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b82:	0f ba e1 0c          	bt     ecx,0xc
c0014b86:	72 f6                	jb     c0014b7e <Krnl::startCPU(int)+0x8b>
c0014b88:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014b8e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014b94:	09 c1                	or     ecx,eax
c0014b96:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014b9c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014ba2:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014ba8:	80 cd 85             	or     ch,0x85
c0014bab:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014bb1:	f3 90                	pause  
c0014bb3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014bb5:	0f ba e1 0c          	bt     ecx,0xc
c0014bb9:	72 f6                	jb     c0014bb1 <Krnl::startCPU(int)+0xbe>
c0014bbb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014bc5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014bcb:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014bd1:	09 c1                	or     ecx,eax
c0014bd3:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014bd9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014bdf:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014be5:	81 c9 02 06 00 00    	or     ecx,0x602
c0014beb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014bf1:	f3 90                	pause  
c0014bf3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014bf5:	0f ba e1 0c          	bt     ecx,0xc
c0014bf9:	72 f6                	jb     c0014bf1 <Krnl::startCPU(int)+0xfe>
c0014bfb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014c05:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014c0b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014c11:	09 c8                	or     eax,ecx
c0014c13:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014c19:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014c1f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014c24:	0d 02 06 00 00       	or     eax,0x602
c0014c29:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014c2f:	f3 90                	pause  
c0014c31:	8b 02                	mov    eax,DWORD PTR [edx]
c0014c33:	0f ba e0 0c          	bt     eax,0xc
c0014c37:	72 f6                	jb     c0014c2f <Krnl::startCPU(int)+0x13c>
c0014c39:	eb fe                	jmp    c0014c39 <Krnl::startCPU(int)+0x146>
c0014c3b:	c3                   	ret    

c0014c3c <Krnl::startCPUs()>:
c0014c3c:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0014c41:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014c47:	88 c2                	mov    dl,al
c0014c49:	83 e2 0a             	and    edx,0xa
c0014c4c:	80 fa 0a             	cmp    dl,0xa
c0014c4f:	75 09                	jne    c0014c5a <Krnl::startCPUs()+0x1e>
c0014c51:	a8 01                	test   al,0x1
c0014c53:	74 05                	je     c0014c5a <Krnl::startCPUs()+0x1e>
c0014c55:	e9 41 b5 fe ff       	jmp    c000019b <prepareTramp>
c0014c5a:	c3                   	ret    
c0014c5b:	90                   	nop

c0014c5c <EnvVarContainer::getEnv(char const*)>:
c0014c5c:	57                   	push   edi
c0014c5d:	56                   	push   esi
c0014c5e:	53                   	push   ebx
c0014c5f:	31 db                	xor    ebx,ebx
c0014c61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c65:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014c67:	7e 2b                	jle    c0014c94 <EnvVarContainer::getEnv(char const*)+0x38>
c0014c69:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014c70:	50                   	push   eax
c0014c71:	50                   	push   eax
c0014c72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c75:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014c78:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c7c:	e8 5b bb fe ff       	call   c00007dc <strcmp>
c0014c81:	83 c4 10             	add    esp,0x10
c0014c84:	85 c0                	test   eax,eax
c0014c86:	75 09                	jne    c0014c91 <EnvVarContainer::getEnv(char const*)+0x35>
c0014c88:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c8b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014c8f:	eb 05                	jmp    c0014c96 <EnvVarContainer::getEnv(char const*)+0x3a>
c0014c91:	43                   	inc    ebx
c0014c92:	eb d1                	jmp    c0014c65 <EnvVarContainer::getEnv(char const*)+0x9>
c0014c94:	31 c0                	xor    eax,eax
c0014c96:	5b                   	pop    ebx
c0014c97:	5e                   	pop    esi
c0014c98:	5f                   	pop    edi
c0014c99:	c3                   	ret    

c0014c9a <EnvVarContainer::setEnv(char const*, char const*)>:
c0014c9a:	55                   	push   ebp
c0014c9b:	57                   	push   edi
c0014c9c:	56                   	push   esi
c0014c9d:	53                   	push   ebx
c0014c9e:	83 ec 28             	sub    esp,0x28
c0014ca1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014ca5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014ca9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014cad:	56                   	push   esi
c0014cae:	e8 fd b9 fe ff       	call   c00006b0 <strlen>
c0014cb3:	40                   	inc    eax
c0014cb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cb7:	e8 2b 51 ff ff       	call   c0009de7 <malloc>
c0014cbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cc3:	e8 e8 b9 fe ff       	call   c00006b0 <strlen>
c0014cc8:	40                   	inc    eax
c0014cc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ccc:	e8 16 51 ff ff       	call   c0009de7 <malloc>
c0014cd1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014cd8:	e8 d3 b9 fe ff       	call   c00006b0 <strlen>
c0014cdd:	83 c4 0c             	add    esp,0xc
c0014ce0:	40                   	inc    eax
c0014ce1:	50                   	push   eax
c0014ce2:	6a 00                	push   0x0
c0014ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ce8:	e8 a7 b9 fe ff       	call   c0000694 <memset>
c0014ced:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cf0:	e8 bb b9 fe ff       	call   c00006b0 <strlen>
c0014cf5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014cf9:	8d 48 01             	lea    ecx,[eax+0x1]
c0014cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d01:	89 de                	mov    esi,ebx
c0014d03:	e8 a8 b9 fe ff       	call   c00006b0 <strlen>
c0014d08:	83 c4 0c             	add    esp,0xc
c0014d0b:	40                   	inc    eax
c0014d0c:	50                   	push   eax
c0014d0d:	6a 00                	push   0x0
c0014d0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d13:	e8 7c b9 fe ff       	call   c0000694 <memset>
c0014d18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d1b:	e8 90 b9 fe ff       	call   c00006b0 <strlen>
c0014d20:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014d24:	8d 48 01             	lea    ecx,[eax+0x1]
c0014d27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014d2c:	40                   	inc    eax
c0014d2d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014d30:	c1 e0 03             	shl    eax,0x3
c0014d33:	5a                   	pop    edx
c0014d34:	59                   	pop    ecx
c0014d35:	50                   	push   eax
c0014d36:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014d39:	e8 95 50 ff ff       	call   c0009dd3 <realloc>
c0014d3e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014d42:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d45:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014d48:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0014d51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d53:	83 c4 2c             	add    esp,0x2c
c0014d56:	5b                   	pop    ebx
c0014d57:	5e                   	pop    esi
c0014d58:	5f                   	pop    edi
c0014d59:	5d                   	pop    ebp
c0014d5a:	c3                   	ret    
c0014d5b:	90                   	nop

c0014d5c <EnvVarContainer::deleteEnv(char const*)>:
c0014d5c:	c3                   	ret    
c0014d5d:	90                   	nop

c0014d5e <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014d5e:	55                   	push   ebp
c0014d5f:	57                   	push   edi
c0014d60:	56                   	push   esi
c0014d61:	53                   	push   ebx
c0014d62:	81 ec 38 01 00 00    	sub    esp,0x138
c0014d68:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014d6f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014d76:	68 14 01 00 00       	push   0x114
c0014d7b:	e8 67 50 ff ff       	call   c0009de7 <malloc>
c0014d80:	83 c4 0c             	add    esp,0xc
c0014d83:	89 c3                	mov    ebx,eax
c0014d85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d88:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014d8f:	50                   	push   eax
c0014d90:	e8 d1 88 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0014d95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d98:	e8 11 8c ff ff       	call   c000d9ae <File::exists()>
c0014d9d:	83 c4 10             	add    esp,0x10
c0014da0:	84 c0                	test   al,al
c0014da2:	75 31                	jne    c0014dd5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014da4:	50                   	push   eax
c0014da5:	50                   	push   eax
c0014da6:	6a 12                	push   0x12
c0014da8:	53                   	push   ebx
c0014da9:	e8 92 89 ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0014dae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014db0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014db3:	89 34 24             	mov    DWORD PTR [esp],esi
c0014db6:	e8 f5 b8 fe ff       	call   c00006b0 <strlen>
c0014dbb:	5a                   	pop    edx
c0014dbc:	31 d2                	xor    edx,edx
c0014dbe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014dc2:	51                   	push   ecx
c0014dc3:	56                   	push   esi
c0014dc4:	52                   	push   edx
c0014dc5:	50                   	push   eax
c0014dc6:	53                   	push   ebx
c0014dc7:	ff d7                	call   edi
c0014dc9:	83 c4 14             	add    esp,0x14
c0014dcc:	53                   	push   ebx
c0014dcd:	e8 cc 89 ff ff       	call   c000d79e <File::close()>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	56                   	push   esi
c0014dd6:	31 f6                	xor    esi,esi
c0014dd8:	68 00 01 00 00       	push   0x100
c0014ddd:	6a 00                	push   0x0
c0014ddf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014de3:	50                   	push   eax
c0014de4:	e8 ab b8 fe ff       	call   c0000694 <memset>
c0014de9:	5f                   	pop    edi
c0014dea:	58                   	pop    eax
c0014deb:	6a 01                	push   0x1
c0014ded:	53                   	push   ebx
c0014dee:	e8 4d 89 ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0014df3:	83 c4 10             	add    esp,0x10
c0014df6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014dfe:	83 ec 0c             	sub    esp,0xc
c0014e01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e03:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014e07:	51                   	push   ecx
c0014e08:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014e0c:	52                   	push   edx
c0014e0d:	6a 00                	push   0x0
c0014e0f:	6a 01                	push   0x1
c0014e11:	53                   	push   ebx
c0014e12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e15:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014e19:	83 c4 20             	add    esp,0x20
c0014e1c:	3c 0d                	cmp    al,0xd
c0014e1e:	0f 84 09 01 00 00    	je     c0014f2d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e24:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014e29:	0f 84 ef 00 00 00    	je     c0014f1e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e2f:	3c 0a                	cmp    al,0xa
c0014e31:	74 13                	je     c0014e46 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e38:	74 0c                	je     c0014e46 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e3a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014e40:	0f 8e d8 00 00 00    	jle    c0014f1e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e4a:	83 ec 0c             	sub    esp,0xc
c0014e4d:	8d 78 01             	lea    edi,[eax+0x1]
c0014e50:	57                   	push   edi
c0014e51:	e8 91 4f ff ff       	call   c0009de7 <malloc>
c0014e56:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014e5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e5e:	8d 56 04             	lea    edx,[esi+0x4]
c0014e61:	89 14 24             	mov    DWORD PTR [esp],edx
c0014e64:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014e68:	e8 7a 4f ff ff       	call   c0009de7 <malloc>
c0014e6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e71:	83 c4 0c             	add    esp,0xc
c0014e74:	57                   	push   edi
c0014e75:	6a 00                	push   0x0
c0014e77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e7b:	e8 14 b8 fe ff       	call   c0000694 <memset>
c0014e80:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014e84:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014e88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014e8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e8e:	83 c4 0c             	add    esp,0xc
c0014e91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e95:	52                   	push   edx
c0014e96:	6a 00                	push   0x0
c0014e98:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014e9c:	e8 f3 b7 fe ff       	call   c0000694 <memset>
c0014ea1:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014ea5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014ea9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014eac:	e8 ff b7 fe ff       	call   c00006b0 <strlen>
c0014eb1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014eb5:	89 c1                	mov    ecx,eax
c0014eb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014eb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ebc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014ebf:	40                   	inc    eax
c0014ec0:	83 c4 10             	add    esp,0x10
c0014ec3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014ec6:	85 d2                	test   edx,edx
c0014ec8:	75 0c                	jne    c0014ed6 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014eca:	83 ec 0c             	sub    esp,0xc
c0014ecd:	6a 08                	push   0x8
c0014ecf:	e8 13 4f ff ff       	call   c0009de7 <malloc>
c0014ed4:	eb 0c                	jmp    c0014ee2 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014ed6:	c1 e0 03             	shl    eax,0x3
c0014ed9:	51                   	push   ecx
c0014eda:	51                   	push   ecx
c0014edb:	50                   	push   eax
c0014edc:	52                   	push   edx
c0014edd:	e8 f1 4e ff ff       	call   c0009dd3 <realloc>
c0014ee2:	83 c4 10             	add    esp,0x10
c0014ee5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014ee8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014eeb:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014eee:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014ef2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014ef6:	b9 08 00 00 00       	mov    ecx,0x8
c0014efb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014efd:	31 f6                	xor    esi,esi
c0014eff:	50                   	push   eax
c0014f00:	68 00 01 00 00       	push   0x100
c0014f05:	6a 00                	push   0x0
c0014f07:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014f0b:	50                   	push   eax
c0014f0c:	e8 83 b7 fe ff       	call   c0000694 <memset>
c0014f11:	83 c4 10             	add    esp,0x10
c0014f14:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014f1c:	eb 0f                	jmp    c0014f2d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014f1e:	3c 3d                	cmp    al,0x3d
c0014f20:	74 07                	je     c0014f29 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014f22:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014f26:	46                   	inc    esi
c0014f27:	eb 04                	jmp    c0014f2d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014f29:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014f2d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014f32:	0f 85 c6 fe ff ff    	jne    c0014dfe <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014f38:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014f3e:	5b                   	pop    ebx
c0014f3f:	5e                   	pop    esi
c0014f40:	5f                   	pop    edi
c0014f41:	5d                   	pop    ebp
c0014f42:	c3                   	ret    
c0014f43:	90                   	nop

c0014f44 <EnvVarContainer::__loadSystem()>:
c0014f44:	83 ec 10             	sub    esp,0x10
c0014f47:	68 e0 85 02 c0       	push   0xc00285e0
c0014f4c:	68 e9 66 02 c0       	push   0xc00266e9
c0014f51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f55:	e8 04 fe ff ff       	call   c0014d5e <EnvVarContainer::loadFrom(char const*, char const*)>
c0014f5a:	83 c4 1c             	add    esp,0x1c
c0014f5d:	c3                   	ret    

c0014f5e <EnvVarContainer::__loadUser()>:
c0014f5e:	c3                   	ret    
c0014f5f:	90                   	nop

c0014f60 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014f6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014f75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014f80:	90                   	nop
c0014f81:	c3                   	ret    

c0014f82 <EnvVarContainer::~EnvVarContainer()>:
c0014f82:	83 ec 0c             	sub    esp,0xc
c0014f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f8c:	85 c0                	test   eax,eax
c0014f8e:	74 1d                	je     c0014fad <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f94:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f96:	85 c0                	test   eax,eax
c0014f98:	74 13                	je     c0014fad <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fa1:	83 ec 0c             	sub    esp,0xc
c0014fa4:	50                   	push   eax
c0014fa5:	e8 4d 4e ff ff       	call   c0009df7 <free>
c0014faa:	83 c4 10             	add    esp,0x10
c0014fad:	90                   	nop
c0014fae:	83 c4 0c             	add    esp,0xc
c0014fb1:	c3                   	ret    

c0014fb2 <Krnl::getEnv(Process*, char const*)>:
c0014fb2:	53                   	push   ebx
c0014fb3:	83 ec 08             	sub    esp,0x8
c0014fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014fbe:	39 05 50 a1 02 c0    	cmp    DWORD PTR ds:0xc002a150,eax
c0014fc4:	74 04                	je     c0014fca <Krnl::getEnv(Process*, char const*)+0x18>
c0014fc6:	85 c0                	test   eax,eax
c0014fc8:	75 0b                	jne    c0014fd5 <Krnl::getEnv(Process*, char const*)+0x23>
c0014fca:	a1 d4 96 02 c0       	mov    eax,ds:0xc00296d4
c0014fcf:	85 c0                	test   eax,eax
c0014fd1:	75 19                	jne    c0014fec <Krnl::getEnv(Process*, char const*)+0x3a>
c0014fd3:	eb 27                	jmp    c0014ffc <Krnl::getEnv(Process*, char const*)+0x4a>
c0014fd5:	52                   	push   edx
c0014fd6:	52                   	push   edx
c0014fd7:	53                   	push   ebx
c0014fd8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014fde:	e8 79 fc ff ff       	call   c0014c5c <EnvVarContainer::getEnv(char const*)>
c0014fe3:	83 c4 10             	add    esp,0x10
c0014fe6:	85 c0                	test   eax,eax
c0014fe8:	75 28                	jne    c0015012 <Krnl::getEnv(Process*, char const*)+0x60>
c0014fea:	eb de                	jmp    c0014fca <Krnl::getEnv(Process*, char const*)+0x18>
c0014fec:	52                   	push   edx
c0014fed:	52                   	push   edx
c0014fee:	53                   	push   ebx
c0014fef:	50                   	push   eax
c0014ff0:	e8 67 fc ff ff       	call   c0014c5c <EnvVarContainer::getEnv(char const*)>
c0014ff5:	83 c4 10             	add    esp,0x10
c0014ff8:	85 c0                	test   eax,eax
c0014ffa:	75 16                	jne    c0015012 <Krnl::getEnv(Process*, char const*)+0x60>
c0014ffc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0015000:	a1 d8 96 02 c0       	mov    eax,ds:0xc00296d8
c0015005:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015009:	83 c4 08             	add    esp,0x8
c001500c:	5b                   	pop    ebx
c001500d:	e9 4a fc ff ff       	jmp    c0014c5c <EnvVarContainer::getEnv(char const*)>
c0015012:	83 c4 08             	add    esp,0x8
c0015015:	5b                   	pop    ebx
c0015016:	c3                   	ret    

c0015017 <Krnl::setEnvSystem(char const*, char const*)>:
c0015017:	83 ec 10             	sub    esp,0x10
c001501a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001501e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015022:	ff 35 d8 96 02 c0    	push   DWORD PTR ds:0xc00296d8
c0015028:	e8 6d fc ff ff       	call   c0014c9a <EnvVarContainer::setEnv(char const*, char const*)>
c001502d:	83 c4 1c             	add    esp,0x1c
c0015030:	c3                   	ret    

c0015031 <Krnl::setEnvUser(char const*, char const*)>:
c0015031:	a1 d4 96 02 c0       	mov    eax,ds:0xc00296d4
c0015036:	85 c0                	test   eax,eax
c0015038:	74 15                	je     c001504f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001503a:	83 ec 10             	sub    esp,0x10
c001503d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015041:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015045:	50                   	push   eax
c0015046:	e8 4f fc ff ff       	call   c0014c9a <EnvVarContainer::setEnv(char const*, char const*)>
c001504b:	83 c4 1c             	add    esp,0x1c
c001504e:	c3                   	ret    
c001504f:	c3                   	ret    

c0015050 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0015050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015054:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001505a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001505e:	e9 37 fc ff ff       	jmp    c0014c9a <EnvVarContainer::setEnv(char const*, char const*)>

c0015063 <Krnl::deleteEnvSystem(char const*)>:
c0015063:	c3                   	ret    

c0015064 <Krnl::deleteEnvUser(char const*)>:
c0015064:	c3                   	ret    

c0015065 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0015065:	c3                   	ret    

c0015066 <Krnl::newProcessEnv(Process*)>:
c0015066:	83 ec 28             	sub    esp,0x28
c0015069:	6a 0c                	push   0xc
c001506b:	e8 77 4d ff ff       	call   c0009de7 <malloc>
c0015070:	5a                   	pop    edx
c0015071:	59                   	pop    ecx
c0015072:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015076:	50                   	push   eax
c0015077:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001507b:	e8 e0 fe ff ff       	call   c0014f60 <EnvVarContainer::EnvVarContainer(Process*)>
c0015080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015084:	83 c4 2c             	add    esp,0x2c
c0015087:	c3                   	ret    

c0015088 <Krnl::copyProcessEnv(Process*, Process*)>:
c0015088:	57                   	push   edi
c0015089:	56                   	push   esi
c001508a:	53                   	push   ebx
c001508b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001508f:	83 ec 0c             	sub    esp,0xc
c0015092:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0015098:	6a 0c                	push   0xc
c001509a:	e8 48 4d ff ff       	call   c0009de7 <malloc>
c001509f:	89 c3                	mov    ebx,eax
c00150a1:	58                   	pop    eax
c00150a2:	5a                   	pop    edx
c00150a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150a7:	53                   	push   ebx
c00150a8:	e8 b3 fe ff ff       	call   c0014f60 <EnvVarContainer::EnvVarContainer(Process*)>
c00150ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00150af:	89 03                	mov    DWORD PTR [ebx],eax
c00150b1:	c1 e0 03             	shl    eax,0x3
c00150b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00150b7:	e8 2b 4d ff ff       	call   c0009de7 <malloc>
c00150bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00150bf:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00150c1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00150c4:	c1 e1 03             	shl    ecx,0x3
c00150c7:	89 c7                	mov    edi,eax
c00150c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150cb:	83 c4 10             	add    esp,0x10
c00150ce:	89 d8                	mov    eax,ebx
c00150d0:	5b                   	pop    ebx
c00150d1:	5e                   	pop    esi
c00150d2:	5f                   	pop    edi
c00150d3:	c3                   	ret    

c00150d4 <Krnl::loadSystemEnv()>:
c00150d4:	53                   	push   ebx
c00150d5:	83 ec 14             	sub    esp,0x14
c00150d8:	6a 0c                	push   0xc
c00150da:	e8 08 4d ff ff       	call   c0009de7 <malloc>
c00150df:	89 c3                	mov    ebx,eax
c00150e1:	58                   	pop    eax
c00150e2:	5a                   	pop    edx
c00150e3:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c00150e9:	53                   	push   ebx
c00150ea:	e8 71 fe ff ff       	call   c0014f60 <EnvVarContainer::EnvVarContainer(Process*)>
c00150ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150f2:	89 1d d8 96 02 c0    	mov    DWORD PTR ds:0xc00296d8,ebx
c00150f8:	e8 47 fe ff ff       	call   c0014f44 <EnvVarContainer::__loadSystem()>
c00150fd:	83 c4 18             	add    esp,0x18
c0015100:	5b                   	pop    ebx
c0015101:	c3                   	ret    

c0015102 <Krnl::loadUserEnv()>:
c0015102:	53                   	push   ebx
c0015103:	83 ec 14             	sub    esp,0x14
c0015106:	6a 0c                	push   0xc
c0015108:	e8 da 4c ff ff       	call   c0009de7 <malloc>
c001510d:	89 c3                	mov    ebx,eax
c001510f:	58                   	pop    eax
c0015110:	5a                   	pop    edx
c0015111:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0015117:	53                   	push   ebx
c0015118:	e8 43 fe ff ff       	call   c0014f60 <EnvVarContainer::EnvVarContainer(Process*)>
c001511d:	89 1d d4 96 02 c0    	mov    DWORD PTR ds:0xc00296d4,ebx
c0015123:	83 c4 18             	add    esp,0x18
c0015126:	5b                   	pop    ebx
c0015127:	c3                   	ret    

c0015128 <Krnl::flushEnv()>:
c0015128:	c3                   	ret    

c0015129 <Krnl::getProcessTotalEnvCount(Process*)>:
c0015129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001512d:	8b 15 d4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296d4
c0015133:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0015139:	a1 d8 96 02 c0       	mov    eax,ds:0xc00296d8
c001513e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015140:	03 01                	add    eax,DWORD PTR [ecx]
c0015142:	85 d2                	test   edx,edx
c0015144:	74 02                	je     c0015148 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0015146:	03 02                	add    eax,DWORD PTR [edx]
c0015148:	c3                   	ret    

c0015149 <Krnl::getProcessEnvPair(Process*, int)>:
c0015149:	57                   	push   edi
c001514a:	56                   	push   esi
c001514b:	8b 35 d4 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296d4
c0015151:	53                   	push   ebx
c0015152:	85 f6                	test   esi,esi
c0015154:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015158:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001515c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0015162:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015166:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015168:	75 16                	jne    c0015180 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001516a:	39 c2                	cmp    edx,eax
c001516c:	7c 16                	jl     c0015184 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001516e:	8b 0d d8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296d8
c0015174:	8b 31                	mov    esi,DWORD PTR [ecx]
c0015176:	01 c6                	add    esi,eax
c0015178:	39 d6                	cmp    esi,edx
c001517a:	7e 3c                	jle    c00151b8 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001517c:	29 c2                	sub    edx,eax
c001517e:	eb 04                	jmp    c0015184 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0015180:	39 c2                	cmp    edx,eax
c0015182:	7d 05                	jge    c0015189 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0015184:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0015187:	eb 20                	jmp    c00151a9 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0015189:	8b 3e                	mov    edi,DWORD PTR [esi]
c001518b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001518e:	39 d1                	cmp    ecx,edx
c0015190:	7e 04                	jle    c0015196 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0015192:	29 c2                	sub    edx,eax
c0015194:	eb 10                	jmp    c00151a6 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0015196:	8b 35 d8 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296d8
c001519c:	03 0e                	add    ecx,DWORD PTR [esi]
c001519e:	39 d1                	cmp    ecx,edx
c00151a0:	7e 16                	jle    c00151b8 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00151a2:	29 c2                	sub    edx,eax
c00151a4:	29 fa                	sub    edx,edi
c00151a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00151a9:	8d 14 d0             	lea    edx,[eax+edx*8]
c00151ac:	8b 02                	mov    eax,DWORD PTR [edx]
c00151ae:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00151b1:	89 03                	mov    DWORD PTR [ebx],eax
c00151b3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00151b6:	eb 1d                	jmp    c00151d5 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00151b8:	83 ec 0c             	sub    esp,0xc
c00151bb:	68 0b 67 02 c0       	push   0xc002670b
c00151c0:	e8 18 00 00 00       	call   c00151dd <Krnl::panic(char const*)>
c00151c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00151cb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00151d2:	83 c4 10             	add    esp,0x10
c00151d5:	89 d8                	mov    eax,ebx
c00151d7:	5b                   	pop    ebx
c00151d8:	5e                   	pop    esi
c00151d9:	5f                   	pop    edi
c00151da:	c2 04 00             	ret    0x4

c00151dd <Krnl::panic(char const*)>:
c00151dd:	53                   	push   ebx
c00151de:	83 ec 10             	sub    esp,0x10
c00151e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00151e5:	fa                   	cli    
c00151e6:	c6 05 e4 96 02 c0 01 	mov    BYTE PTR ds:0xc00296e4,0x1
c00151ed:	53                   	push   ebx
c00151ee:	68 25 67 02 c0       	push   0xc0026725
c00151f3:	e8 03 7f ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00151f8:	83 c4 10             	add    esp,0x10
c00151fb:	a1 28 92 02 c0       	mov    eax,ds:0xc0029228
c0015200:	85 c0                	test   eax,eax
c0015202:	74 0f                	je     c0015213 <Krnl::panic(char const*)+0x36>
c0015204:	b8 00 10 00 00       	mov    eax,0x1000
c0015209:	0f 22 d8             	mov    cr3,eax
c001520c:	b8 00 50 00 00       	mov    eax,0x5000
c0015211:	ff d0                	call   eax
c0015213:	51                   	push   ecx
c0015214:	6a 01                	push   0x1
c0015216:	6a 0f                	push   0xf
c0015218:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001521e:	e8 11 5b ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015223:	58                   	pop    eax
c0015224:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001522a:	e8 27 60 ff ff       	call   c000b256 <VgaText::clearScreen()>
c001522f:	58                   	pop    eax
c0015230:	5a                   	pop    edx
c0015231:	68 7c 67 02 c0       	push   0xc002677c
c0015236:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001523c:	e8 33 5b ff ff       	call   c000ad74 <VgaText::setTitle(char*)>
c0015241:	83 c4 0c             	add    esp,0xc
c0015244:	6a 01                	push   0x1
c0015246:	6a 0f                	push   0xf
c0015248:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001524e:	e8 e1 5a ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015253:	59                   	pop    ecx
c0015254:	58                   	pop    eax
c0015255:	68 3e 67 02 c0       	push   0xc002673e
c001525a:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015260:	e8 7d 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015265:	58                   	pop    eax
c0015266:	5a                   	pop    edx
c0015267:	68 c8 67 02 c0       	push   0xc00267c8
c001526c:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015272:	e8 6b 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015277:	59                   	pop    ecx
c0015278:	58                   	pop    eax
c0015279:	68 5a 67 02 c0       	push   0xc002675a
c001527e:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015284:	e8 59 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015289:	58                   	pop    eax
c001528a:	5a                   	pop    edx
c001528b:	53                   	push   ebx
c001528c:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015292:	e8 4b 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015297:	59                   	pop    ecx
c0015298:	5b                   	pop    ebx
c0015299:	68 7a 67 02 c0       	push   0xc002677a
c001529e:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00152a4:	e8 39 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152a9:	58                   	pop    eax
c00152aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152ae:	e8 52 32 00 00       	call   c0018505 <Thr::getDriverNameFromAddress(unsigned long)>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	89 c3                	mov    ebx,eax
c00152b8:	85 c0                	test   eax,eax
c00152ba:	0f 84 34 01 00 00    	je     c00153f4 <Krnl::panic(char const*)+0x217>
c00152c0:	83 ec 08             	sub    esp,0x8
c00152c3:	68 04 68 02 c0       	push   0xc0026804
c00152c8:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00152ce:	e8 0f 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152d3:	59                   	pop    ecx
c00152d4:	58                   	pop    eax
c00152d5:	68 5a 67 02 c0       	push   0xc002675a
c00152da:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00152e0:	e8 fd 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152e5:	58                   	pop    eax
c00152e6:	5a                   	pop    edx
c00152e7:	53                   	push   ebx
c00152e8:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00152ee:	e8 ef 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	83 ec 08             	sub    esp,0x8
c00152f9:	68 79 67 02 c0       	push   0xc0026779
c00152fe:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015304:	e8 d9 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015309:	58                   	pop    eax
c001530a:	5a                   	pop    edx
c001530b:	68 5c 68 02 c0       	push   0xc002685c
c0015310:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015316:	e8 c7 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001531b:	59                   	pop    ecx
c001531c:	5b                   	pop    ebx
c001531d:	68 9c 68 02 c0       	push   0xc002689c
c0015322:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015328:	e8 b5 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001532d:	58                   	pop    eax
c001532e:	5a                   	pop    edx
c001532f:	68 65 67 02 c0       	push   0xc0026765
c0015334:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001533a:	e8 a3 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001533f:	59                   	pop    ecx
c0015340:	5b                   	pop    ebx
c0015341:	68 e0 68 02 c0       	push   0xc00268e0
c0015346:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001534c:	e8 91 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015351:	58                   	pop    eax
c0015352:	5a                   	pop    edx
c0015353:	68 7d 67 02 c0       	push   0xc002677d
c0015358:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001535e:	e8 7f 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015363:	0f 20 c0             	mov    eax,cr0
c0015366:	59                   	pop    ecx
c0015367:	5b                   	pop    ebx
c0015368:	50                   	push   eax
c0015369:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001536f:	e8 28 60 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c0015374:	58                   	pop    eax
c0015375:	5a                   	pop    edx
c0015376:	68 87 67 02 c0       	push   0xc0026787
c001537b:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015381:	e8 5c 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015386:	0f 20 d0             	mov    eax,cr2
c0015389:	59                   	pop    ecx
c001538a:	5b                   	pop    ebx
c001538b:	50                   	push   eax
c001538c:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015392:	e8 05 60 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c0015397:	58                   	pop    eax
c0015398:	5a                   	pop    edx
c0015399:	68 91 67 02 c0       	push   0xc0026791
c001539e:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153a4:	e8 39 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153a9:	0f 20 d8             	mov    eax,cr3
c00153ac:	59                   	pop    ecx
c00153ad:	5b                   	pop    ebx
c00153ae:	50                   	push   eax
c00153af:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153b5:	e8 e2 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c00153ba:	58                   	pop    eax
c00153bb:	5a                   	pop    edx
c00153bc:	68 a4 67 02 c0       	push   0xc00267a4
c00153c1:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153c7:	e8 16 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153cc:	0f 20 e0             	mov    eax,cr4
c00153cf:	59                   	pop    ecx
c00153d0:	5b                   	pop    ebx
c00153d1:	50                   	push   eax
c00153d2:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153d8:	e8 bf 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c00153dd:	58                   	pop    eax
c00153de:	5a                   	pop    edx
c00153df:	68 ae 67 02 c0       	push   0xc00267ae
c00153e4:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c00153ea:	e8 f3 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	eb fe                	jmp    c00153f2 <Krnl::panic(char const*)+0x215>
c00153f4:	51                   	push   ecx
c00153f5:	51                   	push   ecx
c00153f6:	68 30 68 02 c0       	push   0xc0026830
c00153fb:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015401:	e8 dc 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015406:	5b                   	pop    ebx
c0015407:	58                   	pop    eax
c0015408:	68 5a 67 02 c0       	push   0xc002675a
c001540d:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c0015413:	e8 ca 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015418:	58                   	pop    eax
c0015419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001541e:	5a                   	pop    edx
c001541f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015422:	83 c0 0c             	add    eax,0xc
c0015425:	50                   	push   eax
c0015426:	ff 35 84 8c 02 c0    	push   DWORD PTR ds:0xc0028c84
c001542c:	e8 b1 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015431:	83 c4 10             	add    esp,0x10
c0015434:	e9 bd fe ff ff       	jmp    c00152f6 <Krnl::panic(char const*)+0x119>

c0015439 <Krnl::powerThread(void*)>:
c0015439:	53                   	push   ebx
c001543a:	83 ec 08             	sub    esp,0x8
c001543d:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0015442:	48                   	dec    eax
c0015443:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0015448:	75 01                	jne    c001544b <Krnl::powerThread(void*)+0x12>
c001544a:	fb                   	sti    
c001544b:	52                   	push   edx
c001544c:	52                   	push   edx
c001544d:	ff 35 44 97 02 c0    	push   DWORD PTR ds:0xc0029744
c0015453:	68 06 69 02 c0       	push   0xc0026906
c0015458:	e8 9e 7c ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001545d:	59                   	pop    ecx
c001545e:	8b 1d 34 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029734
c0015464:	58                   	pop    eax
c0015465:	c6 05 00 97 02 c0 00 	mov    BYTE PTR ds:0xc0029700,0x0
c001546c:	53                   	push   ebx
c001546d:	68 10 69 02 c0       	push   0xc0026910
c0015472:	e8 84 7c ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0015477:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001547e:	e8 c1 3d 00 00       	call   c0019244 <sleep(unsigned int)>
c0015483:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0015488:	83 c4 10             	add    esp,0x10
c001548b:	83 c0 0a             	add    eax,0xa
c001548e:	85 db                	test   ebx,ebx
c0015490:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c0015495:	74 b4                	je     c001544b <Krnl::powerThread(void*)+0x12>
c0015497:	39 d8                	cmp    eax,ebx
c0015499:	7e b0                	jle    c001544b <Krnl::powerThread(void*)+0x12>
c001549b:	83 ec 0c             	sub    esp,0xc
c001549e:	68 28 69 02 c0       	push   0xc0026928
c00154a3:	e8 53 7c ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00154a8:	58                   	pop    eax
c00154a9:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c00154af:	e8 5e 3e ff ff       	call   c0009312 <Computer::sleep()>
c00154b4:	83 c4 10             	add    esp,0x10
c00154b7:	eb 92                	jmp    c001544b <Krnl::powerThread(void*)+0x12>

c00154b9 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00154b9:	57                   	push   edi
c00154ba:	b9 09 00 00 00       	mov    ecx,0x9
c00154bf:	56                   	push   esi
c00154c0:	bf 20 97 02 c0       	mov    edi,0xc0029720
c00154c5:	fc                   	cld    
c00154c6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00154ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00154cc:	5e                   	pop    esi
c00154cd:	5f                   	pop    edi
c00154ce:	c3                   	ret    

c00154cf <Krnl::userIOReceived()>:
c00154cf:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c00154d9:	c3                   	ret    

c00154da <Krnl::handlePowerButton()>:
c00154da:	83 ec 0c             	sub    esp,0xc
c00154dd:	a1 20 97 02 c0       	mov    eax,ds:0xc0029720
c00154e2:	83 f8 02             	cmp    eax,0x2
c00154e5:	75 10                	jne    c00154f7 <Krnl::handlePowerButton()+0x1d>
c00154e7:	83 ec 0c             	sub    esp,0xc
c00154ea:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c00154f0:	e8 ed 3d ff ff       	call   c00092e2 <Computer::shutdown()>
c00154f5:	eb 11                	jmp    c0015508 <Krnl::handlePowerButton()+0x2e>
c00154f7:	48                   	dec    eax
c00154f8:	75 11                	jne    c001550b <Krnl::handlePowerButton()+0x31>
c00154fa:	83 ec 0c             	sub    esp,0xc
c00154fd:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0015503:	e8 0a 3e ff ff       	call   c0009312 <Computer::sleep()>
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	83 c4 0c             	add    esp,0xc
c001550e:	c3                   	ret    

c001550f <Krnl::handleSleepButton()>:
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	a1 24 97 02 c0       	mov    eax,ds:0xc0029724
c0015517:	83 f8 02             	cmp    eax,0x2
c001551a:	75 10                	jne    c001552c <Krnl::handleSleepButton()+0x1d>
c001551c:	83 ec 0c             	sub    esp,0xc
c001551f:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0015525:	e8 b8 3d ff ff       	call   c00092e2 <Computer::shutdown()>
c001552a:	eb 11                	jmp    c001553d <Krnl::handleSleepButton()+0x2e>
c001552c:	48                   	dec    eax
c001552d:	75 11                	jne    c0015540 <Krnl::handleSleepButton()+0x31>
c001552f:	83 ec 0c             	sub    esp,0xc
c0015532:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0015538:	e8 d5 3d ff ff       	call   c0009312 <Computer::sleep()>
c001553d:	83 c4 10             	add    esp,0x10
c0015540:	83 c4 0c             	add    esp,0xc
c0015543:	c3                   	ret    

c0015544 <Krnl::setupPowerManager()>:
c0015544:	83 ec 0c             	sub    esp,0xc
c0015547:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0015551:	68 f0 00 00 00       	push   0xf0
c0015556:	c6 05 00 97 02 c0 00 	mov    BYTE PTR ds:0xc0029700,0x0
c001555d:	6a 00                	push   0x0
c001555f:	68 39 54 01 c0       	push   0xc0015439
c0015564:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c001556a:	e8 b1 37 00 00       	call   c0018d20 <Process::createThread(void (*)(void*), void*, int)>
c001556f:	c7 05 20 97 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029720,0x2
c0015579:	c7 05 24 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029724,0x1
c0015583:	c7 05 28 97 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029728,0x3
c001558d:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0015597:	c7 05 38 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029738,0x0
c00155a1:	c7 05 30 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029730,0x0
c00155ab:	c7 05 3c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002973c,0x0
c00155b5:	c7 05 34 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029734,0x3c
c00155bf:	c7 05 40 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029740,0x3c
c00155c9:	83 c4 1c             	add    esp,0x1c
c00155cc:	c3                   	ret    

c00155cd <Krnl::initRNG()>:
c00155cd:	56                   	push   esi
c00155ce:	53                   	push   ebx
c00155cf:	52                   	push   edx
c00155d0:	80 3d 50 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029750,0x0
c00155d7:	74 15                	je     c00155ee <Krnl::initRNG()+0x21>
c00155d9:	83 ec 0c             	sub    esp,0xc
c00155dc:	68 35 69 02 c0       	push   0xc0026935
c00155e1:	e8 f7 fb ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	e9 b4 00 00 00       	jmp    c00156a2 <Krnl::initRNG()+0xd5>
c00155ee:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00155f3:	c7 05 48 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029748,0x0
c00155fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015603:	c7 05 4c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002974c,0x0
c001560d:	f6 80 90 11 00 00 01 	test   BYTE PTR [eax+0x1190],0x1
c0015614:	74 1f                	je     c0015635 <Krnl::initRNG()+0x68>
c0015616:	e8 fe ab fe ff       	call   c0000219 <getRDRAND>
c001561b:	c7 05 48 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029748,0x0
c0015625:	a3 4c 97 02 c0       	mov    ds:0xc002974c,eax
c001562a:	e8 ea ab fe ff       	call   c0000219 <getRDRAND>
c001562f:	09 05 48 97 02 c0    	or     DWORD PTR ds:0xc0029748,eax
c0015635:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001563a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015640:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0015647:	74 10                	je     c0015659 <Krnl::initRNG()+0x8c>
c0015649:	0f 31                	rdtsc  
c001564b:	89 c1                	mov    ecx,eax
c001564d:	31 15 4c 97 02 c0    	xor    DWORD PTR ds:0xc002974c,edx
c0015653:	31 0d 48 97 02 c0    	xor    DWORD PTR ds:0xc0029748,ecx
c0015659:	8b 0d 48 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029748
c001565f:	8b 1d 4c 97 02 c0    	mov    ebx,DWORD PTR ds:0xc002974c
c0015665:	89 c8                	mov    eax,ecx
c0015667:	8b 35 2c 92 02 c0    	mov    esi,DWORD PTR ds:0xc002922c
c001566d:	0f a4 d9 11          	shld   ecx,ebx,0x11
c0015671:	c6 05 50 97 02 c0 01 	mov    BYTE PTR ds:0xc0029750,0x1
c0015678:	31 ce                	xor    esi,ecx
c001567a:	0f a4 c3 11          	shld   ebx,eax,0x11
c001567e:	89 f0                	mov    eax,esi
c0015680:	89 da                	mov    edx,ebx
c0015682:	0f ac d0 1b          	shrd   eax,edx,0x1b
c0015686:	0f ac f2 1b          	shrd   edx,esi,0x1b
c001568a:	35 f6 5d 72 45       	xor    eax,0x45725df6
c001568f:	89 d1                	mov    ecx,edx
c0015691:	a3 48 97 02 c0       	mov    ds:0xc0029748,eax
c0015696:	89 c8                	mov    eax,ecx
c0015698:	35 89 c3 8d 30       	xor    eax,0x308dc389
c001569d:	a3 4c 97 02 c0       	mov    ds:0xc002974c,eax
c00156a2:	58                   	pop    eax
c00156a3:	5b                   	pop    ebx
c00156a4:	5e                   	pop    esi
c00156a5:	c3                   	ret    

c00156a6 <Krnl::rand()>:
c00156a6:	53                   	push   ebx
c00156a7:	83 ec 08             	sub    esp,0x8
c00156aa:	80 3d 50 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029750,0x0
c00156b1:	75 10                	jne    c00156c3 <Krnl::rand()+0x1d>
c00156b3:	83 ec 0c             	sub    esp,0xc
c00156b6:	68 4c 69 02 c0       	push   0xc002694c
c00156bb:	e8 1d fb ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00156c0:	83 c4 10             	add    esp,0x10
c00156c3:	69 05 48 97 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029748,0x2875
c00156cd:	69 0d 4c 97 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002974c,0xa2e7b175
c00156d7:	01 c1                	add    ecx,eax
c00156d9:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00156de:	f7 25 48 97 02 c0    	mul    DWORD PTR ds:0xc0029748
c00156e4:	01 ca                	add    edx,ecx
c00156e6:	05 ef 04 b5 00       	add    eax,0xb504ef
c00156eb:	83 d2 00             	adc    edx,0x0
c00156ee:	a3 48 97 02 c0       	mov    ds:0xc0029748,eax
c00156f3:	0f b7 da             	movzx  ebx,dx
c00156f6:	89 1d 4c 97 02 c0    	mov    DWORD PTR ds:0xc002974c,ebx
c00156fc:	89 da                	mov    edx,ebx
c00156fe:	83 c4 08             	add    esp,0x8
c0015701:	0f ac d0 10          	shrd   eax,edx,0x10
c0015705:	5b                   	pop    ebx
c0015706:	c3                   	ret    
c0015707:	90                   	nop

c0015708 <Net::switchEndian16(unsigned short)>:
c0015708:	83 ec 04             	sub    esp,0x4
c001570b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001570f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0015713:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0015717:	c1 f8 08             	sar    eax,0x8
c001571a:	89 c2                	mov    edx,eax
c001571c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0015720:	c1 e0 08             	shl    eax,0x8
c0015723:	09 d0                	or     eax,edx
c0015725:	83 c4 04             	add    esp,0x4
c0015728:	c3                   	ret    
c0015729:	8d 76 00             	lea    esi,[esi+0x0]

c001572c <Net::switchEndian32(unsigned int)>:
c001572c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015730:	c1 e8 18             	shr    eax,0x18
c0015733:	89 c2                	mov    edx,eax
c0015735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015739:	c1 e0 08             	shl    eax,0x8
c001573c:	25 00 00 ff 00       	and    eax,0xff0000
c0015741:	09 c2                	or     edx,eax
c0015743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015747:	c1 e8 08             	shr    eax,0x8
c001574a:	25 00 ff 00 00       	and    eax,0xff00
c001574f:	09 c2                	or     edx,eax
c0015751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015755:	c1 e0 18             	shl    eax,0x18
c0015758:	09 d0                	or     eax,edx
c001575a:	c3                   	ret    
c001575b:	90                   	nop

c001575c <Net::crc32Calc(unsigned char*, int)>:
c001575c:	83 ec 10             	sub    esp,0x10
c001575f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015764:	75 0a                	jne    c0015770 <Net::crc32Calc(unsigned char*, int)+0x14>
c0015766:	b8 00 00 00 00       	mov    eax,0x0
c001576b:	e9 8c 00 00 00       	jmp    c00157fc <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015770:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015775:	7f 09                	jg     c0015780 <Net::crc32Calc(unsigned char*, int)+0x24>
c0015777:	b8 00 00 00 00       	mov    eax,0x0
c001577c:	eb 7e                	jmp    c00157fc <Net::crc32Calc(unsigned char*, int)+0xa0>
c001577e:	66 90                	xchg   ax,ax
c0015780:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0015788:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015794:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0015798:	7d 5a                	jge    c00157f4 <Net::crc32Calc(unsigned char*, int)+0x98>
c001579a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001579e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157a2:	01 d0                	add    eax,edx
c00157a4:	8a 00                	mov    al,BYTE PTR [eax]
c00157a6:	0f b6 c0             	movzx  eax,al
c00157a9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00157ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157b5:	8d 76 00             	lea    esi,[esi+0x0]
c00157b8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00157bd:	7f 2d                	jg     c00157ec <Net::crc32Calc(unsigned char*, int)+0x90>
c00157bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157c3:	83 e0 01             	and    eax,0x1
c00157c6:	74 10                	je     c00157d8 <Net::crc32Calc(unsigned char*, int)+0x7c>
c00157c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157cc:	d1 e8                	shr    eax,1
c00157ce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00157d3:	eb 0b                	jmp    c00157e0 <Net::crc32Calc(unsigned char*, int)+0x84>
c00157d5:	8d 76 00             	lea    esi,[esi+0x0]
c00157d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157dc:	d1 e8                	shr    eax,1
c00157de:	66 90                	xchg   ax,ax
c00157e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00157e8:	eb ce                	jmp    c00157b8 <Net::crc32Calc(unsigned char*, int)+0x5c>
c00157ea:	66 90                	xchg   ax,ax
c00157ec:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00157f0:	eb 9e                	jmp    c0015790 <Net::crc32Calc(unsigned char*, int)+0x34>
c00157f2:	66 90                	xchg   ax,ax
c00157f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157f8:	f7 d0                	not    eax
c00157fa:	66 90                	xchg   ax,ax
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	c3                   	ret    

c0015800 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0015800:	57                   	push   edi
c0015801:	56                   	push   esi
c0015802:	53                   	push   ebx
c0015803:	83 ec 60             	sub    esp,0x60
c0015806:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001580d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015811:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0015819:	8d 76 00             	lea    esi,[esi+0x0]
c001581c:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0015821:	7f 1d                	jg     c0015840 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0015823:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001582a:	8d 50 01             	lea    edx,[eax+0x1]
c001582d:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015834:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0015837:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001583b:	eb df                	jmp    c001581c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c001583d:	8d 76 00             	lea    esi,[esi+0x0]
c0015840:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015847:	8d 50 01             	lea    edx,[eax+0x1]
c001584a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015851:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015854:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001585b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001585f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0015863:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015867:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001586f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015877:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001587b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001587f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015883:	89 c6                	mov    esi,eax
c0015885:	89 d7                	mov    edi,edx
c0015887:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015889:	89 c8                	mov    eax,ecx
c001588b:	89 fa                	mov    edx,edi
c001588d:	89 f3                	mov    ebx,esi
c001588f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015893:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015897:	89 04 24             	mov    DWORD PTR [esp],eax
c001589a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00158a2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00158ad:	8d 44 24 78          	lea    eax,[esp+0x78]
c00158b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00158b5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00158bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00158c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00158c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158c9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00158cd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00158d1:	89 c6                	mov    esi,eax
c00158d3:	89 d7                	mov    edi,edx
c00158d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158d7:	89 c8                	mov    eax,ecx
c00158d9:	89 fa                	mov    edx,edi
c00158db:	89 f3                	mov    ebx,esi
c00158dd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00158e1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00158e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00158e9:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00158f1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158f8:	0f b7 c0             	movzx  eax,ax
c00158fb:	c1 f8 08             	sar    eax,0x8
c00158fe:	89 c1                	mov    ecx,eax
c0015900:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015907:	8d 50 01             	lea    edx,[eax+0x1]
c001590a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015911:	88 ca                	mov    dl,cl
c0015913:	88 10                	mov    BYTE PTR [eax],dl
c0015915:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001591c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015923:	8d 48 01             	lea    ecx,[eax+0x1]
c0015926:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001592d:	88 10                	mov    BYTE PTR [eax],dl
c001592f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015933:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015937:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001593e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0015942:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0015946:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001594a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001594e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015952:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015956:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001595a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001595e:	89 c6                	mov    esi,eax
c0015960:	89 d7                	mov    edi,edx
c0015962:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015964:	89 c8                	mov    eax,ecx
c0015966:	89 fa                	mov    edx,edi
c0015968:	89 f3                	mov    ebx,esi
c001596a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001596e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015972:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015976:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001597a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015981:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015988:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001598c:	50                   	push   eax
c001598d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015991:	e8 c6 fd ff ff       	call   c001575c <Net::crc32Calc(unsigned char*, int)>
c0015996:	83 c4 08             	add    esp,0x8
c0015999:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001599d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00159a1:	c1 e8 18             	shr    eax,0x18
c00159a4:	89 c1                	mov    ecx,eax
c00159a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159ad:	8d 50 01             	lea    edx,[eax+0x1]
c00159b0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159b7:	88 ca                	mov    dl,cl
c00159b9:	88 10                	mov    BYTE PTR [eax],dl
c00159bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00159bf:	c1 e8 10             	shr    eax,0x10
c00159c2:	89 c1                	mov    ecx,eax
c00159c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159cb:	8d 50 01             	lea    edx,[eax+0x1]
c00159ce:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159d5:	88 ca                	mov    dl,cl
c00159d7:	88 10                	mov    BYTE PTR [eax],dl
c00159d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00159dd:	c1 e8 08             	shr    eax,0x8
c00159e0:	89 c1                	mov    ecx,eax
c00159e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159e9:	8d 50 01             	lea    edx,[eax+0x1]
c00159ec:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159f3:	88 ca                	mov    dl,cl
c00159f5:	88 10                	mov    BYTE PTR [eax],dl
c00159f7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159fe:	8d 50 01             	lea    edx,[eax+0x1]
c0015a01:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a08:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0015a0c:	88 10                	mov    BYTE PTR [eax],dl
c0015a0e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015a12:	83 c4 60             	add    esp,0x60
c0015a15:	5b                   	pop    ebx
c0015a16:	5e                   	pop    esi
c0015a17:	5f                   	pop    edi
c0015a18:	c3                   	ret    
c0015a19:	8d 76 00             	lea    esi,[esi+0x0]

c0015a1c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015a1c:	57                   	push   edi
c0015a1d:	56                   	push   esi
c0015a1e:	53                   	push   ebx
c0015a1f:	83 ec 70             	sub    esp,0x70
c0015a22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a29:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015a2d:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015a35:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a3c:	83 c0 0e             	add    eax,0xe
c0015a3f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015a43:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015a4e:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015a56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a62:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a66:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015a6a:	89 c6                	mov    esi,eax
c0015a6c:	89 d7                	mov    edi,edx
c0015a6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a70:	89 c8                	mov    eax,ecx
c0015a72:	89 fa                	mov    edx,edi
c0015a74:	89 f3                	mov    ebx,esi
c0015a76:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015a7a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015a82:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a91:	83 c0 08             	add    eax,0x8
c0015a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015a98:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a9f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015aa3:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0015aab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015aaf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015ab3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ab7:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015abb:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015abf:	89 c6                	mov    esi,eax
c0015ac1:	89 d7                	mov    edi,edx
c0015ac3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ac5:	89 c8                	mov    eax,ecx
c0015ac7:	89 fa                	mov    edx,edi
c0015ac9:	89 f3                	mov    ebx,esi
c0015acb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015acf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015ad3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015ad7:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015adf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015ae6:	8d 50 01             	lea    edx,[eax+0x1]
c0015ae9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015af0:	8a 00                	mov    al,BYTE PTR [eax]
c0015af2:	0f b6 c0             	movzx  eax,al
c0015af5:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0015afa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015b01:	8d 50 01             	lea    edx,[eax+0x1]
c0015b04:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015b0b:	8a 00                	mov    al,BYTE PTR [eax]
c0015b0d:	0f b6 c0             	movzx  eax,al
c0015b10:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015b15:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015b1a:	c1 e0 08             	shl    eax,0x8
c0015b1d:	89 c2                	mov    edx,eax
c0015b1f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015b23:	09 d0                	or     eax,edx
c0015b25:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015b2c:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015b30:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015b38:	75 46                	jne    c0015b80 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b3a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b41:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b44:	66 3d dc 05          	cmp    ax,0x5dc
c0015b48:	77 16                	ja     c0015b60 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015b4a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b51:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b54:	0f b7 c0             	movzx  eax,ax
c0015b57:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015b5e:	eb 20                	jmp    c0015b80 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b60:	83 ec 0c             	sub    esp,0xc
c0015b63:	68 68 69 02 c0       	push   0xc0026968
c0015b68:	e8 8e 75 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0015b6d:	83 c4 10             	add    esp,0x10
c0015b70:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b77:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015b7b:	e9 18 01 00 00       	jmp    c0015c98 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015b80:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015b87:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015b8e:	8b 12                	mov    edx,DWORD PTR [edx]
c0015b90:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015b94:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015b9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015b9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ba3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015baf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015bb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bb7:	89 c6                	mov    esi,eax
c0015bb9:	89 d7                	mov    edi,edx
c0015bbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015bbd:	89 c8                	mov    eax,ecx
c0015bbf:	89 fa                	mov    edx,edi
c0015bc1:	89 f3                	mov    ebx,esi
c0015bc3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015bc7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015bcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bce:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015bd5:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015bdc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015be3:	8d 50 01             	lea    edx,[eax+0x1]
c0015be6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015bed:	8a 00                	mov    al,BYTE PTR [eax]
c0015bef:	0f b6 c0             	movzx  eax,al
c0015bf2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0015bf6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015bfd:	8d 50 01             	lea    edx,[eax+0x1]
c0015c00:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c07:	8a 00                	mov    al,BYTE PTR [eax]
c0015c09:	0f b6 c0             	movzx  eax,al
c0015c0c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015c10:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c17:	8d 50 01             	lea    edx,[eax+0x1]
c0015c1a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c21:	8a 00                	mov    al,BYTE PTR [eax]
c0015c23:	0f b6 c0             	movzx  eax,al
c0015c26:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015c2a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c31:	8d 50 01             	lea    edx,[eax+0x1]
c0015c34:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c3b:	8a 00                	mov    al,BYTE PTR [eax]
c0015c3d:	0f b6 c0             	movzx  eax,al
c0015c40:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015c44:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015c48:	c1 e0 18             	shl    eax,0x18
c0015c4b:	89 c2                	mov    edx,eax
c0015c4d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015c51:	c1 e0 10             	shl    eax,0x10
c0015c54:	09 c2                	or     edx,eax
c0015c56:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015c5a:	c1 e0 08             	shl    eax,0x8
c0015c5d:	09 d0                	or     eax,edx
c0015c5f:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015c63:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015c67:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c6e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015c72:	83 e8 04             	sub    eax,0x4
c0015c75:	83 ec 08             	sub    esp,0x8
c0015c78:	50                   	push   eax
c0015c79:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015c7d:	e8 da fa ff ff       	call   c001575c <Net::crc32Calc(unsigned char*, int)>
c0015c82:	83 c4 10             	add    esp,0x10
c0015c85:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015c89:	0f 94 c2             	sete   dl
c0015c8c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015c93:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015c96:	90                   	nop
c0015c97:	90                   	nop
c0015c98:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015c9f:	83 c4 70             	add    esp,0x70
c0015ca2:	5b                   	pop    ebx
c0015ca3:	5e                   	pop    esi
c0015ca4:	5f                   	pop    edi
c0015ca5:	c2 04 00             	ret    0x4

c0015ca8 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015ca8:	55                   	push   ebp
c0015ca9:	57                   	push   edi
c0015caa:	56                   	push   esi
c0015cab:	53                   	push   ebx
c0015cac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015cb2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015cb9:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015cbb:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015cbe:	80 fb 40             	cmp    bl,0x40
c0015cc1:	75 1b                	jne    c0015cde <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015cc3:	8a 16                	mov    dl,BYTE PTR [esi]
c0015cc5:	84 d2                	test   dl,dl
c0015cc7:	0f 84 f1 00 00 00    	je     c0015dbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015ccd:	8d 46 01             	lea    eax,[esi+0x1]
c0015cd0:	80 fa 3a             	cmp    dl,0x3a
c0015cd3:	74 04                	je     c0015cd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015cd5:	89 c6                	mov    esi,eax
c0015cd7:	eb ea                	jmp    c0015cc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015cd9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015cdc:	89 c6                	mov    esi,eax
c0015cde:	50                   	push   eax
c0015cdf:	6a 40                	push   0x40
c0015ce1:	6a 00                	push   0x0
c0015ce3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015ce7:	50                   	push   eax
c0015ce8:	e8 a7 a9 fe ff       	call   c0000694 <memset>
c0015ced:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015cf4:	31 c0                	xor    eax,eax
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015cfb:	84 c9                	test   cl,cl
c0015cfd:	0f 84 bb 00 00 00    	je     c0015dbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d03:	3d c7 00 00 00       	cmp    eax,0xc7
c0015d08:	0f 8f b0 00 00 00    	jg     c0015dbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d0e:	80 f9 0a             	cmp    cl,0xa
c0015d11:	0f 85 98 00 00 00    	jne    c0015daf <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015d17:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015d1c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015d20:	a8 df                	test   al,0xdf
c0015d22:	0f 94 c1             	sete   cl
c0015d25:	3c 23                	cmp    al,0x23
c0015d27:	0f 94 c2             	sete   dl
c0015d2a:	08 d1                	or     cl,dl
c0015d2c:	75 4a                	jne    c0015d78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d2e:	8d 50 f7             	lea    edx,[eax-0x9]
c0015d31:	80 fa 01             	cmp    dl,0x1
c0015d34:	76 42                	jbe    c0015d78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d36:	3c 5b                	cmp    al,0x5b
c0015d38:	75 42                	jne    c0015d7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015d3a:	80 fb 40             	cmp    bl,0x40
c0015d3d:	75 39                	jne    c0015d78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d3f:	83 ec 0c             	sub    esp,0xc
c0015d42:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015d46:	52                   	push   edx
c0015d47:	e8 64 a9 fe ff       	call   c00006b0 <strlen>
c0015d4c:	83 c4 10             	add    esp,0x10
c0015d4f:	83 f8 3f             	cmp    eax,0x3f
c0015d52:	77 6a                	ja     c0015dbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d54:	50                   	push   eax
c0015d55:	50                   	push   eax
c0015d56:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015d5a:	52                   	push   edx
c0015d5b:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d5f:	52                   	push   edx
c0015d60:	e8 eb a9 fe ff       	call   c0000750 <strcpy>
c0015d65:	58                   	pop    eax
c0015d66:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d6a:	52                   	push   edx
c0015d6b:	e8 40 a9 fe ff       	call   c00006b0 <strlen>
c0015d70:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d75:	83 c4 10             	add    esp,0x10
c0015d78:	31 d2                	xor    edx,edx
c0015d7a:	eb 3a                	jmp    c0015db6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015d7c:	80 fb 40             	cmp    bl,0x40
c0015d7f:	74 06                	je     c0015d87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015d81:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015d85:	eb 20                	jmp    c0015da7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015d87:	50                   	push   eax
c0015d88:	50                   	push   eax
c0015d89:	55                   	push   ebp
c0015d8a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d8e:	50                   	push   eax
c0015d8f:	e8 48 aa fe ff       	call   c00007dc <strcmp>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	85 c0                	test   eax,eax
c0015d99:	75 dd                	jne    c0015d78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d9b:	eb e4                	jmp    c0015d81 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015d9d:	8d 50 01             	lea    edx,[eax+0x1]
c0015da0:	80 f9 3d             	cmp    cl,0x3d
c0015da3:	74 1d                	je     c0015dc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015da5:	89 d0                	mov    eax,edx
c0015da7:	8a 08                	mov    cl,BYTE PTR [eax]
c0015da9:	84 c9                	test   cl,cl
c0015dab:	75 f0                	jne    c0015d9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015dad:	eb 0f                	jmp    c0015dbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015daf:	8d 50 01             	lea    edx,[eax+0x1]
c0015db2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015db6:	47                   	inc    edi
c0015db7:	89 d0                	mov    eax,edx
c0015db9:	e9 3b ff ff ff       	jmp    c0015cf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015dbe:	31 c0                	xor    eax,eax
c0015dc0:	eb 33                	jmp    c0015df5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015dc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015dc6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015dc9:	50                   	push   eax
c0015dca:	50                   	push   eax
c0015dcb:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015dcf:	50                   	push   eax
c0015dd0:	56                   	push   esi
c0015dd1:	e8 06 aa fe ff       	call   c00007dc <strcmp>
c0015dd6:	83 c4 10             	add    esp,0x10
c0015dd9:	85 c0                	test   eax,eax
c0015ddb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ddf:	75 97                	jne    c0015d78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015de1:	51                   	push   ecx
c0015de2:	51                   	push   ecx
c0015de3:	52                   	push   edx
c0015de4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015deb:	e8 60 a9 fe ff       	call   c0000750 <strcpy>
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	b0 01                	mov    al,0x1
c0015df5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015dfb:	5b                   	pop    ebx
c0015dfc:	5e                   	pop    esi
c0015dfd:	5f                   	pop    edi
c0015dfe:	5d                   	pop    ebp
c0015dff:	c3                   	ret    

c0015e00 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015e00:	57                   	push   edi
c0015e01:	56                   	push   esi
c0015e02:	53                   	push   ebx
c0015e03:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015e09:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015e10:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015e17:	53                   	push   ebx
c0015e18:	e8 93 a8 fe ff       	call   c00006b0 <strlen>
c0015e1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e20:	89 c7                	mov    edi,eax
c0015e22:	e8 89 a8 fe ff       	call   c00006b0 <strlen>
c0015e27:	83 c4 10             	add    esp,0x10
c0015e2a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e2e:	3d ff 00 00 00       	cmp    eax,0xff
c0015e33:	0f 87 d3 00 00 00    	ja     c0015f0c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015e39:	57                   	push   edi
c0015e3a:	57                   	push   edi
c0015e3b:	56                   	push   esi
c0015e3c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e40:	56                   	push   esi
c0015e41:	e8 0a a9 fe ff       	call   c0000750 <strcpy>
c0015e46:	58                   	pop    eax
c0015e47:	5a                   	pop    edx
c0015e48:	68 0a 6d 02 c0       	push   0xc0026d0a
c0015e4d:	56                   	push   esi
c0015e4e:	e8 3d aa fe ff       	call   c0000890 <strcat>
c0015e53:	59                   	pop    ecx
c0015e54:	5f                   	pop    edi
c0015e55:	53                   	push   ebx
c0015e56:	56                   	push   esi
c0015e57:	e8 34 aa fe ff       	call   c0000890 <strcat>
c0015e5c:	58                   	pop    eax
c0015e5d:	5a                   	pop    edx
c0015e5e:	68 b4 69 02 c0       	push   0xc00269b4
c0015e63:	56                   	push   esi
c0015e64:	e8 27 aa fe ff       	call   c0000890 <strcat>
c0015e69:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e70:	e8 72 3f ff ff       	call   c0009de7 <malloc>
c0015e75:	83 c4 0c             	add    esp,0xc
c0015e78:	89 c3                	mov    ebx,eax
c0015e7a:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0015e80:	56                   	push   esi
c0015e81:	50                   	push   eax
c0015e82:	e8 df 77 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0015e87:	83 c4 10             	add    esp,0x10
c0015e8a:	85 db                	test   ebx,ebx
c0015e8c:	74 7e                	je     c0015f0c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015e8e:	51                   	push   ecx
c0015e8f:	51                   	push   ecx
c0015e90:	6a 01                	push   0x1
c0015e92:	53                   	push   ebx
c0015e93:	e8 a8 78 ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0015e98:	83 c4 10             	add    esp,0x10
c0015e9b:	85 c0                	test   eax,eax
c0015e9d:	74 08                	je     c0015ea7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015e9f:	83 ec 0c             	sub    esp,0xc
c0015ea2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ea4:	53                   	push   ebx
c0015ea5:	eb 5f                	jmp    c0015f06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015ea7:	52                   	push   edx
c0015ea8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015eac:	50                   	push   eax
c0015ead:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015eb1:	50                   	push   eax
c0015eb2:	53                   	push   ebx
c0015eb3:	e8 34 7b ff ff       	call   c000d9ec <File::stat(unsigned long long*, bool*)>
c0015eb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ebc:	83 c4 10             	add    esp,0x10
c0015ebf:	89 c1                	mov    ecx,eax
c0015ec1:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015ec5:	74 31                	je     c0015ef8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015ec7:	83 ec 0c             	sub    esp,0xc
c0015eca:	50                   	push   eax
c0015ecb:	e8 17 3f ff ff       	call   c0009de7 <malloc>
c0015ed0:	89 c6                	mov    esi,eax
c0015ed2:	58                   	pop    eax
c0015ed3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ed5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015ed9:	52                   	push   edx
c0015eda:	56                   	push   esi
c0015edb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015edf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ee3:	53                   	push   ebx
c0015ee4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ee7:	83 c4 20             	add    esp,0x20
c0015eea:	85 c0                	test   eax,eax
c0015eec:	75 0a                	jne    c0015ef8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015eee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ef2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015ef6:	74 18                	je     c0015f10 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	53                   	push   ebx
c0015efc:	e8 9d 78 ff ff       	call   c000d79e <File::close()>
c0015f01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f09:	83 c4 10             	add    esp,0x10
c0015f0c:	31 c0                	xor    eax,eax
c0015f0e:	eb 3b                	jmp    c0015f4b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015f10:	83 ec 0c             	sub    esp,0xc
c0015f13:	53                   	push   ebx
c0015f14:	e8 85 78 ff ff       	call   c000d79e <File::close()>
c0015f19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f21:	83 c4 0c             	add    esp,0xc
c0015f24:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f2b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f32:	56                   	push   esi
c0015f33:	e8 70 fd ff ff       	call   c0015ca8 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f38:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f3f:	e8 b3 3e ff ff       	call   c0009df7 <free>
c0015f44:	83 c4 10             	add    esp,0x10
c0015f47:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f4b:	81 c4 20 01 00 00    	add    esp,0x120
c0015f51:	5b                   	pop    ebx
c0015f52:	5e                   	pop    esi
c0015f53:	5f                   	pop    edi
c0015f54:	c3                   	ret    

c0015f55 <Reg::getLine(char*, char*, char*)>:
c0015f55:	57                   	push   edi
c0015f56:	56                   	push   esi
c0015f57:	53                   	push   ebx
c0015f58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f5c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f60:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f64:	57                   	push   edi
c0015f65:	56                   	push   esi
c0015f66:	53                   	push   ebx
c0015f67:	68 b9 69 02 c0       	push   0xc00269b9
c0015f6c:	e8 8f fe ff ff       	call   c0015e00 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f71:	83 c4 10             	add    esp,0x10
c0015f74:	84 c0                	test   al,al
c0015f76:	75 10                	jne    c0015f88 <Reg::getLine(char*, char*, char*)+0x33>
c0015f78:	57                   	push   edi
c0015f79:	56                   	push   esi
c0015f7a:	53                   	push   ebx
c0015f7b:	68 de 69 02 c0       	push   0xc00269de
c0015f80:	e8 7b fe ff ff       	call   c0015e00 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f85:	83 c4 10             	add    esp,0x10
c0015f88:	5b                   	pop    ebx
c0015f89:	5e                   	pop    esi
c0015f8a:	5f                   	pop    edi
c0015f8b:	c3                   	ret    

c0015f8c <Reg::readInt(char*, char*, int*)>:
c0015f8c:	55                   	push   ebp
c0015f8d:	57                   	push   edi
c0015f8e:	56                   	push   esi
c0015f8f:	53                   	push   ebx
c0015f90:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015f96:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015f9a:	57                   	push   edi
c0015f9b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fa2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fa9:	e8 a7 ff ff ff       	call   c0015f55 <Reg::getLine(char*, char*, char*)>
c0015fae:	83 c4 10             	add    esp,0x10
c0015fb1:	84 c0                	test   al,al
c0015fb3:	0f 84 b3 00 00 00    	je     c001606c <Reg::readInt(char*, char*, int*)+0xe0>
c0015fb9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015fbd:	80 fa 2b             	cmp    dl,0x2b
c0015fc0:	74 0c                	je     c0015fce <Reg::readInt(char*, char*, int*)+0x42>
c0015fc2:	80 fa 2d             	cmp    dl,0x2d
c0015fc5:	75 0e                	jne    c0015fd5 <Reg::readInt(char*, char*, int*)+0x49>
c0015fc7:	ba 01 00 00 00       	mov    edx,0x1
c0015fcc:	eb 0b                	jmp    c0015fd9 <Reg::readInt(char*, char*, int*)+0x4d>
c0015fce:	ba 01 00 00 00       	mov    edx,0x1
c0015fd3:	eb 02                	jmp    c0015fd7 <Reg::readInt(char*, char*, int*)+0x4b>
c0015fd5:	31 d2                	xor    edx,edx
c0015fd7:	31 c0                	xor    eax,eax
c0015fd9:	be 0a 00 00 00       	mov    esi,0xa
c0015fde:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015fe3:	75 20                	jne    c0016005 <Reg::readInt(char*, char*, int*)+0x79>
c0015fe5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015fe9:	80 f9 78             	cmp    cl,0x78
c0015fec:	75 0a                	jne    c0015ff8 <Reg::readInt(char*, char*, int*)+0x6c>
c0015fee:	83 c2 02             	add    edx,0x2
c0015ff1:	be 10 00 00 00       	mov    esi,0x10
c0015ff6:	eb 0d                	jmp    c0016005 <Reg::readInt(char*, char*, int*)+0x79>
c0015ff8:	80 f9 62             	cmp    cl,0x62
c0015ffb:	75 08                	jne    c0016005 <Reg::readInt(char*, char*, int*)+0x79>
c0015ffd:	83 c2 02             	add    edx,0x2
c0016000:	be 02 00 00 00       	mov    esi,0x2
c0016005:	01 d7                	add    edi,edx
c0016007:	31 d2                	xor    edx,edx
c0016009:	8a 1f                	mov    bl,BYTE PTR [edi]
c001600b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001600f:	80 fb 0d             	cmp    bl,0xd
c0016012:	0f 94 c3             	sete   bl
c0016015:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001601a:	0f 94 c1             	sete   cl
c001601d:	08 cb                	or     bl,cl
c001601f:	75 3a                	jne    c001605b <Reg::readInt(char*, char*, int*)+0xcf>
c0016021:	0f af d6             	imul   edx,esi
c0016024:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016029:	83 fe 10             	cmp    esi,0x10
c001602c:	75 26                	jne    c0016054 <Reg::readInt(char*, char*, int*)+0xc8>
c001602e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016032:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016035:	89 e9                	mov    ecx,ebp
c0016037:	80 f9 05             	cmp    cl,0x5
c001603a:	77 06                	ja     c0016042 <Reg::readInt(char*, char*, int*)+0xb6>
c001603c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016040:	eb 16                	jmp    c0016058 <Reg::readInt(char*, char*, int*)+0xcc>
c0016042:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016046:	83 e9 61             	sub    ecx,0x61
c0016049:	80 f9 05             	cmp    cl,0x5
c001604c:	77 06                	ja     c0016054 <Reg::readInt(char*, char*, int*)+0xc8>
c001604e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016052:	eb 04                	jmp    c0016058 <Reg::readInt(char*, char*, int*)+0xcc>
c0016054:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016058:	47                   	inc    edi
c0016059:	eb ae                	jmp    c0016009 <Reg::readInt(char*, char*, int*)+0x7d>
c001605b:	84 c0                	test   al,al
c001605d:	74 02                	je     c0016061 <Reg::readInt(char*, char*, int*)+0xd5>
c001605f:	f7 da                	neg    edx
c0016061:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016068:	89 10                	mov    DWORD PTR [eax],edx
c001606a:	88 d8                	mov    al,bl
c001606c:	81 c4 ec 00 00 00    	add    esp,0xec
c0016072:	5b                   	pop    ebx
c0016073:	5e                   	pop    esi
c0016074:	5f                   	pop    edi
c0016075:	5d                   	pop    ebp
c0016076:	c3                   	ret    

c0016077 <Reg::readString(char*, char*, char*, int)>:
c0016077:	57                   	push   edi
c0016078:	56                   	push   esi
c0016079:	53                   	push   ebx
c001607a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016080:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016087:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001608b:	57                   	push   edi
c001608c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016093:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001609a:	e8 b6 fe ff ff       	call   c0015f55 <Reg::getLine(char*, char*, char*)>
c001609f:	83 c4 10             	add    esp,0x10
c00160a2:	89 c6                	mov    esi,eax
c00160a4:	84 c0                	test   al,al
c00160a6:	74 44                	je     c00160ec <Reg::readString(char*, char*, char*, int)+0x75>
c00160a8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00160af:	31 c0                	xor    eax,eax
c00160b1:	4a                   	dec    edx
c00160b2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00160b5:	84 c9                	test   cl,cl
c00160b7:	74 0f                	je     c00160c8 <Reg::readString(char*, char*, char*, int)+0x51>
c00160b9:	39 c2                	cmp    edx,eax
c00160bb:	7e 0b                	jle    c00160c8 <Reg::readString(char*, char*, char*, int)+0x51>
c00160bd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00160c0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00160c5:	40                   	inc    eax
c00160c6:	eb ea                	jmp    c00160b2 <Reg::readString(char*, char*, char*, int)+0x3b>
c00160c8:	83 ec 0c             	sub    esp,0xc
c00160cb:	53                   	push   ebx
c00160cc:	e8 df a5 fe ff       	call   c00006b0 <strlen>
c00160d1:	83 c4 10             	add    esp,0x10
c00160d4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00160d9:	75 11                	jne    c00160ec <Reg::readString(char*, char*, char*, int)+0x75>
c00160db:	83 ec 0c             	sub    esp,0xc
c00160de:	53                   	push   ebx
c00160df:	e8 cc a5 fe ff       	call   c00006b0 <strlen>
c00160e4:	83 c4 10             	add    esp,0x10
c00160e7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00160ec:	81 c4 d0 00 00 00    	add    esp,0xd0
c00160f2:	89 f0                	mov    eax,esi
c00160f4:	5b                   	pop    ebx
c00160f5:	5e                   	pop    esi
c00160f6:	5f                   	pop    edi
c00160f7:	c3                   	ret    

c00160f8 <Reg::readBool(char*, char*, bool*)>:
c00160f8:	83 ec 20             	sub    esp,0x20
c00160fb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00160ff:	50                   	push   eax
c0016100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016108:	e8 7f fe ff ff       	call   c0015f8c <Reg::readInt(char*, char*, int*)>
c001610d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016112:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016116:	0f 95 02             	setne  BYTE PTR [edx]
c0016119:	83 c4 2c             	add    esp,0x2c
c001611c:	c3                   	ret    

c001611d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001611d:	53                   	push   ebx
c001611e:	83 ec 1c             	sub    esp,0x1c
c0016121:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016125:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016129:	50                   	push   eax
c001612a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001612e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016132:	e8 c1 ff ff ff       	call   c00160f8 <Reg::readBool(char*, char*, bool*)>
c0016137:	83 c4 10             	add    esp,0x10
c001613a:	84 c0                	test   al,al
c001613c:	74 04                	je     c0016142 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001613e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016142:	88 d8                	mov    al,bl
c0016144:	83 c4 18             	add    esp,0x18
c0016147:	5b                   	pop    ebx
c0016148:	c3                   	ret    

c0016149 <Reg::readIntWithDefault(char*, char*, int)>:
c0016149:	53                   	push   ebx
c001614a:	83 ec 1c             	sub    esp,0x1c
c001614d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016151:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016155:	50                   	push   eax
c0016156:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001615a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001615e:	e8 29 fe ff ff       	call   c0015f8c <Reg::readInt(char*, char*, int*)>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	84 c0                	test   al,al
c0016168:	74 04                	je     c001616e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001616a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001616e:	89 d8                	mov    eax,ebx
c0016170:	83 c4 18             	add    esp,0x18
c0016173:	5b                   	pop    ebx
c0016174:	c3                   	ret    

c0016175 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016175:	57                   	push   edi
c0016176:	56                   	push   esi
c0016177:	56                   	push   esi
c0016178:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001617c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0016180:	56                   	push   esi
c0016181:	57                   	push   edi
c0016182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001618a:	e8 e8 fe ff ff       	call   c0016077 <Reg::readString(char*, char*, char*, int)>
c001618f:	83 c4 10             	add    esp,0x10
c0016192:	84 c0                	test   al,al
c0016194:	75 1a                	jne    c00161b0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0016196:	51                   	push   ecx
c0016197:	56                   	push   esi
c0016198:	6a 00                	push   0x0
c001619a:	57                   	push   edi
c001619b:	e8 f4 a4 fe ff       	call   c0000694 <memset>
c00161a0:	8d 4e ff             	lea    ecx,[esi-0x1]
c00161a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00161a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00161a9:	83 c4 10             	add    esp,0x10
c00161ac:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00161b0:	89 f8                	mov    eax,edi
c00161b2:	5a                   	pop    edx
c00161b3:	5e                   	pop    esi
c00161b4:	5f                   	pop    edi
c00161b5:	c3                   	ret    

c00161b6 <Sys::eject(regs*)>:
c00161b6:	83 ec 0c             	sub    esp,0xc
c00161b9:	83 ca ff             	or     edx,0xffffffff
c00161bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00161c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00161c8:	83 e9 41             	sub    ecx,0x41
c00161cb:	83 f9 19             	cmp    ecx,0x19
c00161ce:	77 18                	ja     c00161e8 <Sys::eject(regs*)+0x32>
c00161d0:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c00161d7:	85 c9                	test   ecx,ecx
c00161d9:	74 0d                	je     c00161e8 <Sys::eject(regs*)+0x32>
c00161db:	83 ec 0c             	sub    esp,0xc
c00161de:	51                   	push   ecx
c00161df:	e8 30 a8 ff ff       	call   c0010a14 <LogicalDisk::eject()>
c00161e4:	83 c4 10             	add    esp,0x10
c00161e7:	99                   	cdq    
c00161e8:	83 c4 0c             	add    esp,0xc
c00161eb:	c3                   	ret    

c00161ec <Sys::exit(regs*)>:
c00161ec:	83 ec 18             	sub    esp,0x18
c00161ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161f3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161f6:	e8 59 36 00 00       	call   c0019854 <terminateTask(int)>
c00161fb:	83 c8 ff             	or     eax,0xffffffff
c00161fe:	83 c4 1c             	add    esp,0x1c
c0016201:	89 c2                	mov    edx,eax
c0016203:	c3                   	ret    

c0016204 <Sys::getCwd(regs*)>:
c0016204:	83 ec 10             	sub    esp,0x10
c0016207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001620b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001620e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016211:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016216:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016219:	e8 4a 72 ff ff       	call   c000d468 <Fs::getcwd(Process*, char*, int)>
c001621e:	83 c4 1c             	add    esp,0x1c
c0016221:	99                   	cdq    
c0016222:	c3                   	ret    

c0016223 <Sys::getPID(regs*)>:
c0016223:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016228:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001622b:	8b 00                	mov    eax,DWORD PTR [eax]
c001622d:	99                   	cdq    
c001622e:	c3                   	ret    

c001622f <Sys::getRAMData(regs*)>:
c001622f:	8b 0d 38 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028c38
c0016235:	69 05 34 8c 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028c34,0xc8
c001623f:	99                   	cdq    
c0016240:	f7 f9                	idiv   ecx
c0016242:	c1 e0 18             	shl    eax,0x18
c0016245:	09 c8                	or     eax,ecx
c0016247:	99                   	cdq    
c0016248:	c3                   	ret    

c0016249 <Sys::getVGAPtr(regs*)>:
c0016249:	55                   	push   ebp
c001624a:	57                   	push   edi
c001624b:	56                   	push   esi
c001624c:	53                   	push   ebx
c001624d:	83 ec 18             	sub    esp,0x18
c0016250:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0016254:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0016257:	e8 fc 30 00 00       	call   c0019358 <Thr::processFromPID(int)>
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	89 c1                	mov    ecx,eax
c0016261:	b8 01 00 00 00       	mov    eax,0x1
c0016266:	85 c9                	test   ecx,ecx
c0016268:	74 59                	je     c00162c3 <Sys::getVGAPtr(regs*)+0x7a>
c001626a:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0016270:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0016274:	74 0c                	je     c0016282 <Sys::getVGAPtr(regs*)+0x39>
c0016276:	83 ec 0c             	sub    esp,0xc
c0016279:	53                   	push   ebx
c001627a:	e8 56 4c ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c001627f:	83 c4 10             	add    esp,0x10
c0016282:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016285:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0016288:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001628d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001628f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0016292:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016295:	81 c3 82 00 00 00    	add    ebx,0x82
c001629b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00162a1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162a4:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00162a7:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00162ad:	50                   	push   eax
c00162ae:	50                   	push   eax
c00162af:	53                   	push   ebx
c00162b0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162b3:	05 a8 0f 00 00       	add    eax,0xfa8
c00162b8:	50                   	push   eax
c00162b9:	e8 92 a4 fe ff       	call   c0000750 <strcpy>
c00162be:	83 c4 10             	add    esp,0x10
c00162c1:	31 c0                	xor    eax,eax
c00162c3:	83 c4 0c             	add    esp,0xc
c00162c6:	31 d2                	xor    edx,edx
c00162c8:	5b                   	pop    ebx
c00162c9:	5e                   	pop    esi
c00162ca:	5f                   	pop    edi
c00162cb:	5d                   	pop    ebp
c00162cc:	c3                   	ret    

c00162cd <Sys::loadDLL(regs*)>:
c00162cd:	56                   	push   esi
c00162ce:	53                   	push   ebx
c00162cf:	31 d2                	xor    edx,edx
c00162d1:	51                   	push   ecx
c00162d2:	b8 01 00 00 00       	mov    eax,0x1
c00162d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162db:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162df:	0f 84 8c 00 00 00    	je     c0016371 <Sys::loadDLL(regs*)+0xa4>
c00162e5:	83 ec 0c             	sub    esp,0xc
c00162e8:	68 14 01 00 00       	push   0x114
c00162ed:	e8 f5 3a ff ff       	call   c0009de7 <malloc>
c00162f2:	83 c4 0c             	add    esp,0xc
c00162f5:	89 c3                	mov    ebx,eax
c00162f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162fc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162ff:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016302:	53                   	push   ebx
c0016303:	e8 5e 73 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	31 d2                	xor    edx,edx
c001630d:	b8 02 00 00 00       	mov    eax,0x2
c0016312:	85 db                	test   ebx,ebx
c0016314:	74 5b                	je     c0016371 <Sys::loadDLL(regs*)+0xa4>
c0016316:	83 ec 0c             	sub    esp,0xc
c0016319:	53                   	push   ebx
c001631a:	e8 8f 76 ff ff       	call   c000d9ae <File::exists()>
c001631f:	83 c4 10             	add    esp,0x10
c0016322:	84 c0                	test   al,al
c0016324:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016326:	75 11                	jne    c0016339 <Sys::loadDLL(regs*)+0x6c>
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	53                   	push   ebx
c001632c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001632f:	83 c4 10             	add    esp,0x10
c0016332:	b8 03 00 00 00       	mov    eax,0x3
c0016337:	eb 36                	jmp    c001636f <Sys::loadDLL(regs*)+0xa2>
c0016339:	83 ec 0c             	sub    esp,0xc
c001633c:	53                   	push   ebx
c001633d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016340:	58                   	pop    eax
c0016341:	5a                   	pop    edx
c0016342:	6a 00                	push   0x0
c0016344:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016347:	e8 0a 22 00 00       	call   c0018556 <Thr::loadDLL(char const*, bool)>
c001634c:	83 c4 10             	add    esp,0x10
c001634f:	89 c1                	mov    ecx,eax
c0016351:	31 d2                	xor    edx,edx
c0016353:	b8 04 00 00 00       	mov    eax,0x4
c0016358:	85 c9                	test   ecx,ecx
c001635a:	74 15                	je     c0016371 <Sys::loadDLL(regs*)+0xa4>
c001635c:	53                   	push   ebx
c001635d:	53                   	push   ebx
c001635e:	ff 35 08 8c 02 c0    	push   DWORD PTR ds:0xc0028c08
c0016364:	51                   	push   ecx
c0016365:	e8 1d 24 00 00       	call   c0018787 <Thr::executeDLL(unsigned long, void*)>
c001636a:	83 c4 10             	add    esp,0x10
c001636d:	31 c0                	xor    eax,eax
c001636f:	31 d2                	xor    edx,edx
c0016371:	59                   	pop    ecx
c0016372:	5b                   	pop    ebx
c0016373:	5e                   	pop    esi
c0016374:	c3                   	ret    

c0016375 <Sys::read(regs*)>:
c0016375:	57                   	push   edi
c0016376:	56                   	push   esi
c0016377:	53                   	push   ebx
c0016378:	83 ec 10             	sub    esp,0x10
c001637b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001637f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016382:	83 f8 02             	cmp    eax,0x2
c0016385:	77 10                	ja     c0016397 <Sys::read(regs*)+0x22>
c0016387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001638f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016395:	eb 0e                	jmp    c00163a5 <Sys::read(regs*)+0x30>
c0016397:	83 ec 0c             	sub    esp,0xc
c001639a:	50                   	push   eax
c001639b:	e8 ab 58 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00163a0:	83 c4 10             	add    esp,0x10
c00163a3:	89 c1                	mov    ecx,eax
c00163a5:	83 c8 ff             	or     eax,0xffffffff
c00163a8:	85 c9                	test   ecx,ecx
c00163aa:	89 c2                	mov    edx,eax
c00163ac:	74 28                	je     c00163d6 <Sys::read(regs*)+0x61>
c00163ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163b6:	31 ff                	xor    edi,edi
c00163b8:	83 ec 0c             	sub    esp,0xc
c00163bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00163bd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00163c1:	52                   	push   edx
c00163c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163c5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163c8:	57                   	push   edi
c00163c9:	56                   	push   esi
c00163ca:	51                   	push   ecx
c00163cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163d2:	83 c4 20             	add    esp,0x20
c00163d5:	99                   	cdq    
c00163d6:	83 c4 10             	add    esp,0x10
c00163d9:	5b                   	pop    ebx
c00163da:	5e                   	pop    esi
c00163db:	5f                   	pop    edi
c00163dc:	c3                   	ret    

c00163dd <Sys::sbrk(regs*)>:
c00163dd:	56                   	push   esi
c00163de:	53                   	push   ebx
c00163df:	50                   	push   eax
c00163e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163ec:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163ef:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00163f5:	85 db                	test   ebx,ebx
c00163f7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163fa:	74 02                	je     c00163fe <Sys::sbrk(regs*)+0x21>
c00163fc:	79 06                	jns    c0016404 <Sys::sbrk(regs*)+0x27>
c00163fe:	89 f0                	mov    eax,esi
c0016400:	31 d2                	xor    edx,edx
c0016402:	eb 2a                	jmp    c001642e <Sys::sbrk(regs*)+0x51>
c0016404:	83 c8 ff             	or     eax,0xffffffff
c0016407:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001640d:	89 c2                	mov    edx,eax
c001640f:	77 1d                	ja     c001642e <Sys::sbrk(regs*)+0x51>
c0016411:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0016417:	50                   	push   eax
c0016418:	c1 ea 0c             	shr    edx,0xc
c001641b:	68 07 0c 00 00       	push   0xc07
c0016420:	52                   	push   edx
c0016421:	51                   	push   ecx
c0016422:	e8 e7 60 ff ff       	call   c000c50e <VAS::allocatePages(int, int)>
c0016427:	89 f0                	mov    eax,esi
c0016429:	31 d2                	xor    edx,edx
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	59                   	pop    ecx
c001642f:	5b                   	pop    ebx
c0016430:	5e                   	pop    esi
c0016431:	c3                   	ret    

c0016432 <Sys::setCwd(regs*)>:
c0016432:	83 ec 14             	sub    esp,0x14
c0016435:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016439:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001643c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016441:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016444:	e8 04 76 ff ff       	call   c000da4d <Fs::setcwd(Process*, char*)>
c0016449:	83 c4 1c             	add    esp,0x1c
c001644c:	99                   	cdq    
c001644d:	c3                   	ret    

c001644e <Sys::setTime(regs*)>:
c001644e:	55                   	push   ebp
c001644f:	31 c9                	xor    ecx,ecx
c0016451:	57                   	push   edi
c0016452:	bd 0c 00 00 00       	mov    ebp,0xc
c0016457:	56                   	push   esi
c0016458:	53                   	push   ebx
c0016459:	31 db                	xor    ebx,ebx
c001645b:	83 ec 10             	sub    esp,0x10
c001645e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016462:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0016465:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0016468:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001646b:	89 c2                	mov    edx,eax
c001646d:	66 81 ef 6c 07       	sub    di,0x76c
c0016472:	83 e2 1f             	and    edx,0x1f
c0016475:	c1 e7 10             	shl    edi,0x10
c0016478:	42                   	inc    edx
c0016479:	c1 e8 05             	shr    eax,0x5
c001647c:	88 d1                	mov    cl,dl
c001647e:	31 d2                	xor    edx,edx
c0016480:	f7 f5                	div    ebp
c0016482:	89 dd                	mov    ebp,ebx
c0016484:	88 d5                	mov    ch,dl
c0016486:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001648c:	0f b7 c1             	movzx  eax,cx
c001648f:	31 d2                	xor    edx,edx
c0016491:	09 f8                	or     eax,edi
c0016493:	bf 3c 00 00 00       	mov    edi,0x3c
c0016498:	89 c1                	mov    ecx,eax
c001649a:	89 f0                	mov    eax,esi
c001649c:	f7 f7                	div    edi
c001649e:	c1 e2 10             	shl    edx,0x10
c00164a1:	09 d5                	or     ebp,edx
c00164a3:	31 d2                	xor    edx,edx
c00164a5:	89 eb                	mov    ebx,ebp
c00164a7:	f7 f7                	div    edi
c00164a9:	bf 10 0e 00 00       	mov    edi,0xe10
c00164ae:	88 d7                	mov    bh,dl
c00164b0:	89 f0                	mov    eax,esi
c00164b2:	31 d2                	xor    edx,edx
c00164b4:	f7 f7                	div    edi
c00164b6:	bf 18 00 00 00       	mov    edi,0x18
c00164bb:	31 d2                	xor    edx,edx
c00164bd:	f7 f7                	div    edi
c00164bf:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c00164c4:	88 d3                	mov    bl,dl
c00164c6:	53                   	push   ebx
c00164c7:	51                   	push   ecx
c00164c8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00164ce:	e8 7b 7e ff ff       	call   c000e34e <Clock::setTimeInDatetimeLocal(datetime_t)>
c00164d3:	83 c4 1c             	add    esp,0x1c
c00164d6:	83 f0 01             	xor    eax,0x1
c00164d9:	5b                   	pop    ebx
c00164da:	0f b6 c0             	movzx  eax,al
c00164dd:	5e                   	pop    esi
c00164de:	31 d2                	xor    edx,edx
c00164e0:	5f                   	pop    edi
c00164e1:	5d                   	pop    ebp
c00164e2:	c3                   	ret    

c00164e3 <Sys::timezone(regs*)>:
c00164e3:	53                   	push   ebx
c00164e4:	83 ec 08             	sub    esp,0x8
c00164e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164eb:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00164ef:	75 17                	jne    c0016508 <Sys::timezone(regs*)+0x25>
c00164f1:	83 ec 0c             	sub    esp,0xc
c00164f4:	68 f9 69 02 c0       	push   0xc00269f9
c00164f9:	e8 fd 6b ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00164fe:	83 c8 ff             	or     eax,0xffffffff
c0016501:	83 c4 10             	add    esp,0x10
c0016504:	89 c2                	mov    edx,eax
c0016506:	eb 20                	jmp    c0016528 <Sys::timezone(regs*)+0x45>
c0016508:	83 ec 0c             	sub    esp,0xc
c001650b:	68 0e 6a 02 c0       	push   0xc0026a0e
c0016510:	e8 e6 6b ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0016515:	58                   	pop    eax
c0016516:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016519:	e8 92 7b ff ff       	call   c000e0b0 <User::loadClockSettings(int)>
c001651e:	83 c4 10             	add    esp,0x10
c0016521:	b8 01 00 00 00       	mov    eax,0x1
c0016526:	31 d2                	xor    edx,edx
c0016528:	83 c4 08             	add    esp,0x8
c001652b:	5b                   	pop    ebx
c001652c:	c3                   	ret    

c001652d <Sys::write(regs*)>:
c001652d:	57                   	push   edi
c001652e:	56                   	push   esi
c001652f:	53                   	push   ebx
c0016530:	83 ec 10             	sub    esp,0x10
c0016533:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016537:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001653a:	83 f8 02             	cmp    eax,0x2
c001653d:	77 10                	ja     c001654f <Sys::write(regs*)+0x22>
c001653f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016544:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016547:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001654d:	eb 0e                	jmp    c001655d <Sys::write(regs*)+0x30>
c001654f:	83 ec 0c             	sub    esp,0xc
c0016552:	50                   	push   eax
c0016553:	e8 f3 56 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016558:	83 c4 10             	add    esp,0x10
c001655b:	89 c1                	mov    ecx,eax
c001655d:	83 c8 ff             	or     eax,0xffffffff
c0016560:	85 c9                	test   ecx,ecx
c0016562:	89 c2                	mov    edx,eax
c0016564:	74 28                	je     c001658e <Sys::write(regs*)+0x61>
c0016566:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001656e:	31 ff                	xor    edi,edi
c0016570:	83 ec 0c             	sub    esp,0xc
c0016573:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016575:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016579:	52                   	push   edx
c001657a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001657d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016580:	57                   	push   edi
c0016581:	56                   	push   esi
c0016582:	51                   	push   ecx
c0016583:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016586:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001658a:	83 c4 20             	add    esp,0x20
c001658d:	99                   	cdq    
c001658e:	83 c4 10             	add    esp,0x10
c0016591:	5b                   	pop    ebx
c0016592:	5e                   	pop    esi
c0016593:	5f                   	pop    edi
c0016594:	c3                   	ret    

c0016595 <Sys::wsbe(regs*)>:
c0016595:	57                   	push   edi
c0016596:	b9 0b 00 00 00       	mov    ecx,0xb
c001659b:	56                   	push   esi
c001659c:	be 4d 6a 02 c0       	mov    esi,0xc0026a4d
c00165a1:	53                   	push   ebx
c00165a2:	83 ec 30             	sub    esp,0x30
c00165a5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00165a9:	fc                   	cld    
c00165aa:	83 ec 0c             	sub    esp,0xc
c00165ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00165af:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00165b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165bb:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00165c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00165c3:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00165c6:	57                   	push   edi
c00165c7:	e8 e4 a0 fe ff       	call   c00006b0 <strlen>
c00165cc:	5a                   	pop    edx
c00165cd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00165d1:	52                   	push   edx
c00165d2:	31 d2                	xor    edx,edx
c00165d4:	57                   	push   edi
c00165d5:	52                   	push   edx
c00165d6:	50                   	push   eax
c00165d7:	56                   	push   esi
c00165d8:	ff d3                	call   ebx
c00165da:	83 c4 14             	add    esp,0x14
c00165dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00165e1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00165e4:	e8 6b 32 00 00       	call   c0019854 <terminateTask(int)>
c00165e9:	83 c4 40             	add    esp,0x40
c00165ec:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00165f1:	5b                   	pop    ebx
c00165f2:	31 d2                	xor    edx,edx
c00165f4:	5e                   	pop    esi
c00165f5:	5f                   	pop    edi
c00165f6:	c3                   	ret    

c00165f7 <Sys::yield(regs*)>:
c00165f7:	83 ec 0c             	sub    esp,0xc
c00165fa:	fa                   	cli    
c00165fb:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0016601:	e8 36 29 00 00       	call   c0018f3c <schedule()>
c0016606:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001660b:	48                   	dec    eax
c001660c:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0016611:	75 01                	jne    c0016614 <Sys::yield(regs*)+0x1d>
c0016613:	fb                   	sti    
c0016614:	8b 15 2c 92 02 c0    	mov    edx,DWORD PTR ds:0xc002922c
c001661a:	83 c4 0c             	add    esp,0xc
c001661d:	89 d0                	mov    eax,edx
c001661f:	c1 ea 11             	shr    edx,0x11
c0016622:	c1 e0 07             	shl    eax,0x7
c0016625:	25 80 30 0f 00       	and    eax,0xf3080
c001662a:	31 d0                	xor    eax,edx
c001662c:	31 d2                	xor    edx,edx
c001662e:	c3                   	ret    

c001662f <sysCallSeekDir(regs*)>:
c001662f:	31 c0                	xor    eax,eax
c0016631:	31 d2                	xor    edx,edx
c0016633:	c3                   	ret    

c0016634 <sysCallTellDir(regs*)>:
c0016634:	31 c0                	xor    eax,eax
c0016636:	31 d2                	xor    edx,edx
c0016638:	c3                   	ret    

c0016639 <sysCallVerify(regs*)>:
c0016639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001663d:	31 d2                	xor    edx,edx
c001663f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016642:	c3                   	ret    

c0016643 <sysCallGetArgc(regs*)>:
c0016643:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016648:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001664b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016651:	99                   	cdq    
c0016652:	c3                   	ret    

c0016653 <sysFormatDisk(regs*)>:
c0016653:	56                   	push   esi
c0016654:	53                   	push   ebx
c0016655:	53                   	push   ebx
c0016656:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001665a:	8b 1d 38 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028d38
c0016660:	eb 25                	jmp    c0016687 <sysFormatDisk(regs*)+0x34>
c0016662:	83 ec 0c             	sub    esp,0xc
c0016665:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016668:	8b 13                	mov    edx,DWORD PTR [ebx]
c001666a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001666d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016670:	50                   	push   eax
c0016671:	ff 34 85 c0 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6e40]
c0016678:	53                   	push   ebx
c0016679:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001667c:	83 c4 20             	add    esp,0x20
c001667f:	83 f8 08             	cmp    eax,0x8
c0016682:	75 12                	jne    c0016696 <sysFormatDisk(regs*)+0x43>
c0016684:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016687:	85 db                	test   ebx,ebx
c0016689:	75 d7                	jne    c0016662 <sysFormatDisk(regs*)+0xf>
c001668b:	59                   	pop    ecx
c001668c:	b8 03 00 00 00       	mov    eax,0x3
c0016691:	31 d2                	xor    edx,edx
c0016693:	5b                   	pop    ebx
c0016694:	5e                   	pop    esi
c0016695:	c3                   	ret    
c0016696:	85 c0                	test   eax,eax
c0016698:	74 1b                	je     c00166b5 <sysFormatDisk(regs*)+0x62>
c001669a:	83 f8 09             	cmp    eax,0x9
c001669d:	74 0b                	je     c00166aa <sysFormatDisk(regs*)+0x57>
c001669f:	59                   	pop    ecx
c00166a0:	b8 02 00 00 00       	mov    eax,0x2
c00166a5:	31 d2                	xor    edx,edx
c00166a7:	5b                   	pop    ebx
c00166a8:	5e                   	pop    esi
c00166a9:	c3                   	ret    
c00166aa:	59                   	pop    ecx
c00166ab:	b8 01 00 00 00       	mov    eax,0x1
c00166b0:	31 d2                	xor    edx,edx
c00166b2:	5b                   	pop    ebx
c00166b3:	5e                   	pop    esi
c00166b4:	c3                   	ret    
c00166b5:	59                   	pop    ecx
c00166b6:	31 c0                	xor    eax,eax
c00166b8:	31 d2                	xor    edx,edx
c00166ba:	5b                   	pop    ebx
c00166bb:	5e                   	pop    esi
c00166bc:	c3                   	ret    

c00166bd <sysSetDiskVolumeLabel(regs*)>:
c00166bd:	56                   	push   esi
c00166be:	53                   	push   ebx
c00166bf:	53                   	push   ebx
c00166c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00166c4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00166c7:	83 f8 19             	cmp    eax,0x19
c00166ca:	77 2d                	ja     c00166f9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166cc:	8b 0c 85 c0 91 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6e40]
c00166d3:	85 c9                	test   ecx,ecx
c00166d5:	74 22                	je     c00166f9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166d7:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00166da:	85 db                	test   ebx,ebx
c00166dc:	74 1b                	je     c00166f9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166de:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00166e4:	85 d2                	test   edx,edx
c00166e6:	74 11                	je     c00166f9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166e8:	8b 32                	mov    esi,DWORD PTR [edx]
c00166ea:	53                   	push   ebx
c00166eb:	50                   	push   eax
c00166ec:	51                   	push   ecx
c00166ed:	52                   	push   edx
c00166ee:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	99                   	cdq    
c00166f5:	59                   	pop    ecx
c00166f6:	5b                   	pop    ebx
c00166f7:	5e                   	pop    esi
c00166f8:	c3                   	ret    
c00166f9:	59                   	pop    ecx
c00166fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016704:	5b                   	pop    ebx
c0016705:	5e                   	pop    esi
c0016706:	c3                   	ret    

c0016707 <sysGetDiskVolumeLabel(regs*)>:
c0016707:	57                   	push   edi
c0016708:	56                   	push   esi
c0016709:	53                   	push   ebx
c001670a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001670e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016711:	83 fa 19             	cmp    edx,0x19
c0016714:	77 38                	ja     c001674e <sysGetDiskVolumeLabel(regs*)+0x47>
c0016716:	8b 0c 95 c0 91 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6e40]
c001671d:	85 c9                	test   ecx,ecx
c001671f:	74 2d                	je     c001674e <sysGetDiskVolumeLabel(regs*)+0x47>
c0016721:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016724:	85 db                	test   ebx,ebx
c0016726:	74 26                	je     c001674e <sysGetDiskVolumeLabel(regs*)+0x47>
c0016728:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001672b:	85 f6                	test   esi,esi
c001672d:	74 1f                	je     c001674e <sysGetDiskVolumeLabel(regs*)+0x47>
c001672f:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0016735:	85 c0                	test   eax,eax
c0016737:	74 15                	je     c001674e <sysGetDiskVolumeLabel(regs*)+0x47>
c0016739:	83 ec 0c             	sub    esp,0xc
c001673c:	8b 38                	mov    edi,DWORD PTR [eax]
c001673e:	56                   	push   esi
c001673f:	53                   	push   ebx
c0016740:	52                   	push   edx
c0016741:	51                   	push   ecx
c0016742:	50                   	push   eax
c0016743:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0016746:	83 c4 20             	add    esp,0x20
c0016749:	99                   	cdq    
c001674a:	5b                   	pop    ebx
c001674b:	5e                   	pop    esi
c001674c:	5f                   	pop    edi
c001674d:	c3                   	ret    
c001674e:	5b                   	pop    ebx
c001674f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016754:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016759:	5e                   	pop    esi
c001675a:	5f                   	pop    edi
c001675b:	c3                   	ret    

c001675c <sysShutdown(regs*)>:
c001675c:	83 ec 0c             	sub    esp,0xc
c001675f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016763:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016766:	85 c0                	test   eax,eax
c0016768:	74 18                	je     c0016782 <sysShutdown(regs*)+0x26>
c001676a:	83 f8 01             	cmp    eax,0x1
c001676d:	74 38                	je     c00167a7 <sysShutdown(regs*)+0x4b>
c001676f:	83 f8 02             	cmp    eax,0x2
c0016772:	74 24                	je     c0016798 <sysShutdown(regs*)+0x3c>
c0016774:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016779:	ba ff ff ff ff       	mov    edx,0xffffffff
c001677e:	83 c4 0c             	add    esp,0xc
c0016781:	c3                   	ret    
c0016782:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0016787:	8b 10                	mov    edx,DWORD PTR [eax]
c0016789:	6a 00                	push   0x0
c001678b:	6a 00                	push   0x0
c001678d:	6a 00                	push   0x0
c001678f:	50                   	push   eax
c0016790:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	eb dc                	jmp    c0016774 <sysShutdown(regs*)+0x18>
c0016798:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001679d:	8b 10                	mov    edx,DWORD PTR [eax]
c001679f:	6a 00                	push   0x0
c00167a1:	6a 00                	push   0x0
c00167a3:	6a 01                	push   0x1
c00167a5:	eb e8                	jmp    c001678f <sysShutdown(regs*)+0x33>
c00167a7:	a1 40 92 02 c0       	mov    eax,ds:0xc0029240
c00167ac:	85 c0                	test   eax,eax
c00167ae:	74 02                	je     c00167b2 <sysShutdown(regs*)+0x56>
c00167b0:	ff d0                	call   eax
c00167b2:	31 c0                	xor    eax,eax
c00167b4:	31 d2                	xor    edx,edx
c00167b6:	83 c4 0c             	add    esp,0xc
c00167b9:	c3                   	ret    

c00167ba <sysCallRealpath(regs*)>:
c00167ba:	83 ec 0c             	sub    esp,0xc
c00167bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00167c4:	85 d2                	test   edx,edx
c00167c6:	74 07                	je     c00167cf <sysCallRealpath(regs*)+0x15>
c00167c8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00167cb:	85 c0                	test   eax,eax
c00167cd:	75 0b                	jne    c00167da <sysCallRealpath(regs*)+0x20>
c00167cf:	b8 01 00 00 00       	mov    eax,0x1
c00167d4:	31 d2                	xor    edx,edx
c00167d6:	83 c4 0c             	add    esp,0xc
c00167d9:	c3                   	ret    
c00167da:	51                   	push   ecx
c00167db:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00167e1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00167e4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00167ea:	51                   	push   ecx
c00167eb:	52                   	push   edx
c00167ec:	50                   	push   eax
c00167ed:	e8 ca 6c ff ff       	call   c000d4bc <Fs::standardiseFiles(char*, char const*, char const*)>
c00167f2:	83 c4 10             	add    esp,0x10
c00167f5:	31 c0                	xor    eax,eax
c00167f7:	31 d2                	xor    edx,edx
c00167f9:	83 c4 0c             	add    esp,0xc
c00167fc:	c3                   	ret    

c00167fd <sysCallReadDir(regs*)>:
c00167fd:	53                   	push   ebx
c00167fe:	83 ec 18             	sub    esp,0x18
c0016801:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016805:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016808:	83 f8 02             	cmp    eax,0x2
c001680b:	76 60                	jbe    c001686d <sysCallReadDir(regs*)+0x70>
c001680d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0016814:	77 48                	ja     c001685e <sysCallReadDir(regs*)+0x61>
c0016816:	83 ec 0c             	sub    esp,0xc
c0016819:	50                   	push   eax
c001681a:	e8 2c 54 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	85 c0                	test   eax,eax
c0016824:	74 38                	je     c001685e <sysCallReadDir(regs*)+0x61>
c0016826:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001682e:	83 ec 0c             	sub    esp,0xc
c0016831:	8b 10                	mov    edx,DWORD PTR [eax]
c0016833:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016837:	51                   	push   ecx
c0016838:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001683b:	6a 00                	push   0x0
c001683d:	68 10 01 00 00       	push   0x110
c0016842:	50                   	push   eax
c0016843:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016846:	83 c4 20             	add    esp,0x20
c0016849:	85 c0                	test   eax,eax
c001684b:	74 29                	je     c0016876 <sysCallReadDir(regs*)+0x79>
c001684d:	83 f8 07             	cmp    eax,0x7
c0016850:	74 1b                	je     c001686d <sysCallReadDir(regs*)+0x70>
c0016852:	b8 02 00 00 00       	mov    eax,0x2
c0016857:	31 d2                	xor    edx,edx
c0016859:	83 c4 18             	add    esp,0x18
c001685c:	5b                   	pop    ebx
c001685d:	c3                   	ret    
c001685e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016863:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016868:	83 c4 18             	add    esp,0x18
c001686b:	5b                   	pop    ebx
c001686c:	c3                   	ret    
c001686d:	b8 01 00 00 00       	mov    eax,0x1
c0016872:	31 d2                	xor    edx,edx
c0016874:	eb e3                	jmp    c0016859 <sysCallReadDir(regs*)+0x5c>
c0016876:	31 c0                	xor    eax,eax
c0016878:	31 d2                	xor    edx,edx
c001687a:	eb dd                	jmp    c0016859 <sysCallReadDir(regs*)+0x5c>

c001687c <sysCallIsATTY(regs*)>:
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016883:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016886:	83 f8 02             	cmp    eax,0x2
c0016889:	76 07                	jbe    c0016892 <sysCallIsATTY(regs*)+0x16>
c001688b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016890:	75 26                	jne    c00168b8 <sysCallIsATTY(regs*)+0x3c>
c0016892:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016897:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001689a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168a0:	85 c0                	test   eax,eax
c00168a2:	74 24                	je     c00168c8 <sysCallIsATTY(regs*)+0x4c>
c00168a4:	83 ec 0c             	sub    esp,0xc
c00168a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00168a9:	50                   	push   eax
c00168aa:	ff 12                	call   DWORD PTR [edx]
c00168ac:	31 d2                	xor    edx,edx
c00168ae:	0f b6 c0             	movzx  eax,al
c00168b1:	83 c4 10             	add    esp,0x10
c00168b4:	83 c4 0c             	add    esp,0xc
c00168b7:	c3                   	ret    
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	50                   	push   eax
c00168bc:	e8 8a 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00168c1:	83 c4 10             	add    esp,0x10
c00168c4:	85 c0                	test   eax,eax
c00168c6:	75 dc                	jne    c00168a4 <sysCallIsATTY(regs*)+0x28>
c00168c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168d2:	83 c4 0c             	add    esp,0xc
c00168d5:	c3                   	ret    

c00168d6 <sysCallSeek(regs*)>:
c00168d6:	53                   	push   ebx
c00168d7:	83 ec 08             	sub    esp,0x8
c00168da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168e1:	8d 50 fd             	lea    edx,[eax-0x3]
c00168e4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00168ea:	77 32                	ja     c001691e <sysCallSeek(regs*)+0x48>
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	50                   	push   eax
c00168f0:	e8 56 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00168f5:	83 c4 0c             	add    esp,0xc
c00168f8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00168fb:	31 db                	xor    ebx,ebx
c00168fd:	53                   	push   ebx
c00168fe:	51                   	push   ecx
c00168ff:	50                   	push   eax
c0016900:	e8 f9 6e ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0016905:	83 c4 10             	add    esp,0x10
c0016908:	85 c0                	test   eax,eax
c001690a:	0f 95 c0             	setne  al
c001690d:	31 d2                	xor    edx,edx
c001690f:	0f b6 c0             	movzx  eax,al
c0016912:	f7 d8                	neg    eax
c0016914:	83 d2 00             	adc    edx,0x0
c0016917:	83 c4 08             	add    esp,0x8
c001691a:	f7 da                	neg    edx
c001691c:	5b                   	pop    ebx
c001691d:	c3                   	ret    
c001691e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016923:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016928:	83 c4 08             	add    esp,0x8
c001692b:	5b                   	pop    ebx
c001692c:	c3                   	ret    

c001692d <sysCallTell(regs*)>:
c001692d:	53                   	push   ebx
c001692e:	83 ec 08             	sub    esp,0x8
c0016931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016935:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016938:	83 f8 02             	cmp    eax,0x2
c001693b:	76 4d                	jbe    c001698a <sysCallTell(regs*)+0x5d>
c001693d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016942:	76 19                	jbe    c001695d <sysCallTell(regs*)+0x30>
c0016944:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016947:	31 d2                	xor    edx,edx
c0016949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001694f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016956:	31 c0                	xor    eax,eax
c0016958:	83 c4 08             	add    esp,0x8
c001695b:	5b                   	pop    ebx
c001695c:	c3                   	ret    
c001695d:	83 ec 0c             	sub    esp,0xc
c0016960:	50                   	push   eax
c0016961:	e8 e5 52 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016966:	5a                   	pop    edx
c0016967:	59                   	pop    ecx
c0016968:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001696b:	50                   	push   eax
c001696c:	e8 e3 6e ff ff       	call   c000d854 <File::tell(unsigned long long*)>
c0016971:	83 c4 10             	add    esp,0x10
c0016974:	85 c0                	test   eax,eax
c0016976:	0f 95 c0             	setne  al
c0016979:	31 d2                	xor    edx,edx
c001697b:	0f b6 c0             	movzx  eax,al
c001697e:	f7 d8                	neg    eax
c0016980:	83 d2 00             	adc    edx,0x0
c0016983:	83 c4 08             	add    esp,0x8
c0016986:	f7 da                	neg    edx
c0016988:	5b                   	pop    ebx
c0016989:	c3                   	ret    
c001698a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001698f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016994:	83 c4 08             	add    esp,0x8
c0016997:	5b                   	pop    ebx
c0016998:	c3                   	ret    

c0016999 <sysCallSize(regs*)>:
c0016999:	53                   	push   ebx
c001699a:	83 ec 18             	sub    esp,0x18
c001699d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00169a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169a4:	83 f8 02             	cmp    eax,0x2
c00169a7:	76 53                	jbe    c00169fc <sysCallSize(regs*)+0x63>
c00169a9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00169ae:	76 19                	jbe    c00169c9 <sysCallSize(regs*)+0x30>
c00169b0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169b3:	31 d2                	xor    edx,edx
c00169b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169c2:	31 c0                	xor    eax,eax
c00169c4:	83 c4 18             	add    esp,0x18
c00169c7:	5b                   	pop    ebx
c00169c8:	c3                   	ret    
c00169c9:	83 ec 0c             	sub    esp,0xc
c00169cc:	50                   	push   eax
c00169cd:	e8 79 52 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00169d2:	83 c4 0c             	add    esp,0xc
c00169d5:	8d 54 24 13          	lea    edx,[esp+0x13]
c00169d9:	52                   	push   edx
c00169da:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169dd:	50                   	push   eax
c00169de:	e8 09 70 ff ff       	call   c000d9ec <File::stat(unsigned long long*, bool*)>
c00169e3:	83 c4 10             	add    esp,0x10
c00169e6:	85 c0                	test   eax,eax
c00169e8:	0f 95 c0             	setne  al
c00169eb:	31 d2                	xor    edx,edx
c00169ed:	0f b6 c0             	movzx  eax,al
c00169f0:	f7 d8                	neg    eax
c00169f2:	83 d2 00             	adc    edx,0x0
c00169f5:	83 c4 18             	add    esp,0x18
c00169f8:	f7 da                	neg    edx
c00169fa:	5b                   	pop    ebx
c00169fb:	c3                   	ret    
c00169fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a01:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a06:	83 c4 18             	add    esp,0x18
c0016a09:	5b                   	pop    ebx
c0016a0a:	c3                   	ret    

c0016a0b <sysCallSizeFromFilename(regs*)>:
c0016a0b:	57                   	push   edi
c0016a0c:	56                   	push   esi
c0016a0d:	53                   	push   ebx
c0016a0e:	83 ec 20             	sub    esp,0x20
c0016a11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a15:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016a18:	83 fb 02             	cmp    ebx,0x2
c0016a1b:	0f 86 88 00 00 00    	jbe    c0016aa9 <sysCallSizeFromFilename(regs*)+0x9e>
c0016a21:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016a27:	76 1b                	jbe    c0016a44 <sysCallSizeFromFilename(regs*)+0x39>
c0016a29:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016a2c:	31 d2                	xor    edx,edx
c0016a2e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016a34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a3b:	83 c4 20             	add    esp,0x20
c0016a3e:	31 c0                	xor    eax,eax
c0016a40:	5b                   	pop    ebx
c0016a41:	5e                   	pop    esi
c0016a42:	5f                   	pop    edi
c0016a43:	c3                   	ret    
c0016a44:	83 ec 0c             	sub    esp,0xc
c0016a47:	68 14 01 00 00       	push   0x114
c0016a4c:	e8 96 33 ff ff       	call   c0009de7 <malloc>
c0016a51:	83 c4 0c             	add    esp,0xc
c0016a54:	89 c7                	mov    edi,eax
c0016a56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a5b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016a5e:	53                   	push   ebx
c0016a5f:	57                   	push   edi
c0016a60:	e8 01 6c ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0016a65:	83 c4 0c             	add    esp,0xc
c0016a68:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016a6c:	50                   	push   eax
c0016a6d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016a70:	57                   	push   edi
c0016a71:	e8 76 6f ff ff       	call   c000d9ec <File::stat(unsigned long long*, bool*)>
c0016a76:	83 c4 10             	add    esp,0x10
c0016a79:	85 ff                	test   edi,edi
c0016a7b:	74 14                	je     c0016a91 <sysCallSizeFromFilename(regs*)+0x86>
c0016a7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a81:	8b 17                	mov    edx,DWORD PTR [edi]
c0016a83:	83 ec 0c             	sub    esp,0xc
c0016a86:	57                   	push   edi
c0016a87:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016a8a:	83 c4 10             	add    esp,0x10
c0016a8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a91:	85 c0                	test   eax,eax
c0016a93:	0f 95 c0             	setne  al
c0016a96:	31 d2                	xor    edx,edx
c0016a98:	0f b6 c0             	movzx  eax,al
c0016a9b:	f7 d8                	neg    eax
c0016a9d:	83 d2 00             	adc    edx,0x0
c0016aa0:	83 c4 20             	add    esp,0x20
c0016aa3:	f7 da                	neg    edx
c0016aa5:	5b                   	pop    ebx
c0016aa6:	5e                   	pop    esi
c0016aa7:	5f                   	pop    edi
c0016aa8:	c3                   	ret    
c0016aa9:	83 c4 20             	add    esp,0x20
c0016aac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ab1:	5b                   	pop    ebx
c0016ab2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016ab7:	5e                   	pop    esi
c0016ab8:	5f                   	pop    edi
c0016ab9:	c3                   	ret    

c0016aba <sysCallClose(regs*)>:
c0016aba:	53                   	push   ebx
c0016abb:	83 ec 08             	sub    esp,0x8
c0016abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ac2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016ac5:	83 f8 02             	cmp    eax,0x2
c0016ac8:	76 41                	jbe    c0016b0b <sysCallClose(regs*)+0x51>
c0016aca:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016ad0:	83 fa 01             	cmp    edx,0x1
c0016ad3:	76 2d                	jbe    c0016b02 <sysCallClose(regs*)+0x48>
c0016ad5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016ada:	77 2f                	ja     c0016b0b <sysCallClose(regs*)+0x51>
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	50                   	push   eax
c0016ae0:	e8 66 51 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016ae5:	89 c3                	mov    ebx,eax
c0016ae7:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aea:	e8 af 6c ff ff       	call   c000d79e <File::close()>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	85 db                	test   ebx,ebx
c0016af4:	74 0c                	je     c0016b02 <sysCallClose(regs*)+0x48>
c0016af6:	83 ec 0c             	sub    esp,0xc
c0016af9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016afb:	53                   	push   ebx
c0016afc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aff:	83 c4 10             	add    esp,0x10
c0016b02:	31 c0                	xor    eax,eax
c0016b04:	31 d2                	xor    edx,edx
c0016b06:	83 c4 08             	add    esp,0x8
c0016b09:	5b                   	pop    ebx
c0016b0a:	c3                   	ret    
c0016b0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b10:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b15:	83 c4 08             	add    esp,0x8
c0016b18:	5b                   	pop    ebx
c0016b19:	c3                   	ret    

c0016b1a <sysCallOpenDir(regs*)>:
c0016b1a:	56                   	push   esi
c0016b1b:	53                   	push   ebx
c0016b1c:	53                   	push   ebx
c0016b1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b21:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016b24:	85 f6                	test   esi,esi
c0016b26:	74 59                	je     c0016b81 <sysCallOpenDir(regs*)+0x67>
c0016b28:	83 ec 0c             	sub    esp,0xc
c0016b2b:	68 14 01 00 00       	push   0x114
c0016b30:	e8 b2 32 ff ff       	call   c0009de7 <malloc>
c0016b35:	83 c4 0c             	add    esp,0xc
c0016b38:	89 c6                	mov    esi,eax
c0016b3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b3f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016b42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b45:	56                   	push   esi
c0016b46:	e8 7b 70 ff ff       	call   c000dbc6 <Directory::Directory(char const*, Process*)>
c0016b4b:	83 c4 10             	add    esp,0x10
c0016b4e:	85 f6                	test   esi,esi
c0016b50:	74 2f                	je     c0016b81 <sysCallOpenDir(regs*)+0x67>
c0016b52:	83 ec 0c             	sub    esp,0xc
c0016b55:	56                   	push   esi
c0016b56:	e8 45 71 ff ff       	call   c000dca0 <Directory::open()>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	85 c0                	test   eax,eax
c0016b60:	75 1f                	jne    c0016b81 <sysCallOpenDir(regs*)+0x67>
c0016b62:	83 ec 0c             	sub    esp,0xc
c0016b65:	56                   	push   esi
c0016b66:	e8 eb 4d ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0016b6b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	89 02                	mov    DWORD PTR [edx],eax
c0016b73:	c1 f8 1f             	sar    eax,0x1f
c0016b76:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b79:	31 c0                	xor    eax,eax
c0016b7b:	59                   	pop    ecx
c0016b7c:	31 d2                	xor    edx,edx
c0016b7e:	5b                   	pop    ebx
c0016b7f:	5e                   	pop    esi
c0016b80:	c3                   	ret    
c0016b81:	59                   	pop    ecx
c0016b82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b8c:	5b                   	pop    ebx
c0016b8d:	5e                   	pop    esi
c0016b8e:	c3                   	ret    

c0016b8f <sysCallCloseDir(regs*)>:
c0016b8f:	53                   	push   ebx
c0016b90:	83 ec 08             	sub    esp,0x8
c0016b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b9a:	8d 50 fd             	lea    edx,[eax-0x3]
c0016b9d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016ba3:	77 2f                	ja     c0016bd4 <sysCallCloseDir(regs*)+0x45>
c0016ba5:	83 ec 0c             	sub    esp,0xc
c0016ba8:	50                   	push   eax
c0016ba9:	e8 9d 50 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016bae:	89 c3                	mov    ebx,eax
c0016bb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bb3:	e8 44 71 ff ff       	call   c000dcfc <Directory::close()>
c0016bb8:	83 c4 10             	add    esp,0x10
c0016bbb:	85 db                	test   ebx,ebx
c0016bbd:	74 0c                	je     c0016bcb <sysCallCloseDir(regs*)+0x3c>
c0016bbf:	83 ec 0c             	sub    esp,0xc
c0016bc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bc4:	53                   	push   ebx
c0016bc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016bc8:	83 c4 10             	add    esp,0x10
c0016bcb:	31 c0                	xor    eax,eax
c0016bcd:	31 d2                	xor    edx,edx
c0016bcf:	83 c4 08             	add    esp,0x8
c0016bd2:	5b                   	pop    ebx
c0016bd3:	c3                   	ret    
c0016bd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016bd9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016bde:	83 c4 08             	add    esp,0x8
c0016be1:	5b                   	pop    ebx
c0016be2:	c3                   	ret    

c0016be3 <sysCallMakeDir(regs*)>:
c0016be3:	56                   	push   esi
c0016be4:	53                   	push   ebx
c0016be5:	83 ec 10             	sub    esp,0x10
c0016be8:	68 14 01 00 00       	push   0x114
c0016bed:	e8 f5 31 ff ff       	call   c0009de7 <malloc>
c0016bf2:	83 c4 0c             	add    esp,0xc
c0016bf5:	89 c3                	mov    ebx,eax
c0016bf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bfc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016bff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c03:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c06:	53                   	push   ebx
c0016c07:	e8 ba 6f ff ff       	call   c000dbc6 <Directory::Directory(char const*, Process*)>
c0016c0c:	83 c4 10             	add    esp,0x10
c0016c0f:	85 db                	test   ebx,ebx
c0016c11:	74 32                	je     c0016c45 <sysCallMakeDir(regs*)+0x62>
c0016c13:	83 ec 0c             	sub    esp,0xc
c0016c16:	53                   	push   ebx
c0016c17:	e8 64 72 ff ff       	call   c000de80 <Directory::create()>
c0016c1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c1f:	89 c6                	mov    esi,eax
c0016c21:	e8 d6 70 ff ff       	call   c000dcfc <Directory::close()>
c0016c26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	31 c0                	xor    eax,eax
c0016c33:	59                   	pop    ecx
c0016c34:	85 f6                	test   esi,esi
c0016c36:	5b                   	pop    ebx
c0016c37:	0f 95 c0             	setne  al
c0016c3a:	5e                   	pop    esi
c0016c3b:	31 d2                	xor    edx,edx
c0016c3d:	f7 d8                	neg    eax
c0016c3f:	83 d2 00             	adc    edx,0x0
c0016c42:	f7 da                	neg    edx
c0016c44:	c3                   	ret    
c0016c45:	59                   	pop    ecx
c0016c46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c50:	5b                   	pop    ebx
c0016c51:	5e                   	pop    esi
c0016c52:	c3                   	ret    

c0016c53 <sysCallWait(regs*)>:
c0016c53:	83 ec 10             	sub    esp,0x10
c0016c56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c5a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016c5d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c60:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016c63:	e8 fc 24 00 00       	call   c0019164 <waitTask(int, int*, int)>
c0016c68:	83 c4 1c             	add    esp,0x1c
c0016c6b:	99                   	cdq    
c0016c6c:	c3                   	ret    

c0016c6d <sysCallNotImpl(regs*)>:
c0016c6d:	83 ec 18             	sub    esp,0x18
c0016c70:	68 79 6a 02 c0       	push   0xc0026a79
c0016c75:	e8 63 e5 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0016c7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c84:	83 c4 1c             	add    esp,0x1c
c0016c87:	c3                   	ret    

c0016c88 <sysPanic(regs*)>:
c0016c88:	83 ec 18             	sub    esp,0x18
c0016c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c8f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c92:	e8 46 e5 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0016c97:	b8 01 00 00 00       	mov    eax,0x1
c0016c9c:	31 d2                	xor    edx,edx
c0016c9e:	83 c4 1c             	add    esp,0x1c
c0016ca1:	c3                   	ret    

c0016ca2 <sysCallRmdir(regs*)>:
c0016ca2:	56                   	push   esi
c0016ca3:	53                   	push   ebx
c0016ca4:	83 ec 20             	sub    esp,0x20
c0016ca7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cab:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016cae:	68 14 01 00 00       	push   0x114
c0016cb3:	e8 2f 31 ff ff       	call   c0009de7 <malloc>
c0016cb8:	83 c4 0c             	add    esp,0xc
c0016cbb:	89 c3                	mov    ebx,eax
c0016cbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016cc5:	56                   	push   esi
c0016cc6:	53                   	push   ebx
c0016cc7:	e8 9a 69 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0016ccc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ccf:	e8 e4 6b ff ff       	call   c000d8b8 <File::unlink()>
c0016cd4:	83 c4 10             	add    esp,0x10
c0016cd7:	85 db                	test   ebx,ebx
c0016cd9:	74 14                	je     c0016cef <sysCallRmdir(regs*)+0x4d>
c0016cdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cdf:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016ce1:	83 ec 0c             	sub    esp,0xc
c0016ce4:	53                   	push   ebx
c0016ce5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016ce8:	83 c4 10             	add    esp,0x10
c0016ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cef:	85 c0                	test   eax,eax
c0016cf1:	0f 95 c0             	setne  al
c0016cf4:	31 d2                	xor    edx,edx
c0016cf6:	0f b6 c0             	movzx  eax,al
c0016cf9:	f7 d8                	neg    eax
c0016cfb:	83 d2 00             	adc    edx,0x0
c0016cfe:	83 c4 14             	add    esp,0x14
c0016d01:	f7 da                	neg    edx
c0016d03:	5b                   	pop    ebx
c0016d04:	5e                   	pop    esi
c0016d05:	c3                   	ret    

c0016d06 <sysCallUnlink(regs*)>:
c0016d06:	56                   	push   esi
c0016d07:	53                   	push   ebx
c0016d08:	83 ec 20             	sub    esp,0x20
c0016d0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d0f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016d12:	68 14 01 00 00       	push   0x114
c0016d17:	e8 cb 30 ff ff       	call   c0009de7 <malloc>
c0016d1c:	83 c4 0c             	add    esp,0xc
c0016d1f:	89 c3                	mov    ebx,eax
c0016d21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d26:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d29:	56                   	push   esi
c0016d2a:	53                   	push   ebx
c0016d2b:	e8 36 69 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0016d30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d33:	e8 80 6b ff ff       	call   c000d8b8 <File::unlink()>
c0016d38:	83 c4 10             	add    esp,0x10
c0016d3b:	85 db                	test   ebx,ebx
c0016d3d:	74 14                	je     c0016d53 <sysCallUnlink(regs*)+0x4d>
c0016d3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d43:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	53                   	push   ebx
c0016d49:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d4c:	83 c4 10             	add    esp,0x10
c0016d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d53:	85 c0                	test   eax,eax
c0016d55:	0f 95 c0             	setne  al
c0016d58:	31 d2                	xor    edx,edx
c0016d5a:	0f b6 c0             	movzx  eax,al
c0016d5d:	f7 d8                	neg    eax
c0016d5f:	83 d2 00             	adc    edx,0x0
c0016d62:	83 c4 14             	add    esp,0x14
c0016d65:	f7 da                	neg    edx
c0016d67:	5b                   	pop    ebx
c0016d68:	5e                   	pop    esi
c0016d69:	c3                   	ret    

c0016d6a <sysCallGetArgv(regs*)>:
c0016d6a:	83 ec 0c             	sub    esp,0xc
c0016d6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016d71:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016d74:	85 c0                	test   eax,eax
c0016d76:	78 2b                	js     c0016da3 <sysCallGetArgv(regs*)+0x39>
c0016d78:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d7e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016d81:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016d87:	7d 1a                	jge    c0016da3 <sysCallGetArgv(regs*)+0x39>
c0016d89:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016d90:	85 c0                	test   eax,eax
c0016d92:	74 17                	je     c0016dab <sysCallGetArgv(regs*)+0x41>
c0016d94:	83 ec 08             	sub    esp,0x8
c0016d97:	50                   	push   eax
c0016d98:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016d9b:	e8 b0 99 fe ff       	call   c0000750 <strcpy>
c0016da0:	83 c4 10             	add    esp,0x10
c0016da3:	31 c0                	xor    eax,eax
c0016da5:	31 d2                	xor    edx,edx
c0016da7:	83 c4 0c             	add    esp,0xc
c0016daa:	c3                   	ret    
c0016dab:	b8 01 00 00 00       	mov    eax,0x1
c0016db0:	31 d2                	xor    edx,edx
c0016db2:	83 c4 0c             	add    esp,0xc
c0016db5:	c3                   	ret    

c0016db6 <sysCallTTYName(regs*)>:
c0016db6:	56                   	push   esi
c0016db7:	53                   	push   ebx
c0016db8:	53                   	push   ebx
c0016db9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016dbd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016dc0:	85 c0                	test   eax,eax
c0016dc2:	74 5f                	je     c0016e23 <sysCallTTYName(regs*)+0x6d>
c0016dc4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016dc7:	83 f8 02             	cmp    eax,0x2
c0016dca:	77 3e                	ja     c0016e0a <sysCallTTYName(regs*)+0x54>
c0016dcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dd1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016dd4:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016dda:	85 db                	test   ebx,ebx
c0016ddc:	74 45                	je     c0016e23 <sysCallTTYName(regs*)+0x6d>
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016de3:	53                   	push   ebx
c0016de4:	ff 10                	call   DWORD PTR [eax]
c0016de6:	83 c4 10             	add    esp,0x10
c0016de9:	84 c0                	test   al,al
c0016deb:	74 41                	je     c0016e2e <sysCallTTYName(regs*)+0x78>
c0016ded:	83 ec 08             	sub    esp,0x8
c0016df0:	81 c3 82 00 00 00    	add    ebx,0x82
c0016df6:	53                   	push   ebx
c0016df7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016dfa:	e8 51 99 fe ff       	call   c0000750 <strcpy>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	31 c0                	xor    eax,eax
c0016e04:	59                   	pop    ecx
c0016e05:	31 d2                	xor    edx,edx
c0016e07:	5b                   	pop    ebx
c0016e08:	5e                   	pop    esi
c0016e09:	c3                   	ret    
c0016e0a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016e0f:	74 bb                	je     c0016dcc <sysCallTTYName(regs*)+0x16>
c0016e11:	83 ec 0c             	sub    esp,0xc
c0016e14:	50                   	push   eax
c0016e15:	e8 31 4e ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016e1a:	83 c4 10             	add    esp,0x10
c0016e1d:	89 c3                	mov    ebx,eax
c0016e1f:	85 db                	test   ebx,ebx
c0016e21:	75 bb                	jne    c0016dde <sysCallTTYName(regs*)+0x28>
c0016e23:	59                   	pop    ecx
c0016e24:	b8 01 00 00 00       	mov    eax,0x1
c0016e29:	31 d2                	xor    edx,edx
c0016e2b:	5b                   	pop    ebx
c0016e2c:	5e                   	pop    esi
c0016e2d:	c3                   	ret    
c0016e2e:	59                   	pop    ecx
c0016e2f:	b8 02 00 00 00       	mov    eax,0x2
c0016e34:	31 d2                	xor    edx,edx
c0016e36:	5b                   	pop    ebx
c0016e37:	5e                   	pop    esi
c0016e38:	c3                   	ret    

c0016e39 <sysCallUSleep(regs*)>:
c0016e39:	83 ec 1c             	sub    esp,0x1c
c0016e3c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016e40:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016e43:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016e46:	6a 00                	push   0x0
c0016e48:	6a 64                	push   0x64
c0016e4a:	52                   	push   edx
c0016e4b:	50                   	push   eax
c0016e4c:	e8 7f c1 00 00       	call   c0022fd0 <__udivdi3>
c0016e51:	83 c4 14             	add    esp,0x14
c0016e54:	50                   	push   eax
c0016e55:	e8 da 23 00 00       	call   c0019234 <milliTenthSleep(unsigned int)>
c0016e5a:	31 c0                	xor    eax,eax
c0016e5c:	31 d2                	xor    edx,edx
c0016e5e:	83 c4 1c             	add    esp,0x1c
c0016e61:	c3                   	ret    

c0016e62 <sysCallSpawn(regs*)>:
c0016e62:	56                   	push   esi
c0016e63:	53                   	push   ebx
c0016e64:	50                   	push   eax
c0016e65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e69:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e6c:	85 c0                	test   eax,eax
c0016e6e:	75 08                	jne    c0016e78 <sysCallSpawn(regs*)+0x16>
c0016e70:	59                   	pop    ecx
c0016e71:	31 c0                	xor    eax,eax
c0016e73:	31 d2                	xor    edx,edx
c0016e75:	5b                   	pop    ebx
c0016e76:	5e                   	pop    esi
c0016e77:	c3                   	ret    
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	68 1f 07 00 00       	push   0x71f
c0016e80:	e8 62 2f ff ff       	call   c0009de7 <malloc>
c0016e85:	83 c4 10             	add    esp,0x10
c0016e88:	89 c6                	mov    esi,eax
c0016e8a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016e8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016e90:	85 c0                	test   eax,eax
c0016e92:	75 32                	jne    c0016ec6 <sysCallSpawn(regs*)+0x64>
c0016e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e9c:	52                   	push   edx
c0016e9d:	50                   	push   eax
c0016e9e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ea1:	56                   	push   esi
c0016ea2:	e8 85 1a 00 00       	call   c001892c <Process::Process(char const*, Process*, char**)>
c0016ea7:	83 c4 10             	add    esp,0x10
c0016eaa:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016eb1:	75 bd                	jne    c0016e70 <sysCallSpawn(regs*)+0xe>
c0016eb3:	83 ec 0c             	sub    esp,0xc
c0016eb6:	56                   	push   esi
c0016eb7:	e8 5c 1f 00 00       	call   c0018e18 <Process::createUserThread()>
c0016ebc:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ebe:	83 c4 10             	add    esp,0x10
c0016ec1:	99                   	cdq    
c0016ec2:	59                   	pop    ecx
c0016ec3:	5b                   	pop    ebx
c0016ec4:	5e                   	pop    esi
c0016ec5:	c3                   	ret    
c0016ec6:	31 c0                	xor    eax,eax
c0016ec8:	eb d2                	jmp    c0016e9c <sysCallSpawn(regs*)+0x3a>

c0016eca <sysCallGetEnv(regs*)>:
c0016eca:	57                   	push   edi
c0016ecb:	56                   	push   esi
c0016ecc:	53                   	push   ebx
c0016ecd:	83 ec 1c             	sub    esp,0x1c
c0016ed0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ed4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016edc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016edf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ee2:	e8 42 e2 ff ff       	call   c0015129 <Krnl::getProcessTotalEnvCount(Process*)>
c0016ee7:	83 c4 10             	add    esp,0x10
c0016eea:	39 c7                	cmp    edi,eax
c0016eec:	7c 14                	jl     c0016f02 <sysCallGetEnv(regs*)+0x38>
c0016eee:	85 f6                	test   esi,esi
c0016ef0:	75 0b                	jne    c0016efd <sysCallGetEnv(regs*)+0x33>
c0016ef2:	83 c4 10             	add    esp,0x10
c0016ef5:	31 c0                	xor    eax,eax
c0016ef7:	5b                   	pop    ebx
c0016ef8:	31 d2                	xor    edx,edx
c0016efa:	5e                   	pop    esi
c0016efb:	5f                   	pop    edi
c0016efc:	c3                   	ret    
c0016efd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f00:	eb f0                	jmp    c0016ef2 <sysCallGetEnv(regs*)+0x28>
c0016f02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f06:	52                   	push   edx
c0016f07:	57                   	push   edi
c0016f08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f0e:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016f11:	50                   	push   eax
c0016f12:	e8 32 e2 ff ff       	call   c0015149 <Krnl::getProcessEnvPair(Process*, int)>
c0016f17:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016f1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f1e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016f22:	83 c4 0c             	add    esp,0xc
c0016f25:	85 c9                	test   ecx,ecx
c0016f27:	75 23                	jne    c0016f4c <sysCallGetEnv(regs*)+0x82>
c0016f29:	83 ec 0c             	sub    esp,0xc
c0016f2c:	50                   	push   eax
c0016f2d:	e8 7e 97 fe ff       	call   c00006b0 <strlen>
c0016f32:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f35:	89 c3                	mov    ebx,eax
c0016f37:	e8 74 97 fe ff       	call   c00006b0 <strlen>
c0016f3c:	83 c4 10             	add    esp,0x10
c0016f3f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016f43:	83 c4 10             	add    esp,0x10
c0016f46:	31 d2                	xor    edx,edx
c0016f48:	5b                   	pop    ebx
c0016f49:	5e                   	pop    esi
c0016f4a:	5f                   	pop    edi
c0016f4b:	c3                   	ret    
c0016f4c:	83 ec 08             	sub    esp,0x8
c0016f4f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f52:	50                   	push   eax
c0016f53:	56                   	push   esi
c0016f54:	e8 f7 97 fe ff       	call   c0000750 <strcpy>
c0016f59:	58                   	pop    eax
c0016f5a:	5a                   	pop    edx
c0016f5b:	68 93 6a 02 c0       	push   0xc0026a93
c0016f60:	56                   	push   esi
c0016f61:	e8 2a 99 fe ff       	call   c0000890 <strcat>
c0016f66:	59                   	pop    ecx
c0016f67:	5b                   	pop    ebx
c0016f68:	57                   	push   edi
c0016f69:	56                   	push   esi
c0016f6a:	e8 21 99 fe ff       	call   c0000890 <strcat>
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	e9 7b ff ff ff       	jmp    c0016ef2 <sysCallGetEnv(regs*)+0x28>

c0016f77 <sysAppSettings(regs*)>:
c0016f77:	57                   	push   edi
c0016f78:	56                   	push   esi
c0016f79:	56                   	push   esi
c0016f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f7e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016f81:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016f87:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016f8c:	66 3d c0 09          	cmp    ax,0x9c0
c0016f90:	75 2e                	jne    c0016fc0 <sysAppSettings(regs*)+0x49>
c0016f92:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016f98:	83 e0 1f             	and    eax,0x1f
c0016f9b:	3c 01                	cmp    al,0x1
c0016f9d:	74 2c                	je     c0016fcb <sysAppSettings(regs*)+0x54>
c0016f9f:	3c 07                	cmp    al,0x7
c0016fa1:	0f 84 b3 00 00 00    	je     c001705a <sysAppSettings(regs*)+0xe3>
c0016fa7:	84 c0                	test   al,al
c0016fa9:	0f 84 d2 00 00 00    	je     c0017081 <sysAppSettings(regs*)+0x10a>
c0016faf:	3c 08                	cmp    al,0x8
c0016fb1:	74 63                	je     c0017016 <sysAppSettings(regs*)+0x9f>
c0016fb3:	59                   	pop    ecx
c0016fb4:	0f b6 c0             	movzx  eax,al
c0016fb7:	5e                   	pop    esi
c0016fb8:	05 e8 03 00 00       	add    eax,0x3e8
c0016fbd:	5f                   	pop    edi
c0016fbe:	99                   	cdq    
c0016fbf:	c3                   	ret    
c0016fc0:	b8 01 00 00 00       	mov    eax,0x1
c0016fc5:	59                   	pop    ecx
c0016fc6:	31 d2                	xor    edx,edx
c0016fc8:	5e                   	pop    esi
c0016fc9:	5f                   	pop    edi
c0016fca:	c3                   	ret    
c0016fcb:	50                   	push   eax
c0016fcc:	68 00 01 00 00       	push   0x100
c0016fd1:	6a 00                	push   0x0
c0016fd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fdb:	83 c0 0c             	add    eax,0xc
c0016fde:	50                   	push   eax
c0016fdf:	e8 b0 96 fe ff       	call   c0000694 <memset>
c0016fe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fe9:	b9 ff 00 00 00       	mov    ecx,0xff
c0016fee:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016ff1:	83 c7 0c             	add    edi,0xc
c0016ff4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ff6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ffb:	5a                   	pop    edx
c0016ffc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fff:	59                   	pop    ecx
c0017000:	8d 50 0c             	lea    edx,[eax+0xc]
c0017003:	52                   	push   edx
c0017004:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001700a:	e8 65 3d ff ff       	call   c000ad74 <VgaText::setTitle(char*)>
c001700f:	83 c4 10             	add    esp,0x10
c0017012:	31 c0                	xor    eax,eax
c0017014:	eb af                	jmp    c0016fc5 <sysAppSettings(regs*)+0x4e>
c0017016:	83 ec 08             	sub    esp,0x8
c0017019:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001701f:	83 e0 0f             	and    eax,0xf
c0017022:	50                   	push   eax
c0017023:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017028:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001702b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017031:	e8 2e 3d ff ff       	call   c000ad64 <VgaText::setTitleColour(VgaColour)>
c0017036:	5f                   	pop    edi
c0017037:	58                   	pop    eax
c0017038:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001703e:	c1 e8 04             	shr    eax,0x4
c0017041:	83 e0 0f             	and    eax,0xf
c0017044:	50                   	push   eax
c0017045:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001704a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001704d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017053:	e8 fc 3c ff ff       	call   c000ad54 <VgaText::setTitleTextColour(VgaColour)>
c0017058:	eb b5                	jmp    c001700f <sysAppSettings(regs*)+0x98>
c001705a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001705f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017062:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017068:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001706e:	c0 e8 06             	shr    al,0x6
c0017071:	83 e0 01             	and    eax,0x1
c0017074:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001707a:	31 c0                	xor    eax,eax
c001707c:	e9 44 ff ff ff       	jmp    c0016fc5 <sysAppSettings(regs*)+0x4e>
c0017081:	b8 02 00 00 00       	mov    eax,0x2
c0017086:	e9 3a ff ff ff       	jmp    c0016fc5 <sysAppSettings(regs*)+0x4e>

c001708b <sysSetFatAttrib(regs*)>:
c001708b:	57                   	push   edi
c001708c:	56                   	push   esi
c001708d:	53                   	push   ebx
c001708e:	83 ec 1c             	sub    esp,0x1c
c0017091:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017095:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0017098:	68 14 01 00 00       	push   0x114
c001709d:	e8 45 2d ff ff       	call   c0009de7 <malloc>
c00170a2:	83 c4 0c             	add    esp,0xc
c00170a5:	89 c3                	mov    ebx,eax
c00170a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170ac:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00170af:	57                   	push   edi
c00170b0:	53                   	push   ebx
c00170b1:	e8 b0 65 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c00170b6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00170b9:	83 c4 0c             	add    esp,0xc
c00170bc:	0f b6 d4             	movzx  edx,ah
c00170bf:	0f b6 c0             	movzx  eax,al
c00170c2:	52                   	push   edx
c00170c3:	50                   	push   eax
c00170c4:	53                   	push   ebx
c00170c5:	e8 88 68 ff ff       	call   c000d952 <File::chfatattr(unsigned char, unsigned char)>
c00170ca:	83 c4 10             	add    esp,0x10
c00170cd:	85 db                	test   ebx,ebx
c00170cf:	74 14                	je     c00170e5 <sysSetFatAttrib(regs*)+0x5a>
c00170d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00170d7:	83 ec 0c             	sub    esp,0xc
c00170da:	53                   	push   ebx
c00170db:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00170de:	83 c4 10             	add    esp,0x10
c00170e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170e5:	85 c0                	test   eax,eax
c00170e7:	0f 95 c0             	setne  al
c00170ea:	31 d2                	xor    edx,edx
c00170ec:	0f b6 c0             	movzx  eax,al
c00170ef:	f7 d8                	neg    eax
c00170f1:	83 d2 00             	adc    edx,0x0
c00170f4:	83 c4 10             	add    esp,0x10
c00170f7:	f7 da                	neg    edx
c00170f9:	5b                   	pop    ebx
c00170fa:	5e                   	pop    esi
c00170fb:	5f                   	pop    edi
c00170fc:	c3                   	ret    

c00170fd <sysPipe(regs*)>:
c00170fd:	57                   	push   edi
c00170fe:	56                   	push   esi
c00170ff:	53                   	push   ebx
c0017100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017104:	83 ec 0c             	sub    esp,0xc
c0017107:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001710a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001710d:	6a 20                	push   0x20
c001710f:	e8 d3 2c ff ff       	call   c0009de7 <malloc>
c0017114:	89 c3                	mov    ebx,eax
c0017116:	58                   	pop    eax
c0017117:	5a                   	pop    edx
c0017118:	68 00 50 00 00       	push   0x5000
c001711d:	53                   	push   ebx
c001711e:	e8 c9 39 ff ff       	call   c000aaec <Pipe::Pipe(int)>
c0017123:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017126:	e8 2b 48 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c001712b:	89 07                	mov    DWORD PTR [edi],eax
c001712d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017130:	e8 21 48 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0017135:	83 c4 10             	add    esp,0x10
c0017138:	89 06                	mov    DWORD PTR [esi],eax
c001713a:	31 d2                	xor    edx,edx
c001713c:	5b                   	pop    ebx
c001713d:	31 c0                	xor    eax,eax
c001713f:	5e                   	pop    esi
c0017140:	5f                   	pop    edi
c0017141:	c3                   	ret    

c0017142 <sysGetUnixTime(regs*)>:
c0017142:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0017147:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001714d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017151:	e9 30 70 ff ff       	jmp    c000e186 <Clock::timeInSecondsLocal()>

c0017156 <string_ends_with(char const*, char const*)>:
c0017156:	57                   	push   edi
c0017157:	56                   	push   esi
c0017158:	53                   	push   ebx
c0017159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001715d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017161:	83 ec 0c             	sub    esp,0xc
c0017164:	53                   	push   ebx
c0017165:	e8 46 95 fe ff       	call   c00006b0 <strlen>
c001716a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001716d:	89 c6                	mov    esi,eax
c001716f:	e8 3c 95 fe ff       	call   c00006b0 <strlen>
c0017174:	83 c4 10             	add    esp,0x10
c0017177:	39 c6                	cmp    esi,eax
c0017179:	7d 06                	jge    c0017181 <string_ends_with(char const*, char const*)+0x2b>
c001717b:	5b                   	pop    ebx
c001717c:	31 c0                	xor    eax,eax
c001717e:	5e                   	pop    esi
c001717f:	5f                   	pop    edi
c0017180:	c3                   	ret    
c0017181:	83 ec 08             	sub    esp,0x8
c0017184:	29 c6                	sub    esi,eax
c0017186:	57                   	push   edi
c0017187:	01 f3                	add    ebx,esi
c0017189:	53                   	push   ebx
c001718a:	e8 4d 96 fe ff       	call   c00007dc <strcmp>
c001718f:	83 c4 10             	add    esp,0x10
c0017192:	85 c0                	test   eax,eax
c0017194:	5b                   	pop    ebx
c0017195:	0f 94 c0             	sete   al
c0017198:	5e                   	pop    esi
c0017199:	0f b6 c0             	movzx  eax,al
c001719c:	5f                   	pop    edi
c001719d:	c3                   	ret    

c001719e <sysCallOpen(regs*)>:
c001719e:	56                   	push   esi
c001719f:	53                   	push   ebx
c00171a0:	81 ec 04 01 00 00    	sub    esp,0x104
c00171a6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00171ad:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00171b0:	85 c9                	test   ecx,ecx
c00171b2:	0f 84 ad 01 00 00    	je     c0017365 <sysCallOpen(regs*)+0x1c7>
c00171b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171bb:	85 c0                	test   eax,eax
c00171bd:	0f 84 a2 01 00 00    	je     c0017365 <sysCallOpen(regs*)+0x1c7>
c00171c3:	52                   	push   edx
c00171c4:	68 95 6a 02 c0       	push   0xc0026a95
c00171c9:	50                   	push   eax
c00171ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00171ce:	56                   	push   esi
c00171cf:	e8 e8 62 ff ff       	call   c000d4bc <Fs::standardiseFiles(char*, char const*, char const*)>
c00171d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00171d7:	e8 d4 94 fe ff       	call   c00006b0 <strlen>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	48                   	dec    eax
c00171e0:	74 1d                	je     c00171ff <sysCallOpen(regs*)+0x61>
c00171e2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00171e5:	eb 0f                	jmp    c00171f6 <sysCallOpen(regs*)+0x58>
c00171e7:	80 fa 3a             	cmp    dl,0x3a
c00171ea:	74 0f                	je     c00171fb <sysCallOpen(regs*)+0x5d>
c00171ec:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00171f0:	48                   	dec    eax
c00171f1:	74 0c                	je     c00171ff <sysCallOpen(regs*)+0x61>
c00171f3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00171f6:	80 fa 2e             	cmp    dl,0x2e
c00171f9:	75 ec                	jne    c00171e7 <sysCallOpen(regs*)+0x49>
c00171fb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00171ff:	83 ec 08             	sub    esp,0x8
c0017202:	68 99 6a 02 c0       	push   0xc0026a99
c0017207:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001720a:	e8 47 ff ff ff       	call   c0017156 <string_ends_with(char const*, char const*)>
c001720f:	83 c4 10             	add    esp,0x10
c0017212:	85 c0                	test   eax,eax
c0017214:	74 1d                	je     c0017233 <sysCallOpen(regs*)+0x95>
c0017216:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017219:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001721f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017226:	81 c4 04 01 00 00    	add    esp,0x104
c001722c:	31 c0                	xor    eax,eax
c001722e:	31 d2                	xor    edx,edx
c0017230:	5b                   	pop    ebx
c0017231:	5e                   	pop    esi
c0017232:	c3                   	ret    
c0017233:	83 ec 08             	sub    esp,0x8
c0017236:	68 9e 6a 02 c0       	push   0xc0026a9e
c001723b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001723e:	e8 13 ff ff ff       	call   c0017156 <string_ends_with(char const*, char const*)>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	85 c0                	test   eax,eax
c0017248:	75 cc                	jne    c0017216 <sysCallOpen(regs*)+0x78>
c001724a:	83 ec 08             	sub    esp,0x8
c001724d:	68 9a 6a 02 c0       	push   0xc0026a9a
c0017252:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017255:	e8 82 95 fe ff       	call   c00007dc <strcmp>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	85 c0                	test   eax,eax
c001725f:	74 b5                	je     c0017216 <sysCallOpen(regs*)+0x78>
c0017261:	83 ec 08             	sub    esp,0x8
c0017264:	68 99 6a 02 c0       	push   0xc0026a99
c0017269:	56                   	push   esi
c001726a:	e8 e7 fe ff ff       	call   c0017156 <string_ends_with(char const*, char const*)>
c001726f:	83 c4 10             	add    esp,0x10
c0017272:	85 c0                	test   eax,eax
c0017274:	75 a0                	jne    c0017216 <sysCallOpen(regs*)+0x78>
c0017276:	83 ec 08             	sub    esp,0x8
c0017279:	68 a3 6a 02 c0       	push   0xc0026aa3
c001727e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017281:	e8 d0 fe ff ff       	call   c0017156 <string_ends_with(char const*, char const*)>
c0017286:	83 c4 10             	add    esp,0x10
c0017289:	85 c0                	test   eax,eax
c001728b:	0f 85 e7 00 00 00    	jne    c0017378 <sysCallOpen(regs*)+0x1da>
c0017291:	83 ec 08             	sub    esp,0x8
c0017294:	68 a8 6a 02 c0       	push   0xc0026aa8
c0017299:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001729c:	e8 b5 fe ff ff       	call   c0017156 <string_ends_with(char const*, char const*)>
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	85 c0                	test   eax,eax
c00172a6:	0f 85 cc 00 00 00    	jne    c0017378 <sysCallOpen(regs*)+0x1da>
c00172ac:	83 ec 08             	sub    esp,0x8
c00172af:	68 a4 6a 02 c0       	push   0xc0026aa4
c00172b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172b7:	e8 20 95 fe ff       	call   c00007dc <strcmp>
c00172bc:	83 c4 10             	add    esp,0x10
c00172bf:	85 c0                	test   eax,eax
c00172c1:	0f 84 b1 00 00 00    	je     c0017378 <sysCallOpen(regs*)+0x1da>
c00172c7:	83 ec 08             	sub    esp,0x8
c00172ca:	68 a3 6a 02 c0       	push   0xc0026aa3
c00172cf:	56                   	push   esi
c00172d0:	e8 81 fe ff ff       	call   c0017156 <string_ends_with(char const*, char const*)>
c00172d5:	83 c4 10             	add    esp,0x10
c00172d8:	85 c0                	test   eax,eax
c00172da:	0f 85 98 00 00 00    	jne    c0017378 <sysCallOpen(regs*)+0x1da>
c00172e0:	83 ec 0c             	sub    esp,0xc
c00172e3:	68 14 01 00 00       	push   0x114
c00172e8:	e8 fa 2a ff ff       	call   c0009de7 <malloc>
c00172ed:	83 c4 0c             	add    esp,0xc
c00172f0:	89 c6                	mov    esi,eax
c00172f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172f7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00172fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172fd:	56                   	push   esi
c00172fe:	e8 63 63 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0017303:	83 c4 10             	add    esp,0x10
c0017306:	85 f6                	test   esi,esi
c0017308:	74 5b                	je     c0017365 <sysCallOpen(regs*)+0x1c7>
c001730a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001730d:	0f b6 c2             	movzx  eax,dl
c0017310:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017313:	89 d0                	mov    eax,edx
c0017315:	83 e0 01             	and    eax,0x1
c0017318:	f6 c2 02             	test   dl,0x2
c001731b:	74 03                	je     c0017320 <sysCallOpen(regs*)+0x182>
c001731d:	83 c8 02             	or     eax,0x2
c0017320:	f6 c2 04             	test   dl,0x4
c0017323:	74 03                	je     c0017328 <sysCallOpen(regs*)+0x18a>
c0017325:	83 c8 04             	or     eax,0x4
c0017328:	f6 c2 08             	test   dl,0x8
c001732b:	74 03                	je     c0017330 <sysCallOpen(regs*)+0x192>
c001732d:	83 c8 0a             	or     eax,0xa
c0017330:	83 e2 10             	and    edx,0x10
c0017333:	74 03                	je     c0017338 <sysCallOpen(regs*)+0x19a>
c0017335:	83 c8 12             	or     eax,0x12
c0017338:	83 ec 08             	sub    esp,0x8
c001733b:	50                   	push   eax
c001733c:	56                   	push   esi
c001733d:	e8 fe 63 ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0017342:	83 c4 10             	add    esp,0x10
c0017345:	85 c0                	test   eax,eax
c0017347:	75 1c                	jne    c0017365 <sysCallOpen(regs*)+0x1c7>
c0017349:	83 ec 0c             	sub    esp,0xc
c001734c:	56                   	push   esi
c001734d:	e8 04 46 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0017352:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017355:	83 c4 10             	add    esp,0x10
c0017358:	89 02                	mov    DWORD PTR [edx],eax
c001735a:	c1 f8 1f             	sar    eax,0x1f
c001735d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017360:	e9 c1 fe ff ff       	jmp    c0017226 <sysCallOpen(regs*)+0x88>
c0017365:	81 c4 04 01 00 00    	add    esp,0x104
c001736b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017370:	ba ff ff ff ff       	mov    edx,0xffffffff
c0017375:	5b                   	pop    ebx
c0017376:	5e                   	pop    esi
c0017377:	c3                   	ret    
c0017378:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001737b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017381:	e9 99 fe ff ff       	jmp    c001721f <sysCallOpen(regs*)+0x81>

c0017386 <Sys::loadSyscalls()>:
c0017386:	c7 05 60 97 02 c0 f7 65 01 c0 	mov    DWORD PTR ds:0xc0029760,0xc00165f7
c0017390:	c7 05 64 97 02 c0 ec 61 01 c0 	mov    DWORD PTR ds:0xc0029764,0xc00161ec
c001739a:	c7 05 68 97 02 c0 dd 63 01 c0 	mov    DWORD PTR ds:0xc0029768,0xc00163dd
c00173a4:	c7 05 6c 97 02 c0 2d 65 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001652d
c00173ae:	c7 05 70 97 02 c0 75 63 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0016375
c00173b8:	c7 05 74 97 02 c0 23 62 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016223
c00173c2:	c7 05 78 97 02 c0 04 62 01 c0 	mov    DWORD PTR ds:0xc0029778,0xc0016204
c00173cc:	c7 05 7c 97 02 c0 32 64 01 c0 	mov    DWORD PTR ds:0xc002977c,0xc0016432
c00173d6:	c7 05 84 97 02 c0 ba 6a 01 c0 	mov    DWORD PTR ds:0xc0029784,0xc0016aba
c00173e0:	c7 05 80 97 02 c0 9e 71 01 c0 	mov    DWORD PTR ds:0xc0029780,0xc001719e
c00173ea:	c7 05 88 97 02 c0 1a 6b 01 c0 	mov    DWORD PTR ds:0xc0029788,0xc0016b1a
c00173f4:	c7 05 8c 97 02 c0 fd 67 01 c0 	mov    DWORD PTR ds:0xc002978c,0xc00167fd
c00173fe:	c7 05 90 97 02 c0 2f 66 01 c0 	mov    DWORD PTR ds:0xc0029790,0xc001662f
c0017408:	c7 05 94 97 02 c0 34 66 01 c0 	mov    DWORD PTR ds:0xc0029794,0xc0016634
c0017412:	c7 05 98 97 02 c0 e3 6b 01 c0 	mov    DWORD PTR ds:0xc0029798,0xc0016be3
c001741c:	c7 05 9c 97 02 c0 8f 6b 01 c0 	mov    DWORD PTR ds:0xc002979c,0xc0016b8f
c0017426:	c7 05 a0 97 02 c0 d6 68 01 c0 	mov    DWORD PTR ds:0xc00297a0,0xc00168d6
c0017430:	c7 05 a4 97 02 c0 2d 69 01 c0 	mov    DWORD PTR ds:0xc00297a4,0xc001692d
c001743a:	c7 05 a8 97 02 c0 99 69 01 c0 	mov    DWORD PTR ds:0xc00297a8,0xc0016999
c0017444:	c7 05 ac 97 02 c0 39 66 01 c0 	mov    DWORD PTR ds:0xc00297ac,0xc0016639
c001744e:	c7 05 b0 97 02 c0 53 6c 01 c0 	mov    DWORD PTR ds:0xc00297b0,0xc0016c53
c0017458:	c7 05 b4 97 02 c0 6d 6c 01 c0 	mov    DWORD PTR ds:0xc00297b4,0xc0016c6d
c0017462:	c7 05 b8 97 02 c0 6d 6c 01 c0 	mov    DWORD PTR ds:0xc00297b8,0xc0016c6d
c001746c:	c7 05 bc 97 02 c0 a2 6c 01 c0 	mov    DWORD PTR ds:0xc00297bc,0xc0016ca2
c0017476:	c7 05 c0 97 02 c0 06 6d 01 c0 	mov    DWORD PTR ds:0xc00297c0,0xc0016d06
c0017480:	c7 05 c4 97 02 c0 43 66 01 c0 	mov    DWORD PTR ds:0xc00297c4,0xc0016643
c001748a:	c7 05 c8 97 02 c0 6a 6d 01 c0 	mov    DWORD PTR ds:0xc00297c8,0xc0016d6a
c0017494:	c7 05 cc 97 02 c0 ba 67 01 c0 	mov    DWORD PTR ds:0xc00297cc,0xc00167ba
c001749e:	c7 05 d0 97 02 c0 b6 6d 01 c0 	mov    DWORD PTR ds:0xc00297d0,0xc0016db6
c00174a8:	c7 05 d4 97 02 c0 7c 68 01 c0 	mov    DWORD PTR ds:0xc00297d4,0xc001687c
c00174b2:	c7 05 d8 97 02 c0 39 6e 01 c0 	mov    DWORD PTR ds:0xc00297d8,0xc0016e39
c00174bc:	c7 05 dc 97 02 c0 0b 6a 01 c0 	mov    DWORD PTR ds:0xc00297dc,0xc0016a0b
c00174c6:	c7 05 e0 97 02 c0 62 6e 01 c0 	mov    DWORD PTR ds:0xc00297e0,0xc0016e62
c00174d0:	c7 05 e4 97 02 c0 ca 6e 01 c0 	mov    DWORD PTR ds:0xc00297e4,0xc0016eca
c00174da:	c7 05 e8 97 02 c0 77 6f 01 c0 	mov    DWORD PTR ds:0xc00297e8,0xc0016f77
c00174e4:	c7 05 ec 97 02 c0 53 66 01 c0 	mov    DWORD PTR ds:0xc00297ec,0xc0016653
c00174ee:	c7 05 f0 97 02 c0 bd 66 01 c0 	mov    DWORD PTR ds:0xc00297f0,0xc00166bd
c00174f8:	c7 05 f4 97 02 c0 07 67 01 c0 	mov    DWORD PTR ds:0xc00297f4,0xc0016707
c0017502:	c7 05 f8 97 02 c0 8b 70 01 c0 	mov    DWORD PTR ds:0xc00297f8,0xc001708b
c001750c:	c7 05 fc 97 02 c0 88 6c 01 c0 	mov    DWORD PTR ds:0xc00297fc,0xc0016c88
c0017516:	c7 05 00 98 02 c0 5c 67 01 c0 	mov    DWORD PTR ds:0xc0029800,0xc001675c
c0017520:	c7 05 04 98 02 c0 fd 70 01 c0 	mov    DWORD PTR ds:0xc0029804,0xc00170fd
c001752a:	c7 05 08 98 02 c0 42 71 01 c0 	mov    DWORD PTR ds:0xc0029808,0xc0017142
c0017534:	c7 05 0c 98 02 c0 cd 62 01 c0 	mov    DWORD PTR ds:0xc002980c,0xc00162cd
c001753e:	c7 05 10 98 02 c0 4e 64 01 c0 	mov    DWORD PTR ds:0xc0029810,0xc001644e
c0017548:	c7 05 14 98 02 c0 e3 64 01 c0 	mov    DWORD PTR ds:0xc0029814,0xc00164e3
c0017552:	c7 05 18 98 02 c0 b6 61 01 c0 	mov    DWORD PTR ds:0xc0029818,0xc00161b6
c001755c:	c7 05 1c 98 02 c0 95 65 01 c0 	mov    DWORD PTR ds:0xc002981c,0xc0016595
c0017566:	c7 05 20 98 02 c0 2f 62 01 c0 	mov    DWORD PTR ds:0xc0029820,0xc001622f
c0017570:	c7 05 24 98 02 c0 49 62 01 c0 	mov    DWORD PTR ds:0xc0029824,0xc0016249
c001757a:	c3                   	ret    

c001757b <Sys::systemCall(regs*, void*)>:
c001757b:	53                   	push   ebx
c001757c:	83 ec 08             	sub    esp,0x8
c001757f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017583:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017586:	83 f8 7f             	cmp    eax,0x7f
c0017589:	77 16                	ja     c00175a1 <Sys::systemCall(regs*, void*)+0x26>
c001758b:	8b 14 85 60 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd68a0]
c0017592:	85 d2                	test   edx,edx
c0017594:	74 0b                	je     c00175a1 <Sys::systemCall(regs*, void*)+0x26>
c0017596:	83 ec 0c             	sub    esp,0xc
c0017599:	53                   	push   ebx
c001759a:	ff d2                	call   edx
c001759c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001759f:	eb 0d                	jmp    c00175ae <Sys::systemCall(regs*, void*)+0x33>
c00175a1:	52                   	push   edx
c00175a2:	52                   	push   edx
c00175a3:	50                   	push   eax
c00175a4:	68 ad 6a 02 c0       	push   0xc0026aad
c00175a9:	e8 4d 5b ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00175ae:	83 c4 10             	add    esp,0x10
c00175b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00175b6:	31 d2                	xor    edx,edx
c00175b8:	83 c4 08             	add    esp,0x8
c00175bb:	5b                   	pop    ebx
c00175bc:	c3                   	ret    

c00175bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00175bd:	55                   	push   ebp
c00175be:	57                   	push   edi
c00175bf:	56                   	push   esi
c00175c0:	53                   	push   ebx
c00175c1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00175c7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00175ce:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00175d5:	85 c0                	test   eax,eax
c00175d7:	0f 95 c1             	setne  cl
c00175da:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00175e2:	0f 94 c2             	sete   dl
c00175e5:	84 d1                	test   cl,dl
c00175e7:	74 23                	je     c001760c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00175e9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00175ef:	74 1b                	je     c001760c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00175f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175f7:	89 da                	mov    edx,ebx
c00175f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00175ff:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0017605:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001760c:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0017613:	05 ff 0f 00 00       	add    eax,0xfff
c0017618:	83 ec 0c             	sub    esp,0xc
c001761b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001761f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0017625:	c1 e8 0c             	shr    eax,0xc
c0017628:	89 fe                	mov    esi,edi
c001762a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001762e:	c1 ee 0c             	shr    esi,0xc
c0017631:	6a 01                	push   0x1
c0017633:	e8 69 47 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0017638:	89 c5                	mov    ebp,eax
c001763a:	58                   	pop    eax
c001763b:	5a                   	pop    edx
c001763c:	56                   	push   esi
c001763d:	68 c1 6a 02 c0       	push   0xc0026ac1
c0017642:	e8 b4 5a ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0017647:	59                   	pop    ecx
c0017648:	58                   	pop    eax
c0017649:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001764d:	68 d3 6a 02 c0       	push   0xc0026ad3
c0017652:	e8 a4 5a ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0017657:	83 c4 10             	add    esp,0x10
c001765a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0017660:	0f 86 31 01 00 00    	jbe    c0017797 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0017666:	c1 e6 0c             	shl    esi,0xc
c0017669:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001766c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001766f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017673:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001767a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001767d:	01 df                	add    edi,ebx
c001767f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0017682:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017686:	0f 84 08 01 00 00    	je     c0017794 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001768c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0017692:	76 05                	jbe    c0017699 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0017694:	bf 00 10 00 00       	mov    edi,0x1000
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	31 d2                	xor    edx,edx
c001769e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00176a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00176a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00176ab:	50                   	push   eax
c00176ac:	8d 74 24 30          	lea    esi,[esp+0x30]
c00176b0:	56                   	push   esi
c00176b1:	52                   	push   edx
c00176b2:	57                   	push   edi
c00176b3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00176ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176bd:	83 c4 20             	add    esp,0x20
c00176c0:	85 c0                	test   eax,eax
c00176c2:	74 0a                	je     c00176ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c00176c4:	53                   	push   ebx
c00176c5:	53                   	push   ebx
c00176c6:	50                   	push   eax
c00176c7:	68 e5 6a 02 c0       	push   0xc0026ae5
c00176cc:	eb 0f                	jmp    c00176dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c00176ce:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176d2:	74 20                	je     c00176f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00176d4:	51                   	push   ecx
c00176d5:	51                   	push   ecx
c00176d6:	6a 00                	push   0x0
c00176d8:	68 10 6b 02 c0       	push   0xc0026b10
c00176dd:	e8 19 5a ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00176e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176e5:	e8 ab 49 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c00176ea:	83 c4 10             	add    esp,0x10
c00176ed:	31 c0                	xor    eax,eax
c00176ef:	e9 68 01 00 00       	jmp    c001785c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00176f4:	fa                   	cli    
c00176f5:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00176fb:	e8 9e 2d ff ff       	call   c000a49e <Phys::allocatePage()>
c0017700:	6a 07                	push   0x7
c0017702:	89 c7                	mov    edi,eax
c0017704:	55                   	push   ebp
c0017705:	50                   	push   eax
c0017706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001770b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001770e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017714:	e8 f3 4c ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0017719:	83 c4 0c             	add    esp,0xc
c001771c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017723:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017729:	6a 00                	push   0x0
c001772b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017730:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017733:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017739:	e8 28 4b ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c001773e:	58                   	pop    eax
c001773f:	5a                   	pop    edx
c0017740:	68 07 0c 00 00       	push   0xc07
c0017745:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017749:	57                   	push   edi
c001774a:	89 ef                	mov    edi,ebp
c001774c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017753:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017759:	6a 00                	push   0x0
c001775b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017760:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017763:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017769:	e8 5a 50 ff ff       	call   c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001776e:	b9 00 10 00 00       	mov    ecx,0x1000
c0017773:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017775:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001777a:	83 c4 20             	add    esp,0x20
c001777d:	48                   	dec    eax
c001777e:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0017783:	85 c0                	test   eax,eax
c0017785:	75 01                	jne    c0017788 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0017787:	fb                   	sti    
c0017788:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001778f:	e9 df fe ff ff       	jmp    c0017673 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0017794:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0017797:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001779f:	0f 86 a9 00 00 00    	jbe    c001784e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00177a5:	fa                   	cli    
c00177a6:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00177ac:	51                   	push   ecx
c00177ad:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00177b4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177ba:	6a 00                	push   0x0
c00177bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177c4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177ca:	e8 97 4a ff ff       	call   c000c266 <VAS::mapOtherVASIn(bool, VAS*)>
c00177cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00177d3:	c1 e6 0c             	shl    esi,0xc
c00177d6:	01 de                	add    esi,ebx
c00177d8:	83 c4 10             	add    esp,0x10
c00177db:	39 de                	cmp    esi,ebx
c00177dd:	74 61                	je     c0017840 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00177df:	e8 ba 2c ff ff       	call   c000a49e <Phys::allocatePage()>
c00177e4:	6a 07                	push   0x7
c00177e6:	89 c7                	mov    edi,eax
c00177e8:	55                   	push   ebp
c00177e9:	50                   	push   eax
c00177ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177f2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177f8:	e8 0f 4c ff ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c00177fd:	58                   	pop    eax
c00177fe:	5a                   	pop    edx
c00177ff:	68 07 0c 00 00       	push   0xc07
c0017804:	53                   	push   ebx
c0017805:	81 c3 00 10 00 00    	add    ebx,0x1000
c001780b:	57                   	push   edi
c001780c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017813:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017819:	6a 00                	push   0x0
c001781b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017820:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017823:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017829:	e8 9a 4f ff ff       	call   c000c7c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001782e:	83 c4 1c             	add    esp,0x1c
c0017831:	68 00 10 00 00       	push   0x1000
c0017836:	6a 00                	push   0x0
c0017838:	55                   	push   ebp
c0017839:	e8 56 8e fe ff       	call   c0000694 <memset>
c001783e:	eb 98                	jmp    c00177d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017840:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0017845:	48                   	dec    eax
c0017846:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001784b:	75 01                	jne    c001784e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001784d:	fb                   	sti    
c001784e:	83 ec 0c             	sub    esp,0xc
c0017851:	55                   	push   ebp
c0017852:	e8 3e 48 ff ff       	call   c000c095 <Virt::freeKernelVirtualPages(unsigned long)>
c0017857:	83 c4 10             	add    esp,0x10
c001785a:	b0 01                	mov    al,0x1
c001785c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0017862:	5b                   	pop    ebx
c0017863:	5e                   	pop    esi
c0017864:	5f                   	pop    edi
c0017865:	5d                   	pop    ebp
c0017866:	c3                   	ret    

c0017867 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017867:	55                   	push   ebp
c0017868:	57                   	push   edi
c0017869:	56                   	push   esi
c001786a:	53                   	push   ebx
c001786b:	83 ec 48             	sub    esp,0x48
c001786e:	68 14 01 00 00       	push   0x114
c0017873:	e8 6f 25 ff ff       	call   c0009de7 <malloc>
c0017878:	83 c4 0c             	add    esp,0xc
c001787b:	89 c6                	mov    esi,eax
c001787d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017881:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017885:	50                   	push   eax
c0017886:	e8 db 5d ff ff       	call   c000d666 <File::File(char const*, Process*)>
c001788b:	58                   	pop    eax
c001788c:	5a                   	pop    edx
c001788d:	6a 01                	push   0x1
c001788f:	56                   	push   esi
c0017890:	e8 ab 5e ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0017895:	83 c4 10             	add    esp,0x10
c0017898:	85 c0                	test   eax,eax
c001789a:	0f 85 47 01 00 00    	jne    c00179e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178a0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00178a8:	83 ec 0c             	sub    esp,0xc
c00178ab:	6a 34                	push   0x34
c00178ad:	e8 35 25 ff ff       	call   c0009de7 <malloc>
c00178b2:	89 c3                	mov    ebx,eax
c00178b4:	58                   	pop    eax
c00178b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00178b7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00178bb:	57                   	push   edi
c00178bc:	53                   	push   ebx
c00178bd:	6a 00                	push   0x0
c00178bf:	6a 34                	push   0x34
c00178c1:	56                   	push   esi
c00178c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178c5:	83 c4 20             	add    esp,0x20
c00178c8:	85 c0                	test   eax,eax
c00178ca:	0f 85 17 01 00 00    	jne    c00179e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178d0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00178d6:	0f 85 0b 01 00 00    	jne    c00179e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178dc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00178df:	85 c0                	test   eax,eax
c00178e1:	0f 84 00 01 00 00    	je     c00179e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178e7:	31 d2                	xor    edx,edx
c00178e9:	55                   	push   ebp
c00178ea:	52                   	push   edx
c00178eb:	50                   	push   eax
c00178ec:	56                   	push   esi
c00178ed:	e8 0c 5f ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c00178f2:	83 c4 10             	add    esp,0x10
c00178f5:	85 c0                	test   eax,eax
c00178f7:	0f 85 ea 00 00 00    	jne    c00179e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178fd:	83 ec 0c             	sub    esp,0xc
c0017900:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017903:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017907:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001790b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001790f:	0f af c2             	imul   eax,edx
c0017912:	50                   	push   eax
c0017913:	e8 cf 24 ff ff       	call   c0009de7 <malloc>
c0017918:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001791a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001791e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017921:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017925:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017929:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001792d:	0f af c2             	imul   eax,edx
c0017930:	99                   	cdq    
c0017931:	52                   	push   edx
c0017932:	50                   	push   eax
c0017933:	56                   	push   esi
c0017934:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017937:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001793a:	83 c4 20             	add    esp,0x20
c001793d:	85 c0                	test   eax,eax
c001793f:	0f 84 a2 00 00 00    	je     c00179e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017945:	31 d2                	xor    edx,edx
c0017947:	51                   	push   ecx
c0017948:	52                   	push   edx
c0017949:	50                   	push   eax
c001794a:	56                   	push   esi
c001794b:	e8 ae 5e ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0017950:	83 c4 10             	add    esp,0x10
c0017953:	85 c0                	test   eax,eax
c0017955:	0f 85 8c 00 00 00    	jne    c00179e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001795b:	83 ec 0c             	sub    esp,0xc
c001795e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017962:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017966:	31 ed                	xor    ebp,ebp
c0017968:	0f af c2             	imul   eax,edx
c001796b:	50                   	push   eax
c001796c:	e8 76 24 ff ff       	call   c0009de7 <malloc>
c0017971:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017973:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017977:	89 3c 24             	mov    DWORD PTR [esp],edi
c001797a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001797e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017982:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017986:	0f af c2             	imul   eax,edx
c0017989:	99                   	cdq    
c001798a:	52                   	push   edx
c001798b:	50                   	push   eax
c001798c:	56                   	push   esi
c001798d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017990:	83 c4 20             	add    esp,0x20
c0017993:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001799b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001799f:	0f 86 80 00 00 00    	jbe    c0017a25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00179a5:	0f b7 fd             	movzx  edi,bp
c00179a8:	c1 e7 05             	shl    edi,0x5
c00179ab:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00179af:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00179b2:	75 6b                	jne    c0017a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00179b4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00179b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179bb:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00179be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179c2:	52                   	push   edx
c00179c3:	31 d2                	xor    edx,edx
c00179c5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00179c8:	52                   	push   edx
c00179c9:	50                   	push   eax
c00179ca:	56                   	push   esi
c00179cb:	e8 2e 5e ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c00179d0:	83 c4 10             	add    esp,0x10
c00179d3:	85 c0                	test   eax,eax
c00179d5:	74 17                	je     c00179ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00179d7:	83 ec 0c             	sub    esp,0xc
c00179da:	68 3c 6b 02 c0       	push   0xc0026b3c
c00179df:	e8 17 57 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00179e4:	83 c4 10             	add    esp,0x10
c00179e7:	31 c0                	xor    eax,eax
c00179e9:	e9 87 00 00 00       	jmp    c0017a75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00179ee:	83 ec 0c             	sub    esp,0xc
c00179f1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00179f4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00179f7:	50                   	push   eax
c00179f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a00:	56                   	push   esi
c0017a01:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017a05:	e8 b3 fb ff ff       	call   c00175bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017a0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a0e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017a12:	83 c4 20             	add    esp,0x20
c0017a15:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017a19:	73 04                	jae    c0017a1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017a1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a1f:	45                   	inc    ebp
c0017a20:	e9 76 ff ff ff       	jmp    c001799b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017a25:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017a29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a31:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0017a37:	83 ec 0c             	sub    esp,0xc
c0017a3a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017a40:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017a45:	05 00 10 00 00       	add    eax,0x1000
c0017a4a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a51:	e8 a1 23 ff ff       	call   c0009df7 <free>
c0017a56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a59:	e8 99 23 ff ff       	call   c0009df7 <free>
c0017a5e:	58                   	pop    eax
c0017a5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a63:	e8 8f 23 ff ff       	call   c0009df7 <free>
c0017a68:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a6b:	e8 2e 5d ff ff       	call   c000d79e <File::close()>
c0017a70:	83 c4 10             	add    esp,0x10
c0017a73:	b0 01                	mov    al,0x1
c0017a75:	83 c4 3c             	add    esp,0x3c
c0017a78:	5b                   	pop    ebx
c0017a79:	5e                   	pop    esi
c0017a7a:	5f                   	pop    edi
c0017a7b:	5d                   	pop    ebp
c0017a7c:	c3                   	ret    

c0017a7d <Thr::runtimeReferenceHelper()>:
c0017a7d:	83 ec 18             	sub    esp,0x18
c0017a80:	68 44 6b 02 c0       	push   0xc0026b44
c0017a85:	e8 71 56 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0017a8a:	fa                   	cli    
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	eb fe                	jmp    c0017a8e <Thr::runtimeReferenceHelper()+0x11>

c0017a90 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017a90:	57                   	push   edi
c0017a91:	56                   	push   esi
c0017a92:	53                   	push   ebx
c0017a93:	31 db                	xor    ebx,ebx
c0017a95:	39 1d 00 a1 02 c0    	cmp    DWORD PTR ds:0xc002a100,ebx
c0017a9b:	7e 3c                	jle    c0017ad9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017a9d:	8b 34 9d 80 a0 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5f80]
c0017aa4:	31 ff                	xor    edi,edi
c0017aa6:	39 3c 9d 80 9f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6080],edi
c0017aad:	7e 27                	jle    c0017ad6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017aaf:	50                   	push   eax
c0017ab0:	50                   	push   eax
c0017ab1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ab5:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ab7:	03 04 9d 00 a0 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6000]
c0017abe:	50                   	push   eax
c0017abf:	e8 18 8d fe ff       	call   c00007dc <strcmp>
c0017ac4:	83 c4 10             	add    esp,0x10
c0017ac7:	85 c0                	test   eax,eax
c0017ac9:	75 05                	jne    c0017ad0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017acb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017ace:	eb 0b                	jmp    c0017adb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017ad0:	83 c6 10             	add    esi,0x10
c0017ad3:	47                   	inc    edi
c0017ad4:	eb d0                	jmp    c0017aa6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017ad6:	43                   	inc    ebx
c0017ad7:	eb bc                	jmp    c0017a95 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017ad9:	31 c0                	xor    eax,eax
c0017adb:	5b                   	pop    ebx
c0017adc:	5e                   	pop    esi
c0017add:	5f                   	pop    edi
c0017ade:	c3                   	ret    

c0017adf <Thr::loadKernelSymbolTable(char const*)>:
c0017adf:	55                   	push   ebp
c0017ae0:	57                   	push   edi
c0017ae1:	56                   	push   esi
c0017ae2:	53                   	push   ebx
c0017ae3:	83 ec 68             	sub    esp,0x68
c0017ae6:	8b 35 50 a1 02 c0    	mov    esi,DWORD PTR ds:0xc002a150
c0017aec:	68 14 01 00 00       	push   0x114
c0017af1:	e8 f1 22 ff ff       	call   c0009de7 <malloc>
c0017af6:	83 c4 0c             	add    esp,0xc
c0017af9:	89 c3                	mov    ebx,eax
c0017afb:	56                   	push   esi
c0017afc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017b00:	50                   	push   eax
c0017b01:	e8 60 5b ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0017b06:	5e                   	pop    esi
c0017b07:	5f                   	pop    edi
c0017b08:	6a 01                	push   0x1
c0017b0a:	53                   	push   ebx
c0017b0b:	e8 30 5c ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0017b10:	83 c4 10             	add    esp,0x10
c0017b13:	85 c0                	test   eax,eax
c0017b15:	74 0a                	je     c0017b21 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017b17:	83 ec 0c             	sub    esp,0xc
c0017b1a:	68 66 6b 02 c0       	push   0xc0026b66
c0017b1f:	eb 34                	jmp    c0017b55 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017b21:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017b29:	83 ec 0c             	sub    esp,0xc
c0017b2c:	6a 34                	push   0x34
c0017b2e:	e8 b4 22 ff ff       	call   c0009de7 <malloc>
c0017b33:	59                   	pop    ecx
c0017b34:	89 c7                	mov    edi,eax
c0017b36:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b3c:	56                   	push   esi
c0017b3d:	57                   	push   edi
c0017b3e:	6a 00                	push   0x0
c0017b40:	6a 34                	push   0x34
c0017b42:	53                   	push   ebx
c0017b43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b46:	83 c4 20             	add    esp,0x20
c0017b49:	85 c0                	test   eax,eax
c0017b4b:	74 17                	je     c0017b64 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017b4d:	83 ec 0c             	sub    esp,0xc
c0017b50:	68 7d 6b 02 c0       	push   0xc0026b7d
c0017b55:	e8 83 d6 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	31 c0                	xor    eax,eax
c0017b5f:	e9 31 02 00 00       	jmp    c0017d95 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017b64:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017b6a:	75 e1                	jne    c0017b4d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b6c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017b6f:	85 c0                	test   eax,eax
c0017b71:	74 da                	je     c0017b4d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b73:	52                   	push   edx
c0017b74:	31 d2                	xor    edx,edx
c0017b76:	52                   	push   edx
c0017b77:	50                   	push   eax
c0017b78:	53                   	push   ebx
c0017b79:	e8 80 5c ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0017b7e:	83 c4 10             	add    esp,0x10
c0017b81:	85 c0                	test   eax,eax
c0017b83:	75 c8                	jne    c0017b4d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b85:	83 ec 0c             	sub    esp,0xc
c0017b88:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b8c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b90:	31 ed                	xor    ebp,ebp
c0017b92:	0f af c2             	imul   eax,edx
c0017b95:	50                   	push   eax
c0017b96:	e8 4c 22 ff ff       	call   c0009de7 <malloc>
c0017b9b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017b9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ba1:	89 34 24             	mov    DWORD PTR [esp],esi
c0017ba4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ba8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017bac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017bb0:	0f af c2             	imul   eax,edx
c0017bb3:	99                   	cdq    
c0017bb4:	52                   	push   edx
c0017bb5:	50                   	push   eax
c0017bb6:	53                   	push   ebx
c0017bb7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017bba:	83 c4 20             	add    esp,0x20
c0017bbd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017bc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017bcd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017bd5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017bdd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017be1:	0f 86 aa 00 00 00    	jbe    c0017c91 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017be7:	0f b7 f5             	movzx  esi,bp
c0017bea:	6b f6 28             	imul   esi,esi,0x28
c0017bed:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017bf1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017bf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bf8:	50                   	push   eax
c0017bf9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017bfd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017c01:	8b 16                	mov    edx,DWORD PTR [esi]
c0017c03:	6b c0 28             	imul   eax,eax,0x28
c0017c06:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017c0a:	89 d0                	mov    eax,edx
c0017c0c:	31 d2                	xor    edx,edx
c0017c0e:	52                   	push   edx
c0017c0f:	50                   	push   eax
c0017c10:	53                   	push   ebx
c0017c11:	e8 e8 5b ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0017c16:	83 c4 0c             	add    esp,0xc
c0017c19:	6a 20                	push   0x20
c0017c1b:	6a 00                	push   0x0
c0017c1d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c21:	52                   	push   edx
c0017c22:	e8 6d 8a fe ff       	call   c0000694 <memset>
c0017c27:	58                   	pop    eax
c0017c28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c2a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017c2e:	51                   	push   ecx
c0017c2f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017c33:	52                   	push   edx
c0017c34:	6a 00                	push   0x0
c0017c36:	6a 1f                	push   0x1f
c0017c38:	53                   	push   ebx
c0017c39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c3c:	83 c4 18             	add    esp,0x18
c0017c3f:	68 94 6b 02 c0       	push   0xc0026b94
c0017c44:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c48:	52                   	push   edx
c0017c49:	e8 8e 8b fe ff       	call   c00007dc <strcmp>
c0017c4e:	83 c4 10             	add    esp,0x10
c0017c51:	85 c0                	test   eax,eax
c0017c53:	75 0f                	jne    c0017c64 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017c55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c64:	50                   	push   eax
c0017c65:	50                   	push   eax
c0017c66:	68 9c 6b 02 c0       	push   0xc0026b9c
c0017c6b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017c6f:	50                   	push   eax
c0017c70:	e8 67 8b fe ff       	call   c00007dc <strcmp>
c0017c75:	83 c4 10             	add    esp,0x10
c0017c78:	85 c0                	test   eax,eax
c0017c7a:	75 0f                	jne    c0017c8b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017c7c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017c7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c8b:	45                   	inc    ebp
c0017c8c:	e9 4c ff ff ff       	jmp    c0017bdd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017c91:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017c96:	75 10                	jne    c0017ca8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	68 a4 6b 02 c0       	push   0xc0026ba4
c0017ca0:	e8 38 d5 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017cad:	75 10                	jne    c0017cbf <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017caf:	83 ec 0c             	sub    esp,0xc
c0017cb2:	68 a4 6b 02 c0       	push   0xc0026ba4
c0017cb7:	e8 21 d5 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0017cbc:	83 c4 10             	add    esp,0x10
c0017cbf:	31 d2                	xor    edx,edx
c0017cc1:	50                   	push   eax
c0017cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cc6:	52                   	push   edx
c0017cc7:	50                   	push   eax
c0017cc8:	53                   	push   ebx
c0017cc9:	e8 30 5b ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0017cce:	5a                   	pop    edx
c0017ccf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cd3:	e8 0f 21 ff ff       	call   c0009de7 <malloc>
c0017cd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ce0:	31 c9                	xor    ecx,ecx
c0017ce2:	5e                   	pop    esi
c0017ce3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ce5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017ce9:	55                   	push   ebp
c0017cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cee:	51                   	push   ecx
c0017cef:	52                   	push   edx
c0017cf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017cf4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017cf8:	53                   	push   ebx
c0017cf9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cfc:	83 c4 14             	add    esp,0x14
c0017cff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d03:	e8 df 20 ff ff       	call   c0009de7 <malloc>
c0017d08:	89 c6                	mov    esi,eax
c0017d0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d0c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d0f:	56                   	push   esi
c0017d10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017d14:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017d18:	51                   	push   ecx
c0017d19:	52                   	push   edx
c0017d1a:	53                   	push   ebx
c0017d1b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d22:	8b 15 00 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a100
c0017d28:	83 c4 1c             	add    esp,0x1c
c0017d2b:	c1 e8 04             	shr    eax,0x4
c0017d2e:	89 04 95 80 9f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6080],eax
c0017d35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d39:	31 d2                	xor    edx,edx
c0017d3b:	52                   	push   edx
c0017d3c:	50                   	push   eax
c0017d3d:	53                   	push   ebx
c0017d3e:	e8 bb 5a ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0017d43:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017d45:	31 d2                	xor    edx,edx
c0017d47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d4a:	56                   	push   esi
c0017d4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d4f:	52                   	push   edx
c0017d50:	50                   	push   eax
c0017d51:	53                   	push   ebx
c0017d52:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d55:	83 c4 14             	add    esp,0x14
c0017d58:	53                   	push   ebx
c0017d59:	e8 40 5a ff ff       	call   c000d79e <File::close()>
c0017d5e:	5d                   	pop    ebp
c0017d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d63:	e8 8f 20 ff ff       	call   c0009df7 <free>
c0017d68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d6b:	e8 87 20 ff ff       	call   c0009df7 <free>
c0017d70:	a1 00 a1 02 c0       	mov    eax,ds:0xc002a100
c0017d75:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d79:	8d 50 01             	lea    edx,[eax+0x1]
c0017d7c:	89 0c 85 80 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f80],ecx
c0017d83:	89 34 85 00 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6000],esi
c0017d8a:	89 15 00 a1 02 c0    	mov    DWORD PTR ds:0xc002a100,edx
c0017d90:	83 c4 10             	add    esp,0x10
c0017d93:	b0 01                	mov    al,0x1
c0017d95:	83 c4 5c             	add    esp,0x5c
c0017d98:	5b                   	pop    ebx
c0017d99:	5e                   	pop    esi
c0017d9a:	5f                   	pop    edi
c0017d9b:	5d                   	pop    ebp
c0017d9c:	c3                   	ret    

c0017d9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017d9d:	55                   	push   ebp
c0017d9e:	57                   	push   edi
c0017d9f:	56                   	push   esi
c0017da0:	53                   	push   ebx
c0017da1:	81 ec 68 03 00 00    	sub    esp,0x368
c0017da7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017dae:	8b 1d 50 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a150
c0017db4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017db8:	68 14 01 00 00       	push   0x114
c0017dbd:	e8 25 20 ff ff       	call   c0009de7 <malloc>
c0017dc2:	83 c4 0c             	add    esp,0xc
c0017dc5:	89 c5                	mov    ebp,eax
c0017dc7:	53                   	push   ebx
c0017dc8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017dcf:	50                   	push   eax
c0017dd0:	e8 91 58 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0017dd5:	5e                   	pop    esi
c0017dd6:	5f                   	pop    edi
c0017dd7:	6a 01                	push   0x1
c0017dd9:	55                   	push   ebp
c0017dda:	e8 61 59 ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0017ddf:	83 c4 10             	add    esp,0x10
c0017de2:	85 c0                	test   eax,eax
c0017de4:	0f 85 a7 06 00 00    	jne    c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017dea:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017df2:	83 ec 0c             	sub    esp,0xc
c0017df5:	6a 34                	push   0x34
c0017df7:	e8 eb 1f ff ff       	call   c0009de7 <malloc>
c0017dfc:	5b                   	pop    ebx
c0017dfd:	89 c7                	mov    edi,eax
c0017dff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017e03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017e06:	53                   	push   ebx
c0017e07:	57                   	push   edi
c0017e08:	6a 00                	push   0x0
c0017e0a:	6a 34                	push   0x34
c0017e0c:	55                   	push   ebp
c0017e0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017e10:	83 c4 20             	add    esp,0x20
c0017e13:	85 c0                	test   eax,eax
c0017e15:	0f 85 76 06 00 00    	jne    c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e1b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017e21:	0f 85 6a 06 00 00    	jne    c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e27:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017e2a:	85 c0                	test   eax,eax
c0017e2c:	0f 84 5f 06 00 00    	je     c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e32:	31 d2                	xor    edx,edx
c0017e34:	51                   	push   ecx
c0017e35:	52                   	push   edx
c0017e36:	50                   	push   eax
c0017e37:	55                   	push   ebp
c0017e38:	e8 c1 59 ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0017e3d:	83 c4 10             	add    esp,0x10
c0017e40:	85 c0                	test   eax,eax
c0017e42:	0f 85 49 06 00 00    	jne    c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e48:	83 ec 0c             	sub    esp,0xc
c0017e4b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017e4e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e52:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017e56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017e5a:	0f af c2             	imul   eax,edx
c0017e5d:	50                   	push   eax
c0017e5e:	e8 84 1f ff ff       	call   c0009de7 <malloc>
c0017e63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e71:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e75:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017e79:	0f af c2             	imul   eax,edx
c0017e7c:	99                   	cdq    
c0017e7d:	52                   	push   edx
c0017e7e:	50                   	push   eax
c0017e7f:	55                   	push   ebp
c0017e80:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e83:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017e86:	83 c4 20             	add    esp,0x20
c0017e89:	85 c0                	test   eax,eax
c0017e8b:	0f 84 00 06 00 00    	je     c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e91:	52                   	push   edx
c0017e92:	31 d2                	xor    edx,edx
c0017e94:	52                   	push   edx
c0017e95:	50                   	push   eax
c0017e96:	55                   	push   ebp
c0017e97:	e8 62 59 ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	85 c0                	test   eax,eax
c0017ea1:	0f 85 ea 05 00 00    	jne    c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ea7:	83 ec 0c             	sub    esp,0xc
c0017eaa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017eae:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017eb2:	31 f6                	xor    esi,esi
c0017eb4:	0f af c2             	imul   eax,edx
c0017eb7:	50                   	push   eax
c0017eb8:	e8 2a 1f ff ff       	call   c0009de7 <malloc>
c0017ebd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017ec0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ec7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ecb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017ecf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017ed3:	0f af c2             	imul   eax,edx
c0017ed6:	99                   	cdq    
c0017ed7:	52                   	push   edx
c0017ed8:	50                   	push   eax
c0017ed9:	55                   	push   ebp
c0017eda:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017edd:	83 c4 20             	add    esp,0x20
c0017ee0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017ee4:	0f 86 8a 00 00 00    	jbe    c0017f74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017eea:	0f b7 de             	movzx  ebx,si
c0017eed:	c1 e3 05             	shl    ebx,0x5
c0017ef0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017ef4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017ef7:	75 75                	jne    c0017f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017ef9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017efc:	31 d2                	xor    edx,edx
c0017efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f09:	50                   	push   eax
c0017f0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017f0d:	52                   	push   edx
c0017f0e:	50                   	push   eax
c0017f0f:	55                   	push   ebp
c0017f10:	e8 e9 58 ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0017f15:	83 c4 10             	add    esp,0x10
c0017f18:	85 c0                	test   eax,eax
c0017f1a:	0f 85 71 05 00 00    	jne    c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017f20:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017f27:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f2a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017f2e:	31 d2                	xor    edx,edx
c0017f30:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017f34:	83 ec 0c             	sub    esp,0xc
c0017f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f3b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f42:	50                   	push   eax
c0017f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4b:	52                   	push   edx
c0017f4c:	50                   	push   eax
c0017f4d:	55                   	push   ebp
c0017f4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f51:	83 c4 1c             	add    esp,0x1c
c0017f54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017f57:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017f5a:	50                   	push   eax
c0017f5b:	6a 00                	push   0x0
c0017f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f61:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017f65:	50                   	push   eax
c0017f66:	e8 29 87 fe ff       	call   c0000694 <memset>
c0017f6b:	83 c4 10             	add    esp,0x10
c0017f6e:	46                   	inc    esi
c0017f6f:	e9 6c ff ff ff       	jmp    c0017ee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017f74:	53                   	push   ebx
c0017f75:	31 db                	xor    ebx,ebx
c0017f77:	68 00 01 00 00       	push   0x100
c0017f7c:	6a 00                	push   0x0
c0017f7e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017f82:	50                   	push   eax
c0017f83:	e8 0c 87 fe ff       	call   c0000694 <memset>
c0017f88:	83 c4 0c             	add    esp,0xc
c0017f8b:	68 00 01 00 00       	push   0x100
c0017f90:	6a 00                	push   0x0
c0017f92:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017f99:	50                   	push   eax
c0017f9a:	e8 f5 86 fe ff       	call   c0000694 <memset>
c0017f9f:	83 c4 10             	add    esp,0x10
c0017fa2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017faa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017fb2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017fba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017fc2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017fca:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017fce:	0f 86 30 01 00 00    	jbe    c0018104 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017fd4:	0f b7 f3             	movzx  esi,bx
c0017fd7:	6b f6 28             	imul   esi,esi,0x28
c0017fda:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017fde:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017fe1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fe5:	52                   	push   edx
c0017fe6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017fea:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017fee:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ff0:	6b d2 28             	imul   edx,edx,0x28
c0017ff3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ff7:	31 d2                	xor    edx,edx
c0017ff9:	52                   	push   edx
c0017ffa:	50                   	push   eax
c0017ffb:	55                   	push   ebp
c0017ffc:	e8 fd 57 ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0018001:	83 c4 0c             	add    esp,0xc
c0018004:	6a 20                	push   0x20
c0018006:	6a 00                	push   0x0
c0018008:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001800f:	51                   	push   ecx
c0018010:	e8 7f 86 fe ff       	call   c0000694 <memset>
c0018015:	59                   	pop    ecx
c0018016:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018019:	8d 54 24 58          	lea    edx,[esp+0x58]
c001801d:	52                   	push   edx
c001801e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0018025:	51                   	push   ecx
c0018026:	6a 00                	push   0x0
c0018028:	6a 1f                	push   0x1f
c001802a:	55                   	push   ebp
c001802b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001802e:	83 c4 1c             	add    esp,0x1c
c0018031:	6a 09                	push   0x9
c0018033:	68 be 6b 02 c0       	push   0xc0026bbe
c0018038:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001803f:	51                   	push   ecx
c0018040:	e8 4b 85 fe ff       	call   c0000590 <memcmp>
c0018045:	83 c4 10             	add    esp,0x10
c0018048:	85 c0                	test   eax,eax
c001804a:	75 21                	jne    c001806d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001804c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018050:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018054:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0018058:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001805c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001805f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0018066:	89 d0                	mov    eax,edx
c0018068:	40                   	inc    eax
c0018069:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001806d:	50                   	push   eax
c001806e:	6a 09                	push   0x9
c0018070:	68 c8 6b 02 c0       	push   0xc0026bc8
c0018075:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001807c:	50                   	push   eax
c001807d:	e8 0e 85 fe ff       	call   c0000590 <memcmp>
c0018082:	83 c4 10             	add    esp,0x10
c0018085:	85 c0                	test   eax,eax
c0018087:	75 21                	jne    c00180aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0018089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001808d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018091:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0018095:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018099:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001809c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00180a3:	89 d0                	mov    eax,edx
c00180a5:	40                   	inc    eax
c00180a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00180aa:	50                   	push   eax
c00180ab:	50                   	push   eax
c00180ac:	68 94 6b 02 c0       	push   0xc0026b94
c00180b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180b8:	50                   	push   eax
c00180b9:	e8 1e 87 fe ff       	call   c00007dc <strcmp>
c00180be:	83 c4 10             	add    esp,0x10
c00180c1:	85 c0                	test   eax,eax
c00180c3:	75 0f                	jne    c00180d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00180c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180d4:	50                   	push   eax
c00180d5:	50                   	push   eax
c00180d6:	68 9c 6b 02 c0       	push   0xc0026b9c
c00180db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180e2:	50                   	push   eax
c00180e3:	e8 f4 86 fe ff       	call   c00007dc <strcmp>
c00180e8:	83 c4 10             	add    esp,0x10
c00180eb:	85 c0                	test   eax,eax
c00180ed:	75 0f                	jne    c00180fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00180ef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00180fe:	43                   	inc    ebx
c00180ff:	e9 c6 fe ff ff       	jmp    c0017fca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0018104:	31 d2                	xor    edx,edx
c0018106:	50                   	push   eax
c0018107:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001810b:	52                   	push   edx
c001810c:	50                   	push   eax
c001810d:	55                   	push   ebp
c001810e:	e8 eb 56 ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c0018113:	58                   	pop    eax
c0018114:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018118:	e8 ca 1c ff ff       	call   c0009de7 <malloc>
c001811d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018124:	31 d2                	xor    edx,edx
c0018126:	58                   	pop    eax
c0018127:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001812b:	53                   	push   ebx
c001812c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018130:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018134:	52                   	push   edx
c0018135:	50                   	push   eax
c0018136:	55                   	push   ebp
c0018137:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001813a:	83 c4 14             	add    esp,0x14
c001813d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018141:	e8 a1 1c ff ff       	call   c0009de7 <malloc>
c0018146:	31 d2                	xor    edx,edx
c0018148:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001814c:	83 c4 0c             	add    esp,0xc
c001814f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018153:	52                   	push   edx
c0018154:	50                   	push   eax
c0018155:	55                   	push   ebp
c0018156:	e8 a3 56 ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c001815b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001815e:	31 d2                	xor    edx,edx
c0018160:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018163:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018167:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001816b:	52                   	push   edx
c001816c:	50                   	push   eax
c001816d:	55                   	push   ebp
c001816e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018171:	83 c4 20             	add    esp,0x20
c0018174:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001817c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018180:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0018184:	0f 84 0b 03 00 00    	je     c0018495 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001818a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0018191:	31 d2                	xor    edx,edx
c0018193:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018197:	c1 e8 03             	shr    eax,0x3
c001819a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001819e:	51                   	push   ecx
c001819f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181a3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00181a7:	52                   	push   edx
c00181a8:	50                   	push   eax
c00181a9:	55                   	push   ebp
c00181aa:	e8 4f 56 ff ff       	call   c000d7fe <File::seek(unsigned long long)>
c00181af:	5b                   	pop    ebx
c00181b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181b4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00181bb:	e8 27 1c ff ff       	call   c0009de7 <malloc>
c00181c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00181c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181c7:	31 d2                	xor    edx,edx
c00181c9:	5e                   	pop    esi
c00181ca:	8d 44 24 58          	lea    eax,[esp+0x58]
c00181ce:	50                   	push   eax
c00181cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00181de:	52                   	push   edx
c00181df:	50                   	push   eax
c00181e0:	55                   	push   ebp
c00181e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00181e4:	83 c4 20             	add    esp,0x20
c00181e7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00181ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00181f3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00181f7:	0f 8d 7c 02 00 00    	jge    c0018479 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00181fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018201:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018205:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001820a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001820d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018211:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018215:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0018219:	89 d8                	mov    eax,ebx
c001821b:	c1 e8 08             	shr    eax,0x8
c001821e:	89 c6                	mov    esi,eax
c0018220:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018224:	c1 e6 04             	shl    esi,0x4
c0018227:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001822b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001822e:	85 d2                	test   edx,edx
c0018230:	0f 85 bf 00 00 00    	jne    c00182f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0018236:	83 ec 0c             	sub    esp,0xc
c0018239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001823d:	03 06                	add    eax,DWORD PTR [esi]
c001823f:	50                   	push   eax
c0018240:	e8 4b f8 ff ff       	call   c0017a90 <Thr::getAddressOfKernelSymbol(char const*)>
c0018245:	83 c4 10             	add    esp,0x10
c0018248:	89 c2                	mov    edx,eax
c001824a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001824f:	85 c0                	test   eax,eax
c0018251:	0f 85 9e 00 00 00    	jne    c00182f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0018257:	83 ec 0c             	sub    esp,0xc
c001825a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001825e:	03 06                	add    eax,DWORD PTR [esi]
c0018260:	50                   	push   eax
c0018261:	e8 ba 06 ff ff       	call   c0008920 <Krnl::resolveCompatibilitySymbol(char*)>
c0018266:	83 c4 10             	add    esp,0x10
c0018269:	89 c2                	mov    edx,eax
c001826b:	85 c0                	test   eax,eax
c001826d:	0f 85 82 00 00 00    	jne    c00182f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0018273:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018277:	50                   	push   eax
c0018278:	50                   	push   eax
c0018279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001827d:	03 06                	add    eax,DWORD PTR [esi]
c001827f:	50                   	push   eax
c0018280:	68 d2 6b 02 c0       	push   0xc0026bd2
c0018285:	e8 71 4e ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001828a:	58                   	pop    eax
c001828b:	5a                   	pop    edx
c001828c:	68 ec 6b 02 c0       	push   0xc0026bec
c0018291:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018298:	50                   	push   eax
c0018299:	e8 b2 84 fe ff       	call   c0000750 <strcpy>
c001829e:	59                   	pop    ecx
c001829f:	58                   	pop    eax
c00182a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182a4:	03 06                	add    eax,DWORD PTR [esi]
c00182a6:	50                   	push   eax
c00182a7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182ae:	50                   	push   eax
c00182af:	e8 dc 85 fe ff       	call   c0000890 <strcat>
c00182b4:	58                   	pop    eax
c00182b5:	5a                   	pop    edx
c00182b6:	68 82 6c 02 c0       	push   0xc0026c82
c00182bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182c2:	50                   	push   eax
c00182c3:	e8 c8 85 fe ff       	call   c0000890 <strcat>
c00182c8:	83 c4 10             	add    esp,0x10
c00182cb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182d0:	0f 84 5d 01 00 00    	je     c0018433 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00182d6:	83 ec 0c             	sub    esp,0xc
c00182d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182e0:	50                   	push   eax
c00182e1:	e8 f7 ce ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00182e6:	83 c4 10             	add    esp,0x10
c00182e9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00182ed:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00182f1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00182f5:	80 fb 01             	cmp    bl,0x1
c00182f8:	0f 85 88 00 00 00    	jne    c0018386 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00182fe:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018305:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018309:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001830d:	01 ce                	add    esi,ecx
c001830f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018315:	0f 94 c0             	sete   al
c0018318:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001831e:	0f 94 c3             	sete   bl
c0018321:	09 c3                	or     ebx,eax
c0018323:	8b 06                	mov    eax,DWORD PTR [esi]
c0018325:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001832a:	74 41                	je     c001836d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001832c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001832f:	84 db                	test   bl,bl
c0018331:	75 15                	jne    c0018348 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0018333:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018337:	66 83 f8 0c          	cmp    ax,0xc
c001833b:	76 05                	jbe    c0018342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001833d:	b8 0c 00 00 00       	mov    eax,0xc
c0018342:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0018346:	76 37                	jbe    c001837f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018348:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001834c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018351:	0f 84 dc 00 00 00    	je     c0018433 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018357:	83 ec 0c             	sub    esp,0xc
c001835a:	68 03 6c 02 c0       	push   0xc0026c03
c001835f:	e8 79 ce ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0018364:	83 c4 10             	add    esp,0x10
c0018367:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001836b:	eb 12                	jmp    c001837f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001836d:	01 c1                	add    ecx,eax
c001836f:	84 db                	test   bl,bl
c0018371:	75 0c                	jne    c001837f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018373:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018377:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001837b:	77 02                	ja     c001837f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001837d:	01 d1                	add    ecx,edx
c001837f:	89 0e                	mov    DWORD PTR [esi],ecx
c0018381:	e9 ea 00 00 00       	jmp    c0018470 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0018386:	80 fb 02             	cmp    bl,0x2
c0018389:	75 7c                	jne    c0018407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001838b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018392:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0018396:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001839a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00183a0:	74 20                	je     c00183c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00183a2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00183a8:	74 18                	je     c00183c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00183aa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00183ae:	b9 0a 00 00 00       	mov    ecx,0xa
c00183b3:	66 83 f8 0e          	cmp    ax,0xe
c00183b7:	77 03                	ja     c00183bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00183b9:	8d 48 fc             	lea    ecx,[eax-0x4]
c00183bc:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00183c0:	76 1f                	jbe    c00183e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00183c2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00183c6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183cb:	74 66                	je     c0018433 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00183cd:	83 ec 0c             	sub    esp,0xc
c00183d0:	68 1f 6c 02 c0       	push   0xc0026c1f
c00183d5:	e8 03 ce ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00183da:	83 c4 10             	add    esp,0x10
c00183dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00183e3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00183e8:	74 13                	je     c00183fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00183ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00183ee:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00183f5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00183f9:	01 c8                	add    eax,ecx
c00183fb:	eb 04                	jmp    c0018401 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00183fd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0018401:	01 c2                	add    edx,eax
c0018403:	89 16                	mov    DWORD PTR [esi],edx
c0018405:	eb 69                	jmp    c0018470 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0018407:	0f b6 db             	movzx  ebx,bl
c001840a:	50                   	push   eax
c001840b:	50                   	push   eax
c001840c:	53                   	push   ebx
c001840d:	68 3b 6c 02 c0       	push   0xc0026c3b
c0018412:	e8 e4 4c ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001841f:	74 12                	je     c0018433 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018421:	83 ec 0c             	sub    esp,0xc
c0018424:	68 46 6c 02 c0       	push   0xc0026c46
c0018429:	e8 af cd ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	eb 3d                	jmp    c0018470 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0018433:	83 ec 0c             	sub    esp,0xc
c0018436:	55                   	push   ebp
c0018437:	e8 62 53 ff ff       	call   c000d79e <File::close()>
c001843c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001843f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018442:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018445:	59                   	pop    ecx
c0018446:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001844a:	e8 a8 19 ff ff       	call   c0009df7 <free>
c001844f:	5b                   	pop    ebx
c0018450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018454:	e8 9e 19 ff ff       	call   c0009df7 <free>
c0018459:	89 3c 24             	mov    DWORD PTR [esp],edi
c001845c:	e8 96 19 ff ff       	call   c0009df7 <free>
c0018461:	5e                   	pop    esi
c0018462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018466:	e8 8c 19 ff ff       	call   c0009df7 <free>
c001846b:	83 c4 10             	add    esp,0x10
c001846e:	eb 21                	jmp    c0018491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018470:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0018474:	e9 76 fd ff ff       	jmp    c00181ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0018479:	83 ec 0c             	sub    esp,0xc
c001847c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018480:	e8 72 19 ff ff       	call   c0009df7 <free>
c0018485:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	e9 eb fc ff ff       	jmp    c001817c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0018491:	31 c0                	xor    eax,eax
c0018493:	eb 33                	jmp    c00184c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0018495:	83 ec 0c             	sub    esp,0xc
c0018498:	55                   	push   ebp
c0018499:	e8 00 53 ff ff       	call   c000d79e <File::close()>
c001849e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00184a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00184a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184a7:	58                   	pop    eax
c00184a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00184ac:	e8 46 19 ff ff       	call   c0009df7 <free>
c00184b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00184b4:	e8 3e 19 ff ff       	call   c0009df7 <free>
c00184b9:	5a                   	pop    edx
c00184ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184be:	e8 34 19 ff ff       	call   c0009df7 <free>
c00184c3:	83 c4 10             	add    esp,0x10
c00184c6:	b0 01                	mov    al,0x1
c00184c8:	81 c4 5c 03 00 00    	add    esp,0x35c
c00184ce:	5b                   	pop    ebx
c00184cf:	5e                   	pop    esi
c00184d0:	5f                   	pop    edi
c00184d1:	5d                   	pop    ebp
c00184d2:	c3                   	ret    

c00184d3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00184d3:	56                   	push   esi
c00184d4:	31 d2                	xor    edx,edx
c00184d6:	53                   	push   ebx
c00184d7:	8b 1d 60 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029960
c00184dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00184e1:	39 d3                	cmp    ebx,edx
c00184e3:	7e 1b                	jle    c0018500 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00184e5:	8b 04 95 80 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6480]
c00184ec:	39 c8                	cmp    eax,ecx
c00184ee:	77 0d                	ja     c00184fd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00184f0:	8b 34 95 80 99 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6680]
c00184f7:	01 c6                	add    esi,eax
c00184f9:	39 ce                	cmp    esi,ecx
c00184fb:	77 05                	ja     c0018502 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00184fd:	42                   	inc    edx
c00184fe:	eb e1                	jmp    c00184e1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018500:	31 c0                	xor    eax,eax
c0018502:	5b                   	pop    ebx
c0018503:	5e                   	pop    esi
c0018504:	c3                   	ret    

c0018505 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018505:	53                   	push   ebx
c0018506:	31 c0                	xor    eax,eax
c0018508:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001850c:	8b 1d 60 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029960
c0018512:	39 c3                	cmp    ebx,eax
c0018514:	7e 22                	jle    c0018538 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018516:	8b 14 85 80 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6480]
c001851d:	39 ca                	cmp    edx,ecx
c001851f:	77 14                	ja     c0018535 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018521:	03 14 85 80 99 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6680]
c0018528:	39 ca                	cmp    edx,ecx
c001852a:	76 09                	jbe    c0018535 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001852c:	8b 04 85 80 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6280]
c0018533:	eb 05                	jmp    c001853a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018535:	40                   	inc    eax
c0018536:	eb da                	jmp    c0018512 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018538:	31 c0                	xor    eax,eax
c001853a:	5b                   	pop    ebx
c001853b:	c3                   	ret    

c001853c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001853c:	53                   	push   ebx
c001853d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018541:	53                   	push   ebx
c0018542:	e8 8c ff ff ff       	call   c00184d3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018547:	5a                   	pop    edx
c0018548:	31 d2                	xor    edx,edx
c001854a:	85 c0                	test   eax,eax
c001854c:	74 04                	je     c0018552 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001854e:	89 da                	mov    edx,ebx
c0018550:	29 c2                	sub    edx,eax
c0018552:	89 d0                	mov    eax,edx
c0018554:	5b                   	pop    ebx
c0018555:	c3                   	ret    

c0018556 <Thr::loadDLL(char const*, bool)>:
c0018556:	55                   	push   ebp
c0018557:	57                   	push   edi
c0018558:	56                   	push   esi
c0018559:	53                   	push   ebx
c001855a:	81 ec 34 01 00 00    	sub    esp,0x134
c0018560:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018567:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001856e:	56                   	push   esi
c001856f:	68 5e 6c 02 c0       	push   0xc0026c5e
c0018574:	e8 82 4b ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0018579:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018580:	e8 62 18 ff ff       	call   c0009de7 <malloc>
c0018585:	83 c4 0c             	add    esp,0xc
c0018588:	89 c3                	mov    ebx,eax
c001858a:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0018590:	56                   	push   esi
c0018591:	50                   	push   eax
c0018592:	e8 cf 50 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	85 db                	test   ebx,ebx
c001859c:	75 3c                	jne    c00185da <Thr::loadDLL(char const*, bool)+0x84>
c001859e:	89 f8                	mov    eax,edi
c00185a0:	84 c0                	test   al,al
c00185a2:	0f 84 d2 01 00 00    	je     c001877a <Thr::loadDLL(char const*, bool)+0x224>
c00185a8:	55                   	push   ebp
c00185a9:	55                   	push   ebp
c00185aa:	68 6f 6c 02 c0       	push   0xc0026c6f
c00185af:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00185b3:	55                   	push   ebp
c00185b4:	e8 97 81 fe ff       	call   c0000750 <strcpy>
c00185b9:	58                   	pop    eax
c00185ba:	5a                   	pop    edx
c00185bb:	56                   	push   esi
c00185bc:	55                   	push   ebp
c00185bd:	e8 ce 82 fe ff       	call   c0000890 <strcat>
c00185c2:	59                   	pop    ecx
c00185c3:	58                   	pop    eax
c00185c4:	68 82 6c 02 c0       	push   0xc0026c82
c00185c9:	55                   	push   ebp
c00185ca:	e8 c1 82 fe ff       	call   c0000890 <strcat>
c00185cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00185d2:	e8 06 cc ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	51                   	push   ecx
c00185db:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00185df:	50                   	push   eax
c00185e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00185e4:	50                   	push   eax
c00185e5:	53                   	push   ebx
c00185e6:	e8 01 54 ff ff       	call   c000d9ec <File::stat(unsigned long long*, bool*)>
c00185eb:	83 c4 10             	add    esp,0x10
c00185ee:	85 db                	test   ebx,ebx
c00185f0:	74 0c                	je     c00185fe <Thr::loadDLL(char const*, bool)+0xa8>
c00185f2:	83 ec 0c             	sub    esp,0xc
c00185f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00185f7:	53                   	push   ebx
c00185f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0018603:	75 0a                	jne    c001860f <Thr::loadDLL(char const*, bool)+0xb9>
c0018605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018609:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001860d:	75 3c                	jne    c001864b <Thr::loadDLL(char const*, bool)+0xf5>
c001860f:	89 f8                	mov    eax,edi
c0018611:	84 c0                	test   al,al
c0018613:	0f 84 49 01 00 00    	je     c0018762 <Thr::loadDLL(char const*, bool)+0x20c>
c0018619:	51                   	push   ecx
c001861a:	51                   	push   ecx
c001861b:	68 6f 6c 02 c0       	push   0xc0026c6f
c0018620:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0018624:	53                   	push   ebx
c0018625:	e8 26 81 fe ff       	call   c0000750 <strcpy>
c001862a:	5d                   	pop    ebp
c001862b:	58                   	pop    eax
c001862c:	56                   	push   esi
c001862d:	53                   	push   ebx
c001862e:	e8 5d 82 fe ff       	call   c0000890 <strcat>
c0018633:	58                   	pop    eax
c0018634:	5a                   	pop    edx
c0018635:	68 82 6c 02 c0       	push   0xc0026c82
c001863a:	53                   	push   ebx
c001863b:	e8 50 82 fe ff       	call   c0000890 <strcat>
c0018640:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018643:	e8 95 cb ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0018648:	83 c4 10             	add    esp,0x10
c001864b:	52                   	push   edx
c001864c:	6a 03                	push   0x3
c001864e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018652:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018656:	05 ff 0f 00 00       	add    eax,0xfff
c001865b:	83 d2 00             	adc    edx,0x0
c001865e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018662:	50                   	push   eax
c0018663:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0018669:	e8 a0 3e ff ff       	call   c000c50e <VAS::allocatePages(int, int)>
c001866e:	59                   	pop    ecx
c001866f:	89 c3                	mov    ebx,eax
c0018671:	5d                   	pop    ebp
c0018672:	50                   	push   eax
c0018673:	68 6e 4b 02 c0       	push   0xc0024b6e
c0018678:	e8 7e 4a ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001867d:	89 34 24             	mov    DWORD PTR [esp],esi
c0018680:	e8 2b 80 fe ff       	call   c00006b0 <strlen>
c0018685:	8b 2d 60 99 02 c0    	mov    ebp,DWORD PTR ds:0xc0029960
c001868b:	40                   	inc    eax
c001868c:	89 04 24             	mov    DWORD PTR [esp],eax
c001868f:	e8 53 17 ff ff       	call   c0009de7 <malloc>
c0018694:	89 04 ad 80 9d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6280],eax
c001869b:	58                   	pop    eax
c001869c:	a1 60 99 02 c0       	mov    eax,ds:0xc0029960
c00186a1:	5a                   	pop    edx
c00186a2:	56                   	push   esi
c00186a3:	ff 34 85 80 9d 02 c0 	push   DWORD PTR [eax*4-0x3ffd6280]
c00186aa:	e8 a1 80 fe ff       	call   c0000750 <strcpy>
c00186af:	a1 60 99 02 c0       	mov    eax,ds:0xc0029960
c00186b4:	8d 50 01             	lea    edx,[eax+0x1]
c00186b7:	89 1c 85 80 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6480],ebx
c00186be:	89 15 60 99 02 c0    	mov    DWORD PTR ds:0xc0029960,edx
c00186c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00186c8:	83 c4 0c             	add    esp,0xc
c00186cb:	89 14 85 80 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6680],edx
c00186d2:	6a 01                	push   0x1
c00186d4:	53                   	push   ebx
c00186d5:	56                   	push   esi
c00186d6:	e8 c2 f6 ff ff       	call   c0017d9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00186db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00186df:	83 c4 10             	add    esp,0x10
c00186e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00186e7:	0f 85 89 00 00 00    	jne    c0018776 <Thr::loadDLL(char const*, bool)+0x220>
c00186ed:	89 f8                	mov    eax,edi
c00186ef:	84 c0                	test   al,al
c00186f1:	74 73                	je     c0018766 <Thr::loadDLL(char const*, bool)+0x210>
c00186f3:	83 ec 0c             	sub    esp,0xc
c00186f6:	68 84 6c 02 c0       	push   0xc0026c84
c00186fb:	e8 dd ca ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0018700:	83 c4 10             	add    esp,0x10
c0018703:	eb 61                	jmp    c0018766 <Thr::loadDLL(char const*, bool)+0x210>
c0018705:	50                   	push   eax
c0018706:	50                   	push   eax
c0018707:	89 e8                	mov    eax,ebp
c0018709:	c1 e0 0c             	shl    eax,0xc
c001870c:	01 d8                	add    eax,ebx
c001870e:	50                   	push   eax
c001870f:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0018715:	e8 5c 39 ff ff       	call   c000c076 <VAS::getPageTableEntry(unsigned long)>
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	8b 00                	mov    eax,DWORD PTR [eax]
c001871f:	a8 60                	test   al,0x60
c0018721:	75 11                	jne    c0018734 <Thr::loadDLL(char const*, bool)+0x1de>
c0018723:	83 ec 0c             	sub    esp,0xc
c0018726:	25 00 f0 ff ff       	and    eax,0xfffff000
c001872b:	50                   	push   eax
c001872c:	e8 ea 1c ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	45                   	inc    ebp
c0018735:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018739:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001873d:	05 ff 0f 00 00       	add    eax,0xfff
c0018742:	bf 00 00 00 00       	mov    edi,0x0
c0018747:	83 d2 00             	adc    edx,0x0
c001874a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001874e:	c1 ea 0c             	shr    edx,0xc
c0018751:	39 c5                	cmp    ebp,eax
c0018753:	89 d1                	mov    ecx,edx
c0018755:	89 f8                	mov    eax,edi
c0018757:	19 c8                	sbb    eax,ecx
c0018759:	72 aa                	jb     c0018705 <Thr::loadDLL(char const*, bool)+0x1af>
c001875b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018760:	75 18                	jne    c001877a <Thr::loadDLL(char const*, bool)+0x224>
c0018762:	31 db                	xor    ebx,ebx
c0018764:	eb 14                	jmp    c001877a <Thr::loadDLL(char const*, bool)+0x224>
c0018766:	83 ec 0c             	sub    esp,0xc
c0018769:	68 a3 6c 02 c0       	push   0xc0026ca3
c001876e:	e8 6a ca ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0018773:	83 c4 10             	add    esp,0x10
c0018776:	31 ed                	xor    ebp,ebp
c0018778:	eb bb                	jmp    c0018735 <Thr::loadDLL(char const*, bool)+0x1df>
c001877a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018780:	89 d8                	mov    eax,ebx
c0018782:	5b                   	pop    ebx
c0018783:	5e                   	pop    esi
c0018784:	5f                   	pop    edi
c0018785:	5d                   	pop    ebp
c0018786:	c3                   	ret    

c0018787 <Thr::executeDLL(unsigned long, void*)>:
c0018787:	56                   	push   esi
c0018788:	53                   	push   ebx
c0018789:	52                   	push   edx
c001878a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001878e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018792:	85 db                	test   ebx,ebx
c0018794:	75 10                	jne    c00187a6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018796:	83 ec 0c             	sub    esp,0xc
c0018799:	68 bf 6c 02 c0       	push   0xc0026cbf
c001879e:	e8 3a ca ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00187a3:	83 c4 10             	add    esp,0x10
c00187a6:	50                   	push   eax
c00187a7:	50                   	push   eax
c00187a8:	53                   	push   ebx
c00187a9:	68 e9 6c 02 c0       	push   0xc0026ce9
c00187ae:	e8 48 49 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00187b3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00187b7:	89 d8                	mov    eax,ebx
c00187b9:	83 c4 14             	add    esp,0x14
c00187bc:	5b                   	pop    ebx
c00187bd:	5e                   	pop    esi
c00187be:	ff e0                	jmp    eax

c00187c0 <userModeEntryPoint(void*)>:
c00187c0:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00187c5:	48                   	dec    eax
c00187c6:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00187cb:	75 03                	jne    c00187d0 <userModeEntryPoint(void*)+0x10>
c00187cd:	fb                   	sti    
c00187ce:	66 90                	xchg   ax,ax
c00187d0:	fb                   	sti    
c00187d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00187d9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00187df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187e3:	e9 87 7a fe ff       	jmp    c000026f <goToUsermode>

c00187e8 <changeTSS>:
c00187e8:	83 ec 14             	sub    esp,0x14
c00187eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187f0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00187f3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00187f8:	c1 e2 15             	shl    edx,0x15
c00187fb:	29 d0                	sub    eax,edx
c00187fd:	50                   	push   eax
c00187fe:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0018803:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018809:	05 7c 11 00 00       	add    eax,0x117c
c001880e:	50                   	push   eax
c001880f:	e8 e0 2e ff ff       	call   c000b6f4 <TSS::setESP(unsigned long)>
c0018814:	83 c4 1c             	add    esp,0x1c
c0018817:	c3                   	ret    

c0018818 <switchToThread(ThreadControlBlock*)>:
c0018818:	57                   	push   edi
c0018819:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c001881e:	56                   	push   esi
c001881f:	85 c0                	test   eax,eax
c0018821:	53                   	push   ebx
c0018822:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018826:	0f 85 90 00 00 00    	jne    c00188bc <switchToThread(ThreadControlBlock*)+0xa4>
c001882c:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c001882f:	3c ff                	cmp    al,0xff
c0018831:	0f 84 81 00 00 00    	je     c00188b8 <switchToThread(ThreadControlBlock*)+0xa0>
c0018837:	0f b6 d0             	movzx  edx,al
c001883a:	b8 00 04 00 00       	mov    eax,0x400
c001883f:	29 d0                	sub    eax,edx
c0018841:	d1 f8                	sar    eax,1
c0018843:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0018846:	66 90                	xchg   ax,ax
c0018848:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c001884b:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0018850:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018856:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001885d:	74 4d                	je     c00188ac <switchToThread(ThreadControlBlock*)+0x94>
c001885f:	0f 31                	rdtsc  
c0018861:	a3 68 a1 02 c0       	mov    ds:0xc002a168,eax
c0018866:	89 c6                	mov    esi,eax
c0018868:	89 d7                	mov    edi,edx
c001886a:	2b 35 58 a1 02 c0    	sub    esi,DWORD PTR ds:0xc002a158
c0018870:	89 15 6c a1 02 c0    	mov    DWORD PTR ds:0xc002a16c,edx
c0018876:	1b 3d 5c a1 02 c0    	sbb    edi,DWORD PTR ds:0xc002a15c
c001887c:	89 35 60 a1 02 c0    	mov    DWORD PTR ds:0xc002a160,esi
c0018882:	a3 58 a1 02 c0       	mov    ds:0xc002a158,eax
c0018887:	89 3d 64 a1 02 c0    	mov    DWORD PTR ds:0xc002a164,edi
c001888d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018893:	89 15 5c a1 02 c0    	mov    DWORD PTR ds:0xc002a15c,edx
c0018899:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001889c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001889f:	01 c6                	add    esi,eax
c00188a1:	11 d7                	adc    edi,edx
c00188a3:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00188a6:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00188a9:	8d 76 00             	lea    esi,[esi+0x0]
c00188ac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00188b0:	5b                   	pop    ebx
c00188b1:	5e                   	pop    esi
c00188b2:	5f                   	pop    edi
c00188b3:	e9 ef 79 fe ff       	jmp    c00002a7 <switchToThreadASM>
c00188b8:	31 c0                	xor    eax,eax
c00188ba:	eb 8c                	jmp    c0018848 <switchToThread(ThreadControlBlock*)+0x30>
c00188bc:	5b                   	pop    ebx
c00188bd:	c7 05 20 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x1
c00188c7:	5e                   	pop    esi
c00188c8:	5f                   	pop    edi
c00188c9:	c3                   	ret    
c00188ca:	66 90                	xchg   ax,ax

c00188cc <Process::addArgs(char**)>:
c00188cc:	57                   	push   edi
c00188cd:	56                   	push   esi
c00188ce:	53                   	push   ebx
c00188cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00188d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00188d7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00188e1:	85 ff                	test   edi,edi
c00188e3:	74 43                	je     c0018928 <Process::addArgs(char**)+0x5c>
c00188e5:	8b 07                	mov    eax,DWORD PTR [edi]
c00188e7:	85 c0                	test   eax,eax
c00188e9:	74 3d                	je     c0018928 <Process::addArgs(char**)+0x5c>
c00188eb:	31 db                	xor    ebx,ebx
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]
c00188f0:	83 ec 0c             	sub    esp,0xc
c00188f3:	50                   	push   eax
c00188f4:	e8 b7 7d fe ff       	call   c00006b0 <strlen>
c00188f9:	40                   	inc    eax
c00188fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00188fd:	e8 e5 14 ff ff       	call   c0009de7 <malloc>
c0018902:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0018909:	5a                   	pop    edx
c001890a:	59                   	pop    ecx
c001890b:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001890e:	43                   	inc    ebx
c001890f:	50                   	push   eax
c0018910:	e8 3b 7e fe ff       	call   c0000750 <strcpy>
c0018915:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018921:	85 c0                	test   eax,eax
c0018923:	75 cb                	jne    c00188f0 <Process::addArgs(char**)+0x24>
c0018925:	8d 76 00             	lea    esi,[esi+0x0]
c0018928:	5b                   	pop    ebx
c0018929:	5e                   	pop    esi
c001892a:	5f                   	pop    edi
c001892b:	c3                   	ret    

c001892c <Process::Process(char const*, Process*, char**)>:
c001892c:	56                   	push   esi
c001892d:	53                   	push   ebx
c001892e:	83 ec 14             	sub    esp,0x14
c0018931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018935:	05 0c 02 00 00       	add    eax,0x20c
c001893a:	bb 07 00 00 00       	mov    ebx,0x7
c001893f:	89 c6                	mov    esi,eax
c0018941:	8d 76 00             	lea    esi,[esi+0x0]
c0018944:	85 db                	test   ebx,ebx
c0018946:	78 14                	js     c001895c <Process::Process(char const*, Process*, char**)+0x30>
c0018948:	83 ec 0c             	sub    esp,0xc
c001894b:	56                   	push   esi
c001894c:	e8 8b af 00 00       	call   c00238dc <ThreadControlBlock::ThreadControlBlock()>
c0018951:	83 c4 10             	add    esp,0x10
c0018954:	83 c6 5f             	add    esi,0x5f
c0018957:	4b                   	dec    ebx
c0018958:	eb ea                	jmp    c0018944 <Process::Process(char const*, Process*, char**)+0x18>
c001895a:	66 90                	xchg   ax,ax
c001895c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018960:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018967:	83 ec 0c             	sub    esp,0xc
c001896a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001896e:	e8 f3 c6 ff ff       	call   c0015066 <Krnl::newProcessEnv(Process*)>
c0018973:	83 c4 10             	add    esp,0x10
c0018976:	89 c2                	mov    edx,eax
c0018978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001897c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018986:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001898f:	a1 30 86 02 c0       	mov    eax,ds:0xc0028630
c0018994:	8d 50 01             	lea    edx,[eax+0x1]
c0018997:	89 15 30 86 02 c0    	mov    DWORD PTR ds:0xc0028630,edx
c001899d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00189a1:	89 02                	mov    DWORD PTR [edx],eax
c00189a3:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00189ab:	83 ec 0c             	sub    esp,0xc
c00189ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00189b2:	e8 30 14 ff ff       	call   c0009de7 <malloc>
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	89 c3                	mov    ebx,eax
c00189bc:	83 ec 08             	sub    esp,0x8
c00189bf:	6a 00                	push   0x0
c00189c1:	53                   	push   ebx
c00189c2:	e8 ef 3e ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c00189c7:	83 c4 10             	add    esp,0x10
c00189ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ce:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00189d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00189e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189ea:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00189f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189f4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189fa:	85 c0                	test   eax,eax
c00189fc:	74 42                	je     c0018a40 <Process::Process(char const*, Process*, char**)+0x114>
c00189fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a02:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a08:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a12:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a1c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a22:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a2c:	05 0c 01 00 00       	add    eax,0x10c
c0018a31:	83 ec 08             	sub    esp,0x8
c0018a34:	52                   	push   edx
c0018a35:	50                   	push   eax
c0018a36:	e8 15 7d fe ff       	call   c0000750 <strcpy>
c0018a3b:	83 c4 10             	add    esp,0x10
c0018a3e:	eb 64                	jmp    c0018aa4 <Process::Process(char const*, Process*, char**)+0x178>
c0018a40:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018a48:	83 ec 0c             	sub    esp,0xc
c0018a4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018a4f:	e8 93 13 ff ff       	call   c0009de7 <malloc>
c0018a54:	83 c4 10             	add    esp,0x10
c0018a57:	89 c3                	mov    ebx,eax
c0018a59:	83 ec 08             	sub    esp,0x8
c0018a5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a60:	53                   	push   ebx
c0018a61:	e8 a2 29 ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c0018a66:	83 c4 10             	add    esp,0x10
c0018a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a6d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a7d:	83 ec 0c             	sub    esp,0xc
c0018a80:	50                   	push   eax
c0018a81:	e8 41 21 ff ff       	call   c000abc7 <addToTerminalCycle(VgaText*)>
c0018a86:	83 c4 10             	add    esp,0x10
c0018a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a8d:	05 0c 01 00 00       	add    eax,0x10c
c0018a92:	83 ec 08             	sub    esp,0x8
c0018a95:	68 08 6d 02 c0       	push   0xc0026d08
c0018a9a:	50                   	push   eax
c0018a9b:	e8 b0 7c fe ff       	call   c0000750 <strcpy>
c0018aa0:	83 c4 10             	add    esp,0x10
c0018aa3:	90                   	nop
c0018aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aa8:	83 c0 0c             	add    eax,0xc
c0018aab:	83 ec 08             	sub    esp,0x8
c0018aae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ab2:	50                   	push   eax
c0018ab3:	e8 98 7c fe ff       	call   c0000750 <strcpy>
c0018ab8:	83 c4 10             	add    esp,0x10
c0018abb:	83 ec 08             	sub    esp,0x8
c0018abe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ac6:	e8 01 fe ff ff       	call   c00188cc <Process::addArgs(char**)>
c0018acb:	83 c4 10             	add    esp,0x10
c0018ace:	83 ec 08             	sub    esp,0x8
c0018ad1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ad5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ad9:	e8 89 ed ff ff       	call   c0017867 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018ade:	83 c4 10             	add    esp,0x10
c0018ae1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018ae5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ae9:	83 f0 01             	xor    eax,0x1
c0018aec:	88 c2                	mov    dl,al
c0018aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018af2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018af8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018afd:	83 ec 08             	sub    esp,0x8
c0018b00:	50                   	push   eax
c0018b01:	68 60 6d 02 c0       	push   0xc0026d60
c0018b06:	e8 f0 45 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	90                   	nop
c0018b0f:	83 c4 14             	add    esp,0x14
c0018b12:	5b                   	pop    ebx
c0018b13:	5e                   	pop    esi
c0018b14:	c3                   	ret    
c0018b15:	90                   	nop
c0018b16:	66 90                	xchg   ax,ax

c0018b18 <Process::Process(bool, char const*, Process*, char**)>:
c0018b18:	56                   	push   esi
c0018b19:	53                   	push   ebx
c0018b1a:	83 ec 24             	sub    esp,0x24
c0018b1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b21:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b29:	05 0c 02 00 00       	add    eax,0x20c
c0018b2e:	bb 07 00 00 00       	mov    ebx,0x7
c0018b33:	89 c6                	mov    esi,eax
c0018b35:	8d 76 00             	lea    esi,[esi+0x0]
c0018b38:	85 db                	test   ebx,ebx
c0018b3a:	78 14                	js     c0018b50 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018b3c:	83 ec 0c             	sub    esp,0xc
c0018b3f:	56                   	push   esi
c0018b40:	e8 97 ad 00 00       	call   c00238dc <ThreadControlBlock::ThreadControlBlock()>
c0018b45:	83 c4 10             	add    esp,0x10
c0018b48:	83 c6 5f             	add    esi,0x5f
c0018b4b:	4b                   	dec    ebx
c0018b4c:	eb ea                	jmp    c0018b38 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018b4e:	66 90                	xchg   ax,ax
c0018b50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b54:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018b5b:	83 ec 0c             	sub    esp,0xc
c0018b5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b62:	e8 ff c4 ff ff       	call   c0015066 <Krnl::newProcessEnv(Process*)>
c0018b67:	83 c4 10             	add    esp,0x10
c0018b6a:	89 c2                	mov    edx,eax
c0018b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b70:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018b76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b7a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018b83:	a1 30 86 02 c0       	mov    eax,ds:0xc0028630
c0018b88:	8d 50 01             	lea    edx,[eax+0x1]
c0018b8b:	89 15 30 86 02 c0    	mov    DWORD PTR ds:0xc0028630,edx
c0018b91:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018b95:	89 02                	mov    DWORD PTR [edx],eax
c0018b97:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018b9f:	83 ec 0c             	sub    esp,0xc
c0018ba2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018ba6:	e8 3c 12 ff ff       	call   c0009de7 <malloc>
c0018bab:	83 c4 10             	add    esp,0x10
c0018bae:	89 c3                	mov    ebx,eax
c0018bb0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018bb5:	83 ec 08             	sub    esp,0x8
c0018bb8:	50                   	push   eax
c0018bb9:	53                   	push   ebx
c0018bba:	e8 f7 3c ff ff       	call   c000c8b6 <VAS::VAS(bool)>
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bc6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018bcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bd0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018bda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bde:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018be2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018bf2:	85 c0                	test   eax,eax
c0018bf4:	74 42                	je     c0018c38 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018bf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bfa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c00:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018c06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c0a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018c10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c14:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c1a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018c20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c24:	05 0c 01 00 00       	add    eax,0x10c
c0018c29:	83 ec 08             	sub    esp,0x8
c0018c2c:	52                   	push   edx
c0018c2d:	50                   	push   eax
c0018c2e:	e8 1d 7b fe ff       	call   c0000750 <strcpy>
c0018c33:	83 c4 10             	add    esp,0x10
c0018c36:	eb 64                	jmp    c0018c9c <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018c38:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018c40:	83 ec 0c             	sub    esp,0xc
c0018c43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c47:	e8 9b 11 ff ff       	call   c0009de7 <malloc>
c0018c4c:	83 c4 10             	add    esp,0x10
c0018c4f:	89 c3                	mov    ebx,eax
c0018c51:	83 ec 08             	sub    esp,0x8
c0018c54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018c58:	53                   	push   ebx
c0018c59:	e8 aa 27 ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c0018c5e:	83 c4 10             	add    esp,0x10
c0018c61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c65:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018c6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c75:	83 ec 0c             	sub    esp,0xc
c0018c78:	50                   	push   eax
c0018c79:	e8 49 1f ff ff       	call   c000abc7 <addToTerminalCycle(VgaText*)>
c0018c7e:	83 c4 10             	add    esp,0x10
c0018c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c85:	05 0c 01 00 00       	add    eax,0x10c
c0018c8a:	83 ec 08             	sub    esp,0x8
c0018c8d:	68 08 6d 02 c0       	push   0xc0026d08
c0018c92:	50                   	push   eax
c0018c93:	e8 b8 7a fe ff       	call   c0000750 <strcpy>
c0018c98:	83 c4 10             	add    esp,0x10
c0018c9b:	90                   	nop
c0018c9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ca0:	83 c0 0c             	add    eax,0xc
c0018ca3:	83 ec 08             	sub    esp,0x8
c0018ca6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018caa:	50                   	push   eax
c0018cab:	e8 a0 7a fe ff       	call   c0000750 <strcpy>
c0018cb0:	83 c4 10             	add    esp,0x10
c0018cb3:	83 ec 08             	sub    esp,0x8
c0018cb6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018cbe:	e8 09 fc ff ff       	call   c00188cc <Process::addArgs(char**)>
c0018cc3:	83 c4 10             	add    esp,0x10
c0018cc6:	90                   	nop
c0018cc7:	83 c4 24             	add    esp,0x24
c0018cca:	5b                   	pop    ebx
c0018ccb:	5e                   	pop    esi
c0018ccc:	c3                   	ret    
c0018ccd:	8d 76 00             	lea    esi,[esi+0x0]

c0018cd0 <taskStartupFunction>:
c0018cd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cd5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018cd8:	c3                   	ret    
c0018cd9:	90                   	nop
c0018cda:	66 90                	xchg   ax,ax

c0018cdc <Semaphore::Semaphore(int)>:
c0018cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ce0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ce4:	89 10                	mov    DWORD PTR [eax],edx
c0018ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cea:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cf5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d00:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018d07:	90                   	nop
c0018d08:	c3                   	ret    
c0018d09:	90                   	nop
c0018d0a:	66 90                	xchg   ax,ax

c0018d0c <Mutex::Mutex()>:
c0018d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d10:	6a 01                	push   0x1
c0018d12:	50                   	push   eax
c0018d13:	e8 c4 ff ff ff       	call   c0018cdc <Semaphore::Semaphore(int)>
c0018d18:	83 c4 08             	add    esp,0x8
c0018d1b:	90                   	nop
c0018d1c:	c3                   	ret    
c0018d1d:	90                   	nop
c0018d1e:	66 90                	xchg   ax,ax

c0018d20 <Process::createThread(void (*)(void*), void*, int)>:
c0018d20:	57                   	push   edi
c0018d21:	31 c9                	xor    ecx,ecx
c0018d23:	56                   	push   esi
c0018d24:	53                   	push   ebx
c0018d25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d29:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018d30:	89 f2                	mov    edx,esi
c0018d32:	66 90                	xchg   ax,ax
c0018d34:	0f b7 c2             	movzx  eax,dx
c0018d37:	83 e2 01             	and    edx,0x1
c0018d3a:	74 14                	je     c0018d50 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018d3c:	d1 f8                	sar    eax,1
c0018d3e:	41                   	inc    ecx
c0018d3f:	89 c2                	mov    edx,eax
c0018d41:	83 f9 10             	cmp    ecx,0x10
c0018d44:	75 ee                	jne    c0018d34 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018d46:	31 db                	xor    ebx,ebx
c0018d48:	89 d8                	mov    eax,ebx
c0018d4a:	5b                   	pop    ebx
c0018d4b:	5e                   	pop    esi
c0018d4c:	5f                   	pop    edi
c0018d4d:	c3                   	ret    
c0018d4e:	66 90                	xchg   ax,ax
c0018d50:	b8 01 00 00 00       	mov    eax,0x1
c0018d55:	d3 e0                	shl    eax,cl
c0018d57:	09 c6                	or     esi,eax
c0018d59:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018d5c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018d63:	01 c0                	add    eax,eax
c0018d65:	01 c8                	add    eax,ecx
c0018d67:	8d 04 80             	lea    eax,[eax+eax*4]
c0018d6a:	01 d8                	add    eax,ebx
c0018d6c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018d73:	75 0b                	jne    c0018d80 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018d75:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018d7f:	90                   	nop
c0018d80:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018d86:	83 ec 08             	sub    esp,0x8
c0018d89:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d8c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018d8f:	01 c0                	add    eax,eax
c0018d91:	01 c8                	add    eax,ecx
c0018d93:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018d96:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018d99:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018d9f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018da5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018da9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018daf:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018db5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018dbc:	89 ca                	mov    edx,ecx
c0018dbe:	f7 da                	neg    edx
c0018dc0:	c1 e2 15             	shl    edx,0x15
c0018dc3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018dc9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018dcf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018dd3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018ddd:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018de3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018de7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018ded:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018df7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018e01:	53                   	push   ebx
c0018e02:	68 44 a1 02 c0       	push   0xc002a144
c0018e07:	e8 70 a8 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e0c:	83 c4 10             	add    esp,0x10
c0018e0f:	89 d8                	mov    eax,ebx
c0018e11:	5b                   	pop    ebx
c0018e12:	5e                   	pop    esi
c0018e13:	5f                   	pop    edi
c0018e14:	c3                   	ret    
c0018e15:	90                   	nop
c0018e16:	66 90                	xchg   ax,ax

c0018e18 <Process::createUserThread()>:
c0018e18:	83 ec 0c             	sub    esp,0xc
c0018e1b:	68 80 00 00 00       	push   0x80
c0018e20:	6a 00                	push   0x0
c0018e22:	68 c0 87 01 c0       	push   0xc00187c0
c0018e27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e2b:	e8 f0 fe ff ff       	call   c0018d20 <Process::createThread(void (*)(void*), void*, int)>
c0018e30:	83 c4 1c             	add    esp,0x1c
c0018e33:	c3                   	ret    

c0018e34 <setupMultitasking(void (*)())>:
c0018e34:	56                   	push   esi
c0018e35:	53                   	push   ebx
c0018e36:	51                   	push   ecx
c0018e37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018e3b:	eb 13                	jmp    c0018e50 <setupMultitasking(void (*)())+0x1c>
c0018e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e40:	83 ec 0c             	sub    esp,0xc
c0018e43:	68 44 a1 02 c0       	push   0xc002a144
c0018e48:	e8 77 a7 00 00       	call   c00235c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e4d:	83 c4 10             	add    esp,0x10
c0018e50:	83 ec 0c             	sub    esp,0xc
c0018e53:	68 44 a1 02 c0       	push   0xc002a144
c0018e58:	e8 43 a7 00 00       	call   c00235a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	84 c0                	test   al,al
c0018e62:	74 dc                	je     c0018e40 <setupMultitasking(void (*)())+0xc>
c0018e64:	83 ec 0c             	sub    esp,0xc
c0018e67:	68 1f 07 00 00       	push   0x71f
c0018e6c:	e8 76 0f ff ff       	call   c0009de7 <malloc>
c0018e71:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018e78:	89 c3                	mov    ebx,eax
c0018e7a:	6a 00                	push   0x0
c0018e7c:	68 0c 6d 02 c0       	push   0xc0026d0c
c0018e81:	6a 01                	push   0x1
c0018e83:	50                   	push   eax
c0018e84:	e8 8f fc ff ff       	call   c0018b18 <Process::Process(bool, char const*, Process*, char**)>
c0018e89:	83 c4 14             	add    esp,0x14
c0018e8c:	89 1d 50 a1 02 c0    	mov    DWORD PTR ds:0xc002a150,ebx
c0018e92:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018e98:	e8 38 20 ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c0018e9d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018ea5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018eaf:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018eb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018eb8:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018ec2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018ec8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018ece:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018ed8:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018ee2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018eec:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018ef2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018efc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018f02:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018f0c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018f12:	58                   	pop    eax
c0018f13:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018f19:	5a                   	pop    edx
c0018f1a:	68 08 6d 02 c0       	push   0xc0026d08
c0018f1f:	50                   	push   eax
c0018f20:	e8 2b 78 fe ff       	call   c0000750 <strcpy>
c0018f25:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018f2c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018f30:	83 c4 14             	add    esp,0x14
c0018f33:	5b                   	pop    ebx
c0018f34:	5e                   	pop    esi
c0018f35:	e9 5f 73 fe ff       	jmp    c0000299 <switchToThreadASMFirstTime>
c0018f3a:	66 90                	xchg   ax,ax

c0018f3c <schedule()>:
c0018f3c:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0018f41:	85 c0                	test   eax,eax
c0018f43:	74 0b                	je     c0018f50 <schedule()+0x14>
c0018f45:	c7 05 20 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x1
c0018f4f:	c3                   	ret    
c0018f50:	53                   	push   ebx
c0018f51:	83 ec 14             	sub    esp,0x14
c0018f54:	68 44 a1 02 c0       	push   0xc002a144
c0018f59:	e8 42 a6 00 00       	call   c00235a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018f5e:	83 c4 10             	add    esp,0x10
c0018f61:	84 c0                	test   al,al
c0018f63:	75 3b                	jne    c0018fa0 <schedule()+0x64>
c0018f65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018f6d:	4a                   	dec    edx
c0018f6e:	74 38                	je     c0018fa8 <schedule()+0x6c>
c0018f70:	83 ec 0c             	sub    esp,0xc
c0018f73:	68 44 a1 02 c0       	push   0xc002a144
c0018f78:	e8 3f a6 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f7d:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c0018f84:	89 c3                	mov    ebx,eax
c0018f86:	e8 39 a6 00 00       	call   c00235c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018f8b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018f92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f95:	e8 7e f8 ff ff       	call   c0018818 <switchToThread(ThreadControlBlock*)>
c0018f9a:	83 c4 10             	add    esp,0x10
c0018f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018fa0:	83 c4 08             	add    esp,0x8
c0018fa3:	5b                   	pop    ebx
c0018fa4:	c3                   	ret    
c0018fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fa8:	83 ec 08             	sub    esp,0x8
c0018fab:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018fb2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018fb8:	68 44 a1 02 c0       	push   0xc002a144
c0018fbd:	e8 ba a6 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	eb a9                	jmp    c0018f70 <schedule()+0x34>
c0018fc7:	90                   	nop

c0018fc8 <Semaphore::tryAcquire()>:
c0018fc8:	53                   	push   ebx
c0018fc9:	83 ec 08             	sub    esp,0x8
c0018fcc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018fd0:	fa                   	cli    
c0018fd1:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0018fd6:	8d 50 01             	lea    edx,[eax+0x1]
c0018fd9:	89 15 28 a1 02 c0    	mov    DWORD PTR ds:0xc002a128,edx
c0018fdf:	8b 15 24 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a124
c0018fe5:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018fe8:	89 1d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,ebx
c0018fee:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018ff1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018ff3:	7c 33                	jl     c0019028 <Semaphore::tryAcquire()+0x60>
c0018ff5:	89 15 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,edx
c0018ffb:	85 d2                	test   edx,edx
c0018ffd:	75 0d                	jne    c001900c <Semaphore::tryAcquire()+0x44>
c0018fff:	8b 15 20 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a120
c0019005:	85 d2                	test   edx,edx
c0019007:	75 6b                	jne    c0019074 <Semaphore::tryAcquire()+0xac>
c0019009:	8d 76 00             	lea    esi,[esi+0x0]
c001900c:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019011:	85 c0                	test   eax,eax
c0019013:	74 0b                	je     c0019020 <Semaphore::tryAcquire()+0x58>
c0019015:	8d 76 00             	lea    esi,[esi+0x0]
c0019018:	31 c0                	xor    eax,eax
c001901a:	83 c4 08             	add    esp,0x8
c001901d:	5b                   	pop    ebx
c001901e:	c3                   	ret    
c001901f:	90                   	nop
c0019020:	fb                   	sti    
c0019021:	83 c4 08             	add    esp,0x8
c0019024:	5b                   	pop    ebx
c0019025:	c3                   	ret    
c0019026:	66 90                	xchg   ax,ax
c0019028:	43                   	inc    ebx
c0019029:	89 15 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,edx
c001902f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0019032:	85 d2                	test   edx,edx
c0019034:	75 22                	jne    c0019058 <Semaphore::tryAcquire()+0x90>
c0019036:	8b 0d 20 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a120
c001903c:	85 c9                	test   ecx,ecx
c001903e:	74 18                	je     c0019058 <Semaphore::tryAcquire()+0x90>
c0019040:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001904a:	e8 ed fe ff ff       	call   c0018f3c <schedule()>
c001904f:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019054:	48                   	dec    eax
c0019055:	8d 76 00             	lea    esi,[esi+0x0]
c0019058:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001905d:	85 c0                	test   eax,eax
c001905f:	75 0b                	jne    c001906c <Semaphore::tryAcquire()+0xa4>
c0019061:	fb                   	sti    
c0019062:	b0 01                	mov    al,0x1
c0019064:	83 c4 08             	add    esp,0x8
c0019067:	5b                   	pop    ebx
c0019068:	c3                   	ret    
c0019069:	8d 76 00             	lea    esi,[esi+0x0]
c001906c:	b0 01                	mov    al,0x1
c001906e:	83 c4 08             	add    esp,0x8
c0019071:	5b                   	pop    ebx
c0019072:	c3                   	ret    
c0019073:	90                   	nop
c0019074:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001907e:	e8 b9 fe ff ff       	call   c0018f3c <schedule()>
c0019083:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019088:	48                   	dec    eax
c0019089:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001908e:	85 c0                	test   eax,eax
c0019090:	75 86                	jne    c0019018 <Semaphore::tryAcquire()+0x50>
c0019092:	eb 8c                	jmp    c0019020 <Semaphore::tryAcquire()+0x58>

c0019094 <Semaphore::assertLocked(char const*)>:
c0019094:	83 ec 0c             	sub    esp,0xc
c0019097:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001909b:	fa                   	cli    
c001909c:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00190a2:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00190a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00190aa:	89 0d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,ecx
c00190b0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00190b2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00190b5:	7c 29                	jl     c00190e0 <Semaphore::assertLocked(char const*)+0x4c>
c00190b7:	90                   	nop
c00190b8:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00190bd:	85 c0                	test   eax,eax
c00190bf:	75 0b                	jne    c00190cc <Semaphore::assertLocked(char const*)+0x38>
c00190c1:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c00190c6:	85 c0                	test   eax,eax
c00190c8:	75 2e                	jne    c00190f8 <Semaphore::assertLocked(char const*)+0x64>
c00190ca:	66 90                	xchg   ax,ax
c00190cc:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00190d1:	48                   	dec    eax
c00190d2:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00190d7:	75 03                	jne    c00190dc <Semaphore::assertLocked(char const*)+0x48>
c00190d9:	fb                   	sti    
c00190da:	66 90                	xchg   ax,ax
c00190dc:	83 c4 0c             	add    esp,0xc
c00190df:	c3                   	ret    
c00190e0:	83 ec 0c             	sub    esp,0xc
c00190e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00190e7:	e8 f1 c0 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00190ec:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00190f1:	83 c4 10             	add    esp,0x10
c00190f4:	48                   	dec    eax
c00190f5:	eb c1                	jmp    c00190b8 <Semaphore::assertLocked(char const*)+0x24>
c00190f7:	90                   	nop
c00190f8:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0019102:	e8 35 fe ff ff       	call   c0018f3c <schedule()>
c0019107:	eb c3                	jmp    c00190cc <Semaphore::assertLocked(char const*)+0x38>
c0019109:	8d 76 00             	lea    esi,[esi+0x0]

c001910c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001910c:	83 ec 0c             	sub    esp,0xc
c001910f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019114:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019118:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001911b:	e8 1c fe ff ff       	call   c0018f3c <schedule()>
c0019120:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019125:	48                   	dec    eax
c0019126:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001912b:	75 03                	jne    c0019130 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001912d:	fb                   	sti    
c001912e:	66 90                	xchg   ax,ax
c0019130:	83 c4 0c             	add    esp,0xc
c0019133:	c3                   	ret    

c0019134 <blockTask(TaskState)>:
c0019134:	83 ec 0c             	sub    esp,0xc
c0019137:	fa                   	cli    
c0019138:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001913e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019142:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019147:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001914a:	e8 ed fd ff ff       	call   c0018f3c <schedule()>
c001914f:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019154:	48                   	dec    eax
c0019155:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001915a:	75 04                	jne    c0019160 <blockTask(TaskState)+0x2c>
c001915c:	fb                   	sti    
c001915d:	8d 76 00             	lea    esi,[esi+0x0]
c0019160:	83 c4 0c             	add    esp,0xc
c0019163:	c3                   	ret    

c0019164 <waitTask(int, int*, int)>:
c0019164:	83 ec 18             	sub    esp,0x18
c0019167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001916c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019170:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0019173:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019177:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001917c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001917f:	6a 07                	push   0x7
c0019181:	e8 ae ff ff ff       	call   c0019134 <blockTask(TaskState)>
c0019186:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001918b:	83 c4 10             	add    esp,0x10
c001918e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0019191:	85 d2                	test   edx,edx
c0019193:	74 0b                	je     c00191a0 <waitTask(int, int*, int)+0x3c>
c0019195:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0019198:	89 02                	mov    DWORD PTR [edx],eax
c001919a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001919f:	90                   	nop
c00191a0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00191a3:	83 c4 0c             	add    esp,0xc
c00191a6:	c3                   	ret    
c00191a7:	90                   	nop

c00191a8 <milliTenthSleepUntil(unsigned int)>:
c00191a8:	83 ec 0c             	sub    esp,0xc
c00191ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191af:	39 05 2c 92 02 c0    	cmp    DWORD PTR ds:0xc002922c,eax
c00191b5:	76 05                	jbe    c00191bc <milliTenthSleepUntil(unsigned int)+0x14>
c00191b7:	90                   	nop
c00191b8:	83 c4 0c             	add    esp,0xc
c00191bb:	c3                   	ret    
c00191bc:	fa                   	cli    
c00191bd:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00191c3:	83 ec 08             	sub    esp,0x8
c00191c6:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c00191cc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00191d2:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00191d5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00191db:	68 38 a1 02 c0       	push   0xc002a138
c00191e0:	e8 97 a4 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00191e5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00191ec:	e8 43 ff ff ff       	call   c0019134 <blockTask(TaskState)>
c00191f1:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00191f6:	83 c4 10             	add    esp,0x10
c00191f9:	48                   	dec    eax
c00191fa:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00191ff:	85 c0                	test   eax,eax
c0019201:	75 09                	jne    c001920c <milliTenthSleepUntil(unsigned int)+0x64>
c0019203:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c0019208:	85 c0                	test   eax,eax
c001920a:	75 14                	jne    c0019220 <milliTenthSleepUntil(unsigned int)+0x78>
c001920c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019211:	48                   	dec    eax
c0019212:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019217:	75 9f                	jne    c00191b8 <milliTenthSleepUntil(unsigned int)+0x10>
c0019219:	fb                   	sti    
c001921a:	83 c4 0c             	add    esp,0xc
c001921d:	c3                   	ret    
c001921e:	66 90                	xchg   ax,ax
c0019220:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001922a:	e8 0d fd ff ff       	call   c0018f3c <schedule()>
c001922f:	eb db                	jmp    c001920c <milliTenthSleepUntil(unsigned int)+0x64>
c0019231:	8d 76 00             	lea    esi,[esi+0x0]

c0019234 <milliTenthSleep(unsigned int)>:
c0019234:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c0019239:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001923d:	e9 66 ff ff ff       	jmp    c00191a8 <milliTenthSleepUntil(unsigned int)>
c0019242:	66 90                	xchg   ax,ax

c0019244 <sleep(unsigned int)>:
c0019244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019248:	8d 04 80             	lea    eax,[eax+eax*4]
c001924b:	8d 04 80             	lea    eax,[eax+eax*4]
c001924e:	8d 04 80             	lea    eax,[eax+eax*4]
c0019251:	8d 04 80             	lea    eax,[eax+eax*4]
c0019254:	c1 e0 04             	shl    eax,0x4
c0019257:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001925b:	eb d7                	jmp    c0019234 <milliTenthSleep(unsigned int)>
c001925d:	90                   	nop
c001925e:	66 90                	xchg   ax,ax

c0019260 <Semaphore::acquire()>:
c0019260:	83 ec 0c             	sub    esp,0xc
c0019263:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019267:	fa                   	cli    
c0019268:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c001926d:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019273:	8d 48 01             	lea    ecx,[eax+0x1]
c0019276:	89 0d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,ecx
c001927c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001927f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0019281:	7d 2d                	jge    c00192b0 <Semaphore::acquire()+0x50>
c0019283:	41                   	inc    ecx
c0019284:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0019287:	90                   	nop
c0019288:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c001928d:	85 c0                	test   eax,eax
c001928f:	75 0b                	jne    c001929c <Semaphore::acquire()+0x3c>
c0019291:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c0019296:	85 c0                	test   eax,eax
c0019298:	75 62                	jne    c00192fc <Semaphore::acquire()+0x9c>
c001929a:	66 90                	xchg   ax,ax
c001929c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00192a1:	48                   	dec    eax
c00192a2:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00192a7:	75 03                	jne    c00192ac <Semaphore::acquire()+0x4c>
c00192a9:	fb                   	sti    
c00192aa:	66 90                	xchg   ax,ax
c00192ac:	83 c4 0c             	add    esp,0xc
c00192af:	c3                   	ret    
c00192b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192b5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00192bc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00192bf:	85 c9                	test   ecx,ecx
c00192c1:	74 4d                	je     c0019310 <Semaphore::acquire()+0xb0>
c00192c3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00192c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00192cc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00192cf:	90                   	nop
c00192d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192d5:	83 ec 0c             	sub    esp,0xc
c00192d8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00192db:	68 88 6d 02 c0       	push   0xc0026d88
c00192e0:	e8 16 3e ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00192e5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00192ec:	e8 43 fe ff ff       	call   c0019134 <blockTask(TaskState)>
c00192f1:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00192f6:	83 c4 10             	add    esp,0x10
c00192f9:	48                   	dec    eax
c00192fa:	eb 8c                	jmp    c0019288 <Semaphore::acquire()+0x28>
c00192fc:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0019306:	e8 31 fc ff ff       	call   c0018f3c <schedule()>
c001930b:	eb 8f                	jmp    c001929c <Semaphore::acquire()+0x3c>
c001930d:	8d 76 00             	lea    esi,[esi+0x0]
c0019310:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019315:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019318:	eb b6                	jmp    c00192d0 <Semaphore::acquire()+0x70>
c001931a:	66 90                	xchg   ax,ax

c001931c <taskReturned>:
c001931c:	83 ec 18             	sub    esp,0x18
c001931f:	68 a8 6d 02 c0       	push   0xc0026da8
c0019324:	e8 b4 be ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0019329:	83 c4 10             	add    esp,0x10
c001932c:	83 ec 0c             	sub    esp,0xc
c001932f:	6a 02                	push   0x2
c0019331:	e8 fe fd ff ff       	call   c0019134 <blockTask(TaskState)>
c0019336:	fa                   	cli    
c0019337:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001933d:	e8 fa fb ff ff       	call   c0018f3c <schedule()>
c0019342:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	48                   	dec    eax
c001934b:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019350:	85 c0                	test   eax,eax
c0019352:	75 d8                	jne    c001932c <taskReturned+0x10>
c0019354:	fb                   	sti    
c0019355:	eb d5                	jmp    c001932c <taskReturned+0x10>
c0019357:	90                   	nop

c0019358 <Thr::processFromPID(int)>:
c0019358:	57                   	push   edi
c0019359:	56                   	push   esi
c001935a:	53                   	push   ebx
c001935b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001935f:	fa                   	cli    
c0019360:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019366:	83 ec 0c             	sub    esp,0xc
c0019369:	68 44 a1 02 c0       	push   0xc002a144
c001936e:	e8 49 a2 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019373:	83 c4 10             	add    esp,0x10
c0019376:	89 c7                	mov    edi,eax
c0019378:	eb 16                	jmp    c0019390 <Thr::processFromPID(int)+0x38>
c001937a:	66 90                	xchg   ax,ax
c001937c:	83 ec 0c             	sub    esp,0xc
c001937f:	68 44 a1 02 c0       	push   0xc002a144
c0019384:	e8 33 a2 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019389:	83 c4 10             	add    esp,0x10
c001938c:	39 f8                	cmp    eax,edi
c001938e:	74 4c                	je     c00193dc <Thr::processFromPID(int)+0x84>
c0019390:	83 ec 0c             	sub    esp,0xc
c0019393:	68 44 a1 02 c0       	push   0xc002a144
c0019398:	e8 1f a2 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001939d:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c00193a4:	89 c3                	mov    ebx,eax
c00193a6:	e8 19 a2 00 00       	call   c00235c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00193ab:	58                   	pop    eax
c00193ac:	5a                   	pop    edx
c00193ad:	53                   	push   ebx
c00193ae:	68 44 a1 02 c0       	push   0xc002a144
c00193b3:	e8 c4 a2 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00193b8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	39 30                	cmp    DWORD PTR [eax],esi
c00193c0:	75 ba                	jne    c001937c <Thr::processFromPID(int)+0x24>
c00193c2:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00193c7:	48                   	dec    eax
c00193c8:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00193cd:	74 09                	je     c00193d8 <Thr::processFromPID(int)+0x80>
c00193cf:	90                   	nop
c00193d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193d3:	5b                   	pop    ebx
c00193d4:	5e                   	pop    esi
c00193d5:	5f                   	pop    edi
c00193d6:	c3                   	ret    
c00193d7:	90                   	nop
c00193d8:	fb                   	sti    
c00193d9:	eb f5                	jmp    c00193d0 <Thr::processFromPID(int)+0x78>
c00193db:	90                   	nop
c00193dc:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00193e1:	48                   	dec    eax
c00193e2:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00193e7:	75 07                	jne    c00193f0 <Thr::processFromPID(int)+0x98>
c00193e9:	fb                   	sti    
c00193ea:	5b                   	pop    ebx
c00193eb:	5e                   	pop    esi
c00193ec:	5f                   	pop    edi
c00193ed:	c3                   	ret    
c00193ee:	66 90                	xchg   ax,ax
c00193f0:	5b                   	pop    ebx
c00193f1:	31 c0                	xor    eax,eax
c00193f3:	5e                   	pop    esi
c00193f4:	5f                   	pop    edi
c00193f5:	c3                   	ret    
c00193f6:	66 90                	xchg   ax,ax

c00193f8 <unblockTask(ThreadControlBlock*)>:
c00193f8:	53                   	push   ebx
c00193f9:	83 ec 08             	sub    esp,0x8
c00193fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019400:	fa                   	cli    
c0019401:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019407:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001940a:	85 c0                	test   eax,eax
c001940c:	74 66                	je     c0019474 <unblockTask(ThreadControlBlock*)+0x7c>
c001940e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019411:	48                   	dec    eax
c0019412:	74 38                	je     c001944c <unblockTask(ThreadControlBlock*)+0x54>
c0019414:	83 ec 0c             	sub    esp,0xc
c0019417:	68 44 a1 02 c0       	push   0xc002a144
c001941c:	e8 9b a1 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019421:	83 c4 10             	add    esp,0x10
c0019424:	85 c0                	test   eax,eax
c0019426:	75 1c                	jne    c0019444 <unblockTask(ThreadControlBlock*)+0x4c>
c0019428:	eb 5e                	jmp    c0019488 <unblockTask(ThreadControlBlock*)+0x90>
c001942a:	66 90                	xchg   ax,ax
c001942c:	83 ec 08             	sub    esp,0x8
c001942f:	50                   	push   eax
c0019430:	68 44 a1 02 c0       	push   0xc002a144
c0019435:	e8 32 a5 00 00       	call   c002396c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001943a:	83 c4 10             	add    esp,0x10
c001943d:	85 c0                	test   eax,eax
c001943f:	74 47                	je     c0019488 <unblockTask(ThreadControlBlock*)+0x90>
c0019441:	8d 76 00             	lea    esi,[esi+0x0]
c0019444:	39 c3                	cmp    ebx,eax
c0019446:	75 e4                	jne    c001942c <unblockTask(ThreadControlBlock*)+0x34>
c0019448:	eb 12                	jmp    c001945c <unblockTask(ThreadControlBlock*)+0x64>
c001944a:	66 90                	xchg   ax,ax
c001944c:	83 ec 0c             	sub    esp,0xc
c001944f:	68 2a 6d 02 c0       	push   0xc0026d2a
c0019454:	e8 a2 3c ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0019459:	83 c4 10             	add    esp,0x10
c001945c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019461:	48                   	dec    eax
c0019462:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019467:	75 03                	jne    c001946c <unblockTask(ThreadControlBlock*)+0x74>
c0019469:	fb                   	sti    
c001946a:	66 90                	xchg   ax,ax
c001946c:	83 c4 08             	add    esp,0x8
c001946f:	5b                   	pop    ebx
c0019470:	c3                   	ret    
c0019471:	8d 76 00             	lea    esi,[esi+0x0]
c0019474:	83 ec 0c             	sub    esp,0xc
c0019477:	68 13 6d 02 c0       	push   0xc0026d13
c001947c:	e8 7a 3c ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0019481:	83 c4 10             	add    esp,0x10
c0019484:	eb d6                	jmp    c001945c <unblockTask(ThreadControlBlock*)+0x64>
c0019486:	66 90                	xchg   ax,ax
c0019488:	83 ec 08             	sub    esp,0x8
c001948b:	53                   	push   ebx
c001948c:	68 44 a1 02 c0       	push   0xc002a144
c0019491:	e8 e6 a1 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019496:	83 c4 10             	add    esp,0x10
c0019499:	eb c1                	jmp    c001945c <unblockTask(ThreadControlBlock*)+0x64>
c001949b:	90                   	nop

c001949c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001949c:	55                   	push   ebp
c001949d:	57                   	push   edi
c001949e:	56                   	push   esi
c001949f:	53                   	push   ebx
c00194a0:	83 ec 1c             	sub    esp,0x1c
c00194a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00194a7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00194aa:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00194b0:	85 ff                	test   edi,edi
c00194b2:	7e 24                	jle    c00194d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00194b4:	31 f6                	xor    esi,esi
c00194b6:	66 90                	xchg   ax,ax
c00194b8:	83 ec 0c             	sub    esp,0xc
c00194bb:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00194c2:	46                   	inc    esi
c00194c3:	e8 2f 09 ff ff       	call   c0009df7 <free>
c00194c8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00194d4:	7f e2                	jg     c00194b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00194d6:	66 90                	xchg   ax,ax
c00194d8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00194e2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00194e7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00194ea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00194ed:	d3 c0                	rol    eax,cl
c00194ef:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00194f6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00194f9:	89 f7                	mov    edi,esi
c00194fb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0019503:	0f 85 73 01 00 00    	jne    c001967c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0019509:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001950f:	85 ed                	test   ebp,ebp
c0019511:	74 1d                	je     c0019530 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0019513:	83 ec 0c             	sub    esp,0xc
c0019516:	55                   	push   ebp
c0019517:	e8 66 ba ff ff       	call   c0014f82 <EnvVarContainer::~EnvVarContainer()>
c001951c:	59                   	pop    ecx
c001951d:	5e                   	pop    esi
c001951e:	6a 0c                	push   0xc
c0019520:	55                   	push   ebp
c0019521:	e8 f4 3a ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0019526:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019529:	83 c4 10             	add    esp,0x10
c001952c:	89 f7                	mov    edi,esi
c001952e:	66 90                	xchg   ax,ax
c0019530:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019536:	85 c0                	test   eax,eax
c0019538:	0f 84 b2 00 00 00    	je     c00195f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001953e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0019541:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019545:	31 c9                	xor    ecx,ecx
c0019547:	eb 17                	jmp    c0019560 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0019549:	8d 76 00             	lea    esi,[esi+0x0]
c001954c:	41                   	inc    ecx
c001954d:	83 f9 10             	cmp    ecx,0x10
c0019550:	0f 84 9a 00 00 00    	je     c00195f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0019556:	66 90                	xchg   ax,ax
c0019558:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001955e:	66 90                	xchg   ax,ax
c0019560:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0019567:	d3 fa                	sar    edx,cl
c0019569:	83 e2 01             	and    edx,0x1
c001956c:	74 de                	je     c001954c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001956e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019571:	01 d2                	add    edx,edx
c0019573:	01 ca                	add    edx,ecx
c0019575:	8d 14 92             	lea    edx,[edx+edx*4]
c0019578:	01 d0                	add    eax,edx
c001957a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019580:	83 fd 07             	cmp    ebp,0x7
c0019583:	75 c7                	jne    c001954c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019585:	05 40 02 00 00       	add    eax,0x240
c001958a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001958d:	83 fd ff             	cmp    ebp,0xffffffff
c0019590:	0f 8c ee 00 00 00    	jl     c0019684 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0019596:	0f 84 ac 01 00 00    	je     c0019748 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c001959c:	85 ed                	test   ebp,ebp
c001959e:	0f 84 90 01 00 00    	je     c0019734 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00195a4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00195a6:	75 a4                	jne    c001954c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00195a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00195ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00195b2:	01 d0                	add    eax,edx
c00195b4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00195c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00195c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00195ca:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00195d1:	50                   	push   eax
c00195d2:	e8 21 fe ff ff       	call   c00193f8 <unblockTask(ThreadControlBlock*)>
c00195d7:	83 c4 10             	add    esp,0x10
c00195da:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00195dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00195e1:	89 f7                	mov    edi,esi
c00195e3:	41                   	inc    ecx
c00195e4:	83 f9 10             	cmp    ecx,0x10
c00195e7:	0f 85 6b ff ff ff    	jne    c0019558 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00195ed:	8d 76 00             	lea    esi,[esi+0x0]
c00195f0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00195f6:	85 c0                	test   eax,eax
c00195f8:	74 62                	je     c001965c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00195fa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0019600:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0019606:	74 54                	je     c001965c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0019608:	83 ec 0c             	sub    esp,0xc
c001960b:	68 44 a1 02 c0       	push   0xc002a144
c0019610:	e8 a7 9f 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019615:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c001961c:	89 c7                	mov    edi,eax
c001961e:	e8 7d 9f 00 00       	call   c00235a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019623:	83 c4 10             	add    esp,0x10
c0019626:	84 c0                	test   al,al
c0019628:	0f 84 ce 00 00 00    	je     c00196fc <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c001962e:	66 90                	xchg   ax,ax
c0019630:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019633:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0019639:	85 d2                	test   edx,edx
c001963b:	74 0f                	je     c001964c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c001963d:	83 ec 0c             	sub    esp,0xc
c0019640:	8b 02                	mov    eax,DWORD PTR [edx]
c0019642:	52                   	push   edx
c0019643:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019646:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019649:	83 c4 10             	add    esp,0x10
c001964c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0019656:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0019659:	8d 76 00             	lea    esi,[esi+0x0]
c001965c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0019662:	85 db                	test   ebx,ebx
c0019664:	74 16                	je     c001967c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0019666:	83 ec 0c             	sub    esp,0xc
c0019669:	53                   	push   ebx
c001966a:	e8 21 2c ff ff       	call   c000c290 <VAS::~VAS()>
c001966f:	58                   	pop    eax
c0019670:	5a                   	pop    edx
c0019671:	6a 14                	push   0x14
c0019673:	53                   	push   ebx
c0019674:	e8 a1 39 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0019679:	83 c4 10             	add    esp,0x10
c001967c:	83 c4 1c             	add    esp,0x1c
c001967f:	5b                   	pop    ebx
c0019680:	5e                   	pop    esi
c0019681:	5f                   	pop    edi
c0019682:	5d                   	pop    ebp
c0019683:	c3                   	ret    
c0019684:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019688:	83 ec 0c             	sub    esp,0xc
c001968b:	68 dc 6d 02 c0       	push   0xc0026ddc
c0019690:	e8 48 bb ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0019695:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019698:	83 c4 10             	add    esp,0x10
c001969b:	89 f7                	mov    edi,esi
c001969d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196a1:	e9 a6 fe ff ff       	jmp    c001954c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00196a6:	66 90                	xchg   ax,ax
c00196a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196ae:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00196b4:	75 1e                	jne    c00196d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00196b6:	83 ec 0c             	sub    esp,0xc
c00196b9:	68 44 6e 02 c0       	push   0xc0026e44
c00196be:	e8 38 3a ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00196c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00196ca:	e8 65 fa ff ff       	call   c0019134 <blockTask(TaskState)>
c00196cf:	83 c4 10             	add    esp,0x10
c00196d2:	66 90                	xchg   ax,ax
c00196d4:	83 ec 08             	sub    esp,0x8
c00196d7:	56                   	push   esi
c00196d8:	68 44 a1 02 c0       	push   0xc002a144
c00196dd:	e8 9a 9f 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00196e2:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c00196e9:	e8 ce 9e 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00196ee:	83 c4 10             	add    esp,0x10
c00196f1:	39 f8                	cmp    eax,edi
c00196f3:	0f 84 37 ff ff ff    	je     c0019630 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00196f9:	8d 76 00             	lea    esi,[esi+0x0]
c00196fc:	83 ec 0c             	sub    esp,0xc
c00196ff:	68 44 a1 02 c0       	push   0xc002a144
c0019704:	e8 b3 9e 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019709:	c7 04 24 44 a1 02 c0 	mov    DWORD PTR [esp],0xc002a144
c0019710:	89 c6                	mov    esi,eax
c0019712:	e8 ad 9e 00 00       	call   c00235c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019717:	83 c4 10             	add    esp,0x10
c001971a:	39 f3                	cmp    ebx,esi
c001971c:	74 b6                	je     c00196d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001971e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0019721:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019724:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001972a:	75 a8                	jne    c00196d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001972c:	e9 77 ff ff ff       	jmp    c00196a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0019731:	8d 76 00             	lea    esi,[esi+0x0]
c0019734:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019738:	83 ec 0c             	sub    esp,0xc
c001973b:	68 10 6e 02 c0       	push   0xc0026e10
c0019740:	e9 4b ff ff ff       	jmp    c0019690 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0019745:	8d 76 00             	lea    esi,[esi+0x0]
c0019748:	8b 36                	mov    esi,DWORD PTR [esi]
c001974a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001974e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019751:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019754:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001975a:	01 d7                	add    edi,edx
c001975c:	89 f8                	mov    eax,edi
c001975e:	e9 51 fe ff ff       	jmp    c00195b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0019763:	90                   	nop

c0019764 <cleanerTaskFunction(void*)>:
c0019764:	53                   	push   ebx
c0019765:	83 ec 08             	sub    esp,0x8
c0019768:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001976d:	48                   	dec    eax
c001976e:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019773:	75 03                	jne    c0019778 <cleanerTaskFunction(void*)+0x14>
c0019775:	fb                   	sti    
c0019776:	66 90                	xchg   ax,ax
c0019778:	fa                   	cli    
c0019779:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c001977e:	80 3d 0c a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a10c,0x0
c0019785:	8d 50 01             	lea    edx,[eax+0x1]
c0019788:	89 15 28 a1 02 c0    	mov    DWORD PTR ds:0xc002a128,edx
c001978e:	0f 84 ac 00 00 00    	je     c0019840 <cleanerTaskFunction(void*)+0xdc>
c0019794:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019799:	85 c0                	test   eax,eax
c001979b:	75 03                	jne    c00197a0 <cleanerTaskFunction(void*)+0x3c>
c001979d:	fb                   	sti    
c001979e:	66 90                	xchg   ax,ax
c00197a0:	c6 05 0c a1 02 c0 00 	mov    BYTE PTR ds:0xc002a10c,0x0
c00197a7:	fa                   	cli    
c00197a8:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00197ae:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c00197b4:	fa                   	cli    
c00197b5:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00197bb:	eb 2b                	jmp    c00197e8 <cleanerTaskFunction(void*)+0x84>
c00197bd:	8d 76 00             	lea    esi,[esi+0x0]
c00197c0:	83 ec 0c             	sub    esp,0xc
c00197c3:	68 2c a1 02 c0       	push   0xc002a12c
c00197c8:	e8 ef 9d 00 00       	call   c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00197cd:	c7 04 24 2c a1 02 c0 	mov    DWORD PTR [esp],0xc002a12c
c00197d4:	89 c3                	mov    ebx,eax
c00197d6:	e8 e9 9d 00 00       	call   c00235c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00197db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197de:	e8 b9 fc ff ff       	call   c001949c <cleanupTerminatedTask(ThreadControlBlock*)>
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	66 90                	xchg   ax,ax
c00197e8:	83 ec 0c             	sub    esp,0xc
c00197eb:	68 2c a1 02 c0       	push   0xc002a12c
c00197f0:	e8 ab 9d 00 00       	call   c00235a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00197f5:	83 c4 10             	add    esp,0x10
c00197f8:	84 c0                	test   al,al
c00197fa:	74 c4                	je     c00197c0 <cleanerTaskFunction(void*)+0x5c>
c00197fc:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019801:	48                   	dec    eax
c0019802:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019807:	75 03                	jne    c001980c <cleanerTaskFunction(void*)+0xa8>
c0019809:	fb                   	sti    
c001980a:	66 90                	xchg   ax,ax
c001980c:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0019811:	48                   	dec    eax
c0019812:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c0019817:	0f 85 4b ff ff ff    	jne    c0019768 <cleanerTaskFunction(void*)+0x4>
c001981d:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c0019822:	85 c0                	test   eax,eax
c0019824:	0f 84 3e ff ff ff    	je     c0019768 <cleanerTaskFunction(void*)+0x4>
c001982a:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c0019834:	e8 03 f7 ff ff       	call   c0018f3c <schedule()>
c0019839:	e9 2a ff ff ff       	jmp    c0019768 <cleanerTaskFunction(void*)+0x4>
c001983e:	66 90                	xchg   ax,ax
c0019840:	83 ec 0c             	sub    esp,0xc
c0019843:	6a 02                	push   0x2
c0019845:	e8 c2 f8 ff ff       	call   c001910c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001984a:	83 c4 10             	add    esp,0x10
c001984d:	e9 4e ff ff ff       	jmp    c00197a0 <cleanerTaskFunction(void*)+0x3c>
c0019852:	66 90                	xchg   ax,ax

c0019854 <terminateTask(int)>:
c0019854:	83 ec 14             	sub    esp,0x14
c0019857:	fa                   	cli    
c0019858:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001985e:	ff 05 24 a1 02 c0    	inc    DWORD PTR ds:0xc002a124
c0019864:	fa                   	cli    
c0019865:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001986b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001986f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019874:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0019877:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001987c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001987f:	50                   	push   eax
c0019880:	68 2c a1 02 c0       	push   0xc002a12c
c0019885:	e8 f2 9d 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001988a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001988f:	83 c4 10             	add    esp,0x10
c0019892:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019899:	a1 08 a1 02 c0       	mov    eax,ds:0xc002a108
c001989e:	85 c0                	test   eax,eax
c00198a0:	74 5e                	je     c0019900 <terminateTask(int)+0xac>
c00198a2:	83 ec 0c             	sub    esp,0xc
c00198a5:	c6 05 0c a1 02 c0 01 	mov    BYTE PTR ds:0xc002a10c,0x1
c00198ac:	50                   	push   eax
c00198ad:	e8 46 fb ff ff       	call   c00193f8 <unblockTask(ThreadControlBlock*)>
c00198b2:	83 c4 10             	add    esp,0x10
c00198b5:	8d 76 00             	lea    esi,[esi+0x0]
c00198b8:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00198bd:	48                   	dec    eax
c00198be:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00198c3:	75 03                	jne    c00198c8 <terminateTask(int)+0x74>
c00198c5:	fb                   	sti    
c00198c6:	66 90                	xchg   ax,ax
c00198c8:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c00198cd:	48                   	dec    eax
c00198ce:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c00198d3:	75 0b                	jne    c00198e0 <terminateTask(int)+0x8c>
c00198d5:	83 3d 20 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a120,0x0
c00198dc:	75 36                	jne    c0019914 <terminateTask(int)+0xc0>
c00198de:	66 90                	xchg   ax,ax
c00198e0:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c00198e5:	48                   	dec    eax
c00198e6:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c00198eb:	75 03                	jne    c00198f0 <terminateTask(int)+0x9c>
c00198ed:	fb                   	sti    
c00198ee:	66 90                	xchg   ax,ax
c00198f0:	fa                   	cli    
c00198f1:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c00198f7:	90                   	nop
c00198f8:	e8 3f f6 ff ff       	call   c0018f3c <schedule()>
c00198fd:	eb e1                	jmp    c00198e0 <terminateTask(int)+0x8c>
c00198ff:	90                   	nop
c0019900:	83 ec 0c             	sub    esp,0xc
c0019903:	68 41 6d 02 c0       	push   0xc0026d41
c0019908:	e8 ee 37 ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001990d:	83 c4 10             	add    esp,0x10
c0019910:	eb a6                	jmp    c00198b8 <terminateTask(int)+0x64>
c0019912:	66 90                	xchg   ax,ax
c0019914:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c001991e:	eb d8                	jmp    c00198f8 <terminateTask(int)+0xa4>

c0019920 <Thr::terminateFromIRQ(int)>:
c0019920:	83 ec 18             	sub    esp,0x18
c0019923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019927:	e8 28 ff ff ff       	call   c0019854 <terminateTask(int)>

c001992c <Semaphore::release()>:
c001992c:	83 ec 0c             	sub    esp,0xc
c001992f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019933:	fa                   	cli    
c0019934:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0019939:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c001993f:	8d 48 01             	lea    ecx,[eax+0x1]
c0019942:	89 0d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,ecx
c0019948:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001994b:	85 c9                	test   ecx,ecx
c001994d:	74 41                	je     c0019990 <Semaphore::release()+0x64>
c001994f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0019952:	83 ec 0c             	sub    esp,0xc
c0019955:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019958:	51                   	push   ecx
c0019959:	e8 9a fa ff ff       	call   c00193f8 <unblockTask(ThreadControlBlock*)>
c001995e:	a1 24 a1 02 c0       	mov    eax,ds:0xc002a124
c0019963:	83 c4 10             	add    esp,0x10
c0019966:	48                   	dec    eax
c0019967:	90                   	nop
c0019968:	a3 24 a1 02 c0       	mov    ds:0xc002a124,eax
c001996d:	85 c0                	test   eax,eax
c001996f:	75 0b                	jne    c001997c <Semaphore::release()+0x50>
c0019971:	a1 20 a1 02 c0       	mov    eax,ds:0xc002a120
c0019976:	85 c0                	test   eax,eax
c0019978:	75 1e                	jne    c0019998 <Semaphore::release()+0x6c>
c001997a:	66 90                	xchg   ax,ax
c001997c:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019981:	48                   	dec    eax
c0019982:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019987:	75 03                	jne    c001998c <Semaphore::release()+0x60>
c0019989:	fb                   	sti    
c001998a:	66 90                	xchg   ax,ax
c001998c:	83 c4 0c             	add    esp,0xc
c001998f:	c3                   	ret    
c0019990:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019993:	eb d3                	jmp    c0019968 <Semaphore::release()+0x3c>
c0019995:	8d 76 00             	lea    esi,[esi+0x0]
c0019998:	c7 05 20 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a120,0x0
c00199a2:	e8 95 f5 ff ff       	call   c0018f3c <schedule()>
c00199a7:	eb d3                	jmp    c001997c <Semaphore::release()+0x50>
c00199a9:	8d 76 00             	lea    esi,[esi+0x0]

c00199ac <__static_initialization_and_destruction_0(int, int)>:
c00199ac:	83 ec 0c             	sub    esp,0xc
c00199af:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00199b4:	0f 85 8e 00 00 00    	jne    c0019a48 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00199ba:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00199c2:	0f 85 80 00 00 00    	jne    c0019a48 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00199c8:	83 ec 0c             	sub    esp,0xc
c00199cb:	68 44 a1 02 c0       	push   0xc002a144
c00199d0:	e8 53 9f 00 00       	call   c0023928 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00199d5:	83 c4 10             	add    esp,0x10
c00199d8:	83 ec 04             	sub    esp,0x4
c00199db:	68 78 7e 02 c0       	push   0xc0027e78
c00199e0:	68 44 a1 02 c0       	push   0xc002a144
c00199e5:	68 d8 38 02 c0       	push   0xc00238d8
c00199ea:	e8 a5 35 ff ff       	call   c000cf94 <__cxa_atexit>
c00199ef:	83 c4 10             	add    esp,0x10
c00199f2:	83 ec 0c             	sub    esp,0xc
c00199f5:	68 38 a1 02 c0       	push   0xc002a138
c00199fa:	e8 29 9f 00 00       	call   c0023928 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00199ff:	83 c4 10             	add    esp,0x10
c0019a02:	83 ec 04             	sub    esp,0x4
c0019a05:	68 78 7e 02 c0       	push   0xc0027e78
c0019a0a:	68 38 a1 02 c0       	push   0xc002a138
c0019a0f:	68 d8 38 02 c0       	push   0xc00238d8
c0019a14:	e8 7b 35 ff ff       	call   c000cf94 <__cxa_atexit>
c0019a19:	83 c4 10             	add    esp,0x10
c0019a1c:	83 ec 0c             	sub    esp,0xc
c0019a1f:	68 2c a1 02 c0       	push   0xc002a12c
c0019a24:	e8 ff 9e 00 00       	call   c0023928 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a29:	83 c4 10             	add    esp,0x10
c0019a2c:	83 ec 04             	sub    esp,0x4
c0019a2f:	68 78 7e 02 c0       	push   0xc0027e78
c0019a34:	68 2c a1 02 c0       	push   0xc002a12c
c0019a39:	68 d8 38 02 c0       	push   0xc00238d8
c0019a3e:	e8 51 35 ff ff       	call   c000cf94 <__cxa_atexit>
c0019a43:	83 c4 10             	add    esp,0x10
c0019a46:	66 90                	xchg   ax,ax
c0019a48:	90                   	nop
c0019a49:	83 c4 0c             	add    esp,0xc
c0019a4c:	c3                   	ret    
c0019a4d:	8d 76 00             	lea    esi,[esi+0x0]

c0019a50 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019a50:	83 ec 0c             	sub    esp,0xc
c0019a53:	83 ec 08             	sub    esp,0x8
c0019a56:	68 ff ff 00 00       	push   0xffff
c0019a5b:	6a 01                	push   0x1
c0019a5d:	e8 4a ff ff ff       	call   c00199ac <__static_initialization_and_destruction_0(int, int)>
c0019a62:	83 c4 10             	add    esp,0x10
c0019a65:	83 c4 0c             	add    esp,0xc
c0019a68:	c3                   	ret    

c0019a69 <Vm::inbv(unsigned short)>:
c0019a69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a6d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019a72:	75 06                	jne    c0019a7a <Vm::inbv(unsigned short)+0x11>
c0019a74:	a0 8c a1 02 c0       	mov    al,ds:0xc002a18c
c0019a79:	c3                   	ret    
c0019a7a:	ec                   	in     al,dx
c0019a7b:	c3                   	ret    

c0019a7c <Vm::outbv(unsigned short, unsigned char)>:
c0019a7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a84:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019a89:	75 25                	jne    c0019ab0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019a8b:	8b 0d 8c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a18c
c0019a91:	8d 51 01             	lea    edx,[ecx+0x1]
c0019a94:	88 81 a0 a1 02 c0    	mov    BYTE PTR [ecx-0x3ffd5e60],al
c0019a9a:	89 15 8c a1 02 c0    	mov    DWORD PTR ds:0xc002a18c,edx
c0019aa0:	83 fa 20             	cmp    edx,0x20
c0019aa3:	75 0c                	jne    c0019ab1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019aa5:	c7 05 8c a1 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a18c,0x1f
c0019aaf:	c3                   	ret    
c0019ab0:	ee                   	out    dx,al
c0019ab1:	c3                   	ret    

c0019ab2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019ab2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ab7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019abc:	c1 e0 04             	shl    eax,0x4
c0019abf:	01 d0                	add    eax,edx
c0019ac1:	c3                   	ret    

c0019ac2 <Vm::getSegment(unsigned int)>:
c0019ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ac6:	c1 e8 10             	shr    eax,0x10
c0019ac9:	c3                   	ret    

c0019aca <Vm::getOffset(unsigned int)>:
c0019aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ace:	c3                   	ret    

c0019acf <Vm::mainloop2()>:
c0019acf:	83 ec 18             	sub    esp,0x18
c0019ad2:	fa                   	cli    
c0019ad3:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019ad9:	6a 02                	push   0x2
c0019adb:	c6 05 85 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a185,0x1
c0019ae2:	e8 25 f6 ff ff       	call   c001910c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019ae7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019aec:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019af0:	52                   	push   edx
c0019af1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019af5:	52                   	push   edx
c0019af6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019afa:	52                   	push   edx
c0019afb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019aff:	50                   	push   eax
c0019b00:	e8 3a 67 fe ff       	call   c000023f <goToVM86>
c0019b05:	83 c4 2c             	add    esp,0x2c
c0019b08:	c3                   	ret    

c0019b09 <Vm::mainVm8086Loop(void*)>:
c0019b09:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019b0e:	48                   	dec    eax
c0019b0f:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019b14:	75 01                	jne    c0019b17 <Vm::mainVm8086Loop(void*)+0xe>
c0019b16:	fb                   	sti    
c0019b17:	eb b6                	jmp    c0019acf <Vm::mainloop2()>

c0019b19 <Vm::mainloop3(unsigned long)>:
c0019b19:	83 ec 18             	sub    esp,0x18
c0019b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b20:	fa                   	cli    
c0019b21:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019b27:	6a 02                	push   0x2
c0019b29:	c6 05 84 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a184,0x1
c0019b30:	a3 80 a1 02 c0       	mov    ds:0xc002a180,eax
c0019b35:	e8 d2 f5 ff ff       	call   c001910c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019b3a:	83 c4 1c             	add    esp,0x1c
c0019b3d:	eb 90                	jmp    c0019acf <Vm::mainloop2()>

c0019b3f <Vm::initialise8086()>:
c0019b3f:	83 ec 0c             	sub    esp,0xc
c0019b42:	68 80 00 00 00       	push   0x80
c0019b47:	6a 00                	push   0x0
c0019b49:	68 09 9b 01 c0       	push   0xc0019b09
c0019b4e:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0019b54:	e8 c7 f1 ff ff       	call   c0018d20 <Process::createThread(void (*)(void*), void*, int)>
c0019b59:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019b60:	a3 88 a1 02 c0       	mov    ds:0xc002a188,eax
c0019b65:	68 00 01 00 00       	push   0x100
c0019b6a:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c0019b6f:	6a 00                	push   0x0
c0019b71:	6a 00                	push   0x0
c0019b73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019b79:	e8 84 2b ff ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b7e:	83 c4 2c             	add    esp,0x2c
c0019b81:	c3                   	ret    

c0019b82 <Vm::finish8086()>:
c0019b82:	53                   	push   ebx
c0019b83:	83 ec 08             	sub    esp,0x8
c0019b86:	fa                   	cli    
c0019b87:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019b8d:	80 3d 84 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a184,0x0
c0019b94:	75 15                	jne    c0019bab <Vm::finish8086()+0x29>
c0019b96:	e8 a1 f3 ff ff       	call   c0018f3c <schedule()>
c0019b9b:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019ba0:	48                   	dec    eax
c0019ba1:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019ba6:	75 de                	jne    c0019b86 <Vm::finish8086()+0x4>
c0019ba8:	fb                   	sti    
c0019ba9:	eb db                	jmp    c0019b86 <Vm::finish8086()+0x4>
c0019bab:	83 ec 0c             	sub    esp,0xc
c0019bae:	8b 1d 80 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a180
c0019bb4:	ff 35 88 a1 02 c0    	push   DWORD PTR ds:0xc002a188
c0019bba:	c6 05 84 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a184,0x0
c0019bc1:	e8 32 f8 ff ff       	call   c00193f8 <unblockTask(ThreadControlBlock*)>
c0019bc6:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019bcb:	83 c4 10             	add    esp,0x10
c0019bce:	8d 50 ff             	lea    edx,[eax-0x1]
c0019bd1:	89 15 28 a1 02 c0    	mov    DWORD PTR ds:0xc002a128,edx
c0019bd7:	85 d2                	test   edx,edx
c0019bd9:	75 01                	jne    c0019bdc <Vm::finish8086()+0x5a>
c0019bdb:	fb                   	sti    
c0019bdc:	89 d8                	mov    eax,ebx
c0019bde:	83 c4 08             	add    esp,0x8
c0019be1:	5b                   	pop    ebx
c0019be2:	c3                   	ret    

c0019be3 <Vm::getOutput8086(unsigned char*)>:
c0019be3:	57                   	push   edi
c0019be4:	8b 0d 8c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a18c
c0019bea:	56                   	push   esi
c0019beb:	be a0 a1 02 c0       	mov    esi,0xc002a1a0
c0019bf0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019bf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bf6:	a1 8c a1 02 c0       	mov    eax,ds:0xc002a18c
c0019bfb:	5e                   	pop    esi
c0019bfc:	c7 05 8c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a18c,0x0
c0019c06:	5f                   	pop    edi
c0019c07:	c3                   	ret    

c0019c08 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019c08:	55                   	push   ebp
c0019c09:	57                   	push   edi
c0019c0a:	56                   	push   esi
c0019c0b:	53                   	push   ebx
c0019c0c:	83 ec 0c             	sub    esp,0xc
c0019c0f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019c13:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019c17:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019c1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c1f:	fa                   	cli    
c0019c20:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019c26:	80 3d 85 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a185,0x0
c0019c2d:	75 15                	jne    c0019c44 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019c2f:	e8 08 f3 ff ff       	call   c0018f3c <schedule()>
c0019c34:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019c39:	48                   	dec    eax
c0019c3a:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019c3f:	75 de                	jne    c0019c1f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c41:	fb                   	sti    
c0019c42:	eb db                	jmp    c0019c1f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c44:	a1 88 a1 02 c0       	mov    eax,ds:0xc002a188
c0019c49:	c7 05 8c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a18c,0x0
c0019c53:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019c57:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019c5b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019c5f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019c63:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019c67:	0f b7 ff             	movzx  edi,di
c0019c6a:	0f b7 f6             	movzx  esi,si
c0019c6d:	50                   	push   eax
c0019c6e:	6a 20                	push   0x20
c0019c70:	6a 00                	push   0x0
c0019c72:	68 a0 a1 02 c0       	push   0xc002a1a0
c0019c77:	e8 18 6a fe ff       	call   c0000694 <memset>
c0019c7c:	5a                   	pop    edx
c0019c7d:	59                   	pop    ecx
c0019c7e:	57                   	push   edi
c0019c7f:	56                   	push   esi
c0019c80:	e8 2d fe ff ff       	call   c0019ab2 <Vm::realToLinear(unsigned short, unsigned short)>
c0019c85:	83 c4 10             	add    esp,0x10
c0019c88:	89 c7                	mov    edi,eax
c0019c8a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019c8e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019c92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c94:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019c99:	c6 05 85 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a185,0x0
c0019ca0:	48                   	dec    eax
c0019ca1:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019ca6:	75 01                	jne    c0019ca9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019ca8:	fb                   	sti    
c0019ca9:	83 ec 0c             	sub    esp,0xc
c0019cac:	ff 35 88 a1 02 c0    	push   DWORD PTR ds:0xc002a188
c0019cb2:	e8 41 f7 ff ff       	call   c00193f8 <unblockTask(ThreadControlBlock*)>
c0019cb7:	83 c4 1c             	add    esp,0x1c
c0019cba:	b0 01                	mov    al,0x1
c0019cbc:	5b                   	pop    ebx
c0019cbd:	5e                   	pop    esi
c0019cbe:	5f                   	pop    edi
c0019cbf:	5d                   	pop    ebp
c0019cc0:	c3                   	ret    

c0019cc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019cc1:	55                   	push   ebp
c0019cc2:	57                   	push   edi
c0019cc3:	56                   	push   esi
c0019cc4:	53                   	push   ebx
c0019cc5:	83 ec 2c             	sub    esp,0x2c
c0019cc8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019ccc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019cd0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019cd4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019cd8:	fa                   	cli    
c0019cd9:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c0019cdf:	0f b6 35 85 a1 02 c0 	movzx  esi,BYTE PTR ds:0xc002a185
c0019ce6:	89 f0                	mov    eax,esi
c0019ce8:	84 c0                	test   al,al
c0019cea:	75 1d                	jne    c0019d09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019cec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019cf0:	e8 47 f2 ff ff       	call   c0018f3c <schedule()>
c0019cf5:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019cfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019cfe:	48                   	dec    eax
c0019cff:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019d04:	75 d2                	jne    c0019cd8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019d06:	fb                   	sti    
c0019d07:	eb cf                	jmp    c0019cd8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019d09:	a1 88 a1 02 c0       	mov    eax,ds:0xc002a188
c0019d0e:	c7 05 8c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a18c,0x0
c0019d18:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019d1c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019d20:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019d24:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019d28:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019d2c:	50                   	push   eax
c0019d2d:	6a 20                	push   0x20
c0019d2f:	6a 00                	push   0x0
c0019d31:	68 a0 a1 02 c0       	push   0xc002a1a0
c0019d36:	e8 59 69 fe ff       	call   c0000694 <memset>
c0019d3b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019d42:	e8 a0 00 ff ff       	call   c0009de7 <malloc>
c0019d47:	83 c4 0c             	add    esp,0xc
c0019d4a:	89 c3                	mov    ebx,eax
c0019d4c:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c0019d52:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d56:	50                   	push   eax
c0019d57:	e8 0a 39 ff ff       	call   c000d666 <File::File(char const*, Process*)>
c0019d5c:	83 c4 10             	add    esp,0x10
c0019d5f:	85 db                	test   ebx,ebx
c0019d61:	75 0a                	jne    c0019d6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019d63:	83 ec 0c             	sub    esp,0xc
c0019d66:	68 6c 6e 02 c0       	push   0xc0026e6c
c0019d6b:	eb 3e                	jmp    c0019dab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019d6d:	50                   	push   eax
c0019d6e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019d72:	50                   	push   eax
c0019d73:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d77:	50                   	push   eax
c0019d78:	53                   	push   ebx
c0019d79:	e8 6e 3c ff ff       	call   c000d9ec <File::stat(unsigned long long*, bool*)>
c0019d7e:	83 c4 10             	add    esp,0x10
c0019d81:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019d86:	74 0a                	je     c0019d92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019d88:	83 ec 0c             	sub    esp,0xc
c0019d8b:	68 80 6e 02 c0       	push   0xc0026e80
c0019d90:	eb 19                	jmp    c0019dab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019d92:	51                   	push   ecx
c0019d93:	51                   	push   ecx
c0019d94:	6a 01                	push   0x1
c0019d96:	53                   	push   ebx
c0019d97:	e8 a4 39 ff ff       	call   c000d740 <File::open(FileOpenMode)>
c0019d9c:	83 c4 10             	add    esp,0x10
c0019d9f:	85 c0                	test   eax,eax
c0019da1:	74 24                	je     c0019dc7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019da3:	83 ec 0c             	sub    esp,0xc
c0019da6:	68 99 6e 02 c0       	push   0xc0026e99
c0019dab:	e8 2d b4 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0019db0:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019db5:	83 c4 10             	add    esp,0x10
c0019db8:	48                   	dec    eax
c0019db9:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019dbe:	85 c0                	test   eax,eax
c0019dc0:	75 01                	jne    c0019dc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019dc2:	fb                   	sti    
c0019dc3:	31 f6                	xor    esi,esi
c0019dc5:	eb 58                	jmp    c0019e1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019dc7:	0f b7 ed             	movzx  ebp,bp
c0019dca:	50                   	push   eax
c0019dcb:	0f b7 ff             	movzx  edi,di
c0019dce:	50                   	push   eax
c0019dcf:	55                   	push   ebp
c0019dd0:	57                   	push   edi
c0019dd1:	e8 dc fc ff ff       	call   c0019ab2 <Vm::realToLinear(unsigned short, unsigned short)>
c0019dd6:	5a                   	pop    edx
c0019dd7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019dd9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ddd:	51                   	push   ecx
c0019dde:	50                   	push   eax
c0019ddf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019de3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019de7:	53                   	push   ebx
c0019de8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019deb:	83 c4 14             	add    esp,0x14
c0019dee:	53                   	push   ebx
c0019def:	e8 aa 39 ff ff       	call   c000d79e <File::close()>
c0019df4:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0019df9:	83 c4 10             	add    esp,0x10
c0019dfc:	48                   	dec    eax
c0019dfd:	c6 05 85 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a185,0x0
c0019e04:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c0019e09:	85 c0                	test   eax,eax
c0019e0b:	75 01                	jne    c0019e0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019e0d:	fb                   	sti    
c0019e0e:	83 ec 0c             	sub    esp,0xc
c0019e11:	ff 35 88 a1 02 c0    	push   DWORD PTR ds:0xc002a188
c0019e17:	e8 dc f5 ff ff       	call   c00193f8 <unblockTask(ThreadControlBlock*)>
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	83 c4 2c             	add    esp,0x2c
c0019e22:	89 f0                	mov    eax,esi
c0019e24:	5b                   	pop    ebx
c0019e25:	5e                   	pop    esi
c0019e26:	5f                   	pop    edi
c0019e27:	5d                   	pop    ebp
c0019e28:	c3                   	ret    

c0019e29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019e29:	57                   	push   edi
c0019e2a:	56                   	push   esi
c0019e2b:	53                   	push   ebx
c0019e2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e38:	83 e8 06             	sub    eax,0x6
c0019e3b:	0f b7 c0             	movzx  eax,ax
c0019e3e:	50                   	push   eax
c0019e3f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019e44:	50                   	push   eax
c0019e45:	e8 68 fc ff ff       	call   c0019ab2 <Vm::realToLinear(unsigned short, unsigned short)>
c0019e4a:	5a                   	pop    edx
c0019e4b:	5e                   	pop    esi
c0019e4c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019e4f:	8d 56 fa             	lea    edx,[esi-0x6]
c0019e52:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019e58:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019e5b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019e5e:	83 c2 02             	add    edx,0x2
c0019e61:	66 89 10             	mov    WORD PTR [eax],dx
c0019e64:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019e67:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019e6b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019e6e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019e72:	89 d6                	mov    esi,edx
c0019e74:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019e7a:	66 81 e6 ff fd       	and    si,0xfdff
c0019e7f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019e83:	74 07                	je     c0019e8c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019e85:	89 d6                	mov    esi,edx
c0019e87:	66 81 ce 00 02       	or     si,0x200
c0019e8c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019e90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e95:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019e99:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019ea1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019ea4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019eac:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019eaf:	5b                   	pop    ebx
c0019eb0:	5e                   	pop    esi
c0019eb1:	5f                   	pop    edi
c0019eb2:	c3                   	ret    

c0019eb3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019eb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019eb8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ebd:	c1 e0 04             	shl    eax,0x4
c0019ec0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019ec3:	c3                   	ret    

c0019ec4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019ec4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ec9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ece:	c1 e0 04             	shl    eax,0x4
c0019ed1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019ed5:	c3                   	ret    

c0019ed6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019ed6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019edb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ee0:	c1 e0 04             	shl    eax,0x4
c0019ee3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019ee6:	c3                   	ret    

c0019ee7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019ee7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019eec:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ef1:	c1 e0 04             	shl    eax,0x4
c0019ef4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ef8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019efb:	c3                   	ret    

c0019efc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019efc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f01:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f06:	c1 e0 04             	shl    eax,0x4
c0019f09:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f0d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019f11:	c3                   	ret    

c0019f12 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019f12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f1c:	c1 e0 04             	shl    eax,0x4
c0019f1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f23:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019f26:	c3                   	ret    

c0019f27 <Vm::faultHandler(regs*)>:
c0019f27:	55                   	push   ebp
c0019f28:	57                   	push   edi
c0019f29:	56                   	push   esi
c0019f2a:	53                   	push   ebx
c0019f2b:	83 ec 1c             	sub    esp,0x1c
c0019f2e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019f32:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019f35:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019f39:	0f b7 f8             	movzx  edi,ax
c0019f3c:	52                   	push   edx
c0019f3d:	0f b7 c0             	movzx  eax,ax
c0019f40:	50                   	push   eax
c0019f41:	e8 6c fb ff ff       	call   c0019ab2 <Vm::realToLinear(unsigned short, unsigned short)>
c0019f46:	5a                   	pop    edx
c0019f47:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019f4a:	59                   	pop    ecx
c0019f4b:	89 c1                	mov    ecx,eax
c0019f4d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019f50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f5d:	0f b7 c5             	movzx  eax,bp
c0019f60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f64:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019f68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019f6c:	e8 41 fb ff ff       	call   c0019ab2 <Vm::realToLinear(unsigned short, unsigned short)>
c0019f71:	5e                   	pop    esi
c0019f72:	be 06 00 00 00       	mov    esi,0x6
c0019f77:	5a                   	pop    edx
c0019f78:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019f7d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019f82:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019f85:	80 fa 9d             	cmp    dl,0x9d
c0019f88:	0f 84 2c 02 00 00    	je     c001a1ba <Vm::faultHandler(regs*)+0x293>
c0019f8e:	0f 87 91 00 00 00    	ja     c001a025 <Vm::faultHandler(regs*)+0xfe>
c0019f94:	80 fa 66             	cmp    dl,0x66
c0019f97:	0f 84 98 01 00 00    	je     c001a135 <Vm::faultHandler(regs*)+0x20e>
c0019f9d:	77 47                	ja     c0019fe6 <Vm::faultHandler(regs*)+0xbf>
c0019f9f:	80 fa 36             	cmp    dl,0x36
c0019fa2:	0f 84 80 01 00 00    	je     c001a128 <Vm::faultHandler(regs*)+0x201>
c0019fa8:	77 1a                	ja     c0019fc4 <Vm::faultHandler(regs*)+0x9d>
c0019faa:	80 fa 26             	cmp    dl,0x26
c0019fad:	0f 84 4e 01 00 00    	je     c001a101 <Vm::faultHandler(regs*)+0x1da>
c0019fb3:	80 fa 2e             	cmp    dl,0x2e
c0019fb6:	0f 85 e2 05 00 00    	jne    c001a59e <Vm::faultHandler(regs*)+0x677>
c0019fbc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019fbf:	31 f6                	xor    esi,esi
c0019fc1:	41                   	inc    ecx
c0019fc2:	eb be                	jmp    c0019f82 <Vm::faultHandler(regs*)+0x5b>
c0019fc4:	80 fa 64             	cmp    dl,0x64
c0019fc7:	0f 84 41 01 00 00    	je     c001a10e <Vm::faultHandler(regs*)+0x1e7>
c0019fcd:	0f 87 48 01 00 00    	ja     c001a11b <Vm::faultHandler(regs*)+0x1f4>
c0019fd3:	80 fa 3e             	cmp    dl,0x3e
c0019fd6:	0f 85 c2 05 00 00    	jne    c001a59e <Vm::faultHandler(regs*)+0x677>
c0019fdc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019fdf:	be 01 00 00 00       	mov    esi,0x1
c0019fe4:	eb db                	jmp    c0019fc1 <Vm::faultHandler(regs*)+0x9a>
c0019fe6:	80 fa 6d             	cmp    dl,0x6d
c0019fe9:	0f 84 ec 02 00 00    	je     c001a2db <Vm::faultHandler(regs*)+0x3b4>
c0019fef:	77 17                	ja     c001a008 <Vm::faultHandler(regs*)+0xe1>
c0019ff1:	80 fa 67             	cmp    dl,0x67
c0019ff4:	0f 84 48 01 00 00    	je     c001a142 <Vm::faultHandler(regs*)+0x21b>
c0019ffa:	80 fa 6c             	cmp    dl,0x6c
c0019ffd:	0f 84 69 02 00 00    	je     c001a26c <Vm::faultHandler(regs*)+0x345>
c001a003:	e9 96 05 00 00       	jmp    c001a59e <Vm::faultHandler(regs*)+0x677>
c001a008:	80 fa 6f             	cmp    dl,0x6f
c001a00b:	0f 84 f4 03 00 00    	je     c001a405 <Vm::faultHandler(regs*)+0x4de>
c001a011:	0f 82 59 03 00 00    	jb     c001a370 <Vm::faultHandler(regs*)+0x449>
c001a017:	80 fa 9c             	cmp    dl,0x9c
c001a01a:	0f 84 2f 01 00 00    	je     c001a14f <Vm::faultHandler(regs*)+0x228>
c001a020:	e9 79 05 00 00       	jmp    c001a59e <Vm::faultHandler(regs*)+0x677>
c001a025:	80 fa ec             	cmp    dl,0xec
c001a028:	0f 84 14 05 00 00    	je     c001a542 <Vm::faultHandler(regs*)+0x61b>
c001a02e:	77 7b                	ja     c001a0ab <Vm::faultHandler(regs*)+0x184>
c001a030:	80 fa e4             	cmp    dl,0xe4
c001a033:	0f 84 93 04 00 00    	je     c001a4cc <Vm::faultHandler(regs*)+0x5a5>
c001a039:	77 53                	ja     c001a08e <Vm::faultHandler(regs*)+0x167>
c001a03b:	80 fa cd             	cmp    dl,0xcd
c001a03e:	0f 84 d9 01 00 00    	je     c001a21d <Vm::faultHandler(regs*)+0x2f6>
c001a044:	80 fa cf             	cmp    dl,0xcf
c001a047:	0f 85 51 05 00 00    	jne    c001a59e <Vm::faultHandler(regs*)+0x677>
c001a04d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a050:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001a053:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001a057:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001a05a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001a05e:	81 ca 00 02 02 00    	or     edx,0x20200
c001a064:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a067:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001a06b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a071:	66 c1 e8 09          	shr    ax,0x9
c001a075:	83 e0 01             	and    eax,0x1
c001a078:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a07b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a07e:	83 c0 06             	add    eax,0x6
c001a081:	25 ff ff 00 00       	and    eax,0xffff
c001a086:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a089:	e9 0c 05 00 00       	jmp    c001a59a <Vm::faultHandler(regs*)+0x673>
c001a08e:	80 fa e6             	cmp    dl,0xe6
c001a091:	0f 84 7f 04 00 00    	je     c001a516 <Vm::faultHandler(regs*)+0x5ef>
c001a097:	0f 82 4b 04 00 00    	jb     c001a4e8 <Vm::faultHandler(regs*)+0x5c1>
c001a09d:	80 fa e7             	cmp    dl,0xe7
c001a0a0:	0f 84 87 04 00 00    	je     c001a52d <Vm::faultHandler(regs*)+0x606>
c001a0a6:	e9 f3 04 00 00       	jmp    c001a59e <Vm::faultHandler(regs*)+0x677>
c001a0ab:	80 fa ef             	cmp    dl,0xef
c001a0ae:	0f 84 d1 04 00 00    	je     c001a585 <Vm::faultHandler(regs*)+0x65e>
c001a0b4:	77 28                	ja     c001a0de <Vm::faultHandler(regs*)+0x1b7>
c001a0b6:	80 fa ed             	cmp    dl,0xed
c001a0b9:	0f 84 9f 04 00 00    	je     c001a55e <Vm::faultHandler(regs*)+0x637>
c001a0bf:	80 fa ee             	cmp    dl,0xee
c001a0c2:	0f 85 d6 04 00 00    	jne    c001a59e <Vm::faultHandler(regs*)+0x677>
c001a0c8:	50                   	push   eax
c001a0c9:	50                   	push   eax
c001a0ca:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a0ce:	50                   	push   eax
c001a0cf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a0d3:	50                   	push   eax
c001a0d4:	e8 a3 f9 ff ff       	call   c0019a7c <Vm::outbv(unsigned short, unsigned char)>
c001a0d9:	e9 9f 04 00 00       	jmp    c001a57d <Vm::faultHandler(regs*)+0x656>
c001a0de:	80 fa fa             	cmp    dl,0xfa
c001a0e1:	0f 84 69 01 00 00    	je     c001a250 <Vm::faultHandler(regs*)+0x329>
c001a0e7:	80 fa fb             	cmp    dl,0xfb
c001a0ea:	0f 84 6e 01 00 00    	je     c001a25e <Vm::faultHandler(regs*)+0x337>
c001a0f0:	80 fa f3             	cmp    dl,0xf3
c001a0f3:	0f 85 a5 04 00 00    	jne    c001a59e <Vm::faultHandler(regs*)+0x677>
c001a0f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0fc:	e9 c0 fe ff ff       	jmp    c0019fc1 <Vm::faultHandler(regs*)+0x9a>
c001a101:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a104:	be 02 00 00 00       	mov    esi,0x2
c001a109:	e9 b3 fe ff ff       	jmp    c0019fc1 <Vm::faultHandler(regs*)+0x9a>
c001a10e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a111:	be 03 00 00 00       	mov    esi,0x3
c001a116:	e9 a6 fe ff ff       	jmp    c0019fc1 <Vm::faultHandler(regs*)+0x9a>
c001a11b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a11e:	be 04 00 00 00       	mov    esi,0x4
c001a123:	e9 99 fe ff ff       	jmp    c0019fc1 <Vm::faultHandler(regs*)+0x9a>
c001a128:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a12b:	be 05 00 00 00       	mov    esi,0x5
c001a130:	e9 8c fe ff ff       	jmp    c0019fc1 <Vm::faultHandler(regs*)+0x9a>
c001a135:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a138:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001a13d:	e9 7f fe ff ff       	jmp    c0019fc1 <Vm::faultHandler(regs*)+0x9a>
c001a142:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a145:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001a14a:	e9 72 fe ff ff       	jmp    c0019fc1 <Vm::faultHandler(regs*)+0x9a>
c001a14f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001a152:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a156:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a15b:	74 30                	je     c001a18d <Vm::faultHandler(regs*)+0x266>
c001a15d:	83 e9 04             	sub    ecx,0x4
c001a160:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a166:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a16c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a16f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a172:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a178:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a17c:	0f 84 15 04 00 00    	je     c001a597 <Vm::faultHandler(regs*)+0x670>
c001a182:	80 ce 02             	or     dh,0x2
c001a185:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a188:	e9 0a 04 00 00       	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a18d:	83 e9 02             	sub    ecx,0x2
c001a190:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a196:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a199:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a19d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a1a3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a1a7:	74 05                	je     c001a1ae <Vm::faultHandler(regs*)+0x287>
c001a1a9:	80 ce 02             	or     dh,0x2
c001a1ac:	eb 03                	jmp    c001a1b1 <Vm::faultHandler(regs*)+0x28a>
c001a1ae:	80 e6 fd             	and    dh,0xfd
c001a1b1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a1b5:	e9 dd 03 00 00       	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a1ba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a1bf:	74 2a                	je     c001a1eb <Vm::faultHandler(regs*)+0x2c4>
c001a1c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001a1c3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a1c9:	81 ca 00 02 02 00    	or     edx,0x20200
c001a1cf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a1d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a1da:	c1 e8 09             	shr    eax,0x9
c001a1dd:	83 e0 01             	and    eax,0x1
c001a1e0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a1e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a1e6:	83 c0 04             	add    eax,0x4
c001a1e9:	eb 25                	jmp    c001a210 <Vm::faultHandler(regs*)+0x2e9>
c001a1eb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a1ee:	81 ca 00 02 02 00    	or     edx,0x20200
c001a1f4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a1f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c001a1fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a200:	66 c1 e8 09          	shr    ax,0x9
c001a204:	83 e0 01             	and    eax,0x1
c001a207:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a20a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a20d:	83 c0 02             	add    eax,0x2
c001a210:	25 ff ff 00 00       	and    eax,0xffff
c001a215:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a218:	e9 7a 03 00 00       	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a21d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a221:	3c ee                	cmp    al,0xee
c001a223:	75 10                	jne    c001a235 <Vm::faultHandler(regs*)+0x30e>
c001a225:	83 ec 0c             	sub    esp,0xc
c001a228:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a22b:	e8 e9 f8 ff ff       	call   c0019b19 <Vm::mainloop3(unsigned long)>
c001a230:	e9 4b 03 00 00       	jmp    c001a580 <Vm::faultHandler(regs*)+0x659>
c001a235:	83 ec 0c             	sub    esp,0xc
c001a238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a240:	51                   	push   ecx
c001a241:	50                   	push   eax
c001a242:	53                   	push   ebx
c001a243:	e8 e1 fb ff ff       	call   c0019e29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a248:	83 c4 20             	add    esp,0x20
c001a24b:	e9 4a 03 00 00       	jmp    c001a59a <Vm::faultHandler(regs*)+0x673>
c001a250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a255:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a259:	e9 39 03 00 00       	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a25e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a263:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a267:	e9 2b 03 00 00       	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a26c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a26f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a274:	74 2b                	je     c001a2a1 <Vm::faultHandler(regs*)+0x37a>
c001a276:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a27d:	76 22                	jbe    c001a2a1 <Vm::faultHandler(regs*)+0x37a>
c001a27f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a283:	50                   	push   eax
c001a284:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a288:	50                   	push   eax
c001a289:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a28d:	50                   	push   eax
c001a28e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a292:	50                   	push   eax
c001a293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a297:	50                   	push   eax
c001a298:	6a 6c                	push   0x6c
c001a29a:	6a 6c                	push   0x6c
c001a29c:	e9 b9 01 00 00       	jmp    c001a45a <Vm::faultHandler(regs*)+0x533>
c001a2a1:	83 ec 0c             	sub    esp,0xc
c001a2a4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a2a8:	0f b7 f6             	movzx  esi,si
c001a2ab:	50                   	push   eax
c001a2ac:	e8 b8 f7 ff ff       	call   c0019a69 <Vm::inbv(unsigned short)>
c001a2b1:	83 c4 0c             	add    esp,0xc
c001a2b4:	0f b6 c0             	movzx  eax,al
c001a2b7:	50                   	push   eax
c001a2b8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a2bc:	50                   	push   eax
c001a2bd:	56                   	push   esi
c001a2be:	e8 24 fc ff ff       	call   c0019ee7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a2c3:	83 c4 10             	add    esp,0x10
c001a2c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2c9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a2cd:	74 03                	je     c001a2d2 <Vm::faultHandler(regs*)+0x3ab>
c001a2cf:	48                   	dec    eax
c001a2d0:	eb 01                	jmp    c001a2d3 <Vm::faultHandler(regs*)+0x3ac>
c001a2d2:	40                   	inc    eax
c001a2d3:	0f b7 c0             	movzx  eax,ax
c001a2d6:	e9 8d 00 00 00       	jmp    c001a368 <Vm::faultHandler(regs*)+0x441>
c001a2db:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a2de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2e1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a2e6:	74 29                	je     c001a311 <Vm::faultHandler(regs*)+0x3ea>
c001a2e8:	3d ff ff 00 00       	cmp    eax,0xffff
c001a2ed:	76 22                	jbe    c001a311 <Vm::faultHandler(regs*)+0x3ea>
c001a2ef:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a2f3:	50                   	push   eax
c001a2f4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a2f8:	50                   	push   eax
c001a2f9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a2fd:	50                   	push   eax
c001a2fe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a302:	50                   	push   eax
c001a303:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a307:	50                   	push   eax
c001a308:	6a 6d                	push   0x6d
c001a30a:	6a 6d                	push   0x6d
c001a30c:	e9 49 01 00 00       	jmp    c001a45a <Vm::faultHandler(regs*)+0x533>
c001a311:	0f b7 c8             	movzx  ecx,ax
c001a314:	0f b7 f6             	movzx  esi,si
c001a317:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a31a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a31f:	74 20                	je     c001a341 <Vm::faultHandler(regs*)+0x41a>
c001a321:	ed                   	in     eax,dx
c001a322:	55                   	push   ebp
c001a323:	50                   	push   eax
c001a324:	51                   	push   ecx
c001a325:	56                   	push   esi
c001a326:	e8 e7 fb ff ff       	call   c0019f12 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a331:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a335:	74 05                	je     c001a33c <Vm::faultHandler(regs*)+0x415>
c001a337:	83 e8 04             	sub    eax,0x4
c001a33a:	eb 27                	jmp    c001a363 <Vm::faultHandler(regs*)+0x43c>
c001a33c:	83 c0 04             	add    eax,0x4
c001a33f:	eb 22                	jmp    c001a363 <Vm::faultHandler(regs*)+0x43c>
c001a341:	66 ed                	in     ax,dx
c001a343:	0f b7 c0             	movzx  eax,ax
c001a346:	57                   	push   edi
c001a347:	50                   	push   eax
c001a348:	51                   	push   ecx
c001a349:	56                   	push   esi
c001a34a:	e8 ad fb ff ff       	call   c0019efc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a34f:	83 c4 10             	add    esp,0x10
c001a352:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a355:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a359:	74 05                	je     c001a360 <Vm::faultHandler(regs*)+0x439>
c001a35b:	83 e8 02             	sub    eax,0x2
c001a35e:	eb 03                	jmp    c001a363 <Vm::faultHandler(regs*)+0x43c>
c001a360:	83 c0 02             	add    eax,0x2
c001a363:	25 ff ff 00 00       	and    eax,0xffff
c001a368:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a36b:	e9 27 02 00 00       	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a370:	8d 46 ff             	lea    eax,[esi-0x1]
c001a373:	3c 05                	cmp    al,0x5
c001a375:	77 24                	ja     c001a39b <Vm::faultHandler(regs*)+0x474>
c001a377:	0f b6 c0             	movzx  eax,al
c001a37a:	ff 24 85 0c 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd90f4]
c001a381:	0f b7 fd             	movzx  edi,bp
c001a384:	eb 15                	jmp    c001a39b <Vm::faultHandler(regs*)+0x474>
c001a386:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a38a:	eb 0f                	jmp    c001a39b <Vm::faultHandler(regs*)+0x474>
c001a38c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a390:	eb 09                	jmp    c001a39b <Vm::faultHandler(regs*)+0x474>
c001a392:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a396:	eb 03                	jmp    c001a39b <Vm::faultHandler(regs*)+0x474>
c001a398:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a39b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a39e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a3a3:	74 29                	je     c001a3ce <Vm::faultHandler(regs*)+0x4a7>
c001a3a5:	3d ff ff 00 00       	cmp    eax,0xffff
c001a3aa:	76 22                	jbe    c001a3ce <Vm::faultHandler(regs*)+0x4a7>
c001a3ac:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a3b0:	50                   	push   eax
c001a3b1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a3b5:	50                   	push   eax
c001a3b6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a3ba:	50                   	push   eax
c001a3bb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a3bf:	50                   	push   eax
c001a3c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a3c4:	50                   	push   eax
c001a3c5:	6a 6e                	push   0x6e
c001a3c7:	6a 6e                	push   0x6e
c001a3c9:	e9 8c 00 00 00       	jmp    c001a45a <Vm::faultHandler(regs*)+0x533>
c001a3ce:	0f b7 c0             	movzx  eax,ax
c001a3d1:	52                   	push   edx
c001a3d2:	52                   	push   edx
c001a3d3:	50                   	push   eax
c001a3d4:	57                   	push   edi
c001a3d5:	e8 d9 fa ff ff       	call   c0019eb3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a3da:	59                   	pop    ecx
c001a3db:	0f b6 c0             	movzx  eax,al
c001a3de:	5e                   	pop    esi
c001a3df:	50                   	push   eax
c001a3e0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a3e4:	50                   	push   eax
c001a3e5:	e8 92 f6 ff ff       	call   c0019a7c <Vm::outbv(unsigned short, unsigned char)>
c001a3ea:	83 c4 10             	add    esp,0x10
c001a3ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a3f0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a3f4:	74 03                	je     c001a3f9 <Vm::faultHandler(regs*)+0x4d2>
c001a3f6:	48                   	dec    eax
c001a3f7:	eb 01                	jmp    c001a3fa <Vm::faultHandler(regs*)+0x4d3>
c001a3f9:	40                   	inc    eax
c001a3fa:	0f b7 c0             	movzx  eax,ax
c001a3fd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a400:	e9 92 01 00 00       	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a405:	8d 46 ff             	lea    eax,[esi-0x1]
c001a408:	3c 05                	cmp    al,0x5
c001a40a:	77 1f                	ja     c001a42b <Vm::faultHandler(regs*)+0x504>
c001a40c:	0f b6 c0             	movzx  eax,al
c001a40f:	ff 24 85 24 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd90dc]
c001a416:	89 ef                	mov    edi,ebp
c001a418:	eb 11                	jmp    c001a42b <Vm::faultHandler(regs*)+0x504>
c001a41a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a41d:	eb 0c                	jmp    c001a42b <Vm::faultHandler(regs*)+0x504>
c001a41f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a422:	eb 07                	jmp    c001a42b <Vm::faultHandler(regs*)+0x504>
c001a424:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a427:	eb 02                	jmp    c001a42b <Vm::faultHandler(regs*)+0x504>
c001a429:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a42b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a42e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a433:	74 37                	je     c001a46c <Vm::faultHandler(regs*)+0x545>
c001a435:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a43b:	76 2f                	jbe    c001a46c <Vm::faultHandler(regs*)+0x545>
c001a43d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a441:	50                   	push   eax
c001a442:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a446:	50                   	push   eax
c001a447:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a44b:	50                   	push   eax
c001a44c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a450:	50                   	push   eax
c001a451:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a455:	50                   	push   eax
c001a456:	6a 6f                	push   0x6f
c001a458:	6a 6f                	push   0x6f
c001a45a:	68 b2 6e 02 c0       	push   0xc0026eb2
c001a45f:	e8 97 2c ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001a464:	83 c4 20             	add    esp,0x20
c001a467:	e9 86 01 00 00       	jmp    c001a5f2 <Vm::faultHandler(regs*)+0x6cb>
c001a46c:	0f b7 d7             	movzx  edx,di
c001a46f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a472:	0f b7 c6             	movzx  eax,si
c001a475:	81 e1 00 04 00 00    	and    ecx,0x400
c001a47b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a47e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a483:	74 1d                	je     c001a4a2 <Vm::faultHandler(regs*)+0x57b>
c001a485:	55                   	push   ebp
c001a486:	55                   	push   ebp
c001a487:	50                   	push   eax
c001a488:	52                   	push   edx
c001a489:	e8 48 fa ff ff       	call   c0019ed6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a48e:	83 c4 10             	add    esp,0x10
c001a491:	89 fa                	mov    edx,edi
c001a493:	ef                   	out    dx,eax
c001a494:	85 c9                	test   ecx,ecx
c001a496:	74 05                	je     c001a49d <Vm::faultHandler(regs*)+0x576>
c001a498:	83 ee 04             	sub    esi,0x4
c001a49b:	eb 21                	jmp    c001a4be <Vm::faultHandler(regs*)+0x597>
c001a49d:	83 c6 04             	add    esi,0x4
c001a4a0:	eb 1c                	jmp    c001a4be <Vm::faultHandler(regs*)+0x597>
c001a4a2:	55                   	push   ebp
c001a4a3:	55                   	push   ebp
c001a4a4:	50                   	push   eax
c001a4a5:	52                   	push   edx
c001a4a6:	e8 19 fa ff ff       	call   c0019ec4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a4ab:	83 c4 10             	add    esp,0x10
c001a4ae:	89 fa                	mov    edx,edi
c001a4b0:	66 ef                	out    dx,ax
c001a4b2:	85 c9                	test   ecx,ecx
c001a4b4:	74 05                	je     c001a4bb <Vm::faultHandler(regs*)+0x594>
c001a4b6:	83 ee 02             	sub    esi,0x2
c001a4b9:	eb 03                	jmp    c001a4be <Vm::faultHandler(regs*)+0x597>
c001a4bb:	83 c6 02             	add    esi,0x2
c001a4be:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a4c4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a4c7:	e9 cb 00 00 00       	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a4cc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a4d3:	83 ec 0c             	sub    esp,0xc
c001a4d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a4da:	50                   	push   eax
c001a4db:	e8 89 f5 ff ff       	call   c0019a69 <Vm::inbv(unsigned short)>
c001a4e0:	0f b6 c0             	movzx  eax,al
c001a4e3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a4e6:	eb 3f                	jmp    c001a527 <Vm::faultHandler(regs*)+0x600>
c001a4e8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a4ed:	74 07                	je     c001a4f6 <Vm::faultHandler(regs*)+0x5cf>
c001a4ef:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a4f3:	ed                   	in     eax,dx
c001a4f4:	eb 14                	jmp    c001a50a <Vm::faultHandler(regs*)+0x5e3>
c001a4f6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a4f9:	66 31 f6             	xor    si,si
c001a4fc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a4ff:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a503:	66 ed                	in     ax,dx
c001a505:	0f b7 c0             	movzx  eax,ax
c001a508:	09 f0                	or     eax,esi
c001a50a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a50d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a511:	e9 84 00 00 00       	jmp    c001a59a <Vm::faultHandler(regs*)+0x673>
c001a516:	52                   	push   edx
c001a517:	52                   	push   edx
c001a518:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a51c:	50                   	push   eax
c001a51d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a521:	50                   	push   eax
c001a522:	e8 55 f5 ff ff       	call   c0019a7c <Vm::outbv(unsigned short, unsigned char)>
c001a527:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a52b:	eb 53                	jmp    c001a580 <Vm::faultHandler(regs*)+0x659>
c001a52d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a530:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a534:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a539:	74 03                	je     c001a53e <Vm::faultHandler(regs*)+0x617>
c001a53b:	ef                   	out    dx,eax
c001a53c:	eb cf                	jmp    c001a50d <Vm::faultHandler(regs*)+0x5e6>
c001a53e:	66 ef                	out    dx,ax
c001a540:	eb cb                	jmp    c001a50d <Vm::faultHandler(regs*)+0x5e6>
c001a542:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a549:	83 ec 0c             	sub    esp,0xc
c001a54c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a550:	50                   	push   eax
c001a551:	e8 13 f5 ff ff       	call   c0019a69 <Vm::inbv(unsigned short)>
c001a556:	0f b6 c0             	movzx  eax,al
c001a559:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a55c:	eb 1f                	jmp    c001a57d <Vm::faultHandler(regs*)+0x656>
c001a55e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a561:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a566:	74 03                	je     c001a56b <Vm::faultHandler(regs*)+0x644>
c001a568:	ed                   	in     eax,dx
c001a569:	eb 0d                	jmp    c001a578 <Vm::faultHandler(regs*)+0x651>
c001a56b:	66 ed                	in     ax,dx
c001a56d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a570:	0f b7 c0             	movzx  eax,ax
c001a573:	66 31 d2             	xor    dx,dx
c001a576:	09 d0                	or     eax,edx
c001a578:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a57b:	eb 1a                	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a57d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a580:	83 c4 10             	add    esp,0x10
c001a583:	eb 15                	jmp    c001a59a <Vm::faultHandler(regs*)+0x673>
c001a585:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a588:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a58b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a590:	74 03                	je     c001a595 <Vm::faultHandler(regs*)+0x66e>
c001a592:	ef                   	out    dx,eax
c001a593:	eb 02                	jmp    c001a597 <Vm::faultHandler(regs*)+0x670>
c001a595:	66 ef                	out    dx,ax
c001a597:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a59a:	b0 01                	mov    al,0x1
c001a59c:	eb 56                	jmp    c001a5f4 <Vm::faultHandler(regs*)+0x6cd>
c001a59e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a5a2:	50                   	push   eax
c001a5a3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a5a7:	50                   	push   eax
c001a5a8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a5ac:	50                   	push   eax
c001a5ad:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a5b1:	50                   	push   eax
c001a5b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a5b6:	50                   	push   eax
c001a5b7:	52                   	push   edx
c001a5b8:	52                   	push   edx
c001a5b9:	68 df 6e 02 c0       	push   0xc0026edf
c001a5be:	e8 38 2b ff ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001a5c3:	83 c4 20             	add    esp,0x20
c001a5c6:	83 ec 0c             	sub    esp,0xc
c001a5c9:	6a 60                	push   0x60
c001a5cb:	e8 99 f4 ff ff       	call   c0019a69 <Vm::inbv(unsigned short)>
c001a5d0:	83 c4 10             	add    esp,0x10
c001a5d3:	3c 1c                	cmp    al,0x1c
c001a5d5:	74 04                	je     c001a5db <Vm::faultHandler(regs*)+0x6b4>
c001a5d7:	3c 5a                	cmp    al,0x5a
c001a5d9:	75 eb                	jne    c001a5c6 <Vm::faultHandler(regs*)+0x69f>
c001a5db:	3c 5a                	cmp    al,0x5a
c001a5dd:	74 04                	je     c001a5e3 <Vm::faultHandler(regs*)+0x6bc>
c001a5df:	3c 1c                	cmp    al,0x1c
c001a5e1:	75 0f                	jne    c001a5f2 <Vm::faultHandler(regs*)+0x6cb>
c001a5e3:	83 ec 0c             	sub    esp,0xc
c001a5e6:	6a 60                	push   0x60
c001a5e8:	e8 7c f4 ff ff       	call   c0019a69 <Vm::inbv(unsigned short)>
c001a5ed:	83 c4 10             	add    esp,0x10
c001a5f0:	eb e9                	jmp    c001a5db <Vm::faultHandler(regs*)+0x6b4>
c001a5f2:	31 c0                	xor    eax,eax
c001a5f4:	83 c4 1c             	add    esp,0x1c
c001a5f7:	5b                   	pop    ebx
c001a5f8:	5e                   	pop    esi
c001a5f9:	5f                   	pop    edi
c001a5fa:	5d                   	pop    ebp
c001a5fb:	c3                   	ret    

c001a5fc <Vm::fpuInternalTo32(unsigned long long)>:
c001a5fc:	57                   	push   edi
c001a5fd:	56                   	push   esi
c001a5fe:	53                   	push   ebx
c001a5ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a607:	89 d6                	mov    esi,edx
c001a609:	89 d7                	mov    edi,edx
c001a60b:	89 c1                	mov    ecx,eax
c001a60d:	c1 ef 14             	shr    edi,0x14
c001a610:	89 d3                	mov    ebx,edx
c001a612:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a618:	31 d2                	xor    edx,edx
c001a61a:	89 f8                	mov    eax,edi
c001a61c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a622:	bf ff 00 00 00       	mov    edi,0xff
c001a627:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a62c:	83 d2 ff             	adc    edx,0xffffffff
c001a62f:	39 c7                	cmp    edi,eax
c001a631:	bf 00 00 00 00       	mov    edi,0x0
c001a636:	19 d7                	sbb    edi,edx
c001a638:	72 16                	jb     c001a650 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a63a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a63e:	c1 e0 17             	shl    eax,0x17
c001a641:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a647:	09 f1                	or     ecx,esi
c001a649:	09 c1                	or     ecx,eax
c001a64b:	89 cf                	mov    edi,ecx
c001a64d:	eb 05                	jmp    c001a654 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a64f:	90                   	nop
c001a650:	31 ff                	xor    edi,edi
c001a652:	66 90                	xchg   ax,ax
c001a654:	89 f8                	mov    eax,edi
c001a656:	5b                   	pop    ebx
c001a657:	5e                   	pop    esi
c001a658:	5f                   	pop    edi
c001a659:	c3                   	ret    

c001a65a <Vm::fpuInternalTo64(unsigned long long)>:
c001a65a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a65e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a662:	c3                   	ret    

c001a663 <Vm::fpu32ToInternal(unsigned int)>:
c001a663:	57                   	push   edi
c001a664:	31 ff                	xor    edi,edi
c001a666:	56                   	push   esi
c001a667:	53                   	push   ebx
c001a668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a66c:	89 cb                	mov    ebx,ecx
c001a66e:	89 ce                	mov    esi,ecx
c001a670:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a676:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a67c:	c1 e9 17             	shr    ecx,0x17
c001a67f:	89 f0                	mov    eax,esi
c001a681:	0f b6 d1             	movzx  edx,cl
c001a684:	81 c2 80 03 00 00    	add    edx,0x380
c001a68a:	89 d1                	mov    ecx,edx
c001a68c:	89 fa                	mov    edx,edi
c001a68e:	c1 e1 14             	shl    ecx,0x14
c001a691:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a695:	c1 e0 1d             	shl    eax,0x1d
c001a698:	89 d7                	mov    edi,edx
c001a69a:	89 c6                	mov    esi,eax
c001a69c:	89 ca                	mov    edx,ecx
c001a69e:	89 f0                	mov    eax,esi
c001a6a0:	09 fa                	or     edx,edi
c001a6a2:	09 da                	or     edx,ebx
c001a6a4:	5b                   	pop    ebx
c001a6a5:	5e                   	pop    esi
c001a6a6:	5f                   	pop    edi
c001a6a7:	c3                   	ret    

c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>:
c001a6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6b0:	c3                   	ret    

c001a6b1 <Vm::fpuFloatToLong(unsigned long long)>:
c001a6b1:	57                   	push   edi
c001a6b2:	31 c0                	xor    eax,eax
c001a6b4:	56                   	push   esi
c001a6b5:	31 d2                	xor    edx,edx
c001a6b7:	53                   	push   ebx
c001a6b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a6c0:	89 d9                	mov    ecx,ebx
c001a6c2:	c1 e9 14             	shr    ecx,0x14
c001a6c5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a6cb:	89 cf                	mov    edi,ecx
c001a6cd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a6d3:	78 37                	js     c001a70c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a6d5:	89 d9                	mov    ecx,ebx
c001a6d7:	89 f0                	mov    eax,esi
c001a6d9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a6df:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a6e5:	89 ca                	mov    edx,ecx
c001a6e7:	b9 34 00 00 00       	mov    ecx,0x34
c001a6ec:	29 f9                	sub    ecx,edi
c001a6ee:	0f ad d0             	shrd   eax,edx,cl
c001a6f1:	d3 fa                	sar    edx,cl
c001a6f3:	f6 c1 20             	test   cl,0x20
c001a6f6:	74 08                	je     c001a700 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a6f8:	89 d0                	mov    eax,edx
c001a6fa:	c1 fa 1f             	sar    edx,0x1f
c001a6fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a700:	85 db                	test   ebx,ebx
c001a702:	79 08                	jns    c001a70c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a704:	f7 d8                	neg    eax
c001a706:	83 d2 00             	adc    edx,0x0
c001a709:	f7 da                	neg    edx
c001a70b:	90                   	nop
c001a70c:	5b                   	pop    ebx
c001a70d:	5e                   	pop    esi
c001a70e:	5f                   	pop    edi
c001a70f:	c3                   	ret    

c001a710 <Vm::fpuULongToFloat(unsigned long long)>:
c001a710:	57                   	push   edi
c001a711:	31 c9                	xor    ecx,ecx
c001a713:	56                   	push   esi
c001a714:	53                   	push   ebx
c001a715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a719:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a71d:	8d 76 00             	lea    esi,[esi+0x0]
c001a720:	0f ba e7 14          	bt     edi,0x14
c001a724:	72 0a                	jb     c001a730 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a726:	01 f6                	add    esi,esi
c001a728:	11 ff                	adc    edi,edi
c001a72a:	41                   	inc    ecx
c001a72b:	eb f3                	jmp    c001a720 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a72d:	8d 76 00             	lea    esi,[esi+0x0]
c001a730:	89 fa                	mov    edx,edi
c001a732:	89 f0                	mov    eax,esi
c001a734:	bb 33 04 00 00       	mov    ebx,0x433
c001a739:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a73f:	29 cb                	sub    ebx,ecx
c001a741:	89 d9                	mov    ecx,ebx
c001a743:	5b                   	pop    ebx
c001a744:	c1 e1 14             	shl    ecx,0x14
c001a747:	5e                   	pop    esi
c001a748:	09 ca                	or     edx,ecx
c001a74a:	5f                   	pop    edi
c001a74b:	c3                   	ret    

c001a74c <Vm::fpuLongToFloat(long long)>:
c001a74c:	56                   	push   esi
c001a74d:	31 c0                	xor    eax,eax
c001a74f:	53                   	push   ebx
c001a750:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a754:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a758:	39 c8                	cmp    eax,ecx
c001a75a:	19 d8                	sbb    eax,ebx
c001a75c:	7d 06                	jge    c001a764 <Vm::fpuLongToFloat(long long)+0x18>
c001a75e:	31 f6                	xor    esi,esi
c001a760:	eb 0e                	jmp    c001a770 <Vm::fpuLongToFloat(long long)+0x24>
c001a762:	66 90                	xchg   ax,ax
c001a764:	f7 d9                	neg    ecx
c001a766:	be 01 00 00 00       	mov    esi,0x1
c001a76b:	83 d3 00             	adc    ebx,0x0
c001a76e:	f7 db                	neg    ebx
c001a770:	31 c0                	xor    eax,eax
c001a772:	66 90                	xchg   ax,ax
c001a774:	0f ba e3 14          	bt     ebx,0x14
c001a778:	72 0a                	jb     c001a784 <Vm::fpuLongToFloat(long long)+0x38>
c001a77a:	01 c9                	add    ecx,ecx
c001a77c:	11 db                	adc    ebx,ebx
c001a77e:	40                   	inc    eax
c001a77f:	eb f3                	jmp    c001a774 <Vm::fpuLongToFloat(long long)+0x28>
c001a781:	8d 76 00             	lea    esi,[esi+0x0]
c001a784:	ba 33 04 00 00       	mov    edx,0x433
c001a789:	29 c2                	sub    edx,eax
c001a78b:	89 c8                	mov    eax,ecx
c001a78d:	c1 e2 14             	shl    edx,0x14
c001a790:	89 d9                	mov    ecx,ebx
c001a792:	89 f3                	mov    ebx,esi
c001a794:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a79a:	09 ca                	or     edx,ecx
c001a79c:	84 db                	test   bl,bl
c001a79e:	74 08                	je     c001a7a8 <Vm::fpuLongToFloat(long long)+0x5c>
c001a7a0:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a7a6:	66 90                	xchg   ax,ax
c001a7a8:	5b                   	pop    ebx
c001a7a9:	5e                   	pop    esi
c001a7aa:	c3                   	ret    

c001a7ab <Vm::fpuGet0()>:
c001a7ab:	31 c0                	xor    eax,eax
c001a7ad:	31 d2                	xor    edx,edx
c001a7af:	c3                   	ret    

c001a7b0 <Vm::fpuGet1()>:
c001a7b0:	b8 01 00 00 00       	mov    eax,0x1
c001a7b5:	31 d2                	xor    edx,edx
c001a7b7:	c3                   	ret    

c001a7b8 <Vm::fpuGetPi()>:
c001a7b8:	b8 03 00 00 00       	mov    eax,0x3
c001a7bd:	31 d2                	xor    edx,edx
c001a7bf:	c3                   	ret    

c001a7c0 <Vm::fpuGetLog2E()>:
c001a7c0:	83 ec 18             	sub    esp,0x18
c001a7c3:	68 3c 6f 02 c0       	push   0xc0026f3c
c001a7c8:	e8 10 aa ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001a7cd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7d2:	31 d2                	xor    edx,edx
c001a7d4:	83 c4 1c             	add    esp,0x1c
c001a7d7:	c3                   	ret    

c001a7d8 <Vm::fpuGetLogE2()>:
c001a7d8:	83 ec 18             	sub    esp,0x18
c001a7db:	68 48 6f 02 c0       	push   0xc0026f48
c001a7e0:	e8 f8 a9 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001a7e5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7ea:	31 d2                	xor    edx,edx
c001a7ec:	83 c4 1c             	add    esp,0x1c
c001a7ef:	c3                   	ret    

c001a7f0 <Vm::fpuGetLog210()>:
c001a7f0:	83 ec 18             	sub    esp,0x18
c001a7f3:	68 54 6f 02 c0       	push   0xc0026f54
c001a7f8:	e8 e0 a9 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001a7fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a802:	31 d2                	xor    edx,edx
c001a804:	83 c4 1c             	add    esp,0x1c
c001a807:	c3                   	ret    

c001a808 <Vm::fpuGetLog102()>:
c001a808:	83 ec 18             	sub    esp,0x18
c001a80b:	68 61 6f 02 c0       	push   0xc0026f61
c001a810:	e8 c8 a9 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001a815:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a81a:	31 d2                	xor    edx,edx
c001a81c:	83 c4 1c             	add    esp,0x1c
c001a81f:	c3                   	ret    

c001a820 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a824:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a828:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a82c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a830:	0f 92 c0             	setb   al
c001a833:	c3                   	ret    

c001a834 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a834:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a83c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a840:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a844:	09 c2                	or     edx,eax
c001a846:	0f 94 c0             	sete   al
c001a849:	c3                   	ret    

c001a84a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a84a:	57                   	push   edi
c001a84b:	56                   	push   esi
c001a84c:	53                   	push   ebx
c001a84d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a851:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a855:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a859:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a85d:	57                   	push   edi
c001a85e:	56                   	push   esi
c001a85f:	53                   	push   ebx
c001a860:	51                   	push   ecx
c001a861:	e8 ce ff ff ff       	call   c001a834 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a866:	83 c4 10             	add    esp,0x10
c001a869:	88 c2                	mov    dl,al
c001a86b:	31 c0                	xor    eax,eax
c001a86d:	84 d2                	test   dl,dl
c001a86f:	75 0f                	jne    c001a880 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a871:	57                   	push   edi
c001a872:	56                   	push   esi
c001a873:	53                   	push   ebx
c001a874:	51                   	push   ecx
c001a875:	e8 a6 ff ff ff       	call   c001a820 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a87a:	83 c4 10             	add    esp,0x10
c001a87d:	8d 76 00             	lea    esi,[esi+0x0]
c001a880:	83 e0 01             	and    eax,0x1
c001a883:	5b                   	pop    ebx
c001a884:	88 c1                	mov    cl,al
c001a886:	83 e2 01             	and    edx,0x1
c001a889:	a0 c1 a1 02 c0       	mov    al,ds:0xc002a1c1
c001a88e:	c1 e2 06             	shl    edx,0x6
c001a891:	83 e0 ba             	and    eax,0xffffffba
c001a894:	5e                   	pop    esi
c001a895:	09 c8                	or     eax,ecx
c001a897:	5f                   	pop    edi
c001a898:	09 d0                	or     eax,edx
c001a89a:	a2 c1 a1 02 c0       	mov    ds:0xc002a1c1,al
c001a89f:	c3                   	ret    

c001a8a0 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a8a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8a8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a8ac:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a8b0:	c3                   	ret    

c001a8b1 <Vm::fpuAbs(unsigned long long)>:
c001a8b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8b9:	c3                   	ret    

c001a8ba <Vm::fpuChs(unsigned long long)>:
c001a8ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8c2:	f7 d8                	neg    eax
c001a8c4:	83 d2 00             	adc    edx,0x0
c001a8c7:	f7 da                	neg    edx
c001a8c9:	c3                   	ret    

c001a8ca <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a8ca:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a8ce:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a8d3:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a8d7:	eb c7                	jmp    c001a8a0 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a8d9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a8d9:	53                   	push   ebx
c001a8da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a8e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8ea:	0f af ca             	imul   ecx,edx
c001a8ed:	0f af d8             	imul   ebx,eax
c001a8f0:	f7 e2                	mul    edx
c001a8f2:	01 d9                	add    ecx,ebx
c001a8f4:	5b                   	pop    ebx
c001a8f5:	01 ca                	add    edx,ecx
c001a8f7:	c3                   	ret    

c001a8f8 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a90b:	e8 c0 86 00 00       	call   c0022fd0 <__udivdi3>
c001a910:	83 c4 1c             	add    esp,0x1c
c001a913:	c3                   	ret    

c001a914 <Vm::fpuSquare(unsigned long long)>:
c001a914:	50                   	push   eax
c001a915:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a919:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a91d:	52                   	push   edx
c001a91e:	50                   	push   eax
c001a91f:	52                   	push   edx
c001a920:	50                   	push   eax
c001a921:	e8 b3 ff ff ff       	call   c001a8d9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a926:	83 c4 14             	add    esp,0x14
c001a929:	c3                   	ret    

c001a92a <Vm::fpuGetReg(int)>:
c001a92a:	83 ec 0c             	sub    esp,0xc
c001a92d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a932:	76 10                	jbe    c001a944 <Vm::fpuGetReg(int)+0x1a>
c001a934:	83 ec 0c             	sub    esp,0xc
c001a937:	68 6e 6f 02 c0       	push   0xc0026f6e
c001a93c:	e8 9c a8 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	a0 c1 a1 02 c0       	mov    al,ds:0xc002a1c1
c001a949:	b9 08 00 00 00       	mov    ecx,0x8
c001a94e:	c0 e8 03             	shr    al,0x3
c001a951:	83 e0 07             	and    eax,0x7
c001a954:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a958:	99                   	cdq    
c001a959:	f7 f9                	idiv   ecx
c001a95b:	8b 04 d5 c4 a1 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd5e3c]
c001a962:	8b 14 d5 c8 a1 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5e38]
c001a969:	83 c4 0c             	add    esp,0xc
c001a96c:	c3                   	ret    

c001a96d <Vm::fpuSetReg(int, unsigned long long)>:
c001a96d:	57                   	push   edi
c001a96e:	56                   	push   esi
c001a96f:	52                   	push   edx
c001a970:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a974:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a978:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a97d:	76 11                	jbe    c001a990 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a97f:	83 ec 0c             	sub    esp,0xc
c001a982:	68 81 6f 02 c0       	push   0xc0026f81
c001a987:	e8 51 a8 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001a98c:	83 c4 10             	add    esp,0x10
c001a98f:	90                   	nop
c001a990:	a0 c1 a1 02 c0       	mov    al,ds:0xc002a1c1
c001a995:	b9 08 00 00 00       	mov    ecx,0x8
c001a99a:	c0 e8 03             	shr    al,0x3
c001a99d:	83 e0 07             	and    eax,0x7
c001a9a0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a9a4:	99                   	cdq    
c001a9a5:	f7 f9                	idiv   ecx
c001a9a7:	89 34 d5 c4 a1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5e3c],esi
c001a9ae:	89 3c d5 c8 a1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5e38],edi
c001a9b5:	58                   	pop    eax
c001a9b6:	5e                   	pop    esi
c001a9b7:	5f                   	pop    edi
c001a9b8:	c3                   	ret    

c001a9b9 <Vm::fpuPush(unsigned long long)>:
c001a9b9:	a0 c1 a1 02 c0       	mov    al,ds:0xc002a1c1
c001a9be:	c0 e8 03             	shr    al,0x3
c001a9c1:	83 e0 07             	and    eax,0x7
c001a9c4:	83 c0 07             	add    eax,0x7
c001a9c7:	88 c2                	mov    dl,al
c001a9c9:	83 e0 07             	and    eax,0x7
c001a9cc:	83 e2 07             	and    edx,0x7
c001a9cf:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a9d6:	8a 15 c1 a1 02 c0    	mov    dl,BYTE PTR ds:0xc002a1c1
c001a9dc:	83 e2 c7             	and    edx,0xffffffc7
c001a9df:	09 ca                	or     edx,ecx
c001a9e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a9e5:	88 15 c1 a1 02 c0    	mov    BYTE PTR ds:0xc002a1c1,dl
c001a9eb:	89 0c c5 c8 a1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5e38],ecx
c001a9f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9f6:	89 14 c5 c4 a1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5e3c],edx
c001a9fd:	a1 04 a2 02 c0       	mov    eax,ds:0xc002a204
c001aa02:	83 f8 08             	cmp    eax,0x8
c001aa05:	75 09                	jne    c001aa10 <Vm::fpuPush(unsigned long long)+0x57>
c001aa07:	80 0d c0 a1 02 c0 40 	or     BYTE PTR ds:0xc002a1c0,0x40
c001aa0e:	c3                   	ret    
c001aa0f:	90                   	nop
c001aa10:	40                   	inc    eax
c001aa11:	a3 04 a2 02 c0       	mov    ds:0xc002a204,eax
c001aa16:	c3                   	ret    

c001aa17 <Vm::fpuPop()>:
c001aa17:	8a 0d c1 a1 02 c0    	mov    cl,BYTE PTR ds:0xc002a1c1
c001aa1d:	53                   	push   ebx
c001aa1e:	c0 e9 03             	shr    cl,0x3
c001aa21:	8a 1d c1 a1 02 c0    	mov    bl,BYTE PTR ds:0xc002a1c1
c001aa27:	83 e1 07             	and    ecx,0x7
c001aa2a:	83 e3 c7             	and    ebx,0xffffffc7
c001aa2d:	8b 04 cd c4 a1 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd5e3c]
c001aa34:	8b 14 cd c8 a1 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5e38]
c001aa3b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001aa42:	83 e1 38             	and    ecx,0x38
c001aa45:	09 d9                	or     ecx,ebx
c001aa47:	88 0d c1 a1 02 c0    	mov    BYTE PTR ds:0xc002a1c1,cl
c001aa4d:	8b 0d 04 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a204
c001aa53:	85 c9                	test   ecx,ecx
c001aa55:	74 09                	je     c001aa60 <Vm::fpuPop()+0x49>
c001aa57:	49                   	dec    ecx
c001aa58:	89 0d 04 a2 02 c0    	mov    DWORD PTR ds:0xc002a204,ecx
c001aa5e:	eb 08                	jmp    c001aa68 <Vm::fpuPop()+0x51>
c001aa60:	80 0d c0 a1 02 c0 40 	or     BYTE PTR ds:0xc002a1c0,0x40
c001aa67:	90                   	nop
c001aa68:	5b                   	pop    ebx
c001aa69:	c3                   	ret    

c001aa6a <Vm::x87Handler(regs*)>:
c001aa6a:	55                   	push   ebp
c001aa6b:	57                   	push   edi
c001aa6c:	56                   	push   esi
c001aa6d:	53                   	push   ebx
c001aa6e:	83 ec 1c             	sub    esp,0x1c
c001aa71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa75:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001aa7a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001aa7d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001aa85:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aa89:	50                   	push   eax
c001aa8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001aa8e:	50                   	push   eax
c001aa8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa93:	50                   	push   eax
c001aa94:	53                   	push   ebx
c001aa95:	e8 5c 9e ff ff       	call   c00148f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001aa9a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001aa9d:	83 c4 10             	add    esp,0x10
c001aaa0:	89 c6                	mov    esi,eax
c001aaa2:	80 fa d9             	cmp    dl,0xd9
c001aaa5:	0f 85 79 01 00 00    	jne    c001ac24 <Vm::x87Handler(regs*)+0x1ba>
c001aaab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aaaf:	8d 50 20             	lea    edx,[eax+0x20]
c001aab2:	80 fa 0e             	cmp    dl,0xe
c001aab5:	0f 87 a5 00 00 00    	ja     c001ab60 <Vm::x87Handler(regs*)+0xf6>
c001aabb:	0f b6 d2             	movzx  edx,dl
c001aabe:	ff 24 95 94 6f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd906c]
c001aac5:	8d 76 00             	lea    esi,[esi+0x0]
c001aac8:	e8 de fc ff ff       	call   c001a7ab <Vm::fpuGet0()>
c001aacd:	eb 09                	jmp    c001aad8 <Vm::x87Handler(regs*)+0x6e>
c001aacf:	90                   	nop
c001aad0:	e8 db fc ff ff       	call   c001a7b0 <Vm::fpuGet1()>
c001aad5:	8d 76 00             	lea    esi,[esi+0x0]
c001aad8:	57                   	push   edi
c001aad9:	57                   	push   edi
c001aada:	66 90                	xchg   ax,ax
c001aadc:	52                   	push   edx
c001aadd:	50                   	push   eax
c001aade:	e8 d6 fe ff ff       	call   c001a9b9 <Vm::fpuPush(unsigned long long)>
c001aae3:	90                   	nop
c001aae4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	90                   	nop
c001aaec:	b0 01                	mov    al,0x1
c001aaee:	e9 89 0a 00 00       	jmp    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001aaf3:	90                   	nop
c001aaf4:	83 ec 0c             	sub    esp,0xc
c001aaf7:	6a 00                	push   0x0
c001aaf9:	e8 2c fe ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001aafe:	59                   	pop    ecx
c001aaff:	5e                   	pop    esi
c001ab00:	52                   	push   edx
c001ab01:	50                   	push   eax
c001ab02:	e8 b3 fd ff ff       	call   c001a8ba <Vm::fpuChs(unsigned long long)>
c001ab07:	eb 17                	jmp    c001ab20 <Vm::x87Handler(regs*)+0xb6>
c001ab09:	8d 76 00             	lea    esi,[esi+0x0]
c001ab0c:	83 ec 0c             	sub    esp,0xc
c001ab0f:	6a 00                	push   0x0
c001ab11:	e8 14 fe ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ab16:	5f                   	pop    edi
c001ab17:	5d                   	pop    ebp
c001ab18:	52                   	push   edx
c001ab19:	50                   	push   eax
c001ab1a:	e8 92 fd ff ff       	call   c001a8b1 <Vm::fpuAbs(unsigned long long)>
c001ab1f:	90                   	nop
c001ab20:	83 c4 0c             	add    esp,0xc
c001ab23:	90                   	nop
c001ab24:	52                   	push   edx
c001ab25:	50                   	push   eax
c001ab26:	66 90                	xchg   ax,ax
c001ab28:	6a 00                	push   0x0
c001ab2a:	66 90                	xchg   ax,ax
c001ab2c:	e8 3c fe ff ff       	call   c001a96d <Vm::fpuSetReg(int, unsigned long long)>
c001ab31:	eb b1                	jmp    c001aae4 <Vm::x87Handler(regs*)+0x7a>
c001ab33:	90                   	nop
c001ab34:	e8 b7 fc ff ff       	call   c001a7f0 <Vm::fpuGetLog210()>
c001ab39:	eb 9d                	jmp    c001aad8 <Vm::x87Handler(regs*)+0x6e>
c001ab3b:	90                   	nop
c001ab3c:	e8 7f fc ff ff       	call   c001a7c0 <Vm::fpuGetLog2E()>
c001ab41:	eb 95                	jmp    c001aad8 <Vm::x87Handler(regs*)+0x6e>
c001ab43:	90                   	nop
c001ab44:	e8 6f fc ff ff       	call   c001a7b8 <Vm::fpuGetPi()>
c001ab49:	eb 8d                	jmp    c001aad8 <Vm::x87Handler(regs*)+0x6e>
c001ab4b:	90                   	nop
c001ab4c:	e8 b7 fc ff ff       	call   c001a808 <Vm::fpuGetLog102()>
c001ab51:	eb 85                	jmp    c001aad8 <Vm::x87Handler(regs*)+0x6e>
c001ab53:	90                   	nop
c001ab54:	e8 7f fc ff ff       	call   c001a7d8 <Vm::fpuGetLogE2()>
c001ab59:	e9 7a ff ff ff       	jmp    c001aad8 <Vm::x87Handler(regs*)+0x6e>
c001ab5e:	66 90                	xchg   ax,ax
c001ab60:	8d 50 40             	lea    edx,[eax+0x40]
c001ab63:	80 fa 07             	cmp    dl,0x7
c001ab66:	77 18                	ja     c001ab80 <Vm::x87Handler(regs*)+0x116>
c001ab68:	83 ec 0c             	sub    esp,0xc
c001ab6b:	2d c0 00 00 00       	sub    eax,0xc0
c001ab70:	50                   	push   eax
c001ab71:	e8 b4 fd ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ab76:	59                   	pop    ecx
c001ab77:	5e                   	pop    esi
c001ab78:	e9 5f ff ff ff       	jmp    c001aadc <Vm::x87Handler(regs*)+0x72>
c001ab7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab80:	8d 50 38             	lea    edx,[eax+0x38]
c001ab83:	80 fa 07             	cmp    dl,0x7
c001ab86:	77 3c                	ja     c001abc4 <Vm::x87Handler(regs*)+0x15a>
c001ab88:	83 ec 0c             	sub    esp,0xc
c001ab8b:	2d c8 00 00 00       	sub    eax,0xc8
c001ab90:	50                   	push   eax
c001ab91:	e8 94 fd ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ab96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab9d:	89 c6                	mov    esi,eax
c001ab9f:	89 d7                	mov    edi,edx
c001aba1:	e8 84 fd ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001aba6:	83 c4 0c             	add    esp,0xc
c001aba9:	52                   	push   edx
c001abaa:	50                   	push   eax
c001abab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abaf:	2d c8 00 00 00       	sub    eax,0xc8
c001abb4:	50                   	push   eax
c001abb5:	e8 b3 fd ff ff       	call   c001a96d <Vm::fpuSetReg(int, unsigned long long)>
c001abba:	83 c4 0c             	add    esp,0xc
c001abbd:	57                   	push   edi
c001abbe:	56                   	push   esi
c001abbf:	e9 64 ff ff ff       	jmp    c001ab28 <Vm::x87Handler(regs*)+0xbe>
c001abc4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001abc8:	84 d2                	test   dl,dl
c001abca:	75 10                	jne    c001abdc <Vm::x87Handler(regs*)+0x172>
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	ff 36                	push   DWORD PTR [esi]
c001abd1:	e8 8d fa ff ff       	call   c001a663 <Vm::fpu32ToInternal(unsigned int)>
c001abd6:	e9 c9 00 00 00       	jmp    c001aca4 <Vm::x87Handler(regs*)+0x23a>
c001abdb:	90                   	nop
c001abdc:	80 fa 03             	cmp    dl,0x3
c001abdf:	75 13                	jne    c001abf4 <Vm::x87Handler(regs*)+0x18a>
c001abe1:	e8 31 fe ff ff       	call   c001aa17 <Vm::fpuPop()>
c001abe6:	55                   	push   ebp
c001abe7:	55                   	push   ebp
c001abe8:	52                   	push   edx
c001abe9:	50                   	push   eax
c001abea:	e8 0d fa ff ff       	call   c001a5fc <Vm::fpuInternalTo32(unsigned long long)>
c001abef:	e9 90 00 00 00       	jmp    c001ac84 <Vm::x87Handler(regs*)+0x21a>
c001abf4:	80 fa 05             	cmp    dl,0x5
c001abf7:	75 0f                	jne    c001ac08 <Vm::x87Handler(regs*)+0x19e>
c001abf9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001abfc:	66 a3 c2 a1 02 c0    	mov    ds:0xc002a1c2,ax
c001ac02:	e9 ed 00 00 00       	jmp    c001acf4 <Vm::x87Handler(regs*)+0x28a>
c001ac07:	90                   	nop
c001ac08:	31 c0                	xor    eax,eax
c001ac0a:	80 fa 07             	cmp    dl,0x7
c001ac0d:	0f 85 69 09 00 00    	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001ac13:	66 a1 c2 a1 02 c0    	mov    ax,ds:0xc002a1c2
c001ac19:	66 89 06             	mov    WORD PTR [esi],ax
c001ac1c:	e9 d3 00 00 00       	jmp    c001acf4 <Vm::x87Handler(regs*)+0x28a>
c001ac21:	8d 76 00             	lea    esi,[esi+0x0]
c001ac24:	80 fa d8             	cmp    dl,0xd8
c001ac27:	0f 84 d3 00 00 00    	je     c001ad00 <Vm::x87Handler(regs*)+0x296>
c001ac2d:	80 fa dc             	cmp    dl,0xdc
c001ac30:	0f 84 2a 02 00 00    	je     c001ae60 <Vm::x87Handler(regs*)+0x3f6>
c001ac36:	80 fa de             	cmp    dl,0xde
c001ac39:	0f 84 f1 02 00 00    	je     c001af30 <Vm::x87Handler(regs*)+0x4c6>
c001ac3f:	80 fa dd             	cmp    dl,0xdd
c001ac42:	0f 84 94 04 00 00    	je     c001b0dc <Vm::x87Handler(regs*)+0x672>
c001ac48:	80 fa da             	cmp    dl,0xda
c001ac4b:	0f 84 5f 05 00 00    	je     c001b1b0 <Vm::x87Handler(regs*)+0x746>
c001ac51:	80 fa df             	cmp    dl,0xdf
c001ac54:	0f 84 aa 05 00 00    	je     c001b204 <Vm::x87Handler(regs*)+0x79a>
c001ac5a:	31 c0                	xor    eax,eax
c001ac5c:	80 fa db             	cmp    dl,0xdb
c001ac5f:	0f 85 17 09 00 00    	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001ac65:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac69:	80 fa 03             	cmp    dl,0x3
c001ac6c:	0f 85 c2 06 00 00    	jne    c001b334 <Vm::x87Handler(regs*)+0x8ca>
c001ac72:	e8 a0 fd ff ff       	call   c001aa17 <Vm::fpuPop()>
c001ac77:	55                   	push   ebp
c001ac78:	55                   	push   ebp
c001ac79:	8d 76 00             	lea    esi,[esi+0x0]
c001ac7c:	52                   	push   edx
c001ac7d:	50                   	push   eax
c001ac7e:	e8 2e fa ff ff       	call   c001a6b1 <Vm::fpuFloatToLong(unsigned long long)>
c001ac83:	90                   	nop
c001ac84:	83 c4 10             	add    esp,0x10
c001ac87:	89 06                	mov    DWORD PTR [esi],eax
c001ac89:	eb 69                	jmp    c001acf4 <Vm::x87Handler(regs*)+0x28a>
c001ac8b:	90                   	nop
c001ac8c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac90:	84 d2                	test   dl,dl
c001ac92:	0f 85 2c 06 00 00    	jne    c001b2c4 <Vm::x87Handler(regs*)+0x85a>
c001ac98:	57                   	push   edi
c001ac99:	57                   	push   edi
c001ac9a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac9d:	ff 36                	push   DWORD PTR [esi]
c001ac9f:	e8 04 fa ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001aca4:	5e                   	pop    esi
c001aca5:	5f                   	pop    edi
c001aca6:	52                   	push   edx
c001aca7:	50                   	push   eax
c001aca8:	e8 0c fd ff ff       	call   c001a9b9 <Vm::fpuPush(unsigned long long)>
c001acad:	8d 76 00             	lea    esi,[esi+0x0]
c001acb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acb4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001acb7:	e9 2c fe ff ff       	jmp    c001aae8 <Vm::x87Handler(regs*)+0x7e>
c001acbc:	80 fa 03             	cmp    dl,0x3
c001acbf:	0f 85 2b 07 00 00    	jne    c001b3f0 <Vm::x87Handler(regs*)+0x986>
c001acc5:	57                   	push   edi
c001acc6:	57                   	push   edi
c001acc7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001acca:	ff 36                	push   DWORD PTR [esi]
c001accc:	e8 d7 f9 ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001acd1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acd8:	89 c6                	mov    esi,eax
c001acda:	89 d7                	mov    edi,edx
c001acdc:	e8 49 fc ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ace1:	57                   	push   edi
c001ace2:	56                   	push   esi
c001ace3:	52                   	push   edx
c001ace4:	50                   	push   eax
c001ace5:	e8 60 fb ff ff       	call   c001a84a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001acea:	83 c4 20             	add    esp,0x20
c001aced:	e8 25 fd ff ff       	call   c001aa17 <Vm::fpuPop()>
c001acf2:	66 90                	xchg   ax,ax
c001acf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acf8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001acfb:	e9 ec fd ff ff       	jmp    c001aaec <Vm::x87Handler(regs*)+0x82>
c001ad00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad04:	8d 50 40             	lea    edx,[eax+0x40]
c001ad07:	80 fa 07             	cmp    dl,0x7
c001ad0a:	77 2c                	ja     c001ad38 <Vm::x87Handler(regs*)+0x2ce>
c001ad0c:	83 ec 0c             	sub    esp,0xc
c001ad0f:	2d c0 00 00 00       	sub    eax,0xc0
c001ad14:	50                   	push   eax
c001ad15:	e8 10 fc ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ad1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad21:	89 c6                	mov    esi,eax
c001ad23:	89 d7                	mov    edi,edx
c001ad25:	e8 00 fc ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ad2a:	57                   	push   edi
c001ad2b:	56                   	push   esi
c001ad2c:	52                   	push   edx
c001ad2d:	50                   	push   eax
c001ad2e:	e8 6d fb ff ff       	call   c001a8a0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ad33:	eb 33                	jmp    c001ad68 <Vm::x87Handler(regs*)+0x2fe>
c001ad35:	8d 76 00             	lea    esi,[esi+0x0]
c001ad38:	8d 50 38             	lea    edx,[eax+0x38]
c001ad3b:	80 fa 07             	cmp    dl,0x7
c001ad3e:	77 30                	ja     c001ad70 <Vm::x87Handler(regs*)+0x306>
c001ad40:	83 ec 0c             	sub    esp,0xc
c001ad43:	2d c8 00 00 00       	sub    eax,0xc8
c001ad48:	50                   	push   eax
c001ad49:	e8 dc fb ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ad4e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad55:	89 c6                	mov    esi,eax
c001ad57:	89 d7                	mov    edi,edx
c001ad59:	e8 cc fb ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ad5e:	57                   	push   edi
c001ad5f:	56                   	push   esi
c001ad60:	52                   	push   edx
c001ad61:	50                   	push   eax
c001ad62:	e8 72 fb ff ff       	call   c001a8d9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ad67:	90                   	nop
c001ad68:	83 c4 1c             	add    esp,0x1c
c001ad6b:	e9 b4 fd ff ff       	jmp    c001ab24 <Vm::x87Handler(regs*)+0xba>
c001ad70:	8d 50 30             	lea    edx,[eax+0x30]
c001ad73:	80 fa 07             	cmp    dl,0x7
c001ad76:	77 10                	ja     c001ad88 <Vm::x87Handler(regs*)+0x31e>
c001ad78:	83 ec 0c             	sub    esp,0xc
c001ad7b:	2d d0 00 00 00       	sub    eax,0xd0
c001ad80:	e9 c3 03 00 00       	jmp    c001b148 <Vm::x87Handler(regs*)+0x6de>
c001ad85:	8d 76 00             	lea    esi,[esi+0x0]
c001ad88:	8d 50 28             	lea    edx,[eax+0x28]
c001ad8b:	80 fa 07             	cmp    dl,0x7
c001ad8e:	77 10                	ja     c001ada0 <Vm::x87Handler(regs*)+0x336>
c001ad90:	83 ec 0c             	sub    esp,0xc
c001ad93:	2d d8 00 00 00       	sub    eax,0xd8
c001ad98:	e9 e7 03 00 00       	jmp    c001b184 <Vm::x87Handler(regs*)+0x71a>
c001ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c001ada0:	8d 50 20             	lea    edx,[eax+0x20]
c001ada3:	80 fa 07             	cmp    dl,0x7
c001ada6:	77 1c                	ja     c001adc4 <Vm::x87Handler(regs*)+0x35a>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	2d e0 00 00 00       	sub    eax,0xe0
c001adb0:	50                   	push   eax
c001adb1:	e8 74 fb ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001adb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001adbd:	89 c6                	mov    esi,eax
c001adbf:	89 d7                	mov    edi,edx
c001adc1:	eb 25                	jmp    c001ade8 <Vm::x87Handler(regs*)+0x37e>
c001adc3:	90                   	nop
c001adc4:	8d 50 18             	lea    edx,[eax+0x18]
c001adc7:	80 fa 07             	cmp    dl,0x7
c001adca:	77 30                	ja     c001adfc <Vm::x87Handler(regs*)+0x392>
c001adcc:	83 ec 0c             	sub    esp,0xc
c001adcf:	6a 00                	push   0x0
c001add1:	e8 54 fb ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001add6:	89 c6                	mov    esi,eax
c001add8:	89 d7                	mov    edi,edx
c001adda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adde:	2d e8 00 00 00       	sub    eax,0xe8
c001ade3:	89 04 24             	mov    DWORD PTR [esp],eax
c001ade6:	66 90                	xchg   ax,ax
c001ade8:	e8 3d fb ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001aded:	57                   	push   edi
c001adee:	56                   	push   esi
c001adef:	52                   	push   edx
c001adf0:	50                   	push   eax
c001adf1:	e8 d4 fa ff ff       	call   c001a8ca <Vm::fpuSub(unsigned long long, unsigned long long)>
c001adf6:	e9 6d ff ff ff       	jmp    c001ad68 <Vm::x87Handler(regs*)+0x2fe>
c001adfb:	90                   	nop
c001adfc:	8d 50 10             	lea    edx,[eax+0x10]
c001adff:	80 fa 07             	cmp    dl,0x7
c001ae02:	77 1c                	ja     c001ae20 <Vm::x87Handler(regs*)+0x3b6>
c001ae04:	83 ec 0c             	sub    esp,0xc
c001ae07:	2d f0 00 00 00       	sub    eax,0xf0
c001ae0c:	50                   	push   eax
c001ae0d:	e8 18 fb ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ae12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae19:	89 c6                	mov    esi,eax
c001ae1b:	89 d7                	mov    edi,edx
c001ae1d:	eb 25                	jmp    c001ae44 <Vm::x87Handler(regs*)+0x3da>
c001ae1f:	90                   	nop
c001ae20:	3c f7                	cmp    al,0xf7
c001ae22:	0f 86 00 04 00 00    	jbe    c001b228 <Vm::x87Handler(regs*)+0x7be>
c001ae28:	83 ec 0c             	sub    esp,0xc
c001ae2b:	6a 00                	push   0x0
c001ae2d:	e8 f8 fa ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ae32:	89 c6                	mov    esi,eax
c001ae34:	89 d7                	mov    edi,edx
c001ae36:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae3a:	2d f8 00 00 00       	sub    eax,0xf8
c001ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae42:	66 90                	xchg   ax,ax
c001ae44:	e8 e1 fa ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ae49:	57                   	push   edi
c001ae4a:	56                   	push   esi
c001ae4b:	52                   	push   edx
c001ae4c:	50                   	push   eax
c001ae4d:	e8 a6 fa ff ff       	call   c001a8f8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae52:	83 c4 1c             	add    esp,0x1c
c001ae55:	52                   	push   edx
c001ae56:	50                   	push   eax
c001ae57:	6a 00                	push   0x0
c001ae59:	e9 6a 02 00 00       	jmp    c001b0c8 <Vm::x87Handler(regs*)+0x65e>
c001ae5e:	66 90                	xchg   ax,ax
c001ae60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae64:	8d 50 40             	lea    edx,[eax+0x40]
c001ae67:	80 fa 07             	cmp    dl,0x7
c001ae6a:	77 38                	ja     c001aea4 <Vm::x87Handler(regs*)+0x43a>
c001ae6c:	83 ec 0c             	sub    esp,0xc
c001ae6f:	2d c0 00 00 00       	sub    eax,0xc0
c001ae74:	50                   	push   eax
c001ae75:	e8 b0 fa ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ae7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae81:	89 c6                	mov    esi,eax
c001ae83:	89 d7                	mov    edi,edx
c001ae85:	e8 a0 fa ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001ae8a:	57                   	push   edi
c001ae8b:	56                   	push   esi
c001ae8c:	52                   	push   edx
c001ae8d:	50                   	push   eax
c001ae8e:	e8 0d fa ff ff       	call   c001a8a0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ae93:	83 c4 1c             	add    esp,0x1c
c001ae96:	52                   	push   edx
c001ae97:	50                   	push   eax
c001ae98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae9c:	2d c0 00 00 00       	sub    eax,0xc0
c001aea1:	eb 41                	jmp    c001aee4 <Vm::x87Handler(regs*)+0x47a>
c001aea3:	90                   	nop
c001aea4:	8d 50 38             	lea    edx,[eax+0x38]
c001aea7:	80 fa 07             	cmp    dl,0x7
c001aeaa:	77 40                	ja     c001aeec <Vm::x87Handler(regs*)+0x482>
c001aeac:	83 ec 0c             	sub    esp,0xc
c001aeaf:	2d c8 00 00 00       	sub    eax,0xc8
c001aeb4:	50                   	push   eax
c001aeb5:	e8 70 fa ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001aeba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aec1:	89 c6                	mov    esi,eax
c001aec3:	89 d7                	mov    edi,edx
c001aec5:	e8 60 fa ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001aeca:	57                   	push   edi
c001aecb:	56                   	push   esi
c001aecc:	52                   	push   edx
c001aecd:	50                   	push   eax
c001aece:	e8 06 fa ff ff       	call   c001a8d9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001aed3:	83 c4 1c             	add    esp,0x1c
c001aed6:	52                   	push   edx
c001aed7:	50                   	push   eax
c001aed8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aedc:	2d c8 00 00 00       	sub    eax,0xc8
c001aee1:	8d 76 00             	lea    esi,[esi+0x0]
c001aee4:	50                   	push   eax
c001aee5:	e9 42 fc ff ff       	jmp    c001ab2c <Vm::x87Handler(regs*)+0xc2>
c001aeea:	66 90                	xchg   ax,ax
c001aeec:	83 c0 18             	add    eax,0x18
c001aeef:	3c 07                	cmp    al,0x7
c001aef1:	0f 87 6d 04 00 00    	ja     c001b364 <Vm::x87Handler(regs*)+0x8fa>
c001aef7:	83 ec 0c             	sub    esp,0xc
c001aefa:	6a 00                	push   0x0
c001aefc:	e8 29 fa ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001af01:	89 c6                	mov    esi,eax
c001af03:	89 d7                	mov    edi,edx
c001af05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af09:	2d e8 00 00 00       	sub    eax,0xe8
c001af0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001af11:	e8 14 fa ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001af16:	57                   	push   edi
c001af17:	56                   	push   esi
c001af18:	52                   	push   edx
c001af19:	50                   	push   eax
c001af1a:	e8 ab f9 ff ff       	call   c001a8ca <Vm::fpuSub(unsigned long long, unsigned long long)>
c001af1f:	83 c4 1c             	add    esp,0x1c
c001af22:	52                   	push   edx
c001af23:	50                   	push   eax
c001af24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af28:	2d e8 00 00 00       	sub    eax,0xe8
c001af2d:	eb b5                	jmp    c001aee4 <Vm::x87Handler(regs*)+0x47a>
c001af2f:	90                   	nop
c001af30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af34:	8d 50 40             	lea    edx,[eax+0x40]
c001af37:	80 fa 07             	cmp    dl,0x7
c001af3a:	77 3c                	ja     c001af78 <Vm::x87Handler(regs*)+0x50e>
c001af3c:	83 ec 0c             	sub    esp,0xc
c001af3f:	2d c0 00 00 00       	sub    eax,0xc0
c001af44:	50                   	push   eax
c001af45:	e8 e0 f9 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001af4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af51:	89 c6                	mov    esi,eax
c001af53:	89 d7                	mov    edi,edx
c001af55:	e8 d0 f9 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001af5a:	57                   	push   edi
c001af5b:	56                   	push   esi
c001af5c:	52                   	push   edx
c001af5d:	50                   	push   eax
c001af5e:	e8 3d f9 ff ff       	call   c001a8a0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001af63:	83 c4 1c             	add    esp,0x1c
c001af66:	52                   	push   edx
c001af67:	50                   	push   eax
c001af68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af6c:	2d c0 00 00 00       	sub    eax,0xc0
c001af71:	e9 b2 01 00 00       	jmp    c001b128 <Vm::x87Handler(regs*)+0x6be>
c001af76:	66 90                	xchg   ax,ax
c001af78:	8d 50 20             	lea    edx,[eax+0x20]
c001af7b:	80 fa 07             	cmp    dl,0x7
c001af7e:	77 3c                	ja     c001afbc <Vm::x87Handler(regs*)+0x552>
c001af80:	83 ec 0c             	sub    esp,0xc
c001af83:	2d e0 00 00 00       	sub    eax,0xe0
c001af88:	50                   	push   eax
c001af89:	e8 9c f9 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001af8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af95:	89 c6                	mov    esi,eax
c001af97:	89 d7                	mov    edi,edx
c001af99:	e8 8c f9 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001af9e:	57                   	push   edi
c001af9f:	56                   	push   esi
c001afa0:	52                   	push   edx
c001afa1:	50                   	push   eax
c001afa2:	e8 23 f9 ff ff       	call   c001a8ca <Vm::fpuSub(unsigned long long, unsigned long long)>
c001afa7:	83 c4 1c             	add    esp,0x1c
c001afaa:	52                   	push   edx
c001afab:	50                   	push   eax
c001afac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afb0:	2d e0 00 00 00       	sub    eax,0xe0
c001afb5:	e9 6e 01 00 00       	jmp    c001b128 <Vm::x87Handler(regs*)+0x6be>
c001afba:	66 90                	xchg   ax,ax
c001afbc:	8d 50 18             	lea    edx,[eax+0x18]
c001afbf:	80 fa 07             	cmp    dl,0x7
c001afc2:	77 3c                	ja     c001b000 <Vm::x87Handler(regs*)+0x596>
c001afc4:	83 ec 0c             	sub    esp,0xc
c001afc7:	6a 00                	push   0x0
c001afc9:	e8 5c f9 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001afce:	89 c6                	mov    esi,eax
c001afd0:	89 d7                	mov    edi,edx
c001afd2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afd6:	2d e8 00 00 00       	sub    eax,0xe8
c001afdb:	89 04 24             	mov    DWORD PTR [esp],eax
c001afde:	e8 47 f9 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001afe3:	57                   	push   edi
c001afe4:	56                   	push   esi
c001afe5:	52                   	push   edx
c001afe6:	50                   	push   eax
c001afe7:	e8 de f8 ff ff       	call   c001a8ca <Vm::fpuSub(unsigned long long, unsigned long long)>
c001afec:	83 c4 1c             	add    esp,0x1c
c001afef:	52                   	push   edx
c001aff0:	50                   	push   eax
c001aff1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aff5:	2d e8 00 00 00       	sub    eax,0xe8
c001affa:	e9 29 01 00 00       	jmp    c001b128 <Vm::x87Handler(regs*)+0x6be>
c001afff:	90                   	nop
c001b000:	8d 50 38             	lea    edx,[eax+0x38]
c001b003:	80 fa 07             	cmp    dl,0x7
c001b006:	77 3c                	ja     c001b044 <Vm::x87Handler(regs*)+0x5da>
c001b008:	83 ec 0c             	sub    esp,0xc
c001b00b:	2d c8 00 00 00       	sub    eax,0xc8
c001b010:	50                   	push   eax
c001b011:	e8 14 f9 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b016:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b01d:	89 c6                	mov    esi,eax
c001b01f:	89 d7                	mov    edi,edx
c001b021:	e8 04 f9 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b026:	57                   	push   edi
c001b027:	56                   	push   esi
c001b028:	52                   	push   edx
c001b029:	50                   	push   eax
c001b02a:	e8 aa f8 ff ff       	call   c001a8d9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b02f:	83 c4 1c             	add    esp,0x1c
c001b032:	52                   	push   edx
c001b033:	50                   	push   eax
c001b034:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b038:	2d c8 00 00 00       	sub    eax,0xc8
c001b03d:	e9 82 00 00 00       	jmp    c001b0c4 <Vm::x87Handler(regs*)+0x65a>
c001b042:	66 90                	xchg   ax,ax
c001b044:	3c f7                	cmp    al,0xf7
c001b046:	76 38                	jbe    c001b080 <Vm::x87Handler(regs*)+0x616>
c001b048:	83 ec 0c             	sub    esp,0xc
c001b04b:	6a 00                	push   0x0
c001b04d:	e8 d8 f8 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b052:	89 c6                	mov    esi,eax
c001b054:	89 d7                	mov    edi,edx
c001b056:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b05a:	2d f8 00 00 00       	sub    eax,0xf8
c001b05f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b062:	e8 c3 f8 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b067:	57                   	push   edi
c001b068:	56                   	push   esi
c001b069:	52                   	push   edx
c001b06a:	50                   	push   eax
c001b06b:	e8 88 f8 ff ff       	call   c001a8f8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b070:	83 c4 1c             	add    esp,0x1c
c001b073:	52                   	push   edx
c001b074:	50                   	push   eax
c001b075:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b079:	2d f8 00 00 00       	sub    eax,0xf8
c001b07e:	eb 44                	jmp    c001b0c4 <Vm::x87Handler(regs*)+0x65a>
c001b080:	8d 50 10             	lea    edx,[eax+0x10]
c001b083:	80 fa 07             	cmp    dl,0x7
c001b086:	0f 87 6c 01 00 00    	ja     c001b1f8 <Vm::x87Handler(regs*)+0x78e>
c001b08c:	83 ec 0c             	sub    esp,0xc
c001b08f:	2d f0 00 00 00       	sub    eax,0xf0
c001b094:	50                   	push   eax
c001b095:	e8 90 f8 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b09a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b0a1:	89 c6                	mov    esi,eax
c001b0a3:	89 d7                	mov    edi,edx
c001b0a5:	e8 80 f8 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b0aa:	57                   	push   edi
c001b0ab:	56                   	push   esi
c001b0ac:	52                   	push   edx
c001b0ad:	50                   	push   eax
c001b0ae:	e8 45 f8 ff ff       	call   c001a8f8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b0b3:	83 c4 1c             	add    esp,0x1c
c001b0b6:	52                   	push   edx
c001b0b7:	50                   	push   eax
c001b0b8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0bc:	2d f0 00 00 00       	sub    eax,0xf0
c001b0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0c4:	50                   	push   eax
c001b0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0c8:	e8 a0 f8 ff ff       	call   c001a96d <Vm::fpuSetReg(int, unsigned long long)>
c001b0cd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b0d1:	e8 41 f9 ff ff       	call   c001aa17 <Vm::fpuPop()>
c001b0d6:	e9 0d fa ff ff       	jmp    c001aae8 <Vm::x87Handler(regs*)+0x7e>
c001b0db:	90                   	nop
c001b0dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0e0:	8d 50 30             	lea    edx,[eax+0x30]
c001b0e3:	80 fa 07             	cmp    dl,0x7
c001b0e6:	77 20                	ja     c001b108 <Vm::x87Handler(regs*)+0x69e>
c001b0e8:	83 ec 0c             	sub    esp,0xc
c001b0eb:	6a 00                	push   0x0
c001b0ed:	e8 38 f8 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b0f2:	83 c4 0c             	add    esp,0xc
c001b0f5:	52                   	push   edx
c001b0f6:	50                   	push   eax
c001b0f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0fb:	2d d0 00 00 00       	sub    eax,0xd0
c001b100:	e9 df fd ff ff       	jmp    c001aee4 <Vm::x87Handler(regs*)+0x47a>
c001b105:	8d 76 00             	lea    esi,[esi+0x0]
c001b108:	8d 50 28             	lea    edx,[eax+0x28]
c001b10b:	80 fa 07             	cmp    dl,0x7
c001b10e:	77 28                	ja     c001b138 <Vm::x87Handler(regs*)+0x6ce>
c001b110:	83 ec 0c             	sub    esp,0xc
c001b113:	6a 00                	push   0x0
c001b115:	e8 10 f8 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b11a:	83 c4 0c             	add    esp,0xc
c001b11d:	52                   	push   edx
c001b11e:	50                   	push   eax
c001b11f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b123:	2d d8 00 00 00       	sub    eax,0xd8
c001b128:	50                   	push   eax
c001b129:	e8 3f f8 ff ff       	call   c001a96d <Vm::fpuSetReg(int, unsigned long long)>
c001b12e:	e8 e4 f8 ff ff       	call   c001aa17 <Vm::fpuPop()>
c001b133:	e9 ac f9 ff ff       	jmp    c001aae4 <Vm::x87Handler(regs*)+0x7a>
c001b138:	8d 50 20             	lea    edx,[eax+0x20]
c001b13b:	80 fa 07             	cmp    dl,0x7
c001b13e:	77 30                	ja     c001b170 <Vm::x87Handler(regs*)+0x706>
c001b140:	83 ec 0c             	sub    esp,0xc
c001b143:	2d e0 00 00 00       	sub    eax,0xe0
c001b148:	50                   	push   eax
c001b149:	e8 dc f7 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b14e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b155:	89 c6                	mov    esi,eax
c001b157:	89 d7                	mov    edi,edx
c001b159:	e8 cc f7 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b15e:	57                   	push   edi
c001b15f:	56                   	push   esi
c001b160:	52                   	push   edx
c001b161:	50                   	push   eax
c001b162:	e8 e3 f6 ff ff       	call   c001a84a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b167:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b16b:	e9 78 02 00 00       	jmp    c001b3e8 <Vm::x87Handler(regs*)+0x97e>
c001b170:	8d 50 18             	lea    edx,[eax+0x18]
c001b173:	80 fa 07             	cmp    dl,0x7
c001b176:	0f 87 10 fb ff ff    	ja     c001ac8c <Vm::x87Handler(regs*)+0x222>
c001b17c:	83 ec 0c             	sub    esp,0xc
c001b17f:	2d e8 00 00 00       	sub    eax,0xe8
c001b184:	50                   	push   eax
c001b185:	e8 a0 f7 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b18a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b191:	89 c6                	mov    esi,eax
c001b193:	89 d7                	mov    edi,edx
c001b195:	e8 90 f7 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b19a:	57                   	push   edi
c001b19b:	56                   	push   esi
c001b19c:	52                   	push   edx
c001b19d:	50                   	push   eax
c001b19e:	e8 a7 f6 ff ff       	call   c001a84a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1a3:	83 c4 20             	add    esp,0x20
c001b1a6:	e8 6c f8 ff ff       	call   c001aa17 <Vm::fpuPop()>
c001b1ab:	eb 6f                	jmp    c001b21c <Vm::x87Handler(regs*)+0x7b2>
c001b1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b1b0:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001b1b4:	0f 85 22 01 00 00    	jne    c001b2dc <Vm::x87Handler(regs*)+0x872>
c001b1ba:	66 90                	xchg   ax,ax
c001b1bc:	83 ec 0c             	sub    esp,0xc
c001b1bf:	6a 01                	push   0x1
c001b1c1:	e8 64 f7 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b1c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1cd:	89 c6                	mov    esi,eax
c001b1cf:	89 d7                	mov    edi,edx
c001b1d1:	e8 54 f7 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b1d6:	57                   	push   edi
c001b1d7:	56                   	push   esi
c001b1d8:	52                   	push   edx
c001b1d9:	50                   	push   eax
c001b1da:	e8 6b f6 ff ff       	call   c001a84a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1df:	83 c4 20             	add    esp,0x20
c001b1e2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b1e6:	e8 2c f8 ff ff       	call   c001aa17 <Vm::fpuPop()>
c001b1eb:	e8 27 f8 ff ff       	call   c001aa17 <Vm::fpuPop()>
c001b1f0:	e9 f7 f8 ff ff       	jmp    c001aaec <Vm::x87Handler(regs*)+0x82>
c001b1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f8:	3c d9                	cmp    al,0xd9
c001b1fa:	0f 85 e8 02 00 00    	jne    c001b4e8 <Vm::x87Handler(regs*)+0xa7e>
c001b200:	eb ba                	jmp    c001b1bc <Vm::x87Handler(regs*)+0x752>
c001b202:	66 90                	xchg   ax,ax
c001b204:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001b208:	0f 85 2a 03 00 00    	jne    c001b538 <Vm::x87Handler(regs*)+0xace>
c001b20e:	0f b7 05 c0 a1 02 c0 	movzx  eax,WORD PTR ds:0xc002a1c0
c001b215:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b219:	8d 76 00             	lea    esi,[esi+0x0]
c001b21c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b220:	e9 c7 f8 ff ff       	jmp    c001aaec <Vm::x87Handler(regs*)+0x82>
c001b225:	8d 76 00             	lea    esi,[esi+0x0]
c001b228:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b22c:	84 d2                	test   dl,dl
c001b22e:	75 10                	jne    c001b240 <Vm::x87Handler(regs*)+0x7d6>
c001b230:	83 ec 0c             	sub    esp,0xc
c001b233:	ff 36                	push   DWORD PTR [esi]
c001b235:	e8 29 f4 ff ff       	call   c001a663 <Vm::fpu32ToInternal(unsigned int)>
c001b23a:	e9 39 01 00 00       	jmp    c001b378 <Vm::x87Handler(regs*)+0x90e>
c001b23f:	90                   	nop
c001b240:	80 fa 01             	cmp    dl,0x1
c001b243:	75 0f                	jne    c001b254 <Vm::x87Handler(regs*)+0x7ea>
c001b245:	83 ec 0c             	sub    esp,0xc
c001b248:	ff 36                	push   DWORD PTR [esi]
c001b24a:	e8 14 f4 ff ff       	call   c001a663 <Vm::fpu32ToInternal(unsigned int)>
c001b24f:	e9 b4 02 00 00       	jmp    c001b508 <Vm::x87Handler(regs*)+0xa9e>
c001b254:	80 fa 04             	cmp    dl,0x4
c001b257:	75 0f                	jne    c001b268 <Vm::x87Handler(regs*)+0x7fe>
c001b259:	83 ec 0c             	sub    esp,0xc
c001b25c:	ff 36                	push   DWORD PTR [esi]
c001b25e:	e8 00 f4 ff ff       	call   c001a663 <Vm::fpu32ToInternal(unsigned int)>
c001b263:	e9 9c 01 00 00       	jmp    c001b404 <Vm::x87Handler(regs*)+0x99a>
c001b268:	80 fa 05             	cmp    dl,0x5
c001b26b:	75 1b                	jne    c001b288 <Vm::x87Handler(regs*)+0x81e>
c001b26d:	83 ec 0c             	sub    esp,0xc
c001b270:	6a 00                	push   0x0
c001b272:	e8 b3 f6 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b277:	89 c7                	mov    edi,eax
c001b279:	89 d5                	mov    ebp,edx
c001b27b:	58                   	pop    eax
c001b27c:	ff 36                	push   DWORD PTR [esi]
c001b27e:	e8 e0 f3 ff ff       	call   c001a663 <Vm::fpu32ToInternal(unsigned int)>
c001b283:	e9 bc 01 00 00       	jmp    c001b444 <Vm::x87Handler(regs*)+0x9da>
c001b288:	80 fa 06             	cmp    dl,0x6
c001b28b:	75 0f                	jne    c001b29c <Vm::x87Handler(regs*)+0x832>
c001b28d:	83 ec 0c             	sub    esp,0xc
c001b290:	ff 36                	push   DWORD PTR [esi]
c001b292:	e8 cc f3 ff ff       	call   c001a663 <Vm::fpu32ToInternal(unsigned int)>
c001b297:	e9 cc 01 00 00       	jmp    c001b468 <Vm::x87Handler(regs*)+0x9fe>
c001b29c:	31 c0                	xor    eax,eax
c001b29e:	80 fa 07             	cmp    dl,0x7
c001b2a1:	0f 85 d5 02 00 00    	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001b2a7:	83 ec 0c             	sub    esp,0xc
c001b2aa:	6a 00                	push   0x0
c001b2ac:	e8 79 f6 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b2b1:	89 c7                	mov    edi,eax
c001b2b3:	89 d5                	mov    ebp,edx
c001b2b5:	58                   	pop    eax
c001b2b6:	ff 36                	push   DWORD PTR [esi]
c001b2b8:	e8 a6 f3 ff ff       	call   c001a663 <Vm::fpu32ToInternal(unsigned int)>
c001b2bd:	e9 ee 01 00 00       	jmp    c001b4b0 <Vm::x87Handler(regs*)+0xa46>
c001b2c2:	66 90                	xchg   ax,ax
c001b2c4:	80 fa 03             	cmp    dl,0x3
c001b2c7:	0f 85 f7 01 00 00    	jne    c001b4c4 <Vm::x87Handler(regs*)+0xa5a>
c001b2cd:	e8 45 f7 ff ff       	call   c001aa17 <Vm::fpuPop()>
c001b2d2:	51                   	push   ecx
c001b2d3:	51                   	push   ecx
c001b2d4:	e9 03 02 00 00       	jmp    c001b4dc <Vm::x87Handler(regs*)+0xa72>
c001b2d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2dc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b2e0:	80 fa 01             	cmp    dl,0x1
c001b2e3:	75 0b                	jne    c001b2f0 <Vm::x87Handler(regs*)+0x886>
c001b2e5:	57                   	push   edi
c001b2e6:	57                   	push   edi
c001b2e7:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2e9:	e9 0e 02 00 00       	jmp    c001b4fc <Vm::x87Handler(regs*)+0xa92>
c001b2ee:	66 90                	xchg   ax,ax
c001b2f0:	80 fa 04             	cmp    dl,0x4
c001b2f3:	75 13                	jne    c001b308 <Vm::x87Handler(regs*)+0x89e>
c001b2f5:	31 d2                	xor    edx,edx
c001b2f7:	51                   	push   ecx
c001b2f8:	51                   	push   ecx
c001b2f9:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2fb:	52                   	push   edx
c001b2fc:	50                   	push   eax
c001b2fd:	e8 4a f4 ff ff       	call   c001a74c <Vm::fpuLongToFloat(long long)>
c001b302:	e9 fd 00 00 00       	jmp    c001b404 <Vm::x87Handler(regs*)+0x99a>
c001b307:	90                   	nop
c001b308:	31 c0                	xor    eax,eax
c001b30a:	80 fa 07             	cmp    dl,0x7
c001b30d:	0f 85 69 02 00 00    	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001b313:	83 ec 0c             	sub    esp,0xc
c001b316:	6a 00                	push   0x0
c001b318:	e8 0d f6 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b31d:	89 c7                	mov    edi,eax
c001b31f:	89 d5                	mov    ebp,edx
c001b321:	58                   	pop    eax
c001b322:	8b 06                	mov    eax,DWORD PTR [esi]
c001b324:	5a                   	pop    edx
c001b325:	31 d2                	xor    edx,edx
c001b327:	52                   	push   edx
c001b328:	50                   	push   eax
c001b329:	e8 1e f4 ff ff       	call   c001a74c <Vm::fpuLongToFloat(long long)>
c001b32e:	e9 7d 01 00 00       	jmp    c001b4b0 <Vm::x87Handler(regs*)+0xa46>
c001b333:	90                   	nop
c001b334:	84 d2                	test   dl,dl
c001b336:	75 10                	jne    c001b348 <Vm::x87Handler(regs*)+0x8de>
c001b338:	31 d2                	xor    edx,edx
c001b33a:	55                   	push   ebp
c001b33b:	55                   	push   ebp
c001b33c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b33e:	52                   	push   edx
c001b33f:	50                   	push   eax
c001b340:	e9 03 02 00 00       	jmp    c001b548 <Vm::x87Handler(regs*)+0xade>
c001b345:	8d 76 00             	lea    esi,[esi+0x0]
c001b348:	31 c0                	xor    eax,eax
c001b34a:	80 fa 02             	cmp    dl,0x2
c001b34d:	0f 85 29 02 00 00    	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001b353:	83 ec 0c             	sub    esp,0xc
c001b356:	6a 00                	push   0x0
c001b358:	e8 cd f5 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b35d:	59                   	pop    ecx
c001b35e:	5f                   	pop    edi
c001b35f:	e9 18 f9 ff ff       	jmp    c001ac7c <Vm::x87Handler(regs*)+0x212>
c001b364:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b368:	84 d2                	test   dl,dl
c001b36a:	75 2c                	jne    c001b398 <Vm::x87Handler(regs*)+0x92e>
c001b36c:	50                   	push   eax
c001b36d:	50                   	push   eax
c001b36e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b371:	ff 36                	push   DWORD PTR [esi]
c001b373:	e8 30 f3 ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001b378:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b37f:	89 c6                	mov    esi,eax
c001b381:	89 d7                	mov    edi,edx
c001b383:	e8 a2 f5 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b388:	57                   	push   edi
c001b389:	56                   	push   esi
c001b38a:	52                   	push   edx
c001b38b:	50                   	push   eax
c001b38c:	e8 0f f5 ff ff       	call   c001a8a0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b391:	e9 8e 01 00 00       	jmp    c001b524 <Vm::x87Handler(regs*)+0xaba>
c001b396:	66 90                	xchg   ax,ax
c001b398:	80 fa 01             	cmp    dl,0x1
c001b39b:	75 13                	jne    c001b3b0 <Vm::x87Handler(regs*)+0x946>
c001b39d:	50                   	push   eax
c001b39e:	50                   	push   eax
c001b39f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3a2:	ff 36                	push   DWORD PTR [esi]
c001b3a4:	e8 ff f2 ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001b3a9:	e9 5a 01 00 00       	jmp    c001b508 <Vm::x87Handler(regs*)+0xa9e>
c001b3ae:	66 90                	xchg   ax,ax
c001b3b0:	80 fa 02             	cmp    dl,0x2
c001b3b3:	0f 85 03 f9 ff ff    	jne    c001acbc <Vm::x87Handler(regs*)+0x252>
c001b3b9:	55                   	push   ebp
c001b3ba:	55                   	push   ebp
c001b3bb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3be:	ff 36                	push   DWORD PTR [esi]
c001b3c0:	e8 e3 f2 ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001b3c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b3cc:	89 c6                	mov    esi,eax
c001b3ce:	89 d7                	mov    edi,edx
c001b3d0:	e8 55 f5 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b3d5:	57                   	push   edi
c001b3d6:	56                   	push   esi
c001b3d7:	52                   	push   edx
c001b3d8:	50                   	push   eax
c001b3d9:	e8 6c f4 ff ff       	call   c001a84a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b3de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3e2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b3e8:	83 c4 20             	add    esp,0x20
c001b3eb:	e9 fc f6 ff ff       	jmp    c001aaec <Vm::x87Handler(regs*)+0x82>
c001b3f0:	80 fa 04             	cmp    dl,0x4
c001b3f3:	75 2f                	jne    c001b424 <Vm::x87Handler(regs*)+0x9ba>
c001b3f5:	51                   	push   ecx
c001b3f6:	51                   	push   ecx
c001b3f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3fa:	ff 36                	push   DWORD PTR [esi]
c001b3fc:	e8 a7 f2 ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001b401:	8d 76 00             	lea    esi,[esi+0x0]
c001b404:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b40b:	89 c6                	mov    esi,eax
c001b40d:	89 d7                	mov    edi,edx
c001b40f:	e8 16 f5 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b414:	57                   	push   edi
c001b415:	56                   	push   esi
c001b416:	52                   	push   edx
c001b417:	50                   	push   eax
c001b418:	e8 ad f4 ff ff       	call   c001a8ca <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b41d:	e9 02 01 00 00       	jmp    c001b524 <Vm::x87Handler(regs*)+0xaba>
c001b422:	66 90                	xchg   ax,ax
c001b424:	80 fa 05             	cmp    dl,0x5
c001b427:	75 2b                	jne    c001b454 <Vm::x87Handler(regs*)+0x9ea>
c001b429:	83 ec 0c             	sub    esp,0xc
c001b42c:	6a 00                	push   0x0
c001b42e:	e8 f7 f4 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b433:	89 c7                	mov    edi,eax
c001b435:	89 d5                	mov    ebp,edx
c001b437:	58                   	pop    eax
c001b438:	5a                   	pop    edx
c001b439:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b43c:	ff 36                	push   DWORD PTR [esi]
c001b43e:	e8 65 f2 ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001b443:	90                   	nop
c001b444:	83 c4 10             	add    esp,0x10
c001b447:	55                   	push   ebp
c001b448:	57                   	push   edi
c001b449:	52                   	push   edx
c001b44a:	50                   	push   eax
c001b44b:	e8 7a f4 ff ff       	call   c001a8ca <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b450:	eb 6a                	jmp    c001b4bc <Vm::x87Handler(regs*)+0xa52>
c001b452:	66 90                	xchg   ax,ax
c001b454:	80 fa 06             	cmp    dl,0x6
c001b457:	75 2f                	jne    c001b488 <Vm::x87Handler(regs*)+0xa1e>
c001b459:	51                   	push   ecx
c001b45a:	51                   	push   ecx
c001b45b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b45e:	ff 36                	push   DWORD PTR [esi]
c001b460:	e8 43 f2 ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001b465:	8d 76 00             	lea    esi,[esi+0x0]
c001b468:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b46f:	89 c6                	mov    esi,eax
c001b471:	89 d7                	mov    edi,edx
c001b473:	e8 b2 f4 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b478:	57                   	push   edi
c001b479:	56                   	push   esi
c001b47a:	52                   	push   edx
c001b47b:	50                   	push   eax
c001b47c:	e8 77 f4 ff ff       	call   c001a8f8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b481:	e9 9e 00 00 00       	jmp    c001b524 <Vm::x87Handler(regs*)+0xaba>
c001b486:	66 90                	xchg   ax,ax
c001b488:	31 c0                	xor    eax,eax
c001b48a:	80 fa 07             	cmp    dl,0x7
c001b48d:	0f 85 e9 00 00 00    	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001b493:	83 ec 0c             	sub    esp,0xc
c001b496:	6a 00                	push   0x0
c001b498:	e8 8d f4 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b49d:	89 c7                	mov    edi,eax
c001b49f:	89 d5                	mov    ebp,edx
c001b4a1:	58                   	pop    eax
c001b4a2:	5a                   	pop    edx
c001b4a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b4a6:	ff 36                	push   DWORD PTR [esi]
c001b4a8:	e8 fb f1 ff ff       	call   c001a6a8 <Vm::fpu64ToInternal(unsigned long long)>
c001b4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b4b0:	83 c4 10             	add    esp,0x10
c001b4b3:	55                   	push   ebp
c001b4b4:	57                   	push   edi
c001b4b5:	52                   	push   edx
c001b4b6:	50                   	push   eax
c001b4b7:	e8 3c f4 ff ff       	call   c001a8f8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b4bc:	83 c4 0c             	add    esp,0xc
c001b4bf:	eb 67                	jmp    c001b528 <Vm::x87Handler(regs*)+0xabe>
c001b4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4c4:	31 c0                	xor    eax,eax
c001b4c6:	80 fa 02             	cmp    dl,0x2
c001b4c9:	0f 85 ad 00 00 00    	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001b4cf:	83 ec 0c             	sub    esp,0xc
c001b4d2:	6a 00                	push   0x0
c001b4d4:	e8 51 f4 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b4d9:	59                   	pop    ecx
c001b4da:	5f                   	pop    edi
c001b4db:	90                   	nop
c001b4dc:	52                   	push   edx
c001b4dd:	50                   	push   eax
c001b4de:	e8 77 f1 ff ff       	call   c001a65a <Vm::fpuInternalTo64(unsigned long long)>
c001b4e3:	e9 84 00 00 00       	jmp    c001b56c <Vm::x87Handler(regs*)+0xb02>
c001b4e8:	31 c0                	xor    eax,eax
c001b4ea:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b4ef:	0f 85 87 00 00 00    	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001b4f5:	50                   	push   eax
c001b4f6:	50                   	push   eax
c001b4f7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b4fa:	66 90                	xchg   ax,ax
c001b4fc:	31 d2                	xor    edx,edx
c001b4fe:	52                   	push   edx
c001b4ff:	50                   	push   eax
c001b500:	e8 47 f2 ff ff       	call   c001a74c <Vm::fpuLongToFloat(long long)>
c001b505:	8d 76 00             	lea    esi,[esi+0x0]
c001b508:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b50f:	89 c6                	mov    esi,eax
c001b511:	89 d7                	mov    edi,edx
c001b513:	e8 12 f4 ff ff       	call   c001a92a <Vm::fpuGetReg(int)>
c001b518:	57                   	push   edi
c001b519:	56                   	push   esi
c001b51a:	52                   	push   edx
c001b51b:	50                   	push   eax
c001b51c:	e8 b8 f3 ff ff       	call   c001a8d9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b521:	8d 76 00             	lea    esi,[esi+0x0]
c001b524:	83 c4 1c             	add    esp,0x1c
c001b527:	90                   	nop
c001b528:	52                   	push   edx
c001b529:	50                   	push   eax
c001b52a:	6a 00                	push   0x0
c001b52c:	e8 3c f4 ff ff       	call   c001a96d <Vm::fpuSetReg(int, unsigned long long)>
c001b531:	e9 7a f7 ff ff       	jmp    c001acb0 <Vm::x87Handler(regs*)+0x246>
c001b536:	66 90                	xchg   ax,ax
c001b538:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b53c:	80 fa 05             	cmp    dl,0x5
c001b53f:	75 13                	jne    c001b554 <Vm::x87Handler(regs*)+0xaea>
c001b541:	55                   	push   ebp
c001b542:	55                   	push   ebp
c001b543:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b546:	ff 36                	push   DWORD PTR [esi]
c001b548:	e8 c3 f1 ff ff       	call   c001a710 <Vm::fpuULongToFloat(unsigned long long)>
c001b54d:	e9 52 f7 ff ff       	jmp    c001aca4 <Vm::x87Handler(regs*)+0x23a>
c001b552:	66 90                	xchg   ax,ax
c001b554:	31 c0                	xor    eax,eax
c001b556:	80 fa 07             	cmp    dl,0x7
c001b559:	75 21                	jne    c001b57c <Vm::x87Handler(regs*)+0xb12>
c001b55b:	e8 b7 f4 ff ff       	call   c001aa17 <Vm::fpuPop()>
c001b560:	51                   	push   ecx
c001b561:	51                   	push   ecx
c001b562:	52                   	push   edx
c001b563:	50                   	push   eax
c001b564:	e8 48 f1 ff ff       	call   c001a6b1 <Vm::fpuFloatToLong(unsigned long long)>
c001b569:	8d 76 00             	lea    esi,[esi+0x0]
c001b56c:	83 c4 10             	add    esp,0x10
c001b56f:	89 06                	mov    DWORD PTR [esi],eax
c001b571:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b574:	e9 7b f7 ff ff       	jmp    c001acf4 <Vm::x87Handler(regs*)+0x28a>
c001b579:	8d 76 00             	lea    esi,[esi+0x0]
c001b57c:	83 c4 1c             	add    esp,0x1c
c001b57f:	5b                   	pop    ebx
c001b580:	5e                   	pop    esi
c001b581:	5f                   	pop    edi
c001b582:	5d                   	pop    ebp
c001b583:	c3                   	ret    

c001b584 <__static_initialization_and_destruction_0(int, int)>:
c001b584:	83 ec 0c             	sub    esp,0xc
c001b587:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b58c:	75 1a                	jne    c001b5a8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b58e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b596:	75 10                	jne    c001b5a8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b598:	83 ec 0c             	sub    esp,0xc
c001b59b:	68 c0 a1 02 c0       	push   0xc002a1c0
c001b5a0:	e8 cf 83 00 00       	call   c0023974 <Vm::_FPUState::_FPUState()>
c001b5a5:	83 c4 10             	add    esp,0x10
c001b5a8:	90                   	nop
c001b5a9:	83 c4 0c             	add    esp,0xc
c001b5ac:	c3                   	ret    
c001b5ad:	8d 76 00             	lea    esi,[esi+0x0]

c001b5b0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b5b0:	83 ec 0c             	sub    esp,0xc
c001b5b3:	83 ec 08             	sub    esp,0x8
c001b5b6:	68 ff ff 00 00       	push   0xffff
c001b5bb:	6a 01                	push   0x1
c001b5bd:	e8 c2 ff ff ff       	call   c001b584 <__static_initialization_and_destruction_0(int, int)>
c001b5c2:	83 c4 10             	add    esp,0x10
c001b5c5:	83 c4 0c             	add    esp,0xc
c001b5c8:	c3                   	ret    
c001b5c9:	66 90                	xchg   ax,ax
c001b5cb:	90                   	nop

c001b5cc <FAT::getName()>:
c001b5cc:	b8 d0 6f 02 c0       	mov    eax,0xc0026fd0
c001b5d1:	c3                   	ret    
c001b5d2:	66 90                	xchg   ax,ax

c001b5d4 <FAT::tell(void*, unsigned long long*)>:
c001b5d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b5d9:	75 09                	jne    c001b5e4 <FAT::tell(void*, unsigned long long*)+0x10>
c001b5db:	b8 04 00 00 00       	mov    eax,0x4
c001b5e0:	c3                   	ret    
c001b5e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b5e9:	75 09                	jne    c001b5f4 <FAT::tell(void*, unsigned long long*)+0x20>
c001b5eb:	b8 04 00 00 00       	mov    eax,0x4
c001b5f0:	c3                   	ret    
c001b5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5f8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b5fb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b5fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b602:	89 01                	mov    DWORD PTR [ecx],eax
c001b604:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b607:	b8 00 00 00 00       	mov    eax,0x0
c001b60c:	c3                   	ret    
c001b60d:	90                   	nop
c001b60e:	66 90                	xchg   ax,ax

c001b610 <FAT::stat(void*, unsigned long long*)>:
c001b610:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b615:	75 09                	jne    c001b620 <FAT::stat(void*, unsigned long long*)+0x10>
c001b617:	b8 04 00 00 00       	mov    eax,0x4
c001b61c:	c3                   	ret    
c001b61d:	8d 76 00             	lea    esi,[esi+0x0]
c001b620:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b625:	75 09                	jne    c001b630 <FAT::stat(void*, unsigned long long*)+0x20>
c001b627:	b8 04 00 00 00       	mov    eax,0x4
c001b62c:	c3                   	ret    
c001b62d:	8d 76 00             	lea    esi,[esi+0x0]
c001b630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b634:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b637:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b63a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b63e:	89 01                	mov    DWORD PTR [ecx],eax
c001b640:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b643:	b8 00 00 00 00       	mov    eax,0x0
c001b648:	c3                   	ret    
c001b649:	90                   	nop
c001b64a:	66 90                	xchg   ax,ax

c001b64c <FAT::~FAT()>:
c001b64c:	83 ec 0c             	sub    esp,0xc
c001b64f:	ba 1c 70 02 c0       	mov    edx,0xc002701c
c001b654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b658:	89 10                	mov    DWORD PTR [eax],edx
c001b65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b65e:	83 ec 0c             	sub    esp,0xc
c001b661:	50                   	push   eax
c001b662:	e8 cf 1d ff ff       	call   c000d436 <Filesystem::~Filesystem()>
c001b667:	83 c4 10             	add    esp,0x10
c001b66a:	90                   	nop
c001b66b:	83 c4 0c             	add    esp,0xc
c001b66e:	c3                   	ret    
c001b66f:	90                   	nop

c001b670 <FAT::~FAT()>:
c001b670:	83 ec 0c             	sub    esp,0xc
c001b673:	83 ec 0c             	sub    esp,0xc
c001b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b67a:	e8 cd ff ff ff       	call   c001b64c <FAT::~FAT()>
c001b67f:	83 c4 10             	add    esp,0x10
c001b682:	83 ec 08             	sub    esp,0x8
c001b685:	6a 08                	push   0x8
c001b687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b68b:	e8 8a 19 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c001b690:	83 c4 10             	add    esp,0x10
c001b693:	83 c4 0c             	add    esp,0xc
c001b696:	c3                   	ret    
c001b697:	90                   	nop

c001b698 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b698:	83 ec 1c             	sub    esp,0x1c
c001b69b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b6a2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b6a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6ab:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b6b2:	83 f8 ff             	cmp    eax,0xffffffff
c001b6b5:	75 35                	jne    c001b6ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b6b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b6bb:	88 c2                	mov    dl,al
c001b6bd:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b6c2:	01 d0                	add    eax,edx
c001b6c4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b6c8:	8b 15 20 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a220
c001b6ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6d2:	89 14 85 40 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5dc0],edx
c001b6d9:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b6de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6e2:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b6e9:	eb 19                	jmp    c001b704 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b6eb:	90                   	nop
c001b6ec:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b6f0:	88 c2                	mov    dl,al
c001b6f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6f6:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b6fd:	01 d0                	add    eax,edx
c001b6ff:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b703:	90                   	nop
c001b704:	83 ec 04             	sub    esp,0x4
c001b707:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b70b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b70f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b713:	50                   	push   eax
c001b714:	e8 29 b5 fe ff       	call   c0006c42 <f_getlabel>
c001b719:	83 c4 10             	add    esp,0x10
c001b71c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b720:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b725:	75 09                	jne    c001b730 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b727:	b8 00 00 00 00       	mov    eax,0x0
c001b72c:	eb 0a                	jmp    c001b738 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b72e:	66 90                	xchg   ax,ax
c001b730:	b8 01 00 00 00       	mov    eax,0x1
c001b735:	8d 76 00             	lea    esi,[esi+0x0]
c001b738:	83 c4 1c             	add    esp,0x1c
c001b73b:	c3                   	ret    

c001b73c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b73c:	57                   	push   edi
c001b73d:	83 ec 58             	sub    esp,0x58
c001b740:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b748:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b74c:	b9 0f 00 00 00       	mov    ecx,0xf
c001b751:	b8 00 00 00 00       	mov    eax,0x0
c001b756:	fc                   	cld    
c001b757:	89 d7                	mov    edi,edx
c001b759:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b75b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b75f:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b766:	83 f8 ff             	cmp    eax,0xffffffff
c001b769:	75 35                	jne    c001b7a0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b76b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b76f:	88 c2                	mov    dl,al
c001b771:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b776:	01 d0                	add    eax,edx
c001b778:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b77c:	8b 15 20 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a220
c001b782:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b786:	89 14 85 40 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5dc0],edx
c001b78d:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b792:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b796:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b79d:	eb 19                	jmp    c001b7b8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b79f:	90                   	nop
c001b7a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b7a4:	88 c2                	mov    dl,al
c001b7a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7aa:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b7b1:	01 d0                	add    eax,edx
c001b7b3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7b7:	90                   	nop
c001b7b8:	83 ec 08             	sub    esp,0x8
c001b7bb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b7bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7c3:	50                   	push   eax
c001b7c4:	e8 c7 50 fe ff       	call   c0000890 <strcat>
c001b7c9:	83 c4 10             	add    esp,0x10
c001b7cc:	83 ec 0c             	sub    esp,0xc
c001b7cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7d3:	50                   	push   eax
c001b7d4:	e8 57 b6 fe ff       	call   c0006e30 <f_setlabel>
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7e0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b7e5:	75 09                	jne    c001b7f0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b7e7:	b8 00 00 00 00       	mov    eax,0x0
c001b7ec:	eb 0a                	jmp    c001b7f8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b7ee:	66 90                	xchg   ax,ax
c001b7f0:	b8 01 00 00 00       	mov    eax,0x1
c001b7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f8:	83 c4 58             	add    esp,0x58
c001b7fb:	5f                   	pop    edi
c001b7fc:	c3                   	ret    
c001b7fd:	90                   	nop
c001b7fe:	66 90                	xchg   ax,ax

c001b800 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b800:	83 ec 2c             	sub    esp,0x2c
c001b803:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b80b:	83 ec 08             	sub    esp,0x8
c001b80e:	68 f4 6f 02 c0       	push   0xc0026ff4
c001b813:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b817:	e8 c0 4f fe ff       	call   c00007dc <strcmp>
c001b81c:	83 c4 10             	add    esp,0x10
c001b81f:	85 c0                	test   eax,eax
c001b821:	0f 94 c0             	sete   al
c001b824:	84 c0                	test   al,al
c001b826:	74 10                	je     c001b838 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b828:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b830:	e9 b3 00 00 00       	jmp    c001b8e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b835:	8d 76 00             	lea    esi,[esi+0x0]
c001b838:	83 ec 08             	sub    esp,0x8
c001b83b:	68 e6 6f 02 c0       	push   0xc0026fe6
c001b840:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b844:	e8 93 4f fe ff       	call   c00007dc <strcmp>
c001b849:	83 c4 10             	add    esp,0x10
c001b84c:	85 c0                	test   eax,eax
c001b84e:	0f 94 c0             	sete   al
c001b851:	84 c0                	test   al,al
c001b853:	74 0f                	je     c001b864 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b855:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b85d:	e9 86 00 00 00       	jmp    c001b8e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b862:	66 90                	xchg   ax,ax
c001b864:	83 ec 08             	sub    esp,0x8
c001b867:	68 ec 6f 02 c0       	push   0xc0026fec
c001b86c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b870:	e8 67 4f fe ff       	call   c00007dc <strcmp>
c001b875:	83 c4 10             	add    esp,0x10
c001b878:	85 c0                	test   eax,eax
c001b87a:	0f 94 c0             	sete   al
c001b87d:	84 c0                	test   al,al
c001b87f:	74 0b                	je     c001b88c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b881:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b889:	eb 5d                	jmp    c001b8e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b88b:	90                   	nop
c001b88c:	83 ec 08             	sub    esp,0x8
c001b88f:	68 ec 40 02 c0       	push   0xc00240ec
c001b894:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b898:	e8 3f 4f fe ff       	call   c00007dc <strcmp>
c001b89d:	83 c4 10             	add    esp,0x10
c001b8a0:	85 c0                	test   eax,eax
c001b8a2:	0f 94 c0             	sete   al
c001b8a5:	84 c0                	test   al,al
c001b8a7:	74 0b                	je     c001b8b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b8a9:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b8b1:	eb 35                	jmp    c001b8e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8b3:	90                   	nop
c001b8b4:	83 ec 08             	sub    esp,0x8
c001b8b7:	68 f2 6f 02 c0       	push   0xc0026ff2
c001b8bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8c0:	e8 17 4f fe ff       	call   c00007dc <strcmp>
c001b8c5:	83 c4 10             	add    esp,0x10
c001b8c8:	85 c0                	test   eax,eax
c001b8ca:	0f 94 c0             	sete   al
c001b8cd:	84 c0                	test   al,al
c001b8cf:	74 0b                	je     c001b8dc <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b8d1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b8d9:	eb 0d                	jmp    c001b8e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8db:	90                   	nop
c001b8dc:	b8 08 00 00 00       	mov    eax,0x8
c001b8e1:	e9 ea 00 00 00       	jmp    c001b9d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b8e6:	66 90                	xchg   ax,ax
c001b8e8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b8ef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b8f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8f8:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b8ff:	83 f8 ff             	cmp    eax,0xffffffff
c001b902:	75 34                	jne    c001b938 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b904:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b908:	88 c2                	mov    dl,al
c001b90a:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b90f:	01 d0                	add    eax,edx
c001b911:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b915:	8b 15 20 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a220
c001b91b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b91f:	89 14 85 40 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5dc0],edx
c001b926:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b92b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b92f:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b936:	eb 18                	jmp    c001b950 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b938:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b93c:	88 c2                	mov    dl,al
c001b93e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b942:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001b949:	01 d0                	add    eax,edx
c001b94b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b94f:	90                   	nop
c001b950:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b954:	88 04 24             	mov    BYTE PTR [esp],al
c001b957:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b95b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b95f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b967:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b96c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	68 00 20 00 00       	push   0x2000
c001b97c:	e8 66 e4 fe ff       	call   c0009de7 <malloc>
c001b981:	83 c4 10             	add    esp,0x10
c001b984:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b988:	68 00 20 00 00       	push   0x2000
c001b98d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b991:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b995:	50                   	push   eax
c001b996:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b99a:	50                   	push   eax
c001b99b:	e8 11 bb fe ff       	call   c00074b1 <f_mkfs>
c001b9a0:	83 c4 10             	add    esp,0x10
c001b9a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b9a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b9ac:	75 0a                	jne    c001b9b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b9ae:	b8 00 00 00 00       	mov    eax,0x0
c001b9b3:	eb 1b                	jmp    c001b9d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9b8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b9bd:	75 09                	jne    c001b9c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b9bf:	b8 09 00 00 00       	mov    eax,0x9
c001b9c4:	eb 0a                	jmp    c001b9d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b9c6:	66 90                	xchg   ax,ax
c001b9c8:	b8 01 00 00 00       	mov    eax,0x1
c001b9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b9d0:	83 c4 2c             	add    esp,0x2c
c001b9d3:	c3                   	ret    

c001b9d4 <FAT::tryMount(LogicalDisk*, int)>:
c001b9d4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b9da:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001b9df:	83 f8 14             	cmp    eax,0x14
c001b9e2:	75 18                	jne    c001b9fc <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b9e4:	83 ec 0c             	sub    esp,0xc
c001b9e7:	68 f8 6f 02 c0       	push   0xc0026ff8
c001b9ec:	e8 ec 97 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001b9f1:	83 c4 10             	add    esp,0x10
c001b9f4:	b0 00                	mov    al,0x0
c001b9f6:	e9 e9 01 00 00       	jmp    c001bbe4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b9fb:	90                   	nop
c001b9fc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ba03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ba09:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba0f:	3d 00 02 00 00       	cmp    eax,0x200
c001ba14:	74 0a                	je     c001ba20 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ba16:	b0 00                	mov    al,0x0
c001ba18:	e9 c7 01 00 00       	jmp    c001bbe4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba20:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ba28:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba2f:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001ba36:	83 f8 ff             	cmp    eax,0xffffffff
c001ba39:	74 09                	je     c001ba44 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ba3b:	b0 01                	mov    al,0x1
c001ba3d:	e9 a2 01 00 00       	jmp    c001bbe4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba42:	66 90                	xchg   ax,ax
c001ba44:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ba4e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ba56:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ba5d:	88 c2                	mov    dl,al
c001ba5f:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001ba64:	01 d0                	add    eax,edx
c001ba66:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001ba6d:	8b 15 20 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a220
c001ba73:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba7a:	89 14 85 40 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5dc0],edx
c001ba81:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001ba86:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001ba8d:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001ba94:	83 ec 0c             	sub    esp,0xc
c001ba97:	68 54 02 00 00       	push   0x254
c001ba9c:	e8 46 e3 fe ff       	call   c0009de7 <malloc>
c001baa1:	83 c4 10             	add    esp,0x10
c001baa4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001baab:	83 ec 04             	sub    esp,0x4
c001baae:	6a 00                	push   0x0
c001bab0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bab7:	50                   	push   eax
c001bab8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001babf:	e8 75 93 fe ff       	call   c0004e39 <f_mount>
c001bac4:	83 c4 10             	add    esp,0x10
c001bac7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bace:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001bad6:	74 1c                	je     c001baf4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bad8:	83 ec 0c             	sub    esp,0xc
c001badb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bae2:	e8 20 e3 fe ff       	call   c0009e07 <rfree>
c001bae7:	83 c4 10             	add    esp,0x10
c001baea:	b0 00                	mov    al,0x0
c001baec:	e9 f3 00 00 00       	jmp    c001bbe4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001baf1:	8d 76 00             	lea    esi,[esi+0x0]
c001baf4:	83 ec 04             	sub    esp,0x4
c001baf7:	68 00 01 00 00       	push   0x100
c001bafc:	6a 00                	push   0x0
c001bafe:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb05:	50                   	push   eax
c001bb06:	e8 89 4b fe ff       	call   c0000694 <memset>
c001bb0b:	83 c4 10             	add    esp,0x10
c001bb0e:	83 ec 08             	sub    esp,0x8
c001bb11:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bb18:	50                   	push   eax
c001bb19:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb20:	50                   	push   eax
c001bb21:	e8 6a 4d fe ff       	call   c0000890 <strcat>
c001bb26:	83 c4 10             	add    esp,0x10
c001bb29:	83 ec 08             	sub    esp,0x8
c001bb2c:	68 06 70 02 c0       	push   0xc0027006
c001bb31:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb38:	50                   	push   eax
c001bb39:	e8 52 4d fe ff       	call   c0000890 <strcat>
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	83 ec 04             	sub    esp,0x4
c001bb44:	6a 01                	push   0x1
c001bb46:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001bb4d:	50                   	push   eax
c001bb4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb52:	50                   	push   eax
c001bb53:	e8 43 93 fe ff       	call   c0004e9b <f_open>
c001bb58:	83 c4 10             	add    esp,0x10
c001bb5b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bb62:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bb69:	85 c0                	test   eax,eax
c001bb6b:	74 0b                	je     c001bb78 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bb6d:	78 31                	js     c001bba0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bb6f:	83 e8 04             	sub    eax,0x4
c001bb72:	83 f8 01             	cmp    eax,0x1
c001bb75:	77 29                	ja     c001bba0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bb77:	90                   	nop
c001bb78:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001bb80:	83 ec 0c             	sub    esp,0xc
c001bb83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb87:	50                   	push   eax
c001bb88:	e8 60 9e fe ff       	call   c00059ed <f_close>
c001bb8d:	83 c4 10             	add    esp,0x10
c001bb90:	90                   	nop
c001bb91:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001bb99:	74 41                	je     c001bbdc <FAT::tryMount(LogicalDisk*, int)+0x208>
c001bb9b:	eb 33                	jmp    c001bbd0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bb9d:	8d 76 00             	lea    esi,[esi+0x0]
c001bba0:	83 ec 0c             	sub    esp,0xc
c001bba3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bbaa:	e8 58 e2 fe ff       	call   c0009e07 <rfree>
c001bbaf:	83 c4 10             	add    esp,0x10
c001bbb2:	83 ec 04             	sub    esp,0x4
c001bbb5:	6a 00                	push   0x0
c001bbb7:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bbbe:	50                   	push   eax
c001bbbf:	6a 00                	push   0x0
c001bbc1:	e8 73 92 fe ff       	call   c0004e39 <f_mount>
c001bbc6:	83 c4 10             	add    esp,0x10
c001bbc9:	b0 00                	mov    al,0x0
c001bbcb:	eb 17                	jmp    c001bbe4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bbcd:	8d 76 00             	lea    esi,[esi+0x0]
c001bbd0:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c001bbd5:	40                   	inc    eax
c001bbd6:	a3 20 a2 02 c0       	mov    ds:0xc002a220,eax
c001bbdb:	90                   	nop
c001bbdc:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001bbe3:	90                   	nop
c001bbe4:	81 c4 6c 03 00 00    	add    esp,0x36c
c001bbea:	c3                   	ret    
c001bbeb:	90                   	nop

c001bbec <FAT::allocateSwapfile(char const*, int)>:
c001bbec:	55                   	push   ebp
c001bbed:	57                   	push   edi
c001bbee:	56                   	push   esi
c001bbef:	53                   	push   ebx
c001bbf0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bbf6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bc01:	83 ec 0c             	sub    esp,0xc
c001bc04:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bc0b:	e8 d7 e1 fe ff       	call   c0009de7 <malloc>
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	89 c7                	mov    edi,eax
c001bc15:	a1 50 a1 02 c0       	mov    eax,ds:0xc002a150
c001bc1a:	83 ec 04             	sub    esp,0x4
c001bc1d:	50                   	push   eax
c001bc1e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bc25:	57                   	push   edi
c001bc26:	e8 3b 1a ff ff       	call   c000d666 <File::File(char const*, Process*)>
c001bc2b:	83 c4 10             	add    esp,0x10
c001bc2e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bc35:	83 ec 04             	sub    esp,0x4
c001bc38:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bc3c:	50                   	push   eax
c001bc3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc41:	50                   	push   eax
c001bc42:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc49:	e8 9e 1d ff ff       	call   c000d9ec <File::stat(unsigned long long*, bool*)>
c001bc4e:	83 c4 10             	add    esp,0x10
c001bc51:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bc58:	c1 e0 14             	shl    eax,0x14
c001bc5b:	89 c7                	mov    edi,eax
c001bc5d:	89 c5                	mov    ebp,eax
c001bc5f:	c1 fd 1f             	sar    ebp,0x1f
c001bc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc6a:	89 f9                	mov    ecx,edi
c001bc6c:	31 c1                	xor    ecx,eax
c001bc6e:	89 cb                	mov    ebx,ecx
c001bc70:	89 e9                	mov    ecx,ebp
c001bc72:	31 d1                	xor    ecx,edx
c001bc74:	89 ce                	mov    esi,ecx
c001bc76:	89 f0                	mov    eax,esi
c001bc78:	09 d8                	or     eax,ebx
c001bc7a:	0f 84 98 00 00 00    	je     c001bd18 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001bc80:	83 ec 0c             	sub    esp,0xc
c001bc83:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc8a:	e8 29 1c ff ff       	call   c000d8b8 <File::unlink()>
c001bc8f:	83 c4 10             	add    esp,0x10
c001bc92:	83 ec 08             	sub    esp,0x8
c001bc95:	6a 12                	push   0x12
c001bc97:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc9e:	e8 9d 1a ff ff       	call   c000d740 <File::open(FileOpenMode)>
c001bca3:	83 c4 10             	add    esp,0x10
c001bca6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bcad:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bcb3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bcba:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bcc1:	c1 e0 14             	shl    eax,0x14
c001bcc4:	99                   	cdq    
c001bcc5:	6a 01                	push   0x1
c001bcc7:	52                   	push   edx
c001bcc8:	50                   	push   eax
c001bcc9:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bcd0:	e8 c8 b3 fe ff       	call   c000709d <f_expand>
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bcdf:	8b 00                	mov    eax,DWORD PTR [eax]
c001bce1:	83 c0 10             	add    eax,0x10
c001bce4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bce6:	83 ec 0c             	sub    esp,0xc
c001bce9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bced:	52                   	push   edx
c001bcee:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bcf2:	52                   	push   edx
c001bcf3:	6a 00                	push   0x0
c001bcf5:	68 00 04 00 00       	push   0x400
c001bcfa:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd01:	ff d0                	call   eax
c001bd03:	83 c4 20             	add    esp,0x20
c001bd06:	83 ec 0c             	sub    esp,0xc
c001bd09:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd10:	e8 89 1a ff ff       	call   c000d79e <File::close()>
c001bd15:	83 c4 10             	add    esp,0x10
c001bd18:	83 ec 08             	sub    esp,0x8
c001bd1b:	6a 01                	push   0x1
c001bd1d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd24:	e8 17 1a ff ff       	call   c000d740 <File::open(FileOpenMode)>
c001bd29:	83 c4 10             	add    esp,0x10
c001bd2c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd33:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd35:	83 c0 0c             	add    eax,0xc
c001bd38:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd3a:	83 ec 0c             	sub    esp,0xc
c001bd3d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd41:	52                   	push   edx
c001bd42:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bd46:	52                   	push   edx
c001bd47:	6a 00                	push   0x0
c001bd49:	6a 04                	push   0x4
c001bd4b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd52:	ff d0                	call   eax
c001bd54:	83 c4 20             	add    esp,0x20
c001bd57:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd5e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bd64:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bd6b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bd72:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bd75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bd78:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bd7f:	83 ec 0c             	sub    esp,0xc
c001bd82:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd89:	e8 10 1a ff ff       	call   c000d79e <File::close()>
c001bd8e:	83 c4 10             	add    esp,0x10
c001bd91:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bd98:	ba 00 00 00 00       	mov    edx,0x0
c001bd9d:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bda3:	5b                   	pop    ebx
c001bda4:	5e                   	pop    esi
c001bda5:	5f                   	pop    edi
c001bda6:	5d                   	pop    ebp
c001bda7:	c3                   	ret    

c001bda8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bda8:	57                   	push   edi
c001bda9:	56                   	push   esi
c001bdaa:	53                   	push   ebx
c001bdab:	81 ec 50 02 00 00    	sub    esp,0x250
c001bdb1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bdb9:	74 0d                	je     c001bdc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bdbb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bdc3:	75 0f                	jne    c001bdd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bdc5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc8:	b8 04 00 00 00       	mov    eax,0x4
c001bdcd:	e9 36 01 00 00       	jmp    c001bf08 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bdd2:	66 90                	xchg   ax,ax
c001bdd4:	83 ec 08             	sub    esp,0x8
c001bdd7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bdde:	50                   	push   eax
c001bddf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bde6:	e8 0c a2 fe ff       	call   c0005ff7 <f_readdir>
c001bdeb:	83 c4 10             	add    esp,0x10
c001bdee:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bdf5:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001bdfc:	83 ec 0c             	sub    esp,0xc
c001bdff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001be06:	83 c0 1a             	add    eax,0x1a
c001be09:	50                   	push   eax
c001be0a:	e8 a1 48 fe ff       	call   c00006b0 <strlen>
c001be0f:	83 c4 10             	add    esp,0x10
c001be12:	ba 00 00 00 00       	mov    edx,0x0
c001be17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be1f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001be26:	0f b6 c0             	movzx  eax,al
c001be29:	83 e0 10             	and    eax,0x10
c001be2c:	74 0a                	je     c001be38 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001be2e:	b8 02 00 00 00       	mov    eax,0x2
c001be33:	eb 0b                	jmp    c001be40 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001be35:	8d 76 00             	lea    esi,[esi+0x0]
c001be38:	b8 01 00 00 00       	mov    eax,0x1
c001be3d:	8d 76 00             	lea    esi,[esi+0x0]
c001be40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be44:	83 ec 08             	sub    esp,0x8
c001be47:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001be4e:	83 c0 1a             	add    eax,0x1a
c001be51:	50                   	push   eax
c001be52:	8d 44 24 10          	lea    eax,[esp+0x10]
c001be56:	83 c0 10             	add    eax,0x10
c001be59:	50                   	push   eax
c001be5a:	e8 f1 48 fe ff       	call   c0000750 <strcpy>
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001be69:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001be70:	8d 44 24 04          	lea    eax,[esp+0x4]
c001be74:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001be7b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001be82:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001be89:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001be90:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001be97:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001be9e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bea5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001beac:	89 c6                	mov    esi,eax
c001beae:	89 d7                	mov    edi,edx
c001beb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001beb2:	89 c8                	mov    eax,ecx
c001beb4:	89 fa                	mov    edx,edi
c001beb6:	89 f3                	mov    ebx,esi
c001beb8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bebf:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bec6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001becd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bed4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001beda:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bee1:	84 c0                	test   al,al
c001bee3:	75 07                	jne    c001beec <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bee5:	b8 07 00 00 00       	mov    eax,0x7
c001beea:	eb 1c                	jmp    c001bf08 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001beec:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bef3:	85 c0                	test   eax,eax
c001bef5:	75 09                	jne    c001bf00 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bef7:	b8 00 00 00 00       	mov    eax,0x0
c001befc:	eb 0a                	jmp    c001bf08 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001befe:	66 90                	xchg   ax,ax
c001bf00:	b8 01 00 00 00       	mov    eax,0x1
c001bf05:	8d 76 00             	lea    esi,[esi+0x0]
c001bf08:	81 c4 50 02 00 00    	add    esp,0x250
c001bf0e:	5b                   	pop    ebx
c001bf0f:	5e                   	pop    esi
c001bf10:	5f                   	pop    edi
c001bf11:	c3                   	ret    
c001bf12:	66 90                	xchg   ax,ax

c001bf14 <FAT::read(void*, unsigned long, void*, int*)>:
c001bf14:	83 ec 1c             	sub    esp,0x1c
c001bf17:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf1c:	74 0a                	je     c001bf28 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bf1e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bf23:	75 0b                	jne    c001bf30 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bf25:	8d 76 00             	lea    esi,[esi+0x0]
c001bf28:	b8 04 00 00 00       	mov    eax,0x4
c001bf2d:	eb 41                	jmp    c001bf70 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf2f:	90                   	nop
c001bf30:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf34:	50                   	push   eax
c001bf35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf41:	e8 91 93 fe ff       	call   c00052d7 <f_read>
c001bf46:	83 c4 10             	add    esp,0x10
c001bf49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf51:	89 c2                	mov    edx,eax
c001bf53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf57:	89 10                	mov    DWORD PTR [eax],edx
c001bf59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf5d:	85 c0                	test   eax,eax
c001bf5f:	75 07                	jne    c001bf68 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bf61:	b8 00 00 00 00       	mov    eax,0x0
c001bf66:	eb 08                	jmp    c001bf70 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf68:	b8 01 00 00 00       	mov    eax,0x1
c001bf6d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf70:	83 c4 1c             	add    esp,0x1c
c001bf73:	c3                   	ret    

c001bf74 <FAT::write(void*, unsigned long, void*, int*)>:
c001bf74:	83 ec 1c             	sub    esp,0x1c
c001bf77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf7c:	74 0a                	je     c001bf88 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bf7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bf83:	75 0b                	jne    c001bf90 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bf85:	8d 76 00             	lea    esi,[esi+0x0]
c001bf88:	b8 04 00 00 00       	mov    eax,0x4
c001bf8d:	eb 41                	jmp    c001bfd0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bf8f:	90                   	nop
c001bf90:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf94:	50                   	push   eax
c001bf95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfa1:	e8 b1 95 fe ff       	call   c0005557 <f_write>
c001bfa6:	83 c4 10             	add    esp,0x10
c001bfa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfb1:	89 c2                	mov    edx,eax
c001bfb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfb7:	89 10                	mov    DWORD PTR [eax],edx
c001bfb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfbd:	85 c0                	test   eax,eax
c001bfbf:	75 07                	jne    c001bfc8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bfc1:	b8 00 00 00 00       	mov    eax,0x0
c001bfc6:	eb 08                	jmp    c001bfd0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bfc8:	b8 01 00 00 00       	mov    eax,0x1
c001bfcd:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd0:	83 c4 1c             	add    esp,0x1c
c001bfd3:	c3                   	ret    

c001bfd4 <FAT::close(void*)>:
c001bfd4:	83 ec 1c             	sub    esp,0x1c
c001bfd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bfdc:	75 0a                	jne    c001bfe8 <FAT::close(void*)+0x14>
c001bfde:	b8 04 00 00 00       	mov    eax,0x4
c001bfe3:	eb 3f                	jmp    c001c024 <FAT::close(void*)+0x50>
c001bfe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfe8:	83 ec 0c             	sub    esp,0xc
c001bfeb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfef:	e8 f9 99 fe ff       	call   c00059ed <f_close>
c001bff4:	83 c4 10             	add    esp,0x10
c001bff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bffb:	83 ec 0c             	sub    esp,0xc
c001bffe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c002:	e8 f0 dd fe ff       	call   c0009df7 <free>
c001c007:	83 c4 10             	add    esp,0x10
c001c00a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c00e:	85 c0                	test   eax,eax
c001c010:	75 0a                	jne    c001c01c <FAT::close(void*)+0x48>
c001c012:	b8 00 00 00 00       	mov    eax,0x0
c001c017:	eb 0b                	jmp    c001c024 <FAT::close(void*)+0x50>
c001c019:	8d 76 00             	lea    esi,[esi+0x0]
c001c01c:	b8 01 00 00 00       	mov    eax,0x1
c001c021:	8d 76 00             	lea    esi,[esi+0x0]
c001c024:	83 c4 1c             	add    esp,0x1c
c001c027:	c3                   	ret    

c001c028 <FAT::closeDir(void*)>:
c001c028:	83 ec 1c             	sub    esp,0x1c
c001c02b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c030:	75 0a                	jne    c001c03c <FAT::closeDir(void*)+0x14>
c001c032:	b8 04 00 00 00       	mov    eax,0x4
c001c037:	eb 3f                	jmp    c001c078 <FAT::closeDir(void*)+0x50>
c001c039:	8d 76 00             	lea    esi,[esi+0x0]
c001c03c:	83 ec 0c             	sub    esp,0xc
c001c03f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c043:	e8 8d 9f fe ff       	call   c0005fd5 <f_closedir>
c001c048:	83 c4 10             	add    esp,0x10
c001c04b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c04f:	83 ec 0c             	sub    esp,0xc
c001c052:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c056:	e8 9c dd fe ff       	call   c0009df7 <free>
c001c05b:	83 c4 10             	add    esp,0x10
c001c05e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c062:	85 c0                	test   eax,eax
c001c064:	75 0a                	jne    c001c070 <FAT::closeDir(void*)+0x48>
c001c066:	b8 00 00 00 00       	mov    eax,0x0
c001c06b:	eb 0b                	jmp    c001c078 <FAT::closeDir(void*)+0x50>
c001c06d:	8d 76 00             	lea    esi,[esi+0x0]
c001c070:	b8 01 00 00 00       	mov    eax,0x1
c001c075:	8d 76 00             	lea    esi,[esi+0x0]
c001c078:	83 c4 1c             	add    esp,0x1c
c001c07b:	c3                   	ret    

c001c07c <FAT::seek(void*, unsigned long long)>:
c001c07c:	83 ec 2c             	sub    esp,0x2c
c001c07f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c083:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c087:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c08b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c08f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c094:	75 0a                	jne    c001c0a0 <FAT::seek(void*, unsigned long long)+0x24>
c001c096:	b8 04 00 00 00       	mov    eax,0x4
c001c09b:	eb 37                	jmp    c001c0d4 <FAT::seek(void*, unsigned long long)+0x58>
c001c09d:	8d 76 00             	lea    esi,[esi+0x0]
c001c0a0:	83 ec 04             	sub    esp,0x4
c001c0a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0ab:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c0af:	e8 68 99 fe ff       	call   c0005a1c <f_lseek>
c001c0b4:	83 c4 10             	add    esp,0x10
c001c0b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c0bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0bf:	85 c0                	test   eax,eax
c001c0c1:	75 09                	jne    c001c0cc <FAT::seek(void*, unsigned long long)+0x50>
c001c0c3:	b8 00 00 00 00       	mov    eax,0x0
c001c0c8:	eb 0a                	jmp    c001c0d4 <FAT::seek(void*, unsigned long long)+0x58>
c001c0ca:	66 90                	xchg   ax,ax
c001c0cc:	b8 01 00 00 00       	mov    eax,0x1
c001c0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0d4:	83 c4 2c             	add    esp,0x2c
c001c0d7:	c3                   	ret    

c001c0d8 <fatWrapperReadDisk>:
c001c0d8:	83 ec 1c             	sub    esp,0x1c
c001c0db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c0e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c0ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0f7:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c001c0fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c102:	83 ec 0c             	sub    esp,0xc
c001c105:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c109:	52                   	push   edx
c001c10a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c10e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c112:	50                   	push   eax
c001c113:	e8 66 49 ff ff       	call   c0010a7e <LogicalDisk::read(unsigned long long, int, void*)>
c001c118:	83 c4 20             	add    esp,0x20
c001c11b:	83 c4 1c             	add    esp,0x1c
c001c11e:	c3                   	ret    
c001c11f:	90                   	nop

c001c120 <fatWrapperWriteDisk>:
c001c120:	83 ec 1c             	sub    esp,0x1c
c001c123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c127:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c12b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c12f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c132:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c136:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c13a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c13f:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c001c146:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c14a:	83 ec 0c             	sub    esp,0xc
c001c14d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c151:	52                   	push   edx
c001c152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c15a:	50                   	push   eax
c001c15b:	e8 8a 49 ff ff       	call   c0010aea <LogicalDisk::write(unsigned long long, int, void*)>
c001c160:	83 c4 20             	add    esp,0x20
c001c163:	83 c4 1c             	add    esp,0x1c
c001c166:	c3                   	ret    
c001c167:	90                   	nop

c001c168 <fatWrapperIoctl>:
c001c168:	53                   	push   ebx
c001c169:	83 ec 28             	sub    esp,0x28
c001c16c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c170:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c174:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c178:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c17c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001c181:	75 31                	jne    c001c1b4 <fatWrapperIoctl+0x4c>
c001c183:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c187:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c18b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c190:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c001c197:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c19d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c1a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c1a7:	66 89 02             	mov    WORD PTR [edx],ax
c001c1aa:	b8 00 00 00 00       	mov    eax,0x0
c001c1af:	e9 bc 00 00 00       	jmp    c001c270 <fatWrapperIoctl+0x108>
c001c1b4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001c1b9:	75 6d                	jne    c001c228 <fatWrapperIoctl+0xc0>
c001c1bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c1bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1c3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1c8:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c001c1cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c1d5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c1db:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c1e1:	89 c8                	mov    eax,ecx
c001c1e3:	89 da                	mov    edx,ebx
c001c1e5:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c1e9:	c1 e0 0a             	shl    eax,0xa
c001c1ec:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c1f1:	8b 0c 8d c0 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e40]
c001c1f8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c1fe:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c204:	89 cb                	mov    ebx,ecx
c001c206:	c1 fb 1f             	sar    ebx,0x1f
c001c209:	53                   	push   ebx
c001c20a:	51                   	push   ecx
c001c20b:	52                   	push   edx
c001c20c:	50                   	push   eax
c001c20d:	e8 be 6d 00 00       	call   c0022fd0 <__udivdi3>
c001c212:	83 c4 10             	add    esp,0x10
c001c215:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c219:	89 01                	mov    DWORD PTR [ecx],eax
c001c21b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c21e:	b8 00 00 00 00       	mov    eax,0x0
c001c223:	eb 4b                	jmp    c001c270 <fatWrapperIoctl+0x108>
c001c225:	8d 76 00             	lea    esi,[esi+0x0]
c001c228:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c22d:	75 09                	jne    c001c238 <fatWrapperIoctl+0xd0>
c001c22f:	b8 00 00 00 00       	mov    eax,0x0
c001c234:	eb 3a                	jmp    c001c270 <fatWrapperIoctl+0x108>
c001c236:	66 90                	xchg   ax,ax
c001c238:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c23d:	75 19                	jne    c001c258 <fatWrapperIoctl+0xf0>
c001c23f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c243:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c247:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c24b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c251:	b8 00 00 00 00       	mov    eax,0x0
c001c256:	eb 18                	jmp    c001c270 <fatWrapperIoctl+0x108>
c001c258:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c25d:	75 09                	jne    c001c268 <fatWrapperIoctl+0x100>
c001c25f:	b8 00 00 00 00       	mov    eax,0x0
c001c264:	eb 0a                	jmp    c001c270 <fatWrapperIoctl+0x108>
c001c266:	66 90                	xchg   ax,ax
c001c268:	b8 04 00 00 00       	mov    eax,0x4
c001c26d:	8d 76 00             	lea    esi,[esi+0x0]
c001c270:	83 c4 28             	add    esp,0x28
c001c273:	5b                   	pop    ebx
c001c274:	c3                   	ret    
c001c275:	90                   	nop
c001c276:	66 90                	xchg   ax,ax

c001c278 <FAT::FAT()>:
c001c278:	83 ec 1c             	sub    esp,0x1c
c001c27b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c27f:	83 ec 0c             	sub    esp,0xc
c001c282:	50                   	push   eax
c001c283:	e8 8a 11 ff ff       	call   c000d412 <Filesystem::Filesystem()>
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	ba 1c 70 02 c0       	mov    edx,0xc002701c
c001c290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c294:	89 10                	mov    DWORD PTR [eax],edx
c001c296:	c7 05 20 a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a220,0x0
c001c2a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c2a8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c2ad:	7f 15                	jg     c001c2c4 <FAT::FAT()+0x4c>
c001c2af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2b3:	c7 04 85 40 a2 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5dc0],0xffffffff
c001c2be:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c2c2:	eb e4                	jmp    c001c2a8 <FAT::FAT()+0x30>
c001c2c4:	90                   	nop
c001c2c5:	83 c4 1c             	add    esp,0x1c
c001c2c8:	c3                   	ret    
c001c2c9:	90                   	nop
c001c2ca:	66 90                	xchg   ax,ax

c001c2cc <FAT::fixFilepath(char*)>:
c001c2cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2d0:	8a 00                	mov    al,BYTE PTR [eax]
c001c2d2:	3c 40                	cmp    al,0x40
c001c2d4:	7e 2e                	jle    c001c304 <FAT::fixFilepath(char*)+0x38>
c001c2d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2da:	8a 00                	mov    al,BYTE PTR [eax]
c001c2dc:	83 e8 41             	sub    eax,0x41
c001c2df:	88 c2                	mov    dl,al
c001c2e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2e5:	88 10                	mov    BYTE PTR [eax],dl
c001c2e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2eb:	8a 00                	mov    al,BYTE PTR [eax]
c001c2ed:	0f be c0             	movsx  eax,al
c001c2f0:	8b 04 85 40 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5dc0]
c001c2f7:	83 c0 30             	add    eax,0x30
c001c2fa:	88 c2                	mov    dl,al
c001c2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c300:	88 10                	mov    BYTE PTR [eax],dl
c001c302:	66 90                	xchg   ax,ax
c001c304:	90                   	nop
c001c305:	c3                   	ret    
c001c306:	66 90                	xchg   ax,ax

c001c308 <FAT::open(char const*, void**, FileOpenMode)>:
c001c308:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c30e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c316:	74 0c                	je     c001c324 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c318:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c320:	75 0e                	jne    c001c330 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c322:	66 90                	xchg   ax,ax
c001c324:	b8 04 00 00 00       	mov    eax,0x4
c001c329:	e9 06 01 00 00       	jmp    c001c434 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c32e:	66 90                	xchg   ax,ax
c001c330:	83 ec 08             	sub    esp,0x8
c001c333:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c33a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c33e:	50                   	push   eax
c001c33f:	e8 0c 44 fe ff       	call   c0000750 <strcpy>
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	83 ec 08             	sub    esp,0x8
c001c34a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c34e:	50                   	push   eax
c001c34f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c356:	e8 71 ff ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c366:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c36d:	83 e0 01             	and    eax,0x1
c001c370:	74 0a                	je     c001c37c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c372:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c37a:	66 90                	xchg   ax,ax
c001c37c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c383:	83 e0 04             	and    eax,0x4
c001c386:	74 10                	je     c001c398 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c388:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c390:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c398:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c39f:	83 e0 02             	and    eax,0x2
c001c3a2:	74 08                	je     c001c3ac <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c3a4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c3ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3b3:	83 e0 08             	and    eax,0x8
c001c3b6:	74 08                	je     c001c3c0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c3b8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c3c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3c7:	83 e0 10             	and    eax,0x10
c001c3ca:	74 08                	je     c001c3d4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c3cc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c3d4:	83 ec 0c             	sub    esp,0xc
c001c3d7:	68 50 02 00 00       	push   0x250
c001c3dc:	e8 06 da fe ff       	call   c0009de7 <malloc>
c001c3e1:	83 c4 10             	add    esp,0x10
c001c3e4:	89 c2                	mov    edx,eax
c001c3e6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c3ed:	89 10                	mov    DWORD PTR [eax],edx
c001c3ef:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c3f7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c3fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001c400:	83 ec 04             	sub    esp,0x4
c001c403:	52                   	push   edx
c001c404:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c408:	52                   	push   edx
c001c409:	50                   	push   eax
c001c40a:	e8 8c 8a fe ff       	call   c0004e9b <f_open>
c001c40f:	83 c4 10             	add    esp,0x10
c001c412:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c419:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c421:	74 09                	je     c001c42c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c423:	b8 01 00 00 00       	mov    eax,0x1
c001c428:	eb 0a                	jmp    c001c434 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c42a:	66 90                	xchg   ax,ax
c001c42c:	b8 00 00 00 00       	mov    eax,0x0
c001c431:	8d 76 00             	lea    esi,[esi+0x0]
c001c434:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c43a:	c3                   	ret    
c001c43b:	90                   	nop

c001c43c <FAT::openDir(char const*, void**)>:
c001c43c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c442:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c44a:	74 0c                	je     c001c458 <FAT::openDir(char const*, void**)+0x1c>
c001c44c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c454:	75 0e                	jne    c001c464 <FAT::openDir(char const*, void**)+0x28>
c001c456:	66 90                	xchg   ax,ax
c001c458:	b8 04 00 00 00       	mov    eax,0x4
c001c45d:	e9 82 00 00 00       	jmp    c001c4e4 <FAT::openDir(char const*, void**)+0xa8>
c001c462:	66 90                	xchg   ax,ax
c001c464:	83 ec 08             	sub    esp,0x8
c001c467:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c46e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c472:	50                   	push   eax
c001c473:	e8 d8 42 fe ff       	call   c0000750 <strcpy>
c001c478:	83 c4 10             	add    esp,0x10
c001c47b:	83 ec 08             	sub    esp,0x8
c001c47e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c482:	50                   	push   eax
c001c483:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c48a:	e8 3d fe ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c48f:	83 c4 10             	add    esp,0x10
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	6a 4c                	push   0x4c
c001c497:	e8 4b d9 fe ff       	call   c0009de7 <malloc>
c001c49c:	83 c4 10             	add    esp,0x10
c001c49f:	89 c2                	mov    edx,eax
c001c4a1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c4a8:	89 10                	mov    DWORD PTR [eax],edx
c001c4aa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c4b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4b3:	83 ec 08             	sub    esp,0x8
c001c4b6:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c4ba:	52                   	push   edx
c001c4bb:	50                   	push   eax
c001c4bc:	e8 12 9a fe ff       	call   c0005ed3 <f_opendir>
c001c4c1:	83 c4 10             	add    esp,0x10
c001c4c4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c4cb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c4d3:	74 07                	je     c001c4dc <FAT::openDir(char const*, void**)+0xa0>
c001c4d5:	b8 01 00 00 00       	mov    eax,0x1
c001c4da:	eb 08                	jmp    c001c4e4 <FAT::openDir(char const*, void**)+0xa8>
c001c4dc:	b8 00 00 00 00       	mov    eax,0x0
c001c4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4e4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c4ea:	c3                   	ret    
c001c4eb:	90                   	nop

c001c4ec <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c4ec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c4f2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c4fa:	75 0c                	jne    c001c508 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c4fc:	b8 04 00 00 00       	mov    eax,0x4
c001c501:	e9 d2 00 00 00       	jmp    c001c5d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c506:	66 90                	xchg   ax,ax
c001c508:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c510:	75 0a                	jne    c001c51c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c512:	b8 04 00 00 00       	mov    eax,0x4
c001c517:	e9 bc 00 00 00       	jmp    c001c5d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c51c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c524:	75 0a                	jne    c001c530 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c526:	b8 04 00 00 00       	mov    eax,0x4
c001c52b:	e9 a8 00 00 00       	jmp    c001c5d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c530:	83 ec 08             	sub    esp,0x8
c001c533:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c53a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c541:	50                   	push   eax
c001c542:	e8 09 42 fe ff       	call   c0000750 <strcpy>
c001c547:	83 c4 10             	add    esp,0x10
c001c54a:	83 ec 08             	sub    esp,0x8
c001c54d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c554:	50                   	push   eax
c001c555:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c55c:	e8 6b fd ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	83 ec 08             	sub    esp,0x8
c001c567:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c56b:	50                   	push   eax
c001c56c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c573:	50                   	push   eax
c001c574:	e8 19 9b fe ff       	call   c0006092 <f_stat>
c001c579:	83 c4 10             	add    esp,0x10
c001c57c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c583:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c58a:	85 c0                	test   eax,eax
c001c58c:	74 0a                	je     c001c598 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c58e:	83 f8 04             	cmp    eax,0x4
c001c591:	74 35                	je     c001c5c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c593:	eb 3b                	jmp    c001c5d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c595:	8d 76 00             	lea    esi,[esi+0x0]
c001c598:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c59c:	0f b6 c0             	movzx  eax,al
c001c59f:	83 e0 10             	and    eax,0x10
c001c5a2:	0f 95 c2             	setne  dl
c001c5a5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c5ac:	88 10                	mov    BYTE PTR [eax],dl
c001c5ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c5b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5b5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c5bc:	89 01                	mov    DWORD PTR [ecx],eax
c001c5be:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c5c1:	b8 00 00 00 00       	mov    eax,0x0
c001c5c6:	eb 10                	jmp    c001c5d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c5c8:	b8 02 00 00 00       	mov    eax,0x2
c001c5cd:	eb 09                	jmp    c001c5d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c5cf:	90                   	nop
c001c5d0:	b8 01 00 00 00       	mov    eax,0x1
c001c5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c5de:	c3                   	ret    
c001c5df:	90                   	nop

c001c5e0 <FAT::unlink(char const*)>:
c001c5e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c5e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c5ee:	75 08                	jne    c001c5f8 <FAT::unlink(char const*)+0x18>
c001c5f0:	b8 04 00 00 00       	mov    eax,0x4
c001c5f5:	eb 61                	jmp    c001c658 <FAT::unlink(char const*)+0x78>
c001c5f7:	90                   	nop
c001c5f8:	83 ec 08             	sub    esp,0x8
c001c5fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c602:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c606:	50                   	push   eax
c001c607:	e8 44 41 fe ff       	call   c0000750 <strcpy>
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	83 ec 08             	sub    esp,0x8
c001c612:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c616:	50                   	push   eax
c001c617:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c61e:	e8 a9 fc ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	83 ec 0c             	sub    esp,0xc
c001c629:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c62d:	50                   	push   eax
c001c62e:	e8 b1 9d fe ff       	call   c00063e4 <f_unlink>
c001c633:	83 c4 10             	add    esp,0x10
c001c636:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c63d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c644:	85 c0                	test   eax,eax
c001c646:	75 08                	jne    c001c650 <FAT::unlink(char const*)+0x70>
c001c648:	b8 00 00 00 00       	mov    eax,0x0
c001c64d:	eb 09                	jmp    c001c658 <FAT::unlink(char const*)+0x78>
c001c64f:	90                   	nop
c001c650:	b8 01 00 00 00       	mov    eax,0x1
c001c655:	8d 76 00             	lea    esi,[esi+0x0]
c001c658:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c65e:	c3                   	ret    
c001c65f:	90                   	nop

c001c660 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c660:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c666:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c66d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c674:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c678:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c67c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c684:	75 0a                	jne    c001c690 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c686:	b8 04 00 00 00       	mov    eax,0x4
c001c68b:	e9 30 01 00 00       	jmp    c001c7c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c690:	83 ec 08             	sub    esp,0x8
c001c693:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c69a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c69e:	50                   	push   eax
c001c69f:	e8 ac 40 fe ff       	call   c0000750 <strcpy>
c001c6a4:	83 c4 10             	add    esp,0x10
c001c6a7:	83 ec 08             	sub    esp,0x8
c001c6aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c6ae:	50                   	push   eax
c001c6af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c6b6:	e8 11 fc ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c6c6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c6ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6d3:	83 e0 01             	and    eax,0x1
c001c6d6:	74 08                	je     c001c6e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c6d8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c6e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6e5:	83 e0 02             	and    eax,0x2
c001c6e8:	74 0a                	je     c001c6f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c6ea:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c6f2:	66 90                	xchg   ax,ax
c001c6f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6f9:	83 e0 04             	and    eax,0x4
c001c6fc:	74 0a                	je     c001c708 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c6fe:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c706:	66 90                	xchg   ax,ax
c001c708:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c70d:	83 e0 08             	and    eax,0x8
c001c710:	74 0a                	je     c001c71c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c712:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c71a:	66 90                	xchg   ax,ax
c001c71c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c721:	83 e0 01             	and    eax,0x1
c001c724:	74 0a                	je     c001c730 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c726:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c72e:	66 90                	xchg   ax,ax
c001c730:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c735:	83 e0 02             	and    eax,0x2
c001c738:	74 0a                	je     c001c744 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c73a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c742:	66 90                	xchg   ax,ax
c001c744:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c749:	83 e0 04             	and    eax,0x4
c001c74c:	74 0a                	je     c001c758 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c74e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c756:	66 90                	xchg   ax,ax
c001c758:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c75d:	83 e0 08             	and    eax,0x8
c001c760:	74 0a                	je     c001c76c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c762:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c76a:	66 90                	xchg   ax,ax
c001c76c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c773:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c77a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c782:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c78a:	83 ec 04             	sub    esp,0x4
c001c78d:	52                   	push   edx
c001c78e:	50                   	push   eax
c001c78f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c793:	50                   	push   eax
c001c794:	e8 ed a2 fe ff       	call   c0006a86 <f_chmod>
c001c799:	83 c4 10             	add    esp,0x10
c001c79c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c7a3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c7aa:	85 c0                	test   eax,eax
c001c7ac:	75 0a                	jne    c001c7b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c7ae:	b8 00 00 00 00       	mov    eax,0x0
c001c7b3:	eb 0b                	jmp    c001c7c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7b8:	b8 01 00 00 00       	mov    eax,0x1
c001c7bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c7c0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c7c6:	c3                   	ret    
c001c7c7:	90                   	nop

c001c7c8 <FAT::rename(char const*, char const*)>:
c001c7c8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c7ce:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c7d6:	74 0c                	je     c001c7e4 <FAT::rename(char const*, char const*)+0x1c>
c001c7d8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c7e0:	75 0e                	jne    c001c7f0 <FAT::rename(char const*, char const*)+0x28>
c001c7e2:	66 90                	xchg   ax,ax
c001c7e4:	b8 04 00 00 00       	mov    eax,0x4
c001c7e9:	e9 9e 00 00 00       	jmp    c001c88c <FAT::rename(char const*, char const*)+0xc4>
c001c7ee:	66 90                	xchg   ax,ax
c001c7f0:	83 ec 08             	sub    esp,0x8
c001c7f3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c7fa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c801:	50                   	push   eax
c001c802:	e8 49 3f fe ff       	call   c0000750 <strcpy>
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	83 ec 08             	sub    esp,0x8
c001c80d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c814:	50                   	push   eax
c001c815:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c81c:	e8 ab fa ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	83 ec 08             	sub    esp,0x8
c001c827:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c82e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c832:	50                   	push   eax
c001c833:	e8 18 3f fe ff       	call   c0000750 <strcpy>
c001c838:	83 c4 10             	add    esp,0x10
c001c83b:	83 ec 08             	sub    esp,0x8
c001c83e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c842:	50                   	push   eax
c001c843:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c84a:	e8 7d fa ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	83 ec 08             	sub    esp,0x8
c001c855:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c859:	50                   	push   eax
c001c85a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c861:	50                   	push   eax
c001c862:	e8 2c 9f fe ff       	call   c0006793 <f_rename>
c001c867:	83 c4 10             	add    esp,0x10
c001c86a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c871:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c878:	85 c0                	test   eax,eax
c001c87a:	75 08                	jne    c001c884 <FAT::rename(char const*, char const*)+0xbc>
c001c87c:	b8 00 00 00 00       	mov    eax,0x0
c001c881:	eb 09                	jmp    c001c88c <FAT::rename(char const*, char const*)+0xc4>
c001c883:	90                   	nop
c001c884:	b8 01 00 00 00       	mov    eax,0x1
c001c889:	8d 76 00             	lea    esi,[esi+0x0]
c001c88c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c892:	c3                   	ret    
c001c893:	90                   	nop

c001c894 <FAT::mkdir(char const*)>:
c001c894:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c89a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c8a2:	75 08                	jne    c001c8ac <FAT::mkdir(char const*)+0x18>
c001c8a4:	b8 04 00 00 00       	mov    eax,0x4
c001c8a9:	eb 61                	jmp    c001c90c <FAT::mkdir(char const*)+0x78>
c001c8ab:	90                   	nop
c001c8ac:	83 ec 08             	sub    esp,0x8
c001c8af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8ba:	50                   	push   eax
c001c8bb:	e8 90 3e fe ff       	call   c0000750 <strcpy>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	83 ec 08             	sub    esp,0x8
c001c8c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8ca:	50                   	push   eax
c001c8cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8d2:	e8 f5 f9 ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c8d7:	83 c4 10             	add    esp,0x10
c001c8da:	83 ec 0c             	sub    esp,0xc
c001c8dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8e1:	50                   	push   eax
c001c8e2:	e8 80 9c fe ff       	call   c0006567 <f_mkdir>
c001c8e7:	83 c4 10             	add    esp,0x10
c001c8ea:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c8f1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c8f8:	85 c0                	test   eax,eax
c001c8fa:	75 08                	jne    c001c904 <FAT::mkdir(char const*)+0x70>
c001c8fc:	b8 00 00 00 00       	mov    eax,0x0
c001c901:	eb 09                	jmp    c001c90c <FAT::mkdir(char const*)+0x78>
c001c903:	90                   	nop
c001c904:	b8 01 00 00 00       	mov    eax,0x1
c001c909:	8d 76 00             	lea    esi,[esi+0x0]
c001c90c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c912:	c3                   	ret    
c001c913:	90                   	nop

c001c914 <FAT::exists(char const*)>:
c001c914:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c91a:	83 ec 08             	sub    esp,0x8
c001c91d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c924:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c928:	50                   	push   eax
c001c929:	e8 22 3e fe ff       	call   c0000750 <strcpy>
c001c92e:	83 c4 10             	add    esp,0x10
c001c931:	83 ec 08             	sub    esp,0x8
c001c934:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c938:	50                   	push   eax
c001c939:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c940:	e8 87 f9 ff ff       	call   c001c2cc <FAT::fixFilepath(char*)>
c001c945:	83 c4 10             	add    esp,0x10
c001c948:	83 ec 08             	sub    esp,0x8
c001c94b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c952:	50                   	push   eax
c001c953:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c957:	50                   	push   eax
c001c958:	e8 35 97 fe ff       	call   c0006092 <f_stat>
c001c95d:	83 c4 10             	add    esp,0x10
c001c960:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c967:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c96e:	85 c0                	test   eax,eax
c001c970:	75 06                	jne    c001c978 <FAT::exists(char const*)+0x64>
c001c972:	b0 01                	mov    al,0x1
c001c974:	eb 06                	jmp    c001c97c <FAT::exists(char const*)+0x68>
c001c976:	66 90                	xchg   ax,ax
c001c978:	b0 00                	mov    al,0x0
c001c97a:	66 90                	xchg   ax,ax
c001c97c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c982:	c3                   	ret    
c001c983:	90                   	nop

c001c984 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c984:	b8 08 00 00 00       	mov    eax,0x8
c001c989:	c3                   	ret    

c001c98a <ISO9660::seek(void*, unsigned long long)>:
c001c98a:	53                   	push   ebx
c001c98b:	b8 04 00 00 00       	mov    eax,0x4
c001c990:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c994:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c998:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c99c:	85 d2                	test   edx,edx
c001c99e:	74 17                	je     c001c9b7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c9a0:	89 c8                	mov    eax,ecx
c001c9a2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c9a5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c9a8:	b8 01 00 00 00       	mov    eax,0x1
c001c9ad:	73 08                	jae    c001c9b7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c9af:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c9b2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c9b5:	31 c0                	xor    eax,eax
c001c9b7:	5b                   	pop    ebx
c001c9b8:	c3                   	ret    
c001c9b9:	90                   	nop

c001c9ba <ISO9660::tell(void*, unsigned long long*)>:
c001c9ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9c2:	85 d2                	test   edx,edx
c001c9c4:	74 12                	je     c001c9d8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c9c6:	85 c0                	test   eax,eax
c001c9c8:	74 0e                	je     c001c9d8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c9ca:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c9cd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c9d0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c9d3:	89 10                	mov    DWORD PTR [eax],edx
c001c9d5:	31 c0                	xor    eax,eax
c001c9d7:	c3                   	ret    
c001c9d8:	b8 04 00 00 00       	mov    eax,0x4
c001c9dd:	c3                   	ret    

c001c9de <ISO9660::getName()>:
c001c9de:	b8 7c 70 02 c0       	mov    eax,0xc002707c
c001c9e3:	c3                   	ret    

c001c9e4 <ISO9660::stat(void*, unsigned long long*)>:
c001c9e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9ec:	85 d2                	test   edx,edx
c001c9ee:	74 12                	je     c001ca02 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c9f0:	85 c0                	test   eax,eax
c001c9f2:	74 0e                	je     c001ca02 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c9f4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c9f7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c9fa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c9fd:	89 10                	mov    DWORD PTR [eax],edx
c001c9ff:	31 c0                	xor    eax,eax
c001ca01:	c3                   	ret    
c001ca02:	b8 04 00 00 00       	mov    eax,0x4
c001ca07:	c3                   	ret    

c001ca08 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ca08:	b8 01 00 00 00       	mov    eax,0x1
c001ca0d:	c3                   	ret    

c001ca0e <ISO9660::unlink(char const*)>:
c001ca0e:	b8 01 00 00 00       	mov    eax,0x1
c001ca13:	c3                   	ret    

c001ca14 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ca14:	b8 01 00 00 00       	mov    eax,0x1
c001ca19:	c3                   	ret    

c001ca1a <ISO9660::rename(char const*, char const*)>:
c001ca1a:	b8 01 00 00 00       	mov    eax,0x1
c001ca1f:	c3                   	ret    

c001ca20 <ISO9660::mkdir(char const*)>:
c001ca20:	b8 01 00 00 00       	mov    eax,0x1
c001ca25:	c3                   	ret    

c001ca26 <ISO9660::close(void*)>:
c001ca26:	83 ec 0c             	sub    esp,0xc
c001ca29:	b8 04 00 00 00       	mov    eax,0x4
c001ca2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca32:	85 d2                	test   edx,edx
c001ca34:	74 0e                	je     c001ca44 <ISO9660::close(void*)+0x1e>
c001ca36:	83 ec 0c             	sub    esp,0xc
c001ca39:	52                   	push   edx
c001ca3a:	e8 b8 d3 fe ff       	call   c0009df7 <free>
c001ca3f:	83 c4 10             	add    esp,0x10
c001ca42:	31 c0                	xor    eax,eax
c001ca44:	83 c4 0c             	add    esp,0xc
c001ca47:	c3                   	ret    

c001ca48 <ISO9660::closeDir(void*)>:
c001ca48:	83 ec 0c             	sub    esp,0xc
c001ca4b:	b8 04 00 00 00       	mov    eax,0x4
c001ca50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca54:	85 d2                	test   edx,edx
c001ca56:	74 0e                	je     c001ca66 <ISO9660::closeDir(void*)+0x1e>
c001ca58:	83 ec 0c             	sub    esp,0xc
c001ca5b:	52                   	push   edx
c001ca5c:	e8 96 d3 fe ff       	call   c0009df7 <free>
c001ca61:	83 c4 10             	add    esp,0x10
c001ca64:	31 c0                	xor    eax,eax
c001ca66:	83 c4 0c             	add    esp,0xc
c001ca69:	c3                   	ret    

c001ca6a <ISO9660::~ISO9660()>:
c001ca6a:	83 ec 0c             	sub    esp,0xc
c001ca6d:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c001ca72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca76:	89 10                	mov    DWORD PTR [eax],edx
c001ca78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7c:	83 ec 0c             	sub    esp,0xc
c001ca7f:	50                   	push   eax
c001ca80:	e8 b1 09 ff ff       	call   c000d436 <Filesystem::~Filesystem()>
c001ca85:	83 c4 10             	add    esp,0x10
c001ca88:	90                   	nop
c001ca89:	83 c4 0c             	add    esp,0xc
c001ca8c:	c3                   	ret    
c001ca8d:	90                   	nop

c001ca8e <ISO9660::~ISO9660()>:
c001ca8e:	83 ec 0c             	sub    esp,0xc
c001ca91:	83 ec 0c             	sub    esp,0xc
c001ca94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca98:	e8 cd ff ff ff       	call   c001ca6a <ISO9660::~ISO9660()>
c001ca9d:	83 c4 10             	add    esp,0x10
c001caa0:	83 ec 08             	sub    esp,0x8
c001caa3:	6a 08                	push   0x8
c001caa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caa9:	e8 6c 05 ff ff       	call   c000d01a <operator delete(void*, unsigned long)>
c001caae:	83 c4 10             	add    esp,0x10
c001cab1:	83 c4 0c             	add    esp,0xc
c001cab4:	c3                   	ret    

c001cab5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001cab5:	55                   	push   ebp
c001cab6:	31 c9                	xor    ecx,ecx
c001cab8:	57                   	push   edi
c001cab9:	56                   	push   esi
c001caba:	53                   	push   ebx
c001cabb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001cabf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cac3:	89 eb                	mov    ebx,ebp
c001cac5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001cac9:	39 ce                	cmp    esi,ecx
c001cacb:	7e 17                	jle    c001cae4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001cacd:	31 d2                	xor    edx,edx
c001cacf:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001cad3:	7d 13                	jge    c001cae8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001cad5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cad9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001cadc:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001cadf:	75 0d                	jne    c001caee <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001cae1:	42                   	inc    edx
c001cae2:	eb eb                	jmp    c001cacf <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001cae4:	31 c0                	xor    eax,eax
c001cae6:	eb 0a                	jmp    c001caf2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cae8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001caec:	eb 04                	jmp    c001caf2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001caee:	41                   	inc    ecx
c001caef:	43                   	inc    ebx
c001caf0:	eb d7                	jmp    c001cac9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001caf2:	5b                   	pop    ebx
c001caf3:	5e                   	pop    esi
c001caf4:	5f                   	pop    edi
c001caf5:	5d                   	pop    ebp
c001caf6:	c3                   	ret    

c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001caf7:	57                   	push   edi
c001caf8:	56                   	push   esi
c001caf9:	53                   	push   ebx
c001cafa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cafe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cb06:	39 35 20 a3 02 c0    	cmp    DWORD PTR ds:0xc002a320,esi
c001cb0c:	75 08                	jne    c001cb16 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001cb0e:	38 1d 34 86 02 c0    	cmp    BYTE PTR ds:0xc0028634,bl
c001cb14:	74 4a                	je     c001cb60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	31 d2                	xor    edx,edx
c001cb1b:	68 40 a3 02 c0       	push   0xc002a340
c001cb20:	0f be c3             	movsx  eax,bl
c001cb23:	6a 01                	push   0x1
c001cb25:	52                   	push   edx
c001cb26:	56                   	push   esi
c001cb27:	ff 34 85 bc 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f44]
c001cb2e:	e8 4b 3f ff ff       	call   c0010a7e <LogicalDisk::read(unsigned long long, int, void*)>
c001cb33:	83 c4 20             	add    esp,0x20
c001cb36:	85 c0                	test   eax,eax
c001cb38:	75 0e                	jne    c001cb48 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001cb3a:	89 35 20 a3 02 c0    	mov    DWORD PTR ds:0xc002a320,esi
c001cb40:	88 1d 34 86 02 c0    	mov    BYTE PTR ds:0xc0028634,bl
c001cb46:	eb 18                	jmp    c001cb60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb48:	50                   	push   eax
c001cb49:	68 00 08 00 00       	push   0x800
c001cb4e:	6a 00                	push   0x0
c001cb50:	57                   	push   edi
c001cb51:	e8 3e 3b fe ff       	call   c0000694 <memset>
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	b8 01 00 00 00       	mov    eax,0x1
c001cb5e:	eb 0e                	jmp    c001cb6e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001cb60:	be 40 a3 02 c0       	mov    esi,0xc002a340
c001cb65:	b9 00 08 00 00       	mov    ecx,0x800
c001cb6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb6c:	31 c0                	xor    eax,eax
c001cb6e:	5b                   	pop    ebx
c001cb6f:	5e                   	pop    esi
c001cb70:	5f                   	pop    edi
c001cb71:	c3                   	ret    

c001cb72 <ISO9660::tryMount(LogicalDisk*, int)>:
c001cb72:	81 ec 10 08 00 00    	sub    esp,0x810
c001cb78:	c7 05 20 a3 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a320,0xdeadbeef
c001cb82:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001cb89:	83 c0 41             	add    eax,0x41
c001cb8c:	0f be c0             	movsx  eax,al
c001cb8f:	50                   	push   eax
c001cb90:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cb94:	50                   	push   eax
c001cb95:	6a 10                	push   0x10
c001cb97:	e8 5b ff ff ff       	call   c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb9c:	83 c4 10             	add    esp,0x10
c001cb9f:	31 d2                	xor    edx,edx
c001cba1:	85 c0                	test   eax,eax
c001cba3:	75 24                	jne    c001cbc9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cba5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cbaa:	75 1d                	jne    c001cbc9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbac:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001cbb1:	75 16                	jne    c001cbc9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbb3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001cbb8:	75 0f                	jne    c001cbc9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbba:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cbbf:	75 08                	jne    c001cbc9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cbc1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cbc6:	0f 94 c2             	sete   dl
c001cbc9:	88 d0                	mov    al,dl
c001cbcb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001cbd1:	c3                   	ret    

c001cbd2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cbd2:	55                   	push   ebp
c001cbd3:	57                   	push   edi
c001cbd4:	56                   	push   esi
c001cbd5:	53                   	push   ebx
c001cbd6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001cbdc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001cbe3:	85 ed                	test   ebp,ebp
c001cbe5:	0f 84 da 01 00 00    	je     c001cdc5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cbeb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001cbf3:	0f 84 cc 01 00 00    	je     c001cdc5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cbf9:	b8 01 00 00 00       	mov    eax,0x1
c001cbfe:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001cc02:	0f 85 c2 01 00 00    	jne    c001cdca <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cc08:	31 d2                	xor    edx,edx
c001cc0a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001cc11:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cc14:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001cc17:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001cc1a:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc21:	01 c8                	add    eax,ecx
c001cc23:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cc26:	11 da                	adc    edx,ebx
c001cc28:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001cc2c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cc30:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc34:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc38:	19 d7                	sbb    edi,edx
c001cc3a:	72 11                	jb     c001cc4d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001cc3c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001cc3f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001cc43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cc4b:	eb 0c                	jmp    c001cc59 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001cc4d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001cc51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc55:	29 ce                	sub    esi,ecx
c001cc57:	19 df                	sbb    edi,ebx
c001cc59:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc5c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001cc5f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001cc63:	c1 e0 0b             	shl    eax,0xb
c001cc66:	01 c8                	add    eax,ecx
c001cc68:	11 da                	adc    edx,ebx
c001cc6a:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc71:	51                   	push   ecx
c001cc72:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cc76:	50                   	push   eax
c001cc77:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001cc7b:	53                   	push   ebx
c001cc7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cc80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc84:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cc88:	50                   	push   eax
c001cc89:	e8 69 fe ff ff       	call   c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc8e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001cc91:	b8 00 08 00 00       	mov    eax,0x800
c001cc96:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001cc9c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001cca0:	29 d0                	sub    eax,edx
c001cca2:	83 c4 10             	add    esp,0x10
c001cca5:	89 f9                	mov    ecx,edi
c001cca7:	39 c6                	cmp    esi,eax
c001cca9:	83 d9 00             	sbb    ecx,0x0
c001ccac:	7d 1b                	jge    c001ccc9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001ccae:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ccb3:	75 12                	jne    c001ccc7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001ccb5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ccbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ccc2:	e9 fa 00 00 00       	jmp    c001cdc1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001ccc7:	89 f0                	mov    eax,esi
c001ccc9:	01 d3                	add    ebx,edx
c001cccb:	31 d2                	xor    edx,edx
c001cccd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ccd1:	39 c2                	cmp    edx,eax
c001ccd3:	7d 14                	jge    c001cce9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001ccd5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001ccdc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cce0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001cce3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001cce6:	42                   	inc    edx
c001cce7:	eb e8                	jmp    c001ccd1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001cce9:	89 c2                	mov    edx,eax
c001cceb:	85 c0                	test   eax,eax
c001cced:	79 02                	jns    c001ccf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001ccef:	31 d2                	xor    edx,edx
c001ccf1:	01 c2                	add    edx,eax
c001ccf3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001ccf6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001ccfd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001cd01:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cd05:	99                   	cdq    
c001cd06:	01 c1                	add    ecx,eax
c001cd08:	11 d3                	adc    ebx,edx
c001cd0a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001cd0e:	29 c6                	sub    esi,eax
c001cd10:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001cd14:	19 d7                	sbb    edi,edx
c001cd16:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001cd1d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cd22:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cd25:	b8 00 00 00 00       	mov    eax,0x0
c001cd2a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cd2e:	7d 43                	jge    c001cd73 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cd30:	52                   	push   edx
c001cd31:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd35:	50                   	push   eax
c001cd36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd42:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cd46:	50                   	push   eax
c001cd47:	e8 ab fd ff ff       	call   c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd4c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cd54:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cd59:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cd61:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cd69:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cd6e:	83 c4 10             	add    esp,0x10
c001cd71:	eb aa                	jmp    c001cd1d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cd73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd77:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cd7a:	74 2a                	je     c001cda6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cd7c:	50                   	push   eax
c001cd7d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd81:	50                   	push   eax
c001cd82:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cd86:	56                   	push   esi
c001cd87:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd8b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd8f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cd93:	51                   	push   ecx
c001cd94:	e8 5e fd ff ff       	call   c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd99:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cd9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cda1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cda3:	83 c4 10             	add    esp,0x10
c001cda6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cdad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cdb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cdb5:	89 18                	mov    DWORD PTR [eax],ebx
c001cdb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cdbb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cdbe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cdc1:	31 c0                	xor    eax,eax
c001cdc3:	eb 05                	jmp    c001cdca <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cdc5:	b8 04 00 00 00       	mov    eax,0x4
c001cdca:	81 c4 2c 08 00 00    	add    esp,0x82c
c001cdd0:	5b                   	pop    ebx
c001cdd1:	5e                   	pop    esi
c001cdd2:	5f                   	pop    edi
c001cdd3:	5d                   	pop    ebp
c001cdd4:	c3                   	ret    
c001cdd5:	90                   	nop

c001cdd6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cdd6:	55                   	push   ebp
c001cdd7:	57                   	push   edi
c001cdd8:	56                   	push   esi
c001cdd9:	53                   	push   ebx
c001cdda:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001cde0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001cde7:	85 ed                	test   ebp,ebp
c001cde9:	0f 84 51 02 00 00    	je     c001d040 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cdef:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001cdf7:	0f 84 43 02 00 00    	je     c001d040 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cdfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce00:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001ce03:	75 0a                	jne    c001ce0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001ce05:	b8 07 00 00 00       	mov    eax,0x7
c001ce0a:	e9 36 02 00 00       	jmp    c001d045 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ce0f:	50                   	push   eax
c001ce10:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ce14:	50                   	push   eax
c001ce15:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ce1c:	53                   	push   ebx
c001ce1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce20:	c1 e0 0b             	shl    eax,0xb
c001ce23:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001ce26:	c1 e8 0b             	shr    eax,0xb
c001ce29:	50                   	push   eax
c001ce2a:	e8 c8 fc ff ff       	call   c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce2f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce32:	83 c4 10             	add    esp,0x10
c001ce35:	89 c1                	mov    ecx,eax
c001ce37:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001ce3a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ce40:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001ce43:	84 db                	test   bl,bl
c001ce45:	0f 85 8b 00 00 00    	jne    c001ced6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001ce4b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001ce51:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ce54:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001ce5a:	29 c6                	sub    esi,eax
c001ce5c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001ce60:	89 f3                	mov    ebx,esi
c001ce62:	89 f1                	mov    ecx,esi
c001ce64:	c1 fb 1f             	sar    ebx,0x1f
c001ce67:	01 f0                	add    eax,esi
c001ce69:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ce6c:	11 da                	adc    edx,ebx
c001ce6e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce71:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ce75:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ce78:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ce7b:	89 d8                	mov    eax,ebx
c001ce7d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001ce81:	ba 00 00 00 00       	mov    edx,0x0
c001ce86:	19 f8                	sbb    eax,edi
c001ce88:	b8 00 00 00 00       	mov    eax,0x0
c001ce8d:	73 08                	jae    c001ce97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001ce8f:	89 f0                	mov    eax,esi
c001ce91:	89 fa                	mov    edx,edi
c001ce93:	29 c8                	sub    eax,ecx
c001ce95:	19 da                	sbb    edx,ebx
c001ce97:	89 d7                	mov    edi,edx
c001ce99:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ce9c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ce9f:	09 c7                	or     edi,eax
c001cea1:	0f 84 5e ff ff ff    	je     c001ce05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001cea7:	57                   	push   edi
c001cea8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ceac:	50                   	push   eax
c001cead:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ceb4:	53                   	push   ebx
c001ceb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ceb8:	c1 e0 0b             	shl    eax,0xb
c001cebb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001cebf:	c1 e8 0b             	shr    eax,0xb
c001cec2:	50                   	push   eax
c001cec3:	e8 2f fc ff ff       	call   c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cec8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cecb:	83 c4 10             	add    esp,0x10
c001cece:	25 ff 07 00 00       	and    eax,0x7ff
c001ced3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ced6:	31 ff                	xor    edi,edi
c001ced8:	56                   	push   esi
c001ced9:	6a 28                	push   0x28
c001cedb:	6a 00                	push   0x0
c001cedd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cee1:	50                   	push   eax
c001cee2:	e8 ad 37 fe ff       	call   c0000694 <memset>
c001cee7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ceea:	25 ff 07 00 00       	and    eax,0x7ff
c001ceef:	89 c6                	mov    esi,eax
c001cef1:	83 c6 21             	add    esi,0x21
c001cef4:	83 d7 00             	adc    edi,0x0
c001cef7:	83 c4 10             	add    esp,0x10
c001cefa:	31 c9                	xor    ecx,ecx
c001cefc:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cf03:	83 f9 28             	cmp    ecx,0x28
c001cf06:	88 04 24             	mov    BYTE PTR [esp],al
c001cf09:	0f 94 c2             	sete   dl
c001cf0c:	88 d0                	mov    al,dl
c001cf0e:	ba ff 07 00 00       	mov    edx,0x7ff
c001cf13:	39 f2                	cmp    edx,esi
c001cf15:	ba 00 00 00 00       	mov    edx,0x0
c001cf1a:	19 fa                	sbb    edx,edi
c001cf1c:	0f 92 c2             	setb   dl
c001cf1f:	09 c2                	or     edx,eax
c001cf21:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cf25:	0f 94 c0             	sete   al
c001cf28:	08 d0                	or     al,dl
c001cf2a:	75 16                	jne    c001cf42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf2c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cf30:	74 10                	je     c001cf42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf32:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cf35:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cf39:	41                   	inc    ecx
c001cf3a:	83 c6 01             	add    esi,0x1
c001cf3d:	83 d7 00             	adc    edi,0x0
c001cf40:	eb ba                	jmp    c001cefc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cf42:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cf49:	83 ec 0c             	sub    esp,0xc
c001cf4c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cf50:	56                   	push   esi
c001cf51:	e8 5a 37 fe ff       	call   c00006b0 <strlen>
c001cf56:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cf5d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cf61:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cf69:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf6c:	5a                   	pop    edx
c001cf6d:	25 ff 07 00 00       	and    eax,0x7ff
c001cf72:	59                   	pop    ecx
c001cf73:	01 f8                	add    eax,edi
c001cf75:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cf7b:	83 e0 02             	and    eax,0x2
c001cf7e:	3c 01                	cmp    al,0x1
c001cf80:	19 c0                	sbb    eax,eax
c001cf82:	83 c0 02             	add    eax,0x2
c001cf85:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cf89:	56                   	push   esi
c001cf8a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cf8e:	50                   	push   eax
c001cf8f:	e8 bc 37 fe ff       	call   c0000750 <strcpy>
c001cf94:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cf98:	83 c4 10             	add    esp,0x10
c001cf9b:	84 c0                	test   al,al
c001cf9d:	75 21                	jne    c001cfc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cf9f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cfa7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfaf:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cfb7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cfbe:	eb 28                	jmp    c001cfe8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cfc0:	fe c8                	dec    al
c001cfc2:	75 24                	jne    c001cfe8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cfc4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cfcc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfd4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cfdc:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001cfe3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001cfe8:	8d 74 24 40          	lea    esi,[esp+0x40]
c001cfec:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001cff3:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001cffa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cffc:	0f b6 f3             	movzx  esi,bl
c001cfff:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001d006:	31 db                	xor    ebx,ebx
c001d008:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001d00e:	89 df                	mov    edi,ebx
c001d010:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001d013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d016:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001d019:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d01c:	39 c6                	cmp    esi,eax
c001d01e:	19 d7                	sbb    edi,edx
c001d020:	72 10                	jb     c001d032 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001d022:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001d029:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001d030:	eb 0a                	jmp    c001d03c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001d032:	29 f0                	sub    eax,esi
c001d034:	19 da                	sbb    edx,ebx
c001d036:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001d039:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001d03c:	31 c0                	xor    eax,eax
c001d03e:	eb 05                	jmp    c001d045 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001d040:	b8 04 00 00 00       	mov    eax,0x4
c001d045:	81 c4 5c 09 00 00    	add    esp,0x95c
c001d04b:	5b                   	pop    ebx
c001d04c:	5e                   	pop    esi
c001d04d:	5f                   	pop    edi
c001d04e:	5d                   	pop    ebp
c001d04f:	c3                   	ret    

c001d050 <readRoot(unsigned int*, unsigned int*, char)>:
c001d050:	57                   	push   edi
c001d051:	56                   	push   esi
c001d052:	81 ec 38 08 00 00    	sub    esp,0x838
c001d058:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001d060:	50                   	push   eax
c001d061:	8d 44 24 38          	lea    eax,[esp+0x38]
c001d065:	50                   	push   eax
c001d066:	6a 10                	push   0x10
c001d068:	e8 8a fa ff ff       	call   c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d06d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001d074:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001d078:	b9 22 00 00 00       	mov    ecx,0x22
c001d07d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d07f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001d086:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d08a:	89 10                	mov    DWORD PTR [eax],edx
c001d08c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001d093:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d097:	89 10                	mov    DWORD PTR [eax],edx
c001d099:	81 c4 44 08 00 00    	add    esp,0x844
c001d09f:	b0 01                	mov    al,0x1
c001d0a1:	5e                   	pop    esi
c001d0a2:	5f                   	pop    edi
c001d0a3:	c3                   	ret    

c001d0a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001d0a4:	55                   	push   ebp
c001d0a5:	57                   	push   edi
c001d0a6:	56                   	push   esi
c001d0a7:	53                   	push   ebx
c001d0a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d0ae:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d0b5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001d0bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0c0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001d0c4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d0c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0cc:	75 03                	jne    c001d0d1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d0ce:	83 c3 02             	add    ebx,0x2
c001d0d1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001d0d4:	75 03                	jne    c001d0d9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001d0d6:	43                   	inc    ebx
c001d0d7:	eb f8                	jmp    c001d0d1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d0d9:	52                   	push   edx
c001d0da:	68 00 01 00 00       	push   0x100
c001d0df:	6a 00                	push   0x0
c001d0e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0e5:	50                   	push   eax
c001d0e6:	e8 a9 35 fe ff       	call   c0000694 <memset>
c001d0eb:	83 c4 10             	add    esp,0x10
c001d0ee:	31 d2                	xor    edx,edx
c001d0f0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001d0f3:	84 c0                	test   al,al
c001d0f5:	74 21                	je     c001d118 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001d0f7:	3c 2f                	cmp    al,0x2f
c001d0f9:	75 0b                	jne    c001d106 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001d0fb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001d0ff:	bd 01 00 00 00       	mov    ebp,0x1
c001d104:	eb 14                	jmp    c001d11a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001d106:	8d 48 9f             	lea    ecx,[eax-0x61]
c001d109:	80 f9 19             	cmp    cl,0x19
c001d10c:	77 03                	ja     c001d111 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d10e:	83 e8 20             	sub    eax,0x20
c001d111:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001d115:	42                   	inc    edx
c001d116:	eb d8                	jmp    c001d0f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001d118:	31 ed                	xor    ebp,ebp
c001d11a:	83 ec 0c             	sub    esp,0xc
c001d11d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001d124:	e8 be cc fe ff       	call   c0009de7 <malloc>
c001d129:	89 c6                	mov    esi,eax
c001d12b:	89 c2                	mov    edx,eax
c001d12d:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001d134:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001d13a:	c1 ef 0b             	shr    edi,0xb
c001d13d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001d144:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001d148:	83 c4 10             	add    esp,0x10
c001d14b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001d150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d154:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001d15b:	74 29                	je     c001d186 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001d15d:	50                   	push   eax
c001d15e:	57                   	push   edi
c001d15f:	52                   	push   edx
c001d160:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d164:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001d16b:	e8 87 f9 ff ff       	call   c001caf7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d170:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d174:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001d17b:	81 c2 00 08 00 00    	add    edx,0x800
c001d181:	83 c4 10             	add    esp,0x10
c001d184:	eb ca                	jmp    c001d150 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001d186:	83 ec 0c             	sub    esp,0xc
c001d189:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d18d:	57                   	push   edi
c001d18e:	e8 1d 35 fe ff       	call   c00006b0 <strlen>
c001d193:	50                   	push   eax
c001d194:	57                   	push   edi
c001d195:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001d19c:	56                   	push   esi
c001d19d:	e8 13 f9 ff ff       	call   c001cab5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001d1a2:	83 c4 20             	add    esp,0x20
c001d1a5:	85 c0                	test   eax,eax
c001d1a7:	75 13                	jne    c001d1bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001d1a9:	83 ec 0c             	sub    esp,0xc
c001d1ac:	56                   	push   esi
c001d1ad:	e8 45 cc fe ff       	call   c0009df7 <free>
c001d1b2:	83 c4 10             	add    esp,0x10
c001d1b5:	31 c0                	xor    eax,eax
c001d1b7:	e9 b3 00 00 00       	jmp    c001d26f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d1bc:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001d1c0:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001d1c4:	c1 e7 08             	shl    edi,0x8
c001d1c7:	c1 e2 10             	shl    edx,0x10
c001d1ca:	09 d7                	or     edi,edx
c001d1cc:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001d1d0:	09 d7                	or     edi,edx
c001d1d2:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001d1d6:	c1 e2 18             	shl    edx,0x18
c001d1d9:	09 d7                	or     edi,edx
c001d1db:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001d1df:	89 d1                	mov    ecx,edx
c001d1e1:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001d1e5:	c1 e1 08             	shl    ecx,0x8
c001d1e8:	c1 e2 10             	shl    edx,0x10
c001d1eb:	09 ca                	or     edx,ecx
c001d1ed:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001d1f1:	09 ca                	or     edx,ecx
c001d1f3:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001d1f7:	c1 e1 18             	shl    ecx,0x18
c001d1fa:	09 ca                	or     edx,ecx
c001d1fc:	89 e9                	mov    ecx,ebp
c001d1fe:	84 c9                	test   cl,cl
c001d200:	74 3c                	je     c001d23e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001d202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d206:	83 ec 0c             	sub    esp,0xc
c001d209:	56                   	push   esi
c001d20a:	e8 e8 cb fe ff       	call   c0009df7 <free>
c001d20f:	83 c4 0c             	add    esp,0xc
c001d212:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d219:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d21e:	50                   	push   eax
c001d21f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d226:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d22d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d231:	52                   	push   edx
c001d232:	57                   	push   edi
c001d233:	53                   	push   ebx
c001d234:	e8 6b fe ff ff       	call   c001d0a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d239:	83 c4 20             	add    esp,0x20
c001d23c:	eb 31                	jmp    c001d26f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d23e:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d241:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d248:	d0 e8                	shr    al,1
c001d24a:	89 3b                	mov    DWORD PTR [ebx],edi
c001d24c:	83 e0 01             	and    eax,0x1
c001d24f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d256:	83 ec 0c             	sub    esp,0xc
c001d259:	89 13                	mov    DWORD PTR [ebx],edx
c001d25b:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d262:	89 03                	mov    DWORD PTR [ebx],eax
c001d264:	56                   	push   esi
c001d265:	e8 8d cb fe ff       	call   c0009df7 <free>
c001d26a:	83 c4 10             	add    esp,0x10
c001d26d:	b0 01                	mov    al,0x1
c001d26f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d275:	5b                   	pop    ebx
c001d276:	5e                   	pop    esi
c001d277:	5f                   	pop    edi
c001d278:	5d                   	pop    ebp
c001d279:	c3                   	ret    

c001d27a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d27a:	55                   	push   ebp
c001d27b:	57                   	push   edi
c001d27c:	56                   	push   esi
c001d27d:	53                   	push   ebx
c001d27e:	83 ec 20             	sub    esp,0x20
c001d281:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d285:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d289:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d28d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d295:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d29d:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d2a2:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d2a8:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d2ae:	57                   	push   edi
c001d2af:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d2b3:	50                   	push   eax
c001d2b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d2b8:	50                   	push   eax
c001d2b9:	e8 92 fd ff ff       	call   c001d050 <readRoot(unsigned int*, unsigned int*, char)>
c001d2be:	5a                   	pop    edx
c001d2bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2c3:	e8 e8 33 fe ff       	call   c00006b0 <strlen>
c001d2c8:	83 c4 10             	add    esp,0x10
c001d2cb:	83 f8 03             	cmp    eax,0x3
c001d2ce:	77 17                	ja     c001d2e7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d2d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2d4:	89 03                	mov    DWORD PTR [ebx],eax
c001d2d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2da:	89 06                	mov    DWORD PTR [esi],eax
c001d2dc:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d2e3:	b0 01                	mov    al,0x1
c001d2e5:	eb 19                	jmp    c001d300 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d2e7:	50                   	push   eax
c001d2e8:	55                   	push   ebp
c001d2e9:	57                   	push   edi
c001d2ea:	56                   	push   esi
c001d2eb:	53                   	push   ebx
c001d2ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2f8:	e8 a7 fd ff ff       	call   c001d0a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d2fd:	83 c4 20             	add    esp,0x20
c001d300:	83 c4 1c             	add    esp,0x1c
c001d303:	5b                   	pop    ebx
c001d304:	5e                   	pop    esi
c001d305:	5f                   	pop    edi
c001d306:	5d                   	pop    ebp
c001d307:	c3                   	ret    

c001d308 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d308:	57                   	push   edi
c001d309:	56                   	push   esi
c001d30a:	53                   	push   ebx
c001d30b:	83 ec 10             	sub    esp,0x10
c001d30e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d312:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d316:	85 ff                	test   edi,edi
c001d318:	0f 84 8b 00 00 00    	je     c001d3a9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d31e:	85 f6                	test   esi,esi
c001d320:	0f 84 83 00 00 00    	je     c001d3a9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d326:	b8 03 00 00 00       	mov    eax,0x3
c001d32b:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d330:	75 7c                	jne    c001d3ae <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d332:	83 ec 0c             	sub    esp,0xc
c001d335:	6a 1c                	push   0x1c
c001d337:	e8 ab ca fe ff       	call   c0009de7 <malloc>
c001d33c:	89 07                	mov    DWORD PTR [edi],eax
c001d33e:	89 c3                	mov    ebx,eax
c001d340:	58                   	pop    eax
c001d341:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d345:	50                   	push   eax
c001d346:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d349:	50                   	push   eax
c001d34a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d34e:	50                   	push   eax
c001d34f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d353:	50                   	push   eax
c001d354:	56                   	push   esi
c001d355:	e8 20 ff ff ff       	call   c001d27a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d35a:	83 c4 20             	add    esp,0x20
c001d35d:	84 c0                	test   al,al
c001d35f:	74 07                	je     c001d368 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d361:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d366:	74 0b                	je     c001d373 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d368:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d36c:	b8 01 00 00 00       	mov    eax,0x1
c001d371:	eb 3b                	jmp    c001d3ae <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d373:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d377:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d37b:	89 03                	mov    DWORD PTR [ebx],eax
c001d37d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d388:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d38f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d396:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d399:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d3a0:	8a 06                	mov    al,BYTE PTR [esi]
c001d3a2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d3a5:	31 c0                	xor    eax,eax
c001d3a7:	eb 05                	jmp    c001d3ae <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d3a9:	b8 04 00 00 00       	mov    eax,0x4
c001d3ae:	83 c4 10             	add    esp,0x10
c001d3b1:	5b                   	pop    ebx
c001d3b2:	5e                   	pop    esi
c001d3b3:	5f                   	pop    edi
c001d3b4:	c3                   	ret    
c001d3b5:	90                   	nop

c001d3b6 <ISO9660::exists(char const*)>:
c001d3b6:	83 ec 28             	sub    esp,0x28
c001d3b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3bd:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d3c1:	52                   	push   edx
c001d3c2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d3c5:	52                   	push   edx
c001d3c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d3ca:	52                   	push   edx
c001d3cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d3cf:	52                   	push   edx
c001d3d0:	50                   	push   eax
c001d3d1:	e8 a4 fe ff ff       	call   c001d27a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d3d6:	83 c4 3c             	add    esp,0x3c
c001d3d9:	c3                   	ret    

c001d3da <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d3da:	56                   	push   esi
c001d3db:	53                   	push   ebx
c001d3dc:	83 ec 14             	sub    esp,0x14
c001d3df:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d3e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3e7:	85 db                	test   ebx,ebx
c001d3e9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d3ed:	0f 94 c2             	sete   dl
c001d3f0:	85 f6                	test   esi,esi
c001d3f2:	0f 94 c0             	sete   al
c001d3f5:	08 c2                	or     dl,al
c001d3f7:	75 68                	jne    c001d461 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d3f9:	85 c9                	test   ecx,ecx
c001d3fb:	74 64                	je     c001d461 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d3fd:	83 ec 0c             	sub    esp,0xc
c001d400:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d403:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d40d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d414:	50                   	push   eax
c001d415:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d418:	50                   	push   eax
c001d419:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d41d:	50                   	push   eax
c001d41e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d422:	50                   	push   eax
c001d423:	51                   	push   ecx
c001d424:	e8 51 fe ff ff       	call   c001d27a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d429:	83 c4 20             	add    esp,0x20
c001d42c:	ba 01 00 00 00       	mov    edx,0x1
c001d431:	84 c0                	test   al,al
c001d433:	74 31                	je     c001d466 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d435:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d439:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d440:	89 03                	mov    DWORD PTR [ebx],eax
c001d442:	ba 00 00 00 00       	mov    edx,0x0
c001d447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d44b:	85 c0                	test   eax,eax
c001d44d:	0f 95 06             	setne  BYTE PTR [esi]
c001d450:	74 14                	je     c001d466 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d452:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d458:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d45f:	eb 05                	jmp    c001d466 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d461:	ba 04 00 00 00       	mov    edx,0x4
c001d466:	83 c4 14             	add    esp,0x14
c001d469:	89 d0                	mov    eax,edx
c001d46b:	5b                   	pop    ebx
c001d46c:	5e                   	pop    esi
c001d46d:	c3                   	ret    

c001d46e <ISO9660::openDir(char const*, void**)>:
c001d46e:	57                   	push   edi
c001d46f:	56                   	push   esi
c001d470:	53                   	push   ebx
c001d471:	83 ec 10             	sub    esp,0x10
c001d474:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d478:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d47c:	85 ff                	test   edi,edi
c001d47e:	74 7b                	je     c001d4fb <ISO9660::openDir(char const*, void**)+0x8d>
c001d480:	85 f6                	test   esi,esi
c001d482:	74 77                	je     c001d4fb <ISO9660::openDir(char const*, void**)+0x8d>
c001d484:	83 ec 0c             	sub    esp,0xc
c001d487:	6a 1c                	push   0x1c
c001d489:	e8 59 c9 fe ff       	call   c0009de7 <malloc>
c001d48e:	89 07                	mov    DWORD PTR [edi],eax
c001d490:	89 c3                	mov    ebx,eax
c001d492:	58                   	pop    eax
c001d493:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d497:	50                   	push   eax
c001d498:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d49b:	50                   	push   eax
c001d49c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4a0:	50                   	push   eax
c001d4a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4a5:	50                   	push   eax
c001d4a6:	56                   	push   esi
c001d4a7:	e8 ce fd ff ff       	call   c001d27a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d4ac:	83 c4 20             	add    esp,0x20
c001d4af:	84 c0                	test   al,al
c001d4b1:	74 07                	je     c001d4ba <ISO9660::openDir(char const*, void**)+0x4c>
c001d4b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d4b8:	75 0b                	jne    c001d4c5 <ISO9660::openDir(char const*, void**)+0x57>
c001d4ba:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d4be:	b8 01 00 00 00       	mov    eax,0x1
c001d4c3:	eb 3b                	jmp    c001d500 <ISO9660::openDir(char const*, void**)+0x92>
c001d4c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4c9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d4cd:	89 03                	mov    DWORD PTR [ebx],eax
c001d4cf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d4d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d4e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d4e8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d4eb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d4f2:	8a 06                	mov    al,BYTE PTR [esi]
c001d4f4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d4f7:	31 c0                	xor    eax,eax
c001d4f9:	eb 05                	jmp    c001d500 <ISO9660::openDir(char const*, void**)+0x92>
c001d4fb:	b8 04 00 00 00       	mov    eax,0x4
c001d500:	83 c4 10             	add    esp,0x10
c001d503:	5b                   	pop    ebx
c001d504:	5e                   	pop    esi
c001d505:	5f                   	pop    edi
c001d506:	c3                   	ret    
c001d507:	90                   	nop

c001d508 <ISO9660::ISO9660()>:
c001d508:	83 ec 0c             	sub    esp,0xc
c001d50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50f:	83 ec 0c             	sub    esp,0xc
c001d512:	50                   	push   eax
c001d513:	e8 fa fe fe ff       	call   c000d412 <Filesystem::Filesystem()>
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c001d520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d524:	89 10                	mov    DWORD PTR [eax],edx
c001d526:	90                   	nop
c001d527:	83 c4 0c             	add    esp,0xc
c001d52a:	c3                   	ret    
c001d52b:	90                   	nop

c001d52c <SoundCard::beginPlayback()>:
c001d52c:	c7 44 24 04 00 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027100
c001d534:	e9 a4 7c ff ff       	jmp    c00151dd <Krnl::panic(char const*)>
c001d539:	90                   	nop

c001d53a <SoundCard::stopPlayback()>:
c001d53a:	c7 44 24 04 34 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027134
c001d542:	e9 96 7c ff ff       	jmp    c00151dd <Krnl::panic(char const*)>
c001d547:	90                   	nop

c001d548 <SoundCard::SoundCard(char const*)>:
c001d548:	83 ec 1c             	sub    esp,0x1c
c001d54b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d54f:	83 ec 08             	sub    esp,0x8
c001d552:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d556:	50                   	push   eax
c001d557:	e8 16 13 ff ff       	call   c000e872 <Device::Device(char const*)>
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	ba cc 71 02 c0       	mov    edx,0xc00271cc
c001d564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d568:	89 10                	mov    DWORD PTR [eax],edx
c001d56a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d56e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d579:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d587:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d595:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d59f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5a3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d5ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d5b5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d5ba:	7f 19                	jg     c001d5d5 <SoundCard::SoundCard(char const*)+0x8d>
c001d5bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5c4:	83 c2 54             	add    edx,0x54
c001d5c7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d5cf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d5d3:	eb e0                	jmp    c001d5b5 <SoundCard::SoundCard(char const*)+0x6d>
c001d5d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d9:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d5e0:	90                   	nop
c001d5e1:	83 c4 1c             	add    esp,0x1c
c001d5e4:	c3                   	ret    
c001d5e5:	90                   	nop

c001d5e6 <SoundCard::~SoundCard()>:
c001d5e6:	83 ec 0c             	sub    esp,0xc
c001d5e9:	ba cc 71 02 c0       	mov    edx,0xc00271cc
c001d5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f2:	89 10                	mov    DWORD PTR [eax],edx
c001d5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	50                   	push   eax
c001d5fc:	e8 3b 0f ff ff       	call   c000e53c <Device::~Device()>
c001d601:	83 c4 10             	add    esp,0x10
c001d604:	90                   	nop
c001d605:	83 c4 0c             	add    esp,0xc
c001d608:	c3                   	ret    
c001d609:	90                   	nop

c001d60a <SoundCard::~SoundCard()>:
c001d60a:	83 ec 0c             	sub    esp,0xc
c001d60d:	83 ec 0c             	sub    esp,0xc
c001d610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d614:	e8 cd ff ff ff       	call   c001d5e6 <SoundCard::~SoundCard()>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	83 ec 08             	sub    esp,0x8
c001d61f:	68 e8 01 00 00       	push   0x1e8
c001d624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d628:	e8 ed f9 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c001d62d:	83 c4 10             	add    esp,0x10
c001d630:	83 c4 0c             	add    esp,0xc
c001d633:	c3                   	ret    

c001d634 <SoundCard::configureRates(int, int, int)>:
c001d634:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d638:	31 c0                	xor    eax,eax
c001d63a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d641:	75 20                	jne    c001d663 <SoundCard::configureRates(int, int, int)+0x2f>
c001d643:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d647:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d64d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d651:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d661:	b0 01                	mov    al,0x1
c001d663:	c3                   	ret    

c001d664 <SoundCard::getSamples16(int, short*)>:
c001d664:	55                   	push   ebp
c001d665:	57                   	push   edi
c001d666:	31 ff                	xor    edi,edi
c001d668:	56                   	push   esi
c001d669:	53                   	push   ebx
c001d66a:	31 db                	xor    ebx,ebx
c001d66c:	83 ec 18             	sub    esp,0x18
c001d66f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d673:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d677:	68 67 71 02 c0       	push   0xc0027167
c001d67c:	e8 7a fa fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001d681:	83 c4 0c             	add    esp,0xc
c001d684:	8d 04 36             	lea    eax,[esi+esi*1]
c001d687:	50                   	push   eax
c001d688:	6a 00                	push   0x0
c001d68a:	55                   	push   ebp
c001d68b:	e8 04 30 fe ff       	call   c0000694 <memset>
c001d690:	83 c4 10             	add    esp,0x10
c001d693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d697:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d69e:	85 c0                	test   eax,eax
c001d6a0:	74 1b                	je     c001d6bd <SoundCard::getSamples16(int, short*)+0x59>
c001d6a2:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d6a6:	75 15                	jne    c001d6bd <SoundCard::getSamples16(int, short*)+0x59>
c001d6a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d6ac:	55                   	push   ebp
c001d6ad:	56                   	push   esi
c001d6ae:	50                   	push   eax
c001d6af:	e8 58 03 00 00       	call   c001da0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d6b4:	83 c4 10             	add    esp,0x10
c001d6b7:	39 c7                	cmp    edi,eax
c001d6b9:	7d 02                	jge    c001d6bd <SoundCard::getSamples16(int, short*)+0x59>
c001d6bb:	89 c7                	mov    edi,eax
c001d6bd:	43                   	inc    ebx
c001d6be:	83 fb 20             	cmp    ebx,0x20
c001d6c1:	75 d0                	jne    c001d693 <SoundCard::getSamples16(int, short*)+0x2f>
c001d6c3:	83 c4 0c             	add    esp,0xc
c001d6c6:	89 f8                	mov    eax,edi
c001d6c8:	5b                   	pop    ebx
c001d6c9:	5e                   	pop    esi
c001d6ca:	5f                   	pop    edi
c001d6cb:	5d                   	pop    ebp
c001d6cc:	c3                   	ret    
c001d6cd:	90                   	nop

c001d6ce <SoundCard::getSamples32(int, int*)>:
c001d6ce:	55                   	push   ebp
c001d6cf:	57                   	push   edi
c001d6d0:	31 ff                	xor    edi,edi
c001d6d2:	56                   	push   esi
c001d6d3:	31 f6                	xor    esi,esi
c001d6d5:	53                   	push   ebx
c001d6d6:	83 ec 10             	sub    esp,0x10
c001d6d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6dd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6e1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d6e5:	c1 e0 02             	shl    eax,0x2
c001d6e8:	50                   	push   eax
c001d6e9:	6a 00                	push   0x0
c001d6eb:	55                   	push   ebp
c001d6ec:	e8 a3 2f fe ff       	call   c0000694 <memset>
c001d6f1:	83 c4 10             	add    esp,0x10
c001d6f4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d6fb:	85 c0                	test   eax,eax
c001d6fd:	74 1b                	je     c001d71a <SoundCard::getSamples32(int, int*)+0x4c>
c001d6ff:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d703:	75 15                	jne    c001d71a <SoundCard::getSamples32(int, int*)+0x4c>
c001d705:	53                   	push   ebx
c001d706:	55                   	push   ebp
c001d707:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d70b:	50                   	push   eax
c001d70c:	e8 f7 03 00 00       	call   c001db08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d711:	83 c4 10             	add    esp,0x10
c001d714:	39 c6                	cmp    esi,eax
c001d716:	7d 02                	jge    c001d71a <SoundCard::getSamples32(int, int*)+0x4c>
c001d718:	89 c6                	mov    esi,eax
c001d71a:	47                   	inc    edi
c001d71b:	83 ff 20             	cmp    edi,0x20
c001d71e:	75 d4                	jne    c001d6f4 <SoundCard::getSamples32(int, int*)+0x26>
c001d720:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d726:	85 f6                	test   esi,esi
c001d728:	75 0f                	jne    c001d739 <SoundCard::getSamples32(int, int*)+0x6b>
c001d72a:	84 c0                	test   al,al
c001d72c:	74 1b                	je     c001d749 <SoundCard::getSamples32(int, int*)+0x7b>
c001d72e:	83 ec 0c             	sub    esp,0xc
c001d731:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d733:	53                   	push   ebx
c001d734:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d737:	eb 0d                	jmp    c001d746 <SoundCard::getSamples32(int, int*)+0x78>
c001d739:	84 c0                	test   al,al
c001d73b:	75 0c                	jne    c001d749 <SoundCard::getSamples32(int, int*)+0x7b>
c001d73d:	83 ec 0c             	sub    esp,0xc
c001d740:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d742:	53                   	push   ebx
c001d743:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d746:	83 c4 10             	add    esp,0x10
c001d749:	83 c4 0c             	add    esp,0xc
c001d74c:	89 f0                	mov    eax,esi
c001d74e:	5b                   	pop    ebx
c001d74f:	5e                   	pop    esi
c001d750:	5f                   	pop    edi
c001d751:	5d                   	pop    ebp
c001d752:	c3                   	ret    
c001d753:	90                   	nop

c001d754 <SoundCard::addChannel(SoundPort*)>:
c001d754:	56                   	push   esi
c001d755:	53                   	push   ebx
c001d756:	53                   	push   ebx
c001d757:	31 db                	xor    ebx,ebx
c001d759:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d75d:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d765:	74 27                	je     c001d78e <SoundCard::addChannel(SoundPort*)+0x3a>
c001d767:	43                   	inc    ebx
c001d768:	83 fb 20             	cmp    ebx,0x20
c001d76b:	75 f0                	jne    c001d75d <SoundCard::addChannel(SoundPort*)+0x9>
c001d76d:	83 ec 0c             	sub    esp,0xc
c001d770:	83 cb ff             	or     ebx,0xffffffff
c001d773:	68 8d 71 02 c0       	push   0xc002718d
c001d778:	e8 7e f9 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001d77d:	c7 04 24 86 71 02 c0 	mov    DWORD PTR [esp],0xc0027186
c001d784:	e8 54 7a ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001d789:	83 c4 10             	add    esp,0x10
c001d78c:	eb 1b                	jmp    c001d7a9 <SoundCard::addChannel(SoundPort*)+0x55>
c001d78e:	51                   	push   ecx
c001d78f:	51                   	push   ecx
c001d790:	53                   	push   ebx
c001d791:	68 a5 71 02 c0       	push   0xc00271a5
c001d796:	e8 60 f9 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001d79b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d79f:	83 c4 10             	add    esp,0x10
c001d7a2:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d7a9:	89 d8                	mov    eax,ebx
c001d7ab:	5a                   	pop    edx
c001d7ac:	5b                   	pop    ebx
c001d7ad:	5e                   	pop    esi
c001d7ae:	c3                   	ret    
c001d7af:	90                   	nop

c001d7b0 <SoundCard::removeChannel(int)>:
c001d7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7b8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d7c3:	c3                   	ret    

c001d7c4 <SoundPort::SoundPort(int, int, int, int)>:
c001d7c4:	83 ec 0c             	sub    esp,0xc
c001d7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7cb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7e2:	89 10                	mov    DWORD PTR [eax],edx
c001d7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d7ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d7fa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d7ff:	75 13                	jne    c001d814 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d805:	8b 00                	mov    eax,DWORD PTR [eax]
c001d807:	05 a0 0f 00 00       	add    eax,0xfa0
c001d80c:	01 c0                	add    eax,eax
c001d80e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d812:	66 90                	xchg   ax,ax
c001d814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d81c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d823:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d82e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d831:	c1 e0 02             	shl    eax,0x2
c001d834:	83 ec 0c             	sub    esp,0xc
c001d837:	50                   	push   eax
c001d838:	e8 aa c5 fe ff       	call   c0009de7 <malloc>
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	89 c2                	mov    edx,eax
c001d842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d846:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d849:	90                   	nop
c001d84a:	83 c4 0c             	add    esp,0xc
c001d84d:	c3                   	ret    
c001d84e:	66 90                	xchg   ax,ax

c001d850 <SoundPort::~SoundPort()>:
c001d850:	83 ec 0c             	sub    esp,0xc
c001d853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d857:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d85a:	85 c0                	test   eax,eax
c001d85c:	74 1e                	je     c001d87c <SoundPort::~SoundPort()+0x2c>
c001d85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d862:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d865:	83 ec 0c             	sub    esp,0xc
c001d868:	50                   	push   eax
c001d869:	e8 89 c5 fe ff       	call   c0009df7 <free>
c001d86e:	83 c4 10             	add    esp,0x10
c001d871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d875:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d87c:	90                   	nop
c001d87d:	83 c4 0c             	add    esp,0xc
c001d880:	c3                   	ret    
c001d881:	90                   	nop
c001d882:	66 90                	xchg   ax,ax

c001d884 <SoundPort::unpause()>:
c001d884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d888:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d88c:	c3                   	ret    
c001d88d:	90                   	nop
c001d88e:	66 90                	xchg   ax,ax

c001d890 <SoundPort::pause()>:
c001d890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d894:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d898:	c3                   	ret    
c001d899:	90                   	nop
c001d89a:	66 90                	xchg   ax,ax

c001d89c <SoundPort::getBufferUsed()>:
c001d89c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8a0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d8a3:	c3                   	ret    

c001d8a4 <SoundPort::getBufferSize()>:
c001d8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d8ab:	c3                   	ret    

c001d8ac <SoundPort::buffer16(short*, int)>:
c001d8ac:	55                   	push   ebp
c001d8ad:	57                   	push   edi
c001d8ae:	56                   	push   esi
c001d8af:	53                   	push   ebx
c001d8b0:	83 ec 1c             	sub    esp,0x1c
c001d8b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d8bb:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d8be:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d8c1:	0f 84 85 00 00 00    	je     c001d94c <SoundPort::buffer16(short*, int)+0xa0>
c001d8c7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d8cb:	85 c9                	test   ecx,ecx
c001d8cd:	7e 7d                	jle    c001d94c <SoundPort::buffer16(short*, int)+0xa0>
c001d8cf:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d8d3:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d8d6:	c1 e1 0f             	shl    ecx,0xf
c001d8d9:	8d 70 01             	lea    esi,[eax+0x1]
c001d8dc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d8df:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d8e2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8e5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8e8:	74 6e                	je     c001d958 <SoundPort::buffer16(short*, int)+0xac>
c001d8ea:	31 f6                	xor    esi,esi
c001d8ec:	eb 22                	jmp    c001d910 <SoundPort::buffer16(short*, int)+0x64>
c001d8ee:	66 90                	xchg   ax,ax
c001d8f0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d8f5:	8d 79 01             	lea    edi,[ecx+0x1]
c001d8f8:	c1 e3 0f             	shl    ebx,0xf
c001d8fb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d8fe:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d901:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d904:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d907:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d90a:	74 1c                	je     c001d928 <SoundPort::buffer16(short*, int)+0x7c>
c001d90c:	89 c6                	mov    esi,eax
c001d90e:	66 90                	xchg   ax,ax
c001d910:	8d 46 01             	lea    eax,[esi+0x1]
c001d913:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d917:	75 d7                	jne    c001d8f0 <SoundPort::buffer16(short*, int)+0x44>
c001d919:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d91d:	83 c4 1c             	add    esp,0x1c
c001d920:	5b                   	pop    ebx
c001d921:	5e                   	pop    esi
c001d922:	5f                   	pop    edi
c001d923:	5d                   	pop    ebp
c001d924:	c3                   	ret    
c001d925:	8d 76 00             	lea    esi,[esi+0x0]
c001d928:	8d 46 02             	lea    eax,[esi+0x2]
c001d92b:	90                   	nop
c001d92c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d930:	83 ec 0c             	sub    esp,0xc
c001d933:	68 f8 71 02 c0       	push   0xc00271f8
c001d938:	e8 be f7 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001d93d:	83 c4 10             	add    esp,0x10
c001d940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d944:	83 c4 1c             	add    esp,0x1c
c001d947:	5b                   	pop    ebx
c001d948:	5e                   	pop    esi
c001d949:	5f                   	pop    edi
c001d94a:	5d                   	pop    ebp
c001d94b:	c3                   	ret    
c001d94c:	83 c4 1c             	add    esp,0x1c
c001d94f:	31 c0                	xor    eax,eax
c001d951:	5b                   	pop    ebx
c001d952:	5e                   	pop    esi
c001d953:	5f                   	pop    edi
c001d954:	5d                   	pop    ebp
c001d955:	c3                   	ret    
c001d956:	66 90                	xchg   ax,ax
c001d958:	b8 01 00 00 00       	mov    eax,0x1
c001d95d:	eb cd                	jmp    c001d92c <SoundPort::buffer16(short*, int)+0x80>
c001d95f:	90                   	nop

c001d960 <SoundPort::buffer32(int*, int)>:
c001d960:	55                   	push   ebp
c001d961:	57                   	push   edi
c001d962:	56                   	push   esi
c001d963:	53                   	push   ebx
c001d964:	83 ec 1c             	sub    esp,0x1c
c001d967:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d96b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d96f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d972:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d976:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d97a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d97d:	74 79                	je     c001d9f8 <SoundPort::buffer32(int*, int)+0x98>
c001d97f:	85 c0                	test   eax,eax
c001d981:	7e 75                	jle    c001d9f8 <SoundPort::buffer32(int*, int)+0x98>
c001d983:	8d 71 01             	lea    esi,[ecx+0x1]
c001d986:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d989:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d98c:	8b 37                	mov    esi,DWORD PTR [edi]
c001d98e:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d991:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d994:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d997:	74 6b                	je     c001da04 <SoundPort::buffer32(int*, int)+0xa4>
c001d999:	31 f6                	xor    esi,esi
c001d99b:	eb 1f                	jmp    c001d9bc <SoundPort::buffer32(int*, int)+0x5c>
c001d99d:	8d 76 00             	lea    esi,[esi+0x0]
c001d9a0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d9a3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d9a6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d9a9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9ac:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d9b0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9b3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9b6:	74 1c                	je     c001d9d4 <SoundPort::buffer32(int*, int)+0x74>
c001d9b8:	89 de                	mov    esi,ebx
c001d9ba:	66 90                	xchg   ax,ax
c001d9bc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d9bf:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d9c3:	75 db                	jne    c001d9a0 <SoundPort::buffer32(int*, int)+0x40>
c001d9c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9c9:	83 c4 1c             	add    esp,0x1c
c001d9cc:	5b                   	pop    ebx
c001d9cd:	5e                   	pop    esi
c001d9ce:	5f                   	pop    edi
c001d9cf:	5d                   	pop    ebp
c001d9d0:	c3                   	ret    
c001d9d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d9d4:	8d 46 02             	lea    eax,[esi+0x2]
c001d9d7:	90                   	nop
c001d9d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9dc:	83 ec 0c             	sub    esp,0xc
c001d9df:	68 13 72 02 c0       	push   0xc0027213
c001d9e4:	e8 12 f7 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001d9e9:	83 c4 10             	add    esp,0x10
c001d9ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9f0:	83 c4 1c             	add    esp,0x1c
c001d9f3:	5b                   	pop    ebx
c001d9f4:	5e                   	pop    esi
c001d9f5:	5f                   	pop    edi
c001d9f6:	5d                   	pop    ebp
c001d9f7:	c3                   	ret    
c001d9f8:	83 c4 1c             	add    esp,0x1c
c001d9fb:	31 c0                	xor    eax,eax
c001d9fd:	5b                   	pop    ebx
c001d9fe:	5e                   	pop    esi
c001d9ff:	5f                   	pop    edi
c001da00:	5d                   	pop    ebp
c001da01:	c3                   	ret    
c001da02:	66 90                	xchg   ax,ax
c001da04:	b8 01 00 00 00       	mov    eax,0x1
c001da09:	eb cd                	jmp    c001d9d8 <SoundPort::buffer32(int*, int)+0x78>
c001da0b:	90                   	nop

c001da0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001da0c:	57                   	push   edi
c001da0d:	56                   	push   esi
c001da0e:	53                   	push   ebx
c001da0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da13:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001da17:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001da1d:	39 03                	cmp    DWORD PTR [ebx],eax
c001da1f:	74 13                	je     c001da34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001da21:	83 ec 0c             	sub    esp,0xc
c001da24:	68 68 72 02 c0       	push   0xc0027268
c001da29:	e8 af 77 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	8d 76 00             	lea    esi,[esi+0x0]
c001da34:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001da3a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001da3d:	74 11                	je     c001da50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001da3f:	83 ec 0c             	sub    esp,0xc
c001da42:	68 2e 72 02 c0       	push   0xc002722e
c001da47:	e8 91 77 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001da4c:	83 c4 10             	add    esp,0x10
c001da4f:	90                   	nop
c001da50:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001da56:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001da59:	74 11                	je     c001da6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001da5b:	83 ec 0c             	sub    esp,0xc
c001da5e:	68 2e 72 02 c0       	push   0xc002722e
c001da63:	e8 75 77 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001da68:	83 c4 10             	add    esp,0x10
c001da6b:	90                   	nop
c001da6c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da6f:	89 c6                	mov    esi,eax
c001da71:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001da75:	7e 05                	jle    c001da7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001da77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da7b:	90                   	nop
c001da7c:	85 f6                	test   esi,esi
c001da7e:	7e 30                	jle    c001dab0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001da80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da84:	8d 3c 36             	lea    edi,[esi+esi*1]
c001da87:	31 c9                	xor    ecx,ecx
c001da89:	01 d7                	add    edi,edx
c001da8b:	90                   	nop
c001da8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001da8f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001da92:	85 c0                	test   eax,eax
c001da94:	79 06                	jns    c001da9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001da96:	05 ff 7f 00 00       	add    eax,0x7fff
c001da9b:	90                   	nop
c001da9c:	c1 f8 0f             	sar    eax,0xf
c001da9f:	83 c1 04             	add    ecx,0x4
c001daa2:	66 01 02             	add    WORD PTR [edx],ax
c001daa5:	83 c2 02             	add    edx,0x2
c001daa8:	39 d7                	cmp    edi,edx
c001daaa:	75 e0                	jne    c001da8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001daac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001daaf:	90                   	nop
c001dab0:	56                   	push   esi
c001dab1:	89 c2                	mov    edx,eax
c001dab3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001daba:	29 f2                	sub    edx,esi
c001dabc:	52                   	push   edx
c001dabd:	50                   	push   eax
c001dabe:	68 88 72 02 c0       	push   0xc0027288
c001dac3:	e8 33 f6 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001dac8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001dacb:	50                   	push   eax
c001dacc:	01 f8                	add    eax,edi
c001dace:	50                   	push   eax
c001dacf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dad2:	29 f0                	sub    eax,esi
c001dad4:	c1 e0 02             	shl    eax,0x2
c001dad7:	50                   	push   eax
c001dad8:	68 b8 72 02 c0       	push   0xc00272b8
c001dadd:	e8 19 f6 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001dae2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dae5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dae8:	83 c4 1c             	add    esp,0x1c
c001daeb:	01 d7                	add    edi,edx
c001daed:	29 f0                	sub    eax,esi
c001daef:	c1 e0 02             	shl    eax,0x2
c001daf2:	50                   	push   eax
c001daf3:	57                   	push   edi
c001daf4:	52                   	push   edx
c001daf5:	e8 d2 2a fe ff       	call   c00005cc <memmove>
c001dafa:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001dafd:	83 c4 10             	add    esp,0x10
c001db00:	89 f0                	mov    eax,esi
c001db02:	5b                   	pop    ebx
c001db03:	5e                   	pop    esi
c001db04:	5f                   	pop    edi
c001db05:	c3                   	ret    
c001db06:	66 90                	xchg   ax,ax

c001db08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001db08:	57                   	push   edi
c001db09:	56                   	push   esi
c001db0a:	53                   	push   ebx
c001db0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db0f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001db13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db17:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001db1d:	39 06                	cmp    DWORD PTR [esi],eax
c001db1f:	74 13                	je     c001db34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001db21:	83 ec 0c             	sub    esp,0xc
c001db24:	68 dc 72 02 c0       	push   0xc00272dc
c001db29:	e8 af 76 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001db2e:	83 c4 10             	add    esp,0x10
c001db31:	8d 76 00             	lea    esi,[esi+0x0]
c001db34:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001db3a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001db3d:	74 11                	je     c001db50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001db3f:	83 ec 0c             	sub    esp,0xc
c001db42:	68 4a 72 02 c0       	push   0xc002724a
c001db47:	e8 91 76 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001db4c:	83 c4 10             	add    esp,0x10
c001db4f:	90                   	nop
c001db50:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001db56:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001db59:	74 11                	je     c001db6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001db5b:	83 ec 0c             	sub    esp,0xc
c001db5e:	68 4a 72 02 c0       	push   0xc002724a
c001db63:	e8 75 76 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001db68:	83 c4 10             	add    esp,0x10
c001db6b:	90                   	nop
c001db6c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001db6f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001db73:	7e 07                	jle    c001db7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001db75:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db79:	8d 76 00             	lea    esi,[esi+0x0]
c001db7c:	85 ff                	test   edi,edi
c001db7e:	7e 1c                	jle    c001db9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001db80:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001db87:	31 c0                	xor    eax,eax
c001db89:	8d 76 00             	lea    esi,[esi+0x0]
c001db8c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001db8f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001db92:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001db95:	83 c0 04             	add    eax,0x4
c001db98:	39 c1                	cmp    ecx,eax
c001db9a:	75 f0                	jne    c001db8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001db9c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001db9f:	50                   	push   eax
c001dba0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001dba3:	29 f8                	sub    eax,edi
c001dba5:	c1 e0 02             	shl    eax,0x2
c001dba8:	50                   	push   eax
c001dba9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001dbac:	50                   	push   eax
c001dbad:	52                   	push   edx
c001dbae:	e8 19 2a fe ff       	call   c00005cc <memmove>
c001dbb3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001dbb6:	83 c4 10             	add    esp,0x10
c001dbb9:	89 f8                	mov    eax,edi
c001dbbb:	5b                   	pop    ebx
c001dbbc:	5e                   	pop    esi
c001dbbd:	5f                   	pop    edi
c001dbbe:	c3                   	ret    
c001dbbf:	90                   	nop

c001dbc0 <PCI::open(int, int, void*)>:
c001dbc0:	83 ec 18             	sub    esp,0x18
c001dbc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbcb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dbd1:	8b 10                	mov    edx,DWORD PTR [eax]
c001dbd3:	50                   	push   eax
c001dbd4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dbd7:	31 c0                	xor    eax,eax
c001dbd9:	83 c4 1c             	add    esp,0x1c
c001dbdc:	c3                   	ret    
c001dbdd:	90                   	nop

c001dbde <PCI::close(int, int, void*)>:
c001dbde:	31 c0                	xor    eax,eax
c001dbe0:	c3                   	ret    
c001dbe1:	90                   	nop

c001dbe2 <PCI::PCI()>:
c001dbe2:	83 ec 0c             	sub    esp,0xc
c001dbe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe9:	83 ec 08             	sub    esp,0x8
c001dbec:	68 fb 72 02 c0       	push   0xc00272fb
c001dbf1:	50                   	push   eax
c001dbf2:	e8 dd 02 ff ff       	call   c000ded4 <Bus::Bus(char const*)>
c001dbf7:	83 c4 10             	add    esp,0x10
c001dbfa:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c001dbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc03:	89 10                	mov    DWORD PTR [eax],edx
c001dc05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc09:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc17:	a3 40 ab 02 c0       	mov    ds:0xc002ab40,eax
c001dc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc26:	0f b6 d0             	movzx  edx,al
c001dc29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc3e:	0f b6 d0             	movzx  edx,al
c001dc41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc45:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc54:	8d 50 01             	lea    edx,[eax+0x1]
c001dc57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc5b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc61:	0f b6 d0             	movzx  edx,al
c001dc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc68:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc6c:	83 c9 c0             	or     ecx,0xffffffc0
c001dc6f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc73:	90                   	nop
c001dc74:	83 c4 0c             	add    esp,0xc
c001dc77:	c3                   	ret    

c001dc78 <PCI::readBAR8(unsigned int, int)>:
c001dc78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc80:	f6 c2 01             	test   dl,0x1
c001dc83:	74 07                	je     c001dc8c <PCI::readBAR8(unsigned int, int)+0x14>
c001dc85:	83 e2 fc             	and    edx,0xfffffffc
c001dc88:	01 c2                	add    edx,eax
c001dc8a:	ec                   	in     al,dx
c001dc8b:	c3                   	ret    
c001dc8c:	83 e2 f0             	and    edx,0xfffffff0
c001dc8f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dc92:	c3                   	ret    
c001dc93:	90                   	nop

c001dc94 <PCI::readBAR16(unsigned int, int)>:
c001dc94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc9c:	f6 c2 01             	test   dl,0x1
c001dc9f:	74 08                	je     c001dca9 <PCI::readBAR16(unsigned int, int)+0x15>
c001dca1:	83 e2 fc             	and    edx,0xfffffffc
c001dca4:	01 c2                	add    edx,eax
c001dca6:	66 ed                	in     ax,dx
c001dca8:	c3                   	ret    
c001dca9:	83 e2 f0             	and    edx,0xfffffff0
c001dcac:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dcb0:	c3                   	ret    
c001dcb1:	90                   	nop

c001dcb2 <PCI::readBAR32(unsigned int, int)>:
c001dcb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcba:	f6 c2 01             	test   dl,0x1
c001dcbd:	74 07                	je     c001dcc6 <PCI::readBAR32(unsigned int, int)+0x14>
c001dcbf:	83 e2 fc             	and    edx,0xfffffffc
c001dcc2:	01 c2                	add    edx,eax
c001dcc4:	ed                   	in     eax,dx
c001dcc5:	c3                   	ret    
c001dcc6:	83 e2 f0             	and    edx,0xfffffff0
c001dcc9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dccc:	c3                   	ret    
c001dccd:	90                   	nop

c001dcce <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dcce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcda:	f6 c2 01             	test   dl,0x1
c001dcdd:	74 07                	je     c001dce6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dcdf:	83 e2 fc             	and    edx,0xfffffffc
c001dce2:	01 ca                	add    edx,ecx
c001dce4:	ee                   	out    dx,al
c001dce5:	c3                   	ret    
c001dce6:	83 e2 f0             	and    edx,0xfffffff0
c001dce9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dcec:	c3                   	ret    
c001dced:	90                   	nop

c001dcee <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dcee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcf6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcfa:	f6 c2 01             	test   dl,0x1
c001dcfd:	74 08                	je     c001dd07 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dcff:	83 e2 fc             	and    edx,0xfffffffc
c001dd02:	01 ca                	add    edx,ecx
c001dd04:	66 ef                	out    dx,ax
c001dd06:	c3                   	ret    
c001dd07:	83 e2 f0             	and    edx,0xfffffff0
c001dd0a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dd0e:	c3                   	ret    
c001dd0f:	90                   	nop

c001dd10 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dd10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd1c:	f6 c2 01             	test   dl,0x1
c001dd1f:	74 07                	je     c001dd28 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dd21:	83 e2 fc             	and    edx,0xfffffffc
c001dd24:	01 ca                	add    edx,ecx
c001dd26:	ef                   	out    dx,eax
c001dd27:	c3                   	ret    
c001dd28:	83 e2 f0             	and    edx,0xfffffff0
c001dd2b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dd2e:	c3                   	ret    
c001dd2f:	90                   	nop

c001dd30 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd30:	55                   	push   ebp
c001dd31:	57                   	push   edi
c001dd32:	56                   	push   esi
c001dd33:	53                   	push   ebx
c001dd34:	83 ec 0c             	sub    esp,0xc
c001dd37:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd3b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dd3f:	89 f0                	mov    eax,esi
c001dd41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dd45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd49:	3c 07                	cmp    al,0x7
c001dd4b:	76 10                	jbe    c001dd5d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dd4d:	83 ec 0c             	sub    esp,0xc
c001dd50:	68 03 73 02 c0       	push   0xc0027303
c001dd55:	e8 83 74 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001dd5a:	83 c4 10             	add    esp,0x10
c001dd5d:	80 fb 0f             	cmp    bl,0xf
c001dd60:	76 10                	jbe    c001dd72 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001dd62:	83 ec 0c             	sub    esp,0xc
c001dd65:	68 33 73 02 c0       	push   0xc0027333
c001dd6a:	e8 6e 74 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001dd6f:	83 c4 10             	add    esp,0x10
c001dd72:	8d 04 36             	lea    eax,[esi+esi*1]
c001dd75:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dd7a:	83 c8 f0             	or     eax,0xfffffff0
c001dd7d:	ee                   	out    dx,al
c001dd7e:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dd83:	89 e8                	mov    eax,ebp
c001dd85:	ee                   	out    dx,al
c001dd86:	83 c4 0c             	add    esp,0xc
c001dd89:	89 d8                	mov    eax,ebx
c001dd8b:	66 81 e7 fc 00       	and    di,0xfc
c001dd90:	5b                   	pop    ebx
c001dd91:	c1 e0 08             	shl    eax,0x8
c001dd94:	5e                   	pop    esi
c001dd95:	09 f8                	or     eax,edi
c001dd97:	5f                   	pop    edi
c001dd98:	66 0d 00 c0          	or     ax,0xc000
c001dd9c:	5d                   	pop    ebp
c001dd9d:	c3                   	ret    

c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd9e:	57                   	push   edi
c001dd9f:	56                   	push   esi
c001dda0:	53                   	push   ebx
c001dda1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dda5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dda9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ddaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ddb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddb7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ddbb:	83 ff 01             	cmp    edi,0x1
c001ddbe:	75 3e                	jne    c001ddfe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001ddc0:	89 de                	mov    esi,ebx
c001ddc2:	0f b6 c0             	movzx  eax,al
c001ddc5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ddcb:	c1 e0 10             	shl    eax,0x10
c001ddce:	0f b6 c9             	movzx  ecx,cl
c001ddd1:	09 f0                	or     eax,esi
c001ddd3:	c1 e1 08             	shl    ecx,0x8
c001ddd6:	0f b6 d2             	movzx  edx,dl
c001ddd9:	09 c8                	or     eax,ecx
c001dddb:	c1 e2 0b             	shl    edx,0xb
c001ddde:	09 d0                	or     eax,edx
c001dde0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dde5:	0d 00 00 00 80       	or     eax,0x80000000
c001ddea:	ef                   	out    dx,eax
c001ddeb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ddf0:	ed                   	in     eax,dx
c001ddf1:	83 e3 02             	and    ebx,0x2
c001ddf4:	0f b6 cb             	movzx  ecx,bl
c001ddf7:	c1 e1 03             	shl    ecx,0x3
c001ddfa:	d3 e8                	shr    eax,cl
c001ddfc:	eb 43                	jmp    c001de41 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ddfe:	83 ff 02             	cmp    edi,0x2
c001de01:	75 2c                	jne    c001de2f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001de03:	83 ec 0c             	sub    esp,0xc
c001de06:	0f b6 c9             	movzx  ecx,cl
c001de09:	0f b6 d2             	movzx  edx,dl
c001de0c:	0f b6 fb             	movzx  edi,bl
c001de0f:	0f b6 c0             	movzx  eax,al
c001de12:	57                   	push   edi
c001de13:	51                   	push   ecx
c001de14:	52                   	push   edx
c001de15:	50                   	push   eax
c001de16:	56                   	push   esi
c001de17:	e8 14 ff ff ff       	call   c001dd30 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de1c:	89 c2                	mov    edx,eax
c001de1e:	ed                   	in     eax,dx
c001de1f:	83 e3 02             	and    ebx,0x2
c001de22:	83 c4 20             	add    esp,0x20
c001de25:	0f b6 cb             	movzx  ecx,bl
c001de28:	c1 e1 03             	shl    ecx,0x3
c001de2b:	d3 e8                	shr    eax,cl
c001de2d:	eb 12                	jmp    c001de41 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001de2f:	83 ec 0c             	sub    esp,0xc
c001de32:	68 63 73 02 c0       	push   0xc0027363
c001de37:	e8 a1 73 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001de3c:	83 c4 10             	add    esp,0x10
c001de3f:	31 c0                	xor    eax,eax
c001de41:	5b                   	pop    ebx
c001de42:	5e                   	pop    esi
c001de43:	5f                   	pop    edi
c001de44:	c3                   	ret    
c001de45:	90                   	nop

c001de46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001de46:	83 ec 18             	sub    esp,0x18
c001de49:	6a 00                	push   0x0
c001de4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de50:	50                   	push   eax
c001de51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de56:	50                   	push   eax
c001de57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de5c:	50                   	push   eax
c001de5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de61:	e8 38 ff ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de66:	83 c4 2c             	add    esp,0x2c
c001de69:	c3                   	ret    

c001de6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001de6a:	83 ec 18             	sub    esp,0x18
c001de6d:	6a 0e                	push   0xe
c001de6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de74:	50                   	push   eax
c001de75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de7a:	50                   	push   eax
c001de7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de80:	50                   	push   eax
c001de81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de85:	e8 14 ff ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de8a:	83 c4 2c             	add    esp,0x2c
c001de8d:	0f b6 c0             	movzx  eax,al
c001de90:	c3                   	ret    
c001de91:	90                   	nop

c001de92 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001de92:	55                   	push   ebp
c001de93:	57                   	push   edi
c001de94:	56                   	push   esi
c001de95:	53                   	push   ebx
c001de96:	83 ec 18             	sub    esp,0x18
c001de99:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001de9e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dea3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dea8:	6a 0a                	push   0xa
c001deaa:	56                   	push   esi
c001deab:	55                   	push   ebp
c001deac:	57                   	push   edi
c001dead:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001deb1:	e8 e8 fe ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001deb6:	83 c4 14             	add    esp,0x14
c001deb9:	89 c3                	mov    ebx,eax
c001debb:	6a 0a                	push   0xa
c001debd:	0f b6 db             	movzx  ebx,bl
c001dec0:	56                   	push   esi
c001dec1:	55                   	push   ebp
c001dec2:	57                   	push   edi
c001dec3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dec7:	e8 d2 fe ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001decc:	83 c4 2c             	add    esp,0x2c
c001decf:	25 00 ff 00 00       	and    eax,0xff00
c001ded4:	09 d8                	or     eax,ebx
c001ded6:	5b                   	pop    ebx
c001ded7:	5e                   	pop    esi
c001ded8:	5f                   	pop    edi
c001ded9:	5d                   	pop    ebp
c001deda:	c3                   	ret    
c001dedb:	90                   	nop

c001dedc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dedc:	83 ec 18             	sub    esp,0x18
c001dedf:	6a 08                	push   0x8
c001dee1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dee6:	50                   	push   eax
c001dee7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deec:	50                   	push   eax
c001deed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001def2:	50                   	push   eax
c001def3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001def7:	e8 a2 fe ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001defc:	83 c4 2c             	add    esp,0x2c
c001deff:	0f b6 c4             	movzx  eax,ah
c001df02:	c3                   	ret    
c001df03:	90                   	nop

c001df04 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001df04:	83 ec 18             	sub    esp,0x18
c001df07:	6a 08                	push   0x8
c001df09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df0e:	50                   	push   eax
c001df0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df14:	50                   	push   eax
c001df15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df1a:	50                   	push   eax
c001df1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df1f:	e8 7a fe ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df24:	83 c4 2c             	add    esp,0x2c
c001df27:	c3                   	ret    

c001df28 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001df28:	83 ec 18             	sub    esp,0x18
c001df2b:	6a 3c                	push   0x3c
c001df2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df32:	50                   	push   eax
c001df33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df38:	50                   	push   eax
c001df39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df3e:	50                   	push   eax
c001df3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df43:	e8 56 fe ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df48:	83 c4 2c             	add    esp,0x2c
c001df4b:	c3                   	ret    

c001df4c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001df4c:	83 ec 18             	sub    esp,0x18
c001df4f:	6a 18                	push   0x18
c001df51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df56:	50                   	push   eax
c001df57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df5c:	50                   	push   eax
c001df5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df62:	50                   	push   eax
c001df63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df67:	e8 32 fe ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df6c:	83 c4 2c             	add    esp,0x2c
c001df6f:	0f b6 c4             	movzx  eax,ah
c001df72:	c3                   	ret    
c001df73:	90                   	nop

c001df74 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001df74:	55                   	push   ebp
c001df75:	57                   	push   edi
c001df76:	56                   	push   esi
c001df77:	53                   	push   ebx
c001df78:	83 ec 28             	sub    esp,0x28
c001df7b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001df7f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001df84:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001df89:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001df8e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001df95:	8d 43 12             	lea    eax,[ebx+0x12]
c001df98:	83 c3 10             	add    ebx,0x10
c001df9b:	0f b6 c0             	movzx  eax,al
c001df9e:	0f b6 db             	movzx  ebx,bl
c001dfa1:	50                   	push   eax
c001dfa2:	51                   	push   ecx
c001dfa3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dfa7:	57                   	push   edi
c001dfa8:	55                   	push   ebp
c001dfa9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dfad:	e8 ec fd ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfb2:	83 c4 14             	add    esp,0x14
c001dfb5:	89 c6                	mov    esi,eax
c001dfb7:	53                   	push   ebx
c001dfb8:	c1 e6 10             	shl    esi,0x10
c001dfbb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dfbf:	51                   	push   ecx
c001dfc0:	57                   	push   edi
c001dfc1:	55                   	push   ebp
c001dfc2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dfc6:	e8 d3 fd ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfcb:	83 c4 3c             	add    esp,0x3c
c001dfce:	0f b7 c0             	movzx  eax,ax
c001dfd1:	5b                   	pop    ebx
c001dfd2:	09 f0                	or     eax,esi
c001dfd4:	5e                   	pop    esi
c001dfd5:	5f                   	pop    edi
c001dfd6:	5d                   	pop    ebp
c001dfd7:	c3                   	ret    

c001dfd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dfd8:	55                   	push   ebp
c001dfd9:	57                   	push   edi
c001dfda:	56                   	push   esi
c001dfdb:	53                   	push   ebx
c001dfdc:	83 ec 0c             	sub    esp,0xc
c001dfdf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dfe3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dfe7:	89 f5                	mov    ebp,esi
c001dfe9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001dfef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dff3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dff7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dffb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dfff:	83 f9 01             	cmp    ecx,0x1
c001e002:	75 5d                	jne    c001e061 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e004:	0f b6 c8             	movzx  ecx,al
c001e007:	0f b6 d2             	movzx  edx,dl
c001e00a:	c1 e1 10             	shl    ecx,0x10
c001e00d:	c1 e2 0b             	shl    edx,0xb
c001e010:	89 f0                	mov    eax,esi
c001e012:	25 fc 00 00 00       	and    eax,0xfc
c001e017:	09 c1                	or     ecx,eax
c001e019:	89 e8                	mov    eax,ebp
c001e01b:	0f b6 c0             	movzx  eax,al
c001e01e:	c1 e0 08             	shl    eax,0x8
c001e021:	09 c1                	or     ecx,eax
c001e023:	09 d1                	or     ecx,edx
c001e025:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e02a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e030:	89 c8                	mov    eax,ecx
c001e032:	ef                   	out    dx,eax
c001e033:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e038:	ed                   	in     eax,dx
c001e039:	0f b7 db             	movzx  ebx,bx
c001e03c:	83 e6 02             	and    esi,0x2
c001e03f:	74 0a                	je     c001e04b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e041:	0f b7 d0             	movzx  edx,ax
c001e044:	c1 e3 10             	shl    ebx,0x10
c001e047:	09 d3                	or     ebx,edx
c001e049:	eb 05                	jmp    c001e050 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e04b:	66 31 c0             	xor    ax,ax
c001e04e:	09 c3                	or     ebx,eax
c001e050:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e055:	89 c8                	mov    eax,ecx
c001e057:	ef                   	out    dx,eax
c001e058:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e05d:	89 d8                	mov    eax,ebx
c001e05f:	eb 41                	jmp    c001e0a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e061:	83 f9 02             	cmp    ecx,0x2
c001e064:	75 45                	jne    c001e0ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e066:	83 ec 0c             	sub    esp,0xc
c001e069:	0f b6 d2             	movzx  edx,dl
c001e06c:	89 f1                	mov    ecx,esi
c001e06e:	0f b6 c0             	movzx  eax,al
c001e071:	0f b6 f1             	movzx  esi,cl
c001e074:	89 e9                	mov    ecx,ebp
c001e076:	56                   	push   esi
c001e077:	0f b6 c9             	movzx  ecx,cl
c001e07a:	51                   	push   ecx
c001e07b:	52                   	push   edx
c001e07c:	50                   	push   eax
c001e07d:	57                   	push   edi
c001e07e:	e8 ad fc ff ff       	call   c001dd30 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e083:	89 c2                	mov    edx,eax
c001e085:	ed                   	in     eax,dx
c001e086:	83 c4 20             	add    esp,0x20
c001e089:	0f b7 db             	movzx  ebx,bx
c001e08c:	f6 c2 02             	test   dl,0x2
c001e08f:	74 0c                	je     c001e09d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e091:	0f b7 c8             	movzx  ecx,ax
c001e094:	89 d8                	mov    eax,ebx
c001e096:	c1 e0 10             	shl    eax,0x10
c001e099:	09 c8                	or     eax,ecx
c001e09b:	eb 05                	jmp    c001e0a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e09d:	66 31 c0             	xor    ax,ax
c001e0a0:	09 d8                	or     eax,ebx
c001e0a2:	ef                   	out    dx,eax
c001e0a3:	83 c4 0c             	add    esp,0xc
c001e0a6:	5b                   	pop    ebx
c001e0a7:	5e                   	pop    esi
c001e0a8:	5f                   	pop    edi
c001e0a9:	5d                   	pop    ebp
c001e0aa:	c3                   	ret    
c001e0ab:	c7 44 24 20 63 73 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027363
c001e0b3:	83 c4 0c             	add    esp,0xc
c001e0b6:	5b                   	pop    ebx
c001e0b7:	5e                   	pop    esi
c001e0b8:	5f                   	pop    edi
c001e0b9:	5d                   	pop    ebp
c001e0ba:	e9 1e 71 ff ff       	jmp    c00151dd <Krnl::panic(char const*)>
c001e0bf:	90                   	nop

c001e0c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e0c0:	55                   	push   ebp
c001e0c1:	57                   	push   edi
c001e0c2:	56                   	push   esi
c001e0c3:	53                   	push   ebx
c001e0c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001e0ca:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e0d1:	75 0f                	jne    c001e0e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001e0d3:	80 3d 4c ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab4c,0x0
c001e0da:	0f 85 fa 00 00 00    	jne    c001e1da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e0e0:	eb 2f                	jmp    c001e111 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	68 69 73 02 c0       	push   0xc0027369
c001e0ea:	e8 52 bd fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e0ef:	83 c4 10             	add    esp,0x10
c001e0f2:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e0f9:	75 d8                	jne    c001e0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e0fb:	e4 60                	in     al,0x60
c001e0fd:	3c 1c                	cmp    al,0x1c
c001e0ff:	74 04                	je     c001e105 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e101:	3c 5a                	cmp    al,0x5a
c001e103:	75 f6                	jne    c001e0fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001e105:	e4 60                	in     al,0x60
c001e107:	3c 5a                	cmp    al,0x5a
c001e109:	74 fa                	je     c001e105 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e10b:	3c 1c                	cmp    al,0x1c
c001e10d:	74 f6                	je     c001e105 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e10f:	eb c2                	jmp    c001e0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e111:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e118:	0f 85 86 00 00 00    	jne    c001e1a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001e11e:	83 ec 0c             	sub    esp,0xc
c001e121:	68 14 01 00 00       	push   0x114
c001e126:	e8 bc bc fe ff       	call   c0009de7 <malloc>
c001e12b:	83 c4 0c             	add    esp,0xc
c001e12e:	89 c3                	mov    ebx,eax
c001e130:	ff 35 50 a1 02 c0    	push   DWORD PTR ds:0xc002a150
c001e136:	68 83 73 02 c0       	push   0xc0027383
c001e13b:	50                   	push   eax
c001e13c:	e8 25 f5 fe ff       	call   c000d666 <File::File(char const*, Process*)>
c001e141:	5a                   	pop    edx
c001e142:	59                   	pop    ecx
c001e143:	6a 01                	push   0x1
c001e145:	53                   	push   ebx
c001e146:	e8 f5 f5 fe ff       	call   c000d740 <File::open(FileOpenMode)>
c001e14b:	83 c4 0c             	add    esp,0xc
c001e14e:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001e152:	50                   	push   eax
c001e153:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e157:	50                   	push   eax
c001e158:	53                   	push   ebx
c001e159:	e8 8e f8 fe ff       	call   c000d9ec <File::stat(unsigned long long*, bool*)>
c001e15e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e162:	40                   	inc    eax
c001e163:	89 04 24             	mov    DWORD PTR [esp],eax
c001e166:	e8 7c bc fe ff       	call   c0009de7 <malloc>
c001e16b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e16f:	a3 48 ab 02 c0       	mov    ds:0xc002ab48,eax
c001e174:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e178:	5e                   	pop    esi
c001e179:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e17b:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001e17f:	51                   	push   ecx
c001e180:	50                   	push   eax
c001e181:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e185:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e189:	53                   	push   ebx
c001e18a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e18d:	83 c4 14             	add    esp,0x14
c001e190:	53                   	push   ebx
c001e191:	e8 08 f6 fe ff       	call   c000d79e <File::close()>
c001e196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e19a:	83 c4 10             	add    esp,0x10
c001e19d:	a3 44 ab 02 c0       	mov    ds:0xc002ab44,eax
c001e1a2:	eb 36                	jmp    c001e1da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e1a4:	83 ec 0c             	sub    esp,0xc
c001e1a7:	68 9c 73 02 c0       	push   0xc002739c
c001e1ac:	e8 90 bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e1b1:	83 c4 10             	add    esp,0x10
c001e1b4:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e1bb:	0f 85 5d ff ff ff    	jne    c001e11e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e1c1:	e4 60                	in     al,0x60
c001e1c3:	3c 1c                	cmp    al,0x1c
c001e1c5:	74 04                	je     c001e1cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e1c7:	3c 5a                	cmp    al,0x5a
c001e1c9:	75 f6                	jne    c001e1c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001e1cb:	e4 60                	in     al,0x60
c001e1cd:	3c 5a                	cmp    al,0x5a
c001e1cf:	74 fa                	je     c001e1cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e1d1:	3c 1c                	cmp    al,0x1c
c001e1d3:	74 f6                	je     c001e1cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e1d5:	e9 44 ff ff ff       	jmp    c001e11e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e1da:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e1e1:	75 0b                	jne    c001e1ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001e1e3:	31 f6                	xor    esi,esi
c001e1e5:	31 db                	xor    ebx,ebx
c001e1e7:	31 ed                	xor    ebp,ebp
c001e1e9:	e9 a3 01 00 00       	jmp    c001e391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e1ee:	83 ec 0c             	sub    esp,0xc
c001e1f1:	68 ae 73 02 c0       	push   0xc00273ae
c001e1f6:	e8 46 bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e1fb:	8b 15 20 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c20
c001e201:	83 c4 10             	add    esp,0x10
c001e204:	f6 c2 80             	test   dl,0x80
c001e207:	74 0c                	je     c001e215 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001e209:	0f ba e2 0b          	bt     edx,0xb
c001e20d:	72 1a                	jb     c001e229 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001e20f:	eb d2                	jmp    c001e1e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e211:	3c 5a                	cmp    al,0x5a
c001e213:	74 0c                	je     c001e221 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e215:	e4 60                	in     al,0x60
c001e217:	3c 1c                	cmp    al,0x1c
c001e219:	75 f6                	jne    c001e211 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e21b:	eb 04                	jmp    c001e221 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e21d:	3c 1c                	cmp    al,0x1c
c001e21f:	75 e8                	jne    c001e209 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e221:	e4 60                	in     al,0x60
c001e223:	3c 5a                	cmp    al,0x5a
c001e225:	74 fa                	je     c001e221 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e227:	eb f4                	jmp    c001e21d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e229:	83 ec 0c             	sub    esp,0xc
c001e22c:	68 b3 73 02 c0       	push   0xc00273b3
c001e231:	e8 0b bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e236:	83 c4 10             	add    esp,0x10
c001e239:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e240:	75 a1                	jne    c001e1e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e242:	e4 60                	in     al,0x60
c001e244:	3c 5a                	cmp    al,0x5a
c001e246:	74 04                	je     c001e24c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e248:	3c 1c                	cmp    al,0x1c
c001e24a:	75 f6                	jne    c001e242 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e24c:	e4 60                	in     al,0x60
c001e24e:	3c 5a                	cmp    al,0x5a
c001e250:	74 fa                	je     c001e24c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e252:	3c 1c                	cmp    al,0x1c
c001e254:	74 f6                	je     c001e24c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e256:	eb 8b                	jmp    c001e1e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e258:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e25f:	0f 85 3d 01 00 00    	jne    c001e3a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e265:	a1 48 ab 02 c0       	mov    eax,ds:0xc002ab48
c001e26a:	8d 7e 01             	lea    edi,[esi+0x1]
c001e26d:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e270:	d4 40                	aam    0x40
c001e272:	d5 39                	aad    0x39
c001e274:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e27b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e27f:	0f 85 53 01 00 00    	jne    c001e3d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e285:	8b 15 48 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab48
c001e28b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e28e:	d4 40                	aam    0x40
c001e290:	d5 39                	aad    0x39
c001e292:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e296:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e29a:	d4 40                	aam    0x40
c001e29c:	d5 39                	aad    0x39
c001e29e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e2a2:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e2a6:	d4 40                	aam    0x40
c001e2a8:	d5 39                	aad    0x39
c001e2aa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e2ae:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e2b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e2b6:	3c 56                	cmp    al,0x56
c001e2b8:	74 49                	je     c001e303 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e2ba:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e2be:	d4 40                	aam    0x40
c001e2c0:	d5 39                	aad    0x39
c001e2c2:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e2c5:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e2c9:	0f b6 c9             	movzx  ecx,cl
c001e2cc:	c1 e1 04             	shl    ecx,0x4
c001e2cf:	d4 40                	aam    0x40
c001e2d1:	d5 39                	aad    0x39
c001e2d3:	83 e8 30             	sub    eax,0x30
c001e2d6:	0f b6 c0             	movzx  eax,al
c001e2d9:	09 c1                	or     ecx,eax
c001e2db:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e2df:	c1 e1 04             	shl    ecx,0x4
c001e2e2:	d4 40                	aam    0x40
c001e2e4:	d5 39                	aad    0x39
c001e2e6:	83 e8 30             	sub    eax,0x30
c001e2e9:	0f b6 c0             	movzx  eax,al
c001e2ec:	09 c1                	or     ecx,eax
c001e2ee:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e2f2:	c1 e1 04             	shl    ecx,0x4
c001e2f5:	d4 40                	aam    0x40
c001e2f7:	d5 39                	aad    0x39
c001e2f9:	83 e8 30             	sub    eax,0x30
c001e2fc:	0f b6 c0             	movzx  eax,al
c001e2ff:	09 c8                	or     eax,ecx
c001e301:	89 c5                	mov    ebp,eax
c001e303:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e307:	80 f9 44             	cmp    cl,0x44
c001e30a:	74 47                	je     c001e353 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e30c:	88 c8                	mov    al,cl
c001e30e:	d4 40                	aam    0x40
c001e310:	d5 39                	aad    0x39
c001e312:	83 e8 30             	sub    eax,0x30
c001e315:	0f b6 f8             	movzx  edi,al
c001e318:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e31c:	c1 e7 04             	shl    edi,0x4
c001e31f:	d4 40                	aam    0x40
c001e321:	d5 39                	aad    0x39
c001e323:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e326:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e32a:	0f b6 db             	movzx  ebx,bl
c001e32d:	09 fb                	or     ebx,edi
c001e32f:	c1 e3 04             	shl    ebx,0x4
c001e332:	d4 40                	aam    0x40
c001e334:	d5 39                	aad    0x39
c001e336:	83 e8 30             	sub    eax,0x30
c001e339:	0f b6 f8             	movzx  edi,al
c001e33c:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e340:	09 fb                	or     ebx,edi
c001e342:	89 df                	mov    edi,ebx
c001e344:	c1 e7 04             	shl    edi,0x4
c001e347:	d4 40                	aam    0x40
c001e349:	d5 39                	aad    0x39
c001e34b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e34e:	0f b6 db             	movzx  ebx,bl
c001e351:	09 fb                	or     ebx,edi
c001e353:	a1 44 ab 02 c0       	mov    eax,ds:0xc002ab44
c001e358:	83 c6 10             	add    esi,0x10
c001e35b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e35f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e363:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e366:	3c 0a                	cmp    al,0xa
c001e368:	0f 85 a0 00 00 00    	jne    c001e40e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e36e:	3c 0a                	cmp    al,0xa
c001e370:	0f 94 c0             	sete   al
c001e373:	0f b6 c0             	movzx  eax,al
c001e376:	01 c6                	add    esi,eax
c001e378:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e37d:	0f 84 a2 00 00 00    	je     c001e425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e383:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e38b:	0f 84 94 00 00 00    	je     c001e425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e391:	39 35 44 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab44,esi
c001e397:	0f 8f bb fe ff ff    	jg     c001e258 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e39d:	e9 e8 00 00 00       	jmp    c001e48a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e3a2:	83 ec 0c             	sub    esp,0xc
c001e3a5:	68 ba 73 02 c0       	push   0xc00273ba
c001e3aa:	e8 92 ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e3af:	83 c4 10             	add    esp,0x10
c001e3b2:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e3b9:	0f 85 a6 fe ff ff    	jne    c001e265 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e3bf:	e4 60                	in     al,0x60
c001e3c1:	3c 5a                	cmp    al,0x5a
c001e3c3:	74 04                	je     c001e3c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e3c5:	3c 1c                	cmp    al,0x1c
c001e3c7:	75 f6                	jne    c001e3bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e3c9:	e4 60                	in     al,0x60
c001e3cb:	3c 5a                	cmp    al,0x5a
c001e3cd:	74 fa                	je     c001e3c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e3cf:	3c 1c                	cmp    al,0x1c
c001e3d1:	74 f6                	je     c001e3c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e3d3:	e9 8d fe ff ff       	jmp    c001e265 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e3d8:	83 ec 0c             	sub    esp,0xc
c001e3db:	68 c2 73 02 c0       	push   0xc00273c2
c001e3e0:	e8 5c ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e3e5:	83 c4 10             	add    esp,0x10
c001e3e8:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e3ef:	0f 85 90 fe ff ff    	jne    c001e285 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e3f5:	e4 60                	in     al,0x60
c001e3f7:	3c 5a                	cmp    al,0x5a
c001e3f9:	74 04                	je     c001e3ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e3fb:	3c 1c                	cmp    al,0x1c
c001e3fd:	75 f6                	jne    c001e3f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e3ff:	e4 60                	in     al,0x60
c001e401:	3c 5a                	cmp    al,0x5a
c001e403:	74 fa                	je     c001e3ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e405:	3c 1c                	cmp    al,0x1c
c001e407:	74 f6                	je     c001e3ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e409:	e9 77 fe ff ff       	jmp    c001e285 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e40e:	47                   	inc    edi
c001e40f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e413:	0f 84 55 ff ff ff    	je     c001e36e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e419:	46                   	inc    esi
c001e41a:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e41d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e420:	e9 3e ff ff ff       	jmp    c001e363 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e425:	80 f9 44             	cmp    cl,0x44
c001e428:	74 0e                	je     c001e438 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e42a:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e432:	0f 85 59 ff ff ff    	jne    c001e391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e438:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e43c:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e440:	c1 e0 04             	shl    eax,0x4
c001e443:	83 ea 30             	sub    edx,0x30
c001e446:	09 d0                	or     eax,edx
c001e448:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e44f:	0f 85 3c ff ff ff    	jne    c001e391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e455:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e459:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e45d:	c1 e2 04             	shl    edx,0x4
c001e460:	83 e8 30             	sub    eax,0x30
c001e463:	09 d0                	or     eax,edx
c001e465:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e46c:	0f 85 1f ff ff ff    	jne    c001e391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e472:	50                   	push   eax
c001e473:	50                   	push   eax
c001e474:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e478:	50                   	push   eax
c001e479:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e480:	e8 cb 22 fe ff       	call   c0000750 <strcpy>
c001e485:	83 c4 10             	add    esp,0x10
c001e488:	eb 15                	jmp    c001e49f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e48a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e491:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e49c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e49f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e4a6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e4ac:	5b                   	pop    ebx
c001e4ad:	5e                   	pop    esi
c001e4ae:	5f                   	pop    edi
c001e4af:	5d                   	pop    ebp
c001e4b0:	c3                   	ret    
c001e4b1:	90                   	nop

c001e4b2 <PCI::checkBus(unsigned char)>:
c001e4b2:	56                   	push   esi
c001e4b3:	53                   	push   ebx
c001e4b4:	31 db                	xor    ebx,ebx
c001e4b6:	51                   	push   ecx
c001e4b7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e4bc:	52                   	push   edx
c001e4bd:	53                   	push   ebx
c001e4be:	43                   	inc    ebx
c001e4bf:	56                   	push   esi
c001e4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4c4:	e8 bf 07 00 00       	call   c001ec88 <PCI::checkDevice(unsigned char, unsigned char)>
c001e4c9:	83 c4 10             	add    esp,0x10
c001e4cc:	83 fb 20             	cmp    ebx,0x20
c001e4cf:	75 eb                	jne    c001e4bc <PCI::checkBus(unsigned char)+0xa>
c001e4d1:	58                   	pop    eax
c001e4d2:	5b                   	pop    ebx
c001e4d3:	5e                   	pop    esi
c001e4d4:	c3                   	ret    
c001e4d5:	90                   	nop

c001e4d6 <PCI::foundDevice(PCIDeviceInfo)>:
c001e4d6:	55                   	push   ebp
c001e4d7:	57                   	push   edi
c001e4d8:	56                   	push   esi
c001e4d9:	53                   	push   ebx
c001e4da:	83 ec 1c             	sub    esp,0x1c
c001e4dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4e1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e4e7:	0f 84 20 04 00 00    	je     c001e90d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e4ed:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e4f4:	75 37                	jne    c001e52d <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e4f6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e4fa:	66 81 f9 06 04       	cmp    cx,0x406
c001e4ff:	75 5b                	jne    c001e55c <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e501:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e506:	50                   	push   eax
c001e507:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e50c:	50                   	push   eax
c001e50d:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e512:	50                   	push   eax
c001e513:	53                   	push   ebx
c001e514:	e8 33 fa ff ff       	call   c001df4c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e519:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e51d:	0f b6 c0             	movzx  eax,al
c001e520:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e524:	83 c4 2c             	add    esp,0x2c
c001e527:	5b                   	pop    ebx
c001e528:	5e                   	pop    esi
c001e529:	5f                   	pop    edi
c001e52a:	5d                   	pop    ebp
c001e52b:	eb 85                	jmp    c001e4b2 <PCI::checkBus(unsigned char)>
c001e52d:	83 ec 0c             	sub    esp,0xc
c001e530:	68 cb 73 02 c0       	push   0xc00273cb
c001e535:	e8 07 b9 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e53a:	83 c4 10             	add    esp,0x10
c001e53d:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e544:	75 b0                	jne    c001e4f6 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e546:	e4 60                	in     al,0x60
c001e548:	3c 5a                	cmp    al,0x5a
c001e54a:	74 04                	je     c001e550 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e54c:	3c 1c                	cmp    al,0x1c
c001e54e:	75 f6                	jne    c001e546 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e550:	e4 60                	in     al,0x60
c001e552:	3c 5a                	cmp    al,0x5a
c001e554:	74 fa                	je     c001e550 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e556:	3c 1c                	cmp    al,0x1c
c001e558:	74 f6                	je     c001e550 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e55a:	eb 9a                	jmp    c001e4f6 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e55c:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e562:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e566:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e56a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e56e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e572:	88 d0                	mov    al,dl
c001e574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e579:	74 3b                	je     c001e5b6 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e57b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e57f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e582:	85 d2                	test   edx,edx
c001e584:	74 24                	je     c001e5aa <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e586:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e58c:	31 ef                	xor    edi,ebp
c001e58e:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e594:	75 14                	jne    c001e5aa <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e596:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e59c:	75 0c                	jne    c001e5aa <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e59e:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e5a4:	0f 84 63 03 00 00    	je     c001e90d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e5aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5ae:	8b 12                	mov    edx,DWORD PTR [edx]
c001e5b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5b4:	eb be                	jmp    c001e574 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e5b6:	66 81 f9 01 06       	cmp    cx,0x601
c001e5bb:	0f 85 81 01 00 00    	jne    c001e742 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e5c1:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e5c8:	75 25                	jne    c001e5ef <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e5ca:	83 ec 0c             	sub    esp,0xc
c001e5cd:	68 64 01 00 00       	push   0x164
c001e5d2:	e8 10 b8 fe ff       	call   c0009de7 <malloc>
c001e5d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5da:	89 c5                	mov    ebp,eax
c001e5dc:	e8 d3 12 00 00       	call   c001f8b4 <SATABus::SATABus()>
c001e5e1:	83 c4 10             	add    esp,0x10
c001e5e4:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e5eb:	74 4a                	je     c001e637 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e5ed:	eb 2f                	jmp    c001e61e <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e5ef:	83 ec 0c             	sub    esp,0xc
c001e5f2:	68 db 73 02 c0       	push   0xc00273db
c001e5f7:	e8 45 b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e5fc:	83 c4 10             	add    esp,0x10
c001e5ff:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e606:	75 c2                	jne    c001e5ca <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e608:	e4 60                	in     al,0x60
c001e60a:	3c 1c                	cmp    al,0x1c
c001e60c:	74 04                	je     c001e612 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e60e:	3c 5a                	cmp    al,0x5a
c001e610:	75 f6                	jne    c001e608 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e612:	e4 60                	in     al,0x60
c001e614:	3c 5a                	cmp    al,0x5a
c001e616:	74 fa                	je     c001e612 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e618:	3c 1c                	cmp    al,0x1c
c001e61a:	74 f6                	je     c001e612 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e61c:	eb ac                	jmp    c001e5ca <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e61e:	83 ec 0c             	sub    esp,0xc
c001e621:	68 e1 73 02 c0       	push   0xc00273e1
c001e626:	e8 16 b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e62b:	83 c4 10             	add    esp,0x10
c001e62e:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e635:	74 1b                	je     c001e652 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e637:	50                   	push   eax
c001e638:	50                   	push   eax
c001e639:	55                   	push   ebp
c001e63a:	53                   	push   ebx
c001e63b:	e8 2e 00 ff ff       	call   c000e66e <Device::addChild(Device*)>
c001e640:	83 c4 10             	add    esp,0x10
c001e643:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e64a:	74 33                	je     c001e67f <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e64c:	eb 18                	jmp    c001e666 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e64e:	3c 1c                	cmp    al,0x1c
c001e650:	74 0c                	je     c001e65e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e652:	e4 60                	in     al,0x60
c001e654:	3c 5a                	cmp    al,0x5a
c001e656:	75 f6                	jne    c001e64e <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e658:	eb 04                	jmp    c001e65e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e65a:	3c 1c                	cmp    al,0x1c
c001e65c:	75 d9                	jne    c001e637 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e65e:	e4 60                	in     al,0x60
c001e660:	3c 5a                	cmp    al,0x5a
c001e662:	74 fa                	je     c001e65e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e664:	eb f4                	jmp    c001e65a <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e666:	83 ec 0c             	sub    esp,0xc
c001e669:	68 e9 73 02 c0       	push   0xc00273e9
c001e66e:	e8 ce b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e673:	83 c4 10             	add    esp,0x10
c001e676:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e67d:	74 29                	je     c001e6a8 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e67f:	83 ec 2c             	sub    esp,0x2c
c001e682:	b9 09 00 00 00       	mov    ecx,0x9
c001e687:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e68b:	fc                   	cld    
c001e68c:	89 e7                	mov    edi,esp
c001e68e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e690:	55                   	push   ebp
c001e691:	e8 ea fe fe ff       	call   c000e580 <Device::preOpenPCI(PCIDeviceInfo)>
c001e696:	83 c4 30             	add    esp,0x30
c001e699:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e6a0:	74 33                	je     c001e6d5 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e6a2:	eb 18                	jmp    c001e6bc <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e6a4:	3c 1c                	cmp    al,0x1c
c001e6a6:	74 0c                	je     c001e6b4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e6a8:	e4 60                	in     al,0x60
c001e6aa:	3c 5a                	cmp    al,0x5a
c001e6ac:	75 f6                	jne    c001e6a4 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e6ae:	eb 04                	jmp    c001e6b4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e6b0:	3c 1c                	cmp    al,0x1c
c001e6b2:	75 cb                	jne    c001e67f <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e6b4:	e4 60                	in     al,0x60
c001e6b6:	3c 5a                	cmp    al,0x5a
c001e6b8:	74 fa                	je     c001e6b4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e6ba:	eb f4                	jmp    c001e6b0 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e6bc:	83 ec 0c             	sub    esp,0xc
c001e6bf:	68 f1 73 02 c0       	push   0xc00273f1
c001e6c4:	e8 78 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e6d3:	74 23                	je     c001e6f8 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e6d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e6d8:	6a 00                	push   0x0
c001e6da:	6a 00                	push   0x0
c001e6dc:	6a 00                	push   0x0
c001e6de:	55                   	push   ebp
c001e6df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6e2:	83 c4 10             	add    esp,0x10
c001e6e5:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e6ec:	0f 84 1b 02 00 00    	je     c001e90d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6f2:	eb 18                	jmp    c001e70c <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e6f4:	3c 1c                	cmp    al,0x1c
c001e6f6:	74 0c                	je     c001e704 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e6f8:	e4 60                	in     al,0x60
c001e6fa:	3c 5a                	cmp    al,0x5a
c001e6fc:	75 f6                	jne    c001e6f4 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e6fe:	eb 04                	jmp    c001e704 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e700:	3c 1c                	cmp    al,0x1c
c001e702:	75 d1                	jne    c001e6d5 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e704:	e4 60                	in     al,0x60
c001e706:	3c 5a                	cmp    al,0x5a
c001e708:	74 fa                	je     c001e704 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e70a:	eb f4                	jmp    c001e700 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e70c:	83 ec 0c             	sub    esp,0xc
c001e70f:	68 f9 73 02 c0       	push   0xc00273f9
c001e714:	e8 28 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e719:	83 c4 10             	add    esp,0x10
c001e71c:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e723:	0f 85 e4 01 00 00    	jne    c001e90d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e729:	e4 60                	in     al,0x60
c001e72b:	3c 5a                	cmp    al,0x5a
c001e72d:	74 04                	je     c001e733 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e72f:	3c 1c                	cmp    al,0x1c
c001e731:	75 f6                	jne    c001e729 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e733:	e4 60                	in     al,0x60
c001e735:	3c 5a                	cmp    al,0x5a
c001e737:	74 fa                	je     c001e733 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e739:	3c 1c                	cmp    al,0x1c
c001e73b:	74 f6                	je     c001e733 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e73d:	e9 cb 01 00 00       	jmp    c001e90d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e742:	66 81 f9 01 01       	cmp    cx,0x101
c001e747:	0f 85 7a 01 00 00    	jne    c001e8c7 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e74d:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e754:	75 25                	jne    c001e77b <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e756:	83 ec 0c             	sub    esp,0xc
c001e759:	68 70 02 00 00       	push   0x270
c001e75e:	e8 84 b6 fe ff       	call   c0009de7 <malloc>
c001e763:	89 04 24             	mov    DWORD PTR [esp],eax
c001e766:	89 c5                	mov    ebp,eax
c001e768:	e8 df 05 00 00       	call   c001ed4c <IDE::IDE()>
c001e76d:	83 c4 10             	add    esp,0x10
c001e770:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e777:	74 4a                	je     c001e7c3 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e779:	eb 2f                	jmp    c001e7aa <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e77b:	83 ec 0c             	sub    esp,0xc
c001e77e:	68 01 74 02 c0       	push   0xc0027401
c001e783:	e8 b9 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e788:	83 c4 10             	add    esp,0x10
c001e78b:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e792:	75 c2                	jne    c001e756 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e794:	e4 60                	in     al,0x60
c001e796:	3c 5a                	cmp    al,0x5a
c001e798:	74 04                	je     c001e79e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e79a:	3c 1c                	cmp    al,0x1c
c001e79c:	75 f6                	jne    c001e794 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e79e:	e4 60                	in     al,0x60
c001e7a0:	3c 5a                	cmp    al,0x5a
c001e7a2:	74 fa                	je     c001e79e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7a4:	3c 1c                	cmp    al,0x1c
c001e7a6:	74 f6                	je     c001e79e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7a8:	eb ac                	jmp    c001e756 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e7aa:	83 ec 0c             	sub    esp,0xc
c001e7ad:	68 08 74 02 c0       	push   0xc0027408
c001e7b2:	e8 8a b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e7b7:	83 c4 10             	add    esp,0x10
c001e7ba:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e7c1:	74 1b                	je     c001e7de <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e7c3:	57                   	push   edi
c001e7c4:	57                   	push   edi
c001e7c5:	55                   	push   ebp
c001e7c6:	53                   	push   ebx
c001e7c7:	e8 a2 fe fe ff       	call   c000e66e <Device::addChild(Device*)>
c001e7cc:	83 c4 10             	add    esp,0x10
c001e7cf:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e7d6:	74 33                	je     c001e80b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e7d8:	eb 18                	jmp    c001e7f2 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e7da:	3c 1c                	cmp    al,0x1c
c001e7dc:	74 0c                	je     c001e7ea <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7de:	e4 60                	in     al,0x60
c001e7e0:	3c 5a                	cmp    al,0x5a
c001e7e2:	75 f6                	jne    c001e7da <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e7e4:	eb 04                	jmp    c001e7ea <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7e6:	3c 1c                	cmp    al,0x1c
c001e7e8:	75 d9                	jne    c001e7c3 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e7ea:	e4 60                	in     al,0x60
c001e7ec:	3c 5a                	cmp    al,0x5a
c001e7ee:	74 fa                	je     c001e7ea <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7f0:	eb f4                	jmp    c001e7e6 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e7f2:	83 ec 0c             	sub    esp,0xc
c001e7f5:	68 0f 74 02 c0       	push   0xc002740f
c001e7fa:	e8 42 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e7ff:	83 c4 10             	add    esp,0x10
c001e802:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e809:	74 29                	je     c001e834 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e80b:	83 ec 2c             	sub    esp,0x2c
c001e80e:	b9 09 00 00 00       	mov    ecx,0x9
c001e813:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e817:	fc                   	cld    
c001e818:	89 e7                	mov    edi,esp
c001e81a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e81c:	55                   	push   ebp
c001e81d:	e8 5e fd fe ff       	call   c000e580 <Device::preOpenPCI(PCIDeviceInfo)>
c001e822:	83 c4 30             	add    esp,0x30
c001e825:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e82c:	74 33                	je     c001e861 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e82e:	eb 18                	jmp    c001e848 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e830:	3c 1c                	cmp    al,0x1c
c001e832:	74 0c                	je     c001e840 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e834:	e4 60                	in     al,0x60
c001e836:	3c 5a                	cmp    al,0x5a
c001e838:	75 f6                	jne    c001e830 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e83a:	eb 04                	jmp    c001e840 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e83c:	3c 1c                	cmp    al,0x1c
c001e83e:	75 cb                	jne    c001e80b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e840:	e4 60                	in     al,0x60
c001e842:	3c 5a                	cmp    al,0x5a
c001e844:	74 fa                	je     c001e840 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e846:	eb f4                	jmp    c001e83c <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e848:	83 ec 0c             	sub    esp,0xc
c001e84b:	68 16 74 02 c0       	push   0xc0027416
c001e850:	e8 ec b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e855:	83 c4 10             	add    esp,0x10
c001e858:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e85f:	74 23                	je     c001e884 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e861:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e864:	6a 00                	push   0x0
c001e866:	6a 00                	push   0x0
c001e868:	6a 00                	push   0x0
c001e86a:	55                   	push   ebp
c001e86b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e86e:	83 c4 10             	add    esp,0x10
c001e871:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e878:	0f 84 8f 00 00 00    	je     c001e90d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e87e:	eb 18                	jmp    c001e898 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e880:	3c 1c                	cmp    al,0x1c
c001e882:	74 0c                	je     c001e890 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e884:	e4 60                	in     al,0x60
c001e886:	3c 5a                	cmp    al,0x5a
c001e888:	75 f6                	jne    c001e880 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e88a:	eb 04                	jmp    c001e890 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e88c:	3c 1c                	cmp    al,0x1c
c001e88e:	75 d1                	jne    c001e861 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e890:	e4 60                	in     al,0x60
c001e892:	3c 5a                	cmp    al,0x5a
c001e894:	74 fa                	je     c001e890 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e896:	eb f4                	jmp    c001e88c <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	68 1d 74 02 c0       	push   0xc002741d
c001e8a0:	e8 9c b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001e8af:	75 5c                	jne    c001e90d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e8b1:	e4 60                	in     al,0x60
c001e8b3:	3c 5a                	cmp    al,0x5a
c001e8b5:	74 04                	je     c001e8bb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e8b7:	3c 1c                	cmp    al,0x1c
c001e8b9:	75 f6                	jne    c001e8b1 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e8bb:	e4 60                	in     al,0x60
c001e8bd:	3c 5a                	cmp    al,0x5a
c001e8bf:	74 fa                	je     c001e8bb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e8c1:	3c 1c                	cmp    al,0x1c
c001e8c3:	74 f6                	je     c001e8bb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e8c5:	eb 46                	jmp    c001e90d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e8c7:	83 ec 0c             	sub    esp,0xc
c001e8ca:	68 58 01 00 00       	push   0x158
c001e8cf:	e8 13 b5 fe ff       	call   c0009de7 <malloc>
c001e8d4:	89 c5                	mov    ebp,eax
c001e8d6:	58                   	pop    eax
c001e8d7:	5a                   	pop    edx
c001e8d8:	68 24 74 02 c0       	push   0xc0027424
c001e8dd:	55                   	push   ebp
c001e8de:	e8 95 00 ff ff       	call   c000e978 <DriverlessDevice::DriverlessDevice(char const*)>
c001e8e3:	59                   	pop    ecx
c001e8e4:	5e                   	pop    esi
c001e8e5:	55                   	push   ebp
c001e8e6:	53                   	push   ebx
c001e8e7:	e8 82 fd fe ff       	call   c000e66e <Device::addChild(Device*)>
c001e8ec:	83 c4 10             	add    esp,0x10
c001e8ef:	b9 09 00 00 00       	mov    ecx,0x9
c001e8f4:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e8f8:	fc                   	cld    
c001e8f9:	89 fe                	mov    esi,edi
c001e8fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e8fd:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e901:	83 c4 1c             	add    esp,0x1c
c001e904:	5b                   	pop    ebx
c001e905:	5e                   	pop    esi
c001e906:	5f                   	pop    edi
c001e907:	5d                   	pop    ebp
c001e908:	e9 73 fc fe ff       	jmp    c000e580 <Device::preOpenPCI(PCIDeviceInfo)>
c001e90d:	83 c4 1c             	add    esp,0x1c
c001e910:	5b                   	pop    ebx
c001e911:	5e                   	pop    esi
c001e912:	5f                   	pop    edi
c001e913:	5d                   	pop    ebp
c001e914:	c3                   	ret    
c001e915:	90                   	nop

c001e916 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e916:	55                   	push   ebp
c001e917:	57                   	push   edi
c001e918:	56                   	push   esi
c001e919:	53                   	push   ebx
c001e91a:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e920:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e927:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e92e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e932:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e939:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e93d:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e944:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e948:	68 3e 74 02 c0       	push   0xc002743e
c001e94d:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e951:	53                   	push   ebx
c001e952:	e8 f9 1d fe ff       	call   c0000750 <strcpy>
c001e957:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e95c:	b2 64                	mov    dl,0x64
c001e95e:	89 c8                	mov    eax,ecx
c001e960:	f6 f2                	div    dl
c001e962:	b2 0a                	mov    dl,0xa
c001e964:	83 c0 30             	add    eax,0x30
c001e967:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e96b:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e96f:	83 c4 10             	add    esp,0x10
c001e972:	89 c8                	mov    eax,ecx
c001e974:	f6 f2                	div    dl
c001e976:	89 c1                	mov    ecx,eax
c001e978:	0f b6 c0             	movzx  eax,al
c001e97b:	88 e9                	mov    cl,ch
c001e97d:	f6 f2                	div    dl
c001e97f:	88 e0                	mov    al,ah
c001e981:	83 c0 30             	add    eax,0x30
c001e984:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e988:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e98c:	8d 41 30             	lea    eax,[ecx+0x30]
c001e98f:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e993:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e997:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e99c:	f6 f2                	div    dl
c001e99e:	89 c1                	mov    ecx,eax
c001e9a0:	0f b6 c0             	movzx  eax,al
c001e9a3:	88 e9                	mov    cl,ch
c001e9a5:	f6 f2                	div    dl
c001e9a7:	88 e0                	mov    al,ah
c001e9a9:	83 c0 30             	add    eax,0x30
c001e9ac:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e9b0:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e9b4:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9b7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e9bb:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e9bf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e9c4:	f6 f2                	div    dl
c001e9c6:	89 c1                	mov    ecx,eax
c001e9c8:	0f b6 c0             	movzx  eax,al
c001e9cb:	88 e9                	mov    cl,ch
c001e9cd:	f6 f2                	div    dl
c001e9cf:	88 e0                	mov    al,ah
c001e9d1:	83 c0 30             	add    eax,0x30
c001e9d4:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001e9db:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e9df:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e9e3:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9e6:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e9ea:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e9ee:	74 29                	je     c001ea19 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e9f0:	83 ec 0c             	sub    esp,0xc
c001e9f3:	53                   	push   ebx
c001e9f4:	e8 48 b4 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e9f9:	83 c4 10             	add    esp,0x10
c001e9fc:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001ea03:	75 14                	jne    c001ea19 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001ea05:	e4 60                	in     al,0x60
c001ea07:	3c 1c                	cmp    al,0x1c
c001ea09:	74 04                	je     c001ea0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea0b:	3c 5a                	cmp    al,0x5a
c001ea0d:	75 f6                	jne    c001ea05 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001ea0f:	e4 60                	in     al,0x60
c001ea11:	3c 5a                	cmp    al,0x5a
c001ea13:	74 fa                	je     c001ea0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea15:	3c 1c                	cmp    al,0x1c
c001ea17:	74 f6                	je     c001ea0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea19:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001ea1e:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001ea23:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ea28:	83 ec 0c             	sub    esp,0xc
c001ea2b:	6a 0c                	push   0xc
c001ea2d:	56                   	push   esi
c001ea2e:	53                   	push   ebx
c001ea2f:	57                   	push   edi
c001ea30:	55                   	push   ebp
c001ea31:	e8 68 f3 ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea36:	83 c4 20             	add    esp,0x20
c001ea39:	56                   	push   esi
c001ea3a:	53                   	push   ebx
c001ea3b:	57                   	push   edi
c001ea3c:	55                   	push   ebp
c001ea3d:	e8 50 f4 ff ff       	call   c001de92 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ea42:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001ea47:	56                   	push   esi
c001ea48:	53                   	push   ebx
c001ea49:	57                   	push   edi
c001ea4a:	55                   	push   ebp
c001ea4b:	e8 d8 f4 ff ff       	call   c001df28 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ea50:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001ea54:	83 c4 14             	add    esp,0x14
c001ea57:	6a 3c                	push   0x3c
c001ea59:	56                   	push   esi
c001ea5a:	53                   	push   ebx
c001ea5b:	57                   	push   edi
c001ea5c:	55                   	push   ebp
c001ea5d:	e8 3c f3 ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea62:	0f b6 c4             	movzx  eax,ah
c001ea65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ea69:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ea6d:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001ea74:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001ea79:	83 c4 20             	add    esp,0x20
c001ea7c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ea82:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001ea89:	0f 84 38 01 00 00    	je     c001ebc7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001ea8f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ea97:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001ea9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eaa0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eaa6:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001eaac:	0f 8e 15 01 00 00    	jle    c001ebc7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001eab2:	50                   	push   eax
c001eab3:	50                   	push   eax
c001eab4:	68 59 74 02 c0       	push   0xc0027459
c001eab9:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eabd:	50                   	push   eax
c001eabe:	e8 8d 1c fe ff       	call   c0000750 <strcpy>
c001eac3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001eac7:	b9 0a 00 00 00       	mov    ecx,0xa
c001eacc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ead0:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ead4:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ead8:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001eadc:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001eae0:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001eae4:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001eae8:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001eaec:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001eaf0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001eaf4:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001eaf8:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001eafc:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001eb00:	83 c4 10             	add    esp,0x10
c001eb03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb07:	99                   	cdq    
c001eb08:	f7 f9                	idiv   ecx
c001eb0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001eb0e:	99                   	cdq    
c001eb0f:	f7 f9                	idiv   ecx
c001eb11:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001eb15:	83 c2 30             	add    edx,0x30
c001eb18:	83 c0 30             	add    eax,0x30
c001eb1b:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001eb1f:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001eb23:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001eb2a:	74 2d                	je     c001eb59 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eb33:	50                   	push   eax
c001eb34:	e8 08 b3 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001eb39:	83 c4 10             	add    esp,0x10
c001eb3c:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001eb43:	75 14                	jne    c001eb59 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb45:	e4 60                	in     al,0x60
c001eb47:	3c 5a                	cmp    al,0x5a
c001eb49:	74 04                	je     c001eb4f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb4b:	3c 1c                	cmp    al,0x1c
c001eb4d:	75 f6                	jne    c001eb45 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001eb4f:	e4 60                	in     al,0x60
c001eb51:	3c 5a                	cmp    al,0x5a
c001eb53:	74 fa                	je     c001eb4f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb55:	3c 1c                	cmp    al,0x1c
c001eb57:	74 f6                	je     c001eb4f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eb5d:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001eb62:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eb68:	8d 04 d0             	lea    eax,[eax+edx*8]
c001eb6b:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001eb72:	39 d3                	cmp    ebx,edx
c001eb74:	75 48                	jne    c001ebbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001eb76:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001eb7d:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001eb81:	75 3b                	jne    c001ebbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001eb83:	83 ec 0c             	sub    esp,0xc
c001eb86:	68 88 74 02 c0       	push   0xc0027488
c001eb8b:	e8 6b e5 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001eb90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb94:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c001eb99:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eb9f:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001eba7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ebab:	50                   	push   eax
c001ebac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ebb0:	53                   	push   ebx
c001ebb1:	68 ad 74 02 c0       	push   0xc00274ad
c001ebb6:	e8 40 e5 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001ebbb:	83 c4 20             	add    esp,0x20
c001ebbe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ebc2:	e9 d0 fe ff ff       	jmp    c001ea97 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001ebc7:	31 d2                	xor    edx,edx
c001ebc9:	83 ec 0c             	sub    esp,0xc
c001ebcc:	56                   	push   esi
c001ebcd:	53                   	push   ebx
c001ebce:	57                   	push   edi
c001ebcf:	52                   	push   edx
c001ebd0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ebd4:	55                   	push   ebp
c001ebd5:	e8 9a f3 ff ff       	call   c001df74 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ebda:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ebde:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001ebe5:	42                   	inc    edx
c001ebe6:	83 c4 20             	add    esp,0x20
c001ebe9:	83 fa 06             	cmp    edx,0x6
c001ebec:	75 db                	jne    c001ebc9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001ebee:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001ebf3:	83 ec 0c             	sub    esp,0xc
c001ebf6:	86 e0                	xchg   al,ah
c001ebf8:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001ec00:	6a 02                	push   0x2
c001ec02:	56                   	push   esi
c001ec03:	53                   	push   ebx
c001ec04:	57                   	push   edi
c001ec05:	55                   	push   ebp
c001ec06:	e8 93 f1 ff ff       	call   c001dd9e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec0b:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ec13:	83 c4 20             	add    esp,0x20
c001ec16:	56                   	push   esi
c001ec17:	53                   	push   ebx
c001ec18:	57                   	push   edi
c001ec19:	55                   	push   ebp
c001ec1a:	e8 bd f2 ff ff       	call   c001dedc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ec1f:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ec26:	56                   	push   esi
c001ec27:	53                   	push   ebx
c001ec28:	57                   	push   edi
c001ec29:	55                   	push   ebp
c001ec2a:	e8 17 f2 ff ff       	call   c001de46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec2f:	b9 09 00 00 00       	mov    ecx,0x9
c001ec34:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001ec3c:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001ec40:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ec47:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ec4b:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ec52:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ec56:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001ec5d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ec61:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	fc                   	cld    
c001ec6c:	89 e7                	mov    edi,esp
c001ec6e:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ec75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ec77:	55                   	push   ebp
c001ec78:	e8 59 f8 ff ff       	call   c001e4d6 <PCI::foundDevice(PCIDeviceInfo)>
c001ec7d:	81 c4 dc 00 00 00    	add    esp,0xdc
c001ec83:	5b                   	pop    ebx
c001ec84:	5e                   	pop    esi
c001ec85:	5f                   	pop    edi
c001ec86:	5d                   	pop    ebp
c001ec87:	c3                   	ret    

c001ec88 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ec88:	55                   	push   ebp
c001ec89:	57                   	push   edi
c001ec8a:	56                   	push   esi
c001ec8b:	53                   	push   ebx
c001ec8c:	83 ec 0c             	sub    esp,0xc
c001ec8f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ec93:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ec98:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ec9d:	6a 00                	push   0x0
c001ec9f:	56                   	push   esi
c001eca0:	57                   	push   edi
c001eca1:	55                   	push   ebp
c001eca2:	e8 9f f1 ff ff       	call   c001de46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eca7:	6a 00                	push   0x0
c001eca9:	56                   	push   esi
c001ecaa:	57                   	push   edi
c001ecab:	55                   	push   ebp
c001ecac:	e8 65 fc ff ff       	call   c001e916 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ecb1:	83 c4 20             	add    esp,0x20
c001ecb4:	6a 00                	push   0x0
c001ecb6:	56                   	push   esi
c001ecb7:	57                   	push   edi
c001ecb8:	55                   	push   ebp
c001ecb9:	e8 ac f1 ff ff       	call   c001de6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ecbe:	83 c4 10             	add    esp,0x10
c001ecc1:	84 c0                	test   al,al
c001ecc3:	79 27                	jns    c001ecec <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ecc5:	bb 01 00 00 00       	mov    ebx,0x1
c001ecca:	53                   	push   ebx
c001eccb:	56                   	push   esi
c001eccc:	57                   	push   edi
c001eccd:	55                   	push   ebp
c001ecce:	e8 73 f1 ff ff       	call   c001de46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ecd3:	83 c4 10             	add    esp,0x10
c001ecd6:	66 40                	inc    ax
c001ecd8:	74 0c                	je     c001ece6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ecda:	53                   	push   ebx
c001ecdb:	56                   	push   esi
c001ecdc:	57                   	push   edi
c001ecdd:	55                   	push   ebp
c001ecde:	e8 33 fc ff ff       	call   c001e916 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ece3:	83 c4 10             	add    esp,0x10
c001ece6:	43                   	inc    ebx
c001ece7:	83 fb 08             	cmp    ebx,0x8
c001ecea:	75 de                	jne    c001ecca <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ecec:	83 c4 0c             	add    esp,0xc
c001ecef:	5b                   	pop    ebx
c001ecf0:	5e                   	pop    esi
c001ecf1:	5f                   	pop    edi
c001ecf2:	5d                   	pop    ebp
c001ecf3:	c3                   	ret    

c001ecf4 <PCI::detect()>:
c001ecf4:	56                   	push   esi
c001ecf5:	53                   	push   ebx
c001ecf6:	53                   	push   ebx
c001ecf7:	31 db                	xor    ebx,ebx
c001ecf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ecfd:	6a 00                	push   0x0
c001ecff:	6a 00                	push   0x0
c001ed01:	6a 00                	push   0x0
c001ed03:	56                   	push   esi
c001ed04:	e8 61 f1 ff ff       	call   c001de6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ed09:	83 c4 10             	add    esp,0x10
c001ed0c:	a8 80                	test   al,0x80
c001ed0e:	75 21                	jne    c001ed31 <PCI::detect()+0x3d>
c001ed10:	51                   	push   ecx
c001ed11:	51                   	push   ecx
c001ed12:	6a 00                	push   0x0
c001ed14:	56                   	push   esi
c001ed15:	e8 98 f7 ff ff       	call   c001e4b2 <PCI::checkBus(unsigned char)>
c001ed1a:	83 c4 10             	add    esp,0x10
c001ed1d:	eb 24                	jmp    c001ed43 <PCI::detect()+0x4f>
c001ed1f:	52                   	push   edx
c001ed20:	52                   	push   edx
c001ed21:	53                   	push   ebx
c001ed22:	43                   	inc    ebx
c001ed23:	56                   	push   esi
c001ed24:	e8 89 f7 ff ff       	call   c001e4b2 <PCI::checkBus(unsigned char)>
c001ed29:	83 c4 10             	add    esp,0x10
c001ed2c:	83 fb 08             	cmp    ebx,0x8
c001ed2f:	74 12                	je     c001ed43 <PCI::detect()+0x4f>
c001ed31:	53                   	push   ebx
c001ed32:	6a 00                	push   0x0
c001ed34:	6a 00                	push   0x0
c001ed36:	56                   	push   esi
c001ed37:	e8 0a f1 ff ff       	call   c001de46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed3c:	83 c4 10             	add    esp,0x10
c001ed3f:	66 40                	inc    ax
c001ed41:	74 dc                	je     c001ed1f <PCI::detect()+0x2b>
c001ed43:	58                   	pop    eax
c001ed44:	5b                   	pop    ebx
c001ed45:	5e                   	pop    esi
c001ed46:	c3                   	ret    
c001ed47:	90                   	nop

c001ed48 <IDE::close(int, int, void*)>:
c001ed48:	83 c8 ff             	or     eax,0xffffffff
c001ed4b:	c3                   	ret    

c001ed4c <IDE::IDE()>:
c001ed4c:	83 ec 0c             	sub    esp,0xc
c001ed4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed53:	83 ec 08             	sub    esp,0x8
c001ed56:	68 f4 74 02 c0       	push   0xc00274f4
c001ed5b:	50                   	push   eax
c001ed5c:	e8 bb fc fe ff       	call   c000ea1c <HardDiskController::HardDiskController(char const*)>
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	ba a0 75 02 c0       	mov    edx,0xc00275a0
c001ed69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6d:	89 10                	mov    DWORD PTR [eax],edx
c001ed6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed73:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ed7a:	90                   	nop
c001ed7b:	83 c4 0c             	add    esp,0xc
c001ed7e:	c3                   	ret    
c001ed7f:	90                   	nop

c001ed80 <IDE::prepareInterrupt(unsigned char)>:
c001ed80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed89:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ed91:	c3                   	ret    

c001ed92 <selectDrive(unsigned char, unsigned char)>:
c001ed92:	c3                   	ret    
c001ed93:	90                   	nop

c001ed94 <IDE::getBase(unsigned char)>:
c001ed94:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ed99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed9d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001eda5:	c3                   	ret    

c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001eda6:	55                   	push   ebp
c001eda7:	57                   	push   edi
c001eda8:	56                   	push   esi
c001eda9:	53                   	push   ebx
c001edaa:	83 ec 1c             	sub    esp,0x1c
c001edad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001edb1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edb5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001edb8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001edbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001edc0:	80 f9 03             	cmp    cl,0x3
c001edc3:	77 51                	ja     c001ee16 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001edc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edc9:	0f b6 f2             	movzx  esi,dl
c001edcc:	0f b6 db             	movzx  ebx,bl
c001edcf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001edd2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001edd6:	83 ca 80             	or     edx,0xffffff80
c001edd9:	0f b6 d2             	movzx  edx,dl
c001eddc:	52                   	push   edx
c001eddd:	6a 0c                	push   0xc
c001eddf:	56                   	push   esi
c001ede0:	57                   	push   edi
c001ede1:	e8 c0 ff ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ede6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001edeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edef:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001edf3:	ee                   	out    dx,al
c001edf4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001edf9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001edfd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ee01:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ee05:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ee0d:	83 c4 2c             	add    esp,0x2c
c001ee10:	5b                   	pop    ebx
c001ee11:	5e                   	pop    esi
c001ee12:	5f                   	pop    edi
c001ee13:	5d                   	pop    ebp
c001ee14:	eb 90                	jmp    c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee16:	80 fb 07             	cmp    bl,0x7
c001ee19:	77 12                	ja     c001ee2d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ee1b:	0f b6 d2             	movzx  edx,dl
c001ee1e:	0f b6 db             	movzx  ebx,bl
c001ee21:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ee29:	89 da                	mov    edx,ebx
c001ee2b:	eb 2f                	jmp    c001ee5c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee2d:	80 fb 0d             	cmp    bl,0xd
c001ee30:	77 13                	ja     c001ee45 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ee32:	0f b6 d2             	movzx  edx,dl
c001ee35:	0f b6 db             	movzx  ebx,bl
c001ee38:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ee3f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ee43:	eb 17                	jmp    c001ee5c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee45:	80 fb 15             	cmp    bl,0x15
c001ee48:	77 13                	ja     c001ee5d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ee4a:	0f b6 d2             	movzx  edx,dl
c001ee4d:	0f b6 db             	movzx  ebx,bl
c001ee50:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ee58:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ee5c:	ee                   	out    dx,al
c001ee5d:	83 c4 1c             	add    esp,0x1c
c001ee60:	5b                   	pop    ebx
c001ee61:	5e                   	pop    esi
c001ee62:	5f                   	pop    edi
c001ee63:	5d                   	pop    ebp
c001ee64:	c3                   	ret    
c001ee65:	90                   	nop

c001ee66 <IDE::read(unsigned char, unsigned char)>:
c001ee66:	55                   	push   ebp
c001ee67:	57                   	push   edi
c001ee68:	56                   	push   esi
c001ee69:	53                   	push   ebx
c001ee6a:	83 ec 1c             	sub    esp,0x1c
c001ee6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ee71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee75:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ee78:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ee7c:	3c 03                	cmp    al,0x3
c001ee7e:	77 43                	ja     c001eec3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001ee80:	0f b6 f2             	movzx  esi,dl
c001ee83:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ee86:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ee8a:	83 c8 80             	or     eax,0xffffff80
c001ee8d:	0f b6 c0             	movzx  eax,al
c001ee90:	50                   	push   eax
c001ee91:	6a 0c                	push   0xc
c001ee93:	56                   	push   esi
c001ee94:	57                   	push   edi
c001ee95:	e8 0c ff ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee9a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001ee9f:	0f b6 c3             	movzx  eax,bl
c001eea2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001eea6:	ec                   	in     al,dx
c001eea7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eeab:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001eeb0:	52                   	push   edx
c001eeb1:	6a 0c                	push   0xc
c001eeb3:	56                   	push   esi
c001eeb4:	57                   	push   edi
c001eeb5:	e8 ec fe ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eeba:	83 c4 20             	add    esp,0x20
c001eebd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001eec1:	eb 49                	jmp    c001ef0c <IDE::read(unsigned char, unsigned char)+0xa6>
c001eec3:	80 fb 07             	cmp    bl,0x7
c001eec6:	77 12                	ja     c001eeda <IDE::read(unsigned char, unsigned char)+0x74>
c001eec8:	0f b6 d2             	movzx  edx,dl
c001eecb:	0f b6 c3             	movzx  eax,bl
c001eece:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001eed6:	89 c2                	mov    edx,eax
c001eed8:	eb 31                	jmp    c001ef0b <IDE::read(unsigned char, unsigned char)+0xa5>
c001eeda:	80 fb 0d             	cmp    bl,0xd
c001eedd:	77 13                	ja     c001eef2 <IDE::read(unsigned char, unsigned char)+0x8c>
c001eedf:	0f b6 d2             	movzx  edx,dl
c001eee2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001eee9:	0f b6 d3             	movzx  edx,bl
c001eeec:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eef0:	eb 19                	jmp    c001ef0b <IDE::read(unsigned char, unsigned char)+0xa5>
c001eef2:	31 c0                	xor    eax,eax
c001eef4:	80 fb 15             	cmp    bl,0x15
c001eef7:	77 13                	ja     c001ef0c <IDE::read(unsigned char, unsigned char)+0xa6>
c001eef9:	0f b6 d2             	movzx  edx,dl
c001eefc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ef04:	0f b6 d3             	movzx  edx,bl
c001ef07:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ef0b:	ec                   	in     al,dx
c001ef0c:	83 c4 1c             	add    esp,0x1c
c001ef0f:	5b                   	pop    ebx
c001ef10:	5e                   	pop    esi
c001ef11:	5f                   	pop    edi
c001ef12:	5d                   	pop    ebp
c001ef13:	c3                   	ret    

c001ef14 <IDE::waitInterrupt(unsigned char)>:
c001ef14:	55                   	push   ebp
c001ef15:	57                   	push   edi
c001ef16:	56                   	push   esi
c001ef17:	53                   	push   ebx
c001ef18:	31 db                	xor    ebx,ebx
c001ef1a:	83 ec 0c             	sub    esp,0xc
c001ef1d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ef21:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ef26:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ef2e:	89 e8                	mov    eax,ebp
c001ef30:	84 c0                	test   al,al
c001ef32:	75 30                	jne    c001ef64 <IDE::waitInterrupt(unsigned char)+0x50>
c001ef34:	50                   	push   eax
c001ef35:	6a 0c                	push   0xc
c001ef37:	56                   	push   esi
c001ef38:	57                   	push   edi
c001ef39:	e8 28 ff ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001ef3e:	83 c4 10             	add    esp,0x10
c001ef41:	a8 01                	test   al,0x1
c001ef43:	75 27                	jne    c001ef6c <IDE::waitInterrupt(unsigned char)+0x58>
c001ef45:	f6 c3 04             	test   bl,0x4
c001ef48:	75 12                	jne    c001ef5c <IDE::waitInterrupt(unsigned char)+0x48>
c001ef4a:	83 fb 32             	cmp    ebx,0x32
c001ef4d:	7e 0d                	jle    c001ef5c <IDE::waitInterrupt(unsigned char)+0x48>
c001ef4f:	83 ec 0c             	sub    esp,0xc
c001ef52:	6a 64                	push   0x64
c001ef54:	e8 db a2 ff ff       	call   c0019234 <milliTenthSleep(unsigned int)>
c001ef59:	83 c4 10             	add    esp,0x10
c001ef5c:	83 fb 3c             	cmp    ebx,0x3c
c001ef5f:	74 0b                	je     c001ef6c <IDE::waitInterrupt(unsigned char)+0x58>
c001ef61:	43                   	inc    ebx
c001ef62:	eb c2                	jmp    c001ef26 <IDE::waitInterrupt(unsigned char)+0x12>
c001ef64:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ef6c:	83 c4 0c             	add    esp,0xc
c001ef6f:	89 e8                	mov    eax,ebp
c001ef71:	5b                   	pop    ebx
c001ef72:	5e                   	pop    esi
c001ef73:	5f                   	pop    edi
c001ef74:	5d                   	pop    ebp
c001ef75:	c3                   	ret    

c001ef76 <ideChannel0IRQHandler(regs*, void*)>:
c001ef76:	83 ec 10             	sub    esp,0x10
c001ef79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef7d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ef84:	6a 07                	push   0x7
c001ef86:	6a 00                	push   0x0
c001ef88:	50                   	push   eax
c001ef89:	e8 d8 fe ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001ef8e:	83 c4 1c             	add    esp,0x1c
c001ef91:	c3                   	ret    

c001ef92 <ideChannel1IRQHandler(regs*, void*)>:
c001ef92:	83 ec 10             	sub    esp,0x10
c001ef95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef99:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001efa0:	6a 07                	push   0x7
c001efa2:	6a 01                	push   0x1
c001efa4:	50                   	push   eax
c001efa5:	e8 bc fe ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001efaa:	83 c4 1c             	add    esp,0x1c
c001efad:	c3                   	ret    

c001efae <IDE::enableIRQs(unsigned char, bool)>:
c001efae:	57                   	push   edi
c001efaf:	56                   	push   esi
c001efb0:	be 04 00 00 00       	mov    esi,0x4
c001efb5:	53                   	push   ebx
c001efb6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001efbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001efbf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001efc4:	0f 94 c0             	sete   al
c001efc7:	d1 e0                	shl    eax,1
c001efc9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001efd0:	0f b6 c0             	movzx  eax,al
c001efd3:	50                   	push   eax
c001efd4:	6a 0c                	push   0xc
c001efd6:	57                   	push   edi
c001efd7:	53                   	push   ebx
c001efd8:	e8 c9 fd ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efdd:	83 c4 10             	add    esp,0x10
c001efe0:	50                   	push   eax
c001efe1:	6a 0c                	push   0xc
c001efe3:	57                   	push   edi
c001efe4:	53                   	push   ebx
c001efe5:	e8 7c fe ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001efea:	83 c4 10             	add    esp,0x10
c001efed:	4e                   	dec    esi
c001efee:	75 f0                	jne    c001efe0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001eff0:	5b                   	pop    ebx
c001eff1:	5e                   	pop    esi
c001eff2:	5f                   	pop    edi
c001eff3:	c3                   	ret    

c001eff4 <IDE::open(int, int, void*)>:
c001eff4:	55                   	push   ebp
c001eff5:	57                   	push   edi
c001eff6:	56                   	push   esi
c001eff7:	53                   	push   ebx
c001eff8:	83 ec 1c             	sub    esp,0x1c
c001effb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001efff:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001f008:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001f011:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001f018:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001f01f:	0f 85 cb 02 00 00    	jne    c001f2f0 <IDE::open(int, int, void*)+0x2fc>
c001f025:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001f02b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001f02f:	83 e0 7f             	and    eax,0x7f
c001f032:	3c 05                	cmp    al,0x5
c001f034:	74 04                	je     c001f03a <IDE::open(int, int, void*)+0x46>
c001f036:	3c 0f                	cmp    al,0xf
c001f038:	75 32                	jne    c001f06c <IDE::open(int, int, void*)+0x78>
c001f03a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f040:	83 e0 fc             	and    eax,0xfffffffc
c001f043:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f04a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f050:	83 e0 fc             	and    eax,0xfffffffc
c001f053:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f05a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f060:	83 e0 fc             	and    eax,0xfffffffc
c001f063:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f06a:	eb 14                	jmp    c001f080 <IDE::open(int, int, void*)+0x8c>
c001f06c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f076:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f080:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f087:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001f08e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f092:	89 c6                	mov    esi,eax
c001f094:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f099:	c1 e6 10             	shl    esi,0x10
c001f09c:	89 e8                	mov    eax,ebp
c001f09e:	89 fa                	mov    edx,edi
c001f0a0:	c1 e0 0b             	shl    eax,0xb
c001f0a3:	09 f0                	or     eax,esi
c001f0a5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001f0ac:	c1 e6 08             	shl    esi,0x8
c001f0af:	09 c6                	or     esi,eax
c001f0b1:	89 f0                	mov    eax,esi
c001f0b3:	0d 08 00 00 80       	or     eax,0x80000008
c001f0b8:	ef                   	out    dx,eax
c001f0b9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001f0be:	89 ca                	mov    edx,ecx
c001f0c0:	ed                   	in     eax,dx
c001f0c1:	c1 e8 10             	shr    eax,0x10
c001f0c4:	3d ff ff 00 00       	cmp    eax,0xffff
c001f0c9:	0f 84 f5 00 00 00    	je     c001f1c4 <IDE::open(int, int, void*)+0x1d0>
c001f0cf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001f0d5:	89 fa                	mov    edx,edi
c001f0d7:	89 f0                	mov    eax,esi
c001f0d9:	ef                   	out    dx,eax
c001f0da:	b0 fe                	mov    al,0xfe
c001f0dc:	89 ca                	mov    edx,ecx
c001f0de:	ee                   	out    dx,al
c001f0df:	89 f0                	mov    eax,esi
c001f0e1:	89 fa                	mov    edx,edi
c001f0e3:	ef                   	out    dx,eax
c001f0e4:	89 ca                	mov    edx,ecx
c001f0e6:	ed                   	in     eax,dx
c001f0e7:	3c fe                	cmp    al,0xfe
c001f0e9:	0f 85 a9 00 00 00    	jne    c001f198 <IDE::open(int, int, void*)+0x1a4>
c001f0ef:	8b 15 08 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c08
c001f0f5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001f0fc:	74 33                	je     c001f131 <IDE::open(int, int, void*)+0x13d>
c001f0fe:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001f104:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001f108:	40                   	inc    eax
c001f109:	83 ec 0c             	sub    esp,0xc
c001f10c:	0f b6 c0             	movzx  eax,al
c001f10f:	50                   	push   eax
c001f110:	55                   	push   ebp
c001f111:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f115:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001f11b:	51                   	push   ecx
c001f11c:	e8 cb 35 ff ff       	call   c00126ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001f121:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001f126:	83 c4 1c             	add    esp,0x1c
c001f129:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f12f:	eb 0a                	jmp    c001f13b <IDE::open(int, int, void*)+0x147>
c001f131:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f13b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f142:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f149:	c1 e1 10             	shl    ecx,0x10
c001f14c:	c1 e0 08             	shl    eax,0x8
c001f14f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f154:	09 c1                	or     ecx,eax
c001f156:	89 fa                	mov    edx,edi
c001f158:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f15f:	c1 e0 0b             	shl    eax,0xb
c001f162:	09 c1                	or     ecx,eax
c001f164:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f16a:	89 c8                	mov    eax,ecx
c001f16c:	ef                   	out    dx,eax
c001f16d:	be fc 0c 00 00       	mov    esi,0xcfc
c001f172:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f178:	89 f2                	mov    edx,esi
c001f17a:	ee                   	out    dx,al
c001f17b:	89 c8                	mov    eax,ecx
c001f17d:	89 fa                	mov    edx,edi
c001f17f:	ef                   	out    dx,eax
c001f180:	89 f2                	mov    edx,esi
c001f182:	ed                   	in     eax,dx
c001f183:	0f b6 c0             	movzx  eax,al
c001f186:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f18c:	74 46                	je     c001f1d4 <IDE::open(int, int, void*)+0x1e0>
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	68 0c 75 02 c0       	push   0xc002750c
c001f196:	eb 34                	jmp    c001f1cc <IDE::open(int, int, void*)+0x1d8>
c001f198:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f1a1:	75 17                	jne    c001f1ba <IDE::open(int, int, void*)+0x1c6>
c001f1a3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001f1a8:	74 07                	je     c001f1b1 <IDE::open(int, int, void*)+0x1bd>
c001f1aa:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001f1af:	75 09                	jne    c001f1ba <IDE::open(int, int, void*)+0x1c6>
c001f1b1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f1b8:	eb 1a                	jmp    c001f1d4 <IDE::open(int, int, void*)+0x1e0>
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	68 14 75 02 c0       	push   0xc0027514
c001f1c2:	eb 08                	jmp    c001f1cc <IDE::open(int, int, void*)+0x1d8>
c001f1c4:	83 ec 0c             	sub    esp,0xc
c001f1c7:	68 45 75 02 c0       	push   0xc0027545
c001f1cc:	e8 0c 60 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c001f1d1:	83 c4 10             	add    esp,0x10
c001f1d4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001f1db:	79 1a                	jns    c001f1f7 <IDE::open(int, int, void*)+0x203>
c001f1dd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f1e3:	83 e0 fc             	and    eax,0xfffffffc
c001f1e6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f1ed:	83 c0 08             	add    eax,0x8
c001f1f0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f1f7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f1fd:	89 c2                	mov    edx,eax
c001f1ff:	83 e2 0f             	and    edx,0xf
c001f202:	66 83 fa 08          	cmp    dx,0x8
c001f206:	75 0a                	jne    c001f212 <IDE::open(int, int, void*)+0x21e>
c001f208:	83 e8 02             	sub    eax,0x2
c001f20b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f212:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f218:	89 c2                	mov    edx,eax
c001f21a:	83 e2 0f             	and    edx,0xf
c001f21d:	66 83 fa 08          	cmp    dx,0x8
c001f221:	75 0a                	jne    c001f22d <IDE::open(int, int, void*)+0x239>
c001f223:	83 e8 02             	sub    eax,0x2
c001f226:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f22d:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001f234:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f23b:	89 c8                	mov    eax,ecx
c001f23d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f240:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f244:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f248:	8d 51 01             	lea    edx,[ecx+0x1]
c001f24b:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f250:	0f b6 d2             	movzx  edx,dl
c001f253:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f25a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f25d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f261:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f265:	8d 48 02             	lea    ecx,[eax+0x2]
c001f268:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f26d:	0f b6 c9             	movzx  ecx,cl
c001f270:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f276:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f279:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f27d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f281:	8d 50 03             	lea    edx,[eax+0x3]
c001f284:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f289:	0f b6 d2             	movzx  edx,dl
c001f28c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f292:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f295:	83 c0 04             	add    eax,0x4
c001f298:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f29c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f2a0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f2a6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2ab:	56                   	push   esi
c001f2ac:	56                   	push   esi
c001f2ad:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001f2b4:	50                   	push   eax
c001f2b5:	68 6f 75 02 c0       	push   0xc002756f
c001f2ba:	e8 3c de fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001f2bf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f2c6:	83 c4 10             	add    esp,0x10
c001f2c9:	66 85 f6             	test   si,si
c001f2cc:	74 5f                	je     c001f32d <IDE::open(int, int, void*)+0x339>
c001f2ce:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f2d5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f2d8:	89 d0                	mov    eax,edx
c001f2da:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f2de:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f2e2:	40                   	inc    eax
c001f2e3:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f2e9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2ee:	eb 3d                	jmp    c001f32d <IDE::open(int, int, void*)+0x339>
c001f2f0:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f2f6:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f2fd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f304:	66 05 06 02          	add    ax,0x206
c001f308:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f30f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f316:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f31d:	66 05 06 02          	add    ax,0x206
c001f321:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f328:	e9 ca fe ff ff       	jmp    c001f1f7 <IDE::open(int, int, void*)+0x203>
c001f32d:	50                   	push   eax
c001f32e:	50                   	push   eax
c001f32f:	6a 00                	push   0x0
c001f331:	53                   	push   ebx
c001f332:	e8 49 fa ff ff       	call   c001ed80 <IDE::prepareInterrupt(unsigned char)>
c001f337:	5a                   	pop    edx
c001f338:	59                   	pop    ecx
c001f339:	6a 01                	push   0x1
c001f33b:	53                   	push   ebx
c001f33c:	e8 3f fa ff ff       	call   c001ed80 <IDE::prepareInterrupt(unsigned char)>
c001f341:	83 c4 0c             	add    esp,0xc
c001f344:	6a 00                	push   0x0
c001f346:	6a 00                	push   0x0
c001f348:	53                   	push   ebx
c001f349:	e8 60 fc ff ff       	call   c001efae <IDE::enableIRQs(unsigned char, bool)>
c001f34e:	83 c4 0c             	add    esp,0xc
c001f351:	6a 00                	push   0x0
c001f353:	6a 01                	push   0x1
c001f355:	53                   	push   ebx
c001f356:	e8 53 fc ff ff       	call   c001efae <IDE::enableIRQs(unsigned char, bool)>
c001f35b:	83 c4 10             	add    esp,0x10
c001f35e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f365:	74 34                	je     c001f39b <IDE::open(int, int, void*)+0x3a7>
c001f367:	83 ec 0c             	sub    esp,0xc
c001f36a:	53                   	push   ebx
c001f36b:	6a 01                	push   0x1
c001f36d:	68 76 ef 01 c0       	push   0xc001ef76
c001f372:	6a 0e                	push   0xe
c001f374:	53                   	push   ebx
c001f375:	e8 6c f2 fe ff       	call   c000e5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f37a:	83 c4 14             	add    esp,0x14
c001f37d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f383:	53                   	push   ebx
c001f384:	6a 01                	push   0x1
c001f386:	68 92 ef 01 c0       	push   0xc001ef92
c001f38b:	6a 0f                	push   0xf
c001f38d:	53                   	push   ebx
c001f38e:	e8 53 f2 fe ff       	call   c000e5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f393:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f399:	eb 38                	jmp    c001f3d3 <IDE::open(int, int, void*)+0x3df>
c001f39b:	83 ec 0c             	sub    esp,0xc
c001f39e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f3a8:	53                   	push   ebx
c001f3a9:	6a 00                	push   0x0
c001f3ab:	68 76 ef 01 c0       	push   0xc001ef76
c001f3b0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f3b6:	53                   	push   ebx
c001f3b7:	e8 2a f2 fe ff       	call   c000e5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3bc:	83 c4 14             	add    esp,0x14
c001f3bf:	53                   	push   ebx
c001f3c0:	6a 00                	push   0x0
c001f3c2:	68 92 ef 01 c0       	push   0xc001ef92
c001f3c7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f3cd:	53                   	push   ebx
c001f3ce:	e8 13 f2 fe ff       	call   c000e5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3d5:	83 c4 20             	add    esp,0x20
c001f3d8:	83 ec 0c             	sub    esp,0xc
c001f3db:	53                   	push   ebx
c001f3dc:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f3df:	83 c4 0c             	add    esp,0xc
c001f3e2:	6a 07                	push   0x7
c001f3e4:	6a 00                	push   0x0
c001f3e6:	53                   	push   ebx
c001f3e7:	e8 7a fa ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f3ec:	83 c4 0c             	add    esp,0xc
c001f3ef:	6a 07                	push   0x7
c001f3f1:	6a 01                	push   0x1
c001f3f3:	53                   	push   ebx
c001f3f4:	e8 6d fa ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f3f9:	83 c4 0c             	add    esp,0xc
c001f3fc:	6a 01                	push   0x1
c001f3fe:	6a 00                	push   0x0
c001f400:	53                   	push   ebx
c001f401:	e8 a8 fb ff ff       	call   c001efae <IDE::enableIRQs(unsigned char, bool)>
c001f406:	83 c4 0c             	add    esp,0xc
c001f409:	6a 01                	push   0x1
c001f40b:	6a 01                	push   0x1
c001f40d:	53                   	push   ebx
c001f40e:	e8 9b fb ff ff       	call   c001efae <IDE::enableIRQs(unsigned char, bool)>
c001f413:	83 c4 2c             	add    esp,0x2c
c001f416:	31 c0                	xor    eax,eax
c001f418:	5b                   	pop    ebx
c001f419:	5e                   	pop    esi
c001f41a:	5f                   	pop    edi
c001f41b:	5d                   	pop    ebp
c001f41c:	c3                   	ret    
c001f41d:	90                   	nop

c001f41e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f41e:	55                   	push   ebp
c001f41f:	57                   	push   edi
c001f420:	56                   	push   esi
c001f421:	53                   	push   ebx
c001f422:	83 ec 1c             	sub    esp,0x1c
c001f425:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f429:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f42d:	8d 50 f8             	lea    edx,[eax-0x8]
c001f430:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f434:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f438:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f43c:	80 fa 03             	cmp    dl,0x3
c001f43f:	77 5d                	ja     c001f49e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f449:	0f b6 db             	movzx  ebx,bl
c001f44c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f44f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f453:	83 ca 80             	or     edx,0xffffff80
c001f456:	0f b6 d2             	movzx  edx,dl
c001f459:	52                   	push   edx
c001f45a:	6a 0c                	push   0xc
c001f45c:	53                   	push   ebx
c001f45d:	56                   	push   esi
c001f45e:	e8 43 f9 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f463:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f468:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f46c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f470:	0f b6 c0             	movzx  eax,al
c001f473:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f477:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f479:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f47e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f482:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f486:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f48a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f492:	83 c4 2c             	add    esp,0x2c
c001f495:	5b                   	pop    ebx
c001f496:	5e                   	pop    esi
c001f497:	5f                   	pop    edi
c001f498:	5d                   	pop    ebp
c001f499:	e9 08 f9 ff ff       	jmp    c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f49e:	3c 07                	cmp    al,0x7
c001f4a0:	77 10                	ja     c001f4b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f4a2:	0f b6 db             	movzx  ebx,bl
c001f4a5:	0f b6 d0             	movzx  edx,al
c001f4a8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f4b0:	eb 2d                	jmp    c001f4df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f4b2:	3c 0d                	cmp    al,0xd
c001f4b4:	77 13                	ja     c001f4c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f4b6:	0f b6 db             	movzx  ebx,bl
c001f4b9:	0f b6 c0             	movzx  eax,al
c001f4bc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f4c3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f4c7:	eb 16                	jmp    c001f4df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f4c9:	3c 15                	cmp    al,0x15
c001f4cb:	77 14                	ja     c001f4e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f4cd:	0f b6 db             	movzx  ebx,bl
c001f4d0:	0f b6 c0             	movzx  eax,al
c001f4d3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f4db:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f4df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f4e1:	83 c4 1c             	add    esp,0x1c
c001f4e4:	5b                   	pop    ebx
c001f4e5:	5e                   	pop    esi
c001f4e6:	5f                   	pop    edi
c001f4e7:	5d                   	pop    ebp
c001f4e8:	c3                   	ret    
c001f4e9:	90                   	nop

c001f4ea <IDE::detect()>:
c001f4ea:	55                   	push   ebp
c001f4eb:	57                   	push   edi
c001f4ec:	56                   	push   esi
c001f4ed:	53                   	push   ebx
c001f4ee:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f4f4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f4fb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f502:	0f 85 97 02 00 00    	jne    c001f79f <IDE::detect()+0x2b5>
c001f508:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f50f:	31 f6                	xor    esi,esi
c001f511:	31 ed                	xor    ebp,ebp
c001f513:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f51b:	89 e8                	mov    eax,ebp
c001f51d:	c1 e0 06             	shl    eax,0x6
c001f520:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f528:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f52c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f530:	c1 e0 04             	shl    eax,0x4
c001f533:	83 c8 a0             	or     eax,0xffffffa0
c001f536:	0f b6 c0             	movzx  eax,al
c001f539:	50                   	push   eax
c001f53a:	6a 06                	push   0x6
c001f53c:	56                   	push   esi
c001f53d:	53                   	push   ebx
c001f53e:	e8 63 f8 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f543:	83 c4 0c             	add    esp,0xc
c001f546:	6a 0c                	push   0xc
c001f548:	56                   	push   esi
c001f549:	53                   	push   ebx
c001f54a:	e8 17 f9 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f54f:	83 c4 0c             	add    esp,0xc
c001f552:	6a 0c                	push   0xc
c001f554:	56                   	push   esi
c001f555:	53                   	push   ebx
c001f556:	e8 0b f9 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f55b:	83 c4 0c             	add    esp,0xc
c001f55e:	6a 0c                	push   0xc
c001f560:	56                   	push   esi
c001f561:	53                   	push   ebx
c001f562:	e8 ff f8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f567:	83 c4 0c             	add    esp,0xc
c001f56a:	6a 0c                	push   0xc
c001f56c:	56                   	push   esi
c001f56d:	53                   	push   ebx
c001f56e:	e8 f3 f8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f573:	68 ec 00 00 00       	push   0xec
c001f578:	6a 07                	push   0x7
c001f57a:	56                   	push   esi
c001f57b:	53                   	push   ebx
c001f57c:	e8 25 f8 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f581:	83 c4 1c             	add    esp,0x1c
c001f584:	6a 0c                	push   0xc
c001f586:	56                   	push   esi
c001f587:	53                   	push   ebx
c001f588:	e8 d9 f8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f58d:	83 c4 0c             	add    esp,0xc
c001f590:	6a 0c                	push   0xc
c001f592:	56                   	push   esi
c001f593:	53                   	push   ebx
c001f594:	e8 cd f8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f599:	83 c4 0c             	add    esp,0xc
c001f59c:	6a 0c                	push   0xc
c001f59e:	56                   	push   esi
c001f59f:	53                   	push   ebx
c001f5a0:	e8 c1 f8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f5a5:	83 c4 0c             	add    esp,0xc
c001f5a8:	6a 0c                	push   0xc
c001f5aa:	56                   	push   esi
c001f5ab:	53                   	push   ebx
c001f5ac:	e8 b5 f8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f5b1:	83 c4 0c             	add    esp,0xc
c001f5b4:	6a 0c                	push   0xc
c001f5b6:	56                   	push   esi
c001f5b7:	53                   	push   ebx
c001f5b8:	e8 a9 f8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f5bd:	83 c4 10             	add    esp,0x10
c001f5c0:	84 c0                	test   al,al
c001f5c2:	0f 84 5f 01 00 00    	je     c001f727 <IDE::detect()+0x23d>
c001f5c8:	31 ff                	xor    edi,edi
c001f5ca:	50                   	push   eax
c001f5cb:	6a 0c                	push   0xc
c001f5cd:	56                   	push   esi
c001f5ce:	53                   	push   ebx
c001f5cf:	e8 92 f8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f5d4:	83 c4 10             	add    esp,0x10
c001f5d7:	a8 01                	test   al,0x1
c001f5d9:	0f 85 69 01 00 00    	jne    c001f748 <IDE::detect()+0x25e>
c001f5df:	84 c0                	test   al,al
c001f5e1:	78 04                	js     c001f5e7 <IDE::detect()+0xfd>
c001f5e3:	a8 08                	test   al,0x8
c001f5e5:	75 23                	jne    c001f60a <IDE::detect()+0x120>
c001f5e7:	47                   	inc    edi
c001f5e8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f5ee:	7e da                	jle    c001f5ca <IDE::detect()+0xe0>
c001f5f0:	83 ec 0c             	sub    esp,0xc
c001f5f3:	6a 32                	push   0x32
c001f5f5:	e8 3a 9c ff ff       	call   c0019234 <milliTenthSleep(unsigned int)>
c001f5fa:	83 c4 10             	add    esp,0x10
c001f5fd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f603:	75 c5                	jne    c001f5ca <IDE::detect()+0xe0>
c001f605:	e9 3e 01 00 00       	jmp    c001f748 <IDE::detect()+0x25e>
c001f60a:	31 c9                	xor    ecx,ecx
c001f60c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f610:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f614:	83 ec 0c             	sub    esp,0xc
c001f617:	68 80 00 00 00       	push   0x80
c001f61c:	57                   	push   edi
c001f61d:	6a 00                	push   0x0
c001f61f:	56                   	push   esi
c001f620:	53                   	push   ebx
c001f621:	e8 f8 fd ff ff       	call   c001f41e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f626:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f62b:	89 e8                	mov    eax,ebp
c001f62d:	89 d1                	mov    ecx,edx
c001f62f:	c1 e0 06             	shl    eax,0x6
c001f632:	01 d8                	add    eax,ebx
c001f634:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f63b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f642:	89 f2                	mov    edx,esi
c001f644:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f64a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f64e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f654:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f658:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f65f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f667:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f66e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f676:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f67c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f683:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f689:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f68d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f691:	83 c4 20             	add    esp,0x20
c001f694:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f697:	83 c0 02             	add    eax,0x2
c001f69a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f6a0:	83 c7 02             	add    edi,0x2
c001f6a3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f6a6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f6ac:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f6b0:	75 e2                	jne    c001f694 <IDE::detect()+0x1aa>
c001f6b2:	89 e8                	mov    eax,ebp
c001f6b4:	c1 e0 06             	shl    eax,0x6
c001f6b7:	01 d8                	add    eax,ebx
c001f6b9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f6bf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f6c6:	66 c1 ea 09          	shr    dx,0x9
c001f6ca:	83 e2 01             	and    edx,0x1
c001f6cd:	84 c9                	test   cl,cl
c001f6cf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f6d5:	75 22                	jne    c001f6f9 <IDE::detect()+0x20f>
c001f6d7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f6de:	74 46                	je     c001f726 <IDE::detect()+0x23c>
c001f6e0:	83 ec 0c             	sub    esp,0xc
c001f6e3:	68 7c 01 00 00       	push   0x17c
c001f6e8:	e8 fa a6 fe ff       	call   c0009de7 <malloc>
c001f6ed:	89 c7                	mov    edi,eax
c001f6ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6f2:	e8 49 06 00 00       	call   c001fd40 <ATA::ATA()>
c001f6f7:	eb 17                	jmp    c001f710 <IDE::detect()+0x226>
c001f6f9:	83 ec 0c             	sub    esp,0xc
c001f6fc:	68 84 01 00 00       	push   0x184
c001f701:	e8 e1 a6 fe ff       	call   c0009de7 <malloc>
c001f706:	89 c7                	mov    edi,eax
c001f708:	89 04 24             	mov    DWORD PTR [esp],eax
c001f70b:	e8 b8 0c 00 00       	call   c00203c8 <ATAPI::ATAPI()>
c001f710:	5a                   	pop    edx
c001f711:	59                   	pop    ecx
c001f712:	57                   	push   edi
c001f713:	53                   	push   ebx
c001f714:	e8 55 ef fe ff       	call   c000e66e <Device::addChild(Device*)>
c001f719:	8b 07                	mov    eax,DWORD PTR [edi]
c001f71b:	53                   	push   ebx
c001f71c:	55                   	push   ebp
c001f71d:	6a 00                	push   0x0
c001f71f:	57                   	push   edi
c001f720:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f723:	83 c4 20             	add    esp,0x20
c001f726:	45                   	inc    ebp
c001f727:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f72c:	74 0d                	je     c001f73b <IDE::detect()+0x251>
c001f72e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f736:	e9 e0 fd ff ff       	jmp    c001f51b <IDE::detect()+0x31>
c001f73b:	4e                   	dec    esi
c001f73c:	74 61                	je     c001f79f <IDE::detect()+0x2b5>
c001f73e:	be 01 00 00 00       	mov    esi,0x1
c001f743:	e9 cb fd ff ff       	jmp    c001f513 <IDE::detect()+0x29>
c001f748:	50                   	push   eax
c001f749:	6a 04                	push   0x4
c001f74b:	56                   	push   esi
c001f74c:	53                   	push   ebx
c001f74d:	e8 14 f7 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f752:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f756:	83 c4 0c             	add    esp,0xc
c001f759:	6a 05                	push   0x5
c001f75b:	56                   	push   esi
c001f75c:	53                   	push   ebx
c001f75d:	e8 04 f7 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f762:	83 c4 10             	add    esp,0x10
c001f765:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f769:	80 fa 14             	cmp    dl,0x14
c001f76c:	75 04                	jne    c001f772 <IDE::detect()+0x288>
c001f76e:	3c eb                	cmp    al,0xeb
c001f770:	eb 07                	jmp    c001f779 <IDE::detect()+0x28f>
c001f772:	3c 96                	cmp    al,0x96
c001f774:	75 b1                	jne    c001f727 <IDE::detect()+0x23d>
c001f776:	80 fa 69             	cmp    dl,0x69
c001f779:	75 ac                	jne    c001f727 <IDE::detect()+0x23d>
c001f77b:	68 a1 00 00 00       	push   0xa1
c001f780:	6a 07                	push   0x7
c001f782:	56                   	push   esi
c001f783:	53                   	push   ebx
c001f784:	e8 1d f6 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f789:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f790:	e8 9f 9a ff ff       	call   c0019234 <milliTenthSleep(unsigned int)>
c001f795:	83 c4 10             	add    esp,0x10
c001f798:	b1 01                	mov    cl,0x1
c001f79a:	e9 6d fe ff ff       	jmp    c001f60c <IDE::detect()+0x122>
c001f79f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f7a5:	5b                   	pop    ebx
c001f7a6:	5e                   	pop    esi
c001f7a7:	5f                   	pop    edi
c001f7a8:	5d                   	pop    ebp
c001f7a9:	c3                   	ret    

c001f7aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f7aa:	55                   	push   ebp
c001f7ab:	57                   	push   edi
c001f7ac:	56                   	push   esi
c001f7ad:	53                   	push   ebx
c001f7ae:	83 ec 1c             	sub    esp,0x1c
c001f7b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f7b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f7c1:	88 c3                	mov    bl,al
c001f7c3:	84 c0                	test   al,al
c001f7c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7c9:	0f 84 81 00 00 00    	je     c001f850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	68 8b 75 02 c0       	push   0xc002758b
c001f7d7:	e8 1f d9 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001f7dc:	83 c4 10             	add    esp,0x10
c001f7df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7e3:	3c 01                	cmp    al,0x1
c001f7e5:	74 63                	je     c001f84a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f7e7:	3c 02                	cmp    al,0x2
c001f7e9:	75 53                	jne    c001f83e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f7eb:	d1 e6                	shl    esi,1
c001f7ed:	09 ee                	or     esi,ebp
c001f7ef:	50                   	push   eax
c001f7f0:	89 f0                	mov    eax,esi
c001f7f2:	6a 01                	push   0x1
c001f7f4:	0f b6 f0             	movzx  esi,al
c001f7f7:	c1 e6 06             	shl    esi,0x6
c001f7fa:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f802:	50                   	push   eax
c001f803:	57                   	push   edi
c001f804:	e8 5d f6 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f809:	83 c4 10             	add    esp,0x10
c001f80c:	a8 01                	test   al,0x1
c001f80e:	74 02                	je     c001f812 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f810:	b3 07                	mov    bl,0x7
c001f812:	a8 02                	test   al,0x2
c001f814:	74 02                	je     c001f818 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f816:	b3 03                	mov    bl,0x3
c001f818:	a8 04                	test   al,0x4
c001f81a:	74 02                	je     c001f81e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f81c:	b3 14                	mov    bl,0x14
c001f81e:	a8 08                	test   al,0x8
c001f820:	74 02                	je     c001f824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f822:	b3 03                	mov    bl,0x3
c001f824:	a8 10                	test   al,0x10
c001f826:	74 02                	je     c001f82a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f828:	b3 15                	mov    bl,0x15
c001f82a:	a8 20                	test   al,0x20
c001f82c:	74 02                	je     c001f830 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f82e:	b3 03                	mov    bl,0x3
c001f830:	a8 40                	test   al,0x40
c001f832:	74 02                	je     c001f836 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f834:	b3 16                	mov    bl,0x16
c001f836:	84 c0                	test   al,al
c001f838:	79 16                	jns    c001f850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f83a:	b3 0d                	mov    bl,0xd
c001f83c:	eb 12                	jmp    c001f850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f83e:	3c 03                	cmp    al,0x3
c001f840:	74 0c                	je     c001f84e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f842:	3c 04                	cmp    al,0x4
c001f844:	75 0a                	jne    c001f850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f846:	b3 08                	mov    bl,0x8
c001f848:	eb 06                	jmp    c001f850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f84a:	b3 13                	mov    bl,0x13
c001f84c:	eb 02                	jmp    c001f850 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f84e:	b3 17                	mov    bl,0x17
c001f850:	83 c4 1c             	add    esp,0x1c
c001f853:	88 d8                	mov    al,bl
c001f855:	5b                   	pop    ebx
c001f856:	5e                   	pop    esi
c001f857:	5f                   	pop    edi
c001f858:	5d                   	pop    ebp
c001f859:	c3                   	ret    

c001f85a <IDE::polling(unsigned char, unsigned int)>:
c001f85a:	57                   	push   edi
c001f85b:	56                   	push   esi
c001f85c:	53                   	push   ebx
c001f85d:	bb 04 00 00 00       	mov    ebx,0x4
c001f862:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f866:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f86b:	52                   	push   edx
c001f86c:	6a 0c                	push   0xc
c001f86e:	56                   	push   esi
c001f86f:	57                   	push   edi
c001f870:	e8 f1 f5 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f875:	83 c4 10             	add    esp,0x10
c001f878:	4b                   	dec    ebx
c001f879:	75 f0                	jne    c001f86b <IDE::polling(unsigned char, unsigned int)+0x11>
c001f87b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f880:	50                   	push   eax
c001f881:	6a 0c                	push   0xc
c001f883:	56                   	push   esi
c001f884:	57                   	push   edi
c001f885:	e8 dc f5 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001f88a:	83 c4 10             	add    esp,0x10
c001f88d:	a8 01                	test   al,0x1
c001f88f:	75 17                	jne    c001f8a8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f891:	a8 20                	test   al,0x20
c001f893:	75 0f                	jne    c001f8a4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f895:	4b                   	dec    ebx
c001f896:	74 10                	je     c001f8a8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f898:	84 c0                	test   al,al
c001f89a:	78 e4                	js     c001f880 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f89c:	a8 08                	test   al,0x8
c001f89e:	74 e0                	je     c001f880 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f8a0:	31 c0                	xor    eax,eax
c001f8a2:	eb 06                	jmp    c001f8aa <IDE::polling(unsigned char, unsigned int)+0x50>
c001f8a4:	b0 01                	mov    al,0x1
c001f8a6:	eb 02                	jmp    c001f8aa <IDE::polling(unsigned char, unsigned int)+0x50>
c001f8a8:	b0 02                	mov    al,0x2
c001f8aa:	5b                   	pop    ebx
c001f8ab:	5e                   	pop    esi
c001f8ac:	5f                   	pop    edi
c001f8ad:	c3                   	ret    

c001f8ae <SATABus::close(int, int, void*)>:
c001f8ae:	31 c0                	xor    eax,eax
c001f8b0:	c3                   	ret    
c001f8b1:	90                   	nop

c001f8b2 <SATABus::detect()>:
c001f8b2:	c3                   	ret    
c001f8b3:	90                   	nop

c001f8b4 <SATABus::SATABus()>:
c001f8b4:	83 ec 0c             	sub    esp,0xc
c001f8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bb:	83 ec 08             	sub    esp,0x8
c001f8be:	68 c4 75 02 c0       	push   0xc00275c4
c001f8c3:	50                   	push   eax
c001f8c4:	e8 53 f1 fe ff       	call   c000ea1c <HardDiskController::HardDiskController(char const*)>
c001f8c9:	83 c4 10             	add    esp,0x10
c001f8cc:	ba 6c 76 02 c0       	mov    edx,0xc002766c
c001f8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d5:	89 10                	mov    DWORD PTR [eax],edx
c001f8d7:	83 ec 0c             	sub    esp,0xc
c001f8da:	6a 50                	push   0x50
c001f8dc:	e8 a8 ac fe ff       	call   c000a589 <Phys::allocateContiguousPages(int)>
c001f8e1:	83 c4 10             	add    esp,0x10
c001f8e4:	89 c2                	mov    edx,eax
c001f8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f8f0:	83 ec 0c             	sub    esp,0xc
c001f8f3:	6a 50                	push   0x50
c001f8f5:	e8 a7 c4 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c001f8fa:	83 c4 10             	add    esp,0x10
c001f8fd:	89 c2                	mov    edx,eax
c001f8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f903:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f909:	a1 34 8d 02 c0       	mov    eax,ds:0xc0028d34
c001f90e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f912:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f91c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f922:	83 ec 0c             	sub    esp,0xc
c001f925:	6a 03                	push   0x3
c001f927:	6a 50                	push   0x50
c001f929:	51                   	push   ecx
c001f92a:	52                   	push   edx
c001f92b:	50                   	push   eax
c001f92c:	e8 d1 cd fe ff       	call   c000c702 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f931:	83 c4 20             	add    esp,0x20
c001f934:	90                   	nop
c001f935:	83 c4 0c             	add    esp,0xc
c001f938:	c3                   	ret    
c001f939:	90                   	nop

c001f93a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f93a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f93e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f941:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f944:	09 c2                	or     edx,eax
c001f946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f94a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f950:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f952:	31 c0                	xor    eax,eax
c001f954:	c1 e9 08             	shr    ecx,0x8
c001f957:	83 e1 0f             	and    ecx,0xf
c001f95a:	39 c8                	cmp    eax,ecx
c001f95c:	74 0a                	je     c001f968 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f95e:	f6 c2 01             	test   dl,0x1
c001f961:	74 08                	je     c001f96b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f963:	d1 ea                	shr    edx,1
c001f965:	40                   	inc    eax
c001f966:	eb f2                	jmp    c001f95a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f968:	83 c8 ff             	or     eax,0xffffffff
c001f96b:	c3                   	ret    

c001f96c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f96c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f970:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f973:	89 c2                	mov    edx,eax
c001f975:	c1 ea 08             	shr    edx,0x8
c001f978:	83 e2 0f             	and    edx,0xf
c001f97b:	fe ca                	dec    dl
c001f97d:	75 31                	jne    c001f9b0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f97f:	83 e0 0f             	and    eax,0xf
c001f982:	3c 03                	cmp    al,0x3
c001f984:	75 2a                	jne    c001f9b0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f986:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f989:	b8 02 00 00 00       	mov    eax,0x2
c001f98e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f994:	74 1c                	je     c001f9b2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f996:	b8 04 00 00 00       	mov    eax,0x4
c001f99b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f9a1:	74 0f                	je     c001f9b2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f9a3:	31 c0                	xor    eax,eax
c001f9a5:	83 fa 03             	cmp    edx,0x3
c001f9a8:	0f 94 c0             	sete   al
c001f9ab:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f9af:	c3                   	ret    
c001f9b0:	31 c0                	xor    eax,eax
c001f9b2:	c3                   	ret    
c001f9b3:	90                   	nop

c001f9b4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9b8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9bb:	0f ba e2 0f          	bt     edx,0xf
c001f9bf:	72 f7                	jb     c001f9b8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f9c1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9c4:	83 ca 10             	or     edx,0x10
c001f9c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9cd:	83 ca 01             	or     edx,0x1
c001f9d0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9d3:	c3                   	ret    

c001f9d4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9d8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9db:	83 e2 fe             	and    edx,0xfffffffe
c001f9de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9e1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9e4:	83 e2 ef             	and    edx,0xffffffef
c001f9e7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9ed:	0f ba e2 0e          	bt     edx,0xe
c001f9f1:	72 f7                	jb     c001f9ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f9f3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9f6:	0f ba e2 0f          	bt     edx,0xf
c001f9fa:	72 ee                	jb     c001f9ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f9fc:	c3                   	ret    
c001f9fd:	90                   	nop

c001f9fe <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f9fe:	55                   	push   ebp
c001f9ff:	57                   	push   edi
c001fa00:	56                   	push   esi
c001fa01:	53                   	push   ebx
c001fa02:	83 ec 1c             	sub    esp,0x1c
c001fa05:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fa0d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fa11:	53                   	push   ebx
c001fa12:	89 fd                	mov    ebp,edi
c001fa14:	56                   	push   esi
c001fa15:	c1 e5 0a             	shl    ebp,0xa
c001fa18:	e8 b7 ff ff ff       	call   c001f9d4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fa1d:	83 ec 0c             	sub    esp,0xc
c001fa20:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fa26:	01 e8                	add    eax,ebp
c001fa28:	89 03                	mov    DWORD PTR [ebx],eax
c001fa2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fa2c:	68 00 04 00 00       	push   0x400
c001fa31:	6a 00                	push   0x0
c001fa33:	50                   	push   eax
c001fa34:	e8 5b 0c fe ff       	call   c0000694 <memset>
c001fa39:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fa3f:	89 fa                	mov    edx,edi
c001fa41:	01 e8                	add    eax,ebp
c001fa43:	c1 e7 0d             	shl    edi,0xd
c001fa46:	89 03                	mov    DWORD PTR [ebx],eax
c001fa48:	c1 e2 08             	shl    edx,0x8
c001fa4b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa52:	81 c2 00 80 00 00    	add    edx,0x8000
c001fa58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001fa5c:	89 d0                	mov    eax,edx
c001fa5e:	83 c4 1c             	add    esp,0x1c
c001fa61:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fa67:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fa6a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fa6d:	68 00 01 00 00       	push   0x100
c001fa72:	6a 00                	push   0x0
c001fa74:	50                   	push   eax
c001fa75:	e8 1a 0c fe ff       	call   c0000694 <memset>
c001fa7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa7e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fa84:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001fa8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fa8e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fa91:	83 c4 10             	add    esp,0x10
c001fa94:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fa9b:	31 ff                	xor    edi,edi
c001fa9d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001faa3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001faa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001faad:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fab3:	83 c5 20             	add    ebp,0x20
c001fab6:	01 f8                	add    eax,edi
c001fab8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fabb:	52                   	push   edx
c001fabc:	68 00 01 00 00       	push   0x100
c001fac1:	6a 00                	push   0x0
c001fac3:	50                   	push   eax
c001fac4:	e8 cb 0b fe ff       	call   c0000694 <memset>
c001fac9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001facd:	83 c4 10             	add    esp,0x10
c001fad0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fad6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001fadd:	01 f8                	add    eax,edi
c001fadf:	81 c7 00 01 00 00    	add    edi,0x100
c001fae5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fae8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001faee:	75 b3                	jne    c001faa3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001faf0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001faf4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001faf8:	83 c4 1c             	add    esp,0x1c
c001fafb:	5b                   	pop    ebx
c001fafc:	5e                   	pop    esi
c001fafd:	5f                   	pop    edi
c001fafe:	5d                   	pop    ebp
c001faff:	e9 b0 fe ff ff       	jmp    c001f9b4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001fb04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fb04:	55                   	push   ebp
c001fb05:	57                   	push   edi
c001fb06:	56                   	push   esi
c001fb07:	53                   	push   ebx
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fb0f:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fb16:	74 2d                	je     c001fb45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb18:	83 ec 0c             	sub    esp,0xc
c001fb1b:	68 e8 75 02 c0       	push   0xc00275e8
c001fb20:	e8 1c a3 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fb25:	83 c4 10             	add    esp,0x10
c001fb28:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fb2f:	75 14                	jne    c001fb45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb31:	e4 60                	in     al,0x60
c001fb33:	3c 1c                	cmp    al,0x1c
c001fb35:	74 04                	je     c001fb3b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb37:	3c 5a                	cmp    al,0x5a
c001fb39:	75 f6                	jne    c001fb31 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001fb3b:	e4 60                	in     al,0x60
c001fb3d:	3c 5a                	cmp    al,0x5a
c001fb3f:	74 fa                	je     c001fb3b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb41:	3c 1c                	cmp    al,0x1c
c001fb43:	74 f6                	je     c001fb3b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fb49:	31 db                	xor    ebx,ebx
c001fb4b:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001fb4e:	f7 c5 01 00 00 00    	test   ebp,0x1
c001fb54:	0f 84 78 01 00 00    	je     c001fcd2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fb5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fb5e:	89 d8                	mov    eax,ebx
c001fb60:	c1 e0 07             	shl    eax,0x7
c001fb63:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001fb6a:	50                   	push   eax
c001fb6b:	50                   	push   eax
c001fb6c:	57                   	push   edi
c001fb6d:	56                   	push   esi
c001fb6e:	e8 f9 fd ff ff       	call   c001f96c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fb73:	83 c4 10             	add    esp,0x10
c001fb76:	83 f8 01             	cmp    eax,0x1
c001fb79:	0f 85 19 01 00 00    	jne    c001fc98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001fb7f:	50                   	push   eax
c001fb80:	53                   	push   ebx
c001fb81:	57                   	push   edi
c001fb82:	56                   	push   esi
c001fb83:	e8 76 fe ff ff       	call   c001f9fe <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fb88:	83 c4 10             	add    esp,0x10
c001fb8b:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fb92:	74 2d                	je     c001fbc1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	68 fd 75 02 c0       	push   0xc00275fd
c001fb9c:	e8 a0 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fba1:	83 c4 10             	add    esp,0x10
c001fba4:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fbab:	75 14                	jne    c001fbc1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fbad:	e4 60                	in     al,0x60
c001fbaf:	3c 1c                	cmp    al,0x1c
c001fbb1:	74 04                	je     c001fbb7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fbb3:	3c 5a                	cmp    al,0x5a
c001fbb5:	75 f6                	jne    c001fbad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001fbb7:	e4 60                	in     al,0x60
c001fbb9:	3c 5a                	cmp    al,0x5a
c001fbbb:	74 fa                	je     c001fbb7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fbbd:	3c 1c                	cmp    al,0x1c
c001fbbf:	74 f6                	je     c001fbb7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fbc1:	83 ec 0c             	sub    esp,0xc
c001fbc4:	68 7c 01 00 00       	push   0x17c
c001fbc9:	e8 19 a2 fe ff       	call   c0009de7 <malloc>
c001fbce:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbd1:	89 c7                	mov    edi,eax
c001fbd3:	e8 28 10 00 00       	call   c0020c00 <SATA::SATA()>
c001fbd8:	83 c4 10             	add    esp,0x10
c001fbdb:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fbe2:	74 2d                	je     c001fc11 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	68 12 76 02 c0       	push   0xc0027612
c001fbec:	e8 50 a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fbf1:	83 c4 10             	add    esp,0x10
c001fbf4:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fbfb:	75 14                	jne    c001fc11 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fbfd:	e4 60                	in     al,0x60
c001fbff:	3c 5a                	cmp    al,0x5a
c001fc01:	74 04                	je     c001fc07 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc03:	3c 1c                	cmp    al,0x1c
c001fc05:	75 f6                	jne    c001fbfd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001fc07:	e4 60                	in     al,0x60
c001fc09:	3c 5a                	cmp    al,0x5a
c001fc0b:	74 fa                	je     c001fc07 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc0d:	3c 1c                	cmp    al,0x1c
c001fc0f:	74 f6                	je     c001fc07 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc11:	50                   	push   eax
c001fc12:	50                   	push   eax
c001fc13:	57                   	push   edi
c001fc14:	56                   	push   esi
c001fc15:	e8 54 ea fe ff       	call   c000e66e <Device::addChild(Device*)>
c001fc1a:	83 c4 10             	add    esp,0x10
c001fc1d:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fc24:	74 2d                	je     c001fc53 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc26:	83 ec 0c             	sub    esp,0xc
c001fc29:	68 27 76 02 c0       	push   0xc0027627
c001fc2e:	e8 0e a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc33:	83 c4 10             	add    esp,0x10
c001fc36:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fc3d:	75 14                	jne    c001fc53 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc3f:	e4 60                	in     al,0x60
c001fc41:	3c 1c                	cmp    al,0x1c
c001fc43:	74 04                	je     c001fc49 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc45:	3c 5a                	cmp    al,0x5a
c001fc47:	75 f6                	jne    c001fc3f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fc49:	e4 60                	in     al,0x60
c001fc4b:	3c 5a                	cmp    al,0x5a
c001fc4d:	74 fa                	je     c001fc49 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc4f:	3c 1c                	cmp    al,0x1c
c001fc51:	74 f6                	je     c001fc49 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc53:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc55:	56                   	push   esi
c001fc56:	6a 00                	push   0x0
c001fc58:	53                   	push   ebx
c001fc59:	57                   	push   edi
c001fc5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fc5d:	83 c4 10             	add    esp,0x10
c001fc60:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c001fc67:	74 69                	je     c001fcd2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc69:	83 ec 0c             	sub    esp,0xc
c001fc6c:	68 3c 76 02 c0       	push   0xc002763c
c001fc71:	e8 cb a1 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc76:	83 c4 10             	add    esp,0x10
c001fc79:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c001fc80:	75 50                	jne    c001fcd2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc82:	e4 60                	in     al,0x60
c001fc84:	3c 1c                	cmp    al,0x1c
c001fc86:	74 04                	je     c001fc8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc88:	3c 5a                	cmp    al,0x5a
c001fc8a:	75 f6                	jne    c001fc82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fc8c:	e4 60                	in     al,0x60
c001fc8e:	3c 5a                	cmp    al,0x5a
c001fc90:	74 fa                	je     c001fc8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc92:	3c 1c                	cmp    al,0x1c
c001fc94:	74 f6                	je     c001fc8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc96:	eb 3a                	jmp    c001fcd2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc98:	83 f8 04             	cmp    eax,0x4
c001fc9b:	75 35                	jne    c001fcd2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc9d:	50                   	push   eax
c001fc9e:	53                   	push   ebx
c001fc9f:	57                   	push   edi
c001fca0:	56                   	push   esi
c001fca1:	e8 58 fd ff ff       	call   c001f9fe <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fca6:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fcad:	e8 35 a1 fe ff       	call   c0009de7 <malloc>
c001fcb2:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcb5:	89 c7                	mov    edi,eax
c001fcb7:	e8 ba 17 00 00       	call   c0021476 <SATAPI::SATAPI()>
c001fcbc:	5a                   	pop    edx
c001fcbd:	59                   	pop    ecx
c001fcbe:	57                   	push   edi
c001fcbf:	56                   	push   esi
c001fcc0:	e8 a9 e9 fe ff       	call   c000e66e <Device::addChild(Device*)>
c001fcc5:	8b 07                	mov    eax,DWORD PTR [edi]
c001fcc7:	56                   	push   esi
c001fcc8:	6a 00                	push   0x0
c001fcca:	53                   	push   ebx
c001fccb:	57                   	push   edi
c001fccc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fccf:	83 c4 20             	add    esp,0x20
c001fcd2:	d1 ed                	shr    ebp,1
c001fcd4:	43                   	inc    ebx
c001fcd5:	83 fb 20             	cmp    ebx,0x20
c001fcd8:	0f 85 70 fe ff ff    	jne    c001fb4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fcde:	83 c4 0c             	add    esp,0xc
c001fce1:	5b                   	pop    ebx
c001fce2:	5e                   	pop    esi
c001fce3:	5f                   	pop    edi
c001fce4:	5d                   	pop    ebp
c001fce5:	c3                   	ret    

c001fce6 <SATABus::open(int, int, void*)>:
c001fce6:	53                   	push   ebx
c001fce7:	83 ec 10             	sub    esp,0x10
c001fcea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fcee:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fcf4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fcfa:	50                   	push   eax
c001fcfb:	68 51 76 02 c0       	push   0xc0027651
c001fd00:	e8 f6 d3 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001fd05:	58                   	pop    eax
c001fd06:	5a                   	pop    edx
c001fd07:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fd0d:	53                   	push   ebx
c001fd0e:	e8 f1 fd ff ff       	call   c001fb04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fd13:	31 c0                	xor    eax,eax
c001fd15:	83 c4 18             	add    esp,0x18
c001fd18:	5b                   	pop    ebx
c001fd19:	c3                   	ret    

c001fd1a <ATA::close(int, int, void*)>:
c001fd1a:	83 ec 0c             	sub    esp,0xc
c001fd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd21:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd27:	85 c0                	test   eax,eax
c001fd29:	74 0c                	je     c001fd37 <ATA::close(int, int, void*)+0x1d>
c001fd2b:	83 ec 0c             	sub    esp,0xc
c001fd2e:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd30:	50                   	push   eax
c001fd31:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd34:	83 c4 10             	add    esp,0x10
c001fd37:	31 c0                	xor    eax,eax
c001fd39:	83 c4 0c             	add    esp,0xc
c001fd3c:	c3                   	ret    
c001fd3d:	90                   	nop

c001fd3e <ATA::powerSaving(PowerSavingLevel)>:
c001fd3e:	c3                   	ret    
c001fd3f:	90                   	nop

c001fd40 <ATA::ATA()>:
c001fd40:	83 ec 0c             	sub    esp,0xc
c001fd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd47:	83 ec 04             	sub    esp,0x4
c001fd4a:	68 00 02 00 00       	push   0x200
c001fd4f:	68 ef 77 02 c0       	push   0xc00277ef
c001fd54:	50                   	push   eax
c001fd55:	e8 4c ed fe ff       	call   c000eaa6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd5a:	83 c4 10             	add    esp,0x10
c001fd5d:	ba e4 76 02 c0       	mov    edx,0xc00276e4
c001fd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd66:	89 10                	mov    DWORD PTR [eax],edx
c001fd68:	90                   	nop
c001fd69:	83 c4 0c             	add    esp,0xc
c001fd6c:	c3                   	ret    
c001fd6d:	90                   	nop

c001fd6e <ATA::flush(bool)>:
c001fd6e:	53                   	push   ebx
c001fd6f:	83 ec 08             	sub    esp,0x8
c001fd72:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fd77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd7b:	19 c0                	sbb    eax,eax
c001fd7d:	83 e0 fd             	and    eax,0xfffffffd
c001fd80:	05 ea 00 00 00       	add    eax,0xea
c001fd85:	50                   	push   eax
c001fd86:	6a 07                	push   0x7
c001fd88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd8f:	50                   	push   eax
c001fd90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd96:	e8 0b f0 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd9b:	83 c4 0c             	add    esp,0xc
c001fd9e:	6a 00                	push   0x0
c001fda0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fda7:	50                   	push   eax
c001fda8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdae:	e8 a7 fa ff ff       	call   c001f85a <IDE::polling(unsigned char, unsigned int)>
c001fdb3:	83 c4 18             	add    esp,0x18
c001fdb6:	5b                   	pop    ebx
c001fdb7:	c3                   	ret    

c001fdb8 <ATA::readyForCommand()>:
c001fdb8:	56                   	push   esi
c001fdb9:	53                   	push   ebx
c001fdba:	53                   	push   ebx
c001fdbb:	31 db                	xor    ebx,ebx
c001fdbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdc1:	51                   	push   ecx
c001fdc2:	6a 0c                	push   0xc
c001fdc4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fdcb:	50                   	push   eax
c001fdcc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fdd2:	e8 8f f0 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	a8 88                	test   al,0x88
c001fddc:	74 1f                	je     c001fdfd <ATA::readyForCommand()+0x45>
c001fdde:	43                   	inc    ebx
c001fddf:	83 fb 63             	cmp    ebx,0x63
c001fde2:	7e dd                	jle    c001fdc1 <ATA::readyForCommand()+0x9>
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	6a 0a                	push   0xa
c001fde9:	e8 46 94 ff ff       	call   c0019234 <milliTenthSleep(unsigned int)>
c001fdee:	83 c4 10             	add    esp,0x10
c001fdf1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fdf7:	75 c8                	jne    c001fdc1 <ATA::readyForCommand()+0x9>
c001fdf9:	31 c0                	xor    eax,eax
c001fdfb:	eb 02                	jmp    c001fdff <ATA::readyForCommand()+0x47>
c001fdfd:	b0 01                	mov    al,0x1
c001fdff:	5a                   	pop    edx
c001fe00:	5b                   	pop    ebx
c001fe01:	5e                   	pop    esi
c001fe02:	c3                   	ret    
c001fe03:	90                   	nop

c001fe04 <ATA::access(unsigned long long, int, void*, bool)>:
c001fe04:	55                   	push   ebp
c001fe05:	57                   	push   edi
c001fe06:	56                   	push   esi
c001fe07:	53                   	push   ebx
c001fe08:	83 ec 38             	sub    esp,0x38
c001fe0b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fe0f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fe13:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fe17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fe1b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fe1f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fe23:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fe27:	68 90 76 02 c0       	push   0xc0027690
c001fe2c:	e8 ca d2 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c001fe31:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fe37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe3b:	83 c4 10             	add    esp,0x10
c001fe3e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe48:	c1 e0 06             	shl    eax,0x6
c001fe4b:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fe53:	74 5d                	je     c001feb2 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fe55:	89 fa                	mov    edx,edi
c001fe57:	89 f0                	mov    eax,esi
c001fe59:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fe5d:	c1 ea 1c             	shr    edx,0x1c
c001fe60:	89 d1                	mov    ecx,edx
c001fe62:	09 c1                	or     ecx,eax
c001fe64:	74 25                	je     c001fe8b <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fe66:	31 ed                	xor    ebp,ebp
c001fe68:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fe6f:	89 fa                	mov    edx,edi
c001fe71:	89 f0                	mov    eax,esi
c001fe73:	0f ad d0             	shrd   eax,edx,cl
c001fe76:	d3 ea                	shr    edx,cl
c001fe78:	f6 c1 20             	test   cl,0x20
c001fe7b:	74 02                	je     c001fe7f <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fe7d:	89 d0                	mov    eax,edx
c001fe7f:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fe83:	45                   	inc    ebp
c001fe84:	83 fd 06             	cmp    ebp,0x6
c001fe87:	75 df                	jne    c001fe68 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fe89:	eb 76                	jmp    c001ff01 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fe8b:	89 f0                	mov    eax,esi
c001fe8d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fe92:	89 fa                	mov    edx,edi
c001fe94:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fe9b:	0f ac d0 10          	shrd   eax,edx,0x10
c001fe9f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fea4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fea8:	c1 ee 18             	shr    esi,0x18
c001feab:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001feb0:	eb 56                	jmp    c001ff08 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001feb2:	6a 00                	push   0x0
c001feb4:	6a 3f                	push   0x3f
c001feb6:	57                   	push   edi
c001feb7:	56                   	push   esi
c001feb8:	e8 13 32 00 00       	call   c00230d0 <__umoddi3>
c001febd:	83 c4 10             	add    esp,0x10
c001fec0:	40                   	inc    eax
c001fec1:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fec5:	6a 00                	push   0x0
c001fec7:	68 f0 03 00 00       	push   0x3f0
c001fecc:	57                   	push   edi
c001fecd:	56                   	push   esi
c001fece:	e8 fd 30 00 00       	call   c0022fd0 <__udivdi3>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fedb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fee2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fee7:	6a 00                	push   0x0
c001fee9:	6a 3f                	push   0x3f
c001feeb:	57                   	push   edi
c001feec:	56                   	push   esi
c001feed:	e8 de 30 00 00       	call   c0022fd0 <__udivdi3>
c001fef2:	83 c4 10             	add    esp,0x10
c001fef5:	89 c6                	mov    esi,eax
c001fef7:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fefc:	83 e6 0f             	and    esi,0xf
c001feff:	eb 07                	jmp    c001ff08 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ff01:	31 f6                	xor    esi,esi
c001ff03:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ff08:	bf 01 00 00 00       	mov    edi,0x1
c001ff0d:	50                   	push   eax
c001ff0e:	6a 00                	push   0x0
c001ff10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff17:	50                   	push   eax
c001ff18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff1c:	e8 8d f0 ff ff       	call   c001efae <IDE::enableIRQs(unsigned char, bool)>
c001ff21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff24:	e8 8f fe ff ff       	call   c001fdb8 <ATA::readyForCommand()>
c001ff29:	83 c4 10             	add    esp,0x10
c001ff2c:	84 c0                	test   al,al
c001ff2e:	0f 84 bc 02 00 00    	je     c00201f0 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff34:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ff3a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ff40:	c1 e0 04             	shl    eax,0x4
c001ff43:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ff4a:	09 c6                	or     esi,eax
c001ff4c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ff51:	75 05                	jne    c001ff58 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ff53:	83 ce a0             	or     esi,0xffffffa0
c001ff56:	eb 03                	jmp    c001ff5b <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ff58:	83 ce e0             	or     esi,0xffffffe0
c001ff5b:	89 f0                	mov    eax,esi
c001ff5d:	0f b6 f0             	movzx  esi,al
c001ff60:	56                   	push   esi
c001ff61:	6a 06                	push   0x6
c001ff63:	51                   	push   ecx
c001ff64:	52                   	push   edx
c001ff65:	e8 3c ee ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff6a:	83 c4 10             	add    esp,0x10
c001ff6d:	6a 00                	push   0x0
c001ff6f:	6a 01                	push   0x1
c001ff71:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff78:	50                   	push   eax
c001ff79:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff7f:	e8 22 ee ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff84:	83 c4 10             	add    esp,0x10
c001ff87:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ff8c:	75 6e                	jne    c001fffc <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ff8e:	6a 00                	push   0x0
c001ff90:	6a 08                	push   0x8
c001ff92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff99:	50                   	push   eax
c001ff9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffa0:	e8 01 ee ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffa5:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ffaa:	50                   	push   eax
c001ffab:	6a 09                	push   0x9
c001ffad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffb4:	50                   	push   eax
c001ffb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffbb:	e8 e6 ed ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffc0:	83 c4 20             	add    esp,0x20
c001ffc3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ffc8:	50                   	push   eax
c001ffc9:	6a 0a                	push   0xa
c001ffcb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffd2:	50                   	push   eax
c001ffd3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffd9:	e8 c8 ed ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffde:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ffe3:	50                   	push   eax
c001ffe4:	6a 0b                	push   0xb
c001ffe6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffed:	50                   	push   eax
c001ffee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fff4:	e8 ad ed ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fff9:	83 c4 20             	add    esp,0x20
c001fffc:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0020001:	50                   	push   eax
c0020002:	6a 02                	push   0x2
c0020004:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002000b:	50                   	push   eax
c002000c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020012:	e8 8f ed ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020017:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002001c:	50                   	push   eax
c002001d:	6a 03                	push   0x3
c002001f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020026:	50                   	push   eax
c0020027:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002002d:	e8 74 ed ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020032:	83 c4 20             	add    esp,0x20
c0020035:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002003a:	50                   	push   eax
c002003b:	6a 04                	push   0x4
c002003d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020044:	50                   	push   eax
c0020045:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002004b:	e8 56 ed ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020050:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020055:	50                   	push   eax
c0020056:	6a 05                	push   0x5
c0020058:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002005f:	50                   	push   eax
c0020060:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020066:	e8 3b ed ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002006b:	83 c4 20             	add    esp,0x20
c002006e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0020073:	0f 94 c0             	sete   al
c0020076:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002007b:	74 09                	je     c0020086 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c002007d:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0020084:	eb 07                	jmp    c002008d <ATA::access(unsigned long long, int, void*, bool)+0x289>
c0020086:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002008d:	0f b6 c0             	movzx  eax,al
c0020090:	50                   	push   eax
c0020091:	6a 07                	push   0x7
c0020093:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002009a:	50                   	push   eax
c002009b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200a1:	e8 00 ed ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200a6:	c7 04 24 9d 76 02 c0 	mov    DWORD PTR [esp],0xc002769d
c00200ad:	e8 49 d0 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00200b2:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00200b6:	83 c4 10             	add    esp,0x10
c00200b9:	85 f6                	test   esi,esi
c00200bb:	0f 84 f7 00 00 00    	je     c00201b8 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c00200c1:	83 ec 0c             	sub    esp,0xc
c00200c4:	68 a0 76 02 c0       	push   0xc00276a0
c00200c9:	e8 2d d0 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00200ce:	83 c4 0c             	add    esp,0xc
c00200d1:	6a 01                	push   0x1
c00200d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200da:	50                   	push   eax
c00200db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200e1:	e8 74 f7 ff ff       	call   c001f85a <IDE::polling(unsigned char, unsigned int)>
c00200e6:	c7 04 24 a3 76 02 c0 	mov    DWORD PTR [esp],0xc00276a3
c00200ed:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00200f1:	e8 05 d0 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00200f6:	83 c4 10             	add    esp,0x10
c00200f9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00200fd:	84 c0                	test   al,al
c00200ff:	74 2b                	je     c002012c <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0020101:	0f b6 f8             	movzx  edi,al
c0020104:	57                   	push   edi
c0020105:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002010c:	50                   	push   eax
c002010d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020114:	50                   	push   eax
c0020115:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002011b:	e8 8a f6 ff ff       	call   c001f7aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020120:	c7 04 24 a6 76 02 c0 	mov    DWORD PTR [esp],0xc00276a6
c0020127:	e9 bc 00 00 00       	jmp    c00201e8 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c002012c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0020131:	74 50                	je     c0020183 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c0020133:	83 ec 0c             	sub    esp,0xc
c0020136:	31 ed                	xor    ebp,ebp
c0020138:	68 b1 76 02 c0       	push   0xc00276b1
c002013d:	e8 b9 cf fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0020142:	83 c4 10             	add    esp,0x10
c0020145:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020149:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002014d:	50                   	push   eax
c002014e:	50                   	push   eax
c002014f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020156:	50                   	push   eax
c0020157:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002015d:	e8 32 ec ff ff       	call   c001ed94 <IDE::getBase(unsigned char)>
c0020162:	89 c2                	mov    edx,eax
c0020164:	89 f8                	mov    eax,edi
c0020166:	66 ef                	out    dx,ax
c0020168:	45                   	inc    ebp
c0020169:	83 c4 10             	add    esp,0x10
c002016c:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0020172:	75 d1                	jne    c0020145 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c0020174:	83 ec 0c             	sub    esp,0xc
c0020177:	68 b4 76 02 c0       	push   0xc00276b4
c002017c:	e8 7a cf fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0020181:	eb 24                	jmp    c00201a7 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0020183:	51                   	push   ecx
c0020184:	51                   	push   ecx
c0020185:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002018c:	50                   	push   eax
c002018d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020193:	e8 fc eb ff ff       	call   c001ed94 <IDE::getBase(unsigned char)>
c0020198:	b9 00 01 00 00       	mov    ecx,0x100
c002019d:	89 c2                	mov    edx,eax
c002019f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00201a3:	fc                   	cld    
c00201a4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00201a7:	83 c4 10             	add    esp,0x10
c00201aa:	4e                   	dec    esi
c00201ab:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00201b3:	e9 01 ff ff ff       	jmp    c00200b9 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c00201b8:	31 ff                	xor    edi,edi
c00201ba:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00201bf:	74 2f                	je     c00201f0 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00201c1:	83 ec 0c             	sub    esp,0xc
c00201c4:	68 b7 76 02 c0       	push   0xc00276b7
c00201c9:	e8 2d cf fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00201ce:	58                   	pop    eax
c00201cf:	31 c0                	xor    eax,eax
c00201d1:	5a                   	pop    edx
c00201d2:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00201d7:	0f 94 c0             	sete   al
c00201da:	50                   	push   eax
c00201db:	53                   	push   ebx
c00201dc:	e8 8d fb ff ff       	call   c001fd6e <ATA::flush(bool)>
c00201e1:	c7 04 24 ba 76 02 c0 	mov    DWORD PTR [esp],0xc00276ba
c00201e8:	e8 0e cf fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00201ed:	83 c4 10             	add    esp,0x10
c00201f0:	83 c4 2c             	add    esp,0x2c
c00201f3:	89 f8                	mov    eax,edi
c00201f5:	5b                   	pop    ebx
c00201f6:	5e                   	pop    esi
c00201f7:	5f                   	pop    edi
c00201f8:	5d                   	pop    ebp
c00201f9:	c3                   	ret    

c00201fa <ATA::read(unsigned long long, int, void*)>:
c00201fa:	57                   	push   edi
c00201fb:	b8 04 00 00 00       	mov    eax,0x4
c0020200:	56                   	push   esi
c0020201:	53                   	push   ebx
c0020202:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020206:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002020a:	8d 7a ff             	lea    edi,[edx-0x1]
c002020d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020211:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020215:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002021b:	77 25                	ja     c0020242 <ATA::read(unsigned long long, int, void*)+0x48>
c002021d:	b8 06 00 00 00       	mov    eax,0x6
c0020222:	85 f6                	test   esi,esi
c0020224:	74 1c                	je     c0020242 <ATA::read(unsigned long long, int, void*)+0x48>
c0020226:	50                   	push   eax
c0020227:	50                   	push   eax
c0020228:	6a 00                	push   0x0
c002022a:	56                   	push   esi
c002022b:	52                   	push   edx
c002022c:	53                   	push   ebx
c002022d:	51                   	push   ecx
c002022e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020232:	e8 cd fb ff ff       	call   c001fe04 <ATA::access(unsigned long long, int, void*, bool)>
c0020237:	83 c4 20             	add    esp,0x20
c002023a:	85 c0                	test   eax,eax
c002023c:	0f 95 c0             	setne  al
c002023f:	0f b6 c0             	movzx  eax,al
c0020242:	5b                   	pop    ebx
c0020243:	5e                   	pop    esi
c0020244:	5f                   	pop    edi
c0020245:	c3                   	ret    

c0020246 <ATA::write(unsigned long long, int, void*)>:
c0020246:	55                   	push   ebp
c0020247:	57                   	push   edi
c0020248:	56                   	push   esi
c0020249:	53                   	push   ebx
c002024a:	83 ec 18             	sub    esp,0x18
c002024d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020251:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020255:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020259:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002025d:	68 bd 76 02 c0       	push   0xc00276bd
c0020262:	e8 94 ce fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0020267:	8d 53 ff             	lea    edx,[ebx-0x1]
c002026a:	83 c4 10             	add    esp,0x10
c002026d:	b8 04 00 00 00       	mov    eax,0x4
c0020272:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020278:	77 25                	ja     c002029f <ATA::write(unsigned long long, int, void*)+0x59>
c002027a:	b8 06 00 00 00       	mov    eax,0x6
c002027f:	85 f6                	test   esi,esi
c0020281:	74 1c                	je     c002029f <ATA::write(unsigned long long, int, void*)+0x59>
c0020283:	50                   	push   eax
c0020284:	50                   	push   eax
c0020285:	6a 01                	push   0x1
c0020287:	56                   	push   esi
c0020288:	53                   	push   ebx
c0020289:	55                   	push   ebp
c002028a:	57                   	push   edi
c002028b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002028f:	e8 70 fb ff ff       	call   c001fe04 <ATA::access(unsigned long long, int, void*, bool)>
c0020294:	83 c4 20             	add    esp,0x20
c0020297:	85 c0                	test   eax,eax
c0020299:	0f 95 c0             	setne  al
c002029c:	0f b6 c0             	movzx  eax,al
c002029f:	83 c4 0c             	add    esp,0xc
c00202a2:	5b                   	pop    ebx
c00202a3:	5e                   	pop    esi
c00202a4:	5f                   	pop    edi
c00202a5:	5d                   	pop    ebp
c00202a6:	c3                   	ret    
c00202a7:	90                   	nop

c00202a8 <ATA::detectCHS()>:
c00202a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00202ac:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00202b2:	c1 e0 06             	shl    eax,0x6
c00202b5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00202bb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00202c5:	c7 44 24 04 c9 76 02 c0 	mov    DWORD PTR [esp+0x4],0xc00276c9
c00202cd:	e9 0b 4f ff ff       	jmp    c00151dd <Krnl::panic(char const*)>

c00202d2 <ATA::open(int, int, void*)>:
c00202d2:	53                   	push   ebx
c00202d3:	83 ec 08             	sub    esp,0x8
c00202d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00202da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202e2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00202e8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00202ee:	c1 e0 06             	shl    eax,0x6
c00202f1:	01 d0                	add    eax,edx
c00202f3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00202fa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020300:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0020307:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020311:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0020317:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002031e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0020325:	75 0c                	jne    c0020333 <ATA::open(int, int, void*)+0x61>
c0020327:	83 ec 0c             	sub    esp,0xc
c002032a:	53                   	push   ebx
c002032b:	e8 78 ff ff ff       	call   c00202a8 <ATA::detectCHS()>
c0020330:	83 c4 10             	add    esp,0x10
c0020333:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020339:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002033f:	c1 e0 06             	shl    eax,0x6
c0020342:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020349:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020353:	d1 e8                	shr    eax,1
c0020355:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002035b:	6a 04                	push   0x4
c002035d:	6a 0c                	push   0xc
c002035f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020366:	50                   	push   eax
c0020367:	52                   	push   edx
c0020368:	e8 39 ea ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002036d:	90                   	nop
c002036e:	90                   	nop
c002036f:	6a 00                	push   0x0
c0020371:	6a 0c                	push   0xc
c0020373:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002037a:	50                   	push   eax
c002037b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020381:	e8 20 ea ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020386:	83 c4 14             	add    esp,0x14
c0020389:	53                   	push   ebx
c002038a:	e8 7f e7 fe ff       	call   c000eb0e <PhysicalDisk::startCache()>
c002038f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020392:	e8 ef 08 ff ff       	call   c0010c86 <createPartitionsForDisk(PhysicalDisk*)>
c0020397:	31 c0                	xor    eax,eax
c0020399:	83 c4 18             	add    esp,0x18
c002039c:	5b                   	pop    ebx
c002039d:	c3                   	ret    

c002039e <ATAPI::write(unsigned long long, int, void*)>:
c002039e:	b8 03 00 00 00       	mov    eax,0x3
c00203a3:	c3                   	ret    

c00203a4 <ATAPI::close(int, int, void*)>:
c00203a4:	83 ec 0c             	sub    esp,0xc
c00203a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00203b1:	85 c0                	test   eax,eax
c00203b3:	74 0c                	je     c00203c1 <ATAPI::close(int, int, void*)+0x1d>
c00203b5:	83 ec 0c             	sub    esp,0xc
c00203b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00203ba:	50                   	push   eax
c00203bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00203be:	83 c4 10             	add    esp,0x10
c00203c1:	31 c0                	xor    eax,eax
c00203c3:	83 c4 0c             	add    esp,0xc
c00203c6:	c3                   	ret    
c00203c7:	90                   	nop

c00203c8 <ATAPI::ATAPI()>:
c00203c8:	83 ec 0c             	sub    esp,0xc
c00203cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203cf:	83 ec 04             	sub    esp,0x4
c00203d2:	68 00 08 00 00       	push   0x800
c00203d7:	68 c9 79 02 c0       	push   0xc00279c9
c00203dc:	50                   	push   eax
c00203dd:	e8 c4 e6 fe ff       	call   c000eaa6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00203e2:	83 c4 10             	add    esp,0x10
c00203e5:	ba 5c 77 02 c0       	mov    edx,0xc002775c
c00203ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ee:	89 10                	mov    DWORD PTR [eax],edx
c00203f0:	90                   	nop
c00203f1:	83 c4 0c             	add    esp,0xc
c00203f4:	c3                   	ret    
c00203f5:	90                   	nop

c00203f6 <ATAPI::readyForCommand()>:
c00203f6:	56                   	push   esi
c00203f7:	53                   	push   ebx
c00203f8:	53                   	push   ebx
c00203f9:	31 db                	xor    ebx,ebx
c00203fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00203ff:	51                   	push   ecx
c0020400:	6a 0c                	push   0xc
c0020402:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020409:	50                   	push   eax
c002040a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020410:	e8 51 ea ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c0020415:	83 c4 10             	add    esp,0x10
c0020418:	a8 88                	test   al,0x88
c002041a:	74 25                	je     c0020441 <ATAPI::readyForCommand()+0x4b>
c002041c:	43                   	inc    ebx
c002041d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0020423:	7e da                	jle    c00203ff <ATAPI::readyForCommand()+0x9>
c0020425:	83 ec 0c             	sub    esp,0xc
c0020428:	68 5e 01 00 00       	push   0x15e
c002042d:	e8 02 8e ff ff       	call   c0019234 <milliTenthSleep(unsigned int)>
c0020432:	83 c4 10             	add    esp,0x10
c0020435:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002043b:	75 c2                	jne    c00203ff <ATAPI::readyForCommand()+0x9>
c002043d:	31 c0                	xor    eax,eax
c002043f:	eb 02                	jmp    c0020443 <ATAPI::readyForCommand()+0x4d>
c0020441:	b0 01                	mov    al,0x1
c0020443:	5a                   	pop    edx
c0020444:	5b                   	pop    ebx
c0020445:	5e                   	pop    esi
c0020446:	c3                   	ret    
c0020447:	90                   	nop

c0020448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020448:	55                   	push   ebp
c0020449:	57                   	push   edi
c002044a:	56                   	push   esi
c002044b:	53                   	push   ebx
c002044c:	83 ec 20             	sub    esp,0x20
c002044f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020453:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0020457:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002045b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002045f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020463:	6a 01                	push   0x1
c0020465:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002046c:	50                   	push   eax
c002046d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020473:	e8 36 eb ff ff       	call   c001efae <IDE::enableIRQs(unsigned char, bool)>
c0020478:	5e                   	pop    esi
c0020479:	58                   	pop    eax
c002047a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020481:	50                   	push   eax
c0020482:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020488:	e8 f3 e8 ff ff       	call   c001ed80 <IDE::prepareInterrupt(unsigned char)>
c002048d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020490:	e8 61 ff ff ff       	call   c00203f6 <ATAPI::readyForCommand()>
c0020495:	83 c4 10             	add    esp,0x10
c0020498:	84 c0                	test   al,al
c002049a:	75 0a                	jne    c00204a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002049c:	bb 01 00 00 00       	mov    ebx,0x1
c00204a1:	e9 57 02 00 00       	jmp    c00206fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00204a6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00204ac:	c1 e0 04             	shl    eax,0x4
c00204af:	0f b6 c0             	movzx  eax,al
c00204b2:	50                   	push   eax
c00204b3:	6a 06                	push   0x6
c00204b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204bc:	50                   	push   eax
c00204bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204c3:	e8 de e8 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204c8:	6a 00                	push   0x0
c00204ca:	6a 01                	push   0x1
c00204cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204d3:	50                   	push   eax
c00204d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204da:	e8 c7 e8 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204df:	83 c4 20             	add    esp,0x20
c00204e2:	0f b6 c3             	movzx  eax,bl
c00204e5:	0f b6 df             	movzx  ebx,bh
c00204e8:	50                   	push   eax
c00204e9:	6a 04                	push   0x4
c00204eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204f2:	50                   	push   eax
c00204f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204f9:	e8 a8 e8 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204fe:	53                   	push   ebx
c00204ff:	6a 05                	push   0x5
c0020501:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020508:	50                   	push   eax
c0020509:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002050f:	e8 92 e8 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020514:	83 c4 20             	add    esp,0x20
c0020517:	68 a0 00 00 00       	push   0xa0
c002051c:	6a 07                	push   0x7
c002051e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020525:	50                   	push   eax
c0020526:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002052c:	e8 75 e8 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020531:	83 c4 0c             	add    esp,0xc
c0020534:	6a 01                	push   0x1
c0020536:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002053d:	50                   	push   eax
c002053e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020544:	e8 11 f3 ff ff       	call   c001f85a <IDE::polling(unsigned char, unsigned int)>
c0020549:	83 c4 10             	add    esp,0x10
c002054c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0020552:	84 c0                	test   al,al
c0020554:	74 23                	je     c0020579 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020556:	0f b6 d8             	movzx  ebx,al
c0020559:	0f b6 d2             	movzx  edx,dl
c002055c:	53                   	push   ebx
c002055d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0020564:	50                   	push   eax
c0020565:	52                   	push   edx
c0020566:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002056c:	e8 39 f2 ff ff       	call   c001f7aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020571:	83 c4 10             	add    esp,0x10
c0020574:	e9 84 01 00 00       	jmp    c00206fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020579:	0f b6 d2             	movzx  edx,dl
c002057c:	53                   	push   ebx
c002057d:	53                   	push   ebx
c002057e:	52                   	push   edx
c002057f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020585:	e8 0a e8 ff ff       	call   c001ed94 <IDE::getBase(unsigned char)>
c002058a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002058e:	b9 06 00 00 00       	mov    ecx,0x6
c0020593:	89 c2                	mov    edx,eax
c0020595:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020598:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002059c:	83 c4 10             	add    esp,0x10
c002059f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00205a5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00205ac:	85 db                	test   ebx,ebx
c00205ae:	0f 84 ec 00 00 00    	je     c00206a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00205b4:	51                   	push   ecx
c00205b5:	51                   	push   ecx
c00205b6:	52                   	push   edx
c00205b7:	50                   	push   eax
c00205b8:	e8 57 e9 ff ff       	call   c001ef14 <IDE::waitInterrupt(unsigned char)>
c00205bd:	83 c4 10             	add    esp,0x10
c00205c0:	84 c0                	test   al,al
c00205c2:	0f 84 d4 fe ff ff    	je     c002049c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00205c8:	56                   	push   esi
c00205c9:	56                   	push   esi
c00205ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205d1:	50                   	push   eax
c00205d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205d8:	e8 a3 e7 ff ff       	call   c001ed80 <IDE::prepareInterrupt(unsigned char)>
c00205dd:	83 c4 0c             	add    esp,0xc
c00205e0:	6a 04                	push   0x4
c00205e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205e9:	50                   	push   eax
c00205ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205f0:	e8 71 e8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c00205f5:	83 c4 0c             	add    esp,0xc
c00205f8:	89 c6                	mov    esi,eax
c00205fa:	6a 05                	push   0x5
c00205fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020603:	50                   	push   eax
c0020604:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002060a:	e8 57 e8 ff ff       	call   c001ee66 <IDE::read(unsigned char, unsigned char)>
c002060f:	89 f1                	mov    ecx,esi
c0020611:	0f b6 c0             	movzx  eax,al
c0020614:	0f b6 f1             	movzx  esi,cl
c0020617:	c1 e0 08             	shl    eax,0x8
c002061a:	09 c6                	or     esi,eax
c002061c:	d1 fe                	sar    esi,1
c002061e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020622:	83 c4 10             	add    esp,0x10
c0020625:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002062a:	74 41                	je     c002066d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002062c:	31 c9                	xor    ecx,ecx
c002062e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020634:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002063b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002063f:	75 0a                	jne    c002064b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020641:	01 c9                	add    ecx,ecx
c0020643:	01 cd                	add    ebp,ecx
c0020645:	4b                   	dec    ebx
c0020646:	e9 54 ff ff ff       	jmp    c002059f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002064b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020650:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020654:	51                   	push   ecx
c0020655:	51                   	push   ecx
c0020656:	52                   	push   edx
c0020657:	50                   	push   eax
c0020658:	e8 37 e7 ff ff       	call   c001ed94 <IDE::getBase(unsigned char)>
c002065d:	89 c2                	mov    edx,eax
c002065f:	89 f0                	mov    eax,esi
c0020661:	66 ef                	out    dx,ax
c0020663:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020667:	83 c4 10             	add    esp,0x10
c002066a:	41                   	inc    ecx
c002066b:	eb c1                	jmp    c002062e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002066d:	31 f6                	xor    esi,esi
c002066f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020675:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002067c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020680:	75 06                	jne    c0020688 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0020682:	01 f6                	add    esi,esi
c0020684:	01 f5                	add    ebp,esi
c0020686:	eb bd                	jmp    c0020645 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0020688:	51                   	push   ecx
c0020689:	51                   	push   ecx
c002068a:	52                   	push   edx
c002068b:	50                   	push   eax
c002068c:	e8 03 e7 ff ff       	call   c001ed94 <IDE::getBase(unsigned char)>
c0020691:	89 c2                	mov    edx,eax
c0020693:	66 ed                	in     ax,dx
c0020695:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002069a:	83 c4 10             	add    esp,0x10
c002069d:	46                   	inc    esi
c002069e:	eb cf                	jmp    c002066f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00206a0:	51                   	push   ecx
c00206a1:	51                   	push   ecx
c00206a2:	52                   	push   edx
c00206a3:	50                   	push   eax
c00206a4:	e8 6b e8 ff ff       	call   c001ef14 <IDE::waitInterrupt(unsigned char)>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	84 c0                	test   al,al
c00206ae:	0f 84 e8 fd ff ff    	je     c002049c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00206b4:	bb a0 86 01 00       	mov    ebx,0x186a0
c00206b9:	52                   	push   edx
c00206ba:	52                   	push   edx
c00206bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206c2:	50                   	push   eax
c00206c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206c9:	e8 b2 e6 ff ff       	call   c001ed80 <IDE::prepareInterrupt(unsigned char)>
c00206ce:	83 c4 10             	add    esp,0x10
c00206d1:	50                   	push   eax
c00206d2:	50                   	push   eax
c00206d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206da:	50                   	push   eax
c00206db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206e1:	e8 ae e6 ff ff       	call   c001ed94 <IDE::getBase(unsigned char)>
c00206e6:	8d 50 07             	lea    edx,[eax+0x7]
c00206e9:	ec                   	in     al,dx
c00206ea:	83 c4 10             	add    esp,0x10
c00206ed:	a8 88                	test   al,0x88
c00206ef:	74 0a                	je     c00206fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00206f1:	4b                   	dec    ebx
c00206f2:	75 dd                	jne    c00206d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00206f4:	bb 02 00 00 00       	mov    ebx,0x2
c00206f9:	eb 02                	jmp    c00206fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00206fb:	31 db                	xor    ebx,ebx
c00206fd:	83 c4 1c             	add    esp,0x1c
c0020700:	89 d8                	mov    eax,ebx
c0020702:	5b                   	pop    ebx
c0020703:	5e                   	pop    esi
c0020704:	5f                   	pop    edi
c0020705:	5d                   	pop    ebp
c0020706:	c3                   	ret    
c0020707:	90                   	nop

c0020708 <ATAPI::diskRemoved()>:
c0020708:	53                   	push   ebx
c0020709:	83 ec 14             	sub    esp,0x14
c002070c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020710:	68 14 77 02 c0       	push   0xc0027714
c0020715:	e8 e1 c9 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c002071a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020721:	c7 04 24 2a 77 02 c0 	mov    DWORD PTR [esp],0xc002772a
c0020728:	e8 ce c9 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c002072d:	58                   	pop    eax
c002072e:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020734:	e8 cb 02 ff ff       	call   c0010a04 <LogicalDisk::unmount()>
c0020739:	c7 04 24 39 77 02 c0 	mov    DWORD PTR [esp],0xc0027739
c0020740:	e8 b6 c9 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0020745:	5a                   	pop    edx
c0020746:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002074c:	e8 bb 0c ff ff       	call   c001140c <VCache::writeWriteBuffer()>
c0020751:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020757:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002075b:	83 c4 18             	add    esp,0x18
c002075e:	5b                   	pop    ebx
c002075f:	e9 98 0c ff ff       	jmp    c00113fc <VCache::invalidateReadBuffer()>

c0020764 <ATAPI::eject()>:
c0020764:	57                   	push   edi
c0020765:	b9 03 00 00 00       	mov    ecx,0x3
c002076a:	53                   	push   ebx
c002076b:	83 ec 14             	sub    esp,0x14
c002076e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020772:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020776:	fc                   	cld    
c0020777:	31 c0                	xor    eax,eax
c0020779:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002077b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020780:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020785:	50                   	push   eax
c0020786:	50                   	push   eax
c0020787:	6a 00                	push   0x0
c0020789:	6a 00                	push   0x0
c002078b:	6a 00                	push   0x0
c002078d:	6a 02                	push   0x2
c002078f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020793:	50                   	push   eax
c0020794:	53                   	push   ebx
c0020795:	e8 ae fc ff ff       	call   c0020448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002079a:	83 c4 14             	add    esp,0x14
c002079d:	53                   	push   ebx
c002079e:	e8 65 ff ff ff       	call   c0020708 <ATAPI::diskRemoved()>
c00207a3:	83 c4 24             	add    esp,0x24
c00207a6:	31 c0                	xor    eax,eax
c00207a8:	5b                   	pop    ebx
c00207a9:	5f                   	pop    edi
c00207aa:	c3                   	ret    
c00207ab:	90                   	nop

c00207ac <ATAPI::diskInserted()>:
c00207ac:	83 ec 18             	sub    esp,0x18
c00207af:	68 d5 79 02 c0       	push   0xc00279d5
c00207b4:	e8 42 c9 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00207b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207bd:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00207c4:	83 c4 1c             	add    esp,0x1c
c00207c7:	c3                   	ret    

c00207c8 <ATAPI::detectMedia()>:
c00207c8:	56                   	push   esi
c00207c9:	53                   	push   ebx
c00207ca:	83 ec 28             	sub    esp,0x28
c00207cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00207d1:	6a 0c                	push   0xc
c00207d3:	6a 00                	push   0x0
c00207d5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00207d9:	56                   	push   esi
c00207da:	e8 b5 fe fd ff       	call   c0000694 <memset>
c00207df:	58                   	pop    eax
c00207e0:	5a                   	pop    edx
c00207e1:	6a 00                	push   0x0
c00207e3:	6a 00                	push   0x0
c00207e5:	6a 00                	push   0x0
c00207e7:	6a 00                	push   0x0
c00207e9:	56                   	push   esi
c00207ea:	53                   	push   ebx
c00207eb:	e8 58 fc ff ff       	call   c0020448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207f0:	83 c4 1c             	add    esp,0x1c
c00207f3:	6a 0c                	push   0xc
c00207f5:	6a 00                	push   0x0
c00207f7:	56                   	push   esi
c00207f8:	e8 97 fe fd ff       	call   c0000694 <memset>
c00207fd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020802:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020807:	59                   	pop    ecx
c0020808:	58                   	pop    eax
c0020809:	6a 01                	push   0x1
c002080b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002080f:	50                   	push   eax
c0020810:	6a 00                	push   0x0
c0020812:	6a 12                	push   0x12
c0020814:	56                   	push   esi
c0020815:	53                   	push   ebx
c0020816:	e8 2d fc ff ff       	call   c0020448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002081b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002081f:	83 c4 20             	add    esp,0x20
c0020822:	83 e0 7f             	and    eax,0x7f
c0020825:	3c 70                	cmp    al,0x70
c0020827:	74 15                	je     c002083e <ATAPI::detectMedia()+0x76>
c0020829:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020830:	75 0c                	jne    c002083e <ATAPI::detectMedia()+0x76>
c0020832:	83 ec 0c             	sub    esp,0xc
c0020835:	53                   	push   ebx
c0020836:	e8 71 ff ff ff       	call   c00207ac <ATAPI::diskInserted()>
c002083b:	83 c4 10             	add    esp,0x10
c002083e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020842:	83 e0 0f             	and    eax,0xf
c0020845:	3c 02                	cmp    al,0x2
c0020847:	75 1b                	jne    c0020864 <ATAPI::detectMedia()+0x9c>
c0020849:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002084e:	75 2d                	jne    c002087d <ATAPI::detectMedia()+0xb5>
c0020850:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020857:	74 24                	je     c002087d <ATAPI::detectMedia()+0xb5>
c0020859:	83 ec 0c             	sub    esp,0xc
c002085c:	53                   	push   ebx
c002085d:	e8 a6 fe ff ff       	call   c0020708 <ATAPI::diskRemoved()>
c0020862:	eb 16                	jmp    c002087a <ATAPI::detectMedia()+0xb2>
c0020864:	84 c0                	test   al,al
c0020866:	75 15                	jne    c002087d <ATAPI::detectMedia()+0xb5>
c0020868:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002086f:	75 0c                	jne    c002087d <ATAPI::detectMedia()+0xb5>
c0020871:	83 ec 0c             	sub    esp,0xc
c0020874:	53                   	push   ebx
c0020875:	e8 32 ff ff ff       	call   c00207ac <ATAPI::diskInserted()>
c002087a:	83 c4 10             	add    esp,0x10
c002087d:	83 c4 24             	add    esp,0x24
c0020880:	5b                   	pop    ebx
c0020881:	5e                   	pop    esi
c0020882:	c3                   	ret    
c0020883:	90                   	nop

c0020884 <ATAPI::open(int, int, void*)>:
c0020884:	56                   	push   esi
c0020885:	53                   	push   ebx
c0020886:	50                   	push   eax
c0020887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002088b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002088f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020893:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020899:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002089f:	c1 e0 06             	shl    eax,0x6
c00208a2:	01 d0                	add    eax,edx
c00208a4:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00208ab:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00208b1:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00208b8:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00208c2:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00208c8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00208cf:	6a 04                	push   0x4
c00208d1:	6a 0c                	push   0xc
c00208d3:	51                   	push   ecx
c00208d4:	52                   	push   edx
c00208d5:	e8 cc e4 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208da:	90                   	nop
c00208db:	90                   	nop
c00208dc:	6a 00                	push   0x0
c00208de:	6a 0c                	push   0xc
c00208e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00208e7:	50                   	push   eax
c00208e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00208ee:	e8 b3 e4 ff ff       	call   c001eda6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208f3:	83 c4 14             	add    esp,0x14
c00208f6:	68 74 01 00 00       	push   0x174
c00208fb:	e8 e7 94 fe ff       	call   c0009de7 <malloc>
c0020900:	83 c4 0c             	add    esp,0xc
c0020903:	89 c6                	mov    esi,eax
c0020905:	6a 00                	push   0x0
c0020907:	68 ff ff ff 7f       	push   0x7fffffff
c002090c:	6a 00                	push   0x0
c002090e:	6a 00                	push   0x0
c0020910:	53                   	push   ebx
c0020911:	68 b2 7a 02 c0       	push   0xc0027ab2
c0020916:	50                   	push   eax
c0020917:	e8 f4 fe fe ff       	call   c0010810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002091c:	83 c4 14             	add    esp,0x14
c002091f:	56                   	push   esi
c0020920:	e8 a1 ff fe ff       	call   c00108c6 <LogicalDisk::assignDriveLetter()>
c0020925:	5a                   	pop    edx
c0020926:	0f be c0             	movsx  eax,al
c0020929:	59                   	pop    ecx
c002092a:	50                   	push   eax
c002092b:	68 47 77 02 c0       	push   0xc0027747
c0020930:	e8 c6 c7 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0020935:	58                   	pop    eax
c0020936:	5a                   	pop    edx
c0020937:	56                   	push   esi
c0020938:	53                   	push   ebx
c0020939:	e8 30 dd fe ff       	call   c000e66e <Device::addChild(Device*)>
c002093e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020944:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020947:	e8 c2 e1 fe ff       	call   c000eb0e <PhysicalDisk::startCache()>
c002094c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020956:	e8 6d fe ff ff       	call   c00207c8 <ATAPI::detectMedia()>
c002095b:	83 c4 14             	add    esp,0x14
c002095e:	31 c0                	xor    eax,eax
c0020960:	5b                   	pop    ebx
c0020961:	5e                   	pop    esi
c0020962:	c3                   	ret    
c0020963:	90                   	nop

c0020964 <ATAPI::read(unsigned long long, int, void*)>:
c0020964:	55                   	push   ebp
c0020965:	57                   	push   edi
c0020966:	56                   	push   esi
c0020967:	53                   	push   ebx
c0020968:	83 ec 1c             	sub    esp,0x1c
c002096b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002096f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020973:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020977:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002097e:	74 41                	je     c00209c1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020980:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020984:	b9 03 00 00 00       	mov    ecx,0x3
c0020989:	fc                   	cld    
c002098a:	31 c0                	xor    eax,eax
c002098c:	86 fb                	xchg   bl,bh
c002098e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020990:	c1 c3 10             	rol    ebx,0x10
c0020993:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020998:	89 e8                	mov    eax,ebp
c002099a:	86 fb                	xchg   bl,bh
c002099c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00209a0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00209a4:	50                   	push   eax
c00209a5:	50                   	push   eax
c00209a6:	55                   	push   ebp
c00209a7:	c1 e5 0b             	shl    ebp,0xb
c00209aa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00209ae:	6a 00                	push   0x0
c00209b0:	55                   	push   ebp
c00209b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00209b5:	50                   	push   eax
c00209b6:	56                   	push   esi
c00209b7:	e8 8c fa ff ff       	call   c0020448 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00209bc:	83 c4 20             	add    esp,0x20
c00209bf:	eb 1a                	jmp    c00209db <ATAPI::read(unsigned long long, int, void*)+0x77>
c00209c1:	83 ec 0c             	sub    esp,0xc
c00209c4:	56                   	push   esi
c00209c5:	e8 fe fd ff ff       	call   c00207c8 <ATAPI::detectMedia()>
c00209ca:	83 c4 10             	add    esp,0x10
c00209cd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00209d4:	75 aa                	jne    c0020980 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00209d6:	b8 02 00 00 00       	mov    eax,0x2
c00209db:	83 c4 1c             	add    esp,0x1c
c00209de:	5b                   	pop    ebx
c00209df:	5e                   	pop    esi
c00209e0:	5f                   	pop    edi
c00209e1:	5d                   	pop    ebp
c00209e2:	c3                   	ret    
c00209e3:	90                   	nop

c00209e4 <SATA::close(int, int, void*)>:
c00209e4:	83 ec 0c             	sub    esp,0xc
c00209e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00209f1:	85 c0                	test   eax,eax
c00209f3:	74 0c                	je     c0020a01 <SATA::close(int, int, void*)+0x1d>
c00209f5:	83 ec 0c             	sub    esp,0xc
c00209f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00209fa:	50                   	push   eax
c00209fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00209fe:	83 c4 10             	add    esp,0x10
c0020a01:	31 c0                	xor    eax,eax
c0020a03:	83 c4 0c             	add    esp,0xc
c0020a06:	c3                   	ret    
c0020a07:	90                   	nop

c0020a08 <SATA::powerSaving(PowerSavingLevel)>:
c0020a08:	c3                   	ret    
c0020a09:	90                   	nop

c0020a0a <SATA::open(int, int, void*)>:
c0020a0a:	56                   	push   esi
c0020a0b:	53                   	push   ebx
c0020a0c:	51                   	push   ecx
c0020a0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a11:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020a18:	74 2d                	je     c0020a47 <SATA::open(int, int, void*)+0x3d>
c0020a1a:	83 ec 0c             	sub    esp,0xc
c0020a1d:	68 8c 77 02 c0       	push   0xc002778c
c0020a22:	e8 1a 94 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020a27:	83 c4 10             	add    esp,0x10
c0020a2a:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020a31:	75 14                	jne    c0020a47 <SATA::open(int, int, void*)+0x3d>
c0020a33:	e4 60                	in     al,0x60
c0020a35:	3c 5a                	cmp    al,0x5a
c0020a37:	74 04                	je     c0020a3d <SATA::open(int, int, void*)+0x33>
c0020a39:	3c 1c                	cmp    al,0x1c
c0020a3b:	75 f6                	jne    c0020a33 <SATA::open(int, int, void*)+0x29>
c0020a3d:	e4 60                	in     al,0x60
c0020a3f:	3c 5a                	cmp    al,0x5a
c0020a41:	74 fa                	je     c0020a3d <SATA::open(int, int, void*)+0x33>
c0020a43:	3c 1c                	cmp    al,0x1c
c0020a45:	74 f6                	je     c0020a3d <SATA::open(int, int, void*)+0x33>
c0020a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a4b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020a55:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020a5b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020a65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a69:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020a73:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020a79:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020a80:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020a87:	74 2d                	je     c0020ab6 <SATA::open(int, int, void*)+0xac>
c0020a89:	83 ec 0c             	sub    esp,0xc
c0020a8c:	68 99 77 02 c0       	push   0xc0027799
c0020a91:	e8 ab 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020a96:	83 c4 10             	add    esp,0x10
c0020a99:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020aa0:	75 14                	jne    c0020ab6 <SATA::open(int, int, void*)+0xac>
c0020aa2:	e4 60                	in     al,0x60
c0020aa4:	3c 1c                	cmp    al,0x1c
c0020aa6:	74 04                	je     c0020aac <SATA::open(int, int, void*)+0xa2>
c0020aa8:	3c 5a                	cmp    al,0x5a
c0020aaa:	75 f6                	jne    c0020aa2 <SATA::open(int, int, void*)+0x98>
c0020aac:	e4 60                	in     al,0x60
c0020aae:	3c 5a                	cmp    al,0x5a
c0020ab0:	74 fa                	je     c0020aac <SATA::open(int, int, void*)+0xa2>
c0020ab2:	3c 1c                	cmp    al,0x1c
c0020ab4:	74 f6                	je     c0020aac <SATA::open(int, int, void*)+0xa2>
c0020ab6:	e8 e3 99 fe ff       	call   c000a49e <Phys::allocatePage()>
c0020abb:	89 c6                	mov    esi,eax
c0020abd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020ac3:	81 c6 00 10 00 00    	add    esi,0x1000
c0020ac9:	e8 d0 99 fe ff       	call   c000a49e <Phys::allocatePage()>
c0020ace:	39 c6                	cmp    esi,eax
c0020ad0:	74 10                	je     c0020ae2 <SATA::open(int, int, void*)+0xd8>
c0020ad2:	83 ec 0c             	sub    esp,0xc
c0020ad5:	68 a6 77 02 c0       	push   0xc00277a6
c0020ada:	e8 fe 46 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0020adf:	83 c4 10             	add    esp,0x10
c0020ae2:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020ae9:	74 2d                	je     c0020b18 <SATA::open(int, int, void*)+0x10e>
c0020aeb:	83 ec 0c             	sub    esp,0xc
c0020aee:	68 ba 77 02 c0       	push   0xc00277ba
c0020af3:	e8 49 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020af8:	83 c4 10             	add    esp,0x10
c0020afb:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020b02:	75 14                	jne    c0020b18 <SATA::open(int, int, void*)+0x10e>
c0020b04:	e4 60                	in     al,0x60
c0020b06:	3c 1c                	cmp    al,0x1c
c0020b08:	74 04                	je     c0020b0e <SATA::open(int, int, void*)+0x104>
c0020b0a:	3c 5a                	cmp    al,0x5a
c0020b0c:	75 f6                	jne    c0020b04 <SATA::open(int, int, void*)+0xfa>
c0020b0e:	e4 60                	in     al,0x60
c0020b10:	3c 5a                	cmp    al,0x5a
c0020b12:	74 fa                	je     c0020b0e <SATA::open(int, int, void*)+0x104>
c0020b14:	3c 1c                	cmp    al,0x1c
c0020b16:	74 f6                	je     c0020b0e <SATA::open(int, int, void*)+0x104>
c0020b18:	83 ec 0c             	sub    esp,0xc
c0020b1b:	6a 02                	push   0x2
c0020b1d:	e8 7f b2 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0020b22:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020b28:	6a 03                	push   0x3
c0020b2a:	50                   	push   eax
c0020b2b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020b31:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0020b37:	e8 d0 b8 fe ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0020b3c:	83 c4 20             	add    esp,0x20
c0020b3f:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020b46:	74 2d                	je     c0020b75 <SATA::open(int, int, void*)+0x16b>
c0020b48:	83 ec 0c             	sub    esp,0xc
c0020b4b:	68 c7 77 02 c0       	push   0xc00277c7
c0020b50:	e8 ec 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b55:	83 c4 10             	add    esp,0x10
c0020b58:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020b5f:	75 14                	jne    c0020b75 <SATA::open(int, int, void*)+0x16b>
c0020b61:	e4 60                	in     al,0x60
c0020b63:	3c 1c                	cmp    al,0x1c
c0020b65:	74 04                	je     c0020b6b <SATA::open(int, int, void*)+0x161>
c0020b67:	3c 5a                	cmp    al,0x5a
c0020b69:	75 f6                	jne    c0020b61 <SATA::open(int, int, void*)+0x157>
c0020b6b:	e4 60                	in     al,0x60
c0020b6d:	3c 5a                	cmp    al,0x5a
c0020b6f:	74 fa                	je     c0020b6b <SATA::open(int, int, void*)+0x161>
c0020b71:	3c 1c                	cmp    al,0x1c
c0020b73:	74 f6                	je     c0020b6b <SATA::open(int, int, void*)+0x161>
c0020b75:	83 ec 0c             	sub    esp,0xc
c0020b78:	53                   	push   ebx
c0020b79:	e8 90 df fe ff       	call   c000eb0e <PhysicalDisk::startCache()>
c0020b7e:	83 c4 10             	add    esp,0x10
c0020b81:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020b88:	74 2d                	je     c0020bb7 <SATA::open(int, int, void*)+0x1ad>
c0020b8a:	83 ec 0c             	sub    esp,0xc
c0020b8d:	68 d4 77 02 c0       	push   0xc00277d4
c0020b92:	e8 aa 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b97:	83 c4 10             	add    esp,0x10
c0020b9a:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020ba1:	75 14                	jne    c0020bb7 <SATA::open(int, int, void*)+0x1ad>
c0020ba3:	e4 60                	in     al,0x60
c0020ba5:	3c 1c                	cmp    al,0x1c
c0020ba7:	74 04                	je     c0020bad <SATA::open(int, int, void*)+0x1a3>
c0020ba9:	3c 5a                	cmp    al,0x5a
c0020bab:	75 f6                	jne    c0020ba3 <SATA::open(int, int, void*)+0x199>
c0020bad:	e4 60                	in     al,0x60
c0020baf:	3c 5a                	cmp    al,0x5a
c0020bb1:	74 fa                	je     c0020bad <SATA::open(int, int, void*)+0x1a3>
c0020bb3:	3c 1c                	cmp    al,0x1c
c0020bb5:	74 f6                	je     c0020bad <SATA::open(int, int, void*)+0x1a3>
c0020bb7:	83 ec 0c             	sub    esp,0xc
c0020bba:	53                   	push   ebx
c0020bbb:	e8 c6 00 ff ff       	call   c0010c86 <createPartitionsForDisk(PhysicalDisk*)>
c0020bc0:	83 c4 10             	add    esp,0x10
c0020bc3:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020bca:	74 2d                	je     c0020bf9 <SATA::open(int, int, void*)+0x1ef>
c0020bcc:	83 ec 0c             	sub    esp,0xc
c0020bcf:	68 e1 77 02 c0       	push   0xc00277e1
c0020bd4:	e8 68 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020bd9:	83 c4 10             	add    esp,0x10
c0020bdc:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020be3:	75 14                	jne    c0020bf9 <SATA::open(int, int, void*)+0x1ef>
c0020be5:	e4 60                	in     al,0x60
c0020be7:	3c 1c                	cmp    al,0x1c
c0020be9:	74 04                	je     c0020bef <SATA::open(int, int, void*)+0x1e5>
c0020beb:	3c 5a                	cmp    al,0x5a
c0020bed:	75 f6                	jne    c0020be5 <SATA::open(int, int, void*)+0x1db>
c0020bef:	e4 60                	in     al,0x60
c0020bf1:	3c 5a                	cmp    al,0x5a
c0020bf3:	74 fa                	je     c0020bef <SATA::open(int, int, void*)+0x1e5>
c0020bf5:	3c 1c                	cmp    al,0x1c
c0020bf7:	74 f6                	je     c0020bef <SATA::open(int, int, void*)+0x1e5>
c0020bf9:	5a                   	pop    edx
c0020bfa:	31 c0                	xor    eax,eax
c0020bfc:	5b                   	pop    ebx
c0020bfd:	5e                   	pop    esi
c0020bfe:	c3                   	ret    
c0020bff:	90                   	nop

c0020c00 <SATA::SATA()>:
c0020c00:	83 ec 0c             	sub    esp,0xc
c0020c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c07:	83 ec 04             	sub    esp,0x4
c0020c0a:	68 00 02 00 00       	push   0x200
c0020c0f:	68 ee 77 02 c0       	push   0xc00277ee
c0020c14:	50                   	push   eax
c0020c15:	e8 8c de fe ff       	call   c000eaa6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020c1a:	83 c4 10             	add    esp,0x10
c0020c1d:	ba 98 79 02 c0       	mov    edx,0xc0027998
c0020c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c26:	89 10                	mov    DWORD PTR [eax],edx
c0020c28:	90                   	nop
c0020c29:	83 c4 0c             	add    esp,0xc
c0020c2c:	c3                   	ret    
c0020c2d:	90                   	nop

c0020c2e <SATA::access(unsigned long long, int, void*, bool)>:
c0020c2e:	55                   	push   ebp
c0020c2f:	57                   	push   edi
c0020c30:	56                   	push   esi
c0020c31:	53                   	push   ebx
c0020c32:	83 ec 2c             	sub    esp,0x2c
c0020c35:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020c39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020c3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c41:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020c48:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c50:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c58:	75 19                	jne    c0020c73 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020c5a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020c5f:	7e 41                	jle    c0020ca2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c61:	83 ec 0c             	sub    esp,0xc
c0020c64:	68 0d 78 02 c0       	push   0xc002780d
c0020c69:	e8 6f 45 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0020c6e:	83 c4 10             	add    esp,0x10
c0020c71:	eb 2f                	jmp    c0020ca2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c73:	83 ec 0c             	sub    esp,0xc
c0020c76:	68 fe 77 02 c0       	push   0xc00277fe
c0020c7b:	e8 c1 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020c80:	83 c4 10             	add    esp,0x10
c0020c83:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020c8a:	75 ce                	jne    c0020c5a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020c8c:	e4 60                	in     al,0x60
c0020c8e:	3c 1c                	cmp    al,0x1c
c0020c90:	74 04                	je     c0020c96 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020c92:	3c 5a                	cmp    al,0x5a
c0020c94:	75 f6                	jne    c0020c8c <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020c96:	e4 60                	in     al,0x60
c0020c98:	3c 5a                	cmp    al,0x5a
c0020c9a:	74 fa                	je     c0020c96 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020c9c:	3c 1c                	cmp    al,0x1c
c0020c9e:	74 f6                	je     c0020c96 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020ca0:	eb b8                	jmp    c0020c5a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020ca2:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020ca9:	75 29                	jne    c0020cd4 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020cab:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020cb1:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020cb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020cbd:	8d 75 02             	lea    esi,[ebp+0x2]
c0020cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020cc4:	c1 e6 07             	shl    esi,0x7
c0020cc7:	01 c6                	add    esi,eax
c0020cc9:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020cd0:	74 4a                	je     c0020d1c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020cd2:	eb 2f                	jmp    c0020d03 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020cd4:	83 ec 0c             	sub    esp,0xc
c0020cd7:	68 46 78 02 c0       	push   0xc0027846
c0020cdc:	e8 60 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020ce1:	83 c4 10             	add    esp,0x10
c0020ce4:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020ceb:	75 be                	jne    c0020cab <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020ced:	e4 60                	in     al,0x60
c0020cef:	3c 1c                	cmp    al,0x1c
c0020cf1:	74 04                	je     c0020cf7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020cf3:	3c 5a                	cmp    al,0x5a
c0020cf5:	75 f6                	jne    c0020ced <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020cf7:	e4 60                	in     al,0x60
c0020cf9:	3c 5a                	cmp    al,0x5a
c0020cfb:	74 fa                	je     c0020cf7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020cfd:	3c 1c                	cmp    al,0x1c
c0020cff:	74 f6                	je     c0020cf7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d01:	eb a8                	jmp    c0020cab <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020d03:	83 ec 0c             	sub    esp,0xc
c0020d06:	68 55 78 02 c0       	push   0xc0027855
c0020d0b:	e8 31 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020d10:	83 c4 10             	add    esp,0x10
c0020d13:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020d1a:	74 3d                	je     c0020d59 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020d1c:	89 e8                	mov    eax,ebp
c0020d1e:	c1 e0 07             	shl    eax,0x7
c0020d21:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d25:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d2f:	52                   	push   edx
c0020d30:	52                   	push   edx
c0020d31:	56                   	push   esi
c0020d32:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020d38:	e8 fd eb ff ff       	call   c001f93a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d41:	83 c4 10             	add    esp,0x10
c0020d44:	b8 01 00 00 00       	mov    eax,0x1
c0020d49:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d4e:	75 1d                	jne    c0020d6d <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020d50:	e9 c8 04 00 00       	jmp    c002121d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020d55:	3c 5a                	cmp    al,0x5a
c0020d57:	74 0c                	je     c0020d65 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d59:	e4 60                	in     al,0x60
c0020d5b:	3c 1c                	cmp    al,0x1c
c0020d5d:	75 f6                	jne    c0020d55 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020d5f:	eb 04                	jmp    c0020d65 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d61:	3c 1c                	cmp    al,0x1c
c0020d63:	75 b7                	jne    c0020d1c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020d65:	e4 60                	in     al,0x60
c0020d67:	3c 5a                	cmp    al,0x5a
c0020d69:	74 fa                	je     c0020d65 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d6b:	eb f4                	jmp    c0020d61 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020d6d:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020d74:	74 3a                	je     c0020db0 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020d76:	83 ec 0c             	sub    esp,0xc
c0020d79:	68 64 78 02 c0       	push   0xc0027864
c0020d7e:	e8 be 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020d83:	83 c4 10             	add    esp,0x10
c0020d86:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020d8d:	74 0d                	je     c0020d9c <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020d8f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020d94:	74 34                	je     c0020dca <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020d96:	eb 1f                	jmp    c0020db7 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020d98:	3c 1c                	cmp    al,0x1c
c0020d9a:	74 0c                	je     c0020da8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020d9c:	e4 60                	in     al,0x60
c0020d9e:	3c 5a                	cmp    al,0x5a
c0020da0:	75 f6                	jne    c0020d98 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020da2:	eb 04                	jmp    c0020da8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020da4:	3c 1c                	cmp    al,0x1c
c0020da6:	75 e7                	jne    c0020d8f <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020da8:	e4 60                	in     al,0x60
c0020daa:	3c 5a                	cmp    al,0x5a
c0020dac:	74 fa                	je     c0020da8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020dae:	eb f4                	jmp    c0020da4 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020db0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020db5:	74 1c                	je     c0020dd3 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020db7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020dbb:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020dc1:	c1 e1 09             	shl    ecx,0x9
c0020dc4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020dc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020dca:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020dd1:	75 55                	jne    c0020e28 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020dd3:	8d 45 02             	lea    eax,[ebp+0x2]
c0020dd6:	c1 e0 07             	shl    eax,0x7
c0020dd9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020ddd:	8b 38                	mov    edi,DWORD PTR [eax]
c0020ddf:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020de5:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020deb:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020df5:	c1 e0 05             	shl    eax,0x5
c0020df8:	01 c7                	add    edi,eax
c0020dfa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020dfe:	83 e0 01             	and    eax,0x1
c0020e01:	c1 e0 06             	shl    eax,0x6
c0020e04:	88 c2                	mov    dl,al
c0020e06:	8a 07                	mov    al,BYTE PTR [edi]
c0020e08:	83 e0 bf             	and    eax,0xffffffbf
c0020e0b:	09 d0                	or     eax,edx
c0020e0d:	88 07                	mov    BYTE PTR [edi],al
c0020e0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0020e11:	25 e0 ff 00 00       	and    eax,0xffe0
c0020e16:	0d 05 00 01 00       	or     eax,0x10005
c0020e1b:	89 07                	mov    DWORD PTR [edi],eax
c0020e1d:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020e24:	74 4d                	je     c0020e73 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020e26:	eb 32                	jmp    c0020e5a <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020e28:	83 ec 0c             	sub    esp,0xc
c0020e2b:	68 73 78 02 c0       	push   0xc0027873
c0020e30:	e8 0c 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e35:	83 c4 10             	add    esp,0x10
c0020e38:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020e3f:	75 92                	jne    c0020dd3 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e41:	e4 60                	in     al,0x60
c0020e43:	3c 1c                	cmp    al,0x1c
c0020e45:	74 04                	je     c0020e4b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e47:	3c 5a                	cmp    al,0x5a
c0020e49:	75 f6                	jne    c0020e41 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020e4b:	e4 60                	in     al,0x60
c0020e4d:	3c 5a                	cmp    al,0x5a
c0020e4f:	74 fa                	je     c0020e4b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e51:	3c 1c                	cmp    al,0x1c
c0020e53:	74 f6                	je     c0020e4b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e55:	e9 79 ff ff ff       	jmp    c0020dd3 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e5a:	83 ec 0c             	sub    esp,0xc
c0020e5d:	68 82 78 02 c0       	push   0xc0027882
c0020e62:	e8 da 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e67:	83 c4 10             	add    esp,0x10
c0020e6a:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020e71:	74 3b                	je     c0020eae <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020e73:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020e79:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020e7f:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020e85:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020e88:	50                   	push   eax
c0020e89:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020e8d:	83 c0 08             	add    eax,0x8
c0020e90:	c1 e0 04             	shl    eax,0x4
c0020e93:	50                   	push   eax
c0020e94:	6a 00                	push   0x0
c0020e96:	56                   	push   esi
c0020e97:	e8 f8 f7 fd ff       	call   c0000694 <memset>
c0020e9c:	83 c4 10             	add    esp,0x10
c0020e9f:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020ea6:	74 33                	je     c0020edb <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020ea8:	eb 18                	jmp    c0020ec2 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020eaa:	3c 1c                	cmp    al,0x1c
c0020eac:	74 0c                	je     c0020eba <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020eae:	e4 60                	in     al,0x60
c0020eb0:	3c 5a                	cmp    al,0x5a
c0020eb2:	75 f6                	jne    c0020eaa <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020eb4:	eb 04                	jmp    c0020eba <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020eb6:	3c 1c                	cmp    al,0x1c
c0020eb8:	75 b9                	jne    c0020e73 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020eba:	e4 60                	in     al,0x60
c0020ebc:	3c 5a                	cmp    al,0x5a
c0020ebe:	74 fa                	je     c0020eba <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020ec0:	eb f4                	jmp    c0020eb6 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020ec2:	83 ec 0c             	sub    esp,0xc
c0020ec5:	68 91 78 02 c0       	push   0xc0027891
c0020eca:	e8 72 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020ecf:	83 c4 10             	add    esp,0x10
c0020ed2:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020ed9:	74 48                	je     c0020f23 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020edb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020ee1:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020ee7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020eeb:	c1 e0 09             	shl    eax,0x9
c0020eee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ef2:	48                   	dec    eax
c0020ef3:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020ef8:	89 c2                	mov    edx,eax
c0020efa:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020f00:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020f05:	09 d0                	or     eax,edx
c0020f07:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020f0d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020f14:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020f1b:	74 33                	je     c0020f50 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020f1d:	eb 18                	jmp    c0020f37 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020f1f:	3c 1c                	cmp    al,0x1c
c0020f21:	74 0c                	je     c0020f2f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f23:	e4 60                	in     al,0x60
c0020f25:	3c 5a                	cmp    al,0x5a
c0020f27:	75 f6                	jne    c0020f1f <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020f29:	eb 04                	jmp    c0020f2f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f2b:	3c 1c                	cmp    al,0x1c
c0020f2d:	75 ac                	jne    c0020edb <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020f2f:	e4 60                	in     al,0x60
c0020f31:	3c 5a                	cmp    al,0x5a
c0020f33:	74 fa                	je     c0020f2f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f35:	eb f4                	jmp    c0020f2b <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020f37:	83 ec 0c             	sub    esp,0xc
c0020f3a:	68 a0 78 02 c0       	push   0xc00278a0
c0020f3f:	e8 fd 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020f44:	83 c4 10             	add    esp,0x10
c0020f47:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020f4e:	74 63                	je     c0020fb3 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020f50:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020f53:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020f57:	66 25 00 7f          	and    ax,0x7f00
c0020f5b:	66 0d 27 80          	or     ax,0x8027
c0020f5f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020f64:	66 89 06             	mov    WORD PTR [esi],ax
c0020f67:	19 c0                	sbb    eax,eax
c0020f69:	83 e0 f0             	and    eax,0xfffffff0
c0020f6c:	83 c0 35             	add    eax,0x35
c0020f6f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020f72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f76:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020f7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f7e:	c1 e8 10             	shr    eax,0x10
c0020f81:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020f84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f88:	c1 e8 18             	shr    eax,0x18
c0020f8b:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0020f92:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020f95:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020f99:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020f9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fa0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020fa3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020fa7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020fab:	74 33                	je     c0020fe0 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020fad:	eb 18                	jmp    c0020fc7 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020faf:	3c 1c                	cmp    al,0x1c
c0020fb1:	74 0c                	je     c0020fbf <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020fb3:	e4 60                	in     al,0x60
c0020fb5:	3c 5a                	cmp    al,0x5a
c0020fb7:	75 f6                	jne    c0020faf <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020fb9:	eb 04                	jmp    c0020fbf <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020fbb:	3c 1c                	cmp    al,0x1c
c0020fbd:	75 91                	jne    c0020f50 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020fbf:	e4 60                	in     al,0x60
c0020fc1:	3c 5a                	cmp    al,0x5a
c0020fc3:	74 fa                	je     c0020fbf <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020fc5:	eb f4                	jmp    c0020fbb <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020fc7:	83 ec 0c             	sub    esp,0xc
c0020fca:	68 af 78 02 c0       	push   0xc00278af
c0020fcf:	e8 6d 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020fd4:	83 c4 10             	add    esp,0x10
c0020fd7:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0020fde:	74 11                	je     c0020ff1 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020fe0:	89 e8                	mov    eax,ebp
c0020fe2:	31 f6                	xor    esi,esi
c0020fe4:	c1 e0 07             	shl    eax,0x7
c0020fe7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020feb:	eb 21                	jmp    c002100e <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020fed:	3c 1c                	cmp    al,0x1c
c0020fef:	74 0c                	je     c0020ffd <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020ff1:	e4 60                	in     al,0x60
c0020ff3:	3c 5a                	cmp    al,0x5a
c0020ff5:	75 f6                	jne    c0020fed <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020ff7:	eb 04                	jmp    c0020ffd <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020ff9:	3c 1c                	cmp    al,0x1c
c0020ffb:	75 e3                	jne    c0020fe0 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020ffd:	e4 60                	in     al,0x60
c0020fff:	3c 5a                	cmp    al,0x5a
c0021001:	74 fa                	je     c0020ffd <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0021003:	eb f4                	jmp    c0020ff9 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0021005:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002100b:	74 0c                	je     c0021019 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c002100d:	46                   	inc    esi
c002100e:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0021014:	80 e2 88             	and    dl,0x88
c0021017:	75 ec                	jne    c0021005 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0021019:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0021020:	74 3d                	je     c002105f <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0021022:	83 ec 0c             	sub    esp,0xc
c0021025:	68 be 78 02 c0       	push   0xc00278be
c002102a:	e8 12 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002102f:	8b 15 20 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c20
c0021035:	83 c4 10             	add    esp,0x10
c0021038:	f6 c2 80             	test   dl,0x80
c002103b:	74 0e                	je     c002104b <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c002103d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021043:	75 2f                	jne    c0021074 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0021045:	eb 20                	jmp    c0021067 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0021047:	3c 1c                	cmp    al,0x1c
c0021049:	74 0c                	je     c0021057 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002104b:	e4 60                	in     al,0x60
c002104d:	3c 5a                	cmp    al,0x5a
c002104f:	75 f6                	jne    c0021047 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0021051:	eb 04                	jmp    c0021057 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021053:	3c 1c                	cmp    al,0x1c
c0021055:	75 e6                	jne    c002103d <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0021057:	e4 60                	in     al,0x60
c0021059:	3c 5a                	cmp    al,0x5a
c002105b:	74 fa                	je     c0021057 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002105d:	eb f4                	jmp    c0021053 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c002105f:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021065:	75 13                	jne    c002107a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0021067:	83 ec 0c             	sub    esp,0xc
c002106a:	68 ce 78 02 c0       	push   0xc00278ce
c002106f:	e9 d2 00 00 00       	jmp    c0021146 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0021074:	0f ba e2 0b          	bt     edx,0xb
c0021078:	72 25                	jb     c002109f <SATA::access(unsigned long long, int, void*, bool)+0x471>
c002107a:	be 01 00 00 00       	mov    esi,0x1
c002107f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021083:	89 e8                	mov    eax,ebp
c0021085:	d3 e6                	shl    esi,cl
c0021087:	c1 e0 07             	shl    eax,0x7
c002108a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002108e:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0021095:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c002109b:	74 4a                	je     c00210e7 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c002109d:	eb 2f                	jmp    c00210ce <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c002109f:	83 ec 0c             	sub    esp,0xc
c00210a2:	68 dc 78 02 c0       	push   0xc00278dc
c00210a7:	e8 95 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00210ac:	83 c4 10             	add    esp,0x10
c00210af:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00210b6:	75 c2                	jne    c002107a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00210b8:	e4 60                	in     al,0x60
c00210ba:	3c 5a                	cmp    al,0x5a
c00210bc:	74 04                	je     c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210be:	3c 1c                	cmp    al,0x1c
c00210c0:	75 f6                	jne    c00210b8 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c00210c2:	e4 60                	in     al,0x60
c00210c4:	3c 5a                	cmp    al,0x5a
c00210c6:	74 fa                	je     c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210c8:	3c 1c                	cmp    al,0x1c
c00210ca:	74 f6                	je     c00210c2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210cc:	eb ac                	jmp    c002107a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00210ce:	83 ec 0c             	sub    esp,0xc
c00210d1:	68 ec 78 02 c0       	push   0xc00278ec
c00210d6:	e8 66 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00210db:	83 c4 10             	add    esp,0x10
c00210de:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00210e5:	74 0f                	je     c00210f6 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00210e7:	89 e8                	mov    eax,ebp
c00210e9:	c1 e0 07             	shl    eax,0x7
c00210ec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00210f0:	eb 24                	jmp    c0021116 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c00210f2:	3c 1c                	cmp    al,0x1c
c00210f4:	74 0c                	je     c0021102 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00210f6:	e4 60                	in     al,0x60
c00210f8:	3c 5a                	cmp    al,0x5a
c00210fa:	75 f6                	jne    c00210f2 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c00210fc:	eb 04                	jmp    c0021102 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00210fe:	3c 1c                	cmp    al,0x1c
c0021100:	75 e5                	jne    c00210e7 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0021102:	e4 60                	in     al,0x60
c0021104:	3c 5a                	cmp    al,0x5a
c0021106:	74 fa                	je     c0021102 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0021108:	eb f4                	jmp    c00210fe <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002110a:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0021110:	0f ba e2 1e          	bt     edx,0x1e
c0021114:	72 28                	jb     c002113e <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0021116:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c002111c:	85 d6                	test   esi,edx
c002111e:	75 ea                	jne    c002110a <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0021120:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0021127:	75 2f                	jne    c0021158 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0021129:	89 e8                	mov    eax,ebp
c002112b:	c1 e0 07             	shl    eax,0x7
c002112e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021132:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021138:	0f ba e0 1e          	bt     eax,0x1e
c002113c:	73 49                	jae    c0021187 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c002113e:	83 ec 0c             	sub    esp,0xc
c0021141:	68 fc 78 02 c0       	push   0xc00278fc
c0021146:	e8 b0 bf fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c002114b:	83 c4 10             	add    esp,0x10
c002114e:	b8 01 00 00 00       	mov    eax,0x1
c0021153:	e9 c5 00 00 00       	jmp    c002121d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0021158:	83 ec 0c             	sub    esp,0xc
c002115b:	68 0d 79 02 c0       	push   0xc002790d
c0021160:	e8 dc 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021165:	83 c4 10             	add    esp,0x10
c0021168:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c002116f:	75 b8                	jne    c0021129 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0021171:	e4 60                	in     al,0x60
c0021173:	3c 5a                	cmp    al,0x5a
c0021175:	74 04                	je     c002117b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021177:	3c 1c                	cmp    al,0x1c
c0021179:	75 f6                	jne    c0021171 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c002117b:	e4 60                	in     al,0x60
c002117d:	3c 5a                	cmp    al,0x5a
c002117f:	74 fa                	je     c002117b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021181:	3c 1c                	cmp    al,0x1c
c0021183:	74 f6                	je     c002117b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021185:	eb a2                	jmp    c0021129 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0021187:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c002118e:	74 3a                	je     c00211ca <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0021190:	83 ec 0c             	sub    esp,0xc
c0021193:	68 1d 79 02 c0       	push   0xc002791d
c0021198:	e8 a4 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002119d:	83 c4 10             	add    esp,0x10
c00211a0:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00211a7:	74 0d                	je     c00211b6 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00211a9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00211ae:	75 31                	jne    c00211e1 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00211b0:	eb 1f                	jmp    c00211d1 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00211b2:	3c 1c                	cmp    al,0x1c
c00211b4:	74 0c                	je     c00211c2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211b6:	e4 60                	in     al,0x60
c00211b8:	3c 5a                	cmp    al,0x5a
c00211ba:	75 f6                	jne    c00211b2 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00211bc:	eb 04                	jmp    c00211c2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211be:	3c 1c                	cmp    al,0x1c
c00211c0:	75 e7                	jne    c00211a9 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c00211c2:	e4 60                	in     al,0x60
c00211c4:	3c 5a                	cmp    al,0x5a
c00211c6:	74 fa                	je     c00211c2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211c8:	eb f4                	jmp    c00211be <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00211ca:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00211cf:	75 19                	jne    c00211ea <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00211d1:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00211d7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00211db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00211df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211e1:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c00211e8:	75 04                	jne    c00211ee <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00211ea:	31 c0                	xor    eax,eax
c00211ec:	eb 2f                	jmp    c002121d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00211ee:	83 ec 0c             	sub    esp,0xc
c00211f1:	68 2d 79 02 c0       	push   0xc002792d
c00211f6:	e8 46 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00211fb:	83 c4 10             	add    esp,0x10
c00211fe:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0021205:	75 e3                	jne    c00211ea <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0021207:	e4 60                	in     al,0x60
c0021209:	3c 1c                	cmp    al,0x1c
c002120b:	74 04                	je     c0021211 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002120d:	3c 5a                	cmp    al,0x5a
c002120f:	75 f6                	jne    c0021207 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0021211:	e4 60                	in     al,0x60
c0021213:	3c 5a                	cmp    al,0x5a
c0021215:	74 fa                	je     c0021211 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0021217:	3c 1c                	cmp    al,0x1c
c0021219:	74 f6                	je     c0021211 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002121b:	eb cd                	jmp    c00211ea <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002121d:	83 c4 2c             	add    esp,0x2c
c0021220:	5b                   	pop    ebx
c0021221:	5e                   	pop    esi
c0021222:	5f                   	pop    edi
c0021223:	5d                   	pop    ebp
c0021224:	c3                   	ret    
c0021225:	90                   	nop

c0021226 <SATA::read(unsigned long long, int, void*)>:
c0021226:	55                   	push   ebp
c0021227:	57                   	push   edi
c0021228:	56                   	push   esi
c0021229:	53                   	push   ebx
c002122a:	83 ec 0c             	sub    esp,0xc
c002122d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021231:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021235:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021239:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002123d:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0021244:	74 2d                	je     c0021273 <SATA::read(unsigned long long, int, void*)+0x4d>
c0021246:	83 ec 0c             	sub    esp,0xc
c0021249:	68 3d 79 02 c0       	push   0xc002793d
c002124e:	e8 ee 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021253:	83 c4 10             	add    esp,0x10
c0021256:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c002125d:	75 14                	jne    c0021273 <SATA::read(unsigned long long, int, void*)+0x4d>
c002125f:	e4 60                	in     al,0x60
c0021261:	3c 1c                	cmp    al,0x1c
c0021263:	74 04                	je     c0021269 <SATA::read(unsigned long long, int, void*)+0x43>
c0021265:	3c 5a                	cmp    al,0x5a
c0021267:	75 f6                	jne    c002125f <SATA::read(unsigned long long, int, void*)+0x39>
c0021269:	e4 60                	in     al,0x60
c002126b:	3c 5a                	cmp    al,0x5a
c002126d:	74 fa                	je     c0021269 <SATA::read(unsigned long long, int, void*)+0x43>
c002126f:	3c 1c                	cmp    al,0x1c
c0021271:	74 f6                	je     c0021269 <SATA::read(unsigned long long, int, void*)+0x43>
c0021273:	8d 53 ff             	lea    edx,[ebx-0x1]
c0021276:	b8 04 00 00 00       	mov    eax,0x4
c002127b:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021281:	0f 87 96 00 00 00    	ja     c002131d <SATA::read(unsigned long long, int, void*)+0xf7>
c0021287:	b8 06 00 00 00       	mov    eax,0x6
c002128c:	85 ed                	test   ebp,ebp
c002128e:	0f 84 89 00 00 00    	je     c002131d <SATA::read(unsigned long long, int, void*)+0xf7>
c0021294:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c002129b:	74 2d                	je     c00212ca <SATA::read(unsigned long long, int, void*)+0xa4>
c002129d:	83 ec 0c             	sub    esp,0xc
c00212a0:	68 4a 79 02 c0       	push   0xc002794a
c00212a5:	e8 97 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00212aa:	83 c4 10             	add    esp,0x10
c00212ad:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00212b4:	75 14                	jne    c00212ca <SATA::read(unsigned long long, int, void*)+0xa4>
c00212b6:	e4 60                	in     al,0x60
c00212b8:	3c 5a                	cmp    al,0x5a
c00212ba:	74 04                	je     c00212c0 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212bc:	3c 1c                	cmp    al,0x1c
c00212be:	75 f6                	jne    c00212b6 <SATA::read(unsigned long long, int, void*)+0x90>
c00212c0:	e4 60                	in     al,0x60
c00212c2:	3c 5a                	cmp    al,0x5a
c00212c4:	74 fa                	je     c00212c0 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212c6:	3c 1c                	cmp    al,0x1c
c00212c8:	74 f6                	je     c00212c0 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212ca:	50                   	push   eax
c00212cb:	50                   	push   eax
c00212cc:	6a 00                	push   0x0
c00212ce:	55                   	push   ebp
c00212cf:	53                   	push   ebx
c00212d0:	57                   	push   edi
c00212d1:	56                   	push   esi
c00212d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00212d6:	e8 53 f9 ff ff       	call   c0020c2e <SATA::access(unsigned long long, int, void*, bool)>
c00212db:	83 c4 20             	add    esp,0x20
c00212de:	89 c3                	mov    ebx,eax
c00212e0:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c00212e7:	74 2d                	je     c0021316 <SATA::read(unsigned long long, int, void*)+0xf0>
c00212e9:	83 ec 0c             	sub    esp,0xc
c00212ec:	68 57 79 02 c0       	push   0xc0027957
c00212f1:	e8 4b 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00212f6:	83 c4 10             	add    esp,0x10
c00212f9:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c0021300:	75 14                	jne    c0021316 <SATA::read(unsigned long long, int, void*)+0xf0>
c0021302:	e4 60                	in     al,0x60
c0021304:	3c 5a                	cmp    al,0x5a
c0021306:	74 04                	je     c002130c <SATA::read(unsigned long long, int, void*)+0xe6>
c0021308:	3c 1c                	cmp    al,0x1c
c002130a:	75 f6                	jne    c0021302 <SATA::read(unsigned long long, int, void*)+0xdc>
c002130c:	e4 60                	in     al,0x60
c002130e:	3c 5a                	cmp    al,0x5a
c0021310:	74 fa                	je     c002130c <SATA::read(unsigned long long, int, void*)+0xe6>
c0021312:	3c 1c                	cmp    al,0x1c
c0021314:	74 f6                	je     c002130c <SATA::read(unsigned long long, int, void*)+0xe6>
c0021316:	31 c0                	xor    eax,eax
c0021318:	85 db                	test   ebx,ebx
c002131a:	0f 95 c0             	setne  al
c002131d:	83 c4 0c             	add    esp,0xc
c0021320:	5b                   	pop    ebx
c0021321:	5e                   	pop    esi
c0021322:	5f                   	pop    edi
c0021323:	5d                   	pop    ebp
c0021324:	c3                   	ret    
c0021325:	90                   	nop

c0021326 <SATA::write(unsigned long long, int, void*)>:
c0021326:	55                   	push   ebp
c0021327:	57                   	push   edi
c0021328:	56                   	push   esi
c0021329:	53                   	push   ebx
c002132a:	83 ec 1c             	sub    esp,0x1c
c002132d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021331:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021335:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021339:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002133d:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c0021344:	74 2d                	je     c0021373 <SATA::write(unsigned long long, int, void*)+0x4d>
c0021346:	83 ec 0c             	sub    esp,0xc
c0021349:	68 64 79 02 c0       	push   0xc0027964
c002134e:	e8 ee 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021353:	83 c4 10             	add    esp,0x10
c0021356:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c002135d:	75 14                	jne    c0021373 <SATA::write(unsigned long long, int, void*)+0x4d>
c002135f:	e4 60                	in     al,0x60
c0021361:	3c 1c                	cmp    al,0x1c
c0021363:	74 04                	je     c0021369 <SATA::write(unsigned long long, int, void*)+0x43>
c0021365:	3c 5a                	cmp    al,0x5a
c0021367:	75 f6                	jne    c002135f <SATA::write(unsigned long long, int, void*)+0x39>
c0021369:	e4 60                	in     al,0x60
c002136b:	3c 5a                	cmp    al,0x5a
c002136d:	74 fa                	je     c0021369 <SATA::write(unsigned long long, int, void*)+0x43>
c002136f:	3c 1c                	cmp    al,0x1c
c0021371:	74 f6                	je     c0021369 <SATA::write(unsigned long long, int, void*)+0x43>
c0021373:	8d 55 ff             	lea    edx,[ebp-0x1]
c0021376:	b8 04 00 00 00       	mov    eax,0x4
c002137b:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021381:	0f 87 bd 00 00 00    	ja     c0021444 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021387:	b8 06 00 00 00       	mov    eax,0x6
c002138c:	85 db                	test   ebx,ebx
c002138e:	0f 84 b0 00 00 00    	je     c0021444 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021394:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c002139b:	74 2d                	je     c00213ca <SATA::write(unsigned long long, int, void*)+0xa4>
c002139d:	83 ec 0c             	sub    esp,0xc
c00213a0:	68 72 79 02 c0       	push   0xc0027972
c00213a5:	e8 97 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00213aa:	83 c4 10             	add    esp,0x10
c00213ad:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c00213b4:	75 14                	jne    c00213ca <SATA::write(unsigned long long, int, void*)+0xa4>
c00213b6:	e4 60                	in     al,0x60
c00213b8:	3c 1c                	cmp    al,0x1c
c00213ba:	74 04                	je     c00213c0 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213bc:	3c 5a                	cmp    al,0x5a
c00213be:	75 f6                	jne    c00213b6 <SATA::write(unsigned long long, int, void*)+0x90>
c00213c0:	e4 60                	in     al,0x60
c00213c2:	3c 5a                	cmp    al,0x5a
c00213c4:	74 fa                	je     c00213c0 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213c6:	3c 1c                	cmp    al,0x1c
c00213c8:	74 f6                	je     c00213c0 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213ca:	c1 e5 09             	shl    ebp,0x9
c00213cd:	01 dd                	add    ebp,ebx
c00213cf:	89 f0                	mov    eax,esi
c00213d1:	89 fa                	mov    edx,edi
c00213d3:	83 c0 01             	add    eax,0x1
c00213d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213da:	83 d2 00             	adc    edx,0x0
c00213dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213e1:	50                   	push   eax
c00213e2:	50                   	push   eax
c00213e3:	6a 01                	push   0x1
c00213e5:	53                   	push   ebx
c00213e6:	81 c3 00 02 00 00    	add    ebx,0x200
c00213ec:	6a 01                	push   0x1
c00213ee:	57                   	push   edi
c00213ef:	56                   	push   esi
c00213f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00213f4:	e8 35 f8 ff ff       	call   c0020c2e <SATA::access(unsigned long long, int, void*, bool)>
c00213f9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00213fd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0021401:	83 c4 20             	add    esp,0x20
c0021404:	39 dd                	cmp    ebp,ebx
c0021406:	75 c7                	jne    c00213cf <SATA::write(unsigned long long, int, void*)+0xa9>
c0021408:	f6 05 21 8c 02 c0 08 	test   BYTE PTR ds:0xc0028c21,0x8
c002140f:	75 04                	jne    c0021415 <SATA::write(unsigned long long, int, void*)+0xef>
c0021411:	31 c0                	xor    eax,eax
c0021413:	eb 2f                	jmp    c0021444 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021415:	83 ec 0c             	sub    esp,0xc
c0021418:	68 80 79 02 c0       	push   0xc0027980
c002141d:	e8 1f 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021422:	83 c4 10             	add    esp,0x10
c0021425:	f6 05 20 8c 02 c0 80 	test   BYTE PTR ds:0xc0028c20,0x80
c002142c:	75 e3                	jne    c0021411 <SATA::write(unsigned long long, int, void*)+0xeb>
c002142e:	e4 60                	in     al,0x60
c0021430:	3c 5a                	cmp    al,0x5a
c0021432:	74 04                	je     c0021438 <SATA::write(unsigned long long, int, void*)+0x112>
c0021434:	3c 1c                	cmp    al,0x1c
c0021436:	75 f6                	jne    c002142e <SATA::write(unsigned long long, int, void*)+0x108>
c0021438:	e4 60                	in     al,0x60
c002143a:	3c 5a                	cmp    al,0x5a
c002143c:	74 fa                	je     c0021438 <SATA::write(unsigned long long, int, void*)+0x112>
c002143e:	3c 1c                	cmp    al,0x1c
c0021440:	74 f6                	je     c0021438 <SATA::write(unsigned long long, int, void*)+0x112>
c0021442:	eb cd                	jmp    c0021411 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021444:	83 c4 1c             	add    esp,0x1c
c0021447:	5b                   	pop    ebx
c0021448:	5e                   	pop    esi
c0021449:	5f                   	pop    edi
c002144a:	5d                   	pop    ebp
c002144b:	c3                   	ret    

c002144c <SATAPI::write(unsigned long long, int, void*)>:
c002144c:	b8 03 00 00 00       	mov    eax,0x3
c0021451:	c3                   	ret    

c0021452 <SATAPI::close(int, int, void*)>:
c0021452:	83 ec 0c             	sub    esp,0xc
c0021455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021459:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002145f:	85 c0                	test   eax,eax
c0021461:	74 0c                	je     c002146f <SATAPI::close(int, int, void*)+0x1d>
c0021463:	83 ec 0c             	sub    esp,0xc
c0021466:	8b 10                	mov    edx,DWORD PTR [eax]
c0021468:	50                   	push   eax
c0021469:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002146c:	83 c4 10             	add    esp,0x10
c002146f:	31 c0                	xor    eax,eax
c0021471:	83 c4 0c             	add    esp,0xc
c0021474:	c3                   	ret    
c0021475:	90                   	nop

c0021476 <SATAPI::SATAPI()>:
c0021476:	83 ec 0c             	sub    esp,0xc
c0021479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147d:	83 ec 04             	sub    esp,0x4
c0021480:	68 00 08 00 00       	push   0x800
c0021485:	68 c8 79 02 c0       	push   0xc00279c8
c002148a:	50                   	push   eax
c002148b:	e8 16 d6 fe ff       	call   c000eaa6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021490:	83 c4 10             	add    esp,0x10
c0021493:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0021498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149c:	89 10                	mov    DWORD PTR [eax],edx
c002149e:	90                   	nop
c002149f:	83 c4 0c             	add    esp,0xc
c00214a2:	c3                   	ret    
c00214a3:	90                   	nop

c00214a4 <SATAPI::diskRemoved()>:
c00214a4:	c3                   	ret    
c00214a5:	90                   	nop

c00214a6 <SATAPI::diskInserted()>:
c00214a6:	83 ec 18             	sub    esp,0x18
c00214a9:	68 d4 79 02 c0       	push   0xc00279d4
c00214ae:	e8 48 bc fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00214b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214b7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00214be:	83 c4 1c             	add    esp,0x1c
c00214c1:	c3                   	ret    

c00214c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00214c2:	55                   	push   ebp
c00214c3:	57                   	push   edi
c00214c4:	56                   	push   esi
c00214c5:	53                   	push   ebx
c00214c6:	83 ec 38             	sub    esp,0x38
c00214c9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00214cd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00214d1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00214d5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00214d9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00214dd:	68 ec 79 02 c0       	push   0xc00279ec
c00214e2:	e8 14 bc fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00214e7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00214ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00214f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214f7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00214fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021501:	c1 e0 07             	shl    eax,0x7
c0021504:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0021508:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002150c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021516:	5a                   	pop    edx
c0021517:	59                   	pop    ecx
c0021518:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002151c:	8d 58 02             	lea    ebx,[eax+0x2]
c002151f:	c1 e3 07             	shl    ebx,0x7
c0021522:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0021526:	53                   	push   ebx
c0021527:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002152d:	e8 08 e4 ff ff       	call   c001f93a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021532:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021536:	83 c4 10             	add    esp,0x10
c0021539:	b8 01 00 00 00       	mov    eax,0x1
c002153e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021543:	0f 84 ff 01 00 00    	je     c0021748 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0021549:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021551:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021557:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002155d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021561:	c1 e1 05             	shl    ecx,0x5
c0021564:	01 c8                	add    eax,ecx
c0021566:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021568:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002156e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021574:	89 08                	mov    DWORD PTR [eax],ecx
c0021576:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002157c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021582:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021588:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002158b:	8d 7b 40             	lea    edi,[ebx+0x40]
c002158e:	50                   	push   eax
c002158f:	68 90 00 00 00       	push   0x90
c0021594:	6a 00                	push   0x0
c0021596:	53                   	push   ebx
c0021597:	e8 f8 f0 fd ff       	call   c0000694 <memset>
c002159c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00215a0:	b9 0c 00 00 00       	mov    ecx,0xc
c00215a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215a7:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00215ad:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00215b1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00215b7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00215bb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00215bf:	48                   	dec    eax
c00215c0:	25 ff ff 3f 00       	and    eax,0x3fffff
c00215c5:	89 c1                	mov    ecx,eax
c00215c7:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00215cd:	25 00 00 c0 ff       	and    eax,0xffc00000
c00215d2:	09 c8                	or     eax,ecx
c00215d4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00215da:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00215dd:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00215e4:	66 25 00 7f          	and    ax,0x7f00
c00215e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00215ec:	66 0d 27 80          	or     ax,0x8027
c00215f0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00215f4:	66 89 03             	mov    WORD PTR [ebx],ax
c00215f7:	89 d0                	mov    eax,edx
c00215f9:	c1 ea 18             	shr    edx,0x18
c00215fc:	c1 e8 10             	shr    eax,0x10
c00215ff:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0021602:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021605:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021609:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002160c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021610:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0021613:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021617:	83 c4 10             	add    esp,0x10
c002161a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002161e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021622:	31 c0                	xor    eax,eax
c0021624:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002162a:	80 e1 88             	and    cl,0x88
c002162d:	74 0a                	je     c0021639 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c002162f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021634:	74 0a                	je     c0021640 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0021636:	40                   	inc    eax
c0021637:	eb eb                	jmp    c0021624 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0021639:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002163e:	75 0a                	jne    c002164a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0021640:	83 ec 0c             	sub    esp,0xc
c0021643:	68 06 7a 02 c0       	push   0xc0027a06
c0021648:	eb 43                	jmp    c002168d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002164a:	be 01 00 00 00       	mov    esi,0x1
c002164f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021653:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021657:	d3 e6                	shl    esi,cl
c0021659:	c1 e7 07             	shl    edi,0x7
c002165c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021662:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0021667:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002166b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021671:	85 c6                	test   esi,eax
c0021673:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0021679:	0f 84 96 00 00 00    	je     c0021715 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c002167f:	0f ba e0 1e          	bt     eax,0x1e
c0021683:	73 1a                	jae    c002169f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0021685:	83 ec 0c             	sub    esp,0xc
c0021688:	68 1b 7a 02 c0       	push   0xc0027a1b
c002168d:	e8 69 ba fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0021692:	83 c4 10             	add    esp,0x10
c0021695:	b8 01 00 00 00       	mov    eax,0x1
c002169a:	e9 a9 00 00 00       	jmp    c0021748 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c002169f:	83 fb 0d             	cmp    ebx,0xd
c00216a2:	77 12                	ja     c00216b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c00216a4:	83 ec 0c             	sub    esp,0xc
c00216a7:	68 c8 00 00 00       	push   0xc8
c00216ac:	e8 83 7b ff ff       	call   c0019234 <milliTenthSleep(unsigned int)>
c00216b1:	83 c4 10             	add    esp,0x10
c00216b4:	eb 2a                	jmp    c00216e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00216b6:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c00216bc:	83 f8 0d             	cmp    eax,0xd
c00216bf:	77 0a                	ja     c00216cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c00216c1:	83 ec 0c             	sub    esp,0xc
c00216c4:	68 58 02 00 00       	push   0x258
c00216c9:	eb 28                	jmp    c00216f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00216cb:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c00216d1:	83 f8 0d             	cmp    eax,0xd
c00216d4:	77 0a                	ja     c00216e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00216d6:	83 ec 0c             	sub    esp,0xc
c00216d9:	68 dc 05 00 00       	push   0x5dc
c00216de:	eb 13                	jmp    c00216f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00216e0:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00216e6:	83 f8 0d             	cmp    eax,0xd
c00216e9:	77 10                	ja     c00216fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c00216eb:	83 ec 0c             	sub    esp,0xc
c00216ee:	68 c4 09 00 00       	push   0x9c4
c00216f3:	e8 3c 7b ff ff       	call   c0019234 <milliTenthSleep(unsigned int)>
c00216f8:	83 c4 10             	add    esp,0x10
c00216fb:	43                   	inc    ebx
c00216fc:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0021702:	0f 85 63 ff ff ff    	jne    c002166b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0021708:	83 ec 0c             	sub    esp,0xc
c002170b:	68 2e 7a 02 c0       	push   0xc0027a2e
c0021710:	e9 78 ff ff ff       	jmp    c002168d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021715:	0f ba e0 1e          	bt     eax,0x1e
c0021719:	73 0d                	jae    c0021728 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c002171b:	83 ec 0c             	sub    esp,0xc
c002171e:	68 42 7a 02 c0       	push   0xc0027a42
c0021723:	e9 65 ff ff ff       	jmp    c002168d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021728:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002172d:	74 17                	je     c0021746 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c002172f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021734:	74 10                	je     c0021746 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0021736:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002173c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021740:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021744:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021746:	31 c0                	xor    eax,eax
c0021748:	83 c4 2c             	add    esp,0x2c
c002174b:	5b                   	pop    ebx
c002174c:	5e                   	pop    esi
c002174d:	5f                   	pop    edi
c002174e:	5d                   	pop    ebp
c002174f:	c3                   	ret    

c0021750 <SATAPI::eject()>:
c0021750:	57                   	push   edi
c0021751:	b9 03 00 00 00       	mov    ecx,0x3
c0021756:	83 ec 18             	sub    esp,0x18
c0021759:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002175d:	fc                   	cld    
c002175e:	31 c0                	xor    eax,eax
c0021760:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021762:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021767:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002176c:	50                   	push   eax
c002176d:	6a 00                	push   0x0
c002176f:	6a 00                	push   0x0
c0021771:	6a 00                	push   0x0
c0021773:	6a 00                	push   0x0
c0021775:	6a 02                	push   0x2
c0021777:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002177b:	50                   	push   eax
c002177c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021780:	e8 3d fd ff ff       	call   c00214c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021785:	31 c0                	xor    eax,eax
c0021787:	83 c4 38             	add    esp,0x38
c002178a:	5f                   	pop    edi
c002178b:	c3                   	ret    

c002178c <SATAPI::detectMedia()>:
c002178c:	56                   	push   esi
c002178d:	53                   	push   ebx
c002178e:	83 ec 30             	sub    esp,0x30
c0021791:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021795:	68 57 7a 02 c0       	push   0xc0027a57
c002179a:	e8 5c b9 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c002179f:	83 c4 0c             	add    esp,0xc
c00217a2:	6a 0c                	push   0xc
c00217a4:	6a 00                	push   0x0
c00217a6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00217aa:	56                   	push   esi
c00217ab:	e8 e4 ee fd ff       	call   c0000694 <memset>
c00217b0:	83 c4 0c             	add    esp,0xc
c00217b3:	6a 00                	push   0x0
c00217b5:	6a 00                	push   0x0
c00217b7:	6a 00                	push   0x0
c00217b9:	6a 00                	push   0x0
c00217bb:	6a 00                	push   0x0
c00217bd:	56                   	push   esi
c00217be:	53                   	push   ebx
c00217bf:	e8 fe fc ff ff       	call   c00214c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00217c4:	83 c4 20             	add    esp,0x20
c00217c7:	48                   	dec    eax
c00217c8:	74 34                	je     c00217fe <SATAPI::detectMedia()+0x72>
c00217ca:	50                   	push   eax
c00217cb:	6a 0c                	push   0xc
c00217cd:	6a 00                	push   0x0
c00217cf:	56                   	push   esi
c00217d0:	e8 bf ee fd ff       	call   c0000694 <memset>
c00217d5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00217da:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00217df:	83 c4 0c             	add    esp,0xc
c00217e2:	6a 01                	push   0x1
c00217e4:	8d 44 24 16          	lea    eax,[esp+0x16]
c00217e8:	50                   	push   eax
c00217e9:	6a 00                	push   0x0
c00217eb:	6a 00                	push   0x0
c00217ed:	6a 12                	push   0x12
c00217ef:	56                   	push   esi
c00217f0:	53                   	push   ebx
c00217f1:	e8 cc fc ff ff       	call   c00214c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00217f6:	83 c4 20             	add    esp,0x20
c00217f9:	48                   	dec    eax
c00217fa:	75 39                	jne    c0021835 <SATAPI::detectMedia()+0xa9>
c00217fc:	eb 1e                	jmp    c002181c <SATAPI::detectMedia()+0x90>
c00217fe:	83 ec 0c             	sub    esp,0xc
c0021801:	68 6b 7a 02 c0       	push   0xc0027a6b
c0021806:	e8 f0 b8 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c002180b:	83 c4 10             	add    esp,0x10
c002180e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021815:	74 b3                	je     c00217ca <SATAPI::detectMedia()+0x3e>
c0021817:	e9 93 00 00 00       	jmp    c00218af <SATAPI::detectMedia()+0x123>
c002181c:	83 ec 0c             	sub    esp,0xc
c002181f:	68 75 7a 02 c0       	push   0xc0027a75
c0021824:	e8 d2 b8 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0021829:	83 c4 10             	add    esp,0x10
c002182c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021833:	75 7a                	jne    c00218af <SATAPI::detectMedia()+0x123>
c0021835:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021839:	83 e0 7f             	and    eax,0x7f
c002183c:	3c 70                	cmp    al,0x70
c002183e:	74 25                	je     c0021865 <SATAPI::detectMedia()+0xd9>
c0021840:	83 ec 0c             	sub    esp,0xc
c0021843:	68 7f 7a 02 c0       	push   0xc0027a7f
c0021848:	e8 ae b8 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c002184d:	83 c4 10             	add    esp,0x10
c0021850:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021857:	75 0c                	jne    c0021865 <SATAPI::detectMedia()+0xd9>
c0021859:	83 ec 0c             	sub    esp,0xc
c002185c:	53                   	push   ebx
c002185d:	e8 44 fc ff ff       	call   c00214a6 <SATAPI::diskInserted()>
c0021862:	83 c4 10             	add    esp,0x10
c0021865:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021869:	83 e0 0f             	and    eax,0xf
c002186c:	3c 02                	cmp    al,0x2
c002186e:	75 16                	jne    c0021886 <SATAPI::detectMedia()+0xfa>
c0021870:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021875:	75 38                	jne    c00218af <SATAPI::detectMedia()+0x123>
c0021877:	83 ec 0c             	sub    esp,0xc
c002187a:	68 88 7a 02 c0       	push   0xc0027a88
c002187f:	e8 77 b8 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0021884:	eb 26                	jmp    c00218ac <SATAPI::detectMedia()+0x120>
c0021886:	84 c0                	test   al,al
c0021888:	75 25                	jne    c00218af <SATAPI::detectMedia()+0x123>
c002188a:	83 ec 0c             	sub    esp,0xc
c002188d:	68 91 7a 02 c0       	push   0xc0027a91
c0021892:	e8 64 b8 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0021897:	83 c4 10             	add    esp,0x10
c002189a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00218a1:	75 0c                	jne    c00218af <SATAPI::detectMedia()+0x123>
c00218a3:	83 ec 0c             	sub    esp,0xc
c00218a6:	53                   	push   ebx
c00218a7:	e8 fa fb ff ff       	call   c00214a6 <SATAPI::diskInserted()>
c00218ac:	83 c4 10             	add    esp,0x10
c00218af:	83 c4 24             	add    esp,0x24
c00218b2:	5b                   	pop    ebx
c00218b3:	5e                   	pop    esi
c00218b4:	c3                   	ret    
c00218b5:	90                   	nop

c00218b6 <SATAPI::open(int, int, void*)>:
c00218b6:	56                   	push   esi
c00218b7:	53                   	push   ebx
c00218b8:	51                   	push   ecx
c00218b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00218c1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00218cb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00218d1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00218db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218df:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00218e9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00218ef:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00218f6:	e8 a3 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c00218fb:	89 c6                	mov    esi,eax
c00218fd:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021903:	81 c6 00 10 00 00    	add    esi,0x1000
c0021909:	e8 90 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c002190e:	39 c6                	cmp    esi,eax
c0021910:	74 10                	je     c0021922 <SATAPI::open(int, int, void*)+0x6c>
c0021912:	83 ec 0c             	sub    esp,0xc
c0021915:	68 9b 7a 02 c0       	push   0xc0027a9b
c002191a:	e8 be 38 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c002191f:	83 c4 10             	add    esp,0x10
c0021922:	83 ec 0c             	sub    esp,0xc
c0021925:	6a 02                	push   0x2
c0021927:	e8 75 a4 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c002192c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021932:	6a 03                	push   0x3
c0021934:	50                   	push   eax
c0021935:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002193b:	ff 35 34 8d 02 c0    	push   DWORD PTR ds:0xc0028d34
c0021941:	e8 c6 aa fe ff       	call   c000c40c <VAS::mapPage(unsigned long, unsigned long, int)>
c0021946:	83 c4 14             	add    esp,0x14
c0021949:	68 74 01 00 00       	push   0x174
c002194e:	e8 94 84 fe ff       	call   c0009de7 <malloc>
c0021953:	83 c4 0c             	add    esp,0xc
c0021956:	89 c6                	mov    esi,eax
c0021958:	6a 00                	push   0x0
c002195a:	68 ff ff ff 7f       	push   0x7fffffff
c002195f:	6a 00                	push   0x0
c0021961:	6a 00                	push   0x0
c0021963:	53                   	push   ebx
c0021964:	68 b1 7a 02 c0       	push   0xc0027ab1
c0021969:	50                   	push   eax
c002196a:	e8 a1 ee fe ff       	call   c0010810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002196f:	83 c4 14             	add    esp,0x14
c0021972:	56                   	push   esi
c0021973:	e8 4e ef fe ff       	call   c00108c6 <LogicalDisk::assignDriveLetter()>
c0021978:	5a                   	pop    edx
c0021979:	0f be c0             	movsx  eax,al
c002197c:	59                   	pop    ecx
c002197d:	50                   	push   eax
c002197e:	68 47 77 02 c0       	push   0xc0027747
c0021983:	e8 73 b7 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0021988:	58                   	pop    eax
c0021989:	5a                   	pop    edx
c002198a:	56                   	push   esi
c002198b:	53                   	push   ebx
c002198c:	e8 dd cc fe ff       	call   c000e66e <Device::addChild(Device*)>
c0021991:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021997:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002199a:	e8 6f d1 fe ff       	call   c000eb0e <PhysicalDisk::startCache()>
c002199f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00219a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219a9:	e8 de fd ff ff       	call   c002178c <SATAPI::detectMedia()>
c00219ae:	83 c4 14             	add    esp,0x14
c00219b1:	31 c0                	xor    eax,eax
c00219b3:	5b                   	pop    ebx
c00219b4:	5e                   	pop    esi
c00219b5:	c3                   	ret    

c00219b6 <SATAPI::read(unsigned long long, int, void*)>:
c00219b6:	55                   	push   ebp
c00219b7:	57                   	push   edi
c00219b8:	56                   	push   esi
c00219b9:	53                   	push   ebx
c00219ba:	83 ec 48             	sub    esp,0x48
c00219bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00219c1:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00219c5:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00219c9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00219cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00219d1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00219d5:	68 bf 7a 02 c0       	push   0xc0027abf
c00219da:	e8 1c b7 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00219df:	83 c4 10             	add    esp,0x10
c00219e2:	83 fb 04             	cmp    ebx,0x4
c00219e5:	7e 10                	jle    c00219f7 <SATAPI::read(unsigned long long, int, void*)+0x41>
c00219e7:	83 ec 0c             	sub    esp,0xc
c00219ea:	68 d0 7a 02 c0       	push   0xc0027ad0
c00219ef:	e8 e9 37 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00219f4:	83 c4 10             	add    esp,0x10
c00219f7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00219fb:	31 ed                	xor    ebp,ebp
c00219fd:	b9 03 00 00 00       	mov    ecx,0x3
c0021a02:	fc                   	cld    
c0021a03:	89 e8                	mov    eax,ebp
c0021a05:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021a07:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021a0c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021a11:	50                   	push   eax
c0021a12:	6a 00                	push   0x0
c0021a14:	6a 00                	push   0x0
c0021a16:	6a 00                	push   0x0
c0021a18:	6a 00                	push   0x0
c0021a1a:	6a 02                	push   0x2
c0021a1c:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021a20:	50                   	push   eax
c0021a21:	56                   	push   esi
c0021a22:	e8 9b fa ff ff       	call   c00214c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021a27:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021a2b:	89 e8                	mov    eax,ebp
c0021a2d:	b9 03 00 00 00       	mov    ecx,0x3
c0021a32:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021a34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021a38:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021a3c:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021a41:	86 e0                	xchg   al,ah
c0021a43:	c1 c0 10             	rol    eax,0x10
c0021a46:	86 e0                	xchg   al,ah
c0021a48:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021a4c:	83 c4 1c             	add    esp,0x1c
c0021a4f:	53                   	push   ebx
c0021a50:	c1 e3 0b             	shl    ebx,0xb
c0021a53:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021a57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a5f:	53                   	push   ebx
c0021a60:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021a64:	50                   	push   eax
c0021a65:	56                   	push   esi
c0021a66:	e8 57 fa ff ff       	call   c00214c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021a6b:	83 c4 20             	add    esp,0x20
c0021a6e:	85 c0                	test   eax,eax
c0021a70:	74 14                	je     c0021a86 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021a72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a76:	83 ec 0c             	sub    esp,0xc
c0021a79:	56                   	push   esi
c0021a7a:	e8 0d fd ff ff       	call   c002178c <SATAPI::detectMedia()>
c0021a7f:	83 c4 10             	add    esp,0x10
c0021a82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a86:	83 c4 3c             	add    esp,0x3c
c0021a89:	5b                   	pop    ebx
c0021a8a:	5e                   	pop    esi
c0021a8b:	5f                   	pop    edi
c0021a8c:	5d                   	pop    ebp
c0021a8d:	c3                   	ret    
c0021a8e:	66 90                	xchg   ax,ax

c0021a90 <AVX::open(int, int, void*)>:
c0021a90:	83 ec 0c             	sub    esp,0xc
c0021a93:	e8 74 11 00 00       	call   c0022c0c <avxInit>
c0021a98:	b8 00 00 00 00       	mov    eax,0x0
c0021a9d:	83 c4 0c             	add    esp,0xc
c0021aa0:	c3                   	ret    
c0021aa1:	90                   	nop
c0021aa2:	66 90                	xchg   ax,ax

c0021aa4 <AVX::close(int, int, void*)>:
c0021aa4:	83 ec 0c             	sub    esp,0xc
c0021aa7:	e8 82 11 00 00       	call   c0022c2e <avxClose>
c0021aac:	b8 00 00 00 00       	mov    eax,0x0
c0021ab1:	83 c4 0c             	add    esp,0xc
c0021ab4:	c3                   	ret    
c0021ab5:	90                   	nop
c0021ab6:	66 90                	xchg   ax,ax

c0021ab8 <AVX::available()>:
c0021ab8:	83 ec 0c             	sub    esp,0xc
c0021abb:	e8 00 11 00 00       	call   c0022bc0 <avxDetect>
c0021ac0:	85 c0                	test   eax,eax
c0021ac2:	0f 95 c0             	setne  al
c0021ac5:	83 c4 0c             	add    esp,0xc
c0021ac8:	c3                   	ret    
c0021ac9:	90                   	nop
c0021aca:	66 90                	xchg   ax,ax

c0021acc <AVX::save(void*)>:
c0021acc:	83 ec 0c             	sub    esp,0xc
c0021acf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021ad3:	83 ec 0c             	sub    esp,0xc
c0021ad6:	50                   	push   eax
c0021ad7:	e8 0e 11 00 00       	call   c0022bea <avxSave>
c0021adc:	83 c4 10             	add    esp,0x10
c0021adf:	90                   	nop
c0021ae0:	83 c4 0c             	add    esp,0xc
c0021ae3:	c3                   	ret    

c0021ae4 <AVX::load(void*)>:
c0021ae4:	83 ec 0c             	sub    esp,0xc
c0021ae7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021aeb:	83 ec 0c             	sub    esp,0xc
c0021aee:	50                   	push   eax
c0021aef:	e8 07 11 00 00       	call   c0022bfb <avxLoad>
c0021af4:	83 c4 10             	add    esp,0x10
c0021af7:	90                   	nop
c0021af8:	83 c4 0c             	add    esp,0xc
c0021afb:	c3                   	ret    

c0021afc <AVX::AVX()>:
c0021afc:	83 ec 0c             	sub    esp,0xc
c0021aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b03:	83 ec 08             	sub    esp,0x8
c0021b06:	68 34 7b 02 c0       	push   0xc0027b34
c0021b0b:	50                   	push   eax
c0021b0c:	e8 73 d0 fe ff       	call   c000eb84 <FPU::FPU(char const*)>
c0021b11:	83 c4 10             	add    esp,0x10
c0021b14:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0021b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1d:	89 10                	mov    DWORD PTR [eax],edx
c0021b1f:	90                   	nop
c0021b20:	83 c4 0c             	add    esp,0xc
c0021b23:	c3                   	ret    

c0021b24 <MMX::available()>:
c0021b24:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0021b29:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021b2f:	83 e0 20             	and    eax,0x20
c0021b32:	84 c0                	test   al,al
c0021b34:	0f 95 c0             	setne  al
c0021b37:	c3                   	ret    

c0021b38 <MMX::open(int, int, void*)>:
c0021b38:	83 ec 0c             	sub    esp,0xc
c0021b3b:	e8 7f 11 00 00       	call   c0022cbf <x87Init>
c0021b40:	b8 00 00 00 00       	mov    eax,0x0
c0021b45:	83 c4 0c             	add    esp,0xc
c0021b48:	c3                   	ret    
c0021b49:	90                   	nop
c0021b4a:	66 90                	xchg   ax,ax

c0021b4c <MMX::close(int, int, void*)>:
c0021b4c:	83 ec 0c             	sub    esp,0xc
c0021b4f:	e8 84 11 00 00       	call   c0022cd8 <x87Close>
c0021b54:	b8 00 00 00 00       	mov    eax,0x0
c0021b59:	83 c4 0c             	add    esp,0xc
c0021b5c:	c3                   	ret    
c0021b5d:	90                   	nop
c0021b5e:	66 90                	xchg   ax,ax

c0021b60 <MMX::save(void*)>:
c0021b60:	83 ec 0c             	sub    esp,0xc
c0021b63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b67:	83 ec 0c             	sub    esp,0xc
c0021b6a:	50                   	push   eax
c0021b6b:	e8 41 11 00 00       	call   c0022cb1 <x87Save>
c0021b70:	83 c4 10             	add    esp,0x10
c0021b73:	90                   	nop
c0021b74:	83 c4 0c             	add    esp,0xc
c0021b77:	c3                   	ret    

c0021b78 <MMX::load(void*)>:
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	50                   	push   eax
c0021b83:	e8 30 11 00 00       	call   c0022cb8 <x87Load>
c0021b88:	83 c4 10             	add    esp,0x10
c0021b8b:	90                   	nop
c0021b8c:	83 c4 0c             	add    esp,0xc
c0021b8f:	c3                   	ret    

c0021b90 <MMX::MMX()>:
c0021b90:	83 ec 0c             	sub    esp,0xc
c0021b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b97:	83 ec 08             	sub    esp,0x8
c0021b9a:	68 74 7b 02 c0       	push   0xc0027b74
c0021b9f:	50                   	push   eax
c0021ba0:	e8 df cf fe ff       	call   c000eb84 <FPU::FPU(char const*)>
c0021ba5:	83 c4 10             	add    esp,0x10
c0021ba8:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0021bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb1:	89 10                	mov    DWORD PTR [eax],edx
c0021bb3:	90                   	nop
c0021bb4:	83 c4 0c             	add    esp,0xc
c0021bb7:	c3                   	ret    

c0021bb8 <SSE::open(int, int, void*)>:
c0021bb8:	83 ec 0c             	sub    esp,0xc
c0021bbb:	e8 b8 10 00 00       	call   c0022c78 <sseInit>
c0021bc0:	b8 00 00 00 00       	mov    eax,0x0
c0021bc5:	83 c4 0c             	add    esp,0xc
c0021bc8:	c3                   	ret    
c0021bc9:	90                   	nop
c0021bca:	66 90                	xchg   ax,ax

c0021bcc <SSE::close(int, int, void*)>:
c0021bcc:	83 ec 0c             	sub    esp,0xc
c0021bcf:	e8 b4 10 00 00       	call   c0022c88 <sseClose>
c0021bd4:	b8 00 00 00 00       	mov    eax,0x0
c0021bd9:	83 c4 0c             	add    esp,0xc
c0021bdc:	c3                   	ret    
c0021bdd:	90                   	nop
c0021bde:	66 90                	xchg   ax,ax

c0021be0 <SSE::available()>:
c0021be0:	83 ec 1c             	sub    esp,0x1c
c0021be3:	e8 68 10 00 00       	call   c0022c50 <absolutelyNoChanceInHell>
c0021be8:	85 c0                	test   eax,eax
c0021bea:	0f 95 c0             	setne  al
c0021bed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021bf1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021bf5:	83 c4 1c             	add    esp,0x1c
c0021bf8:	c3                   	ret    
c0021bf9:	90                   	nop
c0021bfa:	66 90                	xchg   ax,ax

c0021bfc <SSE::save(void*)>:
c0021bfc:	83 ec 0c             	sub    esp,0xc
c0021bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c03:	83 ec 0c             	sub    esp,0xc
c0021c06:	50                   	push   eax
c0021c07:	e8 5c 10 00 00       	call   c0022c68 <sseSave>
c0021c0c:	83 c4 10             	add    esp,0x10
c0021c0f:	90                   	nop
c0021c10:	83 c4 0c             	add    esp,0xc
c0021c13:	c3                   	ret    

c0021c14 <SSE::load(void*)>:
c0021c14:	83 ec 0c             	sub    esp,0xc
c0021c17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c1b:	83 ec 0c             	sub    esp,0xc
c0021c1e:	50                   	push   eax
c0021c1f:	e8 4c 10 00 00       	call   c0022c70 <sseLoad>
c0021c24:	83 c4 10             	add    esp,0x10
c0021c27:	90                   	nop
c0021c28:	83 c4 0c             	add    esp,0xc
c0021c2b:	c3                   	ret    

c0021c2c <SSE::SSE()>:
c0021c2c:	83 ec 0c             	sub    esp,0xc
c0021c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c33:	83 ec 08             	sub    esp,0x8
c0021c36:	68 b4 7b 02 c0       	push   0xc0027bb4
c0021c3b:	50                   	push   eax
c0021c3c:	e8 43 cf fe ff       	call   c000eb84 <FPU::FPU(char const*)>
c0021c41:	83 c4 10             	add    esp,0x10
c0021c44:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0021c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c4d:	89 10                	mov    DWORD PTR [eax],edx
c0021c4f:	90                   	nop
c0021c50:	83 c4 0c             	add    esp,0xc
c0021c53:	c3                   	ret    

c0021c54 <x87::open(int, int, void*)>:
c0021c54:	55                   	push   ebp
c0021c55:	89 e5                	mov    ebp,esp
c0021c57:	83 ec 08             	sub    esp,0x8
c0021c5a:	e8 60 10 00 00       	call   c0022cbf <x87Init>
c0021c5f:	b8 00 00 00 00       	mov    eax,0x0
c0021c64:	c9                   	leave  
c0021c65:	c3                   	ret    

c0021c66 <x87::close(int, int, void*)>:
c0021c66:	55                   	push   ebp
c0021c67:	89 e5                	mov    ebp,esp
c0021c69:	83 ec 08             	sub    esp,0x8
c0021c6c:	e8 67 10 00 00       	call   c0022cd8 <x87Close>
c0021c71:	b8 00 00 00 00       	mov    eax,0x0
c0021c76:	c9                   	leave  
c0021c77:	c3                   	ret    

c0021c78 <x87::available()>:
c0021c78:	55                   	push   ebp
c0021c79:	89 e5                	mov    ebp,esp
c0021c7b:	83 ec 08             	sub    esp,0x8
c0021c7e:	e8 13 10 00 00       	call   c0022c96 <x87Detect>
c0021c83:	85 c0                	test   eax,eax
c0021c85:	0f 95 c0             	setne  al
c0021c88:	c9                   	leave  
c0021c89:	c3                   	ret    

c0021c8a <x87::save(void*)>:
c0021c8a:	55                   	push   ebp
c0021c8b:	89 e5                	mov    ebp,esp
c0021c8d:	83 ec 08             	sub    esp,0x8
c0021c90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c93:	83 ec 0c             	sub    esp,0xc
c0021c96:	50                   	push   eax
c0021c97:	e8 15 10 00 00       	call   c0022cb1 <x87Save>
c0021c9c:	83 c4 10             	add    esp,0x10
c0021c9f:	90                   	nop
c0021ca0:	c9                   	leave  
c0021ca1:	c3                   	ret    

c0021ca2 <x87::load(void*)>:
c0021ca2:	55                   	push   ebp
c0021ca3:	89 e5                	mov    ebp,esp
c0021ca5:	83 ec 08             	sub    esp,0x8
c0021ca8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021cab:	83 ec 0c             	sub    esp,0xc
c0021cae:	50                   	push   eax
c0021caf:	e8 04 10 00 00       	call   c0022cb8 <x87Load>
c0021cb4:	83 c4 10             	add    esp,0x10
c0021cb7:	90                   	nop
c0021cb8:	c9                   	leave  
c0021cb9:	c3                   	ret    

c0021cba <x87::x87()>:
c0021cba:	83 ec 0c             	sub    esp,0xc
c0021cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc1:	83 ec 08             	sub    esp,0x8
c0021cc4:	68 f4 7b 02 c0       	push   0xc0027bf4
c0021cc9:	50                   	push   eax
c0021cca:	e8 b5 ce fe ff       	call   c000eb84 <FPU::FPU(char const*)>
c0021ccf:	83 c4 10             	add    esp,0x10
c0021cd2:	ba 04 7c 02 c0       	mov    edx,0xc0027c04
c0021cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cdb:	89 10                	mov    DWORD PTR [eax],edx
c0021cdd:	90                   	nop
c0021cde:	83 c4 0c             	add    esp,0xc
c0021ce1:	c3                   	ret    

c0021ce2 <APIC::disable()>:
c0021ce2:	90                   	nop
c0021ce3:	c3                   	ret    

c0021ce4 <APIC::close(int, int, void*)>:
c0021ce4:	55                   	push   ebp
c0021ce5:	89 e5                	mov    ebp,esp
c0021ce7:	83 ec 08             	sub    esp,0x8
c0021cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ced:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cef:	83 c0 3c             	add    eax,0x3c
c0021cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cf4:	83 ec 0c             	sub    esp,0xc
c0021cf7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cfa:	ff d0                	call   eax
c0021cfc:	83 c4 10             	add    esp,0x10
c0021cff:	b8 00 00 00 00       	mov    eax,0x0
c0021d04:	c9                   	leave  
c0021d05:	c3                   	ret    

c0021d06 <IOAPIC::close(int, int, void*)>:
c0021d06:	b8 00 00 00 00       	mov    eax,0x0
c0021d0b:	c3                   	ret    

c0021d0c <APIC::io_wait()>:
c0021d0c:	eb 00                	jmp    c0021d0e <APIC::io_wait()+0x2>
c0021d0e:	eb 00                	jmp    c0021d10 <APIC::io_wait()+0x4>
c0021d10:	90                   	nop
c0021d11:	c3                   	ret    

c0021d12 <APIC::getBase()>:
c0021d12:	55                   	push   ebp
c0021d13:	89 e5                	mov    ebp,esp
c0021d15:	83 ec 18             	sub    esp,0x18
c0021d18:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0021d1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021d23:	83 e0 08             	and    eax,0x8
c0021d26:	84 c0                	test   al,al
c0021d28:	75 07                	jne    c0021d31 <APIC::getBase()+0x1f>
c0021d2a:	b8 00 00 00 00       	mov    eax,0x0
c0021d2f:	eb 21                	jmp    c0021d52 <APIC::getBase()+0x40>
c0021d31:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0021d36:	83 ec 08             	sub    esp,0x8
c0021d39:	6a 1b                	push   0x1b
c0021d3b:	50                   	push   eax
c0021d3c:	e8 3d 75 fe ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0021d41:	83 c4 10             	add    esp,0x10
c0021d44:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021d47:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021d4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021d52:	c9                   	leave  
c0021d53:	c3                   	ret    

c0021d54 <APIC::eoi(unsigned char)>:
c0021d54:	55                   	push   ebp
c0021d55:	89 e5                	mov    ebp,esp
c0021d57:	83 ec 28             	sub    esp,0x28
c0021d5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d5d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021d60:	83 ec 0c             	sub    esp,0xc
c0021d63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d66:	e8 a7 ff ff ff       	call   c0021d12 <APIC::getBase()>
c0021d6b:	83 c4 10             	add    esp,0x10
c0021d6e:	05 b0 00 00 00       	add    eax,0xb0
c0021d73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021d76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021d79:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021d7f:	90                   	nop
c0021d80:	c9                   	leave  
c0021d81:	c3                   	ret    

c0021d82 <APIC::open(int, int, void*)>:
c0021d82:	55                   	push   ebp
c0021d83:	89 e5                	mov    ebp,esp
c0021d85:	57                   	push   edi
c0021d86:	56                   	push   esi
c0021d87:	53                   	push   ebx
c0021d88:	83 ec 2c             	sub    esp,0x2c
c0021d8b:	83 ec 0c             	sub    esp,0xc
c0021d8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d91:	e8 7c ff ff ff       	call   c0021d12 <APIC::getBase()>
c0021d96:	83 c4 10             	add    esp,0x10
c0021d99:	89 c2                	mov    edx,eax
c0021d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d9e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021da4:	0f b6 f8             	movzx  edi,al
c0021da7:	89 d0                	mov    eax,edx
c0021da9:	ba 00 00 00 00       	mov    edx,0x0
c0021dae:	89 c1                	mov    ecx,eax
c0021db0:	80 e5 ff             	and    ch,0xff
c0021db3:	89 cb                	mov    ebx,ecx
c0021db5:	0f b6 f2             	movzx  esi,dl
c0021db8:	89 d8                	mov    eax,ebx
c0021dba:	89 f2                	mov    edx,esi
c0021dbc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021dbf:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021dc2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021dc6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021dca:	83 e0 00             	and    eax,0x0
c0021dcd:	09 d0                	or     eax,edx
c0021dcf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dd6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021ddc:	8d 50 01             	lea    edx,[eax+0x1]
c0021ddf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021de2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021de8:	0f b6 d0             	movzx  edx,al
c0021deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dee:	83 c2 08             	add    edx,0x8
c0021df1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021df5:	0f b6 c9             	movzx  ecx,cl
c0021df8:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021dfe:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021e02:	83 ec 0c             	sub    esp,0xc
c0021e05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e08:	e8 05 ff ff ff       	call   c0021d12 <APIC::getBase()>
c0021e0d:	83 c4 10             	add    esp,0x10
c0021e10:	05 f0 00 00 00       	add    eax,0xf0
c0021e15:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021e18:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e1d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021e20:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021e27:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021e2e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021e31:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e34:	89 10                	mov    DWORD PTR [eax],edx
c0021e36:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021e3d:	a1 70 94 02 c0       	mov    eax,ds:0xc0029470
c0021e42:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021e45:	7d 7c                	jge    c0021ec3 <APIC::open(int, int, void*)+0x141>
c0021e47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e4a:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0021e51:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021e54:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e57:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0021e5e:	c1 e8 08             	shr    eax,0x8
c0021e61:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021e65:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e68:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0021e6f:	c1 e8 18             	shr    eax,0x18
c0021e72:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021e75:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021e79:	75 40                	jne    c0021ebb <APIC::open(int, int, void*)+0x139>
c0021e7b:	83 ec 0c             	sub    esp,0xc
c0021e7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e81:	e8 8c fe ff ff       	call   c0021d12 <APIC::getBase()>
c0021e86:	83 c4 10             	add    esp,0x10
c0021e89:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021e8d:	75 07                	jne    c0021e96 <APIC::open(int, int, void*)+0x114>
c0021e8f:	ba 60 03 00 00       	mov    edx,0x360
c0021e94:	eb 05                	jmp    c0021e9b <APIC::open(int, int, void*)+0x119>
c0021e96:	ba 50 03 00 00       	mov    edx,0x350
c0021e9b:	01 d0                	add    eax,edx
c0021e9d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021ea0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021ea3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ea5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021ea8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021eaf:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021eb3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021eb6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021eb9:	89 10                	mov    DWORD PTR [eax],edx
c0021ebb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021ebe:	e9 7a ff ff ff       	jmp    c0021e3d <APIC::open(int, int, void*)+0xbb>
c0021ec3:	b8 00 00 00 00       	mov    eax,0x0
c0021ec8:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021ecb:	5b                   	pop    ebx
c0021ecc:	5e                   	pop    esi
c0021ecd:	5f                   	pop    edi
c0021ece:	5d                   	pop    ebp
c0021ecf:	c3                   	ret    

c0021ed0 <IOAPIC::IOAPIC()>:
c0021ed0:	83 ec 0c             	sub    esp,0xc
c0021ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed7:	83 ec 08             	sub    esp,0x8
c0021eda:	68 34 7c 02 c0       	push   0xc0027c34
c0021edf:	50                   	push   eax
c0021ee0:	e8 8d c9 fe ff       	call   c000e872 <Device::Device(char const*)>
c0021ee5:	83 c4 10             	add    esp,0x10
c0021ee8:	ba 5c 7d 02 c0       	mov    edx,0xc0027d5c
c0021eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef1:	89 10                	mov    DWORD PTR [eax],edx
c0021ef3:	90                   	nop
c0021ef4:	83 c4 0c             	add    esp,0xc
c0021ef7:	c3                   	ret    

c0021ef8 <APIC::APIC()>:
c0021ef8:	53                   	push   ebx
c0021ef9:	83 ec 18             	sub    esp,0x18
c0021efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f00:	83 ec 08             	sub    esp,0x8
c0021f03:	68 3c 7c 02 c0       	push   0xc0027c3c
c0021f08:	50                   	push   eax
c0021f09:	e8 f4 d0 fe ff       	call   c000f002 <InterruptController::InterruptController(char const*)>
c0021f0e:	83 c4 10             	add    esp,0x10
c0021f11:	ba 14 7d 02 c0       	mov    edx,0xc0027d14
c0021f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f1a:	89 10                	mov    DWORD PTR [eax],edx
c0021f1c:	a0 a0 ab 02 c0       	mov    al,ds:0xc002aba0
c0021f21:	83 f0 01             	xor    eax,0x1
c0021f24:	84 c0                	test   al,al
c0021f26:	0f 84 a1 00 00 00    	je     c0021fcd <APIC::APIC()+0xd5>
c0021f2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021f31:	a0 20 95 02 c0       	mov    al,ds:0xc0029520
c0021f36:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021f3a:	0f 83 86 00 00 00    	jae    c0021fc6 <APIC::APIC()+0xce>
c0021f40:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021f48:	83 ec 0c             	sub    esp,0xc
c0021f4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f4f:	e8 93 7e fe ff       	call   c0009de7 <malloc>
c0021f54:	83 c4 10             	add    esp,0x10
c0021f57:	89 c3                	mov    ebx,eax
c0021f59:	83 ec 0c             	sub    esp,0xc
c0021f5c:	53                   	push   ebx
c0021f5d:	e8 6e ff ff ff       	call   c0021ed0 <IOAPIC::IOAPIC()>
c0021f62:	83 c4 10             	add    esp,0x10
c0021f65:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021f69:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021f6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f72:	89 14 85 80 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5480],edx
c0021f79:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c0021f7e:	40                   	inc    eax
c0021f7f:	a3 60 ab 02 c0       	mov    ds:0xc002ab60,eax
c0021f84:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0021f89:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021f8f:	83 ec 08             	sub    esp,0x8
c0021f92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f96:	50                   	push   eax
c0021f97:	e8 d2 c6 fe ff       	call   c000e66e <Device::addChild(Device*)>
c0021f9c:	83 c4 10             	add    esp,0x10
c0021f9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fa5:	83 c0 08             	add    eax,0x8
c0021fa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021faa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021faf:	6a 00                	push   0x0
c0021fb1:	6a 00                	push   0x0
c0021fb3:	52                   	push   edx
c0021fb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fb8:	ff d0                	call   eax
c0021fba:	83 c4 10             	add    esp,0x10
c0021fbd:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021fc1:	e9 6b ff ff ff       	jmp    c0021f31 <APIC::APIC()+0x39>
c0021fc6:	c6 05 a0 ab 02 c0 01 	mov    BYTE PTR ds:0xc002aba0,0x1
c0021fcd:	90                   	nop
c0021fce:	83 c4 18             	add    esp,0x18
c0021fd1:	5b                   	pop    ebx
c0021fd2:	c3                   	ret    
c0021fd3:	90                   	nop

c0021fd4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021fd4:	55                   	push   ebp
c0021fd5:	89 e5                	mov    ebp,esp
c0021fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021fe0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021fe3:	72 1d                	jb     c0022002 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fe8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ff1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021ff7:	01 d0                	add    eax,edx
c0021ff9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021ffc:	73 04                	jae    c0022002 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021ffe:	b0 01                	mov    al,0x1
c0022000:	eb 02                	jmp    c0022004 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022002:	b0 00                	mov    al,0x0
c0022004:	5d                   	pop    ebp
c0022005:	c3                   	ret    

c0022006 <IOAPIC::read(int)>:
c0022006:	55                   	push   ebp
c0022007:	89 e5                	mov    ebp,esp
c0022009:	83 ec 10             	sub    esp,0x10
c002200c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002200f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022015:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022018:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002201b:	0f b6 d0             	movzx  edx,al
c002201e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022021:	89 10                	mov    DWORD PTR [eax],edx
c0022023:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022026:	83 c0 10             	add    eax,0x10
c0022029:	8b 00                	mov    eax,DWORD PTR [eax]
c002202b:	c9                   	leave  
c002202c:	c3                   	ret    
c002202d:	90                   	nop

c002202e <IOAPIC::open(int, int, void*)>:
c002202e:	55                   	push   ebp
c002202f:	89 e5                	mov    ebp,esp
c0022031:	57                   	push   edi
c0022032:	56                   	push   esi
c0022033:	53                   	push   ebx
c0022034:	83 ec 0c             	sub    esp,0xc
c0022037:	83 ec 0c             	sub    esp,0xc
c002203a:	68 67 7c 02 c0       	push   0xc0027c67
c002203f:	e8 b7 b0 fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c0022044:	83 c4 10             	add    esp,0x10
c0022047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002204a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002204d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022056:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002205c:	8b 14 85 60 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6aa0]
c0022063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022066:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002206c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002206f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022075:	8b 14 85 e0 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a20]
c002207c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002207f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022088:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002208e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022091:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022097:	0f b6 f8             	movzx  edi,al
c002209a:	89 d0                	mov    eax,edx
c002209c:	ba 00 00 00 00       	mov    edx,0x0
c00220a1:	89 c1                	mov    ecx,eax
c00220a3:	80 e5 ff             	and    ch,0xff
c00220a6:	89 cb                	mov    ebx,ecx
c00220a8:	0f b6 f2             	movzx  esi,dl
c00220ab:	89 d8                	mov    eax,ebx
c00220ad:	89 f2                	mov    edx,esi
c00220af:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00220b2:	8d 5f 08             	lea    ebx,[edi+0x8]
c00220b5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00220b9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00220bd:	83 e0 00             	and    eax,0x0
c00220c0:	09 d0                	or     eax,edx
c00220c2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00220c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220c9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00220cf:	8d 50 01             	lea    edx,[eax+0x1]
c00220d2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00220d5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00220db:	0f b6 d0             	movzx  edx,al
c00220de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220e1:	83 c2 08             	add    edx,0x8
c00220e4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00220e8:	0f b6 c9             	movzx  ecx,cl
c00220eb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00220f1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00220f5:	83 ec 08             	sub    esp,0x8
c00220f8:	6a 01                	push   0x1
c00220fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00220fd:	e8 04 ff ff ff       	call   c0022006 <IOAPIC::read(int)>
c0022102:	83 c4 10             	add    esp,0x10
c0022105:	c1 f8 10             	sar    eax,0x10
c0022108:	0f b6 c0             	movzx  eax,al
c002210b:	8d 50 01             	lea    edx,[eax+0x1]
c002210e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022111:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0022117:	b8 00 00 00 00       	mov    eax,0x0
c002211c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002211f:	5b                   	pop    ebx
c0022120:	5e                   	pop    esi
c0022121:	5f                   	pop    edi
c0022122:	5d                   	pop    ebp
c0022123:	c3                   	ret    

c0022124 <IOAPIC::write(int, int)>:
c0022124:	55                   	push   ebp
c0022125:	89 e5                	mov    ebp,esp
c0022127:	83 ec 10             	sub    esp,0x10
c002212a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002212d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022133:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022139:	0f b6 d0             	movzx  edx,al
c002213c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002213f:	89 10                	mov    DWORD PTR [eax],edx
c0022141:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022144:	8d 50 10             	lea    edx,[eax+0x10]
c0022147:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002214a:	89 02                	mov    DWORD PTR [edx],eax
c002214c:	90                   	nop
c002214d:	c9                   	leave  
c002214e:	c3                   	ret    
c002214f:	90                   	nop

c0022150 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022150:	55                   	push   ebp
c0022151:	89 e5                	mov    ebp,esp
c0022153:	53                   	push   ebx
c0022154:	83 ec 2c             	sub    esp,0x2c
c0022157:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002215a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002215d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022160:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022163:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022169:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002216c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002216f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022172:	88 d8                	mov    al,bl
c0022174:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022177:	88 c8                	mov    al,cl
c0022179:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002217c:	88 d0                	mov    al,dl
c002217e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022181:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022185:	83 c0 08             	add    eax,0x8
c0022188:	01 c0                	add    eax,eax
c002218a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002218d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022191:	83 c0 08             	add    eax,0x8
c0022194:	01 c0                	add    eax,eax
c0022196:	40                   	inc    eax
c0022197:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002219a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002219d:	50                   	push   eax
c002219e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221a1:	e8 60 fe ff ff       	call   c0022006 <IOAPIC::read(int)>
c00221a6:	83 c4 08             	add    esp,0x8
c00221a9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00221ac:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00221b3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00221b6:	c1 e0 18             	shl    eax,0x18
c00221b9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00221bc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00221bf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00221c2:	52                   	push   edx
c00221c3:	50                   	push   eax
c00221c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221c7:	e8 58 ff ff ff       	call   c0022124 <IOAPIC::write(int, int)>
c00221cc:	83 c4 0c             	add    esp,0xc
c00221cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00221d2:	50                   	push   eax
c00221d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221d6:	e8 2b fe ff ff       	call   c0022006 <IOAPIC::read(int)>
c00221db:	83 c4 08             	add    esp,0x8
c00221de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00221e1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00221e8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00221ef:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00221f6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00221fa:	74 09                	je     c0022205 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00221fc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0022203:	eb 07                	jmp    c002220c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0022205:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002220c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022210:	74 09                	je     c002221b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0022212:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022219:	eb 07                	jmp    c0022222 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002221b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0022222:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022229:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002222d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022230:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022233:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022236:	52                   	push   edx
c0022237:	50                   	push   eax
c0022238:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002223b:	e8 e4 fe ff ff       	call   c0022124 <IOAPIC::write(int, int)>
c0022240:	83 c4 0c             	add    esp,0xc
c0022243:	90                   	nop
c0022244:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0022247:	c9                   	leave  
c0022248:	c3                   	ret    
c0022249:	90                   	nop

c002224a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002224a:	55                   	push   ebp
c002224b:	89 e5                	mov    ebp,esp
c002224d:	57                   	push   edi
c002224e:	56                   	push   esi
c002224f:	53                   	push   ebx
c0022250:	83 ec 2c             	sub    esp,0x2c
c0022253:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022256:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022259:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002225d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022261:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022265:	74 5a                	je     c00222c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022267:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002226b:	7f 44                	jg     c00222b1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002226d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022270:	05 00 83 02 c0       	add    eax,0xc0028300
c0022275:	8a 00                	mov    al,BYTE PTR [eax]
c0022277:	0f b6 c0             	movzx  eax,al
c002227a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002227d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022280:	66 8b 84 00 00 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6b00]
c0022288:	0f b7 c0             	movzx  eax,ax
c002228b:	83 e0 02             	and    eax,0x2
c002228e:	85 c0                	test   eax,eax
c0022290:	74 04                	je     c0022296 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022292:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022296:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022299:	66 8b 84 00 00 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6b00]
c00222a1:	0f b7 c0             	movzx  eax,ax
c00222a4:	83 e0 08             	and    eax,0x8
c00222a7:	85 c0                	test   eax,eax
c00222a9:	74 16                	je     c00222c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00222ab:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00222af:	eb 10                	jmp    c00222c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00222b1:	83 ec 0c             	sub    esp,0xc
c00222b4:	68 78 7c 02 c0       	push   0xc0027c78
c00222b9:	e8 1f 2f ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00222be:	83 c4 10             	add    esp,0x10
c00222c1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00222c5:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c00222ca:	83 ec 08             	sub    esp,0x8
c00222cd:	50                   	push   eax
c00222ce:	68 b0 7c 02 c0       	push   0xc0027cb0
c00222d3:	e8 23 ae fe ff       	call   c000d0fb <Dbg::kprintf(char const*, ...)>
c00222d8:	83 c4 10             	add    esp,0x10
c00222db:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00222e2:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c00222e7:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00222ea:	7d 67                	jge    c0022353 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00222ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00222ef:	8b 04 85 80 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5480]
c00222f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00222f9:	83 ec 08             	sub    esp,0x8
c00222fc:	52                   	push   edx
c00222fd:	50                   	push   eax
c00222fe:	e8 d1 fc ff ff       	call   c0021fd4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0022303:	83 c4 10             	add    esp,0x10
c0022306:	84 c0                	test   al,al
c0022308:	74 44                	je     c002234e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002230a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002230d:	8b 1c 85 80 ab 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5480]
c0022314:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022318:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002231b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002231f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022322:	83 c0 20             	add    eax,0x20
c0022325:	0f b6 f0             	movzx  esi,al
c0022328:	b8 00 00 00 00       	mov    eax,0x0
c002232d:	99                   	cdq    
c002232e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022331:	0f b6 c9             	movzx  ecx,cl
c0022334:	83 ec 04             	sub    esp,0x4
c0022337:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002233a:	57                   	push   edi
c002233b:	56                   	push   esi
c002233c:	52                   	push   edx
c002233d:	50                   	push   eax
c002233e:	51                   	push   ecx
c002233f:	53                   	push   ebx
c0022340:	e8 0b fe ff ff       	call   c0022150 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022345:	83 c4 20             	add    esp,0x20
c0022348:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002234c:	eb 05                	jmp    c0022353 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002234e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022351:	eb 8f                	jmp    c00222e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022353:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022356:	83 f0 01             	xor    eax,0x1
c0022359:	84 c0                	test   al,al
c002235b:	74 10                	je     c002236d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002235d:	83 ec 0c             	sub    esp,0xc
c0022360:	68 c7 7c 02 c0       	push   0xc0027cc7
c0022365:	e8 73 2e ff ff       	call   c00151dd <Krnl::panic(char const*)>
c002236a:	83 c4 10             	add    esp,0x10
c002236d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022371:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022378:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002237c:	7f 65                	jg     c00223e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002237e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022381:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022384:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002238b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002238e:	01 ca                	add    edx,ecx
c0022390:	83 c2 54             	add    edx,0x54
c0022393:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022397:	85 c0                	test   eax,eax
c0022399:	75 43                	jne    c00223de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002239b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002239e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223a1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00223a8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00223ab:	01 ca                	add    edx,ecx
c00223ad:	8d 4a 54             	lea    ecx,[edx+0x54]
c00223b0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00223b3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00223b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223ba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223bd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00223c4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00223c7:	01 ca                	add    edx,ecx
c00223c9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00223cf:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00223d2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00223d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223d9:	83 e8 20             	sub    eax,0x20
c00223dc:	eb 1a                	jmp    c00223f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00223de:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00223e1:	eb 95                	jmp    c0022378 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00223e3:	83 ec 0c             	sub    esp,0xc
c00223e6:	68 d4 7c 02 c0       	push   0xc0027cd4
c00223eb:	e8 ed 2d ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00223f0:	83 c4 10             	add    esp,0x10
c00223f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00223f8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00223fb:	5b                   	pop    ebx
c00223fc:	5e                   	pop    esi
c00223fd:	5f                   	pop    edi
c00223fe:	5d                   	pop    ebp
c00223ff:	c3                   	ret    

c0022400 <PIC::disable()>:
c0022400:	55                   	push   ebp
c0022401:	89 e5                	mov    ebp,esp
c0022403:	83 ec 10             	sub    esp,0x10
c0022406:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002240c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022410:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022413:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022417:	ee                   	out    dx,al
c0022418:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002241e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022422:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022425:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022429:	ee                   	out    dx,al
c002242a:	90                   	nop
c002242b:	c9                   	leave  
c002242c:	c3                   	ret    
c002242d:	90                   	nop

c002242e <PIC::close(int, int, void*)>:
c002242e:	55                   	push   ebp
c002242f:	89 e5                	mov    ebp,esp
c0022431:	83 ec 08             	sub    esp,0x8
c0022434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022437:	8b 00                	mov    eax,DWORD PTR [eax]
c0022439:	83 c0 3c             	add    eax,0x3c
c002243c:	8b 00                	mov    eax,DWORD PTR [eax]
c002243e:	83 ec 0c             	sub    esp,0xc
c0022441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022444:	ff d0                	call   eax
c0022446:	83 c4 10             	add    esp,0x10
c0022449:	b8 00 00 00 00       	mov    eax,0x0
c002244e:	c9                   	leave  
c002244f:	c3                   	ret    

c0022450 <PIC::PIC()>:
c0022450:	83 ec 0c             	sub    esp,0xc
c0022453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022457:	83 ec 08             	sub    esp,0x8
c002245a:	68 80 7d 02 c0       	push   0xc0027d80
c002245f:	50                   	push   eax
c0022460:	e8 9d cb fe ff       	call   c000f002 <InterruptController::InterruptController(char const*)>
c0022465:	83 c4 10             	add    esp,0x10
c0022468:	ba ac 7d 02 c0       	mov    edx,0xc0027dac
c002246d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022471:	89 10                	mov    DWORD PTR [eax],edx
c0022473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022477:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002247d:	0f b6 d0             	movzx  edx,al
c0022480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022484:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002248b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022495:	0f b6 d0             	movzx  edx,al
c0022498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002249c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00224a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224ab:	8d 50 01             	lea    edx,[eax+0x1]
c00224ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224b2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00224b8:	0f b6 d0             	movzx  edx,al
c00224bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224bf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00224c3:	83 e1 3f             	and    ecx,0x3f
c00224c6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00224ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224d4:	0f b6 d0             	movzx  edx,al
c00224d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224db:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00224e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224ec:	0f b6 d0             	movzx  edx,al
c00224ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00224f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022502:	8d 50 01             	lea    edx,[eax+0x1]
c0022505:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022509:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002250f:	0f b6 d0             	movzx  edx,al
c0022512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022516:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002251a:	83 e1 3f             	and    ecx,0x3f
c002251d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022521:	90                   	nop
c0022522:	83 c4 0c             	add    esp,0xc
c0022525:	c3                   	ret    

c0022526 <PIC::ioWait()>:
c0022526:	eb 00                	jmp    c0022528 <PIC::ioWait()+0x2>
c0022528:	eb 00                	jmp    c002252a <PIC::ioWait()+0x4>
c002252a:	90                   	nop
c002252b:	c3                   	ret    

c002252c <PIC::getIRQReg(int)>:
c002252c:	55                   	push   ebp
c002252d:	89 e5                	mov    ebp,esp
c002252f:	83 ec 10             	sub    esp,0x10
c0022532:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022535:	0f b6 c0             	movzx  eax,al
c0022538:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002253e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022541:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022544:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022548:	ee                   	out    dx,al
c0022549:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002254c:	0f b6 c0             	movzx  eax,al
c002254f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022555:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022558:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002255b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002255f:	ee                   	out    dx,al
c0022560:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022566:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002256a:	89 c2                	mov    edx,eax
c002256c:	ec                   	in     al,dx
c002256d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022570:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022573:	0f b6 c0             	movzx  eax,al
c0022576:	c1 e0 08             	shl    eax,0x8
c0022579:	89 c1                	mov    ecx,eax
c002257b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022581:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022585:	89 c2                	mov    edx,eax
c0022587:	ec                   	in     al,dx
c0022588:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002258b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002258e:	0f b6 c0             	movzx  eax,al
c0022591:	09 c8                	or     eax,ecx
c0022593:	c9                   	leave  
c0022594:	c3                   	ret    
c0022595:	90                   	nop

c0022596 <PIC::eoi(unsigned char)>:
c0022596:	55                   	push   ebp
c0022597:	89 e5                	mov    ebp,esp
c0022599:	83 ec 14             	sub    esp,0x14
c002259c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002259f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00225a2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00225a6:	75 1e                	jne    c00225c6 <PIC::eoi(unsigned char)+0x30>
c00225a8:	6a 0b                	push   0xb
c00225aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225ad:	e8 7a ff ff ff       	call   c002252c <PIC::getIRQReg(int)>
c00225b2:	83 c4 08             	add    esp,0x8
c00225b5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00225b9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00225bd:	25 80 00 00 00       	and    eax,0x80
c00225c2:	85 c0                	test   eax,eax
c00225c4:	74 5f                	je     c0022625 <PIC::eoi(unsigned char)+0x8f>
c00225c6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00225ca:	75 2d                	jne    c00225f9 <PIC::eoi(unsigned char)+0x63>
c00225cc:	6a 0b                	push   0xb
c00225ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225d1:	e8 56 ff ff ff       	call   c002252c <PIC::getIRQReg(int)>
c00225d6:	83 c4 08             	add    esp,0x8
c00225d9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00225dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225e0:	66 85 c0             	test   ax,ax
c00225e3:	78 14                	js     c00225f9 <PIC::eoi(unsigned char)+0x63>
c00225e5:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00225eb:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00225ef:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00225f2:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00225f6:	ee                   	out    dx,al
c00225f7:	eb 2d                	jmp    c0022626 <PIC::eoi(unsigned char)+0x90>
c00225f9:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00225fd:	76 12                	jbe    c0022611 <PIC::eoi(unsigned char)+0x7b>
c00225ff:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022605:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022609:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002260c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022610:	ee                   	out    dx,al
c0022611:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022617:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002261b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002261e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022622:	ee                   	out    dx,al
c0022623:	eb 01                	jmp    c0022626 <PIC::eoi(unsigned char)+0x90>
c0022625:	90                   	nop
c0022626:	c9                   	leave  
c0022627:	c3                   	ret    

c0022628 <PIC::remap()>:
c0022628:	55                   	push   ebp
c0022629:	89 e5                	mov    ebp,esp
c002262b:	83 ec 48             	sub    esp,0x48
c002262e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022635:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002263c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022642:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022645:	89 c2                	mov    edx,eax
c0022647:	ec                   	in     al,dx
c0022648:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002264b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002264e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022651:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022657:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002265a:	89 c2                	mov    edx,eax
c002265c:	ec                   	in     al,dx
c002265d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022660:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022663:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022666:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002266c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022670:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022673:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022676:	ee                   	out    dx,al
c0022677:	83 ec 0c             	sub    esp,0xc
c002267a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002267d:	e8 a4 fe ff ff       	call   c0022526 <PIC::ioWait()>
c0022682:	83 c4 10             	add    esp,0x10
c0022685:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002268b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002268f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022692:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022695:	ee                   	out    dx,al
c0022696:	83 ec 0c             	sub    esp,0xc
c0022699:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002269c:	e8 85 fe ff ff       	call   c0022526 <PIC::ioWait()>
c00226a1:	83 c4 10             	add    esp,0x10
c00226a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00226a7:	0f b6 c0             	movzx  eax,al
c00226aa:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00226b0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00226b3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00226b6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00226b9:	ee                   	out    dx,al
c00226ba:	83 ec 0c             	sub    esp,0xc
c00226bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226c0:	e8 61 fe ff ff       	call   c0022526 <PIC::ioWait()>
c00226c5:	83 c4 10             	add    esp,0x10
c00226c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00226cb:	0f b6 c0             	movzx  eax,al
c00226ce:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00226d4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00226d7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00226da:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00226dd:	ee                   	out    dx,al
c00226de:	83 ec 0c             	sub    esp,0xc
c00226e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226e4:	e8 3d fe ff ff       	call   c0022526 <PIC::ioWait()>
c00226e9:	83 c4 10             	add    esp,0x10
c00226ec:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00226f2:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00226f6:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00226f9:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00226fc:	ee                   	out    dx,al
c00226fd:	83 ec 0c             	sub    esp,0xc
c0022700:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022703:	e8 1e fe ff ff       	call   c0022526 <PIC::ioWait()>
c0022708:	83 c4 10             	add    esp,0x10
c002270b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022711:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022715:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022718:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002271b:	ee                   	out    dx,al
c002271c:	83 ec 0c             	sub    esp,0xc
c002271f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022722:	e8 ff fd ff ff       	call   c0022526 <PIC::ioWait()>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022730:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022734:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022737:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002273a:	ee                   	out    dx,al
c002273b:	83 ec 0c             	sub    esp,0xc
c002273e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022741:	e8 e0 fd ff ff       	call   c0022526 <PIC::ioWait()>
c0022746:	83 c4 10             	add    esp,0x10
c0022749:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002274f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022753:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022756:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022759:	ee                   	out    dx,al
c002275a:	83 ec 0c             	sub    esp,0xc
c002275d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022760:	e8 c1 fd ff ff       	call   c0022526 <PIC::ioWait()>
c0022765:	83 c4 10             	add    esp,0x10
c0022768:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002276c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022772:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022775:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022778:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002277b:	ee                   	out    dx,al
c002277c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022780:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022786:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022789:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002278c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002278f:	ee                   	out    dx,al
c0022790:	90                   	nop
c0022791:	c9                   	leave  
c0022792:	c3                   	ret    
c0022793:	90                   	nop

c0022794 <PIC::open(int, int, void*)>:
c0022794:	55                   	push   ebp
c0022795:	89 e5                	mov    ebp,esp
c0022797:	83 ec 18             	sub    esp,0x18
c002279a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00227a0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00227a4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00227a7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00227ab:	ee                   	out    dx,al
c00227ac:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00227b2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00227b6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00227b9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00227bd:	ee                   	out    dx,al
c00227be:	83 ec 0c             	sub    esp,0xc
c00227c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227c4:	e8 5f fe ff ff       	call   c0022628 <PIC::remap()>
c00227c9:	83 c4 10             	add    esp,0x10
c00227cc:	b8 00 00 00 00       	mov    eax,0x0
c00227d1:	c9                   	leave  
c00227d2:	c3                   	ret    
c00227d3:	90                   	nop

c00227d4 <APICTimer::close(int, int, void*)>:
c00227d4:	b8 00 00 00 00       	mov    eax,0x0
c00227d9:	c3                   	ret    
c00227da:	66 90                	xchg   ax,ax

c00227dc <apicTimerHandler(regs*, void*)>:
c00227dc:	83 ec 0c             	sub    esp,0xc
c00227df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00227e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00227e5:	b8 10 27 00 00       	mov    eax,0x2710
c00227ea:	ba 00 00 00 00       	mov    edx,0x0
c00227ef:	f7 f1                	div    ecx
c00227f1:	83 ec 0c             	sub    esp,0xc
c00227f4:	50                   	push   eax
c00227f5:	e8 37 e8 fe ff       	call   c0011031 <timerHandler(unsigned int)>
c00227fa:	83 c4 10             	add    esp,0x10
c00227fd:	90                   	nop
c00227fe:	83 c4 0c             	add    esp,0xc
c0022801:	c3                   	ret    
c0022802:	66 90                	xchg   ax,ax

c0022804 <APICTimer::write(int)>:
c0022804:	83 ec 1c             	sub    esp,0x1c
c0022807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002280b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002280f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022815:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c002281a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022820:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022826:	83 ec 0c             	sub    esp,0xc
c0022829:	50                   	push   eax
c002282a:	e8 e3 f4 ff ff       	call   c0021d12 <APIC::getBase()>
c002282f:	83 c4 10             	add    esp,0x10
c0022832:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022836:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c002283b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002283f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022843:	05 e0 03 00 00       	add    eax,0x3e0
c0022848:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002284e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022852:	05 80 03 00 00       	add    eax,0x380
c0022857:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002285d:	fb                   	sti    
c002285e:	66 90                	xchg   ax,ax
c0022860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022864:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002286a:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c002286f:	39 c2                	cmp    edx,eax
c0022871:	76 05                	jbe    c0022878 <APICTimer::write(int)+0x74>
c0022873:	eb eb                	jmp    c0022860 <APICTimer::write(int)+0x5c>
c0022875:	8d 76 00             	lea    esi,[esi+0x0]
c0022878:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002287c:	05 20 03 00 00       	add    eax,0x320
c0022881:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002288b:	05 90 03 00 00       	add    eax,0x390
c0022890:	8b 00                	mov    eax,DWORD PTR [eax]
c0022892:	f7 d0                	not    eax
c0022894:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022898:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002289c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228a0:	ba 00 00 00 00       	mov    edx,0x0
c00228a5:	f7 f1                	div    ecx
c00228a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00228aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00228b4:	0d 00 00 02 00       	or     eax,0x20000
c00228b9:	89 c2                	mov    edx,eax
c00228bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228bf:	05 20 03 00 00       	add    eax,0x320
c00228c4:	89 10                	mov    DWORD PTR [eax],edx
c00228c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228ca:	05 e0 03 00 00       	add    eax,0x3e0
c00228cf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00228d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228d9:	05 80 03 00 00       	add    eax,0x380
c00228de:	89 c2                	mov    edx,eax
c00228e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00228e3:	89 02                	mov    DWORD PTR [edx],eax
c00228e5:	90                   	nop
c00228e6:	83 c4 1c             	add    esp,0x1c
c00228e9:	c3                   	ret    
c00228ea:	66 90                	xchg   ax,ax

c00228ec <APICTimer::open(int, int, void*)>:
c00228ec:	57                   	push   edi
c00228ed:	56                   	push   esi
c00228ee:	53                   	push   ebx
c00228ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00228f5:	83 c0 24             	add    eax,0x24
c00228f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00228fa:	83 ec 08             	sub    esp,0x8
c00228fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022905:	ff d0                	call   eax
c0022907:	83 c4 10             	add    esp,0x10
c002290a:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c002290f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022915:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002291b:	83 ec 0c             	sub    esp,0xc
c002291e:	50                   	push   eax
c002291f:	e8 ee f3 ff ff       	call   c0021d12 <APIC::getBase()>
c0022924:	83 c4 10             	add    esp,0x10
c0022927:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002292d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022931:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022937:	0f b6 f8             	movzx  edi,al
c002293a:	89 d0                	mov    eax,edx
c002293c:	ba 00 00 00 00       	mov    edx,0x0
c0022941:	89 c1                	mov    ecx,eax
c0022943:	80 e5 ff             	and    ch,0xff
c0022946:	89 cb                	mov    ebx,ecx
c0022948:	0f b6 f2             	movzx  esi,dl
c002294b:	89 d8                	mov    eax,ebx
c002294d:	89 f2                	mov    edx,esi
c002294f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022953:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022956:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002295a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002295e:	83 e0 00             	and    eax,0x0
c0022961:	09 d0                	or     eax,edx
c0022963:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022971:	8d 50 01             	lea    edx,[eax+0x1]
c0022974:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022978:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002297e:	0f b6 d0             	movzx  edx,al
c0022981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022985:	83 c2 08             	add    edx,0x8
c0022988:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002298c:	0f b6 c9             	movzx  ecx,cl
c002298f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022995:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00229a1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00229a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00229af:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00229b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00229b9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00229bf:	83 ec 0c             	sub    esp,0xc
c00229c2:	51                   	push   ecx
c00229c3:	6a 01                	push   0x1
c00229c5:	68 dc 27 02 c0       	push   0xc00227dc
c00229ca:	52                   	push   edx
c00229cb:	50                   	push   eax
c00229cc:	e8 15 bc fe ff       	call   c000e5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00229d1:	83 c4 20             	add    esp,0x20
c00229d4:	89 c2                	mov    edx,eax
c00229d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229da:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00229e0:	b8 00 00 00 00       	mov    eax,0x0
c00229e5:	5b                   	pop    ebx
c00229e6:	5e                   	pop    esi
c00229e7:	5f                   	pop    edi
c00229e8:	c3                   	ret    
c00229e9:	90                   	nop
c00229ea:	66 90                	xchg   ax,ax

c00229ec <APICTimer::APICTimer()>:
c00229ec:	83 ec 0c             	sub    esp,0xc
c00229ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f3:	83 ec 08             	sub    esp,0x8
c00229f6:	68 ec 7d 02 c0       	push   0xc0027dec
c00229fb:	50                   	push   eax
c00229fc:	e8 9f e5 fe ff       	call   c0010fa0 <Timer::Timer(char const*)>
c0022a01:	83 c4 10             	add    esp,0x10
c0022a04:	ba 00 7e 02 c0       	mov    edx,0xc0027e00
c0022a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0d:	89 10                	mov    DWORD PTR [eax],edx
c0022a0f:	90                   	nop
c0022a10:	83 c4 0c             	add    esp,0xc
c0022a13:	c3                   	ret    

c0022a14 <PIT::write(int)>:
c0022a14:	83 ec 10             	sub    esp,0x10
c0022a17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022a1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022a1f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022a25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a29:	a3 a4 ab 02 c0       	mov    ds:0xc002aba4,eax
c0022a2e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022a33:	99                   	cdq    
c0022a34:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022a38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022a3c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022a43:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022a48:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022a4c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022a51:	ee                   	out    dx,al
c0022a52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a56:	0f b6 c0             	movzx  eax,al
c0022a59:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022a60:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022a64:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022a68:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022a6d:	ee                   	out    dx,al
c0022a6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a72:	c1 f8 08             	sar    eax,0x8
c0022a75:	0f b6 c0             	movzx  eax,al
c0022a78:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022a7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022a83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022a87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022a8c:	ee                   	out    dx,al
c0022a8d:	90                   	nop
c0022a8e:	83 c4 10             	add    esp,0x10
c0022a91:	c3                   	ret    
c0022a92:	66 90                	xchg   ax,ax

c0022a94 <pitHandler(regs*, void*)>:
c0022a94:	83 ec 0c             	sub    esp,0xc
c0022a97:	8b 0d a4 ab 02 c0    	mov    ecx,DWORD PTR ds:0xc002aba4
c0022a9d:	b8 10 27 00 00       	mov    eax,0x2710
c0022aa2:	99                   	cdq    
c0022aa3:	f7 f9                	idiv   ecx
c0022aa5:	83 ec 0c             	sub    esp,0xc
c0022aa8:	50                   	push   eax
c0022aa9:	e8 83 e5 fe ff       	call   c0011031 <timerHandler(unsigned int)>
c0022aae:	83 c4 10             	add    esp,0x10
c0022ab1:	90                   	nop
c0022ab2:	83 c4 0c             	add    esp,0xc
c0022ab5:	c3                   	ret    
c0022ab6:	66 90                	xchg   ax,ax

c0022ab8 <PIT::open(int, int, void*)>:
c0022ab8:	83 ec 0c             	sub    esp,0xc
c0022abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022abf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ac1:	83 c0 24             	add    eax,0x24
c0022ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ac6:	83 ec 08             	sub    esp,0x8
c0022ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022acd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ad1:	ff d0                	call   eax
c0022ad3:	83 c4 10             	add    esp,0x10
c0022ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ada:	83 ec 0c             	sub    esp,0xc
c0022add:	6a 00                	push   0x0
c0022adf:	6a 01                	push   0x1
c0022ae1:	68 94 2a 02 c0       	push   0xc0022a94
c0022ae6:	6a 00                	push   0x0
c0022ae8:	50                   	push   eax
c0022ae9:	e8 f8 ba fe ff       	call   c000e5e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022aee:	83 c4 20             	add    esp,0x20
c0022af1:	89 c2                	mov    edx,eax
c0022af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022afd:	b8 00 00 00 00       	mov    eax,0x0
c0022b02:	83 c4 0c             	add    esp,0xc
c0022b05:	c3                   	ret    
c0022b06:	66 90                	xchg   ax,ax

c0022b08 <PIT::close(int, int, void*)>:
c0022b08:	83 ec 0c             	sub    esp,0xc
c0022b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b1d:	6a 01                	push   0x1
c0022b1f:	68 94 2a 02 c0       	push   0xc0022a94
c0022b24:	6a 00                	push   0x0
c0022b26:	50                   	push   eax
c0022b27:	e8 04 bb fe ff       	call   c000e630 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022b2c:	83 c4 10             	add    esp,0x10
c0022b2f:	b8 00 00 00 00       	mov    eax,0x0
c0022b34:	83 c4 0c             	add    esp,0xc
c0022b37:	c3                   	ret    

c0022b38 <PIT::PIT()>:
c0022b38:	83 ec 0c             	sub    esp,0xc
c0022b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3f:	83 ec 08             	sub    esp,0x8
c0022b42:	68 28 7e 02 c0       	push   0xc0027e28
c0022b47:	50                   	push   eax
c0022b48:	e8 53 e4 fe ff       	call   c0010fa0 <Timer::Timer(char const*)>
c0022b4d:	83 c4 10             	add    esp,0x10
c0022b50:	ba 50 7e 02 c0       	mov    edx,0xc0027e50
c0022b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b59:	89 10                	mov    DWORD PTR [eax],edx
c0022b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b5f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b65:	0f b6 d0             	movzx  edx,al
c0022b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b6c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b77:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b7d:	0f b6 d0             	movzx  edx,al
c0022b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b84:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b8d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b93:	8d 50 01             	lea    edx,[eax+0x1]
c0022b96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b9a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022ba0:	0f b6 d0             	movzx  edx,al
c0022ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022bab:	83 e1 3f             	and    ecx,0x3f
c0022bae:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022bb2:	90                   	nop
c0022bb3:	83 c4 0c             	add    esp,0xc
c0022bb6:	c3                   	ret    
c0022bb7:	66 90                	xchg   ax,ax
c0022bb9:	66 90                	xchg   ax,ax
c0022bbb:	66 90                	xchg   ax,ax
c0022bbd:	66 90                	xchg   ax,ax
c0022bbf:	90                   	nop

c0022bc0 <avxDetect>:
c0022bc0:	b8 01 00 00 00       	mov    eax,0x1
c0022bc5:	0f a2                	cpuid  
c0022bc7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0022bcd:	74 15                	je     c0022be4 <avxDetect.noAVX>
c0022bcf:	b8 01 00 00 00       	mov    eax,0x1
c0022bd4:	0f a2                	cpuid  
c0022bd6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0022bdc:	74 06                	je     c0022be4 <avxDetect.noAVX>
c0022bde:	b8 01 00 00 00       	mov    eax,0x1
c0022be3:	c3                   	ret    

c0022be4 <avxDetect.noAVX>:
c0022be4:	b8 00 00 00 00       	mov    eax,0x0
c0022be9:	c3                   	ret    

c0022bea <avxSave>:
c0022bea:	53                   	push   ebx
c0022beb:	52                   	push   edx
c0022bec:	31 c0                	xor    eax,eax
c0022bee:	48                   	dec    eax
c0022bef:	89 c2                	mov    edx,eax
c0022bf1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022bf5:	0f ae 23             	xsave  [ebx]
c0022bf8:	5a                   	pop    edx
c0022bf9:	5b                   	pop    ebx
c0022bfa:	c3                   	ret    

c0022bfb <avxLoad>:
c0022bfb:	53                   	push   ebx
c0022bfc:	52                   	push   edx
c0022bfd:	31 c0                	xor    eax,eax
c0022bff:	48                   	dec    eax
c0022c00:	89 c2                	mov    edx,eax
c0022c02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022c06:	0f ae 2b             	xrstor [ebx]
c0022c09:	5a                   	pop    edx
c0022c0a:	5b                   	pop    ebx
c0022c0b:	c3                   	ret    

c0022c0c <avxInit>:
c0022c0c:	e8 67 00 00 00       	call   c0022c78 <sseInit>
c0022c11:	50                   	push   eax
c0022c12:	51                   	push   ecx
c0022c13:	0f 20 e0             	mov    eax,cr4
c0022c16:	0d 00 00 04 00       	or     eax,0x40000
c0022c1b:	0f 22 e0             	mov    cr4,eax
c0022c1e:	31 c9                	xor    ecx,ecx
c0022c20:	0f 01 d0             	xgetbv 
c0022c23:	0d 07 00 00 00       	or     eax,0x7
c0022c28:	0f 01 d1             	xsetbv 
c0022c2b:	59                   	pop    ecx
c0022c2c:	58                   	pop    eax
c0022c2d:	c3                   	ret    

c0022c2e <avxClose>:
c0022c2e:	c3                   	ret    

c0022c2f <wouldSheSayYes>:
c0022c2f:	c3                   	ret    
c0022c30:	49                   	dec    ecx
c0022c31:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022c35:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022c39:	75 20                	jne    c0022c5b <absolutelyNoChanceInHell+0xb>
c0022c3b:	4e                   	dec    esi
c0022c3c:	79 61                	jns    c0022c9f <x87Detect+0x9>
c0022c3e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022c43:	66 90                	xchg   ax,ax
c0022c45:	66 90                	xchg   ax,ax
c0022c47:	66 90                	xchg   ax,ax
c0022c49:	66 90                	xchg   ax,ax
c0022c4b:	66 90                	xchg   ax,ax
c0022c4d:	66 90                	xchg   ax,ax
c0022c4f:	90                   	nop

c0022c50 <absolutelyNoChanceInHell>:
c0022c50:	b8 01 00 00 00       	mov    eax,0x1
c0022c55:	0f a2                	cpuid  
c0022c57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022c5d:	74 06                	je     c0022c65 <sseDetect.noSSE>
c0022c5f:	b8 01 00 00 00       	mov    eax,0x1
c0022c64:	c3                   	ret    

c0022c65 <sseDetect.noSSE>:
c0022c65:	31 c0                	xor    eax,eax
c0022c67:	c3                   	ret    

c0022c68 <sseSave>:
c0022c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c6c:	0f ae 00             	fxsave [eax]
c0022c6f:	c3                   	ret    

c0022c70 <sseLoad>:
c0022c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c74:	0f ae 08             	fxrstor [eax]
c0022c77:	c3                   	ret    

c0022c78 <sseInit>:
c0022c78:	e8 42 00 00 00       	call   c0022cbf <x87Init>
c0022c7d:	0f 20 e0             	mov    eax,cr4
c0022c80:	66 0d 00 06          	or     ax,0x600
c0022c84:	0f 22 e0             	mov    cr4,eax
c0022c87:	c3                   	ret    

c0022c88 <sseClose>:
c0022c88:	c3                   	ret    
c0022c89:	66 90                	xchg   ax,ax
c0022c8b:	66 90                	xchg   ax,ax
c0022c8d:	66 90                	xchg   ax,ax
c0022c8f:	90                   	nop

c0022c90 <value_37F>:
c0022c90:	7f 03                	jg     c0022c95 <value_37A+0x1>

c0022c92 <value_37E>:
c0022c92:	7e 03                	jle    c0022c97 <x87Detect+0x1>

c0022c94 <value_37A>:
c0022c94:	7a 03                	jp     c0022c99 <x87Detect+0x3>

c0022c96 <x87Detect>:
c0022c96:	b8 01 00 00 00       	mov    eax,0x1
c0022c9b:	0f a2                	cpuid  
c0022c9d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022ca3:	74 06                	je     c0022cab <x87Detect.nox87>
c0022ca5:	b8 01 00 00 00       	mov    eax,0x1
c0022caa:	c3                   	ret    

c0022cab <x87Detect.nox87>:
c0022cab:	b8 00 00 00 00       	mov    eax,0x0
c0022cb0:	c3                   	ret    

c0022cb1 <x87Save>:
c0022cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cb5:	dd 30                	fnsave [eax]
c0022cb7:	c3                   	ret    

c0022cb8 <x87Load>:
c0022cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cbc:	dd 20                	frstor [eax]
c0022cbe:	c3                   	ret    

c0022cbf <x87Init>:
c0022cbf:	0f 20 c0             	mov    eax,cr0
c0022cc2:	66 25 fb ff          	and    ax,0xfffb
c0022cc6:	66 0d 22 00          	or     ax,0x22
c0022cca:	0f 22 c0             	mov    cr0,eax
c0022ccd:	db e3                	fninit 
c0022ccf:	0f 06                	clts   
c0022cd1:	d9 2d 94 2c 02 c0    	fldcw  WORD PTR ds:0xc0022c94
c0022cd7:	c3                   	ret    

c0022cd8 <x87Close>:
c0022cd8:	c3                   	ret    
c0022cd9:	66 90                	xchg   ax,ax
c0022cdb:	90                   	nop

c0022cdc <__do_global_ctors_aux>:
c0022cdc:	a1 78 3e 02 c0       	mov    eax,ds:0xc0023e78
c0022ce1:	83 f8 ff             	cmp    eax,0xffffffff
c0022ce4:	74 1a                	je     c0022d00 <__do_global_ctors_aux+0x24>
c0022ce6:	55                   	push   ebp
c0022ce7:	89 e5                	mov    ebp,esp
c0022ce9:	53                   	push   ebx
c0022cea:	52                   	push   edx
c0022ceb:	bb 78 3e 02 c0       	mov    ebx,0xc0023e78
c0022cf0:	ff d0                	call   eax
c0022cf2:	83 eb 04             	sub    ebx,0x4
c0022cf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022cf7:	83 f8 ff             	cmp    eax,0xffffffff
c0022cfa:	75 f4                	jne    c0022cf0 <__do_global_ctors_aux+0x14>
c0022cfc:	58                   	pop    eax
c0022cfd:	5b                   	pop    ebx
c0022cfe:	5d                   	pop    ebp
c0022cff:	c3                   	ret    
c0022d00:	c3                   	ret    
c0022d01:	66 90                	xchg   ax,ax
c0022d03:	90                   	nop

c0022d04 <__divdi3>:
c0022d04:	55                   	push   ebp
c0022d05:	57                   	push   edi
c0022d06:	56                   	push   esi
c0022d07:	53                   	push   ebx
c0022d08:	83 ec 1c             	sub    esp,0x1c
c0022d0b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022d0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022d16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022d1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022d22:	85 db                	test   ebx,ebx
c0022d24:	0f 88 8e 00 00 00    	js     c0022db8 <__divdi3+0xb4>
c0022d2a:	89 dd                	mov    ebp,ebx
c0022d2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022d34:	89 d3                	mov    ebx,edx
c0022d36:	85 d2                	test   edx,edx
c0022d38:	79 0d                	jns    c0022d47 <__divdi3+0x43>
c0022d3a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022d3e:	f7 d8                	neg    eax
c0022d40:	83 d2 00             	adc    edx,0x0
c0022d43:	f7 da                	neg    edx
c0022d45:	89 d3                	mov    ebx,edx
c0022d47:	89 c7                	mov    edi,eax
c0022d49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022d4c:	85 db                	test   ebx,ebx
c0022d4e:	75 48                	jne    c0022d98 <__divdi3+0x94>
c0022d50:	39 ef                	cmp    edi,ebp
c0022d52:	76 24                	jbe    c0022d78 <__divdi3+0x74>
c0022d54:	89 ea                	mov    edx,ebp
c0022d56:	f7 f7                	div    edi
c0022d58:	89 c1                	mov    ecx,eax
c0022d5a:	31 f6                	xor    esi,esi
c0022d5c:	89 c8                	mov    eax,ecx
c0022d5e:	89 f2                	mov    edx,esi
c0022d60:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022d64:	85 c9                	test   ecx,ecx
c0022d66:	74 07                	je     c0022d6f <__divdi3+0x6b>
c0022d68:	f7 d8                	neg    eax
c0022d6a:	83 d2 00             	adc    edx,0x0
c0022d6d:	f7 da                	neg    edx
c0022d6f:	83 c4 1c             	add    esp,0x1c
c0022d72:	5b                   	pop    ebx
c0022d73:	5e                   	pop    esi
c0022d74:	5f                   	pop    edi
c0022d75:	5d                   	pop    ebp
c0022d76:	c3                   	ret    
c0022d77:	90                   	nop
c0022d78:	85 ff                	test   edi,edi
c0022d7a:	75 0b                	jne    c0022d87 <__divdi3+0x83>
c0022d7c:	b8 01 00 00 00       	mov    eax,0x1
c0022d81:	31 d2                	xor    edx,edx
c0022d83:	f7 f3                	div    ebx
c0022d85:	89 c7                	mov    edi,eax
c0022d87:	31 d2                	xor    edx,edx
c0022d89:	89 e8                	mov    eax,ebp
c0022d8b:	f7 f7                	div    edi
c0022d8d:	89 c6                	mov    esi,eax
c0022d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022d92:	f7 f7                	div    edi
c0022d94:	89 c1                	mov    ecx,eax
c0022d96:	eb c4                	jmp    c0022d5c <__divdi3+0x58>
c0022d98:	39 eb                	cmp    ebx,ebp
c0022d9a:	77 3c                	ja     c0022dd8 <__divdi3+0xd4>
c0022d9c:	0f bd f3             	bsr    esi,ebx
c0022d9f:	83 f6 1f             	xor    esi,0x1f
c0022da2:	75 40                	jne    c0022de4 <__divdi3+0xe0>
c0022da4:	39 eb                	cmp    ebx,ebp
c0022da6:	72 09                	jb     c0022db1 <__divdi3+0xad>
c0022da8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022dab:	0f 87 97 00 00 00    	ja     c0022e48 <__divdi3+0x144>
c0022db1:	b9 01 00 00 00       	mov    ecx,0x1
c0022db6:	eb a4                	jmp    c0022d5c <__divdi3+0x58>
c0022db8:	f7 d9                	neg    ecx
c0022dba:	83 d3 00             	adc    ebx,0x0
c0022dbd:	f7 db                	neg    ebx
c0022dbf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022dc2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022dc6:	89 dd                	mov    ebp,ebx
c0022dc8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022dd0:	e9 5f ff ff ff       	jmp    c0022d34 <__divdi3+0x30>
c0022dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0022dd8:	31 f6                	xor    esi,esi
c0022dda:	31 c9                	xor    ecx,ecx
c0022ddc:	e9 7b ff ff ff       	jmp    c0022d5c <__divdi3+0x58>
c0022de1:	8d 76 00             	lea    esi,[esi+0x0]
c0022de4:	b8 20 00 00 00       	mov    eax,0x20
c0022de9:	29 f0                	sub    eax,esi
c0022deb:	89 f1                	mov    ecx,esi
c0022ded:	d3 e3                	shl    ebx,cl
c0022def:	89 fa                	mov    edx,edi
c0022df1:	88 c1                	mov    cl,al
c0022df3:	d3 ea                	shr    edx,cl
c0022df5:	09 da                	or     edx,ebx
c0022df7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022dfb:	89 f1                	mov    ecx,esi
c0022dfd:	d3 e7                	shl    edi,cl
c0022dff:	89 eb                	mov    ebx,ebp
c0022e01:	88 c1                	mov    cl,al
c0022e03:	d3 eb                	shr    ebx,cl
c0022e05:	89 f1                	mov    ecx,esi
c0022e07:	d3 e5                	shl    ebp,cl
c0022e09:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022e0c:	88 c1                	mov    cl,al
c0022e0e:	d3 ea                	shr    edx,cl
c0022e10:	09 d5                	or     ebp,edx
c0022e12:	89 e8                	mov    eax,ebp
c0022e14:	89 da                	mov    edx,ebx
c0022e16:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022e1a:	89 d3                	mov    ebx,edx
c0022e1c:	89 c5                	mov    ebp,eax
c0022e1e:	f7 e7                	mul    edi
c0022e20:	39 d3                	cmp    ebx,edx
c0022e22:	72 18                	jb     c0022e3c <__divdi3+0x138>
c0022e24:	74 0a                	je     c0022e30 <__divdi3+0x12c>
c0022e26:	89 e9                	mov    ecx,ebp
c0022e28:	31 f6                	xor    esi,esi
c0022e2a:	e9 2d ff ff ff       	jmp    c0022d5c <__divdi3+0x58>
c0022e2f:	90                   	nop
c0022e30:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022e33:	89 f1                	mov    ecx,esi
c0022e35:	d3 e7                	shl    edi,cl
c0022e37:	39 c7                	cmp    edi,eax
c0022e39:	73 eb                	jae    c0022e26 <__divdi3+0x122>
c0022e3b:	90                   	nop
c0022e3c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022e3f:	31 f6                	xor    esi,esi
c0022e41:	e9 16 ff ff ff       	jmp    c0022d5c <__divdi3+0x58>
c0022e46:	66 90                	xchg   ax,ax
c0022e48:	31 c9                	xor    ecx,ecx
c0022e4a:	e9 0d ff ff ff       	jmp    c0022d5c <__divdi3+0x58>
c0022e4f:	90                   	nop

c0022e50 <__moddi3>:
c0022e50:	55                   	push   ebp
c0022e51:	57                   	push   edi
c0022e52:	56                   	push   esi
c0022e53:	53                   	push   ebx
c0022e54:	83 ec 2c             	sub    esp,0x2c
c0022e57:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022e5b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022e5f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022e63:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022e67:	85 db                	test   ebx,ebx
c0022e69:	0f 88 85 00 00 00    	js     c0022ef4 <__moddi3+0xa4>
c0022e6f:	89 de                	mov    esi,ebx
c0022e71:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022e79:	89 d7                	mov    edi,edx
c0022e7b:	85 d2                	test   edx,edx
c0022e7d:	79 09                	jns    c0022e88 <__moddi3+0x38>
c0022e7f:	f7 d8                	neg    eax
c0022e81:	83 d2 00             	adc    edx,0x0
c0022e84:	f7 da                	neg    edx
c0022e86:	89 d7                	mov    edi,edx
c0022e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e8c:	89 cd                	mov    ebp,ecx
c0022e8e:	85 ff                	test   edi,edi
c0022e90:	75 52                	jne    c0022ee4 <__moddi3+0x94>
c0022e92:	89 c3                	mov    ebx,eax
c0022e94:	39 f0                	cmp    eax,esi
c0022e96:	76 24                	jbe    c0022ebc <__moddi3+0x6c>
c0022e98:	89 c8                	mov    eax,ecx
c0022e9a:	89 f2                	mov    edx,esi
c0022e9c:	f7 f3                	div    ebx
c0022e9e:	89 d6                	mov    esi,edx
c0022ea0:	89 f0                	mov    eax,esi
c0022ea2:	31 d2                	xor    edx,edx
c0022ea4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ea8:	85 c9                	test   ecx,ecx
c0022eaa:	74 07                	je     c0022eb3 <__moddi3+0x63>
c0022eac:	f7 d8                	neg    eax
c0022eae:	83 d2 00             	adc    edx,0x0
c0022eb1:	f7 da                	neg    edx
c0022eb3:	83 c4 2c             	add    esp,0x2c
c0022eb6:	5b                   	pop    ebx
c0022eb7:	5e                   	pop    esi
c0022eb8:	5f                   	pop    edi
c0022eb9:	5d                   	pop    ebp
c0022eba:	c3                   	ret    
c0022ebb:	90                   	nop
c0022ebc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022ec0:	85 db                	test   ebx,ebx
c0022ec2:	75 0d                	jne    c0022ed1 <__moddi3+0x81>
c0022ec4:	b8 01 00 00 00       	mov    eax,0x1
c0022ec9:	31 d2                	xor    edx,edx
c0022ecb:	f7 f7                	div    edi
c0022ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ed1:	89 f0                	mov    eax,esi
c0022ed3:	31 d2                	xor    edx,edx
c0022ed5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ed9:	f7 f7                	div    edi
c0022edb:	89 e8                	mov    eax,ebp
c0022edd:	f7 f7                	div    edi
c0022edf:	89 d6                	mov    esi,edx
c0022ee1:	eb bd                	jmp    c0022ea0 <__moddi3+0x50>
c0022ee3:	90                   	nop
c0022ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022ee8:	39 f7                	cmp    edi,esi
c0022eea:	76 20                	jbe    c0022f0c <__moddi3+0xbc>
c0022eec:	89 c8                	mov    eax,ecx
c0022eee:	89 f2                	mov    edx,esi
c0022ef0:	eb b2                	jmp    c0022ea4 <__moddi3+0x54>
c0022ef2:	66 90                	xchg   ax,ax
c0022ef4:	f7 d9                	neg    ecx
c0022ef6:	83 d3 00             	adc    ebx,0x0
c0022ef9:	f7 db                	neg    ebx
c0022efb:	89 de                	mov    esi,ebx
c0022efd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022f05:	e9 6f ff ff ff       	jmp    c0022e79 <__moddi3+0x29>
c0022f0a:	66 90                	xchg   ax,ax
c0022f0c:	0f bd c7             	bsr    eax,edi
c0022f0f:	83 f0 1f             	xor    eax,0x1f
c0022f12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022f16:	75 24                	jne    c0022f3c <__moddi3+0xec>
c0022f18:	39 f7                	cmp    edi,esi
c0022f1a:	72 06                	jb     c0022f22 <__moddi3+0xd2>
c0022f1c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022f20:	77 0c                	ja     c0022f2e <__moddi3+0xde>
c0022f22:	89 e9                	mov    ecx,ebp
c0022f24:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022f28:	19 fe                	sbb    esi,edi
c0022f2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022f2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f32:	89 f2                	mov    edx,esi
c0022f34:	e9 6b ff ff ff       	jmp    c0022ea4 <__moddi3+0x54>
c0022f39:	8d 76 00             	lea    esi,[esi+0x0]
c0022f3c:	b8 20 00 00 00       	mov    eax,0x20
c0022f41:	89 c2                	mov    edx,eax
c0022f43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022f47:	29 da                	sub    edx,ebx
c0022f49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022f4d:	88 d9                	mov    cl,bl
c0022f4f:	d3 e7                	shl    edi,cl
c0022f51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f55:	88 d1                	mov    cl,dl
c0022f57:	d3 e8                	shr    eax,cl
c0022f59:	09 c7                	or     edi,eax
c0022f5b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022f5f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f63:	89 d8                	mov    eax,ebx
c0022f65:	88 d9                	mov    cl,bl
c0022f67:	d3 e7                	shl    edi,cl
c0022f69:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022f6d:	89 f3                	mov    ebx,esi
c0022f6f:	88 d1                	mov    cl,dl
c0022f71:	d3 eb                	shr    ebx,cl
c0022f73:	89 c7                	mov    edi,eax
c0022f75:	88 c1                	mov    cl,al
c0022f77:	d3 e6                	shl    esi,cl
c0022f79:	89 e8                	mov    eax,ebp
c0022f7b:	88 d1                	mov    cl,dl
c0022f7d:	d3 e8                	shr    eax,cl
c0022f7f:	09 f0                	or     eax,esi
c0022f81:	89 f9                	mov    ecx,edi
c0022f83:	d3 e5                	shl    ebp,cl
c0022f85:	89 da                	mov    edx,ebx
c0022f87:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022f8b:	89 d3                	mov    ebx,edx
c0022f8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022f91:	89 c6                	mov    esi,eax
c0022f93:	89 d1                	mov    ecx,edx
c0022f95:	39 d3                	cmp    ebx,edx
c0022f97:	72 27                	jb     c0022fc0 <__moddi3+0x170>
c0022f99:	74 21                	je     c0022fbc <__moddi3+0x16c>
c0022f9b:	29 f5                	sub    ebp,esi
c0022f9d:	19 cb                	sbb    ebx,ecx
c0022f9f:	89 de                	mov    esi,ebx
c0022fa1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022fa5:	d3 e6                	shl    esi,cl
c0022fa7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022fab:	89 f9                	mov    ecx,edi
c0022fad:	d3 ed                	shr    ebp,cl
c0022faf:	09 ee                	or     esi,ebp
c0022fb1:	89 f0                	mov    eax,esi
c0022fb3:	d3 eb                	shr    ebx,cl
c0022fb5:	89 da                	mov    edx,ebx
c0022fb7:	e9 e8 fe ff ff       	jmp    c0022ea4 <__moddi3+0x54>
c0022fbc:	39 c5                	cmp    ebp,eax
c0022fbe:	73 db                	jae    c0022f9b <__moddi3+0x14b>
c0022fc0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022fc4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022fc8:	89 d1                	mov    ecx,edx
c0022fca:	89 c6                	mov    esi,eax
c0022fcc:	eb cd                	jmp    c0022f9b <__moddi3+0x14b>
c0022fce:	66 90                	xchg   ax,ax

c0022fd0 <__udivdi3>:
c0022fd0:	55                   	push   ebp
c0022fd1:	57                   	push   edi
c0022fd2:	56                   	push   esi
c0022fd3:	53                   	push   ebx
c0022fd4:	83 ec 1c             	sub    esp,0x1c
c0022fd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022fdb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022fdf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022fe3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fe7:	85 d2                	test   edx,edx
c0022fe9:	75 41                	jne    c002302c <__udivdi3+0x5c>
c0022feb:	39 f7                	cmp    edi,esi
c0022fed:	76 15                	jbe    c0023004 <__udivdi3+0x34>
c0022fef:	89 e8                	mov    eax,ebp
c0022ff1:	89 f2                	mov    edx,esi
c0022ff3:	f7 f7                	div    edi
c0022ff5:	31 db                	xor    ebx,ebx
c0022ff7:	89 da                	mov    edx,ebx
c0022ff9:	83 c4 1c             	add    esp,0x1c
c0022ffc:	5b                   	pop    ebx
c0022ffd:	5e                   	pop    esi
c0022ffe:	5f                   	pop    edi
c0022fff:	5d                   	pop    ebp
c0023000:	c3                   	ret    
c0023001:	8d 76 00             	lea    esi,[esi+0x0]
c0023004:	89 f9                	mov    ecx,edi
c0023006:	85 ff                	test   edi,edi
c0023008:	75 0b                	jne    c0023015 <__udivdi3+0x45>
c002300a:	b8 01 00 00 00       	mov    eax,0x1
c002300f:	31 d2                	xor    edx,edx
c0023011:	f7 f7                	div    edi
c0023013:	89 c1                	mov    ecx,eax
c0023015:	31 d2                	xor    edx,edx
c0023017:	89 f0                	mov    eax,esi
c0023019:	f7 f1                	div    ecx
c002301b:	89 c3                	mov    ebx,eax
c002301d:	89 e8                	mov    eax,ebp
c002301f:	f7 f1                	div    ecx
c0023021:	89 da                	mov    edx,ebx
c0023023:	83 c4 1c             	add    esp,0x1c
c0023026:	5b                   	pop    ebx
c0023027:	5e                   	pop    esi
c0023028:	5f                   	pop    edi
c0023029:	5d                   	pop    ebp
c002302a:	c3                   	ret    
c002302b:	90                   	nop
c002302c:	39 f2                	cmp    edx,esi
c002302e:	77 1c                	ja     c002304c <__udivdi3+0x7c>
c0023030:	0f bd da             	bsr    ebx,edx
c0023033:	83 f3 1f             	xor    ebx,0x1f
c0023036:	75 24                	jne    c002305c <__udivdi3+0x8c>
c0023038:	39 f2                	cmp    edx,esi
c002303a:	72 08                	jb     c0023044 <__udivdi3+0x74>
c002303c:	39 ef                	cmp    edi,ebp
c002303e:	0f 87 84 00 00 00    	ja     c00230c8 <__udivdi3+0xf8>
c0023044:	b8 01 00 00 00       	mov    eax,0x1
c0023049:	eb ac                	jmp    c0022ff7 <__udivdi3+0x27>
c002304b:	90                   	nop
c002304c:	31 db                	xor    ebx,ebx
c002304e:	31 c0                	xor    eax,eax
c0023050:	89 da                	mov    edx,ebx
c0023052:	83 c4 1c             	add    esp,0x1c
c0023055:	5b                   	pop    ebx
c0023056:	5e                   	pop    esi
c0023057:	5f                   	pop    edi
c0023058:	5d                   	pop    ebp
c0023059:	c3                   	ret    
c002305a:	66 90                	xchg   ax,ax
c002305c:	b8 20 00 00 00       	mov    eax,0x20
c0023061:	29 d8                	sub    eax,ebx
c0023063:	88 d9                	mov    cl,bl
c0023065:	d3 e2                	shl    edx,cl
c0023067:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002306b:	89 fa                	mov    edx,edi
c002306d:	88 c1                	mov    cl,al
c002306f:	d3 ea                	shr    edx,cl
c0023071:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023075:	09 d1                	or     ecx,edx
c0023077:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002307b:	88 d9                	mov    cl,bl
c002307d:	d3 e7                	shl    edi,cl
c002307f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023083:	89 f7                	mov    edi,esi
c0023085:	88 c1                	mov    cl,al
c0023087:	d3 ef                	shr    edi,cl
c0023089:	88 d9                	mov    cl,bl
c002308b:	d3 e6                	shl    esi,cl
c002308d:	89 ea                	mov    edx,ebp
c002308f:	88 c1                	mov    cl,al
c0023091:	d3 ea                	shr    edx,cl
c0023093:	09 d6                	or     esi,edx
c0023095:	89 f0                	mov    eax,esi
c0023097:	89 fa                	mov    edx,edi
c0023099:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002309d:	89 d7                	mov    edi,edx
c002309f:	89 c6                	mov    esi,eax
c00230a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00230a5:	39 d7                	cmp    edi,edx
c00230a7:	72 13                	jb     c00230bc <__udivdi3+0xec>
c00230a9:	74 09                	je     c00230b4 <__udivdi3+0xe4>
c00230ab:	89 f0                	mov    eax,esi
c00230ad:	31 db                	xor    ebx,ebx
c00230af:	e9 43 ff ff ff       	jmp    c0022ff7 <__udivdi3+0x27>
c00230b4:	88 d9                	mov    cl,bl
c00230b6:	d3 e5                	shl    ebp,cl
c00230b8:	39 c5                	cmp    ebp,eax
c00230ba:	73 ef                	jae    c00230ab <__udivdi3+0xdb>
c00230bc:	8d 46 ff             	lea    eax,[esi-0x1]
c00230bf:	31 db                	xor    ebx,ebx
c00230c1:	e9 31 ff ff ff       	jmp    c0022ff7 <__udivdi3+0x27>
c00230c6:	66 90                	xchg   ax,ax
c00230c8:	31 c0                	xor    eax,eax
c00230ca:	e9 28 ff ff ff       	jmp    c0022ff7 <__udivdi3+0x27>
c00230cf:	90                   	nop

c00230d0 <__umoddi3>:
c00230d0:	55                   	push   ebp
c00230d1:	57                   	push   edi
c00230d2:	56                   	push   esi
c00230d3:	53                   	push   ebx
c00230d4:	83 ec 1c             	sub    esp,0x1c
c00230d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00230e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230e7:	89 da                	mov    edx,ebx
c00230e9:	85 c0                	test   eax,eax
c00230eb:	75 37                	jne    c0023124 <__umoddi3+0x54>
c00230ed:	39 df                	cmp    edi,ebx
c00230ef:	76 13                	jbe    c0023104 <__umoddi3+0x34>
c00230f1:	89 f0                	mov    eax,esi
c00230f3:	f7 f7                	div    edi
c00230f5:	89 d0                	mov    eax,edx
c00230f7:	31 d2                	xor    edx,edx
c00230f9:	83 c4 1c             	add    esp,0x1c
c00230fc:	5b                   	pop    ebx
c00230fd:	5e                   	pop    esi
c00230fe:	5f                   	pop    edi
c00230ff:	5d                   	pop    ebp
c0023100:	c3                   	ret    
c0023101:	8d 76 00             	lea    esi,[esi+0x0]
c0023104:	89 fd                	mov    ebp,edi
c0023106:	85 ff                	test   edi,edi
c0023108:	75 0b                	jne    c0023115 <__umoddi3+0x45>
c002310a:	b8 01 00 00 00       	mov    eax,0x1
c002310f:	31 d2                	xor    edx,edx
c0023111:	f7 f7                	div    edi
c0023113:	89 c5                	mov    ebp,eax
c0023115:	89 d8                	mov    eax,ebx
c0023117:	31 d2                	xor    edx,edx
c0023119:	f7 f5                	div    ebp
c002311b:	89 f0                	mov    eax,esi
c002311d:	f7 f5                	div    ebp
c002311f:	89 d0                	mov    eax,edx
c0023121:	eb d4                	jmp    c00230f7 <__umoddi3+0x27>
c0023123:	90                   	nop
c0023124:	89 f1                	mov    ecx,esi
c0023126:	39 d8                	cmp    eax,ebx
c0023128:	76 0a                	jbe    c0023134 <__umoddi3+0x64>
c002312a:	89 f0                	mov    eax,esi
c002312c:	83 c4 1c             	add    esp,0x1c
c002312f:	5b                   	pop    ebx
c0023130:	5e                   	pop    esi
c0023131:	5f                   	pop    edi
c0023132:	5d                   	pop    ebp
c0023133:	c3                   	ret    
c0023134:	0f bd e8             	bsr    ebp,eax
c0023137:	83 f5 1f             	xor    ebp,0x1f
c002313a:	75 1c                	jne    c0023158 <__umoddi3+0x88>
c002313c:	39 d8                	cmp    eax,ebx
c002313e:	72 04                	jb     c0023144 <__umoddi3+0x74>
c0023140:	39 f7                	cmp    edi,esi
c0023142:	77 08                	ja     c002314c <__umoddi3+0x7c>
c0023144:	89 da                	mov    edx,ebx
c0023146:	29 fe                	sub    esi,edi
c0023148:	19 c2                	sbb    edx,eax
c002314a:	89 f1                	mov    ecx,esi
c002314c:	89 c8                	mov    eax,ecx
c002314e:	83 c4 1c             	add    esp,0x1c
c0023151:	5b                   	pop    ebx
c0023152:	5e                   	pop    esi
c0023153:	5f                   	pop    edi
c0023154:	5d                   	pop    ebp
c0023155:	c3                   	ret    
c0023156:	66 90                	xchg   ax,ax
c0023158:	ba 20 00 00 00       	mov    edx,0x20
c002315d:	29 ea                	sub    edx,ebp
c002315f:	89 e9                	mov    ecx,ebp
c0023161:	d3 e0                	shl    eax,cl
c0023163:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023167:	89 f8                	mov    eax,edi
c0023169:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002316d:	88 d1                	mov    cl,dl
c002316f:	d3 e8                	shr    eax,cl
c0023171:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023175:	09 c1                	or     ecx,eax
c0023177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002317b:	89 e9                	mov    ecx,ebp
c002317d:	d3 e7                	shl    edi,cl
c002317f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023183:	89 d8                	mov    eax,ebx
c0023185:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023189:	88 d1                	mov    cl,dl
c002318b:	d3 e8                	shr    eax,cl
c002318d:	89 c7                	mov    edi,eax
c002318f:	89 e9                	mov    ecx,ebp
c0023191:	d3 e3                	shl    ebx,cl
c0023193:	89 f0                	mov    eax,esi
c0023195:	88 d1                	mov    cl,dl
c0023197:	d3 e8                	shr    eax,cl
c0023199:	09 d8                	or     eax,ebx
c002319b:	89 e9                	mov    ecx,ebp
c002319d:	d3 e6                	shl    esi,cl
c002319f:	89 f3                	mov    ebx,esi
c00231a1:	89 fa                	mov    edx,edi
c00231a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00231a7:	89 d1                	mov    ecx,edx
c00231a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00231ad:	89 c6                	mov    esi,eax
c00231af:	89 d7                	mov    edi,edx
c00231b1:	39 d1                	cmp    ecx,edx
c00231b3:	72 27                	jb     c00231dc <__umoddi3+0x10c>
c00231b5:	74 21                	je     c00231d8 <__umoddi3+0x108>
c00231b7:	89 ca                	mov    edx,ecx
c00231b9:	29 f3                	sub    ebx,esi
c00231bb:	19 fa                	sbb    edx,edi
c00231bd:	89 d0                	mov    eax,edx
c00231bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00231c3:	d3 e0                	shl    eax,cl
c00231c5:	89 e9                	mov    ecx,ebp
c00231c7:	d3 eb                	shr    ebx,cl
c00231c9:	09 d8                	or     eax,ebx
c00231cb:	d3 ea                	shr    edx,cl
c00231cd:	83 c4 1c             	add    esp,0x1c
c00231d0:	5b                   	pop    ebx
c00231d1:	5e                   	pop    esi
c00231d2:	5f                   	pop    edi
c00231d3:	5d                   	pop    ebp
c00231d4:	c3                   	ret    
c00231d5:	8d 76 00             	lea    esi,[esi+0x0]
c00231d8:	39 c3                	cmp    ebx,eax
c00231da:	73 db                	jae    c00231b7 <__umoddi3+0xe7>
c00231dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00231e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00231e4:	89 d7                	mov    edi,edx
c00231e6:	89 c6                	mov    esi,eax
c00231e8:	eb cd                	jmp    c00231b7 <__umoddi3+0xe7>

Disassembly of section .init:

c00231ea <_init>:
c00231ea:	55                   	push   ebp
c00231eb:	89 e5                	mov    ebp,esp
c00231ed:	e8 26 cf fd ff       	call   c0000118 <frame_dummy>
c00231f2:	e8 e5 fa ff ff       	call   c0022cdc <__do_global_ctors_aux>
c00231f7:	5d                   	pop    ebp
c00231f8:	c3                   	ret    

Disassembly of section .fini:

c00231f9 <_fini>:
c00231f9:	55                   	push   ebp
c00231fa:	89 e5                	mov    ebp,esp
c00231fc:	e8 a7 ce fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0023201:	5d                   	pop    ebp
c0023202:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0023204 <Computer::~Computer()>:
c0023204:	83 ec 0c             	sub    esp,0xc
c0023207:	ba 80 49 02 c0       	mov    edx,0xc0024980
c002320c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023210:	89 10                	mov    DWORD PTR [eax],edx
c0023212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023216:	83 ec 0c             	sub    esp,0xc
c0023219:	50                   	push   eax
c002321a:	e8 1d b3 fe ff       	call   c000e53c <Device::~Device()>
c002321f:	83 c4 10             	add    esp,0x10
c0023222:	90                   	nop
c0023223:	83 c4 0c             	add    esp,0xc
c0023226:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0023228 <Computer::~Computer()>:
c0023228:	83 ec 0c             	sub    esp,0xc
c002322b:	83 ec 0c             	sub    esp,0xc
c002322e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023232:	e8 cd ff ff ff       	call   c0023204 <Computer::~Computer()>
c0023237:	83 c4 10             	add    esp,0x10
c002323a:	83 ec 08             	sub    esp,0x8
c002323d:	68 ec 01 00 00       	push   0x1ec
c0023242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023246:	e8 cf 9d fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c002324b:	83 c4 10             	add    esp,0x10
c002324e:	83 c4 0c             	add    esp,0xc
c0023251:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0023252 <idleCommon()>:
c0023252:	83 ec 0c             	sub    esp,0xc
c0023255:	fa                   	cli    
c0023256:	ff 05 28 a1 02 c0    	inc    DWORD PTR ds:0xc002a128
c002325c:	e8 db 5c ff ff       	call   c0018f3c <schedule()>
c0023261:	a1 28 a1 02 c0       	mov    eax,ds:0xc002a128
c0023266:	48                   	dec    eax
c0023267:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c002326c:	75 01                	jne    c002326f <idleCommon()+0x1d>
c002326e:	fb                   	sti    
c002326f:	83 c4 0c             	add    esp,0xc
c0023272:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0023274 <LinkedList<UnixFile>::~LinkedList()>:
c0023274:	90                   	nop
c0023275:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0023276 <LinkedList<UnixFile>::LinkedList()>:
c0023276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002327a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023284:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002328b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002328f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002329a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00232a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00232ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232b6:	90                   	nop
c00232b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00232b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00232b8:	83 ec 0c             	sub    esp,0xc
c00232bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00232c0:	75 10                	jne    c00232d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00232c2:	83 ec 0c             	sub    esp,0xc
c00232c5:	68 50 4d 02 c0       	push   0xc0024d50
c00232ca:	e8 0e 1f ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00232cf:	83 c4 10             	add    esp,0x10
c00232d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00232d8:	85 c0                	test   eax,eax
c00232da:	74 34                	je     c0023310 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00232dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232e3:	85 c0                	test   eax,eax
c00232e5:	74 29                	je     c0023310 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00232e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00232f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023304:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023307:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002330e:	eb 65                	jmp    c0023375 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023314:	8b 00                	mov    eax,DWORD PTR [eax]
c0023316:	85 c0                	test   eax,eax
c0023318:	75 4b                	jne    c0023365 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002331a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002331e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023321:	85 c0                	test   eax,eax
c0023323:	75 40                	jne    c0023365 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0023325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023329:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002332d:	89 10                	mov    DWORD PTR [eax],edx
c002332f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023333:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023337:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002333e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023341:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002334f:	85 c0                	test   eax,eax
c0023351:	74 22                	je     c0023375 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023353:	83 ec 0c             	sub    esp,0xc
c0023356:	68 72 4d 02 c0       	push   0xc0024d72
c002335b:	e8 7d 1e ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023360:	83 c4 10             	add    esp,0x10
c0023363:	eb 10                	jmp    c0023375 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023365:	83 ec 0c             	sub    esp,0xc
c0023368:	68 7c 4d 02 c0       	push   0xc0024d7c
c002336d:	e8 6b 1e ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023372:	83 c4 10             	add    esp,0x10
c0023375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023379:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002337c:	8d 50 01             	lea    edx,[eax+0x1]
c002337f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023383:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023386:	90                   	nop
c0023387:	83 c4 0c             	add    esp,0xc
c002338a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002338c <LinkedList<UnixFile>::getFirstElement()>:
c002338c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023390:	8b 00                	mov    eax,DWORD PTR [eax]
c0023392:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0023394 <LinkedList<UnixFile>::removeFirst()>:
c0023394:	83 ec 0c             	sub    esp,0xc
c0023397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002339b:	8b 00                	mov    eax,DWORD PTR [eax]
c002339d:	85 c0                	test   eax,eax
c002339f:	75 12                	jne    c00233b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00233a1:	83 ec 0c             	sub    esp,0xc
c00233a4:	68 88 4d 02 c0       	push   0xc0024d88
c00233a9:	e8 2f 1e ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00233ae:	83 c4 10             	add    esp,0x10
c00233b1:	eb 7e                	jmp    c0023431 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00233b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233bd:	85 c0                	test   eax,eax
c00233bf:	74 10                	je     c00233d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00233c1:	83 ec 0c             	sub    esp,0xc
c00233c4:	68 d3 4d 02 c0       	push   0xc0024dd3
c00233c9:	e8 0f 1e ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00233ce:	83 c4 10             	add    esp,0x10
c00233d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00233d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233da:	85 c0                	test   eax,eax
c00233dc:	75 33                	jne    c0023411 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00233de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00233f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233fa:	83 f8 01             	cmp    eax,0x1
c00233fd:	74 21                	je     c0023420 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00233ff:	83 ec 0c             	sub    esp,0xc
c0023402:	68 ac 4d 02 c0       	push   0xc0024dac
c0023407:	e8 d1 1d ff ff       	call   c00151dd <Krnl::panic(char const*)>
c002340c:	83 c4 10             	add    esp,0x10
c002340f:	eb 0f                	jmp    c0023420 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023415:	8b 00                	mov    eax,DWORD PTR [eax]
c0023417:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002341a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341e:	89 10                	mov    DWORD PTR [eax],edx
c0023420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023424:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023427:	8d 50 ff             	lea    edx,[eax-0x1]
c002342a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002342e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023431:	83 c4 0c             	add    esp,0xc
c0023434:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0023436 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0023436:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002343a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002343d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002343e <DriverlessDevice::~DriverlessDevice()>:
c002343e:	ba fc 55 02 c0       	mov    edx,0xc00255fc
c0023443:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023447:	89 10                	mov    DWORD PTR [eax],edx
c0023449:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002344d:	50                   	push   eax
c002344e:	e8 e9 b0 fe ff       	call   c000e53c <Device::~Device()>
c0023453:	83 c4 04             	add    esp,0x4
c0023456:	90                   	nop
c0023457:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0023458 <DriverlessDevice::~DriverlessDevice()>:
c0023458:	83 ec 0c             	sub    esp,0xc
c002345b:	83 ec 0c             	sub    esp,0xc
c002345e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023462:	e8 d7 ff ff ff       	call   c002343e <DriverlessDevice::~DriverlessDevice()>
c0023467:	83 c4 10             	add    esp,0x10
c002346a:	83 ec 08             	sub    esp,0x8
c002346d:	68 58 01 00 00       	push   0x158
c0023472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023476:	e8 9f 9b fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c002347b:	83 c4 10             	add    esp,0x10
c002347e:	83 c4 0c             	add    esp,0xc
c0023481:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0023482 <LinkedList<Device>::addElement(Device*)>:
c0023482:	83 ec 0c             	sub    esp,0xc
c0023485:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002348a:	75 10                	jne    c002349c <LinkedList<Device>::addElement(Device*)+0x1a>
c002348c:	83 ec 0c             	sub    esp,0xc
c002348f:	68 50 4d 02 c0       	push   0xc0024d50
c0023494:	e8 44 1d ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023499:	83 c4 10             	add    esp,0x10
c002349c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00234a2:	85 c0                	test   eax,eax
c00234a4:	74 3a                	je     c00234e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c00234a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234ad:	85 c0                	test   eax,eax
c00234af:	74 2f                	je     c00234e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c00234b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00234c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00234cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00234de:	eb 68                	jmp    c0023548 <LinkedList<Device>::addElement(Device*)+0xc6>
c00234e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00234e6:	85 c0                	test   eax,eax
c00234e8:	75 4e                	jne    c0023538 <LinkedList<Device>::addElement(Device*)+0xb6>
c00234ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234f1:	85 c0                	test   eax,eax
c00234f3:	75 43                	jne    c0023538 <LinkedList<Device>::addElement(Device*)+0xb6>
c00234f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234fd:	89 10                	mov    DWORD PTR [eax],edx
c00234ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023503:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023507:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002350a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002350e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023511:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002351b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002351f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023522:	85 c0                	test   eax,eax
c0023524:	74 22                	je     c0023548 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023526:	83 ec 0c             	sub    esp,0xc
c0023529:	68 72 4d 02 c0       	push   0xc0024d72
c002352e:	e8 aa 1c ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023533:	83 c4 10             	add    esp,0x10
c0023536:	eb 10                	jmp    c0023548 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023538:	83 ec 0c             	sub    esp,0xc
c002353b:	68 7c 4d 02 c0       	push   0xc0024d7c
c0023540:	e8 98 1c ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023545:	83 c4 10             	add    esp,0x10
c0023548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002354f:	8d 50 01             	lea    edx,[eax+0x1]
c0023552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023556:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023559:	90                   	nop
c002355a:	83 c4 0c             	add    esp,0xc
c002355d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002355e <LinkedList<Device>::LinkedList()>:
c002355e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023562:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002356c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023577:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002357e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023582:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002358c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023597:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002359e:	90                   	nop
c002359f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00235a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00235a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00235a6:	85 c0                	test   eax,eax
c00235a8:	75 0e                	jne    c00235b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00235aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235b1:	85 c0                	test   eax,eax
c00235b3:	75 03                	jne    c00235b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00235b5:	b0 01                	mov    al,0x1
c00235b7:	c3                   	ret    
c00235b8:	b0 00                	mov    al,0x0
c00235ba:	90                   	nop
c00235bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00235bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00235bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00235c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00235c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00235c4:	83 ec 0c             	sub    esp,0xc
c00235c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00235cd:	85 c0                	test   eax,eax
c00235cf:	75 17                	jne    c00235e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00235d1:	83 ec 0c             	sub    esp,0xc
c00235d4:	68 88 4d 02 c0       	push   0xc0024d88
c00235d9:	e8 ff 1b ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00235de:	83 c4 10             	add    esp,0x10
c00235e1:	e9 92 00 00 00       	jmp    c0023678 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00235e6:	66 90                	xchg   ax,ax
c00235e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00235f2:	85 c0                	test   eax,eax
c00235f4:	0f 95 c0             	setne  al
c00235f7:	84 c0                	test   al,al
c00235f9:	74 11                	je     c002360c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00235fb:	83 ec 0c             	sub    esp,0xc
c00235fe:	68 d3 4d 02 c0       	push   0xc0024dd3
c0023603:	e8 d5 1b ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023608:	83 c4 10             	add    esp,0x10
c002360b:	90                   	nop
c002360c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023610:	8b 00                	mov    eax,DWORD PTR [eax]
c0023612:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023615:	85 c0                	test   eax,eax
c0023617:	0f 94 c0             	sete   al
c002361a:	84 c0                	test   al,al
c002361c:	74 36                	je     c0023654 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c002361e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002362c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023637:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002363a:	83 f8 01             	cmp    eax,0x1
c002363d:	74 25                	je     c0023664 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002363f:	83 ec 0c             	sub    esp,0xc
c0023642:	68 ac 4d 02 c0       	push   0xc0024dac
c0023647:	e8 91 1b ff ff       	call   c00151dd <Krnl::panic(char const*)>
c002364c:	83 c4 10             	add    esp,0x10
c002364f:	eb 13                	jmp    c0023664 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023651:	8d 76 00             	lea    esi,[esi+0x0]
c0023654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023658:	8b 00                	mov    eax,DWORD PTR [eax]
c002365a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002365d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023661:	89 10                	mov    DWORD PTR [eax],edx
c0023663:	90                   	nop
c0023664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023668:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002366b:	8d 50 ff             	lea    edx,[eax-0x1]
c002366e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023672:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023675:	8d 76 00             	lea    esi,[esi+0x0]
c0023678:	83 c4 0c             	add    esp,0xc
c002367b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002367c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002367c:	83 ec 0c             	sub    esp,0xc
c002367f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023684:	75 12                	jne    c0023698 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0023686:	83 ec 0c             	sub    esp,0xc
c0023689:	68 50 4d 02 c0       	push   0xc0024d50
c002368e:	e8 4a 1b ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023693:	83 c4 10             	add    esp,0x10
c0023696:	66 90                	xchg   ax,ax
c0023698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002369c:	8b 00                	mov    eax,DWORD PTR [eax]
c002369e:	85 c0                	test   eax,eax
c00236a0:	74 36                	je     c00236d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00236a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236a9:	85 c0                	test   eax,eax
c00236ab:	74 2b                	je     c00236d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00236ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236b8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00236bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00236c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00236d4:	eb 6a                	jmp    c0023740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00236d6:	66 90                	xchg   ax,ax
c00236d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00236de:	85 c0                	test   eax,eax
c00236e0:	75 4e                	jne    c0023730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00236e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236e9:	85 c0                	test   eax,eax
c00236eb:	75 43                	jne    c0023730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00236ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236f5:	89 10                	mov    DWORD PTR [eax],edx
c00236f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023706:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023709:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023714:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023717:	85 c0                	test   eax,eax
c0023719:	74 25                	je     c0023740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002371b:	83 ec 0c             	sub    esp,0xc
c002371e:	68 72 4d 02 c0       	push   0xc0024d72
c0023723:	e8 b5 1a ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023728:	83 c4 10             	add    esp,0x10
c002372b:	eb 13                	jmp    c0023740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002372d:	8d 76 00             	lea    esi,[esi+0x0]
c0023730:	83 ec 0c             	sub    esp,0xc
c0023733:	68 7c 4d 02 c0       	push   0xc0024d7c
c0023738:	e8 a0 1a ff ff       	call   c00151dd <Krnl::panic(char const*)>
c002373d:	83 c4 10             	add    esp,0x10
c0023740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023744:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023747:	8d 50 01             	lea    edx,[eax+0x1]
c002374a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002374e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023751:	90                   	nop
c0023752:	83 c4 0c             	add    esp,0xc
c0023755:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0023758 <ACPI::~ACPI()>:
c0023758:	83 ec 0c             	sub    esp,0xc
c002375b:	ba 24 61 02 c0       	mov    edx,0xc0026124
c0023760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023764:	89 10                	mov    DWORD PTR [eax],edx
c0023766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002376a:	83 ec 0c             	sub    esp,0xc
c002376d:	50                   	push   eax
c002376e:	e8 c9 ad fe ff       	call   c000e53c <Device::~Device()>
c0023773:	83 c4 10             	add    esp,0x10
c0023776:	90                   	nop
c0023777:	83 c4 0c             	add    esp,0xc
c002377a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002377c <ACPI::~ACPI()>:
c002377c:	83 ec 0c             	sub    esp,0xc
c002377f:	83 ec 0c             	sub    esp,0xc
c0023782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023786:	e8 cd ff ff ff       	call   c0023758 <ACPI::~ACPI()>
c002378b:	83 c4 10             	add    esp,0x10
c002378e:	83 ec 08             	sub    esp,0x8
c0023791:	68 64 12 00 00       	push   0x1264
c0023796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002379a:	e8 7b 98 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c002379f:	83 c4 10             	add    esp,0x10
c00237a2:	83 c4 0c             	add    esp,0xc
c00237a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00237a8 <LinkedList<Device>::~LinkedList()>:
c00237a8:	90                   	nop
c00237a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00237ac <LinkedList<Device>::isEmpty()>:
c00237ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00237b2:	85 c0                	test   eax,eax
c00237b4:	75 0e                	jne    c00237c4 <LinkedList<Device>::isEmpty()+0x18>
c00237b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00237bd:	85 c0                	test   eax,eax
c00237bf:	75 03                	jne    c00237c4 <LinkedList<Device>::isEmpty()+0x18>
c00237c1:	b0 01                	mov    al,0x1
c00237c3:	c3                   	ret    
c00237c4:	b0 00                	mov    al,0x0
c00237c6:	90                   	nop
c00237c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00237c8 <LinkedList<Device>::getFirstElement()>:
c00237c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00237ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00237d0 <LinkedList<Device>::removeFirst()>:
c00237d0:	83 ec 0c             	sub    esp,0xc
c00237d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00237d9:	85 c0                	test   eax,eax
c00237db:	75 17                	jne    c00237f4 <LinkedList<Device>::removeFirst()+0x24>
c00237dd:	83 ec 0c             	sub    esp,0xc
c00237e0:	68 88 4d 02 c0       	push   0xc0024d88
c00237e5:	e8 f3 19 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c00237ea:	83 c4 10             	add    esp,0x10
c00237ed:	e9 92 00 00 00       	jmp    c0023884 <LinkedList<Device>::removeFirst()+0xb4>
c00237f2:	66 90                	xchg   ax,ax
c00237f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00237fb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023801:	85 c0                	test   eax,eax
c0023803:	74 13                	je     c0023818 <LinkedList<Device>::removeFirst()+0x48>
c0023805:	83 ec 0c             	sub    esp,0xc
c0023808:	68 d3 4d 02 c0       	push   0xc0024dd3
c002380d:	e8 cb 19 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023812:	83 c4 10             	add    esp,0x10
c0023815:	8d 76 00             	lea    esi,[esi+0x0]
c0023818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002381c:	8b 00                	mov    eax,DWORD PTR [eax]
c002381e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023824:	85 c0                	test   eax,eax
c0023826:	75 34                	jne    c002385c <LinkedList<Device>::removeFirst()+0x8c>
c0023828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002382c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023836:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002383d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023841:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023844:	83 f8 01             	cmp    eax,0x1
c0023847:	74 27                	je     c0023870 <LinkedList<Device>::removeFirst()+0xa0>
c0023849:	83 ec 0c             	sub    esp,0xc
c002384c:	68 ac 4d 02 c0       	push   0xc0024dac
c0023851:	e8 87 19 ff ff       	call   c00151dd <Krnl::panic(char const*)>
c0023856:	83 c4 10             	add    esp,0x10
c0023859:	eb 15                	jmp    c0023870 <LinkedList<Device>::removeFirst()+0xa0>
c002385b:	90                   	nop
c002385c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023860:	8b 00                	mov    eax,DWORD PTR [eax]
c0023862:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0023868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002386c:	89 10                	mov    DWORD PTR [eax],edx
c002386e:	66 90                	xchg   ax,ax
c0023870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023877:	8d 50 ff             	lea    edx,[eax-0x1]
c002387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002387e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023881:	8d 76 00             	lea    esi,[esi+0x0]
c0023884:	83 c4 0c             	add    esp,0xc
c0023887:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0023888 <CPU::~CPU()>:
c0023888:	83 ec 0c             	sub    esp,0xc
c002388b:	ba b4 66 02 c0       	mov    edx,0xc00266b4
c0023890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023894:	89 10                	mov    DWORD PTR [eax],edx
c0023896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002389a:	83 ec 0c             	sub    esp,0xc
c002389d:	50                   	push   eax
c002389e:	e8 99 ac fe ff       	call   c000e53c <Device::~Device()>
c00238a3:	83 c4 10             	add    esp,0x10
c00238a6:	90                   	nop
c00238a7:	83 c4 0c             	add    esp,0xc
c00238aa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00238ac <CPU::~CPU()>:
c00238ac:	83 ec 0c             	sub    esp,0xc
c00238af:	83 ec 0c             	sub    esp,0xc
c00238b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238b6:	e8 cd ff ff ff       	call   c0023888 <CPU::~CPU()>
c00238bb:	83 c4 10             	add    esp,0x10
c00238be:	83 ec 08             	sub    esp,0x8
c00238c1:	68 98 11 00 00       	push   0x1198
c00238c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238ca:	e8 4b 97 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c00238cf:	83 c4 10             	add    esp,0x10
c00238d2:	83 c4 0c             	add    esp,0xc
c00238d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00238d8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00238d8:	90                   	nop
c00238d9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00238dc <ThreadControlBlock::ThreadControlBlock()>:
c00238dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238e0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00238e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238eb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00238f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238f6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00238fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023901:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002390c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023917:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002391b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002391f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023923:	90                   	nop
c0023924:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0023928 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0023928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002392c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023936:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002393d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023941:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002394c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023956:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002395d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023961:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023968:	90                   	nop
c0023969:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002396c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002396c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023970:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023973:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023974 <Vm::_FPUState::_FPUState()>:
c0023974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023978:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002397f:	90                   	nop
c0023980:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023982 <PCI::~PCI()>:
c0023982:	83 ec 0c             	sub    esp,0xc
c0023985:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c002398a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002398e:	89 10                	mov    DWORD PTR [eax],edx
c0023990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023994:	83 ec 0c             	sub    esp,0xc
c0023997:	50                   	push   eax
c0023998:	e8 6f a5 fe ff       	call   c000df0c <Bus::~Bus()>
c002399d:	83 c4 10             	add    esp,0x10
c00239a0:	90                   	nop
c00239a1:	83 c4 0c             	add    esp,0xc
c00239a4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00239a6 <PCI::~PCI()>:
c00239a6:	83 ec 0c             	sub    esp,0xc
c00239a9:	83 ec 0c             	sub    esp,0xc
c00239ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239b0:	e8 cd ff ff ff       	call   c0023982 <PCI::~PCI()>
c00239b5:	83 c4 10             	add    esp,0x10
c00239b8:	83 ec 08             	sub    esp,0x8
c00239bb:	68 5c 01 00 00       	push   0x15c
c00239c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239c4:	e8 51 96 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c00239c9:	83 c4 10             	add    esp,0x10
c00239cc:	83 c4 0c             	add    esp,0xc
c00239cf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00239d0 <IDE::~IDE()>:
c00239d0:	83 ec 0c             	sub    esp,0xc
c00239d3:	ba a0 75 02 c0       	mov    edx,0xc00275a0
c00239d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239dc:	89 10                	mov    DWORD PTR [eax],edx
c00239de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239e2:	83 ec 0c             	sub    esp,0xc
c00239e5:	50                   	push   eax
c00239e6:	e8 69 b0 fe ff       	call   c000ea54 <HardDiskController::~HardDiskController()>
c00239eb:	83 c4 10             	add    esp,0x10
c00239ee:	90                   	nop
c00239ef:	83 c4 0c             	add    esp,0xc
c00239f2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00239f4 <IDE::~IDE()>:
c00239f4:	83 ec 0c             	sub    esp,0xc
c00239f7:	83 ec 0c             	sub    esp,0xc
c00239fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239fe:	e8 cd ff ff ff       	call   c00239d0 <IDE::~IDE()>
c0023a03:	83 c4 10             	add    esp,0x10
c0023a06:	83 ec 08             	sub    esp,0x8
c0023a09:	68 70 02 00 00       	push   0x270
c0023a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a12:	e8 03 96 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023a17:	83 c4 10             	add    esp,0x10
c0023a1a:	83 c4 0c             	add    esp,0xc
c0023a1d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023a1e <SATABus::~SATABus()>:
c0023a1e:	83 ec 0c             	sub    esp,0xc
c0023a21:	ba 6c 76 02 c0       	mov    edx,0xc002766c
c0023a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a2a:	89 10                	mov    DWORD PTR [eax],edx
c0023a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a30:	83 ec 0c             	sub    esp,0xc
c0023a33:	50                   	push   eax
c0023a34:	e8 1b b0 fe ff       	call   c000ea54 <HardDiskController::~HardDiskController()>
c0023a39:	83 c4 10             	add    esp,0x10
c0023a3c:	90                   	nop
c0023a3d:	83 c4 0c             	add    esp,0xc
c0023a40:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023a42 <SATABus::~SATABus()>:
c0023a42:	83 ec 0c             	sub    esp,0xc
c0023a45:	83 ec 0c             	sub    esp,0xc
c0023a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a4c:	e8 cd ff ff ff       	call   c0023a1e <SATABus::~SATABus()>
c0023a51:	83 c4 10             	add    esp,0x10
c0023a54:	83 ec 08             	sub    esp,0x8
c0023a57:	68 64 01 00 00       	push   0x164
c0023a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a60:	e8 b5 95 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023a65:	83 c4 10             	add    esp,0x10
c0023a68:	83 c4 0c             	add    esp,0xc
c0023a6b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023a6c <ATA::~ATA()>:
c0023a6c:	83 ec 0c             	sub    esp,0xc
c0023a6f:	ba e4 76 02 c0       	mov    edx,0xc00276e4
c0023a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a78:	89 10                	mov    DWORD PTR [eax],edx
c0023a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a7e:	83 ec 0c             	sub    esp,0xc
c0023a81:	50                   	push   eax
c0023a82:	e8 af b0 fe ff       	call   c000eb36 <PhysicalDisk::~PhysicalDisk()>
c0023a87:	83 c4 10             	add    esp,0x10
c0023a8a:	90                   	nop
c0023a8b:	83 c4 0c             	add    esp,0xc
c0023a8e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023a90 <ATA::~ATA()>:
c0023a90:	83 ec 0c             	sub    esp,0xc
c0023a93:	83 ec 0c             	sub    esp,0xc
c0023a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a9a:	e8 cd ff ff ff       	call   c0023a6c <ATA::~ATA()>
c0023a9f:	83 c4 10             	add    esp,0x10
c0023aa2:	83 ec 08             	sub    esp,0x8
c0023aa5:	68 7c 01 00 00       	push   0x17c
c0023aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023aae:	e8 67 95 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023ab3:	83 c4 10             	add    esp,0x10
c0023ab6:	83 c4 0c             	add    esp,0xc
c0023ab9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0023aba <ATAPI::~ATAPI()>:
c0023aba:	83 ec 0c             	sub    esp,0xc
c0023abd:	ba 5c 77 02 c0       	mov    edx,0xc002775c
c0023ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ac6:	89 10                	mov    DWORD PTR [eax],edx
c0023ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023acc:	83 ec 0c             	sub    esp,0xc
c0023acf:	50                   	push   eax
c0023ad0:	e8 61 b0 fe ff       	call   c000eb36 <PhysicalDisk::~PhysicalDisk()>
c0023ad5:	83 c4 10             	add    esp,0x10
c0023ad8:	90                   	nop
c0023ad9:	83 c4 0c             	add    esp,0xc
c0023adc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023ade <ATAPI::~ATAPI()>:
c0023ade:	83 ec 0c             	sub    esp,0xc
c0023ae1:	83 ec 0c             	sub    esp,0xc
c0023ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ae8:	e8 cd ff ff ff       	call   c0023aba <ATAPI::~ATAPI()>
c0023aed:	83 c4 10             	add    esp,0x10
c0023af0:	83 ec 08             	sub    esp,0x8
c0023af3:	68 84 01 00 00       	push   0x184
c0023af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023afc:	e8 19 95 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023b01:	83 c4 10             	add    esp,0x10
c0023b04:	83 c4 0c             	add    esp,0xc
c0023b07:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023b08 <SATA::~SATA()>:
c0023b08:	83 ec 0c             	sub    esp,0xc
c0023b0b:	ba 98 79 02 c0       	mov    edx,0xc0027998
c0023b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b14:	89 10                	mov    DWORD PTR [eax],edx
c0023b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b1a:	83 ec 0c             	sub    esp,0xc
c0023b1d:	50                   	push   eax
c0023b1e:	e8 13 b0 fe ff       	call   c000eb36 <PhysicalDisk::~PhysicalDisk()>
c0023b23:	83 c4 10             	add    esp,0x10
c0023b26:	90                   	nop
c0023b27:	83 c4 0c             	add    esp,0xc
c0023b2a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023b2c <SATA::~SATA()>:
c0023b2c:	83 ec 0c             	sub    esp,0xc
c0023b2f:	83 ec 0c             	sub    esp,0xc
c0023b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b36:	e8 cd ff ff ff       	call   c0023b08 <SATA::~SATA()>
c0023b3b:	83 c4 10             	add    esp,0x10
c0023b3e:	83 ec 08             	sub    esp,0x8
c0023b41:	68 7c 01 00 00       	push   0x17c
c0023b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b4a:	e8 cb 94 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023b4f:	83 c4 10             	add    esp,0x10
c0023b52:	83 c4 0c             	add    esp,0xc
c0023b55:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023b56 <SATAPI::~SATAPI()>:
c0023b56:	83 ec 0c             	sub    esp,0xc
c0023b59:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0023b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b62:	89 10                	mov    DWORD PTR [eax],edx
c0023b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b68:	83 ec 0c             	sub    esp,0xc
c0023b6b:	50                   	push   eax
c0023b6c:	e8 c5 af fe ff       	call   c000eb36 <PhysicalDisk::~PhysicalDisk()>
c0023b71:	83 c4 10             	add    esp,0x10
c0023b74:	90                   	nop
c0023b75:	83 c4 0c             	add    esp,0xc
c0023b78:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0023b7a <SATAPI::~SATAPI()>:
c0023b7a:	83 ec 0c             	sub    esp,0xc
c0023b7d:	83 ec 0c             	sub    esp,0xc
c0023b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b84:	e8 cd ff ff ff       	call   c0023b56 <SATAPI::~SATAPI()>
c0023b89:	83 c4 10             	add    esp,0x10
c0023b8c:	83 ec 08             	sub    esp,0x8
c0023b8f:	68 84 01 00 00       	push   0x184
c0023b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b98:	e8 7d 94 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023b9d:	83 c4 10             	add    esp,0x10
c0023ba0:	83 c4 0c             	add    esp,0xc
c0023ba3:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023ba4 <AVX::~AVX()>:
c0023ba4:	83 ec 0c             	sub    esp,0xc
c0023ba7:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0023bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bb0:	89 10                	mov    DWORD PTR [eax],edx
c0023bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bb6:	83 ec 0c             	sub    esp,0xc
c0023bb9:	50                   	push   eax
c0023bba:	e8 fd af fe ff       	call   c000ebbc <FPU::~FPU()>
c0023bbf:	83 c4 10             	add    esp,0x10
c0023bc2:	90                   	nop
c0023bc3:	83 c4 0c             	add    esp,0xc
c0023bc6:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023bc8 <AVX::~AVX()>:
c0023bc8:	83 ec 0c             	sub    esp,0xc
c0023bcb:	83 ec 0c             	sub    esp,0xc
c0023bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bd2:	e8 cd ff ff ff       	call   c0023ba4 <AVX::~AVX()>
c0023bd7:	83 c4 10             	add    esp,0x10
c0023bda:	83 ec 08             	sub    esp,0x8
c0023bdd:	68 58 01 00 00       	push   0x158
c0023be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023be6:	e8 2f 94 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023beb:	83 c4 10             	add    esp,0x10
c0023bee:	83 c4 0c             	add    esp,0xc
c0023bf1:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023bf4 <MMX::~MMX()>:
c0023bf4:	83 ec 0c             	sub    esp,0xc
c0023bf7:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0023bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c00:	89 10                	mov    DWORD PTR [eax],edx
c0023c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c06:	83 ec 0c             	sub    esp,0xc
c0023c09:	50                   	push   eax
c0023c0a:	e8 ad af fe ff       	call   c000ebbc <FPU::~FPU()>
c0023c0f:	83 c4 10             	add    esp,0x10
c0023c12:	90                   	nop
c0023c13:	83 c4 0c             	add    esp,0xc
c0023c16:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023c18 <MMX::~MMX()>:
c0023c18:	83 ec 0c             	sub    esp,0xc
c0023c1b:	83 ec 0c             	sub    esp,0xc
c0023c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c22:	e8 cd ff ff ff       	call   c0023bf4 <MMX::~MMX()>
c0023c27:	83 c4 10             	add    esp,0x10
c0023c2a:	83 ec 08             	sub    esp,0x8
c0023c2d:	68 58 01 00 00       	push   0x158
c0023c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c36:	e8 df 93 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023c3b:	83 c4 10             	add    esp,0x10
c0023c3e:	83 c4 0c             	add    esp,0xc
c0023c41:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023c44 <SSE::~SSE()>:
c0023c44:	83 ec 0c             	sub    esp,0xc
c0023c47:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0023c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c50:	89 10                	mov    DWORD PTR [eax],edx
c0023c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c56:	83 ec 0c             	sub    esp,0xc
c0023c59:	50                   	push   eax
c0023c5a:	e8 5d af fe ff       	call   c000ebbc <FPU::~FPU()>
c0023c5f:	83 c4 10             	add    esp,0x10
c0023c62:	90                   	nop
c0023c63:	83 c4 0c             	add    esp,0xc
c0023c66:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023c68 <SSE::~SSE()>:
c0023c68:	83 ec 0c             	sub    esp,0xc
c0023c6b:	83 ec 0c             	sub    esp,0xc
c0023c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c72:	e8 cd ff ff ff       	call   c0023c44 <SSE::~SSE()>
c0023c77:	83 c4 10             	add    esp,0x10
c0023c7a:	83 ec 08             	sub    esp,0x8
c0023c7d:	68 58 01 00 00       	push   0x158
c0023c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c86:	e8 8f 93 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023c8b:	83 c4 10             	add    esp,0x10
c0023c8e:	83 c4 0c             	add    esp,0xc
c0023c91:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023c92 <x87::~x87()>:
c0023c92:	83 ec 0c             	sub    esp,0xc
c0023c95:	ba 04 7c 02 c0       	mov    edx,0xc0027c04
c0023c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c9e:	89 10                	mov    DWORD PTR [eax],edx
c0023ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca4:	83 ec 0c             	sub    esp,0xc
c0023ca7:	50                   	push   eax
c0023ca8:	e8 0f af fe ff       	call   c000ebbc <FPU::~FPU()>
c0023cad:	83 c4 10             	add    esp,0x10
c0023cb0:	90                   	nop
c0023cb1:	83 c4 0c             	add    esp,0xc
c0023cb4:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023cb6 <x87::~x87()>:
c0023cb6:	83 ec 0c             	sub    esp,0xc
c0023cb9:	83 ec 0c             	sub    esp,0xc
c0023cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cc0:	e8 cd ff ff ff       	call   c0023c92 <x87::~x87()>
c0023cc5:	83 c4 10             	add    esp,0x10
c0023cc8:	83 ec 08             	sub    esp,0x8
c0023ccb:	68 58 01 00 00       	push   0x158
c0023cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cd4:	e8 41 93 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023cd9:	83 c4 10             	add    esp,0x10
c0023cdc:	83 c4 0c             	add    esp,0xc
c0023cdf:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023ce0 <IOAPIC::~IOAPIC()>:
c0023ce0:	83 ec 0c             	sub    esp,0xc
c0023ce3:	ba 5c 7d 02 c0       	mov    edx,0xc0027d5c
c0023ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cec:	89 10                	mov    DWORD PTR [eax],edx
c0023cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cf2:	83 ec 0c             	sub    esp,0xc
c0023cf5:	50                   	push   eax
c0023cf6:	e8 41 a8 fe ff       	call   c000e53c <Device::~Device()>
c0023cfb:	83 c4 10             	add    esp,0x10
c0023cfe:	90                   	nop
c0023cff:	83 c4 0c             	add    esp,0xc
c0023d02:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023d04 <IOAPIC::~IOAPIC()>:
c0023d04:	83 ec 0c             	sub    esp,0xc
c0023d07:	83 ec 0c             	sub    esp,0xc
c0023d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d0e:	e8 cd ff ff ff       	call   c0023ce0 <IOAPIC::~IOAPIC()>
c0023d13:	83 c4 10             	add    esp,0x10
c0023d16:	83 ec 08             	sub    esp,0x8
c0023d19:	68 68 01 00 00       	push   0x168
c0023d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d22:	e8 f3 92 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023d27:	83 c4 10             	add    esp,0x10
c0023d2a:	83 c4 0c             	add    esp,0xc
c0023d2d:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023d2e <APIC::~APIC()>:
c0023d2e:	83 ec 0c             	sub    esp,0xc
c0023d31:	ba 14 7d 02 c0       	mov    edx,0xc0027d14
c0023d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d3a:	89 10                	mov    DWORD PTR [eax],edx
c0023d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d40:	83 ec 0c             	sub    esp,0xc
c0023d43:	50                   	push   eax
c0023d44:	e8 5f b3 fe ff       	call   c000f0a8 <InterruptController::~InterruptController()>
c0023d49:	83 c4 10             	add    esp,0x10
c0023d4c:	90                   	nop
c0023d4d:	83 c4 0c             	add    esp,0xc
c0023d50:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023d52 <APIC::~APIC()>:
c0023d52:	83 ec 0c             	sub    esp,0xc
c0023d55:	83 ec 0c             	sub    esp,0xc
c0023d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d5c:	e8 cd ff ff ff       	call   c0023d2e <APIC::~APIC()>
c0023d61:	83 c4 10             	add    esp,0x10
c0023d64:	83 ec 08             	sub    esp,0x8
c0023d67:	68 58 21 00 00       	push   0x2158
c0023d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d70:	e8 a5 92 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023d75:	83 c4 10             	add    esp,0x10
c0023d78:	83 c4 0c             	add    esp,0xc
c0023d7b:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023d7c <PIC::~PIC()>:
c0023d7c:	83 ec 0c             	sub    esp,0xc
c0023d7f:	ba ac 7d 02 c0       	mov    edx,0xc0027dac
c0023d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d88:	89 10                	mov    DWORD PTR [eax],edx
c0023d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d8e:	83 ec 0c             	sub    esp,0xc
c0023d91:	50                   	push   eax
c0023d92:	e8 11 b3 fe ff       	call   c000f0a8 <InterruptController::~InterruptController()>
c0023d97:	83 c4 10             	add    esp,0x10
c0023d9a:	90                   	nop
c0023d9b:	83 c4 0c             	add    esp,0xc
c0023d9e:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023da0 <PIC::~PIC()>:
c0023da0:	83 ec 0c             	sub    esp,0xc
c0023da3:	83 ec 0c             	sub    esp,0xc
c0023da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023daa:	e8 cd ff ff ff       	call   c0023d7c <PIC::~PIC()>
c0023daf:	83 c4 10             	add    esp,0x10
c0023db2:	83 ec 08             	sub    esp,0x8
c0023db5:	68 58 21 00 00       	push   0x2158
c0023dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dbe:	e8 57 92 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023dc3:	83 c4 10             	add    esp,0x10
c0023dc6:	83 c4 0c             	add    esp,0xc
c0023dc9:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023dcc <APICTimer::~APICTimer()>:
c0023dcc:	83 ec 0c             	sub    esp,0xc
c0023dcf:	ba 00 7e 02 c0       	mov    edx,0xc0027e00
c0023dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dd8:	89 10                	mov    DWORD PTR [eax],edx
c0023dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dde:	83 ec 0c             	sub    esp,0xc
c0023de1:	50                   	push   eax
c0023de2:	e8 f1 d1 fe ff       	call   c0010fd8 <Timer::~Timer()>
c0023de7:	83 c4 10             	add    esp,0x10
c0023dea:	90                   	nop
c0023deb:	83 c4 0c             	add    esp,0xc
c0023dee:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023df0 <APICTimer::~APICTimer()>:
c0023df0:	83 ec 0c             	sub    esp,0xc
c0023df3:	83 ec 0c             	sub    esp,0xc
c0023df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dfa:	e8 cd ff ff ff       	call   c0023dcc <APICTimer::~APICTimer()>
c0023dff:	83 c4 10             	add    esp,0x10
c0023e02:	83 ec 08             	sub    esp,0x8
c0023e05:	68 60 01 00 00       	push   0x160
c0023e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e0e:	e8 07 92 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023e13:	83 c4 10             	add    esp,0x10
c0023e16:	83 c4 0c             	add    esp,0xc
c0023e19:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023e1c <PIT::~PIT()>:
c0023e1c:	83 ec 0c             	sub    esp,0xc
c0023e1f:	ba 50 7e 02 c0       	mov    edx,0xc0027e50
c0023e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e28:	89 10                	mov    DWORD PTR [eax],edx
c0023e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e2e:	83 ec 0c             	sub    esp,0xc
c0023e31:	50                   	push   eax
c0023e32:	e8 a1 d1 fe ff       	call   c0010fd8 <Timer::~Timer()>
c0023e37:	83 c4 10             	add    esp,0x10
c0023e3a:	90                   	nop
c0023e3b:	83 c4 0c             	add    esp,0xc
c0023e3e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023e40 <PIT::~PIT()>:
c0023e40:	83 ec 0c             	sub    esp,0xc
c0023e43:	83 ec 0c             	sub    esp,0xc
c0023e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e4a:	e8 cd ff ff ff       	call   c0023e1c <PIT::~PIT()>
c0023e4f:	83 c4 10             	add    esp,0x10
c0023e52:	83 ec 08             	sub    esp,0x8
c0023e55:	68 5c 01 00 00       	push   0x15c
c0023e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e5e:	e8 b7 91 fe ff       	call   c000d01a <operator delete(void*, unsigned long)>
c0023e63:	83 c4 10             	add    esp,0x10
c0023e66:	83 c4 0c             	add    esp,0xc
c0023e69:	c3                   	ret    
