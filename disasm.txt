
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b9 11 02 00       	call   c00211de <_init>
c0000025:	c3                   	ret    
c0000026:	bb 62 1e 02 c0       	mov    ebx,0xc0021e62
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 70 1e 02 c0    	cmp    ebx,0xc0021e70
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 5e 02 c0       	mov    eax,0xc0025ed8
c0000049:	3d d8 5e 02 c0       	cmp    eax,0xc0025ed8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 5e 02 c0       	push   0xc0025ed8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 5e 02 c0       	mov    eax,0xc0025ed8
c0000075:	2d d8 5e 02 c0       	sub    eax,0xc0025ed8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 5e 02 c0       	push   0xc0025ed8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 60 02 c0 00 	cmp    BYTE PTR ds:0xc0026060,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 78 1e 02 c0       	mov    ebx,0xc0021e78
c00000bb:	81 eb 74 1e 02 c0    	sub    ebx,0xc0021e74
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 74 1e 02 c0       	mov    esi,0xc0021e74
c00000ca:	a1 64 60 02 c0       	mov    eax,ds:0xc0026064
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 60 02 c0       	mov    ds:0xc0026064,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 60 02 c0       	mov    eax,ds:0xc0026064
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 5e 02 c0       	push   0xc0025ed8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 60 02 c0 01 	mov    BYTE PTR ds:0xc0026060,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 60 02 c0       	push   0xc0026068
c000012c:	68 d8 5e 02 c0       	push   0xc0025ed8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 64 75 01 00       	call   c001783c <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 78 c5 00 00       	call   c000c868 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 42 75 01 00       	call   c001783c <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 0b 7a 01 00       	call   c0017d24 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 4e 80 01 00       	call   c0018370 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 b0 64 02 c0 	lgdtd  ds:0xc00264b0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 06 e3 00 00       	call   c000e81d <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 80 60 02 c0       	mov    ds:0xc0026080,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 80 60 02 c0    	mov    DWORD PTR ds:0xc0026080,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 80 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026080
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 80 1e 02 c0 02 	test   BYTE PTR [edx-0x3ffde180],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 80 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde180],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 80 1e 02 c0 08 	test   BYTE PTR [edx-0x3ffde180],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 80 1e 02 c0 04 	test   BYTE PTR [ebx-0x3ffde180],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 80 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde180],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d a0 60 02 c0    	mov    ecx,DWORD PTR ds:0xc00260a0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d a0 60 02 c0    	mov    DWORD PTR ds:0xc00260a0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 a4 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9f5c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 a4 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f5c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d a0 60 02 c0    	mov    DWORD PTR ds:0xc00260a0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 cc 60 02 c0    	cmp    DWORD PTR ds:0xc00260cc,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d dc 60 02 c0    	mov    ecx,DWORD PTR ds:0xc00260dc
c0000d6c:	c7 42 0c d4 60 02 c0 	mov    DWORD PTR [edx+0xc],0xc00260d4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 dc 60 02 c0    	mov    DWORD PTR ds:0xc00260dc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 cc 60 02 c0    	mov    DWORD PTR ds:0xc00260cc,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 a0 60 02 c0 02 	test   BYTE PTR ds:0xc00260a0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d a0 60 02 c0    	mov    edi,DWORD PTR ds:0xc00260a0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 a4 60 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9f5c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 a4 60 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9f5c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 d4 60 02 c0 	lea    edx,[eax*8-0x3ffd9f2c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c00010ee:	81 fb d4 60 02 c0    	cmp    ebx,0xc00260d4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d d4 60 02 c0       	cmp    eax,0xc00260d4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d d0 60 02 c0    	cmp    DWORD PTR ds:0xc00260d0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 dc 60 02 c0       	mov    ds:0xc00260dc,eax
c000112a:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c000112f:	a3 d0 60 02 c0       	mov    ds:0xc00260d0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 d4 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc00260d4
c000113d:	c7 40 0c d4 60 02 c0 	mov    DWORD PTR [eax+0xc],0xc00260d4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 d4 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc00260d4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 98 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f68]
c000118e:	8b 14 95 a0 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f60]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 a0 60 02 c0 	lea    ecx,[edx*4-0x3ffd9f60]
c00011a9:	8b 14 95 a0 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f60]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd d4 63 02 c0 	or     DWORD PTR [edi*4-0x3ffd9c2c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 d4 60 02 c0 	lea    eax,[eax*8-0x3ffd9f2c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d dc 60 02 c0    	mov    DWORD PTR ds:0xc00260dc,ecx
c0001263:	89 0d e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,ecx
c0001269:	c7 41 08 d4 60 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00260d4
c0001270:	c7 41 0c d4 60 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00260d4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd cc 60 02 c0 	lea    edx,[ecx*8-0x3ffd9f34]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d d4 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c2c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d d4 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c2c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 cc 60 02 c0 	lea    edx,[eax*4-0x3ffd9f34]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d d4 63 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9c2c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d dc 60 02 c0    	mov    DWORD PTR ds:0xc00260dc,edi
c0001336:	89 3d e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edi
c000133c:	c7 47 08 d4 60 02 c0 	mov    DWORD PTR [edi+0x8],0xc00260d4
c0001343:	c7 47 0c d4 60 02 c0 	mov    DWORD PTR [edi+0xc],0xc00260d4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d d0 60 02 c0    	mov    DWORD PTR ds:0xc00260d0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 cc 60 02 c0       	mov    eax,ds:0xc00260cc
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d cc 60 02 c0    	mov    DWORD PTR ds:0xc00260cc,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba a0 60 02 c0       	mov    edx,0xc00260a0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d a0 60 02 c0 00 	cmp    DWORD PTR ds:0xc00260a0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d f4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263f4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 f4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263f4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d f4 63 02 c0    	mov    DWORD PTR ds:0xc00263f4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 cc 60 02 c0    	cmp    DWORD PTR ds:0xc00260cc,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d cc 60 02 c0    	mov    DWORD PTR ds:0xc00260cc,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d a0 60 02 c0 00 	cmp    DWORD PTR ds:0xc00260a0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 fc 63 02 c0    	push   DWORD PTR ds:0xc00263fc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d a0 60 02 c0 00 	cmp    DWORD PTR ds:0xc00260a0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 fc 63 02 c0       	mov    eax,ds:0xc00263fc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d cc 60 02 c0 00 	cmp    DWORD PTR ds:0xc00260cc,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 cc 60 02 c0       	mov    eax,ds:0xc00260cc
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 a4 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f5c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 d4 60 02 c0       	mov    eax,0xc00260d4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d cc 63 02 c0       	cmp    eax,0xc00263cc
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 f0 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263f0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 04 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026404
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 14 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026414
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 a0 60 02 c0       	mov    eax,0xc00260a0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 84 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde07c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 a0 60 02 c0       	mov    eax,ds:0xc00260a0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 a0 60 02 c0       	mov    ds:0xc00260a0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d e4 63 02 c0    	mov    DWORD PTR ds:0xc00263e4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d e8 63 02 c0    	mov    DWORD PTR ds:0xc00263e8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ec 63 02 c0    	mov    DWORD PTR ds:0xc00263ec,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 f4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263f4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 00 7b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8500]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 4e 95 01 00       	jmp    c001b074 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 00 7b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8500]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 80 95 01 00       	jmp    c001b0bc <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 00 7b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8500]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 a9 95 01 00       	jmp    c001b104 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 86 f1 01 00       	call   c0020fc4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 a0 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddf60]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 a0 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddf60]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba c4 4b 02 c0       	mov    edx,0xc0024bc4
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba cc 20 02 c0       	mov    edx,0xc00220cc
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba b0 20 02 c0       	mov    edx,0xc00220b0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 40 64 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9bc0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 20 64 02 c0    	mov    ax,ds:0xc0026420
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 20 64 02 c0    	mov    ds:0xc0026420,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 83 df 01 00       	call   c0020fc4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 d2 20 02 c0       	mov    eax,0xc00220d2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 20 20 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffddfe0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 db 20 02 c0       	mov    eax,0xc00220db
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 a0 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddf60]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 4e c9 01 00       	call   c0020fc4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba b0 20 02 c0       	mov    edx,0xc00220b0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 40 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9bc0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 40 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9bc0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 15 b3 01 00       	call   c0020fc4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 fb b2 01 00       	call   c0020fc4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 f7 1f 02 c0       	mov    eax,0xc0021ff7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 f0 1f 02 c0       	mov    eax,0xc0021ff0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 94 9e 01 00       	call   c0020fc4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 40 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9bc0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be e0 1f 02 c0       	mov    esi,0xc0021fe0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 08 98 01 00       	call   c0020fc4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba c0 1f 02 c0       	mov    edx,0xc0021fc0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba d0 1f 02 c0       	mov    edx,0xc0021fd0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba e2 20 02 c0       	mov    edx,0xc00220e2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ee 20 02 c0       	mov    edx,0xc00220ee
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 02 21 02 c0       	mov    edx,0xc0022102
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 20 24 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022420
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 20 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022420
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 20 22 02 c0       	mov    eax,0xc0022220
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 60 21 02 c0       	mov    eax,0xc0022160
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 20 21 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddee0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000888b:	48                   	dec    eax
c000888c:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00088a2:	48                   	dec    eax
c00088a3:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c00088b3:	ff 05 64 79 02 c0    	inc    DWORD PTR ds:0xc0027964
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00088c2:	48                   	dec    eax
c00088c3:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 60 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027960,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c00088dd:	e8 ae f6 00 00       	call   c0017f90 <schedule()>
c00088e2:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00088e7:	48                   	dec    eax
c00088e8:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 d0 65 02 c0       	mov    eax,ds:0xc00265d0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 20 25 02 c0       	push   0xc0022520
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 a8 64 02 c0       	mov    eax,0xc00264a8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 29 25 02 c0       	push   0xc0022529
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 c4 0f 02 c0       	mov    eax,0xc0020fc4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 33 25 02 c0       	push   0xc0022533
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 f8 0c 02 c0       	mov    eax,0xc0020cf8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 3c 25 02 c0       	push   0xc002253c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 c4 10 02 c0       	mov    eax,0xc00210c4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 46 25 02 c0       	push   0xc0022546
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 44 0e 02 c0       	mov    eax,0xc0020e44
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 4f 25 02 c0       	push   0xc002254f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 ac 64 02 c0       	mov    eax,0xc00264ac
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 5c 25 02 c0       	push   0xc002255c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 ad 64 02 c0       	mov    eax,0xc00264ad
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 87 56 00 00       	call   c000e0cc <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 69 25 02 c0       	push   0xc0022569
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 80 25 02 c0 	mov    DWORD PTR [esp],0xc0022580
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c0008aa2:	68 99 25 02 c0       	push   0xc0022599
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 bd f0 00 00       	call   c0017b6c <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 b0 f2 00 00       	call   c0017d74 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 b8 87 01 c0       	push   0xc00187b8
c0008acd:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c0008ad3:	e8 9c f2 00 00       	call   c0017d74 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0008ae0:	68 40 27 02 c0       	push   0xc0022740
c0008ae5:	c6 05 ad 64 02 c0 01 	mov    BYTE PTR ds:0xc00264ad,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 9d 00 01 00       	call   c0018b93 <Vm::initialise8086()>
c0008af6:	e8 97 43 00 00       	call   c000ce92 <Fs::initVFS()>
c0008afb:	c7 04 24 a6 25 02 c0 	mov    DWORD PTR [esp],0xc00225a6
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 40 27 02 c0       	push   0xc0022740
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 aa d8 00 00       	call   c00163da <Sys::loadSyscalls()>
c0008b30:	e8 7f b7 00 00       	call   c00142b4 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 c0 25 02 c0       	push   0xc00225c0
c0008b3f:	68 c9 25 02 c0       	push   0xc00225c9
c0008b44:	e8 54 c6 00 00       	call   c001519d <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 33 4e 00 00       	call   c000d984 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 64 27 02 c0 	mov    DWORD PTR [esp],0xc0022764
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 1e 55 00 00       	call   c000e08c <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 d1 25 02 c0 	mov    DWORD PTR [esp],0xc00225d1
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 9d b2 00 00       	call   c0013e1c <Krnl::startCPUs()>
c0008b7f:	c7 04 24 eb 25 02 c0 	mov    DWORD PTR [esp],0xc00225eb
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 fc 25 02 c0       	push   0xc00225fc
c0008b9a:	e8 0b ea 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 33 ec 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 d3 f5 00 00       	call   c0018188 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 18 26 02 c0       	push   0xc0022618
c0008bc9:	50                   	push   eax
c0008bca:	e8 77 55 00 00       	call   c000e146 <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 14 28 02 c0       	mov    edx,0xc0022814
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 c1 64 02 c0 04 	test   BYTE PTR ds:0xc00264c1,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 23 7f 01 00       	call   c0020c86 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 80 9f 00 00       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 59 9f 00 00       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 37 9f 00 00       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 15 9f 00 00       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 c0 64 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00264c0,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 23 9e 00 00       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 fe 9d 00 00       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 8d 7d 01 00       	call   c0020c40 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 4a 7d 01 00       	call   c0020c20 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 1a 9e 00 00       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 21 26 02 c0       	push   0xc0022621
c0008f46:	e8 72 b4 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 27 26 02 c0       	push   0xc0022627
c0008f7e:	e8 3a b4 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 84 27 02 c0       	push   0xc0022784
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 c0 64 02 c0 04 	test   BYTE PTR ds:0xc00264c0,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 80 58 02 c0 	sete   BYTE PTR ds:0xc0025880
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 2d 26 02 c0       	push   0xc002262d
c0008ff3:	e8 03 3b 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 43 26 02 c0       	push   0xc0022643
c0009004:	e8 f2 3a 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 57 26 02 c0       	push   0xc0022657
c0009012:	e8 e4 3a 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 6a 26 02 c0       	push   0xc002266a
c0009023:	e8 d3 3a 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 81 26 02 c0       	push   0xc0022681
c0009031:	e8 c5 3a 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 97 26 02 c0 	mov    DWORD PTR [esp],0xc0022697
c000903d:	e8 b9 3a 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 a9 26 02 c0 	mov    DWORD PTR [esp],0xc00226a9
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 2c 8e 00 00       	call   c0011e90 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 c3 26 02 c0 	mov    DWORD PTR [esp],0xc00226c3
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 be 4e 00 00       	call   c000df42 <Device::addChild(Device*)>
c0009084:	c7 04 24 a8 27 02 c0 	mov    DWORD PTR [esp],0xc00227a8
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 c8 27 02 c0 	mov    DWORD PTR [esp],0xc00227c8
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 dd 26 02 c0 	mov    DWORD PTR [esp],0xc00226dd
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 d1 25 02 c0 	mov    DWORD PTR [esp],0xc00225d1
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 fa 9c 00 00       	call   c0012dd6 <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 57 4e 00 00       	call   c000df42 <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 e8 27 02 c0       	push   0xc00227e8
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 cd 53 00 00       	call   c000e4de <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 1a 4e 00 00       	call   c000df42 <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 ee 26 02 c0       	push   0xc00226ee
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 32 ed 00 00       	call   c0017e88 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 09 27 02 c0       	push   0xc0022709
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 56 39 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 1a 27 02 c0       	push   0xc002271a
c00091c2:	e8 f6 b1 00 00       	call   c00143bd <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 27 27 02 c0       	push   0xc0022727
c00091d7:	e8 e1 b1 00 00       	call   c00143bd <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 31 27 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022731
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 ca b1 00 00       	jmp    c00143bd <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 b2 64 02 c0       	mov    ds:0xc00264b2,eax
c00092af:	66 89 15 b0 64 02 c0 	mov    WORD PTR ds:0xc00264b0,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00093c6:	48                   	dec    eax
c00093c7:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 a8 64 02 c0    	push   DWORD PTR ds:0xc00264a8
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 29 7e 01 00       	call   c0021246 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 20 7e 01 00       	call   c0021246 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 b8 64 02 c0 ff 07 	mov    WORD PTR ds:0xc00264b8,0x7ff
c0009519:	a3 ba 64 02 c0       	mov    ds:0xc00264ba,eax
c000951e:	0f 01 1d b8 64 02 c0 	lidtd  ds:0xc00264b8
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c0009810:	e8 bd 26 00 00       	call   c000bed2 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 39 18 00 00       	call   c000b06c <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 6e 18 00 00       	call   c000b0b0 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 38 28 02 c0       	push   0xc0022838
c000989d:	e8 59 32 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 0c 57 02 c0       	mov    eax,ds:0xc002570c
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 d0 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265d0
c00098cc:	8b 3d 0c 57 02 c0    	mov    edi,DWORD PTR ds:0xc002570c
c00098d2:	e8 22 05 00 00       	call   c0009df9 <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 ec 24 00 00       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 0c 57 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002570c,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 0c 57 02 c0       	mov    eax,ds:0xc002570c
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 64 28 02 c0       	push   0xc0022864
c0009918:	e8 de 31 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 56 28 02 c0       	push   0xc0022856
c0009937:	e8 81 aa 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 5b 28 02 c0       	push   0xc002285b
c000994d:	e8 6b aa 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000996d:	48                   	dec    eax
c000996e:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c000998b:	e8 42 25 00 00       	call   c000bed2 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c00099a1:	e8 d6 21 00 00       	call   c000bb7c <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 94 28 02 c0       	push   0xc0022894
c0009ace:	e8 28 30 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 94 0a 00 00       	call   c000a56c <installVgaTextImplementation()>
c0009ad8:	0f b6 05 20 57 02 c0 	movzx  eax,BYTE PTR ds:0xc0025720
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 20 57 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda8e0]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 56 57 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda8aa],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 55 57 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda8ab]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 20 57 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda8e0]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 ac 28 02 c0       	push   0xc00228ac
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 c0 64 02 c0       	mov    ds:0xc00264c0,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 f8 03 00 00       	call   c0009f78 <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 63 1d 00 00       	call   c000b8e8 <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 14 1e 00 00       	call   c000b9a4 <VAS::VAS()>
c0009b90:	89 1d d0 65 02 c0    	mov    DWORD PTR ds:0xc00265d0,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 a8 64 02 c0    	mov    DWORD PTR ds:0xc00264a8,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 88 20 00 00       	call   c000bc54 <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 28             	sub    esp,0x28
c0009bde:	68 cb 28 02 c0       	push   0xc00228cb
c0009be3:	e8 13 2f 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009bec:	83 c4 10             	add    esp,0x10
c0009bef:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009bf5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009bfd:	c1 ef 0c             	shr    edi,0xc
c0009c00:	31 c0                	xor    eax,eax
c0009c02:	eb 19                	jmp    c0009c1d <Phys::allocateDMA(unsigned long)+0x4a>
c0009c04:	85 c0                	test   eax,eax
c0009c06:	75 06                	jne    c0009c0e <Phys::allocateDMA(unsigned long)+0x3b>
c0009c08:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009c0c:	89 dd                	mov    ebp,ebx
c0009c0e:	8d 70 01             	lea    esi,[eax+0x1]
c0009c11:	39 f7                	cmp    edi,esi
c0009c13:	74 3f                	je     c0009c54 <Phys::allocateDMA(unsigned long)+0x81>
c0009c15:	89 f0                	mov    eax,esi
c0009c17:	43                   	inc    ebx
c0009c18:	83 fb 0f             	cmp    ebx,0xf
c0009c1b:	7f 11                	jg     c0009c2e <Phys::allocateDMA(unsigned long)+0x5b>
c0009c1d:	80 bb dc 64 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9b24],0x0
c0009c24:	74 de                	je     c0009c04 <Phys::allocateDMA(unsigned long)+0x31>
c0009c26:	31 c0                	xor    eax,eax
c0009c28:	43                   	inc    ebx
c0009c29:	83 fb 0f             	cmp    ebx,0xf
c0009c2c:	7e ef                	jle    c0009c1d <Phys::allocateDMA(unsigned long)+0x4a>
c0009c2e:	83 ec 0c             	sub    esp,0xc
c0009c31:	68 ff 28 02 c0       	push   0xc00228ff
c0009c36:	e8 c0 2e 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009c3b:	c7 04 24 bc 29 02 c0 	mov    DWORD PTR [esp],0xc00229bc
c0009c42:	e8 76 a7 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0009c47:	83 c4 10             	add    esp,0x10
c0009c4a:	31 c0                	xor    eax,eax
c0009c4c:	83 c4 1c             	add    esp,0x1c
c0009c4f:	5b                   	pop    ebx
c0009c50:	5e                   	pop    esi
c0009c51:	5f                   	pop    edi
c0009c52:	5d                   	pop    ebp
c0009c53:	c3                   	ret    
c0009c54:	89 e9                	mov    ecx,ebp
c0009c56:	c1 f9 04             	sar    ecx,0x4
c0009c59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009c5d:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009c61:	89 ca                	mov    edx,ecx
c0009c63:	4a                   	dec    edx
c0009c64:	79 03                	jns    c0009c69 <Phys::allocateDMA(unsigned long)+0x96>
c0009c66:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009c69:	c1 fa 04             	sar    edx,0x4
c0009c6c:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009c70:	74 08                	je     c0009c7a <Phys::allocateDMA(unsigned long)+0xa7>
c0009c72:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009c76:	31 c0                	xor    eax,eax
c0009c78:	eb ae                	jmp    c0009c28 <Phys::allocateDMA(unsigned long)+0x55>
c0009c7a:	85 f6                	test   esi,esi
c0009c7c:	74 15                	je     c0009c93 <Phys::allocateDMA(unsigned long)+0xc0>
c0009c7e:	8d 95 dc 64 02 c0    	lea    edx,[ebp-0x3ffd9b24]
c0009c84:	8d 84 05 dd 64 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9b23]
c0009c8b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c8e:	42                   	inc    edx
c0009c8f:	39 d0                	cmp    eax,edx
c0009c91:	75 f8                	jne    c0009c8b <Phys::allocateDMA(unsigned long)+0xb8>
c0009c93:	83 ec 0c             	sub    esp,0xc
c0009c96:	01 3d d4 64 02 c0    	add    DWORD PTR ds:0xc00264d4,edi
c0009c9c:	68 e4 28 02 c0       	push   0xc00228e4
c0009ca1:	e8 55 2e 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009ca6:	83 c4 10             	add    esp,0x10
c0009ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cad:	85 c0                	test   eax,eax
c0009caf:	74 23                	je     c0009cd4 <Phys::allocateDMA(unsigned long)+0x101>
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	68 fb 28 02 c0       	push   0xc00228fb
c0009cb9:	e8 3d 2e 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009cbe:	c7 04 24 bc 29 02 c0 	mov    DWORD PTR [esp],0xc00229bc
c0009cc5:	e8 f3 a6 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0009cca:	83 c4 10             	add    esp,0x10
c0009ccd:	89 f0                	mov    eax,esi
c0009ccf:	e9 43 ff ff ff       	jmp    c0009c17 <Phys::allocateDMA(unsigned long)+0x44>
c0009cd4:	c1 e5 0c             	shl    ebp,0xc
c0009cd7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009cdd:	e9 6a ff ff ff       	jmp    c0009c4c <Phys::allocateDMA(unsigned long)+0x79>

c0009ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ce2:	83 ec 18             	sub    esp,0x18
c0009ce5:	68 03 29 02 c0       	push   0xc0022903
c0009cea:	e8 0c 2e 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009cef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cf3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cfd:	c1 ea 0c             	shr    edx,0xc
c0009d00:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009d05:	29 15 d4 64 02 c0    	sub    DWORD PTR ds:0xc00264d4,edx
c0009d0b:	c1 e8 0c             	shr    eax,0xc
c0009d0e:	83 c4 10             	add    esp,0x10
c0009d11:	85 d2                	test   edx,edx
c0009d13:	74 0f                	je     c0009d24 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009d15:	05 dc 64 02 c0       	add    eax,0xc00264dc
c0009d1a:	01 c2                	add    edx,eax
c0009d1c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009d1f:	40                   	inc    eax
c0009d20:	39 d0                	cmp    eax,edx
c0009d22:	75 f8                	jne    c0009d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009d24:	83 c4 0c             	add    esp,0xc
c0009d27:	c3                   	ret    

c0009d28 <Phys::setPageState(unsigned long, bool)>:
c0009d28:	56                   	push   esi
c0009d29:	ba 01 00 00 00       	mov    edx,0x1
c0009d2e:	53                   	push   ebx
c0009d2f:	8b 35 64 58 02 c0    	mov    esi,DWORD PTR ds:0xc0025864
c0009d35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d3d:	89 c8                	mov    eax,ecx
c0009d3f:	83 e1 07             	and    ecx,0x7
c0009d42:	c1 e8 03             	shr    eax,0x3
c0009d45:	d3 e3                	shl    ebx,cl
c0009d47:	01 c6                	add    esi,eax
c0009d49:	d3 e2                	shl    edx,cl
c0009d4b:	f7 d2                	not    edx
c0009d4d:	20 16                	and    BYTE PTR [esi],dl
c0009d4f:	03 05 64 58 02 c0    	add    eax,DWORD PTR ds:0xc0025864
c0009d55:	08 18                	or     BYTE PTR [eax],bl
c0009d57:	5b                   	pop    ebx
c0009d58:	5e                   	pop    esi
c0009d59:	c3                   	ret    

c0009d5a <Phys::getPageState(unsigned long)>:
c0009d5a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d5e:	8b 15 64 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025864
c0009d64:	89 c8                	mov    eax,ecx
c0009d66:	83 e1 07             	and    ecx,0x7
c0009d69:	c1 e8 03             	shr    eax,0x3
c0009d6c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d70:	d3 f8                	sar    eax,cl
c0009d72:	83 e0 01             	and    eax,0x1
c0009d75:	c3                   	ret    

c0009d76 <Phys::freePage(unsigned long)>:
c0009d76:	53                   	push   ebx
c0009d77:	83 ec 10             	sub    esp,0x10
c0009d7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d7e:	53                   	push   ebx
c0009d7f:	68 19 29 02 c0       	push   0xc0022919
c0009d84:	e8 72 2d 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009d89:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d97:	76 3d                	jbe    c0009dd6 <Phys::freePage(unsigned long)+0x60>
c0009d99:	83 ec 0c             	sub    esp,0xc
c0009d9c:	c1 eb 0c             	shr    ebx,0xc
c0009d9f:	53                   	push   ebx
c0009da0:	e8 b5 ff ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009da5:	83 c4 10             	add    esp,0x10
c0009da8:	84 c0                	test   al,al
c0009daa:	74 19                	je     c0009dc5 <Phys::freePage(unsigned long)+0x4f>
c0009dac:	83 ec 08             	sub    esp,0x8
c0009daf:	ff 0d d4 64 02 c0    	dec    DWORD PTR ds:0xc00264d4
c0009db5:	6a 00                	push   0x0
c0009db7:	53                   	push   ebx
c0009db8:	e8 6b ff ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009dbd:	83 c4 10             	add    esp,0x10
c0009dc0:	83 c4 08             	add    esp,0x8
c0009dc3:	5b                   	pop    ebx
c0009dc4:	c3                   	ret    
c0009dc5:	c7 44 24 10 43 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022943
c0009dcd:	83 c4 08             	add    esp,0x8
c0009dd0:	5b                   	pop    ebx
c0009dd1:	e9 e7 a5 00 00       	jmp    c00143bd <Krnl::panic(char const*)>
c0009dd6:	83 ec 08             	sub    esp,0x8
c0009dd9:	53                   	push   ebx
c0009dda:	68 2c 29 02 c0       	push   0xc002292c
c0009ddf:	e8 17 2d 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009de4:	58                   	pop    eax
c0009de5:	5a                   	pop    edx
c0009de6:	68 00 10 00 00       	push   0x1000
c0009deb:	53                   	push   ebx
c0009dec:	e8 f1 fe ff ff       	call   c0009ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0009df1:	83 c4 10             	add    esp,0x10
c0009df4:	83 c4 08             	add    esp,0x8
c0009df7:	5b                   	pop    ebx
c0009df8:	c3                   	ret    

c0009df9 <Phys::allocatePage()>:
c0009df9:	56                   	push   esi
c0009dfa:	53                   	push   ebx
c0009dfb:	83 ec 14             	sub    esp,0x14
c0009dfe:	8b 35 c8 64 02 c0    	mov    esi,DWORD PTR ds:0xc00264c8
c0009e04:	89 f3                	mov    ebx,esi
c0009e06:	eb 0a                	jmp    c0009e12 <Phys::allocatePage()+0x19>
c0009e08:	89 1d c8 64 02 c0    	mov    DWORD PTR ds:0xc00264c8,ebx
c0009e0e:	39 de                	cmp    esi,ebx
c0009e10:	74 24                	je     c0009e36 <Phys::allocatePage()+0x3d>
c0009e12:	53                   	push   ebx
c0009e13:	e8 42 ff ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009e18:	5a                   	pop    edx
c0009e19:	84 c0                	test   al,al
c0009e1b:	74 69                	je     c0009e86 <Phys::allocatePage()+0x8d>
c0009e1d:	43                   	inc    ebx
c0009e1e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009e24:	75 e2                	jne    c0009e08 <Phys::allocatePage()+0xf>
c0009e26:	31 db                	xor    ebx,ebx
c0009e28:	c7 05 c8 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00264c8,0x0
c0009e32:	39 de                	cmp    esi,ebx
c0009e34:	75 dc                	jne    c0009e12 <Phys::allocatePage()+0x19>
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	80 35 ec 64 02 c0 01 	xor    BYTE PTR ds:0xc00264ec,0x1
c0009e40:	68 e4 29 02 c0       	push   0xc00229e4
c0009e45:	e8 b1 2c 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009e4a:	58                   	pop    eax
c0009e4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e50:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e53:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e59:	e8 2c 29 00 00       	call   c000c78a <VAS::scanForEviction()>
c0009e5e:	83 c4 10             	add    esp,0x10
c0009e61:	85 c0                	test   eax,eax
c0009e63:	75 62                	jne    c0009ec7 <Phys::allocatePage()+0xce>
c0009e65:	83 ec 0c             	sub    esp,0xc
c0009e68:	68 08 2a 02 c0       	push   0xc0022a08
c0009e6d:	e8 4b a5 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0009e72:	83 c4 10             	add    esp,0x10
c0009e75:	8b 1d c8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264c8
c0009e7b:	53                   	push   ebx
c0009e7c:	e8 d9 fe ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009e81:	5a                   	pop    edx
c0009e82:	84 c0                	test   al,al
c0009e84:	75 97                	jne    c0009e1d <Phys::allocatePage()+0x24>
c0009e86:	6a 01                	push   0x1
c0009e88:	53                   	push   ebx
c0009e89:	e8 9a fe ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009e8e:	5a                   	pop    edx
c0009e8f:	a1 d4 64 02 c0       	mov    eax,ds:0xc00264d4
c0009e94:	59                   	pop    ecx
c0009e95:	40                   	inc    eax
c0009e96:	8b 15 c8 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264c8
c0009e9c:	a3 d4 64 02 c0       	mov    ds:0xc00264d4,eax
c0009ea1:	c1 e2 0c             	shl    edx,0xc
c0009ea4:	52                   	push   edx
c0009ea5:	ff 35 d8 64 02 c0    	push   DWORD PTR ds:0xc00264d8
c0009eab:	50                   	push   eax
c0009eac:	68 59 29 02 c0       	push   0xc0022959
c0009eb1:	e8 45 2c 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009eb6:	a1 c8 64 02 c0       	mov    eax,ds:0xc00264c8
c0009ebb:	83 c4 10             	add    esp,0x10
c0009ebe:	c1 e0 0c             	shl    eax,0xc
c0009ec1:	83 c4 14             	add    esp,0x14
c0009ec4:	5b                   	pop    ebx
c0009ec5:	5e                   	pop    esi
c0009ec6:	c3                   	ret    
c0009ec7:	83 ec 08             	sub    esp,0x8
c0009eca:	89 c2                	mov    edx,eax
c0009ecc:	6a 01                	push   0x1
c0009ece:	c1 ea 0c             	shr    edx,0xc
c0009ed1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ed5:	52                   	push   edx
c0009ed6:	e8 4d fe ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ee2:	eb dd                	jmp    c0009ec1 <Phys::allocatePage()+0xc8>

c0009ee4 <Phys::allocateContiguousPages(int)>:
c0009ee4:	57                   	push   edi
c0009ee5:	56                   	push   esi
c0009ee6:	53                   	push   ebx
c0009ee7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009eeb:	fa                   	cli    
c0009eec:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0009ef2:	31 db                	xor    ebx,ebx
c0009ef4:	85 db                	test   ebx,ebx
c0009ef6:	75 11                	jne    c0009f09 <Phys::allocateContiguousPages(int)+0x25>
c0009ef8:	e8 fc fe ff ff       	call   c0009df9 <Phys::allocatePage()>
c0009efd:	83 fe 01             	cmp    esi,0x1
c0009f00:	89 c7                	mov    edi,eax
c0009f02:	74 21                	je     c0009f25 <Phys::allocateContiguousPages(int)+0x41>
c0009f04:	bb 01 00 00 00       	mov    ebx,0x1
c0009f09:	e8 eb fe ff ff       	call   c0009df9 <Phys::allocatePage()>
c0009f0e:	89 da                	mov    edx,ebx
c0009f10:	c1 e2 0c             	shl    edx,0xc
c0009f13:	01 fa                	add    edx,edi
c0009f15:	39 c2                	cmp    edx,eax
c0009f17:	74 20                	je     c0009f39 <Phys::allocateContiguousPages(int)+0x55>
c0009f19:	bb 01 00 00 00       	mov    ebx,0x1
c0009f1e:	89 c7                	mov    edi,eax
c0009f20:	83 fe 01             	cmp    esi,0x1
c0009f23:	75 e4                	jne    c0009f09 <Phys::allocateContiguousPages(int)+0x25>
c0009f25:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0009f2a:	48                   	dec    eax
c0009f2b:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0009f30:	75 01                	jne    c0009f33 <Phys::allocateContiguousPages(int)+0x4f>
c0009f32:	fb                   	sti    
c0009f33:	89 f8                	mov    eax,edi
c0009f35:	5b                   	pop    ebx
c0009f36:	5e                   	pop    esi
c0009f37:	5f                   	pop    edi
c0009f38:	c3                   	ret    
c0009f39:	43                   	inc    ebx
c0009f3a:	39 f3                	cmp    ebx,esi
c0009f3c:	75 b6                	jne    c0009ef4 <Phys::allocateContiguousPages(int)+0x10>
c0009f3e:	eb e5                	jmp    c0009f25 <Phys::allocateContiguousPages(int)+0x41>

c0009f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f40:	56                   	push   esi
c0009f41:	53                   	push   ebx
c0009f42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f46:	39 1d cc 64 02 c0    	cmp    DWORD PTR ds:0xc00264cc,ebx
c0009f4c:	73 06                	jae    c0009f54 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f4e:	89 1d cc 64 02 c0    	mov    DWORD PTR ds:0xc00264cc,ebx
c0009f54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f58:	c1 eb 0c             	shr    ebx,0xc
c0009f5b:	c1 e8 0c             	shr    eax,0xc
c0009f5e:	39 d8                	cmp    eax,ebx
c0009f60:	73 13                	jae    c0009f75 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f62:	6a 00                	push   0x0
c0009f64:	8d 70 01             	lea    esi,[eax+0x1]
c0009f67:	50                   	push   eax
c0009f68:	e8 bb fd ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009f6d:	5a                   	pop    edx
c0009f6e:	89 f0                	mov    eax,esi
c0009f70:	59                   	pop    ecx
c0009f71:	39 f3                	cmp    ebx,esi
c0009f73:	75 ed                	jne    c0009f62 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f75:	5b                   	pop    ebx
c0009f76:	5e                   	pop    esi
c0009f77:	c3                   	ret    

c0009f78 <Phys::physicalMemorySetup(unsigned int)>:
c0009f78:	55                   	push   ebp
c0009f79:	57                   	push   edi
c0009f7a:	56                   	push   esi
c0009f7b:	53                   	push   ebx
c0009f7c:	31 db                	xor    ebx,ebx
c0009f7e:	83 ec 40             	sub    esp,0x40
c0009f81:	6a 10                	push   0x10
c0009f83:	6a 00                	push   0x0
c0009f85:	68 dc 64 02 c0       	push   0xc00264dc
c0009f8a:	e8 f5 66 ff ff       	call   c0000684 <memset>
c0009f8f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f98:	05 00 10 00 00       	add    eax,0x1000
c0009f9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009fa1:	5a                   	pop    edx
c0009fa2:	59                   	pop    ecx
c0009fa3:	50                   	push   eax
c0009fa4:	68 77 29 02 c0       	push   0xc0022977
c0009fa9:	e8 4d 2b 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0009fae:	83 c4 10             	add    esp,0x10
c0009fb1:	83 ec 08             	sub    esp,0x8
c0009fb4:	6a 01                	push   0x1
c0009fb6:	53                   	push   ebx
c0009fb7:	43                   	inc    ebx
c0009fb8:	e8 6b fd ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009fbd:	83 c4 10             	add    esp,0x10
c0009fc0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009fc6:	75 e9                	jne    c0009fb1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009fc8:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fcf:	66 85 c0             	test   ax,ax
c0009fd2:	0f 84 8e 01 00 00    	je     c000a166 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fd8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fdc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009fe4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fe8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009ff9:	eb 15                	jmp    c000a010 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009ffb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fff:	83 c3 18             	add    ebx,0x18
c000a002:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a006:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a00a:	0f 84 66 01 00 00    	je     c000a176 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a010:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a013:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a016:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a019:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a01d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a021:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a023:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a026:	01 f0                	add    eax,esi
c000a028:	55                   	push   ebp
c000a029:	11 fa                	adc    edx,edi
c000a02b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a033:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a037:	56                   	push   esi
c000a038:	68 38 2a 02 c0       	push   0xc0022a38
c000a03d:	e8 b9 2a 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000a042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	09 f8                	or     eax,edi
c000a04b:	0f 85 25 01 00 00    	jne    c000a176 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a051:	4d                   	dec    ebp
c000a052:	75 a7                	jne    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a054:	ba 00 00 08 00       	mov    edx,0x80000
c000a059:	89 c1                	mov    ecx,eax
c000a05b:	39 f2                	cmp    edx,esi
c000a05d:	19 f9                	sbb    ecx,edi
c000a05f:	0f 82 a7 00 00 00    	jb     c000a10c <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a065:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a069:	89 c1                	mov    ecx,eax
c000a06b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a06f:	0f 83 97 00 00 00    	jae    c000a10c <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a075:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a07a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a07e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a082:	39 fa                	cmp    edx,edi
c000a084:	19 e8                	sbb    eax,ebp
c000a086:	0f 82 9e 01 00 00    	jb     c000a22a <Phys::physicalMemorySetup(unsigned int)+0x2b2>
c000a08c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a090:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a094:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a09a:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a09f:	83 d5 ff             	adc    ebp,0xffffffff
c000a0a2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a0ac:	39 fa                	cmp    edx,edi
c000a0ae:	89 c1                	mov    ecx,eax
c000a0b0:	19 e9                	sbb    ecx,ebp
c000a0b2:	0f 83 43 ff ff ff    	jae    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0b8:	be 00 00 08 00       	mov    esi,0x80000
c000a0bd:	57                   	push   edi
c000a0be:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a0c2:	57                   	push   edi
c000a0c3:	56                   	push   esi
c000a0c4:	68 5c 2a 02 c0       	push   0xc0022a5c
c000a0c9:	e8 2d 2a 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000a0ce:	5d                   	pop    ebp
c000a0cf:	58                   	pop    eax
c000a0d0:	57                   	push   edi
c000a0d1:	56                   	push   esi
c000a0d2:	e8 69 fe ff ff       	call   c0009f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0df:	83 c4 0c             	add    esp,0xc
c000a0e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0e6:	03 05 d8 64 02 c0    	add    eax,DWORD PTR ds:0xc00264d8
c000a0ec:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0f3:	a3 d8 64 02 c0       	mov    ds:0xc00264d8,eax
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	68 9d 29 02 c0       	push   0xc002299d
c000a0ff:	e8 f7 29 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000a104:	83 c4 10             	add    esp,0x10
c000a107:	e9 ef fe ff ff       	jmp    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a10c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a110:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a114:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a118:	39 ea                	cmp    edx,ebp
c000a11a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a11e:	0f 82 d7 fe ff ff    	jb     c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a124:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a129:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a12d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a131:	0f 83 c4 fe ff ff    	jae    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a137:	39 ee                	cmp    esi,ebp
c000a139:	89 f8                	mov    eax,edi
c000a13b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a13f:	0f 83 78 ff ff ff    	jae    c000a0bd <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a14d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a151:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a155:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a15d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a161:	e9 57 ff ff ff       	jmp    c000a0bd <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a166:	83 ec 0c             	sub    esp,0xc
c000a169:	68 8f 29 02 c0       	push   0xc002298f
c000a16e:	e8 4a a2 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000a173:	83 c4 10             	add    esp,0x10
c000a176:	bb 40 01 00 00       	mov    ebx,0x140
c000a17b:	83 ec 08             	sub    esp,0x8
c000a17e:	6a 00                	push   0x0
c000a180:	53                   	push   ebx
c000a181:	43                   	inc    ebx
c000a182:	e8 a1 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a187:	ff 05 d8 64 02 c0    	inc    DWORD PTR ds:0xc00264d8
c000a18d:	83 c4 10             	add    esp,0x10
c000a190:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a196:	75 e3                	jne    c000a17b <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a198:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a19d:	83 ec 08             	sub    esp,0x8
c000a1a0:	6a 00                	push   0x0
c000a1a2:	53                   	push   ebx
c000a1a3:	43                   	inc    ebx
c000a1a4:	e8 7f fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1a9:	ff 05 d8 64 02 c0    	inc    DWORD PTR ds:0xc00264d8
c000a1af:	83 c4 10             	add    esp,0x10
c000a1b2:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a1b8:	75 e3                	jne    c000a19d <Phys::physicalMemorySetup(unsigned int)+0x225>
c000a1ba:	83 ec 08             	sub    esp,0x8
c000a1bd:	6a 00                	push   0x0
c000a1bf:	6a 05                	push   0x5
c000a1c1:	e8 62 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1c6:	5a                   	pop    edx
c000a1c7:	59                   	pop    ecx
c000a1c8:	6a 00                	push   0x0
c000a1ca:	6a 06                	push   0x6
c000a1cc:	e8 57 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1d1:	5b                   	pop    ebx
c000a1d2:	bb 60 00 00 00       	mov    ebx,0x60
c000a1d7:	5e                   	pop    esi
c000a1d8:	6a 00                	push   0x0
c000a1da:	6a 07                	push   0x7
c000a1dc:	e8 47 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1e1:	83 05 d8 64 02 c0 03 	add    DWORD PTR ds:0xc00264d8,0x3
c000a1e8:	83 c4 10             	add    esp,0x10
c000a1eb:	83 ec 08             	sub    esp,0x8
c000a1ee:	6a 00                	push   0x0
c000a1f0:	53                   	push   ebx
c000a1f1:	43                   	inc    ebx
c000a1f2:	e8 31 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1f7:	83 c4 10             	add    esp,0x10
c000a1fa:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a200:	75 e9                	jne    c000a1eb <Phys::physicalMemorySetup(unsigned int)+0x273>
c000a202:	83 05 d8 64 02 c0 20 	add    DWORD PTR ds:0xc00264d8,0x20
c000a209:	31 db                	xor    ebx,ebx
c000a20b:	eb 0c                	jmp    c000a219 <Phys::physicalMemorySetup(unsigned int)+0x2a1>
c000a20d:	89 d8                	mov    eax,ebx
c000a20f:	c1 e0 0c             	shl    eax,0xc
c000a212:	3d 00 00 3a 00       	cmp    eax,0x3a0000
c000a217:	77 26                	ja     c000a23f <Phys::physicalMemorySetup(unsigned int)+0x2c7>
c000a219:	43                   	inc    ebx
c000a21a:	81 fb a0 86 01 00    	cmp    ebx,0x186a0
c000a220:	75 eb                	jne    c000a20d <Phys::physicalMemorySetup(unsigned int)+0x295>
c000a222:	83 c4 3c             	add    esp,0x3c
c000a225:	5b                   	pop    ebx
c000a226:	5e                   	pop    esi
c000a227:	5f                   	pop    edi
c000a228:	5d                   	pop    ebp
c000a229:	c3                   	ret    
c000a22a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a232:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a23a:	e9 4d fe ff ff       	jmp    c000a08c <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	53                   	push   ebx
c000a243:	e8 12 fb ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	84 c0                	test   al,al
c000a24d:	75 ca                	jne    c000a219 <Phys::physicalMemorySetup(unsigned int)+0x2a1>
c000a24f:	50                   	push   eax
c000a250:	50                   	push   eax
c000a251:	6a 01                	push   0x1
c000a253:	53                   	push   ebx
c000a254:	e8 cf fa ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a259:	ff 0d d8 64 02 c0    	dec    DWORD PTR ds:0xc00264d8
c000a25f:	83 c4 10             	add    esp,0x10
c000a262:	eb b5                	jmp    c000a219 <Phys::physicalMemorySetup(unsigned int)+0x2a1>

c000a264 <Pipe::isAtty()>:
c000a264:	31 c0                	xor    eax,eax
c000a266:	c3                   	ret    
c000a267:	90                   	nop

c000a268 <Pipe::~Pipe()>:
c000a268:	83 ec 0c             	sub    esp,0xc
c000a26b:	ba c8 2a 02 c0       	mov    edx,0xc0022ac8
c000a270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a274:	89 10                	mov    DWORD PTR [eax],edx
c000a276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27a:	83 ec 0c             	sub    esp,0xc
c000a27d:	50                   	push   eax
c000a27e:	e8 45 12 00 00       	call   c000b4c8 <UnixFile::~UnixFile()>
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	90                   	nop
c000a287:	83 c4 0c             	add    esp,0xc
c000a28a:	c3                   	ret    
c000a28b:	90                   	nop

c000a28c <Pipe::~Pipe()>:
c000a28c:	83 ec 0c             	sub    esp,0xc
c000a28f:	83 ec 0c             	sub    esp,0xc
c000a292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a296:	e8 cd ff ff ff       	call   c000a268 <Pipe::~Pipe()>
c000a29b:	83 c4 10             	add    esp,0x10
c000a29e:	83 ec 08             	sub    esp,0x8
c000a2a1:	6a 20                	push   0x20
c000a2a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a7:	e8 6e 27 00 00       	call   c000ca1a <operator delete(void*, unsigned long)>
c000a2ac:	83 c4 10             	add    esp,0x10
c000a2af:	83 c4 0c             	add    esp,0xc
c000a2b2:	c3                   	ret    
c000a2b3:	90                   	nop

c000a2b4 <Pipe::read(unsigned long long, void*, int*)>:
c000a2b4:	55                   	push   ebp
c000a2b5:	57                   	push   edi
c000a2b6:	56                   	push   esi
c000a2b7:	53                   	push   ebx
c000a2b8:	83 ec 1c             	sub    esp,0x1c
c000a2bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a2bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a2c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a2c7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a2ca:	89 c8                	mov    eax,ecx
c000a2cc:	99                   	cdq    
c000a2cd:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a2d1:	74 24                	je     c000a2f7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2d3:	39 f9                	cmp    ecx,edi
c000a2d5:	89 d1                	mov    ecx,edx
c000a2d7:	19 f1                	sbb    ecx,esi
c000a2d9:	73 1c                	jae    c000a2f7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2db:	fa                   	cli    
c000a2dc:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c000a2e2:	e8 a9 dc 00 00       	call   c0017f90 <schedule()>
c000a2e7:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000a2ec:	48                   	dec    eax
c000a2ed:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000a2f2:	75 d3                	jne    c000a2c7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2f4:	fb                   	sti    
c000a2f5:	eb d0                	jmp    c000a2c7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2f7:	39 f8                	cmp    eax,edi
c000a2f9:	89 d1                	mov    ecx,edx
c000a2fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a2fe:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a302:	19 f1                	sbb    ecx,esi
c000a304:	73 07                	jae    c000a30d <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a306:	89 04 24             	mov    DWORD PTR [esp],eax
c000a309:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a30d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a310:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a313:	29 f7                	sub    edi,esi
c000a315:	89 f8                	mov    eax,edi
c000a317:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a31b:	99                   	cdq    
c000a31c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a31f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a323:	19 d0                	sbb    eax,edx
c000a325:	73 07                	jae    c000a32e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a327:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a32a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a32e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a331:	89 ea                	mov    edx,ebp
c000a333:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a337:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a33c:	74 0d                	je     c000a34b <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a33e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a341:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a345:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a349:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a34b:	85 d2                	test   edx,edx
c000a34d:	74 11                	je     c000a360 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a34f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a353:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a356:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a35a:	89 d1                	mov    ecx,edx
c000a35c:	89 c7                	mov    edi,eax
c000a35e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a360:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a363:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a366:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a369:	99                   	cdq    
c000a36a:	89 f7                	mov    edi,esi
c000a36c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a36f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a373:	c1 ff 1f             	sar    edi,0x1f
c000a376:	57                   	push   edi
c000a377:	56                   	push   esi
c000a378:	52                   	push   edx
c000a379:	50                   	push   eax
c000a37a:	e8 45 6d 01 00       	call   c00210c4 <__umoddi3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a385:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a38a:	75 10                	jne    c000a39c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a38c:	83 ec 0c             	sub    esp,0xc
c000a38f:	68 85 2a 02 c0       	push   0xc0022a85
c000a394:	e8 24 a0 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3a0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a3a3:	89 10                	mov    DWORD PTR [eax],edx
c000a3a5:	83 c4 1c             	add    esp,0x1c
c000a3a8:	31 c0                	xor    eax,eax
c000a3aa:	5b                   	pop    ebx
c000a3ab:	5e                   	pop    esi
c000a3ac:	5f                   	pop    edi
c000a3ad:	5d                   	pop    ebp
c000a3ae:	c3                   	ret    
c000a3af:	90                   	nop

c000a3b0 <Pipe::write(unsigned long long, void*, int*)>:
c000a3b0:	55                   	push   ebp
c000a3b1:	57                   	push   edi
c000a3b2:	56                   	push   esi
c000a3b3:	53                   	push   ebx
c000a3b4:	83 ec 1c             	sub    esp,0x1c
c000a3b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a3bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a3bf:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a3c2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a3c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a3cd:	89 d8                	mov    eax,ebx
c000a3cf:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a3d2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a3d6:	89 d6                	mov    esi,edx
c000a3d8:	89 d7                	mov    edi,edx
c000a3da:	c1 ff 1f             	sar    edi,0x1f
c000a3dd:	03 34 24             	add    esi,DWORD PTR [esp]
c000a3e0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a3e4:	c1 f8 1f             	sar    eax,0x1f
c000a3e7:	39 f3                	cmp    ebx,esi
c000a3e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3f1:	19 f8                	sbb    eax,edi
c000a3f3:	b8 01 00 00 00       	mov    eax,0x1
c000a3f8:	72 6e                	jb     c000a468 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a3fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a3fd:	01 d0                	add    eax,edx
c000a3ff:	99                   	cdq    
c000a400:	f7 fb                	idiv   ebx
c000a402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a406:	29 d3                	sub    ebx,edx
c000a408:	89 d7                	mov    edi,edx
c000a40a:	89 de                	mov    esi,ebx
c000a40c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a40f:	c1 fb 1f             	sar    ebx,0x1f
c000a412:	39 f2                	cmp    edx,esi
c000a414:	19 d8                	sbb    eax,ebx
c000a416:	b8 00 00 00 00       	mov    eax,0x0
c000a41b:	72 04                	jb     c000a421 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a41d:	89 d0                	mov    eax,edx
c000a41f:	29 f0                	sub    eax,esi
c000a421:	89 d3                	mov    ebx,edx
c000a423:	29 c3                	sub    ebx,eax
c000a425:	74 0b                	je     c000a432 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a427:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a42a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a42e:	89 d9                	mov    ecx,ebx
c000a430:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a432:	85 c0                	test   eax,eax
c000a434:	74 0d                	je     c000a443 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a436:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a43a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a43d:	89 de                	mov    esi,ebx
c000a43f:	89 c1                	mov    ecx,eax
c000a441:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a443:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a446:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a44b:	75 10                	jne    c000a45d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a44d:	83 ec 0c             	sub    esp,0xc
c000a450:	68 a1 2a 02 c0       	push   0xc0022aa1
c000a455:	e8 63 9f 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000a45a:	83 c4 10             	add    esp,0x10
c000a45d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a461:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a464:	89 08                	mov    DWORD PTR [eax],ecx
c000a466:	31 c0                	xor    eax,eax
c000a468:	83 c4 1c             	add    esp,0x1c
c000a46b:	5b                   	pop    ebx
c000a46c:	5e                   	pop    esi
c000a46d:	5f                   	pop    edi
c000a46e:	5d                   	pop    ebp
c000a46f:	c3                   	ret    

c000a470 <Pipe::Pipe(int)>:
c000a470:	83 ec 0c             	sub    esp,0xc
c000a473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a477:	83 ec 08             	sub    esp,0x8
c000a47a:	6a 00                	push   0x0
c000a47c:	50                   	push   eax
c000a47d:	e8 64 0e 00 00       	call   c000b2e6 <UnixFile::UnixFile(int)>
c000a482:	83 c4 10             	add    esp,0x10
c000a485:	ba c8 2a 02 c0       	mov    edx,0xc0022ac8
c000a48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a48e:	89 10                	mov    DWORD PTR [eax],edx
c000a490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a494:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a498:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a49f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4aa:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a4b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a4b5:	83 ec 0c             	sub    esp,0xc
c000a4b8:	50                   	push   eax
c000a4b9:	e8 05 f5 ff ff       	call   c00099c3 <malloc>
c000a4be:	83 c4 10             	add    esp,0x10
c000a4c1:	89 c2                	mov    edx,eax
c000a4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4c7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4ce:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a4d2:	90                   	nop
c000a4d3:	83 c4 0c             	add    esp,0xc
c000a4d6:	c3                   	ret    
c000a4d7:	90                   	nop

c000a4d8 <VgaText::isAtty()>:
c000a4d8:	b0 01                	mov    al,0x1
c000a4da:	c3                   	ret    
c000a4db:	90                   	nop

c000a4dc <VgaText::~VgaText()>:
c000a4dc:	83 ec 0c             	sub    esp,0xc
c000a4df:	ba 50 2b 02 c0       	mov    edx,0xc0022b50
c000a4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4e8:	89 10                	mov    DWORD PTR [eax],edx
c000a4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4ee:	83 ec 0c             	sub    esp,0xc
c000a4f1:	50                   	push   eax
c000a4f2:	e8 d1 0f 00 00       	call   c000b4c8 <UnixFile::~UnixFile()>
c000a4f7:	83 c4 10             	add    esp,0x10
c000a4fa:	90                   	nop
c000a4fb:	83 c4 0c             	add    esp,0xc
c000a4fe:	c3                   	ret    
c000a4ff:	90                   	nop

c000a500 <VgaText::~VgaText()>:
c000a500:	83 ec 0c             	sub    esp,0xc
c000a503:	83 ec 0c             	sub    esp,0xc
c000a506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a50a:	e8 cd ff ff ff       	call   c000a4dc <VgaText::~VgaText()>
c000a50f:	83 c4 10             	add    esp,0x10
c000a512:	83 ec 08             	sub    esp,0x8
c000a515:	68 c4 02 00 00       	push   0x2c4
c000a51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a51e:	e8 f7 24 00 00       	call   c000ca1a <operator delete(void*, unsigned long)>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	83 c4 0c             	add    esp,0xc
c000a529:	c3                   	ret    

c000a52a <VgaText::read(unsigned long long, void*, int*)>:
c000a52a:	83 ec 10             	sub    esp,0x10
c000a52d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a531:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a539:	e8 4c 58 00 00       	call   c000fd8a <readKeyboard(VgaText*, char*, unsigned long)>
c000a53e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a542:	89 02                	mov    DWORD PTR [edx],eax
c000a544:	31 c0                	xor    eax,eax
c000a546:	83 c4 1c             	add    esp,0x1c
c000a549:	c3                   	ret    

c000a54a <setTerminalScrollLock(bool)>:
c000a54a:	c3                   	ret    

c000a54b <addToTerminalCycle(VgaText*)>:
c000a54b:	8b 15 20 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026520
c000a551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a555:	85 d2                	test   edx,edx
c000a557:	75 09                	jne    c000a562 <addToTerminalCycle(VgaText*)+0x17>
c000a559:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a55c:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c000a561:	c3                   	ret    
c000a562:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a565:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a568:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a56b:	c3                   	ret    

c000a56c <installVgaTextImplementation()>:
c000a56c:	83 ec 10             	sub    esp,0x10
c000a56f:	6a 20                	push   0x20
c000a571:	6a 00                	push   0x0
c000a573:	68 00 65 02 c0       	push   0xc0026500
c000a578:	e8 07 61 ff ff       	call   c0000684 <memset>
c000a57d:	83 c4 1c             	add    esp,0x1c
c000a580:	c3                   	ret    

c000a581 <scrollTerminalScrollLock(int)>:
c000a581:	c3                   	ret    

c000a582 <VgaText::updateTitle()>:
c000a582:	53                   	push   ebx
c000a583:	31 c0                	xor    eax,eax
c000a585:	83 ec 58             	sub    esp,0x58
c000a588:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a58c:	89 e1                	mov    ecx,esp
c000a58e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a592:	40                   	inc    eax
c000a593:	83 f8 50             	cmp    eax,0x50
c000a596:	75 f6                	jne    c000a58e <VgaText::updateTitle()+0xc>
c000a598:	31 c0                	xor    eax,eax
c000a59a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a5a1:	84 db                	test   bl,bl
c000a5a3:	74 06                	je     c000a5ab <VgaText::updateTitle()+0x29>
c000a5a5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a5a8:	40                   	inc    eax
c000a5a9:	eb ef                	jmp    c000a59a <VgaText::updateTitle()+0x18>
c000a5ab:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a5ae:	85 c0                	test   eax,eax
c000a5b0:	74 09                	je     c000a5bb <VgaText::updateTitle()+0x39>
c000a5b2:	53                   	push   ebx
c000a5b3:	53                   	push   ebx
c000a5b4:	51                   	push   ecx
c000a5b5:	52                   	push   edx
c000a5b6:	ff d0                	call   eax
c000a5b8:	83 c4 10             	add    esp,0x10
c000a5bb:	83 c4 58             	add    esp,0x58
c000a5be:	5b                   	pop    ebx
c000a5bf:	c3                   	ret    

c000a5c0 <VgaText::load()>:
c000a5c0:	53                   	push   ebx
c000a5c1:	31 c0                	xor    eax,eax
c000a5c3:	83 ec 58             	sub    esp,0x58
c000a5c6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a5ca:	89 e2                	mov    edx,esp
c000a5cc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a5d0:	40                   	inc    eax
c000a5d1:	83 f8 50             	cmp    eax,0x50
c000a5d4:	75 f6                	jne    c000a5cc <VgaText::load()+0xc>
c000a5d6:	31 c0                	xor    eax,eax
c000a5d8:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a5df:	84 c9                	test   cl,cl
c000a5e1:	74 06                	je     c000a5e9 <VgaText::load()+0x29>
c000a5e3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a5e6:	40                   	inc    eax
c000a5e7:	eb ef                	jmp    c000a5d8 <VgaText::load()+0x18>
c000a5e9:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a5ec:	85 c0                	test   eax,eax
c000a5ee:	74 09                	je     c000a5f9 <VgaText::load()+0x39>
c000a5f0:	51                   	push   ecx
c000a5f1:	51                   	push   ecx
c000a5f2:	52                   	push   edx
c000a5f3:	53                   	push   ebx
c000a5f4:	ff d0                	call   eax
c000a5f6:	83 c4 10             	add    esp,0x10
c000a5f9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	74 09                	je     c000a609 <VgaText::load()+0x49>
c000a600:	83 ec 0c             	sub    esp,0xc
c000a603:	53                   	push   ebx
c000a604:	ff d0                	call   eax
c000a606:	83 c4 10             	add    esp,0x10
c000a609:	83 c4 58             	add    esp,0x58
c000a60c:	5b                   	pop    ebx
c000a60d:	c3                   	ret    

c000a60e <VgaText::updateCursor()>:
c000a60e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a612:	39 05 24 65 02 c0    	cmp    DWORD PTR ds:0xc0026524,eax
c000a618:	75 09                	jne    c000a623 <VgaText::updateCursor()+0x15>
c000a61a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a61d:	85 c0                	test   eax,eax
c000a61f:	74 02                	je     c000a623 <VgaText::updateCursor()+0x15>
c000a621:	ff e0                	jmp    eax
c000a623:	c3                   	ret    

c000a624 <VgaText::doANSI_SGR(int)>:
c000a624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a62c:	85 d2                	test   edx,edx
c000a62e:	75 0b                	jne    c000a63b <VgaText::doANSI_SGR(int)+0x17>
c000a630:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a633:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a636:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a639:	eb 59                	jmp    c000a694 <VgaText::doANSI_SGR(int)+0x70>
c000a63b:	83 fa 07             	cmp    edx,0x7
c000a63e:	75 0b                	jne    c000a64b <VgaText::doANSI_SGR(int)+0x27>
c000a640:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a643:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a646:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a649:	eb 49                	jmp    c000a694 <VgaText::doANSI_SGR(int)+0x70>
c000a64b:	83 fa 1b             	cmp    edx,0x1b
c000a64e:	74 e0                	je     c000a630 <VgaText::doANSI_SGR(int)+0xc>
c000a650:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a653:	83 f9 07             	cmp    ecx,0x7
c000a656:	77 09                	ja     c000a661 <VgaText::doANSI_SGR(int)+0x3d>
c000a658:	8b 14 8d a0 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda760]
c000a65f:	eb 20                	jmp    c000a681 <VgaText::doANSI_SGR(int)+0x5d>
c000a661:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a664:	83 f9 07             	cmp    ecx,0x7
c000a667:	77 09                	ja     c000a672 <VgaText::doANSI_SGR(int)+0x4e>
c000a669:	8b 14 8d a0 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda760]
c000a670:	eb 22                	jmp    c000a694 <VgaText::doANSI_SGR(int)+0x70>
c000a672:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a675:	83 f9 07             	cmp    ecx,0x7
c000a678:	77 0b                	ja     c000a685 <VgaText::doANSI_SGR(int)+0x61>
c000a67a:	8b 14 95 58 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8a8]
c000a681:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a684:	c3                   	ret    
c000a685:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a688:	83 f9 07             	cmp    ecx,0x7
c000a68b:	77 0a                	ja     c000a697 <VgaText::doANSI_SGR(int)+0x73>
c000a68d:	8b 14 95 30 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8d0]
c000a694:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a697:	c3                   	ret    

c000a698 <VgaText::setDefaultBgColour(VgaColour)>:
c000a698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a69c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6a0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a6a3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a6a6:	c3                   	ret    
c000a6a7:	90                   	nop

c000a6a8 <VgaText::setDefaultFgColour(VgaColour)>:
c000a6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6b0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a6b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a6b6:	c3                   	ret    
c000a6b7:	90                   	nop

c000a6b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a6b8:	53                   	push   ebx
c000a6b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a6bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a6c5:	51                   	push   ecx
c000a6c6:	e8 cd ff ff ff       	call   c000a698 <VgaText::setDefaultBgColour(VgaColour)>
c000a6cb:	58                   	pop    eax
c000a6cc:	5a                   	pop    edx
c000a6cd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a6d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a6d5:	5b                   	pop    ebx
c000a6d6:	eb d0                	jmp    c000a6a8 <VgaText::setDefaultFgColour(VgaColour)>

c000a6d8 <VgaText::setTitleTextColour(VgaColour)>:
c000a6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6e0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a6e3:	e9 9a fe ff ff       	jmp    c000a582 <VgaText::updateTitle()>

c000a6e8 <VgaText::setTitleColour(VgaColour)>:
c000a6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a6f3:	e9 8a fe ff ff       	jmp    c000a582 <VgaText::updateTitle()>

c000a6f8 <VgaText::setTitle(char*)>:
c000a6f8:	53                   	push   ebx
c000a6f9:	83 ec 10             	sub    esp,0x10
c000a6fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a704:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a70a:	50                   	push   eax
c000a70b:	e8 30 60 ff ff       	call   c0000740 <strcpy>
c000a710:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a714:	83 c4 18             	add    esp,0x18
c000a717:	5b                   	pop    ebx
c000a718:	e9 65 fe ff ff       	jmp    c000a582 <VgaText::updateTitle()>
c000a71d:	90                   	nop

c000a71e <VgaText::combineColours(unsigned char, unsigned char)>:
c000a71e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a722:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a727:	83 e0 0f             	and    eax,0xf
c000a72a:	c1 e2 04             	shl    edx,0x4
c000a72d:	09 d0                	or     eax,edx
c000a72f:	c3                   	ret    

c000a730 <VgaText::scrollScreen()>:
c000a730:	55                   	push   ebp
c000a731:	b9 01 00 00 00       	mov    ecx,0x1
c000a736:	57                   	push   edi
c000a737:	56                   	push   esi
c000a738:	53                   	push   ebx
c000a739:	83 ec 0c             	sub    esp,0xc
c000a73c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a740:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a746:	31 ff                	xor    edi,edi
c000a748:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a74b:	83 f9 17             	cmp    ecx,0x17
c000a74e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a751:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a758:	75 27                	jne    c000a781 <VgaText::scrollScreen()+0x51>
c000a75a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a75d:	01 f5                	add    ebp,esi
c000a75f:	f7 c7 01 00 00 00    	test   edi,0x1
c000a765:	74 16                	je     c000a77d <VgaText::scrollScreen()+0x4d>
c000a767:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a76b:	50                   	push   eax
c000a76c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a770:	50                   	push   eax
c000a771:	e8 a8 ff ff ff       	call   c000a71e <VgaText::combineColours(unsigned char, unsigned char)>
c000a776:	5a                   	pop    edx
c000a777:	5a                   	pop    edx
c000a778:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a77b:	eb 04                	jmp    c000a781 <VgaText::scrollScreen()+0x51>
c000a77d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a781:	47                   	inc    edi
c000a782:	46                   	inc    esi
c000a783:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a789:	75 bd                	jne    c000a748 <VgaText::scrollScreen()+0x18>
c000a78b:	41                   	inc    ecx
c000a78c:	83 f9 18             	cmp    ecx,0x18
c000a78f:	75 af                	jne    c000a740 <VgaText::scrollScreen()+0x10>
c000a791:	39 1d 24 65 02 c0    	cmp    DWORD PTR ds:0xc0026524,ebx
c000a797:	75 1b                	jne    c000a7b4 <VgaText::scrollScreen()+0x84>
c000a799:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a79d:	74 05                	je     c000a7a4 <VgaText::scrollScreen()+0x74>
c000a79f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a7a2:	eb 10                	jmp    c000a7b4 <VgaText::scrollScreen()+0x84>
c000a7a4:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a7a7:	85 c0                	test   eax,eax
c000a7a9:	74 09                	je     c000a7b4 <VgaText::scrollScreen()+0x84>
c000a7ab:	83 ec 0c             	sub    esp,0xc
c000a7ae:	53                   	push   ebx
c000a7af:	ff d0                	call   eax
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a7b8:	83 c4 0c             	add    esp,0xc
c000a7bb:	5b                   	pop    ebx
c000a7bc:	5e                   	pop    esi
c000a7bd:	5f                   	pop    edi
c000a7be:	5d                   	pop    ebp
c000a7bf:	e9 4a fe ff ff       	jmp    c000a60e <VgaText::updateCursor()>

c000a7c4 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a7c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a7c9:	c1 e0 08             	shl    eax,0x8
c000a7cc:	89 c2                	mov    edx,eax
c000a7ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a7d3:	09 d0                	or     eax,edx
c000a7d5:	c3                   	ret    

c000a7d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a7d6:	56                   	push   esi
c000a7d7:	53                   	push   ebx
c000a7d8:	51                   	push   ecx
c000a7d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7e2:	50                   	push   eax
c000a7e3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7e8:	50                   	push   eax
c000a7e9:	e8 30 ff ff ff       	call   c000a71e <VgaText::combineColours(unsigned char, unsigned char)>
c000a7ee:	5b                   	pop    ebx
c000a7ef:	0f b6 c0             	movzx  eax,al
c000a7f2:	5e                   	pop    esi
c000a7f3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a7f8:	50                   	push   eax
c000a7f9:	53                   	push   ebx
c000a7fa:	e8 c5 ff ff ff       	call   c000a7c4 <VgaText::combineCharAndColour(char, unsigned char)>
c000a7ff:	5a                   	pop    edx
c000a800:	5e                   	pop    esi
c000a801:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a804:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a80a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a80e:	0f b7 d2             	movzx  edx,dx
c000a811:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a815:	39 0d 24 65 02 c0    	cmp    DWORD PTR ds:0xc0026524,ecx
c000a81b:	75 10                	jne    c000a82d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a81d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a820:	85 c0                	test   eax,eax
c000a822:	74 09                	je     c000a82d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a824:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a828:	5a                   	pop    edx
c000a829:	5b                   	pop    ebx
c000a82a:	5e                   	pop    esi
c000a82b:	ff e0                	jmp    eax
c000a82d:	58                   	pop    eax
c000a82e:	5b                   	pop    ebx
c000a82f:	5e                   	pop    esi
c000a830:	c3                   	ret    
c000a831:	90                   	nop

c000a832 <VgaText::getCursorX()>:
c000a832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a836:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a839:	c3                   	ret    

c000a83a <VgaText::getCursorY()>:
c000a83a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a83e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a841:	c3                   	ret    

c000a842 <VgaText::setCursor(int, int)>:
c000a842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a846:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a84a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a84d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a851:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a854:	e9 b5 fd ff ff       	jmp    c000a60e <VgaText::updateCursor()>

c000a859 <setActiveTerminal(VgaText*)>:
c000a859:	53                   	push   ebx
c000a85a:	83 ec 08             	sub    esp,0x8
c000a85d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a861:	85 db                	test   ebx,ebx
c000a863:	75 11                	jne    c000a876 <setActiveTerminal(VgaText*)+0x1d>
c000a865:	c7 44 24 10 dc 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022adc
c000a86d:	83 c4 08             	add    esp,0x8
c000a870:	5b                   	pop    ebx
c000a871:	e9 47 9b 00 00       	jmp    c00143bd <Krnl::panic(char const*)>
c000a876:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000a87b:	85 c0                	test   eax,eax
c000a87d:	74 0c                	je     c000a88b <setActiveTerminal(VgaText*)+0x32>
c000a87f:	83 ec 0c             	sub    esp,0xc
c000a882:	50                   	push   eax
c000a883:	e8 86 fd ff ff       	call   c000a60e <VgaText::updateCursor()>
c000a888:	83 c4 10             	add    esp,0x10
c000a88b:	89 1d 24 65 02 c0    	mov    DWORD PTR ds:0xc0026524,ebx
c000a891:	51                   	push   ecx
c000a892:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a895:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a898:	53                   	push   ebx
c000a899:	e8 a4 ff ff ff       	call   c000a842 <VgaText::setCursor(int, int)>
c000a89e:	83 c4 10             	add    esp,0x10
c000a8a1:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a8a5:	75 07                	jne    c000a8ae <setActiveTerminal(VgaText*)+0x55>
c000a8a7:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a8ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8b2:	83 c4 08             	add    esp,0x8
c000a8b5:	5b                   	pop    ebx
c000a8b6:	e9 05 fd ff ff       	jmp    c000a5c0 <VgaText::load()>

c000a8bb <doTerminalCycle()>:
c000a8bb:	83 ec 18             	sub    esp,0x18
c000a8be:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000a8c3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a8c6:	50                   	push   eax
c000a8c7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c000a8cc:	e8 88 ff ff ff       	call   c000a859 <setActiveTerminal(VgaText*)>
c000a8d1:	83 c4 1c             	add    esp,0x1c
c000a8d4:	c3                   	ret    
c000a8d5:	90                   	nop

c000a8d6 <VgaText::setCursorX(int)>:
c000a8d6:	83 ec 10             	sub    esp,0x10
c000a8d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8dd:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8e4:	50                   	push   eax
c000a8e5:	e8 58 ff ff ff       	call   c000a842 <VgaText::setCursor(int, int)>
c000a8ea:	83 c4 1c             	add    esp,0x1c
c000a8ed:	c3                   	ret    

c000a8ee <VgaText::setCursorY(int)>:
c000a8ee:	83 ec 10             	sub    esp,0x10
c000a8f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a8f9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 40 ff ff ff       	call   c000a842 <VgaText::setCursor(int, int)>
c000a902:	83 c4 1c             	add    esp,0x1c
c000a905:	c3                   	ret    

c000a906 <VgaText::incrementCursor(bool)>:
c000a906:	56                   	push   esi
c000a907:	53                   	push   ebx
c000a908:	51                   	push   ecx
c000a909:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a90d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a911:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a914:	40                   	inc    eax
c000a915:	83 f8 50             	cmp    eax,0x50
c000a918:	74 05                	je     c000a91f <VgaText::incrementCursor(bool)+0x19>
c000a91a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a91d:	eb 24                	jmp    c000a943 <VgaText::incrementCursor(bool)+0x3d>
c000a91f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a922:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a929:	8d 50 01             	lea    edx,[eax+0x1]
c000a92c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a92f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a932:	75 0f                	jne    c000a943 <VgaText::incrementCursor(bool)+0x3d>
c000a934:	83 ec 0c             	sub    esp,0xc
c000a937:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a93a:	53                   	push   ebx
c000a93b:	e8 f0 fd ff ff       	call   c000a730 <VgaText::scrollScreen()>
c000a940:	83 c4 10             	add    esp,0x10
c000a943:	89 f0                	mov    eax,esi
c000a945:	84 c0                	test   al,al
c000a947:	74 0c                	je     c000a955 <VgaText::incrementCursor(bool)+0x4f>
c000a949:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a94d:	5a                   	pop    edx
c000a94e:	5b                   	pop    ebx
c000a94f:	5e                   	pop    esi
c000a950:	e9 b9 fc ff ff       	jmp    c000a60e <VgaText::updateCursor()>
c000a955:	58                   	pop    eax
c000a956:	5b                   	pop    ebx
c000a957:	5e                   	pop    esi
c000a958:	c3                   	ret    
c000a959:	90                   	nop

c000a95a <VgaText::decrementCursor(bool)>:
c000a95a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a95e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a962:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a965:	85 c0                	test   eax,eax
c000a967:	74 04                	je     c000a96d <VgaText::decrementCursor(bool)+0x13>
c000a969:	48                   	dec    eax
c000a96a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a96d:	84 c9                	test   cl,cl
c000a96f:	74 09                	je     c000a97a <VgaText::decrementCursor(bool)+0x20>
c000a971:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a975:	e9 94 fc ff ff       	jmp    c000a60e <VgaText::updateCursor()>
c000a97a:	c3                   	ret    
c000a97b:	90                   	nop

c000a97c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a97c:	53                   	push   ebx
c000a97d:	83 ec 08             	sub    esp,0x8
c000a980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a984:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a98c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a990:	3c 07                	cmp    al,0x7
c000a992:	75 2a                	jne    c000a9be <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a994:	a1 d8 65 02 c0       	mov    eax,ds:0xc00265d8
c000a999:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a9a1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a9a9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a9b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a9b5:	83 c4 08             	add    esp,0x8
c000a9b8:	5b                   	pop    ebx
c000a9b9:	e9 58 2f 00 00       	jmp    c000d916 <Buzzer::beep(int, int, bool)>
c000a9be:	3c 0d                	cmp    al,0xd
c000a9c0:	75 09                	jne    c000a9cb <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a9c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9c9:	eb 2c                	jmp    c000a9f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a9cb:	3c 0a                	cmp    al,0xa
c000a9cd:	75 31                	jne    c000aa00 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a9cf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9d2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9d9:	8d 50 01             	lea    edx,[eax+0x1]
c000a9dc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a9df:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a9e2:	75 0f                	jne    c000a9f3 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a9e4:	83 ec 0c             	sub    esp,0xc
c000a9e7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9ea:	53                   	push   ebx
c000a9eb:	e8 40 fd ff ff       	call   c000a730 <VgaText::scrollScreen()>
c000a9f0:	83 c4 10             	add    esp,0x10
c000a9f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a9f7:	83 c4 08             	add    esp,0x8
c000a9fa:	5b                   	pop    ebx
c000a9fb:	e9 0e fc ff ff       	jmp    c000a60e <VgaText::updateCursor()>
c000aa00:	3c 08                	cmp    al,0x8
c000aa02:	75 25                	jne    c000aa29 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000aa04:	50                   	push   eax
c000aa05:	50                   	push   eax
c000aa06:	6a 01                	push   0x1
c000aa08:	53                   	push   ebx
c000aa09:	e8 4c ff ff ff       	call   c000a95a <VgaText::decrementCursor(bool)>
c000aa0e:	5a                   	pop    edx
c000aa0f:	59                   	pop    ecx
c000aa10:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa13:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa16:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa19:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa1c:	6a 20                	push   0x20
c000aa1e:	53                   	push   ebx
c000aa1f:	e8 b2 fd ff ff       	call   c000a7d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa24:	83 c4 28             	add    esp,0x28
c000aa27:	5b                   	pop    ebx
c000aa28:	c3                   	ret    
c000aa29:	83 ec 08             	sub    esp,0x8
c000aa2c:	0f be c0             	movsx  eax,al
c000aa2f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa32:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa35:	51                   	push   ecx
c000aa36:	52                   	push   edx
c000aa37:	50                   	push   eax
c000aa38:	53                   	push   ebx
c000aa39:	e8 98 fd ff ff       	call   c000a7d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa3e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aa42:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000aa4a:	83 c4 28             	add    esp,0x28
c000aa4d:	5b                   	pop    ebx
c000aa4e:	e9 b3 fe ff ff       	jmp    c000a906 <VgaText::incrementCursor(bool)>
c000aa53:	90                   	nop

c000aa54 <VgaText::doUpdate()>:
c000aa54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa58:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000aa5b:	85 c0                	test   eax,eax
c000aa5d:	74 02                	je     c000aa61 <VgaText::doUpdate()+0xd>
c000aa5f:	ff e0                	jmp    eax
c000aa61:	c3                   	ret    

c000aa62 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000aa62:	55                   	push   ebp
c000aa63:	31 ed                	xor    ebp,ebp
c000aa65:	57                   	push   edi
c000aa66:	56                   	push   esi
c000aa67:	53                   	push   ebx
c000aa68:	83 ec 1c             	sub    esp,0x1c
c000aa6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aa6f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa74:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aa7b:	50                   	push   eax
c000aa7c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa81:	50                   	push   eax
c000aa82:	e8 97 fc ff ff       	call   c000a71e <VgaText::combineColours(unsigned char, unsigned char)>
c000aa87:	59                   	pop    ecx
c000aa88:	0f b6 c0             	movzx  eax,al
c000aa8b:	5e                   	pop    esi
c000aa8c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa91:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa95:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9c:	0f b7 f6             	movzx  esi,si
c000aa9f:	01 f6                	add    esi,esi
c000aaa1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aaa4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aaa7:	84 c0                	test   al,al
c000aaa9:	0f 84 fd 00 00 00    	je     c000abac <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aaaf:	3c 0d                	cmp    al,0xd
c000aab1:	75 0c                	jne    c000aabf <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aab3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aaba:	e9 e7 00 00 00       	jmp    c000aba6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aabf:	3c 0a                	cmp    al,0xa
c000aac1:	75 47                	jne    c000ab0a <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aac3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aac6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aacd:	8d 48 01             	lea    ecx,[eax+0x1]
c000aad0:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aad3:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aad6:	75 0f                	jne    c000aae7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aad8:	83 ec 0c             	sub    esp,0xc
c000aadb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aade:	53                   	push   ebx
c000aadf:	e8 4c fc ff ff       	call   c000a730 <VgaText::scrollScreen()>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	83 ec 0c             	sub    esp,0xc
c000aaea:	31 ed                	xor    ebp,ebp
c000aaec:	53                   	push   ebx
c000aaed:	e8 1c fb ff ff       	call   c000a60e <VgaText::updateCursor()>
c000aaf2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aafd:	0f b7 f6             	movzx  esi,si
c000ab00:	01 f6                	add    esi,esi
c000ab02:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab05:	e9 9c 00 00 00       	jmp    c000aba6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab0a:	3c 08                	cmp    al,0x8
c000ab0c:	75 35                	jne    c000ab43 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000ab0e:	56                   	push   esi
c000ab0f:	56                   	push   esi
c000ab10:	6a 01                	push   0x1
c000ab12:	53                   	push   ebx
c000ab13:	e8 42 fe ff ff       	call   c000a95a <VgaText::decrementCursor(bool)>
c000ab18:	58                   	pop    eax
c000ab19:	5a                   	pop    edx
c000ab1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab1d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab23:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab26:	6a 20                	push   0x20
c000ab28:	53                   	push   ebx
c000ab29:	e8 a8 fc ff ff       	call   c000a7d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab2e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab33:	83 c4 20             	add    esp,0x20
c000ab36:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ab39:	0f b7 f6             	movzx  esi,si
c000ab3c:	01 f6                	add    esi,esi
c000ab3e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab41:	eb 63                	jmp    c000aba6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab43:	51                   	push   ecx
c000ab44:	51                   	push   ecx
c000ab45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab49:	50                   	push   eax
c000ab4a:	e8 75 fc ff ff       	call   c000a7c4 <VgaText::combineCharAndColour(char, unsigned char)>
c000ab4f:	83 c4 10             	add    esp,0x10
c000ab52:	66 89 06             	mov    WORD PTR [esi],ax
c000ab55:	39 1d 24 65 02 c0    	cmp    DWORD PTR ds:0xc0026524,ebx
c000ab5b:	75 21                	jne    c000ab7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab5d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ab60:	85 c0                	test   eax,eax
c000ab62:	74 1a                	je     c000ab7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab64:	52                   	push   edx
c000ab65:	52                   	push   edx
c000ab66:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab69:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab74:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ab77:	51                   	push   ecx
c000ab78:	53                   	push   ebx
c000ab79:	ff d0                	call   eax
c000ab7b:	83 c4 20             	add    esp,0x20
c000ab7e:	83 c6 02             	add    esi,0x2
c000ab81:	50                   	push   eax
c000ab82:	50                   	push   eax
c000ab83:	6a 00                	push   0x0
c000ab85:	53                   	push   ebx
c000ab86:	e8 7b fd ff ff       	call   c000a906 <VgaText::incrementCursor(bool)>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ab92:	75 0d                	jne    c000aba1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ab94:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab99:	0f b7 f6             	movzx  esi,si
c000ab9c:	01 f6                	add    esi,esi
c000ab9e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aba1:	bd 01 00 00 00       	mov    ebp,0x1
c000aba6:	47                   	inc    edi
c000aba7:	e9 f8 fe ff ff       	jmp    c000aaa4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	53                   	push   ebx
c000abb0:	e8 59 fa ff ff       	call   c000a60e <VgaText::updateCursor()>
c000abb5:	83 c4 10             	add    esp,0x10
c000abb8:	89 e8                	mov    eax,ebp
c000abba:	84 c0                	test   al,al
c000abbc:	74 0c                	je     c000abca <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000abbe:	83 ec 0c             	sub    esp,0xc
c000abc1:	53                   	push   ebx
c000abc2:	e8 8d fe ff ff       	call   c000aa54 <VgaText::doUpdate()>
c000abc7:	83 c4 10             	add    esp,0x10
c000abca:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000abd1:	83 c4 1c             	add    esp,0x1c
c000abd4:	5b                   	pop    ebx
c000abd5:	5e                   	pop    esi
c000abd6:	5f                   	pop    edi
c000abd7:	5d                   	pop    ebp
c000abd8:	c3                   	ret    
c000abd9:	90                   	nop

c000abda <VgaText::clearScreen()>:
c000abda:	57                   	push   edi
c000abdb:	56                   	push   esi
c000abdc:	31 f6                	xor    esi,esi
c000abde:	53                   	push   ebx
c000abdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abe3:	52                   	push   edx
c000abe4:	6a 00                	push   0x0
c000abe6:	6a 00                	push   0x0
c000abe8:	53                   	push   ebx
c000abe9:	e8 54 fc ff ff       	call   c000a842 <VgaText::setCursor(int, int)>
c000abee:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000abf5:	83 c4 10             	add    esp,0x10
c000abf8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000abfb:	7e 20                	jle    c000ac1d <VgaText::clearScreen()+0x43>
c000abfd:	31 ff                	xor    edi,edi
c000abff:	50                   	push   eax
c000ac00:	50                   	push   eax
c000ac01:	56                   	push   esi
c000ac02:	57                   	push   edi
c000ac03:	47                   	inc    edi
c000ac04:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac07:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac0a:	6a 20                	push   0x20
c000ac0c:	53                   	push   ebx
c000ac0d:	e8 c4 fb ff ff       	call   c000a7d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac12:	83 c4 20             	add    esp,0x20
c000ac15:	83 ff 50             	cmp    edi,0x50
c000ac18:	75 e5                	jne    c000abff <VgaText::clearScreen()+0x25>
c000ac1a:	46                   	inc    esi
c000ac1b:	eb db                	jmp    c000abf8 <VgaText::clearScreen()+0x1e>
c000ac1d:	83 ec 0c             	sub    esp,0xc
c000ac20:	53                   	push   ebx
c000ac21:	e8 2e fe ff ff       	call   c000aa54 <VgaText::doUpdate()>
c000ac26:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ac2d:	83 c4 10             	add    esp,0x10
c000ac30:	5b                   	pop    ebx
c000ac31:	5e                   	pop    esi
c000ac32:	5f                   	pop    edi
c000ac33:	c3                   	ret    

c000ac34 <VgaText::putchar(char)>:
c000ac34:	56                   	push   esi
c000ac35:	53                   	push   ebx
c000ac36:	83 ec 14             	sub    esp,0x14
c000ac39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac41:	3c 5b                	cmp    al,0x5b
c000ac43:	75 18                	jne    c000ac5d <VgaText::putchar(char)+0x29>
c000ac45:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ac49:	74 1f                	je     c000ac6a <VgaText::putchar(char)+0x36>
c000ac4b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ac51:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ac58:	e9 bd 00 00 00       	jmp    c000ad1a <VgaText::putchar(char)+0xe6>
c000ac5d:	3c 1b                	cmp    al,0x1b
c000ac5f:	75 09                	jne    c000ac6a <VgaText::putchar(char)+0x36>
c000ac61:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ac65:	e9 b0 00 00 00       	jmp    c000ad1a <VgaText::putchar(char)+0xe6>
c000ac6a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ac6d:	84 c9                	test   cl,cl
c000ac6f:	0f 84 92 00 00 00    	je     c000ad07 <VgaText::putchar(char)+0xd3>
c000ac75:	8d 50 c0             	lea    edx,[eax-0x40]
c000ac78:	80 fa 3e             	cmp    dl,0x3e
c000ac7b:	77 76                	ja     c000acf3 <VgaText::putchar(char)+0xbf>
c000ac7d:	3c 6d                	cmp    al,0x6d
c000ac7f:	75 47                	jne    c000acc8 <VgaText::putchar(char)+0x94>
c000ac81:	31 f6                	xor    esi,esi
c000ac83:	31 d2                	xor    edx,edx
c000ac85:	31 c0                	xor    eax,eax
c000ac87:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ac8a:	7e 2d                	jle    c000acb9 <VgaText::putchar(char)+0x85>
c000ac8c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ac91:	80 fa 3b             	cmp    dl,0x3b
c000ac94:	75 17                	jne    c000acad <VgaText::putchar(char)+0x79>
c000ac96:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ac9a:	50                   	push   eax
c000ac9b:	53                   	push   ebx
c000ac9c:	e8 83 f9 ff ff       	call   c000a624 <VgaText::doANSI_SGR(int)>
c000aca1:	59                   	pop    ecx
c000aca2:	31 d2                	xor    edx,edx
c000aca4:	58                   	pop    eax
c000aca5:	31 c0                	xor    eax,eax
c000aca7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000acab:	eb 09                	jmp    c000acb6 <VgaText::putchar(char)+0x82>
c000acad:	6b c0 0a             	imul   eax,eax,0xa
c000acb0:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000acb4:	88 ca                	mov    dl,cl
c000acb6:	46                   	inc    esi
c000acb7:	eb ce                	jmp    c000ac87 <VgaText::putchar(char)+0x53>
c000acb9:	84 d2                	test   dl,dl
c000acbb:	74 2e                	je     c000aceb <VgaText::putchar(char)+0xb7>
c000acbd:	50                   	push   eax
c000acbe:	53                   	push   ebx
c000acbf:	e8 60 f9 ff ff       	call   c000a624 <VgaText::doANSI_SGR(int)>
c000acc4:	58                   	pop    eax
c000acc5:	5a                   	pop    edx
c000acc6:	eb 23                	jmp    c000aceb <VgaText::putchar(char)+0xb7>
c000acc8:	3c 4a                	cmp    al,0x4a
c000acca:	75 1f                	jne    c000aceb <VgaText::putchar(char)+0xb7>
c000accc:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000acd0:	75 19                	jne    c000aceb <VgaText::putchar(char)+0xb7>
c000acd2:	83 ec 0c             	sub    esp,0xc
c000acd5:	53                   	push   ebx
c000acd6:	e8 ff fe ff ff       	call   c000abda <VgaText::clearScreen()>
c000acdb:	83 c4 0c             	add    esp,0xc
c000acde:	6a 00                	push   0x0
c000ace0:	6a 00                	push   0x0
c000ace2:	53                   	push   ebx
c000ace3:	e8 5a fb ff ff       	call   c000a842 <VgaText::setCursor(int, int)>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000acf1:	eb 27                	jmp    c000ad1a <VgaText::putchar(char)+0xe6>
c000acf3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000acf6:	83 fa 0e             	cmp    edx,0xe
c000acf9:	7f 1f                	jg     c000ad1a <VgaText::putchar(char)+0xe6>
c000acfb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000acfe:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ad01:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ad05:	eb 13                	jmp    c000ad1a <VgaText::putchar(char)+0xe6>
c000ad07:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ad0a:	0f be c0             	movsx  eax,al
c000ad0d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ad10:	50                   	push   eax
c000ad11:	53                   	push   ebx
c000ad12:	e8 65 fc ff ff       	call   c000a97c <VgaText::putchar(char, VgaColour, VgaColour)>
c000ad17:	83 c4 10             	add    esp,0x10
c000ad1a:	83 c4 14             	add    esp,0x14
c000ad1d:	5b                   	pop    ebx
c000ad1e:	5e                   	pop    esi
c000ad1f:	c3                   	ret    

c000ad20 <VgaText::putx(unsigned int)>:
c000ad20:	57                   	push   edi
c000ad21:	b9 11 00 00 00       	mov    ecx,0x11
c000ad26:	56                   	push   esi
c000ad27:	be ea 2a 02 c0       	mov    esi,0xc0022aea
c000ad2c:	53                   	push   ebx
c000ad2d:	83 ec 20             	sub    esp,0x20
c000ad30:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ad34:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ad38:	fc                   	cld    
c000ad39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ad3b:	be 08 00 00 00       	mov    esi,0x8
c000ad40:	50                   	push   eax
c000ad41:	50                   	push   eax
c000ad42:	89 d8                	mov    eax,ebx
c000ad44:	c1 e3 04             	shl    ebx,0x4
c000ad47:	c1 e8 1c             	shr    eax,0x1c
c000ad4a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ad4f:	50                   	push   eax
c000ad50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad54:	e8 db fe ff ff       	call   c000ac34 <VgaText::putchar(char)>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	4e                   	dec    esi
c000ad5d:	75 e1                	jne    c000ad40 <VgaText::putx(unsigned int)+0x20>
c000ad5f:	83 c4 20             	add    esp,0x20
c000ad62:	5b                   	pop    ebx
c000ad63:	5e                   	pop    esi
c000ad64:	5f                   	pop    edi
c000ad65:	c3                   	ret    

c000ad66 <VgaText::puts(char const*)>:
c000ad66:	53                   	push   ebx
c000ad67:	83 ec 08             	sub    esp,0x8
c000ad6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad6e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ad71:	84 c0                	test   al,al
c000ad73:	74 12                	je     c000ad87 <VgaText::puts(char const*)+0x21>
c000ad75:	43                   	inc    ebx
c000ad76:	51                   	push   ecx
c000ad77:	51                   	push   ecx
c000ad78:	50                   	push   eax
c000ad79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad7d:	e8 b2 fe ff ff       	call   c000ac34 <VgaText::putchar(char)>
c000ad82:	83 c4 10             	add    esp,0x10
c000ad85:	eb e7                	jmp    c000ad6e <VgaText::puts(char const*)+0x8>
c000ad87:	83 c4 08             	add    esp,0x8
c000ad8a:	5b                   	pop    ebx
c000ad8b:	c3                   	ret    

c000ad8c <VgaText::VgaText(char const*)>:
c000ad8c:	57                   	push   edi
c000ad8d:	56                   	push   esi
c000ad8e:	53                   	push   ebx
c000ad8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad93:	83 ec 08             	sub    esp,0x8
c000ad96:	6a 00                	push   0x0
c000ad98:	50                   	push   eax
c000ad99:	e8 48 05 00 00       	call   c000b2e6 <UnixFile::UnixFile(int)>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	ba 50 2b 02 c0       	mov    edx,0xc0022b50
c000ada6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adaa:	89 10                	mov    DWORD PTR [eax],edx
c000adac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb0:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000adb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adbb:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000adc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc6:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000adca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adce:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000add2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add6:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000addd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade1:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ade8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adec:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000adf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000adfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae02:	8d 50 60             	lea    edx,[eax+0x60]
c000ae05:	bb 00 65 02 c0       	mov    ebx,0xc0026500
c000ae0a:	b8 08 00 00 00       	mov    eax,0x8
c000ae0f:	fc                   	cld    
c000ae10:	89 d7                	mov    edi,edx
c000ae12:	89 de                	mov    esi,ebx
c000ae14:	89 c1                	mov    ecx,eax
c000ae16:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ae18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1c:	05 82 00 00 00       	add    eax,0x82
c000ae21:	83 ec 08             	sub    esp,0x8
c000ae24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae28:	50                   	push   eax
c000ae29:	e8 12 59 ff ff       	call   c0000740 <strcpy>
c000ae2e:	83 c4 10             	add    esp,0x10
c000ae31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae35:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ae3c:	83 ec 0c             	sub    esp,0xc
c000ae3f:	6a 01                	push   0x1
c000ae41:	e8 e3 08 00 00       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c000ae46:	83 c4 10             	add    esp,0x10
c000ae49:	89 c2                	mov    edx,eax
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae52:	8b 1d d0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d0
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae5f:	89 c6                	mov    esi,eax
c000ae61:	e8 93 ef ff ff       	call   c0009df9 <Phys::allocatePage()>
c000ae66:	68 05 0c 00 00       	push   0xc05
c000ae6b:	56                   	push   esi
c000ae6c:	50                   	push   eax
c000ae6d:	53                   	push   ebx
c000ae6e:	e8 5d 0f 00 00       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae7d:	83 ec 04             	sub    esp,0x4
c000ae80:	68 00 0f 00 00       	push   0xf00
c000ae85:	6a 00                	push   0x0
c000ae87:	50                   	push   eax
c000ae88:	e8 f7 57 ff ff       	call   c0000684 <memset>
c000ae8d:	83 c4 10             	add    esp,0x10
c000ae90:	83 ec 04             	sub    esp,0x4
c000ae93:	6a 00                	push   0x0
c000ae95:	6a 07                	push   0x7
c000ae97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9b:	e8 18 f8 ff ff       	call   c000a6b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000aea0:	83 c4 10             	add    esp,0x10
c000aea3:	83 ec 04             	sub    esp,0x4
c000aea6:	6a 00                	push   0x0
c000aea8:	6a 00                	push   0x0
c000aeaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeae:	e8 8f f9 ff ff       	call   c000a842 <VgaText::setCursor(int, int)>
c000aeb3:	83 c4 10             	add    esp,0x10
c000aeb6:	83 ec 0c             	sub    esp,0xc
c000aeb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aebd:	e8 18 fd ff ff       	call   c000abda <VgaText::clearScreen()>
c000aec2:	83 c4 10             	add    esp,0x10
c000aec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec9:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed1:	05 02 01 00 00       	add    eax,0x102
c000aed6:	83 ec 04             	sub    esp,0x4
c000aed9:	68 96 00 00 00       	push   0x96
c000aede:	6a 00                	push   0x0
c000aee0:	50                   	push   eax
c000aee1:	e8 9e 57 ff ff       	call   c0000684 <memset>
c000aee6:	83 c4 10             	add    esp,0x10
c000aee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeed:	05 98 01 00 00       	add    eax,0x198
c000aef2:	83 ec 04             	sub    esp,0x4
c000aef5:	68 2c 01 00 00       	push   0x12c
c000aefa:	6a 00                	push   0x0
c000aefc:	50                   	push   eax
c000aefd:	e8 82 57 ff ff       	call   c0000684 <memset>
c000af02:	83 c4 10             	add    esp,0x10
c000af05:	90                   	nop
c000af06:	5b                   	pop    ebx
c000af07:	5e                   	pop    esi
c000af08:	5f                   	pop    edi
c000af09:	c3                   	ret    

c000af0a <VgaText::receiveKey(unsigned char)>:
c000af0a:	55                   	push   ebp
c000af0b:	57                   	push   edi
c000af0c:	56                   	push   esi
c000af0d:	53                   	push   ebx
c000af0e:	83 ec 1c             	sub    esp,0x1c
c000af11:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000af15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000af19:	84 db                	test   bl,bl
c000af1b:	0f 84 c9 00 00 00    	je     c000afea <VgaText::receiveKey(unsigned char)+0xe0>
c000af21:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000af27:	80 fb 08             	cmp    bl,0x8
c000af2a:	75 2c                	jne    c000af58 <VgaText::receiveKey(unsigned char)+0x4e>
c000af2c:	83 ec 0c             	sub    esp,0xc
c000af2f:	57                   	push   edi
c000af30:	e8 6b 57 ff ff       	call   c00006a0 <strlen>
c000af35:	83 c4 10             	add    esp,0x10
c000af38:	85 c0                	test   eax,eax
c000af3a:	74 41                	je     c000af7d <VgaText::receiveKey(unsigned char)+0x73>
c000af3c:	50                   	push   eax
c000af3d:	50                   	push   eax
c000af3e:	6a 08                	push   0x8
c000af40:	56                   	push   esi
c000af41:	e8 ee fc ff ff       	call   c000ac34 <VgaText::putchar(char)>
c000af46:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af49:	e8 52 57 ff ff       	call   c00006a0 <strlen>
c000af4e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000af56:	eb 22                	jmp    c000af7a <VgaText::receiveKey(unsigned char)+0x70>
c000af58:	0f be c3             	movsx  eax,bl
c000af5b:	52                   	push   edx
c000af5c:	52                   	push   edx
c000af5d:	50                   	push   eax
c000af5e:	56                   	push   esi
c000af5f:	e8 d0 fc ff ff       	call   c000ac34 <VgaText::putchar(char)>
c000af64:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000af68:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af6d:	59                   	pop    ecx
c000af6e:	5d                   	pop    ebp
c000af6f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000af73:	50                   	push   eax
c000af74:	57                   	push   edi
c000af75:	e8 06 59 ff ff       	call   c0000880 <strcat>
c000af7a:	83 c4 10             	add    esp,0x10
c000af7d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000af84:	75 05                	jne    c000af8b <VgaText::receiveKey(unsigned char)+0x81>
c000af86:	80 fb 0a             	cmp    bl,0xa
c000af89:	75 53                	jne    c000afde <VgaText::receiveKey(unsigned char)+0xd4>
c000af8b:	83 ec 0c             	sub    esp,0xc
c000af8e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000af94:	53                   	push   ebx
c000af95:	e8 06 57 ff ff       	call   c00006a0 <strlen>
c000af9a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af9d:	89 c5                	mov    ebp,eax
c000af9f:	e8 fc 56 ff ff       	call   c00006a0 <strlen>
c000afa4:	83 c4 10             	add    esp,0x10
c000afa7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000afab:	3d 2c 01 00 00       	cmp    eax,0x12c
c000afb0:	76 10                	jbe    c000afc2 <VgaText::receiveKey(unsigned char)+0xb8>
c000afb2:	83 ec 0c             	sub    esp,0xc
c000afb5:	68 fb 2a 02 c0       	push   0xc0022afb
c000afba:	e8 fe 93 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	50                   	push   eax
c000afc3:	50                   	push   eax
c000afc4:	57                   	push   edi
c000afc5:	53                   	push   ebx
c000afc6:	e8 b5 58 ff ff       	call   c0000880 <strcat>
c000afcb:	83 c4 0c             	add    esp,0xc
c000afce:	68 96 00 00 00       	push   0x96
c000afd3:	6a 00                	push   0x0
c000afd5:	57                   	push   edi
c000afd6:	e8 a9 56 ff ff       	call   c0000684 <memset>
c000afdb:	83 c4 10             	add    esp,0x10
c000afde:	83 ec 0c             	sub    esp,0xc
c000afe1:	56                   	push   esi
c000afe2:	e8 6d fa ff ff       	call   c000aa54 <VgaText::doUpdate()>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	83 c4 1c             	add    esp,0x1c
c000afed:	5b                   	pop    ebx
c000afee:	5e                   	pop    esi
c000afef:	5f                   	pop    edi
c000aff0:	5d                   	pop    ebp
c000aff1:	c3                   	ret    

c000aff2 <VgaText::write(unsigned long long, void*, int*)>:
c000aff2:	55                   	push   ebp
c000aff3:	57                   	push   edi
c000aff4:	56                   	push   esi
c000aff5:	53                   	push   ebx
c000aff6:	83 ec 0c             	sub    esp,0xc
c000aff9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000affd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b001:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b005:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b00c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b00f:	39 eb                	cmp    ebx,ebp
c000b011:	74 13                	je     c000b026 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b013:	43                   	inc    ebx
c000b014:	50                   	push   eax
c000b015:	50                   	push   eax
c000b016:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b01a:	50                   	push   eax
c000b01b:	56                   	push   esi
c000b01c:	e8 13 fc ff ff       	call   c000ac34 <VgaText::putchar(char)>
c000b021:	83 c4 10             	add    esp,0x10
c000b024:	eb e9                	jmp    c000b00f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b026:	83 ec 0c             	sub    esp,0xc
c000b029:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b030:	56                   	push   esi
c000b031:	e8 1e fa ff ff       	call   c000aa54 <VgaText::doUpdate()>
c000b036:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b03a:	89 38                	mov    DWORD PTR [eax],edi
c000b03c:	83 c4 1c             	add    esp,0x1c
c000b03f:	31 c0                	xor    eax,eax
c000b041:	5b                   	pop    ebx
c000b042:	5e                   	pop    esi
c000b043:	5f                   	pop    edi
c000b044:	5d                   	pop    ebp
c000b045:	c3                   	ret    

c000b046 <newTerminal(char*)>:
c000b046:	83 ec 28             	sub    esp,0x28
c000b049:	68 c4 02 00 00       	push   0x2c4
c000b04e:	e8 70 e9 ff ff       	call   c00099c3 <malloc>
c000b053:	5a                   	pop    edx
c000b054:	59                   	pop    ecx
c000b055:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b059:	50                   	push   eax
c000b05a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b05e:	e8 29 fd ff ff       	call   c000ad8c <VgaText::VgaText(char const*)>
c000b063:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b067:	83 c4 2c             	add    esp,0x2c
c000b06a:	c3                   	ret    
c000b06b:	90                   	nop

c000b06c <TSS::TSS()>:
c000b06c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b070:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b077:	90                   	nop
c000b078:	c3                   	ret    
c000b079:	90                   	nop
c000b07a:	66 90                	xchg   ax,ax

c000b07c <TSS::setESP(unsigned long)>:
c000b07c:	55                   	push   ebp
c000b07d:	89 e5                	mov    ebp,esp
c000b07f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b082:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b085:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b088:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b08b:	90                   	nop
c000b08c:	5d                   	pop    ebp
c000b08d:	c3                   	ret    
c000b08e:	66 90                	xchg   ax,ax

c000b090 <TSS::flush()>:
c000b090:	55                   	push   ebp
c000b091:	89 e5                	mov    ebp,esp
c000b093:	83 ec 10             	sub    esp,0x10
c000b096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b099:	8b 00                	mov    eax,DWORD PTR [eax]
c000b09b:	83 c8 03             	or     eax,0x3
c000b09e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b0a2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b0a6:	66 89 d0             	mov    ax,dx
c000b0a9:	0f 00 d8             	ltr    ax
c000b0ac:	90                   	nop
c000b0ad:	c9                   	leave  
c000b0ae:	c3                   	ret    
c000b0af:	90                   	nop

c000b0b0 <TSS::setup(unsigned long, unsigned long)>:
c000b0b0:	55                   	push   ebp
c000b0b1:	89 e5                	mov    ebp,esp
c000b0b3:	83 ec 18             	sub    esp,0x18
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	6a 68                	push   0x68
c000b0bb:	e8 03 e9 ff ff       	call   c00099c3 <malloc>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	89 c2                	mov    edx,eax
c000b0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0d1:	83 ec 04             	sub    esp,0x4
c000b0d4:	6a 68                	push   0x68
c000b0d6:	6a 00                	push   0x0
c000b0d8:	50                   	push   eax
c000b0d9:	e8 a6 55 ff ff       	call   c0000684 <memset>
c000b0de:	83 c4 10             	add    esp,0x10
c000b0e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0f3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b0f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b102:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b10b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b117:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b11d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b120:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b123:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b12c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b12f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b13b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b147:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b14d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b153:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b156:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b15c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b15f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b162:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b168:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b16b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b175:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b178:	0f 20 da             	mov    edx,cr3
c000b17b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b17e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b181:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b187:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b18a:	83 ec 08             	sub    esp,0x8
c000b18d:	50                   	push   eax
c000b18e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b191:	50                   	push   eax
c000b192:	e8 89 e0 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b197:	83 c4 10             	add    esp,0x10
c000b19a:	83 ec 08             	sub    esp,0x8
c000b19d:	6a 68                	push   0x68
c000b19f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b1a2:	50                   	push   eax
c000b1a3:	e8 94 e0 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b1a8:	83 c4 10             	add    esp,0x10
c000b1ab:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b1af:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b1b2:	83 e0 0f             	and    eax,0xf
c000b1b5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b1b8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b1bb:	83 c8 40             	or     eax,0x40
c000b1be:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b1c1:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000b1c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1cc:	05 78 01 00 00       	add    eax,0x178
c000b1d1:	83 ec 04             	sub    esp,0x4
c000b1d4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b1d7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b1da:	50                   	push   eax
c000b1db:	e8 90 e0 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b1e0:	83 c4 10             	add    esp,0x10
c000b1e3:	89 c2                	mov    edx,eax
c000b1e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1e8:	89 10                	mov    DWORD PTR [eax],edx
c000b1ea:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000b1ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1f5:	05 78 01 00 00       	add    eax,0x178
c000b1fa:	83 ec 0c             	sub    esp,0xc
c000b1fd:	50                   	push   eax
c000b1fe:	e8 97 e0 ff ff       	call   c000929a <GDT::flush()>
c000b203:	83 c4 10             	add    esp,0x10
c000b206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b209:	8b 00                	mov    eax,DWORD PTR [eax]
c000b20b:	c9                   	leave  
c000b20c:	c3                   	ret    
c000b20d:	90                   	nop

c000b20e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b20e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b212:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b216:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b219:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b21e:	75 08                	jne    c000b228 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b220:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b226:	eb 38                	jmp    c000b260 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b228:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b22d:	75 17                	jne    c000b246 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b22f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b234:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b237:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b23d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b23f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b243:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b246:	89 c1                	mov    ecx,eax
c000b248:	83 e1 fd             	and    ecx,0xfffffffd
c000b24b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b251:	74 cd                	je     c000b220 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b253:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b258:	83 e0 ef             	and    eax,0xffffffef
c000b25b:	83 f8 08             	cmp    eax,0x8
c000b25e:	76 c0                	jbe    c000b220 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b260:	31 c0                	xor    eax,eax
c000b262:	c3                   	ret    
c000b263:	90                   	nop

c000b264 <ReservedFilename::isAtty()>:
c000b264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b268:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b26b:	31 c0                	xor    eax,eax
c000b26d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b273:	74 09                	je     c000b27e <ReservedFilename::isAtty()+0x1a>
c000b275:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b27b:	0f 94 c0             	sete   al
c000b27e:	c3                   	ret    
c000b27f:	90                   	nop

c000b280 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b284:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b288:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b28b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b28f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b294:	75 08                	jne    c000b29e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b296:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b29c:	eb 3d                	jmp    c000b2db <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b29e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b2a3:	75 17                	jne    c000b2bc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b2a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b2aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b2ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b2b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2b9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b2bc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b2c1:	75 04                	jne    c000b2c7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b2c3:	89 0a                	mov    DWORD PTR [edx],ecx
c000b2c5:	eb 14                	jmp    c000b2db <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b2c7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b2cc:	74 c8                	je     c000b296 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2ce:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b2d3:	83 e0 ef             	and    eax,0xffffffef
c000b2d6:	83 f8 08             	cmp    eax,0x8
c000b2d9:	76 bb                	jbe    c000b296 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2db:	31 c0                	xor    eax,eax
c000b2dd:	c3                   	ret    

c000b2de <UnixFile::getFileDescriptor()>:
c000b2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2e5:	c3                   	ret    

c000b2e6 <UnixFile::UnixFile(int)>:
c000b2e6:	53                   	push   ebx
c000b2e7:	83 ec 28             	sub    esp,0x28
c000b2ea:	ba 18 2c 02 c0       	mov    edx,0xc0022c18
c000b2ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2f3:	89 10                	mov    DWORD PTR [eax],edx
c000b2f5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b2fd:	0f 8f 8c 01 00 00    	jg     c000b48f <UnixFile::UnixFile(int)+0x1a9>
c000b303:	a1 e0 58 02 c0       	mov    eax,ds:0xc00258e0
c000b308:	8d 50 01             	lea    edx,[eax+0x1]
c000b30b:	89 15 e0 58 02 c0    	mov    DWORD PTR ds:0xc00258e0,edx
c000b311:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b315:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b318:	83 ec 08             	sub    esp,0x8
c000b31b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b31f:	68 b8 65 02 c0       	push   0xc00265b8
c000b324:	e8 83 5f 01 00       	call   c00212ac <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b329:	83 c4 10             	add    esp,0x10
c000b32c:	a0 b4 65 02 c0       	mov    al,ds:0xc00265b4
c000b331:	83 f0 01             	xor    eax,0x1
c000b334:	84 c0                	test   al,al
c000b336:	0f 84 54 01 00 00    	je     c000b490 <UnixFile::UnixFile(int)+0x1aa>
c000b33c:	c6 05 b4 65 02 c0 01 	mov    BYTE PTR ds:0xc00265b4,0x1
c000b343:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b34b:	83 ec 0c             	sub    esp,0xc
c000b34e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b352:	e8 6c e6 ff ff       	call   c00099c3 <malloc>
c000b357:	83 c4 10             	add    esp,0x10
c000b35a:	89 c3                	mov    ebx,eax
c000b35c:	83 ec 08             	sub    esp,0x8
c000b35f:	68 03 ff ff 0f       	push   0xfffff03
c000b364:	53                   	push   ebx
c000b365:	e8 2c 01 00 00       	call   c000b496 <ReservedFilename::ReservedFilename(int)>
c000b36a:	83 c4 10             	add    esp,0x10
c000b36d:	89 1d ac 65 02 c0    	mov    DWORD PTR ds:0xc00265ac,ebx
c000b373:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b37b:	83 ec 0c             	sub    esp,0xc
c000b37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b382:	e8 3c e6 ff ff       	call   c00099c3 <malloc>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	89 c3                	mov    ebx,eax
c000b38c:	83 ec 08             	sub    esp,0x8
c000b38f:	68 01 ff ff 0f       	push   0xfffff01
c000b394:	53                   	push   ebx
c000b395:	e8 fc 00 00 00       	call   c000b496 <ReservedFilename::ReservedFilename(int)>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	89 1d b0 65 02 c0    	mov    DWORD PTR ds:0xc00265b0,ebx
c000b3a3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b3ab:	83 ec 0c             	sub    esp,0xc
c000b3ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b3b2:	e8 0c e6 ff ff       	call   c00099c3 <malloc>
c000b3b7:	83 c4 10             	add    esp,0x10
c000b3ba:	89 c3                	mov    ebx,eax
c000b3bc:	83 ec 08             	sub    esp,0x8
c000b3bf:	68 00 ff ff 0f       	push   0xfffff00
c000b3c4:	53                   	push   ebx
c000b3c5:	e8 cc 00 00 00       	call   c000b496 <ReservedFilename::ReservedFilename(int)>
c000b3ca:	83 c4 10             	add    esp,0x10
c000b3cd:	89 1d a4 65 02 c0    	mov    DWORD PTR ds:0xc00265a4,ebx
c000b3d3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b3db:	83 ec 0c             	sub    esp,0xc
c000b3de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b3e2:	e8 dc e5 ff ff       	call   c00099c3 <malloc>
c000b3e7:	83 c4 10             	add    esp,0x10
c000b3ea:	89 c3                	mov    ebx,eax
c000b3ec:	83 ec 08             	sub    esp,0x8
c000b3ef:	68 02 ff ff 0f       	push   0xfffff02
c000b3f4:	53                   	push   ebx
c000b3f5:	e8 9c 00 00 00       	call   c000b496 <ReservedFilename::ReservedFilename(int)>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	89 1d a8 65 02 c0    	mov    DWORD PTR ds:0xc00265a8,ebx
c000b403:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b40b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b410:	7f 7e                	jg     c000b490 <UnixFile::UnixFile(int)+0x1aa>
c000b412:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b41a:	83 ec 0c             	sub    esp,0xc
c000b41d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b421:	e8 9d e5 ff ff       	call   c00099c3 <malloc>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 c3                	mov    ebx,eax
c000b42b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b42f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b434:	83 ec 08             	sub    esp,0x8
c000b437:	50                   	push   eax
c000b438:	53                   	push   ebx
c000b439:	e8 58 00 00 00       	call   c000b496 <ReservedFilename::ReservedFilename(int)>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b445:	89 1c 85 80 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a80],ebx
c000b44c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	e8 63 e5 ff ff       	call   c00099c3 <malloc>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 c3                	mov    ebx,eax
c000b465:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b469:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b46e:	83 ec 08             	sub    esp,0x8
c000b471:	50                   	push   eax
c000b472:	53                   	push   ebx
c000b473:	e8 1e 00 00 00       	call   c000b496 <ReservedFilename::ReservedFilename(int)>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b47f:	89 1c 85 40 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ac0],ebx
c000b486:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b48a:	e9 7c ff ff ff       	jmp    c000b40b <UnixFile::UnixFile(int)+0x125>
c000b48f:	90                   	nop
c000b490:	83 c4 28             	add    esp,0x28
c000b493:	5b                   	pop    ebx
c000b494:	c3                   	ret    
c000b495:	90                   	nop

c000b496 <ReservedFilename::ReservedFilename(int)>:
c000b496:	83 ec 0c             	sub    esp,0xc
c000b499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49d:	83 ec 08             	sub    esp,0x8
c000b4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a4:	50                   	push   eax
c000b4a5:	e8 3c fe ff ff       	call   c000b2e6 <UnixFile::UnixFile(int)>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	ba 34 2c 02 c0       	mov    edx,0xc0022c34
c000b4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b6:	89 10                	mov    DWORD PTR [eax],edx
c000b4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4c3:	90                   	nop
c000b4c4:	83 c4 0c             	add    esp,0xc
c000b4c7:	c3                   	ret    

c000b4c8 <UnixFile::~UnixFile()>:
c000b4c8:	83 ec 1c             	sub    esp,0x1c
c000b4cb:	ba 18 2c 02 c0       	mov    edx,0xc0022c18
c000b4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4d4:	89 10                	mov    DWORD PTR [eax],edx
c000b4d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4dd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b4e2:	7f 73                	jg     c000b557 <UnixFile::~UnixFile()+0x8f>
c000b4e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b4ec:	83 ec 0c             	sub    esp,0xc
c000b4ef:	68 b8 65 02 c0       	push   0xc00265b8
c000b4f4:	e8 87 5e 01 00       	call   c0021380 <LinkedList<UnixFile>::getFirstElement()>
c000b4f9:	83 c4 10             	add    esp,0x10
c000b4fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b500:	83 ec 0c             	sub    esp,0xc
c000b503:	68 b8 65 02 c0       	push   0xc00265b8
c000b508:	e8 7b 5e 01 00       	call   c0021388 <LinkedList<UnixFile>::removeFirst()>
c000b50d:	83 c4 10             	add    esp,0x10
c000b510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b514:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b518:	74 40                	je     c000b55a <UnixFile::~UnixFile()+0x92>
c000b51a:	83 ec 08             	sub    esp,0x8
c000b51d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b521:	68 b8 65 02 c0       	push   0xc00265b8
c000b526:	e8 81 5d 01 00       	call   c00212ac <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b52b:	83 c4 10             	add    esp,0x10
c000b52e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b532:	8d 50 01             	lea    edx,[eax+0x1]
c000b535:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b539:	3d 88 13 00 00       	cmp    eax,0x1388
c000b53e:	0f 94 c0             	sete   al
c000b541:	84 c0                	test   al,al
c000b543:	74 a7                	je     c000b4ec <UnixFile::~UnixFile()+0x24>
c000b545:	83 ec 0c             	sub    esp,0xc
c000b548:	68 f0 2b 02 c0       	push   0xc0022bf0
c000b54d:	e8 6b 8e 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000b552:	83 c4 10             	add    esp,0x10
c000b555:	eb 95                	jmp    c000b4ec <UnixFile::~UnixFile()+0x24>
c000b557:	90                   	nop
c000b558:	eb 01                	jmp    c000b55b <UnixFile::~UnixFile()+0x93>
c000b55a:	90                   	nop
c000b55b:	90                   	nop
c000b55c:	83 c4 1c             	add    esp,0x1c
c000b55f:	c3                   	ret    

c000b560 <UnixFile::~UnixFile()>:
c000b560:	83 ec 0c             	sub    esp,0xc
c000b563:	83 ec 0c             	sub    esp,0xc
c000b566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b56a:	e8 59 ff ff ff       	call   c000b4c8 <UnixFile::~UnixFile()>
c000b56f:	83 c4 10             	add    esp,0x10
c000b572:	83 ec 08             	sub    esp,0x8
c000b575:	6a 0c                	push   0xc
c000b577:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57b:	e8 9a 14 00 00       	call   c000ca1a <operator delete(void*, unsigned long)>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	83 c4 0c             	add    esp,0xc
c000b586:	c3                   	ret    
c000b587:	90                   	nop

c000b588 <ReservedFilename::~ReservedFilename()>:
c000b588:	83 ec 0c             	sub    esp,0xc
c000b58b:	ba 34 2c 02 c0       	mov    edx,0xc0022c34
c000b590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b594:	89 10                	mov    DWORD PTR [eax],edx
c000b596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b59a:	83 ec 0c             	sub    esp,0xc
c000b59d:	50                   	push   eax
c000b59e:	e8 25 ff ff ff       	call   c000b4c8 <UnixFile::~UnixFile()>
c000b5a3:	83 c4 10             	add    esp,0x10
c000b5a6:	90                   	nop
c000b5a7:	83 c4 0c             	add    esp,0xc
c000b5aa:	c3                   	ret    
c000b5ab:	90                   	nop

c000b5ac <ReservedFilename::~ReservedFilename()>:
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b6:	e8 cd ff ff ff       	call   c000b588 <ReservedFilename::~ReservedFilename()>
c000b5bb:	83 c4 10             	add    esp,0x10
c000b5be:	83 ec 08             	sub    esp,0x8
c000b5c1:	6a 0c                	push   0xc
c000b5c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c7:	e8 4e 14 00 00       	call   c000ca1a <operator delete(void*, unsigned long)>
c000b5cc:	83 c4 10             	add    esp,0x10
c000b5cf:	83 c4 0c             	add    esp,0xc
c000b5d2:	c3                   	ret    

c000b5d3 <getFromFileDescriptor(int)>:
c000b5d3:	53                   	push   ebx
c000b5d4:	83 ec 08             	sub    esp,0x8
c000b5d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5db:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b5e1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b5e7:	7f 2c                	jg     c000b615 <getFromFileDescriptor(int)+0x42>
c000b5e9:	83 ec 0c             	sub    esp,0xc
c000b5ec:	68 b8 65 02 c0       	push   0xc00265b8
c000b5f1:	e8 8a 5d 01 00       	call   c0021380 <LinkedList<UnixFile>::getFirstElement()>
c000b5f6:	83 c4 10             	add    esp,0x10
c000b5f9:	85 c0                	test   eax,eax
c000b5fb:	75 04                	jne    c000b601 <getFromFileDescriptor(int)+0x2e>
c000b5fd:	31 c0                	xor    eax,eax
c000b5ff:	eb 6e                	jmp    c000b66f <getFromFileDescriptor(int)+0x9c>
c000b601:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b604:	74 69                	je     c000b66f <getFromFileDescriptor(int)+0x9c>
c000b606:	52                   	push   edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	68 b8 65 02 c0       	push   0xc00265b8
c000b60e:	e8 17 5e 01 00       	call   c002142a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b613:	eb e1                	jmp    c000b5f6 <getFromFileDescriptor(int)+0x23>
c000b615:	a1 ac 65 02 c0       	mov    eax,ds:0xc00265ac
c000b61a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b620:	74 4d                	je     c000b66f <getFromFileDescriptor(int)+0x9c>
c000b622:	a1 b0 65 02 c0       	mov    eax,ds:0xc00265b0
c000b627:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b62d:	74 40                	je     c000b66f <getFromFileDescriptor(int)+0x9c>
c000b62f:	a1 a8 65 02 c0       	mov    eax,ds:0xc00265a8
c000b634:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b63a:	74 33                	je     c000b66f <getFromFileDescriptor(int)+0x9c>
c000b63c:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c000b641:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b647:	74 26                	je     c000b66f <getFromFileDescriptor(int)+0x9c>
c000b649:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b64f:	83 f8 08             	cmp    eax,0x8
c000b652:	77 09                	ja     c000b65d <getFromFileDescriptor(int)+0x8a>
c000b654:	8b 04 85 80 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9a80]
c000b65b:	eb 12                	jmp    c000b66f <getFromFileDescriptor(int)+0x9c>
c000b65d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b663:	83 fb 08             	cmp    ebx,0x8
c000b666:	77 95                	ja     c000b5fd <getFromFileDescriptor(int)+0x2a>
c000b668:	8b 04 9d 40 65 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9ac0]
c000b66f:	83 c4 08             	add    esp,0x8
c000b672:	5b                   	pop    ebx
c000b673:	c3                   	ret    

c000b674 <__static_initialization_and_destruction_0(int, int)>:
c000b674:	83 ec 0c             	sub    esp,0xc
c000b677:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b67c:	75 34                	jne    c000b6b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b67e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b686:	75 2a                	jne    c000b6b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b688:	83 ec 0c             	sub    esp,0xc
c000b68b:	68 b8 65 02 c0       	push   0xc00265b8
c000b690:	e8 d5 5b 01 00       	call   c002126a <LinkedList<UnixFile>::LinkedList()>
c000b695:	83 c4 10             	add    esp,0x10
c000b698:	83 ec 04             	sub    esp,0x4
c000b69b:	68 08 57 02 c0       	push   0xc0025708
c000b6a0:	68 b8 65 02 c0       	push   0xc00265b8
c000b6a5:	68 68 12 02 c0       	push   0xc0021268
c000b6aa:	e8 e5 12 00 00       	call   c000c994 <__cxa_atexit>
c000b6af:	83 c4 10             	add    esp,0x10
c000b6b2:	90                   	nop
c000b6b3:	83 c4 0c             	add    esp,0xc
c000b6b6:	c3                   	ret    

c000b6b7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b6b7:	83 ec 0c             	sub    esp,0xc
c000b6ba:	83 ec 08             	sub    esp,0x8
c000b6bd:	68 ff ff 00 00       	push   0xffff
c000b6c2:	6a 01                	push   0x1
c000b6c4:	e8 ab ff ff ff       	call   c000b674 <__static_initialization_and_destruction_0(int, int)>
c000b6c9:	83 c4 10             	add    esp,0x10
c000b6cc:	83 c4 0c             	add    esp,0xc
c000b6cf:	c3                   	ret    

c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b6d0:	53                   	push   ebx
c000b6d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6d9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b6df:	89 c8                	mov    eax,ecx
c000b6e1:	d1 e8                	shr    eax,1
c000b6e3:	03 05 e8 58 02 c0    	add    eax,DWORD PTR ds:0xc00258e8
c000b6e9:	83 e1 01             	and    ecx,0x1
c000b6ec:	8a 10                	mov    dl,BYTE PTR [eax]
c000b6ee:	75 09                	jne    c000b6f9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b6f0:	83 e2 f0             	and    edx,0xfffffff0
c000b6f3:	09 da                	or     edx,ebx
c000b6f5:	88 10                	mov    BYTE PTR [eax],dl
c000b6f7:	5b                   	pop    ebx
c000b6f8:	c3                   	ret    
c000b6f9:	c1 e3 04             	shl    ebx,0x4
c000b6fc:	83 e2 0f             	and    edx,0xf
c000b6ff:	09 da                	or     edx,ebx
c000b701:	88 10                	mov    BYTE PTR [eax],dl
c000b703:	5b                   	pop    ebx
c000b704:	c3                   	ret    

c000b705 <Virt::getPageState(unsigned long)>:
c000b705:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b709:	8b 0d e8 58 02 c0    	mov    ecx,DWORD PTR ds:0xc00258e8
c000b70f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b715:	89 d0                	mov    eax,edx
c000b717:	d1 e8                	shr    eax,1
c000b719:	83 e2 01             	and    edx,0x1
c000b71c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b71f:	75 04                	jne    c000b725 <Virt::getPageState(unsigned long)+0x20>
c000b721:	83 e0 0f             	and    eax,0xf
c000b724:	c3                   	ret    
c000b725:	c0 e8 04             	shr    al,0x4
c000b728:	c3                   	ret    

c000b729 <Virt::allocateKernelVirtualPages(int)>:
c000b729:	55                   	push   ebp
c000b72a:	31 ed                	xor    ebp,ebp
c000b72c:	57                   	push   edi
c000b72d:	56                   	push   esi
c000b72e:	53                   	push   ebx
c000b72f:	31 db                	xor    ebx,ebx
c000b731:	83 ec 1c             	sub    esp,0x1c
c000b734:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b738:	8b 3d e4 58 02 c0    	mov    edi,DWORD PTR ds:0xc00258e4
c000b73e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b743:	57                   	push   edi
c000b744:	e8 bc ff ff ff       	call   c000b705 <Virt::getPageState(unsigned long)>
c000b749:	5a                   	pop    edx
c000b74a:	84 c0                	test   al,al
c000b74c:	75 3a                	jne    c000b788 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b74e:	85 db                	test   ebx,ebx
c000b750:	75 02                	jne    c000b754 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b752:	89 fd                	mov    ebp,edi
c000b754:	43                   	inc    ebx
c000b755:	39 f3                	cmp    ebx,esi
c000b757:	74 5a                	je     c000b7b3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b759:	47                   	inc    edi
c000b75a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b760:	76 31                	jbe    c000b793 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b762:	c7 05 e4 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00258e4,0xc8000
c000b76c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b771:	75 28                	jne    c000b79b <Virt::allocateKernelVirtualPages(int)+0x72>
c000b773:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b778:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b77d:	57                   	push   edi
c000b77e:	e8 82 ff ff ff       	call   c000b705 <Virt::getPageState(unsigned long)>
c000b783:	5a                   	pop    edx
c000b784:	84 c0                	test   al,al
c000b786:	74 c6                	je     c000b74e <Virt::allocateKernelVirtualPages(int)+0x25>
c000b788:	31 db                	xor    ebx,ebx
c000b78a:	47                   	inc    edi
c000b78b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b791:	77 cf                	ja     c000b762 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b793:	89 3d e4 58 02 c0    	mov    DWORD PTR ds:0xc00258e4,edi
c000b799:	eb a8                	jmp    c000b743 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b79b:	83 ec 0c             	sub    esp,0xc
c000b79e:	68 48 2c 02 c0       	push   0xc0022c48
c000b7a3:	e8 15 8c 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000b7a8:	8b 3d e4 58 02 c0    	mov    edi,DWORD PTR ds:0xc00258e4
c000b7ae:	83 c4 10             	add    esp,0x10
c000b7b1:	eb 90                	jmp    c000b743 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b7b3:	89 2d e4 58 02 c0    	mov    DWORD PTR ds:0xc00258e4,ebp
c000b7b9:	4b                   	dec    ebx
c000b7ba:	74 5f                	je     c000b81b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b7bc:	85 f6                	test   esi,esi
c000b7be:	74 3d                	je     c000b7fd <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7c0:	89 e8                	mov    eax,ebp
c000b7c2:	31 db                	xor    ebx,ebx
c000b7c4:	8d 7e ff             	lea    edi,[esi-0x1]
c000b7c7:	eb 14                	jmp    c000b7dd <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b7c9:	6a 01                	push   0x1
c000b7cb:	43                   	inc    ebx
c000b7cc:	50                   	push   eax
c000b7cd:	e8 fe fe ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7d2:	58                   	pop    eax
c000b7d3:	39 f3                	cmp    ebx,esi
c000b7d5:	5a                   	pop    edx
c000b7d6:	74 25                	je     c000b7fd <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7d8:	a1 e4 58 02 c0       	mov    eax,ds:0xc00258e4
c000b7dd:	8d 50 01             	lea    edx,[eax+0x1]
c000b7e0:	85 db                	test   ebx,ebx
c000b7e2:	89 15 e4 58 02 c0    	mov    DWORD PTR ds:0xc00258e4,edx
c000b7e8:	74 20                	je     c000b80a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b7ea:	39 df                	cmp    edi,ebx
c000b7ec:	75 db                	jne    c000b7c9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b7ee:	6a 03                	push   0x3
c000b7f0:	43                   	inc    ebx
c000b7f1:	50                   	push   eax
c000b7f2:	e8 d9 fe ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7f7:	59                   	pop    ecx
c000b7f8:	39 f3                	cmp    ebx,esi
c000b7fa:	58                   	pop    eax
c000b7fb:	75 db                	jne    c000b7d8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7fd:	83 c4 1c             	add    esp,0x1c
c000b800:	89 e8                	mov    eax,ebp
c000b802:	5b                   	pop    ebx
c000b803:	c1 e0 0c             	shl    eax,0xc
c000b806:	5e                   	pop    esi
c000b807:	5f                   	pop    edi
c000b808:	5d                   	pop    ebp
c000b809:	c3                   	ret    
c000b80a:	6a 02                	push   0x2
c000b80c:	bb 01 00 00 00       	mov    ebx,0x1
c000b811:	50                   	push   eax
c000b812:	e8 b9 fe ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b817:	58                   	pop    eax
c000b818:	5a                   	pop    edx
c000b819:	eb bd                	jmp    c000b7d8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b81b:	6a 04                	push   0x4
c000b81d:	8d 45 01             	lea    eax,[ebp+0x1]
c000b820:	55                   	push   ebp
c000b821:	a3 e4 58 02 c0       	mov    ds:0xc00258e4,eax
c000b826:	e8 a5 fe ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b82b:	59                   	pop    ecx
c000b82c:	89 e8                	mov    eax,ebp
c000b82e:	5b                   	pop    ebx
c000b82f:	c1 e0 0c             	shl    eax,0xc
c000b832:	83 c4 1c             	add    esp,0x1c
c000b835:	5b                   	pop    ebx
c000b836:	5e                   	pop    esi
c000b837:	5f                   	pop    edi
c000b838:	5d                   	pop    ebp
c000b839:	c3                   	ret    

c000b83a <Virt::freeSwapfilePage(unsigned long)>:
c000b83a:	53                   	push   ebx
c000b83b:	8b 15 cc 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265cc
c000b841:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b845:	b8 01 00 00 00       	mov    eax,0x1
c000b84a:	89 cb                	mov    ebx,ecx
c000b84c:	d3 e0                	shl    eax,cl
c000b84e:	c1 eb 05             	shr    ebx,0x5
c000b851:	f7 d0                	not    eax
c000b853:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b856:	5b                   	pop    ebx
c000b857:	c3                   	ret    

c000b858 <Virt::swapIDToSector(unsigned long)>:
c000b858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b85c:	0f af 05 ec 58 02 c0 	imul   eax,DWORD PTR ds:0xc00258ec
c000b863:	03 05 f4 58 02 c0    	add    eax,DWORD PTR ds:0xc00258f4
c000b869:	c3                   	ret    

c000b86a <Virt::allocateSwapfilePage()>:
c000b86a:	55                   	push   ebp
c000b86b:	31 d2                	xor    edx,edx
c000b86d:	57                   	push   edi
c000b86e:	56                   	push   esi
c000b86f:	53                   	push   ebx
c000b870:	83 ec 0c             	sub    esp,0xc
c000b873:	8b 0d ec 58 02 c0    	mov    ecx,DWORD PTR ds:0xc00258ec
c000b879:	a1 f0 58 02 c0       	mov    eax,ds:0xc00258f0
c000b87e:	f7 f1                	div    ecx
c000b880:	39 0d f0 58 02 c0    	cmp    DWORD PTR ds:0xc00258f0,ecx
c000b886:	72 2d                	jb     c000b8b5 <Virt::allocateSwapfilePage()+0x4b>
c000b888:	8b 35 cc 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265cc
c000b88e:	8b 16                	mov    edx,DWORD PTR [esi]
c000b890:	f6 c2 01             	test   dl,0x1
c000b893:	74 3c                	je     c000b8d1 <Virt::allocateSwapfilePage()+0x67>
c000b895:	31 c9                	xor    ecx,ecx
c000b897:	bf 01 00 00 00       	mov    edi,0x1
c000b89c:	eb 12                	jmp    c000b8b0 <Virt::allocateSwapfilePage()+0x46>
c000b89e:	89 fd                	mov    ebp,edi
c000b8a0:	89 ca                	mov    edx,ecx
c000b8a2:	d3 e5                	shl    ebp,cl
c000b8a4:	c1 ea 05             	shr    edx,0x5
c000b8a7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b8aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8ac:	85 ea                	test   edx,ebp
c000b8ae:	74 2a                	je     c000b8da <Virt::allocateSwapfilePage()+0x70>
c000b8b0:	41                   	inc    ecx
c000b8b1:	39 c8                	cmp    eax,ecx
c000b8b3:	77 e9                	ja     c000b89e <Virt::allocateSwapfilePage()+0x34>
c000b8b5:	83 ec 0c             	sub    esp,0xc
c000b8b8:	68 00 2e 02 c0       	push   0xc0022e00
c000b8bd:	e8 fb 8a 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	31 c9                	xor    ecx,ecx
c000b8c7:	83 c4 0c             	add    esp,0xc
c000b8ca:	89 c8                	mov    eax,ecx
c000b8cc:	5b                   	pop    ebx
c000b8cd:	5e                   	pop    esi
c000b8ce:	5f                   	pop    edi
c000b8cf:	5d                   	pop    ebp
c000b8d0:	c3                   	ret    
c000b8d1:	89 f3                	mov    ebx,esi
c000b8d3:	bd 01 00 00 00       	mov    ebp,0x1
c000b8d8:	31 c9                	xor    ecx,ecx
c000b8da:	09 ea                	or     edx,ebp
c000b8dc:	89 c8                	mov    eax,ecx
c000b8de:	89 13                	mov    DWORD PTR [ebx],edx
c000b8e0:	83 c4 0c             	add    esp,0xc
c000b8e3:	5b                   	pop    ebx
c000b8e4:	5e                   	pop    esi
c000b8e5:	5f                   	pop    edi
c000b8e6:	5d                   	pop    ebp
c000b8e7:	c3                   	ret    

c000b8e8 <Virt::virtualMemorySetup()>:
c000b8e8:	53                   	push   ebx
c000b8e9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8ee:	6a 0f                	push   0xf
c000b8f0:	53                   	push   ebx
c000b8f1:	43                   	inc    ebx
c000b8f2:	e8 d9 fd ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8f7:	58                   	pop    eax
c000b8f8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8fe:	5a                   	pop    edx
c000b8ff:	75 ed                	jne    c000b8ee <Virt::virtualMemorySetup()+0x6>
c000b901:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b906:	6a 00                	push   0x0
c000b908:	53                   	push   ebx
c000b909:	43                   	inc    ebx
c000b90a:	e8 c1 fd ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b90f:	59                   	pop    ecx
c000b910:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b916:	58                   	pop    eax
c000b917:	75 ed                	jne    c000b906 <Virt::virtualMemorySetup()+0x1e>
c000b919:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b91e:	6a 0f                	push   0xf
c000b920:	53                   	push   ebx
c000b921:	43                   	inc    ebx
c000b922:	e8 a9 fd ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b927:	58                   	pop    eax
c000b928:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b92e:	5a                   	pop    edx
c000b92f:	75 ed                	jne    c000b91e <Virt::virtualMemorySetup()+0x36>
c000b931:	5b                   	pop    ebx
c000b932:	c3                   	ret    

c000b933 <Virt::setupPageSwapping(int)>:
c000b933:	53                   	push   ebx
c000b934:	83 ec 0c             	sub    esp,0xc
c000b937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b93b:	a1 68 6a 02 c0       	mov    eax,ds:0xc0026a68
c000b940:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b946:	8b 10                	mov    edx,DWORD PTR [eax]
c000b948:	53                   	push   ebx
c000b949:	c1 e3 0b             	shl    ebx,0xb
c000b94c:	68 17 2e 02 c0       	push   0xc0022e17
c000b951:	50                   	push   eax
c000b952:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b955:	89 1d f0 58 02 c0    	mov    DWORD PTR ds:0xc00258f0,ebx
c000b95b:	c6 05 f8 58 02 c0 43 	mov    BYTE PTR ds:0xc00258f8,0x43
c000b962:	c1 eb 08             	shr    ebx,0x8
c000b965:	a3 f4 58 02 c0       	mov    ds:0xc00258f4,eax
c000b96a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b96d:	c7 05 ec 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00258ec,0x8
c000b977:	e8 47 e0 ff ff       	call   c00099c3 <malloc>
c000b97c:	83 c4 0c             	add    esp,0xc
c000b97f:	89 c1                	mov    ecx,eax
c000b981:	a3 cc 65 02 c0       	mov    ds:0xc00265cc,eax
c000b986:	31 d2                	xor    edx,edx
c000b988:	a1 f0 58 02 c0       	mov    eax,ds:0xc00258f0
c000b98d:	f7 35 ec 58 02 c0    	div    DWORD PTR ds:0xc00258ec
c000b993:	c1 e8 05             	shr    eax,0x5
c000b996:	50                   	push   eax
c000b997:	6a 00                	push   0x0
c000b999:	51                   	push   ecx
c000b99a:	e8 e5 4c ff ff       	call   c0000684 <memset>
c000b99f:	83 c4 18             	add    esp,0x18
c000b9a2:	5b                   	pop    ebx
c000b9a3:	c3                   	ret    

c000b9a4 <VAS::VAS()>:
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b9ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9be:	a3 d0 65 02 c0       	mov    ds:0xc00265d0,eax
c000b9c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9c7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b9cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9cf:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b9d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9d6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b9dd:	90                   	nop
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <VAS::VAS(VAS*)>:
c000b9e0:	83 ec 0c             	sub    esp,0xc
c000b9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b9f9:	83 ec 0c             	sub    esp,0xc
c000b9fc:	68 68 2c 02 c0       	push   0xc0022c68
c000ba01:	e8 b7 89 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	90                   	nop
c000ba0a:	83 c4 0c             	add    esp,0xc
c000ba0d:	c3                   	ret    

c000ba0e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000ba0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba12:	89 c2                	mov    edx,eax
c000ba14:	c1 e8 0a             	shr    eax,0xa
c000ba17:	c1 ea 16             	shr    edx,0x16
c000ba1a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000ba1f:	19 c9                	sbb    ecx,ecx
c000ba21:	c1 e2 0c             	shl    edx,0xc
c000ba24:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000ba2a:	25 fc 0f 00 00       	and    eax,0xffc
c000ba2f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000ba36:	01 d0                	add    eax,edx
c000ba38:	c3                   	ret    
c000ba39:	90                   	nop

c000ba3a <VAS::getPageTableEntry(unsigned long)>:
c000ba3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba3e:	89 ca                	mov    edx,ecx
c000ba40:	c1 e9 0a             	shr    ecx,0xa
c000ba43:	c1 ea 16             	shr    edx,0x16
c000ba46:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000ba4c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000ba52:	c1 e0 0c             	shl    eax,0xc
c000ba55:	8d 04 08             	lea    eax,[eax+ecx*1]
c000ba58:	c3                   	ret    

c000ba59 <Virt::freeKernelVirtualPages(unsigned long)>:
c000ba59:	57                   	push   edi
c000ba5a:	56                   	push   esi
c000ba5b:	be 01 00 00 00       	mov    esi,0x1
c000ba60:	53                   	push   ebx
c000ba61:	83 ec 10             	sub    esp,0x10
c000ba64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba68:	c1 eb 0c             	shr    ebx,0xc
c000ba6b:	eb 3f                	jmp    c000baac <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000ba6d:	83 ec 08             	sub    esp,0x8
c000ba70:	57                   	push   edi
c000ba71:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c000ba77:	e8 be ff ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000ba7c:	83 c4 10             	add    esp,0x10
c000ba7f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba81:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba85:	f6 c4 04             	test   ah,0x4
c000ba88:	75 5f                	jne    c000bae9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000ba8a:	80 fa 04             	cmp    dl,0x4
c000ba8d:	74 78                	je     c000bb07 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000ba8f:	80 fa 02             	cmp    dl,0x2
c000ba92:	0f 84 88 00 00 00    	je     c000bb20 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ba98:	80 fa 03             	cmp    dl,0x3
c000ba9b:	0f 84 ad 00 00 00    	je     c000bb4e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000baa1:	fe ca                	dec    dl
c000baa3:	0f 84 92 00 00 00    	je     c000bb3b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000baa9:	43                   	inc    ebx
c000baaa:	31 f6                	xor    esi,esi
c000baac:	53                   	push   ebx
c000baad:	89 df                	mov    edi,ebx
c000baaf:	e8 51 fc ff ff       	call   c000b705 <Virt::getPageState(unsigned long)>
c000bab4:	c1 e7 0c             	shl    edi,0xc
c000bab7:	59                   	pop    ecx
c000bab8:	84 c0                	test   al,al
c000baba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000babe:	75 ad                	jne    c000ba6d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bac0:	83 ec 0c             	sub    esp,0xc
c000bac3:	68 2e 2e 02 c0       	push   0xc0022e2e
c000bac8:	e8 f0 88 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000bacd:	58                   	pop    eax
c000bace:	5a                   	pop    edx
c000bacf:	57                   	push   edi
c000bad0:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c000bad6:	e8 5f ff ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	8b 00                	mov    eax,DWORD PTR [eax]
c000bae0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bae4:	f6 c4 04             	test   ah,0x4
c000bae7:	74 c0                	je     c000baa9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bae9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000baed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000baf2:	83 ec 0c             	sub    esp,0xc
c000baf5:	50                   	push   eax
c000baf6:	e8 7b e2 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bb02:	80 fa 04             	cmp    dl,0x4
c000bb05:	75 88                	jne    c000ba8f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bb07:	89 f0                	mov    eax,esi
c000bb09:	84 c0                	test   al,al
c000bb0b:	75 47                	jne    c000bb54 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bb0d:	c7 44 24 20 8c 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c8c
c000bb15:	83 c4 10             	add    esp,0x10
c000bb18:	5b                   	pop    ebx
c000bb19:	5e                   	pop    esi
c000bb1a:	5f                   	pop    edi
c000bb1b:	e9 9d 88 00 00       	jmp    c00143bd <Krnl::panic(char const*)>
c000bb20:	89 f0                	mov    eax,esi
c000bb22:	84 c0                	test   al,al
c000bb24:	75 15                	jne    c000bb3b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bb26:	83 ec 0c             	sub    esp,0xc
c000bb29:	68 4a 2e 02 c0       	push   0xc0022e4a
c000bb2e:	e8 8a 88 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000bb33:	83 c4 10             	add    esp,0x10
c000bb36:	e9 6e ff ff ff       	jmp    c000baa9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb3b:	83 ec 08             	sub    esp,0x8
c000bb3e:	6a 00                	push   0x0
c000bb40:	53                   	push   ebx
c000bb41:	e8 8a fb ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	e9 5b ff ff ff       	jmp    c000baa9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb4e:	89 f0                	mov    eax,esi
c000bb50:	84 c0                	test   al,al
c000bb52:	75 15                	jne    c000bb69 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bb54:	83 ec 08             	sub    esp,0x8
c000bb57:	6a 00                	push   0x0
c000bb59:	53                   	push   ebx
c000bb5a:	e8 71 fb ff ff       	call   c000b6d0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb5f:	83 c4 10             	add    esp,0x10
c000bb62:	83 c4 10             	add    esp,0x10
c000bb65:	5b                   	pop    ebx
c000bb66:	5e                   	pop    esi
c000bb67:	5f                   	pop    edi
c000bb68:	c3                   	ret    
c000bb69:	c7 44 24 20 66 2e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022e66
c000bb71:	83 c4 10             	add    esp,0x10
c000bb74:	5b                   	pop    ebx
c000bb75:	5e                   	pop    esi
c000bb76:	5f                   	pop    edi
c000bb77:	e9 41 88 00 00       	jmp    c00143bd <Krnl::panic(char const*)>

c000bb7c <VAS::freeAllocatedPages(unsigned long)>:
c000bb7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb84:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bb88:	74 09                	je     c000bb93 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bb8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb8e:	e9 c6 fe ff ff       	jmp    c000ba59 <Virt::freeKernelVirtualPages(unsigned long)>
c000bb93:	c7 44 24 04 b0 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022cb0
c000bb9b:	e9 5b 0f 00 00       	jmp    c000cafb <Dbg::kprintf(char const*, ...)>

c000bba0 <VAS::virtualToPhysical(unsigned long)>:
c000bba0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bba4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bba8:	e8 8d fe ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000bbad:	5a                   	pop    edx
c000bbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbb0:	59                   	pop    ecx
c000bbb1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bbb6:	c3                   	ret    
c000bbb7:	90                   	nop

c000bbb8 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bbb8:	55                   	push   ebp
c000bbb9:	57                   	push   edi
c000bbba:	56                   	push   esi
c000bbbb:	53                   	push   ebx
c000bbbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbc0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bbc4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bbc8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bbcc:	85 db                	test   ebx,ebx
c000bbce:	7e 22                	jle    c000bbf2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bbd0:	c1 e3 0c             	shl    ebx,0xc
c000bbd3:	01 f3                	add    ebx,esi
c000bbd5:	56                   	push   esi
c000bbd6:	81 c6 00 10 00 00    	add    esi,0x1000
c000bbdc:	55                   	push   ebp
c000bbdd:	e8 58 fe ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000bbe2:	5a                   	pop    edx
c000bbe3:	59                   	pop    ecx
c000bbe4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbe6:	21 f9                	and    ecx,edi
c000bbe8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bbec:	39 f3                	cmp    ebx,esi
c000bbee:	89 08                	mov    DWORD PTR [eax],ecx
c000bbf0:	75 e3                	jne    c000bbd5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bbf2:	5b                   	pop    ebx
c000bbf3:	5e                   	pop    esi
c000bbf4:	5f                   	pop    edi
c000bbf5:	5d                   	pop    ebp
c000bbf6:	c3                   	ret    
c000bbf7:	90                   	nop

c000bbf8 <VAS::setToWriteCombining(unsigned long, int)>:
c000bbf8:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000bbfd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bc03:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bc0a:	75 01                	jne    c000bc0d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bc0c:	c3                   	ret    
c000bc0d:	68 80 00 00 00       	push   0x80
c000bc12:	6a ff                	push   0xffffffff
c000bc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc20:	e8 93 ff ff ff       	call   c000bbb8 <VAS::reflagRange(unsigned long, int, int, int)>
c000bc25:	83 c4 14             	add    esp,0x14
c000bc28:	c3                   	ret    
c000bc29:	90                   	nop

c000bc2a <VAS::mapOtherVASIn(bool, VAS*)>:
c000bc2a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bc2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc33:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bc36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc3a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bc3d:	19 c0                	sbb    eax,eax
c000bc3f:	83 ca 03             	or     edx,0x3
c000bc42:	83 e0 fc             	and    eax,0xfffffffc
c000bc45:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bc4c:	0f 20 d8             	mov    eax,cr3
c000bc4f:	0f 22 d8             	mov    cr3,eax
c000bc52:	c3                   	ret    
c000bc53:	90                   	nop

c000bc54 <VAS::~VAS()>:
c000bc54:	83 ec 2c             	sub    esp,0x2c
c000bc57:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bc5f:	fa                   	cli    
c000bc60:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000bc65:	40                   	inc    eax
c000bc66:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000bc6b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc70:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc75:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bc7f:	6a 01                	push   0x1
c000bc81:	50                   	push   eax
c000bc82:	e8 a3 ff ff ff       	call   c000bc2a <VAS::mapOtherVASIn(bool, VAS*)>
c000bc87:	83 c4 0c             	add    esp,0xc
c000bc8a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc92:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bc9a:	0f 8f d4 00 00 00    	jg     c000bd74 <VAS::~VAS()+0x120>
c000bca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bca4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bca7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcab:	c1 e2 02             	shl    edx,0x2
c000bcae:	01 d0                	add    eax,edx
c000bcb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcba:	83 e0 01             	and    eax,0x1
c000bcbd:	0f 84 a8 00 00 00    	je     c000bd6b <VAS::~VAS()+0x117>
c000bcc3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bccb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bcd3:	7f 72                	jg     c000bd47 <VAS::~VAS()+0xf3>
c000bcd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bcd9:	c1 e0 0a             	shl    eax,0xa
c000bcdc:	89 c2                	mov    edx,eax
c000bcde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bce2:	01 d0                	add    eax,edx
c000bce4:	c1 e0 0c             	shl    eax,0xc
c000bce7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bceb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcf2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bcf5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bcfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcff:	6a 01                	push   0x1
c000bd01:	50                   	push   eax
c000bd02:	e8 07 fd ff ff       	call   c000ba0e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bd07:	83 c4 0c             	add    esp,0xc
c000bd0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd12:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd1c:	25 01 04 00 00       	and    eax,0x401
c000bd21:	3d 01 04 00 00       	cmp    eax,0x401
c000bd26:	75 19                	jne    c000bd41 <VAS::~VAS()+0xed>
c000bd28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd2c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd31:	83 ec 0c             	sub    esp,0xc
c000bd34:	50                   	push   eax
c000bd35:	e8 3c e0 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bd3a:	83 c4 10             	add    esp,0x10
c000bd3d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd41:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd45:	eb 84                	jmp    c000bccb <VAS::~VAS()+0x77>
c000bd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4b:	25 00 04 00 00       	and    eax,0x400
c000bd50:	74 19                	je     c000bd6b <VAS::~VAS()+0x117>
c000bd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd56:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd5b:	83 ec 0c             	sub    esp,0xc
c000bd5e:	50                   	push   eax
c000bd5f:	e8 12 e0 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bd64:	83 c4 10             	add    esp,0x10
c000bd67:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd6b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bd6f:	e9 1e ff ff ff       	jmp    c000bc92 <VAS::~VAS()+0x3e>
c000bd74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	50                   	push   eax
c000bd7f:	e8 d5 fc ff ff       	call   c000ba59 <Virt::freeKernelVirtualPages(unsigned long)>
c000bd84:	83 c4 10             	add    esp,0x10
c000bd87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd8e:	83 ec 0c             	sub    esp,0xc
c000bd91:	50                   	push   eax
c000bd92:	e8 df df ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bd97:	83 c4 10             	add    esp,0x10
c000bd9a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bda2:	c1 e0 02             	shl    eax,0x2
c000bda5:	83 ec 08             	sub    esp,0x8
c000bda8:	50                   	push   eax
c000bda9:	68 d4 2c 02 c0       	push   0xc0022cd4
c000bdae:	e8 48 0d 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000bdb3:	83 c4 10             	add    esp,0x10
c000bdb6:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000bdbb:	48                   	dec    eax
c000bdbc:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000bdc1:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000bdc6:	85 c0                	test   eax,eax
c000bdc8:	75 01                	jne    c000bdcb <VAS::~VAS()+0x177>
c000bdca:	fb                   	sti    
c000bdcb:	90                   	nop
c000bdcc:	83 c4 2c             	add    esp,0x2c
c000bdcf:	c3                   	ret    

c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bdd0:	55                   	push   ebp
c000bdd1:	57                   	push   edi
c000bdd2:	56                   	push   esi
c000bdd3:	53                   	push   ebx
c000bdd4:	83 ec 1c             	sub    esp,0x1c
c000bdd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bddb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bddf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bde5:	77 08                	ja     c000bdef <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bde7:	0f 20 d8             	mov    eax,cr3
c000bdea:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bded:	75 47                	jne    c000be36 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bdef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdf3:	09 d8                	or     eax,ebx
c000bdf5:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdfa:	75 57                	jne    c000be53 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bdfc:	89 de                	mov    esi,ebx
c000bdfe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be01:	c1 ee 16             	shr    esi,0x16
c000be04:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000be0b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000be0f:	74 54                	je     c000be65 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000be11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be15:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000be1b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000be1f:	c1 e6 0c             	shl    esi,0xc
c000be22:	c1 eb 0a             	shr    ebx,0xa
c000be25:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000be2b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000be2e:	83 c4 1c             	add    esp,0x1c
c000be31:	5b                   	pop    ebx
c000be32:	5e                   	pop    esi
c000be33:	5f                   	pop    edi
c000be34:	5d                   	pop    ebp
c000be35:	c3                   	ret    
c000be36:	83 ec 0c             	sub    esp,0xc
c000be39:	68 f4 2c 02 c0       	push   0xc0022cf4
c000be3e:	e8 b8 0c 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000be43:	83 c4 10             	add    esp,0x10
c000be46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be4a:	09 d8                	or     eax,ebx
c000be4c:	a9 ff 0f 00 00       	test   eax,0xfff
c000be51:	74 a9                	je     c000bdfc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be53:	83 ec 0c             	sub    esp,0xc
c000be56:	68 5c 2d 02 c0       	push   0xc0022d5c
c000be5b:	e8 5d 85 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000be60:	83 c4 10             	add    esp,0x10
c000be63:	eb 97                	jmp    c000bdfc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be69:	e8 8b df ff ff       	call   c0009df9 <Phys::allocatePage()>
c000be6e:	83 ec 0c             	sub    esp,0xc
c000be71:	89 c5                	mov    ebp,eax
c000be73:	8b 0d d0 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265d0
c000be79:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be7d:	6a 01                	push   0x1
c000be7f:	e8 a5 f8 ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c000be84:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be8b:	6a 01                	push   0x1
c000be8d:	50                   	push   eax
c000be8e:	55                   	push   ebp
c000be8f:	81 cd 07 04 00 00    	or     ebp,0x407
c000be95:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be99:	51                   	push   ecx
c000be9a:	e8 27 02 00 00       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be9f:	83 c4 1c             	add    esp,0x1c
c000bea2:	68 00 10 00 00       	push   0x1000
c000bea7:	6a 00                	push   0x0
c000bea9:	50                   	push   eax
c000beaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000beae:	e8 d1 47 ff ff       	call   c0000684 <memset>
c000beb3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000beb7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000beba:	e8 9a fb ff ff       	call   c000ba59 <Virt::freeKernelVirtualPages(unsigned long)>
c000bebf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bec3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000becc:	e9 40 ff ff ff       	jmp    c000be11 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000bed1:	90                   	nop

c000bed2 <VAS::allocatePages(int, int)>:
c000bed2:	55                   	push   ebp
c000bed3:	57                   	push   edi
c000bed4:	56                   	push   esi
c000bed5:	53                   	push   ebx
c000bed6:	83 ec 1c             	sub    esp,0x1c
c000bed9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bedd:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000bee2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bee8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000beee:	83 e0 01             	and    eax,0x1
c000bef1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bef5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bef9:	0f 85 cc 00 00 00    	jne    c000bfcb <VAS::allocatePages(int, int)+0xf9>
c000beff:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf06:	85 c0                	test   eax,eax
c000bf08:	0f 84 a1 00 00 00    	je     c000bfaf <VAS::allocatePages(int, int)+0xdd>
c000bf0e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bf12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf16:	c1 e6 0c             	shl    esi,0xc
c000bf19:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bf1d:	85 c0                	test   eax,eax
c000bf1f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bf22:	7e 33                	jle    c000bf57 <VAS::allocatePages(int, int)+0x85>
c000bf24:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bf28:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf2c:	81 cd 00 04 00 00    	or     ebp,0x400
c000bf32:	e8 c2 de ff ff       	call   c0009df9 <Phys::allocatePage()>
c000bf37:	55                   	push   ebp
c000bf38:	53                   	push   ebx
c000bf39:	50                   	push   eax
c000bf3a:	57                   	push   edi
c000bf3b:	e8 90 fe ff ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf40:	83 c4 10             	add    esp,0x10
c000bf43:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf48:	74 03                	je     c000bf4d <VAS::allocatePages(int, int)+0x7b>
c000bf4a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf4d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf53:	39 de                	cmp    esi,ebx
c000bf55:	75 db                	jne    c000bf32 <VAS::allocatePages(int, int)+0x60>
c000bf57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf5c:	75 12                	jne    c000bf70 <VAS::allocatePages(int, int)+0x9e>
c000bf5e:	0f 20 d8             	mov    eax,cr3
c000bf61:	0f 22 d8             	mov    cr3,eax
c000bf64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf68:	83 c4 1c             	add    esp,0x1c
c000bf6b:	5b                   	pop    ebx
c000bf6c:	5e                   	pop    esi
c000bf6d:	5f                   	pop    edi
c000bf6e:	5d                   	pop    ebp
c000bf6f:	c3                   	ret    
c000bf70:	c1 ee 0a             	shr    esi,0xa
c000bf73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf77:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bf7d:	c1 eb 0a             	shr    ebx,0xa
c000bf80:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bf86:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf8c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf92:	39 c3                	cmp    ebx,eax
c000bf94:	77 ce                	ja     c000bf64 <VAS::allocatePages(int, int)+0x92>
c000bf96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf99:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf9f:	39 d8                	cmp    eax,ebx
c000bfa1:	73 f3                	jae    c000bf96 <VAS::allocatePages(int, int)+0xc4>
c000bfa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfa7:	83 c4 1c             	add    esp,0x1c
c000bfaa:	5b                   	pop    ebx
c000bfab:	5e                   	pop    esi
c000bfac:	5f                   	pop    edi
c000bfad:	5d                   	pop    ebp
c000bfae:	c3                   	ret    
c000bfaf:	83 ec 0c             	sub    esp,0xc
c000bfb2:	68 80 2d 02 c0       	push   0xc0022d80
c000bfb7:	e8 01 84 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000bfbc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	e9 43 ff ff ff       	jmp    c000bf0e <VAS::allocatePages(int, int)+0x3c>
c000bfcb:	83 ec 0c             	sub    esp,0xc
c000bfce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bfd2:	e8 52 f7 ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c000bfd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfdb:	83 c4 10             	add    esp,0x10
c000bfde:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bfe3:	0f 87 9b 00 00 00    	ja     c000c084 <VAS::allocatePages(int, int)+0x1b2>
c000bfe9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bfed:	85 d2                	test   edx,edx
c000bfef:	7e 3c                	jle    c000c02d <VAS::allocatePages(int, int)+0x15b>
c000bff1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bff5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bff9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bffd:	c1 e5 0c             	shl    ebp,0xc
c000c000:	81 ce 00 04 00 00    	or     esi,0x400
c000c006:	01 dd                	add    ebp,ebx
c000c008:	e8 ec dd ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c00d:	56                   	push   esi
c000c00e:	53                   	push   ebx
c000c00f:	50                   	push   eax
c000c010:	57                   	push   edi
c000c011:	e8 ba fd ff ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c016:	83 c4 10             	add    esp,0x10
c000c019:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c01e:	74 03                	je     c000c023 <VAS::allocatePages(int, int)+0x151>
c000c020:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c023:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c029:	39 dd                	cmp    ebp,ebx
c000c02b:	75 db                	jne    c000c008 <VAS::allocatePages(int, int)+0x136>
c000c02d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c032:	0f 84 26 ff ff ff    	je     c000bf5e <VAS::allocatePages(int, int)+0x8c>
c000c038:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c03c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c040:	89 d3                	mov    ebx,edx
c000c042:	c1 e0 0c             	shl    eax,0xc
c000c045:	c1 eb 0a             	shr    ebx,0xa
c000c048:	01 d0                	add    eax,edx
c000c04a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c050:	c1 e8 0a             	shr    eax,0xa
c000c053:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c059:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c05e:	2d 00 00 40 00       	sub    eax,0x400000
c000c063:	39 c3                	cmp    ebx,eax
c000c065:	0f 87 f9 fe ff ff    	ja     c000bf64 <VAS::allocatePages(int, int)+0x92>
c000c06b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c06e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c074:	39 d8                	cmp    eax,ebx
c000c076:	73 f3                	jae    c000c06b <VAS::allocatePages(int, int)+0x199>
c000c078:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c07c:	83 c4 1c             	add    esp,0x1c
c000c07f:	5b                   	pop    ebx
c000c080:	5e                   	pop    esi
c000c081:	5f                   	pop    edi
c000c082:	5d                   	pop    ebp
c000c083:	c3                   	ret    
c000c084:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c089:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c08f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c096:	0f 84 4d ff ff ff    	je     c000bfe9 <VAS::allocatePages(int, int)+0x117>
c000c09c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c0a4:	e9 40 ff ff ff       	jmp    c000bfe9 <VAS::allocatePages(int, int)+0x117>
c000c0a9:	90                   	nop

c000c0aa <VAS::setCPUSpecific(unsigned long)>:
c000c0aa:	83 ec 0c             	sub    esp,0xc
c000c0ad:	6a 05                	push   0x5
c000c0af:	68 00 00 40 c2       	push   0xc2400000
c000c0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0bc:	e8 0f fd ff ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0c1:	83 c4 1c             	add    esp,0x1c
c000c0c4:	c3                   	ret    
c000c0c5:	90                   	nop

c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c0c6:	55                   	push   ebp
c000c0c7:	57                   	push   edi
c000c0c8:	56                   	push   esi
c000c0c9:	53                   	push   ebx
c000c0ca:	83 ec 1c             	sub    esp,0x1c
c000c0cd:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c0d2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c0d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0dc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c0e0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c0e6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c0ea:	83 e0 01             	and    eax,0x1
c000c0ed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c0f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0f5:	85 c0                	test   eax,eax
c000c0f7:	7e 39                	jle    c000c132 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c0f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0fd:	89 f3                	mov    ebx,esi
c000c0ff:	c1 e0 0c             	shl    eax,0xc
c000c102:	01 f0                	add    eax,esi
c000c104:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c108:	55                   	push   ebp
c000c109:	53                   	push   ebx
c000c10a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c10e:	29 f0                	sub    eax,esi
c000c110:	01 d8                	add    eax,ebx
c000c112:	50                   	push   eax
c000c113:	57                   	push   edi
c000c114:	e8 b7 fc ff ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c121:	74 03                	je     c000c126 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c123:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c126:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c12c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c130:	75 d6                	jne    c000c108 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c132:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c137:	75 10                	jne    c000c149 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c139:	0f 20 d8             	mov    eax,cr3
c000c13c:	0f 22 d8             	mov    cr3,eax
c000c13f:	83 c4 1c             	add    esp,0x1c
c000c142:	89 f0                	mov    eax,esi
c000c144:	5b                   	pop    ebx
c000c145:	5e                   	pop    esi
c000c146:	5f                   	pop    edi
c000c147:	5d                   	pop    ebp
c000c148:	c3                   	ret    
c000c149:	89 f3                	mov    ebx,esi
c000c14b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c14f:	c1 eb 0a             	shr    ebx,0xa
c000c152:	c1 e0 0c             	shl    eax,0xc
c000c155:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c15b:	01 f0                	add    eax,esi
c000c15d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c163:	c1 e8 0a             	shr    eax,0xa
c000c166:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c16b:	2d 00 00 40 00       	sub    eax,0x400000
c000c170:	39 c3                	cmp    ebx,eax
c000c172:	77 cb                	ja     c000c13f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c174:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c177:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c17d:	39 d8                	cmp    eax,ebx
c000c17f:	73 f3                	jae    c000c174 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c181:	83 c4 1c             	add    esp,0x1c
c000c184:	89 f0                	mov    eax,esi
c000c186:	5b                   	pop    ebx
c000c187:	5e                   	pop    esi
c000c188:	5f                   	pop    edi
c000c189:	5d                   	pop    ebp
c000c18a:	c3                   	ret    
c000c18b:	90                   	nop

c000c18c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c18c:	55                   	push   ebp
c000c18d:	57                   	push   edi
c000c18e:	56                   	push   esi
c000c18f:	53                   	push   ebx
c000c190:	83 ec 1c             	sub    esp,0x1c
c000c193:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c197:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c19b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c19f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c1a3:	a9 ff 0f 00 00       	test   eax,0xfff
c000c1a8:	75 4a                	jne    c000c1f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c1aa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c1ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c1b1:	c1 eb 16             	shr    ebx,0x16
c000c1b4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c1bb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c1bf:	74 4d                	je     c000c20e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c1c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c1c9:	c1 e8 0a             	shr    eax,0xa
c000c1cc:	80 fa 01             	cmp    dl,0x1
c000c1cf:	19 d2                	sbb    edx,edx
c000c1d1:	c1 e3 0c             	shl    ebx,0xc
c000c1d4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c1d8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c1de:	25 fc 0f 00 00       	and    eax,0xffc
c000c1e3:	01 d8                	add    eax,ebx
c000c1e5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c1ec:	83 c4 1c             	add    esp,0x1c
c000c1ef:	5b                   	pop    ebx
c000c1f0:	5e                   	pop    esi
c000c1f1:	5f                   	pop    edi
c000c1f2:	5d                   	pop    ebp
c000c1f3:	c3                   	ret    
c000c1f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c1f8:	83 ec 0c             	sub    esp,0xc
c000c1fb:	68 ac 2d 02 c0       	push   0xc0022dac
c000c200:	e8 b8 81 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000c205:	83 c4 10             	add    esp,0x10
c000c208:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c20c:	eb 9c                	jmp    c000c1aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c20e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c212:	e8 e2 db ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c217:	83 ec 0c             	sub    esp,0xc
c000c21a:	89 c5                	mov    ebp,eax
c000c21c:	8b 0d d0 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265d0
c000c222:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c226:	6a 01                	push   0x1
c000c228:	e8 fc f4 ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c000c22d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c234:	6a 01                	push   0x1
c000c236:	50                   	push   eax
c000c237:	55                   	push   ebp
c000c238:	81 cd 07 04 00 00    	or     ebp,0x407
c000c23e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c242:	51                   	push   ecx
c000c243:	e8 7e fe ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c248:	83 c4 1c             	add    esp,0x1c
c000c24b:	68 00 10 00 00       	push   0x1000
c000c250:	6a 00                	push   0x0
c000c252:	50                   	push   eax
c000c253:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c257:	e8 28 44 ff ff       	call   c0000684 <memset>
c000c25c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c260:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c263:	e8 f1 f7 ff ff       	call   c000ba59 <Virt::freeKernelVirtualPages(unsigned long)>
c000c268:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c26b:	83 c4 10             	add    esp,0x10
c000c26e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c271:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c275:	e9 47 ff ff ff       	jmp    c000c1c1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c27a <VAS::VAS(bool)>:
c000c27a:	53                   	push   ebx
c000c27b:	83 ec 28             	sub    esp,0x28
c000c27e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c282:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c286:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c28a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c291:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c295:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c29c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2a0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c2a4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c2a7:	e8 4d db ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c2ac:	89 c2                	mov    edx,eax
c000c2ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2b2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c2b5:	8b 1d d0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d0
c000c2bb:	83 ec 0c             	sub    esp,0xc
c000c2be:	6a 01                	push   0x1
c000c2c0:	e8 64 f4 ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c000c2c5:	83 c4 10             	add    esp,0x10
c000c2c8:	89 c2                	mov    edx,eax
c000c2ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c2d1:	83 ec 0c             	sub    esp,0xc
c000c2d4:	6a 03                	push   0x3
c000c2d6:	6a 01                	push   0x1
c000c2d8:	52                   	push   edx
c000c2d9:	50                   	push   eax
c000c2da:	53                   	push   ebx
c000c2db:	e8 e6 fd ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2e0:	83 c4 20             	add    esp,0x20
c000c2e3:	89 c2                	mov    edx,eax
c000c2e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c2ec:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c2f4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c2fc:	7f 1c                	jg     c000c31a <VAS::VAS(bool)+0xa0>
c000c2fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c302:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c305:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c309:	c1 e2 02             	shl    edx,0x2
c000c30c:	01 d0                	add    eax,edx
c000c30e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c314:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c318:	eb da                	jmp    c000c2f4 <VAS::VAS(bool)+0x7a>
c000c31a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c322:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c32a:	7f 7a                	jg     c000c3a6 <VAS::VAS(bool)+0x12c>
c000c32c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c330:	2d 00 02 00 00       	sub    eax,0x200
c000c335:	c1 e0 0c             	shl    eax,0xc
c000c338:	83 c8 03             	or     eax,0x3
c000c33b:	89 c2                	mov    edx,eax
c000c33d:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c342:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c348:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c34e:	83 e0 10             	and    eax,0x10
c000c351:	84 c0                	test   al,al
c000c353:	74 07                	je     c000c35c <VAS::VAS(bool)+0xe2>
c000c355:	b8 00 01 00 00       	mov    eax,0x100
c000c35a:	eb 05                	jmp    c000c361 <VAS::VAS(bool)+0xe7>
c000c35c:	b8 00 00 00 00       	mov    eax,0x0
c000c361:	09 d0                	or     eax,edx
c000c363:	89 c1                	mov    ecx,eax
c000c365:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c369:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c36c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c370:	c1 e2 02             	shl    edx,0x2
c000c373:	01 d0                	add    eax,edx
c000c375:	89 ca                	mov    edx,ecx
c000c377:	89 10                	mov    DWORD PTR [eax],edx
c000c379:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c37d:	2d 40 03 00 00       	sub    eax,0x340
c000c382:	83 f8 7f             	cmp    eax,0x7f
c000c385:	77 16                	ja     c000c39d <VAS::VAS(bool)+0x123>
c000c387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c38b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c38e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c392:	c1 e2 02             	shl    edx,0x2
c000c395:	01 d0                	add    eax,edx
c000c397:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c39d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c3a1:	e9 7c ff ff ff       	jmp    c000c322 <VAS::VAS(bool)+0xa8>
c000c3a6:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c3ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3b1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c3b7:	83 e0 10             	and    eax,0x10
c000c3ba:	84 c0                	test   al,al
c000c3bc:	74 07                	je     c000c3c5 <VAS::VAS(bool)+0x14b>
c000c3be:	b8 03 41 00 00       	mov    eax,0x4103
c000c3c3:	eb 05                	jmp    c000c3ca <VAS::VAS(bool)+0x150>
c000c3c5:	b8 03 40 00 00       	mov    eax,0x4003
c000c3ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c3ce:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c3d1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c3d7:	89 02                	mov    DWORD PTR [edx],eax
c000c3d9:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c3de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3e4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c3ea:	83 ec 08             	sub    esp,0x8
c000c3ed:	50                   	push   eax
c000c3ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3f2:	e8 b3 fc ff ff       	call   c000c0aa <VAS::setCPUSpecific(unsigned long)>
c000c3f7:	83 c4 10             	add    esp,0x10
c000c3fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3fe:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c401:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c406:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c40c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c412:	83 e0 10             	and    eax,0x10
c000c415:	84 c0                	test   al,al
c000c417:	74 07                	je     c000c420 <VAS::VAS(bool)+0x1a6>
c000c419:	b8 00 01 00 00       	mov    eax,0x100
c000c41e:	eb 05                	jmp    c000c425 <VAS::VAS(bool)+0x1ab>
c000c420:	b8 00 00 00 00       	mov    eax,0x0
c000c425:	09 c2                	or     edx,eax
c000c427:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c42b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c42e:	05 fc 0f 00 00       	add    eax,0xffc
c000c433:	83 ca 03             	or     edx,0x3
c000c436:	89 10                	mov    DWORD PTR [eax],edx
c000c438:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c43d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c443:	83 ec 0c             	sub    esp,0xc
c000c446:	50                   	push   eax
c000c447:	e8 f6 1d 00 00       	call   c000e242 <Device::getName()>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	83 ec 08             	sub    esp,0x8
c000c452:	68 80 2e 02 c0       	push   0xc0022e80
c000c457:	50                   	push   eax
c000c458:	e8 6f 43 ff ff       	call   c00007cc <strcmp>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	85 c0                	test   eax,eax
c000c462:	0f 94 c0             	sete   al
c000c465:	84 c0                	test   al,al
c000c467:	0f 84 87 00 00 00    	je     c000c4f4 <VAS::VAS(bool)+0x27a>
c000c46d:	fa                   	cli    
c000c46e:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000c473:	40                   	inc    eax
c000c474:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000c479:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c47e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c484:	05 7c 09 00 00       	add    eax,0x97c
c000c489:	83 ec 0c             	sub    esp,0xc
c000c48c:	50                   	push   eax
c000c48d:	e8 20 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c492:	83 c4 10             	add    esp,0x10
c000c495:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c49a:	89 c3                	mov    ebx,eax
c000c49c:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000c4a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4a7:	05 7c 09 00 00       	add    eax,0x97c
c000c4ac:	83 ec 0c             	sub    esp,0xc
c000c4af:	50                   	push   eax
c000c4b0:	e8 fd cf ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	83 ec 08             	sub    esp,0x8
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c0:	e8 75 f5 ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000c4c5:	83 c4 10             	add    esp,0x10
c000c4c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c4cf:	6a 11                	push   0x11
c000c4d1:	53                   	push   ebx
c000c4d2:	50                   	push   eax
c000c4d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d7:	e8 f4 f8 ff ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c4dc:	83 c4 10             	add    esp,0x10
c000c4df:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000c4e4:	48                   	dec    eax
c000c4e5:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000c4ea:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000c4ef:	85 c0                	test   eax,eax
c000c4f1:	75 01                	jne    c000c4f4 <VAS::VAS(bool)+0x27a>
c000c4f3:	fb                   	sti    
c000c4f4:	90                   	nop
c000c4f5:	83 c4 28             	add    esp,0x28
c000c4f8:	5b                   	pop    ebx
c000c4f9:	c3                   	ret    

c000c4fa <VAS::evict(unsigned long)>:
c000c4fa:	55                   	push   ebp
c000c4fb:	57                   	push   edi
c000c4fc:	56                   	push   esi
c000c4fd:	53                   	push   ebx
c000c4fe:	83 ec 28             	sub    esp,0x28
c000c501:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c505:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c509:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c50d:	68 8e 2e 02 c0       	push   0xc0022e8e
c000c512:	e8 e4 05 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c517:	e8 4e f3 ff ff       	call   c000b86a <Virt::allocateSwapfilePage()>
c000c51c:	5a                   	pop    edx
c000c51d:	89 c7                	mov    edi,eax
c000c51f:	59                   	pop    ecx
c000c520:	50                   	push   eax
c000c521:	68 ab 2e 02 c0       	push   0xc0022eab
c000c526:	e8 d0 05 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c52b:	83 c4 10             	add    esp,0x10
c000c52e:	8b 1d ec 58 02 c0    	mov    ebx,DWORD PTR ds:0xc00258ec
c000c534:	85 db                	test   ebx,ebx
c000c536:	7e 3d                	jle    c000c575 <VAS::evict(unsigned long)+0x7b>
c000c538:	89 ee                	mov    esi,ebp
c000c53a:	31 db                	xor    ebx,ebx
c000c53c:	83 ec 0c             	sub    esp,0xc
c000c53f:	57                   	push   edi
c000c540:	e8 13 f3 ff ff       	call   c000b858 <Virt::swapIDToSector(unsigned long)>
c000c545:	89 34 24             	mov    DWORD PTR [esp],esi
c000c548:	01 d8                	add    eax,ebx
c000c54a:	6a 01                	push   0x1
c000c54c:	31 d2                	xor    edx,edx
c000c54e:	43                   	inc    ebx
c000c54f:	52                   	push   edx
c000c550:	81 c6 00 02 00 00    	add    esi,0x200
c000c556:	50                   	push   eax
c000c557:	0f be 05 f8 58 02 c0 	movsx  eax,BYTE PTR ds:0xc00258f8
c000c55e:	ff 34 85 5c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96a4]
c000c565:	e8 1a 3d 00 00       	call   c0010284 <LogicalDisk::write(unsigned long long, int, void*)>
c000c56a:	83 c4 20             	add    esp,0x20
c000c56d:	39 1d ec 58 02 c0    	cmp    DWORD PTR ds:0xc00258ec,ebx
c000c573:	7f c7                	jg     c000c53c <VAS::evict(unsigned long)+0x42>
c000c575:	83 ec 08             	sub    esp,0x8
c000c578:	c1 e7 0b             	shl    edi,0xb
c000c57b:	55                   	push   ebp
c000c57c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c580:	e8 b5 f4 ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000c585:	5a                   	pop    edx
c000c586:	89 c6                	mov    esi,eax
c000c588:	59                   	pop    ecx
c000c589:	ff 30                	push   DWORD PTR [eax]
c000c58b:	68 bb 2e 02 c0       	push   0xc0022ebb
c000c590:	e8 66 05 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c595:	8b 16                	mov    edx,DWORD PTR [esi]
c000c597:	89 d3                	mov    ebx,edx
c000c599:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c59f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c5a5:	09 d7                	or     edi,edx
c000c5a7:	89 3e                	mov    DWORD PTR [esi],edi
c000c5a9:	5e                   	pop    esi
c000c5aa:	58                   	pop    eax
c000c5ab:	57                   	push   edi
c000c5ac:	68 d4 2e 02 c0       	push   0xc0022ed4
c000c5b1:	e8 45 05 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c5b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c5b9:	ff 05 c8 65 02 c0    	inc    DWORD PTR ds:0xc00265c8
c000c5bf:	e8 b2 d7 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000c5c4:	0f 20 d8             	mov    eax,cr3
c000c5c7:	0f 22 d8             	mov    cr3,eax
c000c5ca:	ff 35 c8 65 02 c0    	push   DWORD PTR ds:0xc00265c8
c000c5d0:	55                   	push   ebp
c000c5d1:	53                   	push   ebx
c000c5d2:	68 d0 2d 02 c0       	push   0xc0022dd0
c000c5d7:	e8 1f 05 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c5dc:	a1 c4 65 02 c0       	mov    eax,ds:0xc00265c4
c000c5e1:	c7 44 24 50 ed 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022eed
c000c5e9:	8d 50 01             	lea    edx,[eax+0x1]
c000c5ec:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c5f0:	89 15 c4 65 02 c0    	mov    DWORD PTR ds:0xc00265c4,edx
c000c5f6:	83 c4 3c             	add    esp,0x3c
c000c5f9:	5b                   	pop    ebx
c000c5fa:	5e                   	pop    esi
c000c5fb:	5f                   	pop    edi
c000c5fc:	5d                   	pop    ebp
c000c5fd:	e9 f9 04 00 00       	jmp    c000cafb <Dbg::kprintf(char const*, ...)>

c000c602 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c602:	55                   	push   ebp
c000c603:	57                   	push   edi
c000c604:	56                   	push   esi
c000c605:	53                   	push   ebx
c000c606:	83 ec 24             	sub    esp,0x24
c000c609:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c60d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c611:	68 fe 2e 02 c0       	push   0xc0022efe
c000c616:	e8 e0 04 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c61b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c61f:	58                   	pop    eax
c000c620:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c626:	5a                   	pop    edx
c000c627:	57                   	push   edi
c000c628:	53                   	push   ebx
c000c629:	e8 0c f4 ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000c62e:	59                   	pop    ecx
c000c62f:	5e                   	pop    esi
c000c630:	89 c6                	mov    esi,eax
c000c632:	ff 30                	push   DWORD PTR [eax]
c000c634:	68 11 2f 02 c0       	push   0xc0022f11
c000c639:	e8 bd 04 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c63e:	83 c4 10             	add    esp,0x10
c000c641:	85 ff                	test   edi,edi
c000c643:	74 0a                	je     c000c64f <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c645:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c647:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c64d:	74 0a                	je     c000c659 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c64f:	83 c4 1c             	add    esp,0x1c
c000c652:	31 c0                	xor    eax,eax
c000c654:	5b                   	pop    ebx
c000c655:	5e                   	pop    esi
c000c656:	5f                   	pop    edi
c000c657:	5d                   	pop    ebp
c000c658:	c3                   	ret    
c000c659:	83 ec 08             	sub    esp,0x8
c000c65c:	c1 ed 0b             	shr    ebp,0xb
c000c65f:	55                   	push   ebp
c000c660:	68 1f 2f 02 c0       	push   0xc0022f1f
c000c665:	e8 91 04 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c66a:	e8 8a d7 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c66f:	59                   	pop    ecx
c000c670:	5a                   	pop    edx
c000c671:	50                   	push   eax
c000c672:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c676:	68 2a 2f 02 c0       	push   0xc0022f2a
c000c67b:	e8 7b 04 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c684:	8b 16                	mov    edx,DWORD PTR [esi]
c000c686:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c68c:	09 d0                	or     eax,edx
c000c68e:	0d 01 08 00 00       	or     eax,0x801
c000c693:	89 06                	mov    DWORD PTR [esi],eax
c000c695:	59                   	pop    ecx
c000c696:	5e                   	pop    esi
c000c697:	50                   	push   eax
c000c698:	68 3f 2f 02 c0       	push   0xc0022f3f
c000c69d:	e8 59 04 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c6a2:	0f 20 d8             	mov    eax,cr3
c000c6a5:	83 c4 0c             	add    esp,0xc
c000c6a8:	53                   	push   ebx
c000c6a9:	50                   	push   eax
c000c6aa:	68 57 2f 02 c0       	push   0xc0022f57
c000c6af:	e8 47 04 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c6b4:	c7 04 24 6f 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f6f
c000c6bb:	e8 3b 04 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c6c0:	83 c4 10             	add    esp,0x10
c000c6c3:	a1 ec 58 02 c0       	mov    eax,ds:0xc00258ec
c000c6c8:	85 c0                	test   eax,eax
c000c6ca:	7e 3d                	jle    c000c709 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c6cc:	89 fe                	mov    esi,edi
c000c6ce:	31 db                	xor    ebx,ebx
c000c6d0:	83 ec 0c             	sub    esp,0xc
c000c6d3:	55                   	push   ebp
c000c6d4:	e8 7f f1 ff ff       	call   c000b858 <Virt::swapIDToSector(unsigned long)>
c000c6d9:	89 34 24             	mov    DWORD PTR [esp],esi
c000c6dc:	01 d8                	add    eax,ebx
c000c6de:	6a 01                	push   0x1
c000c6e0:	31 d2                	xor    edx,edx
c000c6e2:	43                   	inc    ebx
c000c6e3:	52                   	push   edx
c000c6e4:	81 c6 00 02 00 00    	add    esi,0x200
c000c6ea:	50                   	push   eax
c000c6eb:	0f be 05 f8 58 02 c0 	movsx  eax,BYTE PTR ds:0xc00258f8
c000c6f2:	ff 34 85 5c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96a4]
c000c6f9:	e8 1a 3b 00 00       	call   c0010218 <LogicalDisk::read(unsigned long long, int, void*)>
c000c6fe:	83 c4 20             	add    esp,0x20
c000c701:	39 1d ec 58 02 c0    	cmp    DWORD PTR ds:0xc00258ec,ebx
c000c707:	7f c7                	jg     c000c6d0 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c709:	a1 c8 65 02 c0       	mov    eax,ds:0xc00265c8
c000c70e:	48                   	dec    eax
c000c70f:	52                   	push   edx
c000c710:	a3 c8 65 02 c0       	mov    ds:0xc00265c8,eax
c000c715:	50                   	push   eax
c000c716:	57                   	push   edi
c000c717:	68 7f 2f 02 c0       	push   0xc0022f7f
c000c71c:	e8 da 03 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c721:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c724:	e8 11 f1 ff ff       	call   c000b83a <Virt::freeSwapfilePage(unsigned long)>
c000c729:	c7 04 24 94 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f94
c000c730:	e8 c6 03 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c735:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000c73a:	83 c4 10             	add    esp,0x10
c000c73d:	48                   	dec    eax
c000c73e:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000c743:	85 c0                	test   eax,eax
c000c745:	75 01                	jne    c000c748 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c747:	fb                   	sti    
c000c748:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c74c:	25 ff 0f 00 00       	and    eax,0xfff
c000c751:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c756:	77 20                	ja     c000c778 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c758:	0f 20 d8             	mov    eax,cr3
c000c75b:	0f 22 d8             	mov    cr3,eax
c000c75e:	83 ec 0c             	sub    esp,0xc
c000c761:	68 ba 2f 02 c0       	push   0xc0022fba
c000c766:	e8 90 03 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c76b:	83 c4 10             	add    esp,0x10
c000c76e:	b0 01                	mov    al,0x1
c000c770:	83 c4 1c             	add    esp,0x1c
c000c773:	5b                   	pop    ebx
c000c774:	5e                   	pop    esi
c000c775:	5f                   	pop    edi
c000c776:	5d                   	pop    ebp
c000c777:	c3                   	ret    
c000c778:	83 ec 0c             	sub    esp,0xc
c000c77b:	68 aa 2f 02 c0       	push   0xc0022faa
c000c780:	e8 76 03 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c785:	83 c4 10             	add    esp,0x10
c000c788:	eb ce                	jmp    c000c758 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c78a <VAS::scanForEviction()>:
c000c78a:	57                   	push   edi
c000c78b:	31 ff                	xor    edi,edi
c000c78d:	56                   	push   esi
c000c78e:	53                   	push   ebx
c000c78f:	83 ec 10             	sub    esp,0x10
c000c792:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c796:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c799:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c79f:	75 0e                	jne    c000c7af <VAS::scanForEviction()+0x25>
c000c7a1:	89 da                	mov    edx,ebx
c000c7a3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7a6:	c1 ea 16             	shr    edx,0x16
c000c7a9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c7ad:	74 4e                	je     c000c7fd <VAS::scanForEviction()+0x73>
c000c7af:	53                   	push   ebx
c000c7b0:	56                   	push   esi
c000c7b1:	e8 84 f2 ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000c7b6:	5a                   	pop    edx
c000c7b7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7b9:	59                   	pop    ecx
c000c7ba:	89 d1                	mov    ecx,edx
c000c7bc:	81 e1 01 08 00 00    	and    ecx,0x801
c000c7c2:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c7c8:	74 3e                	je     c000c808 <VAS::scanForEviction()+0x7e>
c000c7ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c7d0:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c7d6:	76 2b                	jbe    c000c803 <VAS::scanForEviction()+0x79>
c000c7d8:	47                   	inc    edi
c000c7d9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c7e0:	83 ff 03             	cmp    edi,0x3
c000c7e3:	74 32                	je     c000c817 <VAS::scanForEviction()+0x8d>
c000c7e5:	31 db                	xor    ebx,ebx
c000c7e7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c7ed:	75 c0                	jne    c000c7af <VAS::scanForEviction()+0x25>
c000c7ef:	89 da                	mov    edx,ebx
c000c7f1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7f4:	c1 ea 16             	shr    edx,0x16
c000c7f7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c7fb:	75 b2                	jne    c000c7af <VAS::scanForEviction()+0x25>
c000c7fd:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c803:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c806:	eb 91                	jmp    c000c799 <VAS::scanForEviction()+0xf>
c000c808:	f6 c2 20             	test   dl,0x20
c000c80b:	74 13                	je     c000c820 <VAS::scanForEviction()+0x96>
c000c80d:	83 e2 df             	and    edx,0xffffffdf
c000c810:	89 10                	mov    DWORD PTR [eax],edx
c000c812:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c815:	eb b3                	jmp    c000c7ca <VAS::scanForEviction()+0x40>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	31 c0                	xor    eax,eax
c000c81c:	5b                   	pop    ebx
c000c81d:	5e                   	pop    esi
c000c81e:	5f                   	pop    edi
c000c81f:	c3                   	ret    
c000c820:	83 ec 08             	sub    esp,0x8
c000c823:	89 d0                	mov    eax,edx
c000c825:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c82a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c82e:	53                   	push   ebx
c000c82f:	68 c8 2f 02 c0       	push   0xc0022fc8
c000c834:	e8 c2 02 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c839:	58                   	pop    eax
c000c83a:	5a                   	pop    edx
c000c83b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c83e:	56                   	push   esi
c000c83f:	e8 b6 fc ff ff       	call   c000c4fa <VAS::evict(unsigned long)>
c000c844:	59                   	pop    ecx
c000c845:	5b                   	pop    ebx
c000c846:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c849:	68 dc 2f 02 c0       	push   0xc0022fdc
c000c84e:	e8 a8 02 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c853:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c85a:	83 c4 10             	add    esp,0x10
c000c85d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c861:	83 c4 10             	add    esp,0x10
c000c864:	5b                   	pop    ebx
c000c865:	5e                   	pop    esi
c000c866:	5f                   	pop    edi
c000c867:	c3                   	ret    

c000c868 <mapVASFirstTime>:
c000c868:	55                   	push   ebp
c000c869:	57                   	push   edi
c000c86a:	56                   	push   esi
c000c86b:	53                   	push   ebx
c000c86c:	83 ec 0c             	sub    esp,0xc
c000c86f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c874:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c877:	4a                   	dec    edx
c000c878:	0f 84 fe 00 00 00    	je     c000c97c <mapVASFirstTime+0x114>
c000c87e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c881:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c884:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c889:	c1 e5 15             	shl    ebp,0x15
c000c88c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c891:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c897:	29 eb                	sub    ebx,ebp
c000c899:	29 ef                	sub    edi,ebp
c000c89b:	83 ec 08             	sub    esp,0x8
c000c89e:	53                   	push   ebx
c000c89f:	68 08 30 02 c0       	push   0xc0023008
c000c8a4:	e8 52 02 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c8a9:	e8 4b d5 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c8ae:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c8b5:	6a 01                	push   0x1
c000c8b7:	53                   	push   ebx
c000c8b8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c8be:	50                   	push   eax
c000c8bf:	56                   	push   esi
c000c8c0:	e8 01 f8 ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8c5:	83 c4 20             	add    esp,0x20
c000c8c8:	39 fb                	cmp    ebx,edi
c000c8ca:	75 cf                	jne    c000c89b <mapVASFirstTime+0x33>
c000c8cc:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c8d1:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c8d6:	29 eb                	sub    ebx,ebp
c000c8d8:	29 ef                	sub    edi,ebp
c000c8da:	83 ec 08             	sub    esp,0x8
c000c8dd:	53                   	push   ebx
c000c8de:	68 24 30 02 c0       	push   0xc0023024
c000c8e3:	e8 13 02 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c8e8:	58                   	pop    eax
c000c8e9:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8ed:	5a                   	pop    edx
c000c8ee:	19 c0                	sbb    eax,eax
c000c8f0:	83 e0 04             	and    eax,0x4
c000c8f3:	05 03 04 00 00       	add    eax,0x403
c000c8f8:	50                   	push   eax
c000c8f9:	68 49 2f 02 c0       	push   0xc0022f49
c000c8fe:	e8 f8 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c903:	e8 f1 d4 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c908:	59                   	pop    ecx
c000c909:	89 c5                	mov    ebp,eax
c000c90b:	58                   	pop    eax
c000c90c:	55                   	push   ebp
c000c90d:	68 38 30 02 c0       	push   0xc0023038
c000c912:	e8 e4 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c917:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c91b:	19 d2                	sbb    edx,edx
c000c91d:	83 e2 04             	and    edx,0x4
c000c920:	81 c2 03 04 00 00    	add    edx,0x403
c000c926:	89 14 24             	mov    DWORD PTR [esp],edx
c000c929:	6a 01                	push   0x1
c000c92b:	53                   	push   ebx
c000c92c:	55                   	push   ebp
c000c92d:	56                   	push   esi
c000c92e:	e8 93 f7 ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c933:	83 c4 18             	add    esp,0x18
c000c936:	53                   	push   ebx
c000c937:	56                   	push   esi
c000c938:	e8 fd f0 ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c000c93d:	5a                   	pop    edx
c000c93e:	59                   	pop    ecx
c000c93f:	ff 30                	push   DWORD PTR [eax]
c000c941:	68 54 30 02 c0       	push   0xc0023054
c000c946:	e8 b0 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c94b:	0f 20 d8             	mov    eax,cr3
c000c94e:	83 c4 0c             	add    esp,0xc
c000c951:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c957:	56                   	push   esi
c000c958:	50                   	push   eax
c000c959:	68 57 2f 02 c0       	push   0xc0022f57
c000c95e:	e8 98 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	39 df                	cmp    edi,ebx
c000c968:	0f 85 6c ff ff ff    	jne    c000c8da <mapVASFirstTime+0x72>
c000c96e:	0f 20 d8             	mov    eax,cr3
c000c971:	0f 22 d8             	mov    cr3,eax
c000c974:	83 c4 0c             	add    esp,0xc
c000c977:	5b                   	pop    ebx
c000c978:	5e                   	pop    esi
c000c979:	5f                   	pop    edi
c000c97a:	5d                   	pop    ebp
c000c97b:	c3                   	ret    
c000c97c:	83 ec 0c             	sub    esp,0xc
c000c97f:	68 ef 2f 02 c0       	push   0xc0022fef
c000c984:	e8 72 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c989:	83 c4 10             	add    esp,0x10
c000c98c:	83 c4 0c             	add    esp,0xc
c000c98f:	5b                   	pop    ebx
c000c990:	5e                   	pop    esi
c000c991:	5f                   	pop    edi
c000c992:	5d                   	pop    ebp
c000c993:	c3                   	ret    

c000c994 <__cxa_atexit>:
c000c994:	31 c0                	xor    eax,eax
c000c996:	c3                   	ret    

c000c997 <__cxa_finalize>:
c000c997:	c3                   	ret    

c000c998 <__stack_chk_fail>:
c000c998:	55                   	push   ebp
c000c999:	89 e5                	mov    ebp,esp
c000c99b:	83 ec 14             	sub    esp,0x14
c000c99e:	68 5f 30 02 c0       	push   0xc002305f
c000c9a3:	e8 53 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9ad:	68 af 30 02 c0       	push   0xc00230af
c000c9b2:	e8 44 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c9b7:	59                   	pop    ecx
c000c9b8:	58                   	pop    eax
c000c9b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9bc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9bf:	68 af 30 02 c0       	push   0xc00230af
c000c9c4:	e8 32 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c9c9:	5a                   	pop    edx
c000c9ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9cd:	59                   	pop    ecx
c000c9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9d3:	68 af 30 02 c0       	push   0xc00230af
c000c9d8:	e8 1e 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c9dd:	5a                   	pop    edx
c000c9de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9e1:	59                   	pop    ecx
c000c9e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9e4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9e6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9e9:	68 af 30 02 c0       	push   0xc00230af
c000c9ee:	e8 08 01 00 00       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000c9f3:	c7 04 24 b7 30 02 c0 	mov    DWORD PTR [esp],0xc00230b7
c000c9fa:	e8 be 79 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000c9ff:	83 c4 10             	add    esp,0x10
c000ca02:	c9                   	leave  
c000ca03:	c3                   	ret    

c000ca04 <__cxa_pure_virtual>:
c000ca04:	83 ec 18             	sub    esp,0x18
c000ca07:	68 cf 30 02 c0       	push   0xc00230cf
c000ca0c:	e8 ac 79 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000ca11:	83 c4 1c             	add    esp,0x1c
c000ca14:	c3                   	ret    

c000ca15 <operator new[](unsigned long)>:
c000ca15:	e9 a9 cf ff ff       	jmp    c00099c3 <malloc>

c000ca1a <operator delete(void*, unsigned long)>:
c000ca1a:	e9 c4 cf ff ff       	jmp    c00099e3 <rfree>

c000ca1f <operator delete[](void*)>:
c000ca1f:	e9 bf cf ff ff       	jmp    c00099e3 <rfree>

c000ca24 <operator delete[](void*, unsigned long)>:
c000ca24:	e9 ba cf ff ff       	jmp    c00099e3 <rfree>

c000ca29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ca29:	55                   	push   ebp
c000ca2a:	b9 11 00 00 00       	mov    ecx,0x11
c000ca2f:	57                   	push   edi
c000ca30:	56                   	push   esi
c000ca31:	be ea 2a 02 c0       	mov    esi,0xc0022aea
c000ca36:	53                   	push   ebx
c000ca37:	83 ec 20             	sub    esp,0x20
c000ca3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ca42:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ca46:	fc                   	cld    
c000ca47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca49:	89 ee                	mov    esi,ebp
c000ca4b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ca4f:	eb 02                	jmp    c000ca53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000ca51:	89 c6                	mov    esi,eax
c000ca53:	31 d2                	xor    edx,edx
c000ca55:	41                   	inc    ecx
c000ca56:	89 f0                	mov    eax,esi
c000ca58:	f7 f3                	div    ebx
c000ca5a:	39 de                	cmp    esi,ebx
c000ca5c:	73 f3                	jae    c000ca51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000ca5e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ca61:	eb 02                	jmp    c000ca65 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ca63:	89 c5                	mov    ebp,eax
c000ca65:	31 d2                	xor    edx,edx
c000ca67:	49                   	dec    ecx
c000ca68:	89 e8                	mov    eax,ebp
c000ca6a:	f7 f3                	div    ebx
c000ca6c:	39 dd                	cmp    ebp,ebx
c000ca6e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ca72:	88 11                	mov    BYTE PTR [ecx],dl
c000ca74:	73 ed                	jae    c000ca63 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ca76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca7a:	83 c4 20             	add    esp,0x20
c000ca7d:	5b                   	pop    ebx
c000ca7e:	5e                   	pop    esi
c000ca7f:	5f                   	pop    edi
c000ca80:	5d                   	pop    ebp
c000ca81:	c3                   	ret    

c000ca82 <Dbg::logc(char)>:
c000ca82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca86:	f6 05 c0 64 02 c0 10 	test   BYTE PTR ds:0xc00264c0,0x10
c000ca8d:	75 12                	jne    c000caa1 <Dbg::logc(char)+0x1f>
c000ca8f:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca94:	ec                   	in     al,dx
c000ca95:	a8 20                	test   al,0x20
c000ca97:	74 fb                	je     c000ca94 <Dbg::logc(char)+0x12>
c000ca99:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca9e:	88 c8                	mov    al,cl
c000caa0:	ee                   	out    dx,al
c000caa1:	c3                   	ret    

c000caa2 <Dbg::logs(char*)>:
c000caa2:	53                   	push   ebx
c000caa3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000caa7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000caaa:	84 c0                	test   al,al
c000caac:	74 0f                	je     c000cabd <Dbg::logs(char*)+0x1b>
c000caae:	50                   	push   eax
c000caaf:	43                   	inc    ebx
c000cab0:	e8 cd ff ff ff       	call   c000ca82 <Dbg::logc(char)>
c000cab5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cab8:	5a                   	pop    edx
c000cab9:	84 c0                	test   al,al
c000cabb:	75 f1                	jne    c000caae <Dbg::logs(char*)+0xc>
c000cabd:	5b                   	pop    ebx
c000cabe:	c3                   	ret    

c000cabf <Dbg::logWriteInt(unsigned int)>:
c000cabf:	83 ec 10             	sub    esp,0x10
c000cac2:	6a 0a                	push   0xa
c000cac4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cac8:	50                   	push   eax
c000cac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cacd:	e8 57 ff ff ff       	call   c000ca29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cad2:	50                   	push   eax
c000cad3:	e8 ca ff ff ff       	call   c000caa2 <Dbg::logs(char*)>
c000cad8:	83 c4 20             	add    esp,0x20
c000cadb:	c3                   	ret    

c000cadc <Dbg::logWriteIntBase(unsigned int, int)>:
c000cadc:	83 ec 10             	sub    esp,0x10
c000cadf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cae3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cae7:	50                   	push   eax
c000cae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caec:	e8 38 ff ff ff       	call   c000ca29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000caf1:	50                   	push   eax
c000caf2:	e8 ab ff ff ff       	call   c000caa2 <Dbg::logs(char*)>
c000caf7:	83 c4 20             	add    esp,0x20
c000cafa:	c3                   	ret    

c000cafb <Dbg::kprintf(char const*, ...)>:
c000cafb:	55                   	push   ebp
c000cafc:	57                   	push   edi
c000cafd:	56                   	push   esi
c000cafe:	53                   	push   ebx
c000caff:	83 ec 0c             	sub    esp,0xc
c000cb02:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cb06:	f6 05 c0 64 02 c0 10 	test   BYTE PTR ds:0xc00264c0,0x10
c000cb0d:	74 08                	je     c000cb17 <Dbg::kprintf(char const*, ...)+0x1c>
c000cb0f:	83 c4 0c             	add    esp,0xc
c000cb12:	5b                   	pop    ebx
c000cb13:	5e                   	pop    esi
c000cb14:	5f                   	pop    edi
c000cb15:	5d                   	pop    ebp
c000cb16:	c3                   	ret    
c000cb17:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cb1b:	31 db                	xor    ebx,ebx
c000cb1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb21:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cb24:	84 c0                	test   al,al
c000cb26:	74 e7                	je     c000cb0f <Dbg::kprintf(char const*, ...)+0x14>
c000cb28:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cb2b:	3c 25                	cmp    al,0x25
c000cb2d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cb30:	75 44                	jne    c000cb76 <Dbg::kprintf(char const*, ...)+0x7b>
c000cb32:	83 c3 02             	add    ebx,0x2
c000cb35:	8a 07                	mov    al,BYTE PTR [edi]
c000cb37:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cb3a:	83 e8 25             	sub    eax,0x25
c000cb3d:	3c 53                	cmp    al,0x53
c000cb3f:	0f 87 c9 00 00 00    	ja     c000cc0e <Dbg::kprintf(char const*, ...)+0x113>
c000cb45:	0f b6 c0             	movzx  eax,al
c000cb48:	ff 24 85 e4 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcf1c]
c000cb4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb53:	89 c8                	mov    eax,ecx
c000cb55:	83 c1 04             	add    ecx,0x4
c000cb58:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb5c:	ff 30                	push   DWORD PTR [eax]
c000cb5e:	e8 5c ff ff ff       	call   c000cabf <Dbg::logWriteInt(unsigned int)>
c000cb63:	5f                   	pop    edi
c000cb64:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cb68:	84 c0                	test   al,al
c000cb6a:	74 a3                	je     c000cb0f <Dbg::kprintf(char const*, ...)+0x14>
c000cb6c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cb6f:	3c 25                	cmp    al,0x25
c000cb71:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cb74:	74 bc                	je     c000cb32 <Dbg::kprintf(char const*, ...)+0x37>
c000cb76:	50                   	push   eax
c000cb77:	89 eb                	mov    ebx,ebp
c000cb79:	e8 04 ff ff ff       	call   c000ca82 <Dbg::logc(char)>
c000cb7e:	89 fd                	mov    ebp,edi
c000cb80:	58                   	pop    eax
c000cb81:	eb e1                	jmp    c000cb64 <Dbg::kprintf(char const*, ...)+0x69>
c000cb83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb87:	89 c8                	mov    eax,ecx
c000cb89:	83 c1 04             	add    ecx,0x4
c000cb8c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb90:	ff 30                	push   DWORD PTR [eax]
c000cb92:	e8 0b ff ff ff       	call   c000caa2 <Dbg::logs(char*)>
c000cb97:	58                   	pop    eax
c000cb98:	eb ca                	jmp    c000cb64 <Dbg::kprintf(char const*, ...)+0x69>
c000cb9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb9e:	89 d0                	mov    eax,edx
c000cba0:	83 c2 04             	add    edx,0x4
c000cba3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cba7:	ff 30                	push   DWORD PTR [eax]
c000cba9:	e8 11 ff ff ff       	call   c000cabf <Dbg::logWriteInt(unsigned int)>
c000cbae:	58                   	pop    eax
c000cbaf:	eb b3                	jmp    c000cb64 <Dbg::kprintf(char const*, ...)+0x69>
c000cbb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbb5:	89 d0                	mov    eax,edx
c000cbb7:	83 c2 04             	add    edx,0x4
c000cbba:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cbbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbc1:	50                   	push   eax
c000cbc2:	e8 bb fe ff ff       	call   c000ca82 <Dbg::logc(char)>
c000cbc7:	58                   	pop    eax
c000cbc8:	eb 9a                	jmp    c000cb64 <Dbg::kprintf(char const*, ...)+0x69>
c000cbca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cbce:	89 c8                	mov    eax,ecx
c000cbd0:	83 c1 04             	add    ecx,0x4
c000cbd3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cbd7:	6a 10                	push   0x10
c000cbd9:	ff 30                	push   DWORD PTR [eax]
c000cbdb:	e8 fc fe ff ff       	call   c000cadc <Dbg::logWriteIntBase(unsigned int, int)>
c000cbe0:	59                   	pop    ecx
c000cbe1:	5f                   	pop    edi
c000cbe2:	eb 80                	jmp    c000cb64 <Dbg::kprintf(char const*, ...)+0x69>
c000cbe4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbe8:	89 d0                	mov    eax,edx
c000cbea:	83 c2 08             	add    edx,0x8
c000cbed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbf1:	6a 10                	push   0x10
c000cbf3:	ff 30                	push   DWORD PTR [eax]
c000cbf5:	e8 e2 fe ff ff       	call   c000cadc <Dbg::logWriteIntBase(unsigned int, int)>
c000cbfa:	58                   	pop    eax
c000cbfb:	5a                   	pop    edx
c000cbfc:	e9 63 ff ff ff       	jmp    c000cb64 <Dbg::kprintf(char const*, ...)+0x69>
c000cc01:	6a 25                	push   0x25
c000cc03:	e8 7a fe ff ff       	call   c000ca82 <Dbg::logc(char)>
c000cc08:	58                   	pop    eax
c000cc09:	e9 56 ff ff ff       	jmp    c000cb64 <Dbg::kprintf(char const*, ...)+0x69>
c000cc0e:	6a 25                	push   0x25
c000cc10:	e8 6d fe ff ff       	call   c000ca82 <Dbg::logc(char)>
c000cc15:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cc18:	50                   	push   eax
c000cc19:	e8 64 fe ff ff       	call   c000ca82 <Dbg::logc(char)>
c000cc1e:	5a                   	pop    edx
c000cc1f:	59                   	pop    ecx
c000cc20:	e9 3f ff ff ff       	jmp    c000cb64 <Dbg::kprintf(char const*, ...)+0x69>
c000cc25:	90                   	nop

c000cc26 <File::read(unsigned long long, void*, int*)>:
c000cc26:	53                   	push   ebx
c000cc27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc36:	3c 19                	cmp    al,0x19
c000cc38:	77 35                	ja     c000cc6f <File::read(unsigned long long, void*, int*)+0x49>
c000cc3a:	8b 04 85 60 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95a0]
c000cc41:	85 c0                	test   eax,eax
c000cc43:	74 2a                	je     c000cc6f <File::read(unsigned long long, void*, int*)+0x49>
c000cc45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc4b:	85 c0                	test   eax,eax
c000cc4d:	74 20                	je     c000cc6f <File::read(unsigned long long, void*, int*)+0x49>
c000cc4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc53:	74 21                	je     c000cc76 <File::read(unsigned long long, void*, int*)+0x50>
c000cc55:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cc6d:	ff e0                	jmp    eax
c000cc6f:	b8 0b 00 00 00       	mov    eax,0xb
c000cc74:	eb 05                	jmp    c000cc7b <File::read(unsigned long long, void*, int*)+0x55>
c000cc76:	b8 05 00 00 00       	mov    eax,0x5
c000cc7b:	5b                   	pop    ebx
c000cc7c:	c3                   	ret    
c000cc7d:	90                   	nop

c000cc7e <File::write(unsigned long long, void*, int*)>:
c000cc7e:	53                   	push   ebx
c000cc7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc8e:	3c 19                	cmp    al,0x19
c000cc90:	77 35                	ja     c000ccc7 <File::write(unsigned long long, void*, int*)+0x49>
c000cc92:	8b 04 85 60 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95a0]
c000cc99:	85 c0                	test   eax,eax
c000cc9b:	74 2a                	je     c000ccc7 <File::write(unsigned long long, void*, int*)+0x49>
c000cc9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cca3:	85 c0                	test   eax,eax
c000cca5:	74 20                	je     c000ccc7 <File::write(unsigned long long, void*, int*)+0x49>
c000cca7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ccab:	74 21                	je     c000ccce <File::write(unsigned long long, void*, int*)+0x50>
c000ccad:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ccaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ccb3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ccb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ccc1:	5b                   	pop    ebx
c000ccc2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ccc5:	ff e0                	jmp    eax
c000ccc7:	b8 0b 00 00 00       	mov    eax,0xb
c000cccc:	eb 05                	jmp    c000ccd3 <File::write(unsigned long long, void*, int*)+0x55>
c000ccce:	b8 05 00 00 00       	mov    eax,0x5
c000ccd3:	5b                   	pop    ebx
c000ccd4:	c3                   	ret    
c000ccd5:	90                   	nop

c000ccd6 <Directory::read(unsigned long long, void*, int*)>:
c000ccd6:	53                   	push   ebx
c000ccd7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccdb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ccdf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cce6:	3c 19                	cmp    al,0x19
c000cce8:	77 35                	ja     c000cd1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccea:	8b 04 85 60 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95a0]
c000ccf1:	85 c0                	test   eax,eax
c000ccf3:	74 2a                	je     c000cd1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccf5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ccfb:	85 c0                	test   eax,eax
c000ccfd:	74 20                	je     c000cd1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cd03:	74 21                	je     c000cd26 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cd05:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cd07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cd0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd19:	5b                   	pop    ebx
c000cd1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cd1d:	ff e0                	jmp    eax
c000cd1f:	b8 0b 00 00 00       	mov    eax,0xb
c000cd24:	eb 05                	jmp    c000cd2b <Directory::read(unsigned long long, void*, int*)+0x55>
c000cd26:	b8 05 00 00 00       	mov    eax,0x5
c000cd2b:	5b                   	pop    ebx
c000cd2c:	c3                   	ret    
c000cd2d:	90                   	nop

c000cd2e <Directory::write(unsigned long long, void*, int*)>:
c000cd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cd39:	b8 0b 00 00 00       	mov    eax,0xb
c000cd3e:	80 fa 19             	cmp    dl,0x19
c000cd41:	77 18                	ja     c000cd5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd43:	8b 14 95 60 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95a0]
c000cd4a:	85 d2                	test   edx,edx
c000cd4c:	74 0d                	je     c000cd5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cd55:	19 c0                	sbb    eax,eax
c000cd57:	83 e0 0a             	and    eax,0xa
c000cd5a:	40                   	inc    eax
c000cd5b:	c3                   	ret    

c000cd5c <File::isAtty()>:
c000cd5c:	31 c0                	xor    eax,eax
c000cd5e:	c3                   	ret    
c000cd5f:	90                   	nop

c000cd60 <Directory::isAtty()>:
c000cd60:	31 c0                	xor    eax,eax
c000cd62:	c3                   	ret    
c000cd63:	90                   	nop

c000cd64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cd64:	b8 0a 00 00 00       	mov    eax,0xa
c000cd69:	c3                   	ret    

c000cd6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cd6a:	b8 0a 00 00 00       	mov    eax,0xa
c000cd6f:	c3                   	ret    

c000cd70 <Filesystem::allocateSwapfile(char const*, int)>:
c000cd70:	31 c0                	xor    eax,eax
c000cd72:	31 d2                	xor    edx,edx
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <File::~File()>:
c000cd76:	83 ec 0c             	sub    esp,0xc
c000cd79:	ba a4 32 02 c0       	mov    edx,0xc00232a4
c000cd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd82:	89 10                	mov    DWORD PTR [eax],edx
c000cd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd88:	83 ec 0c             	sub    esp,0xc
c000cd8b:	50                   	push   eax
c000cd8c:	e8 37 e7 ff ff       	call   c000b4c8 <UnixFile::~UnixFile()>
c000cd91:	83 c4 10             	add    esp,0x10
c000cd94:	90                   	nop
c000cd95:	83 c4 0c             	add    esp,0xc
c000cd98:	c3                   	ret    
c000cd99:	90                   	nop

c000cd9a <File::~File()>:
c000cd9a:	83 ec 0c             	sub    esp,0xc
c000cd9d:	83 ec 0c             	sub    esp,0xc
c000cda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda4:	e8 cd ff ff ff       	call   c000cd76 <File::~File()>
c000cda9:	83 c4 10             	add    esp,0x10
c000cdac:	83 ec 08             	sub    esp,0x8
c000cdaf:	68 14 01 00 00       	push   0x114
c000cdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb8:	e8 5d fc ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000cdbd:	83 c4 10             	add    esp,0x10
c000cdc0:	83 c4 0c             	add    esp,0xc
c000cdc3:	c3                   	ret    

c000cdc4 <Directory::~Directory()>:
c000cdc4:	83 ec 0c             	sub    esp,0xc
c000cdc7:	ba c0 32 02 c0       	mov    edx,0xc00232c0
c000cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd0:	89 10                	mov    DWORD PTR [eax],edx
c000cdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd6:	83 ec 0c             	sub    esp,0xc
c000cdd9:	50                   	push   eax
c000cdda:	e8 e9 e6 ff ff       	call   c000b4c8 <UnixFile::~UnixFile()>
c000cddf:	83 c4 10             	add    esp,0x10
c000cde2:	90                   	nop
c000cde3:	83 c4 0c             	add    esp,0xc
c000cde6:	c3                   	ret    
c000cde7:	90                   	nop

c000cde8 <Directory::~Directory()>:
c000cde8:	83 ec 0c             	sub    esp,0xc
c000cdeb:	83 ec 0c             	sub    esp,0xc
c000cdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdf2:	e8 cd ff ff ff       	call   c000cdc4 <Directory::~Directory()>
c000cdf7:	83 c4 10             	add    esp,0x10
c000cdfa:	83 ec 08             	sub    esp,0x8
c000cdfd:	68 14 01 00 00       	push   0x114
c000ce02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce06:	e8 0f fc ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	83 c4 0c             	add    esp,0xc
c000ce11:	c3                   	ret    

c000ce12 <Filesystem::Filesystem()>:
c000ce12:	ba 3c 32 02 c0       	mov    edx,0xc002323c
c000ce17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce1b:	89 10                	mov    DWORD PTR [eax],edx
c000ce1d:	8b 15 d4 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265d4
c000ce23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ce2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce2e:	a3 d4 65 02 c0       	mov    ds:0xc00265d4,eax
c000ce33:	90                   	nop
c000ce34:	c3                   	ret    
c000ce35:	90                   	nop

c000ce36 <Filesystem::~Filesystem()>:
c000ce36:	ba 3c 32 02 c0       	mov    edx,0xc002323c
c000ce3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce3f:	89 10                	mov    DWORD PTR [eax],edx
c000ce41:	90                   	nop
c000ce42:	c3                   	ret    
c000ce43:	90                   	nop

c000ce44 <Filesystem::~Filesystem()>:
c000ce44:	83 ec 0c             	sub    esp,0xc
c000ce47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce4b:	e8 e6 ff ff ff       	call   c000ce36 <Filesystem::~Filesystem()>
c000ce50:	83 c4 04             	add    esp,0x4
c000ce53:	83 ec 08             	sub    esp,0x8
c000ce56:	6a 08                	push   0x8
c000ce58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5c:	e8 b9 fb ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000ce61:	83 c4 10             	add    esp,0x10
c000ce64:	83 c4 0c             	add    esp,0xc
c000ce67:	c3                   	ret    

c000ce68 <Fs::getcwd(Process*, char*, int)>:
c000ce68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce6c:	31 c0                	xor    eax,eax
c000ce6e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ce71:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ce75:	7d 15                	jge    c000ce8c <Fs::getcwd(Process*, char*, int)+0x24>
c000ce77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce7b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ce82:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ce85:	84 c9                	test   cl,cl
c000ce87:	74 06                	je     c000ce8f <Fs::getcwd(Process*, char*, int)+0x27>
c000ce89:	40                   	inc    eax
c000ce8a:	eb e2                	jmp    c000ce6e <Fs::getcwd(Process*, char*, int)+0x6>
c000ce8c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ce8f:	31 c0                	xor    eax,eax
c000ce91:	c3                   	ret    

c000ce92 <Fs::initVFS()>:
c000ce92:	83 ec 18             	sub    esp,0x18
c000ce95:	6a 08                	push   0x8
c000ce97:	e8 27 cb ff ff       	call   c00099c3 <malloc>
c000ce9c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce9f:	e8 70 e3 00 00       	call   c001b214 <FAT::FAT()>
c000cea4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ceab:	e8 13 cb ff ff       	call   c00099c3 <malloc>
c000ceb0:	89 04 24             	mov    DWORD PTR [esp],eax
c000ceb3:	e8 ba f5 00 00       	call   c001c472 <ISO9660::ISO9660()>
c000ceb8:	83 c4 1c             	add    esp,0x1c
c000cebb:	c3                   	ret    

c000cebc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000cebc:	55                   	push   ebp
c000cebd:	57                   	push   edi
c000cebe:	56                   	push   esi
c000cebf:	53                   	push   ebx
c000cec0:	81 ec 10 04 00 00    	sub    esp,0x410
c000cec6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000cecd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ced4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000cedb:	68 00 04 00 00       	push   0x400
c000cee0:	6a 00                	push   0x0
c000cee2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000cee6:	56                   	push   esi
c000cee7:	e8 98 37 ff ff       	call   c0000684 <memset>
c000ceec:	83 c4 10             	add    esp,0x10
c000ceef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000cef3:	75 0b                	jne    c000cf00 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000cef5:	50                   	push   eax
c000cef6:	50                   	push   eax
c000cef7:	57                   	push   edi
c000cef8:	56                   	push   esi
c000cef9:	e8 42 38 ff ff       	call   c0000740 <strcpy>
c000cefe:	eb 41                	jmp    c000cf41 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000cf00:	8a 07                	mov    al,BYTE PTR [edi]
c000cf02:	3c 5c                	cmp    al,0x5c
c000cf04:	74 04                	je     c000cf0a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000cf06:	3c 2f                	cmp    al,0x2f
c000cf08:	75 18                	jne    c000cf22 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000cf0a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000cf0d:	3c 60                	cmp    al,0x60
c000cf0f:	7e 03                	jle    c000cf14 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000cf11:	83 e8 20             	sub    eax,0x20
c000cf14:	88 04 24             	mov    BYTE PTR [esp],al
c000cf17:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cf1e:	50                   	push   eax
c000cf1f:	50                   	push   eax
c000cf20:	eb 18                	jmp    c000cf3a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000cf22:	50                   	push   eax
c000cf23:	50                   	push   eax
c000cf24:	55                   	push   ebp
c000cf25:	56                   	push   esi
c000cf26:	e8 15 38 ff ff       	call   c0000740 <strcpy>
c000cf2b:	5a                   	pop    edx
c000cf2c:	59                   	pop    ecx
c000cf2d:	68 da 48 02 c0       	push   0xc00248da
c000cf32:	56                   	push   esi
c000cf33:	e8 48 39 ff ff       	call   c0000880 <strcat>
c000cf38:	5d                   	pop    ebp
c000cf39:	58                   	pop    eax
c000cf3a:	57                   	push   edi
c000cf3b:	56                   	push   esi
c000cf3c:	e8 3f 39 ff ff       	call   c0000880 <strcat>
c000cf41:	83 c4 10             	add    esp,0x10
c000cf44:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cf47:	3c 60                	cmp    al,0x60
c000cf49:	7e 03                	jle    c000cf4e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cf4b:	83 e8 20             	sub    eax,0x20
c000cf4e:	88 04 24             	mov    BYTE PTR [esp],al
c000cf51:	88 03                	mov    BYTE PTR [ebx],al
c000cf53:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cf5a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cf60:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cf64:	bf 03 00 00 00       	mov    edi,0x3
c000cf69:	b8 03 00 00 00       	mov    eax,0x3
c000cf6e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cf71:	84 d2                	test   dl,dl
c000cf73:	0f 84 91 00 00 00    	je     c000d00a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cf79:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cf7c:	80 fa 5c             	cmp    dl,0x5c
c000cf7f:	74 05                	je     c000cf86 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cf81:	80 fa 2f             	cmp    dl,0x2f
c000cf84:	75 12                	jne    c000cf98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf86:	89 c5                	mov    ebp,eax
c000cf88:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf8d:	74 09                	je     c000cf98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf8f:	40                   	inc    eax
c000cf90:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf94:	89 cf                	mov    edi,ecx
c000cf96:	eb d6                	jmp    c000cf6e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf98:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf9d:	75 5b                	jne    c000cffa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf9f:	80 fa 2e             	cmp    dl,0x2e
c000cfa2:	75 56                	jne    c000cffa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cfa4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cfa8:	74 19                	je     c000cfc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cfaa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cfaf:	74 53                	je     c000d004 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cfb1:	89 f9                	mov    ecx,edi
c000cfb3:	41                   	inc    ecx
c000cfb4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cfb7:	80 fa 2f             	cmp    dl,0x2f
c000cfba:	74 f7                	je     c000cfb3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cfbc:	80 fa 5c             	cmp    dl,0x5c
c000cfbf:	74 f2                	je     c000cfb3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cfc1:	eb d1                	jmp    c000cf94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfc3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cfc8:	74 3a                	je     c000d004 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cfca:	83 f8 03             	cmp    eax,0x3
c000cfcd:	74 c5                	je     c000cf94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfcf:	41                   	inc    ecx
c000cfd0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cfd3:	80 fa 2f             	cmp    dl,0x2f
c000cfd6:	74 f7                	je     c000cfcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cfd8:	80 fa 5c             	cmp    dl,0x5c
c000cfdb:	74 f2                	je     c000cfcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cfdd:	48                   	dec    eax
c000cfde:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfe2:	75 06                	jne    c000cfea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfe4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfe8:	eb f3                	jmp    c000cfdd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cfea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfee:	74 07                	je     c000cff7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cff4:	48                   	dec    eax
c000cff5:	eb f3                	jmp    c000cfea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cff7:	40                   	inc    eax
c000cff8:	eb 9a                	jmp    c000cf94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cffa:	80 fa 2f             	cmp    dl,0x2f
c000cffd:	74 95                	je     c000cf94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfff:	80 fa 5c             	cmp    dl,0x5c
c000d002:	74 90                	je     c000cf94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d004:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d007:	40                   	inc    eax
c000d008:	eb 8a                	jmp    c000cf94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d00a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d00e:	83 ec 0c             	sub    esp,0xc
c000d011:	53                   	push   ebx
c000d012:	e8 89 36 ff ff       	call   c00006a0 <strlen>
c000d017:	83 c4 10             	add    esp,0x10
c000d01a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d01f:	75 26                	jne    c000d047 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d021:	83 ec 0c             	sub    esp,0xc
c000d024:	53                   	push   ebx
c000d025:	e8 76 36 ff ff       	call   c00006a0 <strlen>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d032:	74 26                	je     c000d05a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d034:	83 ec 0c             	sub    esp,0xc
c000d037:	53                   	push   ebx
c000d038:	e8 63 36 ff ff       	call   c00006a0 <strlen>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d045:	eb c7                	jmp    c000d00e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d047:	83 ec 0c             	sub    esp,0xc
c000d04a:	53                   	push   ebx
c000d04b:	e8 50 36 ff ff       	call   c00006a0 <strlen>
c000d050:	83 c4 10             	add    esp,0x10
c000d053:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d058:	74 c7                	je     c000d021 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d05a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d060:	5b                   	pop    ebx
c000d061:	5e                   	pop    esi
c000d062:	5f                   	pop    edi
c000d063:	5d                   	pop    ebp
c000d064:	c3                   	ret    
c000d065:	90                   	nop

c000d066 <File::File(char const*, Process*)>:
c000d066:	83 ec 0c             	sub    esp,0xc
c000d069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d06d:	83 ec 08             	sub    esp,0x8
c000d070:	6a 00                	push   0x0
c000d072:	50                   	push   eax
c000d073:	e8 6e e2 ff ff       	call   c000b2e6 <UnixFile::UnixFile(int)>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	ba a4 32 02 c0       	mov    edx,0xc00232a4
c000d080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d084:	89 10                	mov    DWORD PTR [eax],edx
c000d086:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d08a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d094:	83 c0 0d             	add    eax,0xd
c000d097:	83 ec 04             	sub    esp,0x4
c000d09a:	52                   	push   edx
c000d09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d09f:	50                   	push   eax
c000d0a0:	e8 17 fe ff ff       	call   c000cebc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d0a5:	83 c4 10             	add    esp,0x10
c000d0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d0af:	8d 50 bf             	lea    edx,[eax-0x41]
c000d0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d0c4:	90                   	nop
c000d0c5:	83 c4 0c             	add    esp,0xc
c000d0c8:	c3                   	ret    
c000d0c9:	90                   	nop

c000d0ca <File::open(FileOpenMode)>:
c000d0ca:	53                   	push   ebx
c000d0cb:	b8 0b 00 00 00       	mov    eax,0xb
c000d0d0:	83 ec 08             	sub    esp,0x8
c000d0d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d0d7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d0de:	80 fa 19             	cmp    dl,0x19
c000d0e1:	77 40                	ja     c000d123 <File::open(FileOpenMode)+0x59>
c000d0e3:	8b 14 95 60 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95a0]
c000d0ea:	85 d2                	test   edx,edx
c000d0ec:	74 35                	je     c000d123 <File::open(FileOpenMode)+0x59>
c000d0ee:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d0f4:	85 d2                	test   edx,edx
c000d0f6:	74 2b                	je     c000d123 <File::open(FileOpenMode)+0x59>
c000d0f8:	b8 06 00 00 00       	mov    eax,0x6
c000d0fd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d101:	75 20                	jne    c000d123 <File::open(FileOpenMode)+0x59>
c000d103:	8b 02                	mov    eax,DWORD PTR [edx]
c000d105:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d10b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d10f:	51                   	push   ecx
c000d110:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d113:	51                   	push   ecx
c000d114:	52                   	push   edx
c000d115:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	85 c0                	test   eax,eax
c000d11d:	75 04                	jne    c000d123 <File::open(FileOpenMode)+0x59>
c000d11f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d123:	83 c4 08             	add    esp,0x8
c000d126:	5b                   	pop    ebx
c000d127:	c3                   	ret    

c000d128 <File::close()>:
c000d128:	53                   	push   ebx
c000d129:	b8 0b 00 00 00       	mov    eax,0xb
c000d12e:	83 ec 08             	sub    esp,0x8
c000d131:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d135:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d13c:	80 fa 19             	cmp    dl,0x19
c000d13f:	77 41                	ja     c000d182 <File::close()+0x5a>
c000d141:	8b 1c 95 60 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95a0]
c000d148:	85 db                	test   ebx,ebx
c000d14a:	74 36                	je     c000d182 <File::close()+0x5a>
c000d14c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d153:	74 2d                	je     c000d182 <File::close()+0x5a>
c000d155:	b8 05 00 00 00       	mov    eax,0x5
c000d15a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d15e:	74 22                	je     c000d182 <File::close()+0x5a>
c000d160:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d164:	8b 04 95 60 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95a0]
c000d16b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d171:	53                   	push   ebx
c000d172:	53                   	push   ebx
c000d173:	8b 10                	mov    edx,DWORD PTR [eax]
c000d175:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d17b:	50                   	push   eax
c000d17c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d17f:	83 c4 10             	add    esp,0x10
c000d182:	83 c4 08             	add    esp,0x8
c000d185:	5b                   	pop    ebx
c000d186:	c3                   	ret    
c000d187:	90                   	nop

c000d188 <File::seek(unsigned long long)>:
c000d188:	56                   	push   esi
c000d189:	53                   	push   ebx
c000d18a:	b8 0b 00 00 00       	mov    eax,0xb
c000d18f:	51                   	push   ecx
c000d190:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d194:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d198:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d19f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1a3:	80 fa 19             	cmp    dl,0x19
c000d1a6:	77 31                	ja     c000d1d9 <File::seek(unsigned long long)+0x51>
c000d1a8:	8b 14 95 60 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95a0]
c000d1af:	85 d2                	test   edx,edx
c000d1b1:	74 26                	je     c000d1d9 <File::seek(unsigned long long)+0x51>
c000d1b3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d1b9:	85 d2                	test   edx,edx
c000d1bb:	74 1c                	je     c000d1d9 <File::seek(unsigned long long)+0x51>
c000d1bd:	b8 05 00 00 00       	mov    eax,0x5
c000d1c2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d1c6:	74 11                	je     c000d1d9 <File::seek(unsigned long long)+0x51>
c000d1c8:	8b 02                	mov    eax,DWORD PTR [edx]
c000d1ca:	53                   	push   ebx
c000d1cb:	51                   	push   ecx
c000d1cc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d1d2:	52                   	push   edx
c000d1d3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	5a                   	pop    edx
c000d1da:	5b                   	pop    ebx
c000d1db:	5e                   	pop    esi
c000d1dc:	c3                   	ret    
c000d1dd:	90                   	nop

c000d1de <File::tell(unsigned long long*)>:
c000d1de:	83 ec 0c             	sub    esp,0xc
c000d1e1:	b8 0b 00 00 00       	mov    eax,0xb
c000d1e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1ea:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d1f1:	80 fa 19             	cmp    dl,0x19
c000d1f4:	77 34                	ja     c000d22a <File::tell(unsigned long long*)+0x4c>
c000d1f6:	8b 14 95 60 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95a0]
c000d1fd:	85 d2                	test   edx,edx
c000d1ff:	74 29                	je     c000d22a <File::tell(unsigned long long*)+0x4c>
c000d201:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d207:	85 d2                	test   edx,edx
c000d209:	74 1f                	je     c000d22a <File::tell(unsigned long long*)+0x4c>
c000d20b:	b8 05 00 00 00       	mov    eax,0x5
c000d210:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d214:	74 14                	je     c000d22a <File::tell(unsigned long long*)+0x4c>
c000d216:	50                   	push   eax
c000d217:	8b 02                	mov    eax,DWORD PTR [edx]
c000d219:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d21d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d223:	52                   	push   edx
c000d224:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d227:	83 c4 10             	add    esp,0x10
c000d22a:	83 c4 0c             	add    esp,0xc
c000d22d:	c3                   	ret    

c000d22e <File::rewind()>:
c000d22e:	83 ec 10             	sub    esp,0x10
c000d231:	6a 00                	push   0x0
c000d233:	6a 00                	push   0x0
c000d235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d239:	e8 4a ff ff ff       	call   c000d188 <File::seek(unsigned long long)>
c000d23e:	83 c4 1c             	add    esp,0x1c
c000d241:	c3                   	ret    

c000d242 <File::unlink()>:
c000d242:	83 ec 0c             	sub    esp,0xc
c000d245:	b8 0b 00 00 00       	mov    eax,0xb
c000d24a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d24e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d255:	80 f9 19             	cmp    cl,0x19
c000d258:	77 2f                	ja     c000d289 <File::unlink()+0x47>
c000d25a:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d261:	85 c9                	test   ecx,ecx
c000d263:	74 24                	je     c000d289 <File::unlink()+0x47>
c000d265:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d26b:	85 c9                	test   ecx,ecx
c000d26d:	74 1a                	je     c000d289 <File::unlink()+0x47>
c000d26f:	b8 06 00 00 00       	mov    eax,0x6
c000d274:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d278:	75 0f                	jne    c000d289 <File::unlink()+0x47>
c000d27a:	83 c2 0d             	add    edx,0xd
c000d27d:	50                   	push   eax
c000d27e:	50                   	push   eax
c000d27f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d281:	52                   	push   edx
c000d282:	51                   	push   ecx
c000d283:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d286:	83 c4 10             	add    esp,0x10
c000d289:	83 c4 0c             	add    esp,0xc
c000d28c:	c3                   	ret    
c000d28d:	90                   	nop

c000d28e <File::rename(char const*)>:
c000d28e:	83 ec 0c             	sub    esp,0xc
c000d291:	b8 0b 00 00 00       	mov    eax,0xb
c000d296:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d29a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2a1:	80 f9 19             	cmp    cl,0x19
c000d2a4:	77 32                	ja     c000d2d8 <File::rename(char const*)+0x4a>
c000d2a6:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d2ad:	85 c9                	test   ecx,ecx
c000d2af:	74 27                	je     c000d2d8 <File::rename(char const*)+0x4a>
c000d2b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2b7:	85 c9                	test   ecx,ecx
c000d2b9:	74 1d                	je     c000d2d8 <File::rename(char const*)+0x4a>
c000d2bb:	b8 06 00 00 00       	mov    eax,0x6
c000d2c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2c4:	75 12                	jne    c000d2d8 <File::rename(char const*)+0x4a>
c000d2c6:	83 c2 0d             	add    edx,0xd
c000d2c9:	50                   	push   eax
c000d2ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d2d0:	52                   	push   edx
c000d2d1:	51                   	push   ecx
c000d2d2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	83 c4 0c             	add    esp,0xc
c000d2db:	c3                   	ret    

c000d2dc <File::chfatattr(unsigned char, unsigned char)>:
c000d2dc:	57                   	push   edi
c000d2dd:	b8 0b 00 00 00       	mov    eax,0xb
c000d2e2:	56                   	push   esi
c000d2e3:	53                   	push   ebx
c000d2e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d2f7:	80 f9 19             	cmp    cl,0x19
c000d2fa:	77 37                	ja     c000d333 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2fc:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d303:	85 c9                	test   ecx,ecx
c000d305:	74 2c                	je     c000d333 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d307:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d30d:	85 c9                	test   ecx,ecx
c000d30f:	74 22                	je     c000d333 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d311:	b8 06 00 00 00       	mov    eax,0x6
c000d316:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d31a:	75 17                	jne    c000d333 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d31c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d31e:	89 f0                	mov    eax,esi
c000d320:	83 c2 0d             	add    edx,0xd
c000d323:	0f b6 f0             	movzx  esi,al
c000d326:	0f b6 db             	movzx  ebx,bl
c000d329:	56                   	push   esi
c000d32a:	53                   	push   ebx
c000d32b:	52                   	push   edx
c000d32c:	51                   	push   ecx
c000d32d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d330:	83 c4 10             	add    esp,0x10
c000d333:	5b                   	pop    ebx
c000d334:	5e                   	pop    esi
c000d335:	5f                   	pop    edi
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <File::exists()>:
c000d338:	83 ec 0c             	sub    esp,0xc
c000d33b:	31 c0                	xor    eax,eax
c000d33d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d341:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d348:	80 f9 19             	cmp    cl,0x19
c000d34b:	77 24                	ja     c000d371 <File::exists()+0x39>
c000d34d:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d354:	85 c9                	test   ecx,ecx
c000d356:	74 19                	je     c000d371 <File::exists()+0x39>
c000d358:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d35e:	85 c9                	test   ecx,ecx
c000d360:	74 0f                	je     c000d371 <File::exists()+0x39>
c000d362:	83 c2 0d             	add    edx,0xd
c000d365:	50                   	push   eax
c000d366:	50                   	push   eax
c000d367:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d369:	52                   	push   edx
c000d36a:	51                   	push   ecx
c000d36b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d36e:	83 c4 10             	add    esp,0x10
c000d371:	83 c4 0c             	add    esp,0xc
c000d374:	c3                   	ret    
c000d375:	90                   	nop

c000d376 <File::stat(unsigned long long*, bool*)>:
c000d376:	56                   	push   esi
c000d377:	53                   	push   ebx
c000d378:	50                   	push   eax
c000d379:	b8 0b 00 00 00       	mov    eax,0xb
c000d37e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d386:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d38d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d391:	80 f9 19             	cmp    cl,0x19
c000d394:	77 3d                	ja     c000d3d3 <File::stat(unsigned long long*, bool*)+0x5d>
c000d396:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d39d:	85 c9                	test   ecx,ecx
c000d39f:	74 32                	je     c000d3d3 <File::stat(unsigned long long*, bool*)+0x5d>
c000d3a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d3a7:	85 c9                	test   ecx,ecx
c000d3a9:	74 28                	je     c000d3d3 <File::stat(unsigned long long*, bool*)+0x5d>
c000d3ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d3ad:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d3b1:	74 13                	je     c000d3c6 <File::stat(unsigned long long*, bool*)+0x50>
c000d3b3:	83 ec 04             	sub    esp,0x4
c000d3b6:	56                   	push   esi
c000d3b7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d3bd:	51                   	push   ecx
c000d3be:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d3c1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d3c4:	eb 0a                	jmp    c000d3d0 <File::stat(unsigned long long*, bool*)+0x5a>
c000d3c6:	53                   	push   ebx
c000d3c7:	83 c2 0d             	add    edx,0xd
c000d3ca:	56                   	push   esi
c000d3cb:	52                   	push   edx
c000d3cc:	51                   	push   ecx
c000d3cd:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d3d0:	83 c4 10             	add    esp,0x10
c000d3d3:	5a                   	pop    edx
c000d3d4:	5b                   	pop    ebx
c000d3d5:	5e                   	pop    esi
c000d3d6:	c3                   	ret    

c000d3d7 <Fs::setcwd(Process*, char*)>:
c000d3d7:	55                   	push   ebp
c000d3d8:	57                   	push   edi
c000d3d9:	56                   	push   esi
c000d3da:	53                   	push   ebx
c000d3db:	81 ec 20 02 00 00    	sub    esp,0x220
c000d3e1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d3e8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d3ee:	57                   	push   edi
c000d3ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d3f6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d3fa:	56                   	push   esi
c000d3fb:	e8 bc fa ff ff       	call   c000cebc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d400:	89 34 24             	mov    DWORD PTR [esp],esi
c000d403:	e8 98 32 ff ff       	call   c00006a0 <strlen>
c000d408:	83 c4 10             	add    esp,0x10
c000d40b:	83 f8 02             	cmp    eax,0x2
c000d40e:	77 17                	ja     c000d427 <Fs::setcwd(Process*, char*)+0x50>
c000d410:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d415:	83 e8 41             	sub    eax,0x41
c000d418:	83 f8 19             	cmp    eax,0x19
c000d41b:	76 24                	jbe    c000d441 <Fs::setcwd(Process*, char*)+0x6a>
c000d41d:	b8 03 00 00 00       	mov    eax,0x3
c000d422:	e9 e0 00 00 00       	jmp    c000d507 <Fs::setcwd(Process*, char*)+0x130>
c000d427:	83 ec 0c             	sub    esp,0xc
c000d42a:	56                   	push   esi
c000d42b:	e8 70 32 ff ff       	call   c00006a0 <strlen>
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	83 f8 03             	cmp    eax,0x3
c000d436:	75 34                	jne    c000d46c <Fs::setcwd(Process*, char*)+0x95>
c000d438:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d43d:	75 2d                	jne    c000d46c <Fs::setcwd(Process*, char*)+0x95>
c000d43f:	eb cf                	jmp    c000d410 <Fs::setcwd(Process*, char*)+0x39>
c000d441:	8b 14 85 60 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd95a0]
c000d448:	b8 05 00 00 00       	mov    eax,0x5
c000d44d:	85 d2                	test   edx,edx
c000d44f:	0f 84 b2 00 00 00    	je     c000d507 <Fs::setcwd(Process*, char*)+0x130>
c000d455:	b8 06 00 00 00       	mov    eax,0x6
c000d45a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d461:	0f 85 92 00 00 00    	jne    c000d4f9 <Fs::setcwd(Process*, char*)+0x122>
c000d467:	e9 9b 00 00 00       	jmp    c000d507 <Fs::setcwd(Process*, char*)+0x130>
c000d46c:	83 ec 0c             	sub    esp,0xc
c000d46f:	68 14 01 00 00       	push   0x114
c000d474:	e8 4a c5 ff ff       	call   c00099c3 <malloc>
c000d479:	83 c4 0c             	add    esp,0xc
c000d47c:	89 c3                	mov    ebx,eax
c000d47e:	55                   	push   ebp
c000d47f:	56                   	push   esi
c000d480:	50                   	push   eax
c000d481:	e8 e0 fb ff ff       	call   c000d066 <File::File(char const*, Process*)>
c000d486:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d48b:	83 c4 0c             	add    esp,0xc
c000d48e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d492:	50                   	push   eax
c000d493:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d497:	50                   	push   eax
c000d498:	53                   	push   ebx
c000d499:	e8 d8 fe ff ff       	call   c000d376 <File::stat(unsigned long long*, bool*)>
c000d49e:	83 c4 10             	add    esp,0x10
c000d4a1:	83 f8 02             	cmp    eax,0x2
c000d4a4:	74 04                	je     c000d4aa <Fs::setcwd(Process*, char*)+0xd3>
c000d4a6:	85 c0                	test   eax,eax
c000d4a8:	74 1c                	je     c000d4c6 <Fs::setcwd(Process*, char*)+0xef>
c000d4aa:	b8 01 00 00 00       	mov    eax,0x1
c000d4af:	85 db                	test   ebx,ebx
c000d4b1:	74 54                	je     c000d507 <Fs::setcwd(Process*, char*)+0x130>
c000d4b3:	83 ec 0c             	sub    esp,0xc
c000d4b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4b8:	53                   	push   ebx
c000d4b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4bc:	83 c4 10             	add    esp,0x10
c000d4bf:	b8 01 00 00 00       	mov    eax,0x1
c000d4c4:	eb 41                	jmp    c000d507 <Fs::setcwd(Process*, char*)+0x130>
c000d4c6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d4cb:	75 1c                	jne    c000d4e9 <Fs::setcwd(Process*, char*)+0x112>
c000d4cd:	b8 02 00 00 00       	mov    eax,0x2
c000d4d2:	85 db                	test   ebx,ebx
c000d4d4:	74 31                	je     c000d507 <Fs::setcwd(Process*, char*)+0x130>
c000d4d6:	83 ec 0c             	sub    esp,0xc
c000d4d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4db:	53                   	push   ebx
c000d4dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4df:	83 c4 10             	add    esp,0x10
c000d4e2:	b8 02 00 00 00       	mov    eax,0x2
c000d4e7:	eb 1e                	jmp    c000d507 <Fs::setcwd(Process*, char*)+0x130>
c000d4e9:	85 db                	test   ebx,ebx
c000d4eb:	74 0c                	je     c000d4f9 <Fs::setcwd(Process*, char*)+0x122>
c000d4ed:	83 ec 0c             	sub    esp,0xc
c000d4f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4f2:	53                   	push   ebx
c000d4f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4f6:	83 c4 10             	add    esp,0x10
c000d4f9:	50                   	push   eax
c000d4fa:	50                   	push   eax
c000d4fb:	56                   	push   esi
c000d4fc:	57                   	push   edi
c000d4fd:	e8 3e 32 ff ff       	call   c0000740 <strcpy>
c000d502:	83 c4 10             	add    esp,0x10
c000d505:	31 c0                	xor    eax,eax
c000d507:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d50d:	5b                   	pop    ebx
c000d50e:	5e                   	pop    esi
c000d50f:	5f                   	pop    edi
c000d510:	5d                   	pop    ebp
c000d511:	c3                   	ret    

c000d512 <Directory::Directory(char const*, Process*)>:
c000d512:	83 ec 0c             	sub    esp,0xc
c000d515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d519:	83 ec 08             	sub    esp,0x8
c000d51c:	6a 00                	push   0x0
c000d51e:	50                   	push   eax
c000d51f:	e8 c2 dd ff ff       	call   c000b2e6 <UnixFile::UnixFile(int)>
c000d524:	83 c4 10             	add    esp,0x10
c000d527:	ba c0 32 02 c0       	mov    edx,0xc00232c0
c000d52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d530:	89 10                	mov    DWORD PTR [eax],edx
c000d532:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d536:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d540:	83 c0 0d             	add    eax,0xd
c000d543:	83 ec 04             	sub    esp,0x4
c000d546:	52                   	push   edx
c000d547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54b:	50                   	push   eax
c000d54c:	e8 6b f9 ff ff       	call   c000cebc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d551:	83 c4 10             	add    esp,0x10
c000d554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d558:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d55b:	8d 50 bf             	lea    edx,[eax-0x41]
c000d55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d562:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d56c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d570:	90                   	nop
c000d571:	83 c4 0c             	add    esp,0xc
c000d574:	c3                   	ret    
c000d575:	90                   	nop

c000d576 <Directory::open()>:
c000d576:	53                   	push   ebx
c000d577:	b8 0b 00 00 00       	mov    eax,0xb
c000d57c:	83 ec 08             	sub    esp,0x8
c000d57f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d583:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d58a:	80 fa 19             	cmp    dl,0x19
c000d58d:	77 3d                	ja     c000d5cc <Directory::open()+0x56>
c000d58f:	8b 14 95 60 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95a0]
c000d596:	85 d2                	test   edx,edx
c000d598:	74 32                	je     c000d5cc <Directory::open()+0x56>
c000d59a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d5a0:	85 d2                	test   edx,edx
c000d5a2:	74 28                	je     c000d5cc <Directory::open()+0x56>
c000d5a4:	b8 06 00 00 00       	mov    eax,0x6
c000d5a9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d5ad:	75 1d                	jne    c000d5cc <Directory::open()+0x56>
c000d5af:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d5b5:	50                   	push   eax
c000d5b6:	8b 02                	mov    eax,DWORD PTR [edx]
c000d5b8:	51                   	push   ecx
c000d5b9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d5bc:	51                   	push   ecx
c000d5bd:	52                   	push   edx
c000d5be:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d5c1:	83 c4 10             	add    esp,0x10
c000d5c4:	85 c0                	test   eax,eax
c000d5c6:	75 04                	jne    c000d5cc <Directory::open()+0x56>
c000d5c8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d5cc:	83 c4 08             	add    esp,0x8
c000d5cf:	5b                   	pop    ebx
c000d5d0:	c3                   	ret    
c000d5d1:	90                   	nop

c000d5d2 <Directory::close()>:
c000d5d2:	53                   	push   ebx
c000d5d3:	b8 0b 00 00 00       	mov    eax,0xb
c000d5d8:	83 ec 08             	sub    esp,0x8
c000d5db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d5df:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d5e6:	80 fa 19             	cmp    dl,0x19
c000d5e9:	77 41                	ja     c000d62c <Directory::close()+0x5a>
c000d5eb:	8b 1c 95 60 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95a0]
c000d5f2:	85 db                	test   ebx,ebx
c000d5f4:	74 36                	je     c000d62c <Directory::close()+0x5a>
c000d5f6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d5fd:	74 2d                	je     c000d62c <Directory::close()+0x5a>
c000d5ff:	b8 05 00 00 00       	mov    eax,0x5
c000d604:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d608:	74 22                	je     c000d62c <Directory::close()+0x5a>
c000d60a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d60e:	8b 04 95 60 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95a0]
c000d615:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d61b:	53                   	push   ebx
c000d61c:	53                   	push   ebx
c000d61d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d61f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d625:	50                   	push   eax
c000d626:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	83 c4 08             	add    esp,0x8
c000d62f:	5b                   	pop    ebx
c000d630:	c3                   	ret    
c000d631:	90                   	nop

c000d632 <Directory::unlink()>:
c000d632:	83 ec 0c             	sub    esp,0xc
c000d635:	b8 0b 00 00 00       	mov    eax,0xb
c000d63a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d63e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d645:	80 f9 19             	cmp    cl,0x19
c000d648:	77 2f                	ja     c000d679 <Directory::unlink()+0x47>
c000d64a:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d651:	85 c9                	test   ecx,ecx
c000d653:	74 24                	je     c000d679 <Directory::unlink()+0x47>
c000d655:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d65b:	85 c9                	test   ecx,ecx
c000d65d:	74 1a                	je     c000d679 <Directory::unlink()+0x47>
c000d65f:	b8 06 00 00 00       	mov    eax,0x6
c000d664:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d668:	75 0f                	jne    c000d679 <Directory::unlink()+0x47>
c000d66a:	83 c2 0d             	add    edx,0xd
c000d66d:	50                   	push   eax
c000d66e:	50                   	push   eax
c000d66f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d671:	52                   	push   edx
c000d672:	51                   	push   ecx
c000d673:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d676:	83 c4 10             	add    esp,0x10
c000d679:	83 c4 0c             	add    esp,0xc
c000d67c:	c3                   	ret    
c000d67d:	90                   	nop

c000d67e <Directory::rename(char const*)>:
c000d67e:	83 ec 0c             	sub    esp,0xc
c000d681:	b8 0b 00 00 00       	mov    eax,0xb
c000d686:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d68a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d691:	80 f9 19             	cmp    cl,0x19
c000d694:	77 32                	ja     c000d6c8 <Directory::rename(char const*)+0x4a>
c000d696:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d69d:	85 c9                	test   ecx,ecx
c000d69f:	74 27                	je     c000d6c8 <Directory::rename(char const*)+0x4a>
c000d6a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6a7:	85 c9                	test   ecx,ecx
c000d6a9:	74 1d                	je     c000d6c8 <Directory::rename(char const*)+0x4a>
c000d6ab:	b8 06 00 00 00       	mov    eax,0x6
c000d6b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d6b4:	75 12                	jne    c000d6c8 <Directory::rename(char const*)+0x4a>
c000d6b6:	83 c2 0d             	add    edx,0xd
c000d6b9:	50                   	push   eax
c000d6ba:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6c0:	52                   	push   edx
c000d6c1:	51                   	push   ecx
c000d6c2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	83 c4 0c             	add    esp,0xc
c000d6cb:	c3                   	ret    

c000d6cc <Directory::exists()>:
c000d6cc:	83 ec 0c             	sub    esp,0xc
c000d6cf:	31 c0                	xor    eax,eax
c000d6d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d6d5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6dc:	80 f9 19             	cmp    cl,0x19
c000d6df:	77 24                	ja     c000d705 <Directory::exists()+0x39>
c000d6e1:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d6e8:	85 c9                	test   ecx,ecx
c000d6ea:	74 19                	je     c000d705 <Directory::exists()+0x39>
c000d6ec:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6f2:	85 c9                	test   ecx,ecx
c000d6f4:	74 0f                	je     c000d705 <Directory::exists()+0x39>
c000d6f6:	83 c2 0d             	add    edx,0xd
c000d6f9:	50                   	push   eax
c000d6fa:	50                   	push   eax
c000d6fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6fd:	52                   	push   edx
c000d6fe:	51                   	push   ecx
c000d6ff:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	83 c4 0c             	add    esp,0xc
c000d708:	c3                   	ret    
c000d709:	90                   	nop

c000d70a <Directory::read(dirent*)>:
c000d70a:	83 ec 1c             	sub    esp,0x1c
c000d70d:	b8 0b 00 00 00       	mov    eax,0xb
c000d712:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d716:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d71d:	80 fa 19             	cmp    dl,0x19
c000d720:	77 30                	ja     c000d752 <Directory::read(dirent*)+0x48>
c000d722:	8b 14 95 60 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95a0]
c000d729:	85 d2                	test   edx,edx
c000d72b:	74 25                	je     c000d752 <Directory::read(dirent*)+0x48>
c000d72d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d734:	74 1c                	je     c000d752 <Directory::read(dirent*)+0x48>
c000d736:	83 ec 0c             	sub    esp,0xc
c000d739:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d73b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d73f:	52                   	push   edx
c000d740:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d744:	6a 00                	push   0x0
c000d746:	68 10 01 00 00       	push   0x110
c000d74b:	51                   	push   ecx
c000d74c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d74f:	83 c4 20             	add    esp,0x20
c000d752:	83 c4 1c             	add    esp,0x1c
c000d755:	c3                   	ret    

c000d756 <Directory::create()>:
c000d756:	83 ec 0c             	sub    esp,0xc
c000d759:	b8 0b 00 00 00       	mov    eax,0xb
c000d75e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d762:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d769:	80 f9 19             	cmp    cl,0x19
c000d76c:	77 2f                	ja     c000d79d <Directory::create()+0x47>
c000d76e:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c000d775:	85 c9                	test   ecx,ecx
c000d777:	74 24                	je     c000d79d <Directory::create()+0x47>
c000d779:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d77f:	85 c9                	test   ecx,ecx
c000d781:	74 1a                	je     c000d79d <Directory::create()+0x47>
c000d783:	b8 06 00 00 00       	mov    eax,0x6
c000d788:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d78c:	75 0f                	jne    c000d79d <Directory::create()+0x47>
c000d78e:	83 c2 0d             	add    edx,0xd
c000d791:	50                   	push   eax
c000d792:	50                   	push   eax
c000d793:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d795:	52                   	push   edx
c000d796:	51                   	push   ecx
c000d797:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d79a:	83 c4 10             	add    esp,0x10
c000d79d:	83 c4 0c             	add    esp,0xc
c000d7a0:	c3                   	ret    
c000d7a1:	90                   	nop

c000d7a2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d7a2:	b8 0a 00 00 00       	mov    eax,0xa
c000d7a7:	c3                   	ret    

c000d7a8 <Bus::Bus(char const*)>:
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7af:	83 ec 08             	sub    esp,0x8
c000d7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b6:	50                   	push   eax
c000d7b7:	e8 8a 09 00 00       	call   c000e146 <Device::Device(char const*)>
c000d7bc:	83 c4 10             	add    esp,0x10
c000d7bf:	ba dc 32 02 c0       	mov    edx,0xc00232dc
c000d7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c8:	89 10                	mov    DWORD PTR [eax],edx
c000d7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ce:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d7d8:	90                   	nop
c000d7d9:	83 c4 0c             	add    esp,0xc
c000d7dc:	c3                   	ret    
c000d7dd:	90                   	nop
c000d7de:	66 90                	xchg   ax,ax

c000d7e0 <Bus::~Bus()>:
c000d7e0:	83 ec 0c             	sub    esp,0xc
c000d7e3:	ba dc 32 02 c0       	mov    edx,0xc00232dc
c000d7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ec:	89 10                	mov    DWORD PTR [eax],edx
c000d7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f2:	83 ec 0c             	sub    esp,0xc
c000d7f5:	50                   	push   eax
c000d7f6:	e8 15 06 00 00       	call   c000de10 <Device::~Device()>
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	90                   	nop
c000d7ff:	83 c4 0c             	add    esp,0xc
c000d802:	c3                   	ret    
c000d803:	90                   	nop

c000d804 <Bus::~Bus()>:
c000d804:	83 ec 0c             	sub    esp,0xc
c000d807:	83 ec 0c             	sub    esp,0xc
c000d80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80e:	e8 cd ff ff ff       	call   c000d7e0 <Bus::~Bus()>
c000d813:	83 c4 10             	add    esp,0x10
c000d816:	83 ec 08             	sub    esp,0x8
c000d819:	68 58 01 00 00       	push   0x158
c000d81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d822:	e8 f3 f1 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000d827:	83 c4 10             	add    esp,0x10
c000d82a:	83 c4 0c             	add    esp,0xc
c000d82d:	c3                   	ret    
c000d82e:	66 90                	xchg   ax,ax

c000d830 <Buzzer::Buzzer(char const*)>:
c000d830:	83 ec 0c             	sub    esp,0xc
c000d833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d837:	83 ec 08             	sub    esp,0x8
c000d83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d83e:	50                   	push   eax
c000d83f:	e8 02 09 00 00       	call   c000e146 <Device::Device(char const*)>
c000d844:	83 c4 10             	add    esp,0x10
c000d847:	ba 08 33 02 c0       	mov    edx,0xc0023308
c000d84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d850:	89 10                	mov    DWORD PTR [eax],edx
c000d852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d856:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d864:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d86e:	90                   	nop
c000d86f:	83 c4 0c             	add    esp,0xc
c000d872:	c3                   	ret    
c000d873:	90                   	nop

c000d874 <Buzzer::~Buzzer()>:
c000d874:	83 ec 0c             	sub    esp,0xc
c000d877:	ba 08 33 02 c0       	mov    edx,0xc0023308
c000d87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d880:	89 10                	mov    DWORD PTR [eax],edx
c000d882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d886:	83 ec 0c             	sub    esp,0xc
c000d889:	50                   	push   eax
c000d88a:	e8 81 05 00 00       	call   c000de10 <Device::~Device()>
c000d88f:	83 c4 10             	add    esp,0x10
c000d892:	90                   	nop
c000d893:	83 c4 0c             	add    esp,0xc
c000d896:	c3                   	ret    
c000d897:	90                   	nop

c000d898 <Buzzer::~Buzzer()>:
c000d898:	83 ec 0c             	sub    esp,0xc
c000d89b:	83 ec 0c             	sub    esp,0xc
c000d89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8a2:	e8 cd ff ff ff       	call   c000d874 <Buzzer::~Buzzer()>
c000d8a7:	83 c4 10             	add    esp,0x10
c000d8aa:	83 ec 08             	sub    esp,0x8
c000d8ad:	68 5c 01 00 00       	push   0x15c
c000d8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b6:	e8 5f f1 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000d8bb:	83 c4 10             	add    esp,0x10
c000d8be:	83 c4 0c             	add    esp,0xc
c000d8c1:	c3                   	ret    

c000d8c2 <Buzzer::stop()>:
c000d8c2:	83 ec 14             	sub    esp,0x14
c000d8c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d8c9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8cb:	6a 00                	push   0x0
c000d8cd:	50                   	push   eax
c000d8ce:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d8d1:	83 c4 1c             	add    esp,0x1c
c000d8d4:	c3                   	ret    

c000d8d5 <beepThread(void*)>:
c000d8d5:	53                   	push   ebx
c000d8d6:	83 ec 08             	sub    esp,0x8
c000d8d9:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000d8de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8e2:	48                   	dec    eax
c000d8e3:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000d8e8:	75 02                	jne    c000d8ec <beepThread(void*)+0x17>
c000d8ea:	fb                   	sti    
c000d8eb:	90                   	nop
c000d8ec:	83 ec 0c             	sub    esp,0xc
c000d8ef:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d8f6:	50                   	push   eax
c000d8f7:	e8 8c a9 00 00       	call   c0018288 <milliTenthSleep(unsigned int)>
c000d8fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8ff:	e8 be ff ff ff       	call   c000d8c2 <Buzzer::stop()>
c000d904:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d90c:	83 c4 18             	add    esp,0x18
c000d90f:	5b                   	pop    ebx
c000d910:	e9 73 a8 00 00       	jmp    c0018188 <blockTask(TaskState)>
c000d915:	90                   	nop

c000d916 <Buzzer::beep(int, int, bool)>:
c000d916:	57                   	push   edi
c000d917:	56                   	push   esi
c000d918:	53                   	push   ebx
c000d919:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d91d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d921:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d925:	50                   	push   eax
c000d926:	50                   	push   eax
c000d927:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d92d:	53                   	push   ebx
c000d92e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d931:	83 c4 10             	add    esp,0x10
c000d934:	89 f8                	mov    eax,edi
c000d936:	84 c0                	test   al,al
c000d938:	74 1e                	je     c000d958 <Buzzer::beep(int, int, bool)+0x42>
c000d93a:	83 ec 0c             	sub    esp,0xc
c000d93d:	6b f6 0a             	imul   esi,esi,0xa
c000d940:	56                   	push   esi
c000d941:	e8 42 a9 00 00       	call   c0018288 <milliTenthSleep(unsigned int)>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d94d:	5b                   	pop    ebx
c000d94e:	5e                   	pop    esi
c000d94f:	5f                   	pop    edi
c000d950:	e9 6d ff ff ff       	jmp    c000d8c2 <Buzzer::stop()>
c000d955:	8d 76 00             	lea    esi,[esi+0x0]
c000d958:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d95e:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000d963:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d96b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d96f:	c7 44 24 14 d5 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d8d5
c000d977:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d97b:	5b                   	pop    ebx
c000d97c:	5e                   	pop    esi
c000d97d:	5f                   	pop    edi
c000d97e:	e9 f1 a3 00 00       	jmp    c0017d74 <Process::createThread(void (*)(void*), void*, int)>
c000d983:	90                   	nop

c000d984 <User::loadClockSettings(int)>:
c000d984:	53                   	push   ebx
c000d985:	83 ec 14             	sub    esp,0x14
c000d988:	68 14 01 00 00       	push   0x114
c000d98d:	e8 31 c0 ff ff       	call   c00099c3 <malloc>
c000d992:	83 c4 0c             	add    esp,0xc
c000d995:	89 c3                	mov    ebx,eax
c000d997:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c000d99d:	68 30 33 02 c0       	push   0xc0023330
c000d9a2:	50                   	push   eax
c000d9a3:	e8 be f6 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c000d9a8:	58                   	pop    eax
c000d9a9:	5a                   	pop    edx
c000d9aa:	6a 01                	push   0x1
c000d9ac:	53                   	push   ebx
c000d9ad:	e8 18 f7 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c000d9b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d9b5:	e8 6e f7 ff ff       	call   c000d128 <File::close()>
c000d9ba:	83 c4 10             	add    esp,0x10
c000d9bd:	85 db                	test   ebx,ebx
c000d9bf:	74 0f                	je     c000d9d0 <User::loadClockSettings(int)+0x4c>
c000d9c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d9c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d9c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d9ca:	83 c4 08             	add    esp,0x8
c000d9cd:	5b                   	pop    ebx
c000d9ce:	ff e0                	jmp    eax
c000d9d0:	83 c4 08             	add    esp,0x8
c000d9d3:	5b                   	pop    ebx
c000d9d4:	c3                   	ret    
c000d9d5:	90                   	nop

c000d9d6 <Clock::Clock(char const*)>:
c000d9d6:	83 ec 0c             	sub    esp,0xc
c000d9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9dd:	83 ec 08             	sub    esp,0x8
c000d9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e4:	50                   	push   eax
c000d9e5:	e8 5c 07 00 00       	call   c000e146 <Device::Device(char const*)>
c000d9ea:	83 c4 10             	add    esp,0x10
c000d9ed:	ba 58 33 02 c0       	mov    edx,0xc0023358
c000d9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f6:	89 10                	mov    DWORD PTR [eax],edx
c000d9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000da06:	90                   	nop
c000da07:	83 c4 0c             	add    esp,0xc
c000da0a:	c3                   	ret    
c000da0b:	90                   	nop

c000da0c <Clock::~Clock()>:
c000da0c:	83 ec 0c             	sub    esp,0xc
c000da0f:	ba 58 33 02 c0       	mov    edx,0xc0023358
c000da14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da18:	89 10                	mov    DWORD PTR [eax],edx
c000da1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1e:	83 ec 0c             	sub    esp,0xc
c000da21:	50                   	push   eax
c000da22:	e8 e9 03 00 00       	call   c000de10 <Device::~Device()>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	90                   	nop
c000da2b:	83 c4 0c             	add    esp,0xc
c000da2e:	c3                   	ret    
c000da2f:	90                   	nop

c000da30 <Clock::~Clock()>:
c000da30:	83 ec 0c             	sub    esp,0xc
c000da33:	83 ec 0c             	sub    esp,0xc
c000da36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3a:	e8 cd ff ff ff       	call   c000da0c <Clock::~Clock()>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	83 ec 08             	sub    esp,0x8
c000da45:	68 58 01 00 00       	push   0x158
c000da4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4e:	e8 c7 ef ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000da53:	83 c4 10             	add    esp,0x10
c000da56:	83 c4 0c             	add    esp,0xc
c000da59:	c3                   	ret    

c000da5a <Clock::timeInSecondsLocal()>:
c000da5a:	53                   	push   ebx
c000da5b:	83 ec 14             	sub    esp,0x14
c000da5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da62:	8b 10                	mov    edx,DWORD PTR [eax]
c000da64:	50                   	push   eax
c000da65:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da68:	0f b6 0d dc 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc00265dc
c000da6f:	03 0d e0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265e0
c000da75:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da7b:	89 cb                	mov    ebx,ecx
c000da7d:	c1 fb 1f             	sar    ebx,0x1f
c000da80:	01 c8                	add    eax,ecx
c000da82:	11 da                	adc    edx,ebx
c000da84:	83 c4 10             	add    esp,0x10
c000da87:	31 c9                	xor    ecx,ecx
c000da89:	80 3d dd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265dd,0x0
c000da90:	74 05                	je     c000da97 <Clock::timeInSecondsLocal()+0x3d>
c000da92:	b9 08 07 00 00       	mov    ecx,0x708
c000da97:	31 db                	xor    ebx,ebx
c000da99:	01 c8                	add    eax,ecx
c000da9b:	11 da                	adc    edx,ebx
c000da9d:	83 c4 08             	add    esp,0x8
c000daa0:	5b                   	pop    ebx
c000daa1:	c3                   	ret    

c000daa2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000daa2:	57                   	push   edi
c000daa3:	56                   	push   esi
c000daa4:	53                   	push   ebx
c000daa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000daa9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000daad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000daaf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dab3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dab6:	0f b6 05 dc 65 02 c0 	movzx  eax,BYTE PTR ds:0xc00265dc
c000dabd:	03 05 e0 65 02 c0    	add    eax,DWORD PTR ds:0xc00265e0
c000dac3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dac9:	99                   	cdq    
c000daca:	29 c6                	sub    esi,eax
c000dacc:	19 d7                	sbb    edi,edx
c000dace:	89 f0                	mov    eax,esi
c000dad0:	89 fa                	mov    edx,edi
c000dad2:	31 f6                	xor    esi,esi
c000dad4:	80 3d dd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265dd,0x0
c000dadb:	74 05                	je     c000dae2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dadd:	be 08 07 00 00       	mov    esi,0x708
c000dae2:	31 ff                	xor    edi,edi
c000dae4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dae8:	29 f0                	sub    eax,esi
c000daea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000daee:	19 fa                	sbb    edx,edi
c000daf0:	89 d8                	mov    eax,ebx
c000daf2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000daf6:	5b                   	pop    ebx
c000daf7:	5e                   	pop    esi
c000daf8:	5f                   	pop    edi
c000daf9:	ff e0                	jmp    eax

c000dafb <datetimeToSeconds(datetime_t)>:
c000dafb:	55                   	push   ebp
c000dafc:	57                   	push   edi
c000dafd:	56                   	push   esi
c000dafe:	53                   	push   ebx
c000daff:	83 ec 14             	sub    esp,0x14
c000db02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000db06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000db0a:	89 d3                	mov    ebx,edx
c000db0c:	0f b6 c6             	movzx  eax,dh
c000db0f:	c1 eb 10             	shr    ebx,0x10
c000db12:	48                   	dec    eax
c000db13:	66 81 eb 6c 07       	sub    bx,0x76c
c000db18:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000db1c:	0f b6 f5             	movzx  esi,ch
c000db1f:	89 cf                	mov    edi,ecx
c000db21:	6b f6 3c             	imul   esi,esi,0x3c
c000db24:	c1 ef 10             	shr    edi,0x10
c000db27:	0f b6 c9             	movzx  ecx,cl
c000db2a:	89 f8                	mov    eax,edi
c000db2c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000db32:	0f b6 f8             	movzx  edi,al
c000db35:	0f b6 d2             	movzx  edx,dl
c000db38:	01 fe                	add    esi,edi
c000db3a:	01 f1                	add    ecx,esi
c000db3c:	0f b7 f3             	movzx  esi,bx
c000db3f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000db43:	c1 f9 1f             	sar    ecx,0x1f
c000db46:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000db4b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db4f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000db54:	8b 0c 8d a0 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcc60]
c000db5b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000db5f:	76 29                	jbe    c000db8a <datetimeToSeconds(datetime_t)+0x8f>
c000db61:	f6 c3 03             	test   bl,0x3
c000db64:	75 24                	jne    c000db8a <datetimeToSeconds(datetime_t)+0x8f>
c000db66:	31 d2                	xor    edx,edx
c000db68:	bf 64 00 00 00       	mov    edi,0x64
c000db6d:	89 d8                	mov    eax,ebx
c000db6f:	66 f7 f7             	div    di
c000db72:	66 85 d2             	test   dx,dx
c000db75:	75 12                	jne    c000db89 <datetimeToSeconds(datetime_t)+0x8e>
c000db77:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000db7d:	bf 90 01 00 00       	mov    edi,0x190
c000db82:	99                   	cdq    
c000db83:	f7 ff                	idiv   edi
c000db85:	85 d2                	test   edx,edx
c000db87:	75 01                	jne    c000db8a <datetimeToSeconds(datetime_t)+0x8f>
c000db89:	41                   	inc    ecx
c000db8a:	66 83 fb 46          	cmp    bx,0x46
c000db8e:	76 45                	jbe    c000dbd5 <datetimeToSeconds(datetime_t)+0xda>
c000db90:	bb 46 00 00 00       	mov    ebx,0x46
c000db95:	bf 64 00 00 00       	mov    edi,0x64
c000db9a:	bd 90 01 00 00       	mov    ebp,0x190
c000db9f:	b8 6d 01 00 00       	mov    eax,0x16d
c000dba4:	f6 c3 03             	test   bl,0x3
c000dba7:	75 23                	jne    c000dbcc <datetimeToSeconds(datetime_t)+0xd1>
c000dba9:	89 d8                	mov    eax,ebx
c000dbab:	99                   	cdq    
c000dbac:	f7 ff                	idiv   edi
c000dbae:	b8 6e 01 00 00       	mov    eax,0x16e
c000dbb3:	85 d2                	test   edx,edx
c000dbb5:	75 15                	jne    c000dbcc <datetimeToSeconds(datetime_t)+0xd1>
c000dbb7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dbbd:	99                   	cdq    
c000dbbe:	f7 fd                	idiv   ebp
c000dbc0:	83 fa 01             	cmp    edx,0x1
c000dbc3:	19 c0                	sbb    eax,eax
c000dbc5:	f7 d0                	not    eax
c000dbc7:	05 6e 01 00 00       	add    eax,0x16e
c000dbcc:	01 c1                	add    ecx,eax
c000dbce:	43                   	inc    ebx
c000dbcf:	39 f3                	cmp    ebx,esi
c000dbd1:	7c cc                	jl     c000db9f <datetimeToSeconds(datetime_t)+0xa4>
c000dbd3:	eb 35                	jmp    c000dc0a <datetimeToSeconds(datetime_t)+0x10f>
c000dbd5:	74 33                	je     c000dc0a <datetimeToSeconds(datetime_t)+0x10f>
c000dbd7:	b8 45 00 00 00       	mov    eax,0x45
c000dbdc:	89 c2                	mov    edx,eax
c000dbde:	83 e2 03             	and    edx,0x3
c000dbe1:	39 f0                	cmp    eax,esi
c000dbe3:	7e 0f                	jle    c000dbf4 <datetimeToSeconds(datetime_t)+0xf9>
c000dbe5:	83 fa 01             	cmp    edx,0x1
c000dbe8:	19 d2                	sbb    edx,edx
c000dbea:	48                   	dec    eax
c000dbeb:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000dbf2:	eb e8                	jmp    c000dbdc <datetimeToSeconds(datetime_t)+0xe1>
c000dbf4:	b8 6d 01 00 00       	mov    eax,0x16d
c000dbf9:	85 d2                	test   edx,edx
c000dbfb:	75 0b                	jne    c000dc08 <datetimeToSeconds(datetime_t)+0x10d>
c000dbfd:	66 83 fb 01          	cmp    bx,0x1
c000dc01:	19 c0                	sbb    eax,eax
c000dc03:	05 6e 01 00 00       	add    eax,0x16e
c000dc08:	29 c1                	sub    ecx,eax
c000dc0a:	b8 80 51 01 00       	mov    eax,0x15180
c000dc0f:	f7 e9                	imul   ecx
c000dc11:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dc15:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dc19:	83 c4 14             	add    esp,0x14
c000dc1c:	5b                   	pop    ebx
c000dc1d:	5e                   	pop    esi
c000dc1e:	5f                   	pop    edi
c000dc1f:	5d                   	pop    ebp
c000dc20:	c3                   	ret    
c000dc21:	90                   	nop

c000dc22 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000dc22:	57                   	push   edi
c000dc23:	56                   	push   esi
c000dc24:	53                   	push   ebx
c000dc25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc29:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc2b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000dc2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc36:	e8 c0 fe ff ff       	call   c000dafb <datetimeToSeconds(datetime_t)>
c000dc3b:	59                   	pop    ecx
c000dc3c:	0f b6 0d dc 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc00265dc
c000dc43:	5b                   	pop    ebx
c000dc44:	03 0d e0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265e0
c000dc4a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc50:	89 cb                	mov    ebx,ecx
c000dc52:	c1 fb 1f             	sar    ebx,0x1f
c000dc55:	29 c8                	sub    eax,ecx
c000dc57:	19 da                	sbb    edx,ebx
c000dc59:	31 c9                	xor    ecx,ecx
c000dc5b:	80 3d dd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265dd,0x0
c000dc62:	74 05                	je     c000dc69 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dc64:	b9 08 07 00 00       	mov    ecx,0x708
c000dc69:	31 db                	xor    ebx,ebx
c000dc6b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dc6f:	29 c8                	sub    eax,ecx
c000dc71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc75:	19 da                	sbb    edx,ebx
c000dc77:	89 f8                	mov    eax,edi
c000dc79:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc7d:	5b                   	pop    ebx
c000dc7e:	5e                   	pop    esi
c000dc7f:	5f                   	pop    edi
c000dc80:	ff e0                	jmp    eax

c000dc82 <secondsToDatetime(unsigned long long)>:
c000dc82:	55                   	push   ebp
c000dc83:	57                   	push   edi
c000dc84:	56                   	push   esi
c000dc85:	53                   	push   ebx
c000dc86:	83 ec 1c             	sub    esp,0x1c
c000dc89:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dc8d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc91:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc95:	6a 00                	push   0x0
c000dc97:	68 80 51 01 00       	push   0x15180
c000dc9c:	55                   	push   ebp
c000dc9d:	57                   	push   edi
c000dc9e:	e8 21 33 01 00       	call   c0020fc4 <__udivdi3>
c000dca3:	83 c4 10             	add    esp,0x10
c000dca6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dcac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcb0:	6a 00                	push   0x0
c000dcb2:	68 80 51 01 00       	push   0x15180
c000dcb7:	55                   	push   ebp
c000dcb8:	57                   	push   edi
c000dcb9:	bf 10 0e 00 00       	mov    edi,0xe10
c000dcbe:	e8 01 34 01 00       	call   c00210c4 <__umoddi3>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	99                   	cdq    
c000dcc7:	f7 ff                	idiv   edi
c000dcc9:	bf 3c 00 00 00       	mov    edi,0x3c
c000dcce:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dcd1:	89 d0                	mov    eax,edx
c000dcd3:	99                   	cdq    
c000dcd4:	f7 ff                	idiv   edi
c000dcd6:	85 db                	test   ebx,ebx
c000dcd8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dcdb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dcde:	79 11                	jns    c000dcf1 <secondsToDatetime(unsigned long long)+0x6f>
c000dce0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dce4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dcea:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcef:	eb 07                	jmp    c000dcf8 <secondsToDatetime(unsigned long long)+0x76>
c000dcf1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcf6:	89 d8                	mov    eax,ebx
c000dcf8:	bf b4 05 00 00       	mov    edi,0x5b4
c000dcfd:	99                   	cdq    
c000dcfe:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dd03:	f7 f9                	idiv   ecx
c000dd05:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dd0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd0e:	31 d2                	xor    edx,edx
c000dd10:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dd18:	01 c3                	add    ebx,eax
c000dd1a:	89 d8                	mov    eax,ebx
c000dd1c:	f7 f1                	div    ecx
c000dd1e:	31 d2                	xor    edx,edx
c000dd20:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dd23:	89 d8                	mov    eax,ebx
c000dd25:	f7 f7                	div    edi
c000dd27:	31 d2                	xor    edx,edx
c000dd29:	29 c1                	sub    ecx,eax
c000dd2b:	89 d8                	mov    eax,ebx
c000dd2d:	f7 f5                	div    ebp
c000dd2f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dd34:	29 c1                	sub    ecx,eax
c000dd36:	31 d2                	xor    edx,edx
c000dd38:	89 c8                	mov    eax,ecx
c000dd3a:	f7 f5                	div    ebp
c000dd3c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dd41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd45:	31 d2                	xor    edx,edx
c000dd47:	89 c8                	mov    eax,ecx
c000dd49:	f7 f5                	div    ebp
c000dd4b:	31 d2                	xor    edx,edx
c000dd4d:	01 c3                	add    ebx,eax
c000dd4f:	89 c8                	mov    eax,ecx
c000dd51:	f7 f7                	div    edi
c000dd53:	bf 99 00 00 00       	mov    edi,0x99
c000dd58:	29 c3                	sub    ebx,eax
c000dd5a:	31 d2                	xor    edx,edx
c000dd5c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dd64:	29 c3                	sub    ebx,eax
c000dd66:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dd69:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dd6c:	bb 05 00 00 00       	mov    ebx,0x5
c000dd71:	83 c1 02             	add    ecx,0x2
c000dd74:	89 c8                	mov    eax,ecx
c000dd76:	f7 f7                	div    edi
c000dd78:	31 d2                	xor    edx,edx
c000dd7a:	89 c7                	mov    edi,eax
c000dd7c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dd82:	83 c0 02             	add    eax,0x2
c000dd85:	f7 f3                	div    ebx
c000dd87:	89 eb                	mov    ebx,ebp
c000dd89:	29 c3                	sub    ebx,eax
c000dd8b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dd91:	88 1e                	mov    BYTE PTR [esi],bl
c000dd93:	19 c0                	sbb    eax,eax
c000dd95:	31 d2                	xor    edx,edx
c000dd97:	83 e0 0c             	and    eax,0xc
c000dd9a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd9e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dda6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ddaa:	83 f9 01             	cmp    ecx,0x1
c000ddad:	0f 96 c2             	setbe  dl
c000ddb0:	41                   	inc    ecx
c000ddb1:	01 d0                	add    eax,edx
c000ddb3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ddb6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ddba:	83 c4 1c             	add    esp,0x1c
c000ddbd:	89 f0                	mov    eax,esi
c000ddbf:	5b                   	pop    ebx
c000ddc0:	5e                   	pop    esi
c000ddc1:	5f                   	pop    edi
c000ddc2:	5d                   	pop    ebp
c000ddc3:	c2 04 00             	ret    0x4

c000ddc6 <Clock::timeInDatetimeLocal()>:
c000ddc6:	53                   	push   ebx
c000ddc7:	83 ec 14             	sub    esp,0x14
c000ddca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ddce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ddd2:	e8 83 fc ff ff       	call   c000da5a <Clock::timeInSecondsLocal()>
c000ddd7:	83 c4 0c             	add    esp,0xc
c000ddda:	52                   	push   edx
c000dddb:	50                   	push   eax
c000dddc:	53                   	push   ebx
c000dddd:	e8 a0 fe ff ff       	call   c000dc82 <secondsToDatetime(unsigned long long)>
c000dde2:	89 d8                	mov    eax,ebx
c000dde4:	83 c4 14             	add    esp,0x14
c000dde7:	5b                   	pop    ebx
c000dde8:	c2 04 00             	ret    0x4
c000ddeb:	90                   	nop

c000ddec <Device::hibernate()>:
c000ddec:	c3                   	ret    
c000dded:	90                   	nop

c000ddee <Device::wake()>:
c000ddee:	c3                   	ret    
c000ddef:	90                   	nop

c000ddf0 <Device::detect()>:
c000ddf0:	c3                   	ret    
c000ddf1:	90                   	nop

c000ddf2 <Device::disableLegacy()>:
c000ddf2:	c3                   	ret    
c000ddf3:	90                   	nop

c000ddf4 <Device::powerSaving(PowerSavingLevel)>:
c000ddf4:	c3                   	ret    
c000ddf5:	90                   	nop

c000ddf6 <DriverlessDevice::close(int, int, void*)>:
c000ddf6:	31 c0                	xor    eax,eax
c000ddf8:	c3                   	ret    
c000ddf9:	90                   	nop

c000ddfa <DriverlessDevice::detect()>:
c000ddfa:	c3                   	ret    
c000ddfb:	90                   	nop

c000ddfc <DriverlessDevice::open(int, int, void*)>:
c000ddfc:	83 ec 18             	sub    esp,0x18
c000ddff:	68 d0 33 02 c0       	push   0xc00233d0
c000de04:	e8 b4 65 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000de09:	83 c8 ff             	or     eax,0xffffffff
c000de0c:	83 c4 1c             	add    esp,0x1c
c000de0f:	c3                   	ret    

c000de10 <Device::~Device()>:
c000de10:	ba 30 34 02 c0       	mov    edx,0xc0023430
c000de15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de19:	89 10                	mov    DWORD PTR [eax],edx
c000de1b:	90                   	nop
c000de1c:	c3                   	ret    
c000de1d:	90                   	nop

c000de1e <Device::~Device()>:
c000de1e:	83 ec 0c             	sub    esp,0xc
c000de21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000de25:	e8 e6 ff ff ff       	call   c000de10 <Device::~Device()>
c000de2a:	83 c4 04             	add    esp,0x4
c000de2d:	83 ec 08             	sub    esp,0x8
c000de30:	68 58 01 00 00       	push   0x158
c000de35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de39:	e8 dc eb ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000de3e:	83 c4 10             	add    esp,0x10
c000de41:	83 c4 0c             	add    esp,0xc
c000de44:	c3                   	ret    
c000de45:	90                   	nop

c000de46 <Device::findAndLoadDriver()>:
c000de46:	c7 44 24 04 ee 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233ee
c000de4e:	e9 a8 ec ff ff       	jmp    c000cafb <Dbg::kprintf(char const*, ...)>
c000de53:	90                   	nop

c000de54 <Device::preOpenPCI(PCIDeviceInfo)>:
c000de54:	57                   	push   edi
c000de55:	b9 09 00 00 00       	mov    ecx,0x9
c000de5a:	56                   	push   esi
c000de5b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000de5f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000de63:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000de6d:	81 c7 18 01 00 00    	add    edi,0x118
c000de73:	fc                   	cld    
c000de74:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000de76:	5e                   	pop    esi
c000de77:	5f                   	pop    edi
c000de78:	c3                   	ret    
c000de79:	90                   	nop

c000de7a <Device::preOpenACPI(void*, char*, char*)>:
c000de7a:	57                   	push   edi
c000de7b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000de80:	56                   	push   esi
c000de81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de89:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000de93:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de99:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dea3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dea5:	b9 0e 00 00 00       	mov    ecx,0xe
c000deaa:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000deb0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000deb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000deb6:	5e                   	pop    esi
c000deb7:	5f                   	pop    edi
c000deb8:	c3                   	ret    
c000deb9:	90                   	nop

c000deba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000deba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000debe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000dec3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000deca:	75 0b                	jne    c000ded7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000decc:	8b 00                	mov    eax,DWORD PTR [eax]
c000dece:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ded2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ded5:	eb 1e                	jmp    c000def5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000ded7:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000dedc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dee2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000dee8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000deea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000def2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000def5:	ff e0                	jmp    eax
c000def7:	90                   	nop

c000def8 <Device::getParent()>:
c000def8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000defc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000df02:	c3                   	ret    
c000df03:	90                   	nop

c000df04 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000df04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df08:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000df0d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000df14:	75 0b                	jne    c000df21 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000df16:	8b 00                	mov    eax,DWORD PTR [eax]
c000df18:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df1c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000df1f:	eb 1e                	jmp    c000df3f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000df21:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000df26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000df2c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000df32:	8b 08                	mov    ecx,DWORD PTR [eax]
c000df34:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df3c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000df3f:	ff e0                	jmp    eax
c000df41:	90                   	nop

c000df42 <Device::addChild(Device*)>:
c000df42:	53                   	push   ebx
c000df43:	83 ec 08             	sub    esp,0x8
c000df46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000df4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df4e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000df54:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000df5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000df5c:	85 d2                	test   edx,edx
c000df5e:	74 04                	je     c000df64 <Device::addChild(Device*)+0x22>
c000df60:	89 d3                	mov    ebx,edx
c000df62:	eb f6                	jmp    c000df5a <Device::addChild(Device*)+0x18>
c000df64:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000df67:	83 ec 0c             	sub    esp,0xc
c000df6a:	6a 08                	push   0x8
c000df6c:	e8 52 ba ff ff       	call   c00099c3 <malloc>
c000df71:	89 03                	mov    DWORD PTR [ebx],eax
c000df73:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df80:	83 c4 18             	add    esp,0x18
c000df83:	5b                   	pop    ebx
c000df84:	c3                   	ret    
c000df85:	90                   	nop

c000df86 <Device::removeAllChildren()>:
c000df86:	56                   	push   esi
c000df87:	53                   	push   ebx
c000df88:	52                   	push   edx
c000df89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df8d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000df93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df96:	74 17                	je     c000dfaf <Device::removeAllChildren()+0x29>
c000df98:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df9b:	85 c0                	test   eax,eax
c000df9d:	74 0c                	je     c000dfab <Device::removeAllChildren()+0x25>
c000df9f:	83 ec 0c             	sub    esp,0xc
c000dfa2:	8b 10                	mov    edx,DWORD PTR [eax]
c000dfa4:	50                   	push   eax
c000dfa5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfad:	eb e4                	jmp    c000df93 <Device::removeAllChildren()+0xd>
c000dfaf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dfb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dfbb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dfc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dfc8:	58                   	pop    eax
c000dfc9:	5b                   	pop    ebx
c000dfca:	5e                   	pop    esi
c000dfcb:	c3                   	ret    

c000dfcc <Device::hibernateAll()>:
c000dfcc:	53                   	push   ebx
c000dfcd:	83 ec 14             	sub    esp,0x14
c000dfd0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfd6:	53                   	push   ebx
c000dfd7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dfda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfe0:	83 c4 10             	add    esp,0x10
c000dfe3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfe6:	74 0f                	je     c000dff7 <Device::hibernateAll()+0x2b>
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfee:	e8 d9 ff ff ff       	call   c000dfcc <Device::hibernateAll()>
c000dff3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dff5:	eb e9                	jmp    c000dfe0 <Device::hibernateAll()+0x14>
c000dff7:	83 c4 08             	add    esp,0x8
c000dffa:	5b                   	pop    ebx
c000dffb:	c3                   	ret    

c000dffc <Device::wakeAll()>:
c000dffc:	53                   	push   ebx
c000dffd:	83 ec 14             	sub    esp,0x14
c000e000:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e004:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e006:	53                   	push   ebx
c000e007:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e00a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e010:	83 c4 10             	add    esp,0x10
c000e013:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e016:	74 0f                	je     c000e027 <Device::wakeAll()+0x2b>
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e01e:	e8 d9 ff ff ff       	call   c000dffc <Device::wakeAll()>
c000e023:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e025:	eb e9                	jmp    c000e010 <Device::wakeAll()+0x14>
c000e027:	83 c4 08             	add    esp,0x8
c000e02a:	5b                   	pop    ebx
c000e02b:	c3                   	ret    

c000e02c <Device::detectAll()>:
c000e02c:	53                   	push   ebx
c000e02d:	83 ec 14             	sub    esp,0x14
c000e030:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e034:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e036:	53                   	push   ebx
c000e037:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e03a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e040:	83 c4 10             	add    esp,0x10
c000e043:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e046:	74 0f                	je     c000e057 <Device::detectAll()+0x2b>
c000e048:	83 ec 0c             	sub    esp,0xc
c000e04b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e04e:	e8 d9 ff ff ff       	call   c000e02c <Device::detectAll()>
c000e053:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e055:	eb e9                	jmp    c000e040 <Device::detectAll()+0x14>
c000e057:	83 c4 08             	add    esp,0x8
c000e05a:	5b                   	pop    ebx
c000e05b:	c3                   	ret    

c000e05c <Device::disableLegacyAll()>:
c000e05c:	53                   	push   ebx
c000e05d:	83 ec 14             	sub    esp,0x14
c000e060:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e064:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e066:	53                   	push   ebx
c000e067:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e06a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e070:	83 c4 10             	add    esp,0x10
c000e073:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e076:	74 0f                	je     c000e087 <Device::disableLegacyAll()+0x2b>
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e07e:	e8 d9 ff ff ff       	call   c000e05c <Device::disableLegacyAll()>
c000e083:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e085:	eb e9                	jmp    c000e070 <Device::disableLegacyAll()+0x14>
c000e087:	83 c4 08             	add    esp,0x8
c000e08a:	5b                   	pop    ebx
c000e08b:	c3                   	ret    

c000e08c <Device::loadDriversForAll()>:
c000e08c:	53                   	push   ebx
c000e08d:	83 ec 08             	sub    esp,0x8
c000e090:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e094:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e09b:	75 0c                	jne    c000e0a9 <Device::loadDriversForAll()+0x1d>
c000e09d:	83 ec 0c             	sub    esp,0xc
c000e0a0:	53                   	push   ebx
c000e0a1:	e8 a0 fd ff ff       	call   c000de46 <Device::findAndLoadDriver()>
c000e0a6:	83 c4 10             	add    esp,0x10
c000e0a9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0b2:	74 12                	je     c000e0c6 <Device::loadDriversForAll()+0x3a>
c000e0b4:	83 ec 0c             	sub    esp,0xc
c000e0b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ba:	e8 cd ff ff ff       	call   c000e08c <Device::loadDriversForAll()>
c000e0bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0c1:	83 c4 10             	add    esp,0x10
c000e0c4:	eb e9                	jmp    c000e0af <Device::loadDriversForAll()+0x23>
c000e0c6:	83 c4 08             	add    esp,0x8
c000e0c9:	5b                   	pop    ebx
c000e0ca:	c3                   	ret    
c000e0cb:	90                   	nop

c000e0cc <Device::closeAll()>:
c000e0cc:	53                   	push   ebx
c000e0cd:	83 ec 08             	sub    esp,0x8
c000e0d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0d6:	6a 00                	push   0x0
c000e0d8:	6a 00                	push   0x0
c000e0da:	6a 00                	push   0x0
c000e0dc:	53                   	push   ebx
c000e0dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e0e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0e6:	83 c4 10             	add    esp,0x10
c000e0e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0ec:	74 0f                	je     c000e0fd <Device::closeAll()+0x31>
c000e0ee:	83 ec 0c             	sub    esp,0xc
c000e0f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0f4:	e8 d3 ff ff ff       	call   c000e0cc <Device::closeAll()>
c000e0f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0fb:	eb e9                	jmp    c000e0e6 <Device::closeAll()+0x1a>
c000e0fd:	83 c4 08             	add    esp,0x8
c000e100:	5b                   	pop    ebx
c000e101:	c3                   	ret    

c000e102 <Device::powerSavingAll(PowerSavingLevel)>:
c000e102:	56                   	push   esi
c000e103:	53                   	push   ebx
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e10b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e10f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e111:	56                   	push   esi
c000e112:	53                   	push   ebx
c000e113:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e116:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e11c:	83 c4 10             	add    esp,0x10
c000e11f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e122:	74 0f                	je     c000e133 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e124:	52                   	push   edx
c000e125:	52                   	push   edx
c000e126:	56                   	push   esi
c000e127:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e12a:	e8 d3 ff ff ff       	call   c000e102 <Device::powerSavingAll(PowerSavingLevel)>
c000e12f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e131:	eb e9                	jmp    c000e11c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e133:	58                   	pop    eax
c000e134:	5b                   	pop    ebx
c000e135:	5e                   	pop    esi
c000e136:	c3                   	ret    
c000e137:	90                   	nop

c000e138 <Device::setName(char const*)>:
c000e138:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e140:	e9 fb 25 ff ff       	jmp    c0000740 <strcpy>
c000e145:	90                   	nop

c000e146 <Device::Device(char const*)>:
c000e146:	83 ec 1c             	sub    esp,0x1c
c000e149:	ba 30 34 02 c0       	mov    edx,0xc0023430
c000e14e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e152:	89 10                	mov    DWORD PTR [eax],edx
c000e154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e158:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e166:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e174:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e17e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e182:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e18c:	83 ec 08             	sub    esp,0x8
c000e18f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e193:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e197:	e8 9c ff ff ff       	call   c000e138 <Device::setName(char const*)>
c000e19c:	83 c4 10             	add    esp,0x10
c000e19f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e1a7:	83 ec 0c             	sub    esp,0xc
c000e1aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1ae:	e8 10 b8 ff ff       	call   c00099c3 <malloc>
c000e1b3:	83 c4 10             	add    esp,0x10
c000e1b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e1c7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e1cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e1d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e1e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e1f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1fd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e208:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e216:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e224:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e232:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e23c:	90                   	nop
c000e23d:	83 c4 1c             	add    esp,0x1c
c000e240:	c3                   	ret    
c000e241:	90                   	nop

c000e242 <Device::getName()>:
c000e242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e246:	05 d0 00 00 00       	add    eax,0xd0
c000e24b:	c3                   	ret    

c000e24c <DriverlessDevice::DriverlessDevice(char const*)>:
c000e24c:	83 ec 0c             	sub    esp,0xc
c000e24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e253:	83 ec 08             	sub    esp,0x8
c000e256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25a:	50                   	push   eax
c000e25b:	e8 e6 fe ff ff       	call   c000e146 <Device::Device(char const*)>
c000e260:	83 c4 10             	add    esp,0x10
c000e263:	ba 5c 34 02 c0       	mov    edx,0xc002345c
c000e268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e26c:	89 10                	mov    DWORD PTR [eax],edx
c000e26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e272:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e27c:	90                   	nop
c000e27d:	83 c4 0c             	add    esp,0xc
c000e280:	c3                   	ret    
c000e281:	90                   	nop

c000e282 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e282:	57                   	push   edi
c000e283:	56                   	push   esi
c000e284:	53                   	push   ebx
c000e285:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e289:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e28d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e291:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e297:	75 0c                	jne    c000e2a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e299:	52                   	push   edx
c000e29a:	52                   	push   edx
c000e29b:	53                   	push   ebx
c000e29c:	56                   	push   esi
c000e29d:	e8 d4 31 01 00       	call   c0021476 <LinkedList<Device>::addElement(Device*)>
c000e2a2:	83 c4 10             	add    esp,0x10
c000e2a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2ae:	74 12                	je     c000e2c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e2b0:	50                   	push   eax
c000e2b1:	57                   	push   edi
c000e2b2:	56                   	push   esi
c000e2b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2b6:	e8 c7 ff ff ff       	call   c000e282 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e2bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2bd:	83 c4 10             	add    esp,0x10
c000e2c0:	eb e9                	jmp    c000e2ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e2c2:	5b                   	pop    ebx
c000e2c3:	5e                   	pop    esi
c000e2c4:	5f                   	pop    edi
c000e2c5:	c3                   	ret    

c000e2c6 <getDevicesOfType(DeviceType)>:
c000e2c6:	53                   	push   ebx
c000e2c7:	83 ec 14             	sub    esp,0x14
c000e2ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2ce:	53                   	push   ebx
c000e2cf:	e8 7e 32 01 00       	call   c0021552 <LinkedList<Device>::LinkedList()>
c000e2d4:	83 c4 0c             	add    esp,0xc
c000e2d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2db:	53                   	push   ebx
c000e2dc:	ff 35 a8 64 02 c0    	push   DWORD PTR ds:0xc00264a8
c000e2e2:	e8 9b ff ff ff       	call   c000e282 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e2e7:	89 d8                	mov    eax,ebx
c000e2e9:	83 c4 18             	add    esp,0x18
c000e2ec:	5b                   	pop    ebx
c000e2ed:	c2 04 00             	ret    0x4

c000e2f0 <HardDiskController::HardDiskController(char const*)>:
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f7:	83 ec 08             	sub    esp,0x8
c000e2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2fe:	50                   	push   eax
c000e2ff:	e8 42 fe ff ff       	call   c000e146 <Device::Device(char const*)>
c000e304:	83 c4 10             	add    esp,0x10
c000e307:	ba 88 34 02 c0       	mov    edx,0xc0023488
c000e30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e310:	89 10                	mov    DWORD PTR [eax],edx
c000e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e316:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e320:	90                   	nop
c000e321:	83 c4 0c             	add    esp,0xc
c000e324:	c3                   	ret    
c000e325:	90                   	nop
c000e326:	66 90                	xchg   ax,ax

c000e328 <HardDiskController::~HardDiskController()>:
c000e328:	83 ec 0c             	sub    esp,0xc
c000e32b:	ba 88 34 02 c0       	mov    edx,0xc0023488
c000e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e334:	89 10                	mov    DWORD PTR [eax],edx
c000e336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33a:	83 ec 0c             	sub    esp,0xc
c000e33d:	50                   	push   eax
c000e33e:	e8 cd fa ff ff       	call   c000de10 <Device::~Device()>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	90                   	nop
c000e347:	83 c4 0c             	add    esp,0xc
c000e34a:	c3                   	ret    
c000e34b:	90                   	nop

c000e34c <HardDiskController::~HardDiskController()>:
c000e34c:	83 ec 0c             	sub    esp,0xc
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e356:	e8 cd ff ff ff       	call   c000e328 <HardDiskController::~HardDiskController()>
c000e35b:	83 c4 10             	add    esp,0x10
c000e35e:	83 ec 08             	sub    esp,0x8
c000e361:	68 58 01 00 00       	push   0x158
c000e366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36a:	e8 ab e6 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	83 c4 0c             	add    esp,0xc
c000e375:	c3                   	ret    

c000e376 <PhysicalDisk::eject()>:
c000e376:	83 c8 ff             	or     eax,0xffffffff
c000e379:	c3                   	ret    

c000e37a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e37a:	83 ec 0c             	sub    esp,0xc
c000e37d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e381:	83 ec 08             	sub    esp,0x8
c000e384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e388:	50                   	push   eax
c000e389:	e8 b8 fd ff ff       	call   c000e146 <Device::Device(char const*)>
c000e38e:	83 c4 10             	add    esp,0x10
c000e391:	ba b4 34 02 c0       	mov    edx,0xc00234b4
c000e396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39a:	89 10                	mov    DWORD PTR [eax],edx
c000e39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e3a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e3c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e3dc:	90                   	nop
c000e3dd:	83 c4 0c             	add    esp,0xc
c000e3e0:	c3                   	ret    
c000e3e1:	90                   	nop

c000e3e2 <PhysicalDisk::startCache()>:
c000e3e2:	56                   	push   esi
c000e3e3:	53                   	push   ebx
c000e3e4:	83 ec 10             	sub    esp,0x10
c000e3e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3eb:	6a 44                	push   0x44
c000e3ed:	e8 d1 b5 ff ff       	call   c00099c3 <malloc>
c000e3f2:	89 c6                	mov    esi,eax
c000e3f4:	58                   	pop    eax
c000e3f5:	5a                   	pop    edx
c000e3f6:	53                   	push   ebx
c000e3f7:	56                   	push   esi
c000e3f8:	e8 2f 26 00 00       	call   c0010a2c <VCache::VCache(PhysicalDisk*)>
c000e3fd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e403:	83 c4 14             	add    esp,0x14
c000e406:	5b                   	pop    ebx
c000e407:	5e                   	pop    esi
c000e408:	c3                   	ret    
c000e409:	90                   	nop

c000e40a <PhysicalDisk::~PhysicalDisk()>:
c000e40a:	83 ec 0c             	sub    esp,0xc
c000e40d:	ba b4 34 02 c0       	mov    edx,0xc00234b4
c000e412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e416:	89 10                	mov    DWORD PTR [eax],edx
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	50                   	push   eax
c000e420:	e8 eb f9 ff ff       	call   c000de10 <Device::~Device()>
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	90                   	nop
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    
c000e42d:	90                   	nop

c000e42e <PhysicalDisk::~PhysicalDisk()>:
c000e42e:	83 ec 0c             	sub    esp,0xc
c000e431:	83 ec 0c             	sub    esp,0xc
c000e434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e438:	e8 cd ff ff ff       	call   c000e40a <PhysicalDisk::~PhysicalDisk()>
c000e43d:	83 c4 10             	add    esp,0x10
c000e440:	83 ec 08             	sub    esp,0x8
c000e443:	68 6c 01 00 00       	push   0x16c
c000e448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44c:	e8 c9 e5 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000e451:	83 c4 10             	add    esp,0x10
c000e454:	83 c4 0c             	add    esp,0xc
c000e457:	c3                   	ret    

c000e458 <FPU::FPU(char const*)>:
c000e458:	83 ec 0c             	sub    esp,0xc
c000e45b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e45f:	83 ec 08             	sub    esp,0x8
c000e462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e466:	50                   	push   eax
c000e467:	e8 da fc ff ff       	call   c000e146 <Device::Device(char const*)>
c000e46c:	83 c4 10             	add    esp,0x10
c000e46f:	ba f8 34 02 c0       	mov    edx,0xc00234f8
c000e474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e478:	89 10                	mov    DWORD PTR [eax],edx
c000e47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e47e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e488:	90                   	nop
c000e489:	83 c4 0c             	add    esp,0xc
c000e48c:	c3                   	ret    
c000e48d:	90                   	nop
c000e48e:	66 90                	xchg   ax,ax

c000e490 <FPU::~FPU()>:
c000e490:	83 ec 0c             	sub    esp,0xc
c000e493:	ba f8 34 02 c0       	mov    edx,0xc00234f8
c000e498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e49c:	89 10                	mov    DWORD PTR [eax],edx
c000e49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4a2:	83 ec 0c             	sub    esp,0xc
c000e4a5:	50                   	push   eax
c000e4a6:	e8 65 f9 ff ff       	call   c000de10 <Device::~Device()>
c000e4ab:	83 c4 10             	add    esp,0x10
c000e4ae:	90                   	nop
c000e4af:	83 c4 0c             	add    esp,0xc
c000e4b2:	c3                   	ret    
c000e4b3:	90                   	nop

c000e4b4 <FPU::~FPU()>:
c000e4b4:	83 ec 0c             	sub    esp,0xc
c000e4b7:	83 ec 0c             	sub    esp,0xc
c000e4ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4be:	e8 cd ff ff ff       	call   c000e490 <FPU::~FPU()>
c000e4c3:	83 c4 10             	add    esp,0x10
c000e4c6:	83 ec 08             	sub    esp,0x8
c000e4c9:	68 58 01 00 00       	push   0x158
c000e4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4d2:	e8 43 e5 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000e4d7:	83 c4 10             	add    esp,0x10
c000e4da:	83 c4 0c             	add    esp,0xc
c000e4dd:	c3                   	ret    

c000e4de <setupFPU()>:
c000e4de:	53                   	push   ebx
c000e4df:	83 ec 08             	sub    esp,0x8
c000e4e2:	8b 15 a8 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264a8
c000e4e8:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e4ef:	74 1b                	je     c000e50c <setupFPU()+0x2e>
c000e4f1:	83 ec 0c             	sub    esp,0xc
c000e4f4:	68 58 01 00 00       	push   0x158
c000e4f9:	e8 c5 b4 ff ff       	call   c00099c3 <malloc>
c000e4fe:	89 c3                	mov    ebx,eax
c000e500:	89 04 24             	mov    DWORD PTR [esp],eax
c000e503:	e8 48 16 01 00       	call   c001fb50 <AVX::AVX()>
c000e508:	eb 62                	jmp    c000e56c <setupFPU()+0x8e>
c000e50a:	66 90                	xchg   ax,ax
c000e50c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e512:	84 c0                	test   al,al
c000e514:	79 1a                	jns    c000e530 <setupFPU()+0x52>
c000e516:	83 ec 0c             	sub    esp,0xc
c000e519:	68 58 01 00 00       	push   0x158
c000e51e:	e8 a0 b4 ff ff       	call   c00099c3 <malloc>
c000e523:	89 c3                	mov    ebx,eax
c000e525:	89 04 24             	mov    DWORD PTR [esp],eax
c000e528:	e8 53 17 01 00       	call   c001fc80 <SSE::SSE()>
c000e52d:	eb 3d                	jmp    c000e56c <setupFPU()+0x8e>
c000e52f:	90                   	nop
c000e530:	a8 20                	test   al,0x20
c000e532:	74 1c                	je     c000e550 <setupFPU()+0x72>
c000e534:	83 ec 0c             	sub    esp,0xc
c000e537:	68 58 01 00 00       	push   0x158
c000e53c:	e8 82 b4 ff ff       	call   c00099c3 <malloc>
c000e541:	89 c3                	mov    ebx,eax
c000e543:	89 04 24             	mov    DWORD PTR [esp],eax
c000e546:	e8 99 16 01 00       	call   c001fbe4 <MMX::MMX()>
c000e54b:	eb 1f                	jmp    c000e56c <setupFPU()+0x8e>
c000e54d:	8d 76 00             	lea    esi,[esi+0x0]
c000e550:	a8 10                	test   al,0x10
c000e552:	74 20                	je     c000e574 <setupFPU()+0x96>
c000e554:	83 ec 0c             	sub    esp,0xc
c000e557:	68 58 01 00 00       	push   0x158
c000e55c:	e8 62 b4 ff ff       	call   c00099c3 <malloc>
c000e561:	89 c3                	mov    ebx,eax
c000e563:	89 04 24             	mov    DWORD PTR [esp],eax
c000e566:	e8 a9 17 01 00       	call   c001fd14 <x87::x87()>
c000e56b:	90                   	nop
c000e56c:	83 c4 10             	add    esp,0x10
c000e56f:	eb 27                	jmp    c000e598 <setupFPU()+0xba>
c000e571:	8d 76 00             	lea    esi,[esi+0x0]
c000e574:	83 e0 ef             	and    eax,0xffffffef
c000e577:	83 ec 0c             	sub    esp,0xc
c000e57a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e580:	68 e4 34 02 c0       	push   0xc00234e4
c000e585:	e8 71 e5 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000e58a:	0f 20 c0             	mov    eax,cr0
c000e58d:	83 c8 04             	or     eax,0x4
c000e590:	0f 22 c0             	mov    cr0,eax
c000e593:	31 db                	xor    ebx,ebx
c000e595:	83 c4 10             	add    esp,0x10
c000e598:	89 d8                	mov    eax,ebx
c000e59a:	83 c4 08             	add    esp,0x8
c000e59d:	5b                   	pop    ebx
c000e59e:	c3                   	ret    
c000e59f:	90                   	nop

c000e5a0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e5a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5a8:	c1 e0 04             	shl    eax,0x4
c000e5ab:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e5af:	8d 50 10             	lea    edx,[eax+0x10]
c000e5b2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e5b8:	74 08                	je     c000e5c2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e5ba:	83 c0 04             	add    eax,0x4
c000e5bd:	39 d0                	cmp    eax,edx
c000e5bf:	75 f1                	jne    c000e5b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e5c1:	c3                   	ret    
c000e5c2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e5cc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e5d6:	eb e2                	jmp    c000e5ba <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e5d8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e5d8:	57                   	push   edi
c000e5d9:	31 c0                	xor    eax,eax
c000e5db:	56                   	push   esi
c000e5dc:	53                   	push   ebx
c000e5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5e9:	89 da                	mov    edx,ebx
c000e5eb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e5ef:	c1 e2 04             	shl    edx,0x4
c000e5f2:	01 ca                	add    edx,ecx
c000e5f4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e5fc:	74 16                	je     c000e614 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e5fe:	40                   	inc    eax
c000e5ff:	83 f8 04             	cmp    eax,0x4
c000e602:	75 f0                	jne    c000e5f4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e604:	c7 44 24 10 28 35 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023528
c000e60c:	5b                   	pop    ebx
c000e60d:	5e                   	pop    esi
c000e60e:	5f                   	pop    edi
c000e60f:	e9 a9 5d 00 00       	jmp    c00143bd <Krnl::panic(char const*)>
c000e614:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e617:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e61a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e620:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e626:	5b                   	pop    ebx
c000e627:	5e                   	pop    esi
c000e628:	5f                   	pop    edi
c000e629:	c3                   	ret    

c000e62a <doubleFault(regs*, void*)>:
c000e62a:	55                   	push   ebp
c000e62b:	89 e5                	mov    ebp,esp
c000e62d:	83 ec 08             	sub    esp,0x8
c000e630:	83 ec 0c             	sub    esp,0xc
c000e633:	68 35 35 02 c0       	push   0xc0023535
c000e638:	e8 80 5d 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000e63d:	83 c4 10             	add    esp,0x10
c000e640:	90                   	nop
c000e641:	c9                   	leave  
c000e642:	c3                   	ret    
c000e643:	90                   	nop

c000e644 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e644:	56                   	push   esi
c000e645:	53                   	push   ebx
c000e646:	50                   	push   eax
c000e647:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e64b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e64f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e654:	75 35                	jne    c000e68b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e656:	8d 43 20             	lea    eax,[ebx+0x20]
c000e659:	31 d2                	xor    edx,edx
c000e65b:	89 c1                	mov    ecx,eax
c000e65d:	c1 e1 04             	shl    ecx,0x4
c000e660:	01 f1                	add    ecx,esi
c000e662:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e66a:	74 3e                	je     c000e6aa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e66c:	42                   	inc    edx
c000e66d:	83 fa 04             	cmp    edx,0x4
c000e670:	75 f0                	jne    c000e662 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e672:	83 ec 0c             	sub    esp,0xc
c000e675:	68 4f 35 02 c0       	push   0xc002354f
c000e67a:	e8 3e 5d 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000e67f:	83 c4 10             	add    esp,0x10
c000e682:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e687:	5a                   	pop    edx
c000e688:	5b                   	pop    ebx
c000e689:	5e                   	pop    esi
c000e68a:	c3                   	ret    
c000e68b:	83 ec 0c             	sub    esp,0xc
c000e68e:	56                   	push   esi
c000e68f:	e8 ae fb ff ff       	call   c000e242 <Device::getName()>
c000e694:	83 c4 10             	add    esp,0x10
c000e697:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e69a:	75 ba                	jne    c000e656 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e69c:	83 fb 0f             	cmp    ebx,0xf
c000e69f:	7f 29                	jg     c000e6ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e6a1:	0f b6 9b a0 5b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda460]
c000e6a8:	eb ac                	jmp    c000e656 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e6aa:	8d 04 82             	lea    eax,[edx+eax*4]
c000e6ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6b1:	8d 04 86             	lea    eax,[esi+eax*4]
c000e6b4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e6ba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6be:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e6c4:	89 d8                	mov    eax,ebx
c000e6c6:	5a                   	pop    edx
c000e6c7:	5b                   	pop    ebx
c000e6c8:	5e                   	pop    esi
c000e6c9:	c3                   	ret    
c000e6ca:	83 ec 0c             	sub    esp,0xc
c000e6cd:	68 42 35 02 c0       	push   0xc0023542
c000e6d2:	e8 e6 5c 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000e6d7:	83 c4 10             	add    esp,0x10
c000e6da:	e9 77 ff ff ff       	jmp    c000e656 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e6df:	90                   	nop

c000e6e0 <InterruptController::clearAllHandlers(int, bool)>:
c000e6e0:	56                   	push   esi
c000e6e1:	53                   	push   ebx
c000e6e2:	52                   	push   edx
c000e6e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6eb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e6f0:	75 61                	jne    c000e753 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e6f2:	8d 46 20             	lea    eax,[esi+0x20]
c000e6f5:	c1 e6 04             	shl    esi,0x4
c000e6f8:	c1 e0 04             	shl    eax,0x4
c000e6fb:	01 de                	add    esi,ebx
c000e6fd:	01 d8                	add    eax,ebx
c000e6ff:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e709:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e713:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e71d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e727:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e731:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e73b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e745:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e74f:	58                   	pop    eax
c000e750:	5b                   	pop    ebx
c000e751:	5e                   	pop    esi
c000e752:	c3                   	ret    
c000e753:	83 ec 0c             	sub    esp,0xc
c000e756:	53                   	push   ebx
c000e757:	e8 e6 fa ff ff       	call   c000e242 <Device::getName()>
c000e75c:	83 c4 10             	add    esp,0x10
c000e75f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e762:	75 8e                	jne    c000e6f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e764:	83 fe 0f             	cmp    esi,0xf
c000e767:	7f 09                	jg     c000e772 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e769:	0f b6 b6 a0 5b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda460]
c000e770:	eb 80                	jmp    c000e6f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e772:	83 ec 0c             	sub    esp,0xc
c000e775:	68 5c 35 02 c0       	push   0xc002355c
c000e77a:	e8 3e 5c 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000e77f:	83 c4 10             	add    esp,0x10
c000e782:	e9 6b ff ff ff       	jmp    c000e6f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e787:	90                   	nop

c000e788 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e788:	56                   	push   esi
c000e789:	53                   	push   ebx
c000e78a:	52                   	push   edx
c000e78b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e78f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e793:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e798:	75 3a                	jne    c000e7d4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e79a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e79e:	8d 50 20             	lea    edx,[eax+0x20]
c000e7a1:	c1 e2 04             	shl    edx,0x4
c000e7a4:	8d 04 16             	lea    eax,[esi+edx*1]
c000e7a7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e7ab:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e7b1:	74 0b                	je     c000e7be <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e7b3:	83 c0 04             	add    eax,0x4
c000e7b6:	39 d0                	cmp    eax,edx
c000e7b8:	75 f1                	jne    c000e7ab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e7ba:	58                   	pop    eax
c000e7bb:	5b                   	pop    ebx
c000e7bc:	5e                   	pop    esi
c000e7bd:	c3                   	ret    
c000e7be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e7c8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e7d2:	eb df                	jmp    c000e7b3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e7d4:	83 ec 0c             	sub    esp,0xc
c000e7d7:	56                   	push   esi
c000e7d8:	e8 65 fa ff ff       	call   c000e242 <Device::getName()>
c000e7dd:	83 c4 10             	add    esp,0x10
c000e7e0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e7e3:	75 b5                	jne    c000e79a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7e5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e7ea:	7f 11                	jg     c000e7fd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e7ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7f0:	0f b6 80 a0 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda460]
c000e7f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7fb:	eb 9d                	jmp    c000e79a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7fd:	83 ec 0c             	sub    esp,0xc
c000e800:	68 69 35 02 c0       	push   0xc0023569
c000e805:	e8 b3 5b 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000e80a:	83 c4 10             	add    esp,0x10
c000e80d:	eb 8b                	jmp    c000e79a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e80f <nmiHandler(regs*, void*)>:
c000e80f:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000e814:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e818:	e9 71 a9 ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e81d <int_handler>:
c000e81d:	55                   	push   ebp
c000e81e:	57                   	push   edi
c000e81f:	56                   	push   esi
c000e820:	53                   	push   ebx
c000e821:	83 ec 0c             	sub    esp,0xc
c000e824:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e828:	80 3d 84 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f84,0x0
c000e82f:	74 0b                	je     c000e83c <int_handler+0x1f>
c000e831:	fa                   	cli    
c000e832:	f4                   	hlt    
c000e833:	80 3d 84 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f84,0x0
c000e83a:	75 f5                	jne    c000e831 <int_handler+0x14>
c000e83c:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000e841:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e844:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e84a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e850:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e853:	83 f8 17             	cmp    eax,0x17
c000e856:	77 13                	ja     c000e86b <int_handler+0x4e>
c000e858:	83 ec 08             	sub    esp,0x8
c000e85b:	8b 17                	mov    edx,DWORD PTR [edi]
c000e85d:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e860:	0f b6 c0             	movzx  eax,al
c000e863:	50                   	push   eax
c000e864:	57                   	push   edi
c000e865:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	83 c3 15             	add    ebx,0x15
c000e86e:	c1 e3 04             	shl    ebx,0x4
c000e871:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e875:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e87c:	31 db                	xor    ebx,ebx
c000e87e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e882:	85 c0                	test   eax,eax
c000e884:	74 13                	je     c000e899 <int_handler+0x7c>
c000e886:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e889:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e88d:	74 1c                	je     c000e8ab <int_handler+0x8e>
c000e88f:	83 ec 08             	sub    esp,0x8
c000e892:	52                   	push   edx
c000e893:	56                   	push   esi
c000e894:	ff d0                	call   eax
c000e896:	83 c4 10             	add    esp,0x10
c000e899:	43                   	inc    ebx
c000e89a:	83 fb 04             	cmp    ebx,0x4
c000e89d:	75 df                	jne    c000e87e <int_handler+0x61>
c000e89f:	83 c4 0c             	add    esp,0xc
c000e8a2:	31 c0                	xor    eax,eax
c000e8a4:	5b                   	pop    ebx
c000e8a5:	31 d2                	xor    edx,edx
c000e8a7:	5e                   	pop    esi
c000e8a8:	5f                   	pop    edi
c000e8a9:	5d                   	pop    ebp
c000e8aa:	c3                   	ret    
c000e8ab:	83 ec 08             	sub    esp,0x8
c000e8ae:	52                   	push   edx
c000e8af:	56                   	push   esi
c000e8b0:	ff d0                	call   eax
c000e8b2:	83 c4 10             	add    esp,0x10
c000e8b5:	83 c4 0c             	add    esp,0xc
c000e8b8:	5b                   	pop    ebx
c000e8b9:	5e                   	pop    esi
c000e8ba:	5f                   	pop    edi
c000e8bb:	5d                   	pop    ebp
c000e8bc:	c3                   	ret    
c000e8bd:	90                   	nop

c000e8be <InterruptController::InterruptController(char const*)>:
c000e8be:	83 ec 1c             	sub    esp,0x1c
c000e8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c5:	83 ec 08             	sub    esp,0x8
c000e8c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e8cc:	50                   	push   eax
c000e8cd:	e8 74 f8 ff ff       	call   c000e146 <Device::Device(char const*)>
c000e8d2:	83 c4 10             	add    esp,0x10
c000e8d5:	ba 20 38 02 c0       	mov    edx,0xc0023820
c000e8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8de:	89 10                	mov    DWORD PTR [eax],edx
c000e8e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8e4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e8ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e8f6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e8fe:	7f 5e                	jg     c000e95e <InterruptController::InterruptController(char const*)+0xa0>
c000e900:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e908:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e90d:	7f 49                	jg     c000e958 <InterruptController::InterruptController(char const*)+0x9a>
c000e90f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e913:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e917:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e91e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e922:	01 ca                	add    edx,ecx
c000e924:	83 c2 54             	add    edx,0x54
c000e927:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e92f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e933:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e937:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e93e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e942:	01 ca                	add    edx,ecx
c000e944:	81 c2 54 04 00 00    	add    edx,0x454
c000e94a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e952:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e956:	eb b0                	jmp    c000e908 <InterruptController::InterruptController(char const*)+0x4a>
c000e958:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e95c:	eb 98                	jmp    c000e8f6 <InterruptController::InterruptController(char const*)+0x38>
c000e95e:	90                   	nop
c000e95f:	83 c4 1c             	add    esp,0x1c
c000e962:	c3                   	ret    
c000e963:	90                   	nop

c000e964 <InterruptController::~InterruptController()>:
c000e964:	83 ec 0c             	sub    esp,0xc
c000e967:	ba 20 38 02 c0       	mov    edx,0xc0023820
c000e96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e970:	89 10                	mov    DWORD PTR [eax],edx
c000e972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e976:	83 ec 0c             	sub    esp,0xc
c000e979:	50                   	push   eax
c000e97a:	e8 91 f4 ff ff       	call   c000de10 <Device::~Device()>
c000e97f:	83 c4 10             	add    esp,0x10
c000e982:	90                   	nop
c000e983:	83 c4 0c             	add    esp,0xc
c000e986:	c3                   	ret    
c000e987:	90                   	nop

c000e988 <InterruptController::~InterruptController()>:
c000e988:	83 ec 0c             	sub    esp,0xc
c000e98b:	83 ec 0c             	sub    esp,0xc
c000e98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e992:	e8 cd ff ff ff       	call   c000e964 <InterruptController::~InterruptController()>
c000e997:	83 c4 10             	add    esp,0x10
c000e99a:	83 ec 08             	sub    esp,0x8
c000e99d:	68 58 21 00 00       	push   0x2158
c000e9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a6:	e8 6f e0 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000e9ab:	83 c4 10             	add    esp,0x10
c000e9ae:	83 c4 0c             	add    esp,0xc
c000e9b1:	c3                   	ret    

c000e9b2 <displayDebugInfo(regs*)>:
c000e9b2:	55                   	push   ebp
c000e9b3:	57                   	push   edi
c000e9b4:	56                   	push   esi
c000e9b5:	53                   	push   ebx
c000e9b6:	83 ec 24             	sub    esp,0x24
c000e9b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9bd:	0f 20 c2             	mov    edx,cr0
c000e9c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e9c4:	0f 20 d7             	mov    edi,cr2
c000e9c7:	0f 20 de             	mov    esi,cr3
c000e9ca:	0f 20 e5             	mov    ebp,cr4
c000e9cd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e9d0:	68 76 35 02 c0       	push   0xc0023576
c000e9d5:	e8 21 e1 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000e9da:	59                   	pop    ecx
c000e9db:	58                   	pop    eax
c000e9dc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e9df:	68 81 35 02 c0       	push   0xc0023581
c000e9e4:	e8 12 e1 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000e9e9:	58                   	pop    eax
c000e9ea:	5a                   	pop    edx
c000e9eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e9ee:	68 8c 35 02 c0       	push   0xc002358c
c000e9f3:	e8 03 e1 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000e9f8:	59                   	pop    ecx
c000e9f9:	58                   	pop    eax
c000e9fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e9fd:	68 97 35 02 c0       	push   0xc0023597
c000ea02:	e8 f4 e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea07:	58                   	pop    eax
c000ea08:	5a                   	pop    edx
c000ea09:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ea0c:	68 a2 35 02 c0       	push   0xc00235a2
c000ea11:	e8 e5 e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea16:	59                   	pop    ecx
c000ea17:	58                   	pop    eax
c000ea18:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ea1b:	68 ad 35 02 c0       	push   0xc00235ad
c000ea20:	e8 d6 e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea25:	58                   	pop    eax
c000ea26:	5a                   	pop    edx
c000ea27:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ea2a:	68 b8 35 02 c0       	push   0xc00235b8
c000ea2f:	e8 c7 e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea34:	59                   	pop    ecx
c000ea35:	58                   	pop    eax
c000ea36:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ea39:	68 c3 35 02 c0       	push   0xc00235c3
c000ea3e:	e8 b8 e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea43:	58                   	pop    eax
c000ea44:	5a                   	pop    edx
c000ea45:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ea48:	68 ce 35 02 c0       	push   0xc00235ce
c000ea4d:	e8 a9 e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea52:	59                   	pop    ecx
c000ea53:	58                   	pop    eax
c000ea54:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea57:	68 dd 35 02 c0       	push   0xc00235dd
c000ea5c:	e8 9a e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea61:	58                   	pop    eax
c000ea62:	5a                   	pop    edx
c000ea63:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ea66:	68 e8 35 02 c0       	push   0xc00235e8
c000ea6b:	e8 8b e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea70:	59                   	pop    ecx
c000ea71:	58                   	pop    eax
c000ea72:	57                   	push   edi
c000ea73:	68 f3 35 02 c0       	push   0xc00235f3
c000ea78:	e8 7e e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea7d:	58                   	pop    eax
c000ea7e:	5a                   	pop    edx
c000ea7f:	56                   	push   esi
c000ea80:	68 fe 35 02 c0       	push   0xc00235fe
c000ea85:	e8 71 e0 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ea8a:	59                   	pop    ecx
c000ea8b:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ea90:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea96:	e8 be bd ff ff       	call   c000a859 <setActiveTerminal(VgaText*)>
c000ea9b:	58                   	pop    eax
c000ea9c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea9f:	5a                   	pop    edx
c000eaa0:	c1 e0 05             	shl    eax,0x5
c000eaa3:	05 00 59 02 c0       	add    eax,0xc0025900
c000eaa8:	50                   	push   eax
c000eaa9:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eaae:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eab4:	e8 ad c2 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000eab9:	59                   	pop    ecx
c000eaba:	58                   	pop    eax
c000eabb:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eac0:	68 09 36 02 c0       	push   0xc0023609
c000eac5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eacb:	e8 96 c2 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ead0:	58                   	pop    eax
c000ead1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ead6:	5a                   	pop    edx
c000ead7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eada:	83 c0 0c             	add    eax,0xc
c000eadd:	50                   	push   eax
c000eade:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eae3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eae9:	e8 78 c2 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000eaee:	59                   	pop    ecx
c000eaef:	58                   	pop    eax
c000eaf0:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eaf5:	68 12 36 02 c0       	push   0xc0023612
c000eafa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb00:	e8 61 c2 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000eb05:	58                   	pop    eax
c000eb06:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eb0b:	5a                   	pop    edx
c000eb0c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eb0f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb15:	e8 06 c2 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000eb1a:	59                   	pop    ecx
c000eb1b:	58                   	pop    eax
c000eb1c:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eb21:	68 1a 36 02 c0       	push   0xc002361a
c000eb26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb2c:	e8 35 c2 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000eb31:	58                   	pop    eax
c000eb32:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eb37:	5a                   	pop    edx
c000eb38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eb3b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb41:	e8 da c1 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000eb46:	59                   	pop    ecx
c000eb47:	58                   	pop    eax
c000eb48:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eb4d:	68 22 36 02 c0       	push   0xc0023622
c000eb52:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb58:	e8 09 c2 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000eb5d:	58                   	pop    eax
c000eb5e:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eb63:	5a                   	pop    edx
c000eb64:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eb67:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb6d:	e8 ae c1 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000eb72:	59                   	pop    ecx
c000eb73:	58                   	pop    eax
c000eb74:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eb79:	68 2a 36 02 c0       	push   0xc002362a
c000eb7e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb84:	e8 dd c1 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000eb89:	58                   	pop    eax
c000eb8a:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eb8f:	5a                   	pop    edx
c000eb90:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eb93:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb99:	e8 82 c1 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000eb9e:	59                   	pop    ecx
c000eb9f:	58                   	pop    eax
c000eba0:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eba5:	68 32 36 02 c0       	push   0xc0023632
c000ebaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebb0:	e8 b1 c1 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ebb5:	58                   	pop    eax
c000ebb6:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ebbb:	5a                   	pop    edx
c000ebbc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ebbf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebc5:	e8 56 c1 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ebca:	59                   	pop    ecx
c000ebcb:	58                   	pop    eax
c000ebcc:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ebd1:	68 3a 36 02 c0       	push   0xc002363a
c000ebd6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebdc:	e8 85 c1 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ebe1:	58                   	pop    eax
c000ebe2:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ebe7:	5a                   	pop    edx
c000ebe8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ebeb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebf1:	e8 2a c1 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ebf6:	59                   	pop    ecx
c000ebf7:	58                   	pop    eax
c000ebf8:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ebfd:	68 42 36 02 c0       	push   0xc0023642
c000ec02:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec08:	e8 59 c1 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ec0d:	58                   	pop    eax
c000ec0e:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ec13:	5a                   	pop    edx
c000ec14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ec18:	52                   	push   edx
c000ec19:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec1f:	e8 fc c0 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ec24:	59                   	pop    ecx
c000ec25:	58                   	pop    eax
c000ec26:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ec2b:	68 4b 36 02 c0       	push   0xc002364b
c000ec30:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec36:	e8 2b c1 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ec3b:	58                   	pop    eax
c000ec3c:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ec41:	5a                   	pop    edx
c000ec42:	57                   	push   edi
c000ec43:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec49:	e8 d2 c0 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ec4e:	59                   	pop    ecx
c000ec4f:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ec54:	5f                   	pop    edi
c000ec55:	68 53 36 02 c0       	push   0xc0023653
c000ec5a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec60:	e8 01 c1 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ec65:	58                   	pop    eax
c000ec66:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ec6b:	5a                   	pop    edx
c000ec6c:	56                   	push   esi
c000ec6d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec73:	e8 a8 c0 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ec78:	59                   	pop    ecx
c000ec79:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ec7e:	5e                   	pop    esi
c000ec7f:	68 5b 36 02 c0       	push   0xc002365b
c000ec84:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec8a:	e8 d7 c0 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ec8f:	5f                   	pop    edi
c000ec90:	58                   	pop    eax
c000ec91:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ec96:	55                   	push   ebp
c000ec97:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec9d:	e8 7e c0 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000eca2:	58                   	pop    eax
c000eca3:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eca8:	5a                   	pop    edx
c000eca9:	68 63 36 02 c0       	push   0xc0023663
c000ecae:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecb4:	e8 ad c0 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ecb9:	0f 21 c0             	mov    eax,db0
c000ecbc:	59                   	pop    ecx
c000ecbd:	5e                   	pop    esi
c000ecbe:	50                   	push   eax
c000ecbf:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ecc4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecca:	e8 51 c0 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000eccf:	5f                   	pop    edi
c000ecd0:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ecd5:	5d                   	pop    ebp
c000ecd6:	68 6c 36 02 c0       	push   0xc002366c
c000ecdb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ece1:	e8 80 c0 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ece6:	0f 21 c8             	mov    eax,db1
c000ece9:	5a                   	pop    edx
c000ecea:	59                   	pop    ecx
c000eceb:	50                   	push   eax
c000ecec:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ecf1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf7:	e8 24 c0 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ecfc:	5e                   	pop    esi
c000ecfd:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ed02:	5f                   	pop    edi
c000ed03:	68 74 36 02 c0       	push   0xc0023674
c000ed08:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed0e:	e8 53 c0 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ed13:	0f 21 d0             	mov    eax,db2
c000ed16:	5d                   	pop    ebp
c000ed17:	5a                   	pop    edx
c000ed18:	50                   	push   eax
c000ed19:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ed1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed24:	e8 f7 bf ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ed29:	59                   	pop    ecx
c000ed2a:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ed2f:	5e                   	pop    esi
c000ed30:	68 7c 36 02 c0       	push   0xc002367c
c000ed35:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed3b:	e8 26 c0 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ed40:	0f 21 d8             	mov    eax,db3
c000ed43:	5f                   	pop    edi
c000ed44:	5d                   	pop    ebp
c000ed45:	50                   	push   eax
c000ed46:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ed4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed51:	e8 ca bf ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ed56:	58                   	pop    eax
c000ed57:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ed5c:	5a                   	pop    edx
c000ed5d:	68 84 36 02 c0       	push   0xc0023684
c000ed62:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed68:	e8 f9 bf ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ed6d:	0f 21 f0             	mov    eax,db6
c000ed70:	59                   	pop    ecx
c000ed71:	5e                   	pop    esi
c000ed72:	50                   	push   eax
c000ed73:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ed78:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed7e:	e8 9d bf ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ed83:	5f                   	pop    edi
c000ed84:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ed89:	5d                   	pop    ebp
c000ed8a:	68 8c 36 02 c0       	push   0xc002368c
c000ed8f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed95:	e8 cc bf ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ed9a:	0f 21 f8             	mov    eax,db7
c000ed9d:	5a                   	pop    edx
c000ed9e:	59                   	pop    ecx
c000ed9f:	50                   	push   eax
c000eda0:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000eda5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edab:	e8 70 bf ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000edb0:	5e                   	pop    esi
c000edb1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000edb4:	e8 a0 87 00 00       	call   c0017559 <Thr::getDriverNameFromAddress(unsigned long)>
c000edb9:	83 c4 10             	add    esp,0x10
c000edbc:	85 c0                	test   eax,eax
c000edbe:	74 7d                	je     c000ee3d <displayDebugInfo(regs*)+0x48b>
c000edc0:	89 c6                	mov    esi,eax
c000edc2:	50                   	push   eax
c000edc3:	50                   	push   eax
c000edc4:	56                   	push   esi
c000edc5:	68 94 36 02 c0       	push   0xc0023694
c000edca:	e8 2c dd ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000edcf:	5a                   	pop    edx
c000edd0:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000edd5:	59                   	pop    ecx
c000edd6:	68 a2 36 02 c0       	push   0xc00236a2
c000eddb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ede1:	e8 80 bf ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ede6:	5f                   	pop    edi
c000ede7:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000edec:	5d                   	pop    ebp
c000eded:	56                   	push   esi
c000edee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edf4:	e8 6d bf ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000edf9:	58                   	pop    eax
c000edfa:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000edff:	5a                   	pop    edx
c000ee00:	68 ae 36 02 c0       	push   0xc00236ae
c000ee05:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee0b:	e8 56 bf ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c000ee10:	59                   	pop    ecx
c000ee11:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000ee16:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ee1c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee1f:	e8 6c 87 00 00       	call   c0017590 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ee24:	5b                   	pop    ebx
c000ee25:	5d                   	pop    ebp
c000ee26:	50                   	push   eax
c000ee27:	57                   	push   edi
c000ee28:	e8 f3 be ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c000ee2d:	58                   	pop    eax
c000ee2e:	5a                   	pop    edx
c000ee2f:	56                   	push   esi
c000ee30:	68 ba 36 02 c0       	push   0xc00236ba
c000ee35:	e8 c1 dc ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ee3a:	83 c4 10             	add    esp,0x10
c000ee3d:	fa                   	cli    
c000ee3e:	f4                   	hlt    
c000ee3f:	eb fe                	jmp    c000ee3f <displayDebugInfo(regs*)+0x48d>

c000ee41 <x87EmulHandler(regs*, void*)>:
c000ee41:	83 ec 0c             	sub    esp,0xc
c000ee44:	0f 20 c2             	mov    edx,cr0
c000ee47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee4c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000ee50:	75 4b                	jne    c000ee9d <x87EmulHandler(regs*, void*)+0x5c>
c000ee52:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000ee57:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000ee5d:	85 c0                	test   eax,eax
c000ee5f:	74 05                	je     c000ee66 <x87EmulHandler(regs*, void*)+0x25>
c000ee61:	83 e2 08             	and    edx,0x8
c000ee64:	75 17                	jne    c000ee7d <x87EmulHandler(regs*, void*)+0x3c>
c000ee66:	83 ec 0c             	sub    esp,0xc
c000ee69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee6d:	e8 94 ab 00 00       	call   c0019a06 <Vm::x87Handler(regs*)>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	84 c0                	test   al,al
c000ee77:	74 24                	je     c000ee9d <x87EmulHandler(regs*, void*)+0x5c>
c000ee79:	83 c4 0c             	add    esp,0xc
c000ee7c:	c3                   	ret    
c000ee7d:	83 ec 0c             	sub    esp,0xc
c000ee80:	68 e0 36 02 c0       	push   0xc00236e0
c000ee85:	e8 71 dc ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ee8a:	0f 06                	clts   
c000ee8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	a3 e8 65 02 c0       	mov    ds:0xc00265e8,eax
c000ee99:	83 c4 0c             	add    esp,0xc
c000ee9c:	c3                   	ret    
c000ee9d:	83 ec 0c             	sub    esp,0xc
c000eea0:	68 ca 36 02 c0       	push   0xc00236ca
c000eea5:	e8 51 dc ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000eeaa:	5a                   	pop    edx
c000eeab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eeaf:	e8 fe fa ff ff       	call   c000e9b2 <displayDebugInfo(regs*)>

c000eeb4 <gpFault(regs*, void*)>:
c000eeb4:	53                   	push   ebx
c000eeb5:	83 ec 14             	sub    esp,0x14
c000eeb8:	c7 05 e4 65 02 c0 c2 8e 01 c0 	mov    DWORD PTR ds:0xc00265e4,0xc0018ec2
c000eec2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eec6:	53                   	push   ebx
c000eec7:	e8 f6 9f 00 00       	call   c0018ec2 <Vm::faultHandler(regs*)>
c000eecc:	83 c4 10             	add    esp,0x10
c000eecf:	84 c0                	test   al,al
c000eed1:	74 05                	je     c000eed8 <gpFault(regs*, void*)+0x24>
c000eed3:	83 c4 08             	add    esp,0x8
c000eed6:	5b                   	pop    ebx
c000eed7:	c3                   	ret    
c000eed8:	83 ec 0c             	sub    esp,0xc
c000eedb:	68 ed 36 02 c0       	push   0xc00236ed
c000eee0:	e8 16 dc ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000eee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eee8:	e8 c5 fa ff ff       	call   c000e9b2 <displayDebugInfo(regs*)>

c000eeed <pgFault(regs*, void*)>:
c000eeed:	53                   	push   ebx
c000eeee:	83 ec 10             	sub    esp,0x10
c000eef1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eef5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eef8:	68 08 37 02 c0       	push   0xc0023708
c000eefd:	e8 f9 db ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ef02:	0f 20 d0             	mov    eax,cr2
c000ef05:	5a                   	pop    edx
c000ef06:	59                   	pop    ecx
c000ef07:	50                   	push   eax
c000ef08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ef10:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ef16:	e8 e7 d6 ff ff       	call   c000c602 <VAS::tryLoadBackOffDisk(unsigned long)>
c000ef1b:	83 c4 10             	add    esp,0x10
c000ef1e:	84 c0                	test   al,al
c000ef20:	74 05                	je     c000ef27 <pgFault(regs*, void*)+0x3a>
c000ef22:	83 c4 08             	add    esp,0x8
c000ef25:	5b                   	pop    ebx
c000ef26:	c3                   	ret    
c000ef27:	83 ec 0c             	sub    esp,0xc
c000ef2a:	68 1d 37 02 c0       	push   0xc002371d
c000ef2f:	e8 c7 db ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ef34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef37:	e8 76 fa ff ff       	call   c000e9b2 <displayDebugInfo(regs*)>

c000ef3c <otherISRHandler(regs*, void*)>:
c000ef3c:	53                   	push   ebx
c000ef3d:	83 ec 0c             	sub    esp,0xc
c000ef40:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ef44:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ef47:	50                   	push   eax
c000ef48:	50                   	push   eax
c000ef49:	68 2a 37 02 c0       	push   0xc002372a
c000ef4e:	e8 a8 db ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ef53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef56:	e8 57 fa ff ff       	call   c000e9b2 <displayDebugInfo(regs*)>

c000ef5b <opcodeFault(regs*, void*)>:
c000ef5b:	55                   	push   ebp
c000ef5c:	89 e5                	mov    ebp,esp
c000ef5e:	56                   	push   esi
c000ef5f:	53                   	push   ebx
c000ef60:	83 ec 30             	sub    esp,0x30
c000ef63:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000ef68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ef6e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000ef74:	84 c0                	test   al,al
c000ef76:	74 24                	je     c000ef9c <opcodeFault(regs*, void*)+0x41>
c000ef78:	83 ec 0c             	sub    esp,0xc
c000ef7b:	68 48 37 02 c0       	push   0xc0023748
c000ef80:	e8 76 db ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000ef85:	83 c4 10             	add    esp,0x10
c000ef88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef8b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef8e:	8d 50 19             	lea    edx,[eax+0x19]
c000ef91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef94:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef97:	e9 7b 03 00 00       	jmp    c000f317 <opcodeFault(regs*, void*)+0x3bc>
c000ef9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efa2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000efa5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000efa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efaf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000efb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb5:	8a 00                	mov    al,BYTE PTR [eax]
c000efb7:	3c f0                	cmp    al,0xf0
c000efb9:	75 17                	jne    c000efd2 <opcodeFault(regs*, void*)+0x77>
c000efbb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efc1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efc4:	8d 50 01             	lea    edx,[eax+0x1]
c000efc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efcd:	e9 d6 00 00 00       	jmp    c000f0a8 <opcodeFault(regs*, void*)+0x14d>
c000efd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efd5:	8a 00                	mov    al,BYTE PTR [eax]
c000efd7:	3c f2                	cmp    al,0xf2
c000efd9:	74 09                	je     c000efe4 <opcodeFault(regs*, void*)+0x89>
c000efdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efde:	8a 00                	mov    al,BYTE PTR [eax]
c000efe0:	3c f3                	cmp    al,0xf3
c000efe2:	75 1b                	jne    c000efff <opcodeFault(regs*, void*)+0xa4>
c000efe4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efe8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eff1:	8d 50 01             	lea    edx,[eax+0x1]
c000eff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000effa:	e9 a9 00 00 00       	jmp    c000f0a8 <opcodeFault(regs*, void*)+0x14d>
c000efff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f002:	8a 00                	mov    al,BYTE PTR [eax]
c000f004:	3c 66                	cmp    al,0x66
c000f006:	75 1b                	jne    c000f023 <opcodeFault(regs*, void*)+0xc8>
c000f008:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f00c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f00f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f012:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f015:	8d 50 01             	lea    edx,[eax+0x1]
c000f018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f01b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f01e:	e9 85 00 00 00       	jmp    c000f0a8 <opcodeFault(regs*, void*)+0x14d>
c000f023:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f026:	8a 00                	mov    al,BYTE PTR [eax]
c000f028:	3c 67                	cmp    al,0x67
c000f02a:	75 18                	jne    c000f044 <opcodeFault(regs*, void*)+0xe9>
c000f02c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f030:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f036:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f039:	8d 50 01             	lea    edx,[eax+0x1]
c000f03c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f03f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f042:	eb 64                	jmp    c000f0a8 <opcodeFault(regs*, void*)+0x14d>
c000f044:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f047:	8a 00                	mov    al,BYTE PTR [eax]
c000f049:	3c 2e                	cmp    al,0x2e
c000f04b:	74 09                	je     c000f056 <opcodeFault(regs*, void*)+0xfb>
c000f04d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f050:	8a 00                	mov    al,BYTE PTR [eax]
c000f052:	3c 3e                	cmp    al,0x3e
c000f054:	75 18                	jne    c000f06e <opcodeFault(regs*, void*)+0x113>
c000f056:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f05a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f05d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f060:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f063:	8d 50 01             	lea    edx,[eax+0x1]
c000f066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f069:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f06c:	eb 3a                	jmp    c000f0a8 <opcodeFault(regs*, void*)+0x14d>
c000f06e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f071:	8a 00                	mov    al,BYTE PTR [eax]
c000f073:	3c 36                	cmp    al,0x36
c000f075:	74 1b                	je     c000f092 <opcodeFault(regs*, void*)+0x137>
c000f077:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f07a:	8a 00                	mov    al,BYTE PTR [eax]
c000f07c:	3c 26                	cmp    al,0x26
c000f07e:	74 12                	je     c000f092 <opcodeFault(regs*, void*)+0x137>
c000f080:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f083:	8a 00                	mov    al,BYTE PTR [eax]
c000f085:	3c 64                	cmp    al,0x64
c000f087:	74 09                	je     c000f092 <opcodeFault(regs*, void*)+0x137>
c000f089:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f08c:	8a 00                	mov    al,BYTE PTR [eax]
c000f08e:	3c 65                	cmp    al,0x65
c000f090:	75 16                	jne    c000f0a8 <opcodeFault(regs*, void*)+0x14d>
c000f092:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f096:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f09c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f09f:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f0a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f0ab:	8a 00                	mov    al,BYTE PTR [eax]
c000f0ad:	3c 0f                	cmp    al,0xf
c000f0af:	0f 85 8d 01 00 00    	jne    c000f242 <opcodeFault(regs*, void*)+0x2e7>
c000f0b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f0b8:	40                   	inc    eax
c000f0b9:	8a 00                	mov    al,BYTE PTR [eax]
c000f0bb:	3c c7                	cmp    al,0xc7
c000f0bd:	0f 85 7f 01 00 00    	jne    c000f242 <opcodeFault(regs*, void*)+0x2e7>
c000f0c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f0c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f0cc:	8d 50 01             	lea    edx,[eax+0x1]
c000f0cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f0d5:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f0d8:	50                   	push   eax
c000f0d9:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f0dc:	50                   	push   eax
c000f0dd:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f0e0:	50                   	push   eax
c000f0e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f0e4:	e8 ed 49 00 00       	call   c0013ad6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f0e9:	83 c4 10             	add    esp,0x10
c000f0ec:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f0ef:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f0f2:	83 f0 01             	xor    eax,0x1
c000f0f5:	84 c0                	test   al,al
c000f0f7:	0f 84 45 01 00 00    	je     c000f242 <opcodeFault(regs*, void*)+0x2e7>
c000f0fd:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f100:	3c 01                	cmp    al,0x1
c000f102:	0f 85 3a 01 00 00    	jne    c000f242 <opcodeFault(regs*, void*)+0x2e7>
c000f108:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f10b:	83 f0 01             	xor    eax,0x1
c000f10e:	84 c0                	test   al,al
c000f110:	0f 84 2c 01 00 00    	je     c000f242 <opcodeFault(regs*, void*)+0x2e7>
c000f116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f119:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f11c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f11f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f126:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f129:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f12c:	89 c2                	mov    edx,eax
c000f12e:	b8 00 00 00 00       	mov    eax,0x0
c000f133:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f136:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f13c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f13f:	ba 00 00 00 00       	mov    edx,0x0
c000f144:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f147:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f14a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f14d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f150:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f153:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f15a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f15d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f160:	89 c2                	mov    edx,eax
c000f162:	b8 00 00 00 00       	mov    eax,0x0
c000f167:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f16a:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f16d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f170:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f173:	ba 00 00 00 00       	mov    edx,0x0
c000f178:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f17b:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f17e:	fa                   	cli    
c000f17f:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f184:	40                   	inc    eax
c000f185:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000f18a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f18d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f190:	8b 00                	mov    eax,DWORD PTR [eax]
c000f192:	89 c1                	mov    ecx,eax
c000f194:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f197:	89 cb                	mov    ebx,ecx
c000f199:	89 d0                	mov    eax,edx
c000f19b:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f19e:	89 c6                	mov    esi,eax
c000f1a0:	89 f0                	mov    eax,esi
c000f1a2:	09 d8                	or     eax,ebx
c000f1a4:	85 c0                	test   eax,eax
c000f1a6:	75 21                	jne    c000f1c9 <opcodeFault(regs*, void*)+0x26e>
c000f1a8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f1ab:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f1ae:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f1b1:	89 01                	mov    DWORD PTR [ecx],eax
c000f1b3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f1b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1bc:	83 c8 40             	or     eax,0x40
c000f1bf:	89 c2                	mov    edx,eax
c000f1c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f1c7:	eb 3e                	jmp    c000f207 <opcodeFault(regs*, void*)+0x2ac>
c000f1c9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f1cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f1cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f1d4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f1d7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f1da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1dd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f1e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f1e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f1e6:	89 d0                	mov    eax,edx
c000f1e8:	31 d2                	xor    edx,edx
c000f1ea:	89 c3                	mov    ebx,eax
c000f1ec:	89 d6                	mov    esi,edx
c000f1ee:	89 da                	mov    edx,ebx
c000f1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f3:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f1f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1fc:	83 e0 bf             	and    eax,0xffffffbf
c000f1ff:	89 c2                	mov    edx,eax
c000f201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f204:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f207:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f20c:	48                   	dec    eax
c000f20d:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000f212:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f217:	85 c0                	test   eax,eax
c000f219:	75 01                	jne    c000f21c <opcodeFault(regs*, void*)+0x2c1>
c000f21b:	fb                   	sti    
c000f21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f21f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f222:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f225:	01 c2                	add    edx,eax
c000f227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f22d:	83 ec 0c             	sub    esp,0xc
c000f230:	68 6b 37 02 c0       	push   0xc002376b
c000f235:	e8 c1 d8 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000f23a:	83 c4 10             	add    esp,0x10
c000f23d:	e9 d5 00 00 00       	jmp    c000f317 <opcodeFault(regs*, void*)+0x3bc>
c000f242:	83 ec 0c             	sub    esp,0xc
c000f245:	68 7e 37 02 c0       	push   0xc002377e
c000f24a:	e8 ac d8 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000f24f:	83 c4 10             	add    esp,0x10
c000f252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f255:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f25b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f25e:	c1 e0 04             	shl    eax,0x4
c000f261:	01 d0                	add    eax,edx
c000f263:	83 c0 03             	add    eax,0x3
c000f266:	8a 00                	mov    al,BYTE PTR [eax]
c000f268:	0f b6 d8             	movzx  ebx,al
c000f26b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f26e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f274:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f277:	c1 e0 04             	shl    eax,0x4
c000f27a:	01 d0                	add    eax,edx
c000f27c:	83 c0 02             	add    eax,0x2
c000f27f:	8a 00                	mov    al,BYTE PTR [eax]
c000f281:	0f b6 c8             	movzx  ecx,al
c000f284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f287:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f28a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f28d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f290:	c1 e0 04             	shl    eax,0x4
c000f293:	01 d0                	add    eax,edx
c000f295:	40                   	inc    eax
c000f296:	8a 00                	mov    al,BYTE PTR [eax]
c000f298:	0f b6 d0             	movzx  edx,al
c000f29b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29e:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f2a7:	c1 e0 04             	shl    eax,0x4
c000f2aa:	01 f0                	add    eax,esi
c000f2ac:	8a 00                	mov    al,BYTE PTR [eax]
c000f2ae:	0f b6 c0             	movzx  eax,al
c000f2b1:	83 ec 0c             	sub    esp,0xc
c000f2b4:	53                   	push   ebx
c000f2b5:	51                   	push   ecx
c000f2b6:	52                   	push   edx
c000f2b7:	50                   	push   eax
c000f2b8:	68 90 37 02 c0       	push   0xc0023790
c000f2bd:	e8 39 d8 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000f2c2:	83 c4 20             	add    esp,0x20
c000f2c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2cb:	83 c0 03             	add    eax,0x3
c000f2ce:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d0:	0f b6 d8             	movzx  ebx,al
c000f2d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2d9:	83 c0 02             	add    eax,0x2
c000f2dc:	8a 00                	mov    al,BYTE PTR [eax]
c000f2de:	0f b6 c8             	movzx  ecx,al
c000f2e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2e7:	40                   	inc    eax
c000f2e8:	8a 00                	mov    al,BYTE PTR [eax]
c000f2ea:	0f b6 d0             	movzx  edx,al
c000f2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2f3:	8a 00                	mov    al,BYTE PTR [eax]
c000f2f5:	0f b6 c0             	movzx  eax,al
c000f2f8:	83 ec 0c             	sub    esp,0xc
c000f2fb:	53                   	push   ebx
c000f2fc:	51                   	push   ecx
c000f2fd:	52                   	push   edx
c000f2fe:	50                   	push   eax
c000f2ff:	68 b8 37 02 c0       	push   0xc00237b8
c000f304:	e8 f2 d7 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c000f309:	83 c4 20             	add    esp,0x20
c000f30c:	83 ec 0c             	sub    esp,0xc
c000f30f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f312:	e8 9b f6 ff ff       	call   c000e9b2 <displayDebugInfo(regs*)>
c000f317:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f31a:	5b                   	pop    ebx
c000f31b:	5e                   	pop    esi
c000f31c:	5d                   	pop    ebp
c000f31d:	c3                   	ret    

c000f31e <displayProgramFault(char const*)>:
c000f31e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f323:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f326:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f32c:	85 c0                	test   eax,eax
c000f32e:	74 15                	je     c000f345 <displayProgramFault(char const*)+0x27>
c000f330:	83 ec 0c             	sub    esp,0xc
c000f333:	6a 04                	push   0x4
c000f335:	6a 0f                	push   0xf
c000f337:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f33b:	50                   	push   eax
c000f33c:	e8 21 b7 ff ff       	call   c000aa62 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f341:	83 c4 1c             	add    esp,0x1c
c000f344:	c3                   	ret    
c000f345:	c3                   	ret    

c000f346 <setupInterruptController()>:
c000f346:	55                   	push   ebp
c000f347:	89 e5                	mov    ebp,esp
c000f349:	53                   	push   ebx
c000f34a:	83 ec 24             	sub    esp,0x24
c000f34d:	b8 00 00 00 00       	mov    eax,0x0
c000f352:	85 c0                	test   eax,eax
c000f354:	0f 95 c0             	setne  al
c000f357:	84 c0                	test   al,al
c000f359:	74 5b                	je     c000f3b6 <setupInterruptController()+0x70>
c000f35b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f362:	83 ec 0c             	sub    esp,0xc
c000f365:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f368:	e8 56 a6 ff ff       	call   c00099c3 <malloc>
c000f36d:	83 c4 10             	add    esp,0x10
c000f370:	89 c3                	mov    ebx,eax
c000f372:	83 ec 0c             	sub    esp,0xc
c000f375:	53                   	push   ebx
c000f376:	e8 d7 0b 01 00       	call   c001ff52 <APIC::APIC()>
c000f37b:	83 c4 10             	add    esp,0x10
c000f37e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f381:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f384:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f387:	8b 00                	mov    eax,DWORD PTR [eax]
c000f389:	83 c0 08             	add    eax,0x8
c000f38c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38e:	6a 00                	push   0x0
c000f390:	6a 00                	push   0x0
c000f392:	6a 00                	push   0x0
c000f394:	52                   	push   edx
c000f395:	ff d0                	call   eax
c000f397:	83 c4 10             	add    esp,0x10
c000f39a:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000f39f:	83 ec 08             	sub    esp,0x8
c000f3a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f3a5:	50                   	push   eax
c000f3a6:	e8 97 eb ff ff       	call   c000df42 <Device::addChild(Device*)>
c000f3ab:	83 c4 10             	add    esp,0x10
c000f3ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f3b1:	e9 79 03 00 00       	jmp    c000f72f <setupInterruptController()+0x3e9>
c000f3b6:	a0 c0 6d 02 c0       	mov    al,ds:0xc0026dc0
c000f3bb:	84 c0                	test   al,al
c000f3bd:	75 14                	jne    c000f3d3 <setupInterruptController()+0x8d>
c000f3bf:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000f3c4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f3ca:	83 e2 fe             	and    edx,0xfffffffe
c000f3cd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f3d3:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000f3d8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f3de:	83 e0 01             	and    eax,0x1
c000f3e1:	84 c0                	test   al,al
c000f3e3:	0f 95 c0             	setne  al
c000f3e6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f3e9:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f3f0:	83 ec 0c             	sub    esp,0xc
c000f3f3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f3f6:	e8 c8 a5 ff ff       	call   c00099c3 <malloc>
c000f3fb:	83 c4 10             	add    esp,0x10
c000f3fe:	89 c3                	mov    ebx,eax
c000f400:	83 ec 0c             	sub    esp,0xc
c000f403:	53                   	push   ebx
c000f404:	e8 a1 10 01 00       	call   c00204aa <PIC::PIC()>
c000f409:	83 c4 10             	add    esp,0x10
c000f40c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f40f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f415:	8b 00                	mov    eax,DWORD PTR [eax]
c000f417:	83 c0 08             	add    eax,0x8
c000f41a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f41c:	6a 00                	push   0x0
c000f41e:	6a 00                	push   0x0
c000f420:	6a 00                	push   0x0
c000f422:	52                   	push   edx
c000f423:	ff d0                	call   eax
c000f425:	83 c4 10             	add    esp,0x10
c000f428:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f42c:	74 73                	je     c000f4a1 <setupInterruptController()+0x15b>
c000f42e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f434:	8b 00                	mov    eax,DWORD PTR [eax]
c000f436:	83 c0 0c             	add    eax,0xc
c000f439:	8b 00                	mov    eax,DWORD PTR [eax]
c000f43b:	6a 00                	push   0x0
c000f43d:	6a 00                	push   0x0
c000f43f:	6a 00                	push   0x0
c000f441:	52                   	push   edx
c000f442:	ff d0                	call   eax
c000f444:	83 c4 10             	add    esp,0x10
c000f447:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f44b:	74 15                	je     c000f462 <setupInterruptController()+0x11c>
c000f44d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f450:	8b 00                	mov    eax,DWORD PTR [eax]
c000f452:	83 c0 04             	add    eax,0x4
c000f455:	8b 00                	mov    eax,DWORD PTR [eax]
c000f457:	83 ec 0c             	sub    esp,0xc
c000f45a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f45d:	ff d0                	call   eax
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f469:	83 ec 0c             	sub    esp,0xc
c000f46c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f46f:	e8 4f a5 ff ff       	call   c00099c3 <malloc>
c000f474:	83 c4 10             	add    esp,0x10
c000f477:	89 c3                	mov    ebx,eax
c000f479:	83 ec 0c             	sub    esp,0xc
c000f47c:	53                   	push   ebx
c000f47d:	e8 d0 0a 01 00       	call   c001ff52 <APIC::APIC()>
c000f482:	83 c4 10             	add    esp,0x10
c000f485:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f488:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f48b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f48e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f490:	83 c0 08             	add    eax,0x8
c000f493:	8b 00                	mov    eax,DWORD PTR [eax]
c000f495:	6a 00                	push   0x0
c000f497:	6a 00                	push   0x0
c000f499:	6a 00                	push   0x0
c000f49b:	52                   	push   edx
c000f49c:	ff d0                	call   eax
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000f4a6:	83 ec 08             	sub    esp,0x8
c000f4a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4ac:	50                   	push   eax
c000f4ad:	e8 90 ea ff ff       	call   c000df42 <Device::addChild(Device*)>
c000f4b2:	83 c4 10             	add    esp,0x10
c000f4b5:	c7 05 e8 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265e8,0x0
c000f4bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c4:	83 c0 24             	add    eax,0x24
c000f4c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c9:	6a 00                	push   0x0
c000f4cb:	68 3c ef 00 c0       	push   0xc000ef3c
c000f4d0:	6a 00                	push   0x0
c000f4d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4d5:	ff d0                	call   eax
c000f4d7:	83 c4 10             	add    esp,0x10
c000f4da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4df:	83 c0 24             	add    eax,0x24
c000f4e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e4:	6a 00                	push   0x0
c000f4e6:	68 3c ef 00 c0       	push   0xc000ef3c
c000f4eb:	6a 01                	push   0x1
c000f4ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4f0:	ff d0                	call   eax
c000f4f2:	83 c4 10             	add    esp,0x10
c000f4f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4fa:	83 c0 24             	add    eax,0x24
c000f4fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ff:	6a 00                	push   0x0
c000f501:	68 0f e8 00 c0       	push   0xc000e80f
c000f506:	6a 02                	push   0x2
c000f508:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f50b:	ff d0                	call   eax
c000f50d:	83 c4 10             	add    esp,0x10
c000f510:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f513:	8b 00                	mov    eax,DWORD PTR [eax]
c000f515:	83 c0 24             	add    eax,0x24
c000f518:	8b 00                	mov    eax,DWORD PTR [eax]
c000f51a:	6a 00                	push   0x0
c000f51c:	68 3c ef 00 c0       	push   0xc000ef3c
c000f521:	6a 03                	push   0x3
c000f523:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f526:	ff d0                	call   eax
c000f528:	83 c4 10             	add    esp,0x10
c000f52b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f52e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f530:	83 c0 24             	add    eax,0x24
c000f533:	8b 00                	mov    eax,DWORD PTR [eax]
c000f535:	6a 00                	push   0x0
c000f537:	68 3c ef 00 c0       	push   0xc000ef3c
c000f53c:	6a 04                	push   0x4
c000f53e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f541:	ff d0                	call   eax
c000f543:	83 c4 10             	add    esp,0x10
c000f546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f549:	8b 00                	mov    eax,DWORD PTR [eax]
c000f54b:	83 c0 24             	add    eax,0x24
c000f54e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f550:	6a 00                	push   0x0
c000f552:	68 3c ef 00 c0       	push   0xc000ef3c
c000f557:	6a 05                	push   0x5
c000f559:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f55c:	ff d0                	call   eax
c000f55e:	83 c4 10             	add    esp,0x10
c000f561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f564:	8b 00                	mov    eax,DWORD PTR [eax]
c000f566:	83 c0 24             	add    eax,0x24
c000f569:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56b:	6a 00                	push   0x0
c000f56d:	68 5b ef 00 c0       	push   0xc000ef5b
c000f572:	6a 06                	push   0x6
c000f574:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f577:	ff d0                	call   eax
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f57f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f581:	83 c0 24             	add    eax,0x24
c000f584:	8b 00                	mov    eax,DWORD PTR [eax]
c000f586:	6a 00                	push   0x0
c000f588:	68 41 ee 00 c0       	push   0xc000ee41
c000f58d:	6a 07                	push   0x7
c000f58f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f592:	ff d0                	call   eax
c000f594:	83 c4 10             	add    esp,0x10
c000f597:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f59a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59c:	83 c0 24             	add    eax,0x24
c000f59f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a1:	6a 00                	push   0x0
c000f5a3:	68 2a e6 00 c0       	push   0xc000e62a
c000f5a8:	6a 08                	push   0x8
c000f5aa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5ad:	ff d0                	call   eax
c000f5af:	83 c4 10             	add    esp,0x10
c000f5b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b7:	83 c0 24             	add    eax,0x24
c000f5ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 3c ef 00 c0       	push   0xc000ef3c
c000f5c3:	6a 09                	push   0x9
c000f5c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5c8:	ff d0                	call   eax
c000f5ca:	83 c4 10             	add    esp,0x10
c000f5cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d2:	83 c0 24             	add    eax,0x24
c000f5d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d7:	6a 00                	push   0x0
c000f5d9:	68 3c ef 00 c0       	push   0xc000ef3c
c000f5de:	6a 0a                	push   0xa
c000f5e0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5e3:	ff d0                	call   eax
c000f5e5:	83 c4 10             	add    esp,0x10
c000f5e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ed:	83 c0 24             	add    eax,0x24
c000f5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f2:	6a 00                	push   0x0
c000f5f4:	68 3c ef 00 c0       	push   0xc000ef3c
c000f5f9:	6a 0b                	push   0xb
c000f5fb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5fe:	ff d0                	call   eax
c000f600:	83 c4 10             	add    esp,0x10
c000f603:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f606:	8b 00                	mov    eax,DWORD PTR [eax]
c000f608:	83 c0 24             	add    eax,0x24
c000f60b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60d:	6a 00                	push   0x0
c000f60f:	68 3c ef 00 c0       	push   0xc000ef3c
c000f614:	6a 0c                	push   0xc
c000f616:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f619:	ff d0                	call   eax
c000f61b:	83 c4 10             	add    esp,0x10
c000f61e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f621:	8b 00                	mov    eax,DWORD PTR [eax]
c000f623:	83 c0 24             	add    eax,0x24
c000f626:	8b 00                	mov    eax,DWORD PTR [eax]
c000f628:	6a 00                	push   0x0
c000f62a:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f62f:	6a 0d                	push   0xd
c000f631:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f634:	ff d0                	call   eax
c000f636:	83 c4 10             	add    esp,0x10
c000f639:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f63c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f63e:	83 c0 24             	add    eax,0x24
c000f641:	8b 00                	mov    eax,DWORD PTR [eax]
c000f643:	6a 00                	push   0x0
c000f645:	68 ed ee 00 c0       	push   0xc000eeed
c000f64a:	6a 0e                	push   0xe
c000f64c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f64f:	ff d0                	call   eax
c000f651:	83 c4 10             	add    esp,0x10
c000f654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f657:	8b 00                	mov    eax,DWORD PTR [eax]
c000f659:	83 c0 24             	add    eax,0x24
c000f65c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f65e:	6a 00                	push   0x0
c000f660:	68 3c ef 00 c0       	push   0xc000ef3c
c000f665:	6a 0f                	push   0xf
c000f667:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f66a:	ff d0                	call   eax
c000f66c:	83 c4 10             	add    esp,0x10
c000f66f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f672:	8b 00                	mov    eax,DWORD PTR [eax]
c000f674:	83 c0 24             	add    eax,0x24
c000f677:	8b 00                	mov    eax,DWORD PTR [eax]
c000f679:	6a 00                	push   0x0
c000f67b:	68 3c ef 00 c0       	push   0xc000ef3c
c000f680:	6a 10                	push   0x10
c000f682:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f685:	ff d0                	call   eax
c000f687:	83 c4 10             	add    esp,0x10
c000f68a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f68d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68f:	83 c0 24             	add    eax,0x24
c000f692:	8b 00                	mov    eax,DWORD PTR [eax]
c000f694:	6a 00                	push   0x0
c000f696:	68 3c ef 00 c0       	push   0xc000ef3c
c000f69b:	6a 11                	push   0x11
c000f69d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6a0:	ff d0                	call   eax
c000f6a2:	83 c4 10             	add    esp,0x10
c000f6a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6aa:	83 c0 24             	add    eax,0x24
c000f6ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6af:	6a 00                	push   0x0
c000f6b1:	68 3c ef 00 c0       	push   0xc000ef3c
c000f6b6:	6a 12                	push   0x12
c000f6b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6bb:	ff d0                	call   eax
c000f6bd:	83 c4 10             	add    esp,0x10
c000f6c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c5:	83 c0 24             	add    eax,0x24
c000f6c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ca:	6a 00                	push   0x0
c000f6cc:	68 3c ef 00 c0       	push   0xc000ef3c
c000f6d1:	6a 13                	push   0x13
c000f6d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6d6:	ff d0                	call   eax
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e0:	83 c0 24             	add    eax,0x24
c000f6e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e5:	6a 00                	push   0x0
c000f6e7:	68 3c ef 00 c0       	push   0xc000ef3c
c000f6ec:	6a 14                	push   0x14
c000f6ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6f1:	ff d0                	call   eax
c000f6f3:	83 c4 10             	add    esp,0x10
c000f6f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6fb:	83 c0 24             	add    eax,0x24
c000f6fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f700:	6a 00                	push   0x0
c000f702:	68 3c ef 00 c0       	push   0xc000ef3c
c000f707:	6a 1e                	push   0x1e
c000f709:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f70c:	ff d0                	call   eax
c000f70e:	83 c4 10             	add    esp,0x10
c000f711:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f714:	8b 00                	mov    eax,DWORD PTR [eax]
c000f716:	83 c0 24             	add    eax,0x24
c000f719:	8b 00                	mov    eax,DWORD PTR [eax]
c000f71b:	6a 00                	push   0x0
c000f71d:	68 cf 65 01 c0       	push   0xc00165cf
c000f722:	6a 60                	push   0x60
c000f724:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f727:	ff d0                	call   eax
c000f729:	83 c4 10             	add    esp,0x10
c000f72c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f72f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f732:	c9                   	leave  
c000f733:	c3                   	ret    

c000f734 <InterruptController::convertLegacyIRQNumber(int)>:
c000f734:	55                   	push   ebp
c000f735:	89 e5                	mov    ebp,esp
c000f737:	83 ec 08             	sub    esp,0x8
c000f73a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f73d:	83 ec 0c             	sub    esp,0xc
c000f740:	50                   	push   eax
c000f741:	e8 fc ea ff ff       	call   c000e242 <Device::getName()>
c000f746:	83 c4 10             	add    esp,0x10
c000f749:	8a 00                	mov    al,BYTE PTR [eax]
c000f74b:	3c 41                	cmp    al,0x41
c000f74d:	0f 94 c0             	sete   al
c000f750:	84 c0                	test   al,al
c000f752:	74 28                	je     c000f77c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f754:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f758:	7f 12                	jg     c000f76c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f75a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f75d:	05 a0 5b 02 c0       	add    eax,0xc0025ba0
c000f762:	8a 00                	mov    al,BYTE PTR [eax]
c000f764:	0f b6 c0             	movzx  eax,al
c000f767:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f76a:	eb 10                	jmp    c000f77c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f76c:	83 ec 0c             	sub    esp,0xc
c000f76f:	68 e0 37 02 c0       	push   0xc00237e0
c000f774:	e8 44 4c 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000f779:	83 c4 10             	add    esp,0x10
c000f77c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f77f:	c9                   	leave  
c000f780:	c3                   	ret    
c000f781:	90                   	nop

c000f782 <startGUI(void*)>:
c000f782:	55                   	push   ebp
c000f783:	89 e5                	mov    ebp,esp
c000f785:	53                   	push   ebx
c000f786:	83 ec 04             	sub    esp,0x4
c000f789:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f78e:	48                   	dec    eax
c000f78f:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000f794:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f799:	85 c0                	test   eax,eax
c000f79b:	75 01                	jne    c000f79e <startGUI(void*)+0x1c>
c000f79d:	fb                   	sti    
c000f79e:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c000f7a4:	83 ec 08             	sub    esp,0x8
c000f7a7:	6a 01                	push   0x1
c000f7a9:	68 60 38 02 c0       	push   0xc0023860
c000f7ae:	e8 f7 7d 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c000f7b3:	83 c4 10             	add    esp,0x10
c000f7b6:	83 ec 08             	sub    esp,0x8
c000f7b9:	53                   	push   ebx
c000f7ba:	50                   	push   eax
c000f7bb:	e8 1b 80 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c000f7c0:	83 c4 10             	add    esp,0x10
c000f7c3:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c000f7c9:	83 ec 08             	sub    esp,0x8
c000f7cc:	6a 01                	push   0x1
c000f7ce:	68 7a 38 02 c0       	push   0xc002387a
c000f7d3:	e8 d2 7d 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c000f7d8:	83 c4 10             	add    esp,0x10
c000f7db:	83 ec 08             	sub    esp,0x8
c000f7de:	53                   	push   ebx
c000f7df:	50                   	push   eax
c000f7e0:	e8 f6 7f 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c000f7e5:	83 c4 10             	add    esp,0x10
c000f7e8:	90                   	nop
c000f7e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7ec:	c9                   	leave  
c000f7ed:	c3                   	ret    

c000f7ee <startGUIVESA(void*)>:
c000f7ee:	55                   	push   ebp
c000f7ef:	89 e5                	mov    ebp,esp
c000f7f1:	53                   	push   ebx
c000f7f2:	83 ec 04             	sub    esp,0x4
c000f7f5:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f7fa:	48                   	dec    eax
c000f7fb:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000f800:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f805:	85 c0                	test   eax,eax
c000f807:	75 01                	jne    c000f80a <startGUIVESA(void*)+0x1c>
c000f809:	fb                   	sti    
c000f80a:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c000f810:	83 ec 08             	sub    esp,0x8
c000f813:	6a 01                	push   0x1
c000f815:	68 94 38 02 c0       	push   0xc0023894
c000f81a:	e8 8b 7d 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c000f81f:	83 c4 10             	add    esp,0x10
c000f822:	83 ec 08             	sub    esp,0x8
c000f825:	53                   	push   ebx
c000f826:	50                   	push   eax
c000f827:	e8 af 7f 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c000f82c:	83 c4 10             	add    esp,0x10
c000f82f:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c000f835:	83 ec 08             	sub    esp,0x8
c000f838:	6a 01                	push   0x1
c000f83a:	68 7a 38 02 c0       	push   0xc002387a
c000f83f:	e8 66 7d 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c000f844:	83 c4 10             	add    esp,0x10
c000f847:	83 ec 08             	sub    esp,0x8
c000f84a:	53                   	push   ebx
c000f84b:	50                   	push   eax
c000f84c:	e8 8a 7f 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c000f851:	83 c4 10             	add    esp,0x10
c000f854:	90                   	nop
c000f855:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f858:	c9                   	leave  
c000f859:	c3                   	ret    

c000f85a <sendKeyToTerminal(unsigned char)>:
c000f85a:	55                   	push   ebp
c000f85b:	89 e5                	mov    ebp,esp
c000f85d:	83 ec 28             	sub    esp,0x28
c000f860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f863:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f866:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000f86b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f86f:	83 ec 08             	sub    esp,0x8
c000f872:	52                   	push   edx
c000f873:	50                   	push   eax
c000f874:	e8 91 b6 ff ff       	call   c000af0a <VgaText::receiveKey(unsigned char)>
c000f879:	83 c4 10             	add    esp,0x10
c000f87c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f880:	0f 85 8f 00 00 00    	jne    c000f915 <sendKeyToTerminal(unsigned char)+0xbb>
c000f886:	fa                   	cli    
c000f887:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f88c:	40                   	inc    eax
c000f88d:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000f892:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c000f897:	40                   	inc    eax
c000f898:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c000f89d:	a1 00 66 02 c0       	mov    eax,ds:0xc0026600
c000f8a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f8a5:	c7 05 00 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026600,0x0
c000f8af:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f8b3:	74 1f                	je     c000f8d4 <sendKeyToTerminal(unsigned char)+0x7a>
c000f8b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f8bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f8be:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f8c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f8c4:	83 ec 0c             	sub    esp,0xc
c000f8c7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f8ca:	e8 7d 8b 00 00       	call   c001844c <unblockTask(ThreadControlBlock*)>
c000f8cf:	83 c4 10             	add    esp,0x10
c000f8d2:	eb db                	jmp    c000f8af <sendKeyToTerminal(unsigned char)+0x55>
c000f8d4:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c000f8d9:	48                   	dec    eax
c000f8da:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c000f8df:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c000f8e4:	85 c0                	test   eax,eax
c000f8e6:	75 18                	jne    c000f900 <sendKeyToTerminal(unsigned char)+0xa6>
c000f8e8:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c000f8ed:	85 c0                	test   eax,eax
c000f8ef:	74 0f                	je     c000f900 <sendKeyToTerminal(unsigned char)+0xa6>
c000f8f1:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c000f8fb:	e8 90 86 00 00       	call   c0017f90 <schedule()>
c000f900:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f905:	48                   	dec    eax
c000f906:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000f90b:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000f910:	85 c0                	test   eax,eax
c000f912:	75 01                	jne    c000f915 <sendKeyToTerminal(unsigned char)+0xbb>
c000f914:	fb                   	sti    
c000f915:	90                   	nop
c000f916:	c9                   	leave  
c000f917:	c3                   	ret    

c000f918 <sendKeyboardToken(KeyboardToken)>:
c000f918:	55                   	push   ebp
c000f919:	89 e5                	mov    ebp,esp
c000f91b:	83 ec 18             	sub    esp,0x18
c000f91e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f924:	0f b7 c0             	movzx  eax,ax
c000f927:	83 f2 01             	xor    edx,0x1
c000f92a:	88 90 20 66 02 c0    	mov    BYTE PTR [eax-0x3ffd99e0],dl
c000f930:	a1 08 66 02 c0       	mov    eax,ds:0xc0026608
c000f935:	85 c0                	test   eax,eax
c000f937:	74 24                	je     c000f95d <sendKeyboardToken(KeyboardToken)+0x45>
c000f939:	8b 0d 08 66 02 c0    	mov    ecx,DWORD PTR ds:0xc0026608
c000f93f:	83 ec 04             	sub    esp,0x4
c000f942:	68 20 66 02 c0       	push   0xc0026620
c000f947:	83 ec 08             	sub    esp,0x8
c000f94a:	89 e2                	mov    edx,esp
c000f94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94f:	89 02                	mov    DWORD PTR [edx],eax
c000f951:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f954:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f958:	ff d1                	call   ecx
c000f95a:	83 c4 10             	add    esp,0x10
c000f95d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f960:	66 3d 03 02          	cmp    ax,0x203
c000f964:	75 07                	jne    c000f96d <sendKeyboardToken(KeyboardToken)+0x55>
c000f966:	a0 20 67 02 c0       	mov    al,ds:0xc0026720
c000f96b:	84 c0                	test   al,al
c000f96d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f971:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f974:	a0 28 6a 02 c0       	mov    al,ds:0xc0026a28
c000f979:	38 c2                	cmp    dl,al
c000f97b:	74 1c                	je     c000f999 <sendKeyboardToken(KeyboardToken)+0x81>
c000f97d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f980:	a2 28 6a 02 c0       	mov    ds:0xc0026a28,al
c000f985:	a0 28 6a 02 c0       	mov    al,ds:0xc0026a28
c000f98a:	0f b6 c0             	movzx  eax,al
c000f98d:	83 ec 0c             	sub    esp,0xc
c000f990:	50                   	push   eax
c000f991:	e8 b4 ab ff ff       	call   c000a54a <setTerminalScrollLock(bool)>
c000f996:	83 c4 10             	add    esp,0x10
c000f999:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f99c:	84 c0                	test   al,al
c000f99e:	0f 84 ae 00 00 00    	je     c000fa52 <sendKeyboardToken(KeyboardToken)+0x13a>
c000f9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a7:	66 3d 10 03          	cmp    ax,0x310
c000f9ab:	75 06                	jne    c000f9b3 <sendKeyboardToken(KeyboardToken)+0x9b>
c000f9ad:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f9b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9b6:	66 3d 11 03          	cmp    ax,0x311
c000f9ba:	75 06                	jne    c000f9c2 <sendKeyboardToken(KeyboardToken)+0xaa>
c000f9bc:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f9c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c5:	66 3d 12 03          	cmp    ax,0x312
c000f9c9:	75 06                	jne    c000f9d1 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f9cb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f9d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d4:	66 3d 13 03          	cmp    ax,0x313
c000f9d8:	75 06                	jne    c000f9e0 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f9da:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e3:	66 3d 14 03          	cmp    ax,0x314
c000f9e7:	75 06                	jne    c000f9ef <sendKeyboardToken(KeyboardToken)+0xd7>
c000f9e9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f9ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f2:	66 3d 15 03          	cmp    ax,0x315
c000f9f6:	75 06                	jne    c000f9fe <sendKeyboardToken(KeyboardToken)+0xe6>
c000f9f8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f9fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa01:	66 3d 16 03          	cmp    ax,0x316
c000fa05:	75 06                	jne    c000fa0d <sendKeyboardToken(KeyboardToken)+0xf5>
c000fa07:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fa0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa10:	66 3d 17 03          	cmp    ax,0x317
c000fa14:	75 06                	jne    c000fa1c <sendKeyboardToken(KeyboardToken)+0x104>
c000fa16:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fa1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa1f:	66 3d 18 03          	cmp    ax,0x318
c000fa23:	75 06                	jne    c000fa2b <sendKeyboardToken(KeyboardToken)+0x113>
c000fa25:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fa2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa2e:	66 3d 19 03          	cmp    ax,0x319
c000fa32:	75 06                	jne    c000fa3a <sendKeyboardToken(KeyboardToken)+0x122>
c000fa34:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fa3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa3d:	66 3d 1a 03          	cmp    ax,0x31a
c000fa41:	0f 85 c9 00 00 00    	jne    c000fb10 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa47:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fa4d:	e9 be 00 00 00       	jmp    c000fb10 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa55:	66 3d 10 03          	cmp    ax,0x310
c000fa59:	75 0a                	jne    c000fa65 <sendKeyboardToken(KeyboardToken)+0x14d>
c000fa5b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fa61:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa68:	66 3d 11 03          	cmp    ax,0x311
c000fa6c:	75 0a                	jne    c000fa78 <sendKeyboardToken(KeyboardToken)+0x160>
c000fa6e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fa74:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa7b:	66 3d 12 03          	cmp    ax,0x312
c000fa7f:	75 0a                	jne    c000fa8b <sendKeyboardToken(KeyboardToken)+0x173>
c000fa81:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fa87:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa8e:	66 3d 13 03          	cmp    ax,0x313
c000fa92:	75 0a                	jne    c000fa9e <sendKeyboardToken(KeyboardToken)+0x186>
c000fa94:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa9a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa1:	66 3d 14 03          	cmp    ax,0x314
c000faa5:	75 0a                	jne    c000fab1 <sendKeyboardToken(KeyboardToken)+0x199>
c000faa7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000faad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab4:	66 3d 15 03          	cmp    ax,0x315
c000fab8:	75 0a                	jne    c000fac4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000faba:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fac0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fac7:	66 3d 16 03          	cmp    ax,0x316
c000facb:	75 0a                	jne    c000fad7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c000facd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fad3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fada:	66 3d 17 03          	cmp    ax,0x317
c000fade:	75 0a                	jne    c000faea <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fae0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fae6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000faea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faed:	66 3d 18 03          	cmp    ax,0x318
c000faf1:	75 0a                	jne    c000fafd <sendKeyboardToken(KeyboardToken)+0x1e5>
c000faf3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000faf9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fafd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb00:	66 3d 19 03          	cmp    ax,0x319
c000fb04:	75 0a                	jne    c000fb10 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fb06:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fb0c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fb10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb13:	66 3d 00 02          	cmp    ax,0x200
c000fb17:	75 2c                	jne    c000fb45 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fb19:	a0 20 6a 02 c0       	mov    al,ds:0xc0026a20
c000fb1e:	83 f0 01             	xor    eax,0x1
c000fb21:	84 c0                	test   al,al
c000fb23:	74 20                	je     c000fb45 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fb25:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000fb2a:	6a 01                	push   0x1
c000fb2c:	6a 00                	push   0x0
c000fb2e:	68 82 f7 00 c0       	push   0xc000f782
c000fb33:	50                   	push   eax
c000fb34:	e8 3b 82 00 00       	call   c0017d74 <Process::createThread(void (*)(void*), void*, int)>
c000fb39:	83 c4 10             	add    esp,0x10
c000fb3c:	c6 05 20 6a 02 c0 01 	mov    BYTE PTR ds:0xc0026a20,0x1
c000fb43:	eb 33                	jmp    c000fb78 <sendKeyboardToken(KeyboardToken)+0x260>
c000fb45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb48:	66 3d 01 02          	cmp    ax,0x201
c000fb4c:	75 2a                	jne    c000fb78 <sendKeyboardToken(KeyboardToken)+0x260>
c000fb4e:	a0 20 6a 02 c0       	mov    al,ds:0xc0026a20
c000fb53:	83 f0 01             	xor    eax,0x1
c000fb56:	84 c0                	test   al,al
c000fb58:	74 1e                	je     c000fb78 <sendKeyboardToken(KeyboardToken)+0x260>
c000fb5a:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c000fb5f:	6a 01                	push   0x1
c000fb61:	6a 00                	push   0x0
c000fb63:	68 ee f7 00 c0       	push   0xc000f7ee
c000fb68:	50                   	push   eax
c000fb69:	e8 06 82 00 00       	call   c0017d74 <Process::createThread(void (*)(void*), void*, int)>
c000fb6e:	83 c4 10             	add    esp,0x10
c000fb71:	c6 05 20 6a 02 c0 01 	mov    BYTE PTR ds:0xc0026a20,0x1
c000fb78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb7b:	66 3d 1d 03          	cmp    ax,0x31d
c000fb7f:	75 06                	jne    c000fb87 <sendKeyboardToken(KeyboardToken)+0x26f>
c000fb81:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fb87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8a:	66 3d 1c 03          	cmp    ax,0x31c
c000fb8e:	75 06                	jne    c000fb96 <sendKeyboardToken(KeyboardToken)+0x27e>
c000fb90:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fb96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb99:	66 3d 1b 03          	cmp    ax,0x31b
c000fb9d:	75 06                	jne    c000fba5 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb9f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fba8:	66 3d 1e 03          	cmp    ax,0x31e
c000fbac:	75 06                	jne    c000fbb4 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fbae:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fbb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbb7:	66 3d 1f 03          	cmp    ax,0x31f
c000fbbb:	75 06                	jne    c000fbc3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fbbd:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fbc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbc6:	66 3d 1a 03          	cmp    ax,0x31a
c000fbca:	75 06                	jne    c000fbd2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fbcc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fbd2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fbd6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fbd9:	83 f0 01             	xor    eax,0x1
c000fbdc:	84 c0                	test   al,al
c000fbde:	74 77                	je     c000fc57 <sendKeyboardToken(KeyboardToken)+0x33f>
c000fbe0:	a0 21 67 02 c0       	mov    al,ds:0xc0026721
c000fbe5:	84 c0                	test   al,al
c000fbe7:	74 41                	je     c000fc2a <sendKeyboardToken(KeyboardToken)+0x312>
c000fbe9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbed:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fbf1:	74 2b                	je     c000fc1e <sendKeyboardToken(KeyboardToken)+0x306>
c000fbf3:	8b 15 24 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a24
c000fbf9:	89 d0                	mov    eax,edx
c000fbfb:	c1 e0 02             	shl    eax,0x2
c000fbfe:	01 d0                	add    eax,edx
c000fc00:	01 c0                	add    eax,eax
c000fc02:	a3 24 6a 02 c0       	mov    ds:0xc0026a24,eax
c000fc07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc0a:	0f b7 c0             	movzx  eax,ax
c000fc0d:	8d 50 d0             	lea    edx,[eax-0x30]
c000fc10:	a1 24 6a 02 c0       	mov    eax,ds:0xc0026a24
c000fc15:	01 d0                	add    eax,edx
c000fc17:	a3 24 6a 02 c0       	mov    ds:0xc0026a24,eax
c000fc1c:	eb 6d                	jmp    c000fc8b <sendKeyboardToken(KeyboardToken)+0x373>
c000fc1e:	c7 05 24 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a24,0x0
c000fc28:	eb 61                	jmp    c000fc8b <sendKeyboardToken(KeyboardToken)+0x373>
c000fc2a:	a1 24 6a 02 c0       	mov    eax,ds:0xc0026a24
c000fc2f:	85 c0                	test   eax,eax
c000fc31:	74 18                	je     c000fc4b <sendKeyboardToken(KeyboardToken)+0x333>
c000fc33:	a1 24 6a 02 c0       	mov    eax,ds:0xc0026a24
c000fc38:	0f b6 c0             	movzx  eax,al
c000fc3b:	83 ec 0c             	sub    esp,0xc
c000fc3e:	50                   	push   eax
c000fc3f:	e8 16 fc ff ff       	call   c000f85a <sendKeyToTerminal(unsigned char)>
c000fc44:	83 c4 10             	add    esp,0x10
c000fc47:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fc4b:	c7 05 24 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a24,0x0
c000fc55:	eb 34                	jmp    c000fc8b <sendKeyboardToken(KeyboardToken)+0x373>
c000fc57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc5a:	66 3d 01 01          	cmp    ax,0x101
c000fc5e:	75 2b                	jne    c000fc8b <sendKeyboardToken(KeyboardToken)+0x373>
c000fc60:	a1 24 6a 02 c0       	mov    eax,ds:0xc0026a24
c000fc65:	85 c0                	test   eax,eax
c000fc67:	74 18                	je     c000fc81 <sendKeyboardToken(KeyboardToken)+0x369>
c000fc69:	a1 24 6a 02 c0       	mov    eax,ds:0xc0026a24
c000fc6e:	0f b6 c0             	movzx  eax,al
c000fc71:	83 ec 0c             	sub    esp,0xc
c000fc74:	50                   	push   eax
c000fc75:	e8 e0 fb ff ff       	call   c000f85a <sendKeyToTerminal(unsigned char)>
c000fc7a:	83 c4 10             	add    esp,0x10
c000fc7d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fc81:	c7 05 24 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a24,0x0
c000fc8b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc8e:	83 f0 01             	xor    eax,0x1
c000fc91:	84 c0                	test   al,al
c000fc93:	74 4c                	je     c000fce1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc95:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc98:	83 f0 01             	xor    eax,0x1
c000fc9b:	84 c0                	test   al,al
c000fc9d:	74 42                	je     c000fce1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc9f:	a0 20 67 02 c0       	mov    al,ds:0xc0026720
c000fca4:	83 f0 01             	xor    eax,0x1
c000fca7:	84 c0                	test   al,al
c000fca9:	74 36                	je     c000fce1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fcab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcae:	66 83 f8 1f          	cmp    ax,0x1f
c000fcb2:	76 09                	jbe    c000fcbd <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fcb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb7:	66 83 f8 7e          	cmp    ax,0x7e
c000fcbb:	76 12                	jbe    c000fccf <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fcbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc0:	66 83 f8 0a          	cmp    ax,0xa
c000fcc4:	74 09                	je     c000fccf <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fcc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc9:	66 83 f8 08          	cmp    ax,0x8
c000fccd:	75 12                	jne    c000fce1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd2:	0f b6 c0             	movzx  eax,al
c000fcd5:	83 ec 0c             	sub    esp,0xc
c000fcd8:	50                   	push   eax
c000fcd9:	e8 7c fb ff ff       	call   c000f85a <sendKeyToTerminal(unsigned char)>
c000fcde:	83 c4 10             	add    esp,0x10
c000fce1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fce4:	83 f0 01             	xor    eax,0x1
c000fce7:	84 c0                	test   al,al
c000fce9:	74 4f                	je     c000fd3a <sendKeyboardToken(KeyboardToken)+0x422>
c000fceb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcee:	83 f0 01             	xor    eax,0x1
c000fcf1:	84 c0                	test   al,al
c000fcf3:	74 45                	je     c000fd3a <sendKeyboardToken(KeyboardToken)+0x422>
c000fcf5:	a0 20 67 02 c0       	mov    al,ds:0xc0026720
c000fcfa:	84 c0                	test   al,al
c000fcfc:	74 3c                	je     c000fd3a <sendKeyboardToken(KeyboardToken)+0x422>
c000fcfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd01:	66 83 f8 3f          	cmp    ax,0x3f
c000fd05:	76 33                	jbe    c000fd3a <sendKeyboardToken(KeyboardToken)+0x422>
c000fd07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0a:	66 83 f8 7f          	cmp    ax,0x7f
c000fd0e:	77 2a                	ja     c000fd3a <sendKeyboardToken(KeyboardToken)+0x422>
c000fd10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd13:	88 c2                	mov    dl,al
c000fd15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd18:	66 83 f8 5f          	cmp    ax,0x5f
c000fd1c:	76 04                	jbe    c000fd22 <sendKeyboardToken(KeyboardToken)+0x40a>
c000fd1e:	b0 20                	mov    al,0x20
c000fd20:	eb 02                	jmp    c000fd24 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fd22:	b0 00                	mov    al,0x0
c000fd24:	29 c2                	sub    edx,eax
c000fd26:	88 d0                	mov    al,dl
c000fd28:	83 e8 40             	sub    eax,0x40
c000fd2b:	0f b6 c0             	movzx  eax,al
c000fd2e:	83 ec 0c             	sub    esp,0xc
c000fd31:	50                   	push   eax
c000fd32:	e8 23 fb ff ff       	call   c000f85a <sendKeyToTerminal(unsigned char)>
c000fd37:	83 c4 10             	add    esp,0x10
c000fd3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd3d:	66 3d 00 03          	cmp    ax,0x300
c000fd41:	75 0f                	jne    c000fd52 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fd43:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fd46:	83 f0 01             	xor    eax,0x1
c000fd49:	84 c0                	test   al,al
c000fd4b:	74 05                	je     c000fd52 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fd4d:	e8 69 ab ff ff       	call   c000a8bb <doTerminalCycle()>
c000fd52:	90                   	nop
c000fd53:	c9                   	leave  
c000fd54:	c3                   	ret    

c000fd55 <clearInternalKeybuffer(VgaText*)>:
c000fd55:	55                   	push   ebp
c000fd56:	89 e5                	mov    ebp,esp
c000fd58:	83 ec 08             	sub    esp,0x8
c000fd5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd5e:	05 98 01 00 00       	add    eax,0x198
c000fd63:	83 ec 0c             	sub    esp,0xc
c000fd66:	50                   	push   eax
c000fd67:	e8 34 09 ff ff       	call   c00006a0 <strlen>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd72:	81 c2 98 01 00 00    	add    edx,0x198
c000fd78:	83 ec 04             	sub    esp,0x4
c000fd7b:	50                   	push   eax
c000fd7c:	6a 00                	push   0x0
c000fd7e:	52                   	push   edx
c000fd7f:	e8 00 09 ff ff       	call   c0000684 <memset>
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	90                   	nop
c000fd88:	c9                   	leave  
c000fd89:	c3                   	ret    

c000fd8a <readKeyboard(VgaText*, char*, unsigned long)>:
c000fd8a:	55                   	push   ebp
c000fd8b:	89 e5                	mov    ebp,esp
c000fd8d:	83 ec 18             	sub    esp,0x18
c000fd90:	a1 08 66 02 c0       	mov    eax,ds:0xc0026608
c000fd95:	85 c0                	test   eax,eax
c000fd97:	74 2a                	je     c000fdc3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd99:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd9f:	8b 0d 08 66 02 c0    	mov    ecx,DWORD PTR ds:0xc0026608
c000fda5:	83 ec 04             	sub    esp,0x4
c000fda8:	68 20 66 02 c0       	push   0xc0026620
c000fdad:	83 ec 08             	sub    esp,0x8
c000fdb0:	89 e2                	mov    edx,esp
c000fdb2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fdb5:	89 02                	mov    DWORD PTR [edx],eax
c000fdb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fdba:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fdbe:	ff d1                	call   ecx
c000fdc0:	83 c4 10             	add    esp,0x10
c000fdc3:	fb                   	sti    
c000fdc4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fdcb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fdcf:	0f 84 a1 00 00 00    	je     c000fe76 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fdd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdd8:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fdde:	84 c0                	test   al,al
c000fde0:	75 28                	jne    c000fe0a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fde2:	fa                   	cli    
c000fde3:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000fde8:	40                   	inc    eax
c000fde9:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000fdee:	e8 9d 81 00 00       	call   c0017f90 <schedule()>
c000fdf3:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000fdf8:	48                   	dec    eax
c000fdf9:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c000fdfe:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c000fe03:	85 c0                	test   eax,eax
c000fe05:	75 ce                	jne    c000fdd5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fe07:	fb                   	sti    
c000fe08:	eb cb                	jmp    c000fdd5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fe0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fe0d:	8d 50 01             	lea    edx,[eax+0x1]
c000fe10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fe13:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe16:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fe1c:	88 10                	mov    BYTE PTR [eax],dl
c000fe1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe21:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fe27:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fe2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe2d:	05 98 01 00 00       	add    eax,0x198
c000fe32:	83 ec 0c             	sub    esp,0xc
c000fe35:	50                   	push   eax
c000fe36:	e8 65 08 ff ff       	call   c00006a0 <strlen>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe41:	81 c2 98 01 00 00    	add    edx,0x198
c000fe47:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fe4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe4d:	81 c2 98 01 00 00    	add    edx,0x198
c000fe53:	83 ec 04             	sub    esp,0x4
c000fe56:	50                   	push   eax
c000fe57:	51                   	push   ecx
c000fe58:	52                   	push   edx
c000fe59:	e8 5e 07 ff ff       	call   c00005bc <memmove>
c000fe5e:	83 c4 10             	add    esp,0x10
c000fe61:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fe64:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fe67:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fe6b:	0f 85 5a ff ff ff    	jne    c000fdcb <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fe71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe74:	eb 03                	jmp    c000fe79 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fe76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe79:	c9                   	leave  
c000fe7a:	c3                   	ret    
c000fe7b:	90                   	nop

c000fe7c <Keyboard::Keyboard(char const*)>:
c000fe7c:	83 ec 0c             	sub    esp,0xc
c000fe7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe83:	83 ec 08             	sub    esp,0x8
c000fe86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe8a:	50                   	push   eax
c000fe8b:	e8 b6 e2 ff ff       	call   c000e146 <Device::Device(char const*)>
c000fe90:	83 c4 10             	add    esp,0x10
c000fe93:	ba b8 38 02 c0       	mov    edx,0xc00238b8
c000fe98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe9c:	89 10                	mov    DWORD PTR [eax],edx
c000fe9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000feac:	c6 05 04 66 02 c0 01 	mov    BYTE PTR ds:0xc0026604,0x1
c000feb3:	90                   	nop
c000feb4:	83 c4 0c             	add    esp,0xc
c000feb7:	c3                   	ret    

c000feb8 <Keyboard::~Keyboard()>:
c000feb8:	83 ec 0c             	sub    esp,0xc
c000febb:	ba b8 38 02 c0       	mov    edx,0xc00238b8
c000fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec4:	89 10                	mov    DWORD PTR [eax],edx
c000fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feca:	83 ec 0c             	sub    esp,0xc
c000fecd:	50                   	push   eax
c000fece:	e8 3d df ff ff       	call   c000de10 <Device::~Device()>
c000fed3:	83 c4 10             	add    esp,0x10
c000fed6:	90                   	nop
c000fed7:	83 c4 0c             	add    esp,0xc
c000feda:	c3                   	ret    
c000fedb:	90                   	nop

c000fedc <Keyboard::~Keyboard()>:
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	83 ec 0c             	sub    esp,0xc
c000fee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fee6:	e8 cd ff ff ff       	call   c000feb8 <Keyboard::~Keyboard()>
c000feeb:	83 c4 10             	add    esp,0x10
c000feee:	83 ec 08             	sub    esp,0x8
c000fef1:	68 5c 01 00 00       	push   0x15c
c000fef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fefa:	e8 1b cb ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000feff:	83 c4 10             	add    esp,0x10
c000ff02:	83 c4 0c             	add    esp,0xc
c000ff05:	c3                   	ret    

c000ff06 <LogicalDisk::close(int, int, void*)>:
c000ff06:	83 c8 ff             	or     eax,0xffffffff
c000ff09:	c3                   	ret    

c000ff0a <LogicalDisk::~LogicalDisk()>:
c000ff0a:	83 ec 0c             	sub    esp,0xc
c000ff0d:	ba 30 39 02 c0       	mov    edx,0xc0023930
c000ff12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff16:	89 10                	mov    DWORD PTR [eax],edx
c000ff18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1c:	83 ec 0c             	sub    esp,0xc
c000ff1f:	50                   	push   eax
c000ff20:	e8 eb de ff ff       	call   c000de10 <Device::~Device()>
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	90                   	nop
c000ff29:	83 c4 0c             	add    esp,0xc
c000ff2c:	c3                   	ret    
c000ff2d:	90                   	nop

c000ff2e <LogicalDisk::~LogicalDisk()>:
c000ff2e:	83 ec 0c             	sub    esp,0xc
c000ff31:	83 ec 0c             	sub    esp,0xc
c000ff34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff38:	e8 cd ff ff ff       	call   c000ff0a <LogicalDisk::~LogicalDisk()>
c000ff3d:	83 c4 10             	add    esp,0x10
c000ff40:	83 ec 08             	sub    esp,0x8
c000ff43:	68 74 01 00 00       	push   0x174
c000ff48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff4c:	e8 c9 ca ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	83 c4 0c             	add    esp,0xc
c000ff57:	c3                   	ret    

c000ff58 <LogicalDisk::open(int, int, void*)>:
c000ff58:	83 ec 18             	sub    esp,0x18
c000ff5b:	68 e4 38 02 c0       	push   0xc00238e4
c000ff60:	e8 58 44 00 00       	call   c00143bd <Krnl::panic(char const*)>
c000ff65:	83 c8 ff             	or     eax,0xffffffff
c000ff68:	83 c4 1c             	add    esp,0x1c
c000ff6b:	c3                   	ret    

c000ff6c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ff6c:	53                   	push   ebx
c000ff6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ff71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff79:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ff7f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ff85:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ff8b:	77 10                	ja     c000ff9d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ff8d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ff93:	89 d3                	mov    ebx,edx
c000ff95:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff9b:	72 05                	jb     c000ffa2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff9d:	83 c8 ff             	or     eax,0xffffffff
c000ffa0:	89 c2                	mov    edx,eax
c000ffa2:	5b                   	pop    ebx
c000ffa3:	c3                   	ret    

c000ffa4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ffa4:	56                   	push   esi
c000ffa5:	83 c8 ff             	or     eax,0xffffffff
c000ffa8:	53                   	push   ebx
c000ffa9:	89 c2                	mov    edx,eax
c000ffab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ffaf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ffb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ffb7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ffbd:	77 27                	ja     c000ffe6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ffbf:	89 d8                	mov    eax,ebx
c000ffc1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ffc7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ffcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ffd2:	89 c2                	mov    edx,eax
c000ffd4:	73 10                	jae    c000ffe6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ffd6:	89 c8                	mov    eax,ecx
c000ffd8:	89 da                	mov    edx,ebx
c000ffda:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ffe0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ffe6:	5b                   	pop    ebx
c000ffe7:	5e                   	pop    esi
c000ffe8:	c3                   	ret    
c000ffe9:	90                   	nop

c000ffea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ffea:	83 ec 1c             	sub    esp,0x1c
c000ffed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000fff1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fff5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fff9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fffd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010001:	89 04 24             	mov    DWORD PTR [esp],eax
c0010004:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010008:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001000c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010010:	83 ec 08             	sub    esp,0x8
c0010013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010017:	50                   	push   eax
c0010018:	e8 29 e1 ff ff       	call   c000e146 <Device::Device(char const*)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	ba 30 39 02 c0       	mov    edx,0xc0023930
c0010025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010029:	89 10                	mov    DWORD PTR [eax],edx
c001002b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001002f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001003a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010041:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010045:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001004f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010053:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010057:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001005b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010061:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010067:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001006b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001006e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010072:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010078:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001007e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010082:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010086:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001008c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010090:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001009a:	90                   	nop
c001009b:	83 c4 1c             	add    esp,0x1c
c001009e:	c3                   	ret    
c001009f:	90                   	nop

c00100a0 <LogicalDisk::assignDriveLetter()>:
c00100a0:	55                   	push   ebp
c00100a1:	57                   	push   edi
c00100a2:	56                   	push   esi
c00100a3:	53                   	push   ebx
c00100a4:	83 ec 14             	sub    esp,0x14
c00100a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100ab:	8b 3d 40 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a40
c00100b1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00100b7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100bb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00100c1:	8b 3d 44 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a44
c00100c7:	3c 01                	cmp    al,0x1
c00100c9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00100cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00100d1:	19 c0                	sbb    eax,eax
c00100d3:	83 e0 02             	and    eax,0x2
c00100d6:	83 c0 41             	add    eax,0x41
c00100d9:	0f be e8             	movsx  ebp,al
c00100dc:	3c 43                	cmp    al,0x43
c00100de:	75 10                	jne    c00100f0 <LogicalDisk::assignDriveLetter()+0x50>
c00100e0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00100e7:	75 5d                	jne    c0010146 <LogicalDisk::assignDriveLetter()+0xa6>
c00100e9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00100ee:	75 56                	jne    c0010146 <LogicalDisk::assignDriveLetter()+0xa6>
c00100f0:	8d 75 bf             	lea    esi,[ebp-0x41]
c00100f3:	ba 01 00 00 00       	mov    edx,0x1
c00100f8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00100fc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010100:	d3 e2                	shl    edx,cl
c0010102:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010106:	89 d7                	mov    edi,edx
c0010108:	89 d6                	mov    esi,edx
c001010a:	c1 ff 1f             	sar    edi,0x1f
c001010d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010111:	21 f9                	and    ecx,edi
c0010113:	09 d1                	or     ecx,edx
c0010115:	75 2f                	jne    c0010146 <LogicalDisk::assignDriveLetter()+0xa6>
c0010117:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001011b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001011f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010125:	09 f2                	or     edx,esi
c0010127:	89 15 40 6a 02 c0    	mov    DWORD PTR ds:0xc0026a40,edx
c001012d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010131:	09 fa                	or     edx,edi
c0010133:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010137:	89 15 44 6a 02 c0    	mov    DWORD PTR ds:0xc0026a44,edx
c001013d:	89 1c bd 60 6a 02 c0 	mov    DWORD PTR [edi*4-0x3ffd95a0],ebx
c0010144:	eb 08                	jmp    c001014e <LogicalDisk::assignDriveLetter()+0xae>
c0010146:	45                   	inc    ebp
c0010147:	40                   	inc    eax
c0010148:	3c 5b                	cmp    al,0x5b
c001014a:	75 90                	jne    c00100dc <LogicalDisk::assignDriveLetter()+0x3c>
c001014c:	31 c0                	xor    eax,eax
c001014e:	83 c4 14             	add    esp,0x14
c0010151:	5b                   	pop    ebx
c0010152:	5e                   	pop    esi
c0010153:	5f                   	pop    edi
c0010154:	5d                   	pop    ebp
c0010155:	c3                   	ret    

c0010156 <LogicalDisk::mount()>:
c0010156:	56                   	push   esi
c0010157:	53                   	push   ebx
c0010158:	53                   	push   ebx
c0010159:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001015d:	8b 1d d4 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d4
c0010163:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001016d:	85 db                	test   ebx,ebx
c001016f:	74 27                	je     c0010198 <LogicalDisk::mount()+0x42>
c0010171:	51                   	push   ecx
c0010172:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010179:	8b 13                	mov    edx,DWORD PTR [ebx]
c001017b:	83 e8 41             	sub    eax,0x41
c001017e:	50                   	push   eax
c001017f:	56                   	push   esi
c0010180:	53                   	push   ebx
c0010181:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010184:	83 c4 10             	add    esp,0x10
c0010187:	84 c0                	test   al,al
c0010189:	74 08                	je     c0010193 <LogicalDisk::mount()+0x3d>
c001018b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010191:	eb 07                	jmp    c001019a <LogicalDisk::mount()+0x44>
c0010193:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010196:	eb d5                	jmp    c001016d <LogicalDisk::mount()+0x17>
c0010198:	31 c0                	xor    eax,eax
c001019a:	5a                   	pop    edx
c001019b:	5b                   	pop    ebx
c001019c:	5e                   	pop    esi
c001019d:	c3                   	ret    

c001019e <LogicalDisk::unmount()>:
c001019e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00101ac:	c3                   	ret    
c00101ad:	90                   	nop

c00101ae <LogicalDisk::eject()>:
c00101ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00101b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00101ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101be:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00101c1:	90                   	nop

c00101c2 <LogicalDisk::unassignDriveLetter()>:
c00101c2:	57                   	push   edi
c00101c3:	56                   	push   esi
c00101c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101c8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00101cf:	84 c9                	test   cl,cl
c00101d1:	75 0f                	jne    c00101e2 <LogicalDisk::unassignDriveLetter()+0x20>
c00101d3:	c7 44 24 0c 08 39 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023908
c00101db:	5e                   	pop    esi
c00101dc:	5f                   	pop    edi
c00101dd:	e9 db 41 00 00       	jmp    c00143bd <Krnl::panic(char const*)>
c00101e2:	83 e9 41             	sub    ecx,0x41
c00101e5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00101ec:	b8 01 00 00 00       	mov    eax,0x1
c00101f1:	c7 04 8d 60 6a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd95a0],0x0
c00101fc:	d3 e0                	shl    eax,cl
c00101fe:	89 c7                	mov    edi,eax
c0010200:	f7 d0                	not    eax
c0010202:	c1 ff 1f             	sar    edi,0x1f
c0010205:	21 05 40 6a 02 c0    	and    DWORD PTR ds:0xc0026a40,eax
c001020b:	89 fe                	mov    esi,edi
c001020d:	f7 d6                	not    esi
c001020f:	21 35 44 6a 02 c0    	and    DWORD PTR ds:0xc0026a44,esi
c0010215:	5e                   	pop    esi
c0010216:	5f                   	pop    edi
c0010217:	c3                   	ret    

c0010218 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010218:	57                   	push   edi
c0010219:	56                   	push   esi
c001021a:	53                   	push   ebx
c001021b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001021f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010223:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001022b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010231:	77 41                	ja     c0010274 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010233:	99                   	cdq    
c0010234:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001023a:	01 c8                	add    eax,ecx
c001023c:	11 da                	adc    edx,ebx
c001023e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010244:	19 d7                	sbb    edi,edx
c0010246:	72 33                	jb     c001027b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010248:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001024e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010254:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010258:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001025c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010262:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001026c:	5b                   	pop    ebx
c001026d:	5e                   	pop    esi
c001026e:	5f                   	pop    edi
c001026f:	e9 3c 0b 00 00       	jmp    c0010db0 <VCache::read(unsigned long long, int, void*)>
c0010274:	b8 05 00 00 00       	mov    eax,0x5
c0010279:	eb 05                	jmp    c0010280 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001027b:	b8 07 00 00 00       	mov    eax,0x7
c0010280:	5b                   	pop    ebx
c0010281:	5e                   	pop    esi
c0010282:	5f                   	pop    edi
c0010283:	c3                   	ret    

c0010284 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010284:	57                   	push   edi
c0010285:	56                   	push   esi
c0010286:	53                   	push   ebx
c0010287:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001028b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001028f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010297:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001029d:	77 41                	ja     c00102e0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001029f:	99                   	cdq    
c00102a0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00102a6:	01 c8                	add    eax,ecx
c00102a8:	11 da                	adc    edx,ebx
c00102aa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00102b0:	19 d7                	sbb    edi,edx
c00102b2:	72 33                	jb     c00102e7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00102b4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00102ba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00102c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00102c4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00102c8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00102ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00102d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00102d8:	5b                   	pop    ebx
c00102d9:	5e                   	pop    esi
c00102da:	5f                   	pop    edi
c00102db:	e9 8c 09 00 00       	jmp    c0010c6c <VCache::write(unsigned long long, int, void*)>
c00102e0:	b8 05 00 00 00       	mov    eax,0x5
c00102e5:	eb 05                	jmp    c00102ec <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00102e7:	b8 07 00 00 00       	mov    eax,0x7
c00102ec:	5b                   	pop    ebx
c00102ed:	5e                   	pop    esi
c00102ee:	5f                   	pop    edi
c00102ef:	c3                   	ret    

c00102f0 <Mouse::Mouse(char const*)>:
c00102f0:	83 ec 0c             	sub    esp,0xc
c00102f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f7:	83 ec 08             	sub    esp,0x8
c00102fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fe:	50                   	push   eax
c00102ff:	e8 42 de ff ff       	call   c000e146 <Device::Device(char const*)>
c0010304:	83 c4 10             	add    esp,0x10
c0010307:	ba 5c 39 02 c0       	mov    edx,0xc002395c
c001030c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010310:	89 10                	mov    DWORD PTR [eax],edx
c0010312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010316:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010320:	90                   	nop
c0010321:	83 c4 0c             	add    esp,0xc
c0010324:	c3                   	ret    
c0010325:	90                   	nop
c0010326:	66 90                	xchg   ax,ax

c0010328 <Mouse::~Mouse()>:
c0010328:	83 ec 0c             	sub    esp,0xc
c001032b:	ba 5c 39 02 c0       	mov    edx,0xc002395c
c0010330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010334:	89 10                	mov    DWORD PTR [eax],edx
c0010336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033a:	83 ec 0c             	sub    esp,0xc
c001033d:	50                   	push   eax
c001033e:	e8 cd da ff ff       	call   c000de10 <Device::~Device()>
c0010343:	83 c4 10             	add    esp,0x10
c0010346:	90                   	nop
c0010347:	83 c4 0c             	add    esp,0xc
c001034a:	c3                   	ret    
c001034b:	90                   	nop

c001034c <Mouse::~Mouse()>:
c001034c:	83 ec 0c             	sub    esp,0xc
c001034f:	83 ec 0c             	sub    esp,0xc
c0010352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010356:	e8 cd ff ff ff       	call   c0010328 <Mouse::~Mouse()>
c001035b:	83 c4 10             	add    esp,0x10
c001035e:	83 ec 08             	sub    esp,0x8
c0010361:	68 58 01 00 00       	push   0x158
c0010366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001036a:	e8 ab c6 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c001036f:	83 c4 10             	add    esp,0x10
c0010372:	83 c4 0c             	add    esp,0xc
c0010375:	c3                   	ret    

c0010376 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010376:	55                   	push   ebp
c0010377:	57                   	push   edi
c0010378:	56                   	push   esi
c0010379:	53                   	push   ebx
c001037a:	81 ec 28 01 00 00    	sub    esp,0x128
c0010380:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010387:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001038e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010395:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001039c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00103a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00103a4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00103ab:	e8 92 de ff ff       	call   c000e242 <Device::getName()>
c00103b0:	5a                   	pop    edx
c00103b1:	59                   	pop    ecx
c00103b2:	50                   	push   eax
c00103b3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00103b7:	55                   	push   ebp
c00103b8:	e8 83 03 ff ff       	call   c0000740 <strcpy>
c00103bd:	5b                   	pop    ebx
c00103be:	58                   	pop    eax
c00103bf:	68 80 39 02 c0       	push   0xc0023980
c00103c4:	55                   	push   ebp
c00103c5:	e8 b6 04 ff ff       	call   c0000880 <strcat>
c00103ca:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00103d1:	e8 ed 95 ff ff       	call   c00099c3 <malloc>
c00103d6:	83 c4 0c             	add    esp,0xc
c00103d9:	89 c3                	mov    ebx,eax
c00103db:	57                   	push   edi
c00103dc:	56                   	push   esi
c00103dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103e5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00103ec:	55                   	push   ebp
c00103ed:	50                   	push   eax
c00103ee:	e8 f7 fb ff ff       	call   c000ffea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00103f3:	83 c4 14             	add    esp,0x14
c00103f6:	53                   	push   ebx
c00103f7:	e8 a4 fc ff ff       	call   c00100a0 <LogicalDisk::assignDriveLetter()>
c00103fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103ff:	e8 52 fd ff ff       	call   c0010156 <LogicalDisk::mount()>
c0010404:	58                   	pop    eax
c0010405:	5a                   	pop    edx
c0010406:	53                   	push   ebx
c0010407:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001040e:	e8 2f db ff ff       	call   c000df42 <Device::addChild(Device*)>
c0010413:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010419:	5b                   	pop    ebx
c001041a:	5e                   	pop    esi
c001041b:	5f                   	pop    edi
c001041c:	5d                   	pop    ebp
c001041d:	c3                   	ret    

c001041e <createPartitionsForDisk(PhysicalDisk*)>:
c001041e:	55                   	push   ebp
c001041f:	57                   	push   edi
c0010420:	56                   	push   esi
c0010421:	53                   	push   ebx
c0010422:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010428:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001042f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010435:	3d 00 02 00 00       	cmp    eax,0x200
c001043a:	74 27                	je     c0010463 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001043c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010442:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010448:	83 ec 10             	sub    esp,0x10
c001044b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001044f:	99                   	cdq    
c0010450:	c1 e6 0a             	shl    esi,0xa
c0010453:	52                   	push   edx
c0010454:	89 fd                	mov    ebp,edi
c0010456:	50                   	push   eax
c0010457:	55                   	push   ebp
c0010458:	56                   	push   esi
c0010459:	e8 66 0b 01 00       	call   c0020fc4 <__udivdi3>
c001045e:	e9 b1 00 00 00       	jmp    c0010514 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010463:	83 ec 0c             	sub    esp,0xc
c0010466:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010468:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001046c:	56                   	push   esi
c001046d:	6a 01                	push   0x1
c001046f:	6a 00                	push   0x0
c0010471:	6a 00                	push   0x0
c0010473:	53                   	push   ebx
c0010474:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010477:	83 c4 20             	add    esp,0x20
c001047a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010482:	75 0a                	jne    c001048e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010484:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001048c:	74 2c                	je     c00104ba <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001048e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010494:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001049a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00104a0:	83 ec 10             	sub    esp,0x10
c00104a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00104a7:	89 f7                	mov    edi,esi
c00104a9:	c1 e0 0a             	shl    eax,0xa
c00104ac:	c1 ff 1f             	sar    edi,0x1f
c00104af:	57                   	push   edi
c00104b0:	56                   	push   esi
c00104b1:	52                   	push   edx
c00104b2:	50                   	push   eax
c00104b3:	e8 0c 0b 01 00       	call   c0020fc4 <__udivdi3>
c00104b8:	eb 5a                	jmp    c0010514 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00104ba:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00104c1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00104c8:	83 e1 7f             	and    ecx,0x7f
c00104cb:	83 e0 7f             	and    eax,0x7f
c00104ce:	01 c1                	add    ecx,eax
c00104d0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00104d7:	83 e0 7f             	and    eax,0x7f
c00104da:	01 c1                	add    ecx,eax
c00104dc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00104e3:	83 e0 7f             	and    eax,0x7f
c00104e6:	00 c1                	add    cl,al
c00104e8:	74 41                	je     c001052b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00104ea:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00104f0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00104f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00104fc:	83 ec 10             	sub    esp,0x10
c00104ff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010503:	89 f7                	mov    edi,esi
c0010505:	c1 e0 0a             	shl    eax,0xa
c0010508:	c1 ff 1f             	sar    edi,0x1f
c001050b:	57                   	push   edi
c001050c:	56                   	push   esi
c001050d:	52                   	push   edx
c001050e:	50                   	push   eax
c001050f:	e8 b0 0a 01 00       	call   c0020fc4 <__udivdi3>
c0010514:	83 c4 14             	add    esp,0x14
c0010517:	52                   	push   edx
c0010518:	50                   	push   eax
c0010519:	6a 00                	push   0x0
c001051b:	6a 00                	push   0x0
c001051d:	53                   	push   ebx
c001051e:	e8 53 fe ff ff       	call   c0010376 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010523:	83 c4 20             	add    esp,0x20
c0010526:	e9 79 01 00 00       	jmp    c00106a4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001052b:	89 f0                	mov    eax,esi
c001052d:	31 f6                	xor    esi,esi
c001052f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010536:	75 02                	jne    c001053a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010538:	89 f1                	mov    ecx,esi
c001053a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010541:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010548:	c1 e2 08             	shl    edx,0x8
c001054b:	c1 e7 10             	shl    edi,0x10
c001054e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010556:	09 fa                	or     edx,edi
c0010558:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010560:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010567:	83 c0 10             	add    eax,0x10
c001056a:	09 fa                	or     edx,edi
c001056c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010573:	c1 e7 18             	shl    edi,0x18
c0010576:	09 fa                	or     edx,edi
c0010578:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001057f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010583:	c1 e7 10             	shl    edi,0x10
c0010586:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001058d:	c1 e2 08             	shl    edx,0x8
c0010590:	09 fa                	or     edx,edi
c0010592:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010599:	09 fa                	or     edx,edi
c001059b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00105a2:	c1 e7 18             	shl    edi,0x18
c00105a5:	09 fa                	or     edx,edi
c00105a7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00105ab:	46                   	inc    esi
c00105ac:	83 fe 04             	cmp    esi,0x4
c00105af:	0f 85 7a ff ff ff    	jne    c001052f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00105b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b9:	83 f0 01             	xor    eax,0x1
c00105bc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00105c0:	75 57                	jne    c0010619 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00105c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00105c6:	83 f0 01             	xor    eax,0x1
c00105c9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00105cd:	75 4a                	jne    c0010619 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00105cf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00105d3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00105db:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00105e3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00105e9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00105ef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00105f5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00105f9:	89 f7                	mov    edi,esi
c00105fb:	c1 e0 0a             	shl    eax,0xa
c00105fe:	c1 ff 1f             	sar    edi,0x1f
c0010601:	57                   	push   edi
c0010602:	56                   	push   esi
c0010603:	52                   	push   edx
c0010604:	50                   	push   eax
c0010605:	e8 ba 09 01 00       	call   c0020fc4 <__udivdi3>
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010611:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010615:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010619:	84 c9                	test   cl,cl
c001061b:	74 53                	je     c0010670 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001061d:	0f b6 c9             	movzx  ecx,cl
c0010620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010628:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001062c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010630:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010634:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010638:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001063c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010640:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010644:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001064c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010650:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010654:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010658:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001065c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010660:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010664:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010668:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001066c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010670:	31 ed                	xor    ebp,ebp
c0010672:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010676:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001067a:	89 f8                	mov    eax,edi
c001067c:	09 f0                	or     eax,esi
c001067e:	74 1e                	je     c001069e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010680:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010684:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010688:	89 d1                	mov    ecx,edx
c001068a:	09 c1                	or     ecx,eax
c001068c:	74 10                	je     c001069e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001068e:	83 ec 0c             	sub    esp,0xc
c0010691:	57                   	push   edi
c0010692:	56                   	push   esi
c0010693:	52                   	push   edx
c0010694:	50                   	push   eax
c0010695:	53                   	push   ebx
c0010696:	e8 db fc ff ff       	call   c0010376 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001069b:	83 c4 20             	add    esp,0x20
c001069e:	45                   	inc    ebp
c001069f:	83 fd 04             	cmp    ebp,0x4
c00106a2:	75 ce                	jne    c0010672 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00106a4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00106aa:	5b                   	pop    ebx
c00106ab:	5e                   	pop    esi
c00106ac:	5f                   	pop    edi
c00106ad:	5d                   	pop    ebp
c00106ae:	c3                   	ret    
c00106af:	90                   	nop

c00106b0 <Serial::Serial(char const*)>:
c00106b0:	83 ec 0c             	sub    esp,0xc
c00106b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b7:	83 ec 08             	sub    esp,0x8
c00106ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106be:	50                   	push   eax
c00106bf:	e8 82 da ff ff       	call   c000e146 <Device::Device(char const*)>
c00106c4:	83 c4 10             	add    esp,0x10
c00106c7:	ba 94 39 02 c0       	mov    edx,0xc0023994
c00106cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d0:	89 10                	mov    DWORD PTR [eax],edx
c00106d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00106e0:	90                   	nop
c00106e1:	83 c4 0c             	add    esp,0xc
c00106e4:	c3                   	ret    
c00106e5:	90                   	nop
c00106e6:	66 90                	xchg   ax,ax

c00106e8 <Serial::~Serial()>:
c00106e8:	83 ec 0c             	sub    esp,0xc
c00106eb:	ba 94 39 02 c0       	mov    edx,0xc0023994
c00106f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f4:	89 10                	mov    DWORD PTR [eax],edx
c00106f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fa:	83 ec 0c             	sub    esp,0xc
c00106fd:	50                   	push   eax
c00106fe:	e8 0d d7 ff ff       	call   c000de10 <Device::~Device()>
c0010703:	83 c4 10             	add    esp,0x10
c0010706:	90                   	nop
c0010707:	83 c4 0c             	add    esp,0xc
c001070a:	c3                   	ret    
c001070b:	90                   	nop

c001070c <Serial::~Serial()>:
c001070c:	83 ec 0c             	sub    esp,0xc
c001070f:	83 ec 0c             	sub    esp,0xc
c0010712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010716:	e8 cd ff ff ff       	call   c00106e8 <Serial::~Serial()>
c001071b:	83 c4 10             	add    esp,0x10
c001071e:	83 ec 08             	sub    esp,0x8
c0010721:	68 58 01 00 00       	push   0x158
c0010726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001072a:	e8 eb c2 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	83 c4 0c             	add    esp,0xc
c0010735:	c3                   	ret    
c0010736:	66 90                	xchg   ax,ax

c0010738 <Timer::Timer(char const*)>:
c0010738:	83 ec 0c             	sub    esp,0xc
c001073b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073f:	83 ec 08             	sub    esp,0x8
c0010742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010746:	50                   	push   eax
c0010747:	e8 fa d9 ff ff       	call   c000e146 <Device::Device(char const*)>
c001074c:	83 c4 10             	add    esp,0x10
c001074f:	ba d8 39 02 c0       	mov    edx,0xc00239d8
c0010754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010758:	89 10                	mov    DWORD PTR [eax],edx
c001075a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010768:	90                   	nop
c0010769:	83 c4 0c             	add    esp,0xc
c001076c:	c3                   	ret    
c001076d:	90                   	nop
c001076e:	66 90                	xchg   ax,ax

c0010770 <Timer::~Timer()>:
c0010770:	83 ec 0c             	sub    esp,0xc
c0010773:	ba d8 39 02 c0       	mov    edx,0xc00239d8
c0010778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077c:	89 10                	mov    DWORD PTR [eax],edx
c001077e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010782:	83 ec 0c             	sub    esp,0xc
c0010785:	50                   	push   eax
c0010786:	e8 85 d6 ff ff       	call   c000de10 <Device::~Device()>
c001078b:	83 c4 10             	add    esp,0x10
c001078e:	90                   	nop
c001078f:	83 c4 0c             	add    esp,0xc
c0010792:	c3                   	ret    
c0010793:	90                   	nop

c0010794 <Timer::~Timer()>:
c0010794:	83 ec 0c             	sub    esp,0xc
c0010797:	83 ec 0c             	sub    esp,0xc
c001079a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001079e:	e8 cd ff ff ff       	call   c0010770 <Timer::~Timer()>
c00107a3:	83 c4 10             	add    esp,0x10
c00107a6:	83 ec 08             	sub    esp,0x8
c00107a9:	68 5c 01 00 00       	push   0x15c
c00107ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107b2:	e8 63 c2 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c00107b7:	83 c4 10             	add    esp,0x10
c00107ba:	83 c4 0c             	add    esp,0xc
c00107bd:	c3                   	ret    

c00107be <Timer::read()>:
c00107be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00107c8:	c3                   	ret    

c00107c9 <timerHandler(unsigned int)>:
c00107c9:	56                   	push   esi
c00107ca:	53                   	push   ebx
c00107cb:	51                   	push   ecx
c00107cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d0:	01 05 cc 6a 02 c0    	add    DWORD PTR ds:0xc0026acc,eax
c00107d6:	80 3d ad 64 02 c0 00 	cmp    BYTE PTR ds:0xc00264ad,0x0
c00107dd:	0f 84 49 01 00 00    	je     c001092c <timerHandler(unsigned int)+0x163>
c00107e3:	fa                   	cli    
c00107e4:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c00107ea:	83 ec 0c             	sub    esp,0xc
c00107ed:	ff 05 64 79 02 c0    	inc    DWORD PTR ds:0xc0027964
c00107f3:	68 78 79 02 c0       	push   0xc0027978
c00107f8:	e8 97 0d 01 00       	call   c0021594 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107fd:	83 c4 10             	add    esp,0x10
c0010800:	84 c0                	test   al,al
c0010802:	0f 85 a0 00 00 00    	jne    c00108a8 <timerHandler(unsigned int)+0xdf>
c0010808:	83 ec 0c             	sub    esp,0xc
c001080b:	68 78 79 02 c0       	push   0xc0027978
c0010810:	e8 9b 0d 01 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010815:	83 c4 10             	add    esp,0x10
c0010818:	89 c6                	mov    esi,eax
c001081a:	66 90                	xchg   ax,ax
c001081c:	83 ec 0c             	sub    esp,0xc
c001081f:	68 78 79 02 c0       	push   0xc0027978
c0010824:	e8 87 0d 01 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010829:	c7 04 24 78 79 02 c0 	mov    DWORD PTR [esp],0xc0027978
c0010830:	89 c3                	mov    ebx,eax
c0010832:	e8 81 0d 01 00       	call   c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010837:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001083a:	83 c4 10             	add    esp,0x10
c001083d:	3b 05 cc 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026acc
c0010843:	77 23                	ja     c0010868 <timerHandler(unsigned int)+0x9f>
c0010845:	83 ec 0c             	sub    esp,0xc
c0010848:	53                   	push   ebx
c0010849:	e8 fe 7b 00 00       	call   c001844c <unblockTask(ThreadControlBlock*)>
c001084e:	83 c4 10             	add    esp,0x10
c0010851:	39 de                	cmp    esi,ebx
c0010853:	75 27                	jne    c001087c <timerHandler(unsigned int)+0xb3>
c0010855:	83 ec 0c             	sub    esp,0xc
c0010858:	68 78 79 02 c0       	push   0xc0027978
c001085d:	e8 4e 0d 01 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010862:	89 c6                	mov    esi,eax
c0010864:	eb 12                	jmp    c0010878 <timerHandler(unsigned int)+0xaf>
c0010866:	66 90                	xchg   ax,ax
c0010868:	52                   	push   edx
c0010869:	52                   	push   edx
c001086a:	53                   	push   ebx
c001086b:	68 78 79 02 c0       	push   0xc0027978
c0010870:	e8 fb 0d 01 00       	call   c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010875:	8d 76 00             	lea    esi,[esi+0x0]
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	90                   	nop
c001087c:	83 ec 0c             	sub    esp,0xc
c001087f:	68 78 79 02 c0       	push   0xc0027978
c0010884:	e8 0b 0d 01 00       	call   c0021594 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010889:	83 c4 10             	add    esp,0x10
c001088c:	84 c0                	test   al,al
c001088e:	75 18                	jne    c00108a8 <timerHandler(unsigned int)+0xdf>
c0010890:	83 ec 0c             	sub    esp,0xc
c0010893:	68 78 79 02 c0       	push   0xc0027978
c0010898:	e8 13 0d 01 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001089d:	83 c4 10             	add    esp,0x10
c00108a0:	39 f0                	cmp    eax,esi
c00108a2:	0f 85 74 ff ff ff    	jne    c001081c <timerHandler(unsigned int)+0x53>
c00108a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108ad:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c00108b1:	74 41                	je     c00108f4 <timerHandler(unsigned int)+0x12b>
c00108b3:	80 3d ac 64 02 c0 00 	cmp    BYTE PTR ds:0xc00264ac,0x0
c00108ba:	74 38                	je     c00108f4 <timerHandler(unsigned int)+0x12b>
c00108bc:	fa                   	cli    
c00108bd:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c00108c3:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c00108c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00108ce:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c00108d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00108d7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c00108da:	72 08                	jb     c00108e4 <timerHandler(unsigned int)+0x11b>
c00108dc:	e8 af 76 00 00       	call   c0017f90 <schedule()>
c00108e1:	8d 76 00             	lea    esi,[esi+0x0]
c00108e4:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00108e9:	48                   	dec    eax
c00108ea:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00108ef:	75 03                	jne    c00108f4 <timerHandler(unsigned int)+0x12b>
c00108f1:	fb                   	sti    
c00108f2:	66 90                	xchg   ax,ax
c00108f4:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108f9:	48                   	dec    eax
c00108fa:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c00108ff:	75 1b                	jne    c001091c <timerHandler(unsigned int)+0x153>
c0010901:	83 3d 60 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027960,0x0
c0010908:	74 12                	je     c001091c <timerHandler(unsigned int)+0x153>
c001090a:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c0010914:	e8 77 76 00 00       	call   c0017f90 <schedule()>
c0010919:	8d 76 00             	lea    esi,[esi+0x0]
c001091c:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0010921:	48                   	dec    eax
c0010922:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0010927:	75 03                	jne    c001092c <timerHandler(unsigned int)+0x163>
c0010929:	fb                   	sti    
c001092a:	66 90                	xchg   ax,ax
c001092c:	58                   	pop    eax
c001092d:	5b                   	pop    ebx
c001092e:	5e                   	pop    esi
c001092f:	c3                   	ret    

c0010930 <setupTimer(int)>:
c0010930:	57                   	push   edi
c0010931:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0010936:	56                   	push   esi
c0010937:	53                   	push   ebx
c0010938:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001093c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010942:	83 ec 0c             	sub    esp,0xc
c0010945:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001094b:	e8 f2 d8 ff ff       	call   c000e242 <Device::getName()>
c0010950:	83 c4 10             	add    esp,0x10
c0010953:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010956:	0f 85 94 00 00 00    	jne    c00109f0 <setupTimer(int)+0xc0>
c001095c:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0010961:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010968:	0f 84 82 00 00 00    	je     c00109f0 <setupTimer(int)+0xc0>
c001096e:	83 ec 0c             	sub    esp,0xc
c0010971:	68 5c 01 00 00       	push   0x15c
c0010976:	e8 48 90 ff ff       	call   c00099c3 <malloc>
c001097b:	89 04 24             	mov    DWORD PTR [esp],eax
c001097e:	89 c3                	mov    ebx,eax
c0010980:	e8 0f 02 01 00       	call   c0020b94 <PIT::PIT()>
c0010985:	59                   	pop    ecx
c0010986:	5f                   	pop    edi
c0010987:	53                   	push   ebx
c0010988:	ff 35 a8 64 02 c0    	push   DWORD PTR ds:0xc00264a8
c001098e:	e8 af d5 ff ff       	call   c000df42 <Device::addChild(Device*)>
c0010993:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010995:	6a 00                	push   0x0
c0010997:	6a 00                	push   0x0
c0010999:	56                   	push   esi
c001099a:	53                   	push   ebx
c001099b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001099e:	83 c4 14             	add    esp,0x14
c00109a1:	68 60 01 00 00       	push   0x160
c00109a6:	e8 18 90 ff ff       	call   c00099c3 <malloc>
c00109ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ae:	89 c7                	mov    edi,eax
c00109b0:	e8 93 00 01 00       	call   c0020a48 <APICTimer::APICTimer()>
c00109b5:	6a 00                	push   0x0
c00109b7:	6a 00                	push   0x0
c00109b9:	56                   	push   esi
c00109ba:	57                   	push   edi
c00109bb:	e8 88 ff 00 00       	call   c0020948 <APICTimer::open(int, int, void*)>
c00109c0:	83 c4 20             	add    esp,0x20
c00109c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109c5:	6a 00                	push   0x0
c00109c7:	6a 00                	push   0x0
c00109c9:	6a 00                	push   0x0
c00109cb:	53                   	push   ebx
c00109cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00109cf:	58                   	pop    eax
c00109d0:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00109d5:	5a                   	pop    edx
c00109d6:	57                   	push   edi
c00109d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00109dd:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00109e3:	e8 5a d5 ff ff       	call   c000df42 <Device::addChild(Device*)>
c00109e8:	83 c4 10             	add    esp,0x10
c00109eb:	eb 37                	jmp    c0010a24 <setupTimer(int)+0xf4>
c00109ed:	8d 76 00             	lea    esi,[esi+0x0]
c00109f0:	83 ec 0c             	sub    esp,0xc
c00109f3:	68 5c 01 00 00       	push   0x15c
c00109f8:	e8 c6 8f ff ff       	call   c00099c3 <malloc>
c00109fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a00:	89 c3                	mov    ebx,eax
c0010a02:	e8 8d 01 01 00       	call   c0020b94 <PIT::PIT()>
c0010a07:	58                   	pop    eax
c0010a08:	5a                   	pop    edx
c0010a09:	53                   	push   ebx
c0010a0a:	ff 35 a8 64 02 c0    	push   DWORD PTR ds:0xc00264a8
c0010a10:	e8 2d d5 ff ff       	call   c000df42 <Device::addChild(Device*)>
c0010a15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a17:	6a 00                	push   0x0
c0010a19:	6a 00                	push   0x0
c0010a1b:	56                   	push   esi
c0010a1c:	53                   	push   ebx
c0010a1d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a20:	83 c4 20             	add    esp,0x20
c0010a23:	90                   	nop
c0010a24:	89 d8                	mov    eax,ebx
c0010a26:	5b                   	pop    ebx
c0010a27:	5e                   	pop    esi
c0010a28:	5f                   	pop    edi
c0010a29:	c3                   	ret    
c0010a2a:	66 90                	xchg   ax,ax

c0010a2c <VCache::VCache(PhysicalDisk*)>:
c0010a2c:	53                   	push   ebx
c0010a2d:	83 ec 18             	sub    esp,0x18
c0010a30:	ba 28 3b 02 c0       	mov    edx,0xc0023b28
c0010a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a39:	89 10                	mov    DWORD PTR [eax],edx
c0010a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a3f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a4a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a55:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010a5c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010a63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a67:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010a6e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010a75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a79:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a84:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a8c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010a93:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a9e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aa6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010ab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010abd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010ac5:	83 ec 0c             	sub    esp,0xc
c0010ac8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010acc:	e8 f2 8e ff ff       	call   c00099c3 <malloc>
c0010ad1:	83 c4 10             	add    esp,0x10
c0010ad4:	89 c3                	mov    ebx,eax
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	53                   	push   ebx
c0010ada:	e8 81 72 00 00       	call   c0017d60 <Mutex::Mutex()>
c0010adf:	83 c4 10             	add    esp,0x10
c0010ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ae6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010ae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010af1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010af8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010aff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b03:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b0d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b14:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010b1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b20:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010b24:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010b27:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010b2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b2e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010b32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b36:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b3c:	05 00 01 00 00       	add    eax,0x100
c0010b41:	c1 e0 04             	shl    eax,0x4
c0010b44:	83 ec 0c             	sub    esp,0xc
c0010b47:	50                   	push   eax
c0010b48:	e8 76 8e ff ff       	call   c00099c3 <malloc>
c0010b4d:	83 c4 10             	add    esp,0x10
c0010b50:	89 c2                	mov    edx,eax
c0010b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b5d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b68:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010b6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b70:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b76:	c1 e0 06             	shl    eax,0x6
c0010b79:	83 ec 0c             	sub    esp,0xc
c0010b7c:	50                   	push   eax
c0010b7d:	e8 41 8e ff ff       	call   c00099c3 <malloc>
c0010b82:	83 c4 10             	add    esp,0x10
c0010b85:	89 c2                	mov    edx,eax
c0010b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b8b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010b8e:	90                   	nop
c0010b8f:	83 c4 18             	add    esp,0x18
c0010b92:	5b                   	pop    ebx
c0010b93:	c3                   	ret    

c0010b94 <VCache::invalidateReadBuffer()>:
c0010b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b98:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b9e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <VCache::writeWriteBuffer()>:
c0010ba4:	53                   	push   ebx
c0010ba5:	83 ec 0c             	sub    esp,0xc
c0010ba8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010baf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010bb2:	68 00 3a 02 c0       	push   0xc0023a00
c0010bb7:	e8 3f bf ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010bbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010bbf:	5a                   	pop    edx
c0010bc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bc2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010bc5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010bc8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010bcb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010bce:	50                   	push   eax
c0010bcf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010bd2:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010bd9:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010be0:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010be4:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010beb:	83 c4 28             	add    esp,0x28
c0010bee:	5b                   	pop    ebx
c0010bef:	c3                   	ret    

c0010bf0 <VCache::~VCache()>:
c0010bf0:	83 ec 0c             	sub    esp,0xc
c0010bf3:	ba 28 3b 02 c0       	mov    edx,0xc0023b28
c0010bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bfc:	89 10                	mov    DWORD PTR [eax],edx
c0010bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c02:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010c05:	84 c0                	test   al,al
c0010c07:	74 0f                	je     c0010c18 <VCache::~VCache()+0x28>
c0010c09:	83 ec 0c             	sub    esp,0xc
c0010c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c10:	e8 8f ff ff ff       	call   c0010ba4 <VCache::writeWriteBuffer()>
c0010c15:	83 c4 10             	add    esp,0x10
c0010c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010c1f:	83 ec 0c             	sub    esp,0xc
c0010c22:	50                   	push   eax
c0010c23:	e8 ab 8d ff ff       	call   c00099d3 <free>
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010c32:	83 ec 0c             	sub    esp,0xc
c0010c35:	50                   	push   eax
c0010c36:	e8 98 8d ff ff       	call   c00099d3 <free>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	90                   	nop
c0010c3f:	83 c4 0c             	add    esp,0xc
c0010c42:	c3                   	ret    
c0010c43:	90                   	nop

c0010c44 <VCache::~VCache()>:
c0010c44:	83 ec 0c             	sub    esp,0xc
c0010c47:	83 ec 0c             	sub    esp,0xc
c0010c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c4e:	e8 9d ff ff ff       	call   c0010bf0 <VCache::~VCache()>
c0010c53:	83 c4 10             	add    esp,0x10
c0010c56:	83 ec 08             	sub    esp,0x8
c0010c59:	6a 44                	push   0x44
c0010c5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c5f:	e8 b6 bd ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0010c64:	83 c4 10             	add    esp,0x10
c0010c67:	83 c4 0c             	add    esp,0xc
c0010c6a:	c3                   	ret    
c0010c6b:	90                   	nop

c0010c6c <VCache::write(unsigned long long, int, void*)>:
c0010c6c:	55                   	push   ebp
c0010c6d:	31 c0                	xor    eax,eax
c0010c6f:	57                   	push   edi
c0010c70:	56                   	push   esi
c0010c71:	53                   	push   ebx
c0010c72:	83 ec 0c             	sub    esp,0xc
c0010c75:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c79:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010c7d:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010c81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c85:	8d 76 00             	lea    esi,[esi+0x0]
c0010c88:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010c8c:	7d 16                	jge    c0010ca4 <VCache::write(unsigned long long, int, void*)+0x38>
c0010c8e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010c91:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010c97:	0f af c8             	imul   ecx,eax
c0010c9a:	89 ca                	mov    edx,ecx
c0010c9c:	01 f2                	add    edx,esi
c0010c9e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010ca0:	40                   	inc    eax
c0010ca1:	eb e5                	jmp    c0010c88 <VCache::write(unsigned long long, int, void*)+0x1c>
c0010ca3:	90                   	nop
c0010ca4:	83 ec 0c             	sub    esp,0xc
c0010ca7:	68 24 3a 02 c0       	push   0xc0023a24
c0010cac:	e8 4a be ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010cb1:	83 c4 10             	add    esp,0x10
c0010cb4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010cb8:	74 0e                	je     c0010cc8 <VCache::write(unsigned long long, int, void*)+0x5c>
c0010cba:	83 ec 0c             	sub    esp,0xc
c0010cbd:	53                   	push   ebx
c0010cbe:	e8 d1 fe ff ff       	call   c0010b94 <VCache::invalidateReadBuffer()>
c0010cc3:	83 c4 10             	add    esp,0x10
c0010cc6:	66 90                	xchg   ax,ax
c0010cc8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ccc:	74 66                	je     c0010d34 <VCache::write(unsigned long long, int, void*)+0xc8>
c0010cce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cd1:	99                   	cdq    
c0010cd2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010cd5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010cd8:	31 f8                	xor    eax,edi
c0010cda:	89 d1                	mov    ecx,edx
c0010cdc:	89 ca                	mov    edx,ecx
c0010cde:	31 ea                	xor    edx,ebp
c0010ce0:	09 d0                	or     eax,edx
c0010ce2:	75 44                	jne    c0010d28 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010ce4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010ce9:	75 3d                	jne    c0010d28 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010ceb:	83 ec 0c             	sub    esp,0xc
c0010cee:	68 4b 3a 02 c0       	push   0xc0023a4b
c0010cf3:	e8 03 be ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010cf8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cfb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010cfe:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010d04:	0f af f9             	imul   edi,ecx
c0010d07:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010d0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d0c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d0f:	83 c4 10             	add    esp,0x10
c0010d12:	40                   	inc    eax
c0010d13:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010d16:	83 f8 40             	cmp    eax,0x40
c0010d19:	75 7d                	jne    c0010d98 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010d1b:	83 ec 0c             	sub    esp,0xc
c0010d1e:	53                   	push   ebx
c0010d1f:	e8 80 fe ff ff       	call   c0010ba4 <VCache::writeWriteBuffer()>
c0010d24:	eb 42                	jmp    c0010d68 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010d26:	66 90                	xchg   ax,ax
c0010d28:	83 ec 0c             	sub    esp,0xc
c0010d2b:	53                   	push   ebx
c0010d2c:	e8 73 fe ff ff       	call   c0010ba4 <VCache::writeWriteBuffer()>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010d39:	7f 35                	jg     c0010d70 <VCache::write(unsigned long long, int, void*)+0x104>
c0010d3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010d3f:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010d42:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010d45:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010d48:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010d4c:	52                   	push   edx
c0010d4d:	56                   	push   esi
c0010d4e:	6a 01                	push   0x1
c0010d50:	68 61 3a 02 c0       	push   0xc0023a61
c0010d55:	e8 a1 bd ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010d5a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d5d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010d60:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010d66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d68:	83 c4 10             	add    esp,0x10
c0010d6b:	eb 2b                	jmp    c0010d98 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d70:	50                   	push   eax
c0010d71:	56                   	push   esi
c0010d72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010d76:	68 82 3a 02 c0       	push   0xc0023a82
c0010d7b:	e8 7b bd ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010d80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d83:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d85:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d8c:	55                   	push   ebp
c0010d8d:	57                   	push   edi
c0010d8e:	50                   	push   eax
c0010d8f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010d92:	83 c4 20             	add    esp,0x20
c0010d95:	8d 76 00             	lea    esi,[esi+0x0]
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	68 9f 3a 02 c0       	push   0xc0023a9f
c0010da0:	e8 56 bd ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010da5:	83 c4 1c             	add    esp,0x1c
c0010da8:	31 c0                	xor    eax,eax
c0010daa:	5b                   	pop    ebx
c0010dab:	5e                   	pop    esi
c0010dac:	5f                   	pop    edi
c0010dad:	5d                   	pop    ebp
c0010dae:	c3                   	ret    
c0010daf:	90                   	nop

c0010db0 <VCache::read(unsigned long long, int, void*)>:
c0010db0:	55                   	push   ebp
c0010db1:	57                   	push   edi
c0010db2:	56                   	push   esi
c0010db3:	53                   	push   ebx
c0010db4:	83 ec 1c             	sub    esp,0x1c
c0010db7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010dbb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dc2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010dc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010dca:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010dce:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010dd2:	31 c0                	xor    eax,eax
c0010dd4:	39 f0                	cmp    eax,esi
c0010dd6:	7d 18                	jge    c0010df0 <VCache::read(unsigned long long, int, void*)+0x40>
c0010dd8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010ddb:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010de1:	0f af f8             	imul   edi,eax
c0010de4:	89 fa                	mov    edx,edi
c0010de6:	01 ea                	add    edx,ebp
c0010de8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010dea:	40                   	inc    eax
c0010deb:	eb e7                	jmp    c0010dd4 <VCache::read(unsigned long long, int, void*)+0x24>
c0010ded:	8d 76 00             	lea    esi,[esi+0x0]
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	68 bf 3a 02 c0       	push   0xc0023abf
c0010df8:	e8 fe bc ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010dfd:	83 c4 10             	add    esp,0x10
c0010e00:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010e04:	74 0e                	je     c0010e14 <VCache::read(unsigned long long, int, void*)+0x64>
c0010e06:	83 ec 0c             	sub    esp,0xc
c0010e09:	53                   	push   ebx
c0010e0a:	e8 95 fd ff ff       	call   c0010ba4 <VCache::writeWriteBuffer()>
c0010e0f:	83 c4 10             	add    esp,0x10
c0010e12:	66 90                	xchg   ax,ax
c0010e14:	83 fe 01             	cmp    esi,0x1
c0010e17:	75 7b                	jne    c0010e94 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010e19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e1c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010e23:	75 6f                	jne    c0010e94 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010e25:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010e28:	89 d1                	mov    ecx,edx
c0010e2a:	f7 d9                	neg    ecx
c0010e2c:	89 cf                	mov    edi,ecx
c0010e2e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010e32:	c1 ff 1f             	sar    edi,0x1f
c0010e35:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010e38:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010e3c:	89 ce                	mov    esi,ecx
c0010e3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e42:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010e46:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010e4a:	89 cf                	mov    edi,ecx
c0010e4c:	74 0a                	je     c0010e58 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010e4e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010e51:	75 05                	jne    c0010e58 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010e53:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010e56:	74 1c                	je     c0010e74 <VCache::read(unsigned long long, int, void*)+0xc4>
c0010e58:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010e5c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010e5f:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010e62:	83 ec 0c             	sub    esp,0xc
c0010e65:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010e67:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010e6a:	52                   	push   edx
c0010e6b:	57                   	push   edi
c0010e6c:	56                   	push   esi
c0010e6d:	50                   	push   eax
c0010e6e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010e71:	83 c4 20             	add    esp,0x20
c0010e74:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e77:	89 ef                	mov    edi,ebp
c0010e79:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010e7f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010e82:	8d 70 ff             	lea    esi,[eax-0x1]
c0010e85:	23 34 24             	and    esi,DWORD PTR [esp]
c0010e88:	0f af f1             	imul   esi,ecx
c0010e8b:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010e8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e90:	eb 32                	jmp    c0010ec4 <VCache::read(unsigned long long, int, void*)+0x114>
c0010e92:	66 90                	xchg   ax,ax
c0010e94:	83 ec 0c             	sub    esp,0xc
c0010e97:	53                   	push   ebx
c0010e98:	e8 f7 fc ff ff       	call   c0010b94 <VCache::invalidateReadBuffer()>
c0010e9d:	83 c4 0c             	add    esp,0xc
c0010ea0:	55                   	push   ebp
c0010ea1:	56                   	push   esi
c0010ea2:	68 e5 3a 02 c0       	push   0xc0023ae5
c0010ea7:	e8 4f bc ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010eac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010eaf:	8b 10                	mov    edx,DWORD PTR [eax]
c0010eb1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010eb4:	56                   	push   esi
c0010eb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010eb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ebd:	50                   	push   eax
c0010ebe:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010ec1:	83 c4 20             	add    esp,0x20
c0010ec4:	83 ec 0c             	sub    esp,0xc
c0010ec7:	68 01 3b 02 c0       	push   0xc0023b01
c0010ecc:	e8 2a bc ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0010ed1:	83 c4 2c             	add    esp,0x2c
c0010ed4:	31 c0                	xor    eax,eax
c0010ed6:	5b                   	pop    ebx
c0010ed7:	5e                   	pop    esi
c0010ed8:	5f                   	pop    edi
c0010ed9:	5d                   	pop    ebp
c0010eda:	c3                   	ret    
c0010edb:	90                   	nop

c0010edc <Video::putrect(int, int, int, int, unsigned int)>:
c0010edc:	55                   	push   ebp
c0010edd:	57                   	push   edi
c0010ede:	56                   	push   esi
c0010edf:	53                   	push   ebx
c0010ee0:	83 ec 1c             	sub    esp,0x1c
c0010ee3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010ee7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010eeb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010eef:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010ef3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ef7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010efb:	01 df                	add    edi,ebx
c0010efd:	39 fb                	cmp    ebx,edi
c0010eff:	7d 1f                	jge    c0010f20 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010f01:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f05:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010f09:	7d 12                	jge    c0010f1d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010f0b:	8b 16                	mov    edx,DWORD PTR [esi]
c0010f0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010f11:	53                   	push   ebx
c0010f12:	55                   	push   ebp
c0010f13:	45                   	inc    ebp
c0010f14:	56                   	push   esi
c0010f15:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010f18:	83 c4 10             	add    esp,0x10
c0010f1b:	eb e8                	jmp    c0010f05 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010f1d:	43                   	inc    ebx
c0010f1e:	eb dd                	jmp    c0010efd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010f20:	83 c4 1c             	add    esp,0x1c
c0010f23:	5b                   	pop    ebx
c0010f24:	5e                   	pop    esi
c0010f25:	5f                   	pop    edi
c0010f26:	5d                   	pop    ebp
c0010f27:	c3                   	ret    

c0010f28 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010f28:	55                   	push   ebp
c0010f29:	57                   	push   edi
c0010f2a:	31 ff                	xor    edi,edi
c0010f2c:	56                   	push   esi
c0010f2d:	53                   	push   ebx
c0010f2e:	83 ec 1c             	sub    esp,0x1c
c0010f31:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010f35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010f39:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010f40:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010f45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f49:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010f4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010f51:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010f54:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f58:	01 f9                	add    ecx,edi
c0010f5a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010f5e:	7d 2f                	jge    c0010f8f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010f60:	31 f6                	xor    esi,esi
c0010f62:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010f66:	01 f2                	add    edx,esi
c0010f68:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010f6c:	7d 1a                	jge    c0010f88 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010f6e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f71:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010f74:	46                   	inc    esi
c0010f75:	51                   	push   ecx
c0010f76:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010f7a:	52                   	push   edx
c0010f7b:	55                   	push   ebp
c0010f7c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f7f:	83 c4 10             	add    esp,0x10
c0010f82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f86:	eb da                	jmp    c0010f62 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010f88:	47                   	inc    edi
c0010f89:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010f8d:	eb c5                	jmp    c0010f54 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010f8f:	83 c4 1c             	add    esp,0x1c
c0010f92:	5b                   	pop    ebx
c0010f93:	5e                   	pop    esi
c0010f94:	5f                   	pop    edi
c0010f95:	5d                   	pop    ebp
c0010f96:	c3                   	ret    
c0010f97:	90                   	nop

c0010f98 <Video::blit(unsigned int*, int, int, int, int)>:
c0010f98:	55                   	push   ebp
c0010f99:	57                   	push   edi
c0010f9a:	56                   	push   esi
c0010f9b:	53                   	push   ebx
c0010f9c:	83 ec 1c             	sub    esp,0x1c
c0010f9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010fa3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010fa7:	85 c0                	test   eax,eax
c0010fa9:	79 02                	jns    c0010fad <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010fab:	31 c0                	xor    eax,eax
c0010fad:	c1 e0 02             	shl    eax,0x2
c0010fb0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010fb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fb8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010fbc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010fc0:	39 d8                	cmp    eax,ebx
c0010fc2:	7e 49                	jle    c001100d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010fc4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010fca:	7c 41                	jl     c001100d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010fcc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010fd0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010fd4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010fd8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010fdc:	39 f9                	cmp    ecx,edi
c0010fde:	7e 22                	jle    c0011002 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010fe0:	83 c5 04             	add    ebp,0x4
c0010fe3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010fe9:	7c 14                	jl     c0010fff <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010feb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010fed:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010ff0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010ff4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010ff8:	56                   	push   esi
c0010ff9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010ffc:	83 c4 10             	add    esp,0x10
c0010fff:	47                   	inc    edi
c0011000:	eb d2                	jmp    c0010fd4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011006:	43                   	inc    ebx
c0011007:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001100b:	eb ab                	jmp    c0010fb8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001100d:	83 c4 1c             	add    esp,0x1c
c0011010:	5b                   	pop    ebx
c0011011:	5e                   	pop    esi
c0011012:	5f                   	pop    edi
c0011013:	5d                   	pop    ebp
c0011014:	c3                   	ret    
c0011015:	90                   	nop

c0011016 <Video::clearScreen(unsigned int)>:
c0011016:	57                   	push   edi
c0011017:	56                   	push   esi
c0011018:	53                   	push   ebx
c0011019:	31 db                	xor    ebx,ebx
c001101b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001101f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011025:	7e 1f                	jle    c0011046 <Video::clearScreen(unsigned int)+0x30>
c0011027:	31 ff                	xor    edi,edi
c0011029:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001102f:	7e 12                	jle    c0011043 <Video::clearScreen(unsigned int)+0x2d>
c0011031:	8b 06                	mov    eax,DWORD PTR [esi]
c0011033:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011037:	53                   	push   ebx
c0011038:	57                   	push   edi
c0011039:	47                   	inc    edi
c001103a:	56                   	push   esi
c001103b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001103e:	83 c4 10             	add    esp,0x10
c0011041:	eb e6                	jmp    c0011029 <Video::clearScreen(unsigned int)+0x13>
c0011043:	43                   	inc    ebx
c0011044:	eb d9                	jmp    c001101f <Video::clearScreen(unsigned int)+0x9>
c0011046:	5b                   	pop    ebx
c0011047:	5e                   	pop    esi
c0011048:	5f                   	pop    edi
c0011049:	c3                   	ret    

c001104a <Video::putpixel(int, int, unsigned int)>:
c001104a:	c7 44 24 04 30 3b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023b30
c0011052:	e9 66 33 00 00       	jmp    c00143bd <Krnl::panic(char const*)>
c0011057:	90                   	nop

c0011058 <Video::Video(char const*)>:
c0011058:	83 ec 0c             	sub    esp,0xc
c001105b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001105f:	83 ec 08             	sub    esp,0x8
c0011062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011066:	50                   	push   eax
c0011067:	e8 da d0 ff ff       	call   c000e146 <Device::Device(char const*)>
c001106c:	83 c4 10             	add    esp,0x10
c001106f:	ba a0 3b 02 c0       	mov    edx,0xc0023ba0
c0011074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011078:	89 10                	mov    DWORD PTR [eax],edx
c001107a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011088:	90                   	nop
c0011089:	83 c4 0c             	add    esp,0xc
c001108c:	c3                   	ret    
c001108d:	90                   	nop

c001108e <Video::~Video()>:
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	ba a0 3b 02 c0       	mov    edx,0xc0023ba0
c0011096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109a:	89 10                	mov    DWORD PTR [eax],edx
c001109c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	50                   	push   eax
c00110a4:	e8 67 cd ff ff       	call   c000de10 <Device::~Device()>
c00110a9:	83 c4 10             	add    esp,0x10
c00110ac:	90                   	nop
c00110ad:	83 c4 0c             	add    esp,0xc
c00110b0:	c3                   	ret    
c00110b1:	90                   	nop

c00110b2 <Video::~Video()>:
c00110b2:	83 ec 0c             	sub    esp,0xc
c00110b5:	83 ec 0c             	sub    esp,0xc
c00110b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bc:	e8 cd ff ff ff       	call   c001108e <Video::~Video()>
c00110c1:	83 c4 10             	add    esp,0x10
c00110c4:	83 ec 08             	sub    esp,0x8
c00110c7:	68 64 01 00 00       	push   0x164
c00110cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110d0:	e8 45 b9 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	83 c4 0c             	add    esp,0xc
c00110db:	c3                   	ret    

c00110dc <Video::isMonochrome()>:
c00110dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110e0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00110e6:	c3                   	ret    
c00110e7:	90                   	nop

c00110e8 <Video::getWidth()>:
c00110e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00110f2:	c3                   	ret    
c00110f3:	90                   	nop

c00110f4 <Video::getHeight()>:
c00110f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110f8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00110fe:	c3                   	ret    
c00110ff:	90                   	nop

c0011100 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011100:	55                   	push   ebp
c0011101:	57                   	push   edi
c0011102:	56                   	push   esi
c0011103:	53                   	push   ebx
c0011104:	83 ec 2c             	sub    esp,0x2c
c0011107:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001110b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001110f:	83 f8 01             	cmp    eax,0x1
c0011112:	19 c9                	sbb    ecx,ecx
c0011114:	31 db                	xor    ebx,ebx
c0011116:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001111a:	89 cd                	mov    ebp,ecx
c001111c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011124:	f7 d5                	not    ebp
c0011126:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001112c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011130:	01 d8                	add    eax,ebx
c0011132:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011136:	56                   	push   esi
c0011137:	e8 b8 ff ff ff       	call   c00110f4 <Video::getHeight()>
c001113c:	59                   	pop    ecx
c001113d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011141:	7e 70                	jle    c00111b3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011143:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011147:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001114b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001114e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011152:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011156:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001115d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011161:	89 f8                	mov    eax,edi
c0011163:	83 c0 20             	add    eax,0x20
c0011166:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001116a:	56                   	push   esi
c001116b:	e8 78 ff ff ff       	call   c00110e8 <Video::getWidth()>
c0011170:	5a                   	pop    edx
c0011171:	39 c7                	cmp    edi,eax
c0011173:	7d 34                	jge    c00111a9 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011175:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001117a:	74 05                	je     c0011181 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001117c:	8b 06                	mov    eax,DWORD PTR [esi]
c001117e:	55                   	push   ebp
c001117f:	eb 0d                	jmp    c001118e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011181:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011186:	74 12                	je     c001119a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011188:	8b 06                	mov    eax,DWORD PTR [esi]
c001118a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001118e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011192:	57                   	push   edi
c0011193:	56                   	push   esi
c0011194:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001119e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00111a2:	47                   	inc    edi
c00111a3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00111a7:	75 c1                	jne    c001116a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00111a9:	43                   	inc    ebx
c00111aa:	83 fb 20             	cmp    ebx,0x20
c00111ad:	0f 85 79 ff ff ff    	jne    c001112c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00111b3:	83 c4 2c             	add    esp,0x2c
c00111b6:	5b                   	pop    ebx
c00111b7:	5e                   	pop    esi
c00111b8:	5f                   	pop    edi
c00111b9:	5d                   	pop    ebp
c00111ba:	c3                   	ret    
c00111bb:	90                   	nop

c00111bc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00111bc:	55                   	push   ebp
c00111bd:	57                   	push   edi
c00111be:	56                   	push   esi
c00111bf:	53                   	push   ebx
c00111c0:	83 ec 28             	sub    esp,0x28
c00111c3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00111c7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00111cb:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00111cf:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00111d3:	c1 e6 08             	shl    esi,0x8
c00111d6:	01 c6                	add    esi,eax
c00111d8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00111dc:	c1 e0 08             	shl    eax,0x8
c00111df:	01 d0                	add    eax,edx
c00111e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111e9:	0f af c6             	imul   eax,esi
c00111ec:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00111f3:	50                   	push   eax
c00111f4:	e8 ca 87 ff ff       	call   c00099c3 <malloc>
c00111f9:	83 c4 10             	add    esp,0x10
c00111fc:	89 c7                	mov    edi,eax
c00111fe:	85 c0                	test   eax,eax
c0011200:	75 10                	jne    c0011212 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011202:	83 ec 0c             	sub    esp,0xc
c0011205:	68 51 3b 02 c0       	push   0xc0023b51
c001120a:	e8 ae 31 00 00       	call   c00143bd <Krnl::panic(char const*)>
c001120f:	83 c4 10             	add    esp,0x10
c0011212:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011215:	ba 12 00 00 00       	mov    edx,0x12
c001121a:	84 c0                	test   al,al
c001121c:	74 11                	je     c001122f <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001121e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011222:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011226:	c1 fa 03             	sar    edx,0x3
c0011229:	0f af d1             	imul   edx,ecx
c001122c:	83 c2 12             	add    edx,0x12
c001122f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011233:	74 04                	je     c0011239 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011235:	85 f6                	test   esi,esi
c0011237:	75 12                	jne    c001124b <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011239:	83 ec 0c             	sub    esp,0xc
c001123c:	68 61 3b 02 c0       	push   0xc0023b61
c0011241:	e8 b5 b8 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0011246:	e9 b8 00 00 00       	jmp    c0011303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001124b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001124f:	80 f9 02             	cmp    cl,0x2
c0011252:	0f 85 96 00 00 00    	jne    c00112ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011258:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001125d:	75 0e                	jne    c001126d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001125f:	84 c0                	test   al,al
c0011261:	75 0a                	jne    c001126d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011263:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011266:	83 e8 18             	sub    eax,0x18
c0011269:	a8 f7                	test   al,0xf7
c001126b:	74 0a                	je     c0011277 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001126d:	83 ec 0c             	sub    esp,0xc
c0011270:	68 76 3b 02 c0       	push   0xc0023b76
c0011275:	eb 7f                	jmp    c00112f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011277:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001127f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011287:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001128b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011293:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011297:	75 0c                	jne    c00112a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011299:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001129e:	c1 e0 18             	shl    eax,0x18
c00112a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112a5:	45                   	inc    ebp
c00112a6:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00112ab:	c1 e1 10             	shl    ecx,0x10
c00112ae:	89 c8                	mov    eax,ecx
c00112b0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00112b5:	c1 e1 08             	shl    ecx,0x8
c00112b8:	09 c1                	or     ecx,eax
c00112ba:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00112be:	09 c1                	or     ecx,eax
c00112c0:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00112c4:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00112c8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00112cc:	c1 f8 03             	sar    eax,0x3
c00112cf:	01 c2                	add    edx,eax
c00112d1:	89 e8                	mov    eax,ebp
c00112d3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00112d7:	39 c6                	cmp    esi,eax
c00112d9:	7f b0                	jg     c001128b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00112db:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00112df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00112e3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00112e6:	7e 22                	jle    c001130a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00112e8:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00112ec:	eb 99                	jmp    c0011287 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00112ee:	50                   	push   eax
c00112ef:	50                   	push   eax
c00112f0:	51                   	push   ecx
c00112f1:	68 84 3b 02 c0       	push   0xc0023b84
c00112f6:	e8 00 b8 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00112fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112fe:	e8 d0 86 ff ff       	call   c00099d3 <free>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	31 ff                	xor    edi,edi
c0011308:	eb 0f                	jmp    c0011319 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001130a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001130e:	89 30                	mov    DWORD PTR [eax],esi
c0011310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011314:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011317:	89 30                	mov    DWORD PTR [eax],esi
c0011319:	83 c4 1c             	add    esp,0x1c
c001131c:	89 f8                	mov    eax,edi
c001131e:	5b                   	pop    ebx
c001131f:	5e                   	pop    esi
c0011320:	5f                   	pop    edi
c0011321:	5d                   	pop    ebp
c0011322:	c3                   	ret    
c0011323:	90                   	nop

c0011324 <Video::putTGA(int, int, unsigned char*, int)>:
c0011324:	55                   	push   ebp
c0011325:	57                   	push   edi
c0011326:	56                   	push   esi
c0011327:	53                   	push   ebx
c0011328:	83 ec 28             	sub    esp,0x28
c001132b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001132f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011333:	50                   	push   eax
c0011334:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011338:	50                   	push   eax
c0011339:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001133d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011341:	56                   	push   esi
c0011342:	e8 75 fe ff ff       	call   c00111bc <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011347:	83 c4 20             	add    esp,0x20
c001134a:	85 c0                	test   eax,eax
c001134c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011350:	74 35                	je     c0011387 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011352:	89 c7                	mov    edi,eax
c0011354:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011358:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001135c:	39 d8                	cmp    eax,ebx
c001135e:	7e 27                	jle    c0011387 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011360:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011364:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011368:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001136c:	39 e8                	cmp    eax,ebp
c001136e:	7e 14                	jle    c0011384 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011370:	8b 06                	mov    eax,DWORD PTR [esi]
c0011372:	83 c7 04             	add    edi,0x4
c0011375:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011378:	53                   	push   ebx
c0011379:	55                   	push   ebp
c001137a:	45                   	inc    ebp
c001137b:	56                   	push   esi
c001137c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001137f:	83 c4 10             	add    esp,0x10
c0011382:	eb e0                	jmp    c0011364 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011384:	43                   	inc    ebx
c0011385:	eb cd                	jmp    c0011354 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011387:	83 c4 1c             	add    esp,0x1c
c001138a:	5b                   	pop    ebx
c001138b:	5e                   	pop    esi
c001138c:	5f                   	pop    edi
c001138d:	5d                   	pop    ebp
c001138e:	c3                   	ret    
c001138f:	90                   	nop

c0011390 <ACPI::close(int, int, void*)>:
c0011390:	83 ec 1c             	sub    esp,0x1c
c0011393:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001139b:	74 0b                	je     c00113a8 <ACPI::close(int, int, void*)+0x18>
c001139d:	b8 00 00 00 00       	mov    eax,0x0
c00113a2:	e9 99 00 00 00       	jmp    c0011440 <ACPI::close(int, int, void*)+0xb0>
c00113a7:	90                   	nop
c00113a8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00113ad:	75 29                	jne    c00113d8 <ACPI::close(int, int, void*)+0x48>
c00113af:	a1 e8 6a 02 c0       	mov    eax,ds:0xc0026ae8
c00113b4:	85 c0                	test   eax,eax
c00113b6:	74 08                	je     c00113c0 <ACPI::close(int, int, void*)+0x30>
c00113b8:	a1 e8 6a 02 c0       	mov    eax,ds:0xc0026ae8
c00113bd:	ff d0                	call   eax
c00113bf:	90                   	nop
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	68 e0 3b 02 c0       	push   0xc0023be0
c00113c8:	e8 f0 2f 00 00       	call   c00143bd <Krnl::panic(char const*)>
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113d5:	eb 69                	jmp    c0011440 <ACPI::close(int, int, void*)+0xb0>
c00113d7:	90                   	nop
c00113d8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00113dd:	75 59                	jne    c0011438 <ACPI::close(int, int, void*)+0xa8>
c00113df:	a1 e4 6a 02 c0       	mov    eax,ds:0xc0026ae4
c00113e4:	85 c0                	test   eax,eax
c00113e6:	74 08                	je     c00113f0 <ACPI::close(int, int, void*)+0x60>
c00113e8:	a1 e4 6a 02 c0       	mov    eax,ds:0xc0026ae4
c00113ed:	ff d0                	call   eax
c00113ef:	90                   	nop
c00113f0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00113f5:	8d 76 00             	lea    esi,[esi+0x0]
c00113f8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00113fd:	83 e0 02             	and    eax,0x2
c0011400:	74 1e                	je     c0011420 <ACPI::close(int, int, void*)+0x90>
c0011402:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001140d:	89 c2                	mov    edx,eax
c001140f:	ec                   	in     al,dx
c0011410:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011414:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011418:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001141c:	eb da                	jmp    c00113f8 <ACPI::close(int, int, void*)+0x68>
c001141e:	66 90                	xchg   ax,ax
c0011420:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011427:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001142c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011434:	ee                   	out    dx,al
c0011435:	8d 76 00             	lea    esi,[esi+0x0]
c0011438:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001143d:	8d 76 00             	lea    esi,[esi+0x0]
c0011440:	83 c4 1c             	add    esp,0x1c
c0011443:	c3                   	ret    

c0011444 <findRSDP()>:
c0011444:	83 ec 1c             	sub    esp,0x1c
c0011447:	83 ec 0c             	sub    esp,0xc
c001144a:	68 bb 3c 02 c0       	push   0xc0023cbb
c001144f:	e8 c9 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011454:	83 c4 10             	add    esp,0x10
c0011457:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c001145c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011462:	83 e0 04             	and    eax,0x4
c0011465:	84 c0                	test   al,al
c0011467:	75 0b                	jne    c0011474 <findRSDP()+0x30>
c0011469:	b8 00 00 00 00       	mov    eax,0x0
c001146e:	e9 a1 00 00 00       	jmp    c0011514 <findRSDP()+0xd0>
c0011473:	90                   	nop
c0011474:	a1 d8 64 02 c0       	mov    eax,ds:0xc00264d8
c0011479:	3d ff 07 00 00       	cmp    eax,0x7ff
c001147e:	7f 1c                	jg     c001149c <findRSDP()+0x58>
c0011480:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0011485:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001148b:	83 e2 fb             	and    edx,0xfffffffb
c001148e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011494:	b8 00 00 00 00       	mov    eax,0x0
c0011499:	eb 79                	jmp    c0011514 <findRSDP()+0xd0>
c001149b:	90                   	nop
c001149c:	83 ec 0c             	sub    esp,0xc
c001149f:	68 cb 3c 02 c0       	push   0xc0023ccb
c00114a4:	e8 74 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00114b4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00114bc:	77 3e                	ja     c00114fc <findRSDP()+0xb8>
c00114be:	83 ec 04             	sub    esp,0x4
c00114c1:	6a 08                	push   0x8
c00114c3:	68 e4 3c 02 c0       	push   0xc0023ce4
c00114c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114cc:	e8 af f0 fe ff       	call   c0000580 <memcmp>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	85 c0                	test   eax,eax
c00114d6:	0f 94 c0             	sete   al
c00114d9:	84 c0                	test   al,al
c00114db:	74 17                	je     c00114f4 <findRSDP()+0xb0>
c00114dd:	83 ec 0c             	sub    esp,0xc
c00114e0:	68 ed 3c 02 c0       	push   0xc0023ced
c00114e5:	e8 33 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114f1:	eb 21                	jmp    c0011514 <findRSDP()+0xd0>
c00114f3:	90                   	nop
c00114f4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00114f9:	eb b9                	jmp    c00114b4 <findRSDP()+0x70>
c00114fb:	90                   	nop
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	68 fb 3c 02 c0       	push   0xc0023cfb
c0011504:	e8 14 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011509:	83 c4 10             	add    esp,0x10
c001150c:	b8 00 00 00 00       	mov    eax,0x0
c0011511:	8d 76 00             	lea    esi,[esi+0x0]
c0011514:	83 c4 1c             	add    esp,0x1c
c0011517:	c3                   	ret    

c0011518 <loadACPITables(unsigned char*)>:
c0011518:	57                   	push   edi
c0011519:	56                   	push   esi
c001151a:	53                   	push   ebx
c001151b:	83 ec 60             	sub    esp,0x60
c001151e:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0011523:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011529:	83 e0 04             	and    eax,0x4
c001152c:	84 c0                	test   al,al
c001152e:	0f 84 3c 02 00 00    	je     c0011770 <loadACPITables(unsigned char*)+0x258>
c0011534:	a0 00 6d 02 c0       	mov    al,ds:0xc0026d00
c0011539:	84 c0                	test   al,al
c001153b:	74 77                	je     c00115b4 <loadACPITables(unsigned char*)+0x9c>
c001153d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011541:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011545:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011549:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154c:	83 e8 24             	sub    eax,0x24
c001154f:	c1 e8 03             	shr    eax,0x3
c0011552:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011556:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001155e:	66 90                	xchg   ax,ax
c0011560:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011564:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011568:	0f 8d b6 00 00 00    	jge    c0011624 <loadACPITables(unsigned char*)+0x10c>
c001156e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011572:	83 c0 24             	add    eax,0x24
c0011575:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011579:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001157d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011581:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011585:	c1 e0 03             	shl    eax,0x3
c0011588:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001158c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011590:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011593:	8b 00                	mov    eax,DWORD PTR [eax]
c0011595:	89 c1                	mov    ecx,eax
c0011597:	a1 ec 6a 02 c0       	mov    eax,ds:0xc0026aec
c001159c:	8d 50 01             	lea    edx,[eax+0x1]
c001159f:	89 15 ec 6a 02 c0    	mov    DWORD PTR ds:0xc0026aec,edx
c00115a5:	89 ca                	mov    edx,ecx
c00115a7:	89 14 c5 04 6b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd94fc],edx
c00115ae:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00115b2:	eb ac                	jmp    c0011560 <loadACPITables(unsigned char*)+0x48>
c00115b4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00115b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00115bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c3:	83 e8 24             	sub    eax,0x24
c00115c6:	c1 e8 02             	shr    eax,0x2
c00115c9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00115cd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00115d5:	8d 76 00             	lea    esi,[esi+0x0]
c00115d8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00115dc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00115e0:	7d 42                	jge    c0011624 <loadACPITables(unsigned char*)+0x10c>
c00115e2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00115e6:	83 c0 24             	add    eax,0x24
c00115e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00115ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00115f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00115f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00115f9:	c1 e0 02             	shl    eax,0x2
c00115fc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011600:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011604:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011606:	a1 ec 6a 02 c0       	mov    eax,ds:0xc0026aec
c001160b:	8d 50 01             	lea    edx,[eax+0x1]
c001160e:	89 15 ec 6a 02 c0    	mov    DWORD PTR ds:0xc0026aec,edx
c0011614:	89 ca                	mov    edx,ecx
c0011616:	89 14 c5 04 6b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd94fc],edx
c001161d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011621:	eb b5                	jmp    c00115d8 <loadACPITables(unsigned char*)+0xc0>
c0011623:	90                   	nop
c0011624:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001162c:	a1 ec 6a 02 c0       	mov    eax,ds:0xc0026aec
c0011631:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011635:	0f 8d 39 01 00 00    	jge    c0011774 <loadACPITables(unsigned char*)+0x25c>
c001163b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001163f:	8b 04 c5 04 6b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd94fc]
c0011646:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001164a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001164e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011652:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011656:	25 ff 0f 00 00       	and    eax,0xfff
c001165b:	89 c6                	mov    esi,eax
c001165d:	8b 1d d0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d0
c0011663:	83 ec 0c             	sub    esp,0xc
c0011666:	6a 01                	push   0x1
c0011668:	e8 bc a0 ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c001166d:	83 c4 10             	add    esp,0x10
c0011670:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011674:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001167a:	83 ec 0c             	sub    esp,0xc
c001167d:	6a 01                	push   0x1
c001167f:	6a 01                	push   0x1
c0011681:	50                   	push   eax
c0011682:	52                   	push   edx
c0011683:	53                   	push   ebx
c0011684:	e8 3d aa ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011689:	83 c4 20             	add    esp,0x20
c001168c:	09 f0                	or     eax,esi
c001168e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011692:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011696:	c1 e0 03             	shl    eax,0x3
c0011699:	05 00 6b 02 c0       	add    eax,0xc0026b00
c001169e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116aa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00116b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00116ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00116c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00116c6:	89 c6                	mov    esi,eax
c00116c8:	89 d7                	mov    edi,edx
c00116ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116cc:	89 c8                	mov    eax,ecx
c00116ce:	89 fa                	mov    edx,edi
c00116d0:	89 f3                	mov    ebx,esi
c00116d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00116d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00116da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00116e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116ed:	05 00 10 00 00       	add    eax,0x1000
c00116f2:	c1 e8 0c             	shr    eax,0xc
c00116f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00116f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011705:	25 ff 0f 00 00       	and    eax,0xfff
c001170a:	89 c6                	mov    esi,eax
c001170c:	8b 1d d0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d0
c0011712:	83 ec 0c             	sub    esp,0xc
c0011715:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011719:	e8 0b a0 ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011725:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001172b:	83 ec 0c             	sub    esp,0xc
c001172e:	6a 01                	push   0x1
c0011730:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011734:	50                   	push   eax
c0011735:	52                   	push   edx
c0011736:	53                   	push   ebx
c0011737:	e8 8a a9 ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001173c:	83 c4 20             	add    esp,0x20
c001173f:	09 f0                	or     eax,esi
c0011741:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011749:	83 ec 0c             	sub    esp,0xc
c001174c:	50                   	push   eax
c001174d:	e8 07 a3 ff ff       	call   c000ba59 <Virt::freeKernelVirtualPages(unsigned long)>
c0011752:	83 c4 10             	add    esp,0x10
c0011755:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011759:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001175d:	89 14 c5 04 6b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd94fc],edx
c0011764:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011768:	e9 bf fe ff ff       	jmp    c001162c <loadACPITables(unsigned char*)+0x114>
c001176d:	8d 76 00             	lea    esi,[esi+0x0]
c0011770:	90                   	nop
c0011771:	8d 76 00             	lea    esi,[esi+0x0]
c0011774:	83 c4 60             	add    esp,0x60
c0011777:	5b                   	pop    ebx
c0011778:	5e                   	pop    esi
c0011779:	5f                   	pop    edi
c001177a:	c3                   	ret    
c001177b:	90                   	nop

c001177c <findRSDT(unsigned char*)>:
c001177c:	57                   	push   edi
c001177d:	56                   	push   esi
c001177e:	53                   	push   ebx
c001177f:	83 ec 50             	sub    esp,0x50
c0011782:	83 ec 0c             	sub    esp,0xc
c0011785:	68 0f 3d 02 c0       	push   0xc0023d0f
c001178a:	e8 8e 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001178f:	83 c4 10             	add    esp,0x10
c0011792:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0011797:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001179d:	83 e0 04             	and    eax,0x4
c00117a0:	84 c0                	test   al,al
c00117a2:	75 0c                	jne    c00117b0 <findRSDT(unsigned char*)+0x34>
c00117a4:	b8 00 00 00 00       	mov    eax,0x0
c00117a9:	e9 86 01 00 00       	jmp    c0011934 <findRSDT(unsigned char*)+0x1b8>
c00117ae:	66 90                	xchg   ax,ax
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	68 21 3d 02 c0       	push   0xc0023d21
c00117b8:	e8 60 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00117bd:	83 c4 10             	add    esp,0x10
c00117c0:	89 e0                	mov    eax,esp
c00117c2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00117c6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00117ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00117ce:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00117d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00117de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00117e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00117e6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00117ea:	89 c6                	mov    esi,eax
c00117ec:	89 d7                	mov    edi,edx
c00117ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00117f0:	89 c8                	mov    eax,ecx
c00117f2:	89 fa                	mov    edx,edi
c00117f4:	89 f3                	mov    ebx,esi
c00117f6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00117fa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00117fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011802:	83 ec 0c             	sub    esp,0xc
c0011805:	68 33 3d 02 c0       	push   0xc0023d33
c001180a:	e8 0e 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001180f:	83 c4 10             	add    esp,0x10
c0011812:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011816:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001181a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011822:	83 ec 0c             	sub    esp,0xc
c0011825:	68 45 3d 02 c0       	push   0xc0023d45
c001182a:	e8 ee 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001182f:	83 c4 10             	add    esp,0x10
c0011832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001183a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001183e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011842:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011846:	83 ec 04             	sub    esp,0x4
c0011849:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001184d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011851:	68 04 3c 02 c0       	push   0xc0023c04
c0011856:	e8 a0 b2 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001185b:	83 c4 10             	add    esp,0x10
c001185e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011862:	25 ff 0f 00 00       	and    eax,0xfff
c0011867:	89 c6                	mov    esi,eax
c0011869:	8b 1d d0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d0
c001186f:	83 ec 0c             	sub    esp,0xc
c0011872:	6a 02                	push   0x2
c0011874:	e8 b0 9e ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011880:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011886:	83 ec 0c             	sub    esp,0xc
c0011889:	6a 01                	push   0x1
c001188b:	6a 02                	push   0x2
c001188d:	50                   	push   eax
c001188e:	52                   	push   edx
c001188f:	53                   	push   ebx
c0011890:	e8 31 a8 ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011895:	83 c4 20             	add    esp,0x20
c0011898:	09 f0                	or     eax,esi
c001189a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001189e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118a2:	25 ff 0f 00 00       	and    eax,0xfff
c00118a7:	89 c6                	mov    esi,eax
c00118a9:	8b 1d d0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d0
c00118af:	83 ec 0c             	sub    esp,0xc
c00118b2:	6a 02                	push   0x2
c00118b4:	e8 70 9e ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c00118b9:	83 c4 10             	add    esp,0x10
c00118bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00118c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00118c6:	83 ec 0c             	sub    esp,0xc
c00118c9:	6a 01                	push   0x1
c00118cb:	6a 02                	push   0x2
c00118cd:	50                   	push   eax
c00118ce:	52                   	push   edx
c00118cf:	53                   	push   ebx
c00118d0:	e8 f1 a7 ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00118d5:	83 c4 20             	add    esp,0x20
c00118d8:	09 f0                	or     eax,esi
c00118da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00118de:	83 ec 04             	sub    esp,0x4
c00118e1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00118e5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00118e9:	68 24 3c 02 c0       	push   0xc0023c24
c00118ee:	e8 08 b2 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00118fb:	75 13                	jne    c0011910 <findRSDT(unsigned char*)+0x194>
c00118fd:	c6 05 00 6d 02 c0 00 	mov    BYTE PTR ds:0xc0026d00,0x0
c0011904:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011908:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001190c:	eb 22                	jmp    c0011930 <findRSDT(unsigned char*)+0x1b4>
c001190e:	66 90                	xchg   ax,ax
c0011910:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011915:	75 11                	jne    c0011928 <findRSDT(unsigned char*)+0x1ac>
c0011917:	c6 05 00 6d 02 c0 01 	mov    BYTE PTR ds:0xc0026d00,0x1
c001191e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011922:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011926:	eb 08                	jmp    c0011930 <findRSDT(unsigned char*)+0x1b4>
c0011928:	b8 00 00 00 00       	mov    eax,0x0
c001192d:	eb 05                	jmp    c0011934 <findRSDT(unsigned char*)+0x1b8>
c001192f:	90                   	nop
c0011930:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011934:	83 c4 50             	add    esp,0x50
c0011937:	5b                   	pop    ebx
c0011938:	5e                   	pop    esi
c0011939:	5f                   	pop    edi
c001193a:	c3                   	ret    
c001193b:	90                   	nop

c001193c <findDataTable(unsigned char*, char*)>:
c001193c:	83 ec 1c             	sub    esp,0x1c
c001193f:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0011944:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001194a:	83 e0 04             	and    eax,0x4
c001194d:	84 c0                	test   al,al
c001194f:	75 07                	jne    c0011958 <findDataTable(unsigned char*, char*)+0x1c>
c0011951:	b8 00 00 00 00       	mov    eax,0x0
c0011956:	eb 58                	jmp    c00119b0 <findDataTable(unsigned char*, char*)+0x74>
c0011958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011960:	a1 ec 6a 02 c0       	mov    eax,ds:0xc0026aec
c0011965:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011969:	7d 3d                	jge    c00119a8 <findDataTable(unsigned char*, char*)+0x6c>
c001196b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001196f:	c1 e0 03             	shl    eax,0x3
c0011972:	05 00 6b 02 c0       	add    eax,0xc0026b00
c0011977:	83 ec 04             	sub    esp,0x4
c001197a:	6a 04                	push   0x4
c001197c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011980:	50                   	push   eax
c0011981:	e8 fa eb fe ff       	call   c0000580 <memcmp>
c0011986:	83 c4 10             	add    esp,0x10
c0011989:	85 c0                	test   eax,eax
c001198b:	0f 94 c0             	sete   al
c001198e:	84 c0                	test   al,al
c0011990:	74 0e                	je     c00119a0 <findDataTable(unsigned char*, char*)+0x64>
c0011992:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011996:	8b 04 c5 04 6b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd94fc]
c001199d:	eb 11                	jmp    c00119b0 <findDataTable(unsigned char*, char*)+0x74>
c001199f:	90                   	nop
c00119a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00119a4:	eb ba                	jmp    c0011960 <findDataTable(unsigned char*, char*)+0x24>
c00119a6:	66 90                	xchg   ax,ax
c00119a8:	b8 00 00 00 00       	mov    eax,0x0
c00119ad:	8d 76 00             	lea    esi,[esi+0x0]
c00119b0:	83 c4 1c             	add    esp,0x1c
c00119b3:	c3                   	ret    

c00119b4 <scanMADT()>:
c00119b4:	53                   	push   ebx
c00119b5:	83 ec 38             	sub    esp,0x38
c00119b8:	83 ec 0c             	sub    esp,0xc
c00119bb:	68 57 3d 02 c0       	push   0xc0023d57
c00119c0:	e8 58 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	a1 c0 64 02 c0       	mov    eax,ds:0xc00264c0
c00119cd:	25 00 04 00 00       	and    eax,0x400
c00119d2:	74 14                	je     c00119e8 <scanMADT()+0x34>
c00119d4:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00119d9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119df:	83 e2 fb             	and    edx,0xfffffffb
c00119e2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119e8:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00119ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00119f3:	83 e0 04             	and    eax,0x4
c00119f6:	84 c0                	test   al,al
c00119f8:	0f 84 82 04 00 00    	je     c0011e80 <scanMADT()+0x4cc>
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	68 64 3d 02 c0       	push   0xc0023d64
c0011a06:	e8 12 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a0b:	83 c4 10             	add    esp,0x10
c0011a0e:	e8 31 fa ff ff       	call   c0011444 <findRSDP()>
c0011a13:	a3 0c 6d 02 c0       	mov    ds:0xc0026d0c,eax
c0011a18:	a1 0c 6d 02 c0       	mov    eax,ds:0xc0026d0c
c0011a1d:	85 c0                	test   eax,eax
c0011a1f:	75 1b                	jne    c0011a3c <scanMADT()+0x88>
c0011a21:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0011a26:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a2c:	83 e2 fb             	and    edx,0xfffffffb
c0011a2f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a35:	e9 4e 04 00 00       	jmp    c0011e88 <scanMADT()+0x4d4>
c0011a3a:	66 90                	xchg   ax,ax
c0011a3c:	83 ec 0c             	sub    esp,0xc
c0011a3f:	68 76 3d 02 c0       	push   0xc0023d76
c0011a44:	e8 d4 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	a1 0c 6d 02 c0       	mov    eax,ds:0xc0026d0c
c0011a51:	83 ec 0c             	sub    esp,0xc
c0011a54:	50                   	push   eax
c0011a55:	e8 22 fd ff ff       	call   c001177c <findRSDT(unsigned char*)>
c0011a5a:	83 c4 10             	add    esp,0x10
c0011a5d:	a3 08 6d 02 c0       	mov    ds:0xc0026d08,eax
c0011a62:	a1 08 6d 02 c0       	mov    eax,ds:0xc0026d08
c0011a67:	85 c0                	test   eax,eax
c0011a69:	75 19                	jne    c0011a84 <scanMADT()+0xd0>
c0011a6b:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0011a70:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a76:	83 e2 fb             	and    edx,0xfffffffb
c0011a79:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a7f:	e9 04 04 00 00       	jmp    c0011e88 <scanMADT()+0x4d4>
c0011a84:	83 ec 0c             	sub    esp,0xc
c0011a87:	68 86 3d 02 c0       	push   0xc0023d86
c0011a8c:	e8 8c 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	a1 08 6d 02 c0       	mov    eax,ds:0xc0026d08
c0011a99:	83 ec 0c             	sub    esp,0xc
c0011a9c:	50                   	push   eax
c0011a9d:	e8 76 fa ff ff       	call   c0011518 <loadACPITables(unsigned char*)>
c0011aa2:	83 c4 10             	add    esp,0x10
c0011aa5:	a1 08 6d 02 c0       	mov    eax,ds:0xc0026d08
c0011aaa:	83 ec 08             	sub    esp,0x8
c0011aad:	68 9e 3d 02 c0       	push   0xc0023d9e
c0011ab2:	50                   	push   eax
c0011ab3:	e8 84 fe ff ff       	call   c001193c <findDataTable(unsigned char*, char*)>
c0011ab8:	83 c4 10             	add    esp,0x10
c0011abb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011abf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011ac4:	75 1a                	jne    c0011ae0 <scanMADT()+0x12c>
c0011ac6:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0011acb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ad1:	83 e2 fe             	and    edx,0xfffffffe
c0011ad4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ada:	e9 a9 03 00 00       	jmp    c0011e88 <scanMADT()+0x4d4>
c0011adf:	90                   	nop
c0011ae0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011ae8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011aec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011aef:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011af3:	0f 87 8f 03 00 00    	ja     c0011e88 <scanMADT()+0x4d4>
c0011af9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011b01:	0f 87 81 03 00 00    	ja     c0011e88 <scanMADT()+0x4d4>
c0011b07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011b0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b13:	8d 50 01             	lea    edx,[eax+0x1]
c0011b16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b1e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011b22:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011b26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b2a:	8d 50 01             	lea    edx,[eax+0x1]
c0011b2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b35:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011b39:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011b3d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011b42:	0f 86 3c 03 00 00    	jbe    c0011e84 <scanMADT()+0x4d0>
c0011b48:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011b4d:	75 59                	jne    c0011ba8 <scanMADT()+0x1f4>
c0011b4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b53:	8d 50 01             	lea    edx,[eax+0x1]
c0011b56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b5a:	8a 15 00 6f 02 c0    	mov    dl,BYTE PTR ds:0xc0026f00
c0011b60:	0f b6 d2             	movzx  edx,dl
c0011b63:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b67:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b6b:	88 82 40 6f 02 c0    	mov    BYTE PTR [edx-0x3ffd90c0],al
c0011b71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b75:	8d 50 01             	lea    edx,[eax+0x1]
c0011b78:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b7c:	8a 15 00 6f 02 c0    	mov    dl,BYTE PTR ds:0xc0026f00
c0011b82:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011b85:	88 0d 00 6f 02 c0    	mov    BYTE PTR ds:0xc0026f00,cl
c0011b8b:	0f b6 d2             	movzx  edx,dl
c0011b8e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b92:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b96:	88 82 20 6f 02 c0    	mov    BYTE PTR [edx-0x3ffd90e0],al
c0011b9c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011ba1:	e9 c6 02 00 00       	jmp    c0011e6c <scanMADT()+0x4b8>
c0011ba6:	66 90                	xchg   ax,ax
c0011ba8:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011bad:	0f 85 15 01 00 00    	jne    c0011cc8 <scanMADT()+0x314>
c0011bb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0011bba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011bbe:	8a 15 c0 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026dc0
c0011bc4:	0f b6 d2             	movzx  edx,dl
c0011bc7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011bcb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011bcf:	88 82 e0 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd9220],al
c0011bd5:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011bd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bdd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011be1:	01 d0                	add    eax,edx
c0011be3:	83 c0 2c             	add    eax,0x2c
c0011be6:	8a 00                	mov    al,BYTE PTR [eax]
c0011be8:	0f b6 d0             	movzx  edx,al
c0011beb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bef:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bf6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bfa:	0f b6 c0             	movzx  eax,al
c0011bfd:	c1 e0 08             	shl    eax,0x8
c0011c00:	89 d1                	mov    ecx,edx
c0011c02:	09 c1                	or     ecx,eax
c0011c04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c08:	8d 50 02             	lea    edx,[eax+0x2]
c0011c0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c0f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c13:	0f b6 c0             	movzx  eax,al
c0011c16:	c1 e0 10             	shl    eax,0x10
c0011c19:	09 c1                	or     ecx,eax
c0011c1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c1f:	8d 50 03             	lea    edx,[eax+0x3]
c0011c22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c2a:	0f b6 c0             	movzx  eax,al
c0011c2d:	c1 e0 18             	shl    eax,0x18
c0011c30:	09 c1                	or     ecx,eax
c0011c32:	89 ca                	mov    edx,ecx
c0011c34:	a0 c0 6d 02 c0       	mov    al,ds:0xc0026dc0
c0011c39:	0f b6 c0             	movzx  eax,al
c0011c3c:	89 14 85 00 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9200],edx
c0011c43:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c50:	01 d0                	add    eax,edx
c0011c52:	83 c0 2c             	add    eax,0x2c
c0011c55:	8a 00                	mov    al,BYTE PTR [eax]
c0011c57:	0f b6 d0             	movzx  edx,al
c0011c5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c5e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c65:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c69:	0f b6 c0             	movzx  eax,al
c0011c6c:	c1 e0 08             	shl    eax,0x8
c0011c6f:	89 d1                	mov    ecx,edx
c0011c71:	09 c1                	or     ecx,eax
c0011c73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c77:	8d 50 02             	lea    edx,[eax+0x2]
c0011c7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c7e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c82:	0f b6 c0             	movzx  eax,al
c0011c85:	c1 e0 10             	shl    eax,0x10
c0011c88:	09 c1                	or     ecx,eax
c0011c8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c8e:	8d 50 03             	lea    edx,[eax+0x3]
c0011c91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c95:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c99:	0f b6 c0             	movzx  eax,al
c0011c9c:	c1 e0 18             	shl    eax,0x18
c0011c9f:	09 c1                	or     ecx,eax
c0011ca1:	89 ca                	mov    edx,ecx
c0011ca3:	a0 c0 6d 02 c0       	mov    al,ds:0xc0026dc0
c0011ca8:	0f b6 c0             	movzx  eax,al
c0011cab:	89 14 85 80 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9180],edx
c0011cb2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011cb7:	a0 c0 6d 02 c0       	mov    al,ds:0xc0026dc0
c0011cbc:	40                   	inc    eax
c0011cbd:	a2 c0 6d 02 c0       	mov    ds:0xc0026dc0,al
c0011cc2:	e9 a5 01 00 00       	jmp    c0011e6c <scanMADT()+0x4b8>
c0011cc7:	90                   	nop
c0011cc8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011ccd:	0f 85 e9 00 00 00    	jne    c0011dbc <scanMADT()+0x408>
c0011cd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd7:	8d 50 01             	lea    edx,[eax+0x1]
c0011cda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cde:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ce2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ce6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011cea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cee:	8d 50 01             	lea    edx,[eax+0x1]
c0011cf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cf5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cf9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cfd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011d01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d09:	01 d0                	add    eax,edx
c0011d0b:	83 c0 2c             	add    eax,0x2c
c0011d0e:	8a 00                	mov    al,BYTE PTR [eax]
c0011d10:	0f b6 d0             	movzx  edx,al
c0011d13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d17:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d1e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d22:	0f b6 c0             	movzx  eax,al
c0011d25:	c1 e0 08             	shl    eax,0x8
c0011d28:	89 d1                	mov    ecx,edx
c0011d2a:	09 c1                	or     ecx,eax
c0011d2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d30:	8d 50 02             	lea    edx,[eax+0x2]
c0011d33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d37:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d3b:	0f b6 c0             	movzx  eax,al
c0011d3e:	c1 e0 10             	shl    eax,0x10
c0011d41:	09 c1                	or     ecx,eax
c0011d43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d47:	8d 50 03             	lea    edx,[eax+0x3]
c0011d4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d4e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d52:	0f b6 c0             	movzx  eax,al
c0011d55:	c1 e0 18             	shl    eax,0x18
c0011d58:	09 c8                	or     eax,ecx
c0011d5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d5e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d6b:	01 d0                	add    eax,edx
c0011d6d:	83 c0 2c             	add    eax,0x2c
c0011d70:	8a 00                	mov    al,BYTE PTR [eax]
c0011d72:	0f b6 c0             	movzx  eax,al
c0011d75:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d79:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d80:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011d84:	0f b6 d2             	movzx  edx,dl
c0011d87:	c1 e2 08             	shl    edx,0x8
c0011d8a:	09 d0                	or     eax,edx
c0011d8c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011d91:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d96:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011d9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d9f:	88 90 a0 5b 02 c0    	mov    BYTE PTR [eax-0x3ffda460],dl
c0011da5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011daa:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011daf:	66 89 84 12 a0 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9260],ax
c0011db7:	e9 b0 00 00 00       	jmp    c0011e6c <scanMADT()+0x4b8>
c0011dbc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011dc1:	0f 85 99 00 00 00    	jne    c0011e60 <scanMADT()+0x4ac>
c0011dc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dcb:	8d 50 01             	lea    edx,[eax+0x1]
c0011dce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011dd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dd6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dda:	0f b6 c0             	movzx  eax,al
c0011ddd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011de1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011de5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011de9:	01 d0                	add    eax,edx
c0011deb:	83 c0 2c             	add    eax,0x2c
c0011dee:	8a 00                	mov    al,BYTE PTR [eax]
c0011df0:	0f b6 d0             	movzx  edx,al
c0011df3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011df7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dfe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011e02:	0f b6 c0             	movzx  eax,al
c0011e05:	c1 e0 08             	shl    eax,0x8
c0011e08:	09 d0                	or     eax,edx
c0011e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e0e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011e13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e17:	8d 50 01             	lea    edx,[eax+0x1]
c0011e1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e22:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e26:	0f b6 c0             	movzx  eax,al
c0011e29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e31:	c1 e0 08             	shl    eax,0x8
c0011e34:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011e38:	89 c1                	mov    ecx,eax
c0011e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e3e:	c1 e0 18             	shl    eax,0x18
c0011e41:	89 c3                	mov    ebx,eax
c0011e43:	a1 10 6d 02 c0       	mov    eax,ds:0xc0026d10
c0011e48:	8d 50 01             	lea    edx,[eax+0x1]
c0011e4b:	89 15 10 6d 02 c0    	mov    DWORD PTR ds:0xc0026d10,edx
c0011e51:	09 d9                	or     ecx,ebx
c0011e53:	89 ca                	mov    edx,ecx
c0011e55:	89 14 85 20 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd92e0],edx
c0011e5c:	eb 0e                	jmp    c0011e6c <scanMADT()+0x4b8>
c0011e5e:	66 90                	xchg   ax,ax
c0011e60:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011e65:	75 05                	jne    c0011e6c <scanMADT()+0x4b8>
c0011e67:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011e6c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011e71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e75:	01 d0                	add    eax,edx
c0011e77:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e7b:	e9 68 fc ff ff       	jmp    c0011ae8 <scanMADT()+0x134>
c0011e80:	90                   	nop
c0011e81:	eb 05                	jmp    c0011e88 <scanMADT()+0x4d4>
c0011e83:	90                   	nop
c0011e84:	90                   	nop
c0011e85:	8d 76 00             	lea    esi,[esi+0x0]
c0011e88:	83 c4 38             	add    esp,0x38
c0011e8b:	5b                   	pop    ebx
c0011e8c:	c3                   	ret    
c0011e8d:	90                   	nop
c0011e8e:	66 90                	xchg   ax,ax

c0011e90 <ACPI::ACPI()>:
c0011e90:	83 ec 0c             	sub    esp,0xc
c0011e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e97:	83 ec 08             	sub    esp,0x8
c0011e9a:	68 a3 3d 02 c0       	push   0xc0023da3
c0011e9f:	50                   	push   eax
c0011ea0:	e8 a1 c2 ff ff       	call   c000e146 <Device::Device(char const*)>
c0011ea5:	83 c4 10             	add    esp,0x10
c0011ea8:	ba 2c 3f 02 c0       	mov    edx,0xc0023f2c
c0011ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb1:	89 10                	mov    DWORD PTR [eax],edx
c0011eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011eda:	83 ec 0c             	sub    esp,0xc
c0011edd:	68 a8 3d 02 c0       	push   0xc0023da8
c0011ee2:	e8 36 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011ee7:	83 c4 10             	add    esp,0x10
c0011eea:	e8 c5 fa ff ff       	call   c00119b4 <scanMADT()>
c0011eef:	90                   	nop
c0011ef0:	83 c4 0c             	add    esp,0xc
c0011ef3:	c3                   	ret    

c0011ef4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011ef4:	83 ec 2c             	sub    esp,0x2c
c0011ef7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011efb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011eff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011f03:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011f07:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011f0c:	88 d0                	mov    al,dl
c0011f0e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011f12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011f17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011f1f:	90                   	nop
c0011f20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f24:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f2a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011f2e:	0f 8d 9c 00 00 00    	jge    c0011fd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011f34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f3c:	83 c2 2a             	add    edx,0x2a
c0011f3f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011f43:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011f48:	75 7a                	jne    c0011fc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011f4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f52:	83 c2 2a             	add    edx,0x2a
c0011f55:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011f59:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011f5d:	75 65                	jne    c0011fc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011f5f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011f64:	74 3a                	je     c0011fa0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011f66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f6e:	83 c2 2a             	add    edx,0x2a
c0011f71:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f7c:	39 c2                	cmp    edx,eax
c0011f7e:	74 10                	je     c0011f90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011f80:	83 ec 0c             	sub    esp,0xc
c0011f83:	68 44 3c 02 c0       	push   0xc0023c44
c0011f88:	e8 30 24 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0011f8d:	83 c4 10             	add    esp,0x10
c0011f90:	83 ec 0c             	sub    esp,0xc
c0011f93:	68 b6 3d 02 c0       	push   0xc0023db6
c0011f98:	e8 20 24 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011fa4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fa8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fac:	83 c2 2a             	add    edx,0x2a
c0011faf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011fb3:	8b 02                	mov    eax,DWORD PTR [edx]
c0011fb5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011fb8:	89 01                	mov    DWORD PTR [ecx],eax
c0011fba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011fbd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011fc2:	66 90                	xchg   ax,ax
c0011fc4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fc8:	e9 53 ff ff ff       	jmp    c0011f20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0011fd0:	90                   	nop
c0011fd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fd5:	83 c4 2c             	add    esp,0x2c
c0011fd8:	c2 04 00             	ret    0x4
c0011fdb:	90                   	nop

c0011fdc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011fdc:	83 ec 1c             	sub    esp,0x1c
c0011fdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fe3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011fe7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011feb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011ff0:	88 c8                	mov    al,cl
c0011ff2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011ff6:	88 d0                	mov    al,dl
c0011ff8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012000:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001200a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001200d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012011:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012019:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001201f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012023:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0012026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001202a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001202f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012033:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012039:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001203d:	8d 48 01             	lea    ecx,[eax+0x1]
c0012040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012044:	83 c2 2a             	add    edx,0x2a
c0012047:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001204b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001204f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012059:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001205c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012060:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012068:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001206e:	8d 50 01             	lea    edx,[eax+0x1]
c0012071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012075:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001207b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001207f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012085:	3d 00 02 00 00       	cmp    eax,0x200
c001208a:	75 10                	jne    c001209c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001208c:	83 ec 0c             	sub    esp,0xc
c001208f:	68 c5 3d 02 c0       	push   0xc0023dc5
c0012094:	e8 24 23 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	90                   	nop
c001209d:	83 c4 1c             	add    esp,0x1c
c00120a0:	c3                   	ret    
c00120a1:	90                   	nop
c00120a2:	66 90                	xchg   ax,ax

c00120a4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00120a4:	b8 00 00 00 00       	mov    eax,0x0
c00120a9:	c3                   	ret    
c00120aa:	66 90                	xchg   ax,ax

c00120ac <ACPI::detectPCI()>:
c00120ac:	53                   	push   ebx
c00120ad:	83 ec 28             	sub    esp,0x28
c00120b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120b5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c00120ba:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00120bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00120c5:	83 e0 04             	and    eax,0x4
c00120c8:	84 c0                	test   al,al
c00120ca:	74 2c                	je     c00120f8 <ACPI::detectPCI()+0x4c>
c00120cc:	a1 08 6d 02 c0       	mov    eax,ds:0xc0026d08
c00120d1:	83 ec 08             	sub    esp,0x8
c00120d4:	68 e2 3d 02 c0       	push   0xc0023de2
c00120d9:	50                   	push   eax
c00120da:	e8 5d f8 ff ff       	call   c001193c <findDataTable(unsigned char*, char*)>
c00120df:	83 c4 10             	add    esp,0x10
c00120e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120e6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00120eb:	74 0b                	je     c00120f8 <ACPI::detectPCI()+0x4c>
c00120ed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120f2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120f7:	90                   	nop
c00120f8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0012100:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012104:	8a 00                	mov    al,BYTE PTR [eax]
c0012106:	3c 01                	cmp    al,0x1
c0012108:	75 0e                	jne    c0012118 <ACPI::detectPCI()+0x6c>
c001210a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001210f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012114:	eb 2a                	jmp    c0012140 <ACPI::detectPCI()+0x94>
c0012116:	66 90                	xchg   ax,ax
c0012118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001211c:	8a 00                	mov    al,BYTE PTR [eax]
c001211e:	3c 02                	cmp    al,0x2
c0012120:	75 1e                	jne    c0012140 <ACPI::detectPCI()+0x94>
c0012122:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012127:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001212c:	74 12                	je     c0012140 <ACPI::detectPCI()+0x94>
c001212e:	83 ec 0c             	sub    esp,0xc
c0012131:	68 74 3c 02 c0       	push   0xc0023c74
c0012136:	e8 82 22 00 00       	call   c00143bd <Krnl::panic(char const*)>
c001213b:	83 c4 10             	add    esp,0x10
c001213e:	66 90                	xchg   ax,ax
c0012140:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012144:	83 f0 01             	xor    eax,0x1
c0012147:	84 c0                	test   al,al
c0012149:	74 41                	je     c001218c <ACPI::detectPCI()+0xe0>
c001214b:	e8 00 e0 fe ff       	call   c0000150 <manualPCIProbe>
c0012150:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012154:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0012159:	75 0d                	jne    c0012168 <ACPI::detectPCI()+0xbc>
c001215b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012160:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012165:	eb 25                	jmp    c001218c <ACPI::detectPCI()+0xe0>
c0012167:	90                   	nop
c0012168:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001216d:	75 1d                	jne    c001218c <ACPI::detectPCI()+0xe0>
c001216f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012174:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012179:	74 11                	je     c001218c <ACPI::detectPCI()+0xe0>
c001217b:	83 ec 0c             	sub    esp,0xc
c001217e:	68 74 3c 02 c0       	push   0xc0023c74
c0012183:	e8 35 22 00 00       	call   c00143bd <Krnl::panic(char const*)>
c0012188:	83 c4 10             	add    esp,0x10
c001218b:	90                   	nop
c001218c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012191:	0f 84 85 00 00 00    	je     c001221c <ACPI::detectPCI()+0x170>
c0012197:	83 ec 0c             	sub    esp,0xc
c001219a:	68 e7 3d 02 c0       	push   0xc0023de7
c001219f:	e8 79 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00121a4:	83 c4 10             	add    esp,0x10
c00121a7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c00121af:	83 ec 0c             	sub    esp,0xc
c00121b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121b6:	e8 08 78 ff ff       	call   c00099c3 <malloc>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	89 c3                	mov    ebx,eax
c00121c0:	83 ec 0c             	sub    esp,0xc
c00121c3:	53                   	push   ebx
c00121c4:	e8 dd a9 00 00       	call   c001cba6 <PCI::PCI()>
c00121c9:	83 c4 10             	add    esp,0x10
c00121cc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00121d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d4:	83 ec 08             	sub    esp,0x8
c00121d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121db:	50                   	push   eax
c00121dc:	e8 61 bd ff ff       	call   c000df42 <Device::addChild(Device*)>
c00121e1:	83 c4 10             	add    esp,0x10
c00121e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ea:	83 c0 08             	add    eax,0x8
c00121ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00121f4:	74 0a                	je     c0012200 <ACPI::detectPCI()+0x154>
c00121f6:	ba 01 00 00 00       	mov    edx,0x1
c00121fb:	eb 0b                	jmp    c0012208 <ACPI::detectPCI()+0x15c>
c00121fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012200:	ba 02 00 00 00       	mov    edx,0x2
c0012205:	8d 76 00             	lea    esi,[esi+0x0]
c0012208:	6a 00                	push   0x0
c001220a:	6a 00                	push   0x0
c001220c:	52                   	push   edx
c001220d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012211:	ff d0                	call   eax
c0012213:	83 c4 10             	add    esp,0x10
c0012216:	e9 a1 00 00 00       	jmp    c00122bc <ACPI::detectPCI()+0x210>
c001221b:	90                   	nop
c001221c:	83 ec 0c             	sub    esp,0xc
c001221f:	68 ff 3d 02 c0       	push   0xc0023dff
c0012224:	e8 d2 a8 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0012229:	83 c4 10             	add    esp,0x10
c001222c:	83 ec 0c             	sub    esp,0xc
c001222f:	68 0a 3e 02 c0       	push   0xc0023e0a
c0012234:	e8 e4 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0012243:	83 ec 0c             	sub    esp,0xc
c0012246:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001224a:	e8 74 77 ff ff       	call   c00099c3 <malloc>
c001224f:	83 c4 10             	add    esp,0x10
c0012252:	89 c3                	mov    ebx,eax
c0012254:	83 ec 0c             	sub    esp,0xc
c0012257:	53                   	push   ebx
c0012258:	e8 b3 b4 00 00       	call   c001d710 <IDE::IDE()>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0012264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012268:	83 ec 08             	sub    esp,0x8
c001226b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001226f:	50                   	push   eax
c0012270:	e8 cd bc ff ff       	call   c000df42 <Device::addChild(Device*)>
c0012275:	83 c4 10             	add    esp,0x10
c0012278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001227c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001228a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012293:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012297:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00122a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a6:	83 c0 08             	add    eax,0x8
c00122a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00122ab:	6a 00                	push   0x0
c00122ad:	6a 00                	push   0x0
c00122af:	6a 00                	push   0x0
c00122b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00122b5:	ff d0                	call   eax
c00122b7:	83 c4 10             	add    esp,0x10
c00122ba:	66 90                	xchg   ax,ax
c00122bc:	90                   	nop
c00122bd:	83 c4 28             	add    esp,0x28
c00122c0:	5b                   	pop    ebx
c00122c1:	c3                   	ret    
c00122c2:	66 90                	xchg   ax,ax

c00122c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00122c4:	83 ec 1c             	sub    esp,0x1c
c00122c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00122cb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00122ce:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00122d2:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00122d7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00122dc:	83 ec 08             	sub    esp,0x8
c00122df:	52                   	push   edx
c00122e0:	50                   	push   eax
c00122e1:	e8 ae 6c ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c00122e6:	83 c4 10             	add    esp,0x10
c00122e9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00122ed:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00122f2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00122f7:	83 ec 04             	sub    esp,0x4
c00122fa:	6a 01                	push   0x1
c00122fc:	52                   	push   edx
c00122fd:	50                   	push   eax
c00122fe:	e8 6d 6e ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	90                   	nop
c0012307:	83 c4 1c             	add    esp,0x1c
c001230a:	c3                   	ret    
c001230b:	90                   	nop

c001230c <ACPI::sleep()>:
c001230c:	83 ec 0c             	sub    esp,0xc
c001230f:	a1 e0 6a 02 c0       	mov    eax,ds:0xc0026ae0
c0012314:	85 c0                	test   eax,eax
c0012316:	74 08                	je     c0012320 <ACPI::sleep()+0x14>
c0012318:	a1 e0 6a 02 c0       	mov    eax,ds:0xc0026ae0
c001231d:	ff d0                	call   eax
c001231f:	90                   	nop
c0012320:	90                   	nop
c0012321:	83 c4 0c             	add    esp,0xc
c0012324:	c3                   	ret    
c0012325:	90                   	nop
c0012326:	66 90                	xchg   ax,ax

c0012328 <ACPI::open(int, int, void*)>:
c0012328:	57                   	push   edi
c0012329:	56                   	push   esi
c001232a:	53                   	push   ebx
c001232b:	81 ec 70 01 00 00    	sub    esp,0x170
c0012331:	83 ec 0c             	sub    esp,0xc
c0012334:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001233b:	e8 6c fd ff ff       	call   c00120ac <ACPI::detectPCI()>
c0012340:	83 c4 10             	add    esp,0x10
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	68 9c 3c 02 c0       	push   0xc0023c9c
c001234b:	e8 cd 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	83 ec 0c             	sub    esp,0xc
c0012356:	68 1f 3e 02 c0       	push   0xc0023e1f
c001235b:	e8 d3 47 00 00       	call   c0016b33 <Thr::loadKernelSymbolTable(char const*)>
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001236b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012376:	83 ec 0c             	sub    esp,0xc
c0012379:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012380:	e8 3e 76 ff ff       	call   c00099c3 <malloc>
c0012385:	83 c4 10             	add    esp,0x10
c0012388:	89 c3                	mov    ebx,eax
c001238a:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001238f:	83 ec 04             	sub    esp,0x4
c0012392:	50                   	push   eax
c0012393:	68 3d 3e 02 c0       	push   0xc0023e3d
c0012398:	53                   	push   ebx
c0012399:	e8 c8 ac ff ff       	call   c000d066 <File::File(char const*, Process*)>
c001239e:	83 c4 10             	add    esp,0x10
c00123a1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00123a8:	83 ec 08             	sub    esp,0x8
c00123ab:	6a 01                	push   0x1
c00123ad:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00123b4:	e8 11 ad ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c00123b9:	83 c4 10             	add    esp,0x10
c00123bc:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00123c3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00123cb:	75 17                	jne    c00123e4 <ACPI::open(int, int, void*)+0xbc>
c00123cd:	83 ec 0c             	sub    esp,0xc
c00123d0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00123d7:	e8 4c ad ff ff       	call   c000d128 <File::close()>
c00123dc:	83 c4 10             	add    esp,0x10
c00123df:	eb 0b                	jmp    c00123ec <ACPI::open(int, int, void*)+0xc4>
c00123e1:	8d 76 00             	lea    esi,[esi+0x0]
c00123e4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00123ec:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00123f4:	74 1e                	je     c0012414 <ACPI::open(int, int, void*)+0xec>
c00123f6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00123fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00123ff:	83 c0 08             	add    eax,0x8
c0012402:	8b 00                	mov    eax,DWORD PTR [eax]
c0012404:	83 ec 0c             	sub    esp,0xc
c0012407:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001240e:	ff d0                	call   eax
c0012410:	83 c4 10             	add    esp,0x10
c0012413:	90                   	nop
c0012414:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001241b:	83 f0 01             	xor    eax,0x1
c001241e:	84 c0                	test   al,al
c0012420:	74 42                	je     c0012464 <ACPI::open(int, int, void*)+0x13c>
c0012422:	83 ec 0c             	sub    esp,0xc
c0012425:	68 5b 3e 02 c0       	push   0xc0023e5b
c001242a:	e8 ee 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	83 ec 04             	sub    esp,0x4
c0012435:	6a 0c                	push   0xc
c0012437:	68 76 3e 02 c0       	push   0xc0023e76
c001243c:	68 87 3e 02 c0       	push   0xc0023e87
c0012441:	e8 57 2d 00 00       	call   c001519d <Reg::readIntWithDefault(char*, char*, int)>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012450:	83 ec 0c             	sub    esp,0xc
c0012453:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001245a:	e8 d4 94 ff ff       	call   c000b933 <Virt::setupPageSwapping(int)>
c001245f:	83 c4 10             	add    esp,0x10
c0012462:	66 90                	xchg   ax,ax
c0012464:	83 ec 0c             	sub    esp,0xc
c0012467:	68 a6 25 02 c0       	push   0xc00225a6
c001246c:	e8 ac 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c001247a:	83 ec 08             	sub    esp,0x8
c001247d:	6a 01                	push   0x1
c001247f:	68 8e 3e 02 c0       	push   0xc0023e8e
c0012484:	e8 21 51 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c0012489:	83 c4 10             	add    esp,0x10
c001248c:	83 ec 08             	sub    esp,0x8
c001248f:	53                   	push   ebx
c0012490:	50                   	push   eax
c0012491:	e8 45 53 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c0012496:	83 c4 10             	add    esp,0x10
c0012499:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00124a0:	83 ec 08             	sub    esp,0x8
c00124a3:	6a 12                	push   0x12
c00124a5:	50                   	push   eax
c00124a6:	e8 1b be ff ff       	call   c000e2c6 <getDevicesOfType(DeviceType)>
c00124ab:	83 c4 0c             	add    esp,0xc
c00124ae:	66 90                	xchg   ax,ax
c00124b0:	83 ec 0c             	sub    esp,0xc
c00124b3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124ba:	50                   	push   eax
c00124bb:	e8 e0 f2 00 00       	call   c00217a0 <LinkedList<Device>::isEmpty()>
c00124c0:	83 c4 10             	add    esp,0x10
c00124c3:	83 f0 01             	xor    eax,0x1
c00124c6:	84 c0                	test   al,al
c00124c8:	0f 84 46 01 00 00    	je     c0012614 <ACPI::open(int, int, void*)+0x2ec>
c00124ce:	83 ec 0c             	sub    esp,0xc
c00124d1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124d8:	50                   	push   eax
c00124d9:	e8 de f2 00 00       	call   c00217bc <LinkedList<Device>::getFirstElement()>
c00124de:	83 c4 10             	add    esp,0x10
c00124e1:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00124e8:	83 ec 0c             	sub    esp,0xc
c00124eb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124f2:	50                   	push   eax
c00124f3:	e8 cc f2 00 00       	call   c00217c4 <LinkedList<Device>::removeFirst()>
c00124f8:	83 c4 10             	add    esp,0x10
c00124fb:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012502:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012509:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012510:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012514:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001251a:	ba 09 00 00 00       	mov    edx,0x9
c001251f:	fc                   	cld    
c0012520:	89 c7                	mov    edi,eax
c0012522:	89 de                	mov    esi,ebx
c0012524:	89 d1                	mov    ecx,edx
c0012526:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012528:	83 ec 08             	sub    esp,0x8
c001252b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001252f:	50                   	push   eax
c0012530:	83 ec 24             	sub    esp,0x24
c0012533:	89 e0                	mov    eax,esp
c0012535:	89 c3                	mov    ebx,eax
c0012537:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001253b:	ba 09 00 00 00       	mov    edx,0x9
c0012540:	89 df                	mov    edi,ebx
c0012542:	89 c6                	mov    esi,eax
c0012544:	89 d1                	mov    ecx,edx
c0012546:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012548:	e8 37 ab 00 00       	call   c001d084 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001254d:	83 c4 30             	add    esp,0x30
c0012550:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012557:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001255f:	0f 84 4b ff ff ff    	je     c00124b0 <ACPI::open(int, int, void*)+0x188>
c0012565:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012570:	83 ec 0c             	sub    esp,0xc
c0012573:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001257a:	e8 44 74 ff ff       	call   c00099c3 <malloc>
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	89 c3                	mov    ebx,eax
c0012584:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012589:	83 ec 04             	sub    esp,0x4
c001258c:	50                   	push   eax
c001258d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012594:	53                   	push   ebx
c0012595:	e8 cc aa ff ff       	call   c000d066 <File::File(char const*, Process*)>
c001259a:	83 c4 10             	add    esp,0x10
c001259d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00125a4:	83 ec 0c             	sub    esp,0xc
c00125a7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00125ae:	e8 85 ad ff ff       	call   c000d338 <File::exists()>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	84 c0                	test   al,al
c00125b8:	74 2a                	je     c00125e4 <ACPI::open(int, int, void*)+0x2bc>
c00125ba:	83 ec 08             	sub    esp,0x8
c00125bd:	6a 01                	push   0x1
c00125bf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00125c6:	e8 df 4f 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	83 ec 08             	sub    esp,0x8
c00125d1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00125d8:	50                   	push   eax
c00125d9:	e8 fd 51 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c00125de:	83 c4 10             	add    esp,0x10
c00125e1:	8d 76 00             	lea    esi,[esi+0x0]
c00125e4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00125ec:	0f 84 be fe ff ff    	je     c00124b0 <ACPI::open(int, int, void*)+0x188>
c00125f2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00125f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00125fb:	83 c0 08             	add    eax,0x8
c00125fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012600:	83 ec 0c             	sub    esp,0xc
c0012603:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001260a:	ff d0                	call   eax
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	e9 9c fe ff ff       	jmp    c00124b0 <ACPI::open(int, int, void*)+0x188>
c0012614:	83 ec 0c             	sub    esp,0xc
c0012617:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001261e:	50                   	push   eax
c001261f:	e8 78 f1 00 00       	call   c002179c <LinkedList<Device>::~LinkedList()>
c0012624:	83 c4 10             	add    esp,0x10
c0012627:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c001262d:	83 ec 08             	sub    esp,0x8
c0012630:	6a 01                	push   0x1
c0012632:	68 a9 3e 02 c0       	push   0xc0023ea9
c0012637:	e8 6e 4f 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c001263c:	83 c4 10             	add    esp,0x10
c001263f:	83 ec 08             	sub    esp,0x8
c0012642:	53                   	push   ebx
c0012643:	50                   	push   eax
c0012644:	e8 92 51 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c0012649:	83 c4 10             	add    esp,0x10
c001264c:	8b 1d a8 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264a8
c0012652:	83 ec 08             	sub    esp,0x8
c0012655:	6a 01                	push   0x1
c0012657:	68 c6 3e 02 c0       	push   0xc0023ec6
c001265c:	e8 49 4f 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	83 ec 08             	sub    esp,0x8
c0012667:	53                   	push   ebx
c0012668:	50                   	push   eax
c0012669:	e8 6d 51 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c001266e:	83 c4 10             	add    esp,0x10
c0012671:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0012676:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001267c:	83 e0 04             	and    eax,0x4
c001267f:	84 c0                	test   al,al
c0012681:	0f 84 15 01 00 00    	je     c001279c <ACPI::open(int, int, void*)+0x474>
c0012687:	83 ec 0c             	sub    esp,0xc
c001268a:	68 e3 3e 02 c0       	push   0xc0023ee3
c001268f:	e8 89 73 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00126a2:	83 ec 0c             	sub    esp,0xc
c00126a5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00126ac:	e8 12 73 ff ff       	call   c00099c3 <malloc>
c00126b1:	83 c4 10             	add    esp,0x10
c00126b4:	89 c3                	mov    ebx,eax
c00126b6:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00126bb:	83 ec 04             	sub    esp,0x4
c00126be:	50                   	push   eax
c00126bf:	68 00 3f 02 c0       	push   0xc0023f00
c00126c4:	53                   	push   ebx
c00126c5:	e8 9c a9 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c00126ca:	83 c4 10             	add    esp,0x10
c00126cd:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00126d4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126dc:	74 1a                	je     c00126f8 <ACPI::open(int, int, void*)+0x3d0>
c00126de:	83 ec 0c             	sub    esp,0xc
c00126e1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126e8:	e8 4b ac ff ff       	call   c000d338 <File::exists()>
c00126ed:	83 c4 10             	add    esp,0x10
c00126f0:	84 c0                	test   al,al
c00126f2:	74 04                	je     c00126f8 <ACPI::open(int, int, void*)+0x3d0>
c00126f4:	b0 01                	mov    al,0x1
c00126f6:	eb 04                	jmp    c00126fc <ACPI::open(int, int, void*)+0x3d4>
c00126f8:	b0 00                	mov    al,0x0
c00126fa:	66 90                	xchg   ax,ax
c00126fc:	84 c0                	test   al,al
c00126fe:	74 28                	je     c0012728 <ACPI::open(int, int, void*)+0x400>
c0012700:	83 ec 08             	sub    esp,0x8
c0012703:	6a 01                	push   0x1
c0012705:	68 00 3f 02 c0       	push   0xc0023f00
c001270a:	e8 9b 4e 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	83 ec 08             	sub    esp,0x8
c0012715:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001271c:	50                   	push   eax
c001271d:	e8 b9 50 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c0012722:	83 c4 10             	add    esp,0x10
c0012725:	8d 76 00             	lea    esi,[esi+0x0]
c0012728:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012730:	74 2a                	je     c001275c <ACPI::open(int, int, void*)+0x434>
c0012732:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001273a:	74 20                	je     c001275c <ACPI::open(int, int, void*)+0x434>
c001273c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012743:	8b 00                	mov    eax,DWORD PTR [eax]
c0012745:	83 c0 08             	add    eax,0x8
c0012748:	8b 00                	mov    eax,DWORD PTR [eax]
c001274a:	83 ec 0c             	sub    esp,0xc
c001274d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012754:	ff d0                	call   eax
c0012756:	83 c4 10             	add    esp,0x10
c0012759:	8d 76 00             	lea    esi,[esi+0x0]
c001275c:	a1 08 6d 02 c0       	mov    eax,ds:0xc0026d08
c0012761:	83 ec 08             	sub    esp,0x8
c0012764:	68 1d 3f 02 c0       	push   0xc0023f1d
c0012769:	50                   	push   eax
c001276a:	e8 cd f1 ff ff       	call   c001193c <findDataTable(unsigned char*, char*)>
c001276f:	83 c4 10             	add    esp,0x10
c0012772:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012779:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012781:	74 19                	je     c001279c <ACPI::open(int, int, void*)+0x474>
c0012783:	83 ec 08             	sub    esp,0x8
c0012786:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001278d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012794:	e8 2b fb ff ff       	call   c00122c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012799:	83 c4 10             	add    esp,0x10
c001279c:	b8 00 00 00 00       	mov    eax,0x0
c00127a1:	81 c4 70 01 00 00    	add    esp,0x170
c00127a7:	5b                   	pop    ebx
c00127a8:	5e                   	pop    esi
c00127a9:	5f                   	pop    edi
c00127aa:	c3                   	ret    
c00127ab:	90                   	nop

c00127ac <CPU::close(int, int, void*)>:
c00127ac:	31 c0                	xor    eax,eax
c00127ae:	c3                   	ret    
c00127af:	90                   	nop

c00127b0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00127b0:	55                   	push   ebp
c00127b1:	57                   	push   edi
c00127b2:	56                   	push   esi
c00127b3:	53                   	push   ebx
c00127b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127bc:	89 ce                	mov    esi,ecx
c00127be:	89 d5                	mov    ebp,edx
c00127c0:	80 f9 04             	cmp    cl,0x4
c00127c3:	75 28                	jne    c00127ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00127c5:	8d 42 f9             	lea    eax,[edx-0x7]
c00127c8:	3c 03                	cmp    al,0x3
c00127ca:	0f 86 63 01 00 00    	jbe    c0012933 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00127d0:	80 fa 03             	cmp    dl,0x3
c00127d3:	0f 84 5a 01 00 00    	je     c0012933 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00127d9:	8d 7a f2             	lea    edi,[edx-0xe]
c00127dc:	b8 70 5d 02 c0       	mov    eax,0xc0025d70
c00127e1:	89 fb                	mov    ebx,edi
c00127e3:	80 fb 01             	cmp    bl,0x1
c00127e6:	77 4e                	ja     c0012836 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00127e8:	e9 52 01 00 00       	jmp    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127ed:	80 f9 05             	cmp    cl,0x5
c00127f0:	75 4d                	jne    c001283f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00127f2:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c00127f7:	80 fa 03             	cmp    dl,0x3
c00127fa:	0f 86 3f 01 00 00    	jbe    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012800:	8d 7a fa             	lea    edi,[edx-0x6]
c0012803:	b8 90 5d 02 c0       	mov    eax,0xc0025d90
c0012808:	89 fb                	mov    ebx,edi
c001280a:	80 fb 01             	cmp    bl,0x1
c001280d:	0f 86 2c 01 00 00    	jbe    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012813:	b8 a0 5d 02 c0       	mov    eax,0xc0025da0
c0012818:	80 fa 08             	cmp    dl,0x8
c001281b:	0f 84 1e 01 00 00    	je     c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012821:	89 d7                	mov    edi,edx
c0012823:	b8 b0 5d 02 c0       	mov    eax,0xc0025db0
c0012828:	83 e7 fb             	and    edi,0xfffffffb
c001282b:	89 fb                	mov    ebx,edi
c001282d:	80 fb 09             	cmp    bl,0x9
c0012830:	0f 84 09 01 00 00    	je     c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012836:	31 c0                	xor    eax,eax
c0012838:	89 eb                	mov    ebx,ebp
c001283a:	0f b6 fb             	movzx  edi,bl
c001283d:	eb 30                	jmp    c001286f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001283f:	31 c0                	xor    eax,eax
c0012841:	80 f9 06             	cmp    cl,0x6
c0012844:	75 f2                	jne    c0012838 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012846:	80 fa 0a             	cmp    dl,0xa
c0012849:	77 ed                	ja     c0012838 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001284b:	bf de 05 00 00       	mov    edi,0x5de
c0012850:	0f a3 d7             	bt     edi,edx
c0012853:	73 e3                	jae    c0012838 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012855:	b8 c0 5d 02 c0       	mov    eax,0xc0025dc0
c001285a:	e9 e0 00 00 00       	jmp    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001285f:	39 c7                	cmp    edi,eax
c0012861:	0f 84 d3 00 00 00    	je     c001293a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012867:	40                   	inc    eax
c0012868:	3d d0 00 00 00       	cmp    eax,0xd0
c001286d:	74 09                	je     c0012878 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001286f:	89 f3                	mov    ebx,esi
c0012871:	80 fb 0f             	cmp    bl,0xf
c0012874:	75 f1                	jne    c0012867 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012876:	eb e7                	jmp    c001285f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012878:	80 f9 10             	cmp    cl,0x10
c001287b:	75 14                	jne    c0012891 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001287d:	8d 42 fc             	lea    eax,[edx-0x4]
c0012880:	83 e0 fb             	and    eax,0xfffffffb
c0012883:	3c 02                	cmp    al,0x2
c0012885:	76 34                	jbe    c00128bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012887:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c001288c:	80 fa 02             	cmp    dl,0x2
c001288f:	eb 24                	jmp    c00128b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012891:	80 f9 11             	cmp    cl,0x11
c0012894:	75 13                	jne    c00128a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012896:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c001289b:	80 fa 03             	cmp    dl,0x3
c001289e:	0f 85 9b 00 00 00    	jne    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128a4:	e9 91 00 00 00       	jmp    c001293a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00128a9:	80 f9 12             	cmp    cl,0x12
c00128ac:	75 14                	jne    c00128c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00128ae:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c00128b3:	fe ca                	dec    dl
c00128b5:	0f 85 84 00 00 00    	jne    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128bb:	b8 e0 5d 02 c0       	mov    eax,0xc0025de0
c00128c0:	eb 7d                	jmp    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128c2:	80 f9 14             	cmp    cl,0x14
c00128c5:	75 12                	jne    c00128d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00128c7:	4a                   	dec    edx
c00128c8:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c00128cd:	80 fa 01             	cmp    dl,0x1
c00128d0:	77 6d                	ja     c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128d2:	b8 f0 5d 02 c0       	mov    eax,0xc0025df0
c00128d7:	eb 66                	jmp    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128d9:	80 f9 15             	cmp    cl,0x15
c00128dc:	75 31                	jne    c001290f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00128de:	b8 00 5e 02 c0       	mov    eax,0xc0025e00
c00128e3:	80 fa 01             	cmp    dl,0x1
c00128e6:	74 57                	je     c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128e8:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c00128ed:	80 fa 13             	cmp    dl,0x13
c00128f0:	76 0c                	jbe    c00128fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00128f2:	80 fa 30             	cmp    dl,0x30
c00128f5:	75 48                	jne    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128f7:	b8 20 5e 02 c0       	mov    eax,0xc0025e20
c00128fc:	eb 41                	jmp    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128fe:	b9 04 00 09 00       	mov    ecx,0x90004
c0012903:	0f a3 d1             	bt     ecx,edx
c0012906:	73 37                	jae    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012908:	b8 10 5e 02 c0       	mov    eax,0xc0025e10
c001290d:	eb 30                	jmp    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001290f:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c0012914:	80 f9 16             	cmp    cl,0x16
c0012917:	75 26                	jne    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012919:	b8 30 5e 02 c0       	mov    eax,0xc0025e30
c001291e:	84 d2                	test   dl,dl
c0012920:	74 1d                	je     c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012922:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c0012927:	80 fa 30             	cmp    dl,0x30
c001292a:	75 13                	jne    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001292c:	b8 40 5e 02 c0       	mov    eax,0xc0025e40
c0012931:	eb 0c                	jmp    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012933:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c0012938:	eb 05                	jmp    c001293f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001293a:	b8 d0 5d 02 c0       	mov    eax,0xc0025dd0
c001293f:	5b                   	pop    ebx
c0012940:	5e                   	pop    esi
c0012941:	5f                   	pop    edi
c0012942:	5d                   	pop    ebp
c0012943:	c3                   	ret    

c0012944 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012944:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001294c:	80 f9 04             	cmp    cl,0x4
c001294f:	75 6b                	jne    c00129bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012951:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012956:	80 fa 01             	cmp    dl,0x1
c0012959:	0f 86 92 02 00 00    	jbe    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001295f:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012964:	80 fa 02             	cmp    dl,0x2
c0012967:	0f 84 84 02 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001296d:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012972:	80 fa 03             	cmp    dl,0x3
c0012975:	0f 84 76 02 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001297b:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012980:	80 fa 04             	cmp    dl,0x4
c0012983:	0f 84 68 02 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012989:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c001298e:	80 fa 05             	cmp    dl,0x5
c0012991:	0f 84 5a 02 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012997:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c001299c:	80 fa 07             	cmp    dl,0x7
c001299f:	0f 84 4c 02 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129a5:	83 ea 08             	sub    edx,0x8
c00129a8:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c00129ad:	80 fa 01             	cmp    dl,0x1
c00129b0:	0f 87 3b 02 00 00    	ja     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129b6:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c00129bb:	c3                   	ret    
c00129bc:	80 f9 05             	cmp    cl,0x5
c00129bf:	75 45                	jne    c0012a06 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00129c1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00129c4:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c00129c9:	80 f9 02             	cmp    cl,0x2
c00129cc:	0f 86 1f 02 00 00    	jbe    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129d2:	80 fa 04             	cmp    dl,0x4
c00129d5:	0f 84 f3 01 00 00    	je     c0012bce <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00129db:	80 fa 07             	cmp    dl,0x7
c00129de:	0f 84 0d 02 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e4:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c00129e9:	80 fa 08             	cmp    dl,0x8
c00129ec:	0f 84 ff 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129f2:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c00129f7:	80 fa 09             	cmp    dl,0x9
c00129fa:	0f 85 f1 01 00 00    	jne    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a00:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a05:	c3                   	ret    
c0012a06:	80 f9 06             	cmp    cl,0x6
c0012a09:	0f 85 85 01 00 00    	jne    c0012b94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012a0f:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012a14:	80 fa 01             	cmp    dl,0x1
c0012a17:	0f 84 d4 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a1d:	8d 42 fb             	lea    eax,[edx-0x5]
c0012a20:	3c 01                	cmp    al,0x1
c0012a22:	0f 86 ac 01 00 00    	jbe    c0012bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012a28:	80 fa 03             	cmp    dl,0x3
c0012a2b:	0f 84 a3 01 00 00    	je     c0012bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012a31:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012a34:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012a39:	80 f9 01             	cmp    cl,0x1
c0012a3c:	0f 86 af 01 00 00    	jbe    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a42:	80 fa 09             	cmp    dl,0x9
c0012a45:	0f 84 8f 01 00 00    	je     c0012bda <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012a4b:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012a4e:	80 f9 01             	cmp    cl,0x1
c0012a51:	0f 86 9a 01 00 00    	jbe    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a57:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012a5c:	80 fa 0d             	cmp    dl,0xd
c0012a5f:	0f 84 8c 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a65:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012a6a:	80 fa 0e             	cmp    dl,0xe
c0012a6d:	0f 84 7e 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a73:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012a78:	80 fa 0f             	cmp    dl,0xf
c0012a7b:	0f 84 70 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a81:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012a86:	80 fa 15             	cmp    dl,0x15
c0012a89:	0f 84 62 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a8f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012a92:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012a97:	80 f9 01             	cmp    cl,0x1
c0012a9a:	0f 86 51 01 00 00    	jbe    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aa0:	80 fa 1a             	cmp    dl,0x1a
c0012aa3:	0f 84 37 01 00 00    	je     c0012be0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012aa9:	80 fa 1c             	cmp    dl,0x1c
c0012aac:	0f 84 34 01 00 00    	je     c0012be6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012ab2:	80 fa 1d             	cmp    dl,0x1d
c0012ab5:	0f 84 36 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012abb:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012ac0:	80 fa 25             	cmp    dl,0x25
c0012ac3:	0f 84 28 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ac9:	8d 4a da             	lea    ecx,[edx-0x26]
c0012acc:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012ad1:	80 f9 01             	cmp    cl,0x1
c0012ad4:	0f 86 17 01 00 00    	jbe    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ada:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012adf:	80 fa 2a             	cmp    dl,0x2a
c0012ae2:	0f 84 09 01 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ae8:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012aed:	80 fa 2c             	cmp    dl,0x2c
c0012af0:	0f 84 fb 00 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012af6:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012afb:	80 fa 2d             	cmp    dl,0x2d
c0012afe:	0f 84 ed 00 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b04:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012b09:	80 fa 2e             	cmp    dl,0x2e
c0012b0c:	0f 84 df 00 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b12:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012b17:	80 fa 2f             	cmp    dl,0x2f
c0012b1a:	0f 84 d1 00 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b20:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012b23:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012b28:	80 f9 01             	cmp    cl,0x1
c0012b2b:	0f 86 c0 00 00 00    	jbe    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b31:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c0012b36:	80 fa 37             	cmp    dl,0x37
c0012b39:	0f 84 b2 00 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b3f:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c0012b44:	80 fa 3a             	cmp    dl,0x3a
c0012b47:	0f 84 a4 00 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b4d:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c0012b52:	80 fa 3c             	cmp    dl,0x3c
c0012b55:	0f 84 96 00 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b5b:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c0012b60:	80 fa 3d             	cmp    dl,0x3d
c0012b63:	0f 84 88 00 00 00    	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b69:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c0012b6e:	80 fa 3e             	cmp    dl,0x3e
c0012b71:	74 7e                	je     c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b73:	8d 42 bb             	lea    eax,[edx-0x45]
c0012b76:	3c 01                	cmp    al,0x1
c0012b78:	76 72                	jbe    c0012bec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012b7a:	80 fa 3f             	cmp    dl,0x3f
c0012b7d:	74 6d                	je     c0012bec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012b7f:	80 fa 4a             	cmp    dl,0x4a
c0012b82:	74 0a                	je     c0012b8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012b84:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c0012b89:	80 fa 4d             	cmp    dl,0x4d
c0012b8c:	75 63                	jne    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b8e:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c0012b93:	c3                   	ret    
c0012b94:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c0012b99:	80 f9 0b             	cmp    cl,0xb
c0012b9c:	75 0a                	jne    c0012ba8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012b9e:	fe ca                	dec    dl
c0012ba0:	75 4f                	jne    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ba2:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c0012ba7:	c3                   	ret    
c0012ba8:	80 f9 0f             	cmp    cl,0xf
c0012bab:	75 44                	jne    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bad:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c0012bb2:	80 fa 02             	cmp    dl,0x2
c0012bb5:	76 3a                	jbe    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bb7:	8d 42 fd             	lea    eax,[edx-0x3]
c0012bba:	3c 01                	cmp    al,0x1
c0012bbc:	76 0a                	jbe    c0012bc8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012bbe:	b8 a5 40 02 c0       	mov    eax,0xc00240a5
c0012bc3:	80 fa 06             	cmp    dl,0x6
c0012bc6:	75 29                	jne    c0012bf1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012bc8:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c0012bcd:	c3                   	ret    
c0012bce:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012bd3:	c3                   	ret    
c0012bd4:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012bd9:	c3                   	ret    
c0012bda:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012bdf:	c3                   	ret    
c0012be0:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012be5:	c3                   	ret    
c0012be6:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012beb:	c3                   	ret    
c0012bec:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c0012bf1:	c3                   	ret    

c0012bf2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012bf2:	60                   	pusha  
c0012bf3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bff:	9c                   	pushf  
c0012c00:	fa                   	cli    
c0012c01:	0f 09                	wbinvd 
c0012c03:	0f 30                	wrmsr  
c0012c05:	9d                   	popf   
c0012c06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c0a:	89 02                	mov    DWORD PTR [edx],eax
c0012c0c:	61                   	popa   
c0012c0d:	c3                   	ret    

c0012c0e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012c0e:	60                   	pusha  
c0012c0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c13:	9c                   	pushf  
c0012c14:	fa                   	cli    
c0012c15:	0f 09                	wbinvd 
c0012c17:	31 c0                	xor    eax,eax
c0012c19:	31 d2                	xor    edx,edx
c0012c1b:	0f 32                	rdmsr  
c0012c1d:	9d                   	popf   
c0012c1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c22:	89 02                	mov    DWORD PTR [edx],eax
c0012c24:	61                   	popa   
c0012c25:	c3                   	ret    

c0012c26 <CPU::AMD_K6_writeback(int, int, int)>:
c0012c26:	56                   	push   esi
c0012c27:	53                   	push   ebx
c0012c28:	83 ec 10             	sub    esp,0x10
c0012c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c2f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012c34:	75 5d                	jne    c0012c93 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c36:	83 f8 08             	cmp    eax,0x8
c0012c39:	75 09                	jne    c0012c44 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012c3b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012c40:	7e 13                	jle    c0012c55 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012c42:	eb 30                	jmp    c0012c74 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012c44:	83 f8 06             	cmp    eax,0x6
c0012c47:	7c 4a                	jl     c0012c93 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c49:	83 f8 07             	cmp    eax,0x7
c0012c4c:	7e 07                	jle    c0012c55 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012c4e:	83 f8 09             	cmp    eax,0x9
c0012c51:	74 21                	je     c0012c74 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012c53:	eb 3e                	jmp    c0012c93 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c55:	89 e6                	mov    esi,esp
c0012c57:	8b 1d cc 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264cc
c0012c5d:	56                   	push   esi
c0012c5e:	c1 eb 15             	shr    ebx,0x15
c0012c61:	68 82 00 00 c0       	push   0xc0000082
c0012c66:	83 e3 7e             	and    ebx,0x7e
c0012c69:	e8 a0 ff ff ff       	call   c0012c0e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012c6e:	56                   	push   esi
c0012c6f:	6a 00                	push   0x0
c0012c71:	53                   	push   ebx
c0012c72:	eb 12                	jmp    c0012c86 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012c74:	89 e3                	mov    ebx,esp
c0012c76:	53                   	push   ebx
c0012c77:	68 82 00 00 c0       	push   0xc0000082
c0012c7c:	e8 8d ff ff ff       	call   c0012c0e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012c81:	53                   	push   ebx
c0012c82:	6a 00                	push   0x0
c0012c84:	6a 00                	push   0x0
c0012c86:	68 82 00 00 c0       	push   0xc0000082
c0012c8b:	e8 62 ff ff ff       	call   c0012bf2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012c90:	83 c4 18             	add    esp,0x18
c0012c93:	83 c4 10             	add    esp,0x10
c0012c96:	5b                   	pop    ebx
c0012c97:	5e                   	pop    esi
c0012c98:	c3                   	ret    
c0012c99:	90                   	nop

c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012c9a:	55                   	push   ebp
c0012c9b:	57                   	push   edi
c0012c9c:	56                   	push   esi
c0012c9d:	53                   	push   ebx
c0012c9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ca2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012ca6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012caa:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012cae:	39 05 60 5e 02 c0    	cmp    DWORD PTR ds:0xc0025e60,eax
c0012cb4:	75 23                	jne    c0012cd9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012cb6:	a1 6c 6f 02 c0       	mov    eax,ds:0xc0026f6c
c0012cbb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012cbf:	89 06                	mov    DWORD PTR [esi],eax
c0012cc1:	a1 68 6f 02 c0       	mov    eax,ds:0xc0026f68
c0012cc6:	89 07                	mov    DWORD PTR [edi],eax
c0012cc8:	a1 64 6f 02 c0       	mov    eax,ds:0xc0026f64
c0012ccd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012cd0:	a1 60 6f 02 c0       	mov    eax,ds:0xc0026f60
c0012cd5:	89 02                	mov    DWORD PTR [edx],eax
c0012cd7:	eb 3f                	jmp    c0012d18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012cd9:	31 c9                	xor    ecx,ecx
c0012cdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cdf:	0f a2                	cpuid  
c0012ce1:	89 06                	mov    DWORD PTR [esi],eax
c0012ce3:	89 1f                	mov    DWORD PTR [edi],ebx
c0012ce5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ce9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012cec:	89 10                	mov    DWORD PTR [eax],edx
c0012cee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cf2:	a3 60 5e 02 c0       	mov    ds:0xc0025e60,eax
c0012cf7:	8b 06                	mov    eax,DWORD PTR [esi]
c0012cf9:	a3 6c 6f 02 c0       	mov    ds:0xc0026f6c,eax
c0012cfe:	8b 07                	mov    eax,DWORD PTR [edi]
c0012d00:	a3 68 6f 02 c0       	mov    ds:0xc0026f68,eax
c0012d05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d08:	a3 64 6f 02 c0       	mov    ds:0xc0026f64,eax
c0012d0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d13:	a3 60 6f 02 c0       	mov    ds:0xc0026f60,eax
c0012d18:	5b                   	pop    ebx
c0012d19:	5e                   	pop    esi
c0012d1a:	5f                   	pop    edi
c0012d1b:	5d                   	pop    ebp
c0012d1c:	c3                   	ret    
c0012d1d:	90                   	nop

c0012d1e <CPU::cpuidCheckEDX(unsigned int)>:
c0012d1e:	83 ec 10             	sub    esp,0x10
c0012d21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d25:	50                   	push   eax
c0012d26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d2a:	50                   	push   eax
c0012d2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d2f:	50                   	push   eax
c0012d30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d34:	50                   	push   eax
c0012d35:	6a 01                	push   0x1
c0012d37:	e8 5e ff ff ff       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d40:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012d44:	0f 95 c0             	setne  al
c0012d47:	83 c4 24             	add    esp,0x24
c0012d4a:	c3                   	ret    
c0012d4b:	90                   	nop

c0012d4c <CPU::cpuidCheckECX(unsigned int)>:
c0012d4c:	83 ec 10             	sub    esp,0x10
c0012d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d53:	50                   	push   eax
c0012d54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d58:	50                   	push   eax
c0012d59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d5d:	50                   	push   eax
c0012d5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d62:	50                   	push   eax
c0012d63:	6a 01                	push   0x1
c0012d65:	e8 30 ff ff ff       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d6e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d72:	0f 95 c0             	setne  al
c0012d75:	83 c4 24             	add    esp,0x24
c0012d78:	c3                   	ret    
c0012d79:	90                   	nop

c0012d7a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012d7a:	83 ec 10             	sub    esp,0x10
c0012d7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d81:	50                   	push   eax
c0012d82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d86:	50                   	push   eax
c0012d87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d8b:	50                   	push   eax
c0012d8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d90:	50                   	push   eax
c0012d91:	6a 07                	push   0x7
c0012d93:	e8 02 ff ff ff       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d9c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012da0:	0f 95 c0             	setne  al
c0012da3:	83 c4 24             	add    esp,0x24
c0012da6:	c3                   	ret    
c0012da7:	90                   	nop

c0012da8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012da8:	83 ec 10             	sub    esp,0x10
c0012dab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012daf:	50                   	push   eax
c0012db0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012db4:	50                   	push   eax
c0012db5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012db9:	50                   	push   eax
c0012dba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012dbe:	50                   	push   eax
c0012dbf:	6a 07                	push   0x7
c0012dc1:	e8 d4 fe ff ff       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012dc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012dca:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012dce:	0f 95 c0             	setne  al
c0012dd1:	83 c4 24             	add    esp,0x24
c0012dd4:	c3                   	ret    
c0012dd5:	90                   	nop

c0012dd6 <CPU::CPU()>:
c0012dd6:	83 ec 0c             	sub    esp,0xc
c0012dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ddd:	83 ec 08             	sub    esp,0x8
c0012de0:	68 a5 40 02 c0       	push   0xc00240a5
c0012de5:	50                   	push   eax
c0012de6:	e8 5b b3 ff ff       	call   c000e146 <Device::Device(char const*)>
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	ba c8 42 02 c0       	mov    edx,0xc00242c8
c0012df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df7:	89 10                	mov    DWORD PTR [eax],edx
c0012df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dfd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e0b:	05 78 01 00 00       	add    eax,0x178
c0012e10:	83 ec 0c             	sub    esp,0xc
c0012e13:	50                   	push   eax
c0012e14:	e8 41 64 ff ff       	call   c000925a <GDT::GDT()>
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e20:	05 7c 09 00 00       	add    eax,0x97c
c0012e25:	83 ec 0c             	sub    esp,0xc
c0012e28:	50                   	push   eax
c0012e29:	e8 82 66 ff ff       	call   c00094b0 <IDT::IDT()>
c0012e2e:	83 c4 10             	add    esp,0x10
c0012e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e35:	05 7c 11 00 00       	add    eax,0x117c
c0012e3a:	83 ec 0c             	sub    esp,0xc
c0012e3d:	50                   	push   eax
c0012e3e:	e8 29 82 ff ff       	call   c000b06c <TSS::TSS()>
c0012e43:	83 c4 10             	add    esp,0x10
c0012e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e4a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e55:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012e5f:	90                   	nop
c0012e60:	83 c4 0c             	add    esp,0xc
c0012e63:	c3                   	ret    

c0012e64 <CPU::displayFeatures()>:
c0012e64:	c3                   	ret    
c0012e65:	90                   	nop

c0012e66 <CPU::detectFeatures()>:
c0012e66:	55                   	push   ebp
c0012e67:	57                   	push   edi
c0012e68:	56                   	push   esi
c0012e69:	53                   	push   ebx
c0012e6a:	83 ec 50             	sub    esp,0x50
c0012e6d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012e71:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012e7b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012e82:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012e88:	6a 0d                	push   0xd
c0012e8a:	6a 00                	push   0x0
c0012e8c:	55                   	push   ebp
c0012e8d:	e8 f2 d7 fe ff       	call   c0000684 <memset>
c0012e92:	83 c4 10             	add    esp,0x10
c0012e95:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0012e9a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012ea1:	0f 84 22 09 00 00    	je     c00137c9 <CPU::detectFeatures()+0x963>
c0012ea7:	83 ec 0c             	sub    esp,0xc
c0012eaa:	89 ef                	mov    edi,ebp
c0012eac:	6a 10                	push   0x10
c0012eae:	e8 6b fe ff ff       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0012eb3:	83 e0 01             	and    eax,0x1
c0012eb6:	8d 14 00             	lea    edx,[eax+eax*1]
c0012eb9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ebf:	83 e0 fd             	and    eax,0xfffffffd
c0012ec2:	09 d0                	or     eax,edx
c0012ec4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012eca:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012ed1:	e8 48 fe ff ff       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0012ed6:	83 e0 01             	and    eax,0x1
c0012ed9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012ee0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ee6:	83 e0 fb             	and    eax,0xfffffffb
c0012ee9:	09 d0                	or     eax,edx
c0012eeb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ef1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ef8:	e8 21 fe ff ff       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0012efd:	83 e0 01             	and    eax,0x1
c0012f00:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012f07:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012f0d:	83 e0 f7             	and    eax,0xfffffff7
c0012f10:	09 d0                	or     eax,edx
c0012f12:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f18:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012f1f:	e8 fa fd ff ff       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0012f24:	83 e0 01             	and    eax,0x1
c0012f27:	c1 e0 04             	shl    eax,0x4
c0012f2a:	88 c2                	mov    dl,al
c0012f2c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012f32:	83 e0 ef             	and    eax,0xffffffef
c0012f35:	09 d0                	or     eax,edx
c0012f37:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f3d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012f44:	e8 d5 fd ff ff       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0012f49:	83 e0 01             	and    eax,0x1
c0012f4c:	c1 e0 05             	shl    eax,0x5
c0012f4f:	88 c2                	mov    dl,al
c0012f51:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012f57:	83 e0 df             	and    eax,0xffffffdf
c0012f5a:	09 d0                	or     eax,edx
c0012f5c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f62:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012f69:	e8 b0 fd ff ff       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0012f6e:	83 e0 01             	and    eax,0x1
c0012f71:	8d 14 00             	lea    edx,[eax+eax*1]
c0012f74:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012f7a:	83 e0 fd             	and    eax,0xfffffffd
c0012f7d:	09 d0                	or     eax,edx
c0012f7f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012f85:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012f8c:	e8 8d fd ff ff       	call   c0012d1e <CPU::cpuidCheckEDX(unsigned int)>
c0012f91:	83 e0 01             	and    eax,0x1
c0012f94:	c1 e0 06             	shl    eax,0x6
c0012f97:	88 c2                	mov    dl,al
c0012f99:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012f9f:	83 e0 bf             	and    eax,0xffffffbf
c0012fa2:	09 d0                	or     eax,edx
c0012fa4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012faa:	58                   	pop    eax
c0012fab:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012faf:	50                   	push   eax
c0012fb0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012fb4:	50                   	push   eax
c0012fb5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012fb9:	56                   	push   esi
c0012fba:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012fbe:	50                   	push   eax
c0012fbf:	6a 00                	push   0x0
c0012fc1:	e8 d4 fc ff ff       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012fc6:	b8 04 00 00 00       	mov    eax,0x4
c0012fcb:	89 c1                	mov    ecx,eax
c0012fcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fcf:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012fd5:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012fd9:	89 c1                	mov    ecx,eax
c0012fdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fdd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012fe3:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012fe7:	89 c1                	mov    ecx,eax
c0012fe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012feb:	83 c4 18             	add    esp,0x18
c0012fee:	68 50 3f 02 c0       	push   0xc0023f50
c0012ff3:	55                   	push   ebp
c0012ff4:	e8 d3 d7 fe ff       	call   c00007cc <strcmp>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	85 c0                	test   eax,eax
c0012ffe:	75 0f                	jne    c001300f <CPU::detectFeatures()+0x1a9>
c0013000:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001300a:	e9 22 02 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c001300f:	50                   	push   eax
c0013010:	50                   	push   eax
c0013011:	68 5d 3f 02 c0       	push   0xc0023f5d
c0013016:	55                   	push   ebp
c0013017:	e8 b0 d7 fe ff       	call   c00007cc <strcmp>
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	85 c0                	test   eax,eax
c0013021:	74 dd                	je     c0013000 <CPU::detectFeatures()+0x19a>
c0013023:	50                   	push   eax
c0013024:	50                   	push   eax
c0013025:	68 6a 3f 02 c0       	push   0xc0023f6a
c001302a:	55                   	push   ebp
c001302b:	e8 9c d7 fe ff       	call   c00007cc <strcmp>
c0013030:	83 c4 10             	add    esp,0x10
c0013033:	85 c0                	test   eax,eax
c0013035:	74 2a                	je     c0013061 <CPU::detectFeatures()+0x1fb>
c0013037:	50                   	push   eax
c0013038:	50                   	push   eax
c0013039:	68 77 3f 02 c0       	push   0xc0023f77
c001303e:	55                   	push   ebp
c001303f:	e8 88 d7 fe ff       	call   c00007cc <strcmp>
c0013044:	83 c4 10             	add    esp,0x10
c0013047:	85 c0                	test   eax,eax
c0013049:	74 16                	je     c0013061 <CPU::detectFeatures()+0x1fb>
c001304b:	50                   	push   eax
c001304c:	50                   	push   eax
c001304d:	68 84 3f 02 c0       	push   0xc0023f84
c0013052:	55                   	push   ebp
c0013053:	e8 74 d7 fe ff       	call   c00007cc <strcmp>
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	85 c0                	test   eax,eax
c001305d:	74 48                	je     c00130a7 <CPU::detectFeatures()+0x241>
c001305f:	eb 0f                	jmp    c0013070 <CPU::detectFeatures()+0x20a>
c0013061:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001306b:	e9 c1 01 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c0013070:	50                   	push   eax
c0013071:	50                   	push   eax
c0013072:	68 91 3f 02 c0       	push   0xc0023f91
c0013077:	55                   	push   ebp
c0013078:	e8 4f d7 fe ff       	call   c00007cc <strcmp>
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	85 c0                	test   eax,eax
c0013082:	74 23                	je     c00130a7 <CPU::detectFeatures()+0x241>
c0013084:	57                   	push   edi
c0013085:	57                   	push   edi
c0013086:	68 9e 3f 02 c0       	push   0xc0023f9e
c001308b:	55                   	push   ebp
c001308c:	e8 3b d7 fe ff       	call   c00007cc <strcmp>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	85 c0                	test   eax,eax
c0013096:	75 1e                	jne    c00130b6 <CPU::detectFeatures()+0x250>
c0013098:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00130a2:	e9 8a 01 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c00130a7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00130b1:	e9 7b 01 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c00130b6:	56                   	push   esi
c00130b7:	56                   	push   esi
c00130b8:	68 ab 3f 02 c0       	push   0xc0023fab
c00130bd:	55                   	push   ebp
c00130be:	e8 09 d7 fe ff       	call   c00007cc <strcmp>
c00130c3:	83 c4 10             	add    esp,0x10
c00130c6:	85 c0                	test   eax,eax
c00130c8:	75 0f                	jne    c00130d9 <CPU::detectFeatures()+0x273>
c00130ca:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00130d4:	e9 58 01 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c00130d9:	51                   	push   ecx
c00130da:	51                   	push   ecx
c00130db:	68 6a 3f 02 c0       	push   0xc0023f6a
c00130e0:	55                   	push   ebp
c00130e1:	e8 e6 d6 fe ff       	call   c00007cc <strcmp>
c00130e6:	83 c4 10             	add    esp,0x10
c00130e9:	85 c0                	test   eax,eax
c00130eb:	75 0f                	jne    c00130fc <CPU::detectFeatures()+0x296>
c00130ed:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00130f7:	e9 35 01 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c00130fc:	52                   	push   edx
c00130fd:	52                   	push   edx
c00130fe:	68 b8 3f 02 c0       	push   0xc0023fb8
c0013103:	55                   	push   ebp
c0013104:	e8 c3 d6 fe ff       	call   c00007cc <strcmp>
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	85 c0                	test   eax,eax
c001310e:	75 0f                	jne    c001311f <CPU::detectFeatures()+0x2b9>
c0013110:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001311a:	e9 12 01 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c001311f:	50                   	push   eax
c0013120:	50                   	push   eax
c0013121:	68 c5 3f 02 c0       	push   0xc0023fc5
c0013126:	55                   	push   ebp
c0013127:	e8 a0 d6 fe ff       	call   c00007cc <strcmp>
c001312c:	83 c4 10             	add    esp,0x10
c001312f:	85 c0                	test   eax,eax
c0013131:	75 0f                	jne    c0013142 <CPU::detectFeatures()+0x2dc>
c0013133:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001313d:	e9 ef 00 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c0013142:	50                   	push   eax
c0013143:	50                   	push   eax
c0013144:	68 d2 3f 02 c0       	push   0xc0023fd2
c0013149:	55                   	push   ebp
c001314a:	e8 7d d6 fe ff       	call   c00007cc <strcmp>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	85 c0                	test   eax,eax
c0013154:	75 0f                	jne    c0013165 <CPU::detectFeatures()+0x2ff>
c0013156:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013160:	e9 cc 00 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c0013165:	50                   	push   eax
c0013166:	50                   	push   eax
c0013167:	68 df 3f 02 c0       	push   0xc0023fdf
c001316c:	55                   	push   ebp
c001316d:	e8 5a d6 fe ff       	call   c00007cc <strcmp>
c0013172:	83 c4 10             	add    esp,0x10
c0013175:	85 c0                	test   eax,eax
c0013177:	75 0f                	jne    c0013188 <CPU::detectFeatures()+0x322>
c0013179:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013183:	e9 a9 00 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c0013188:	50                   	push   eax
c0013189:	50                   	push   eax
c001318a:	68 ec 3f 02 c0       	push   0xc0023fec
c001318f:	55                   	push   ebp
c0013190:	e8 37 d6 fe ff       	call   c00007cc <strcmp>
c0013195:	83 c4 10             	add    esp,0x10
c0013198:	85 c0                	test   eax,eax
c001319a:	75 0f                	jne    c00131ab <CPU::detectFeatures()+0x345>
c001319c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00131a6:	e9 86 00 00 00       	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c00131ab:	50                   	push   eax
c00131ac:	50                   	push   eax
c00131ad:	68 f9 3f 02 c0       	push   0xc0023ff9
c00131b2:	55                   	push   ebp
c00131b3:	e8 14 d6 fe ff       	call   c00007cc <strcmp>
c00131b8:	83 c4 10             	add    esp,0x10
c00131bb:	85 c0                	test   eax,eax
c00131bd:	75 0c                	jne    c00131cb <CPU::detectFeatures()+0x365>
c00131bf:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00131c9:	eb 66                	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c00131cb:	50                   	push   eax
c00131cc:	50                   	push   eax
c00131cd:	68 06 40 02 c0       	push   0xc0024006
c00131d2:	55                   	push   ebp
c00131d3:	e8 f4 d5 fe ff       	call   c00007cc <strcmp>
c00131d8:	83 c4 10             	add    esp,0x10
c00131db:	85 c0                	test   eax,eax
c00131dd:	75 0c                	jne    c00131eb <CPU::detectFeatures()+0x385>
c00131df:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00131e9:	eb 46                	jmp    c0013231 <CPU::detectFeatures()+0x3cb>
c00131eb:	57                   	push   edi
c00131ec:	57                   	push   edi
c00131ed:	68 13 40 02 c0       	push   0xc0024013
c00131f2:	55                   	push   ebp
c00131f3:	e8 d4 d5 fe ff       	call   c00007cc <strcmp>
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	85 c0                	test   eax,eax
c00131fd:	74 e0                	je     c00131df <CPU::detectFeatures()+0x379>
c00131ff:	56                   	push   esi
c0013200:	56                   	push   esi
c0013201:	68 20 40 02 c0       	push   0xc0024020
c0013206:	55                   	push   ebp
c0013207:	e8 c0 d5 fe ff       	call   c00007cc <strcmp>
c001320c:	83 c4 10             	add    esp,0x10
c001320f:	85 c0                	test   eax,eax
c0013211:	74 cc                	je     c00131df <CPU::detectFeatures()+0x379>
c0013213:	51                   	push   ecx
c0013214:	51                   	push   ecx
c0013215:	68 2d 40 02 c0       	push   0xc002402d
c001321a:	55                   	push   ebp
c001321b:	e8 ac d5 fe ff       	call   c00007cc <strcmp>
c0013220:	83 c4 10             	add    esp,0x10
c0013223:	85 c0                	test   eax,eax
c0013225:	74 b8                	je     c00131df <CPU::detectFeatures()+0x379>
c0013227:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013231:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013236:	0f 86 be 00 00 00    	jbe    c00132fa <CPU::detectFeatures()+0x494>
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	68 80 00 00 00       	push   0x80
c0013244:	e8 31 fb ff ff       	call   c0012d7a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013249:	83 e0 01             	and    eax,0x1
c001324c:	c1 e0 06             	shl    eax,0x6
c001324f:	88 c2                	mov    dl,al
c0013251:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013257:	83 e0 bf             	and    eax,0xffffffbf
c001325a:	09 d0                	or     eax,edx
c001325c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013262:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013269:	e8 0c fb ff ff       	call   c0012d7a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001326e:	83 e0 01             	and    eax,0x1
c0013271:	c1 e0 04             	shl    eax,0x4
c0013274:	88 c2                	mov    dl,al
c0013276:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001327c:	83 e0 ef             	and    eax,0xffffffef
c001327f:	09 d0                	or     eax,edx
c0013281:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013287:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001328e:	e8 e7 fa ff ff       	call   c0012d7a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013293:	c1 e0 07             	shl    eax,0x7
c0013296:	88 c2                	mov    dl,al
c0013298:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001329e:	83 e0 7f             	and    eax,0x7f
c00132a1:	09 d0                	or     eax,edx
c00132a3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00132a9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00132b0:	e8 f3 fa ff ff       	call   c0012da8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00132b5:	83 e0 01             	and    eax,0x1
c00132b8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00132bf:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00132c5:	83 e0 f7             	and    eax,0xfffffff7
c00132c8:	09 d0                	or     eax,edx
c00132ca:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00132d0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00132d7:	e8 cc fa ff ff       	call   c0012da8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	83 e0 01             	and    eax,0x1
c00132e2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00132e9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00132ef:	83 e0 fb             	and    eax,0xfffffffb
c00132f2:	09 d0                	or     eax,edx
c00132f4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00132fa:	83 ec 0c             	sub    esp,0xc
c00132fd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013301:	50                   	push   eax
c0013302:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013306:	50                   	push   eax
c0013307:	8d 74 24 28          	lea    esi,[esp+0x28]
c001330b:	56                   	push   esi
c001330c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013310:	50                   	push   eax
c0013311:	6a 01                	push   0x1
c0013313:	e8 82 f9 ff ff       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013318:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001331c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013322:	88 ca                	mov    dl,cl
c0013324:	83 e0 f0             	and    eax,0xfffffff0
c0013327:	83 e2 0f             	and    edx,0xf
c001332a:	09 d0                	or     eax,edx
c001332c:	88 ca                	mov    dl,cl
c001332e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013334:	c0 ea 04             	shr    dl,0x4
c0013337:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001333b:	0f b6 c2             	movzx  eax,dl
c001333e:	83 c4 20             	add    esp,0x20
c0013341:	c1 e0 06             	shl    eax,0x6
c0013344:	89 c7                	mov    edi,eax
c0013346:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001334c:	66 25 3f c0          	and    ax,0xc03f
c0013350:	09 f8                	or     eax,edi
c0013352:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013359:	89 c8                	mov    eax,ecx
c001335b:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013362:	c1 e8 08             	shr    eax,0x8
c0013365:	83 e5 3f             	and    ebp,0x3f
c0013368:	83 e0 0f             	and    eax,0xf
c001336b:	89 c7                	mov    edi,eax
c001336d:	c1 e7 06             	shl    edi,0x6
c0013370:	09 ef                	or     edi,ebp
c0013372:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013379:	89 fa                	mov    edx,edi
c001337b:	83 e5 c0             	and    ebp,0xffffffc0
c001337e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013384:	88 c2                	mov    dl,al
c0013386:	c0 ea 02             	shr    dl,0x2
c0013389:	89 d7                	mov    edi,edx
c001338b:	09 ef                	or     edi,ebp
c001338d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013393:	89 fa                	mov    edx,edi
c0013395:	83 e5 cf             	and    ebp,0xffffffcf
c0013398:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001339e:	89 cf                	mov    edi,ecx
c00133a0:	c1 ef 0c             	shr    edi,0xc
c00133a3:	83 e7 03             	and    edi,0x3
c00133a6:	c1 e7 04             	shl    edi,0x4
c00133a9:	09 ef                	or     edi,ebp
c00133ab:	3c 06                	cmp    al,0x6
c00133ad:	89 fa                	mov    edx,edi
c00133af:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00133b5:	74 04                	je     c00133bb <CPU::detectFeatures()+0x555>
c00133b7:	3c 0f                	cmp    al,0xf
c00133b9:	75 5c                	jne    c0013417 <CPU::detectFeatures()+0x5b1>
c00133bb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00133bf:	89 cf                	mov    edi,ecx
c00133c1:	c1 ef 10             	shr    edi,0x10
c00133c4:	c1 e7 04             	shl    edi,0x4
c00133c7:	09 fa                	or     edx,edi
c00133c9:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00133cf:	0f b6 d2             	movzx  edx,dl
c00133d2:	66 81 e7 3f c0       	and    di,0xc03f
c00133d7:	c1 e2 06             	shl    edx,0x6
c00133da:	09 fa                	or     edx,edi
c00133dc:	3c 0f                	cmp    al,0xf
c00133de:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00133e5:	75 30                	jne    c0013417 <CPU::detectFeatures()+0x5b1>
c00133e7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00133ed:	c1 e9 14             	shr    ecx,0x14
c00133f0:	83 e0 3f             	and    eax,0x3f
c00133f3:	83 c1 0f             	add    ecx,0xf
c00133f6:	88 ca                	mov    dl,cl
c00133f8:	c0 e9 02             	shr    cl,0x2
c00133fb:	c1 e2 06             	shl    edx,0x6
c00133fe:	09 d0                	or     eax,edx
c0013400:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013406:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001340c:	83 e0 c0             	and    eax,0xffffffc0
c001340f:	09 c1                	or     ecx,eax
c0013411:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013417:	83 ec 0c             	sub    esp,0xc
c001341a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013421:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013425:	50                   	push   eax
c0013426:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001342a:	55                   	push   ebp
c001342b:	56                   	push   esi
c001342c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013430:	57                   	push   edi
c0013431:	68 00 00 00 80       	push   0x80000000
c0013436:	e8 5f f8 ff ff       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001343b:	83 c4 20             	add    esp,0x20
c001343e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013446:	76 22                	jbe    c001346a <CPU::detectFeatures()+0x604>
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001344f:	50                   	push   eax
c0013450:	55                   	push   ebp
c0013451:	56                   	push   esi
c0013452:	57                   	push   edi
c0013453:	68 01 00 00 80       	push   0x80000001
c0013458:	e8 3d f8 ff ff       	call   c0012c9a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001345d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013467:	83 c4 20             	add    esp,0x20
c001346a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013470:	83 f8 01             	cmp    eax,0x1
c0013473:	75 6f                	jne    c00134e4 <CPU::detectFeatures()+0x67e>
c0013475:	51                   	push   ecx
c0013476:	51                   	push   ecx
c0013477:	68 39 40 02 c0       	push   0xc0024039
c001347c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013480:	56                   	push   esi
c0013481:	e8 ba d2 fe ff       	call   c0000740 <strcpy>
c0013486:	5f                   	pop    edi
c0013487:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001348d:	5d                   	pop    ebp
c001348e:	66 c1 e8 06          	shr    ax,0x6
c0013492:	0f b6 c0             	movzx  eax,al
c0013495:	50                   	push   eax
c0013496:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001349c:	c1 e8 0e             	shr    eax,0xe
c001349f:	0f b6 c0             	movzx  eax,al
c00134a2:	50                   	push   eax
c00134a3:	e8 9c f4 ff ff       	call   c0012944 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00134a8:	5a                   	pop    edx
c00134a9:	59                   	pop    ecx
c00134aa:	50                   	push   eax
c00134ab:	56                   	push   esi
c00134ac:	e8 cf d3 fe ff       	call   c0000880 <strcat>
c00134b1:	5f                   	pop    edi
c00134b2:	5d                   	pop    ebp
c00134b3:	56                   	push   esi
c00134b4:	53                   	push   ebx
c00134b5:	e8 7e ac ff ff       	call   c000e138 <Device::setName(char const*)>
c00134ba:	58                   	pop    eax
c00134bb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00134c1:	5a                   	pop    edx
c00134c2:	68 40 40 02 c0       	push   0xc0024040
c00134c7:	50                   	push   eax
c00134c8:	e8 ff d2 fe ff       	call   c00007cc <strcmp>
c00134cd:	83 c4 10             	add    esp,0x10
c00134d0:	85 c0                	test   eax,eax
c00134d2:	0f 85 71 03 00 00    	jne    c0013849 <CPU::detectFeatures()+0x9e3>
c00134d8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00134df:	e9 65 03 00 00       	jmp    c0013849 <CPU::detectFeatures()+0x9e3>
c00134e4:	83 f8 02             	cmp    eax,0x2
c00134e7:	0f 85 b5 00 00 00    	jne    c00135a2 <CPU::detectFeatures()+0x73c>
c00134ed:	57                   	push   edi
c00134ee:	57                   	push   edi
c00134ef:	68 52 40 02 c0       	push   0xc0024052
c00134f4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00134f8:	56                   	push   esi
c00134f9:	e8 42 d2 fe ff       	call   c0000740 <strcpy>
c00134fe:	5d                   	pop    ebp
c00134ff:	58                   	pop    eax
c0013500:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013506:	66 c1 e8 06          	shr    ax,0x6
c001350a:	0f b6 c0             	movzx  eax,al
c001350d:	50                   	push   eax
c001350e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013514:	c1 e8 0e             	shr    eax,0xe
c0013517:	0f b6 c0             	movzx  eax,al
c001351a:	50                   	push   eax
c001351b:	e8 90 f2 ff ff       	call   c00127b0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013520:	5a                   	pop    edx
c0013521:	59                   	pop    ecx
c0013522:	50                   	push   eax
c0013523:	56                   	push   esi
c0013524:	e8 57 d3 fe ff       	call   c0000880 <strcat>
c0013529:	5f                   	pop    edi
c001352a:	5d                   	pop    ebp
c001352b:	56                   	push   esi
c001352c:	53                   	push   ebx
c001352d:	e8 06 ac ff ff       	call   c000e138 <Device::setName(char const*)>
c0013532:	58                   	pop    eax
c0013533:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013539:	5a                   	pop    edx
c001353a:	68 57 40 02 c0       	push   0xc0024057
c001353f:	50                   	push   eax
c0013540:	e8 87 d2 fe ff       	call   c00007cc <strcmp>
c0013545:	83 c4 10             	add    esp,0x10
c0013548:	85 c0                	test   eax,eax
c001354a:	75 20                	jne    c001356c <CPU::detectFeatures()+0x706>
c001354c:	8b 15 a8 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264a8
c0013552:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013558:	a8 01                	test   al,0x1
c001355a:	74 10                	je     c001356c <CPU::detectFeatures()+0x706>
c001355c:	83 e0 fe             	and    eax,0xfffffffe
c001355f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013565:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001356c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013572:	c1 e8 0e             	shr    eax,0xe
c0013575:	3c 05                	cmp    al,0x5
c0013577:	0f 85 cc 02 00 00    	jne    c0013849 <CPU::detectFeatures()+0x9e3>
c001357d:	56                   	push   esi
c001357e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013584:	83 e0 0f             	and    eax,0xf
c0013587:	50                   	push   eax
c0013588:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001358e:	66 c1 e8 06          	shr    ax,0x6
c0013592:	0f b6 c0             	movzx  eax,al
c0013595:	50                   	push   eax
c0013596:	6a 05                	push   0x5
c0013598:	e8 89 f6 ff ff       	call   c0012c26 <CPU::AMD_K6_writeback(int, int, int)>
c001359d:	e9 1f 02 00 00       	jmp    c00137c1 <CPU::detectFeatures()+0x95b>
c00135a2:	8d 50 fd             	lea    edx,[eax-0x3]
c00135a5:	83 fa 01             	cmp    edx,0x1
c00135a8:	76 09                	jbe    c00135b3 <CPU::detectFeatures()+0x74d>
c00135aa:	83 f8 06             	cmp    eax,0x6
c00135ad:	0f 85 91 01 00 00    	jne    c0013744 <CPU::detectFeatures()+0x8de>
c00135b3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00135b9:	c1 ea 0e             	shr    edx,0xe
c00135bc:	80 fa 05             	cmp    dl,0x5
c00135bf:	75 7b                	jne    c001363c <CPU::detectFeatures()+0x7d6>
c00135c1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00135c7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00135cc:	66 81 fa 00 01       	cmp    dx,0x100
c00135d1:	75 0c                	jne    c00135df <CPU::detectFeatures()+0x779>
c00135d3:	51                   	push   ecx
c00135d4:	51                   	push   ecx
c00135d5:	68 5e 40 02 c0       	push   0xc002405e
c00135da:	e9 dc 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c00135df:	66 81 fa 00 02       	cmp    dx,0x200
c00135e4:	75 0c                	jne    c00135f2 <CPU::detectFeatures()+0x78c>
c00135e6:	52                   	push   edx
c00135e7:	52                   	push   edx
c00135e8:	68 71 40 02 c0       	push   0xc0024071
c00135ed:	e9 c9 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c00135f2:	66 81 fa 40 02       	cmp    dx,0x240
c00135f7:	75 0c                	jne    c0013605 <CPU::detectFeatures()+0x79f>
c00135f9:	50                   	push   eax
c00135fa:	50                   	push   eax
c00135fb:	68 83 40 02 c0       	push   0xc0024083
c0013600:	e9 b6 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c0013605:	83 f8 06             	cmp    eax,0x6
c0013608:	75 0c                	jne    c0013616 <CPU::detectFeatures()+0x7b0>
c001360a:	50                   	push   eax
c001360b:	50                   	push   eax
c001360c:	68 95 40 02 c0       	push   0xc0024095
c0013611:	e9 a5 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c0013616:	83 f8 04             	cmp    eax,0x4
c0013619:	75 0c                	jne    c0013627 <CPU::detectFeatures()+0x7c1>
c001361b:	50                   	push   eax
c001361c:	50                   	push   eax
c001361d:	68 a1 40 02 c0       	push   0xc00240a1
c0013622:	e9 94 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c0013627:	83 f8 03             	cmp    eax,0x3
c001362a:	0f 85 19 02 00 00    	jne    c0013849 <CPU::detectFeatures()+0x9e3>
c0013630:	50                   	push   eax
c0013631:	50                   	push   eax
c0013632:	68 a9 40 02 c0       	push   0xc00240a9
c0013637:	e9 7f 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c001363c:	80 fa 06             	cmp    dl,0x6
c001363f:	0f 85 db 00 00 00    	jne    c0013720 <CPU::detectFeatures()+0x8ba>
c0013645:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001364b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013650:	66 81 fa 80 01       	cmp    dx,0x180
c0013655:	75 0c                	jne    c0013663 <CPU::detectFeatures()+0x7fd>
c0013657:	50                   	push   eax
c0013658:	50                   	push   eax
c0013659:	68 b4 40 02 c0       	push   0xc00240b4
c001365e:	e9 58 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c0013663:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013669:	66 f7 c1 80 ff       	test   cx,0xff80
c001366e:	75 0c                	jne    c001367c <CPU::detectFeatures()+0x816>
c0013670:	50                   	push   eax
c0013671:	50                   	push   eax
c0013672:	68 c4 40 02 c0       	push   0xc00240c4
c0013677:	e9 3f 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c001367c:	66 81 fa 40 02       	cmp    dx,0x240
c0013681:	75 0c                	jne    c001368f <CPU::detectFeatures()+0x829>
c0013683:	55                   	push   ebp
c0013684:	55                   	push   ebp
c0013685:	68 cb 40 02 c0       	push   0xc00240cb
c001368a:	e9 2c 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c001368f:	66 81 fa 80 02       	cmp    dx,0x280
c0013694:	75 0c                	jne    c00136a2 <CPU::detectFeatures()+0x83c>
c0013696:	57                   	push   edi
c0013697:	57                   	push   edi
c0013698:	68 d4 40 02 c0       	push   0xc00240d4
c001369d:	e9 19 01 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c00136a2:	66 81 fa 40 03       	cmp    dx,0x340
c00136a7:	74 ed                	je     c0013696 <CPU::detectFeatures()+0x830>
c00136a9:	66 81 fa c0 03       	cmp    dx,0x3c0
c00136ae:	75 0c                	jne    c00136bc <CPU::detectFeatures()+0x856>
c00136b0:	56                   	push   esi
c00136b1:	56                   	push   esi
c00136b2:	68 db 40 02 c0       	push   0xc00240db
c00136b7:	e9 ff 00 00 00       	jmp    c00137bb <CPU::detectFeatures()+0x955>
c00136bc:	83 f8 06             	cmp    eax,0x6
c00136bf:	0f 84 45 ff ff ff    	je     c001360a <CPU::detectFeatures()+0x7a4>
c00136c5:	83 f8 04             	cmp    eax,0x4
c00136c8:	0f 84 4d ff ff ff    	je     c001361b <CPU::detectFeatures()+0x7b5>
c00136ce:	83 f8 03             	cmp    eax,0x3
c00136d1:	0f 85 72 01 00 00    	jne    c0013849 <CPU::detectFeatures()+0x9e3>
c00136d7:	51                   	push   ecx
c00136d8:	51                   	push   ecx
c00136d9:	68 e4 40 02 c0       	push   0xc00240e4
c00136de:	53                   	push   ebx
c00136df:	e8 54 aa ff ff       	call   c000e138 <Device::setName(char const*)>
c00136e4:	b1 c1                	mov    cl,0xc1
c00136e6:	88 c8                	mov    al,cl
c00136e8:	e6 22                	out    0x22,al
c00136ea:	e4 23                	in     al,0x23
c00136ec:	88 c2                	mov    dl,al
c00136ee:	88 c8                	mov    al,cl
c00136f0:	e6 22                	out    0x22,al
c00136f2:	88 d0                	mov    al,dl
c00136f4:	83 c8 10             	or     eax,0x10
c00136f7:	e6 23                	out    0x23,al
c00136f9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013700:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013703:	89 d0                	mov    eax,edx
c0013705:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001370b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001370f:	40                   	inc    eax
c0013710:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013716:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001371b:	e9 a1 00 00 00       	jmp    c00137c1 <CPU::detectFeatures()+0x95b>
c0013720:	83 f8 06             	cmp    eax,0x6
c0013723:	0f 84 e1 fe ff ff    	je     c001360a <CPU::detectFeatures()+0x7a4>
c0013729:	83 f8 04             	cmp    eax,0x4
c001372c:	0f 84 e9 fe ff ff    	je     c001361b <CPU::detectFeatures()+0x7b5>
c0013732:	83 f8 03             	cmp    eax,0x3
c0013735:	0f 85 0e 01 00 00    	jne    c0013849 <CPU::detectFeatures()+0x9e3>
c001373b:	52                   	push   edx
c001373c:	52                   	push   edx
c001373d:	68 ef 40 02 c0       	push   0xc00240ef
c0013742:	eb 77                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c0013744:	83 f8 07             	cmp    eax,0x7
c0013747:	75 09                	jne    c0013752 <CPU::detectFeatures()+0x8ec>
c0013749:	50                   	push   eax
c001374a:	50                   	push   eax
c001374b:	68 f9 40 02 c0       	push   0xc00240f9
c0013750:	eb 69                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c0013752:	83 f8 0a             	cmp    eax,0xa
c0013755:	75 09                	jne    c0013760 <CPU::detectFeatures()+0x8fa>
c0013757:	50                   	push   eax
c0013758:	50                   	push   eax
c0013759:	68 04 41 02 c0       	push   0xc0024104
c001375e:	eb 5b                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c0013760:	83 f8 0b             	cmp    eax,0xb
c0013763:	75 09                	jne    c001376e <CPU::detectFeatures()+0x908>
c0013765:	50                   	push   eax
c0013766:	50                   	push   eax
c0013767:	68 0c 41 02 c0       	push   0xc002410c
c001376c:	eb 4d                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c001376e:	83 f8 08             	cmp    eax,0x8
c0013771:	75 09                	jne    c001377c <CPU::detectFeatures()+0x916>
c0013773:	50                   	push   eax
c0013774:	50                   	push   eax
c0013775:	68 15 41 02 c0       	push   0xc0024115
c001377a:	eb 3f                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c001377c:	83 f8 09             	cmp    eax,0x9
c001377f:	75 09                	jne    c001378a <CPU::detectFeatures()+0x924>
c0013781:	50                   	push   eax
c0013782:	50                   	push   eax
c0013783:	68 1d 41 02 c0       	push   0xc002411d
c0013788:	eb 31                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c001378a:	83 f8 05             	cmp    eax,0x5
c001378d:	75 09                	jne    c0013798 <CPU::detectFeatures()+0x932>
c001378f:	50                   	push   eax
c0013790:	50                   	push   eax
c0013791:	68 25 41 02 c0       	push   0xc0024125
c0013796:	eb 23                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c0013798:	83 f8 0c             	cmp    eax,0xc
c001379b:	75 09                	jne    c00137a6 <CPU::detectFeatures()+0x940>
c001379d:	55                   	push   ebp
c001379e:	55                   	push   ebp
c001379f:	68 33 41 02 c0       	push   0xc0024133
c00137a4:	eb 15                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c00137a6:	83 f8 0d             	cmp    eax,0xd
c00137a9:	75 09                	jne    c00137b4 <CPU::detectFeatures()+0x94e>
c00137ab:	57                   	push   edi
c00137ac:	57                   	push   edi
c00137ad:	68 3e 41 02 c0       	push   0xc002413e
c00137b2:	eb 07                	jmp    c00137bb <CPU::detectFeatures()+0x955>
c00137b4:	56                   	push   esi
c00137b5:	56                   	push   esi
c00137b6:	68 52 41 02 c0       	push   0xc0024152
c00137bb:	53                   	push   ebx
c00137bc:	e8 77 a9 ff ff       	call   c000e138 <Device::setName(char const*)>
c00137c1:	83 c4 10             	add    esp,0x10
c00137c4:	e9 80 00 00 00       	jmp    c0013849 <CPU::detectFeatures()+0x9e3>
c00137c9:	51                   	push   ecx
c00137ca:	51                   	push   ecx
c00137cb:	68 9e 3f 02 c0       	push   0xc0023f9e
c00137d0:	55                   	push   ebp
c00137d1:	e8 6a cf fe ff       	call   c0000740 <strcpy>
c00137d6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00137e0:	e8 fe c9 fe ff       	call   c00001e3 <is486>
c00137e5:	83 c4 10             	add    esp,0x10
c00137e8:	85 c0                	test   eax,eax
c00137ea:	74 2b                	je     c0013817 <CPU::detectFeatures()+0x9b1>
c00137ec:	52                   	push   edx
c00137ed:	52                   	push   edx
c00137ee:	68 5e 41 02 c0       	push   0xc002415e
c00137f3:	53                   	push   ebx
c00137f4:	e8 3f a9 ff ff       	call   c000e138 <Device::setName(char const*)>
c00137f9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013800:	0f 20 c0             	mov    eax,cr0
c0013803:	83 e0 14             	and    eax,0x14
c0013806:	83 c4 10             	add    esp,0x10
c0013809:	83 f8 04             	cmp    eax,0x4
c001380c:	75 1f                	jne    c001382d <CPU::detectFeatures()+0x9c7>
c001380e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013815:	eb 32                	jmp    c0013849 <CPU::detectFeatures()+0x9e3>
c0013817:	50                   	push   eax
c0013818:	50                   	push   eax
c0013819:	68 69 41 02 c0       	push   0xc0024169
c001381e:	53                   	push   ebx
c001381f:	e8 14 a9 ff ff       	call   c000e138 <Device::setName(char const*)>
c0013824:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001382b:	eb d3                	jmp    c0013800 <CPU::detectFeatures()+0x99a>
c001382d:	e8 8c c9 fe ff       	call   c00001be <hasLegacyFPU>
c0013832:	83 e0 01             	and    eax,0x1
c0013835:	8d 14 00             	lea    edx,[eax+eax*1]
c0013838:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001383e:	83 e0 fd             	and    eax,0xfffffffd
c0013841:	09 d0                	or     eax,edx
c0013843:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013849:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013850:	83 c4 4c             	add    esp,0x4c
c0013853:	5b                   	pop    ebx
c0013854:	5e                   	pop    esi
c0013855:	5f                   	pop    edi
c0013856:	5d                   	pop    ebp
c0013857:	c3                   	ret    

c0013858 <CPU::setupSMEP()>:
c0013858:	0f 20 e0             	mov    eax,cr4
c001385b:	0d 00 00 10 00       	or     eax,0x100000
c0013860:	0f 22 e0             	mov    cr4,eax
c0013863:	c3                   	ret    

c0013864 <CPU::setupUMIP()>:
c0013864:	0f 20 e0             	mov    eax,cr4
c0013867:	80 cc 08             	or     ah,0x8
c001386a:	0f 22 e0             	mov    cr4,eax
c001386d:	c3                   	ret    

c001386e <CPU::setupTSC()>:
c001386e:	0f 20 e0             	mov    eax,cr4
c0013871:	83 c8 04             	or     eax,0x4
c0013874:	0f 22 e0             	mov    cr4,eax
c0013877:	c3                   	ret    

c0013878 <CPU::setupLargePages()>:
c0013878:	0f 20 e0             	mov    eax,cr4
c001387b:	83 c8 10             	or     eax,0x10
c001387e:	0f 22 e0             	mov    cr4,eax
c0013881:	c3                   	ret    

c0013882 <CPU::setupPAT()>:
c0013882:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0013887:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001388e:	74 2c                	je     c00138bc <CPU::setupPAT()+0x3a>
c0013890:	53                   	push   ebx
c0013891:	83 ec 10             	sub    esp,0x10
c0013894:	68 77 02 00 00       	push   0x277
c0013899:	50                   	push   eax
c001389a:	e8 85 56 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001389f:	83 e2 f8             	and    edx,0xfffffff8
c00138a2:	83 ca 01             	or     edx,0x1
c00138a5:	52                   	push   edx
c00138a6:	50                   	push   eax
c00138a7:	68 77 02 00 00       	push   0x277
c00138ac:	ff 35 a8 64 02 c0    	push   DWORD PTR ds:0xc00264a8
c00138b2:	e8 99 56 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c00138b7:	83 c4 28             	add    esp,0x28
c00138ba:	5b                   	pop    ebx
c00138bb:	c3                   	ret    
c00138bc:	c3                   	ret    
c00138bd:	90                   	nop

c00138be <CPU::setupMTRR()>:
c00138be:	c3                   	ret    
c00138bf:	90                   	nop

c00138c0 <CPU::setupGlobalPages()>:
c00138c0:	0f 20 e0             	mov    eax,cr4
c00138c3:	0c 80                	or     al,0x80
c00138c5:	0f 22 e0             	mov    cr4,eax
c00138c8:	c3                   	ret    
c00138c9:	90                   	nop

c00138ca <CPU::allowUsermodeDataAccess()>:
c00138ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138ce:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00138d5:	74 03                	je     c00138da <CPU::allowUsermodeDataAccess()+0x10>
c00138d7:	0f 01 cb             	stac   
c00138da:	c3                   	ret    
c00138db:	90                   	nop

c00138dc <CPU::prohibitUsermodeDataAccess()>:
c00138dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138e0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00138e7:	74 03                	je     c00138ec <CPU::prohibitUsermodeDataAccess()+0x10>
c00138e9:	0f 01 ca             	clac   
c00138ec:	c3                   	ret    
c00138ed:	90                   	nop

c00138ee <CPU::setupSMAP()>:
c00138ee:	0f 20 e0             	mov    eax,cr4
c00138f1:	0d 00 00 20 00       	or     eax,0x200000
c00138f6:	0f 22 e0             	mov    cr4,eax
c00138f9:	eb e1                	jmp    c00138dc <CPU::prohibitUsermodeDataAccess()>
c00138fb:	90                   	nop

c00138fc <CPU::setupFeatures()>:
c00138fc:	83 ec 0c             	sub    esp,0xc
c00138ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013903:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001390a:	74 07                	je     c0013913 <CPU::setupFeatures()+0x17>
c001390c:	52                   	push   edx
c001390d:	e8 46 ff ff ff       	call   c0013858 <CPU::setupSMEP()>
c0013912:	58                   	pop    eax
c0013913:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001391a:	74 07                	je     c0013923 <CPU::setupFeatures()+0x27>
c001391c:	52                   	push   edx
c001391d:	e8 cc ff ff ff       	call   c00138ee <CPU::setupSMAP()>
c0013922:	58                   	pop    eax
c0013923:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001392a:	74 07                	je     c0013933 <CPU::setupFeatures()+0x37>
c001392c:	52                   	push   edx
c001392d:	e8 32 ff ff ff       	call   c0013864 <CPU::setupUMIP()>
c0013932:	58                   	pop    eax
c0013933:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001393a:	74 07                	je     c0013943 <CPU::setupFeatures()+0x47>
c001393c:	52                   	push   edx
c001393d:	e8 2c ff ff ff       	call   c001386e <CPU::setupTSC()>
c0013942:	58                   	pop    eax
c0013943:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001394a:	74 07                	je     c0013953 <CPU::setupFeatures()+0x57>
c001394c:	52                   	push   edx
c001394d:	e8 26 ff ff ff       	call   c0013878 <CPU::setupLargePages()>
c0013952:	59                   	pop    ecx
c0013953:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001395a:	74 07                	je     c0013963 <CPU::setupFeatures()+0x67>
c001395c:	52                   	push   edx
c001395d:	e8 5e ff ff ff       	call   c00138c0 <CPU::setupGlobalPages()>
c0013962:	58                   	pop    eax
c0013963:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001396a:	74 0c                	je     c0013978 <CPU::setupFeatures()+0x7c>
c001396c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013970:	83 c4 0c             	add    esp,0xc
c0013973:	e9 0a ff ff ff       	jmp    c0013882 <CPU::setupPAT()>
c0013978:	83 c4 0c             	add    esp,0xc
c001397b:	c3                   	ret    

c001397c <CPU::open(int, int, void*)>:
c001397c:	57                   	push   edi
c001397d:	56                   	push   esi
c001397e:	53                   	push   ebx
c001397f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013983:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013987:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001398d:	83 ec 0c             	sub    esp,0xc
c0013990:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013996:	68 74 41 02 c0       	push   0xc0024174
c001399b:	e8 7d 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139a0:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00139a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00139a9:	e8 0e 59 ff ff       	call   c00092bc <GDT::setup()>
c00139ae:	c7 04 24 86 41 02 c0 	mov    DWORD PTR [esp],0xc0024186
c00139b5:	e8 63 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139ba:	83 c4 0c             	add    esp,0xc
c00139bd:	6a 00                	push   0x0
c00139bf:	68 ef be ad de       	push   0xdeadbeef
c00139c4:	57                   	push   edi
c00139c5:	e8 e6 76 ff ff       	call   c000b0b0 <TSS::setup(unsigned long, unsigned long)>
c00139ca:	c7 04 24 98 41 02 c0 	mov    DWORD PTR [esp],0xc0024198
c00139d1:	e8 47 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00139d9:	e8 b2 76 ff ff       	call   c000b090 <TSS::flush()>
c00139de:	c7 04 24 ac 41 02 c0 	mov    DWORD PTR [esp],0xc00241ac
c00139e5:	e8 33 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139ea:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00139f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00139f3:	e8 2e 5b ff ff       	call   c0009526 <IDT::setup()>
c00139f8:	c7 04 24 be 41 02 c0 	mov    DWORD PTR [esp],0xc00241be
c00139ff:	e8 19 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a04:	b8 00 04 00 00       	mov    eax,0x400
c0013a09:	0f 23 f8             	mov    db7,eax
c0013a0c:	c7 04 24 dc 41 02 c0 	mov    DWORD PTR [esp],0xc00241dc
c0013a13:	e8 05 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a18:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013a22:	e8 d2 63 ff ff       	call   c0009df9 <Phys::allocatePage()>
c0013a27:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013a2d:	89 30                	mov    DWORD PTR [eax],esi
c0013a2f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013a35:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013a38:	c7 04 24 fe 41 02 c0 	mov    DWORD PTR [esp],0xc00241fe
c0013a3f:	e8 d9 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a44:	58                   	pop    eax
c0013a45:	5a                   	pop    edx
c0013a46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013a4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013a50:	e8 55 86 ff ff       	call   c000c0aa <VAS::setCPUSpecific(unsigned long)>
c0013a55:	c7 04 24 26 42 02 c0 	mov    DWORD PTR [esp],0xc0024226
c0013a5c:	e8 bc 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a64:	e8 fd f3 ff ff       	call   c0012e66 <CPU::detectFeatures()>
c0013a69:	c7 04 24 49 42 02 c0 	mov    DWORD PTR [esp],0xc0024249
c0013a70:	e8 a8 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a75:	e8 cc b8 ff ff       	call   c000f346 <setupInterruptController()>
c0013a7a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013a80:	c7 04 24 6d 42 02 c0 	mov    DWORD PTR [esp],0xc002426d
c0013a87:	e8 91 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a8c:	a1 c0 64 02 c0       	mov    eax,ds:0xc00264c0
c0013a91:	83 e0 10             	and    eax,0x10
c0013a94:	83 f8 01             	cmp    eax,0x1
c0013a97:	19 c0                	sbb    eax,eax
c0013a99:	83 e0 46             	and    eax,0x46
c0013a9c:	83 c0 1e             	add    eax,0x1e
c0013a9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013aa2:	e8 89 ce ff ff       	call   c0010930 <setupTimer(int)>
c0013aa7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013aad:	c7 04 24 88 42 02 c0 	mov    DWORD PTR [esp],0xc0024288
c0013ab4:	e8 64 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013ab9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013abc:	e8 3b fe ff ff       	call   c00138fc <CPU::setupFeatures()>
c0013ac1:	c7 04 24 a3 42 02 c0 	mov    DWORD PTR [esp],0xc00242a3
c0013ac8:	e8 50 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	31 c0                	xor    eax,eax
c0013ad2:	5b                   	pop    ebx
c0013ad3:	5e                   	pop    esi
c0013ad4:	5f                   	pop    edi
c0013ad5:	c3                   	ret    

c0013ad6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013ad6:	57                   	push   edi
c0013ad7:	56                   	push   esi
c0013ad8:	53                   	push   ebx
c0013ad9:	51                   	push   ecx
c0013ada:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ade:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013ae1:	0f 02 c0             	lar    eax,ax
c0013ae4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013ae7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013aeb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013aee:	88 ca                	mov    dl,cl
c0013af0:	c0 ea 06             	shr    dl,0x6
c0013af3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013af7:	89 ca                	mov    edx,ecx
c0013af9:	66 c1 ea 03          	shr    dx,0x3
c0013afd:	83 e2 07             	and    edx,0x7
c0013b00:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013b05:	88 17                	mov    BYTE PTR [edi],dl
c0013b07:	0f 84 a6 01 00 00    	je     c0013cb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013b0d:	83 e1 07             	and    ecx,0x7
c0013b10:	80 f9 04             	cmp    cl,0x4
c0013b13:	0f 84 98 00 00 00    	je     c0013bb1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013b19:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013b1e:	0f 95 c0             	setne  al
c0013b21:	80 f9 05             	cmp    cl,0x5
c0013b24:	0f 95 c2             	setne  dl
c0013b27:	08 c2                	or     dl,al
c0013b29:	74 79                	je     c0013ba4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013b2b:	84 c9                	test   cl,cl
c0013b2d:	75 05                	jne    c0013b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013b2f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b32:	eb 3c                	jmp    c0013b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b34:	80 f9 01             	cmp    cl,0x1
c0013b37:	75 05                	jne    c0013b3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013b39:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b3c:	eb 32                	jmp    c0013b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b3e:	80 f9 02             	cmp    cl,0x2
c0013b41:	75 05                	jne    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013b43:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b46:	eb 28                	jmp    c0013b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b48:	31 c0                	xor    eax,eax
c0013b4a:	80 f9 03             	cmp    cl,0x3
c0013b4d:	75 05                	jne    c0013b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013b4f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b52:	eb 1c                	jmp    c0013b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b54:	80 f9 05             	cmp    cl,0x5
c0013b57:	75 05                	jne    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013b59:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013b5c:	eb 12                	jmp    c0013b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b5e:	80 f9 06             	cmp    cl,0x6
c0013b61:	75 05                	jne    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013b63:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b66:	eb 08                	jmp    c0013b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b68:	80 f9 07             	cmp    cl,0x7
c0013b6b:	75 03                	jne    c0013b70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b6d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013b70:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013b75:	75 10                	jne    c0013b87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013b77:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013b7b:	b9 03 00 00 00       	mov    ecx,0x3
c0013b80:	01 d0                	add    eax,edx
c0013b82:	e9 37 01 00 00       	jmp    c0013cbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b87:	b9 02 00 00 00       	mov    ecx,0x2
c0013b8c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013b91:	0f 85 27 01 00 00    	jne    c0013cbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b97:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013b9a:	b9 06 00 00 00       	mov    ecx,0x6
c0013b9f:	e9 1a 01 00 00       	jmp    c0013cbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ba4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013ba7:	b9 06 00 00 00       	mov    ecx,0x6
c0013bac:	e9 0f 01 00 00       	jmp    c0013cc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bb1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013bb4:	88 ca                	mov    dl,cl
c0013bb6:	c0 ea 06             	shr    dl,0x6
c0013bb9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013bbd:	89 ca                	mov    edx,ecx
c0013bbf:	66 c1 ea 03          	shr    dx,0x3
c0013bc3:	83 e2 07             	and    edx,0x7
c0013bc6:	80 e1 07             	and    cl,0x7
c0013bc9:	75 05                	jne    c0013bd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013bcb:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013bce:	eb 4c                	jmp    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bd0:	80 f9 01             	cmp    cl,0x1
c0013bd3:	75 05                	jne    c0013bda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013bd5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013bd8:	eb 42                	jmp    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bda:	80 f9 02             	cmp    cl,0x2
c0013bdd:	75 05                	jne    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013bdf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013be2:	eb 38                	jmp    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013be4:	80 f9 03             	cmp    cl,0x3
c0013be7:	75 05                	jne    c0013bee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013be9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013bec:	eb 2e                	jmp    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bee:	80 f9 04             	cmp    cl,0x4
c0013bf1:	75 12                	jne    c0013c05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013bf3:	f6 c4 60             	test   ah,0x60
c0013bf6:	75 08                	jne    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013bf8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013bfb:	8d 78 14             	lea    edi,[eax+0x14]
c0013bfe:	eb 1c                	jmp    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013c00:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013c03:	eb 17                	jmp    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013c05:	80 f9 05             	cmp    cl,0x5
c0013c08:	75 05                	jne    c0013c0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013c0a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013c0d:	eb 0d                	jmp    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013c0f:	80 f9 06             	cmp    cl,0x6
c0013c12:	75 05                	jne    c0013c19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013c14:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013c17:	eb 03                	jmp    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013c19:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013c1c:	84 d2                	test   dl,dl
c0013c1e:	75 05                	jne    c0013c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013c20:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013c23:	eb 3c                	jmp    c0013c61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c25:	80 fa 01             	cmp    dl,0x1
c0013c28:	75 05                	jne    c0013c2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013c2a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013c2d:	eb 32                	jmp    c0013c61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c2f:	80 fa 02             	cmp    dl,0x2
c0013c32:	75 05                	jne    c0013c39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013c34:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013c37:	eb 28                	jmp    c0013c61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c39:	80 fa 03             	cmp    dl,0x3
c0013c3c:	75 05                	jne    c0013c43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013c3e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013c41:	eb 1e                	jmp    c0013c61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c43:	31 c0                	xor    eax,eax
c0013c45:	80 fa 04             	cmp    dl,0x4
c0013c48:	74 17                	je     c0013c61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c4a:	80 fa 05             	cmp    dl,0x5
c0013c4d:	75 05                	jne    c0013c54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013c4f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013c52:	eb 0d                	jmp    c0013c61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c54:	80 fa 06             	cmp    dl,0x6
c0013c57:	75 05                	jne    c0013c5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013c59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c5c:	eb 03                	jmp    c0013c61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c5e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c61:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c66:	0f 94 c2             	sete   dl
c0013c69:	80 f9 05             	cmp    cl,0x5
c0013c6c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013c70:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013c75:	d3 e0                	shl    eax,cl
c0013c77:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013c7b:	74 0a                	je     c0013c87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013c7d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c80:	b9 07 00 00 00       	mov    ecx,0x7
c0013c85:	eb 37                	jmp    c0013cbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013c87:	01 f8                	add    eax,edi
c0013c89:	b9 03 00 00 00       	mov    ecx,0x3
c0013c8e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c93:	74 2b                	je     c0013cc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c95:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c9a:	75 0d                	jne    c0013ca9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013c9c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013ca0:	01 c8                	add    eax,ecx
c0013ca2:	b9 04 00 00 00       	mov    ecx,0x4
c0013ca7:	eb 17                	jmp    c0013cc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013ca9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013cac:	b9 07 00 00 00       	mov    ecx,0x7
c0013cb1:	eb 0d                	jmp    c0013cc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013cb3:	b9 02 00 00 00       	mov    ecx,0x2
c0013cb8:	b2 01                	mov    dl,0x1
c0013cba:	31 c0                	xor    eax,eax
c0013cbc:	eb 02                	jmp    c0013cc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013cbe:	31 d2                	xor    edx,edx
c0013cc0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cc4:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013cc6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013cca:	88 11                	mov    BYTE PTR [ecx],dl
c0013ccc:	5a                   	pop    edx
c0013ccd:	5b                   	pop    ebx
c0013cce:	5e                   	pop    esi
c0013ccf:	5f                   	pop    edi
c0013cd0:	c3                   	ret    

c0013cd1 <Krnl::smpEntry()>:
c0013cd1:	eb fe                	jmp    c0013cd1 <Krnl::smpEntry()>

c0013cd3 <Krnl::startCPU(int)>:
c0013cd3:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0013cd8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013cdf:	0f 84 36 01 00 00    	je     c0013e1b <Krnl::startCPU(int)+0x148>
c0013ce5:	53                   	push   ebx
c0013ce6:	83 ec 10             	sub    esp,0x10
c0013ce9:	fa                   	cli    
c0013cea:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0013cf0:	6a 1b                	push   0x1b
c0013cf2:	ff 35 a8 64 02 c0    	push   DWORD PTR ds:0xc00264a8
c0013cf8:	e8 27 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013cfd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d02:	89 c3                	mov    ebx,eax
c0013d04:	58                   	pop    eax
c0013d05:	5a                   	pop    edx
c0013d06:	53                   	push   ebx
c0013d07:	68 ec 42 02 c0       	push   0xc00242ec
c0013d0c:	e8 ea 8d ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0013d11:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d29:	c1 e0 18             	shl    eax,0x18
c0013d2c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013d32:	83 c4 10             	add    esp,0x10
c0013d35:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013d3b:	09 c2                	or     edx,eax
c0013d3d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013d43:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013d49:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d4f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d55:	80 cd c5             	or     ch,0xc5
c0013d58:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d5e:	f3 90                	pause  
c0013d60:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d62:	0f ba e1 0c          	bt     ecx,0xc
c0013d66:	72 f6                	jb     c0013d5e <Krnl::startCPU(int)+0x8b>
c0013d68:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d6e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d74:	09 c1                	or     ecx,eax
c0013d76:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d7c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d82:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d88:	80 cd 85             	or     ch,0x85
c0013d8b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d91:	f3 90                	pause  
c0013d93:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d95:	0f ba e1 0c          	bt     ecx,0xc
c0013d99:	72 f6                	jb     c0013d91 <Krnl::startCPU(int)+0xbe>
c0013d9b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013da5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013dab:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013db1:	09 c1                	or     ecx,eax
c0013db3:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013db9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013dbf:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013dc5:	81 c9 02 06 00 00    	or     ecx,0x602
c0013dcb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013dd1:	f3 90                	pause  
c0013dd3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013dd5:	0f ba e1 0c          	bt     ecx,0xc
c0013dd9:	72 f6                	jb     c0013dd1 <Krnl::startCPU(int)+0xfe>
c0013ddb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013de5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013deb:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013df1:	09 c8                	or     eax,ecx
c0013df3:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013df9:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013dff:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013e04:	0d 02 06 00 00       	or     eax,0x602
c0013e09:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013e0f:	f3 90                	pause  
c0013e11:	8b 02                	mov    eax,DWORD PTR [edx]
c0013e13:	0f ba e0 0c          	bt     eax,0xc
c0013e17:	72 f6                	jb     c0013e0f <Krnl::startCPU(int)+0x13c>
c0013e19:	eb fe                	jmp    c0013e19 <Krnl::startCPU(int)+0x146>
c0013e1b:	c3                   	ret    

c0013e1c <Krnl::startCPUs()>:
c0013e1c:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0013e21:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013e27:	88 c2                	mov    dl,al
c0013e29:	83 e2 0a             	and    edx,0xa
c0013e2c:	80 fa 0a             	cmp    dl,0xa
c0013e2f:	75 09                	jne    c0013e3a <Krnl::startCPUs()+0x1e>
c0013e31:	a8 01                	test   al,0x1
c0013e33:	74 05                	je     c0013e3a <Krnl::startCPUs()+0x1e>
c0013e35:	e9 61 c3 fe ff       	jmp    c000019b <prepareTramp>
c0013e3a:	c3                   	ret    
c0013e3b:	90                   	nop

c0013e3c <EnvVarContainer::getEnv(char const*)>:
c0013e3c:	57                   	push   edi
c0013e3d:	56                   	push   esi
c0013e3e:	53                   	push   ebx
c0013e3f:	31 db                	xor    ebx,ebx
c0013e41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e45:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013e47:	7e 2b                	jle    c0013e74 <EnvVarContainer::getEnv(char const*)+0x38>
c0013e49:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013e50:	50                   	push   eax
c0013e51:	50                   	push   eax
c0013e52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e55:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013e58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e5c:	e8 6b c9 fe ff       	call   c00007cc <strcmp>
c0013e61:	83 c4 10             	add    esp,0x10
c0013e64:	85 c0                	test   eax,eax
c0013e66:	75 09                	jne    c0013e71 <EnvVarContainer::getEnv(char const*)+0x35>
c0013e68:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e6b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013e6f:	eb 05                	jmp    c0013e76 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013e71:	43                   	inc    ebx
c0013e72:	eb d1                	jmp    c0013e45 <EnvVarContainer::getEnv(char const*)+0x9>
c0013e74:	31 c0                	xor    eax,eax
c0013e76:	5b                   	pop    ebx
c0013e77:	5e                   	pop    esi
c0013e78:	5f                   	pop    edi
c0013e79:	c3                   	ret    

c0013e7a <EnvVarContainer::setEnv(char const*, char const*)>:
c0013e7a:	55                   	push   ebp
c0013e7b:	57                   	push   edi
c0013e7c:	56                   	push   esi
c0013e7d:	53                   	push   ebx
c0013e7e:	83 ec 28             	sub    esp,0x28
c0013e81:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013e85:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013e89:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e8d:	56                   	push   esi
c0013e8e:	e8 0d c8 fe ff       	call   c00006a0 <strlen>
c0013e93:	40                   	inc    eax
c0013e94:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e97:	e8 27 5b ff ff       	call   c00099c3 <malloc>
c0013e9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ea3:	e8 f8 c7 fe ff       	call   c00006a0 <strlen>
c0013ea8:	40                   	inc    eax
c0013ea9:	89 04 24             	mov    DWORD PTR [esp],eax
c0013eac:	e8 12 5b ff ff       	call   c00099c3 <malloc>
c0013eb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0013eb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013eb8:	e8 e3 c7 fe ff       	call   c00006a0 <strlen>
c0013ebd:	83 c4 0c             	add    esp,0xc
c0013ec0:	40                   	inc    eax
c0013ec1:	50                   	push   eax
c0013ec2:	6a 00                	push   0x0
c0013ec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ec8:	e8 b7 c7 fe ff       	call   c0000684 <memset>
c0013ecd:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ed0:	e8 cb c7 fe ff       	call   c00006a0 <strlen>
c0013ed5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ed9:	8d 48 01             	lea    ecx,[eax+0x1]
c0013edc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ede:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ee1:	89 de                	mov    esi,ebx
c0013ee3:	e8 b8 c7 fe ff       	call   c00006a0 <strlen>
c0013ee8:	83 c4 0c             	add    esp,0xc
c0013eeb:	40                   	inc    eax
c0013eec:	50                   	push   eax
c0013eed:	6a 00                	push   0x0
c0013eef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ef3:	e8 8c c7 fe ff       	call   c0000684 <memset>
c0013ef8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013efb:	e8 a0 c7 fe ff       	call   c00006a0 <strlen>
c0013f00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013f04:	8d 48 01             	lea    ecx,[eax+0x1]
c0013f07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013f0c:	40                   	inc    eax
c0013f0d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013f10:	c1 e0 03             	shl    eax,0x3
c0013f13:	5a                   	pop    edx
c0013f14:	59                   	pop    ecx
c0013f15:	50                   	push   eax
c0013f16:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013f19:	e8 91 5a ff ff       	call   c00099af <realloc>
c0013f1e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013f22:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013f25:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013f28:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013f2c:	b9 08 00 00 00       	mov    ecx,0x8
c0013f31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f33:	83 c4 2c             	add    esp,0x2c
c0013f36:	5b                   	pop    ebx
c0013f37:	5e                   	pop    esi
c0013f38:	5f                   	pop    edi
c0013f39:	5d                   	pop    ebp
c0013f3a:	c3                   	ret    
c0013f3b:	90                   	nop

c0013f3c <EnvVarContainer::deleteEnv(char const*)>:
c0013f3c:	c3                   	ret    
c0013f3d:	90                   	nop

c0013f3e <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013f3e:	55                   	push   ebp
c0013f3f:	57                   	push   edi
c0013f40:	56                   	push   esi
c0013f41:	53                   	push   ebx
c0013f42:	81 ec 38 01 00 00    	sub    esp,0x138
c0013f48:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013f4f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013f56:	68 14 01 00 00       	push   0x114
c0013f5b:	e8 63 5a ff ff       	call   c00099c3 <malloc>
c0013f60:	83 c4 0c             	add    esp,0xc
c0013f63:	89 c3                	mov    ebx,eax
c0013f65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013f68:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013f6f:	50                   	push   eax
c0013f70:	e8 f1 90 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0013f75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f78:	e8 bb 93 ff ff       	call   c000d338 <File::exists()>
c0013f7d:	83 c4 10             	add    esp,0x10
c0013f80:	84 c0                	test   al,al
c0013f82:	75 31                	jne    c0013fb5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013f84:	50                   	push   eax
c0013f85:	50                   	push   eax
c0013f86:	6a 12                	push   0x12
c0013f88:	53                   	push   ebx
c0013f89:	e8 3c 91 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c0013f8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f90:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013f93:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f96:	e8 05 c7 fe ff       	call   c00006a0 <strlen>
c0013f9b:	5a                   	pop    edx
c0013f9c:	31 d2                	xor    edx,edx
c0013f9e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013fa2:	51                   	push   ecx
c0013fa3:	56                   	push   esi
c0013fa4:	52                   	push   edx
c0013fa5:	50                   	push   eax
c0013fa6:	53                   	push   ebx
c0013fa7:	ff d7                	call   edi
c0013fa9:	83 c4 14             	add    esp,0x14
c0013fac:	53                   	push   ebx
c0013fad:	e8 76 91 ff ff       	call   c000d128 <File::close()>
c0013fb2:	83 c4 10             	add    esp,0x10
c0013fb5:	56                   	push   esi
c0013fb6:	31 f6                	xor    esi,esi
c0013fb8:	68 00 01 00 00       	push   0x100
c0013fbd:	6a 00                	push   0x0
c0013fbf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013fc3:	50                   	push   eax
c0013fc4:	e8 bb c6 fe ff       	call   c0000684 <memset>
c0013fc9:	5f                   	pop    edi
c0013fca:	58                   	pop    eax
c0013fcb:	6a 01                	push   0x1
c0013fcd:	53                   	push   ebx
c0013fce:	e8 f7 90 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fde:	83 ec 0c             	sub    esp,0xc
c0013fe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fe3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013fe7:	51                   	push   ecx
c0013fe8:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013fec:	52                   	push   edx
c0013fed:	6a 00                	push   0x0
c0013fef:	6a 01                	push   0x1
c0013ff1:	53                   	push   ebx
c0013ff2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ff5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013ff9:	83 c4 20             	add    esp,0x20
c0013ffc:	3c 0d                	cmp    al,0xd
c0013ffe:	0f 84 09 01 00 00    	je     c001410d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014004:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014009:	0f 84 ef 00 00 00    	je     c00140fe <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001400f:	3c 0a                	cmp    al,0xa
c0014011:	74 13                	je     c0014026 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014013:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014018:	74 0c                	je     c0014026 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001401a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014020:	0f 8e d8 00 00 00    	jle    c00140fe <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001402a:	83 ec 0c             	sub    esp,0xc
c001402d:	8d 78 01             	lea    edi,[eax+0x1]
c0014030:	57                   	push   edi
c0014031:	e8 8d 59 ff ff       	call   c00099c3 <malloc>
c0014036:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001403a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001403e:	8d 56 04             	lea    edx,[esi+0x4]
c0014041:	89 14 24             	mov    DWORD PTR [esp],edx
c0014044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014048:	e8 76 59 ff ff       	call   c00099c3 <malloc>
c001404d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014051:	83 c4 0c             	add    esp,0xc
c0014054:	57                   	push   edi
c0014055:	6a 00                	push   0x0
c0014057:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001405b:	e8 24 c6 fe ff       	call   c0000684 <memset>
c0014060:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014064:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014068:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001406c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001406e:	83 c4 0c             	add    esp,0xc
c0014071:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014075:	52                   	push   edx
c0014076:	6a 00                	push   0x0
c0014078:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001407c:	e8 03 c6 fe ff       	call   c0000684 <memset>
c0014081:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014085:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014089:	89 34 24             	mov    DWORD PTR [esp],esi
c001408c:	e8 0f c6 fe ff       	call   c00006a0 <strlen>
c0014091:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014095:	89 c1                	mov    ecx,eax
c0014097:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014099:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001409c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001409f:	40                   	inc    eax
c00140a0:	83 c4 10             	add    esp,0x10
c00140a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00140a6:	85 d2                	test   edx,edx
c00140a8:	75 0c                	jne    c00140b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00140aa:	83 ec 0c             	sub    esp,0xc
c00140ad:	6a 08                	push   0x8
c00140af:	e8 0f 59 ff ff       	call   c00099c3 <malloc>
c00140b4:	eb 0c                	jmp    c00140c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00140b6:	c1 e0 03             	shl    eax,0x3
c00140b9:	51                   	push   ecx
c00140ba:	51                   	push   ecx
c00140bb:	50                   	push   eax
c00140bc:	52                   	push   edx
c00140bd:	e8 ed 58 ff ff       	call   c00099af <realloc>
c00140c2:	83 c4 10             	add    esp,0x10
c00140c5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00140c8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00140cb:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00140ce:	8d 74 24 18          	lea    esi,[esp+0x18]
c00140d2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00140d6:	b9 08 00 00 00       	mov    ecx,0x8
c00140db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140dd:	31 f6                	xor    esi,esi
c00140df:	50                   	push   eax
c00140e0:	68 00 01 00 00       	push   0x100
c00140e5:	6a 00                	push   0x0
c00140e7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00140eb:	50                   	push   eax
c00140ec:	e8 93 c5 fe ff       	call   c0000684 <memset>
c00140f1:	83 c4 10             	add    esp,0x10
c00140f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140fc:	eb 0f                	jmp    c001410d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00140fe:	3c 3d                	cmp    al,0x3d
c0014100:	74 07                	je     c0014109 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014102:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014106:	46                   	inc    esi
c0014107:	eb 04                	jmp    c001410d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014109:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001410d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014112:	0f 85 c6 fe ff ff    	jne    c0013fde <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014118:	81 c4 2c 01 00 00    	add    esp,0x12c
c001411e:	5b                   	pop    ebx
c001411f:	5e                   	pop    esi
c0014120:	5f                   	pop    edi
c0014121:	5d                   	pop    ebp
c0014122:	c3                   	ret    
c0014123:	90                   	nop

c0014124 <EnvVarContainer::__loadSystem()>:
c0014124:	83 ec 10             	sub    esp,0x10
c0014127:	68 80 5e 02 c0       	push   0xc0025e80
c001412c:	68 fd 42 02 c0       	push   0xc00242fd
c0014131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014135:	e8 04 fe ff ff       	call   c0013f3e <EnvVarContainer::loadFrom(char const*, char const*)>
c001413a:	83 c4 1c             	add    esp,0x1c
c001413d:	c3                   	ret    

c001413e <EnvVarContainer::__loadUser()>:
c001413e:	c3                   	ret    
c001413f:	90                   	nop

c0014140 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014144:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001414a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001414e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014152:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014155:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014159:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014160:	90                   	nop
c0014161:	c3                   	ret    

c0014162 <EnvVarContainer::~EnvVarContainer()>:
c0014162:	83 ec 0c             	sub    esp,0xc
c0014165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014169:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001416c:	85 c0                	test   eax,eax
c001416e:	74 1d                	je     c001418d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014174:	8b 00                	mov    eax,DWORD PTR [eax]
c0014176:	85 c0                	test   eax,eax
c0014178:	74 13                	je     c001418d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001417a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014181:	83 ec 0c             	sub    esp,0xc
c0014184:	50                   	push   eax
c0014185:	e8 49 58 ff ff       	call   c00099d3 <free>
c001418a:	83 c4 10             	add    esp,0x10
c001418d:	90                   	nop
c001418e:	83 c4 0c             	add    esp,0xc
c0014191:	c3                   	ret    

c0014192 <Krnl::getEnv(Process*, char const*)>:
c0014192:	53                   	push   ebx
c0014193:	83 ec 08             	sub    esp,0x8
c0014196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001419e:	39 05 90 79 02 c0    	cmp    DWORD PTR ds:0xc0027990,eax
c00141a4:	74 04                	je     c00141aa <Krnl::getEnv(Process*, char const*)+0x18>
c00141a6:	85 c0                	test   eax,eax
c00141a8:	75 0b                	jne    c00141b5 <Krnl::getEnv(Process*, char const*)+0x23>
c00141aa:	a1 74 6f 02 c0       	mov    eax,ds:0xc0026f74
c00141af:	85 c0                	test   eax,eax
c00141b1:	75 19                	jne    c00141cc <Krnl::getEnv(Process*, char const*)+0x3a>
c00141b3:	eb 27                	jmp    c00141dc <Krnl::getEnv(Process*, char const*)+0x4a>
c00141b5:	52                   	push   edx
c00141b6:	52                   	push   edx
c00141b7:	53                   	push   ebx
c00141b8:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00141be:	e8 79 fc ff ff       	call   c0013e3c <EnvVarContainer::getEnv(char const*)>
c00141c3:	83 c4 10             	add    esp,0x10
c00141c6:	85 c0                	test   eax,eax
c00141c8:	75 28                	jne    c00141f2 <Krnl::getEnv(Process*, char const*)+0x60>
c00141ca:	eb de                	jmp    c00141aa <Krnl::getEnv(Process*, char const*)+0x18>
c00141cc:	52                   	push   edx
c00141cd:	52                   	push   edx
c00141ce:	53                   	push   ebx
c00141cf:	50                   	push   eax
c00141d0:	e8 67 fc ff ff       	call   c0013e3c <EnvVarContainer::getEnv(char const*)>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	85 c0                	test   eax,eax
c00141da:	75 16                	jne    c00141f2 <Krnl::getEnv(Process*, char const*)+0x60>
c00141dc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00141e0:	a1 78 6f 02 c0       	mov    eax,ds:0xc0026f78
c00141e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141e9:	83 c4 08             	add    esp,0x8
c00141ec:	5b                   	pop    ebx
c00141ed:	e9 4a fc ff ff       	jmp    c0013e3c <EnvVarContainer::getEnv(char const*)>
c00141f2:	83 c4 08             	add    esp,0x8
c00141f5:	5b                   	pop    ebx
c00141f6:	c3                   	ret    

c00141f7 <Krnl::setEnvSystem(char const*, char const*)>:
c00141f7:	83 ec 10             	sub    esp,0x10
c00141fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014202:	ff 35 78 6f 02 c0    	push   DWORD PTR ds:0xc0026f78
c0014208:	e8 6d fc ff ff       	call   c0013e7a <EnvVarContainer::setEnv(char const*, char const*)>
c001420d:	83 c4 1c             	add    esp,0x1c
c0014210:	c3                   	ret    

c0014211 <Krnl::setEnvUser(char const*, char const*)>:
c0014211:	a1 74 6f 02 c0       	mov    eax,ds:0xc0026f74
c0014216:	85 c0                	test   eax,eax
c0014218:	74 15                	je     c001422f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001421a:	83 ec 10             	sub    esp,0x10
c001421d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014225:	50                   	push   eax
c0014226:	e8 4f fc ff ff       	call   c0013e7a <EnvVarContainer::setEnv(char const*, char const*)>
c001422b:	83 c4 1c             	add    esp,0x1c
c001422e:	c3                   	ret    
c001422f:	c3                   	ret    

c0014230 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014234:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001423a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001423e:	e9 37 fc ff ff       	jmp    c0013e7a <EnvVarContainer::setEnv(char const*, char const*)>

c0014243 <Krnl::deleteEnvSystem(char const*)>:
c0014243:	c3                   	ret    

c0014244 <Krnl::deleteEnvUser(char const*)>:
c0014244:	c3                   	ret    

c0014245 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014245:	c3                   	ret    

c0014246 <Krnl::newProcessEnv(Process*)>:
c0014246:	83 ec 28             	sub    esp,0x28
c0014249:	6a 0c                	push   0xc
c001424b:	e8 73 57 ff ff       	call   c00099c3 <malloc>
c0014250:	5a                   	pop    edx
c0014251:	59                   	pop    ecx
c0014252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014256:	50                   	push   eax
c0014257:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001425b:	e8 e0 fe ff ff       	call   c0014140 <EnvVarContainer::EnvVarContainer(Process*)>
c0014260:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014264:	83 c4 2c             	add    esp,0x2c
c0014267:	c3                   	ret    

c0014268 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014268:	57                   	push   edi
c0014269:	56                   	push   esi
c001426a:	53                   	push   ebx
c001426b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426f:	83 ec 0c             	sub    esp,0xc
c0014272:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014278:	6a 0c                	push   0xc
c001427a:	e8 44 57 ff ff       	call   c00099c3 <malloc>
c001427f:	89 c3                	mov    ebx,eax
c0014281:	58                   	pop    eax
c0014282:	5a                   	pop    edx
c0014283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014287:	53                   	push   ebx
c0014288:	e8 b3 fe ff ff       	call   c0014140 <EnvVarContainer::EnvVarContainer(Process*)>
c001428d:	8b 07                	mov    eax,DWORD PTR [edi]
c001428f:	89 03                	mov    DWORD PTR [ebx],eax
c0014291:	c1 e0 03             	shl    eax,0x3
c0014294:	89 04 24             	mov    DWORD PTR [esp],eax
c0014297:	e8 27 57 ff ff       	call   c00099c3 <malloc>
c001429c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001429f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00142a1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00142a4:	c1 e1 03             	shl    ecx,0x3
c00142a7:	89 c7                	mov    edi,eax
c00142a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142ab:	83 c4 10             	add    esp,0x10
c00142ae:	89 d8                	mov    eax,ebx
c00142b0:	5b                   	pop    ebx
c00142b1:	5e                   	pop    esi
c00142b2:	5f                   	pop    edi
c00142b3:	c3                   	ret    

c00142b4 <Krnl::loadSystemEnv()>:
c00142b4:	53                   	push   ebx
c00142b5:	83 ec 14             	sub    esp,0x14
c00142b8:	6a 0c                	push   0xc
c00142ba:	e8 04 57 ff ff       	call   c00099c3 <malloc>
c00142bf:	89 c3                	mov    ebx,eax
c00142c1:	58                   	pop    eax
c00142c2:	5a                   	pop    edx
c00142c3:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c00142c9:	53                   	push   ebx
c00142ca:	e8 71 fe ff ff       	call   c0014140 <EnvVarContainer::EnvVarContainer(Process*)>
c00142cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142d2:	89 1d 78 6f 02 c0    	mov    DWORD PTR ds:0xc0026f78,ebx
c00142d8:	e8 47 fe ff ff       	call   c0014124 <EnvVarContainer::__loadSystem()>
c00142dd:	83 c4 18             	add    esp,0x18
c00142e0:	5b                   	pop    ebx
c00142e1:	c3                   	ret    

c00142e2 <Krnl::loadUserEnv()>:
c00142e2:	53                   	push   ebx
c00142e3:	83 ec 14             	sub    esp,0x14
c00142e6:	6a 0c                	push   0xc
c00142e8:	e8 d6 56 ff ff       	call   c00099c3 <malloc>
c00142ed:	89 c3                	mov    ebx,eax
c00142ef:	58                   	pop    eax
c00142f0:	5a                   	pop    edx
c00142f1:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c00142f7:	53                   	push   ebx
c00142f8:	e8 43 fe ff ff       	call   c0014140 <EnvVarContainer::EnvVarContainer(Process*)>
c00142fd:	89 1d 74 6f 02 c0    	mov    DWORD PTR ds:0xc0026f74,ebx
c0014303:	83 c4 18             	add    esp,0x18
c0014306:	5b                   	pop    ebx
c0014307:	c3                   	ret    

c0014308 <Krnl::flushEnv()>:
c0014308:	c3                   	ret    

c0014309 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001430d:	8b 15 74 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f74
c0014313:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014319:	a1 78 6f 02 c0       	mov    eax,ds:0xc0026f78
c001431e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014320:	03 01                	add    eax,DWORD PTR [ecx]
c0014322:	85 d2                	test   edx,edx
c0014324:	74 02                	je     c0014328 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014326:	03 02                	add    eax,DWORD PTR [edx]
c0014328:	c3                   	ret    

c0014329 <Krnl::getProcessEnvPair(Process*, int)>:
c0014329:	57                   	push   edi
c001432a:	56                   	push   esi
c001432b:	8b 35 74 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f74
c0014331:	53                   	push   ebx
c0014332:	85 f6                	test   esi,esi
c0014334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014338:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001433c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014342:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014346:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014348:	75 16                	jne    c0014360 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001434a:	39 c2                	cmp    edx,eax
c001434c:	7c 16                	jl     c0014364 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001434e:	8b 0d 78 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f78
c0014354:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014356:	01 c6                	add    esi,eax
c0014358:	39 d6                	cmp    esi,edx
c001435a:	7e 3c                	jle    c0014398 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001435c:	29 c2                	sub    edx,eax
c001435e:	eb 04                	jmp    c0014364 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014360:	39 c2                	cmp    edx,eax
c0014362:	7d 05                	jge    c0014369 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014364:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014367:	eb 20                	jmp    c0014389 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014369:	8b 3e                	mov    edi,DWORD PTR [esi]
c001436b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001436e:	39 d1                	cmp    ecx,edx
c0014370:	7e 04                	jle    c0014376 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014372:	29 c2                	sub    edx,eax
c0014374:	eb 10                	jmp    c0014386 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014376:	8b 35 78 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f78
c001437c:	03 0e                	add    ecx,DWORD PTR [esi]
c001437e:	39 d1                	cmp    ecx,edx
c0014380:	7e 16                	jle    c0014398 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014382:	29 c2                	sub    edx,eax
c0014384:	29 fa                	sub    edx,edi
c0014386:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014389:	8d 14 d0             	lea    edx,[eax+edx*8]
c001438c:	8b 02                	mov    eax,DWORD PTR [edx]
c001438e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014391:	89 03                	mov    DWORD PTR [ebx],eax
c0014393:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014396:	eb 1d                	jmp    c00143b5 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014398:	83 ec 0c             	sub    esp,0xc
c001439b:	68 1f 43 02 c0       	push   0xc002431f
c00143a0:	e8 18 00 00 00       	call   c00143bd <Krnl::panic(char const*)>
c00143a5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00143ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00143b2:	83 c4 10             	add    esp,0x10
c00143b5:	89 d8                	mov    eax,ebx
c00143b7:	5b                   	pop    ebx
c00143b8:	5e                   	pop    esi
c00143b9:	5f                   	pop    edi
c00143ba:	c2 04 00             	ret    0x4

c00143bd <Krnl::panic(char const*)>:
c00143bd:	55                   	push   ebp
c00143be:	89 e5                	mov    ebp,esp
c00143c0:	53                   	push   ebx
c00143c1:	83 ec 10             	sub    esp,0x10
c00143c4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00143c7:	fa                   	cli    
c00143c8:	c6 05 84 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f84,0x1
c00143cf:	53                   	push   ebx
c00143d0:	e8 48 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00143d5:	58                   	pop    eax
c00143d6:	c6 05 80 58 02 c0 00 	mov    BYTE PTR ds:0xc0025880,0x0
c00143dd:	5a                   	pop    edx
c00143de:	53                   	push   ebx
c00143df:	68 39 43 02 c0       	push   0xc0024339
c00143e4:	e8 12 87 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00143e9:	59                   	pop    ecx
c00143ea:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00143ef:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143f5:	e8 5f 64 ff ff       	call   c000a859 <setActiveTerminal(VgaText*)>
c00143fa:	83 c4 0c             	add    esp,0xc
c00143fd:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014402:	6a 01                	push   0x1
c0014404:	6a 0f                	push   0xf
c0014406:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001440c:	e8 a7 62 ff ff       	call   c000a6b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014411:	58                   	pop    eax
c0014412:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014417:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001441d:	e8 b8 67 ff ff       	call   c000abda <VgaText::clearScreen()>
c0014422:	58                   	pop    eax
c0014423:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014428:	5a                   	pop    edx
c0014429:	68 52 43 02 c0       	push   0xc0024352
c001442e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014434:	e8 2d 69 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014439:	59                   	pop    ecx
c001443a:	58                   	pop    eax
c001443b:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014440:	68 f8 43 02 c0       	push   0xc00243f8
c0014445:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001444b:	e8 16 69 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014450:	58                   	pop    eax
c0014451:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014456:	5a                   	pop    edx
c0014457:	68 6e 43 02 c0       	push   0xc002436e
c001445c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014462:	e8 ff 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014467:	59                   	pop    ecx
c0014468:	58                   	pop    eax
c0014469:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001446e:	53                   	push   ebx
c001446f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014475:	e8 ec 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c001447a:	58                   	pop    eax
c001447b:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014480:	5a                   	pop    edx
c0014481:	68 8e 43 02 c0       	push   0xc002438e
c0014486:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001448c:	e8 d5 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014491:	a1 80 6f 02 c0       	mov    eax,ds:0xc0026f80
c0014496:	83 c4 10             	add    esp,0x10
c0014499:	85 c0                	test   eax,eax
c001449b:	74 02                	je     c001449f <Krnl::panic(char const*)+0xe2>
c001449d:	ff d0                	call   eax
c001449f:	83 ec 0c             	sub    esp,0xc
c00144a2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144a5:	e8 af 30 00 00       	call   c0017559 <Thr::getDriverNameFromAddress(unsigned long)>
c00144aa:	83 c4 10             	add    esp,0x10
c00144ad:	89 c3                	mov    ebx,eax
c00144af:	85 c0                	test   eax,eax
c00144b1:	0f 84 4e 02 00 00    	je     c0014705 <Krnl::panic(char const*)+0x348>
c00144b7:	83 ec 08             	sub    esp,0x8
c00144ba:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00144bf:	68 34 44 02 c0       	push   0xc0024434
c00144c4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144ca:	e8 97 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c00144cf:	58                   	pop    eax
c00144d0:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00144d5:	5a                   	pop    edx
c00144d6:	68 6e 43 02 c0       	push   0xc002436e
c00144db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144e1:	e8 80 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c00144e6:	59                   	pop    ecx
c00144e7:	58                   	pop    eax
c00144e8:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00144ed:	53                   	push   ebx
c00144ee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144f4:	e8 6d 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c00144f9:	83 c4 10             	add    esp,0x10
c00144fc:	83 ec 08             	sub    esp,0x8
c00144ff:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014504:	68 8d 43 02 c0       	push   0xc002438d
c0014509:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001450f:	e8 52 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014514:	58                   	pop    eax
c0014515:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001451a:	5a                   	pop    edx
c001451b:	68 8c 44 02 c0       	push   0xc002448c
c0014520:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014526:	e8 3b 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c001452b:	59                   	pop    ecx
c001452c:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014531:	5b                   	pop    ebx
c0014532:	68 cc 44 02 c0       	push   0xc00244cc
c0014537:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001453d:	e8 24 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014542:	58                   	pop    eax
c0014543:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014548:	5a                   	pop    edx
c0014549:	68 79 43 02 c0       	push   0xc0024379
c001454e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014554:	e8 0d 68 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014559:	59                   	pop    ecx
c001455a:	5b                   	pop    ebx
c001455b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001455e:	68 91 43 02 c0       	push   0xc0024391
c0014563:	e8 93 85 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0014568:	58                   	pop    eax
c0014569:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001456c:	5a                   	pop    edx
c001456d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014570:	68 9a 43 02 c0       	push   0xc002439a
c0014575:	e8 81 85 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001457a:	59                   	pop    ecx
c001457b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001457e:	5b                   	pop    ebx
c001457f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014581:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014584:	68 a3 43 02 c0       	push   0xc00243a3
c0014589:	e8 6d 85 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001458e:	58                   	pop    eax
c001458f:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014594:	5a                   	pop    edx
c0014595:	68 10 45 02 c0       	push   0xc0024510
c001459a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145a0:	e8 c1 67 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c00145a5:	59                   	pop    ecx
c00145a6:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00145ab:	5b                   	pop    ebx
c00145ac:	68 ac 43 02 c0       	push   0xc00243ac
c00145b1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145b7:	e8 aa 67 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c00145bc:	0f 20 c0             	mov    eax,cr0
c00145bf:	5a                   	pop    edx
c00145c0:	59                   	pop    ecx
c00145c1:	50                   	push   eax
c00145c2:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00145c7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145cd:	e8 4e 67 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c00145d2:	5b                   	pop    ebx
c00145d3:	58                   	pop    eax
c00145d4:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00145d9:	68 b6 43 02 c0       	push   0xc00243b6
c00145de:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145e4:	e8 7d 67 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c00145e9:	0f 20 d0             	mov    eax,cr2
c00145ec:	5a                   	pop    edx
c00145ed:	59                   	pop    ecx
c00145ee:	50                   	push   eax
c00145ef:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00145f4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145fa:	e8 21 67 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c00145ff:	5b                   	pop    ebx
c0014600:	58                   	pop    eax
c0014601:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014606:	68 c0 43 02 c0       	push   0xc00243c0
c001460b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014611:	e8 50 67 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014616:	0f 20 d8             	mov    eax,cr3
c0014619:	5a                   	pop    edx
c001461a:	59                   	pop    ecx
c001461b:	50                   	push   eax
c001461c:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014621:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014627:	e8 f4 66 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c001462c:	5b                   	pop    ebx
c001462d:	58                   	pop    eax
c001462e:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014633:	68 d3 43 02 c0       	push   0xc00243d3
c0014638:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001463e:	e8 23 67 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014643:	0f 20 e0             	mov    eax,cr4
c0014646:	5a                   	pop    edx
c0014647:	59                   	pop    ecx
c0014648:	50                   	push   eax
c0014649:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001464e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014654:	e8 c7 66 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c0014659:	5b                   	pop    ebx
c001465a:	58                   	pop    eax
c001465b:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014660:	68 dd 43 02 c0       	push   0xc00243dd
c0014665:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001466b:	e8 f6 66 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014670:	5a                   	pop    edx
c0014671:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014676:	59                   	pop    ecx
c0014677:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001467d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014680:	50                   	push   eax
c0014681:	e8 9a 66 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c0014686:	5b                   	pop    ebx
c0014687:	58                   	pop    eax
c0014688:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001468d:	68 f4 43 02 c0       	push   0xc00243f4
c0014692:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014698:	e8 c9 66 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c001469d:	5a                   	pop    edx
c001469e:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00146a3:	59                   	pop    ecx
c00146a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00146aa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00146ad:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00146b0:	50                   	push   eax
c00146b1:	e8 6a 66 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c00146b6:	5b                   	pop    ebx
c00146b7:	58                   	pop    eax
c00146b8:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00146bd:	68 f4 43 02 c0       	push   0xc00243f4
c00146c2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146c8:	e8 99 66 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c00146cd:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00146d2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00146d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00146db:	8b 12                	mov    edx,DWORD PTR [edx]
c00146dd:	59                   	pop    ecx
c00146de:	5b                   	pop    ebx
c00146df:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00146e2:	50                   	push   eax
c00146e3:	e8 38 66 ff ff       	call   c000ad20 <VgaText::putx(unsigned int)>
c00146e8:	83 c4 10             	add    esp,0x10
c00146eb:	b2 fe                	mov    dl,0xfe
c00146ed:	e4 60                	in     al,0x60
c00146ef:	3c 1c                	cmp    al,0x1c
c00146f1:	74 04                	je     c00146f7 <Krnl::panic(char const*)+0x33a>
c00146f3:	3c 5a                	cmp    al,0x5a
c00146f5:	75 f6                	jne    c00146ed <Krnl::panic(char const*)+0x330>
c00146f7:	e4 64                	in     al,0x64
c00146f9:	a8 02                	test   al,0x2
c00146fb:	75 fa                	jne    c00146f7 <Krnl::panic(char const*)+0x33a>
c00146fd:	88 d0                	mov    al,dl
c00146ff:	e6 64                	out    0x64,al
c0014701:	fa                   	cli    
c0014702:	f4                   	hlt    
c0014703:	eb e8                	jmp    c00146ed <Krnl::panic(char const*)+0x330>
c0014705:	50                   	push   eax
c0014706:	50                   	push   eax
c0014707:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001470c:	68 60 44 02 c0       	push   0xc0024460
c0014711:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014717:	e8 4a 66 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c001471c:	58                   	pop    eax
c001471d:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014722:	5a                   	pop    edx
c0014723:	68 6e 43 02 c0       	push   0xc002436e
c0014728:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001472e:	e8 33 66 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014733:	59                   	pop    ecx
c0014734:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014739:	5b                   	pop    ebx
c001473a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001473d:	83 c0 0c             	add    eax,0xc
c0014740:	50                   	push   eax
c0014741:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0014746:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001474c:	e8 15 66 ff ff       	call   c000ad66 <VgaText::puts(char const*)>
c0014751:	83 c4 10             	add    esp,0x10
c0014754:	e9 a3 fd ff ff       	jmp    c00144fc <Krnl::panic(char const*)+0x13f>
c0014759:	66 90                	xchg   ax,ax
c001475b:	90                   	nop

c001475c <Net::switchEndian16(unsigned short)>:
c001475c:	83 ec 04             	sub    esp,0x4
c001475f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014763:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014767:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001476b:	c1 f8 08             	sar    eax,0x8
c001476e:	89 c2                	mov    edx,eax
c0014770:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014774:	c1 e0 08             	shl    eax,0x8
c0014777:	09 d0                	or     eax,edx
c0014779:	83 c4 04             	add    esp,0x4
c001477c:	c3                   	ret    
c001477d:	8d 76 00             	lea    esi,[esi+0x0]

c0014780 <Net::switchEndian32(unsigned int)>:
c0014780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014784:	c1 e8 18             	shr    eax,0x18
c0014787:	89 c2                	mov    edx,eax
c0014789:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001478d:	c1 e0 08             	shl    eax,0x8
c0014790:	25 00 00 ff 00       	and    eax,0xff0000
c0014795:	09 c2                	or     edx,eax
c0014797:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001479b:	c1 e8 08             	shr    eax,0x8
c001479e:	25 00 ff 00 00       	and    eax,0xff00
c00147a3:	09 c2                	or     edx,eax
c00147a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147a9:	c1 e0 18             	shl    eax,0x18
c00147ac:	09 d0                	or     eax,edx
c00147ae:	c3                   	ret    
c00147af:	90                   	nop

c00147b0 <Net::crc32Calc(unsigned char*, int)>:
c00147b0:	83 ec 10             	sub    esp,0x10
c00147b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00147b8:	75 0a                	jne    c00147c4 <Net::crc32Calc(unsigned char*, int)+0x14>
c00147ba:	b8 00 00 00 00       	mov    eax,0x0
c00147bf:	e9 8c 00 00 00       	jmp    c0014850 <Net::crc32Calc(unsigned char*, int)+0xa0>
c00147c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00147c9:	7f 09                	jg     c00147d4 <Net::crc32Calc(unsigned char*, int)+0x24>
c00147cb:	b8 00 00 00 00       	mov    eax,0x0
c00147d0:	eb 7e                	jmp    c0014850 <Net::crc32Calc(unsigned char*, int)+0xa0>
c00147d2:	66 90                	xchg   ax,ax
c00147d4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00147dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147e8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00147ec:	7d 5a                	jge    c0014848 <Net::crc32Calc(unsigned char*, int)+0x98>
c00147ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f6:	01 d0                	add    eax,edx
c00147f8:	8a 00                	mov    al,BYTE PTR [eax]
c00147fa:	0f b6 c0             	movzx  eax,al
c00147fd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014801:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014809:	8d 76 00             	lea    esi,[esi+0x0]
c001480c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014811:	7f 2d                	jg     c0014840 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014817:	83 e0 01             	and    eax,0x1
c001481a:	74 10                	je     c001482c <Net::crc32Calc(unsigned char*, int)+0x7c>
c001481c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014820:	d1 e8                	shr    eax,1
c0014822:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014827:	eb 0b                	jmp    c0014834 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014829:	8d 76 00             	lea    esi,[esi+0x0]
c001482c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014830:	d1 e8                	shr    eax,1
c0014832:	66 90                	xchg   ax,ax
c0014834:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014838:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001483c:	eb ce                	jmp    c001480c <Net::crc32Calc(unsigned char*, int)+0x5c>
c001483e:	66 90                	xchg   ax,ax
c0014840:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014844:	eb 9e                	jmp    c00147e4 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014846:	66 90                	xchg   ax,ax
c0014848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001484c:	f7 d0                	not    eax
c001484e:	66 90                	xchg   ax,ax
c0014850:	83 c4 10             	add    esp,0x10
c0014853:	c3                   	ret    

c0014854 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014854:	57                   	push   edi
c0014855:	56                   	push   esi
c0014856:	53                   	push   ebx
c0014857:	83 ec 60             	sub    esp,0x60
c001485a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014861:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014865:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001486d:	8d 76 00             	lea    esi,[esi+0x0]
c0014870:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014875:	7f 1d                	jg     c0014894 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014877:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001487e:	8d 50 01             	lea    edx,[eax+0x1]
c0014881:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014888:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001488b:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001488f:	eb df                	jmp    c0014870 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014891:	8d 76 00             	lea    esi,[esi+0x0]
c0014894:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001489b:	8d 50 01             	lea    edx,[eax+0x1]
c001489e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148a5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c00148a8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148b3:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c00148b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148bb:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c00148c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00148d7:	89 c6                	mov    esi,eax
c00148d9:	89 d7                	mov    edi,edx
c00148db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148dd:	89 c8                	mov    eax,ecx
c00148df:	89 fa                	mov    edx,edi
c00148e1:	89 f3                	mov    ebx,esi
c00148e3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00148e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00148eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00148ee:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00148f6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014901:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014905:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014909:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014911:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014915:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001491d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014921:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014925:	89 c6                	mov    esi,eax
c0014927:	89 d7                	mov    edi,edx
c0014929:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001492b:	89 c8                	mov    eax,ecx
c001492d:	89 fa                	mov    edx,edi
c001492f:	89 f3                	mov    ebx,esi
c0014931:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014935:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014939:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001493d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014945:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001494c:	0f b7 c0             	movzx  eax,ax
c001494f:	c1 f8 08             	sar    eax,0x8
c0014952:	89 c1                	mov    ecx,eax
c0014954:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001495b:	8d 50 01             	lea    edx,[eax+0x1]
c001495e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014965:	88 ca                	mov    dl,cl
c0014967:	88 10                	mov    BYTE PTR [eax],dl
c0014969:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014970:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014977:	8d 48 01             	lea    ecx,[eax+0x1]
c001497a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014981:	88 10                	mov    BYTE PTR [eax],dl
c0014983:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014987:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001498b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014992:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014996:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001499a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001499e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00149a2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00149a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00149aa:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00149ae:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00149b2:	89 c6                	mov    esi,eax
c00149b4:	89 d7                	mov    edi,edx
c00149b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149b8:	89 c8                	mov    eax,ecx
c00149ba:	89 fa                	mov    edx,edi
c00149bc:	89 f3                	mov    ebx,esi
c00149be:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00149c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00149c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00149ca:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149ce:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c00149d5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149dc:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00149e0:	50                   	push   eax
c00149e1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149e5:	e8 c6 fd ff ff       	call   c00147b0 <Net::crc32Calc(unsigned char*, int)>
c00149ea:	83 c4 08             	add    esp,0x8
c00149ed:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00149f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149f5:	c1 e8 18             	shr    eax,0x18
c00149f8:	89 c1                	mov    ecx,eax
c00149fa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a01:	8d 50 01             	lea    edx,[eax+0x1]
c0014a04:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a0b:	88 ca                	mov    dl,cl
c0014a0d:	88 10                	mov    BYTE PTR [eax],dl
c0014a0f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014a13:	c1 e8 10             	shr    eax,0x10
c0014a16:	89 c1                	mov    ecx,eax
c0014a18:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a1f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a22:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a29:	88 ca                	mov    dl,cl
c0014a2b:	88 10                	mov    BYTE PTR [eax],dl
c0014a2d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014a31:	c1 e8 08             	shr    eax,0x8
c0014a34:	89 c1                	mov    ecx,eax
c0014a36:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a3d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a40:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a47:	88 ca                	mov    dl,cl
c0014a49:	88 10                	mov    BYTE PTR [eax],dl
c0014a4b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a52:	8d 50 01             	lea    edx,[eax+0x1]
c0014a55:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a5c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014a60:	88 10                	mov    BYTE PTR [eax],dl
c0014a62:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014a66:	83 c4 60             	add    esp,0x60
c0014a69:	5b                   	pop    ebx
c0014a6a:	5e                   	pop    esi
c0014a6b:	5f                   	pop    edi
c0014a6c:	c3                   	ret    
c0014a6d:	8d 76 00             	lea    esi,[esi+0x0]

c0014a70 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014a70:	57                   	push   edi
c0014a71:	56                   	push   esi
c0014a72:	53                   	push   ebx
c0014a73:	83 ec 70             	sub    esp,0x70
c0014a76:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a7d:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014a81:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014a89:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a90:	83 c0 0e             	add    eax,0xe
c0014a93:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014a97:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014aa2:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014aaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014aae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ab6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014aba:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014abe:	89 c6                	mov    esi,eax
c0014ac0:	89 d7                	mov    edi,edx
c0014ac2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ac4:	89 c8                	mov    eax,ecx
c0014ac6:	89 fa                	mov    edx,edi
c0014ac8:	89 f3                	mov    ebx,esi
c0014aca:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014ace:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014ad2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ad6:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014ade:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ae5:	83 c0 08             	add    eax,0x8
c0014ae8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014aec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014af3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014af7:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014aff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014b03:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014b07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014b0b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014b0f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014b13:	89 c6                	mov    esi,eax
c0014b15:	89 d7                	mov    edi,edx
c0014b17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b19:	89 c8                	mov    eax,ecx
c0014b1b:	89 fa                	mov    edx,edi
c0014b1d:	89 f3                	mov    ebx,esi
c0014b1f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014b23:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014b27:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014b2b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014b33:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b3a:	8d 50 01             	lea    edx,[eax+0x1]
c0014b3d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b44:	8a 00                	mov    al,BYTE PTR [eax]
c0014b46:	0f b6 c0             	movzx  eax,al
c0014b49:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014b4e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b55:	8d 50 01             	lea    edx,[eax+0x1]
c0014b58:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b61:	0f b6 c0             	movzx  eax,al
c0014b64:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014b69:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014b6e:	c1 e0 08             	shl    eax,0x8
c0014b71:	89 c2                	mov    edx,eax
c0014b73:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014b77:	09 d0                	or     eax,edx
c0014b79:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b80:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014b84:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014b8c:	75 46                	jne    c0014bd4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b8e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b95:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b98:	66 3d dc 05          	cmp    ax,0x5dc
c0014b9c:	77 16                	ja     c0014bb4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014b9e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ba5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ba8:	0f b7 c0             	movzx  eax,ax
c0014bab:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014bb2:	eb 20                	jmp    c0014bd4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014bb4:	83 ec 0c             	sub    esp,0xc
c0014bb7:	68 38 45 02 c0       	push   0xc0024538
c0014bbc:	e8 3a 7f ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0014bc1:	83 c4 10             	add    esp,0x10
c0014bc4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014bcb:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014bcf:	e9 18 01 00 00       	jmp    c0014cec <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014bd4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014bdb:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014be2:	8b 12                	mov    edx,DWORD PTR [edx]
c0014be4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014be8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014bef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014bf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bfb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014c07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014c0b:	89 c6                	mov    esi,eax
c0014c0d:	89 d7                	mov    edi,edx
c0014c0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c11:	89 c8                	mov    eax,ecx
c0014c13:	89 fa                	mov    edx,edi
c0014c15:	89 f3                	mov    ebx,esi
c0014c17:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014c1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014c1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c22:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014c29:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014c30:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c37:	8d 50 01             	lea    edx,[eax+0x1]
c0014c3a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c41:	8a 00                	mov    al,BYTE PTR [eax]
c0014c43:	0f b6 c0             	movzx  eax,al
c0014c46:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014c4a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c51:	8d 50 01             	lea    edx,[eax+0x1]
c0014c54:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c5b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5d:	0f b6 c0             	movzx  eax,al
c0014c60:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014c64:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c6e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c75:	8a 00                	mov    al,BYTE PTR [eax]
c0014c77:	0f b6 c0             	movzx  eax,al
c0014c7a:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014c7e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c85:	8d 50 01             	lea    edx,[eax+0x1]
c0014c88:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c8f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c91:	0f b6 c0             	movzx  eax,al
c0014c94:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c98:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014c9c:	c1 e0 18             	shl    eax,0x18
c0014c9f:	89 c2                	mov    edx,eax
c0014ca1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014ca5:	c1 e0 10             	shl    eax,0x10
c0014ca8:	09 c2                	or     edx,eax
c0014caa:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014cae:	c1 e0 08             	shl    eax,0x8
c0014cb1:	09 d0                	or     eax,edx
c0014cb3:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014cb7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014cbb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014cc2:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014cc6:	83 e8 04             	sub    eax,0x4
c0014cc9:	83 ec 08             	sub    esp,0x8
c0014ccc:	50                   	push   eax
c0014ccd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014cd1:	e8 da fa ff ff       	call   c00147b0 <Net::crc32Calc(unsigned char*, int)>
c0014cd6:	83 c4 10             	add    esp,0x10
c0014cd9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014cdd:	0f 94 c2             	sete   dl
c0014ce0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ce7:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014cea:	90                   	nop
c0014ceb:	90                   	nop
c0014cec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014cf3:	83 c4 70             	add    esp,0x70
c0014cf6:	5b                   	pop    ebx
c0014cf7:	5e                   	pop    esi
c0014cf8:	5f                   	pop    edi
c0014cf9:	c2 04 00             	ret    0x4

c0014cfc <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014cfc:	55                   	push   ebp
c0014cfd:	57                   	push   edi
c0014cfe:	56                   	push   esi
c0014cff:	53                   	push   ebx
c0014d00:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014d06:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014d0d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014d0f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014d12:	80 fb 40             	cmp    bl,0x40
c0014d15:	75 1b                	jne    c0014d32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014d17:	8a 16                	mov    dl,BYTE PTR [esi]
c0014d19:	84 d2                	test   dl,dl
c0014d1b:	0f 84 f1 00 00 00    	je     c0014e12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d21:	8d 46 01             	lea    eax,[esi+0x1]
c0014d24:	80 fa 3a             	cmp    dl,0x3a
c0014d27:	74 04                	je     c0014d2d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014d29:	89 c6                	mov    esi,eax
c0014d2b:	eb ea                	jmp    c0014d17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014d2d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014d30:	89 c6                	mov    esi,eax
c0014d32:	50                   	push   eax
c0014d33:	6a 40                	push   0x40
c0014d35:	6a 00                	push   0x0
c0014d37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d3b:	50                   	push   eax
c0014d3c:	e8 43 b9 fe ff       	call   c0000684 <memset>
c0014d41:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014d48:	31 c0                	xor    eax,eax
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014d4f:	84 c9                	test   cl,cl
c0014d51:	0f 84 bb 00 00 00    	je     c0014e12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d57:	3d c7 00 00 00       	cmp    eax,0xc7
c0014d5c:	0f 8f b0 00 00 00    	jg     c0014e12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d62:	80 f9 0a             	cmp    cl,0xa
c0014d65:	0f 85 98 00 00 00    	jne    c0014e03 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014d6b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014d70:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014d74:	a8 df                	test   al,0xdf
c0014d76:	0f 94 c1             	sete   cl
c0014d79:	3c 23                	cmp    al,0x23
c0014d7b:	0f 94 c2             	sete   dl
c0014d7e:	08 d1                	or     cl,dl
c0014d80:	75 4a                	jne    c0014dcc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d82:	8d 50 f7             	lea    edx,[eax-0x9]
c0014d85:	80 fa 01             	cmp    dl,0x1
c0014d88:	76 42                	jbe    c0014dcc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d8a:	3c 5b                	cmp    al,0x5b
c0014d8c:	75 42                	jne    c0014dd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014d8e:	80 fb 40             	cmp    bl,0x40
c0014d91:	75 39                	jne    c0014dcc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d93:	83 ec 0c             	sub    esp,0xc
c0014d96:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d9a:	52                   	push   edx
c0014d9b:	e8 00 b9 fe ff       	call   c00006a0 <strlen>
c0014da0:	83 c4 10             	add    esp,0x10
c0014da3:	83 f8 3f             	cmp    eax,0x3f
c0014da6:	77 6a                	ja     c0014e12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014da8:	50                   	push   eax
c0014da9:	50                   	push   eax
c0014daa:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014dae:	52                   	push   edx
c0014daf:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014db3:	52                   	push   edx
c0014db4:	e8 87 b9 fe ff       	call   c0000740 <strcpy>
c0014db9:	58                   	pop    eax
c0014dba:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014dbe:	52                   	push   edx
c0014dbf:	e8 dc b8 fe ff       	call   c00006a0 <strlen>
c0014dc4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	31 d2                	xor    edx,edx
c0014dce:	eb 3a                	jmp    c0014e0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014dd0:	80 fb 40             	cmp    bl,0x40
c0014dd3:	74 06                	je     c0014ddb <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014dd5:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014dd9:	eb 20                	jmp    c0014dfb <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014ddb:	50                   	push   eax
c0014ddc:	50                   	push   eax
c0014ddd:	55                   	push   ebp
c0014dde:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014de2:	50                   	push   eax
c0014de3:	e8 e4 b9 fe ff       	call   c00007cc <strcmp>
c0014de8:	83 c4 10             	add    esp,0x10
c0014deb:	85 c0                	test   eax,eax
c0014ded:	75 dd                	jne    c0014dcc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014def:	eb e4                	jmp    c0014dd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014df1:	8d 50 01             	lea    edx,[eax+0x1]
c0014df4:	80 f9 3d             	cmp    cl,0x3d
c0014df7:	74 1d                	je     c0014e16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014df9:	89 d0                	mov    eax,edx
c0014dfb:	8a 08                	mov    cl,BYTE PTR [eax]
c0014dfd:	84 c9                	test   cl,cl
c0014dff:	75 f0                	jne    c0014df1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014e01:	eb 0f                	jmp    c0014e12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014e03:	8d 50 01             	lea    edx,[eax+0x1]
c0014e06:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014e0a:	47                   	inc    edi
c0014e0b:	89 d0                	mov    eax,edx
c0014e0d:	e9 3b ff ff ff       	jmp    c0014d4d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014e12:	31 c0                	xor    eax,eax
c0014e14:	eb 33                	jmp    c0014e49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014e16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e1a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014e1d:	50                   	push   eax
c0014e1e:	50                   	push   eax
c0014e1f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014e23:	50                   	push   eax
c0014e24:	56                   	push   esi
c0014e25:	e8 a2 b9 fe ff       	call   c00007cc <strcmp>
c0014e2a:	83 c4 10             	add    esp,0x10
c0014e2d:	85 c0                	test   eax,eax
c0014e2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e33:	75 97                	jne    c0014dcc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e35:	51                   	push   ecx
c0014e36:	51                   	push   ecx
c0014e37:	52                   	push   edx
c0014e38:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014e3f:	e8 fc b8 fe ff       	call   c0000740 <strcpy>
c0014e44:	83 c4 10             	add    esp,0x10
c0014e47:	b0 01                	mov    al,0x1
c0014e49:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e4f:	5b                   	pop    ebx
c0014e50:	5e                   	pop    esi
c0014e51:	5f                   	pop    edi
c0014e52:	5d                   	pop    ebp
c0014e53:	c3                   	ret    

c0014e54 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014e54:	57                   	push   edi
c0014e55:	56                   	push   esi
c0014e56:	53                   	push   ebx
c0014e57:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014e5d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014e64:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014e6b:	53                   	push   ebx
c0014e6c:	e8 2f b8 fe ff       	call   c00006a0 <strlen>
c0014e71:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e74:	89 c7                	mov    edi,eax
c0014e76:	e8 25 b8 fe ff       	call   c00006a0 <strlen>
c0014e7b:	83 c4 10             	add    esp,0x10
c0014e7e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014e82:	3d ff 00 00 00       	cmp    eax,0xff
c0014e87:	0f 87 d3 00 00 00    	ja     c0014f60 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e8d:	57                   	push   edi
c0014e8e:	57                   	push   edi
c0014e8f:	56                   	push   esi
c0014e90:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014e94:	56                   	push   esi
c0014e95:	e8 a6 b8 fe ff       	call   c0000740 <strcpy>
c0014e9a:	58                   	pop    eax
c0014e9b:	5a                   	pop    edx
c0014e9c:	68 da 48 02 c0       	push   0xc00248da
c0014ea1:	56                   	push   esi
c0014ea2:	e8 d9 b9 fe ff       	call   c0000880 <strcat>
c0014ea7:	59                   	pop    ecx
c0014ea8:	5f                   	pop    edi
c0014ea9:	53                   	push   ebx
c0014eaa:	56                   	push   esi
c0014eab:	e8 d0 b9 fe ff       	call   c0000880 <strcat>
c0014eb0:	58                   	pop    eax
c0014eb1:	5a                   	pop    edx
c0014eb2:	68 84 45 02 c0       	push   0xc0024584
c0014eb7:	56                   	push   esi
c0014eb8:	e8 c3 b9 fe ff       	call   c0000880 <strcat>
c0014ebd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014ec4:	e8 fa 4a ff ff       	call   c00099c3 <malloc>
c0014ec9:	83 c4 0c             	add    esp,0xc
c0014ecc:	89 c3                	mov    ebx,eax
c0014ece:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c0014ed4:	56                   	push   esi
c0014ed5:	50                   	push   eax
c0014ed6:	e8 8b 81 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	85 db                	test   ebx,ebx
c0014ee0:	74 7e                	je     c0014f60 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014ee2:	51                   	push   ecx
c0014ee3:	51                   	push   ecx
c0014ee4:	6a 01                	push   0x1
c0014ee6:	53                   	push   ebx
c0014ee7:	e8 de 81 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c0014eec:	83 c4 10             	add    esp,0x10
c0014eef:	85 c0                	test   eax,eax
c0014ef1:	74 08                	je     c0014efb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014ef3:	83 ec 0c             	sub    esp,0xc
c0014ef6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ef8:	53                   	push   ebx
c0014ef9:	eb 5f                	jmp    c0014f5a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014efb:	52                   	push   edx
c0014efc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014f00:	50                   	push   eax
c0014f01:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014f05:	50                   	push   eax
c0014f06:	53                   	push   ebx
c0014f07:	e8 6a 84 ff ff       	call   c000d376 <File::stat(unsigned long long*, bool*)>
c0014f0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f10:	83 c4 10             	add    esp,0x10
c0014f13:	89 c1                	mov    ecx,eax
c0014f15:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014f19:	74 31                	je     c0014f4c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014f1b:	83 ec 0c             	sub    esp,0xc
c0014f1e:	50                   	push   eax
c0014f1f:	e8 9f 4a ff ff       	call   c00099c3 <malloc>
c0014f24:	89 c6                	mov    esi,eax
c0014f26:	58                   	pop    eax
c0014f27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f29:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014f2d:	52                   	push   edx
c0014f2e:	56                   	push   esi
c0014f2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014f33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014f37:	53                   	push   ebx
c0014f38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f3b:	83 c4 20             	add    esp,0x20
c0014f3e:	85 c0                	test   eax,eax
c0014f40:	75 0a                	jne    c0014f4c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014f42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f46:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014f4a:	74 18                	je     c0014f64 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014f4c:	83 ec 0c             	sub    esp,0xc
c0014f4f:	53                   	push   ebx
c0014f50:	e8 d3 81 ff ff       	call   c000d128 <File::close()>
c0014f55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f5d:	83 c4 10             	add    esp,0x10
c0014f60:	31 c0                	xor    eax,eax
c0014f62:	eb 3b                	jmp    c0014f9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014f64:	83 ec 0c             	sub    esp,0xc
c0014f67:	53                   	push   ebx
c0014f68:	e8 bb 81 ff ff       	call   c000d128 <File::close()>
c0014f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f75:	83 c4 0c             	add    esp,0xc
c0014f78:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014f7f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014f86:	56                   	push   esi
c0014f87:	e8 70 fd ff ff       	call   c0014cfc <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014f8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f8f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014f93:	e8 3b 4a ff ff       	call   c00099d3 <free>
c0014f98:	83 c4 10             	add    esp,0x10
c0014f9b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f9f:	81 c4 20 01 00 00    	add    esp,0x120
c0014fa5:	5b                   	pop    ebx
c0014fa6:	5e                   	pop    esi
c0014fa7:	5f                   	pop    edi
c0014fa8:	c3                   	ret    

c0014fa9 <Reg::getLine(char*, char*, char*)>:
c0014fa9:	57                   	push   edi
c0014faa:	56                   	push   esi
c0014fab:	53                   	push   ebx
c0014fac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014fb0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014fb4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014fb8:	57                   	push   edi
c0014fb9:	56                   	push   esi
c0014fba:	53                   	push   ebx
c0014fbb:	68 89 45 02 c0       	push   0xc0024589
c0014fc0:	e8 8f fe ff ff       	call   c0014e54 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014fc5:	83 c4 10             	add    esp,0x10
c0014fc8:	84 c0                	test   al,al
c0014fca:	75 10                	jne    c0014fdc <Reg::getLine(char*, char*, char*)+0x33>
c0014fcc:	57                   	push   edi
c0014fcd:	56                   	push   esi
c0014fce:	53                   	push   ebx
c0014fcf:	68 ae 45 02 c0       	push   0xc00245ae
c0014fd4:	e8 7b fe ff ff       	call   c0014e54 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014fd9:	83 c4 10             	add    esp,0x10
c0014fdc:	5b                   	pop    ebx
c0014fdd:	5e                   	pop    esi
c0014fde:	5f                   	pop    edi
c0014fdf:	c3                   	ret    

c0014fe0 <Reg::readInt(char*, char*, int*)>:
c0014fe0:	55                   	push   ebp
c0014fe1:	57                   	push   edi
c0014fe2:	56                   	push   esi
c0014fe3:	53                   	push   ebx
c0014fe4:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014fea:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014fee:	57                   	push   edi
c0014fef:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014ff6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014ffd:	e8 a7 ff ff ff       	call   c0014fa9 <Reg::getLine(char*, char*, char*)>
c0015002:	83 c4 10             	add    esp,0x10
c0015005:	84 c0                	test   al,al
c0015007:	0f 84 b3 00 00 00    	je     c00150c0 <Reg::readInt(char*, char*, int*)+0xe0>
c001500d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015011:	80 fa 2b             	cmp    dl,0x2b
c0015014:	74 0c                	je     c0015022 <Reg::readInt(char*, char*, int*)+0x42>
c0015016:	80 fa 2d             	cmp    dl,0x2d
c0015019:	75 0e                	jne    c0015029 <Reg::readInt(char*, char*, int*)+0x49>
c001501b:	ba 01 00 00 00       	mov    edx,0x1
c0015020:	eb 0b                	jmp    c001502d <Reg::readInt(char*, char*, int*)+0x4d>
c0015022:	ba 01 00 00 00       	mov    edx,0x1
c0015027:	eb 02                	jmp    c001502b <Reg::readInt(char*, char*, int*)+0x4b>
c0015029:	31 d2                	xor    edx,edx
c001502b:	31 c0                	xor    eax,eax
c001502d:	be 0a 00 00 00       	mov    esi,0xa
c0015032:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015037:	75 20                	jne    c0015059 <Reg::readInt(char*, char*, int*)+0x79>
c0015039:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001503d:	80 f9 78             	cmp    cl,0x78
c0015040:	75 0a                	jne    c001504c <Reg::readInt(char*, char*, int*)+0x6c>
c0015042:	83 c2 02             	add    edx,0x2
c0015045:	be 10 00 00 00       	mov    esi,0x10
c001504a:	eb 0d                	jmp    c0015059 <Reg::readInt(char*, char*, int*)+0x79>
c001504c:	80 f9 62             	cmp    cl,0x62
c001504f:	75 08                	jne    c0015059 <Reg::readInt(char*, char*, int*)+0x79>
c0015051:	83 c2 02             	add    edx,0x2
c0015054:	be 02 00 00 00       	mov    esi,0x2
c0015059:	01 d7                	add    edi,edx
c001505b:	31 d2                	xor    edx,edx
c001505d:	8a 1f                	mov    bl,BYTE PTR [edi]
c001505f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015063:	80 fb 0d             	cmp    bl,0xd
c0015066:	0f 94 c3             	sete   bl
c0015069:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001506e:	0f 94 c1             	sete   cl
c0015071:	08 cb                	or     bl,cl
c0015073:	75 3a                	jne    c00150af <Reg::readInt(char*, char*, int*)+0xcf>
c0015075:	0f af d6             	imul   edx,esi
c0015078:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001507d:	83 fe 10             	cmp    esi,0x10
c0015080:	75 26                	jne    c00150a8 <Reg::readInt(char*, char*, int*)+0xc8>
c0015082:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015086:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015089:	89 e9                	mov    ecx,ebp
c001508b:	80 f9 05             	cmp    cl,0x5
c001508e:	77 06                	ja     c0015096 <Reg::readInt(char*, char*, int*)+0xb6>
c0015090:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015094:	eb 16                	jmp    c00150ac <Reg::readInt(char*, char*, int*)+0xcc>
c0015096:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001509a:	83 e9 61             	sub    ecx,0x61
c001509d:	80 f9 05             	cmp    cl,0x5
c00150a0:	77 06                	ja     c00150a8 <Reg::readInt(char*, char*, int*)+0xc8>
c00150a2:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00150a6:	eb 04                	jmp    c00150ac <Reg::readInt(char*, char*, int*)+0xcc>
c00150a8:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00150ac:	47                   	inc    edi
c00150ad:	eb ae                	jmp    c001505d <Reg::readInt(char*, char*, int*)+0x7d>
c00150af:	84 c0                	test   al,al
c00150b1:	74 02                	je     c00150b5 <Reg::readInt(char*, char*, int*)+0xd5>
c00150b3:	f7 da                	neg    edx
c00150b5:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00150bc:	89 10                	mov    DWORD PTR [eax],edx
c00150be:	88 d8                	mov    al,bl
c00150c0:	81 c4 ec 00 00 00    	add    esp,0xec
c00150c6:	5b                   	pop    ebx
c00150c7:	5e                   	pop    esi
c00150c8:	5f                   	pop    edi
c00150c9:	5d                   	pop    ebp
c00150ca:	c3                   	ret    

c00150cb <Reg::readString(char*, char*, char*, int)>:
c00150cb:	57                   	push   edi
c00150cc:	56                   	push   esi
c00150cd:	53                   	push   ebx
c00150ce:	81 ec d4 00 00 00    	sub    esp,0xd4
c00150d4:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00150db:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00150df:	57                   	push   edi
c00150e0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00150e7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00150ee:	e8 b6 fe ff ff       	call   c0014fa9 <Reg::getLine(char*, char*, char*)>
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	89 c6                	mov    esi,eax
c00150f8:	84 c0                	test   al,al
c00150fa:	74 44                	je     c0015140 <Reg::readString(char*, char*, char*, int)+0x75>
c00150fc:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015103:	31 c0                	xor    eax,eax
c0015105:	4a                   	dec    edx
c0015106:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015109:	84 c9                	test   cl,cl
c001510b:	74 0f                	je     c001511c <Reg::readString(char*, char*, char*, int)+0x51>
c001510d:	39 c2                	cmp    edx,eax
c001510f:	7e 0b                	jle    c001511c <Reg::readString(char*, char*, char*, int)+0x51>
c0015111:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015114:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015119:	40                   	inc    eax
c001511a:	eb ea                	jmp    c0015106 <Reg::readString(char*, char*, char*, int)+0x3b>
c001511c:	83 ec 0c             	sub    esp,0xc
c001511f:	53                   	push   ebx
c0015120:	e8 7b b5 fe ff       	call   c00006a0 <strlen>
c0015125:	83 c4 10             	add    esp,0x10
c0015128:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001512d:	75 11                	jne    c0015140 <Reg::readString(char*, char*, char*, int)+0x75>
c001512f:	83 ec 0c             	sub    esp,0xc
c0015132:	53                   	push   ebx
c0015133:	e8 68 b5 fe ff       	call   c00006a0 <strlen>
c0015138:	83 c4 10             	add    esp,0x10
c001513b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015140:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015146:	89 f0                	mov    eax,esi
c0015148:	5b                   	pop    ebx
c0015149:	5e                   	pop    esi
c001514a:	5f                   	pop    edi
c001514b:	c3                   	ret    

c001514c <Reg::readBool(char*, char*, bool*)>:
c001514c:	83 ec 20             	sub    esp,0x20
c001514f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015153:	50                   	push   eax
c0015154:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015158:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001515c:	e8 7f fe ff ff       	call   c0014fe0 <Reg::readInt(char*, char*, int*)>
c0015161:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015166:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001516a:	0f 95 02             	setne  BYTE PTR [edx]
c001516d:	83 c4 2c             	add    esp,0x2c
c0015170:	c3                   	ret    

c0015171 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015171:	53                   	push   ebx
c0015172:	83 ec 1c             	sub    esp,0x1c
c0015175:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015179:	8d 44 24 13          	lea    eax,[esp+0x13]
c001517d:	50                   	push   eax
c001517e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015182:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015186:	e8 c1 ff ff ff       	call   c001514c <Reg::readBool(char*, char*, bool*)>
c001518b:	83 c4 10             	add    esp,0x10
c001518e:	84 c0                	test   al,al
c0015190:	74 04                	je     c0015196 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015192:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015196:	88 d8                	mov    al,bl
c0015198:	83 c4 18             	add    esp,0x18
c001519b:	5b                   	pop    ebx
c001519c:	c3                   	ret    

c001519d <Reg::readIntWithDefault(char*, char*, int)>:
c001519d:	53                   	push   ebx
c001519e:	83 ec 1c             	sub    esp,0x1c
c00151a1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00151a5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151a9:	50                   	push   eax
c00151aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151b2:	e8 29 fe ff ff       	call   c0014fe0 <Reg::readInt(char*, char*, int*)>
c00151b7:	83 c4 10             	add    esp,0x10
c00151ba:	84 c0                	test   al,al
c00151bc:	74 04                	je     c00151c2 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00151be:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00151c2:	89 d8                	mov    eax,ebx
c00151c4:	83 c4 18             	add    esp,0x18
c00151c7:	5b                   	pop    ebx
c00151c8:	c3                   	ret    

c00151c9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00151c9:	57                   	push   edi
c00151ca:	56                   	push   esi
c00151cb:	56                   	push   esi
c00151cc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00151d0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00151d4:	56                   	push   esi
c00151d5:	57                   	push   edi
c00151d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151de:	e8 e8 fe ff ff       	call   c00150cb <Reg::readString(char*, char*, char*, int)>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	84 c0                	test   al,al
c00151e8:	75 1a                	jne    c0015204 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00151ea:	51                   	push   ecx
c00151eb:	56                   	push   esi
c00151ec:	6a 00                	push   0x0
c00151ee:	57                   	push   edi
c00151ef:	e8 90 b4 fe ff       	call   c0000684 <memset>
c00151f4:	8d 4e ff             	lea    ecx,[esi-0x1]
c00151f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00151fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00151fd:	83 c4 10             	add    esp,0x10
c0015200:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015204:	89 f8                	mov    eax,edi
c0015206:	5a                   	pop    edx
c0015207:	5e                   	pop    esi
c0015208:	5f                   	pop    edi
c0015209:	c3                   	ret    

c001520a <Sys::eject(regs*)>:
c001520a:	83 ec 0c             	sub    esp,0xc
c001520d:	83 ca ff             	or     edx,0xffffffff
c0015210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015214:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015217:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001521c:	83 e9 41             	sub    ecx,0x41
c001521f:	83 f9 19             	cmp    ecx,0x19
c0015222:	77 18                	ja     c001523c <Sys::eject(regs*)+0x32>
c0015224:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c001522b:	85 c9                	test   ecx,ecx
c001522d:	74 0d                	je     c001523c <Sys::eject(regs*)+0x32>
c001522f:	83 ec 0c             	sub    esp,0xc
c0015232:	51                   	push   ecx
c0015233:	e8 76 af ff ff       	call   c00101ae <LogicalDisk::eject()>
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	99                   	cdq    
c001523c:	83 c4 0c             	add    esp,0xc
c001523f:	c3                   	ret    

c0015240 <Sys::exit(regs*)>:
c0015240:	83 ec 18             	sub    esp,0x18
c0015243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015247:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001524a:	e8 59 36 00 00       	call   c00188a8 <terminateTask(int)>
c001524f:	83 c8 ff             	or     eax,0xffffffff
c0015252:	83 c4 1c             	add    esp,0x1c
c0015255:	89 c2                	mov    edx,eax
c0015257:	c3                   	ret    

c0015258 <Sys::getCwd(regs*)>:
c0015258:	83 ec 10             	sub    esp,0x10
c001525b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001525f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015262:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001526a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001526d:	e8 f6 7b ff ff       	call   c000ce68 <Fs::getcwd(Process*, char*, int)>
c0015272:	83 c4 1c             	add    esp,0x1c
c0015275:	99                   	cdq    
c0015276:	c3                   	ret    

c0015277 <Sys::getPID(regs*)>:
c0015277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001527c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001527f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015281:	99                   	cdq    
c0015282:	c3                   	ret    

c0015283 <Sys::getRAMData(regs*)>:
c0015283:	8b 0d d8 64 02 c0    	mov    ecx,DWORD PTR ds:0xc00264d8
c0015289:	69 05 d4 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00264d4,0xc8
c0015293:	99                   	cdq    
c0015294:	f7 f9                	idiv   ecx
c0015296:	c1 e0 18             	shl    eax,0x18
c0015299:	09 c8                	or     eax,ecx
c001529b:	99                   	cdq    
c001529c:	c3                   	ret    

c001529d <Sys::getVGAPtr(regs*)>:
c001529d:	55                   	push   ebp
c001529e:	57                   	push   edi
c001529f:	56                   	push   esi
c00152a0:	53                   	push   ebx
c00152a1:	83 ec 18             	sub    esp,0x18
c00152a4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00152a8:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00152ab:	e8 fc 30 00 00       	call   c00183ac <Thr::processFromPID(int)>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	89 c1                	mov    ecx,eax
c00152b5:	b8 01 00 00 00       	mov    eax,0x1
c00152ba:	85 c9                	test   ecx,ecx
c00152bc:	74 59                	je     c0015317 <Sys::getVGAPtr(regs*)+0x7a>
c00152be:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00152c4:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00152c8:	74 0c                	je     c00152d6 <Sys::getVGAPtr(regs*)+0x39>
c00152ca:	83 ec 0c             	sub    esp,0xc
c00152cd:	53                   	push   ebx
c00152ce:	e8 86 55 ff ff       	call   c000a859 <setActiveTerminal(VgaText*)>
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00152d9:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00152dc:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00152e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152e3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00152e6:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152e9:	81 c3 82 00 00 00    	add    ebx,0x82
c00152ef:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00152f5:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152f8:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00152fb:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015301:	50                   	push   eax
c0015302:	50                   	push   eax
c0015303:	53                   	push   ebx
c0015304:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015307:	05 a8 0f 00 00       	add    eax,0xfa8
c001530c:	50                   	push   eax
c001530d:	e8 2e b4 fe ff       	call   c0000740 <strcpy>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	31 c0                	xor    eax,eax
c0015317:	83 c4 0c             	add    esp,0xc
c001531a:	31 d2                	xor    edx,edx
c001531c:	5b                   	pop    ebx
c001531d:	5e                   	pop    esi
c001531e:	5f                   	pop    edi
c001531f:	5d                   	pop    ebp
c0015320:	c3                   	ret    

c0015321 <Sys::loadDLL(regs*)>:
c0015321:	56                   	push   esi
c0015322:	53                   	push   ebx
c0015323:	31 d2                	xor    edx,edx
c0015325:	51                   	push   ecx
c0015326:	b8 01 00 00 00       	mov    eax,0x1
c001532b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001532f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015333:	0f 84 8c 00 00 00    	je     c00153c5 <Sys::loadDLL(regs*)+0xa4>
c0015339:	83 ec 0c             	sub    esp,0xc
c001533c:	68 14 01 00 00       	push   0x114
c0015341:	e8 7d 46 ff ff       	call   c00099c3 <malloc>
c0015346:	83 c4 0c             	add    esp,0xc
c0015349:	89 c3                	mov    ebx,eax
c001534b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015350:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015353:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015356:	53                   	push   ebx
c0015357:	e8 0a 7d ff ff       	call   c000d066 <File::File(char const*, Process*)>
c001535c:	83 c4 10             	add    esp,0x10
c001535f:	31 d2                	xor    edx,edx
c0015361:	b8 02 00 00 00       	mov    eax,0x2
c0015366:	85 db                	test   ebx,ebx
c0015368:	74 5b                	je     c00153c5 <Sys::loadDLL(regs*)+0xa4>
c001536a:	83 ec 0c             	sub    esp,0xc
c001536d:	53                   	push   ebx
c001536e:	e8 c5 7f ff ff       	call   c000d338 <File::exists()>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	84 c0                	test   al,al
c0015378:	8b 03                	mov    eax,DWORD PTR [ebx]
c001537a:	75 11                	jne    c001538d <Sys::loadDLL(regs*)+0x6c>
c001537c:	83 ec 0c             	sub    esp,0xc
c001537f:	53                   	push   ebx
c0015380:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	b8 03 00 00 00       	mov    eax,0x3
c001538b:	eb 36                	jmp    c00153c3 <Sys::loadDLL(regs*)+0xa2>
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	53                   	push   ebx
c0015391:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015394:	58                   	pop    eax
c0015395:	5a                   	pop    edx
c0015396:	6a 00                	push   0x0
c0015398:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001539b:	e8 0a 22 00 00       	call   c00175aa <Thr::loadDLL(char const*, bool)>
c00153a0:	83 c4 10             	add    esp,0x10
c00153a3:	89 c1                	mov    ecx,eax
c00153a5:	31 d2                	xor    edx,edx
c00153a7:	b8 04 00 00 00       	mov    eax,0x4
c00153ac:	85 c9                	test   ecx,ecx
c00153ae:	74 15                	je     c00153c5 <Sys::loadDLL(regs*)+0xa4>
c00153b0:	53                   	push   ebx
c00153b1:	53                   	push   ebx
c00153b2:	ff 35 a8 64 02 c0    	push   DWORD PTR ds:0xc00264a8
c00153b8:	51                   	push   ecx
c00153b9:	e8 1d 24 00 00       	call   c00177db <Thr::executeDLL(unsigned long, void*)>
c00153be:	83 c4 10             	add    esp,0x10
c00153c1:	31 c0                	xor    eax,eax
c00153c3:	31 d2                	xor    edx,edx
c00153c5:	59                   	pop    ecx
c00153c6:	5b                   	pop    ebx
c00153c7:	5e                   	pop    esi
c00153c8:	c3                   	ret    

c00153c9 <Sys::read(regs*)>:
c00153c9:	57                   	push   edi
c00153ca:	56                   	push   esi
c00153cb:	53                   	push   ebx
c00153cc:	83 ec 10             	sub    esp,0x10
c00153cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00153d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00153d6:	83 f8 02             	cmp    eax,0x2
c00153d9:	77 10                	ja     c00153eb <Sys::read(regs*)+0x22>
c00153db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153e3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00153e9:	eb 0e                	jmp    c00153f9 <Sys::read(regs*)+0x30>
c00153eb:	83 ec 0c             	sub    esp,0xc
c00153ee:	50                   	push   eax
c00153ef:	e8 df 61 ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c00153f4:	83 c4 10             	add    esp,0x10
c00153f7:	89 c1                	mov    ecx,eax
c00153f9:	83 c8 ff             	or     eax,0xffffffff
c00153fc:	85 c9                	test   ecx,ecx
c00153fe:	89 c2                	mov    edx,eax
c0015400:	74 28                	je     c001542a <Sys::read(regs*)+0x61>
c0015402:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001540a:	31 ff                	xor    edi,edi
c001540c:	83 ec 0c             	sub    esp,0xc
c001540f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015411:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015415:	52                   	push   edx
c0015416:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015419:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001541c:	57                   	push   edi
c001541d:	56                   	push   esi
c001541e:	51                   	push   ecx
c001541f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015422:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015426:	83 c4 20             	add    esp,0x20
c0015429:	99                   	cdq    
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	5b                   	pop    ebx
c001542e:	5e                   	pop    esi
c001542f:	5f                   	pop    edi
c0015430:	c3                   	ret    

c0015431 <Sys::sbrk(regs*)>:
c0015431:	56                   	push   esi
c0015432:	53                   	push   ebx
c0015433:	50                   	push   eax
c0015434:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015439:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001543d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015440:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015443:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015449:	85 db                	test   ebx,ebx
c001544b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001544e:	74 02                	je     c0015452 <Sys::sbrk(regs*)+0x21>
c0015450:	79 06                	jns    c0015458 <Sys::sbrk(regs*)+0x27>
c0015452:	89 f0                	mov    eax,esi
c0015454:	31 d2                	xor    edx,edx
c0015456:	eb 2a                	jmp    c0015482 <Sys::sbrk(regs*)+0x51>
c0015458:	83 c8 ff             	or     eax,0xffffffff
c001545b:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015461:	89 c2                	mov    edx,eax
c0015463:	77 1d                	ja     c0015482 <Sys::sbrk(regs*)+0x51>
c0015465:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001546b:	50                   	push   eax
c001546c:	c1 ea 0c             	shr    edx,0xc
c001546f:	68 07 0c 00 00       	push   0xc07
c0015474:	52                   	push   edx
c0015475:	51                   	push   ecx
c0015476:	e8 57 6a ff ff       	call   c000bed2 <VAS::allocatePages(int, int)>
c001547b:	89 f0                	mov    eax,esi
c001547d:	31 d2                	xor    edx,edx
c001547f:	83 c4 10             	add    esp,0x10
c0015482:	59                   	pop    ecx
c0015483:	5b                   	pop    ebx
c0015484:	5e                   	pop    esi
c0015485:	c3                   	ret    

c0015486 <Sys::setCwd(regs*)>:
c0015486:	83 ec 14             	sub    esp,0x14
c0015489:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001548d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015495:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015498:	e8 3a 7f ff ff       	call   c000d3d7 <Fs::setcwd(Process*, char*)>
c001549d:	83 c4 1c             	add    esp,0x1c
c00154a0:	99                   	cdq    
c00154a1:	c3                   	ret    

c00154a2 <Sys::setTime(regs*)>:
c00154a2:	55                   	push   ebp
c00154a3:	31 c9                	xor    ecx,ecx
c00154a5:	57                   	push   edi
c00154a6:	bd 0c 00 00 00       	mov    ebp,0xc
c00154ab:	56                   	push   esi
c00154ac:	53                   	push   ebx
c00154ad:	31 db                	xor    ebx,ebx
c00154af:	83 ec 10             	sub    esp,0x10
c00154b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00154b6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00154b9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00154bc:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00154bf:	89 c2                	mov    edx,eax
c00154c1:	66 81 ef 6c 07       	sub    di,0x76c
c00154c6:	83 e2 1f             	and    edx,0x1f
c00154c9:	c1 e7 10             	shl    edi,0x10
c00154cc:	42                   	inc    edx
c00154cd:	c1 e8 05             	shr    eax,0x5
c00154d0:	88 d1                	mov    cl,dl
c00154d2:	31 d2                	xor    edx,edx
c00154d4:	f7 f5                	div    ebp
c00154d6:	89 dd                	mov    ebp,ebx
c00154d8:	88 d5                	mov    ch,dl
c00154da:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00154e0:	0f b7 c1             	movzx  eax,cx
c00154e3:	31 d2                	xor    edx,edx
c00154e5:	09 f8                	or     eax,edi
c00154e7:	bf 3c 00 00 00       	mov    edi,0x3c
c00154ec:	89 c1                	mov    ecx,eax
c00154ee:	89 f0                	mov    eax,esi
c00154f0:	f7 f7                	div    edi
c00154f2:	c1 e2 10             	shl    edx,0x10
c00154f5:	09 d5                	or     ebp,edx
c00154f7:	31 d2                	xor    edx,edx
c00154f9:	89 eb                	mov    ebx,ebp
c00154fb:	f7 f7                	div    edi
c00154fd:	bf 10 0e 00 00       	mov    edi,0xe10
c0015502:	88 d7                	mov    bh,dl
c0015504:	89 f0                	mov    eax,esi
c0015506:	31 d2                	xor    edx,edx
c0015508:	f7 f7                	div    edi
c001550a:	bf 18 00 00 00       	mov    edi,0x18
c001550f:	31 d2                	xor    edx,edx
c0015511:	f7 f7                	div    edi
c0015513:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0015518:	88 d3                	mov    bl,dl
c001551a:	53                   	push   ebx
c001551b:	51                   	push   ecx
c001551c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015522:	e8 fb 86 ff ff       	call   c000dc22 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015527:	83 c4 1c             	add    esp,0x1c
c001552a:	83 f0 01             	xor    eax,0x1
c001552d:	5b                   	pop    ebx
c001552e:	0f b6 c0             	movzx  eax,al
c0015531:	5e                   	pop    esi
c0015532:	31 d2                	xor    edx,edx
c0015534:	5f                   	pop    edi
c0015535:	5d                   	pop    ebp
c0015536:	c3                   	ret    

c0015537 <Sys::timezone(regs*)>:
c0015537:	53                   	push   ebx
c0015538:	83 ec 08             	sub    esp,0x8
c001553b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001553f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015543:	75 17                	jne    c001555c <Sys::timezone(regs*)+0x25>
c0015545:	83 ec 0c             	sub    esp,0xc
c0015548:	68 c9 45 02 c0       	push   0xc00245c9
c001554d:	e8 a9 75 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0015552:	83 c8 ff             	or     eax,0xffffffff
c0015555:	83 c4 10             	add    esp,0x10
c0015558:	89 c2                	mov    edx,eax
c001555a:	eb 20                	jmp    c001557c <Sys::timezone(regs*)+0x45>
c001555c:	83 ec 0c             	sub    esp,0xc
c001555f:	68 de 45 02 c0       	push   0xc00245de
c0015564:	e8 92 75 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0015569:	58                   	pop    eax
c001556a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001556d:	e8 12 84 ff ff       	call   c000d984 <User::loadClockSettings(int)>
c0015572:	83 c4 10             	add    esp,0x10
c0015575:	b8 01 00 00 00       	mov    eax,0x1
c001557a:	31 d2                	xor    edx,edx
c001557c:	83 c4 08             	add    esp,0x8
c001557f:	5b                   	pop    ebx
c0015580:	c3                   	ret    

c0015581 <Sys::write(regs*)>:
c0015581:	57                   	push   edi
c0015582:	56                   	push   esi
c0015583:	53                   	push   ebx
c0015584:	83 ec 10             	sub    esp,0x10
c0015587:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001558b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001558e:	83 f8 02             	cmp    eax,0x2
c0015591:	77 10                	ja     c00155a3 <Sys::write(regs*)+0x22>
c0015593:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015598:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001559b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00155a1:	eb 0e                	jmp    c00155b1 <Sys::write(regs*)+0x30>
c00155a3:	83 ec 0c             	sub    esp,0xc
c00155a6:	50                   	push   eax
c00155a7:	e8 27 60 ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c00155ac:	83 c4 10             	add    esp,0x10
c00155af:	89 c1                	mov    ecx,eax
c00155b1:	83 c8 ff             	or     eax,0xffffffff
c00155b4:	85 c9                	test   ecx,ecx
c00155b6:	89 c2                	mov    edx,eax
c00155b8:	74 28                	je     c00155e2 <Sys::write(regs*)+0x61>
c00155ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155c2:	31 ff                	xor    edi,edi
c00155c4:	83 ec 0c             	sub    esp,0xc
c00155c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00155c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00155cd:	52                   	push   edx
c00155ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155d1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00155d4:	57                   	push   edi
c00155d5:	56                   	push   esi
c00155d6:	51                   	push   ecx
c00155d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00155da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155de:	83 c4 20             	add    esp,0x20
c00155e1:	99                   	cdq    
c00155e2:	83 c4 10             	add    esp,0x10
c00155e5:	5b                   	pop    ebx
c00155e6:	5e                   	pop    esi
c00155e7:	5f                   	pop    edi
c00155e8:	c3                   	ret    

c00155e9 <Sys::wsbe(regs*)>:
c00155e9:	57                   	push   edi
c00155ea:	b9 0b 00 00 00       	mov    ecx,0xb
c00155ef:	56                   	push   esi
c00155f0:	be 1d 46 02 c0       	mov    esi,0xc002461d
c00155f5:	53                   	push   ebx
c00155f6:	83 ec 30             	sub    esp,0x30
c00155f9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00155fd:	fc                   	cld    
c00155fe:	83 ec 0c             	sub    esp,0xc
c0015601:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015603:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001560c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001560f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015615:	8b 06                	mov    eax,DWORD PTR [esi]
c0015617:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001561a:	57                   	push   edi
c001561b:	e8 80 b0 fe ff       	call   c00006a0 <strlen>
c0015620:	5a                   	pop    edx
c0015621:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015625:	52                   	push   edx
c0015626:	31 d2                	xor    edx,edx
c0015628:	57                   	push   edi
c0015629:	52                   	push   edx
c001562a:	50                   	push   eax
c001562b:	56                   	push   esi
c001562c:	ff d3                	call   ebx
c001562e:	83 c4 14             	add    esp,0x14
c0015631:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015635:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015638:	e8 6b 32 00 00       	call   c00188a8 <terminateTask(int)>
c001563d:	83 c4 40             	add    esp,0x40
c0015640:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015645:	5b                   	pop    ebx
c0015646:	31 d2                	xor    edx,edx
c0015648:	5e                   	pop    esi
c0015649:	5f                   	pop    edi
c001564a:	c3                   	ret    

c001564b <Sys::yield(regs*)>:
c001564b:	83 ec 0c             	sub    esp,0xc
c001564e:	fa                   	cli    
c001564f:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0015655:	e8 36 29 00 00       	call   c0017f90 <schedule()>
c001565a:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c001565f:	48                   	dec    eax
c0015660:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0015665:	75 01                	jne    c0015668 <Sys::yield(regs*)+0x1d>
c0015667:	fb                   	sti    
c0015668:	8b 15 cc 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026acc
c001566e:	83 c4 0c             	add    esp,0xc
c0015671:	89 d0                	mov    eax,edx
c0015673:	c1 ea 11             	shr    edx,0x11
c0015676:	c1 e0 07             	shl    eax,0x7
c0015679:	25 80 30 0f 00       	and    eax,0xf3080
c001567e:	31 d0                	xor    eax,edx
c0015680:	31 d2                	xor    edx,edx
c0015682:	c3                   	ret    

c0015683 <sysCallSeekDir(regs*)>:
c0015683:	31 c0                	xor    eax,eax
c0015685:	31 d2                	xor    edx,edx
c0015687:	c3                   	ret    

c0015688 <sysCallTellDir(regs*)>:
c0015688:	31 c0                	xor    eax,eax
c001568a:	31 d2                	xor    edx,edx
c001568c:	c3                   	ret    

c001568d <sysCallVerify(regs*)>:
c001568d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015691:	31 d2                	xor    edx,edx
c0015693:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015696:	c3                   	ret    

c0015697 <sysCallGetArgc(regs*)>:
c0015697:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001569c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001569f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00156a5:	99                   	cdq    
c00156a6:	c3                   	ret    

c00156a7 <sysFormatDisk(regs*)>:
c00156a7:	56                   	push   esi
c00156a8:	53                   	push   ebx
c00156a9:	53                   	push   ebx
c00156aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00156ae:	8b 1d d4 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265d4
c00156b4:	eb 25                	jmp    c00156db <sysFormatDisk(regs*)+0x34>
c00156b6:	83 ec 0c             	sub    esp,0xc
c00156b9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00156bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00156be:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00156c1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00156c4:	50                   	push   eax
c00156c5:	ff 34 85 60 6a 02 c0 	push   DWORD PTR [eax*4-0x3ffd95a0]
c00156cc:	53                   	push   ebx
c00156cd:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00156d0:	83 c4 20             	add    esp,0x20
c00156d3:	83 f8 08             	cmp    eax,0x8
c00156d6:	75 12                	jne    c00156ea <sysFormatDisk(regs*)+0x43>
c00156d8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00156db:	85 db                	test   ebx,ebx
c00156dd:	75 d7                	jne    c00156b6 <sysFormatDisk(regs*)+0xf>
c00156df:	59                   	pop    ecx
c00156e0:	b8 03 00 00 00       	mov    eax,0x3
c00156e5:	31 d2                	xor    edx,edx
c00156e7:	5b                   	pop    ebx
c00156e8:	5e                   	pop    esi
c00156e9:	c3                   	ret    
c00156ea:	85 c0                	test   eax,eax
c00156ec:	74 1b                	je     c0015709 <sysFormatDisk(regs*)+0x62>
c00156ee:	83 f8 09             	cmp    eax,0x9
c00156f1:	74 0b                	je     c00156fe <sysFormatDisk(regs*)+0x57>
c00156f3:	59                   	pop    ecx
c00156f4:	b8 02 00 00 00       	mov    eax,0x2
c00156f9:	31 d2                	xor    edx,edx
c00156fb:	5b                   	pop    ebx
c00156fc:	5e                   	pop    esi
c00156fd:	c3                   	ret    
c00156fe:	59                   	pop    ecx
c00156ff:	b8 01 00 00 00       	mov    eax,0x1
c0015704:	31 d2                	xor    edx,edx
c0015706:	5b                   	pop    ebx
c0015707:	5e                   	pop    esi
c0015708:	c3                   	ret    
c0015709:	59                   	pop    ecx
c001570a:	31 c0                	xor    eax,eax
c001570c:	31 d2                	xor    edx,edx
c001570e:	5b                   	pop    ebx
c001570f:	5e                   	pop    esi
c0015710:	c3                   	ret    

c0015711 <sysSetDiskVolumeLabel(regs*)>:
c0015711:	56                   	push   esi
c0015712:	53                   	push   ebx
c0015713:	53                   	push   ebx
c0015714:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015718:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001571b:	83 f8 19             	cmp    eax,0x19
c001571e:	77 2d                	ja     c001574d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015720:	8b 0c 85 60 6a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd95a0]
c0015727:	85 c9                	test   ecx,ecx
c0015729:	74 22                	je     c001574d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001572b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001572e:	85 db                	test   ebx,ebx
c0015730:	74 1b                	je     c001574d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015732:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015738:	85 d2                	test   edx,edx
c001573a:	74 11                	je     c001574d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001573c:	8b 32                	mov    esi,DWORD PTR [edx]
c001573e:	53                   	push   ebx
c001573f:	50                   	push   eax
c0015740:	51                   	push   ecx
c0015741:	52                   	push   edx
c0015742:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015745:	83 c4 10             	add    esp,0x10
c0015748:	99                   	cdq    
c0015749:	59                   	pop    ecx
c001574a:	5b                   	pop    ebx
c001574b:	5e                   	pop    esi
c001574c:	c3                   	ret    
c001574d:	59                   	pop    ecx
c001574e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015753:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015758:	5b                   	pop    ebx
c0015759:	5e                   	pop    esi
c001575a:	c3                   	ret    

c001575b <sysGetDiskVolumeLabel(regs*)>:
c001575b:	57                   	push   edi
c001575c:	56                   	push   esi
c001575d:	53                   	push   ebx
c001575e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015762:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015765:	83 fa 19             	cmp    edx,0x19
c0015768:	77 38                	ja     c00157a2 <sysGetDiskVolumeLabel(regs*)+0x47>
c001576a:	8b 0c 95 60 6a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd95a0]
c0015771:	85 c9                	test   ecx,ecx
c0015773:	74 2d                	je     c00157a2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015775:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015778:	85 db                	test   ebx,ebx
c001577a:	74 26                	je     c00157a2 <sysGetDiskVolumeLabel(regs*)+0x47>
c001577c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001577f:	85 f6                	test   esi,esi
c0015781:	74 1f                	je     c00157a2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015783:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015789:	85 c0                	test   eax,eax
c001578b:	74 15                	je     c00157a2 <sysGetDiskVolumeLabel(regs*)+0x47>
c001578d:	83 ec 0c             	sub    esp,0xc
c0015790:	8b 38                	mov    edi,DWORD PTR [eax]
c0015792:	56                   	push   esi
c0015793:	53                   	push   ebx
c0015794:	52                   	push   edx
c0015795:	51                   	push   ecx
c0015796:	50                   	push   eax
c0015797:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001579a:	83 c4 20             	add    esp,0x20
c001579d:	99                   	cdq    
c001579e:	5b                   	pop    ebx
c001579f:	5e                   	pop    esi
c00157a0:	5f                   	pop    edi
c00157a1:	c3                   	ret    
c00157a2:	5b                   	pop    ebx
c00157a3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157ad:	5e                   	pop    esi
c00157ae:	5f                   	pop    edi
c00157af:	c3                   	ret    

c00157b0 <sysShutdown(regs*)>:
c00157b0:	83 ec 0c             	sub    esp,0xc
c00157b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157ba:	85 c0                	test   eax,eax
c00157bc:	74 18                	je     c00157d6 <sysShutdown(regs*)+0x26>
c00157be:	83 f8 01             	cmp    eax,0x1
c00157c1:	74 38                	je     c00157fb <sysShutdown(regs*)+0x4b>
c00157c3:	83 f8 02             	cmp    eax,0x2
c00157c6:	74 24                	je     c00157ec <sysShutdown(regs*)+0x3c>
c00157c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157d2:	83 c4 0c             	add    esp,0xc
c00157d5:	c3                   	ret    
c00157d6:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00157db:	8b 10                	mov    edx,DWORD PTR [eax]
c00157dd:	6a 00                	push   0x0
c00157df:	6a 00                	push   0x0
c00157e1:	6a 00                	push   0x0
c00157e3:	50                   	push   eax
c00157e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157e7:	83 c4 10             	add    esp,0x10
c00157ea:	eb dc                	jmp    c00157c8 <sysShutdown(regs*)+0x18>
c00157ec:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00157f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00157f3:	6a 00                	push   0x0
c00157f5:	6a 00                	push   0x0
c00157f7:	6a 01                	push   0x1
c00157f9:	eb e8                	jmp    c00157e3 <sysShutdown(regs*)+0x33>
c00157fb:	a1 e0 6a 02 c0       	mov    eax,ds:0xc0026ae0
c0015800:	85 c0                	test   eax,eax
c0015802:	74 02                	je     c0015806 <sysShutdown(regs*)+0x56>
c0015804:	ff d0                	call   eax
c0015806:	31 c0                	xor    eax,eax
c0015808:	31 d2                	xor    edx,edx
c001580a:	83 c4 0c             	add    esp,0xc
c001580d:	c3                   	ret    

c001580e <sysCallRealpath(regs*)>:
c001580e:	83 ec 0c             	sub    esp,0xc
c0015811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015815:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015818:	85 d2                	test   edx,edx
c001581a:	74 07                	je     c0015823 <sysCallRealpath(regs*)+0x15>
c001581c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001581f:	85 c0                	test   eax,eax
c0015821:	75 0b                	jne    c001582e <sysCallRealpath(regs*)+0x20>
c0015823:	b8 01 00 00 00       	mov    eax,0x1
c0015828:	31 d2                	xor    edx,edx
c001582a:	83 c4 0c             	add    esp,0xc
c001582d:	c3                   	ret    
c001582e:	51                   	push   ecx
c001582f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015835:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015838:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001583e:	51                   	push   ecx
c001583f:	52                   	push   edx
c0015840:	50                   	push   eax
c0015841:	e8 76 76 ff ff       	call   c000cebc <Fs::standardiseFiles(char*, char const*, char const*)>
c0015846:	83 c4 10             	add    esp,0x10
c0015849:	31 c0                	xor    eax,eax
c001584b:	31 d2                	xor    edx,edx
c001584d:	83 c4 0c             	add    esp,0xc
c0015850:	c3                   	ret    

c0015851 <sysCallReadDir(regs*)>:
c0015851:	53                   	push   ebx
c0015852:	83 ec 18             	sub    esp,0x18
c0015855:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015859:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001585c:	83 f8 02             	cmp    eax,0x2
c001585f:	76 60                	jbe    c00158c1 <sysCallReadDir(regs*)+0x70>
c0015861:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015868:	77 48                	ja     c00158b2 <sysCallReadDir(regs*)+0x61>
c001586a:	83 ec 0c             	sub    esp,0xc
c001586d:	50                   	push   eax
c001586e:	e8 60 5d ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	85 c0                	test   eax,eax
c0015878:	74 38                	je     c00158b2 <sysCallReadDir(regs*)+0x61>
c001587a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015882:	83 ec 0c             	sub    esp,0xc
c0015885:	8b 10                	mov    edx,DWORD PTR [eax]
c0015887:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001588b:	51                   	push   ecx
c001588c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001588f:	6a 00                	push   0x0
c0015891:	68 10 01 00 00       	push   0x110
c0015896:	50                   	push   eax
c0015897:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001589a:	83 c4 20             	add    esp,0x20
c001589d:	85 c0                	test   eax,eax
c001589f:	74 29                	je     c00158ca <sysCallReadDir(regs*)+0x79>
c00158a1:	83 f8 07             	cmp    eax,0x7
c00158a4:	74 1b                	je     c00158c1 <sysCallReadDir(regs*)+0x70>
c00158a6:	b8 02 00 00 00       	mov    eax,0x2
c00158ab:	31 d2                	xor    edx,edx
c00158ad:	83 c4 18             	add    esp,0x18
c00158b0:	5b                   	pop    ebx
c00158b1:	c3                   	ret    
c00158b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158bc:	83 c4 18             	add    esp,0x18
c00158bf:	5b                   	pop    ebx
c00158c0:	c3                   	ret    
c00158c1:	b8 01 00 00 00       	mov    eax,0x1
c00158c6:	31 d2                	xor    edx,edx
c00158c8:	eb e3                	jmp    c00158ad <sysCallReadDir(regs*)+0x5c>
c00158ca:	31 c0                	xor    eax,eax
c00158cc:	31 d2                	xor    edx,edx
c00158ce:	eb dd                	jmp    c00158ad <sysCallReadDir(regs*)+0x5c>

c00158d0 <sysCallIsATTY(regs*)>:
c00158d0:	83 ec 0c             	sub    esp,0xc
c00158d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158da:	83 f8 02             	cmp    eax,0x2
c00158dd:	76 07                	jbe    c00158e6 <sysCallIsATTY(regs*)+0x16>
c00158df:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00158e4:	75 26                	jne    c001590c <sysCallIsATTY(regs*)+0x3c>
c00158e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158f4:	85 c0                	test   eax,eax
c00158f6:	74 24                	je     c001591c <sysCallIsATTY(regs*)+0x4c>
c00158f8:	83 ec 0c             	sub    esp,0xc
c00158fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00158fd:	50                   	push   eax
c00158fe:	ff 12                	call   DWORD PTR [edx]
c0015900:	31 d2                	xor    edx,edx
c0015902:	0f b6 c0             	movzx  eax,al
c0015905:	83 c4 10             	add    esp,0x10
c0015908:	83 c4 0c             	add    esp,0xc
c001590b:	c3                   	ret    
c001590c:	83 ec 0c             	sub    esp,0xc
c001590f:	50                   	push   eax
c0015910:	e8 be 5c ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c0015915:	83 c4 10             	add    esp,0x10
c0015918:	85 c0                	test   eax,eax
c001591a:	75 dc                	jne    c00158f8 <sysCallIsATTY(regs*)+0x28>
c001591c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015921:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015926:	83 c4 0c             	add    esp,0xc
c0015929:	c3                   	ret    

c001592a <sysCallSeek(regs*)>:
c001592a:	53                   	push   ebx
c001592b:	83 ec 08             	sub    esp,0x8
c001592e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015932:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015935:	8d 50 fd             	lea    edx,[eax-0x3]
c0015938:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001593e:	77 32                	ja     c0015972 <sysCallSeek(regs*)+0x48>
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	50                   	push   eax
c0015944:	e8 8a 5c ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c0015949:	83 c4 0c             	add    esp,0xc
c001594c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001594f:	31 db                	xor    ebx,ebx
c0015951:	53                   	push   ebx
c0015952:	51                   	push   ecx
c0015953:	50                   	push   eax
c0015954:	e8 2f 78 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0015959:	83 c4 10             	add    esp,0x10
c001595c:	85 c0                	test   eax,eax
c001595e:	0f 95 c0             	setne  al
c0015961:	31 d2                	xor    edx,edx
c0015963:	0f b6 c0             	movzx  eax,al
c0015966:	f7 d8                	neg    eax
c0015968:	83 d2 00             	adc    edx,0x0
c001596b:	83 c4 08             	add    esp,0x8
c001596e:	f7 da                	neg    edx
c0015970:	5b                   	pop    ebx
c0015971:	c3                   	ret    
c0015972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015977:	ba ff ff ff ff       	mov    edx,0xffffffff
c001597c:	83 c4 08             	add    esp,0x8
c001597f:	5b                   	pop    ebx
c0015980:	c3                   	ret    

c0015981 <sysCallTell(regs*)>:
c0015981:	53                   	push   ebx
c0015982:	83 ec 08             	sub    esp,0x8
c0015985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015989:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001598c:	83 f8 02             	cmp    eax,0x2
c001598f:	76 4d                	jbe    c00159de <sysCallTell(regs*)+0x5d>
c0015991:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015996:	76 19                	jbe    c00159b1 <sysCallTell(regs*)+0x30>
c0015998:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001599b:	31 d2                	xor    edx,edx
c001599d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159aa:	31 c0                	xor    eax,eax
c00159ac:	83 c4 08             	add    esp,0x8
c00159af:	5b                   	pop    ebx
c00159b0:	c3                   	ret    
c00159b1:	83 ec 0c             	sub    esp,0xc
c00159b4:	50                   	push   eax
c00159b5:	e8 19 5c ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c00159ba:	5a                   	pop    edx
c00159bb:	59                   	pop    ecx
c00159bc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159bf:	50                   	push   eax
c00159c0:	e8 19 78 ff ff       	call   c000d1de <File::tell(unsigned long long*)>
c00159c5:	83 c4 10             	add    esp,0x10
c00159c8:	85 c0                	test   eax,eax
c00159ca:	0f 95 c0             	setne  al
c00159cd:	31 d2                	xor    edx,edx
c00159cf:	0f b6 c0             	movzx  eax,al
c00159d2:	f7 d8                	neg    eax
c00159d4:	83 d2 00             	adc    edx,0x0
c00159d7:	83 c4 08             	add    esp,0x8
c00159da:	f7 da                	neg    edx
c00159dc:	5b                   	pop    ebx
c00159dd:	c3                   	ret    
c00159de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159e8:	83 c4 08             	add    esp,0x8
c00159eb:	5b                   	pop    ebx
c00159ec:	c3                   	ret    

c00159ed <sysCallSize(regs*)>:
c00159ed:	53                   	push   ebx
c00159ee:	83 ec 18             	sub    esp,0x18
c00159f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159f8:	83 f8 02             	cmp    eax,0x2
c00159fb:	76 53                	jbe    c0015a50 <sysCallSize(regs*)+0x63>
c00159fd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a02:	76 19                	jbe    c0015a1d <sysCallSize(regs*)+0x30>
c0015a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015a07:	31 d2                	xor    edx,edx
c0015a09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a16:	31 c0                	xor    eax,eax
c0015a18:	83 c4 18             	add    esp,0x18
c0015a1b:	5b                   	pop    ebx
c0015a1c:	c3                   	ret    
c0015a1d:	83 ec 0c             	sub    esp,0xc
c0015a20:	50                   	push   eax
c0015a21:	e8 ad 5b ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c0015a26:	83 c4 0c             	add    esp,0xc
c0015a29:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015a2d:	52                   	push   edx
c0015a2e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a31:	50                   	push   eax
c0015a32:	e8 3f 79 ff ff       	call   c000d376 <File::stat(unsigned long long*, bool*)>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	85 c0                	test   eax,eax
c0015a3c:	0f 95 c0             	setne  al
c0015a3f:	31 d2                	xor    edx,edx
c0015a41:	0f b6 c0             	movzx  eax,al
c0015a44:	f7 d8                	neg    eax
c0015a46:	83 d2 00             	adc    edx,0x0
c0015a49:	83 c4 18             	add    esp,0x18
c0015a4c:	f7 da                	neg    edx
c0015a4e:	5b                   	pop    ebx
c0015a4f:	c3                   	ret    
c0015a50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a55:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a5a:	83 c4 18             	add    esp,0x18
c0015a5d:	5b                   	pop    ebx
c0015a5e:	c3                   	ret    

c0015a5f <sysCallSizeFromFilename(regs*)>:
c0015a5f:	57                   	push   edi
c0015a60:	56                   	push   esi
c0015a61:	53                   	push   ebx
c0015a62:	83 ec 20             	sub    esp,0x20
c0015a65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a69:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015a6c:	83 fb 02             	cmp    ebx,0x2
c0015a6f:	0f 86 88 00 00 00    	jbe    c0015afd <sysCallSizeFromFilename(regs*)+0x9e>
c0015a75:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015a7b:	76 1b                	jbe    c0015a98 <sysCallSizeFromFilename(regs*)+0x39>
c0015a7d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015a80:	31 d2                	xor    edx,edx
c0015a82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a8f:	83 c4 20             	add    esp,0x20
c0015a92:	31 c0                	xor    eax,eax
c0015a94:	5b                   	pop    ebx
c0015a95:	5e                   	pop    esi
c0015a96:	5f                   	pop    edi
c0015a97:	c3                   	ret    
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	68 14 01 00 00       	push   0x114
c0015aa0:	e8 1e 3f ff ff       	call   c00099c3 <malloc>
c0015aa5:	83 c4 0c             	add    esp,0xc
c0015aa8:	89 c7                	mov    edi,eax
c0015aaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aaf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ab2:	53                   	push   ebx
c0015ab3:	57                   	push   edi
c0015ab4:	e8 ad 75 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0015ab9:	83 c4 0c             	add    esp,0xc
c0015abc:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015ac0:	50                   	push   eax
c0015ac1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015ac4:	57                   	push   edi
c0015ac5:	e8 ac 78 ff ff       	call   c000d376 <File::stat(unsigned long long*, bool*)>
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	85 ff                	test   edi,edi
c0015acf:	74 14                	je     c0015ae5 <sysCallSizeFromFilename(regs*)+0x86>
c0015ad1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ad5:	8b 17                	mov    edx,DWORD PTR [edi]
c0015ad7:	83 ec 0c             	sub    esp,0xc
c0015ada:	57                   	push   edi
c0015adb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ade:	83 c4 10             	add    esp,0x10
c0015ae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ae5:	85 c0                	test   eax,eax
c0015ae7:	0f 95 c0             	setne  al
c0015aea:	31 d2                	xor    edx,edx
c0015aec:	0f b6 c0             	movzx  eax,al
c0015aef:	f7 d8                	neg    eax
c0015af1:	83 d2 00             	adc    edx,0x0
c0015af4:	83 c4 20             	add    esp,0x20
c0015af7:	f7 da                	neg    edx
c0015af9:	5b                   	pop    ebx
c0015afa:	5e                   	pop    esi
c0015afb:	5f                   	pop    edi
c0015afc:	c3                   	ret    
c0015afd:	83 c4 20             	add    esp,0x20
c0015b00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b05:	5b                   	pop    ebx
c0015b06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b0b:	5e                   	pop    esi
c0015b0c:	5f                   	pop    edi
c0015b0d:	c3                   	ret    

c0015b0e <sysCallClose(regs*)>:
c0015b0e:	53                   	push   ebx
c0015b0f:	83 ec 08             	sub    esp,0x8
c0015b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b19:	83 f8 02             	cmp    eax,0x2
c0015b1c:	76 41                	jbe    c0015b5f <sysCallClose(regs*)+0x51>
c0015b1e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015b24:	83 fa 01             	cmp    edx,0x1
c0015b27:	76 2d                	jbe    c0015b56 <sysCallClose(regs*)+0x48>
c0015b29:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015b2e:	77 2f                	ja     c0015b5f <sysCallClose(regs*)+0x51>
c0015b30:	83 ec 0c             	sub    esp,0xc
c0015b33:	50                   	push   eax
c0015b34:	e8 9a 5a ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c0015b39:	89 c3                	mov    ebx,eax
c0015b3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b3e:	e8 e5 75 ff ff       	call   c000d128 <File::close()>
c0015b43:	83 c4 10             	add    esp,0x10
c0015b46:	85 db                	test   ebx,ebx
c0015b48:	74 0c                	je     c0015b56 <sysCallClose(regs*)+0x48>
c0015b4a:	83 ec 0c             	sub    esp,0xc
c0015b4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b4f:	53                   	push   ebx
c0015b50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b53:	83 c4 10             	add    esp,0x10
c0015b56:	31 c0                	xor    eax,eax
c0015b58:	31 d2                	xor    edx,edx
c0015b5a:	83 c4 08             	add    esp,0x8
c0015b5d:	5b                   	pop    ebx
c0015b5e:	c3                   	ret    
c0015b5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b64:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b69:	83 c4 08             	add    esp,0x8
c0015b6c:	5b                   	pop    ebx
c0015b6d:	c3                   	ret    

c0015b6e <sysCallOpenDir(regs*)>:
c0015b6e:	56                   	push   esi
c0015b6f:	53                   	push   ebx
c0015b70:	53                   	push   ebx
c0015b71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b75:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015b78:	85 f6                	test   esi,esi
c0015b7a:	74 59                	je     c0015bd5 <sysCallOpenDir(regs*)+0x67>
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	68 14 01 00 00       	push   0x114
c0015b84:	e8 3a 3e ff ff       	call   c00099c3 <malloc>
c0015b89:	83 c4 0c             	add    esp,0xc
c0015b8c:	89 c6                	mov    esi,eax
c0015b8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b96:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b99:	56                   	push   esi
c0015b9a:	e8 73 79 ff ff       	call   c000d512 <Directory::Directory(char const*, Process*)>
c0015b9f:	83 c4 10             	add    esp,0x10
c0015ba2:	85 f6                	test   esi,esi
c0015ba4:	74 2f                	je     c0015bd5 <sysCallOpenDir(regs*)+0x67>
c0015ba6:	83 ec 0c             	sub    esp,0xc
c0015ba9:	56                   	push   esi
c0015baa:	e8 c7 79 ff ff       	call   c000d576 <Directory::open()>
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	85 c0                	test   eax,eax
c0015bb4:	75 1f                	jne    c0015bd5 <sysCallOpenDir(regs*)+0x67>
c0015bb6:	83 ec 0c             	sub    esp,0xc
c0015bb9:	56                   	push   esi
c0015bba:	e8 1f 57 ff ff       	call   c000b2de <UnixFile::getFileDescriptor()>
c0015bbf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015bc2:	83 c4 10             	add    esp,0x10
c0015bc5:	89 02                	mov    DWORD PTR [edx],eax
c0015bc7:	c1 f8 1f             	sar    eax,0x1f
c0015bca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015bcd:	31 c0                	xor    eax,eax
c0015bcf:	59                   	pop    ecx
c0015bd0:	31 d2                	xor    edx,edx
c0015bd2:	5b                   	pop    ebx
c0015bd3:	5e                   	pop    esi
c0015bd4:	c3                   	ret    
c0015bd5:	59                   	pop    ecx
c0015bd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bdb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015be0:	5b                   	pop    ebx
c0015be1:	5e                   	pop    esi
c0015be2:	c3                   	ret    

c0015be3 <sysCallCloseDir(regs*)>:
c0015be3:	53                   	push   ebx
c0015be4:	83 ec 08             	sub    esp,0x8
c0015be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015beb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bee:	8d 50 fd             	lea    edx,[eax-0x3]
c0015bf1:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015bf7:	77 2f                	ja     c0015c28 <sysCallCloseDir(regs*)+0x45>
c0015bf9:	83 ec 0c             	sub    esp,0xc
c0015bfc:	50                   	push   eax
c0015bfd:	e8 d1 59 ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c0015c02:	89 c3                	mov    ebx,eax
c0015c04:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c07:	e8 c6 79 ff ff       	call   c000d5d2 <Directory::close()>
c0015c0c:	83 c4 10             	add    esp,0x10
c0015c0f:	85 db                	test   ebx,ebx
c0015c11:	74 0c                	je     c0015c1f <sysCallCloseDir(regs*)+0x3c>
c0015c13:	83 ec 0c             	sub    esp,0xc
c0015c16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c18:	53                   	push   ebx
c0015c19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c1c:	83 c4 10             	add    esp,0x10
c0015c1f:	31 c0                	xor    eax,eax
c0015c21:	31 d2                	xor    edx,edx
c0015c23:	83 c4 08             	add    esp,0x8
c0015c26:	5b                   	pop    ebx
c0015c27:	c3                   	ret    
c0015c28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c32:	83 c4 08             	add    esp,0x8
c0015c35:	5b                   	pop    ebx
c0015c36:	c3                   	ret    

c0015c37 <sysCallMakeDir(regs*)>:
c0015c37:	56                   	push   esi
c0015c38:	53                   	push   ebx
c0015c39:	83 ec 10             	sub    esp,0x10
c0015c3c:	68 14 01 00 00       	push   0x114
c0015c41:	e8 7d 3d ff ff       	call   c00099c3 <malloc>
c0015c46:	83 c4 0c             	add    esp,0xc
c0015c49:	89 c3                	mov    ebx,eax
c0015c4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c50:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c57:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c5a:	53                   	push   ebx
c0015c5b:	e8 b2 78 ff ff       	call   c000d512 <Directory::Directory(char const*, Process*)>
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	85 db                	test   ebx,ebx
c0015c65:	74 32                	je     c0015c99 <sysCallMakeDir(regs*)+0x62>
c0015c67:	83 ec 0c             	sub    esp,0xc
c0015c6a:	53                   	push   ebx
c0015c6b:	e8 e6 7a ff ff       	call   c000d756 <Directory::create()>
c0015c70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c73:	89 c6                	mov    esi,eax
c0015c75:	e8 58 79 ff ff       	call   c000d5d2 <Directory::close()>
c0015c7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c82:	83 c4 10             	add    esp,0x10
c0015c85:	31 c0                	xor    eax,eax
c0015c87:	59                   	pop    ecx
c0015c88:	85 f6                	test   esi,esi
c0015c8a:	5b                   	pop    ebx
c0015c8b:	0f 95 c0             	setne  al
c0015c8e:	5e                   	pop    esi
c0015c8f:	31 d2                	xor    edx,edx
c0015c91:	f7 d8                	neg    eax
c0015c93:	83 d2 00             	adc    edx,0x0
c0015c96:	f7 da                	neg    edx
c0015c98:	c3                   	ret    
c0015c99:	59                   	pop    ecx
c0015c9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ca4:	5b                   	pop    ebx
c0015ca5:	5e                   	pop    esi
c0015ca6:	c3                   	ret    

c0015ca7 <sysCallWait(regs*)>:
c0015ca7:	83 ec 10             	sub    esp,0x10
c0015caa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015cae:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015cb1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015cb4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015cb7:	e8 fc 24 00 00       	call   c00181b8 <waitTask(int, int*, int)>
c0015cbc:	83 c4 1c             	add    esp,0x1c
c0015cbf:	99                   	cdq    
c0015cc0:	c3                   	ret    

c0015cc1 <sysCallNotImpl(regs*)>:
c0015cc1:	83 ec 18             	sub    esp,0x18
c0015cc4:	68 49 46 02 c0       	push   0xc0024649
c0015cc9:	e8 ef e6 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0015cce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cd8:	83 c4 1c             	add    esp,0x1c
c0015cdb:	c3                   	ret    

c0015cdc <sysPanic(regs*)>:
c0015cdc:	83 ec 18             	sub    esp,0x18
c0015cdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ce3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015ce6:	e8 d2 e6 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0015ceb:	b8 01 00 00 00       	mov    eax,0x1
c0015cf0:	31 d2                	xor    edx,edx
c0015cf2:	83 c4 1c             	add    esp,0x1c
c0015cf5:	c3                   	ret    

c0015cf6 <sysCallRmdir(regs*)>:
c0015cf6:	56                   	push   esi
c0015cf7:	53                   	push   ebx
c0015cf8:	83 ec 20             	sub    esp,0x20
c0015cfb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cff:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015d02:	68 14 01 00 00       	push   0x114
c0015d07:	e8 b7 3c ff ff       	call   c00099c3 <malloc>
c0015d0c:	83 c4 0c             	add    esp,0xc
c0015d0f:	89 c3                	mov    ebx,eax
c0015d11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d16:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015d19:	56                   	push   esi
c0015d1a:	53                   	push   ebx
c0015d1b:	e8 46 73 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0015d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d23:	e8 1a 75 ff ff       	call   c000d242 <File::unlink()>
c0015d28:	83 c4 10             	add    esp,0x10
c0015d2b:	85 db                	test   ebx,ebx
c0015d2d:	74 14                	je     c0015d43 <sysCallRmdir(regs*)+0x4d>
c0015d2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d33:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d35:	83 ec 0c             	sub    esp,0xc
c0015d38:	53                   	push   ebx
c0015d39:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d43:	85 c0                	test   eax,eax
c0015d45:	0f 95 c0             	setne  al
c0015d48:	31 d2                	xor    edx,edx
c0015d4a:	0f b6 c0             	movzx  eax,al
c0015d4d:	f7 d8                	neg    eax
c0015d4f:	83 d2 00             	adc    edx,0x0
c0015d52:	83 c4 14             	add    esp,0x14
c0015d55:	f7 da                	neg    edx
c0015d57:	5b                   	pop    ebx
c0015d58:	5e                   	pop    esi
c0015d59:	c3                   	ret    

c0015d5a <sysCallUnlink(regs*)>:
c0015d5a:	56                   	push   esi
c0015d5b:	53                   	push   ebx
c0015d5c:	83 ec 20             	sub    esp,0x20
c0015d5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d63:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015d66:	68 14 01 00 00       	push   0x114
c0015d6b:	e8 53 3c ff ff       	call   c00099c3 <malloc>
c0015d70:	83 c4 0c             	add    esp,0xc
c0015d73:	89 c3                	mov    ebx,eax
c0015d75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d7a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015d7d:	56                   	push   esi
c0015d7e:	53                   	push   ebx
c0015d7f:	e8 e2 72 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0015d84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d87:	e8 b6 74 ff ff       	call   c000d242 <File::unlink()>
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	85 db                	test   ebx,ebx
c0015d91:	74 14                	je     c0015da7 <sysCallUnlink(regs*)+0x4d>
c0015d93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d97:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d99:	83 ec 0c             	sub    esp,0xc
c0015d9c:	53                   	push   ebx
c0015d9d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015da0:	83 c4 10             	add    esp,0x10
c0015da3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015da7:	85 c0                	test   eax,eax
c0015da9:	0f 95 c0             	setne  al
c0015dac:	31 d2                	xor    edx,edx
c0015dae:	0f b6 c0             	movzx  eax,al
c0015db1:	f7 d8                	neg    eax
c0015db3:	83 d2 00             	adc    edx,0x0
c0015db6:	83 c4 14             	add    esp,0x14
c0015db9:	f7 da                	neg    edx
c0015dbb:	5b                   	pop    ebx
c0015dbc:	5e                   	pop    esi
c0015dbd:	c3                   	ret    

c0015dbe <sysCallGetArgv(regs*)>:
c0015dbe:	83 ec 0c             	sub    esp,0xc
c0015dc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dc5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015dc8:	85 c0                	test   eax,eax
c0015dca:	78 2b                	js     c0015df7 <sysCallGetArgv(regs*)+0x39>
c0015dcc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015dd2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015dd5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015ddb:	7d 1a                	jge    c0015df7 <sysCallGetArgv(regs*)+0x39>
c0015ddd:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015de4:	85 c0                	test   eax,eax
c0015de6:	74 17                	je     c0015dff <sysCallGetArgv(regs*)+0x41>
c0015de8:	83 ec 08             	sub    esp,0x8
c0015deb:	50                   	push   eax
c0015dec:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015def:	e8 4c a9 fe ff       	call   c0000740 <strcpy>
c0015df4:	83 c4 10             	add    esp,0x10
c0015df7:	31 c0                	xor    eax,eax
c0015df9:	31 d2                	xor    edx,edx
c0015dfb:	83 c4 0c             	add    esp,0xc
c0015dfe:	c3                   	ret    
c0015dff:	b8 01 00 00 00       	mov    eax,0x1
c0015e04:	31 d2                	xor    edx,edx
c0015e06:	83 c4 0c             	add    esp,0xc
c0015e09:	c3                   	ret    

c0015e0a <sysCallTTYName(regs*)>:
c0015e0a:	56                   	push   esi
c0015e0b:	53                   	push   ebx
c0015e0c:	53                   	push   ebx
c0015e0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e11:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015e14:	85 c0                	test   eax,eax
c0015e16:	74 5f                	je     c0015e77 <sysCallTTYName(regs*)+0x6d>
c0015e18:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015e1b:	83 f8 02             	cmp    eax,0x2
c0015e1e:	77 3e                	ja     c0015e5e <sysCallTTYName(regs*)+0x54>
c0015e20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e28:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015e2e:	85 db                	test   ebx,ebx
c0015e30:	74 45                	je     c0015e77 <sysCallTTYName(regs*)+0x6d>
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e37:	53                   	push   ebx
c0015e38:	ff 10                	call   DWORD PTR [eax]
c0015e3a:	83 c4 10             	add    esp,0x10
c0015e3d:	84 c0                	test   al,al
c0015e3f:	74 41                	je     c0015e82 <sysCallTTYName(regs*)+0x78>
c0015e41:	83 ec 08             	sub    esp,0x8
c0015e44:	81 c3 82 00 00 00    	add    ebx,0x82
c0015e4a:	53                   	push   ebx
c0015e4b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015e4e:	e8 ed a8 fe ff       	call   c0000740 <strcpy>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	31 c0                	xor    eax,eax
c0015e58:	59                   	pop    ecx
c0015e59:	31 d2                	xor    edx,edx
c0015e5b:	5b                   	pop    ebx
c0015e5c:	5e                   	pop    esi
c0015e5d:	c3                   	ret    
c0015e5e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015e63:	74 bb                	je     c0015e20 <sysCallTTYName(regs*)+0x16>
c0015e65:	83 ec 0c             	sub    esp,0xc
c0015e68:	50                   	push   eax
c0015e69:	e8 65 57 ff ff       	call   c000b5d3 <getFromFileDescriptor(int)>
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	89 c3                	mov    ebx,eax
c0015e73:	85 db                	test   ebx,ebx
c0015e75:	75 bb                	jne    c0015e32 <sysCallTTYName(regs*)+0x28>
c0015e77:	59                   	pop    ecx
c0015e78:	b8 01 00 00 00       	mov    eax,0x1
c0015e7d:	31 d2                	xor    edx,edx
c0015e7f:	5b                   	pop    ebx
c0015e80:	5e                   	pop    esi
c0015e81:	c3                   	ret    
c0015e82:	59                   	pop    ecx
c0015e83:	b8 02 00 00 00       	mov    eax,0x2
c0015e88:	31 d2                	xor    edx,edx
c0015e8a:	5b                   	pop    ebx
c0015e8b:	5e                   	pop    esi
c0015e8c:	c3                   	ret    

c0015e8d <sysCallUSleep(regs*)>:
c0015e8d:	83 ec 1c             	sub    esp,0x1c
c0015e90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e94:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e97:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015e9a:	6a 00                	push   0x0
c0015e9c:	6a 64                	push   0x64
c0015e9e:	52                   	push   edx
c0015e9f:	50                   	push   eax
c0015ea0:	e8 1f b1 00 00       	call   c0020fc4 <__udivdi3>
c0015ea5:	83 c4 14             	add    esp,0x14
c0015ea8:	50                   	push   eax
c0015ea9:	e8 da 23 00 00       	call   c0018288 <milliTenthSleep(unsigned int)>
c0015eae:	31 c0                	xor    eax,eax
c0015eb0:	31 d2                	xor    edx,edx
c0015eb2:	83 c4 1c             	add    esp,0x1c
c0015eb5:	c3                   	ret    

c0015eb6 <sysCallSpawn(regs*)>:
c0015eb6:	56                   	push   esi
c0015eb7:	53                   	push   ebx
c0015eb8:	50                   	push   eax
c0015eb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ebd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015ec0:	85 c0                	test   eax,eax
c0015ec2:	75 08                	jne    c0015ecc <sysCallSpawn(regs*)+0x16>
c0015ec4:	59                   	pop    ecx
c0015ec5:	31 c0                	xor    eax,eax
c0015ec7:	31 d2                	xor    edx,edx
c0015ec9:	5b                   	pop    ebx
c0015eca:	5e                   	pop    esi
c0015ecb:	c3                   	ret    
c0015ecc:	83 ec 0c             	sub    esp,0xc
c0015ecf:	68 1f 07 00 00       	push   0x71f
c0015ed4:	e8 ea 3a ff ff       	call   c00099c3 <malloc>
c0015ed9:	83 c4 10             	add    esp,0x10
c0015edc:	89 c6                	mov    esi,eax
c0015ede:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015ee1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015ee4:	85 c0                	test   eax,eax
c0015ee6:	75 32                	jne    c0015f1a <sysCallSpawn(regs*)+0x64>
c0015ee8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ef0:	52                   	push   edx
c0015ef1:	50                   	push   eax
c0015ef2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ef5:	56                   	push   esi
c0015ef6:	e8 85 1a 00 00       	call   c0017980 <Process::Process(char const*, Process*, char**)>
c0015efb:	83 c4 10             	add    esp,0x10
c0015efe:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015f05:	75 bd                	jne    c0015ec4 <sysCallSpawn(regs*)+0xe>
c0015f07:	83 ec 0c             	sub    esp,0xc
c0015f0a:	56                   	push   esi
c0015f0b:	e8 5c 1f 00 00       	call   c0017e6c <Process::createUserThread()>
c0015f10:	8b 06                	mov    eax,DWORD PTR [esi]
c0015f12:	83 c4 10             	add    esp,0x10
c0015f15:	99                   	cdq    
c0015f16:	59                   	pop    ecx
c0015f17:	5b                   	pop    ebx
c0015f18:	5e                   	pop    esi
c0015f19:	c3                   	ret    
c0015f1a:	31 c0                	xor    eax,eax
c0015f1c:	eb d2                	jmp    c0015ef0 <sysCallSpawn(regs*)+0x3a>

c0015f1e <sysCallGetEnv(regs*)>:
c0015f1e:	57                   	push   edi
c0015f1f:	56                   	push   esi
c0015f20:	53                   	push   ebx
c0015f21:	83 ec 1c             	sub    esp,0x1c
c0015f24:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f2d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015f30:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015f33:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f36:	e8 ce e3 ff ff       	call   c0014309 <Krnl::getProcessTotalEnvCount(Process*)>
c0015f3b:	83 c4 10             	add    esp,0x10
c0015f3e:	39 c7                	cmp    edi,eax
c0015f40:	7c 14                	jl     c0015f56 <sysCallGetEnv(regs*)+0x38>
c0015f42:	85 f6                	test   esi,esi
c0015f44:	75 0b                	jne    c0015f51 <sysCallGetEnv(regs*)+0x33>
c0015f46:	83 c4 10             	add    esp,0x10
c0015f49:	31 c0                	xor    eax,eax
c0015f4b:	5b                   	pop    ebx
c0015f4c:	31 d2                	xor    edx,edx
c0015f4e:	5e                   	pop    esi
c0015f4f:	5f                   	pop    edi
c0015f50:	c3                   	ret    
c0015f51:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f54:	eb f0                	jmp    c0015f46 <sysCallGetEnv(regs*)+0x28>
c0015f56:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015f5a:	52                   	push   edx
c0015f5b:	57                   	push   edi
c0015f5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f62:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015f65:	50                   	push   eax
c0015f66:	e8 be e3 ff ff       	call   c0014329 <Krnl::getProcessEnvPair(Process*, int)>
c0015f6b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015f6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f72:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f76:	83 c4 0c             	add    esp,0xc
c0015f79:	85 c9                	test   ecx,ecx
c0015f7b:	75 23                	jne    c0015fa0 <sysCallGetEnv(regs*)+0x82>
c0015f7d:	83 ec 0c             	sub    esp,0xc
c0015f80:	50                   	push   eax
c0015f81:	e8 1a a7 fe ff       	call   c00006a0 <strlen>
c0015f86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f89:	89 c3                	mov    ebx,eax
c0015f8b:	e8 10 a7 fe ff       	call   c00006a0 <strlen>
c0015f90:	83 c4 10             	add    esp,0x10
c0015f93:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015f97:	83 c4 10             	add    esp,0x10
c0015f9a:	31 d2                	xor    edx,edx
c0015f9c:	5b                   	pop    ebx
c0015f9d:	5e                   	pop    esi
c0015f9e:	5f                   	pop    edi
c0015f9f:	c3                   	ret    
c0015fa0:	83 ec 08             	sub    esp,0x8
c0015fa3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015fa6:	50                   	push   eax
c0015fa7:	56                   	push   esi
c0015fa8:	e8 93 a7 fe ff       	call   c0000740 <strcpy>
c0015fad:	58                   	pop    eax
c0015fae:	5a                   	pop    edx
c0015faf:	68 63 46 02 c0       	push   0xc0024663
c0015fb4:	56                   	push   esi
c0015fb5:	e8 c6 a8 fe ff       	call   c0000880 <strcat>
c0015fba:	59                   	pop    ecx
c0015fbb:	5b                   	pop    ebx
c0015fbc:	57                   	push   edi
c0015fbd:	56                   	push   esi
c0015fbe:	e8 bd a8 fe ff       	call   c0000880 <strcat>
c0015fc3:	83 c4 10             	add    esp,0x10
c0015fc6:	e9 7b ff ff ff       	jmp    c0015f46 <sysCallGetEnv(regs*)+0x28>

c0015fcb <sysAppSettings(regs*)>:
c0015fcb:	57                   	push   edi
c0015fcc:	56                   	push   esi
c0015fcd:	56                   	push   esi
c0015fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015fd5:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015fdb:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015fe0:	66 3d c0 09          	cmp    ax,0x9c0
c0015fe4:	75 2e                	jne    c0016014 <sysAppSettings(regs*)+0x49>
c0015fe6:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015fec:	83 e0 1f             	and    eax,0x1f
c0015fef:	3c 01                	cmp    al,0x1
c0015ff1:	74 2c                	je     c001601f <sysAppSettings(regs*)+0x54>
c0015ff3:	3c 07                	cmp    al,0x7
c0015ff5:	0f 84 b3 00 00 00    	je     c00160ae <sysAppSettings(regs*)+0xe3>
c0015ffb:	84 c0                	test   al,al
c0015ffd:	0f 84 d2 00 00 00    	je     c00160d5 <sysAppSettings(regs*)+0x10a>
c0016003:	3c 08                	cmp    al,0x8
c0016005:	74 63                	je     c001606a <sysAppSettings(regs*)+0x9f>
c0016007:	59                   	pop    ecx
c0016008:	0f b6 c0             	movzx  eax,al
c001600b:	5e                   	pop    esi
c001600c:	05 e8 03 00 00       	add    eax,0x3e8
c0016011:	5f                   	pop    edi
c0016012:	99                   	cdq    
c0016013:	c3                   	ret    
c0016014:	b8 01 00 00 00       	mov    eax,0x1
c0016019:	59                   	pop    ecx
c001601a:	31 d2                	xor    edx,edx
c001601c:	5e                   	pop    esi
c001601d:	5f                   	pop    edi
c001601e:	c3                   	ret    
c001601f:	50                   	push   eax
c0016020:	68 00 01 00 00       	push   0x100
c0016025:	6a 00                	push   0x0
c0016027:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001602c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001602f:	83 c0 0c             	add    eax,0xc
c0016032:	50                   	push   eax
c0016033:	e8 4c a6 fe ff       	call   c0000684 <memset>
c0016038:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001603d:	b9 ff 00 00 00       	mov    ecx,0xff
c0016042:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016045:	83 c7 0c             	add    edi,0xc
c0016048:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001604a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001604f:	5a                   	pop    edx
c0016050:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016053:	59                   	pop    ecx
c0016054:	8d 50 0c             	lea    edx,[eax+0xc]
c0016057:	52                   	push   edx
c0016058:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001605e:	e8 95 46 ff ff       	call   c000a6f8 <VgaText::setTitle(char*)>
c0016063:	83 c4 10             	add    esp,0x10
c0016066:	31 c0                	xor    eax,eax
c0016068:	eb af                	jmp    c0016019 <sysAppSettings(regs*)+0x4e>
c001606a:	83 ec 08             	sub    esp,0x8
c001606d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016073:	83 e0 0f             	and    eax,0xf
c0016076:	50                   	push   eax
c0016077:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001607c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001607f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016085:	e8 5e 46 ff ff       	call   c000a6e8 <VgaText::setTitleColour(VgaColour)>
c001608a:	5f                   	pop    edi
c001608b:	58                   	pop    eax
c001608c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016092:	c1 e8 04             	shr    eax,0x4
c0016095:	83 e0 0f             	and    eax,0xf
c0016098:	50                   	push   eax
c0016099:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001609e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00160a1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00160a7:	e8 2c 46 ff ff       	call   c000a6d8 <VgaText::setTitleTextColour(VgaColour)>
c00160ac:	eb b5                	jmp    c0016063 <sysAppSettings(regs*)+0x98>
c00160ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00160b6:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00160bc:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00160c2:	c0 e8 06             	shr    al,0x6
c00160c5:	83 e0 01             	and    eax,0x1
c00160c8:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00160ce:	31 c0                	xor    eax,eax
c00160d0:	e9 44 ff ff ff       	jmp    c0016019 <sysAppSettings(regs*)+0x4e>
c00160d5:	b8 02 00 00 00       	mov    eax,0x2
c00160da:	e9 3a ff ff ff       	jmp    c0016019 <sysAppSettings(regs*)+0x4e>

c00160df <sysSetFatAttrib(regs*)>:
c00160df:	57                   	push   edi
c00160e0:	56                   	push   esi
c00160e1:	53                   	push   ebx
c00160e2:	83 ec 1c             	sub    esp,0x1c
c00160e5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00160e9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00160ec:	68 14 01 00 00       	push   0x114
c00160f1:	e8 cd 38 ff ff       	call   c00099c3 <malloc>
c00160f6:	83 c4 0c             	add    esp,0xc
c00160f9:	89 c3                	mov    ebx,eax
c00160fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016100:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016103:	57                   	push   edi
c0016104:	53                   	push   ebx
c0016105:	e8 5c 6f ff ff       	call   c000d066 <File::File(char const*, Process*)>
c001610a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001610d:	83 c4 0c             	add    esp,0xc
c0016110:	0f b6 d4             	movzx  edx,ah
c0016113:	0f b6 c0             	movzx  eax,al
c0016116:	52                   	push   edx
c0016117:	50                   	push   eax
c0016118:	53                   	push   ebx
c0016119:	e8 be 71 ff ff       	call   c000d2dc <File::chfatattr(unsigned char, unsigned char)>
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	85 db                	test   ebx,ebx
c0016123:	74 14                	je     c0016139 <sysSetFatAttrib(regs*)+0x5a>
c0016125:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016129:	8b 13                	mov    edx,DWORD PTR [ebx]
c001612b:	83 ec 0c             	sub    esp,0xc
c001612e:	53                   	push   ebx
c001612f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016132:	83 c4 10             	add    esp,0x10
c0016135:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016139:	85 c0                	test   eax,eax
c001613b:	0f 95 c0             	setne  al
c001613e:	31 d2                	xor    edx,edx
c0016140:	0f b6 c0             	movzx  eax,al
c0016143:	f7 d8                	neg    eax
c0016145:	83 d2 00             	adc    edx,0x0
c0016148:	83 c4 10             	add    esp,0x10
c001614b:	f7 da                	neg    edx
c001614d:	5b                   	pop    ebx
c001614e:	5e                   	pop    esi
c001614f:	5f                   	pop    edi
c0016150:	c3                   	ret    

c0016151 <sysPipe(regs*)>:
c0016151:	57                   	push   edi
c0016152:	56                   	push   esi
c0016153:	53                   	push   ebx
c0016154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016158:	83 ec 0c             	sub    esp,0xc
c001615b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001615e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016161:	6a 20                	push   0x20
c0016163:	e8 5b 38 ff ff       	call   c00099c3 <malloc>
c0016168:	89 c3                	mov    ebx,eax
c001616a:	58                   	pop    eax
c001616b:	5a                   	pop    edx
c001616c:	68 00 50 00 00       	push   0x5000
c0016171:	53                   	push   ebx
c0016172:	e8 f9 42 ff ff       	call   c000a470 <Pipe::Pipe(int)>
c0016177:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001617a:	e8 5f 51 ff ff       	call   c000b2de <UnixFile::getFileDescriptor()>
c001617f:	89 07                	mov    DWORD PTR [edi],eax
c0016181:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016184:	e8 55 51 ff ff       	call   c000b2de <UnixFile::getFileDescriptor()>
c0016189:	83 c4 10             	add    esp,0x10
c001618c:	89 06                	mov    DWORD PTR [esi],eax
c001618e:	31 d2                	xor    edx,edx
c0016190:	5b                   	pop    ebx
c0016191:	31 c0                	xor    eax,eax
c0016193:	5e                   	pop    esi
c0016194:	5f                   	pop    edi
c0016195:	c3                   	ret    

c0016196 <sysGetUnixTime(regs*)>:
c0016196:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c001619b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00161a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161a5:	e9 b0 78 ff ff       	jmp    c000da5a <Clock::timeInSecondsLocal()>

c00161aa <string_ends_with(char const*, char const*)>:
c00161aa:	57                   	push   edi
c00161ab:	56                   	push   esi
c00161ac:	53                   	push   ebx
c00161ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00161b1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00161b5:	83 ec 0c             	sub    esp,0xc
c00161b8:	53                   	push   ebx
c00161b9:	e8 e2 a4 fe ff       	call   c00006a0 <strlen>
c00161be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00161c1:	89 c6                	mov    esi,eax
c00161c3:	e8 d8 a4 fe ff       	call   c00006a0 <strlen>
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	39 c6                	cmp    esi,eax
c00161cd:	7d 06                	jge    c00161d5 <string_ends_with(char const*, char const*)+0x2b>
c00161cf:	5b                   	pop    ebx
c00161d0:	31 c0                	xor    eax,eax
c00161d2:	5e                   	pop    esi
c00161d3:	5f                   	pop    edi
c00161d4:	c3                   	ret    
c00161d5:	83 ec 08             	sub    esp,0x8
c00161d8:	29 c6                	sub    esi,eax
c00161da:	57                   	push   edi
c00161db:	01 f3                	add    ebx,esi
c00161dd:	53                   	push   ebx
c00161de:	e8 e9 a5 fe ff       	call   c00007cc <strcmp>
c00161e3:	83 c4 10             	add    esp,0x10
c00161e6:	85 c0                	test   eax,eax
c00161e8:	5b                   	pop    ebx
c00161e9:	0f 94 c0             	sete   al
c00161ec:	5e                   	pop    esi
c00161ed:	0f b6 c0             	movzx  eax,al
c00161f0:	5f                   	pop    edi
c00161f1:	c3                   	ret    

c00161f2 <sysCallOpen(regs*)>:
c00161f2:	56                   	push   esi
c00161f3:	53                   	push   ebx
c00161f4:	81 ec 04 01 00 00    	sub    esp,0x104
c00161fa:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016201:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016204:	85 c9                	test   ecx,ecx
c0016206:	0f 84 ad 01 00 00    	je     c00163b9 <sysCallOpen(regs*)+0x1c7>
c001620c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001620f:	85 c0                	test   eax,eax
c0016211:	0f 84 a2 01 00 00    	je     c00163b9 <sysCallOpen(regs*)+0x1c7>
c0016217:	52                   	push   edx
c0016218:	68 65 46 02 c0       	push   0xc0024665
c001621d:	50                   	push   eax
c001621e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016222:	56                   	push   esi
c0016223:	e8 94 6c ff ff       	call   c000cebc <Fs::standardiseFiles(char*, char const*, char const*)>
c0016228:	89 34 24             	mov    DWORD PTR [esp],esi
c001622b:	e8 70 a4 fe ff       	call   c00006a0 <strlen>
c0016230:	83 c4 10             	add    esp,0x10
c0016233:	48                   	dec    eax
c0016234:	74 1d                	je     c0016253 <sysCallOpen(regs*)+0x61>
c0016236:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016239:	eb 0f                	jmp    c001624a <sysCallOpen(regs*)+0x58>
c001623b:	80 fa 3a             	cmp    dl,0x3a
c001623e:	74 0f                	je     c001624f <sysCallOpen(regs*)+0x5d>
c0016240:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016244:	48                   	dec    eax
c0016245:	74 0c                	je     c0016253 <sysCallOpen(regs*)+0x61>
c0016247:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001624a:	80 fa 2e             	cmp    dl,0x2e
c001624d:	75 ec                	jne    c001623b <sysCallOpen(regs*)+0x49>
c001624f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016253:	83 ec 08             	sub    esp,0x8
c0016256:	68 69 46 02 c0       	push   0xc0024669
c001625b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001625e:	e8 47 ff ff ff       	call   c00161aa <string_ends_with(char const*, char const*)>
c0016263:	83 c4 10             	add    esp,0x10
c0016266:	85 c0                	test   eax,eax
c0016268:	74 1d                	je     c0016287 <sysCallOpen(regs*)+0x95>
c001626a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001626d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016273:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001627a:	81 c4 04 01 00 00    	add    esp,0x104
c0016280:	31 c0                	xor    eax,eax
c0016282:	31 d2                	xor    edx,edx
c0016284:	5b                   	pop    ebx
c0016285:	5e                   	pop    esi
c0016286:	c3                   	ret    
c0016287:	83 ec 08             	sub    esp,0x8
c001628a:	68 6e 46 02 c0       	push   0xc002466e
c001628f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016292:	e8 13 ff ff ff       	call   c00161aa <string_ends_with(char const*, char const*)>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	85 c0                	test   eax,eax
c001629c:	75 cc                	jne    c001626a <sysCallOpen(regs*)+0x78>
c001629e:	83 ec 08             	sub    esp,0x8
c00162a1:	68 6a 46 02 c0       	push   0xc002466a
c00162a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162a9:	e8 1e a5 fe ff       	call   c00007cc <strcmp>
c00162ae:	83 c4 10             	add    esp,0x10
c00162b1:	85 c0                	test   eax,eax
c00162b3:	74 b5                	je     c001626a <sysCallOpen(regs*)+0x78>
c00162b5:	83 ec 08             	sub    esp,0x8
c00162b8:	68 69 46 02 c0       	push   0xc0024669
c00162bd:	56                   	push   esi
c00162be:	e8 e7 fe ff ff       	call   c00161aa <string_ends_with(char const*, char const*)>
c00162c3:	83 c4 10             	add    esp,0x10
c00162c6:	85 c0                	test   eax,eax
c00162c8:	75 a0                	jne    c001626a <sysCallOpen(regs*)+0x78>
c00162ca:	83 ec 08             	sub    esp,0x8
c00162cd:	68 73 46 02 c0       	push   0xc0024673
c00162d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162d5:	e8 d0 fe ff ff       	call   c00161aa <string_ends_with(char const*, char const*)>
c00162da:	83 c4 10             	add    esp,0x10
c00162dd:	85 c0                	test   eax,eax
c00162df:	0f 85 e7 00 00 00    	jne    c00163cc <sysCallOpen(regs*)+0x1da>
c00162e5:	83 ec 08             	sub    esp,0x8
c00162e8:	68 78 46 02 c0       	push   0xc0024678
c00162ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162f0:	e8 b5 fe ff ff       	call   c00161aa <string_ends_with(char const*, char const*)>
c00162f5:	83 c4 10             	add    esp,0x10
c00162f8:	85 c0                	test   eax,eax
c00162fa:	0f 85 cc 00 00 00    	jne    c00163cc <sysCallOpen(regs*)+0x1da>
c0016300:	83 ec 08             	sub    esp,0x8
c0016303:	68 74 46 02 c0       	push   0xc0024674
c0016308:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001630b:	e8 bc a4 fe ff       	call   c00007cc <strcmp>
c0016310:	83 c4 10             	add    esp,0x10
c0016313:	85 c0                	test   eax,eax
c0016315:	0f 84 b1 00 00 00    	je     c00163cc <sysCallOpen(regs*)+0x1da>
c001631b:	83 ec 08             	sub    esp,0x8
c001631e:	68 73 46 02 c0       	push   0xc0024673
c0016323:	56                   	push   esi
c0016324:	e8 81 fe ff ff       	call   c00161aa <string_ends_with(char const*, char const*)>
c0016329:	83 c4 10             	add    esp,0x10
c001632c:	85 c0                	test   eax,eax
c001632e:	0f 85 98 00 00 00    	jne    c00163cc <sysCallOpen(regs*)+0x1da>
c0016334:	83 ec 0c             	sub    esp,0xc
c0016337:	68 14 01 00 00       	push   0x114
c001633c:	e8 82 36 ff ff       	call   c00099c3 <malloc>
c0016341:	83 c4 0c             	add    esp,0xc
c0016344:	89 c6                	mov    esi,eax
c0016346:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001634b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001634e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016351:	56                   	push   esi
c0016352:	e8 0f 6d ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0016357:	83 c4 10             	add    esp,0x10
c001635a:	85 f6                	test   esi,esi
c001635c:	74 5b                	je     c00163b9 <sysCallOpen(regs*)+0x1c7>
c001635e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016361:	0f b6 c2             	movzx  eax,dl
c0016364:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016367:	89 d0                	mov    eax,edx
c0016369:	83 e0 01             	and    eax,0x1
c001636c:	f6 c2 02             	test   dl,0x2
c001636f:	74 03                	je     c0016374 <sysCallOpen(regs*)+0x182>
c0016371:	83 c8 02             	or     eax,0x2
c0016374:	f6 c2 04             	test   dl,0x4
c0016377:	74 03                	je     c001637c <sysCallOpen(regs*)+0x18a>
c0016379:	83 c8 04             	or     eax,0x4
c001637c:	f6 c2 08             	test   dl,0x8
c001637f:	74 03                	je     c0016384 <sysCallOpen(regs*)+0x192>
c0016381:	83 c8 0a             	or     eax,0xa
c0016384:	83 e2 10             	and    edx,0x10
c0016387:	74 03                	je     c001638c <sysCallOpen(regs*)+0x19a>
c0016389:	83 c8 12             	or     eax,0x12
c001638c:	83 ec 08             	sub    esp,0x8
c001638f:	50                   	push   eax
c0016390:	56                   	push   esi
c0016391:	e8 34 6d ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c0016396:	83 c4 10             	add    esp,0x10
c0016399:	85 c0                	test   eax,eax
c001639b:	75 1c                	jne    c00163b9 <sysCallOpen(regs*)+0x1c7>
c001639d:	83 ec 0c             	sub    esp,0xc
c00163a0:	56                   	push   esi
c00163a1:	e8 38 4f ff ff       	call   c000b2de <UnixFile::getFileDescriptor()>
c00163a6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00163a9:	83 c4 10             	add    esp,0x10
c00163ac:	89 02                	mov    DWORD PTR [edx],eax
c00163ae:	c1 f8 1f             	sar    eax,0x1f
c00163b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00163b4:	e9 c1 fe ff ff       	jmp    c001627a <sysCallOpen(regs*)+0x88>
c00163b9:	81 c4 04 01 00 00    	add    esp,0x104
c00163bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163c9:	5b                   	pop    ebx
c00163ca:	5e                   	pop    esi
c00163cb:	c3                   	ret    
c00163cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00163cf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00163d5:	e9 99 fe ff ff       	jmp    c0016273 <sysCallOpen(regs*)+0x81>

c00163da <Sys::loadSyscalls()>:
c00163da:	c7 05 a0 6f 02 c0 4b 56 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc001564b
c00163e4:	c7 05 a4 6f 02 c0 40 52 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc0015240
c00163ee:	c7 05 a8 6f 02 c0 31 54 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc0015431
c00163f8:	c7 05 ac 6f 02 c0 81 55 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc0015581
c0016402:	c7 05 b0 6f 02 c0 c9 53 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc00153c9
c001640c:	c7 05 b4 6f 02 c0 77 52 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc0015277
c0016416:	c7 05 b8 6f 02 c0 58 52 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc0015258
c0016420:	c7 05 bc 6f 02 c0 86 54 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015486
c001642a:	c7 05 c4 6f 02 c0 0e 5b 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc0015b0e
c0016434:	c7 05 c0 6f 02 c0 f2 61 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc00161f2
c001643e:	c7 05 c8 6f 02 c0 6e 5b 01 c0 	mov    DWORD PTR ds:0xc0026fc8,0xc0015b6e
c0016448:	c7 05 cc 6f 02 c0 51 58 01 c0 	mov    DWORD PTR ds:0xc0026fcc,0xc0015851
c0016452:	c7 05 d0 6f 02 c0 83 56 01 c0 	mov    DWORD PTR ds:0xc0026fd0,0xc0015683
c001645c:	c7 05 d4 6f 02 c0 88 56 01 c0 	mov    DWORD PTR ds:0xc0026fd4,0xc0015688
c0016466:	c7 05 d8 6f 02 c0 37 5c 01 c0 	mov    DWORD PTR ds:0xc0026fd8,0xc0015c37
c0016470:	c7 05 dc 6f 02 c0 e3 5b 01 c0 	mov    DWORD PTR ds:0xc0026fdc,0xc0015be3
c001647a:	c7 05 e0 6f 02 c0 2a 59 01 c0 	mov    DWORD PTR ds:0xc0026fe0,0xc001592a
c0016484:	c7 05 e4 6f 02 c0 81 59 01 c0 	mov    DWORD PTR ds:0xc0026fe4,0xc0015981
c001648e:	c7 05 e8 6f 02 c0 ed 59 01 c0 	mov    DWORD PTR ds:0xc0026fe8,0xc00159ed
c0016498:	c7 05 ec 6f 02 c0 8d 56 01 c0 	mov    DWORD PTR ds:0xc0026fec,0xc001568d
c00164a2:	c7 05 f0 6f 02 c0 a7 5c 01 c0 	mov    DWORD PTR ds:0xc0026ff0,0xc0015ca7
c00164ac:	c7 05 f4 6f 02 c0 c1 5c 01 c0 	mov    DWORD PTR ds:0xc0026ff4,0xc0015cc1
c00164b6:	c7 05 f8 6f 02 c0 c1 5c 01 c0 	mov    DWORD PTR ds:0xc0026ff8,0xc0015cc1
c00164c0:	c7 05 fc 6f 02 c0 f6 5c 01 c0 	mov    DWORD PTR ds:0xc0026ffc,0xc0015cf6
c00164ca:	c7 05 00 70 02 c0 5a 5d 01 c0 	mov    DWORD PTR ds:0xc0027000,0xc0015d5a
c00164d4:	c7 05 04 70 02 c0 97 56 01 c0 	mov    DWORD PTR ds:0xc0027004,0xc0015697
c00164de:	c7 05 08 70 02 c0 be 5d 01 c0 	mov    DWORD PTR ds:0xc0027008,0xc0015dbe
c00164e8:	c7 05 0c 70 02 c0 0e 58 01 c0 	mov    DWORD PTR ds:0xc002700c,0xc001580e
c00164f2:	c7 05 10 70 02 c0 0a 5e 01 c0 	mov    DWORD PTR ds:0xc0027010,0xc0015e0a
c00164fc:	c7 05 14 70 02 c0 d0 58 01 c0 	mov    DWORD PTR ds:0xc0027014,0xc00158d0
c0016506:	c7 05 18 70 02 c0 8d 5e 01 c0 	mov    DWORD PTR ds:0xc0027018,0xc0015e8d
c0016510:	c7 05 1c 70 02 c0 5f 5a 01 c0 	mov    DWORD PTR ds:0xc002701c,0xc0015a5f
c001651a:	c7 05 20 70 02 c0 b6 5e 01 c0 	mov    DWORD PTR ds:0xc0027020,0xc0015eb6
c0016524:	c7 05 24 70 02 c0 1e 5f 01 c0 	mov    DWORD PTR ds:0xc0027024,0xc0015f1e
c001652e:	c7 05 28 70 02 c0 cb 5f 01 c0 	mov    DWORD PTR ds:0xc0027028,0xc0015fcb
c0016538:	c7 05 2c 70 02 c0 a7 56 01 c0 	mov    DWORD PTR ds:0xc002702c,0xc00156a7
c0016542:	c7 05 30 70 02 c0 11 57 01 c0 	mov    DWORD PTR ds:0xc0027030,0xc0015711
c001654c:	c7 05 34 70 02 c0 5b 57 01 c0 	mov    DWORD PTR ds:0xc0027034,0xc001575b
c0016556:	c7 05 38 70 02 c0 df 60 01 c0 	mov    DWORD PTR ds:0xc0027038,0xc00160df
c0016560:	c7 05 3c 70 02 c0 dc 5c 01 c0 	mov    DWORD PTR ds:0xc002703c,0xc0015cdc
c001656a:	c7 05 40 70 02 c0 b0 57 01 c0 	mov    DWORD PTR ds:0xc0027040,0xc00157b0
c0016574:	c7 05 44 70 02 c0 51 61 01 c0 	mov    DWORD PTR ds:0xc0027044,0xc0016151
c001657e:	c7 05 48 70 02 c0 96 61 01 c0 	mov    DWORD PTR ds:0xc0027048,0xc0016196
c0016588:	c7 05 4c 70 02 c0 21 53 01 c0 	mov    DWORD PTR ds:0xc002704c,0xc0015321
c0016592:	c7 05 50 70 02 c0 a2 54 01 c0 	mov    DWORD PTR ds:0xc0027050,0xc00154a2
c001659c:	c7 05 54 70 02 c0 37 55 01 c0 	mov    DWORD PTR ds:0xc0027054,0xc0015537
c00165a6:	c7 05 58 70 02 c0 0a 52 01 c0 	mov    DWORD PTR ds:0xc0027058,0xc001520a
c00165b0:	c7 05 5c 70 02 c0 e9 55 01 c0 	mov    DWORD PTR ds:0xc002705c,0xc00155e9
c00165ba:	c7 05 60 70 02 c0 83 52 01 c0 	mov    DWORD PTR ds:0xc0027060,0xc0015283
c00165c4:	c7 05 64 70 02 c0 9d 52 01 c0 	mov    DWORD PTR ds:0xc0027064,0xc001529d
c00165ce:	c3                   	ret    

c00165cf <Sys::systemCall(regs*, void*)>:
c00165cf:	53                   	push   ebx
c00165d0:	83 ec 08             	sub    esp,0x8
c00165d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00165da:	83 f8 7f             	cmp    eax,0x7f
c00165dd:	77 16                	ja     c00165f5 <Sys::systemCall(regs*, void*)+0x26>
c00165df:	8b 14 85 a0 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9060]
c00165e6:	85 d2                	test   edx,edx
c00165e8:	74 0b                	je     c00165f5 <Sys::systemCall(regs*, void*)+0x26>
c00165ea:	83 ec 0c             	sub    esp,0xc
c00165ed:	53                   	push   ebx
c00165ee:	ff d2                	call   edx
c00165f0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00165f3:	eb 0d                	jmp    c0016602 <Sys::systemCall(regs*, void*)+0x33>
c00165f5:	52                   	push   edx
c00165f6:	52                   	push   edx
c00165f7:	50                   	push   eax
c00165f8:	68 7d 46 02 c0       	push   0xc002467d
c00165fd:	e8 f9 64 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001660a:	31 d2                	xor    edx,edx
c001660c:	83 c4 08             	add    esp,0x8
c001660f:	5b                   	pop    ebx
c0016610:	c3                   	ret    

c0016611 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016611:	55                   	push   ebp
c0016612:	57                   	push   edi
c0016613:	56                   	push   esi
c0016614:	53                   	push   ebx
c0016615:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001661b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016622:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016629:	85 c0                	test   eax,eax
c001662b:	0f 95 c1             	setne  cl
c001662e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016636:	0f 94 c2             	sete   dl
c0016639:	84 d1                	test   cl,dl
c001663b:	74 23                	je     c0016660 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001663d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016643:	74 1b                	je     c0016660 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016645:	81 c3 00 10 00 00    	add    ebx,0x1000
c001664b:	89 da                	mov    edx,ebx
c001664d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016653:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016659:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016660:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016667:	05 ff 0f 00 00       	add    eax,0xfff
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016673:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016679:	c1 e8 0c             	shr    eax,0xc
c001667c:	89 fe                	mov    esi,edi
c001667e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016682:	c1 ee 0c             	shr    esi,0xc
c0016685:	6a 01                	push   0x1
c0016687:	e8 9d 50 ff ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c001668c:	89 c5                	mov    ebp,eax
c001668e:	58                   	pop    eax
c001668f:	5a                   	pop    edx
c0016690:	56                   	push   esi
c0016691:	68 91 46 02 c0       	push   0xc0024691
c0016696:	e8 60 64 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001669b:	59                   	pop    ecx
c001669c:	58                   	pop    eax
c001669d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00166a1:	68 a3 46 02 c0       	push   0xc00246a3
c00166a6:	e8 50 64 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00166ab:	83 c4 10             	add    esp,0x10
c00166ae:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c00166b4:	0f 86 31 01 00 00    	jbe    c00167eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c00166ba:	c1 e6 0c             	shl    esi,0xc
c00166bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00166c0:	8d 04 1e             	lea    eax,[esi+ebx*1]
c00166c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166c7:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00166ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00166d1:	01 df                	add    edi,ebx
c00166d3:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c00166d6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00166da:	0f 84 08 01 00 00    	je     c00167e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c00166e0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00166e6:	76 05                	jbe    c00166ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c00166e8:	bf 00 10 00 00       	mov    edi,0x1000
c00166ed:	83 ec 0c             	sub    esp,0xc
c00166f0:	31 d2                	xor    edx,edx
c00166f2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00166f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00166fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00166ff:	50                   	push   eax
c0016700:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016704:	56                   	push   esi
c0016705:	52                   	push   edx
c0016706:	57                   	push   edi
c0016707:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001670e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016711:	83 c4 20             	add    esp,0x20
c0016714:	85 c0                	test   eax,eax
c0016716:	74 0a                	je     c0016722 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016718:	53                   	push   ebx
c0016719:	53                   	push   ebx
c001671a:	50                   	push   eax
c001671b:	68 b5 46 02 c0       	push   0xc00246b5
c0016720:	eb 0f                	jmp    c0016731 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016722:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016726:	74 20                	je     c0016748 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016728:	51                   	push   ecx
c0016729:	51                   	push   ecx
c001672a:	6a 00                	push   0x0
c001672c:	68 e0 46 02 c0       	push   0xc00246e0
c0016731:	e8 c5 63 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0016736:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016739:	e8 1b 53 ff ff       	call   c000ba59 <Virt::freeKernelVirtualPages(unsigned long)>
c001673e:	83 c4 10             	add    esp,0x10
c0016741:	31 c0                	xor    eax,eax
c0016743:	e9 68 01 00 00       	jmp    c00168b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016748:	fa                   	cli    
c0016749:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c001674f:	e8 a5 36 ff ff       	call   c0009df9 <Phys::allocatePage()>
c0016754:	6a 07                	push   0x7
c0016756:	89 c7                	mov    edi,eax
c0016758:	55                   	push   ebp
c0016759:	50                   	push   eax
c001675a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001675f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016762:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016768:	e8 63 56 ff ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001676d:	83 c4 0c             	add    esp,0xc
c0016770:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016777:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001677d:	6a 00                	push   0x0
c001677f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016784:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016787:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001678d:	e8 98 54 ff ff       	call   c000bc2a <VAS::mapOtherVASIn(bool, VAS*)>
c0016792:	58                   	pop    eax
c0016793:	5a                   	pop    edx
c0016794:	68 07 0c 00 00       	push   0xc07
c0016799:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001679d:	57                   	push   edi
c001679e:	89 ef                	mov    edi,ebp
c00167a0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00167a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167ad:	6a 00                	push   0x0
c00167af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167bd:	e8 ca 59 ff ff       	call   c000c18c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167c2:	b9 00 10 00 00       	mov    ecx,0x1000
c00167c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167c9:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00167ce:	83 c4 20             	add    esp,0x20
c00167d1:	48                   	dec    eax
c00167d2:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00167d7:	85 c0                	test   eax,eax
c00167d9:	75 01                	jne    c00167dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c00167db:	fb                   	sti    
c00167dc:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c00167e3:	e9 df fe ff ff       	jmp    c00166c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c00167e8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00167eb:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c00167f3:	0f 86 a9 00 00 00    	jbe    c00168a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00167f9:	fa                   	cli    
c00167fa:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0016800:	51                   	push   ecx
c0016801:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016808:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001680e:	6a 00                	push   0x0
c0016810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016815:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016818:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001681e:	e8 07 54 ff ff       	call   c000bc2a <VAS::mapOtherVASIn(bool, VAS*)>
c0016823:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016827:	c1 e6 0c             	shl    esi,0xc
c001682a:	01 de                	add    esi,ebx
c001682c:	83 c4 10             	add    esp,0x10
c001682f:	39 de                	cmp    esi,ebx
c0016831:	74 61                	je     c0016894 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016833:	e8 c1 35 ff ff       	call   c0009df9 <Phys::allocatePage()>
c0016838:	6a 07                	push   0x7
c001683a:	89 c7                	mov    edi,eax
c001683c:	55                   	push   ebp
c001683d:	50                   	push   eax
c001683e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016843:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016846:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001684c:	e8 7f 55 ff ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016851:	58                   	pop    eax
c0016852:	5a                   	pop    edx
c0016853:	68 07 0c 00 00       	push   0xc07
c0016858:	53                   	push   ebx
c0016859:	81 c3 00 10 00 00    	add    ebx,0x1000
c001685f:	57                   	push   edi
c0016860:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016867:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001686d:	6a 00                	push   0x0
c001686f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016874:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016877:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001687d:	e8 0a 59 ff ff       	call   c000c18c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016882:	83 c4 1c             	add    esp,0x1c
c0016885:	68 00 10 00 00       	push   0x1000
c001688a:	6a 00                	push   0x0
c001688c:	55                   	push   ebp
c001688d:	e8 f2 9d fe ff       	call   c0000684 <memset>
c0016892:	eb 98                	jmp    c001682c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016894:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0016899:	48                   	dec    eax
c001689a:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001689f:	75 01                	jne    c00168a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00168a1:	fb                   	sti    
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	55                   	push   ebp
c00168a6:	e8 ae 51 ff ff       	call   c000ba59 <Virt::freeKernelVirtualPages(unsigned long)>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	b0 01                	mov    al,0x1
c00168b0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00168b6:	5b                   	pop    ebx
c00168b7:	5e                   	pop    esi
c00168b8:	5f                   	pop    edi
c00168b9:	5d                   	pop    ebp
c00168ba:	c3                   	ret    

c00168bb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00168bb:	55                   	push   ebp
c00168bc:	57                   	push   edi
c00168bd:	56                   	push   esi
c00168be:	53                   	push   ebx
c00168bf:	83 ec 48             	sub    esp,0x48
c00168c2:	68 14 01 00 00       	push   0x114
c00168c7:	e8 f7 30 ff ff       	call   c00099c3 <malloc>
c00168cc:	83 c4 0c             	add    esp,0xc
c00168cf:	89 c6                	mov    esi,eax
c00168d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00168d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00168d9:	50                   	push   eax
c00168da:	e8 87 67 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c00168df:	58                   	pop    eax
c00168e0:	5a                   	pop    edx
c00168e1:	6a 01                	push   0x1
c00168e3:	56                   	push   esi
c00168e4:	e8 e1 67 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	85 c0                	test   eax,eax
c00168ee:	0f 85 47 01 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	6a 34                	push   0x34
c0016901:	e8 bd 30 ff ff       	call   c00099c3 <malloc>
c0016906:	89 c3                	mov    ebx,eax
c0016908:	58                   	pop    eax
c0016909:	8b 06                	mov    eax,DWORD PTR [esi]
c001690b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001690f:	57                   	push   edi
c0016910:	53                   	push   ebx
c0016911:	6a 00                	push   0x0
c0016913:	6a 34                	push   0x34
c0016915:	56                   	push   esi
c0016916:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016919:	83 c4 20             	add    esp,0x20
c001691c:	85 c0                	test   eax,eax
c001691e:	0f 85 17 01 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016924:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001692a:	0f 85 0b 01 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016930:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016933:	85 c0                	test   eax,eax
c0016935:	0f 84 00 01 00 00    	je     c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001693b:	31 d2                	xor    edx,edx
c001693d:	55                   	push   ebp
c001693e:	52                   	push   edx
c001693f:	50                   	push   eax
c0016940:	56                   	push   esi
c0016941:	e8 42 68 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016946:	83 c4 10             	add    esp,0x10
c0016949:	85 c0                	test   eax,eax
c001694b:	0f 85 ea 00 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016951:	83 ec 0c             	sub    esp,0xc
c0016954:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016957:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001695b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001695f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016963:	0f af c2             	imul   eax,edx
c0016966:	50                   	push   eax
c0016967:	e8 57 30 ff ff       	call   c00099c3 <malloc>
c001696c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001696e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016972:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016975:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016979:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001697d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016981:	0f af c2             	imul   eax,edx
c0016984:	99                   	cdq    
c0016985:	52                   	push   edx
c0016986:	50                   	push   eax
c0016987:	56                   	push   esi
c0016988:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001698b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001698e:	83 c4 20             	add    esp,0x20
c0016991:	85 c0                	test   eax,eax
c0016993:	0f 84 a2 00 00 00    	je     c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016999:	31 d2                	xor    edx,edx
c001699b:	51                   	push   ecx
c001699c:	52                   	push   edx
c001699d:	50                   	push   eax
c001699e:	56                   	push   esi
c001699f:	e8 e4 67 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	85 c0                	test   eax,eax
c00169a9:	0f 85 8c 00 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169af:	83 ec 0c             	sub    esp,0xc
c00169b2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00169b6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00169ba:	31 ed                	xor    ebp,ebp
c00169bc:	0f af c2             	imul   eax,edx
c00169bf:	50                   	push   eax
c00169c0:	e8 fe 2f ff ff       	call   c00099c3 <malloc>
c00169c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00169cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169d2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00169d6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00169da:	0f af c2             	imul   eax,edx
c00169dd:	99                   	cdq    
c00169de:	52                   	push   edx
c00169df:	50                   	push   eax
c00169e0:	56                   	push   esi
c00169e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169e4:	83 c4 20             	add    esp,0x20
c00169e7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00169ef:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00169f3:	0f 86 80 00 00 00    	jbe    c0016a79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00169f9:	0f b7 fd             	movzx  edi,bp
c00169fc:	c1 e7 05             	shl    edi,0x5
c00169ff:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016a03:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016a06:	75 6b                	jne    c0016a73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a08:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016a0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a0f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016a12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a16:	52                   	push   edx
c0016a17:	31 d2                	xor    edx,edx
c0016a19:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016a1c:	52                   	push   edx
c0016a1d:	50                   	push   eax
c0016a1e:	56                   	push   esi
c0016a1f:	e8 64 67 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016a24:	83 c4 10             	add    esp,0x10
c0016a27:	85 c0                	test   eax,eax
c0016a29:	74 17                	je     c0016a42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016a2b:	83 ec 0c             	sub    esp,0xc
c0016a2e:	68 0c 47 02 c0       	push   0xc002470c
c0016a33:	e8 c3 60 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	31 c0                	xor    eax,eax
c0016a3d:	e9 87 00 00 00       	jmp    c0016ac9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016a42:	83 ec 0c             	sub    esp,0xc
c0016a45:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016a48:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016a4b:	50                   	push   eax
c0016a4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a54:	56                   	push   esi
c0016a55:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016a59:	e8 b3 fb ff ff       	call   c0016611 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a62:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016a66:	83 c4 20             	add    esp,0x20
c0016a69:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016a6d:	73 04                	jae    c0016a73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a73:	45                   	inc    ebp
c0016a74:	e9 76 ff ff ff       	jmp    c00169ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016a79:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016a7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a85:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016a8b:	83 ec 0c             	sub    esp,0xc
c0016a8e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016a94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a99:	05 00 10 00 00       	add    eax,0x1000
c0016a9e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aa5:	e8 29 2f ff ff       	call   c00099d3 <free>
c0016aaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016aad:	e8 21 2f ff ff       	call   c00099d3 <free>
c0016ab2:	58                   	pop    eax
c0016ab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ab7:	e8 17 2f ff ff       	call   c00099d3 <free>
c0016abc:	89 34 24             	mov    DWORD PTR [esp],esi
c0016abf:	e8 64 66 ff ff       	call   c000d128 <File::close()>
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	b0 01                	mov    al,0x1
c0016ac9:	83 c4 3c             	add    esp,0x3c
c0016acc:	5b                   	pop    ebx
c0016acd:	5e                   	pop    esi
c0016ace:	5f                   	pop    edi
c0016acf:	5d                   	pop    ebp
c0016ad0:	c3                   	ret    

c0016ad1 <Thr::runtimeReferenceHelper()>:
c0016ad1:	83 ec 18             	sub    esp,0x18
c0016ad4:	68 14 47 02 c0       	push   0xc0024714
c0016ad9:	e8 1d 60 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0016ade:	fa                   	cli    
c0016adf:	83 c4 10             	add    esp,0x10
c0016ae2:	eb fe                	jmp    c0016ae2 <Thr::runtimeReferenceHelper()+0x11>

c0016ae4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016ae4:	57                   	push   edi
c0016ae5:	56                   	push   esi
c0016ae6:	53                   	push   ebx
c0016ae7:	31 db                	xor    ebx,ebx
c0016ae9:	39 1d 40 79 02 c0    	cmp    DWORD PTR ds:0xc0027940,ebx
c0016aef:	7e 3c                	jle    c0016b2d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016af1:	8b 34 9d c0 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8740]
c0016af8:	31 ff                	xor    edi,edi
c0016afa:	39 3c 9d c0 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8840],edi
c0016b01:	7e 27                	jle    c0016b2a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016b03:	50                   	push   eax
c0016b04:	50                   	push   eax
c0016b05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b09:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b0b:	03 04 9d 40 78 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd87c0]
c0016b12:	50                   	push   eax
c0016b13:	e8 b4 9c fe ff       	call   c00007cc <strcmp>
c0016b18:	83 c4 10             	add    esp,0x10
c0016b1b:	85 c0                	test   eax,eax
c0016b1d:	75 05                	jne    c0016b24 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016b1f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016b22:	eb 0b                	jmp    c0016b2f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016b24:	83 c6 10             	add    esi,0x10
c0016b27:	47                   	inc    edi
c0016b28:	eb d0                	jmp    c0016afa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016b2a:	43                   	inc    ebx
c0016b2b:	eb bc                	jmp    c0016ae9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016b2d:	31 c0                	xor    eax,eax
c0016b2f:	5b                   	pop    ebx
c0016b30:	5e                   	pop    esi
c0016b31:	5f                   	pop    edi
c0016b32:	c3                   	ret    

c0016b33 <Thr::loadKernelSymbolTable(char const*)>:
c0016b33:	55                   	push   ebp
c0016b34:	57                   	push   edi
c0016b35:	56                   	push   esi
c0016b36:	53                   	push   ebx
c0016b37:	83 ec 68             	sub    esp,0x68
c0016b3a:	8b 35 90 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027990
c0016b40:	68 14 01 00 00       	push   0x114
c0016b45:	e8 79 2e ff ff       	call   c00099c3 <malloc>
c0016b4a:	83 c4 0c             	add    esp,0xc
c0016b4d:	89 c3                	mov    ebx,eax
c0016b4f:	56                   	push   esi
c0016b50:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016b54:	50                   	push   eax
c0016b55:	e8 0c 65 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0016b5a:	5e                   	pop    esi
c0016b5b:	5f                   	pop    edi
c0016b5c:	6a 01                	push   0x1
c0016b5e:	53                   	push   ebx
c0016b5f:	e8 66 65 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c0016b64:	83 c4 10             	add    esp,0x10
c0016b67:	85 c0                	test   eax,eax
c0016b69:	74 0a                	je     c0016b75 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016b6b:	83 ec 0c             	sub    esp,0xc
c0016b6e:	68 36 47 02 c0       	push   0xc0024736
c0016b73:	eb 34                	jmp    c0016ba9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016b75:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016b7d:	83 ec 0c             	sub    esp,0xc
c0016b80:	6a 34                	push   0x34
c0016b82:	e8 3c 2e ff ff       	call   c00099c3 <malloc>
c0016b87:	59                   	pop    ecx
c0016b88:	89 c7                	mov    edi,eax
c0016b8a:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b90:	56                   	push   esi
c0016b91:	57                   	push   edi
c0016b92:	6a 00                	push   0x0
c0016b94:	6a 34                	push   0x34
c0016b96:	53                   	push   ebx
c0016b97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b9a:	83 c4 20             	add    esp,0x20
c0016b9d:	85 c0                	test   eax,eax
c0016b9f:	74 17                	je     c0016bb8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016ba1:	83 ec 0c             	sub    esp,0xc
c0016ba4:	68 4d 47 02 c0       	push   0xc002474d
c0016ba9:	e8 0f d8 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0016bae:	83 c4 10             	add    esp,0x10
c0016bb1:	31 c0                	xor    eax,eax
c0016bb3:	e9 31 02 00 00       	jmp    c0016de9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016bb8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016bbe:	75 e1                	jne    c0016ba1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016bc0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016bc3:	85 c0                	test   eax,eax
c0016bc5:	74 da                	je     c0016ba1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016bc7:	52                   	push   edx
c0016bc8:	31 d2                	xor    edx,edx
c0016bca:	52                   	push   edx
c0016bcb:	50                   	push   eax
c0016bcc:	53                   	push   ebx
c0016bcd:	e8 b6 65 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016bd2:	83 c4 10             	add    esp,0x10
c0016bd5:	85 c0                	test   eax,eax
c0016bd7:	75 c8                	jne    c0016ba1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016bd9:	83 ec 0c             	sub    esp,0xc
c0016bdc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016be0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016be4:	31 ed                	xor    ebp,ebp
c0016be6:	0f af c2             	imul   eax,edx
c0016be9:	50                   	push   eax
c0016bea:	e8 d4 2d ff ff       	call   c00099c3 <malloc>
c0016bef:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016bf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bf5:	89 34 24             	mov    DWORD PTR [esp],esi
c0016bf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bfc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c00:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c04:	0f af c2             	imul   eax,edx
c0016c07:	99                   	cdq    
c0016c08:	52                   	push   edx
c0016c09:	50                   	push   eax
c0016c0a:	53                   	push   ebx
c0016c0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c0e:	83 c4 20             	add    esp,0x20
c0016c11:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c19:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c31:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016c35:	0f 86 aa 00 00 00    	jbe    c0016ce5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016c3b:	0f b7 f5             	movzx  esi,bp
c0016c3e:	6b f6 28             	imul   esi,esi,0x28
c0016c41:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016c45:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016c48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c4c:	50                   	push   eax
c0016c4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c51:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016c55:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c57:	6b c0 28             	imul   eax,eax,0x28
c0016c5a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016c5e:	89 d0                	mov    eax,edx
c0016c60:	31 d2                	xor    edx,edx
c0016c62:	52                   	push   edx
c0016c63:	50                   	push   eax
c0016c64:	53                   	push   ebx
c0016c65:	e8 1e 65 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016c6a:	83 c4 0c             	add    esp,0xc
c0016c6d:	6a 20                	push   0x20
c0016c6f:	6a 00                	push   0x0
c0016c71:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c75:	52                   	push   edx
c0016c76:	e8 09 9a fe ff       	call   c0000684 <memset>
c0016c7b:	58                   	pop    eax
c0016c7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c7e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016c82:	51                   	push   ecx
c0016c83:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016c87:	52                   	push   edx
c0016c88:	6a 00                	push   0x0
c0016c8a:	6a 1f                	push   0x1f
c0016c8c:	53                   	push   ebx
c0016c8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c90:	83 c4 18             	add    esp,0x18
c0016c93:	68 64 47 02 c0       	push   0xc0024764
c0016c98:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c9c:	52                   	push   edx
c0016c9d:	e8 2a 9b fe ff       	call   c00007cc <strcmp>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	85 c0                	test   eax,eax
c0016ca7:	75 0f                	jne    c0016cb8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016ca9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016cac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016cb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cb8:	50                   	push   eax
c0016cb9:	50                   	push   eax
c0016cba:	68 6c 47 02 c0       	push   0xc002476c
c0016cbf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016cc3:	50                   	push   eax
c0016cc4:	e8 03 9b fe ff       	call   c00007cc <strcmp>
c0016cc9:	83 c4 10             	add    esp,0x10
c0016ccc:	85 c0                	test   eax,eax
c0016cce:	75 0f                	jne    c0016cdf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016cd0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016cd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cdf:	45                   	inc    ebp
c0016ce0:	e9 4c ff ff ff       	jmp    c0016c31 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016ce5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016cea:	75 10                	jne    c0016cfc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016cec:	83 ec 0c             	sub    esp,0xc
c0016cef:	68 74 47 02 c0       	push   0xc0024774
c0016cf4:	e8 c4 d6 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016d01:	75 10                	jne    c0016d13 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016d03:	83 ec 0c             	sub    esp,0xc
c0016d06:	68 74 47 02 c0       	push   0xc0024774
c0016d0b:	e8 ad d6 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0016d10:	83 c4 10             	add    esp,0x10
c0016d13:	31 d2                	xor    edx,edx
c0016d15:	50                   	push   eax
c0016d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1a:	52                   	push   edx
c0016d1b:	50                   	push   eax
c0016d1c:	53                   	push   ebx
c0016d1d:	e8 66 64 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016d22:	5a                   	pop    edx
c0016d23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d27:	e8 97 2c ff ff       	call   c00099c3 <malloc>
c0016d2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d34:	31 c9                	xor    ecx,ecx
c0016d36:	5e                   	pop    esi
c0016d37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d39:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016d3d:	55                   	push   ebp
c0016d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d42:	51                   	push   ecx
c0016d43:	52                   	push   edx
c0016d44:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016d48:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016d4c:	53                   	push   ebx
c0016d4d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d50:	83 c4 14             	add    esp,0x14
c0016d53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d57:	e8 67 2c ff ff       	call   c00099c3 <malloc>
c0016d5c:	89 c6                	mov    esi,eax
c0016d5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d63:	56                   	push   esi
c0016d64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016d68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d6c:	51                   	push   ecx
c0016d6d:	52                   	push   edx
c0016d6e:	53                   	push   ebx
c0016d6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d76:	8b 15 40 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027940
c0016d7c:	83 c4 1c             	add    esp,0x1c
c0016d7f:	c1 e8 04             	shr    eax,0x4
c0016d82:	89 04 95 c0 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8840],eax
c0016d89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d8d:	31 d2                	xor    edx,edx
c0016d8f:	52                   	push   edx
c0016d90:	50                   	push   eax
c0016d91:	53                   	push   ebx
c0016d92:	e8 f1 63 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016d97:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016d99:	31 d2                	xor    edx,edx
c0016d9b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d9e:	56                   	push   esi
c0016d9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016da3:	52                   	push   edx
c0016da4:	50                   	push   eax
c0016da5:	53                   	push   ebx
c0016da6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016da9:	83 c4 14             	add    esp,0x14
c0016dac:	53                   	push   ebx
c0016dad:	e8 76 63 ff ff       	call   c000d128 <File::close()>
c0016db2:	5d                   	pop    ebp
c0016db3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016db7:	e8 17 2c ff ff       	call   c00099d3 <free>
c0016dbc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016dbf:	e8 0f 2c ff ff       	call   c00099d3 <free>
c0016dc4:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c0016dc9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016dcd:	8d 50 01             	lea    edx,[eax+0x1]
c0016dd0:	89 0c 85 c0 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8740],ecx
c0016dd7:	89 34 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],esi
c0016dde:	89 15 40 79 02 c0    	mov    DWORD PTR ds:0xc0027940,edx
c0016de4:	83 c4 10             	add    esp,0x10
c0016de7:	b0 01                	mov    al,0x1
c0016de9:	83 c4 5c             	add    esp,0x5c
c0016dec:	5b                   	pop    ebx
c0016ded:	5e                   	pop    esi
c0016dee:	5f                   	pop    edi
c0016def:	5d                   	pop    ebp
c0016df0:	c3                   	ret    

c0016df1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016df1:	55                   	push   ebp
c0016df2:	57                   	push   edi
c0016df3:	56                   	push   esi
c0016df4:	53                   	push   ebx
c0016df5:	81 ec 68 03 00 00    	sub    esp,0x368
c0016dfb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016e02:	8b 1d 90 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027990
c0016e08:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016e0c:	68 14 01 00 00       	push   0x114
c0016e11:	e8 ad 2b ff ff       	call   c00099c3 <malloc>
c0016e16:	83 c4 0c             	add    esp,0xc
c0016e19:	89 c5                	mov    ebp,eax
c0016e1b:	53                   	push   ebx
c0016e1c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016e23:	50                   	push   eax
c0016e24:	e8 3d 62 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0016e29:	5e                   	pop    esi
c0016e2a:	5f                   	pop    edi
c0016e2b:	6a 01                	push   0x1
c0016e2d:	55                   	push   ebp
c0016e2e:	e8 97 62 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	85 c0                	test   eax,eax
c0016e38:	0f 85 a7 06 00 00    	jne    c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e3e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016e46:	83 ec 0c             	sub    esp,0xc
c0016e49:	6a 34                	push   0x34
c0016e4b:	e8 73 2b ff ff       	call   c00099c3 <malloc>
c0016e50:	5b                   	pop    ebx
c0016e51:	89 c7                	mov    edi,eax
c0016e53:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016e57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e5a:	53                   	push   ebx
c0016e5b:	57                   	push   edi
c0016e5c:	6a 00                	push   0x0
c0016e5e:	6a 34                	push   0x34
c0016e60:	55                   	push   ebp
c0016e61:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e64:	83 c4 20             	add    esp,0x20
c0016e67:	85 c0                	test   eax,eax
c0016e69:	0f 85 76 06 00 00    	jne    c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e6f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016e75:	0f 85 6a 06 00 00    	jne    c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e7b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016e7e:	85 c0                	test   eax,eax
c0016e80:	0f 84 5f 06 00 00    	je     c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e86:	31 d2                	xor    edx,edx
c0016e88:	51                   	push   ecx
c0016e89:	52                   	push   edx
c0016e8a:	50                   	push   eax
c0016e8b:	55                   	push   ebp
c0016e8c:	e8 f7 62 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016e91:	83 c4 10             	add    esp,0x10
c0016e94:	85 c0                	test   eax,eax
c0016e96:	0f 85 49 06 00 00    	jne    c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016ea2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ea6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016eaa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016eae:	0f af c2             	imul   eax,edx
c0016eb1:	50                   	push   eax
c0016eb2:	e8 0c 2b ff ff       	call   c00099c3 <malloc>
c0016eb7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016eba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ebe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ec1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ec5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ec9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ecd:	0f af c2             	imul   eax,edx
c0016ed0:	99                   	cdq    
c0016ed1:	52                   	push   edx
c0016ed2:	50                   	push   eax
c0016ed3:	55                   	push   ebp
c0016ed4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ed7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016eda:	83 c4 20             	add    esp,0x20
c0016edd:	85 c0                	test   eax,eax
c0016edf:	0f 84 00 06 00 00    	je     c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ee5:	52                   	push   edx
c0016ee6:	31 d2                	xor    edx,edx
c0016ee8:	52                   	push   edx
c0016ee9:	50                   	push   eax
c0016eea:	55                   	push   ebp
c0016eeb:	e8 98 62 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016ef0:	83 c4 10             	add    esp,0x10
c0016ef3:	85 c0                	test   eax,eax
c0016ef5:	0f 85 ea 05 00 00    	jne    c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016efb:	83 ec 0c             	sub    esp,0xc
c0016efe:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f02:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f06:	31 f6                	xor    esi,esi
c0016f08:	0f af c2             	imul   eax,edx
c0016f0b:	50                   	push   eax
c0016f0c:	e8 b2 2a ff ff       	call   c00099c3 <malloc>
c0016f11:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f1f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f23:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f27:	0f af c2             	imul   eax,edx
c0016f2a:	99                   	cdq    
c0016f2b:	52                   	push   edx
c0016f2c:	50                   	push   eax
c0016f2d:	55                   	push   ebp
c0016f2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f31:	83 c4 20             	add    esp,0x20
c0016f34:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016f38:	0f 86 8a 00 00 00    	jbe    c0016fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016f3e:	0f b7 de             	movzx  ebx,si
c0016f41:	c1 e3 05             	shl    ebx,0x5
c0016f44:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016f48:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016f4b:	75 75                	jne    c0016fc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016f4d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f50:	31 d2                	xor    edx,edx
c0016f52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f5d:	50                   	push   eax
c0016f5e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016f61:	52                   	push   edx
c0016f62:	50                   	push   eax
c0016f63:	55                   	push   ebp
c0016f64:	e8 1f 62 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0016f69:	83 c4 10             	add    esp,0x10
c0016f6c:	85 c0                	test   eax,eax
c0016f6e:	0f 85 71 05 00 00    	jne    c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f74:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016f7b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f7e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016f82:	31 d2                	xor    edx,edx
c0016f84:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016f88:	83 ec 0c             	sub    esp,0xc
c0016f8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f8f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f96:	50                   	push   eax
c0016f97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9f:	52                   	push   edx
c0016fa0:	50                   	push   eax
c0016fa1:	55                   	push   ebp
c0016fa2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fa5:	83 c4 1c             	add    esp,0x1c
c0016fa8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016fab:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016fae:	50                   	push   eax
c0016faf:	6a 00                	push   0x0
c0016fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016fb9:	50                   	push   eax
c0016fba:	e8 c5 96 fe ff       	call   c0000684 <memset>
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	46                   	inc    esi
c0016fc3:	e9 6c ff ff ff       	jmp    c0016f34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016fc8:	53                   	push   ebx
c0016fc9:	31 db                	xor    ebx,ebx
c0016fcb:	68 00 01 00 00       	push   0x100
c0016fd0:	6a 00                	push   0x0
c0016fd2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016fd6:	50                   	push   eax
c0016fd7:	e8 a8 96 fe ff       	call   c0000684 <memset>
c0016fdc:	83 c4 0c             	add    esp,0xc
c0016fdf:	68 00 01 00 00       	push   0x100
c0016fe4:	6a 00                	push   0x0
c0016fe6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016fed:	50                   	push   eax
c0016fee:	e8 91 96 fe ff       	call   c0000684 <memset>
c0016ff3:	83 c4 10             	add    esp,0x10
c0016ff6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ffe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017006:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001700e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017016:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001701e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017022:	0f 86 30 01 00 00    	jbe    c0017158 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017028:	0f b7 f3             	movzx  esi,bx
c001702b:	6b f6 28             	imul   esi,esi,0x28
c001702e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017032:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017035:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017039:	52                   	push   edx
c001703a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001703e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017042:	8b 06                	mov    eax,DWORD PTR [esi]
c0017044:	6b d2 28             	imul   edx,edx,0x28
c0017047:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001704b:	31 d2                	xor    edx,edx
c001704d:	52                   	push   edx
c001704e:	50                   	push   eax
c001704f:	55                   	push   ebp
c0017050:	e8 33 61 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0017055:	83 c4 0c             	add    esp,0xc
c0017058:	6a 20                	push   0x20
c001705a:	6a 00                	push   0x0
c001705c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017063:	51                   	push   ecx
c0017064:	e8 1b 96 fe ff       	call   c0000684 <memset>
c0017069:	59                   	pop    ecx
c001706a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001706d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017071:	52                   	push   edx
c0017072:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017079:	51                   	push   ecx
c001707a:	6a 00                	push   0x0
c001707c:	6a 1f                	push   0x1f
c001707e:	55                   	push   ebp
c001707f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017082:	83 c4 1c             	add    esp,0x1c
c0017085:	6a 09                	push   0x9
c0017087:	68 8e 47 02 c0       	push   0xc002478e
c001708c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017093:	51                   	push   ecx
c0017094:	e8 e7 94 fe ff       	call   c0000580 <memcmp>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	85 c0                	test   eax,eax
c001709e:	75 21                	jne    c00170c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00170a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170a8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00170ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00170b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170b3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00170ba:	89 d0                	mov    eax,edx
c00170bc:	40                   	inc    eax
c00170bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170c1:	50                   	push   eax
c00170c2:	6a 09                	push   0x9
c00170c4:	68 98 47 02 c0       	push   0xc0024798
c00170c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170d0:	50                   	push   eax
c00170d1:	e8 aa 94 fe ff       	call   c0000580 <memcmp>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	85 c0                	test   eax,eax
c00170db:	75 21                	jne    c00170fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00170dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170e5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00170e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00170ed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170f0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00170f7:	89 d0                	mov    eax,edx
c00170f9:	40                   	inc    eax
c00170fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170fe:	50                   	push   eax
c00170ff:	50                   	push   eax
c0017100:	68 64 47 02 c0       	push   0xc0024764
c0017105:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001710c:	50                   	push   eax
c001710d:	e8 ba 96 fe ff       	call   c00007cc <strcmp>
c0017112:	83 c4 10             	add    esp,0x10
c0017115:	85 c0                	test   eax,eax
c0017117:	75 0f                	jne    c0017128 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017119:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001711c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017128:	50                   	push   eax
c0017129:	50                   	push   eax
c001712a:	68 6c 47 02 c0       	push   0xc002476c
c001712f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017136:	50                   	push   eax
c0017137:	e8 90 96 fe ff       	call   c00007cc <strcmp>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	85 c0                	test   eax,eax
c0017141:	75 0f                	jne    c0017152 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017143:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017146:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001714a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001714e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017152:	43                   	inc    ebx
c0017153:	e9 c6 fe ff ff       	jmp    c001701e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017158:	31 d2                	xor    edx,edx
c001715a:	50                   	push   eax
c001715b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001715f:	52                   	push   edx
c0017160:	50                   	push   eax
c0017161:	55                   	push   ebp
c0017162:	e8 21 60 ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0017167:	58                   	pop    eax
c0017168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001716c:	e8 52 28 ff ff       	call   c00099c3 <malloc>
c0017171:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017174:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017178:	31 d2                	xor    edx,edx
c001717a:	58                   	pop    eax
c001717b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001717f:	53                   	push   ebx
c0017180:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017188:	52                   	push   edx
c0017189:	50                   	push   eax
c001718a:	55                   	push   ebp
c001718b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001718e:	83 c4 14             	add    esp,0x14
c0017191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017195:	e8 29 28 ff ff       	call   c00099c3 <malloc>
c001719a:	31 d2                	xor    edx,edx
c001719c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00171a0:	83 c4 0c             	add    esp,0xc
c00171a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171a7:	52                   	push   edx
c00171a8:	50                   	push   eax
c00171a9:	55                   	push   ebp
c00171aa:	e8 d9 5f ff ff       	call   c000d188 <File::seek(unsigned long long)>
c00171af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00171b2:	31 d2                	xor    edx,edx
c00171b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00171b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00171bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171bf:	52                   	push   edx
c00171c0:	50                   	push   eax
c00171c1:	55                   	push   ebp
c00171c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171c5:	83 c4 20             	add    esp,0x20
c00171c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00171d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00171d4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00171d8:	0f 84 0b 03 00 00    	je     c00174e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00171de:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00171e5:	31 d2                	xor    edx,edx
c00171e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171eb:	c1 e8 03             	shr    eax,0x3
c00171ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00171f2:	51                   	push   ecx
c00171f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171f7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00171fb:	52                   	push   edx
c00171fc:	50                   	push   eax
c00171fd:	55                   	push   ebp
c00171fe:	e8 85 5f ff ff       	call   c000d188 <File::seek(unsigned long long)>
c0017203:	5b                   	pop    ebx
c0017204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017208:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001720f:	e8 af 27 ff ff       	call   c00099c3 <malloc>
c0017214:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017217:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001721b:	31 d2                	xor    edx,edx
c001721d:	5e                   	pop    esi
c001721e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017222:	50                   	push   eax
c0017223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017227:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001722b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017232:	52                   	push   edx
c0017233:	50                   	push   eax
c0017234:	55                   	push   ebp
c0017235:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017238:	83 c4 20             	add    esp,0x20
c001723b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017243:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017247:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001724b:	0f 8d 7c 02 00 00    	jge    c00174cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017251:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017255:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017259:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001725e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017261:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017265:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017269:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001726d:	89 d8                	mov    eax,ebx
c001726f:	c1 e8 08             	shr    eax,0x8
c0017272:	89 c6                	mov    esi,eax
c0017274:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017278:	c1 e6 04             	shl    esi,0x4
c001727b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001727f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017282:	85 d2                	test   edx,edx
c0017284:	0f 85 bf 00 00 00    	jne    c0017349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001728a:	83 ec 0c             	sub    esp,0xc
c001728d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017291:	03 06                	add    eax,DWORD PTR [esi]
c0017293:	50                   	push   eax
c0017294:	e8 4b f8 ff ff       	call   c0016ae4 <Thr::getAddressOfKernelSymbol(char const*)>
c0017299:	83 c4 10             	add    esp,0x10
c001729c:	89 c2                	mov    edx,eax
c001729e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00172a3:	85 c0                	test   eax,eax
c00172a5:	0f 85 9e 00 00 00    	jne    c0017349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00172ab:	83 ec 0c             	sub    esp,0xc
c00172ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00172b2:	03 06                	add    eax,DWORD PTR [esi]
c00172b4:	50                   	push   eax
c00172b5:	e8 56 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c00172ba:	83 c4 10             	add    esp,0x10
c00172bd:	89 c2                	mov    edx,eax
c00172bf:	85 c0                	test   eax,eax
c00172c1:	0f 85 82 00 00 00    	jne    c0017349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00172c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172cb:	50                   	push   eax
c00172cc:	50                   	push   eax
c00172cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172d1:	03 06                	add    eax,DWORD PTR [esi]
c00172d3:	50                   	push   eax
c00172d4:	68 a2 47 02 c0       	push   0xc00247a2
c00172d9:	e8 1d 58 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00172de:	58                   	pop    eax
c00172df:	5a                   	pop    edx
c00172e0:	68 bc 47 02 c0       	push   0xc00247bc
c00172e5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172ec:	50                   	push   eax
c00172ed:	e8 4e 94 fe ff       	call   c0000740 <strcpy>
c00172f2:	59                   	pop    ecx
c00172f3:	58                   	pop    eax
c00172f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172f8:	03 06                	add    eax,DWORD PTR [esi]
c00172fa:	50                   	push   eax
c00172fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017302:	50                   	push   eax
c0017303:	e8 78 95 fe ff       	call   c0000880 <strcat>
c0017308:	58                   	pop    eax
c0017309:	5a                   	pop    edx
c001730a:	68 52 48 02 c0       	push   0xc0024852
c001730f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017316:	50                   	push   eax
c0017317:	e8 64 95 fe ff       	call   c0000880 <strcat>
c001731c:	83 c4 10             	add    esp,0x10
c001731f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017324:	0f 84 5d 01 00 00    	je     c0017487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017334:	50                   	push   eax
c0017335:	e8 83 d0 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017341:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017345:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017349:	80 fb 01             	cmp    bl,0x1
c001734c:	0f 85 88 00 00 00    	jne    c00173da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017352:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017359:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001735d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017361:	01 ce                	add    esi,ecx
c0017363:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017369:	0f 94 c0             	sete   al
c001736c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017372:	0f 94 c3             	sete   bl
c0017375:	09 c3                	or     ebx,eax
c0017377:	8b 06                	mov    eax,DWORD PTR [esi]
c0017379:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001737e:	74 41                	je     c00173c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017380:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017383:	84 db                	test   bl,bl
c0017385:	75 15                	jne    c001739c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017387:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001738b:	66 83 f8 0c          	cmp    ax,0xc
c001738f:	76 05                	jbe    c0017396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017391:	b8 0c 00 00 00       	mov    eax,0xc
c0017396:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001739a:	76 37                	jbe    c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001739c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00173a0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173a5:	0f 84 dc 00 00 00    	je     c0017487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173ab:	83 ec 0c             	sub    esp,0xc
c00173ae:	68 d3 47 02 c0       	push   0xc00247d3
c00173b3:	e8 05 d0 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00173b8:	83 c4 10             	add    esp,0x10
c00173bb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00173bf:	eb 12                	jmp    c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00173c1:	01 c1                	add    ecx,eax
c00173c3:	84 db                	test   bl,bl
c00173c5:	75 0c                	jne    c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00173c7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173cb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00173cf:	77 02                	ja     c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00173d1:	01 d1                	add    ecx,edx
c00173d3:	89 0e                	mov    DWORD PTR [esi],ecx
c00173d5:	e9 ea 00 00 00       	jmp    c00174c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173da:	80 fb 02             	cmp    bl,0x2
c00173dd:	75 7c                	jne    c001745b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00173df:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00173e6:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00173ea:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00173ee:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00173f4:	74 20                	je     c0017416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00173f6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00173fc:	74 18                	je     c0017416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00173fe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017402:	b9 0a 00 00 00       	mov    ecx,0xa
c0017407:	66 83 f8 0e          	cmp    ax,0xe
c001740b:	77 03                	ja     c0017410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001740d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017410:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017414:	76 1f                	jbe    c0017435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017416:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001741a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001741f:	74 66                	je     c0017487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017421:	83 ec 0c             	sub    esp,0xc
c0017424:	68 ef 47 02 c0       	push   0xc00247ef
c0017429:	e8 8f cf ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017435:	8b 06                	mov    eax,DWORD PTR [esi]
c0017437:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001743c:	74 13                	je     c0017451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001743e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017442:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017449:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001744d:	01 c8                	add    eax,ecx
c001744f:	eb 04                	jmp    c0017455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017451:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017455:	01 c2                	add    edx,eax
c0017457:	89 16                	mov    DWORD PTR [esi],edx
c0017459:	eb 69                	jmp    c00174c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001745b:	0f b6 db             	movzx  ebx,bl
c001745e:	50                   	push   eax
c001745f:	50                   	push   eax
c0017460:	53                   	push   ebx
c0017461:	68 0b 48 02 c0       	push   0xc002480b
c0017466:	e8 90 56 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001746b:	83 c4 10             	add    esp,0x10
c001746e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017473:	74 12                	je     c0017487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017475:	83 ec 0c             	sub    esp,0xc
c0017478:	68 16 48 02 c0       	push   0xc0024816
c001747d:	e8 3b cf ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	eb 3d                	jmp    c00174c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017487:	83 ec 0c             	sub    esp,0xc
c001748a:	55                   	push   ebp
c001748b:	e8 98 5c ff ff       	call   c000d128 <File::close()>
c0017490:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017493:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017496:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017499:	59                   	pop    ecx
c001749a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001749e:	e8 30 25 ff ff       	call   c00099d3 <free>
c00174a3:	5b                   	pop    ebx
c00174a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174a8:	e8 26 25 ff ff       	call   c00099d3 <free>
c00174ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c00174b0:	e8 1e 25 ff ff       	call   c00099d3 <free>
c00174b5:	5e                   	pop    esi
c00174b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174ba:	e8 14 25 ff ff       	call   c00099d3 <free>
c00174bf:	83 c4 10             	add    esp,0x10
c00174c2:	eb 21                	jmp    c00174e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00174c4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00174c8:	e9 76 fd ff ff       	jmp    c0017243 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00174cd:	83 ec 0c             	sub    esp,0xc
c00174d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174d4:	e8 fa 24 ff ff       	call   c00099d3 <free>
c00174d9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00174dd:	83 c4 10             	add    esp,0x10
c00174e0:	e9 eb fc ff ff       	jmp    c00171d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00174e5:	31 c0                	xor    eax,eax
c00174e7:	eb 33                	jmp    c001751c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00174e9:	83 ec 0c             	sub    esp,0xc
c00174ec:	55                   	push   ebp
c00174ed:	e8 36 5c ff ff       	call   c000d128 <File::close()>
c00174f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174fb:	58                   	pop    eax
c00174fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017500:	e8 ce 24 ff ff       	call   c00099d3 <free>
c0017505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017508:	e8 c6 24 ff ff       	call   c00099d3 <free>
c001750d:	5a                   	pop    edx
c001750e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017512:	e8 bc 24 ff ff       	call   c00099d3 <free>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	b0 01                	mov    al,0x1
c001751c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017522:	5b                   	pop    ebx
c0017523:	5e                   	pop    esi
c0017524:	5f                   	pop    edi
c0017525:	5d                   	pop    ebp
c0017526:	c3                   	ret    

c0017527 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017527:	56                   	push   esi
c0017528:	31 d2                	xor    edx,edx
c001752a:	53                   	push   ebx
c001752b:	8b 1d a0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271a0
c0017531:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017535:	39 d3                	cmp    ebx,edx
c0017537:	7e 1b                	jle    c0017554 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017539:	8b 04 95 c0 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8c40]
c0017540:	39 c8                	cmp    eax,ecx
c0017542:	77 0d                	ja     c0017551 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017544:	8b 34 95 c0 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8e40]
c001754b:	01 c6                	add    esi,eax
c001754d:	39 ce                	cmp    esi,ecx
c001754f:	77 05                	ja     c0017556 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017551:	42                   	inc    edx
c0017552:	eb e1                	jmp    c0017535 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017554:	31 c0                	xor    eax,eax
c0017556:	5b                   	pop    ebx
c0017557:	5e                   	pop    esi
c0017558:	c3                   	ret    

c0017559 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017559:	53                   	push   ebx
c001755a:	31 c0                	xor    eax,eax
c001755c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017560:	8b 1d a0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271a0
c0017566:	39 c3                	cmp    ebx,eax
c0017568:	7e 22                	jle    c001758c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001756a:	8b 14 85 c0 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8c40]
c0017571:	39 ca                	cmp    edx,ecx
c0017573:	77 14                	ja     c0017589 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017575:	03 14 85 c0 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8e40]
c001757c:	39 ca                	cmp    edx,ecx
c001757e:	76 09                	jbe    c0017589 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017580:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c0017587:	eb 05                	jmp    c001758e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017589:	40                   	inc    eax
c001758a:	eb da                	jmp    c0017566 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001758c:	31 c0                	xor    eax,eax
c001758e:	5b                   	pop    ebx
c001758f:	c3                   	ret    

c0017590 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017590:	53                   	push   ebx
c0017591:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017595:	53                   	push   ebx
c0017596:	e8 8c ff ff ff       	call   c0017527 <Thr::getDriverBaseFromAddress(unsigned long)>
c001759b:	5a                   	pop    edx
c001759c:	31 d2                	xor    edx,edx
c001759e:	85 c0                	test   eax,eax
c00175a0:	74 04                	je     c00175a6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00175a2:	89 da                	mov    edx,ebx
c00175a4:	29 c2                	sub    edx,eax
c00175a6:	89 d0                	mov    eax,edx
c00175a8:	5b                   	pop    ebx
c00175a9:	c3                   	ret    

c00175aa <Thr::loadDLL(char const*, bool)>:
c00175aa:	55                   	push   ebp
c00175ab:	57                   	push   edi
c00175ac:	56                   	push   esi
c00175ad:	53                   	push   ebx
c00175ae:	81 ec 34 01 00 00    	sub    esp,0x134
c00175b4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00175bb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00175c2:	56                   	push   esi
c00175c3:	68 2e 48 02 c0       	push   0xc002482e
c00175c8:	e8 2e 55 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00175cd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00175d4:	e8 ea 23 ff ff       	call   c00099c3 <malloc>
c00175d9:	83 c4 0c             	add    esp,0xc
c00175dc:	89 c3                	mov    ebx,eax
c00175de:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c00175e4:	56                   	push   esi
c00175e5:	50                   	push   eax
c00175e6:	e8 7b 5a ff ff       	call   c000d066 <File::File(char const*, Process*)>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	85 db                	test   ebx,ebx
c00175f0:	75 3c                	jne    c001762e <Thr::loadDLL(char const*, bool)+0x84>
c00175f2:	89 f8                	mov    eax,edi
c00175f4:	84 c0                	test   al,al
c00175f6:	0f 84 d2 01 00 00    	je     c00177ce <Thr::loadDLL(char const*, bool)+0x224>
c00175fc:	55                   	push   ebp
c00175fd:	55                   	push   ebp
c00175fe:	68 3f 48 02 c0       	push   0xc002483f
c0017603:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017607:	55                   	push   ebp
c0017608:	e8 33 91 fe ff       	call   c0000740 <strcpy>
c001760d:	58                   	pop    eax
c001760e:	5a                   	pop    edx
c001760f:	56                   	push   esi
c0017610:	55                   	push   ebp
c0017611:	e8 6a 92 fe ff       	call   c0000880 <strcat>
c0017616:	59                   	pop    ecx
c0017617:	58                   	pop    eax
c0017618:	68 52 48 02 c0       	push   0xc0024852
c001761d:	55                   	push   ebp
c001761e:	e8 5d 92 fe ff       	call   c0000880 <strcat>
c0017623:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017626:	e8 92 cd ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001762b:	83 c4 10             	add    esp,0x10
c001762e:	51                   	push   ecx
c001762f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017633:	50                   	push   eax
c0017634:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017638:	50                   	push   eax
c0017639:	53                   	push   ebx
c001763a:	e8 37 5d ff ff       	call   c000d376 <File::stat(unsigned long long*, bool*)>
c001763f:	83 c4 10             	add    esp,0x10
c0017642:	85 db                	test   ebx,ebx
c0017644:	74 0c                	je     c0017652 <Thr::loadDLL(char const*, bool)+0xa8>
c0017646:	83 ec 0c             	sub    esp,0xc
c0017649:	8b 03                	mov    eax,DWORD PTR [ebx]
c001764b:	53                   	push   ebx
c001764c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001764f:	83 c4 10             	add    esp,0x10
c0017652:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017657:	75 0a                	jne    c0017663 <Thr::loadDLL(char const*, bool)+0xb9>
c0017659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001765d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017661:	75 3c                	jne    c001769f <Thr::loadDLL(char const*, bool)+0xf5>
c0017663:	89 f8                	mov    eax,edi
c0017665:	84 c0                	test   al,al
c0017667:	0f 84 49 01 00 00    	je     c00177b6 <Thr::loadDLL(char const*, bool)+0x20c>
c001766d:	51                   	push   ecx
c001766e:	51                   	push   ecx
c001766f:	68 3f 48 02 c0       	push   0xc002483f
c0017674:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017678:	53                   	push   ebx
c0017679:	e8 c2 90 fe ff       	call   c0000740 <strcpy>
c001767e:	5d                   	pop    ebp
c001767f:	58                   	pop    eax
c0017680:	56                   	push   esi
c0017681:	53                   	push   ebx
c0017682:	e8 f9 91 fe ff       	call   c0000880 <strcat>
c0017687:	58                   	pop    eax
c0017688:	5a                   	pop    edx
c0017689:	68 52 48 02 c0       	push   0xc0024852
c001768e:	53                   	push   ebx
c001768f:	e8 ec 91 fe ff       	call   c0000880 <strcat>
c0017694:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017697:	e8 21 cd ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001769c:	83 c4 10             	add    esp,0x10
c001769f:	52                   	push   edx
c00176a0:	6a 03                	push   0x3
c00176a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176a6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00176aa:	05 ff 0f 00 00       	add    eax,0xfff
c00176af:	83 d2 00             	adc    edx,0x0
c00176b2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00176b6:	50                   	push   eax
c00176b7:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c00176bd:	e8 10 48 ff ff       	call   c000bed2 <VAS::allocatePages(int, int)>
c00176c2:	59                   	pop    ecx
c00176c3:	89 c3                	mov    ebx,eax
c00176c5:	5d                   	pop    ebp
c00176c6:	50                   	push   eax
c00176c7:	68 82 29 02 c0       	push   0xc0022982
c00176cc:	e8 2a 54 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00176d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00176d4:	e8 c7 8f fe ff       	call   c00006a0 <strlen>
c00176d9:	8b 2d a0 71 02 c0    	mov    ebp,DWORD PTR ds:0xc00271a0
c00176df:	40                   	inc    eax
c00176e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00176e3:	e8 db 22 ff ff       	call   c00099c3 <malloc>
c00176e8:	89 04 ad c0 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8a40],eax
c00176ef:	58                   	pop    eax
c00176f0:	a1 a0 71 02 c0       	mov    eax,ds:0xc00271a0
c00176f5:	5a                   	pop    edx
c00176f6:	56                   	push   esi
c00176f7:	ff 34 85 c0 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8a40]
c00176fe:	e8 3d 90 fe ff       	call   c0000740 <strcpy>
c0017703:	a1 a0 71 02 c0       	mov    eax,ds:0xc00271a0
c0017708:	8d 50 01             	lea    edx,[eax+0x1]
c001770b:	89 1c 85 c0 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c40],ebx
c0017712:	89 15 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,edx
c0017718:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001771c:	83 c4 0c             	add    esp,0xc
c001771f:	89 14 85 c0 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8e40],edx
c0017726:	6a 01                	push   0x1
c0017728:	53                   	push   ebx
c0017729:	56                   	push   esi
c001772a:	e8 c2 f6 ff ff       	call   c0016df1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001772f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017733:	83 c4 10             	add    esp,0x10
c0017736:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001773b:	0f 85 89 00 00 00    	jne    c00177ca <Thr::loadDLL(char const*, bool)+0x220>
c0017741:	89 f8                	mov    eax,edi
c0017743:	84 c0                	test   al,al
c0017745:	74 73                	je     c00177ba <Thr::loadDLL(char const*, bool)+0x210>
c0017747:	83 ec 0c             	sub    esp,0xc
c001774a:	68 54 48 02 c0       	push   0xc0024854
c001774f:	e8 69 cc ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0017754:	83 c4 10             	add    esp,0x10
c0017757:	eb 61                	jmp    c00177ba <Thr::loadDLL(char const*, bool)+0x210>
c0017759:	50                   	push   eax
c001775a:	50                   	push   eax
c001775b:	89 e8                	mov    eax,ebp
c001775d:	c1 e0 0c             	shl    eax,0xc
c0017760:	01 d8                	add    eax,ebx
c0017762:	50                   	push   eax
c0017763:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c0017769:	e8 cc 42 ff ff       	call   c000ba3a <VAS::getPageTableEntry(unsigned long)>
c001776e:	83 c4 10             	add    esp,0x10
c0017771:	8b 00                	mov    eax,DWORD PTR [eax]
c0017773:	a8 60                	test   al,0x60
c0017775:	75 11                	jne    c0017788 <Thr::loadDLL(char const*, bool)+0x1de>
c0017777:	83 ec 0c             	sub    esp,0xc
c001777a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001777f:	50                   	push   eax
c0017780:	e8 f1 25 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c0017785:	83 c4 10             	add    esp,0x10
c0017788:	45                   	inc    ebp
c0017789:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001778d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017791:	05 ff 0f 00 00       	add    eax,0xfff
c0017796:	bf 00 00 00 00       	mov    edi,0x0
c001779b:	83 d2 00             	adc    edx,0x0
c001779e:	0f ac d0 0c          	shrd   eax,edx,0xc
c00177a2:	c1 ea 0c             	shr    edx,0xc
c00177a5:	39 c5                	cmp    ebp,eax
c00177a7:	89 d1                	mov    ecx,edx
c00177a9:	89 f8                	mov    eax,edi
c00177ab:	19 c8                	sbb    eax,ecx
c00177ad:	72 aa                	jb     c0017759 <Thr::loadDLL(char const*, bool)+0x1af>
c00177af:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00177b4:	75 18                	jne    c00177ce <Thr::loadDLL(char const*, bool)+0x224>
c00177b6:	31 db                	xor    ebx,ebx
c00177b8:	eb 14                	jmp    c00177ce <Thr::loadDLL(char const*, bool)+0x224>
c00177ba:	83 ec 0c             	sub    esp,0xc
c00177bd:	68 73 48 02 c0       	push   0xc0024873
c00177c2:	e8 f6 cb ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00177c7:	83 c4 10             	add    esp,0x10
c00177ca:	31 ed                	xor    ebp,ebp
c00177cc:	eb bb                	jmp    c0017789 <Thr::loadDLL(char const*, bool)+0x1df>
c00177ce:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177d4:	89 d8                	mov    eax,ebx
c00177d6:	5b                   	pop    ebx
c00177d7:	5e                   	pop    esi
c00177d8:	5f                   	pop    edi
c00177d9:	5d                   	pop    ebp
c00177da:	c3                   	ret    

c00177db <Thr::executeDLL(unsigned long, void*)>:
c00177db:	56                   	push   esi
c00177dc:	53                   	push   ebx
c00177dd:	52                   	push   edx
c00177de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177e6:	85 db                	test   ebx,ebx
c00177e8:	75 10                	jne    c00177fa <Thr::executeDLL(unsigned long, void*)+0x1f>
c00177ea:	83 ec 0c             	sub    esp,0xc
c00177ed:	68 8f 48 02 c0       	push   0xc002488f
c00177f2:	e8 c6 cb ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00177f7:	83 c4 10             	add    esp,0x10
c00177fa:	50                   	push   eax
c00177fb:	50                   	push   eax
c00177fc:	53                   	push   ebx
c00177fd:	68 b9 48 02 c0       	push   0xc00248b9
c0017802:	e8 f4 52 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0017807:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001780b:	89 d8                	mov    eax,ebx
c001780d:	83 c4 14             	add    esp,0x14
c0017810:	5b                   	pop    ebx
c0017811:	5e                   	pop    esi
c0017812:	ff e0                	jmp    eax

c0017814 <userModeEntryPoint(void*)>:
c0017814:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0017819:	48                   	dec    eax
c001781a:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001781f:	75 03                	jne    c0017824 <userModeEntryPoint(void*)+0x10>
c0017821:	fb                   	sti    
c0017822:	66 90                	xchg   ax,ax
c0017824:	fb                   	sti    
c0017825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001782a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001782d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017833:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017837:	e9 23 8a fe ff       	jmp    c000025f <goToUsermode>

c001783c <changeTSS>:
c001783c:	83 ec 14             	sub    esp,0x14
c001783f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017844:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017847:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001784c:	c1 e2 15             	shl    edx,0x15
c001784f:	29 d0                	sub    eax,edx
c0017851:	50                   	push   eax
c0017852:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0017857:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001785d:	05 7c 11 00 00       	add    eax,0x117c
c0017862:	50                   	push   eax
c0017863:	e8 14 38 ff ff       	call   c000b07c <TSS::setESP(unsigned long)>
c0017868:	83 c4 1c             	add    esp,0x1c
c001786b:	c3                   	ret    

c001786c <switchToThread(ThreadControlBlock*)>:
c001786c:	57                   	push   edi
c001786d:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0017872:	56                   	push   esi
c0017873:	85 c0                	test   eax,eax
c0017875:	53                   	push   ebx
c0017876:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001787a:	0f 85 90 00 00 00    	jne    c0017910 <switchToThread(ThreadControlBlock*)+0xa4>
c0017880:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017883:	3c ff                	cmp    al,0xff
c0017885:	0f 84 81 00 00 00    	je     c001790c <switchToThread(ThreadControlBlock*)+0xa0>
c001788b:	0f b6 d0             	movzx  edx,al
c001788e:	b8 00 04 00 00       	mov    eax,0x400
c0017893:	29 d0                	sub    eax,edx
c0017895:	d1 f8                	sar    eax,1
c0017897:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001789a:	66 90                	xchg   ax,ax
c001789c:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c001789f:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c00178a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178aa:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00178b1:	74 4d                	je     c0017900 <switchToThread(ThreadControlBlock*)+0x94>
c00178b3:	0f 31                	rdtsc  
c00178b5:	a3 a8 79 02 c0       	mov    ds:0xc00279a8,eax
c00178ba:	89 c6                	mov    esi,eax
c00178bc:	89 d7                	mov    edi,edx
c00178be:	2b 35 98 79 02 c0    	sub    esi,DWORD PTR ds:0xc0027998
c00178c4:	89 15 ac 79 02 c0    	mov    DWORD PTR ds:0xc00279ac,edx
c00178ca:	1b 3d 9c 79 02 c0    	sbb    edi,DWORD PTR ds:0xc002799c
c00178d0:	89 35 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,esi
c00178d6:	a3 98 79 02 c0       	mov    ds:0xc0027998,eax
c00178db:	89 3d a4 79 02 c0    	mov    DWORD PTR ds:0xc00279a4,edi
c00178e1:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00178e7:	89 15 9c 79 02 c0    	mov    DWORD PTR ds:0xc002799c,edx
c00178ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00178f0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00178f3:	01 c6                	add    esi,eax
c00178f5:	11 d7                	adc    edi,edx
c00178f7:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00178fa:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00178fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017900:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017904:	5b                   	pop    ebx
c0017905:	5e                   	pop    esi
c0017906:	5f                   	pop    edi
c0017907:	e9 8b 89 fe ff       	jmp    c0000297 <switchToThreadASM>
c001790c:	31 c0                	xor    eax,eax
c001790e:	eb 8c                	jmp    c001789c <switchToThread(ThreadControlBlock*)+0x30>
c0017910:	5b                   	pop    ebx
c0017911:	c7 05 60 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x1
c001791b:	5e                   	pop    esi
c001791c:	5f                   	pop    edi
c001791d:	c3                   	ret    
c001791e:	66 90                	xchg   ax,ax

c0017920 <Process::addArgs(char**)>:
c0017920:	57                   	push   edi
c0017921:	56                   	push   esi
c0017922:	53                   	push   ebx
c0017923:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017927:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001792b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017935:	85 ff                	test   edi,edi
c0017937:	74 43                	je     c001797c <Process::addArgs(char**)+0x5c>
c0017939:	8b 07                	mov    eax,DWORD PTR [edi]
c001793b:	85 c0                	test   eax,eax
c001793d:	74 3d                	je     c001797c <Process::addArgs(char**)+0x5c>
c001793f:	31 db                	xor    ebx,ebx
c0017941:	8d 76 00             	lea    esi,[esi+0x0]
c0017944:	83 ec 0c             	sub    esp,0xc
c0017947:	50                   	push   eax
c0017948:	e8 53 8d fe ff       	call   c00006a0 <strlen>
c001794d:	40                   	inc    eax
c001794e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017951:	e8 6d 20 ff ff       	call   c00099c3 <malloc>
c0017956:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001795d:	5a                   	pop    edx
c001795e:	59                   	pop    ecx
c001795f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017962:	43                   	inc    ebx
c0017963:	50                   	push   eax
c0017964:	e8 d7 8d fe ff       	call   c0000740 <strcpy>
c0017969:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017975:	85 c0                	test   eax,eax
c0017977:	75 cb                	jne    c0017944 <Process::addArgs(char**)+0x24>
c0017979:	8d 76 00             	lea    esi,[esi+0x0]
c001797c:	5b                   	pop    ebx
c001797d:	5e                   	pop    esi
c001797e:	5f                   	pop    edi
c001797f:	c3                   	ret    

c0017980 <Process::Process(char const*, Process*, char**)>:
c0017980:	56                   	push   esi
c0017981:	53                   	push   ebx
c0017982:	83 ec 14             	sub    esp,0x14
c0017985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017989:	05 0c 02 00 00       	add    eax,0x20c
c001798e:	bb 07 00 00 00       	mov    ebx,0x7
c0017993:	89 c6                	mov    esi,eax
c0017995:	8d 76 00             	lea    esi,[esi+0x0]
c0017998:	85 db                	test   ebx,ebx
c001799a:	78 14                	js     c00179b0 <Process::Process(char const*, Process*, char**)+0x30>
c001799c:	83 ec 0c             	sub    esp,0xc
c001799f:	56                   	push   esi
c00179a0:	e8 2b 9f 00 00       	call   c00218d0 <ThreadControlBlock::ThreadControlBlock()>
c00179a5:	83 c4 10             	add    esp,0x10
c00179a8:	83 c6 5f             	add    esi,0x5f
c00179ab:	4b                   	dec    ebx
c00179ac:	eb ea                	jmp    c0017998 <Process::Process(char const*, Process*, char**)+0x18>
c00179ae:	66 90                	xchg   ax,ax
c00179b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00179bb:	83 ec 0c             	sub    esp,0xc
c00179be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179c2:	e8 7f c8 ff ff       	call   c0014246 <Krnl::newProcessEnv(Process*)>
c00179c7:	83 c4 10             	add    esp,0x10
c00179ca:	89 c2                	mov    edx,eax
c00179cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00179d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179da:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00179e3:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c00179e8:	8d 50 01             	lea    edx,[eax+0x1]
c00179eb:	89 15 d0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed0,edx
c00179f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179f5:	89 02                	mov    DWORD PTR [edx],eax
c00179f7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00179ff:	83 ec 0c             	sub    esp,0xc
c0017a02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a06:	e8 b8 1f ff ff       	call   c00099c3 <malloc>
c0017a0b:	83 c4 10             	add    esp,0x10
c0017a0e:	89 c3                	mov    ebx,eax
c0017a10:	83 ec 08             	sub    esp,0x8
c0017a13:	6a 00                	push   0x0
c0017a15:	53                   	push   ebx
c0017a16:	e8 5f 48 ff ff       	call   c000c27a <VAS::VAS(bool)>
c0017a1b:	83 c4 10             	add    esp,0x10
c0017a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a22:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a3e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a48:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a4e:	85 c0                	test   eax,eax
c0017a50:	74 42                	je     c0017a94 <Process::Process(char const*, Process*, char**)+0x114>
c0017a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a56:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a5c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017a62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a66:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a70:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a80:	05 0c 01 00 00       	add    eax,0x10c
c0017a85:	83 ec 08             	sub    esp,0x8
c0017a88:	52                   	push   edx
c0017a89:	50                   	push   eax
c0017a8a:	e8 b1 8c fe ff       	call   c0000740 <strcpy>
c0017a8f:	83 c4 10             	add    esp,0x10
c0017a92:	eb 64                	jmp    c0017af8 <Process::Process(char const*, Process*, char**)+0x178>
c0017a94:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017a9c:	83 ec 0c             	sub    esp,0xc
c0017a9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017aa3:	e8 1b 1f ff ff       	call   c00099c3 <malloc>
c0017aa8:	83 c4 10             	add    esp,0x10
c0017aab:	89 c3                	mov    ebx,eax
c0017aad:	83 ec 08             	sub    esp,0x8
c0017ab0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ab4:	53                   	push   ebx
c0017ab5:	e8 d2 32 ff ff       	call   c000ad8c <VgaText::VgaText(char const*)>
c0017aba:	83 c4 10             	add    esp,0x10
c0017abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017acb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad1:	83 ec 0c             	sub    esp,0xc
c0017ad4:	50                   	push   eax
c0017ad5:	e8 71 2a ff ff       	call   c000a54b <addToTerminalCycle(VgaText*)>
c0017ada:	83 c4 10             	add    esp,0x10
c0017add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae1:	05 0c 01 00 00       	add    eax,0x10c
c0017ae6:	83 ec 08             	sub    esp,0x8
c0017ae9:	68 d8 48 02 c0       	push   0xc00248d8
c0017aee:	50                   	push   eax
c0017aef:	e8 4c 8c fe ff       	call   c0000740 <strcpy>
c0017af4:	83 c4 10             	add    esp,0x10
c0017af7:	90                   	nop
c0017af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017afc:	83 c0 0c             	add    eax,0xc
c0017aff:	83 ec 08             	sub    esp,0x8
c0017b02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b06:	50                   	push   eax
c0017b07:	e8 34 8c fe ff       	call   c0000740 <strcpy>
c0017b0c:	83 c4 10             	add    esp,0x10
c0017b0f:	83 ec 08             	sub    esp,0x8
c0017b12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017b16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b1a:	e8 01 fe ff ff       	call   c0017920 <Process::addArgs(char**)>
c0017b1f:	83 c4 10             	add    esp,0x10
c0017b22:	83 ec 08             	sub    esp,0x8
c0017b25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b2d:	e8 89 ed ff ff       	call   c00168bb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b39:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017b3d:	83 f0 01             	xor    eax,0x1
c0017b40:	88 c2                	mov    dl,al
c0017b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b46:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017b4c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017b51:	83 ec 08             	sub    esp,0x8
c0017b54:	50                   	push   eax
c0017b55:	68 30 49 02 c0       	push   0xc0024930
c0017b5a:	e8 9c 4f ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0017b5f:	83 c4 10             	add    esp,0x10
c0017b62:	90                   	nop
c0017b63:	83 c4 14             	add    esp,0x14
c0017b66:	5b                   	pop    ebx
c0017b67:	5e                   	pop    esi
c0017b68:	c3                   	ret    
c0017b69:	90                   	nop
c0017b6a:	66 90                	xchg   ax,ax

c0017b6c <Process::Process(bool, char const*, Process*, char**)>:
c0017b6c:	56                   	push   esi
c0017b6d:	53                   	push   ebx
c0017b6e:	83 ec 24             	sub    esp,0x24
c0017b71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b75:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017b79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b7d:	05 0c 02 00 00       	add    eax,0x20c
c0017b82:	bb 07 00 00 00       	mov    ebx,0x7
c0017b87:	89 c6                	mov    esi,eax
c0017b89:	8d 76 00             	lea    esi,[esi+0x0]
c0017b8c:	85 db                	test   ebx,ebx
c0017b8e:	78 14                	js     c0017ba4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017b90:	83 ec 0c             	sub    esp,0xc
c0017b93:	56                   	push   esi
c0017b94:	e8 37 9d 00 00       	call   c00218d0 <ThreadControlBlock::ThreadControlBlock()>
c0017b99:	83 c4 10             	add    esp,0x10
c0017b9c:	83 c6 5f             	add    esi,0x5f
c0017b9f:	4b                   	dec    ebx
c0017ba0:	eb ea                	jmp    c0017b8c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017ba2:	66 90                	xchg   ax,ax
c0017ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017baf:	83 ec 0c             	sub    esp,0xc
c0017bb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017bb6:	e8 8b c6 ff ff       	call   c0014246 <Krnl::newProcessEnv(Process*)>
c0017bbb:	83 c4 10             	add    esp,0x10
c0017bbe:	89 c2                	mov    edx,eax
c0017bc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017bca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bce:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017bd7:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0017bdc:	8d 50 01             	lea    edx,[eax+0x1]
c0017bdf:	89 15 d0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed0,edx
c0017be5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017be9:	89 02                	mov    DWORD PTR [edx],eax
c0017beb:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017bf3:	83 ec 0c             	sub    esp,0xc
c0017bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017bfa:	e8 c4 1d ff ff       	call   c00099c3 <malloc>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	89 c3                	mov    ebx,eax
c0017c04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017c09:	83 ec 08             	sub    esp,0x8
c0017c0c:	50                   	push   eax
c0017c0d:	53                   	push   ebx
c0017c0e:	e8 67 46 ff ff       	call   c000c27a <VAS::VAS(bool)>
c0017c13:	83 c4 10             	add    esp,0x10
c0017c16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c1a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017c20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c24:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017c2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c32:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017c36:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c46:	85 c0                	test   eax,eax
c0017c48:	74 42                	je     c0017c8c <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c54:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017c5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c5e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017c64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c68:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017c74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c78:	05 0c 01 00 00       	add    eax,0x10c
c0017c7d:	83 ec 08             	sub    esp,0x8
c0017c80:	52                   	push   edx
c0017c81:	50                   	push   eax
c0017c82:	e8 b9 8a fe ff       	call   c0000740 <strcpy>
c0017c87:	83 c4 10             	add    esp,0x10
c0017c8a:	eb 64                	jmp    c0017cf0 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017c8c:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017c94:	83 ec 0c             	sub    esp,0xc
c0017c97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c9b:	e8 23 1d ff ff       	call   c00099c3 <malloc>
c0017ca0:	83 c4 10             	add    esp,0x10
c0017ca3:	89 c3                	mov    ebx,eax
c0017ca5:	83 ec 08             	sub    esp,0x8
c0017ca8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017cac:	53                   	push   ebx
c0017cad:	e8 da 30 ff ff       	call   c000ad8c <VgaText::VgaText(char const*)>
c0017cb2:	83 c4 10             	add    esp,0x10
c0017cb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017cbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cc9:	83 ec 0c             	sub    esp,0xc
c0017ccc:	50                   	push   eax
c0017ccd:	e8 79 28 ff ff       	call   c000a54b <addToTerminalCycle(VgaText*)>
c0017cd2:	83 c4 10             	add    esp,0x10
c0017cd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cd9:	05 0c 01 00 00       	add    eax,0x10c
c0017cde:	83 ec 08             	sub    esp,0x8
c0017ce1:	68 d8 48 02 c0       	push   0xc00248d8
c0017ce6:	50                   	push   eax
c0017ce7:	e8 54 8a fe ff       	call   c0000740 <strcpy>
c0017cec:	83 c4 10             	add    esp,0x10
c0017cef:	90                   	nop
c0017cf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cf4:	83 c0 0c             	add    eax,0xc
c0017cf7:	83 ec 08             	sub    esp,0x8
c0017cfa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017cfe:	50                   	push   eax
c0017cff:	e8 3c 8a fe ff       	call   c0000740 <strcpy>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	83 ec 08             	sub    esp,0x8
c0017d0a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017d0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017d12:	e8 09 fc ff ff       	call   c0017920 <Process::addArgs(char**)>
c0017d17:	83 c4 10             	add    esp,0x10
c0017d1a:	90                   	nop
c0017d1b:	83 c4 24             	add    esp,0x24
c0017d1e:	5b                   	pop    ebx
c0017d1f:	5e                   	pop    esi
c0017d20:	c3                   	ret    
c0017d21:	8d 76 00             	lea    esi,[esi+0x0]

c0017d24 <taskStartupFunction>:
c0017d24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d29:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017d2c:	c3                   	ret    
c0017d2d:	90                   	nop
c0017d2e:	66 90                	xchg   ax,ax

c0017d30 <Semaphore::Semaphore(int)>:
c0017d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d38:	89 10                	mov    DWORD PTR [eax],edx
c0017d3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d3e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d54:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017d5b:	90                   	nop
c0017d5c:	c3                   	ret    
c0017d5d:	90                   	nop
c0017d5e:	66 90                	xchg   ax,ax

c0017d60 <Mutex::Mutex()>:
c0017d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d64:	6a 01                	push   0x1
c0017d66:	50                   	push   eax
c0017d67:	e8 c4 ff ff ff       	call   c0017d30 <Semaphore::Semaphore(int)>
c0017d6c:	83 c4 08             	add    esp,0x8
c0017d6f:	90                   	nop
c0017d70:	c3                   	ret    
c0017d71:	90                   	nop
c0017d72:	66 90                	xchg   ax,ax

c0017d74 <Process::createThread(void (*)(void*), void*, int)>:
c0017d74:	57                   	push   edi
c0017d75:	31 c9                	xor    ecx,ecx
c0017d77:	56                   	push   esi
c0017d78:	53                   	push   ebx
c0017d79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d7d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017d84:	89 f2                	mov    edx,esi
c0017d86:	66 90                	xchg   ax,ax
c0017d88:	0f b7 c2             	movzx  eax,dx
c0017d8b:	83 e2 01             	and    edx,0x1
c0017d8e:	74 14                	je     c0017da4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017d90:	d1 f8                	sar    eax,1
c0017d92:	41                   	inc    ecx
c0017d93:	89 c2                	mov    edx,eax
c0017d95:	83 f9 10             	cmp    ecx,0x10
c0017d98:	75 ee                	jne    c0017d88 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017d9a:	31 db                	xor    ebx,ebx
c0017d9c:	89 d8                	mov    eax,ebx
c0017d9e:	5b                   	pop    ebx
c0017d9f:	5e                   	pop    esi
c0017da0:	5f                   	pop    edi
c0017da1:	c3                   	ret    
c0017da2:	66 90                	xchg   ax,ax
c0017da4:	b8 01 00 00 00       	mov    eax,0x1
c0017da9:	d3 e0                	shl    eax,cl
c0017dab:	09 c6                	or     esi,eax
c0017dad:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017db0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017db7:	01 c0                	add    eax,eax
c0017db9:	01 c8                	add    eax,ecx
c0017dbb:	8d 04 80             	lea    eax,[eax+eax*4]
c0017dbe:	01 d8                	add    eax,ebx
c0017dc0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017dc7:	75 0b                	jne    c0017dd4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017dc9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017dd3:	90                   	nop
c0017dd4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017dda:	83 ec 08             	sub    esp,0x8
c0017ddd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017de0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017de3:	01 c0                	add    eax,eax
c0017de5:	01 c8                	add    eax,ecx
c0017de7:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017dea:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017ded:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017df3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017df9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017dfd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017e03:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017e09:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017e10:	89 ca                	mov    edx,ecx
c0017e12:	f7 da                	neg    edx
c0017e14:	c1 e2 15             	shl    edx,0x15
c0017e17:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017e1d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017e23:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e27:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017e31:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017e37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e3b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017e41:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017e4b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017e55:	53                   	push   ebx
c0017e56:	68 84 79 02 c0       	push   0xc0027984
c0017e5b:	e8 10 98 00 00       	call   c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	89 d8                	mov    eax,ebx
c0017e65:	5b                   	pop    ebx
c0017e66:	5e                   	pop    esi
c0017e67:	5f                   	pop    edi
c0017e68:	c3                   	ret    
c0017e69:	90                   	nop
c0017e6a:	66 90                	xchg   ax,ax

c0017e6c <Process::createUserThread()>:
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	68 80 00 00 00       	push   0x80
c0017e74:	6a 00                	push   0x0
c0017e76:	68 14 78 01 c0       	push   0xc0017814
c0017e7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e7f:	e8 f0 fe ff ff       	call   c0017d74 <Process::createThread(void (*)(void*), void*, int)>
c0017e84:	83 c4 1c             	add    esp,0x1c
c0017e87:	c3                   	ret    

c0017e88 <setupMultitasking(void (*)())>:
c0017e88:	56                   	push   esi
c0017e89:	53                   	push   ebx
c0017e8a:	51                   	push   ecx
c0017e8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e8f:	eb 13                	jmp    c0017ea4 <setupMultitasking(void (*)())+0x1c>
c0017e91:	8d 76 00             	lea    esi,[esi+0x0]
c0017e94:	83 ec 0c             	sub    esp,0xc
c0017e97:	68 84 79 02 c0       	push   0xc0027984
c0017e9c:	e8 17 97 00 00       	call   c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	83 ec 0c             	sub    esp,0xc
c0017ea7:	68 84 79 02 c0       	push   0xc0027984
c0017eac:	e8 e3 96 00 00       	call   c0021594 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	84 c0                	test   al,al
c0017eb6:	74 dc                	je     c0017e94 <setupMultitasking(void (*)())+0xc>
c0017eb8:	83 ec 0c             	sub    esp,0xc
c0017ebb:	68 1f 07 00 00       	push   0x71f
c0017ec0:	e8 fe 1a ff ff       	call   c00099c3 <malloc>
c0017ec5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017ecc:	89 c3                	mov    ebx,eax
c0017ece:	6a 00                	push   0x0
c0017ed0:	68 dc 48 02 c0       	push   0xc00248dc
c0017ed5:	6a 01                	push   0x1
c0017ed7:	50                   	push   eax
c0017ed8:	e8 8f fc ff ff       	call   c0017b6c <Process::Process(bool, char const*, Process*, char**)>
c0017edd:	83 c4 14             	add    esp,0x14
c0017ee0:	89 1d 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,ebx
c0017ee6:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017eec:	e8 68 29 ff ff       	call   c000a859 <setActiveTerminal(VgaText*)>
c0017ef1:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017ef9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017f03:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017f09:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017f0c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017f16:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017f1c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017f22:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017f2c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017f36:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017f40:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017f46:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017f50:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017f56:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017f60:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017f66:	58                   	pop    eax
c0017f67:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017f6d:	5a                   	pop    edx
c0017f6e:	68 d8 48 02 c0       	push   0xc00248d8
c0017f73:	50                   	push   eax
c0017f74:	e8 c7 87 fe ff       	call   c0000740 <strcpy>
c0017f79:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017f80:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f84:	83 c4 14             	add    esp,0x14
c0017f87:	5b                   	pop    ebx
c0017f88:	5e                   	pop    esi
c0017f89:	e9 fb 82 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017f8e:	66 90                	xchg   ax,ax

c0017f90 <schedule()>:
c0017f90:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0017f95:	85 c0                	test   eax,eax
c0017f97:	74 0b                	je     c0017fa4 <schedule()+0x14>
c0017f99:	c7 05 60 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x1
c0017fa3:	c3                   	ret    
c0017fa4:	53                   	push   ebx
c0017fa5:	83 ec 14             	sub    esp,0x14
c0017fa8:	68 84 79 02 c0       	push   0xc0027984
c0017fad:	e8 e2 95 00 00       	call   c0021594 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017fb2:	83 c4 10             	add    esp,0x10
c0017fb5:	84 c0                	test   al,al
c0017fb7:	75 3b                	jne    c0017ff4 <schedule()+0x64>
c0017fb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017fc1:	4a                   	dec    edx
c0017fc2:	74 38                	je     c0017ffc <schedule()+0x6c>
c0017fc4:	83 ec 0c             	sub    esp,0xc
c0017fc7:	68 84 79 02 c0       	push   0xc0027984
c0017fcc:	e8 df 95 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017fd1:	c7 04 24 84 79 02 c0 	mov    DWORD PTR [esp],0xc0027984
c0017fd8:	89 c3                	mov    ebx,eax
c0017fda:	e8 d9 95 00 00       	call   c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017fdf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017fe6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017fe9:	e8 7e f8 ff ff       	call   c001786c <switchToThread(ThreadControlBlock*)>
c0017fee:	83 c4 10             	add    esp,0x10
c0017ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ff4:	83 c4 08             	add    esp,0x8
c0017ff7:	5b                   	pop    ebx
c0017ff8:	c3                   	ret    
c0017ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ffc:	83 ec 08             	sub    esp,0x8
c0017fff:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018006:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001800c:	68 84 79 02 c0       	push   0xc0027984
c0018011:	e8 5a 96 00 00       	call   c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018016:	83 c4 10             	add    esp,0x10
c0018019:	eb a9                	jmp    c0017fc4 <schedule()+0x34>
c001801b:	90                   	nop

c001801c <Semaphore::tryAcquire()>:
c001801c:	53                   	push   ebx
c001801d:	83 ec 08             	sub    esp,0x8
c0018020:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018024:	fa                   	cli    
c0018025:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c001802a:	8d 50 01             	lea    edx,[eax+0x1]
c001802d:	89 15 68 79 02 c0    	mov    DWORD PTR ds:0xc0027968,edx
c0018033:	8b 15 64 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027964
c0018039:	8d 5a 01             	lea    ebx,[edx+0x1]
c001803c:	89 1d 64 79 02 c0    	mov    DWORD PTR ds:0xc0027964,ebx
c0018042:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018045:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018047:	7c 33                	jl     c001807c <Semaphore::tryAcquire()+0x60>
c0018049:	89 15 64 79 02 c0    	mov    DWORD PTR ds:0xc0027964,edx
c001804f:	85 d2                	test   edx,edx
c0018051:	75 0d                	jne    c0018060 <Semaphore::tryAcquire()+0x44>
c0018053:	8b 15 60 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027960
c0018059:	85 d2                	test   edx,edx
c001805b:	75 6b                	jne    c00180c8 <Semaphore::tryAcquire()+0xac>
c001805d:	8d 76 00             	lea    esi,[esi+0x0]
c0018060:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0018065:	85 c0                	test   eax,eax
c0018067:	74 0b                	je     c0018074 <Semaphore::tryAcquire()+0x58>
c0018069:	8d 76 00             	lea    esi,[esi+0x0]
c001806c:	31 c0                	xor    eax,eax
c001806e:	83 c4 08             	add    esp,0x8
c0018071:	5b                   	pop    ebx
c0018072:	c3                   	ret    
c0018073:	90                   	nop
c0018074:	fb                   	sti    
c0018075:	83 c4 08             	add    esp,0x8
c0018078:	5b                   	pop    ebx
c0018079:	c3                   	ret    
c001807a:	66 90                	xchg   ax,ax
c001807c:	43                   	inc    ebx
c001807d:	89 15 64 79 02 c0    	mov    DWORD PTR ds:0xc0027964,edx
c0018083:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018086:	85 d2                	test   edx,edx
c0018088:	75 22                	jne    c00180ac <Semaphore::tryAcquire()+0x90>
c001808a:	8b 0d 60 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027960
c0018090:	85 c9                	test   ecx,ecx
c0018092:	74 18                	je     c00180ac <Semaphore::tryAcquire()+0x90>
c0018094:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c001809e:	e8 ed fe ff ff       	call   c0017f90 <schedule()>
c00180a3:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00180a8:	48                   	dec    eax
c00180a9:	8d 76 00             	lea    esi,[esi+0x0]
c00180ac:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00180b1:	85 c0                	test   eax,eax
c00180b3:	75 0b                	jne    c00180c0 <Semaphore::tryAcquire()+0xa4>
c00180b5:	fb                   	sti    
c00180b6:	b0 01                	mov    al,0x1
c00180b8:	83 c4 08             	add    esp,0x8
c00180bb:	5b                   	pop    ebx
c00180bc:	c3                   	ret    
c00180bd:	8d 76 00             	lea    esi,[esi+0x0]
c00180c0:	b0 01                	mov    al,0x1
c00180c2:	83 c4 08             	add    esp,0x8
c00180c5:	5b                   	pop    ebx
c00180c6:	c3                   	ret    
c00180c7:	90                   	nop
c00180c8:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c00180d2:	e8 b9 fe ff ff       	call   c0017f90 <schedule()>
c00180d7:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00180dc:	48                   	dec    eax
c00180dd:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00180e2:	85 c0                	test   eax,eax
c00180e4:	75 86                	jne    c001806c <Semaphore::tryAcquire()+0x50>
c00180e6:	eb 8c                	jmp    c0018074 <Semaphore::tryAcquire()+0x58>

c00180e8 <Semaphore::assertLocked(char const*)>:
c00180e8:	83 ec 0c             	sub    esp,0xc
c00180eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180ef:	fa                   	cli    
c00180f0:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c00180f6:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00180fb:	8d 48 01             	lea    ecx,[eax+0x1]
c00180fe:	89 0d 64 79 02 c0    	mov    DWORD PTR ds:0xc0027964,ecx
c0018104:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018106:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018109:	7c 29                	jl     c0018134 <Semaphore::assertLocked(char const*)+0x4c>
c001810b:	90                   	nop
c001810c:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c0018111:	85 c0                	test   eax,eax
c0018113:	75 0b                	jne    c0018120 <Semaphore::assertLocked(char const*)+0x38>
c0018115:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001811a:	85 c0                	test   eax,eax
c001811c:	75 2e                	jne    c001814c <Semaphore::assertLocked(char const*)+0x64>
c001811e:	66 90                	xchg   ax,ax
c0018120:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018125:	48                   	dec    eax
c0018126:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001812b:	75 03                	jne    c0018130 <Semaphore::assertLocked(char const*)+0x48>
c001812d:	fb                   	sti    
c001812e:	66 90                	xchg   ax,ax
c0018130:	83 c4 0c             	add    esp,0xc
c0018133:	c3                   	ret    
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001813b:	e8 7d c2 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0018140:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	48                   	dec    eax
c0018149:	eb c1                	jmp    c001810c <Semaphore::assertLocked(char const*)+0x24>
c001814b:	90                   	nop
c001814c:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c0018156:	e8 35 fe ff ff       	call   c0017f90 <schedule()>
c001815b:	eb c3                	jmp    c0018120 <Semaphore::assertLocked(char const*)+0x38>
c001815d:	8d 76 00             	lea    esi,[esi+0x0]

c0018160 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018160:	83 ec 0c             	sub    esp,0xc
c0018163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018168:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001816c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001816f:	e8 1c fe ff ff       	call   c0017f90 <schedule()>
c0018174:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018179:	48                   	dec    eax
c001817a:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001817f:	75 03                	jne    c0018184 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018181:	fb                   	sti    
c0018182:	66 90                	xchg   ax,ax
c0018184:	83 c4 0c             	add    esp,0xc
c0018187:	c3                   	ret    

c0018188 <blockTask(TaskState)>:
c0018188:	83 ec 0c             	sub    esp,0xc
c001818b:	fa                   	cli    
c001818c:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018192:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001819b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001819e:	e8 ed fd ff ff       	call   c0017f90 <schedule()>
c00181a3:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00181a8:	48                   	dec    eax
c00181a9:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00181ae:	75 04                	jne    c00181b4 <blockTask(TaskState)+0x2c>
c00181b0:	fb                   	sti    
c00181b1:	8d 76 00             	lea    esi,[esi+0x0]
c00181b4:	83 c4 0c             	add    esp,0xc
c00181b7:	c3                   	ret    

c00181b8 <waitTask(int, int*, int)>:
c00181b8:	83 ec 18             	sub    esp,0x18
c00181bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181c4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00181c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181d0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00181d3:	6a 07                	push   0x7
c00181d5:	e8 ae ff ff ff       	call   c0018188 <blockTask(TaskState)>
c00181da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00181e5:	85 d2                	test   edx,edx
c00181e7:	74 0b                	je     c00181f4 <waitTask(int, int*, int)+0x3c>
c00181e9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00181ec:	89 02                	mov    DWORD PTR [edx],eax
c00181ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181f3:	90                   	nop
c00181f4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00181f7:	83 c4 0c             	add    esp,0xc
c00181fa:	c3                   	ret    
c00181fb:	90                   	nop

c00181fc <milliTenthSleepUntil(unsigned int)>:
c00181fc:	83 ec 0c             	sub    esp,0xc
c00181ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018203:	39 05 cc 6a 02 c0    	cmp    DWORD PTR ds:0xc0026acc,eax
c0018209:	76 05                	jbe    c0018210 <milliTenthSleepUntil(unsigned int)+0x14>
c001820b:	90                   	nop
c001820c:	83 c4 0c             	add    esp,0xc
c001820f:	c3                   	ret    
c0018210:	fa                   	cli    
c0018211:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018217:	83 ec 08             	sub    esp,0x8
c001821a:	ff 05 64 79 02 c0    	inc    DWORD PTR ds:0xc0027964
c0018220:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018226:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018229:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001822f:	68 78 79 02 c0       	push   0xc0027978
c0018234:	e8 37 94 00 00       	call   c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018239:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018240:	e8 43 ff ff ff       	call   c0018188 <blockTask(TaskState)>
c0018245:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c001824a:	83 c4 10             	add    esp,0x10
c001824d:	48                   	dec    eax
c001824e:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c0018253:	85 c0                	test   eax,eax
c0018255:	75 09                	jne    c0018260 <milliTenthSleepUntil(unsigned int)+0x64>
c0018257:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001825c:	85 c0                	test   eax,eax
c001825e:	75 14                	jne    c0018274 <milliTenthSleepUntil(unsigned int)+0x78>
c0018260:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018265:	48                   	dec    eax
c0018266:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001826b:	75 9f                	jne    c001820c <milliTenthSleepUntil(unsigned int)+0x10>
c001826d:	fb                   	sti    
c001826e:	83 c4 0c             	add    esp,0xc
c0018271:	c3                   	ret    
c0018272:	66 90                	xchg   ax,ax
c0018274:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c001827e:	e8 0d fd ff ff       	call   c0017f90 <schedule()>
c0018283:	eb db                	jmp    c0018260 <milliTenthSleepUntil(unsigned int)+0x64>
c0018285:	8d 76 00             	lea    esi,[esi+0x0]

c0018288 <milliTenthSleep(unsigned int)>:
c0018288:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c001828d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018291:	e9 66 ff ff ff       	jmp    c00181fc <milliTenthSleepUntil(unsigned int)>
c0018296:	66 90                	xchg   ax,ax

c0018298 <sleep(unsigned int)>:
c0018298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001829c:	8d 04 80             	lea    eax,[eax+eax*4]
c001829f:	8d 04 80             	lea    eax,[eax+eax*4]
c00182a2:	8d 04 80             	lea    eax,[eax+eax*4]
c00182a5:	8d 04 80             	lea    eax,[eax+eax*4]
c00182a8:	c1 e0 04             	shl    eax,0x4
c00182ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182af:	eb d7                	jmp    c0018288 <milliTenthSleep(unsigned int)>
c00182b1:	90                   	nop
c00182b2:	66 90                	xchg   ax,ax

c00182b4 <Semaphore::acquire()>:
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00182bb:	fa                   	cli    
c00182bc:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00182c1:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c00182c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00182ca:	89 0d 64 79 02 c0    	mov    DWORD PTR ds:0xc0027964,ecx
c00182d0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00182d3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00182d5:	7d 2d                	jge    c0018304 <Semaphore::acquire()+0x50>
c00182d7:	41                   	inc    ecx
c00182d8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00182db:	90                   	nop
c00182dc:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c00182e1:	85 c0                	test   eax,eax
c00182e3:	75 0b                	jne    c00182f0 <Semaphore::acquire()+0x3c>
c00182e5:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c00182ea:	85 c0                	test   eax,eax
c00182ec:	75 62                	jne    c0018350 <Semaphore::acquire()+0x9c>
c00182ee:	66 90                	xchg   ax,ax
c00182f0:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00182f5:	48                   	dec    eax
c00182f6:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00182fb:	75 03                	jne    c0018300 <Semaphore::acquire()+0x4c>
c00182fd:	fb                   	sti    
c00182fe:	66 90                	xchg   ax,ax
c0018300:	83 c4 0c             	add    esp,0xc
c0018303:	c3                   	ret    
c0018304:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018309:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018310:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018313:	85 c9                	test   ecx,ecx
c0018315:	74 4d                	je     c0018364 <Semaphore::acquire()+0xb0>
c0018317:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001831a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018320:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018323:	90                   	nop
c0018324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018329:	83 ec 0c             	sub    esp,0xc
c001832c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001832f:	68 58 49 02 c0       	push   0xc0024958
c0018334:	e8 c2 47 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0018339:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018340:	e8 43 fe ff ff       	call   c0018188 <blockTask(TaskState)>
c0018345:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c001834a:	83 c4 10             	add    esp,0x10
c001834d:	48                   	dec    eax
c001834e:	eb 8c                	jmp    c00182dc <Semaphore::acquire()+0x28>
c0018350:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c001835a:	e8 31 fc ff ff       	call   c0017f90 <schedule()>
c001835f:	eb 8f                	jmp    c00182f0 <Semaphore::acquire()+0x3c>
c0018361:	8d 76 00             	lea    esi,[esi+0x0]
c0018364:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018369:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001836c:	eb b6                	jmp    c0018324 <Semaphore::acquire()+0x70>
c001836e:	66 90                	xchg   ax,ax

c0018370 <taskReturned>:
c0018370:	83 ec 18             	sub    esp,0x18
c0018373:	68 78 49 02 c0       	push   0xc0024978
c0018378:	e8 40 c0 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001837d:	83 c4 10             	add    esp,0x10
c0018380:	83 ec 0c             	sub    esp,0xc
c0018383:	6a 02                	push   0x2
c0018385:	e8 fe fd ff ff       	call   c0018188 <blockTask(TaskState)>
c001838a:	fa                   	cli    
c001838b:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018391:	e8 fa fb ff ff       	call   c0017f90 <schedule()>
c0018396:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c001839b:	83 c4 10             	add    esp,0x10
c001839e:	48                   	dec    eax
c001839f:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00183a4:	85 c0                	test   eax,eax
c00183a6:	75 d8                	jne    c0018380 <taskReturned+0x10>
c00183a8:	fb                   	sti    
c00183a9:	eb d5                	jmp    c0018380 <taskReturned+0x10>
c00183ab:	90                   	nop

c00183ac <Thr::processFromPID(int)>:
c00183ac:	57                   	push   edi
c00183ad:	56                   	push   esi
c00183ae:	53                   	push   ebx
c00183af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00183b3:	fa                   	cli    
c00183b4:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c00183ba:	83 ec 0c             	sub    esp,0xc
c00183bd:	68 84 79 02 c0       	push   0xc0027984
c00183c2:	e8 e9 91 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183c7:	83 c4 10             	add    esp,0x10
c00183ca:	89 c7                	mov    edi,eax
c00183cc:	eb 16                	jmp    c00183e4 <Thr::processFromPID(int)+0x38>
c00183ce:	66 90                	xchg   ax,ax
c00183d0:	83 ec 0c             	sub    esp,0xc
c00183d3:	68 84 79 02 c0       	push   0xc0027984
c00183d8:	e8 d3 91 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183dd:	83 c4 10             	add    esp,0x10
c00183e0:	39 f8                	cmp    eax,edi
c00183e2:	74 4c                	je     c0018430 <Thr::processFromPID(int)+0x84>
c00183e4:	83 ec 0c             	sub    esp,0xc
c00183e7:	68 84 79 02 c0       	push   0xc0027984
c00183ec:	e8 bf 91 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183f1:	c7 04 24 84 79 02 c0 	mov    DWORD PTR [esp],0xc0027984
c00183f8:	89 c3                	mov    ebx,eax
c00183fa:	e8 b9 91 00 00       	call   c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183ff:	58                   	pop    eax
c0018400:	5a                   	pop    edx
c0018401:	53                   	push   ebx
c0018402:	68 84 79 02 c0       	push   0xc0027984
c0018407:	e8 64 92 00 00       	call   c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001840c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001840f:	83 c4 10             	add    esp,0x10
c0018412:	39 30                	cmp    DWORD PTR [eax],esi
c0018414:	75 ba                	jne    c00183d0 <Thr::processFromPID(int)+0x24>
c0018416:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c001841b:	48                   	dec    eax
c001841c:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0018421:	74 09                	je     c001842c <Thr::processFromPID(int)+0x80>
c0018423:	90                   	nop
c0018424:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018427:	5b                   	pop    ebx
c0018428:	5e                   	pop    esi
c0018429:	5f                   	pop    edi
c001842a:	c3                   	ret    
c001842b:	90                   	nop
c001842c:	fb                   	sti    
c001842d:	eb f5                	jmp    c0018424 <Thr::processFromPID(int)+0x78>
c001842f:	90                   	nop
c0018430:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018435:	48                   	dec    eax
c0018436:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001843b:	75 07                	jne    c0018444 <Thr::processFromPID(int)+0x98>
c001843d:	fb                   	sti    
c001843e:	5b                   	pop    ebx
c001843f:	5e                   	pop    esi
c0018440:	5f                   	pop    edi
c0018441:	c3                   	ret    
c0018442:	66 90                	xchg   ax,ax
c0018444:	5b                   	pop    ebx
c0018445:	31 c0                	xor    eax,eax
c0018447:	5e                   	pop    esi
c0018448:	5f                   	pop    edi
c0018449:	c3                   	ret    
c001844a:	66 90                	xchg   ax,ax

c001844c <unblockTask(ThreadControlBlock*)>:
c001844c:	53                   	push   ebx
c001844d:	83 ec 08             	sub    esp,0x8
c0018450:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018454:	fa                   	cli    
c0018455:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c001845b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001845e:	85 c0                	test   eax,eax
c0018460:	74 66                	je     c00184c8 <unblockTask(ThreadControlBlock*)+0x7c>
c0018462:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018465:	48                   	dec    eax
c0018466:	74 38                	je     c00184a0 <unblockTask(ThreadControlBlock*)+0x54>
c0018468:	83 ec 0c             	sub    esp,0xc
c001846b:	68 84 79 02 c0       	push   0xc0027984
c0018470:	e8 3b 91 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018475:	83 c4 10             	add    esp,0x10
c0018478:	85 c0                	test   eax,eax
c001847a:	75 1c                	jne    c0018498 <unblockTask(ThreadControlBlock*)+0x4c>
c001847c:	eb 5e                	jmp    c00184dc <unblockTask(ThreadControlBlock*)+0x90>
c001847e:	66 90                	xchg   ax,ax
c0018480:	83 ec 08             	sub    esp,0x8
c0018483:	50                   	push   eax
c0018484:	68 84 79 02 c0       	push   0xc0027984
c0018489:	e8 d2 94 00 00       	call   c0021960 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	85 c0                	test   eax,eax
c0018493:	74 47                	je     c00184dc <unblockTask(ThreadControlBlock*)+0x90>
c0018495:	8d 76 00             	lea    esi,[esi+0x0]
c0018498:	39 c3                	cmp    ebx,eax
c001849a:	75 e4                	jne    c0018480 <unblockTask(ThreadControlBlock*)+0x34>
c001849c:	eb 12                	jmp    c00184b0 <unblockTask(ThreadControlBlock*)+0x64>
c001849e:	66 90                	xchg   ax,ax
c00184a0:	83 ec 0c             	sub    esp,0xc
c00184a3:	68 fa 48 02 c0       	push   0xc00248fa
c00184a8:	e8 4e 46 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00184ad:	83 c4 10             	add    esp,0x10
c00184b0:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00184b5:	48                   	dec    eax
c00184b6:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00184bb:	75 03                	jne    c00184c0 <unblockTask(ThreadControlBlock*)+0x74>
c00184bd:	fb                   	sti    
c00184be:	66 90                	xchg   ax,ax
c00184c0:	83 c4 08             	add    esp,0x8
c00184c3:	5b                   	pop    ebx
c00184c4:	c3                   	ret    
c00184c5:	8d 76 00             	lea    esi,[esi+0x0]
c00184c8:	83 ec 0c             	sub    esp,0xc
c00184cb:	68 e3 48 02 c0       	push   0xc00248e3
c00184d0:	e8 26 46 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00184d5:	83 c4 10             	add    esp,0x10
c00184d8:	eb d6                	jmp    c00184b0 <unblockTask(ThreadControlBlock*)+0x64>
c00184da:	66 90                	xchg   ax,ax
c00184dc:	83 ec 08             	sub    esp,0x8
c00184df:	53                   	push   ebx
c00184e0:	68 84 79 02 c0       	push   0xc0027984
c00184e5:	e8 86 91 00 00       	call   c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	eb c1                	jmp    c00184b0 <unblockTask(ThreadControlBlock*)+0x64>
c00184ef:	90                   	nop

c00184f0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00184f0:	55                   	push   ebp
c00184f1:	57                   	push   edi
c00184f2:	56                   	push   esi
c00184f3:	53                   	push   ebx
c00184f4:	83 ec 1c             	sub    esp,0x1c
c00184f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00184fb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00184fe:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018504:	85 ff                	test   edi,edi
c0018506:	7e 24                	jle    c001852c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018508:	31 f6                	xor    esi,esi
c001850a:	66 90                	xchg   ax,ax
c001850c:	83 ec 0c             	sub    esp,0xc
c001850f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018516:	46                   	inc    esi
c0018517:	e8 b7 14 ff ff       	call   c00099d3 <free>
c001851c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018528:	7f e2                	jg     c001850c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001852a:	66 90                	xchg   ax,ax
c001852c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018536:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001853b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001853e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018541:	d3 c0                	rol    eax,cl
c0018543:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001854a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001854d:	89 f7                	mov    edi,esi
c001854f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018557:	0f 85 73 01 00 00    	jne    c00186d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001855d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018563:	85 ed                	test   ebp,ebp
c0018565:	74 1d                	je     c0018584 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018567:	83 ec 0c             	sub    esp,0xc
c001856a:	55                   	push   ebp
c001856b:	e8 f2 bb ff ff       	call   c0014162 <EnvVarContainer::~EnvVarContainer()>
c0018570:	59                   	pop    ecx
c0018571:	5e                   	pop    esi
c0018572:	6a 0c                	push   0xc
c0018574:	55                   	push   ebp
c0018575:	e8 a0 44 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c001857a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001857d:	83 c4 10             	add    esp,0x10
c0018580:	89 f7                	mov    edi,esi
c0018582:	66 90                	xchg   ax,ax
c0018584:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001858a:	85 c0                	test   eax,eax
c001858c:	0f 84 b2 00 00 00    	je     c0018644 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018592:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018595:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018599:	31 c9                	xor    ecx,ecx
c001859b:	eb 17                	jmp    c00185b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001859d:	8d 76 00             	lea    esi,[esi+0x0]
c00185a0:	41                   	inc    ecx
c00185a1:	83 f9 10             	cmp    ecx,0x10
c00185a4:	0f 84 9a 00 00 00    	je     c0018644 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00185aa:	66 90                	xchg   ax,ax
c00185ac:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00185b2:	66 90                	xchg   ax,ax
c00185b4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00185bb:	d3 fa                	sar    edx,cl
c00185bd:	83 e2 01             	and    edx,0x1
c00185c0:	74 de                	je     c00185a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185c2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00185c5:	01 d2                	add    edx,edx
c00185c7:	01 ca                	add    edx,ecx
c00185c9:	8d 14 92             	lea    edx,[edx+edx*4]
c00185cc:	01 d0                	add    eax,edx
c00185ce:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00185d4:	83 fd 07             	cmp    ebp,0x7
c00185d7:	75 c7                	jne    c00185a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185d9:	05 40 02 00 00       	add    eax,0x240
c00185de:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00185e1:	83 fd ff             	cmp    ebp,0xffffffff
c00185e4:	0f 8c ee 00 00 00    	jl     c00186d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00185ea:	0f 84 ac 01 00 00    	je     c001879c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00185f0:	85 ed                	test   ebp,ebp
c00185f2:	0f 84 90 01 00 00    	je     c0018788 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00185f8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00185fa:	75 a4                	jne    c00185a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018602:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018606:	01 d0                	add    eax,edx
c0018608:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001860c:	83 ec 0c             	sub    esp,0xc
c001860f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018615:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018618:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001861e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018625:	50                   	push   eax
c0018626:	e8 21 fe ff ff       	call   c001844c <unblockTask(ThreadControlBlock*)>
c001862b:	83 c4 10             	add    esp,0x10
c001862e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018631:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018635:	89 f7                	mov    edi,esi
c0018637:	41                   	inc    ecx
c0018638:	83 f9 10             	cmp    ecx,0x10
c001863b:	0f 85 6b ff ff ff    	jne    c00185ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018641:	8d 76 00             	lea    esi,[esi+0x0]
c0018644:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001864a:	85 c0                	test   eax,eax
c001864c:	74 62                	je     c00186b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001864e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018654:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001865a:	74 54                	je     c00186b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	68 84 79 02 c0       	push   0xc0027984
c0018664:	e8 47 8f 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018669:	c7 04 24 84 79 02 c0 	mov    DWORD PTR [esp],0xc0027984
c0018670:	89 c7                	mov    edi,eax
c0018672:	e8 1d 8f 00 00       	call   c0021594 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018677:	83 c4 10             	add    esp,0x10
c001867a:	84 c0                	test   al,al
c001867c:	0f 84 ce 00 00 00    	je     c0018750 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018682:	66 90                	xchg   ax,ax
c0018684:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018687:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001868d:	85 d2                	test   edx,edx
c001868f:	74 0f                	je     c00186a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018691:	83 ec 0c             	sub    esp,0xc
c0018694:	8b 02                	mov    eax,DWORD PTR [edx]
c0018696:	52                   	push   edx
c0018697:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001869a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00186aa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00186ad:	8d 76 00             	lea    esi,[esi+0x0]
c00186b0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00186b6:	85 db                	test   ebx,ebx
c00186b8:	74 16                	je     c00186d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00186ba:	83 ec 0c             	sub    esp,0xc
c00186bd:	53                   	push   ebx
c00186be:	e8 91 35 ff ff       	call   c000bc54 <VAS::~VAS()>
c00186c3:	58                   	pop    eax
c00186c4:	5a                   	pop    edx
c00186c5:	6a 14                	push   0x14
c00186c7:	53                   	push   ebx
c00186c8:	e8 4d 43 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c00186cd:	83 c4 10             	add    esp,0x10
c00186d0:	83 c4 1c             	add    esp,0x1c
c00186d3:	5b                   	pop    ebx
c00186d4:	5e                   	pop    esi
c00186d5:	5f                   	pop    edi
c00186d6:	5d                   	pop    ebp
c00186d7:	c3                   	ret    
c00186d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186dc:	83 ec 0c             	sub    esp,0xc
c00186df:	68 ac 49 02 c0       	push   0xc00249ac
c00186e4:	e8 d4 bc ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00186e9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	89 f7                	mov    edi,esi
c00186f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186f5:	e9 a6 fe ff ff       	jmp    c00185a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00186fa:	66 90                	xchg   ax,ax
c00186fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018702:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018708:	75 1e                	jne    c0018728 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001870a:	83 ec 0c             	sub    esp,0xc
c001870d:	68 14 4a 02 c0       	push   0xc0024a14
c0018712:	e8 e4 43 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0018717:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001871e:	e8 65 fa ff ff       	call   c0018188 <blockTask(TaskState)>
c0018723:	83 c4 10             	add    esp,0x10
c0018726:	66 90                	xchg   ax,ax
c0018728:	83 ec 08             	sub    esp,0x8
c001872b:	56                   	push   esi
c001872c:	68 84 79 02 c0       	push   0xc0027984
c0018731:	e8 3a 8f 00 00       	call   c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018736:	c7 04 24 84 79 02 c0 	mov    DWORD PTR [esp],0xc0027984
c001873d:	e8 6e 8e 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018742:	83 c4 10             	add    esp,0x10
c0018745:	39 f8                	cmp    eax,edi
c0018747:	0f 84 37 ff ff ff    	je     c0018684 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c001874d:	8d 76 00             	lea    esi,[esi+0x0]
c0018750:	83 ec 0c             	sub    esp,0xc
c0018753:	68 84 79 02 c0       	push   0xc0027984
c0018758:	e8 53 8e 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001875d:	c7 04 24 84 79 02 c0 	mov    DWORD PTR [esp],0xc0027984
c0018764:	89 c6                	mov    esi,eax
c0018766:	e8 4d 8e 00 00       	call   c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	39 f3                	cmp    ebx,esi
c0018770:	74 b6                	je     c0018728 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018772:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018775:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018778:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001877e:	75 a8                	jne    c0018728 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018780:	e9 77 ff ff ff       	jmp    c00186fc <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018785:	8d 76 00             	lea    esi,[esi+0x0]
c0018788:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001878c:	83 ec 0c             	sub    esp,0xc
c001878f:	68 e0 49 02 c0       	push   0xc00249e0
c0018794:	e9 4b ff ff ff       	jmp    c00186e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018799:	8d 76 00             	lea    esi,[esi+0x0]
c001879c:	8b 36                	mov    esi,DWORD PTR [esi]
c001879e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00187a2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00187a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00187a8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00187ae:	01 d7                	add    edi,edx
c00187b0:	89 f8                	mov    eax,edi
c00187b2:	e9 51 fe ff ff       	jmp    c0018608 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c00187b7:	90                   	nop

c00187b8 <cleanerTaskFunction(void*)>:
c00187b8:	53                   	push   ebx
c00187b9:	83 ec 08             	sub    esp,0x8
c00187bc:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00187c1:	48                   	dec    eax
c00187c2:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00187c7:	75 03                	jne    c00187cc <cleanerTaskFunction(void*)+0x14>
c00187c9:	fb                   	sti    
c00187ca:	66 90                	xchg   ax,ax
c00187cc:	fa                   	cli    
c00187cd:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00187d2:	80 3d 4c 79 02 c0 00 	cmp    BYTE PTR ds:0xc002794c,0x0
c00187d9:	8d 50 01             	lea    edx,[eax+0x1]
c00187dc:	89 15 68 79 02 c0    	mov    DWORD PTR ds:0xc0027968,edx
c00187e2:	0f 84 ac 00 00 00    	je     c0018894 <cleanerTaskFunction(void*)+0xdc>
c00187e8:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00187ed:	85 c0                	test   eax,eax
c00187ef:	75 03                	jne    c00187f4 <cleanerTaskFunction(void*)+0x3c>
c00187f1:	fb                   	sti    
c00187f2:	66 90                	xchg   ax,ax
c00187f4:	c6 05 4c 79 02 c0 00 	mov    BYTE PTR ds:0xc002794c,0x0
c00187fb:	fa                   	cli    
c00187fc:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018802:	ff 05 64 79 02 c0    	inc    DWORD PTR ds:0xc0027964
c0018808:	fa                   	cli    
c0018809:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c001880f:	eb 2b                	jmp    c001883c <cleanerTaskFunction(void*)+0x84>
c0018811:	8d 76 00             	lea    esi,[esi+0x0]
c0018814:	83 ec 0c             	sub    esp,0xc
c0018817:	68 6c 79 02 c0       	push   0xc002796c
c001881c:	e8 8f 8d 00 00       	call   c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018821:	c7 04 24 6c 79 02 c0 	mov    DWORD PTR [esp],0xc002796c
c0018828:	89 c3                	mov    ebx,eax
c001882a:	e8 89 8d 00 00       	call   c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001882f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018832:	e8 b9 fc ff ff       	call   c00184f0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018837:	83 c4 10             	add    esp,0x10
c001883a:	66 90                	xchg   ax,ax
c001883c:	83 ec 0c             	sub    esp,0xc
c001883f:	68 6c 79 02 c0       	push   0xc002796c
c0018844:	e8 4b 8d 00 00       	call   c0021594 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018849:	83 c4 10             	add    esp,0x10
c001884c:	84 c0                	test   al,al
c001884e:	74 c4                	je     c0018814 <cleanerTaskFunction(void*)+0x5c>
c0018850:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018855:	48                   	dec    eax
c0018856:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001885b:	75 03                	jne    c0018860 <cleanerTaskFunction(void*)+0xa8>
c001885d:	fb                   	sti    
c001885e:	66 90                	xchg   ax,ax
c0018860:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0018865:	48                   	dec    eax
c0018866:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c001886b:	0f 85 4b ff ff ff    	jne    c00187bc <cleanerTaskFunction(void*)+0x4>
c0018871:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0018876:	85 c0                	test   eax,eax
c0018878:	0f 84 3e ff ff ff    	je     c00187bc <cleanerTaskFunction(void*)+0x4>
c001887e:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c0018888:	e8 03 f7 ff ff       	call   c0017f90 <schedule()>
c001888d:	e9 2a ff ff ff       	jmp    c00187bc <cleanerTaskFunction(void*)+0x4>
c0018892:	66 90                	xchg   ax,ax
c0018894:	83 ec 0c             	sub    esp,0xc
c0018897:	6a 02                	push   0x2
c0018899:	e8 c2 f8 ff ff       	call   c0018160 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001889e:	83 c4 10             	add    esp,0x10
c00188a1:	e9 4e ff ff ff       	jmp    c00187f4 <cleanerTaskFunction(void*)+0x3c>
c00188a6:	66 90                	xchg   ax,ax

c00188a8 <terminateTask(int)>:
c00188a8:	83 ec 14             	sub    esp,0x14
c00188ab:	fa                   	cli    
c00188ac:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c00188b2:	ff 05 64 79 02 c0    	inc    DWORD PTR ds:0xc0027964
c00188b8:	fa                   	cli    
c00188b9:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c00188bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188c8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00188cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188d0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00188d3:	50                   	push   eax
c00188d4:	68 6c 79 02 c0       	push   0xc002796c
c00188d9:	e8 92 8d 00 00       	call   c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188e3:	83 c4 10             	add    esp,0x10
c00188e6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00188ed:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00188f2:	85 c0                	test   eax,eax
c00188f4:	74 5e                	je     c0018954 <terminateTask(int)+0xac>
c00188f6:	83 ec 0c             	sub    esp,0xc
c00188f9:	c6 05 4c 79 02 c0 01 	mov    BYTE PTR ds:0xc002794c,0x1
c0018900:	50                   	push   eax
c0018901:	e8 46 fb ff ff       	call   c001844c <unblockTask(ThreadControlBlock*)>
c0018906:	83 c4 10             	add    esp,0x10
c0018909:	8d 76 00             	lea    esi,[esi+0x0]
c001890c:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018911:	48                   	dec    eax
c0018912:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0018917:	75 03                	jne    c001891c <terminateTask(int)+0x74>
c0018919:	fb                   	sti    
c001891a:	66 90                	xchg   ax,ax
c001891c:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c0018921:	48                   	dec    eax
c0018922:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c0018927:	75 0b                	jne    c0018934 <terminateTask(int)+0x8c>
c0018929:	83 3d 60 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027960,0x0
c0018930:	75 36                	jne    c0018968 <terminateTask(int)+0xc0>
c0018932:	66 90                	xchg   ax,ax
c0018934:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018939:	48                   	dec    eax
c001893a:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001893f:	75 03                	jne    c0018944 <terminateTask(int)+0x9c>
c0018941:	fb                   	sti    
c0018942:	66 90                	xchg   ax,ax
c0018944:	fa                   	cli    
c0018945:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c001894b:	90                   	nop
c001894c:	e8 3f f6 ff ff       	call   c0017f90 <schedule()>
c0018951:	eb e1                	jmp    c0018934 <terminateTask(int)+0x8c>
c0018953:	90                   	nop
c0018954:	83 ec 0c             	sub    esp,0xc
c0018957:	68 11 49 02 c0       	push   0xc0024911
c001895c:	e8 9a 41 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0018961:	83 c4 10             	add    esp,0x10
c0018964:	eb a6                	jmp    c001890c <terminateTask(int)+0x64>
c0018966:	66 90                	xchg   ax,ax
c0018968:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c0018972:	eb d8                	jmp    c001894c <terminateTask(int)+0xa4>

c0018974 <Thr::terminateFromIRQ(int)>:
c0018974:	83 ec 18             	sub    esp,0x18
c0018977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001897b:	e8 28 ff ff ff       	call   c00188a8 <terminateTask(int)>

c0018980 <Semaphore::release()>:
c0018980:	83 ec 0c             	sub    esp,0xc
c0018983:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018987:	fa                   	cli    
c0018988:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c001898d:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018993:	8d 48 01             	lea    ecx,[eax+0x1]
c0018996:	89 0d 64 79 02 c0    	mov    DWORD PTR ds:0xc0027964,ecx
c001899c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001899f:	85 c9                	test   ecx,ecx
c00189a1:	74 41                	je     c00189e4 <Semaphore::release()+0x64>
c00189a3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00189a6:	83 ec 0c             	sub    esp,0xc
c00189a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00189ac:	51                   	push   ecx
c00189ad:	e8 9a fa ff ff       	call   c001844c <unblockTask(ThreadControlBlock*)>
c00189b2:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	48                   	dec    eax
c00189bb:	90                   	nop
c00189bc:	a3 64 79 02 c0       	mov    ds:0xc0027964,eax
c00189c1:	85 c0                	test   eax,eax
c00189c3:	75 0b                	jne    c00189d0 <Semaphore::release()+0x50>
c00189c5:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c00189ca:	85 c0                	test   eax,eax
c00189cc:	75 1e                	jne    c00189ec <Semaphore::release()+0x6c>
c00189ce:	66 90                	xchg   ax,ax
c00189d0:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c00189d5:	48                   	dec    eax
c00189d6:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c00189db:	75 03                	jne    c00189e0 <Semaphore::release()+0x60>
c00189dd:	fb                   	sti    
c00189de:	66 90                	xchg   ax,ax
c00189e0:	83 c4 0c             	add    esp,0xc
c00189e3:	c3                   	ret    
c00189e4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00189e7:	eb d3                	jmp    c00189bc <Semaphore::release()+0x3c>
c00189e9:	8d 76 00             	lea    esi,[esi+0x0]
c00189ec:	c7 05 60 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x0
c00189f6:	e8 95 f5 ff ff       	call   c0017f90 <schedule()>
c00189fb:	eb d3                	jmp    c00189d0 <Semaphore::release()+0x50>
c00189fd:	8d 76 00             	lea    esi,[esi+0x0]

c0018a00 <__static_initialization_and_destruction_0(int, int)>:
c0018a00:	83 ec 0c             	sub    esp,0xc
c0018a03:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018a08:	0f 85 8e 00 00 00    	jne    c0018a9c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018a0e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018a16:	0f 85 80 00 00 00    	jne    c0018a9c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018a1c:	83 ec 0c             	sub    esp,0xc
c0018a1f:	68 84 79 02 c0       	push   0xc0027984
c0018a24:	e8 f3 8e 00 00       	call   c002191c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a29:	83 c4 10             	add    esp,0x10
c0018a2c:	83 ec 04             	sub    esp,0x4
c0018a2f:	68 08 57 02 c0       	push   0xc0025708
c0018a34:	68 84 79 02 c0       	push   0xc0027984
c0018a39:	68 cc 18 02 c0       	push   0xc00218cc
c0018a3e:	e8 51 3f ff ff       	call   c000c994 <__cxa_atexit>
c0018a43:	83 c4 10             	add    esp,0x10
c0018a46:	83 ec 0c             	sub    esp,0xc
c0018a49:	68 78 79 02 c0       	push   0xc0027978
c0018a4e:	e8 c9 8e 00 00       	call   c002191c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a53:	83 c4 10             	add    esp,0x10
c0018a56:	83 ec 04             	sub    esp,0x4
c0018a59:	68 08 57 02 c0       	push   0xc0025708
c0018a5e:	68 78 79 02 c0       	push   0xc0027978
c0018a63:	68 cc 18 02 c0       	push   0xc00218cc
c0018a68:	e8 27 3f ff ff       	call   c000c994 <__cxa_atexit>
c0018a6d:	83 c4 10             	add    esp,0x10
c0018a70:	83 ec 0c             	sub    esp,0xc
c0018a73:	68 6c 79 02 c0       	push   0xc002796c
c0018a78:	e8 9f 8e 00 00       	call   c002191c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a7d:	83 c4 10             	add    esp,0x10
c0018a80:	83 ec 04             	sub    esp,0x4
c0018a83:	68 08 57 02 c0       	push   0xc0025708
c0018a88:	68 6c 79 02 c0       	push   0xc002796c
c0018a8d:	68 cc 18 02 c0       	push   0xc00218cc
c0018a92:	e8 fd 3e ff ff       	call   c000c994 <__cxa_atexit>
c0018a97:	83 c4 10             	add    esp,0x10
c0018a9a:	66 90                	xchg   ax,ax
c0018a9c:	90                   	nop
c0018a9d:	83 c4 0c             	add    esp,0xc
c0018aa0:	c3                   	ret    
c0018aa1:	8d 76 00             	lea    esi,[esi+0x0]

c0018aa4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018aa4:	83 ec 0c             	sub    esp,0xc
c0018aa7:	83 ec 08             	sub    esp,0x8
c0018aaa:	68 ff ff 00 00       	push   0xffff
c0018aaf:	6a 01                	push   0x1
c0018ab1:	e8 4a ff ff ff       	call   c0018a00 <__static_initialization_and_destruction_0(int, int)>
c0018ab6:	83 c4 10             	add    esp,0x10
c0018ab9:	83 c4 0c             	add    esp,0xc
c0018abc:	c3                   	ret    

c0018abd <Vm::inbv(unsigned short)>:
c0018abd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ac1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018ac6:	75 06                	jne    c0018ace <Vm::inbv(unsigned short)+0x11>
c0018ac8:	a0 cc 79 02 c0       	mov    al,ds:0xc00279cc
c0018acd:	c3                   	ret    
c0018ace:	ec                   	in     al,dx
c0018acf:	c3                   	ret    

c0018ad0 <Vm::outbv(unsigned short, unsigned char)>:
c0018ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ad8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018add:	75 25                	jne    c0018b04 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018adf:	8b 0d cc 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279cc
c0018ae5:	8d 51 01             	lea    edx,[ecx+0x1]
c0018ae8:	88 81 e0 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd8620],al
c0018aee:	89 15 cc 79 02 c0    	mov    DWORD PTR ds:0xc00279cc,edx
c0018af4:	83 fa 20             	cmp    edx,0x20
c0018af7:	75 0c                	jne    c0018b05 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018af9:	c7 05 cc 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00279cc,0x1f
c0018b03:	c3                   	ret    
c0018b04:	ee                   	out    dx,al
c0018b05:	c3                   	ret    

c0018b06 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018b06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018b0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018b10:	c1 e0 04             	shl    eax,0x4
c0018b13:	01 d0                	add    eax,edx
c0018b15:	c3                   	ret    

c0018b16 <Vm::getSegment(unsigned int)>:
c0018b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b1a:	c1 e8 10             	shr    eax,0x10
c0018b1d:	c3                   	ret    

c0018b1e <Vm::getOffset(unsigned int)>:
c0018b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b22:	c3                   	ret    

c0018b23 <Vm::mainloop2()>:
c0018b23:	83 ec 18             	sub    esp,0x18
c0018b26:	fa                   	cli    
c0018b27:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018b2d:	6a 02                	push   0x2
c0018b2f:	c6 05 c5 79 02 c0 01 	mov    BYTE PTR ds:0xc00279c5,0x1
c0018b36:	e8 25 f6 ff ff       	call   c0018160 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b40:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018b44:	52                   	push   edx
c0018b45:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018b49:	52                   	push   edx
c0018b4a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018b4e:	52                   	push   edx
c0018b4f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018b53:	50                   	push   eax
c0018b54:	e8 d6 76 fe ff       	call   c000022f <goToVM86>
c0018b59:	83 c4 2c             	add    esp,0x2c
c0018b5c:	c3                   	ret    

c0018b5d <Vm::mainVm8086Loop(void*)>:
c0018b5d:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018b62:	48                   	dec    eax
c0018b63:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0018b68:	75 01                	jne    c0018b6b <Vm::mainVm8086Loop(void*)+0xe>
c0018b6a:	fb                   	sti    
c0018b6b:	eb b6                	jmp    c0018b23 <Vm::mainloop2()>

c0018b6d <Vm::mainloop3(unsigned long)>:
c0018b6d:	83 ec 18             	sub    esp,0x18
c0018b70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b74:	fa                   	cli    
c0018b75:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018b7b:	6a 02                	push   0x2
c0018b7d:	c6 05 c4 79 02 c0 01 	mov    BYTE PTR ds:0xc00279c4,0x1
c0018b84:	a3 c0 79 02 c0       	mov    ds:0xc00279c0,eax
c0018b89:	e8 d2 f5 ff ff       	call   c0018160 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b8e:	83 c4 1c             	add    esp,0x1c
c0018b91:	eb 90                	jmp    c0018b23 <Vm::mainloop2()>

c0018b93 <Vm::initialise8086()>:
c0018b93:	83 ec 0c             	sub    esp,0xc
c0018b96:	68 80 00 00 00       	push   0x80
c0018b9b:	6a 00                	push   0x0
c0018b9d:	68 5d 8b 01 c0       	push   0xc0018b5d
c0018ba2:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c0018ba8:	e8 c7 f1 ff ff       	call   c0017d74 <Process::createThread(void (*)(void*), void*, int)>
c0018bad:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018bb4:	a3 c8 79 02 c0       	mov    ds:0xc00279c8,eax
c0018bb9:	68 00 01 00 00       	push   0x100
c0018bbe:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0018bc3:	6a 00                	push   0x0
c0018bc5:	6a 00                	push   0x0
c0018bc7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018bcd:	e8 f4 34 ff ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018bd2:	83 c4 2c             	add    esp,0x2c
c0018bd5:	c3                   	ret    

c0018bd6 <Vm::finish8086()>:
c0018bd6:	53                   	push   ebx
c0018bd7:	83 ec 08             	sub    esp,0x8
c0018bda:	fa                   	cli    
c0018bdb:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018be1:	80 3d c4 79 02 c0 00 	cmp    BYTE PTR ds:0xc00279c4,0x0
c0018be8:	75 15                	jne    c0018bff <Vm::finish8086()+0x29>
c0018bea:	e8 a1 f3 ff ff       	call   c0017f90 <schedule()>
c0018bef:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018bf4:	48                   	dec    eax
c0018bf5:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0018bfa:	75 de                	jne    c0018bda <Vm::finish8086()+0x4>
c0018bfc:	fb                   	sti    
c0018bfd:	eb db                	jmp    c0018bda <Vm::finish8086()+0x4>
c0018bff:	83 ec 0c             	sub    esp,0xc
c0018c02:	8b 1d c0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279c0
c0018c08:	ff 35 c8 79 02 c0    	push   DWORD PTR ds:0xc00279c8
c0018c0e:	c6 05 c4 79 02 c0 00 	mov    BYTE PTR ds:0xc00279c4,0x0
c0018c15:	e8 32 f8 ff ff       	call   c001844c <unblockTask(ThreadControlBlock*)>
c0018c1a:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018c1f:	83 c4 10             	add    esp,0x10
c0018c22:	8d 50 ff             	lea    edx,[eax-0x1]
c0018c25:	89 15 68 79 02 c0    	mov    DWORD PTR ds:0xc0027968,edx
c0018c2b:	85 d2                	test   edx,edx
c0018c2d:	75 01                	jne    c0018c30 <Vm::finish8086()+0x5a>
c0018c2f:	fb                   	sti    
c0018c30:	89 d8                	mov    eax,ebx
c0018c32:	83 c4 08             	add    esp,0x8
c0018c35:	5b                   	pop    ebx
c0018c36:	c3                   	ret    

c0018c37 <Vm::getOutput8086(unsigned char*)>:
c0018c37:	57                   	push   edi
c0018c38:	8b 0d cc 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279cc
c0018c3e:	56                   	push   esi
c0018c3f:	be e0 79 02 c0       	mov    esi,0xc00279e0
c0018c44:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c4a:	a1 cc 79 02 c0       	mov    eax,ds:0xc00279cc
c0018c4f:	5e                   	pop    esi
c0018c50:	c7 05 cc 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279cc,0x0
c0018c5a:	5f                   	pop    edi
c0018c5b:	c3                   	ret    

c0018c5c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018c5c:	55                   	push   ebp
c0018c5d:	57                   	push   edi
c0018c5e:	56                   	push   esi
c0018c5f:	53                   	push   ebx
c0018c60:	83 ec 2c             	sub    esp,0x2c
c0018c63:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018c67:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018c6b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018c6f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018c73:	fa                   	cli    
c0018c74:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0018c7a:	0f b6 35 c5 79 02 c0 	movzx  esi,BYTE PTR ds:0xc00279c5
c0018c81:	89 f0                	mov    eax,esi
c0018c83:	84 c0                	test   al,al
c0018c85:	75 1d                	jne    c0018ca4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018c87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c8b:	e8 00 f3 ff ff       	call   c0017f90 <schedule()>
c0018c90:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018c95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c99:	48                   	dec    eax
c0018c9a:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0018c9f:	75 d2                	jne    c0018c73 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018ca1:	fb                   	sti    
c0018ca2:	eb cf                	jmp    c0018c73 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018ca4:	a1 c8 79 02 c0       	mov    eax,ds:0xc00279c8
c0018ca9:	c7 05 cc 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279cc,0x0
c0018cb3:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018cb7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018cbb:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018cbf:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018cc3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018cc7:	50                   	push   eax
c0018cc8:	6a 20                	push   0x20
c0018cca:	6a 00                	push   0x0
c0018ccc:	68 e0 79 02 c0       	push   0xc00279e0
c0018cd1:	e8 ae 79 fe ff       	call   c0000684 <memset>
c0018cd6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018cdd:	e8 e1 0c ff ff       	call   c00099c3 <malloc>
c0018ce2:	83 c4 0c             	add    esp,0xc
c0018ce5:	89 c3                	mov    ebx,eax
c0018ce7:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c0018ced:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cf1:	50                   	push   eax
c0018cf2:	e8 6f 43 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c0018cf7:	83 c4 10             	add    esp,0x10
c0018cfa:	85 db                	test   ebx,ebx
c0018cfc:	75 0a                	jne    c0018d08 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018cfe:	83 ec 0c             	sub    esp,0xc
c0018d01:	68 3c 4a 02 c0       	push   0xc0024a3c
c0018d06:	eb 3e                	jmp    c0018d46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018d08:	50                   	push   eax
c0018d09:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018d0d:	50                   	push   eax
c0018d0e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018d12:	50                   	push   eax
c0018d13:	53                   	push   ebx
c0018d14:	e8 5d 46 ff ff       	call   c000d376 <File::stat(unsigned long long*, bool*)>
c0018d19:	83 c4 10             	add    esp,0x10
c0018d1c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018d21:	74 0a                	je     c0018d2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018d23:	83 ec 0c             	sub    esp,0xc
c0018d26:	68 50 4a 02 c0       	push   0xc0024a50
c0018d2b:	eb 19                	jmp    c0018d46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018d2d:	51                   	push   ecx
c0018d2e:	51                   	push   ecx
c0018d2f:	6a 01                	push   0x1
c0018d31:	53                   	push   ebx
c0018d32:	e8 93 43 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c0018d37:	83 c4 10             	add    esp,0x10
c0018d3a:	85 c0                	test   eax,eax
c0018d3c:	74 24                	je     c0018d62 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018d3e:	83 ec 0c             	sub    esp,0xc
c0018d41:	68 69 4a 02 c0       	push   0xc0024a69
c0018d46:	e8 72 b6 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0018d4b:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018d50:	83 c4 10             	add    esp,0x10
c0018d53:	48                   	dec    eax
c0018d54:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0018d59:	85 c0                	test   eax,eax
c0018d5b:	75 01                	jne    c0018d5e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018d5d:	fb                   	sti    
c0018d5e:	31 f6                	xor    esi,esi
c0018d60:	eb 58                	jmp    c0018dba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018d62:	0f b7 ed             	movzx  ebp,bp
c0018d65:	50                   	push   eax
c0018d66:	0f b7 ff             	movzx  edi,di
c0018d69:	50                   	push   eax
c0018d6a:	55                   	push   ebp
c0018d6b:	57                   	push   edi
c0018d6c:	e8 95 fd ff ff       	call   c0018b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0018d71:	5a                   	pop    edx
c0018d72:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018d74:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018d78:	51                   	push   ecx
c0018d79:	50                   	push   eax
c0018d7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d7e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d82:	53                   	push   ebx
c0018d83:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018d86:	83 c4 14             	add    esp,0x14
c0018d89:	53                   	push   ebx
c0018d8a:	e8 99 43 ff ff       	call   c000d128 <File::close()>
c0018d8f:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c0018d94:	83 c4 10             	add    esp,0x10
c0018d97:	48                   	dec    eax
c0018d98:	c6 05 c5 79 02 c0 00 	mov    BYTE PTR ds:0xc00279c5,0x0
c0018d9f:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0018da4:	85 c0                	test   eax,eax
c0018da6:	75 01                	jne    c0018da9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018da8:	fb                   	sti    
c0018da9:	83 ec 0c             	sub    esp,0xc
c0018dac:	ff 35 c8 79 02 c0    	push   DWORD PTR ds:0xc00279c8
c0018db2:	e8 95 f6 ff ff       	call   c001844c <unblockTask(ThreadControlBlock*)>
c0018db7:	83 c4 10             	add    esp,0x10
c0018dba:	83 c4 2c             	add    esp,0x2c
c0018dbd:	89 f0                	mov    eax,esi
c0018dbf:	5b                   	pop    ebx
c0018dc0:	5e                   	pop    esi
c0018dc1:	5f                   	pop    edi
c0018dc2:	5d                   	pop    ebp
c0018dc3:	c3                   	ret    

c0018dc4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018dc4:	57                   	push   edi
c0018dc5:	56                   	push   esi
c0018dc6:	53                   	push   ebx
c0018dc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018dcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018dcf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018dd3:	83 e8 06             	sub    eax,0x6
c0018dd6:	0f b7 c0             	movzx  eax,ax
c0018dd9:	50                   	push   eax
c0018dda:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018ddf:	50                   	push   eax
c0018de0:	e8 21 fd ff ff       	call   c0018b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0018de5:	5a                   	pop    edx
c0018de6:	5e                   	pop    esi
c0018de7:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018dea:	8d 56 fa             	lea    edx,[esi-0x6]
c0018ded:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018df3:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018df6:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018df9:	83 c2 02             	add    edx,0x2
c0018dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0018dff:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018e02:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018e06:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018e09:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018e0d:	89 d6                	mov    esi,edx
c0018e0f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018e15:	66 81 e6 ff fd       	and    si,0xfdff
c0018e1a:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018e1e:	74 07                	je     c0018e27 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018e20:	89 d6                	mov    esi,edx
c0018e22:	66 81 ce 00 02       	or     si,0x200
c0018e27:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018e2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e30:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018e34:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018e3c:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018e3f:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018e47:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018e4a:	5b                   	pop    ebx
c0018e4b:	5e                   	pop    esi
c0018e4c:	5f                   	pop    edi
c0018e4d:	c3                   	ret    

c0018e4e <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018e4e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e53:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e58:	c1 e0 04             	shl    eax,0x4
c0018e5b:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018e5e:	c3                   	ret    

c0018e5f <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018e5f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e64:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e69:	c1 e0 04             	shl    eax,0x4
c0018e6c:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018e70:	c3                   	ret    

c0018e71 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018e71:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e76:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e7b:	c1 e0 04             	shl    eax,0x4
c0018e7e:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018e81:	c3                   	ret    

c0018e82 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018e82:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e87:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e8c:	c1 e0 04             	shl    eax,0x4
c0018e8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e93:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e96:	c3                   	ret    

c0018e97 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e97:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e9c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018ea1:	c1 e0 04             	shl    eax,0x4
c0018ea4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ea8:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018eac:	c3                   	ret    

c0018ead <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018ead:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018eb2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018eb7:	c1 e0 04             	shl    eax,0x4
c0018eba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ebe:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018ec1:	c3                   	ret    

c0018ec2 <Vm::faultHandler(regs*)>:
c0018ec2:	55                   	push   ebp
c0018ec3:	57                   	push   edi
c0018ec4:	56                   	push   esi
c0018ec5:	53                   	push   ebx
c0018ec6:	83 ec 1c             	sub    esp,0x1c
c0018ec9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018ecd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ed0:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018ed4:	0f b7 f8             	movzx  edi,ax
c0018ed7:	52                   	push   edx
c0018ed8:	0f b7 c0             	movzx  eax,ax
c0018edb:	50                   	push   eax
c0018edc:	e8 25 fc ff ff       	call   c0018b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0018ee1:	5a                   	pop    edx
c0018ee2:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018ee5:	59                   	pop    ecx
c0018ee6:	89 c1                	mov    ecx,eax
c0018ee8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018eeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ef4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ef8:	0f b7 c5             	movzx  eax,bp
c0018efb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018eff:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018f03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018f07:	e8 fa fb ff ff       	call   c0018b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0018f0c:	5e                   	pop    esi
c0018f0d:	be 06 00 00 00       	mov    esi,0x6
c0018f12:	5a                   	pop    edx
c0018f13:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018f18:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018f1d:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018f20:	80 fa 9d             	cmp    dl,0x9d
c0018f23:	0f 84 2c 02 00 00    	je     c0019155 <Vm::faultHandler(regs*)+0x293>
c0018f29:	0f 87 91 00 00 00    	ja     c0018fc0 <Vm::faultHandler(regs*)+0xfe>
c0018f2f:	80 fa 66             	cmp    dl,0x66
c0018f32:	0f 84 98 01 00 00    	je     c00190d0 <Vm::faultHandler(regs*)+0x20e>
c0018f38:	77 47                	ja     c0018f81 <Vm::faultHandler(regs*)+0xbf>
c0018f3a:	80 fa 36             	cmp    dl,0x36
c0018f3d:	0f 84 80 01 00 00    	je     c00190c3 <Vm::faultHandler(regs*)+0x201>
c0018f43:	77 1a                	ja     c0018f5f <Vm::faultHandler(regs*)+0x9d>
c0018f45:	80 fa 26             	cmp    dl,0x26
c0018f48:	0f 84 4e 01 00 00    	je     c001909c <Vm::faultHandler(regs*)+0x1da>
c0018f4e:	80 fa 2e             	cmp    dl,0x2e
c0018f51:	0f 85 e2 05 00 00    	jne    c0019539 <Vm::faultHandler(regs*)+0x677>
c0018f57:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f5a:	31 f6                	xor    esi,esi
c0018f5c:	41                   	inc    ecx
c0018f5d:	eb be                	jmp    c0018f1d <Vm::faultHandler(regs*)+0x5b>
c0018f5f:	80 fa 64             	cmp    dl,0x64
c0018f62:	0f 84 41 01 00 00    	je     c00190a9 <Vm::faultHandler(regs*)+0x1e7>
c0018f68:	0f 87 48 01 00 00    	ja     c00190b6 <Vm::faultHandler(regs*)+0x1f4>
c0018f6e:	80 fa 3e             	cmp    dl,0x3e
c0018f71:	0f 85 c2 05 00 00    	jne    c0019539 <Vm::faultHandler(regs*)+0x677>
c0018f77:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f7a:	be 01 00 00 00       	mov    esi,0x1
c0018f7f:	eb db                	jmp    c0018f5c <Vm::faultHandler(regs*)+0x9a>
c0018f81:	80 fa 6d             	cmp    dl,0x6d
c0018f84:	0f 84 ec 02 00 00    	je     c0019276 <Vm::faultHandler(regs*)+0x3b4>
c0018f8a:	77 17                	ja     c0018fa3 <Vm::faultHandler(regs*)+0xe1>
c0018f8c:	80 fa 67             	cmp    dl,0x67
c0018f8f:	0f 84 48 01 00 00    	je     c00190dd <Vm::faultHandler(regs*)+0x21b>
c0018f95:	80 fa 6c             	cmp    dl,0x6c
c0018f98:	0f 84 69 02 00 00    	je     c0019207 <Vm::faultHandler(regs*)+0x345>
c0018f9e:	e9 96 05 00 00       	jmp    c0019539 <Vm::faultHandler(regs*)+0x677>
c0018fa3:	80 fa 6f             	cmp    dl,0x6f
c0018fa6:	0f 84 f4 03 00 00    	je     c00193a0 <Vm::faultHandler(regs*)+0x4de>
c0018fac:	0f 82 59 03 00 00    	jb     c001930b <Vm::faultHandler(regs*)+0x449>
c0018fb2:	80 fa 9c             	cmp    dl,0x9c
c0018fb5:	0f 84 2f 01 00 00    	je     c00190ea <Vm::faultHandler(regs*)+0x228>
c0018fbb:	e9 79 05 00 00       	jmp    c0019539 <Vm::faultHandler(regs*)+0x677>
c0018fc0:	80 fa ec             	cmp    dl,0xec
c0018fc3:	0f 84 14 05 00 00    	je     c00194dd <Vm::faultHandler(regs*)+0x61b>
c0018fc9:	77 7b                	ja     c0019046 <Vm::faultHandler(regs*)+0x184>
c0018fcb:	80 fa e4             	cmp    dl,0xe4
c0018fce:	0f 84 93 04 00 00    	je     c0019467 <Vm::faultHandler(regs*)+0x5a5>
c0018fd4:	77 53                	ja     c0019029 <Vm::faultHandler(regs*)+0x167>
c0018fd6:	80 fa cd             	cmp    dl,0xcd
c0018fd9:	0f 84 d9 01 00 00    	je     c00191b8 <Vm::faultHandler(regs*)+0x2f6>
c0018fdf:	80 fa cf             	cmp    dl,0xcf
c0018fe2:	0f 85 51 05 00 00    	jne    c0019539 <Vm::faultHandler(regs*)+0x677>
c0018fe8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018feb:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018fee:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018ff2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018ff5:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018ff9:	81 ca 00 02 02 00    	or     edx,0x20200
c0018fff:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019002:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019006:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001900c:	66 c1 e8 09          	shr    ax,0x9
c0019010:	83 e0 01             	and    eax,0x1
c0019013:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019016:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019019:	83 c0 06             	add    eax,0x6
c001901c:	25 ff ff 00 00       	and    eax,0xffff
c0019021:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019024:	e9 0c 05 00 00       	jmp    c0019535 <Vm::faultHandler(regs*)+0x673>
c0019029:	80 fa e6             	cmp    dl,0xe6
c001902c:	0f 84 7f 04 00 00    	je     c00194b1 <Vm::faultHandler(regs*)+0x5ef>
c0019032:	0f 82 4b 04 00 00    	jb     c0019483 <Vm::faultHandler(regs*)+0x5c1>
c0019038:	80 fa e7             	cmp    dl,0xe7
c001903b:	0f 84 87 04 00 00    	je     c00194c8 <Vm::faultHandler(regs*)+0x606>
c0019041:	e9 f3 04 00 00       	jmp    c0019539 <Vm::faultHandler(regs*)+0x677>
c0019046:	80 fa ef             	cmp    dl,0xef
c0019049:	0f 84 d1 04 00 00    	je     c0019520 <Vm::faultHandler(regs*)+0x65e>
c001904f:	77 28                	ja     c0019079 <Vm::faultHandler(regs*)+0x1b7>
c0019051:	80 fa ed             	cmp    dl,0xed
c0019054:	0f 84 9f 04 00 00    	je     c00194f9 <Vm::faultHandler(regs*)+0x637>
c001905a:	80 fa ee             	cmp    dl,0xee
c001905d:	0f 85 d6 04 00 00    	jne    c0019539 <Vm::faultHandler(regs*)+0x677>
c0019063:	50                   	push   eax
c0019064:	50                   	push   eax
c0019065:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019069:	50                   	push   eax
c001906a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001906e:	50                   	push   eax
c001906f:	e8 5c fa ff ff       	call   c0018ad0 <Vm::outbv(unsigned short, unsigned char)>
c0019074:	e9 9f 04 00 00       	jmp    c0019518 <Vm::faultHandler(regs*)+0x656>
c0019079:	80 fa fa             	cmp    dl,0xfa
c001907c:	0f 84 69 01 00 00    	je     c00191eb <Vm::faultHandler(regs*)+0x329>
c0019082:	80 fa fb             	cmp    dl,0xfb
c0019085:	0f 84 6e 01 00 00    	je     c00191f9 <Vm::faultHandler(regs*)+0x337>
c001908b:	80 fa f3             	cmp    dl,0xf3
c001908e:	0f 85 a5 04 00 00    	jne    c0019539 <Vm::faultHandler(regs*)+0x677>
c0019094:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019097:	e9 c0 fe ff ff       	jmp    c0018f5c <Vm::faultHandler(regs*)+0x9a>
c001909c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001909f:	be 02 00 00 00       	mov    esi,0x2
c00190a4:	e9 b3 fe ff ff       	jmp    c0018f5c <Vm::faultHandler(regs*)+0x9a>
c00190a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190ac:	be 03 00 00 00       	mov    esi,0x3
c00190b1:	e9 a6 fe ff ff       	jmp    c0018f5c <Vm::faultHandler(regs*)+0x9a>
c00190b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190b9:	be 04 00 00 00       	mov    esi,0x4
c00190be:	e9 99 fe ff ff       	jmp    c0018f5c <Vm::faultHandler(regs*)+0x9a>
c00190c3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190c6:	be 05 00 00 00       	mov    esi,0x5
c00190cb:	e9 8c fe ff ff       	jmp    c0018f5c <Vm::faultHandler(regs*)+0x9a>
c00190d0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190d3:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00190d8:	e9 7f fe ff ff       	jmp    c0018f5c <Vm::faultHandler(regs*)+0x9a>
c00190dd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190e0:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00190e5:	e9 72 fe ff ff       	jmp    c0018f5c <Vm::faultHandler(regs*)+0x9a>
c00190ea:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00190ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00190f1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190f6:	74 30                	je     c0019128 <Vm::faultHandler(regs*)+0x266>
c00190f8:	83 e9 04             	sub    ecx,0x4
c00190fb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019101:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019107:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001910a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001910d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019113:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019117:	0f 84 15 04 00 00    	je     c0019532 <Vm::faultHandler(regs*)+0x670>
c001911d:	80 ce 02             	or     dh,0x2
c0019120:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019123:	e9 0a 04 00 00       	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c0019128:	83 e9 02             	sub    ecx,0x2
c001912b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019131:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019134:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019138:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001913e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019142:	74 05                	je     c0019149 <Vm::faultHandler(regs*)+0x287>
c0019144:	80 ce 02             	or     dh,0x2
c0019147:	eb 03                	jmp    c001914c <Vm::faultHandler(regs*)+0x28a>
c0019149:	80 e6 fd             	and    dh,0xfd
c001914c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019150:	e9 dd 03 00 00       	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c0019155:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001915a:	74 2a                	je     c0019186 <Vm::faultHandler(regs*)+0x2c4>
c001915c:	8b 10                	mov    edx,DWORD PTR [eax]
c001915e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019164:	81 ca 00 02 02 00    	or     edx,0x20200
c001916a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001916d:	8b 00                	mov    eax,DWORD PTR [eax]
c001916f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019175:	c1 e8 09             	shr    eax,0x9
c0019178:	83 e0 01             	and    eax,0x1
c001917b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001917e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019181:	83 c0 04             	add    eax,0x4
c0019184:	eb 25                	jmp    c00191ab <Vm::faultHandler(regs*)+0x2e9>
c0019186:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019189:	81 ca 00 02 02 00    	or     edx,0x20200
c001918f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019192:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019195:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001919b:	66 c1 e8 09          	shr    ax,0x9
c001919f:	83 e0 01             	and    eax,0x1
c00191a2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00191a5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00191a8:	83 c0 02             	add    eax,0x2
c00191ab:	25 ff ff 00 00       	and    eax,0xffff
c00191b0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00191b3:	e9 7a 03 00 00       	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c00191b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191bc:	3c ee                	cmp    al,0xee
c00191be:	75 10                	jne    c00191d0 <Vm::faultHandler(regs*)+0x30e>
c00191c0:	83 ec 0c             	sub    esp,0xc
c00191c3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00191c6:	e8 a2 f9 ff ff       	call   c0018b6d <Vm::mainloop3(unsigned long)>
c00191cb:	e9 4b 03 00 00       	jmp    c001951b <Vm::faultHandler(regs*)+0x659>
c00191d0:	83 ec 0c             	sub    esp,0xc
c00191d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00191d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191db:	51                   	push   ecx
c00191dc:	50                   	push   eax
c00191dd:	53                   	push   ebx
c00191de:	e8 e1 fb ff ff       	call   c0018dc4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00191e3:	83 c4 20             	add    esp,0x20
c00191e6:	e9 4a 03 00 00       	jmp    c0019535 <Vm::faultHandler(regs*)+0x673>
c00191eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191f0:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00191f4:	e9 39 03 00 00       	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c00191f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191fe:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0019202:	e9 2b 03 00 00       	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c0019207:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001920a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001920f:	74 2b                	je     c001923c <Vm::faultHandler(regs*)+0x37a>
c0019211:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019218:	76 22                	jbe    c001923c <Vm::faultHandler(regs*)+0x37a>
c001921a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001921e:	50                   	push   eax
c001921f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019223:	50                   	push   eax
c0019224:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019228:	50                   	push   eax
c0019229:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001922d:	50                   	push   eax
c001922e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019232:	50                   	push   eax
c0019233:	6a 6c                	push   0x6c
c0019235:	6a 6c                	push   0x6c
c0019237:	e9 b9 01 00 00       	jmp    c00193f5 <Vm::faultHandler(regs*)+0x533>
c001923c:	83 ec 0c             	sub    esp,0xc
c001923f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019243:	0f b7 f6             	movzx  esi,si
c0019246:	50                   	push   eax
c0019247:	e8 71 f8 ff ff       	call   c0018abd <Vm::inbv(unsigned short)>
c001924c:	83 c4 0c             	add    esp,0xc
c001924f:	0f b6 c0             	movzx  eax,al
c0019252:	50                   	push   eax
c0019253:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019257:	50                   	push   eax
c0019258:	56                   	push   esi
c0019259:	e8 24 fc ff ff       	call   c0018e82 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001925e:	83 c4 10             	add    esp,0x10
c0019261:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019264:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019268:	74 03                	je     c001926d <Vm::faultHandler(regs*)+0x3ab>
c001926a:	48                   	dec    eax
c001926b:	eb 01                	jmp    c001926e <Vm::faultHandler(regs*)+0x3ac>
c001926d:	40                   	inc    eax
c001926e:	0f b7 c0             	movzx  eax,ax
c0019271:	e9 8d 00 00 00       	jmp    c0019303 <Vm::faultHandler(regs*)+0x441>
c0019276:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019279:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001927c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019281:	74 29                	je     c00192ac <Vm::faultHandler(regs*)+0x3ea>
c0019283:	3d ff ff 00 00       	cmp    eax,0xffff
c0019288:	76 22                	jbe    c00192ac <Vm::faultHandler(regs*)+0x3ea>
c001928a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001928e:	50                   	push   eax
c001928f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019293:	50                   	push   eax
c0019294:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019298:	50                   	push   eax
c0019299:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001929d:	50                   	push   eax
c001929e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00192a2:	50                   	push   eax
c00192a3:	6a 6d                	push   0x6d
c00192a5:	6a 6d                	push   0x6d
c00192a7:	e9 49 01 00 00       	jmp    c00193f5 <Vm::faultHandler(regs*)+0x533>
c00192ac:	0f b7 c8             	movzx  ecx,ax
c00192af:	0f b7 f6             	movzx  esi,si
c00192b2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00192b5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00192ba:	74 20                	je     c00192dc <Vm::faultHandler(regs*)+0x41a>
c00192bc:	ed                   	in     eax,dx
c00192bd:	55                   	push   ebp
c00192be:	50                   	push   eax
c00192bf:	51                   	push   ecx
c00192c0:	56                   	push   esi
c00192c1:	e8 e7 fb ff ff       	call   c0018ead <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00192c6:	83 c4 10             	add    esp,0x10
c00192c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00192cc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192d0:	74 05                	je     c00192d7 <Vm::faultHandler(regs*)+0x415>
c00192d2:	83 e8 04             	sub    eax,0x4
c00192d5:	eb 27                	jmp    c00192fe <Vm::faultHandler(regs*)+0x43c>
c00192d7:	83 c0 04             	add    eax,0x4
c00192da:	eb 22                	jmp    c00192fe <Vm::faultHandler(regs*)+0x43c>
c00192dc:	66 ed                	in     ax,dx
c00192de:	0f b7 c0             	movzx  eax,ax
c00192e1:	57                   	push   edi
c00192e2:	50                   	push   eax
c00192e3:	51                   	push   ecx
c00192e4:	56                   	push   esi
c00192e5:	e8 ad fb ff ff       	call   c0018e97 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00192ea:	83 c4 10             	add    esp,0x10
c00192ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00192f0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192f4:	74 05                	je     c00192fb <Vm::faultHandler(regs*)+0x439>
c00192f6:	83 e8 02             	sub    eax,0x2
c00192f9:	eb 03                	jmp    c00192fe <Vm::faultHandler(regs*)+0x43c>
c00192fb:	83 c0 02             	add    eax,0x2
c00192fe:	25 ff ff 00 00       	and    eax,0xffff
c0019303:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019306:	e9 27 02 00 00       	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c001930b:	8d 46 ff             	lea    eax,[esi-0x1]
c001930e:	3c 05                	cmp    al,0x5
c0019310:	77 24                	ja     c0019336 <Vm::faultHandler(regs*)+0x474>
c0019312:	0f b6 c0             	movzx  eax,al
c0019315:	ff 24 85 dc 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb524]
c001931c:	0f b7 fd             	movzx  edi,bp
c001931f:	eb 15                	jmp    c0019336 <Vm::faultHandler(regs*)+0x474>
c0019321:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019325:	eb 0f                	jmp    c0019336 <Vm::faultHandler(regs*)+0x474>
c0019327:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001932b:	eb 09                	jmp    c0019336 <Vm::faultHandler(regs*)+0x474>
c001932d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019331:	eb 03                	jmp    c0019336 <Vm::faultHandler(regs*)+0x474>
c0019333:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019336:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019339:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001933e:	74 29                	je     c0019369 <Vm::faultHandler(regs*)+0x4a7>
c0019340:	3d ff ff 00 00       	cmp    eax,0xffff
c0019345:	76 22                	jbe    c0019369 <Vm::faultHandler(regs*)+0x4a7>
c0019347:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001934b:	50                   	push   eax
c001934c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019350:	50                   	push   eax
c0019351:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019355:	50                   	push   eax
c0019356:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001935a:	50                   	push   eax
c001935b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001935f:	50                   	push   eax
c0019360:	6a 6e                	push   0x6e
c0019362:	6a 6e                	push   0x6e
c0019364:	e9 8c 00 00 00       	jmp    c00193f5 <Vm::faultHandler(regs*)+0x533>
c0019369:	0f b7 c0             	movzx  eax,ax
c001936c:	52                   	push   edx
c001936d:	52                   	push   edx
c001936e:	50                   	push   eax
c001936f:	57                   	push   edi
c0019370:	e8 d9 fa ff ff       	call   c0018e4e <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019375:	59                   	pop    ecx
c0019376:	0f b6 c0             	movzx  eax,al
c0019379:	5e                   	pop    esi
c001937a:	50                   	push   eax
c001937b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001937f:	50                   	push   eax
c0019380:	e8 4b f7 ff ff       	call   c0018ad0 <Vm::outbv(unsigned short, unsigned char)>
c0019385:	83 c4 10             	add    esp,0x10
c0019388:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001938b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001938f:	74 03                	je     c0019394 <Vm::faultHandler(regs*)+0x4d2>
c0019391:	48                   	dec    eax
c0019392:	eb 01                	jmp    c0019395 <Vm::faultHandler(regs*)+0x4d3>
c0019394:	40                   	inc    eax
c0019395:	0f b7 c0             	movzx  eax,ax
c0019398:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001939b:	e9 92 01 00 00       	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c00193a0:	8d 46 ff             	lea    eax,[esi-0x1]
c00193a3:	3c 05                	cmp    al,0x5
c00193a5:	77 1f                	ja     c00193c6 <Vm::faultHandler(regs*)+0x504>
c00193a7:	0f b6 c0             	movzx  eax,al
c00193aa:	ff 24 85 f4 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb50c]
c00193b1:	89 ef                	mov    edi,ebp
c00193b3:	eb 11                	jmp    c00193c6 <Vm::faultHandler(regs*)+0x504>
c00193b5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00193b8:	eb 0c                	jmp    c00193c6 <Vm::faultHandler(regs*)+0x504>
c00193ba:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00193bd:	eb 07                	jmp    c00193c6 <Vm::faultHandler(regs*)+0x504>
c00193bf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00193c2:	eb 02                	jmp    c00193c6 <Vm::faultHandler(regs*)+0x504>
c00193c4:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00193c6:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00193c9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00193ce:	74 37                	je     c0019407 <Vm::faultHandler(regs*)+0x545>
c00193d0:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00193d6:	76 2f                	jbe    c0019407 <Vm::faultHandler(regs*)+0x545>
c00193d8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00193dc:	50                   	push   eax
c00193dd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00193e1:	50                   	push   eax
c00193e2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00193e6:	50                   	push   eax
c00193e7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00193eb:	50                   	push   eax
c00193ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193f0:	50                   	push   eax
c00193f1:	6a 6f                	push   0x6f
c00193f3:	6a 6f                	push   0x6f
c00193f5:	68 82 4a 02 c0       	push   0xc0024a82
c00193fa:	e8 fc 36 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c00193ff:	83 c4 20             	add    esp,0x20
c0019402:	e9 86 01 00 00       	jmp    c001958d <Vm::faultHandler(regs*)+0x6cb>
c0019407:	0f b7 d7             	movzx  edx,di
c001940a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001940d:	0f b7 c6             	movzx  eax,si
c0019410:	81 e1 00 04 00 00    	and    ecx,0x400
c0019416:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019419:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001941e:	74 1d                	je     c001943d <Vm::faultHandler(regs*)+0x57b>
c0019420:	55                   	push   ebp
c0019421:	55                   	push   ebp
c0019422:	50                   	push   eax
c0019423:	52                   	push   edx
c0019424:	e8 48 fa ff ff       	call   c0018e71 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019429:	83 c4 10             	add    esp,0x10
c001942c:	89 fa                	mov    edx,edi
c001942e:	ef                   	out    dx,eax
c001942f:	85 c9                	test   ecx,ecx
c0019431:	74 05                	je     c0019438 <Vm::faultHandler(regs*)+0x576>
c0019433:	83 ee 04             	sub    esi,0x4
c0019436:	eb 21                	jmp    c0019459 <Vm::faultHandler(regs*)+0x597>
c0019438:	83 c6 04             	add    esi,0x4
c001943b:	eb 1c                	jmp    c0019459 <Vm::faultHandler(regs*)+0x597>
c001943d:	55                   	push   ebp
c001943e:	55                   	push   ebp
c001943f:	50                   	push   eax
c0019440:	52                   	push   edx
c0019441:	e8 19 fa ff ff       	call   c0018e5f <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019446:	83 c4 10             	add    esp,0x10
c0019449:	89 fa                	mov    edx,edi
c001944b:	66 ef                	out    dx,ax
c001944d:	85 c9                	test   ecx,ecx
c001944f:	74 05                	je     c0019456 <Vm::faultHandler(regs*)+0x594>
c0019451:	83 ee 02             	sub    esi,0x2
c0019454:	eb 03                	jmp    c0019459 <Vm::faultHandler(regs*)+0x597>
c0019456:	83 c6 02             	add    esi,0x2
c0019459:	81 e6 ff ff 00 00    	and    esi,0xffff
c001945f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019462:	e9 cb 00 00 00       	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c0019467:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001946e:	83 ec 0c             	sub    esp,0xc
c0019471:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019475:	50                   	push   eax
c0019476:	e8 42 f6 ff ff       	call   c0018abd <Vm::inbv(unsigned short)>
c001947b:	0f b6 c0             	movzx  eax,al
c001947e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019481:	eb 3f                	jmp    c00194c2 <Vm::faultHandler(regs*)+0x600>
c0019483:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019488:	74 07                	je     c0019491 <Vm::faultHandler(regs*)+0x5cf>
c001948a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001948e:	ed                   	in     eax,dx
c001948f:	eb 14                	jmp    c00194a5 <Vm::faultHandler(regs*)+0x5e3>
c0019491:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019494:	66 31 f6             	xor    si,si
c0019497:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001949a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001949e:	66 ed                	in     ax,dx
c00194a0:	0f b7 c0             	movzx  eax,ax
c00194a3:	09 f0                	or     eax,esi
c00194a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00194a8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00194ac:	e9 84 00 00 00       	jmp    c0019535 <Vm::faultHandler(regs*)+0x673>
c00194b1:	52                   	push   edx
c00194b2:	52                   	push   edx
c00194b3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00194b7:	50                   	push   eax
c00194b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00194bc:	50                   	push   eax
c00194bd:	e8 0e f6 ff ff       	call   c0018ad0 <Vm::outbv(unsigned short, unsigned char)>
c00194c2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00194c6:	eb 53                	jmp    c001951b <Vm::faultHandler(regs*)+0x659>
c00194c8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00194cb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00194cf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194d4:	74 03                	je     c00194d9 <Vm::faultHandler(regs*)+0x617>
c00194d6:	ef                   	out    dx,eax
c00194d7:	eb cf                	jmp    c00194a8 <Vm::faultHandler(regs*)+0x5e6>
c00194d9:	66 ef                	out    dx,ax
c00194db:	eb cb                	jmp    c00194a8 <Vm::faultHandler(regs*)+0x5e6>
c00194dd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00194e4:	83 ec 0c             	sub    esp,0xc
c00194e7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00194eb:	50                   	push   eax
c00194ec:	e8 cc f5 ff ff       	call   c0018abd <Vm::inbv(unsigned short)>
c00194f1:	0f b6 c0             	movzx  eax,al
c00194f4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00194f7:	eb 1f                	jmp    c0019518 <Vm::faultHandler(regs*)+0x656>
c00194f9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00194fc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019501:	74 03                	je     c0019506 <Vm::faultHandler(regs*)+0x644>
c0019503:	ed                   	in     eax,dx
c0019504:	eb 0d                	jmp    c0019513 <Vm::faultHandler(regs*)+0x651>
c0019506:	66 ed                	in     ax,dx
c0019508:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001950b:	0f b7 c0             	movzx  eax,ax
c001950e:	66 31 d2             	xor    dx,dx
c0019511:	09 d0                	or     eax,edx
c0019513:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019516:	eb 1a                	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c0019518:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001951b:	83 c4 10             	add    esp,0x10
c001951e:	eb 15                	jmp    c0019535 <Vm::faultHandler(regs*)+0x673>
c0019520:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019523:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019526:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001952b:	74 03                	je     c0019530 <Vm::faultHandler(regs*)+0x66e>
c001952d:	ef                   	out    dx,eax
c001952e:	eb 02                	jmp    c0019532 <Vm::faultHandler(regs*)+0x670>
c0019530:	66 ef                	out    dx,ax
c0019532:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019535:	b0 01                	mov    al,0x1
c0019537:	eb 56                	jmp    c001958f <Vm::faultHandler(regs*)+0x6cd>
c0019539:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001953d:	50                   	push   eax
c001953e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019542:	50                   	push   eax
c0019543:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019547:	50                   	push   eax
c0019548:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001954c:	50                   	push   eax
c001954d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019551:	50                   	push   eax
c0019552:	52                   	push   edx
c0019553:	52                   	push   edx
c0019554:	68 af 4a 02 c0       	push   0xc0024aaf
c0019559:	e8 9d 35 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001955e:	83 c4 20             	add    esp,0x20
c0019561:	83 ec 0c             	sub    esp,0xc
c0019564:	6a 60                	push   0x60
c0019566:	e8 52 f5 ff ff       	call   c0018abd <Vm::inbv(unsigned short)>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	3c 1c                	cmp    al,0x1c
c0019570:	74 04                	je     c0019576 <Vm::faultHandler(regs*)+0x6b4>
c0019572:	3c 5a                	cmp    al,0x5a
c0019574:	75 eb                	jne    c0019561 <Vm::faultHandler(regs*)+0x69f>
c0019576:	3c 5a                	cmp    al,0x5a
c0019578:	74 04                	je     c001957e <Vm::faultHandler(regs*)+0x6bc>
c001957a:	3c 1c                	cmp    al,0x1c
c001957c:	75 0f                	jne    c001958d <Vm::faultHandler(regs*)+0x6cb>
c001957e:	83 ec 0c             	sub    esp,0xc
c0019581:	6a 60                	push   0x60
c0019583:	e8 35 f5 ff ff       	call   c0018abd <Vm::inbv(unsigned short)>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	eb e9                	jmp    c0019576 <Vm::faultHandler(regs*)+0x6b4>
c001958d:	31 c0                	xor    eax,eax
c001958f:	83 c4 1c             	add    esp,0x1c
c0019592:	5b                   	pop    ebx
c0019593:	5e                   	pop    esi
c0019594:	5f                   	pop    edi
c0019595:	5d                   	pop    ebp
c0019596:	c3                   	ret    
c0019597:	90                   	nop

c0019598 <Vm::fpuInternalTo32(unsigned long long)>:
c0019598:	57                   	push   edi
c0019599:	56                   	push   esi
c001959a:	53                   	push   ebx
c001959b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001959f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195a3:	89 d6                	mov    esi,edx
c00195a5:	89 d7                	mov    edi,edx
c00195a7:	89 c1                	mov    ecx,eax
c00195a9:	c1 ef 14             	shr    edi,0x14
c00195ac:	89 d3                	mov    ebx,edx
c00195ae:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00195b4:	31 d2                	xor    edx,edx
c00195b6:	89 f8                	mov    eax,edi
c00195b8:	81 e6 00 00 00 80    	and    esi,0x80000000
c00195be:	bf ff 00 00 00       	mov    edi,0xff
c00195c3:	05 80 fc ff ff       	add    eax,0xfffffc80
c00195c8:	83 d2 ff             	adc    edx,0xffffffff
c00195cb:	39 c7                	cmp    edi,eax
c00195cd:	bf 00 00 00 00       	mov    edi,0x0
c00195d2:	19 d7                	sbb    edi,edx
c00195d4:	72 16                	jb     c00195ec <Vm::fpuInternalTo32(unsigned long long)+0x54>
c00195d6:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c00195da:	c1 e0 17             	shl    eax,0x17
c00195dd:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00195e3:	09 f1                	or     ecx,esi
c00195e5:	09 c1                	or     ecx,eax
c00195e7:	89 cf                	mov    edi,ecx
c00195e9:	eb 05                	jmp    c00195f0 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c00195eb:	90                   	nop
c00195ec:	31 ff                	xor    edi,edi
c00195ee:	66 90                	xchg   ax,ax
c00195f0:	89 f8                	mov    eax,edi
c00195f2:	5b                   	pop    ebx
c00195f3:	5e                   	pop    esi
c00195f4:	5f                   	pop    edi
c00195f5:	c3                   	ret    

c00195f6 <Vm::fpuInternalTo64(unsigned long long)>:
c00195f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195fe:	c3                   	ret    

c00195ff <Vm::fpu32ToInternal(unsigned int)>:
c00195ff:	57                   	push   edi
c0019600:	31 ff                	xor    edi,edi
c0019602:	56                   	push   esi
c0019603:	53                   	push   ebx
c0019604:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019608:	89 cb                	mov    ebx,ecx
c001960a:	89 ce                	mov    esi,ecx
c001960c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019612:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019618:	c1 e9 17             	shr    ecx,0x17
c001961b:	89 f0                	mov    eax,esi
c001961d:	0f b6 d1             	movzx  edx,cl
c0019620:	81 c2 80 03 00 00    	add    edx,0x380
c0019626:	89 d1                	mov    ecx,edx
c0019628:	89 fa                	mov    edx,edi
c001962a:	c1 e1 14             	shl    ecx,0x14
c001962d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019631:	c1 e0 1d             	shl    eax,0x1d
c0019634:	89 d7                	mov    edi,edx
c0019636:	89 c6                	mov    esi,eax
c0019638:	89 ca                	mov    edx,ecx
c001963a:	89 f0                	mov    eax,esi
c001963c:	09 fa                	or     edx,edi
c001963e:	09 da                	or     edx,ebx
c0019640:	5b                   	pop    ebx
c0019641:	5e                   	pop    esi
c0019642:	5f                   	pop    edi
c0019643:	c3                   	ret    

c0019644 <Vm::fpu64ToInternal(unsigned long long)>:
c0019644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001964c:	c3                   	ret    

c001964d <Vm::fpuFloatToLong(unsigned long long)>:
c001964d:	57                   	push   edi
c001964e:	31 c0                	xor    eax,eax
c0019650:	56                   	push   esi
c0019651:	31 d2                	xor    edx,edx
c0019653:	53                   	push   ebx
c0019654:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019658:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001965c:	89 d9                	mov    ecx,ebx
c001965e:	c1 e9 14             	shr    ecx,0x14
c0019661:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019667:	89 cf                	mov    edi,ecx
c0019669:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001966f:	78 37                	js     c00196a8 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019671:	89 d9                	mov    ecx,ebx
c0019673:	89 f0                	mov    eax,esi
c0019675:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001967b:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019681:	89 ca                	mov    edx,ecx
c0019683:	b9 34 00 00 00       	mov    ecx,0x34
c0019688:	29 f9                	sub    ecx,edi
c001968a:	0f ad d0             	shrd   eax,edx,cl
c001968d:	d3 fa                	sar    edx,cl
c001968f:	f6 c1 20             	test   cl,0x20
c0019692:	74 08                	je     c001969c <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019694:	89 d0                	mov    eax,edx
c0019696:	c1 fa 1f             	sar    edx,0x1f
c0019699:	8d 76 00             	lea    esi,[esi+0x0]
c001969c:	85 db                	test   ebx,ebx
c001969e:	79 08                	jns    c00196a8 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00196a0:	f7 d8                	neg    eax
c00196a2:	83 d2 00             	adc    edx,0x0
c00196a5:	f7 da                	neg    edx
c00196a7:	90                   	nop
c00196a8:	5b                   	pop    ebx
c00196a9:	5e                   	pop    esi
c00196aa:	5f                   	pop    edi
c00196ab:	c3                   	ret    

c00196ac <Vm::fpuULongToFloat(unsigned long long)>:
c00196ac:	57                   	push   edi
c00196ad:	31 c9                	xor    ecx,ecx
c00196af:	56                   	push   esi
c00196b0:	53                   	push   ebx
c00196b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00196b9:	8d 76 00             	lea    esi,[esi+0x0]
c00196bc:	0f ba e7 14          	bt     edi,0x14
c00196c0:	72 0a                	jb     c00196cc <Vm::fpuULongToFloat(unsigned long long)+0x20>
c00196c2:	01 f6                	add    esi,esi
c00196c4:	11 ff                	adc    edi,edi
c00196c6:	41                   	inc    ecx
c00196c7:	eb f3                	jmp    c00196bc <Vm::fpuULongToFloat(unsigned long long)+0x10>
c00196c9:	8d 76 00             	lea    esi,[esi+0x0]
c00196cc:	89 fa                	mov    edx,edi
c00196ce:	89 f0                	mov    eax,esi
c00196d0:	bb 33 04 00 00       	mov    ebx,0x433
c00196d5:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00196db:	29 cb                	sub    ebx,ecx
c00196dd:	89 d9                	mov    ecx,ebx
c00196df:	5b                   	pop    ebx
c00196e0:	c1 e1 14             	shl    ecx,0x14
c00196e3:	5e                   	pop    esi
c00196e4:	09 ca                	or     edx,ecx
c00196e6:	5f                   	pop    edi
c00196e7:	c3                   	ret    

c00196e8 <Vm::fpuLongToFloat(long long)>:
c00196e8:	56                   	push   esi
c00196e9:	31 c0                	xor    eax,eax
c00196eb:	53                   	push   ebx
c00196ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196f4:	39 c8                	cmp    eax,ecx
c00196f6:	19 d8                	sbb    eax,ebx
c00196f8:	7d 06                	jge    c0019700 <Vm::fpuLongToFloat(long long)+0x18>
c00196fa:	31 f6                	xor    esi,esi
c00196fc:	eb 0e                	jmp    c001970c <Vm::fpuLongToFloat(long long)+0x24>
c00196fe:	66 90                	xchg   ax,ax
c0019700:	f7 d9                	neg    ecx
c0019702:	be 01 00 00 00       	mov    esi,0x1
c0019707:	83 d3 00             	adc    ebx,0x0
c001970a:	f7 db                	neg    ebx
c001970c:	31 c0                	xor    eax,eax
c001970e:	66 90                	xchg   ax,ax
c0019710:	0f ba e3 14          	bt     ebx,0x14
c0019714:	72 0a                	jb     c0019720 <Vm::fpuLongToFloat(long long)+0x38>
c0019716:	01 c9                	add    ecx,ecx
c0019718:	11 db                	adc    ebx,ebx
c001971a:	40                   	inc    eax
c001971b:	eb f3                	jmp    c0019710 <Vm::fpuLongToFloat(long long)+0x28>
c001971d:	8d 76 00             	lea    esi,[esi+0x0]
c0019720:	ba 33 04 00 00       	mov    edx,0x433
c0019725:	29 c2                	sub    edx,eax
c0019727:	89 c8                	mov    eax,ecx
c0019729:	c1 e2 14             	shl    edx,0x14
c001972c:	89 d9                	mov    ecx,ebx
c001972e:	89 f3                	mov    ebx,esi
c0019730:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019736:	09 ca                	or     edx,ecx
c0019738:	84 db                	test   bl,bl
c001973a:	74 08                	je     c0019744 <Vm::fpuLongToFloat(long long)+0x5c>
c001973c:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019742:	66 90                	xchg   ax,ax
c0019744:	5b                   	pop    ebx
c0019745:	5e                   	pop    esi
c0019746:	c3                   	ret    

c0019747 <Vm::fpuGet0()>:
c0019747:	31 c0                	xor    eax,eax
c0019749:	31 d2                	xor    edx,edx
c001974b:	c3                   	ret    

c001974c <Vm::fpuGet1()>:
c001974c:	b8 01 00 00 00       	mov    eax,0x1
c0019751:	31 d2                	xor    edx,edx
c0019753:	c3                   	ret    

c0019754 <Vm::fpuGetPi()>:
c0019754:	b8 03 00 00 00       	mov    eax,0x3
c0019759:	31 d2                	xor    edx,edx
c001975b:	c3                   	ret    

c001975c <Vm::fpuGetLog2E()>:
c001975c:	83 ec 18             	sub    esp,0x18
c001975f:	68 0c 4b 02 c0       	push   0xc0024b0c
c0019764:	e8 54 ac ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0019769:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001976e:	31 d2                	xor    edx,edx
c0019770:	83 c4 1c             	add    esp,0x1c
c0019773:	c3                   	ret    

c0019774 <Vm::fpuGetLogE2()>:
c0019774:	83 ec 18             	sub    esp,0x18
c0019777:	68 18 4b 02 c0       	push   0xc0024b18
c001977c:	e8 3c ac ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0019781:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019786:	31 d2                	xor    edx,edx
c0019788:	83 c4 1c             	add    esp,0x1c
c001978b:	c3                   	ret    

c001978c <Vm::fpuGetLog210()>:
c001978c:	83 ec 18             	sub    esp,0x18
c001978f:	68 24 4b 02 c0       	push   0xc0024b24
c0019794:	e8 24 ac ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0019799:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001979e:	31 d2                	xor    edx,edx
c00197a0:	83 c4 1c             	add    esp,0x1c
c00197a3:	c3                   	ret    

c00197a4 <Vm::fpuGetLog102()>:
c00197a4:	83 ec 18             	sub    esp,0x18
c00197a7:	68 31 4b 02 c0       	push   0xc0024b31
c00197ac:	e8 0c ac ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00197b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00197b6:	31 d2                	xor    edx,edx
c00197b8:	83 c4 1c             	add    esp,0x1c
c00197bb:	c3                   	ret    

c00197bc <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00197bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197c0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00197c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197c8:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00197cc:	0f 92 c0             	setb   al
c00197cf:	c3                   	ret    

c00197d0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00197d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197d8:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00197dc:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00197e0:	09 c2                	or     edx,eax
c00197e2:	0f 94 c0             	sete   al
c00197e5:	c3                   	ret    

c00197e6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00197e6:	57                   	push   edi
c00197e7:	56                   	push   esi
c00197e8:	53                   	push   ebx
c00197e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197f5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197f9:	57                   	push   edi
c00197fa:	56                   	push   esi
c00197fb:	53                   	push   ebx
c00197fc:	51                   	push   ecx
c00197fd:	e8 ce ff ff ff       	call   c00197d0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019802:	83 c4 10             	add    esp,0x10
c0019805:	88 c2                	mov    dl,al
c0019807:	31 c0                	xor    eax,eax
c0019809:	84 d2                	test   dl,dl
c001980b:	75 0f                	jne    c001981c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001980d:	57                   	push   edi
c001980e:	56                   	push   esi
c001980f:	53                   	push   ebx
c0019810:	51                   	push   ecx
c0019811:	e8 a6 ff ff ff       	call   c00197bc <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019816:	83 c4 10             	add    esp,0x10
c0019819:	8d 76 00             	lea    esi,[esi+0x0]
c001981c:	83 e0 01             	and    eax,0x1
c001981f:	5b                   	pop    ebx
c0019820:	88 c1                	mov    cl,al
c0019822:	83 e2 01             	and    edx,0x1
c0019825:	a0 01 7a 02 c0       	mov    al,ds:0xc0027a01
c001982a:	c1 e2 06             	shl    edx,0x6
c001982d:	83 e0 ba             	and    eax,0xffffffba
c0019830:	5e                   	pop    esi
c0019831:	09 c8                	or     eax,ecx
c0019833:	5f                   	pop    edi
c0019834:	09 d0                	or     eax,edx
c0019836:	a2 01 7a 02 c0       	mov    ds:0xc0027a01,al
c001983b:	c3                   	ret    

c001983c <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001983c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019844:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019848:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001984c:	c3                   	ret    

c001984d <Vm::fpuAbs(unsigned long long)>:
c001984d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019851:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019855:	c3                   	ret    

c0019856 <Vm::fpuChs(unsigned long long)>:
c0019856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001985a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001985e:	f7 d8                	neg    eax
c0019860:	83 d2 00             	adc    edx,0x0
c0019863:	f7 da                	neg    edx
c0019865:	c3                   	ret    

c0019866 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019866:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001986a:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001986f:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019873:	eb c7                	jmp    c001983c <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019875 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019875:	53                   	push   ebx
c0019876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001987a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001987e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019882:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019886:	0f af ca             	imul   ecx,edx
c0019889:	0f af d8             	imul   ebx,eax
c001988c:	f7 e2                	mul    edx
c001988e:	01 d9                	add    ecx,ebx
c0019890:	5b                   	pop    ebx
c0019891:	01 ca                	add    edx,ecx
c0019893:	c3                   	ret    

c0019894 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019894:	83 ec 0c             	sub    esp,0xc
c0019897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001989b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001989f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198a7:	e8 18 77 00 00       	call   c0020fc4 <__udivdi3>
c00198ac:	83 c4 1c             	add    esp,0x1c
c00198af:	c3                   	ret    

c00198b0 <Vm::fpuSquare(unsigned long long)>:
c00198b0:	50                   	push   eax
c00198b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00198b9:	52                   	push   edx
c00198ba:	50                   	push   eax
c00198bb:	52                   	push   edx
c00198bc:	50                   	push   eax
c00198bd:	e8 b3 ff ff ff       	call   c0019875 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00198c2:	83 c4 14             	add    esp,0x14
c00198c5:	c3                   	ret    

c00198c6 <Vm::fpuGetReg(int)>:
c00198c6:	83 ec 0c             	sub    esp,0xc
c00198c9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00198ce:	76 10                	jbe    c00198e0 <Vm::fpuGetReg(int)+0x1a>
c00198d0:	83 ec 0c             	sub    esp,0xc
c00198d3:	68 3e 4b 02 c0       	push   0xc0024b3e
c00198d8:	e8 e0 aa ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00198dd:	83 c4 10             	add    esp,0x10
c00198e0:	a0 01 7a 02 c0       	mov    al,ds:0xc0027a01
c00198e5:	b9 08 00 00 00       	mov    ecx,0x8
c00198ea:	c0 e8 03             	shr    al,0x3
c00198ed:	83 e0 07             	and    eax,0x7
c00198f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198f4:	99                   	cdq    
c00198f5:	f7 f9                	idiv   ecx
c00198f7:	8b 04 d5 04 7a 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd85fc]
c00198fe:	8b 14 d5 08 7a 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd85f8]
c0019905:	83 c4 0c             	add    esp,0xc
c0019908:	c3                   	ret    

c0019909 <Vm::fpuSetReg(int, unsigned long long)>:
c0019909:	57                   	push   edi
c001990a:	56                   	push   esi
c001990b:	52                   	push   edx
c001990c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019910:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019914:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019919:	76 11                	jbe    c001992c <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001991b:	83 ec 0c             	sub    esp,0xc
c001991e:	68 51 4b 02 c0       	push   0xc0024b51
c0019923:	e8 95 aa ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	90                   	nop
c001992c:	a0 01 7a 02 c0       	mov    al,ds:0xc0027a01
c0019931:	b9 08 00 00 00       	mov    ecx,0x8
c0019936:	c0 e8 03             	shr    al,0x3
c0019939:	83 e0 07             	and    eax,0x7
c001993c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019940:	99                   	cdq    
c0019941:	f7 f9                	idiv   ecx
c0019943:	89 34 d5 04 7a 02 c0 	mov    DWORD PTR [edx*8-0x3ffd85fc],esi
c001994a:	89 3c d5 08 7a 02 c0 	mov    DWORD PTR [edx*8-0x3ffd85f8],edi
c0019951:	58                   	pop    eax
c0019952:	5e                   	pop    esi
c0019953:	5f                   	pop    edi
c0019954:	c3                   	ret    

c0019955 <Vm::fpuPush(unsigned long long)>:
c0019955:	a0 01 7a 02 c0       	mov    al,ds:0xc0027a01
c001995a:	c0 e8 03             	shr    al,0x3
c001995d:	83 e0 07             	and    eax,0x7
c0019960:	83 c0 07             	add    eax,0x7
c0019963:	88 c2                	mov    dl,al
c0019965:	83 e0 07             	and    eax,0x7
c0019968:	83 e2 07             	and    edx,0x7
c001996b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019972:	8a 15 01 7a 02 c0    	mov    dl,BYTE PTR ds:0xc0027a01
c0019978:	83 e2 c7             	and    edx,0xffffffc7
c001997b:	09 ca                	or     edx,ecx
c001997d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019981:	88 15 01 7a 02 c0    	mov    BYTE PTR ds:0xc0027a01,dl
c0019987:	89 0c c5 08 7a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd85f8],ecx
c001998e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019992:	89 14 c5 04 7a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd85fc],edx
c0019999:	a1 44 7a 02 c0       	mov    eax,ds:0xc0027a44
c001999e:	83 f8 08             	cmp    eax,0x8
c00199a1:	75 09                	jne    c00199ac <Vm::fpuPush(unsigned long long)+0x57>
c00199a3:	80 0d 00 7a 02 c0 40 	or     BYTE PTR ds:0xc0027a00,0x40
c00199aa:	c3                   	ret    
c00199ab:	90                   	nop
c00199ac:	40                   	inc    eax
c00199ad:	a3 44 7a 02 c0       	mov    ds:0xc0027a44,eax
c00199b2:	c3                   	ret    

c00199b3 <Vm::fpuPop()>:
c00199b3:	8a 0d 01 7a 02 c0    	mov    cl,BYTE PTR ds:0xc0027a01
c00199b9:	53                   	push   ebx
c00199ba:	c0 e9 03             	shr    cl,0x3
c00199bd:	8a 1d 01 7a 02 c0    	mov    bl,BYTE PTR ds:0xc0027a01
c00199c3:	83 e1 07             	and    ecx,0x7
c00199c6:	83 e3 c7             	and    ebx,0xffffffc7
c00199c9:	8b 04 cd 04 7a 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd85fc]
c00199d0:	8b 14 cd 08 7a 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd85f8]
c00199d7:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00199de:	83 e1 38             	and    ecx,0x38
c00199e1:	09 d9                	or     ecx,ebx
c00199e3:	88 0d 01 7a 02 c0    	mov    BYTE PTR ds:0xc0027a01,cl
c00199e9:	8b 0d 44 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a44
c00199ef:	85 c9                	test   ecx,ecx
c00199f1:	74 09                	je     c00199fc <Vm::fpuPop()+0x49>
c00199f3:	49                   	dec    ecx
c00199f4:	89 0d 44 7a 02 c0    	mov    DWORD PTR ds:0xc0027a44,ecx
c00199fa:	eb 08                	jmp    c0019a04 <Vm::fpuPop()+0x51>
c00199fc:	80 0d 00 7a 02 c0 40 	or     BYTE PTR ds:0xc0027a00,0x40
c0019a03:	90                   	nop
c0019a04:	5b                   	pop    ebx
c0019a05:	c3                   	ret    

c0019a06 <Vm::x87Handler(regs*)>:
c0019a06:	55                   	push   ebp
c0019a07:	57                   	push   edi
c0019a08:	56                   	push   esi
c0019a09:	53                   	push   ebx
c0019a0a:	83 ec 1c             	sub    esp,0x1c
c0019a0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019a11:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019a16:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019a19:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019a21:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019a25:	50                   	push   eax
c0019a26:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019a2a:	50                   	push   eax
c0019a2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a2f:	50                   	push   eax
c0019a30:	53                   	push   ebx
c0019a31:	e8 a0 a0 ff ff       	call   c0013ad6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019a36:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	89 c6                	mov    esi,eax
c0019a3e:	80 fa d9             	cmp    dl,0xd9
c0019a41:	0f 85 79 01 00 00    	jne    c0019bc0 <Vm::x87Handler(regs*)+0x1ba>
c0019a47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a4b:	8d 50 20             	lea    edx,[eax+0x20]
c0019a4e:	80 fa 0e             	cmp    dl,0xe
c0019a51:	0f 87 a5 00 00 00    	ja     c0019afc <Vm::x87Handler(regs*)+0xf6>
c0019a57:	0f b6 d2             	movzx  edx,dl
c0019a5a:	ff 24 95 64 4b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb49c]
c0019a61:	8d 76 00             	lea    esi,[esi+0x0]
c0019a64:	e8 de fc ff ff       	call   c0019747 <Vm::fpuGet0()>
c0019a69:	eb 09                	jmp    c0019a74 <Vm::x87Handler(regs*)+0x6e>
c0019a6b:	90                   	nop
c0019a6c:	e8 db fc ff ff       	call   c001974c <Vm::fpuGet1()>
c0019a71:	8d 76 00             	lea    esi,[esi+0x0]
c0019a74:	57                   	push   edi
c0019a75:	57                   	push   edi
c0019a76:	66 90                	xchg   ax,ax
c0019a78:	52                   	push   edx
c0019a79:	50                   	push   eax
c0019a7a:	e8 d6 fe ff ff       	call   c0019955 <Vm::fpuPush(unsigned long long)>
c0019a7f:	90                   	nop
c0019a80:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	90                   	nop
c0019a88:	b0 01                	mov    al,0x1
c0019a8a:	e9 89 0a 00 00       	jmp    c001a518 <Vm::x87Handler(regs*)+0xb12>
c0019a8f:	90                   	nop
c0019a90:	83 ec 0c             	sub    esp,0xc
c0019a93:	6a 00                	push   0x0
c0019a95:	e8 2c fe ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019a9a:	59                   	pop    ecx
c0019a9b:	5e                   	pop    esi
c0019a9c:	52                   	push   edx
c0019a9d:	50                   	push   eax
c0019a9e:	e8 b3 fd ff ff       	call   c0019856 <Vm::fpuChs(unsigned long long)>
c0019aa3:	eb 17                	jmp    c0019abc <Vm::x87Handler(regs*)+0xb6>
c0019aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa8:	83 ec 0c             	sub    esp,0xc
c0019aab:	6a 00                	push   0x0
c0019aad:	e8 14 fe ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019ab2:	5f                   	pop    edi
c0019ab3:	5d                   	pop    ebp
c0019ab4:	52                   	push   edx
c0019ab5:	50                   	push   eax
c0019ab6:	e8 92 fd ff ff       	call   c001984d <Vm::fpuAbs(unsigned long long)>
c0019abb:	90                   	nop
c0019abc:	83 c4 0c             	add    esp,0xc
c0019abf:	90                   	nop
c0019ac0:	52                   	push   edx
c0019ac1:	50                   	push   eax
c0019ac2:	66 90                	xchg   ax,ax
c0019ac4:	6a 00                	push   0x0
c0019ac6:	66 90                	xchg   ax,ax
c0019ac8:	e8 3c fe ff ff       	call   c0019909 <Vm::fpuSetReg(int, unsigned long long)>
c0019acd:	eb b1                	jmp    c0019a80 <Vm::x87Handler(regs*)+0x7a>
c0019acf:	90                   	nop
c0019ad0:	e8 b7 fc ff ff       	call   c001978c <Vm::fpuGetLog210()>
c0019ad5:	eb 9d                	jmp    c0019a74 <Vm::x87Handler(regs*)+0x6e>
c0019ad7:	90                   	nop
c0019ad8:	e8 7f fc ff ff       	call   c001975c <Vm::fpuGetLog2E()>
c0019add:	eb 95                	jmp    c0019a74 <Vm::x87Handler(regs*)+0x6e>
c0019adf:	90                   	nop
c0019ae0:	e8 6f fc ff ff       	call   c0019754 <Vm::fpuGetPi()>
c0019ae5:	eb 8d                	jmp    c0019a74 <Vm::x87Handler(regs*)+0x6e>
c0019ae7:	90                   	nop
c0019ae8:	e8 b7 fc ff ff       	call   c00197a4 <Vm::fpuGetLog102()>
c0019aed:	eb 85                	jmp    c0019a74 <Vm::x87Handler(regs*)+0x6e>
c0019aef:	90                   	nop
c0019af0:	e8 7f fc ff ff       	call   c0019774 <Vm::fpuGetLogE2()>
c0019af5:	e9 7a ff ff ff       	jmp    c0019a74 <Vm::x87Handler(regs*)+0x6e>
c0019afa:	66 90                	xchg   ax,ax
c0019afc:	8d 50 40             	lea    edx,[eax+0x40]
c0019aff:	80 fa 07             	cmp    dl,0x7
c0019b02:	77 18                	ja     c0019b1c <Vm::x87Handler(regs*)+0x116>
c0019b04:	83 ec 0c             	sub    esp,0xc
c0019b07:	2d c0 00 00 00       	sub    eax,0xc0
c0019b0c:	50                   	push   eax
c0019b0d:	e8 b4 fd ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019b12:	59                   	pop    ecx
c0019b13:	5e                   	pop    esi
c0019b14:	e9 5f ff ff ff       	jmp    c0019a78 <Vm::x87Handler(regs*)+0x72>
c0019b19:	8d 76 00             	lea    esi,[esi+0x0]
c0019b1c:	8d 50 38             	lea    edx,[eax+0x38]
c0019b1f:	80 fa 07             	cmp    dl,0x7
c0019b22:	77 3c                	ja     c0019b60 <Vm::x87Handler(regs*)+0x15a>
c0019b24:	83 ec 0c             	sub    esp,0xc
c0019b27:	2d c8 00 00 00       	sub    eax,0xc8
c0019b2c:	50                   	push   eax
c0019b2d:	e8 94 fd ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019b32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019b39:	89 c6                	mov    esi,eax
c0019b3b:	89 d7                	mov    edi,edx
c0019b3d:	e8 84 fd ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019b42:	83 c4 0c             	add    esp,0xc
c0019b45:	52                   	push   edx
c0019b46:	50                   	push   eax
c0019b47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019b4b:	2d c8 00 00 00       	sub    eax,0xc8
c0019b50:	50                   	push   eax
c0019b51:	e8 b3 fd ff ff       	call   c0019909 <Vm::fpuSetReg(int, unsigned long long)>
c0019b56:	83 c4 0c             	add    esp,0xc
c0019b59:	57                   	push   edi
c0019b5a:	56                   	push   esi
c0019b5b:	e9 64 ff ff ff       	jmp    c0019ac4 <Vm::x87Handler(regs*)+0xbe>
c0019b60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b64:	84 d2                	test   dl,dl
c0019b66:	75 10                	jne    c0019b78 <Vm::x87Handler(regs*)+0x172>
c0019b68:	83 ec 0c             	sub    esp,0xc
c0019b6b:	ff 36                	push   DWORD PTR [esi]
c0019b6d:	e8 8d fa ff ff       	call   c00195ff <Vm::fpu32ToInternal(unsigned int)>
c0019b72:	e9 c9 00 00 00       	jmp    c0019c40 <Vm::x87Handler(regs*)+0x23a>
c0019b77:	90                   	nop
c0019b78:	80 fa 03             	cmp    dl,0x3
c0019b7b:	75 13                	jne    c0019b90 <Vm::x87Handler(regs*)+0x18a>
c0019b7d:	e8 31 fe ff ff       	call   c00199b3 <Vm::fpuPop()>
c0019b82:	55                   	push   ebp
c0019b83:	55                   	push   ebp
c0019b84:	52                   	push   edx
c0019b85:	50                   	push   eax
c0019b86:	e8 0d fa ff ff       	call   c0019598 <Vm::fpuInternalTo32(unsigned long long)>
c0019b8b:	e9 90 00 00 00       	jmp    c0019c20 <Vm::x87Handler(regs*)+0x21a>
c0019b90:	80 fa 05             	cmp    dl,0x5
c0019b93:	75 0f                	jne    c0019ba4 <Vm::x87Handler(regs*)+0x19e>
c0019b95:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b98:	66 a3 02 7a 02 c0    	mov    ds:0xc0027a02,ax
c0019b9e:	e9 ed 00 00 00       	jmp    c0019c90 <Vm::x87Handler(regs*)+0x28a>
c0019ba3:	90                   	nop
c0019ba4:	31 c0                	xor    eax,eax
c0019ba6:	80 fa 07             	cmp    dl,0x7
c0019ba9:	0f 85 69 09 00 00    	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c0019baf:	66 a1 02 7a 02 c0    	mov    ax,ds:0xc0027a02
c0019bb5:	66 89 06             	mov    WORD PTR [esi],ax
c0019bb8:	e9 d3 00 00 00       	jmp    c0019c90 <Vm::x87Handler(regs*)+0x28a>
c0019bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc0:	80 fa d8             	cmp    dl,0xd8
c0019bc3:	0f 84 d3 00 00 00    	je     c0019c9c <Vm::x87Handler(regs*)+0x296>
c0019bc9:	80 fa dc             	cmp    dl,0xdc
c0019bcc:	0f 84 2a 02 00 00    	je     c0019dfc <Vm::x87Handler(regs*)+0x3f6>
c0019bd2:	80 fa de             	cmp    dl,0xde
c0019bd5:	0f 84 f1 02 00 00    	je     c0019ecc <Vm::x87Handler(regs*)+0x4c6>
c0019bdb:	80 fa dd             	cmp    dl,0xdd
c0019bde:	0f 84 94 04 00 00    	je     c001a078 <Vm::x87Handler(regs*)+0x672>
c0019be4:	80 fa da             	cmp    dl,0xda
c0019be7:	0f 84 5f 05 00 00    	je     c001a14c <Vm::x87Handler(regs*)+0x746>
c0019bed:	80 fa df             	cmp    dl,0xdf
c0019bf0:	0f 84 aa 05 00 00    	je     c001a1a0 <Vm::x87Handler(regs*)+0x79a>
c0019bf6:	31 c0                	xor    eax,eax
c0019bf8:	80 fa db             	cmp    dl,0xdb
c0019bfb:	0f 85 17 09 00 00    	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c0019c01:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019c05:	80 fa 03             	cmp    dl,0x3
c0019c08:	0f 85 c2 06 00 00    	jne    c001a2d0 <Vm::x87Handler(regs*)+0x8ca>
c0019c0e:	e8 a0 fd ff ff       	call   c00199b3 <Vm::fpuPop()>
c0019c13:	55                   	push   ebp
c0019c14:	55                   	push   ebp
c0019c15:	8d 76 00             	lea    esi,[esi+0x0]
c0019c18:	52                   	push   edx
c0019c19:	50                   	push   eax
c0019c1a:	e8 2e fa ff ff       	call   c001964d <Vm::fpuFloatToLong(unsigned long long)>
c0019c1f:	90                   	nop
c0019c20:	83 c4 10             	add    esp,0x10
c0019c23:	89 06                	mov    DWORD PTR [esi],eax
c0019c25:	eb 69                	jmp    c0019c90 <Vm::x87Handler(regs*)+0x28a>
c0019c27:	90                   	nop
c0019c28:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019c2c:	84 d2                	test   dl,dl
c0019c2e:	0f 85 2c 06 00 00    	jne    c001a260 <Vm::x87Handler(regs*)+0x85a>
c0019c34:	57                   	push   edi
c0019c35:	57                   	push   edi
c0019c36:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c39:	ff 36                	push   DWORD PTR [esi]
c0019c3b:	e8 04 fa ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c0019c40:	5e                   	pop    esi
c0019c41:	5f                   	pop    edi
c0019c42:	52                   	push   edx
c0019c43:	50                   	push   eax
c0019c44:	e8 0c fd ff ff       	call   c0019955 <Vm::fpuPush(unsigned long long)>
c0019c49:	8d 76 00             	lea    esi,[esi+0x0]
c0019c4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c50:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c53:	e9 2c fe ff ff       	jmp    c0019a84 <Vm::x87Handler(regs*)+0x7e>
c0019c58:	80 fa 03             	cmp    dl,0x3
c0019c5b:	0f 85 2b 07 00 00    	jne    c001a38c <Vm::x87Handler(regs*)+0x986>
c0019c61:	57                   	push   edi
c0019c62:	57                   	push   edi
c0019c63:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c66:	ff 36                	push   DWORD PTR [esi]
c0019c68:	e8 d7 f9 ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c0019c6d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c74:	89 c6                	mov    esi,eax
c0019c76:	89 d7                	mov    edi,edx
c0019c78:	e8 49 fc ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019c7d:	57                   	push   edi
c0019c7e:	56                   	push   esi
c0019c7f:	52                   	push   edx
c0019c80:	50                   	push   eax
c0019c81:	e8 60 fb ff ff       	call   c00197e6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019c86:	83 c4 20             	add    esp,0x20
c0019c89:	e8 25 fd ff ff       	call   c00199b3 <Vm::fpuPop()>
c0019c8e:	66 90                	xchg   ax,ax
c0019c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c94:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c97:	e9 ec fd ff ff       	jmp    c0019a88 <Vm::x87Handler(regs*)+0x82>
c0019c9c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ca0:	8d 50 40             	lea    edx,[eax+0x40]
c0019ca3:	80 fa 07             	cmp    dl,0x7
c0019ca6:	77 2c                	ja     c0019cd4 <Vm::x87Handler(regs*)+0x2ce>
c0019ca8:	83 ec 0c             	sub    esp,0xc
c0019cab:	2d c0 00 00 00       	sub    eax,0xc0
c0019cb0:	50                   	push   eax
c0019cb1:	e8 10 fc ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019cb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cbd:	89 c6                	mov    esi,eax
c0019cbf:	89 d7                	mov    edi,edx
c0019cc1:	e8 00 fc ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019cc6:	57                   	push   edi
c0019cc7:	56                   	push   esi
c0019cc8:	52                   	push   edx
c0019cc9:	50                   	push   eax
c0019cca:	e8 6d fb ff ff       	call   c001983c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019ccf:	eb 33                	jmp    c0019d04 <Vm::x87Handler(regs*)+0x2fe>
c0019cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd4:	8d 50 38             	lea    edx,[eax+0x38]
c0019cd7:	80 fa 07             	cmp    dl,0x7
c0019cda:	77 30                	ja     c0019d0c <Vm::x87Handler(regs*)+0x306>
c0019cdc:	83 ec 0c             	sub    esp,0xc
c0019cdf:	2d c8 00 00 00       	sub    eax,0xc8
c0019ce4:	50                   	push   eax
c0019ce5:	e8 dc fb ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019cea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cf1:	89 c6                	mov    esi,eax
c0019cf3:	89 d7                	mov    edi,edx
c0019cf5:	e8 cc fb ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019cfa:	57                   	push   edi
c0019cfb:	56                   	push   esi
c0019cfc:	52                   	push   edx
c0019cfd:	50                   	push   eax
c0019cfe:	e8 72 fb ff ff       	call   c0019875 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019d03:	90                   	nop
c0019d04:	83 c4 1c             	add    esp,0x1c
c0019d07:	e9 b4 fd ff ff       	jmp    c0019ac0 <Vm::x87Handler(regs*)+0xba>
c0019d0c:	8d 50 30             	lea    edx,[eax+0x30]
c0019d0f:	80 fa 07             	cmp    dl,0x7
c0019d12:	77 10                	ja     c0019d24 <Vm::x87Handler(regs*)+0x31e>
c0019d14:	83 ec 0c             	sub    esp,0xc
c0019d17:	2d d0 00 00 00       	sub    eax,0xd0
c0019d1c:	e9 c3 03 00 00       	jmp    c001a0e4 <Vm::x87Handler(regs*)+0x6de>
c0019d21:	8d 76 00             	lea    esi,[esi+0x0]
c0019d24:	8d 50 28             	lea    edx,[eax+0x28]
c0019d27:	80 fa 07             	cmp    dl,0x7
c0019d2a:	77 10                	ja     c0019d3c <Vm::x87Handler(regs*)+0x336>
c0019d2c:	83 ec 0c             	sub    esp,0xc
c0019d2f:	2d d8 00 00 00       	sub    eax,0xd8
c0019d34:	e9 e7 03 00 00       	jmp    c001a120 <Vm::x87Handler(regs*)+0x71a>
c0019d39:	8d 76 00             	lea    esi,[esi+0x0]
c0019d3c:	8d 50 20             	lea    edx,[eax+0x20]
c0019d3f:	80 fa 07             	cmp    dl,0x7
c0019d42:	77 1c                	ja     c0019d60 <Vm::x87Handler(regs*)+0x35a>
c0019d44:	83 ec 0c             	sub    esp,0xc
c0019d47:	2d e0 00 00 00       	sub    eax,0xe0
c0019d4c:	50                   	push   eax
c0019d4d:	e8 74 fb ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019d52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d59:	89 c6                	mov    esi,eax
c0019d5b:	89 d7                	mov    edi,edx
c0019d5d:	eb 25                	jmp    c0019d84 <Vm::x87Handler(regs*)+0x37e>
c0019d5f:	90                   	nop
c0019d60:	8d 50 18             	lea    edx,[eax+0x18]
c0019d63:	80 fa 07             	cmp    dl,0x7
c0019d66:	77 30                	ja     c0019d98 <Vm::x87Handler(regs*)+0x392>
c0019d68:	83 ec 0c             	sub    esp,0xc
c0019d6b:	6a 00                	push   0x0
c0019d6d:	e8 54 fb ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019d72:	89 c6                	mov    esi,eax
c0019d74:	89 d7                	mov    edi,edx
c0019d76:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d7a:	2d e8 00 00 00       	sub    eax,0xe8
c0019d7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d82:	66 90                	xchg   ax,ax
c0019d84:	e8 3d fb ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019d89:	57                   	push   edi
c0019d8a:	56                   	push   esi
c0019d8b:	52                   	push   edx
c0019d8c:	50                   	push   eax
c0019d8d:	e8 d4 fa ff ff       	call   c0019866 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d92:	e9 6d ff ff ff       	jmp    c0019d04 <Vm::x87Handler(regs*)+0x2fe>
c0019d97:	90                   	nop
c0019d98:	8d 50 10             	lea    edx,[eax+0x10]
c0019d9b:	80 fa 07             	cmp    dl,0x7
c0019d9e:	77 1c                	ja     c0019dbc <Vm::x87Handler(regs*)+0x3b6>
c0019da0:	83 ec 0c             	sub    esp,0xc
c0019da3:	2d f0 00 00 00       	sub    eax,0xf0
c0019da8:	50                   	push   eax
c0019da9:	e8 18 fb ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019dae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019db5:	89 c6                	mov    esi,eax
c0019db7:	89 d7                	mov    edi,edx
c0019db9:	eb 25                	jmp    c0019de0 <Vm::x87Handler(regs*)+0x3da>
c0019dbb:	90                   	nop
c0019dbc:	3c f7                	cmp    al,0xf7
c0019dbe:	0f 86 00 04 00 00    	jbe    c001a1c4 <Vm::x87Handler(regs*)+0x7be>
c0019dc4:	83 ec 0c             	sub    esp,0xc
c0019dc7:	6a 00                	push   0x0
c0019dc9:	e8 f8 fa ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019dce:	89 c6                	mov    esi,eax
c0019dd0:	89 d7                	mov    edi,edx
c0019dd2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dd6:	2d f8 00 00 00       	sub    eax,0xf8
c0019ddb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dde:	66 90                	xchg   ax,ax
c0019de0:	e8 e1 fa ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019de5:	57                   	push   edi
c0019de6:	56                   	push   esi
c0019de7:	52                   	push   edx
c0019de8:	50                   	push   eax
c0019de9:	e8 a6 fa ff ff       	call   c0019894 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019dee:	83 c4 1c             	add    esp,0x1c
c0019df1:	52                   	push   edx
c0019df2:	50                   	push   eax
c0019df3:	6a 00                	push   0x0
c0019df5:	e9 6a 02 00 00       	jmp    c001a064 <Vm::x87Handler(regs*)+0x65e>
c0019dfa:	66 90                	xchg   ax,ax
c0019dfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e00:	8d 50 40             	lea    edx,[eax+0x40]
c0019e03:	80 fa 07             	cmp    dl,0x7
c0019e06:	77 38                	ja     c0019e40 <Vm::x87Handler(regs*)+0x43a>
c0019e08:	83 ec 0c             	sub    esp,0xc
c0019e0b:	2d c0 00 00 00       	sub    eax,0xc0
c0019e10:	50                   	push   eax
c0019e11:	e8 b0 fa ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019e16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e1d:	89 c6                	mov    esi,eax
c0019e1f:	89 d7                	mov    edi,edx
c0019e21:	e8 a0 fa ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019e26:	57                   	push   edi
c0019e27:	56                   	push   esi
c0019e28:	52                   	push   edx
c0019e29:	50                   	push   eax
c0019e2a:	e8 0d fa ff ff       	call   c001983c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e2f:	83 c4 1c             	add    esp,0x1c
c0019e32:	52                   	push   edx
c0019e33:	50                   	push   eax
c0019e34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e38:	2d c0 00 00 00       	sub    eax,0xc0
c0019e3d:	eb 41                	jmp    c0019e80 <Vm::x87Handler(regs*)+0x47a>
c0019e3f:	90                   	nop
c0019e40:	8d 50 38             	lea    edx,[eax+0x38]
c0019e43:	80 fa 07             	cmp    dl,0x7
c0019e46:	77 40                	ja     c0019e88 <Vm::x87Handler(regs*)+0x482>
c0019e48:	83 ec 0c             	sub    esp,0xc
c0019e4b:	2d c8 00 00 00       	sub    eax,0xc8
c0019e50:	50                   	push   eax
c0019e51:	e8 70 fa ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019e56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e5d:	89 c6                	mov    esi,eax
c0019e5f:	89 d7                	mov    edi,edx
c0019e61:	e8 60 fa ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019e66:	57                   	push   edi
c0019e67:	56                   	push   esi
c0019e68:	52                   	push   edx
c0019e69:	50                   	push   eax
c0019e6a:	e8 06 fa ff ff       	call   c0019875 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019e6f:	83 c4 1c             	add    esp,0x1c
c0019e72:	52                   	push   edx
c0019e73:	50                   	push   eax
c0019e74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e78:	2d c8 00 00 00       	sub    eax,0xc8
c0019e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e80:	50                   	push   eax
c0019e81:	e9 42 fc ff ff       	jmp    c0019ac8 <Vm::x87Handler(regs*)+0xc2>
c0019e86:	66 90                	xchg   ax,ax
c0019e88:	83 c0 18             	add    eax,0x18
c0019e8b:	3c 07                	cmp    al,0x7
c0019e8d:	0f 87 6d 04 00 00    	ja     c001a300 <Vm::x87Handler(regs*)+0x8fa>
c0019e93:	83 ec 0c             	sub    esp,0xc
c0019e96:	6a 00                	push   0x0
c0019e98:	e8 29 fa ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019e9d:	89 c6                	mov    esi,eax
c0019e9f:	89 d7                	mov    edi,edx
c0019ea1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ea5:	2d e8 00 00 00       	sub    eax,0xe8
c0019eaa:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ead:	e8 14 fa ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019eb2:	57                   	push   edi
c0019eb3:	56                   	push   esi
c0019eb4:	52                   	push   edx
c0019eb5:	50                   	push   eax
c0019eb6:	e8 ab f9 ff ff       	call   c0019866 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ebb:	83 c4 1c             	add    esp,0x1c
c0019ebe:	52                   	push   edx
c0019ebf:	50                   	push   eax
c0019ec0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ec4:	2d e8 00 00 00       	sub    eax,0xe8
c0019ec9:	eb b5                	jmp    c0019e80 <Vm::x87Handler(regs*)+0x47a>
c0019ecb:	90                   	nop
c0019ecc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ed0:	8d 50 40             	lea    edx,[eax+0x40]
c0019ed3:	80 fa 07             	cmp    dl,0x7
c0019ed6:	77 3c                	ja     c0019f14 <Vm::x87Handler(regs*)+0x50e>
c0019ed8:	83 ec 0c             	sub    esp,0xc
c0019edb:	2d c0 00 00 00       	sub    eax,0xc0
c0019ee0:	50                   	push   eax
c0019ee1:	e8 e0 f9 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019ee6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019eed:	89 c6                	mov    esi,eax
c0019eef:	89 d7                	mov    edi,edx
c0019ef1:	e8 d0 f9 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019ef6:	57                   	push   edi
c0019ef7:	56                   	push   esi
c0019ef8:	52                   	push   edx
c0019ef9:	50                   	push   eax
c0019efa:	e8 3d f9 ff ff       	call   c001983c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019eff:	83 c4 1c             	add    esp,0x1c
c0019f02:	52                   	push   edx
c0019f03:	50                   	push   eax
c0019f04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f08:	2d c0 00 00 00       	sub    eax,0xc0
c0019f0d:	e9 b2 01 00 00       	jmp    c001a0c4 <Vm::x87Handler(regs*)+0x6be>
c0019f12:	66 90                	xchg   ax,ax
c0019f14:	8d 50 20             	lea    edx,[eax+0x20]
c0019f17:	80 fa 07             	cmp    dl,0x7
c0019f1a:	77 3c                	ja     c0019f58 <Vm::x87Handler(regs*)+0x552>
c0019f1c:	83 ec 0c             	sub    esp,0xc
c0019f1f:	2d e0 00 00 00       	sub    eax,0xe0
c0019f24:	50                   	push   eax
c0019f25:	e8 9c f9 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019f2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f31:	89 c6                	mov    esi,eax
c0019f33:	89 d7                	mov    edi,edx
c0019f35:	e8 8c f9 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019f3a:	57                   	push   edi
c0019f3b:	56                   	push   esi
c0019f3c:	52                   	push   edx
c0019f3d:	50                   	push   eax
c0019f3e:	e8 23 f9 ff ff       	call   c0019866 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f43:	83 c4 1c             	add    esp,0x1c
c0019f46:	52                   	push   edx
c0019f47:	50                   	push   eax
c0019f48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f4c:	2d e0 00 00 00       	sub    eax,0xe0
c0019f51:	e9 6e 01 00 00       	jmp    c001a0c4 <Vm::x87Handler(regs*)+0x6be>
c0019f56:	66 90                	xchg   ax,ax
c0019f58:	8d 50 18             	lea    edx,[eax+0x18]
c0019f5b:	80 fa 07             	cmp    dl,0x7
c0019f5e:	77 3c                	ja     c0019f9c <Vm::x87Handler(regs*)+0x596>
c0019f60:	83 ec 0c             	sub    esp,0xc
c0019f63:	6a 00                	push   0x0
c0019f65:	e8 5c f9 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019f6a:	89 c6                	mov    esi,eax
c0019f6c:	89 d7                	mov    edi,edx
c0019f6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f72:	2d e8 00 00 00       	sub    eax,0xe8
c0019f77:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f7a:	e8 47 f9 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019f7f:	57                   	push   edi
c0019f80:	56                   	push   esi
c0019f81:	52                   	push   edx
c0019f82:	50                   	push   eax
c0019f83:	e8 de f8 ff ff       	call   c0019866 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f88:	83 c4 1c             	add    esp,0x1c
c0019f8b:	52                   	push   edx
c0019f8c:	50                   	push   eax
c0019f8d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f91:	2d e8 00 00 00       	sub    eax,0xe8
c0019f96:	e9 29 01 00 00       	jmp    c001a0c4 <Vm::x87Handler(regs*)+0x6be>
c0019f9b:	90                   	nop
c0019f9c:	8d 50 38             	lea    edx,[eax+0x38]
c0019f9f:	80 fa 07             	cmp    dl,0x7
c0019fa2:	77 3c                	ja     c0019fe0 <Vm::x87Handler(regs*)+0x5da>
c0019fa4:	83 ec 0c             	sub    esp,0xc
c0019fa7:	2d c8 00 00 00       	sub    eax,0xc8
c0019fac:	50                   	push   eax
c0019fad:	e8 14 f9 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019fb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fb9:	89 c6                	mov    esi,eax
c0019fbb:	89 d7                	mov    edi,edx
c0019fbd:	e8 04 f9 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019fc2:	57                   	push   edi
c0019fc3:	56                   	push   esi
c0019fc4:	52                   	push   edx
c0019fc5:	50                   	push   eax
c0019fc6:	e8 aa f8 ff ff       	call   c0019875 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019fcb:	83 c4 1c             	add    esp,0x1c
c0019fce:	52                   	push   edx
c0019fcf:	50                   	push   eax
c0019fd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fd4:	2d c8 00 00 00       	sub    eax,0xc8
c0019fd9:	e9 82 00 00 00       	jmp    c001a060 <Vm::x87Handler(regs*)+0x65a>
c0019fde:	66 90                	xchg   ax,ax
c0019fe0:	3c f7                	cmp    al,0xf7
c0019fe2:	76 38                	jbe    c001a01c <Vm::x87Handler(regs*)+0x616>
c0019fe4:	83 ec 0c             	sub    esp,0xc
c0019fe7:	6a 00                	push   0x0
c0019fe9:	e8 d8 f8 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c0019fee:	89 c6                	mov    esi,eax
c0019ff0:	89 d7                	mov    edi,edx
c0019ff2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ff6:	2d f8 00 00 00       	sub    eax,0xf8
c0019ffb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ffe:	e8 c3 f8 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a003:	57                   	push   edi
c001a004:	56                   	push   esi
c001a005:	52                   	push   edx
c001a006:	50                   	push   eax
c001a007:	e8 88 f8 ff ff       	call   c0019894 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a00c:	83 c4 1c             	add    esp,0x1c
c001a00f:	52                   	push   edx
c001a010:	50                   	push   eax
c001a011:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a015:	2d f8 00 00 00       	sub    eax,0xf8
c001a01a:	eb 44                	jmp    c001a060 <Vm::x87Handler(regs*)+0x65a>
c001a01c:	8d 50 10             	lea    edx,[eax+0x10]
c001a01f:	80 fa 07             	cmp    dl,0x7
c001a022:	0f 87 6c 01 00 00    	ja     c001a194 <Vm::x87Handler(regs*)+0x78e>
c001a028:	83 ec 0c             	sub    esp,0xc
c001a02b:	2d f0 00 00 00       	sub    eax,0xf0
c001a030:	50                   	push   eax
c001a031:	e8 90 f8 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a036:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a03d:	89 c6                	mov    esi,eax
c001a03f:	89 d7                	mov    edi,edx
c001a041:	e8 80 f8 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a046:	57                   	push   edi
c001a047:	56                   	push   esi
c001a048:	52                   	push   edx
c001a049:	50                   	push   eax
c001a04a:	e8 45 f8 ff ff       	call   c0019894 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a04f:	83 c4 1c             	add    esp,0x1c
c001a052:	52                   	push   edx
c001a053:	50                   	push   eax
c001a054:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a058:	2d f0 00 00 00       	sub    eax,0xf0
c001a05d:	8d 76 00             	lea    esi,[esi+0x0]
c001a060:	50                   	push   eax
c001a061:	8d 76 00             	lea    esi,[esi+0x0]
c001a064:	e8 a0 f8 ff ff       	call   c0019909 <Vm::fpuSetReg(int, unsigned long long)>
c001a069:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a06d:	e8 41 f9 ff ff       	call   c00199b3 <Vm::fpuPop()>
c001a072:	e9 0d fa ff ff       	jmp    c0019a84 <Vm::x87Handler(regs*)+0x7e>
c001a077:	90                   	nop
c001a078:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a07c:	8d 50 30             	lea    edx,[eax+0x30]
c001a07f:	80 fa 07             	cmp    dl,0x7
c001a082:	77 20                	ja     c001a0a4 <Vm::x87Handler(regs*)+0x69e>
c001a084:	83 ec 0c             	sub    esp,0xc
c001a087:	6a 00                	push   0x0
c001a089:	e8 38 f8 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a08e:	83 c4 0c             	add    esp,0xc
c001a091:	52                   	push   edx
c001a092:	50                   	push   eax
c001a093:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a097:	2d d0 00 00 00       	sub    eax,0xd0
c001a09c:	e9 df fd ff ff       	jmp    c0019e80 <Vm::x87Handler(regs*)+0x47a>
c001a0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0a4:	8d 50 28             	lea    edx,[eax+0x28]
c001a0a7:	80 fa 07             	cmp    dl,0x7
c001a0aa:	77 28                	ja     c001a0d4 <Vm::x87Handler(regs*)+0x6ce>
c001a0ac:	83 ec 0c             	sub    esp,0xc
c001a0af:	6a 00                	push   0x0
c001a0b1:	e8 10 f8 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a0b6:	83 c4 0c             	add    esp,0xc
c001a0b9:	52                   	push   edx
c001a0ba:	50                   	push   eax
c001a0bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a0bf:	2d d8 00 00 00       	sub    eax,0xd8
c001a0c4:	50                   	push   eax
c001a0c5:	e8 3f f8 ff ff       	call   c0019909 <Vm::fpuSetReg(int, unsigned long long)>
c001a0ca:	e8 e4 f8 ff ff       	call   c00199b3 <Vm::fpuPop()>
c001a0cf:	e9 ac f9 ff ff       	jmp    c0019a80 <Vm::x87Handler(regs*)+0x7a>
c001a0d4:	8d 50 20             	lea    edx,[eax+0x20]
c001a0d7:	80 fa 07             	cmp    dl,0x7
c001a0da:	77 30                	ja     c001a10c <Vm::x87Handler(regs*)+0x706>
c001a0dc:	83 ec 0c             	sub    esp,0xc
c001a0df:	2d e0 00 00 00       	sub    eax,0xe0
c001a0e4:	50                   	push   eax
c001a0e5:	e8 dc f7 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a0ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0f1:	89 c6                	mov    esi,eax
c001a0f3:	89 d7                	mov    edi,edx
c001a0f5:	e8 cc f7 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a0fa:	57                   	push   edi
c001a0fb:	56                   	push   esi
c001a0fc:	52                   	push   edx
c001a0fd:	50                   	push   eax
c001a0fe:	e8 e3 f6 ff ff       	call   c00197e6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a103:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a107:	e9 78 02 00 00       	jmp    c001a384 <Vm::x87Handler(regs*)+0x97e>
c001a10c:	8d 50 18             	lea    edx,[eax+0x18]
c001a10f:	80 fa 07             	cmp    dl,0x7
c001a112:	0f 87 10 fb ff ff    	ja     c0019c28 <Vm::x87Handler(regs*)+0x222>
c001a118:	83 ec 0c             	sub    esp,0xc
c001a11b:	2d e8 00 00 00       	sub    eax,0xe8
c001a120:	50                   	push   eax
c001a121:	e8 a0 f7 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a126:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a12d:	89 c6                	mov    esi,eax
c001a12f:	89 d7                	mov    edi,edx
c001a131:	e8 90 f7 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a136:	57                   	push   edi
c001a137:	56                   	push   esi
c001a138:	52                   	push   edx
c001a139:	50                   	push   eax
c001a13a:	e8 a7 f6 ff ff       	call   c00197e6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a13f:	83 c4 20             	add    esp,0x20
c001a142:	e8 6c f8 ff ff       	call   c00199b3 <Vm::fpuPop()>
c001a147:	eb 6f                	jmp    c001a1b8 <Vm::x87Handler(regs*)+0x7b2>
c001a149:	8d 76 00             	lea    esi,[esi+0x0]
c001a14c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a150:	0f 85 22 01 00 00    	jne    c001a278 <Vm::x87Handler(regs*)+0x872>
c001a156:	66 90                	xchg   ax,ax
c001a158:	83 ec 0c             	sub    esp,0xc
c001a15b:	6a 01                	push   0x1
c001a15d:	e8 64 f7 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a162:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a169:	89 c6                	mov    esi,eax
c001a16b:	89 d7                	mov    edi,edx
c001a16d:	e8 54 f7 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a172:	57                   	push   edi
c001a173:	56                   	push   esi
c001a174:	52                   	push   edx
c001a175:	50                   	push   eax
c001a176:	e8 6b f6 ff ff       	call   c00197e6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a17b:	83 c4 20             	add    esp,0x20
c001a17e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a182:	e8 2c f8 ff ff       	call   c00199b3 <Vm::fpuPop()>
c001a187:	e8 27 f8 ff ff       	call   c00199b3 <Vm::fpuPop()>
c001a18c:	e9 f7 f8 ff ff       	jmp    c0019a88 <Vm::x87Handler(regs*)+0x82>
c001a191:	8d 76 00             	lea    esi,[esi+0x0]
c001a194:	3c d9                	cmp    al,0xd9
c001a196:	0f 85 e8 02 00 00    	jne    c001a484 <Vm::x87Handler(regs*)+0xa7e>
c001a19c:	eb ba                	jmp    c001a158 <Vm::x87Handler(regs*)+0x752>
c001a19e:	66 90                	xchg   ax,ax
c001a1a0:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a1a4:	0f 85 2a 03 00 00    	jne    c001a4d4 <Vm::x87Handler(regs*)+0xace>
c001a1aa:	0f b7 05 00 7a 02 c0 	movzx  eax,WORD PTR ds:0xc0027a00
c001a1b1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a1bc:	e9 c7 f8 ff ff       	jmp    c0019a88 <Vm::x87Handler(regs*)+0x82>
c001a1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1c8:	84 d2                	test   dl,dl
c001a1ca:	75 10                	jne    c001a1dc <Vm::x87Handler(regs*)+0x7d6>
c001a1cc:	83 ec 0c             	sub    esp,0xc
c001a1cf:	ff 36                	push   DWORD PTR [esi]
c001a1d1:	e8 29 f4 ff ff       	call   c00195ff <Vm::fpu32ToInternal(unsigned int)>
c001a1d6:	e9 39 01 00 00       	jmp    c001a314 <Vm::x87Handler(regs*)+0x90e>
c001a1db:	90                   	nop
c001a1dc:	80 fa 01             	cmp    dl,0x1
c001a1df:	75 0f                	jne    c001a1f0 <Vm::x87Handler(regs*)+0x7ea>
c001a1e1:	83 ec 0c             	sub    esp,0xc
c001a1e4:	ff 36                	push   DWORD PTR [esi]
c001a1e6:	e8 14 f4 ff ff       	call   c00195ff <Vm::fpu32ToInternal(unsigned int)>
c001a1eb:	e9 b4 02 00 00       	jmp    c001a4a4 <Vm::x87Handler(regs*)+0xa9e>
c001a1f0:	80 fa 04             	cmp    dl,0x4
c001a1f3:	75 0f                	jne    c001a204 <Vm::x87Handler(regs*)+0x7fe>
c001a1f5:	83 ec 0c             	sub    esp,0xc
c001a1f8:	ff 36                	push   DWORD PTR [esi]
c001a1fa:	e8 00 f4 ff ff       	call   c00195ff <Vm::fpu32ToInternal(unsigned int)>
c001a1ff:	e9 9c 01 00 00       	jmp    c001a3a0 <Vm::x87Handler(regs*)+0x99a>
c001a204:	80 fa 05             	cmp    dl,0x5
c001a207:	75 1b                	jne    c001a224 <Vm::x87Handler(regs*)+0x81e>
c001a209:	83 ec 0c             	sub    esp,0xc
c001a20c:	6a 00                	push   0x0
c001a20e:	e8 b3 f6 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a213:	89 c7                	mov    edi,eax
c001a215:	89 d5                	mov    ebp,edx
c001a217:	58                   	pop    eax
c001a218:	ff 36                	push   DWORD PTR [esi]
c001a21a:	e8 e0 f3 ff ff       	call   c00195ff <Vm::fpu32ToInternal(unsigned int)>
c001a21f:	e9 bc 01 00 00       	jmp    c001a3e0 <Vm::x87Handler(regs*)+0x9da>
c001a224:	80 fa 06             	cmp    dl,0x6
c001a227:	75 0f                	jne    c001a238 <Vm::x87Handler(regs*)+0x832>
c001a229:	83 ec 0c             	sub    esp,0xc
c001a22c:	ff 36                	push   DWORD PTR [esi]
c001a22e:	e8 cc f3 ff ff       	call   c00195ff <Vm::fpu32ToInternal(unsigned int)>
c001a233:	e9 cc 01 00 00       	jmp    c001a404 <Vm::x87Handler(regs*)+0x9fe>
c001a238:	31 c0                	xor    eax,eax
c001a23a:	80 fa 07             	cmp    dl,0x7
c001a23d:	0f 85 d5 02 00 00    	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c001a243:	83 ec 0c             	sub    esp,0xc
c001a246:	6a 00                	push   0x0
c001a248:	e8 79 f6 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a24d:	89 c7                	mov    edi,eax
c001a24f:	89 d5                	mov    ebp,edx
c001a251:	58                   	pop    eax
c001a252:	ff 36                	push   DWORD PTR [esi]
c001a254:	e8 a6 f3 ff ff       	call   c00195ff <Vm::fpu32ToInternal(unsigned int)>
c001a259:	e9 ee 01 00 00       	jmp    c001a44c <Vm::x87Handler(regs*)+0xa46>
c001a25e:	66 90                	xchg   ax,ax
c001a260:	80 fa 03             	cmp    dl,0x3
c001a263:	0f 85 f7 01 00 00    	jne    c001a460 <Vm::x87Handler(regs*)+0xa5a>
c001a269:	e8 45 f7 ff ff       	call   c00199b3 <Vm::fpuPop()>
c001a26e:	51                   	push   ecx
c001a26f:	51                   	push   ecx
c001a270:	e9 03 02 00 00       	jmp    c001a478 <Vm::x87Handler(regs*)+0xa72>
c001a275:	8d 76 00             	lea    esi,[esi+0x0]
c001a278:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a27c:	80 fa 01             	cmp    dl,0x1
c001a27f:	75 0b                	jne    c001a28c <Vm::x87Handler(regs*)+0x886>
c001a281:	57                   	push   edi
c001a282:	57                   	push   edi
c001a283:	8b 06                	mov    eax,DWORD PTR [esi]
c001a285:	e9 0e 02 00 00       	jmp    c001a498 <Vm::x87Handler(regs*)+0xa92>
c001a28a:	66 90                	xchg   ax,ax
c001a28c:	80 fa 04             	cmp    dl,0x4
c001a28f:	75 13                	jne    c001a2a4 <Vm::x87Handler(regs*)+0x89e>
c001a291:	31 d2                	xor    edx,edx
c001a293:	51                   	push   ecx
c001a294:	51                   	push   ecx
c001a295:	8b 06                	mov    eax,DWORD PTR [esi]
c001a297:	52                   	push   edx
c001a298:	50                   	push   eax
c001a299:	e8 4a f4 ff ff       	call   c00196e8 <Vm::fpuLongToFloat(long long)>
c001a29e:	e9 fd 00 00 00       	jmp    c001a3a0 <Vm::x87Handler(regs*)+0x99a>
c001a2a3:	90                   	nop
c001a2a4:	31 c0                	xor    eax,eax
c001a2a6:	80 fa 07             	cmp    dl,0x7
c001a2a9:	0f 85 69 02 00 00    	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c001a2af:	83 ec 0c             	sub    esp,0xc
c001a2b2:	6a 00                	push   0x0
c001a2b4:	e8 0d f6 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a2b9:	89 c7                	mov    edi,eax
c001a2bb:	89 d5                	mov    ebp,edx
c001a2bd:	58                   	pop    eax
c001a2be:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2c0:	5a                   	pop    edx
c001a2c1:	31 d2                	xor    edx,edx
c001a2c3:	52                   	push   edx
c001a2c4:	50                   	push   eax
c001a2c5:	e8 1e f4 ff ff       	call   c00196e8 <Vm::fpuLongToFloat(long long)>
c001a2ca:	e9 7d 01 00 00       	jmp    c001a44c <Vm::x87Handler(regs*)+0xa46>
c001a2cf:	90                   	nop
c001a2d0:	84 d2                	test   dl,dl
c001a2d2:	75 10                	jne    c001a2e4 <Vm::x87Handler(regs*)+0x8de>
c001a2d4:	31 d2                	xor    edx,edx
c001a2d6:	55                   	push   ebp
c001a2d7:	55                   	push   ebp
c001a2d8:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2da:	52                   	push   edx
c001a2db:	50                   	push   eax
c001a2dc:	e9 03 02 00 00       	jmp    c001a4e4 <Vm::x87Handler(regs*)+0xade>
c001a2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2e4:	31 c0                	xor    eax,eax
c001a2e6:	80 fa 02             	cmp    dl,0x2
c001a2e9:	0f 85 29 02 00 00    	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c001a2ef:	83 ec 0c             	sub    esp,0xc
c001a2f2:	6a 00                	push   0x0
c001a2f4:	e8 cd f5 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a2f9:	59                   	pop    ecx
c001a2fa:	5f                   	pop    edi
c001a2fb:	e9 18 f9 ff ff       	jmp    c0019c18 <Vm::x87Handler(regs*)+0x212>
c001a300:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a304:	84 d2                	test   dl,dl
c001a306:	75 2c                	jne    c001a334 <Vm::x87Handler(regs*)+0x92e>
c001a308:	50                   	push   eax
c001a309:	50                   	push   eax
c001a30a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a30d:	ff 36                	push   DWORD PTR [esi]
c001a30f:	e8 30 f3 ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c001a314:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a31b:	89 c6                	mov    esi,eax
c001a31d:	89 d7                	mov    edi,edx
c001a31f:	e8 a2 f5 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a324:	57                   	push   edi
c001a325:	56                   	push   esi
c001a326:	52                   	push   edx
c001a327:	50                   	push   eax
c001a328:	e8 0f f5 ff ff       	call   c001983c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a32d:	e9 8e 01 00 00       	jmp    c001a4c0 <Vm::x87Handler(regs*)+0xaba>
c001a332:	66 90                	xchg   ax,ax
c001a334:	80 fa 01             	cmp    dl,0x1
c001a337:	75 13                	jne    c001a34c <Vm::x87Handler(regs*)+0x946>
c001a339:	50                   	push   eax
c001a33a:	50                   	push   eax
c001a33b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a33e:	ff 36                	push   DWORD PTR [esi]
c001a340:	e8 ff f2 ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c001a345:	e9 5a 01 00 00       	jmp    c001a4a4 <Vm::x87Handler(regs*)+0xa9e>
c001a34a:	66 90                	xchg   ax,ax
c001a34c:	80 fa 02             	cmp    dl,0x2
c001a34f:	0f 85 03 f9 ff ff    	jne    c0019c58 <Vm::x87Handler(regs*)+0x252>
c001a355:	55                   	push   ebp
c001a356:	55                   	push   ebp
c001a357:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a35a:	ff 36                	push   DWORD PTR [esi]
c001a35c:	e8 e3 f2 ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c001a361:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a368:	89 c6                	mov    esi,eax
c001a36a:	89 d7                	mov    edi,edx
c001a36c:	e8 55 f5 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a371:	57                   	push   edi
c001a372:	56                   	push   esi
c001a373:	52                   	push   edx
c001a374:	50                   	push   eax
c001a375:	e8 6c f4 ff ff       	call   c00197e6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a37a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a37e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a381:	8d 76 00             	lea    esi,[esi+0x0]
c001a384:	83 c4 20             	add    esp,0x20
c001a387:	e9 fc f6 ff ff       	jmp    c0019a88 <Vm::x87Handler(regs*)+0x82>
c001a38c:	80 fa 04             	cmp    dl,0x4
c001a38f:	75 2f                	jne    c001a3c0 <Vm::x87Handler(regs*)+0x9ba>
c001a391:	51                   	push   ecx
c001a392:	51                   	push   ecx
c001a393:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a396:	ff 36                	push   DWORD PTR [esi]
c001a398:	e8 a7 f2 ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c001a39d:	8d 76 00             	lea    esi,[esi+0x0]
c001a3a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3a7:	89 c6                	mov    esi,eax
c001a3a9:	89 d7                	mov    edi,edx
c001a3ab:	e8 16 f5 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a3b0:	57                   	push   edi
c001a3b1:	56                   	push   esi
c001a3b2:	52                   	push   edx
c001a3b3:	50                   	push   eax
c001a3b4:	e8 ad f4 ff ff       	call   c0019866 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3b9:	e9 02 01 00 00       	jmp    c001a4c0 <Vm::x87Handler(regs*)+0xaba>
c001a3be:	66 90                	xchg   ax,ax
c001a3c0:	80 fa 05             	cmp    dl,0x5
c001a3c3:	75 2b                	jne    c001a3f0 <Vm::x87Handler(regs*)+0x9ea>
c001a3c5:	83 ec 0c             	sub    esp,0xc
c001a3c8:	6a 00                	push   0x0
c001a3ca:	e8 f7 f4 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a3cf:	89 c7                	mov    edi,eax
c001a3d1:	89 d5                	mov    ebp,edx
c001a3d3:	58                   	pop    eax
c001a3d4:	5a                   	pop    edx
c001a3d5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3d8:	ff 36                	push   DWORD PTR [esi]
c001a3da:	e8 65 f2 ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c001a3df:	90                   	nop
c001a3e0:	83 c4 10             	add    esp,0x10
c001a3e3:	55                   	push   ebp
c001a3e4:	57                   	push   edi
c001a3e5:	52                   	push   edx
c001a3e6:	50                   	push   eax
c001a3e7:	e8 7a f4 ff ff       	call   c0019866 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3ec:	eb 6a                	jmp    c001a458 <Vm::x87Handler(regs*)+0xa52>
c001a3ee:	66 90                	xchg   ax,ax
c001a3f0:	80 fa 06             	cmp    dl,0x6
c001a3f3:	75 2f                	jne    c001a424 <Vm::x87Handler(regs*)+0xa1e>
c001a3f5:	51                   	push   ecx
c001a3f6:	51                   	push   ecx
c001a3f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3fa:	ff 36                	push   DWORD PTR [esi]
c001a3fc:	e8 43 f2 ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c001a401:	8d 76 00             	lea    esi,[esi+0x0]
c001a404:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a40b:	89 c6                	mov    esi,eax
c001a40d:	89 d7                	mov    edi,edx
c001a40f:	e8 b2 f4 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a414:	57                   	push   edi
c001a415:	56                   	push   esi
c001a416:	52                   	push   edx
c001a417:	50                   	push   eax
c001a418:	e8 77 f4 ff ff       	call   c0019894 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a41d:	e9 9e 00 00 00       	jmp    c001a4c0 <Vm::x87Handler(regs*)+0xaba>
c001a422:	66 90                	xchg   ax,ax
c001a424:	31 c0                	xor    eax,eax
c001a426:	80 fa 07             	cmp    dl,0x7
c001a429:	0f 85 e9 00 00 00    	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c001a42f:	83 ec 0c             	sub    esp,0xc
c001a432:	6a 00                	push   0x0
c001a434:	e8 8d f4 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a439:	89 c7                	mov    edi,eax
c001a43b:	89 d5                	mov    ebp,edx
c001a43d:	58                   	pop    eax
c001a43e:	5a                   	pop    edx
c001a43f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a442:	ff 36                	push   DWORD PTR [esi]
c001a444:	e8 fb f1 ff ff       	call   c0019644 <Vm::fpu64ToInternal(unsigned long long)>
c001a449:	8d 76 00             	lea    esi,[esi+0x0]
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	55                   	push   ebp
c001a450:	57                   	push   edi
c001a451:	52                   	push   edx
c001a452:	50                   	push   eax
c001a453:	e8 3c f4 ff ff       	call   c0019894 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a458:	83 c4 0c             	add    esp,0xc
c001a45b:	eb 67                	jmp    c001a4c4 <Vm::x87Handler(regs*)+0xabe>
c001a45d:	8d 76 00             	lea    esi,[esi+0x0]
c001a460:	31 c0                	xor    eax,eax
c001a462:	80 fa 02             	cmp    dl,0x2
c001a465:	0f 85 ad 00 00 00    	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c001a46b:	83 ec 0c             	sub    esp,0xc
c001a46e:	6a 00                	push   0x0
c001a470:	e8 51 f4 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a475:	59                   	pop    ecx
c001a476:	5f                   	pop    edi
c001a477:	90                   	nop
c001a478:	52                   	push   edx
c001a479:	50                   	push   eax
c001a47a:	e8 77 f1 ff ff       	call   c00195f6 <Vm::fpuInternalTo64(unsigned long long)>
c001a47f:	e9 84 00 00 00       	jmp    c001a508 <Vm::x87Handler(regs*)+0xb02>
c001a484:	31 c0                	xor    eax,eax
c001a486:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a48b:	0f 85 87 00 00 00    	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c001a491:	50                   	push   eax
c001a492:	50                   	push   eax
c001a493:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a496:	66 90                	xchg   ax,ax
c001a498:	31 d2                	xor    edx,edx
c001a49a:	52                   	push   edx
c001a49b:	50                   	push   eax
c001a49c:	e8 47 f2 ff ff       	call   c00196e8 <Vm::fpuLongToFloat(long long)>
c001a4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4ab:	89 c6                	mov    esi,eax
c001a4ad:	89 d7                	mov    edi,edx
c001a4af:	e8 12 f4 ff ff       	call   c00198c6 <Vm::fpuGetReg(int)>
c001a4b4:	57                   	push   edi
c001a4b5:	56                   	push   esi
c001a4b6:	52                   	push   edx
c001a4b7:	50                   	push   eax
c001a4b8:	e8 b8 f3 ff ff       	call   c0019875 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c0:	83 c4 1c             	add    esp,0x1c
c001a4c3:	90                   	nop
c001a4c4:	52                   	push   edx
c001a4c5:	50                   	push   eax
c001a4c6:	6a 00                	push   0x0
c001a4c8:	e8 3c f4 ff ff       	call   c0019909 <Vm::fpuSetReg(int, unsigned long long)>
c001a4cd:	e9 7a f7 ff ff       	jmp    c0019c4c <Vm::x87Handler(regs*)+0x246>
c001a4d2:	66 90                	xchg   ax,ax
c001a4d4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a4d8:	80 fa 05             	cmp    dl,0x5
c001a4db:	75 13                	jne    c001a4f0 <Vm::x87Handler(regs*)+0xaea>
c001a4dd:	55                   	push   ebp
c001a4de:	55                   	push   ebp
c001a4df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4e2:	ff 36                	push   DWORD PTR [esi]
c001a4e4:	e8 c3 f1 ff ff       	call   c00196ac <Vm::fpuULongToFloat(unsigned long long)>
c001a4e9:	e9 52 f7 ff ff       	jmp    c0019c40 <Vm::x87Handler(regs*)+0x23a>
c001a4ee:	66 90                	xchg   ax,ax
c001a4f0:	31 c0                	xor    eax,eax
c001a4f2:	80 fa 07             	cmp    dl,0x7
c001a4f5:	75 21                	jne    c001a518 <Vm::x87Handler(regs*)+0xb12>
c001a4f7:	e8 b7 f4 ff ff       	call   c00199b3 <Vm::fpuPop()>
c001a4fc:	51                   	push   ecx
c001a4fd:	51                   	push   ecx
c001a4fe:	52                   	push   edx
c001a4ff:	50                   	push   eax
c001a500:	e8 48 f1 ff ff       	call   c001964d <Vm::fpuFloatToLong(unsigned long long)>
c001a505:	8d 76 00             	lea    esi,[esi+0x0]
c001a508:	83 c4 10             	add    esp,0x10
c001a50b:	89 06                	mov    DWORD PTR [esi],eax
c001a50d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a510:	e9 7b f7 ff ff       	jmp    c0019c90 <Vm::x87Handler(regs*)+0x28a>
c001a515:	8d 76 00             	lea    esi,[esi+0x0]
c001a518:	83 c4 1c             	add    esp,0x1c
c001a51b:	5b                   	pop    ebx
c001a51c:	5e                   	pop    esi
c001a51d:	5f                   	pop    edi
c001a51e:	5d                   	pop    ebp
c001a51f:	c3                   	ret    

c001a520 <__static_initialization_and_destruction_0(int, int)>:
c001a520:	83 ec 0c             	sub    esp,0xc
c001a523:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a528:	75 1a                	jne    c001a544 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a52a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a532:	75 10                	jne    c001a544 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a534:	83 ec 0c             	sub    esp,0xc
c001a537:	68 00 7a 02 c0       	push   0xc0027a00
c001a53c:	e8 27 74 00 00       	call   c0021968 <Vm::_FPUState::_FPUState()>
c001a541:	83 c4 10             	add    esp,0x10
c001a544:	90                   	nop
c001a545:	83 c4 0c             	add    esp,0xc
c001a548:	c3                   	ret    
c001a549:	8d 76 00             	lea    esi,[esi+0x0]

c001a54c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a54c:	83 ec 0c             	sub    esp,0xc
c001a54f:	83 ec 08             	sub    esp,0x8
c001a552:	68 ff ff 00 00       	push   0xffff
c001a557:	6a 01                	push   0x1
c001a559:	e8 c2 ff ff ff       	call   c001a520 <__static_initialization_and_destruction_0(int, int)>
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	83 c4 0c             	add    esp,0xc
c001a564:	c3                   	ret    
c001a565:	66 90                	xchg   ax,ax
c001a567:	90                   	nop

c001a568 <FAT::getName()>:
c001a568:	b8 a0 4b 02 c0       	mov    eax,0xc0024ba0
c001a56d:	c3                   	ret    
c001a56e:	66 90                	xchg   ax,ax

c001a570 <FAT::tell(void*, unsigned long long*)>:
c001a570:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a575:	75 09                	jne    c001a580 <FAT::tell(void*, unsigned long long*)+0x10>
c001a577:	b8 04 00 00 00       	mov    eax,0x4
c001a57c:	c3                   	ret    
c001a57d:	8d 76 00             	lea    esi,[esi+0x0]
c001a580:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a585:	75 09                	jne    c001a590 <FAT::tell(void*, unsigned long long*)+0x20>
c001a587:	b8 04 00 00 00       	mov    eax,0x4
c001a58c:	c3                   	ret    
c001a58d:	8d 76 00             	lea    esi,[esi+0x0]
c001a590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a594:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a597:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a59a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a59e:	89 01                	mov    DWORD PTR [ecx],eax
c001a5a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a5a3:	b8 00 00 00 00       	mov    eax,0x0
c001a5a8:	c3                   	ret    
c001a5a9:	90                   	nop
c001a5aa:	66 90                	xchg   ax,ax

c001a5ac <FAT::stat(void*, unsigned long long*)>:
c001a5ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a5b1:	75 09                	jne    c001a5bc <FAT::stat(void*, unsigned long long*)+0x10>
c001a5b3:	b8 04 00 00 00       	mov    eax,0x4
c001a5b8:	c3                   	ret    
c001a5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a5c1:	75 09                	jne    c001a5cc <FAT::stat(void*, unsigned long long*)+0x20>
c001a5c3:	b8 04 00 00 00       	mov    eax,0x4
c001a5c8:	c3                   	ret    
c001a5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5d0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a5d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a5d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a5da:	89 01                	mov    DWORD PTR [ecx],eax
c001a5dc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a5df:	b8 00 00 00 00       	mov    eax,0x0
c001a5e4:	c3                   	ret    
c001a5e5:	90                   	nop
c001a5e6:	66 90                	xchg   ax,ax

c001a5e8 <FAT::~FAT()>:
c001a5e8:	83 ec 0c             	sub    esp,0xc
c001a5eb:	ba ec 4b 02 c0       	mov    edx,0xc0024bec
c001a5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5f4:	89 10                	mov    DWORD PTR [eax],edx
c001a5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5fa:	83 ec 0c             	sub    esp,0xc
c001a5fd:	50                   	push   eax
c001a5fe:	e8 33 28 ff ff       	call   c000ce36 <Filesystem::~Filesystem()>
c001a603:	83 c4 10             	add    esp,0x10
c001a606:	90                   	nop
c001a607:	83 c4 0c             	add    esp,0xc
c001a60a:	c3                   	ret    
c001a60b:	90                   	nop

c001a60c <FAT::~FAT()>:
c001a60c:	83 ec 0c             	sub    esp,0xc
c001a60f:	83 ec 0c             	sub    esp,0xc
c001a612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a616:	e8 cd ff ff ff       	call   c001a5e8 <FAT::~FAT()>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	83 ec 08             	sub    esp,0x8
c001a621:	6a 08                	push   0x8
c001a623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a627:	e8 ee 23 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c001a62c:	83 c4 10             	add    esp,0x10
c001a62f:	83 c4 0c             	add    esp,0xc
c001a632:	c3                   	ret    
c001a633:	90                   	nop

c001a634 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a634:	83 ec 1c             	sub    esp,0x1c
c001a637:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a63e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a643:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a647:	8b 04 85 80 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8580]
c001a64e:	83 f8 ff             	cmp    eax,0xffffffff
c001a651:	75 35                	jne    c001a688 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a653:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a657:	88 c2                	mov    dl,al
c001a659:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001a65e:	01 d0                	add    eax,edx
c001a660:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a664:	8b 15 60 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a60
c001a66a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a66e:	89 14 85 80 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8580],edx
c001a675:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001a67a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a67e:	89 14 85 00 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8500],edx
c001a685:	eb 19                	jmp    c001a6a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a687:	90                   	nop
c001a688:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a68c:	88 c2                	mov    dl,al
c001a68e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a692:	8b 04 85 80 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8580]
c001a699:	01 d0                	add    eax,edx
c001a69b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a69f:	90                   	nop
c001a6a0:	83 ec 04             	sub    esp,0x4
c001a6a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6ab:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a6af:	50                   	push   eax
c001a6b0:	e8 7d c5 fe ff       	call   c0006c32 <f_getlabel>
c001a6b5:	83 c4 10             	add    esp,0x10
c001a6b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a6c1:	75 09                	jne    c001a6cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a6c3:	b8 00 00 00 00       	mov    eax,0x0
c001a6c8:	eb 0a                	jmp    c001a6d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a6ca:	66 90                	xchg   ax,ax
c001a6cc:	b8 01 00 00 00       	mov    eax,0x1
c001a6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6d4:	83 c4 1c             	add    esp,0x1c
c001a6d7:	c3                   	ret    

c001a6d8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a6d8:	57                   	push   edi
c001a6d9:	83 ec 58             	sub    esp,0x58
c001a6dc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a6e4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a6e8:	b9 0f 00 00 00       	mov    ecx,0xf
c001a6ed:	b8 00 00 00 00       	mov    eax,0x0
c001a6f2:	fc                   	cld    
c001a6f3:	89 d7                	mov    edi,edx
c001a6f5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a6f7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6fb:	8b 04 85 80 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8580]
c001a702:	83 f8 ff             	cmp    eax,0xffffffff
c001a705:	75 35                	jne    c001a73c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a707:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a70b:	88 c2                	mov    dl,al
c001a70d:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001a712:	01 d0                	add    eax,edx
c001a714:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a718:	8b 15 60 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a60
c001a71e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a722:	89 14 85 80 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8580],edx
c001a729:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001a72e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a732:	89 14 85 00 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8500],edx
c001a739:	eb 19                	jmp    c001a754 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a73b:	90                   	nop
c001a73c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a740:	88 c2                	mov    dl,al
c001a742:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a746:	8b 04 85 80 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8580]
c001a74d:	01 d0                	add    eax,edx
c001a74f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a753:	90                   	nop
c001a754:	83 ec 08             	sub    esp,0x8
c001a757:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a75b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a75f:	50                   	push   eax
c001a760:	e8 1b 61 fe ff       	call   c0000880 <strcat>
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	83 ec 0c             	sub    esp,0xc
c001a76b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a76f:	50                   	push   eax
c001a770:	e8 ab c6 fe ff       	call   c0006e20 <f_setlabel>
c001a775:	83 c4 10             	add    esp,0x10
c001a778:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a77c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a781:	75 09                	jne    c001a78c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a783:	b8 00 00 00 00       	mov    eax,0x0
c001a788:	eb 0a                	jmp    c001a794 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a78a:	66 90                	xchg   ax,ax
c001a78c:	b8 01 00 00 00       	mov    eax,0x1
c001a791:	8d 76 00             	lea    esi,[esi+0x0]
c001a794:	83 c4 58             	add    esp,0x58
c001a797:	5f                   	pop    edi
c001a798:	c3                   	ret    
c001a799:	90                   	nop
c001a79a:	66 90                	xchg   ax,ax

c001a79c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a79c:	83 ec 2c             	sub    esp,0x2c
c001a79f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a7a7:	83 ec 08             	sub    esp,0x8
c001a7aa:	68 c4 4b 02 c0       	push   0xc0024bc4
c001a7af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7b3:	e8 14 60 fe ff       	call   c00007cc <strcmp>
c001a7b8:	83 c4 10             	add    esp,0x10
c001a7bb:	85 c0                	test   eax,eax
c001a7bd:	0f 94 c0             	sete   al
c001a7c0:	84 c0                	test   al,al
c001a7c2:	74 10                	je     c001a7d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a7c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7cc:	e9 b3 00 00 00       	jmp    c001a884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7d4:	83 ec 08             	sub    esp,0x8
c001a7d7:	68 b6 4b 02 c0       	push   0xc0024bb6
c001a7dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7e0:	e8 e7 5f fe ff       	call   c00007cc <strcmp>
c001a7e5:	83 c4 10             	add    esp,0x10
c001a7e8:	85 c0                	test   eax,eax
c001a7ea:	0f 94 c0             	sete   al
c001a7ed:	84 c0                	test   al,al
c001a7ef:	74 0f                	je     c001a800 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a7f1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7f9:	e9 86 00 00 00       	jmp    c001a884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7fe:	66 90                	xchg   ax,ax
c001a800:	83 ec 08             	sub    esp,0x8
c001a803:	68 bc 4b 02 c0       	push   0xc0024bbc
c001a808:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a80c:	e8 bb 5f fe ff       	call   c00007cc <strcmp>
c001a811:	83 c4 10             	add    esp,0x10
c001a814:	85 c0                	test   eax,eax
c001a816:	0f 94 c0             	sete   al
c001a819:	84 c0                	test   al,al
c001a81b:	74 0b                	je     c001a828 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a81d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a825:	eb 5d                	jmp    c001a884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a827:	90                   	nop
c001a828:	83 ec 08             	sub    esp,0x8
c001a82b:	68 cc 20 02 c0       	push   0xc00220cc
c001a830:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a834:	e8 93 5f fe ff       	call   c00007cc <strcmp>
c001a839:	83 c4 10             	add    esp,0x10
c001a83c:	85 c0                	test   eax,eax
c001a83e:	0f 94 c0             	sete   al
c001a841:	84 c0                	test   al,al
c001a843:	74 0b                	je     c001a850 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a845:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a84d:	eb 35                	jmp    c001a884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a84f:	90                   	nop
c001a850:	83 ec 08             	sub    esp,0x8
c001a853:	68 c2 4b 02 c0       	push   0xc0024bc2
c001a858:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a85c:	e8 6b 5f fe ff       	call   c00007cc <strcmp>
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	85 c0                	test   eax,eax
c001a866:	0f 94 c0             	sete   al
c001a869:	84 c0                	test   al,al
c001a86b:	74 0b                	je     c001a878 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a86d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a875:	eb 0d                	jmp    c001a884 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a877:	90                   	nop
c001a878:	b8 08 00 00 00       	mov    eax,0x8
c001a87d:	e9 ea 00 00 00       	jmp    c001a96c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a882:	66 90                	xchg   ax,ax
c001a884:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a88b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a890:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a894:	8b 04 85 80 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8580]
c001a89b:	83 f8 ff             	cmp    eax,0xffffffff
c001a89e:	75 34                	jne    c001a8d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a8a0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a8a4:	88 c2                	mov    dl,al
c001a8a6:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001a8ab:	01 d0                	add    eax,edx
c001a8ad:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a8b1:	8b 15 60 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a60
c001a8b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8bb:	89 14 85 80 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8580],edx
c001a8c2:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001a8c7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a8cb:	89 14 85 00 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8500],edx
c001a8d2:	eb 18                	jmp    c001a8ec <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a8d4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a8d8:	88 c2                	mov    dl,al
c001a8da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8de:	8b 04 85 80 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8580]
c001a8e5:	01 d0                	add    eax,edx
c001a8e7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a8eb:	90                   	nop
c001a8ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8f0:	88 04 24             	mov    BYTE PTR [esp],al
c001a8f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a8f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a903:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a908:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a910:	83 ec 0c             	sub    esp,0xc
c001a913:	68 00 20 00 00       	push   0x2000
c001a918:	e8 a6 f0 fe ff       	call   c00099c3 <malloc>
c001a91d:	83 c4 10             	add    esp,0x10
c001a920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a924:	68 00 20 00 00       	push   0x2000
c001a929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a92d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a931:	50                   	push   eax
c001a932:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a936:	50                   	push   eax
c001a937:	e8 65 cb fe ff       	call   c00074a1 <f_mkfs>
c001a93c:	83 c4 10             	add    esp,0x10
c001a93f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a943:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a948:	75 0a                	jne    c001a954 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a94a:	b8 00 00 00 00       	mov    eax,0x0
c001a94f:	eb 1b                	jmp    c001a96c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a951:	8d 76 00             	lea    esi,[esi+0x0]
c001a954:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a959:	75 09                	jne    c001a964 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a95b:	b8 09 00 00 00       	mov    eax,0x9
c001a960:	eb 0a                	jmp    c001a96c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a962:	66 90                	xchg   ax,ax
c001a964:	b8 01 00 00 00       	mov    eax,0x1
c001a969:	8d 76 00             	lea    esi,[esi+0x0]
c001a96c:	83 c4 2c             	add    esp,0x2c
c001a96f:	c3                   	ret    

c001a970 <FAT::tryMount(LogicalDisk*, int)>:
c001a970:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a976:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001a97b:	83 f8 14             	cmp    eax,0x14
c001a97e:	75 18                	jne    c001a998 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a980:	83 ec 0c             	sub    esp,0xc
c001a983:	68 c8 4b 02 c0       	push   0xc0024bc8
c001a988:	e8 30 9a ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001a98d:	83 c4 10             	add    esp,0x10
c001a990:	b0 00                	mov    al,0x0
c001a992:	e9 e9 01 00 00       	jmp    c001ab80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a997:	90                   	nop
c001a998:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a99f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a9a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a9ab:	3d 00 02 00 00       	cmp    eax,0x200
c001a9b0:	74 0a                	je     c001a9bc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a9b2:	b0 00                	mov    al,0x0
c001a9b4:	e9 c7 01 00 00       	jmp    c001ab80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9bc:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a9c4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a9cb:	8b 04 85 80 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8580]
c001a9d2:	83 f8 ff             	cmp    eax,0xffffffff
c001a9d5:	74 09                	je     c001a9e0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a9d7:	b0 01                	mov    al,0x1
c001a9d9:	e9 a2 01 00 00       	jmp    c001ab80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9de:	66 90                	xchg   ax,ax
c001a9e0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a9ea:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a9f2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a9f9:	88 c2                	mov    dl,al
c001a9fb:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001aa00:	01 d0                	add    eax,edx
c001aa02:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001aa09:	8b 15 60 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a60
c001aa0f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001aa16:	89 14 85 80 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8580],edx
c001aa1d:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001aa22:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001aa29:	89 14 85 00 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8500],edx
c001aa30:	83 ec 0c             	sub    esp,0xc
c001aa33:	68 54 02 00 00       	push   0x254
c001aa38:	e8 86 ef fe ff       	call   c00099c3 <malloc>
c001aa3d:	83 c4 10             	add    esp,0x10
c001aa40:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001aa47:	83 ec 04             	sub    esp,0x4
c001aa4a:	6a 00                	push   0x0
c001aa4c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa53:	50                   	push   eax
c001aa54:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa5b:	e8 c9 a3 fe ff       	call   c0004e29 <f_mount>
c001aa60:	83 c4 10             	add    esp,0x10
c001aa63:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa6a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001aa72:	74 1c                	je     c001aa90 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001aa74:	83 ec 0c             	sub    esp,0xc
c001aa77:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa7e:	e8 60 ef fe ff       	call   c00099e3 <rfree>
c001aa83:	83 c4 10             	add    esp,0x10
c001aa86:	b0 00                	mov    al,0x0
c001aa88:	e9 f3 00 00 00       	jmp    c001ab80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aa8d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa90:	83 ec 04             	sub    esp,0x4
c001aa93:	68 00 01 00 00       	push   0x100
c001aa98:	6a 00                	push   0x0
c001aa9a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aaa1:	50                   	push   eax
c001aaa2:	e8 dd 5b fe ff       	call   c0000684 <memset>
c001aaa7:	83 c4 10             	add    esp,0x10
c001aaaa:	83 ec 08             	sub    esp,0x8
c001aaad:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aab4:	50                   	push   eax
c001aab5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aabc:	50                   	push   eax
c001aabd:	e8 be 5d fe ff       	call   c0000880 <strcat>
c001aac2:	83 c4 10             	add    esp,0x10
c001aac5:	83 ec 08             	sub    esp,0x8
c001aac8:	68 d6 4b 02 c0       	push   0xc0024bd6
c001aacd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aad4:	50                   	push   eax
c001aad5:	e8 a6 5d fe ff       	call   c0000880 <strcat>
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	83 ec 04             	sub    esp,0x4
c001aae0:	6a 01                	push   0x1
c001aae2:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aae9:	50                   	push   eax
c001aaea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aaee:	50                   	push   eax
c001aaef:	e8 97 a3 fe ff       	call   c0004e8b <f_open>
c001aaf4:	83 c4 10             	add    esp,0x10
c001aaf7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aafe:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ab05:	85 c0                	test   eax,eax
c001ab07:	74 0b                	je     c001ab14 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001ab09:	78 31                	js     c001ab3c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ab0b:	83 e8 04             	sub    eax,0x4
c001ab0e:	83 f8 01             	cmp    eax,0x1
c001ab11:	77 29                	ja     c001ab3c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001ab13:	90                   	nop
c001ab14:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ab1c:	83 ec 0c             	sub    esp,0xc
c001ab1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ab23:	50                   	push   eax
c001ab24:	e8 b4 ae fe ff       	call   c00059dd <f_close>
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	90                   	nop
c001ab2d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001ab35:	74 41                	je     c001ab78 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001ab37:	eb 33                	jmp    c001ab6c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001ab39:	8d 76 00             	lea    esi,[esi+0x0]
c001ab3c:	83 ec 0c             	sub    esp,0xc
c001ab3f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ab46:	e8 98 ee fe ff       	call   c00099e3 <rfree>
c001ab4b:	83 c4 10             	add    esp,0x10
c001ab4e:	83 ec 04             	sub    esp,0x4
c001ab51:	6a 00                	push   0x0
c001ab53:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ab5a:	50                   	push   eax
c001ab5b:	6a 00                	push   0x0
c001ab5d:	e8 c7 a2 fe ff       	call   c0004e29 <f_mount>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	b0 00                	mov    al,0x0
c001ab67:	eb 17                	jmp    c001ab80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ab69:	8d 76 00             	lea    esi,[esi+0x0]
c001ab6c:	a1 60 7a 02 c0       	mov    eax,ds:0xc0027a60
c001ab71:	40                   	inc    eax
c001ab72:	a3 60 7a 02 c0       	mov    ds:0xc0027a60,eax
c001ab77:	90                   	nop
c001ab78:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ab7f:	90                   	nop
c001ab80:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ab86:	c3                   	ret    
c001ab87:	90                   	nop

c001ab88 <FAT::allocateSwapfile(char const*, int)>:
c001ab88:	55                   	push   ebp
c001ab89:	57                   	push   edi
c001ab8a:	56                   	push   esi
c001ab8b:	53                   	push   ebx
c001ab8c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ab92:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab9d:	83 ec 0c             	sub    esp,0xc
c001aba0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001aba7:	e8 17 ee fe ff       	call   c00099c3 <malloc>
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	89 c7                	mov    edi,eax
c001abb1:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001abb6:	83 ec 04             	sub    esp,0x4
c001abb9:	50                   	push   eax
c001abba:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001abc1:	57                   	push   edi
c001abc2:	e8 9f 24 ff ff       	call   c000d066 <File::File(char const*, Process*)>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001abd1:	83 ec 04             	sub    esp,0x4
c001abd4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abd8:	50                   	push   eax
c001abd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abdd:	50                   	push   eax
c001abde:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abe5:	e8 8c 27 ff ff       	call   c000d376 <File::stat(unsigned long long*, bool*)>
c001abea:	83 c4 10             	add    esp,0x10
c001abed:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abf4:	c1 e0 14             	shl    eax,0x14
c001abf7:	89 c7                	mov    edi,eax
c001abf9:	89 c5                	mov    ebp,eax
c001abfb:	c1 fd 1f             	sar    ebp,0x1f
c001abfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac06:	89 f9                	mov    ecx,edi
c001ac08:	31 c1                	xor    ecx,eax
c001ac0a:	89 cb                	mov    ebx,ecx
c001ac0c:	89 e9                	mov    ecx,ebp
c001ac0e:	31 d1                	xor    ecx,edx
c001ac10:	89 ce                	mov    esi,ecx
c001ac12:	89 f0                	mov    eax,esi
c001ac14:	09 d8                	or     eax,ebx
c001ac16:	0f 84 98 00 00 00    	je     c001acb4 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ac1c:	83 ec 0c             	sub    esp,0xc
c001ac1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac26:	e8 17 26 ff ff       	call   c000d242 <File::unlink()>
c001ac2b:	83 c4 10             	add    esp,0x10
c001ac2e:	83 ec 08             	sub    esp,0x8
c001ac31:	6a 12                	push   0x12
c001ac33:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac3a:	e8 8b 24 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c001ac3f:	83 c4 10             	add    esp,0x10
c001ac42:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac49:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac4f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac56:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ac5d:	c1 e0 14             	shl    eax,0x14
c001ac60:	99                   	cdq    
c001ac61:	6a 01                	push   0x1
c001ac63:	52                   	push   edx
c001ac64:	50                   	push   eax
c001ac65:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ac6c:	e8 1c c4 fe ff       	call   c000708d <f_expand>
c001ac71:	83 c4 10             	add    esp,0x10
c001ac74:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac7d:	83 c0 10             	add    eax,0x10
c001ac80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac82:	83 ec 0c             	sub    esp,0xc
c001ac85:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac89:	52                   	push   edx
c001ac8a:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ac8e:	52                   	push   edx
c001ac8f:	6a 00                	push   0x0
c001ac91:	68 00 04 00 00       	push   0x400
c001ac96:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac9d:	ff d0                	call   eax
c001ac9f:	83 c4 20             	add    esp,0x20
c001aca2:	83 ec 0c             	sub    esp,0xc
c001aca5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001acac:	e8 77 24 ff ff       	call   c000d128 <File::close()>
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	83 ec 08             	sub    esp,0x8
c001acb7:	6a 01                	push   0x1
c001acb9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001acc0:	e8 05 24 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c001acc5:	83 c4 10             	add    esp,0x10
c001acc8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001accf:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd1:	83 c0 0c             	add    eax,0xc
c001acd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd6:	83 ec 0c             	sub    esp,0xc
c001acd9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acdd:	52                   	push   edx
c001acde:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ace2:	52                   	push   edx
c001ace3:	6a 00                	push   0x0
c001ace5:	6a 04                	push   0x4
c001ace7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001acee:	ff d0                	call   eax
c001acf0:	83 c4 20             	add    esp,0x20
c001acf3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acfa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ad00:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ad07:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ad0e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ad11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ad14:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ad1b:	83 ec 0c             	sub    esp,0xc
c001ad1e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ad25:	e8 fe 23 ff ff       	call   c000d128 <File::close()>
c001ad2a:	83 c4 10             	add    esp,0x10
c001ad2d:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ad34:	ba 00 00 00 00       	mov    edx,0x0
c001ad39:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ad3f:	5b                   	pop    ebx
c001ad40:	5e                   	pop    esi
c001ad41:	5f                   	pop    edi
c001ad42:	5d                   	pop    ebp
c001ad43:	c3                   	ret    

c001ad44 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ad44:	57                   	push   edi
c001ad45:	56                   	push   esi
c001ad46:	53                   	push   ebx
c001ad47:	81 ec 50 02 00 00    	sub    esp,0x250
c001ad4d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ad55:	74 0d                	je     c001ad64 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ad57:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ad5f:	75 0f                	jne    c001ad70 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ad61:	8d 76 00             	lea    esi,[esi+0x0]
c001ad64:	b8 04 00 00 00       	mov    eax,0x4
c001ad69:	e9 36 01 00 00       	jmp    c001aea4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ad6e:	66 90                	xchg   ax,ax
c001ad70:	83 ec 08             	sub    esp,0x8
c001ad73:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad7a:	50                   	push   eax
c001ad7b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ad82:	e8 60 b2 fe ff       	call   c0005fe7 <f_readdir>
c001ad87:	83 c4 10             	add    esp,0x10
c001ad8a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ad91:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad98:	83 ec 0c             	sub    esp,0xc
c001ad9b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ada2:	83 c0 1a             	add    eax,0x1a
c001ada5:	50                   	push   eax
c001ada6:	e8 f5 58 fe ff       	call   c00006a0 <strlen>
c001adab:	83 c4 10             	add    esp,0x10
c001adae:	ba 00 00 00 00       	mov    edx,0x0
c001adb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001adbb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001adc2:	0f b6 c0             	movzx  eax,al
c001adc5:	83 e0 10             	and    eax,0x10
c001adc8:	74 0a                	je     c001add4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001adca:	b8 02 00 00 00       	mov    eax,0x2
c001adcf:	eb 0b                	jmp    c001addc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001add1:	8d 76 00             	lea    esi,[esi+0x0]
c001add4:	b8 01 00 00 00       	mov    eax,0x1
c001add9:	8d 76 00             	lea    esi,[esi+0x0]
c001addc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ade0:	83 ec 08             	sub    esp,0x8
c001ade3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001adea:	83 c0 1a             	add    eax,0x1a
c001aded:	50                   	push   eax
c001adee:	8d 44 24 10          	lea    eax,[esp+0x10]
c001adf2:	83 c0 10             	add    eax,0x10
c001adf5:	50                   	push   eax
c001adf6:	e8 45 59 fe ff       	call   c0000740 <strcpy>
c001adfb:	83 c4 10             	add    esp,0x10
c001adfe:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ae05:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ae0c:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ae10:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ae17:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ae1e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ae25:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ae2c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ae33:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ae3a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ae41:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ae48:	89 c6                	mov    esi,eax
c001ae4a:	89 d7                	mov    edi,edx
c001ae4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae4e:	89 c8                	mov    eax,ecx
c001ae50:	89 fa                	mov    edx,edi
c001ae52:	89 f3                	mov    ebx,esi
c001ae54:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ae5b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ae62:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ae69:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ae70:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ae76:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ae7d:	84 c0                	test   al,al
c001ae7f:	75 07                	jne    c001ae88 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ae81:	b8 07 00 00 00       	mov    eax,0x7
c001ae86:	eb 1c                	jmp    c001aea4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae88:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ae8f:	85 c0                	test   eax,eax
c001ae91:	75 09                	jne    c001ae9c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ae93:	b8 00 00 00 00       	mov    eax,0x0
c001ae98:	eb 0a                	jmp    c001aea4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae9a:	66 90                	xchg   ax,ax
c001ae9c:	b8 01 00 00 00       	mov    eax,0x1
c001aea1:	8d 76 00             	lea    esi,[esi+0x0]
c001aea4:	81 c4 50 02 00 00    	add    esp,0x250
c001aeaa:	5b                   	pop    ebx
c001aeab:	5e                   	pop    esi
c001aeac:	5f                   	pop    edi
c001aead:	c3                   	ret    
c001aeae:	66 90                	xchg   ax,ax

c001aeb0 <FAT::read(void*, unsigned long, void*, int*)>:
c001aeb0:	83 ec 1c             	sub    esp,0x1c
c001aeb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aeb8:	74 0a                	je     c001aec4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001aeba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001aebf:	75 0b                	jne    c001aecc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001aec1:	8d 76 00             	lea    esi,[esi+0x0]
c001aec4:	b8 04 00 00 00       	mov    eax,0x4
c001aec9:	eb 41                	jmp    c001af0c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001aecb:	90                   	nop
c001aecc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aed0:	50                   	push   eax
c001aed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aed5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aed9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aedd:	e8 e5 a3 fe ff       	call   c00052c7 <f_read>
c001aee2:	83 c4 10             	add    esp,0x10
c001aee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeed:	89 c2                	mov    edx,eax
c001aeef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aef3:	89 10                	mov    DWORD PTR [eax],edx
c001aef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aef9:	85 c0                	test   eax,eax
c001aefb:	75 07                	jne    c001af04 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001aefd:	b8 00 00 00 00       	mov    eax,0x0
c001af02:	eb 08                	jmp    c001af0c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001af04:	b8 01 00 00 00       	mov    eax,0x1
c001af09:	8d 76 00             	lea    esi,[esi+0x0]
c001af0c:	83 c4 1c             	add    esp,0x1c
c001af0f:	c3                   	ret    

c001af10 <FAT::write(void*, unsigned long, void*, int*)>:
c001af10:	83 ec 1c             	sub    esp,0x1c
c001af13:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af18:	74 0a                	je     c001af24 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001af1a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001af1f:	75 0b                	jne    c001af2c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001af21:	8d 76 00             	lea    esi,[esi+0x0]
c001af24:	b8 04 00 00 00       	mov    eax,0x4
c001af29:	eb 41                	jmp    c001af6c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001af2b:	90                   	nop
c001af2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af30:	50                   	push   eax
c001af31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af3d:	e8 05 a6 fe ff       	call   c0005547 <f_write>
c001af42:	83 c4 10             	add    esp,0x10
c001af45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af4d:	89 c2                	mov    edx,eax
c001af4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af53:	89 10                	mov    DWORD PTR [eax],edx
c001af55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af59:	85 c0                	test   eax,eax
c001af5b:	75 07                	jne    c001af64 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001af5d:	b8 00 00 00 00       	mov    eax,0x0
c001af62:	eb 08                	jmp    c001af6c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001af64:	b8 01 00 00 00       	mov    eax,0x1
c001af69:	8d 76 00             	lea    esi,[esi+0x0]
c001af6c:	83 c4 1c             	add    esp,0x1c
c001af6f:	c3                   	ret    

c001af70 <FAT::close(void*)>:
c001af70:	83 ec 1c             	sub    esp,0x1c
c001af73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af78:	75 0a                	jne    c001af84 <FAT::close(void*)+0x14>
c001af7a:	b8 04 00 00 00       	mov    eax,0x4
c001af7f:	eb 3f                	jmp    c001afc0 <FAT::close(void*)+0x50>
c001af81:	8d 76 00             	lea    esi,[esi+0x0]
c001af84:	83 ec 0c             	sub    esp,0xc
c001af87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af8b:	e8 4d aa fe ff       	call   c00059dd <f_close>
c001af90:	83 c4 10             	add    esp,0x10
c001af93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af97:	83 ec 0c             	sub    esp,0xc
c001af9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af9e:	e8 30 ea fe ff       	call   c00099d3 <free>
c001afa3:	83 c4 10             	add    esp,0x10
c001afa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afaa:	85 c0                	test   eax,eax
c001afac:	75 0a                	jne    c001afb8 <FAT::close(void*)+0x48>
c001afae:	b8 00 00 00 00       	mov    eax,0x0
c001afb3:	eb 0b                	jmp    c001afc0 <FAT::close(void*)+0x50>
c001afb5:	8d 76 00             	lea    esi,[esi+0x0]
c001afb8:	b8 01 00 00 00       	mov    eax,0x1
c001afbd:	8d 76 00             	lea    esi,[esi+0x0]
c001afc0:	83 c4 1c             	add    esp,0x1c
c001afc3:	c3                   	ret    

c001afc4 <FAT::closeDir(void*)>:
c001afc4:	83 ec 1c             	sub    esp,0x1c
c001afc7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001afcc:	75 0a                	jne    c001afd8 <FAT::closeDir(void*)+0x14>
c001afce:	b8 04 00 00 00       	mov    eax,0x4
c001afd3:	eb 3f                	jmp    c001b014 <FAT::closeDir(void*)+0x50>
c001afd5:	8d 76 00             	lea    esi,[esi+0x0]
c001afd8:	83 ec 0c             	sub    esp,0xc
c001afdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afdf:	e8 e1 af fe ff       	call   c0005fc5 <f_closedir>
c001afe4:	83 c4 10             	add    esp,0x10
c001afe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afeb:	83 ec 0c             	sub    esp,0xc
c001afee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aff2:	e8 dc e9 fe ff       	call   c00099d3 <free>
c001aff7:	83 c4 10             	add    esp,0x10
c001affa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001affe:	85 c0                	test   eax,eax
c001b000:	75 0a                	jne    c001b00c <FAT::closeDir(void*)+0x48>
c001b002:	b8 00 00 00 00       	mov    eax,0x0
c001b007:	eb 0b                	jmp    c001b014 <FAT::closeDir(void*)+0x50>
c001b009:	8d 76 00             	lea    esi,[esi+0x0]
c001b00c:	b8 01 00 00 00       	mov    eax,0x1
c001b011:	8d 76 00             	lea    esi,[esi+0x0]
c001b014:	83 c4 1c             	add    esp,0x1c
c001b017:	c3                   	ret    

c001b018 <FAT::seek(void*, unsigned long long)>:
c001b018:	83 ec 2c             	sub    esp,0x2c
c001b01b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b01f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b023:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b02b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b030:	75 0a                	jne    c001b03c <FAT::seek(void*, unsigned long long)+0x24>
c001b032:	b8 04 00 00 00       	mov    eax,0x4
c001b037:	eb 37                	jmp    c001b070 <FAT::seek(void*, unsigned long long)+0x58>
c001b039:	8d 76 00             	lea    esi,[esi+0x0]
c001b03c:	83 ec 04             	sub    esp,0x4
c001b03f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b043:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b047:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b04b:	e8 bc a9 fe ff       	call   c0005a0c <f_lseek>
c001b050:	83 c4 10             	add    esp,0x10
c001b053:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b057:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b05b:	85 c0                	test   eax,eax
c001b05d:	75 09                	jne    c001b068 <FAT::seek(void*, unsigned long long)+0x50>
c001b05f:	b8 00 00 00 00       	mov    eax,0x0
c001b064:	eb 0a                	jmp    c001b070 <FAT::seek(void*, unsigned long long)+0x58>
c001b066:	66 90                	xchg   ax,ax
c001b068:	b8 01 00 00 00       	mov    eax,0x1
c001b06d:	8d 76 00             	lea    esi,[esi+0x0]
c001b070:	83 c4 2c             	add    esp,0x2c
c001b073:	c3                   	ret    

c001b074 <fatWrapperReadDisk>:
c001b074:	83 ec 1c             	sub    esp,0x1c
c001b077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b07b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b07f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b083:	89 04 24             	mov    DWORD PTR [esp],eax
c001b086:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b08a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b08e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b093:	8b 04 85 60 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95a0]
c001b09a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b09e:	83 ec 0c             	sub    esp,0xc
c001b0a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b0a5:	52                   	push   edx
c001b0a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0ae:	50                   	push   eax
c001b0af:	e8 64 51 ff ff       	call   c0010218 <LogicalDisk::read(unsigned long long, int, void*)>
c001b0b4:	83 c4 20             	add    esp,0x20
c001b0b7:	83 c4 1c             	add    esp,0x1c
c001b0ba:	c3                   	ret    
c001b0bb:	90                   	nop

c001b0bc <fatWrapperWriteDisk>:
c001b0bc:	83 ec 1c             	sub    esp,0x1c
c001b0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b0c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b0cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b0d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b0d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0db:	8b 04 85 60 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95a0]
c001b0e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b0e6:	83 ec 0c             	sub    esp,0xc
c001b0e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b0ed:	52                   	push   edx
c001b0ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0f6:	50                   	push   eax
c001b0f7:	e8 88 51 ff ff       	call   c0010284 <LogicalDisk::write(unsigned long long, int, void*)>
c001b0fc:	83 c4 20             	add    esp,0x20
c001b0ff:	83 c4 1c             	add    esp,0x1c
c001b102:	c3                   	ret    
c001b103:	90                   	nop

c001b104 <fatWrapperIoctl>:
c001b104:	53                   	push   ebx
c001b105:	83 ec 28             	sub    esp,0x28
c001b108:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b10c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b110:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b114:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b118:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b11d:	75 31                	jne    c001b150 <fatWrapperIoctl+0x4c>
c001b11f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b123:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b127:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b12c:	8b 04 85 60 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95a0]
c001b133:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b139:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b13f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b143:	66 89 02             	mov    WORD PTR [edx],ax
c001b146:	b8 00 00 00 00       	mov    eax,0x0
c001b14b:	e9 bc 00 00 00       	jmp    c001b20c <fatWrapperIoctl+0x108>
c001b150:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b155:	75 6d                	jne    c001b1c4 <fatWrapperIoctl+0xc0>
c001b157:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b15b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b15f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b164:	8b 04 85 60 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95a0]
c001b16b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b171:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b177:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b17d:	89 c8                	mov    eax,ecx
c001b17f:	89 da                	mov    edx,ebx
c001b181:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b185:	c1 e0 0a             	shl    eax,0xa
c001b188:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b18d:	8b 0c 8d 60 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95a0]
c001b194:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b19a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b1a0:	89 cb                	mov    ebx,ecx
c001b1a2:	c1 fb 1f             	sar    ebx,0x1f
c001b1a5:	53                   	push   ebx
c001b1a6:	51                   	push   ecx
c001b1a7:	52                   	push   edx
c001b1a8:	50                   	push   eax
c001b1a9:	e8 16 5e 00 00       	call   c0020fc4 <__udivdi3>
c001b1ae:	83 c4 10             	add    esp,0x10
c001b1b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b1b5:	89 01                	mov    DWORD PTR [ecx],eax
c001b1b7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b1ba:	b8 00 00 00 00       	mov    eax,0x0
c001b1bf:	eb 4b                	jmp    c001b20c <fatWrapperIoctl+0x108>
c001b1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1c4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b1c9:	75 09                	jne    c001b1d4 <fatWrapperIoctl+0xd0>
c001b1cb:	b8 00 00 00 00       	mov    eax,0x0
c001b1d0:	eb 3a                	jmp    c001b20c <fatWrapperIoctl+0x108>
c001b1d2:	66 90                	xchg   ax,ax
c001b1d4:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b1d9:	75 19                	jne    c001b1f4 <fatWrapperIoctl+0xf0>
c001b1db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1e7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b1ed:	b8 00 00 00 00       	mov    eax,0x0
c001b1f2:	eb 18                	jmp    c001b20c <fatWrapperIoctl+0x108>
c001b1f4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b1f9:	75 09                	jne    c001b204 <fatWrapperIoctl+0x100>
c001b1fb:	b8 00 00 00 00       	mov    eax,0x0
c001b200:	eb 0a                	jmp    c001b20c <fatWrapperIoctl+0x108>
c001b202:	66 90                	xchg   ax,ax
c001b204:	b8 04 00 00 00       	mov    eax,0x4
c001b209:	8d 76 00             	lea    esi,[esi+0x0]
c001b20c:	83 c4 28             	add    esp,0x28
c001b20f:	5b                   	pop    ebx
c001b210:	c3                   	ret    
c001b211:	90                   	nop
c001b212:	66 90                	xchg   ax,ax

c001b214 <FAT::FAT()>:
c001b214:	83 ec 1c             	sub    esp,0x1c
c001b217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b21b:	83 ec 0c             	sub    esp,0xc
c001b21e:	50                   	push   eax
c001b21f:	e8 ee 1b ff ff       	call   c000ce12 <Filesystem::Filesystem()>
c001b224:	83 c4 10             	add    esp,0x10
c001b227:	ba ec 4b 02 c0       	mov    edx,0xc0024bec
c001b22c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b230:	89 10                	mov    DWORD PTR [eax],edx
c001b232:	c7 05 60 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a60,0x0
c001b23c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b244:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b249:	7f 15                	jg     c001b260 <FAT::FAT()+0x4c>
c001b24b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b24f:	c7 04 85 80 7a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8580],0xffffffff
c001b25a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b25e:	eb e4                	jmp    c001b244 <FAT::FAT()+0x30>
c001b260:	90                   	nop
c001b261:	83 c4 1c             	add    esp,0x1c
c001b264:	c3                   	ret    
c001b265:	90                   	nop
c001b266:	66 90                	xchg   ax,ax

c001b268 <FAT::fixFilepath(char*)>:
c001b268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b26c:	8a 00                	mov    al,BYTE PTR [eax]
c001b26e:	3c 40                	cmp    al,0x40
c001b270:	7e 2e                	jle    c001b2a0 <FAT::fixFilepath(char*)+0x38>
c001b272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b276:	8a 00                	mov    al,BYTE PTR [eax]
c001b278:	83 e8 41             	sub    eax,0x41
c001b27b:	88 c2                	mov    dl,al
c001b27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b281:	88 10                	mov    BYTE PTR [eax],dl
c001b283:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b287:	8a 00                	mov    al,BYTE PTR [eax]
c001b289:	0f be c0             	movsx  eax,al
c001b28c:	8b 04 85 80 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8580]
c001b293:	83 c0 30             	add    eax,0x30
c001b296:	88 c2                	mov    dl,al
c001b298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b29c:	88 10                	mov    BYTE PTR [eax],dl
c001b29e:	66 90                	xchg   ax,ax
c001b2a0:	90                   	nop
c001b2a1:	c3                   	ret    
c001b2a2:	66 90                	xchg   ax,ax

c001b2a4 <FAT::open(char const*, void**, FileOpenMode)>:
c001b2a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b2aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b2b2:	74 0c                	je     c001b2c0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b2b4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b2bc:	75 0e                	jne    c001b2cc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b2be:	66 90                	xchg   ax,ax
c001b2c0:	b8 04 00 00 00       	mov    eax,0x4
c001b2c5:	e9 06 01 00 00       	jmp    c001b3d0 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b2ca:	66 90                	xchg   ax,ax
c001b2cc:	83 ec 08             	sub    esp,0x8
c001b2cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b2da:	50                   	push   eax
c001b2db:	e8 60 54 fe ff       	call   c0000740 <strcpy>
c001b2e0:	83 c4 10             	add    esp,0x10
c001b2e3:	83 ec 08             	sub    esp,0x8
c001b2e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2ea:	50                   	push   eax
c001b2eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2f2:	e8 71 ff ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b302:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b309:	83 e0 01             	and    eax,0x1
c001b30c:	74 0a                	je     c001b318 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b30e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b316:	66 90                	xchg   ax,ax
c001b318:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b31f:	83 e0 04             	and    eax,0x4
c001b322:	74 10                	je     c001b334 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b324:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b32c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b334:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b33b:	83 e0 02             	and    eax,0x2
c001b33e:	74 08                	je     c001b348 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b340:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b348:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b34f:	83 e0 08             	and    eax,0x8
c001b352:	74 08                	je     c001b35c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b354:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b35c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b363:	83 e0 10             	and    eax,0x10
c001b366:	74 08                	je     c001b370 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b368:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b370:	83 ec 0c             	sub    esp,0xc
c001b373:	68 50 02 00 00       	push   0x250
c001b378:	e8 46 e6 fe ff       	call   c00099c3 <malloc>
c001b37d:	83 c4 10             	add    esp,0x10
c001b380:	89 c2                	mov    edx,eax
c001b382:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b389:	89 10                	mov    DWORD PTR [eax],edx
c001b38b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b393:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b39a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b39c:	83 ec 04             	sub    esp,0x4
c001b39f:	52                   	push   edx
c001b3a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b3a4:	52                   	push   edx
c001b3a5:	50                   	push   eax
c001b3a6:	e8 e0 9a fe ff       	call   c0004e8b <f_open>
c001b3ab:	83 c4 10             	add    esp,0x10
c001b3ae:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b3b5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b3bd:	74 09                	je     c001b3c8 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b3bf:	b8 01 00 00 00       	mov    eax,0x1
c001b3c4:	eb 0a                	jmp    c001b3d0 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b3c6:	66 90                	xchg   ax,ax
c001b3c8:	b8 00 00 00 00       	mov    eax,0x0
c001b3cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b3d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3d6:	c3                   	ret    
c001b3d7:	90                   	nop

c001b3d8 <FAT::openDir(char const*, void**)>:
c001b3d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b3de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b3e6:	74 0c                	je     c001b3f4 <FAT::openDir(char const*, void**)+0x1c>
c001b3e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b3f0:	75 0e                	jne    c001b400 <FAT::openDir(char const*, void**)+0x28>
c001b3f2:	66 90                	xchg   ax,ax
c001b3f4:	b8 04 00 00 00       	mov    eax,0x4
c001b3f9:	e9 82 00 00 00       	jmp    c001b480 <FAT::openDir(char const*, void**)+0xa8>
c001b3fe:	66 90                	xchg   ax,ax
c001b400:	83 ec 08             	sub    esp,0x8
c001b403:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b40a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b40e:	50                   	push   eax
c001b40f:	e8 2c 53 fe ff       	call   c0000740 <strcpy>
c001b414:	83 c4 10             	add    esp,0x10
c001b417:	83 ec 08             	sub    esp,0x8
c001b41a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b41e:	50                   	push   eax
c001b41f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b426:	e8 3d fe ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b42b:	83 c4 10             	add    esp,0x10
c001b42e:	83 ec 0c             	sub    esp,0xc
c001b431:	6a 4c                	push   0x4c
c001b433:	e8 8b e5 fe ff       	call   c00099c3 <malloc>
c001b438:	83 c4 10             	add    esp,0x10
c001b43b:	89 c2                	mov    edx,eax
c001b43d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b444:	89 10                	mov    DWORD PTR [eax],edx
c001b446:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b44d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b44f:	83 ec 08             	sub    esp,0x8
c001b452:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b456:	52                   	push   edx
c001b457:	50                   	push   eax
c001b458:	e8 66 aa fe ff       	call   c0005ec3 <f_opendir>
c001b45d:	83 c4 10             	add    esp,0x10
c001b460:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b467:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b46f:	74 07                	je     c001b478 <FAT::openDir(char const*, void**)+0xa0>
c001b471:	b8 01 00 00 00       	mov    eax,0x1
c001b476:	eb 08                	jmp    c001b480 <FAT::openDir(char const*, void**)+0xa8>
c001b478:	b8 00 00 00 00       	mov    eax,0x0
c001b47d:	8d 76 00             	lea    esi,[esi+0x0]
c001b480:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b486:	c3                   	ret    
c001b487:	90                   	nop

c001b488 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b488:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b48e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b496:	75 0c                	jne    c001b4a4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b498:	b8 04 00 00 00       	mov    eax,0x4
c001b49d:	e9 d2 00 00 00       	jmp    c001b574 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4a2:	66 90                	xchg   ax,ax
c001b4a4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b4ac:	75 0a                	jne    c001b4b8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b4ae:	b8 04 00 00 00       	mov    eax,0x4
c001b4b3:	e9 bc 00 00 00       	jmp    c001b574 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4b8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b4c0:	75 0a                	jne    c001b4cc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b4c2:	b8 04 00 00 00       	mov    eax,0x4
c001b4c7:	e9 a8 00 00 00       	jmp    c001b574 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4cc:	83 ec 08             	sub    esp,0x8
c001b4cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b4d6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b4dd:	50                   	push   eax
c001b4de:	e8 5d 52 fe ff       	call   c0000740 <strcpy>
c001b4e3:	83 c4 10             	add    esp,0x10
c001b4e6:	83 ec 08             	sub    esp,0x8
c001b4e9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b4f0:	50                   	push   eax
c001b4f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b4f8:	e8 6b fd ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b4fd:	83 c4 10             	add    esp,0x10
c001b500:	83 ec 08             	sub    esp,0x8
c001b503:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b507:	50                   	push   eax
c001b508:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b50f:	50                   	push   eax
c001b510:	e8 6d ab fe ff       	call   c0006082 <f_stat>
c001b515:	83 c4 10             	add    esp,0x10
c001b518:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b51f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b526:	85 c0                	test   eax,eax
c001b528:	74 0a                	je     c001b534 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b52a:	83 f8 04             	cmp    eax,0x4
c001b52d:	74 35                	je     c001b564 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b52f:	eb 3b                	jmp    c001b56c <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b531:	8d 76 00             	lea    esi,[esi+0x0]
c001b534:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b538:	0f b6 c0             	movzx  eax,al
c001b53b:	83 e0 10             	and    eax,0x10
c001b53e:	0f 95 c2             	setne  dl
c001b541:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b548:	88 10                	mov    BYTE PTR [eax],dl
c001b54a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b54d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b551:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b558:	89 01                	mov    DWORD PTR [ecx],eax
c001b55a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b55d:	b8 00 00 00 00       	mov    eax,0x0
c001b562:	eb 10                	jmp    c001b574 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b564:	b8 02 00 00 00       	mov    eax,0x2
c001b569:	eb 09                	jmp    c001b574 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b56b:	90                   	nop
c001b56c:	b8 01 00 00 00       	mov    eax,0x1
c001b571:	8d 76 00             	lea    esi,[esi+0x0]
c001b574:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b57a:	c3                   	ret    
c001b57b:	90                   	nop

c001b57c <FAT::unlink(char const*)>:
c001b57c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b582:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b58a:	75 08                	jne    c001b594 <FAT::unlink(char const*)+0x18>
c001b58c:	b8 04 00 00 00       	mov    eax,0x4
c001b591:	eb 61                	jmp    c001b5f4 <FAT::unlink(char const*)+0x78>
c001b593:	90                   	nop
c001b594:	83 ec 08             	sub    esp,0x8
c001b597:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b59e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5a2:	50                   	push   eax
c001b5a3:	e8 98 51 fe ff       	call   c0000740 <strcpy>
c001b5a8:	83 c4 10             	add    esp,0x10
c001b5ab:	83 ec 08             	sub    esp,0x8
c001b5ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b5b2:	50                   	push   eax
c001b5b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b5ba:	e8 a9 fc ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b5bf:	83 c4 10             	add    esp,0x10
c001b5c2:	83 ec 0c             	sub    esp,0xc
c001b5c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5c9:	50                   	push   eax
c001b5ca:	e8 05 ae fe ff       	call   c00063d4 <f_unlink>
c001b5cf:	83 c4 10             	add    esp,0x10
c001b5d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b5d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b5e0:	85 c0                	test   eax,eax
c001b5e2:	75 08                	jne    c001b5ec <FAT::unlink(char const*)+0x70>
c001b5e4:	b8 00 00 00 00       	mov    eax,0x0
c001b5e9:	eb 09                	jmp    c001b5f4 <FAT::unlink(char const*)+0x78>
c001b5eb:	90                   	nop
c001b5ec:	b8 01 00 00 00       	mov    eax,0x1
c001b5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b5fa:	c3                   	ret    
c001b5fb:	90                   	nop

c001b5fc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b5fc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b602:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b609:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b610:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b614:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b618:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b620:	75 0a                	jne    c001b62c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b622:	b8 04 00 00 00       	mov    eax,0x4
c001b627:	e9 30 01 00 00       	jmp    c001b75c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b62c:	83 ec 08             	sub    esp,0x8
c001b62f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b636:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b63a:	50                   	push   eax
c001b63b:	e8 00 51 fe ff       	call   c0000740 <strcpy>
c001b640:	83 c4 10             	add    esp,0x10
c001b643:	83 ec 08             	sub    esp,0x8
c001b646:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b64a:	50                   	push   eax
c001b64b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b652:	e8 11 fc ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b657:	83 c4 10             	add    esp,0x10
c001b65a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b662:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b66a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b66f:	83 e0 01             	and    eax,0x1
c001b672:	74 08                	je     c001b67c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b674:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b67c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b681:	83 e0 02             	and    eax,0x2
c001b684:	74 0a                	je     c001b690 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b686:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b68e:	66 90                	xchg   ax,ax
c001b690:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b695:	83 e0 04             	and    eax,0x4
c001b698:	74 0a                	je     c001b6a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b69a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b6a2:	66 90                	xchg   ax,ax
c001b6a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b6a9:	83 e0 08             	and    eax,0x8
c001b6ac:	74 0a                	je     c001b6b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b6ae:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b6b6:	66 90                	xchg   ax,ax
c001b6b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6bd:	83 e0 01             	and    eax,0x1
c001b6c0:	74 0a                	je     c001b6cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b6c2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b6ca:	66 90                	xchg   ax,ax
c001b6cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6d1:	83 e0 02             	and    eax,0x2
c001b6d4:	74 0a                	je     c001b6e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b6d6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b6de:	66 90                	xchg   ax,ax
c001b6e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6e5:	83 e0 04             	and    eax,0x4
c001b6e8:	74 0a                	je     c001b6f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b6ea:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b6f2:	66 90                	xchg   ax,ax
c001b6f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6f9:	83 e0 08             	and    eax,0x8
c001b6fc:	74 0a                	je     c001b708 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b6fe:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b706:	66 90                	xchg   ax,ax
c001b708:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b70f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b716:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b71e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b726:	83 ec 04             	sub    esp,0x4
c001b729:	52                   	push   edx
c001b72a:	50                   	push   eax
c001b72b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b72f:	50                   	push   eax
c001b730:	e8 41 b3 fe ff       	call   c0006a76 <f_chmod>
c001b735:	83 c4 10             	add    esp,0x10
c001b738:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b73f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b746:	85 c0                	test   eax,eax
c001b748:	75 0a                	jne    c001b754 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b74a:	b8 00 00 00 00       	mov    eax,0x0
c001b74f:	eb 0b                	jmp    c001b75c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b751:	8d 76 00             	lea    esi,[esi+0x0]
c001b754:	b8 01 00 00 00       	mov    eax,0x1
c001b759:	8d 76 00             	lea    esi,[esi+0x0]
c001b75c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b762:	c3                   	ret    
c001b763:	90                   	nop

c001b764 <FAT::rename(char const*, char const*)>:
c001b764:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b76a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b772:	74 0c                	je     c001b780 <FAT::rename(char const*, char const*)+0x1c>
c001b774:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b77c:	75 0e                	jne    c001b78c <FAT::rename(char const*, char const*)+0x28>
c001b77e:	66 90                	xchg   ax,ax
c001b780:	b8 04 00 00 00       	mov    eax,0x4
c001b785:	e9 9e 00 00 00       	jmp    c001b828 <FAT::rename(char const*, char const*)+0xc4>
c001b78a:	66 90                	xchg   ax,ax
c001b78c:	83 ec 08             	sub    esp,0x8
c001b78f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b796:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b79d:	50                   	push   eax
c001b79e:	e8 9d 4f fe ff       	call   c0000740 <strcpy>
c001b7a3:	83 c4 10             	add    esp,0x10
c001b7a6:	83 ec 08             	sub    esp,0x8
c001b7a9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b7b0:	50                   	push   eax
c001b7b1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b7b8:	e8 ab fa ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b7bd:	83 c4 10             	add    esp,0x10
c001b7c0:	83 ec 08             	sub    esp,0x8
c001b7c3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b7ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7ce:	50                   	push   eax
c001b7cf:	e8 6c 4f fe ff       	call   c0000740 <strcpy>
c001b7d4:	83 c4 10             	add    esp,0x10
c001b7d7:	83 ec 08             	sub    esp,0x8
c001b7da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7de:	50                   	push   eax
c001b7df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b7e6:	e8 7d fa ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b7eb:	83 c4 10             	add    esp,0x10
c001b7ee:	83 ec 08             	sub    esp,0x8
c001b7f1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7f5:	50                   	push   eax
c001b7f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b7fd:	50                   	push   eax
c001b7fe:	e8 80 af fe ff       	call   c0006783 <f_rename>
c001b803:	83 c4 10             	add    esp,0x10
c001b806:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b80d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b814:	85 c0                	test   eax,eax
c001b816:	75 08                	jne    c001b820 <FAT::rename(char const*, char const*)+0xbc>
c001b818:	b8 00 00 00 00       	mov    eax,0x0
c001b81d:	eb 09                	jmp    c001b828 <FAT::rename(char const*, char const*)+0xc4>
c001b81f:	90                   	nop
c001b820:	b8 01 00 00 00       	mov    eax,0x1
c001b825:	8d 76 00             	lea    esi,[esi+0x0]
c001b828:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b82e:	c3                   	ret    
c001b82f:	90                   	nop

c001b830 <FAT::mkdir(char const*)>:
c001b830:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b836:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b83e:	75 08                	jne    c001b848 <FAT::mkdir(char const*)+0x18>
c001b840:	b8 04 00 00 00       	mov    eax,0x4
c001b845:	eb 61                	jmp    c001b8a8 <FAT::mkdir(char const*)+0x78>
c001b847:	90                   	nop
c001b848:	83 ec 08             	sub    esp,0x8
c001b84b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b852:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b856:	50                   	push   eax
c001b857:	e8 e4 4e fe ff       	call   c0000740 <strcpy>
c001b85c:	83 c4 10             	add    esp,0x10
c001b85f:	83 ec 08             	sub    esp,0x8
c001b862:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b866:	50                   	push   eax
c001b867:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b86e:	e8 f5 f9 ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b873:	83 c4 10             	add    esp,0x10
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b87d:	50                   	push   eax
c001b87e:	e8 d4 ac fe ff       	call   c0006557 <f_mkdir>
c001b883:	83 c4 10             	add    esp,0x10
c001b886:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b88d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b894:	85 c0                	test   eax,eax
c001b896:	75 08                	jne    c001b8a0 <FAT::mkdir(char const*)+0x70>
c001b898:	b8 00 00 00 00       	mov    eax,0x0
c001b89d:	eb 09                	jmp    c001b8a8 <FAT::mkdir(char const*)+0x78>
c001b89f:	90                   	nop
c001b8a0:	b8 01 00 00 00       	mov    eax,0x1
c001b8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b8ae:	c3                   	ret    
c001b8af:	90                   	nop

c001b8b0 <FAT::exists(char const*)>:
c001b8b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b8b6:	83 ec 08             	sub    esp,0x8
c001b8b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b8c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b8c4:	50                   	push   eax
c001b8c5:	e8 76 4e fe ff       	call   c0000740 <strcpy>
c001b8ca:	83 c4 10             	add    esp,0x10
c001b8cd:	83 ec 08             	sub    esp,0x8
c001b8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8d4:	50                   	push   eax
c001b8d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b8dc:	e8 87 f9 ff ff       	call   c001b268 <FAT::fixFilepath(char*)>
c001b8e1:	83 c4 10             	add    esp,0x10
c001b8e4:	83 ec 08             	sub    esp,0x8
c001b8e7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b8ee:	50                   	push   eax
c001b8ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b8f3:	50                   	push   eax
c001b8f4:	e8 89 a7 fe ff       	call   c0006082 <f_stat>
c001b8f9:	83 c4 10             	add    esp,0x10
c001b8fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b903:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b90a:	85 c0                	test   eax,eax
c001b90c:	75 06                	jne    c001b914 <FAT::exists(char const*)+0x64>
c001b90e:	b0 01                	mov    al,0x1
c001b910:	eb 06                	jmp    c001b918 <FAT::exists(char const*)+0x68>
c001b912:	66 90                	xchg   ax,ax
c001b914:	b0 00                	mov    al,0x0
c001b916:	66 90                	xchg   ax,ax
c001b918:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b91e:	c3                   	ret    
c001b91f:	90                   	nop

c001b920 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b920:	b8 08 00 00 00       	mov    eax,0x8
c001b925:	c3                   	ret    

c001b926 <ISO9660::seek(void*, unsigned long long)>:
c001b926:	53                   	push   ebx
c001b927:	b8 04 00 00 00       	mov    eax,0x4
c001b92c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b930:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b934:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b938:	85 d2                	test   edx,edx
c001b93a:	74 17                	je     c001b953 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b93c:	89 c8                	mov    eax,ecx
c001b93e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b941:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b944:	b8 01 00 00 00       	mov    eax,0x1
c001b949:	73 08                	jae    c001b953 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b94b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b94e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b951:	31 c0                	xor    eax,eax
c001b953:	5b                   	pop    ebx
c001b954:	c3                   	ret    
c001b955:	90                   	nop

c001b956 <ISO9660::tell(void*, unsigned long long*)>:
c001b956:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b95a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b95e:	85 d2                	test   edx,edx
c001b960:	74 12                	je     c001b974 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b962:	85 c0                	test   eax,eax
c001b964:	74 0e                	je     c001b974 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b966:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b969:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b96c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b96f:	89 10                	mov    DWORD PTR [eax],edx
c001b971:	31 c0                	xor    eax,eax
c001b973:	c3                   	ret    
c001b974:	b8 04 00 00 00       	mov    eax,0x4
c001b979:	c3                   	ret    

c001b97a <ISO9660::getName()>:
c001b97a:	b8 4c 4c 02 c0       	mov    eax,0xc0024c4c
c001b97f:	c3                   	ret    

c001b980 <ISO9660::stat(void*, unsigned long long*)>:
c001b980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b988:	85 d2                	test   edx,edx
c001b98a:	74 12                	je     c001b99e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b98c:	85 c0                	test   eax,eax
c001b98e:	74 0e                	je     c001b99e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b990:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b993:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b996:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b999:	89 10                	mov    DWORD PTR [eax],edx
c001b99b:	31 c0                	xor    eax,eax
c001b99d:	c3                   	ret    
c001b99e:	b8 04 00 00 00       	mov    eax,0x4
c001b9a3:	c3                   	ret    

c001b9a4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b9a4:	b8 01 00 00 00       	mov    eax,0x1
c001b9a9:	c3                   	ret    

c001b9aa <ISO9660::unlink(char const*)>:
c001b9aa:	b8 01 00 00 00       	mov    eax,0x1
c001b9af:	c3                   	ret    

c001b9b0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b9b0:	b8 01 00 00 00       	mov    eax,0x1
c001b9b5:	c3                   	ret    

c001b9b6 <ISO9660::rename(char const*, char const*)>:
c001b9b6:	b8 01 00 00 00       	mov    eax,0x1
c001b9bb:	c3                   	ret    

c001b9bc <ISO9660::mkdir(char const*)>:
c001b9bc:	b8 01 00 00 00       	mov    eax,0x1
c001b9c1:	c3                   	ret    

c001b9c2 <ISO9660::close(void*)>:
c001b9c2:	83 ec 0c             	sub    esp,0xc
c001b9c5:	b8 04 00 00 00       	mov    eax,0x4
c001b9ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9ce:	85 d2                	test   edx,edx
c001b9d0:	74 0e                	je     c001b9e0 <ISO9660::close(void*)+0x1e>
c001b9d2:	83 ec 0c             	sub    esp,0xc
c001b9d5:	52                   	push   edx
c001b9d6:	e8 f8 df fe ff       	call   c00099d3 <free>
c001b9db:	83 c4 10             	add    esp,0x10
c001b9de:	31 c0                	xor    eax,eax
c001b9e0:	83 c4 0c             	add    esp,0xc
c001b9e3:	c3                   	ret    

c001b9e4 <ISO9660::closeDir(void*)>:
c001b9e4:	83 ec 0c             	sub    esp,0xc
c001b9e7:	b8 04 00 00 00       	mov    eax,0x4
c001b9ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9f0:	85 d2                	test   edx,edx
c001b9f2:	74 0e                	je     c001ba02 <ISO9660::closeDir(void*)+0x1e>
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	52                   	push   edx
c001b9f8:	e8 d6 df fe ff       	call   c00099d3 <free>
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	31 c0                	xor    eax,eax
c001ba02:	83 c4 0c             	add    esp,0xc
c001ba05:	c3                   	ret    

c001ba06 <ISO9660::~ISO9660()>:
c001ba06:	83 ec 0c             	sub    esp,0xc
c001ba09:	ba 70 4c 02 c0       	mov    edx,0xc0024c70
c001ba0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba12:	89 10                	mov    DWORD PTR [eax],edx
c001ba14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba18:	83 ec 0c             	sub    esp,0xc
c001ba1b:	50                   	push   eax
c001ba1c:	e8 15 14 ff ff       	call   c000ce36 <Filesystem::~Filesystem()>
c001ba21:	83 c4 10             	add    esp,0x10
c001ba24:	90                   	nop
c001ba25:	83 c4 0c             	add    esp,0xc
c001ba28:	c3                   	ret    
c001ba29:	90                   	nop

c001ba2a <ISO9660::~ISO9660()>:
c001ba2a:	83 ec 0c             	sub    esp,0xc
c001ba2d:	83 ec 0c             	sub    esp,0xc
c001ba30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba34:	e8 cd ff ff ff       	call   c001ba06 <ISO9660::~ISO9660()>
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	83 ec 08             	sub    esp,0x8
c001ba3f:	6a 08                	push   0x8
c001ba41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba45:	e8 d0 0f ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c001ba4a:	83 c4 10             	add    esp,0x10
c001ba4d:	83 c4 0c             	add    esp,0xc
c001ba50:	c3                   	ret    

c001ba51 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ba51:	55                   	push   ebp
c001ba52:	31 c9                	xor    ecx,ecx
c001ba54:	57                   	push   edi
c001ba55:	56                   	push   esi
c001ba56:	53                   	push   ebx
c001ba57:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ba5b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ba5f:	89 eb                	mov    ebx,ebp
c001ba61:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ba65:	39 ce                	cmp    esi,ecx
c001ba67:	7e 17                	jle    c001ba80 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ba69:	31 d2                	xor    edx,edx
c001ba6b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ba6f:	7d 13                	jge    c001ba84 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ba71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ba75:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ba78:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ba7b:	75 0d                	jne    c001ba8a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ba7d:	42                   	inc    edx
c001ba7e:	eb eb                	jmp    c001ba6b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ba80:	31 c0                	xor    eax,eax
c001ba82:	eb 0a                	jmp    c001ba8e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba84:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ba88:	eb 04                	jmp    c001ba8e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba8a:	41                   	inc    ecx
c001ba8b:	43                   	inc    ebx
c001ba8c:	eb d7                	jmp    c001ba65 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ba8e:	5b                   	pop    ebx
c001ba8f:	5e                   	pop    esi
c001ba90:	5f                   	pop    edi
c001ba91:	5d                   	pop    ebp
c001ba92:	c3                   	ret    

c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ba93:	57                   	push   edi
c001ba94:	56                   	push   esi
c001ba95:	53                   	push   ebx
c001ba96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba9e:	39 0d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ecx
c001baa4:	75 08                	jne    c001baae <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001baa6:	38 05 d4 5e 02 c0    	cmp    BYTE PTR ds:0xc0025ed4,al
c001baac:	74 2b                	je     c001bad9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001baae:	83 ec 0c             	sub    esp,0xc
c001bab1:	a2 d4 5e 02 c0       	mov    ds:0xc0025ed4,al
c001bab6:	68 80 7b 02 c0       	push   0xc0027b80
c001babb:	0f be c0             	movsx  eax,al
c001babe:	6a 01                	push   0x1
c001bac0:	89 0d 60 7b 02 c0    	mov    DWORD PTR ds:0xc0027b60,ecx
c001bac6:	31 db                	xor    ebx,ebx
c001bac8:	53                   	push   ebx
c001bac9:	51                   	push   ecx
c001baca:	ff 34 85 5c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96a4]
c001bad1:	e8 42 47 ff ff       	call   c0010218 <LogicalDisk::read(unsigned long long, int, void*)>
c001bad6:	83 c4 20             	add    esp,0x20
c001bad9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001badd:	be 80 7b 02 c0       	mov    esi,0xc0027b80
c001bae2:	b9 00 08 00 00       	mov    ecx,0x800
c001bae7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bae9:	5b                   	pop    ebx
c001baea:	5e                   	pop    esi
c001baeb:	5f                   	pop    edi
c001baec:	c3                   	ret    
c001baed:	90                   	nop

c001baee <ISO9660::tryMount(LogicalDisk*, int)>:
c001baee:	81 ec 10 08 00 00    	sub    esp,0x810
c001baf4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001bafb:	83 c0 41             	add    eax,0x41
c001bafe:	0f be c0             	movsx  eax,al
c001bb01:	50                   	push   eax
c001bb02:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb06:	50                   	push   eax
c001bb07:	6a 10                	push   0x10
c001bb09:	e8 85 ff ff ff       	call   c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb0e:	83 c4 10             	add    esp,0x10
c001bb11:	31 c0                	xor    eax,eax
c001bb13:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bb18:	75 1d                	jne    c001bb37 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bb1a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bb1f:	75 16                	jne    c001bb37 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bb21:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001bb26:	75 0f                	jne    c001bb37 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bb28:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001bb2d:	75 08                	jne    c001bb37 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bb2f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001bb34:	0f 94 c0             	sete   al
c001bb37:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bb3d:	c3                   	ret    

c001bb3e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bb3e:	55                   	push   ebp
c001bb3f:	57                   	push   edi
c001bb40:	56                   	push   esi
c001bb41:	53                   	push   ebx
c001bb42:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bb48:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bb4f:	85 ed                	test   ebp,ebp
c001bb51:	0f 84 da 01 00 00    	je     c001bd31 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bb57:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bb5f:	0f 84 cc 01 00 00    	je     c001bd31 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bb65:	b8 01 00 00 00       	mov    eax,0x1
c001bb6a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bb6e:	0f 85 c2 01 00 00    	jne    c001bd36 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bb74:	31 d2                	xor    edx,edx
c001bb76:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bb7d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bb80:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bb83:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bb86:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb8d:	01 c8                	add    eax,ecx
c001bb8f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb92:	11 da                	adc    edx,ebx
c001bb94:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb98:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb9c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bba0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bba4:	19 d7                	sbb    edi,edx
c001bba6:	72 11                	jb     c001bbb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bba8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bbab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bbaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bbb7:	eb 0c                	jmp    c001bbc5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bbb9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bbbd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bbc1:	29 ce                	sub    esi,ecx
c001bbc3:	19 df                	sbb    edi,ebx
c001bbc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bbc8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bbcb:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bbcf:	c1 e0 0b             	shl    eax,0xb
c001bbd2:	01 c8                	add    eax,ecx
c001bbd4:	11 da                	adc    edx,ebx
c001bbd6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbd9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bbdd:	51                   	push   ecx
c001bbde:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbe2:	50                   	push   eax
c001bbe3:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bbe7:	53                   	push   ebx
c001bbe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbf0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bbf4:	50                   	push   eax
c001bbf5:	e8 99 fe ff ff       	call   c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbfa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bbfd:	b8 00 08 00 00       	mov    eax,0x800
c001bc02:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bc08:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bc0c:	29 d0                	sub    eax,edx
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	89 f9                	mov    ecx,edi
c001bc13:	39 c6                	cmp    esi,eax
c001bc15:	83 d9 00             	sbb    ecx,0x0
c001bc18:	7d 1b                	jge    c001bc35 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bc1a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bc1f:	75 12                	jne    c001bc33 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bc21:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc2e:	e9 fa 00 00 00       	jmp    c001bd2d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bc33:	89 f0                	mov    eax,esi
c001bc35:	01 d3                	add    ebx,edx
c001bc37:	31 d2                	xor    edx,edx
c001bc39:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bc3d:	39 c2                	cmp    edx,eax
c001bc3f:	7d 14                	jge    c001bc55 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bc41:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bc48:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bc4c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bc4f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bc52:	42                   	inc    edx
c001bc53:	eb e8                	jmp    c001bc3d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bc55:	89 c2                	mov    edx,eax
c001bc57:	85 c0                	test   eax,eax
c001bc59:	79 02                	jns    c001bc5d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bc5b:	31 d2                	xor    edx,edx
c001bc5d:	01 c2                	add    edx,eax
c001bc5f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bc62:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bc69:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bc6d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bc71:	99                   	cdq    
c001bc72:	01 c1                	add    ecx,eax
c001bc74:	11 d3                	adc    ebx,edx
c001bc76:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bc7a:	29 c6                	sub    esi,eax
c001bc7c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bc80:	19 d7                	sbb    edi,edx
c001bc82:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc85:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bc89:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bc8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bc91:	b8 00 00 00 00       	mov    eax,0x0
c001bc96:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc9a:	7d 43                	jge    c001bcdf <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc9c:	52                   	push   edx
c001bc9d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bca1:	50                   	push   eax
c001bca2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bca6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bcaa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bcae:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bcb2:	50                   	push   eax
c001bcb3:	e8 db fd ff ff       	call   c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bcb8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bcc0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bcc5:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bccd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bcd5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bcda:	83 c4 10             	add    esp,0x10
c001bcdd:	eb aa                	jmp    c001bc89 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bcdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bce3:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bce6:	74 2a                	je     c001bd12 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bce8:	50                   	push   eax
c001bce9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bced:	50                   	push   eax
c001bcee:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bcf2:	56                   	push   esi
c001bcf3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bcf7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bcfb:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bcff:	51                   	push   ecx
c001bd00:	e8 8e fd ff ff       	call   c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd05:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bd09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bd0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bd0f:	83 c4 10             	add    esp,0x10
c001bd12:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bd19:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bd1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bd21:	89 18                	mov    DWORD PTR [eax],ebx
c001bd23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd27:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd2a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd2d:	31 c0                	xor    eax,eax
c001bd2f:	eb 05                	jmp    c001bd36 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bd31:	b8 04 00 00 00       	mov    eax,0x4
c001bd36:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bd3c:	5b                   	pop    ebx
c001bd3d:	5e                   	pop    esi
c001bd3e:	5f                   	pop    edi
c001bd3f:	5d                   	pop    ebp
c001bd40:	c3                   	ret    
c001bd41:	90                   	nop

c001bd42 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bd42:	55                   	push   ebp
c001bd43:	57                   	push   edi
c001bd44:	56                   	push   esi
c001bd45:	53                   	push   ebx
c001bd46:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bd4c:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bd53:	85 ed                	test   ebp,ebp
c001bd55:	0f 84 51 02 00 00    	je     c001bfac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bd5b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bd63:	0f 84 43 02 00 00    	je     c001bfac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bd69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bd6c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bd6f:	75 0a                	jne    c001bd7b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bd71:	b8 07 00 00 00       	mov    eax,0x7
c001bd76:	e9 36 02 00 00       	jmp    c001bfb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bd7b:	50                   	push   eax
c001bd7c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd80:	50                   	push   eax
c001bd81:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd88:	53                   	push   ebx
c001bd89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd8c:	c1 e0 0b             	shl    eax,0xb
c001bd8f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bd92:	c1 e8 0b             	shr    eax,0xb
c001bd95:	50                   	push   eax
c001bd96:	e8 f8 fc ff ff       	call   c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd9e:	83 c4 10             	add    esp,0x10
c001bda1:	89 c1                	mov    ecx,eax
c001bda3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bda6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bdac:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bdaf:	84 db                	test   bl,bl
c001bdb1:	0f 85 8b 00 00 00    	jne    c001be42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bdb7:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bdbd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bdc0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bdc6:	29 c6                	sub    esi,eax
c001bdc8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bdcc:	89 f3                	mov    ebx,esi
c001bdce:	89 f1                	mov    ecx,esi
c001bdd0:	c1 fb 1f             	sar    ebx,0x1f
c001bdd3:	01 f0                	add    eax,esi
c001bdd5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bdd8:	11 da                	adc    edx,ebx
c001bdda:	89 04 24             	mov    DWORD PTR [esp],eax
c001bddd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bde1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bde4:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bde7:	89 d8                	mov    eax,ebx
c001bde9:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bded:	ba 00 00 00 00       	mov    edx,0x0
c001bdf2:	19 f8                	sbb    eax,edi
c001bdf4:	b8 00 00 00 00       	mov    eax,0x0
c001bdf9:	73 08                	jae    c001be03 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bdfb:	89 f0                	mov    eax,esi
c001bdfd:	89 fa                	mov    edx,edi
c001bdff:	29 c8                	sub    eax,ecx
c001be01:	19 da                	sbb    edx,ebx
c001be03:	89 d7                	mov    edi,edx
c001be05:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001be08:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001be0b:	09 c7                	or     edi,eax
c001be0d:	0f 84 5e ff ff ff    	je     c001bd71 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001be13:	57                   	push   edi
c001be14:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001be18:	50                   	push   eax
c001be19:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001be20:	53                   	push   ebx
c001be21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001be24:	c1 e0 0b             	shl    eax,0xb
c001be27:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001be2b:	c1 e8 0b             	shr    eax,0xb
c001be2e:	50                   	push   eax
c001be2f:	e8 5f fc ff ff       	call   c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001be34:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be37:	83 c4 10             	add    esp,0x10
c001be3a:	25 ff 07 00 00       	and    eax,0x7ff
c001be3f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001be42:	31 ff                	xor    edi,edi
c001be44:	56                   	push   esi
c001be45:	6a 28                	push   0x28
c001be47:	6a 00                	push   0x0
c001be49:	8d 44 24 24          	lea    eax,[esp+0x24]
c001be4d:	50                   	push   eax
c001be4e:	e8 31 48 fe ff       	call   c0000684 <memset>
c001be53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be56:	25 ff 07 00 00       	and    eax,0x7ff
c001be5b:	89 c6                	mov    esi,eax
c001be5d:	83 c6 21             	add    esi,0x21
c001be60:	83 d7 00             	adc    edi,0x0
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	31 c9                	xor    ecx,ecx
c001be68:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001be6f:	83 f9 28             	cmp    ecx,0x28
c001be72:	88 04 24             	mov    BYTE PTR [esp],al
c001be75:	0f 94 c2             	sete   dl
c001be78:	88 d0                	mov    al,dl
c001be7a:	ba ff 07 00 00       	mov    edx,0x7ff
c001be7f:	39 f2                	cmp    edx,esi
c001be81:	ba 00 00 00 00       	mov    edx,0x0
c001be86:	19 fa                	sbb    edx,edi
c001be88:	0f 92 c2             	setb   dl
c001be8b:	09 c2                	or     edx,eax
c001be8d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001be91:	0f 94 c0             	sete   al
c001be94:	08 d0                	or     al,dl
c001be96:	75 16                	jne    c001beae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be98:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be9c:	74 10                	je     c001beae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be9e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bea1:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bea5:	41                   	inc    ecx
c001bea6:	83 c6 01             	add    esi,0x1
c001bea9:	83 d7 00             	adc    edi,0x0
c001beac:	eb ba                	jmp    c001be68 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001beae:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001beb5:	83 ec 0c             	sub    esp,0xc
c001beb8:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bebc:	56                   	push   esi
c001bebd:	e8 de 47 fe ff       	call   c00006a0 <strlen>
c001bec2:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bec9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001becd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001bed5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bed8:	5a                   	pop    edx
c001bed9:	25 ff 07 00 00       	and    eax,0x7ff
c001bede:	59                   	pop    ecx
c001bedf:	01 f8                	add    eax,edi
c001bee1:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001bee7:	83 e0 02             	and    eax,0x2
c001beea:	3c 01                	cmp    al,0x1
c001beec:	19 c0                	sbb    eax,eax
c001beee:	83 c0 02             	add    eax,0x2
c001bef1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bef5:	56                   	push   esi
c001bef6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001befa:	50                   	push   eax
c001befb:	e8 40 48 fe ff       	call   c0000740 <strcpy>
c001bf00:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bf04:	83 c4 10             	add    esp,0x10
c001bf07:	84 c0                	test   al,al
c001bf09:	75 21                	jne    c001bf2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001bf0b:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bf13:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf1b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bf23:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bf2a:	eb 28                	jmp    c001bf54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bf2c:	fe c8                	dec    al
c001bf2e:	75 24                	jne    c001bf54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bf30:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bf38:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf40:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bf48:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bf4f:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bf54:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bf58:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bf5f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bf66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf68:	0f b6 f3             	movzx  esi,bl
c001bf6b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bf72:	31 db                	xor    ebx,ebx
c001bf74:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf7a:	89 df                	mov    edi,ebx
c001bf7c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bf7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf82:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bf85:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bf88:	39 c6                	cmp    esi,eax
c001bf8a:	19 d7                	sbb    edi,edx
c001bf8c:	72 10                	jb     c001bf9e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bf8e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bf95:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf9c:	eb 0a                	jmp    c001bfa8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf9e:	29 f0                	sub    eax,esi
c001bfa0:	19 da                	sbb    edx,ebx
c001bfa2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bfa5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bfa8:	31 c0                	xor    eax,eax
c001bfaa:	eb 05                	jmp    c001bfb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bfac:	b8 04 00 00 00       	mov    eax,0x4
c001bfb1:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bfb7:	5b                   	pop    ebx
c001bfb8:	5e                   	pop    esi
c001bfb9:	5f                   	pop    edi
c001bfba:	5d                   	pop    ebp
c001bfbb:	c3                   	ret    

c001bfbc <readRoot(unsigned int*, unsigned int*, char)>:
c001bfbc:	57                   	push   edi
c001bfbd:	56                   	push   esi
c001bfbe:	81 ec 38 08 00 00    	sub    esp,0x838
c001bfc4:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bfcc:	50                   	push   eax
c001bfcd:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bfd1:	50                   	push   eax
c001bfd2:	6a 10                	push   0x10
c001bfd4:	e8 ba fa ff ff       	call   c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bfd9:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bfe0:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bfe4:	b9 22 00 00 00       	mov    ecx,0x22
c001bfe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bfeb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bff2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bff6:	89 10                	mov    DWORD PTR [eax],edx
c001bff8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bfff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c003:	89 10                	mov    DWORD PTR [eax],edx
c001c005:	81 c4 44 08 00 00    	add    esp,0x844
c001c00b:	b0 01                	mov    al,0x1
c001c00d:	5e                   	pop    esi
c001c00e:	5f                   	pop    edi
c001c00f:	c3                   	ret    

c001c010 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c010:	55                   	push   ebp
c001c011:	57                   	push   edi
c001c012:	56                   	push   esi
c001c013:	53                   	push   ebx
c001c014:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c01a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c021:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c028:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c02c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c030:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c034:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c038:	75 03                	jne    c001c03d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c03a:	83 c3 02             	add    ebx,0x2
c001c03d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c040:	75 03                	jne    c001c045 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c042:	43                   	inc    ebx
c001c043:	eb f8                	jmp    c001c03d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c045:	51                   	push   ecx
c001c046:	68 00 01 00 00       	push   0x100
c001c04b:	6a 00                	push   0x0
c001c04d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c051:	50                   	push   eax
c001c052:	e8 2d 46 fe ff       	call   c0000684 <memset>
c001c057:	83 c4 10             	add    esp,0x10
c001c05a:	31 d2                	xor    edx,edx
c001c05c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c05f:	84 c0                	test   al,al
c001c061:	74 21                	je     c001c084 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c063:	3c 2f                	cmp    al,0x2f
c001c065:	75 0b                	jne    c001c072 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c067:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c06b:	bd 01 00 00 00       	mov    ebp,0x1
c001c070:	eb 14                	jmp    c001c086 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c072:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c075:	80 f9 19             	cmp    cl,0x19
c001c078:	77 03                	ja     c001c07d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c07a:	83 e8 20             	sub    eax,0x20
c001c07d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c081:	42                   	inc    edx
c001c082:	eb d8                	jmp    c001c05c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c084:	31 ed                	xor    ebp,ebp
c001c086:	83 ec 0c             	sub    esp,0xc
c001c089:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c090:	e8 2e d9 fe ff       	call   c00099c3 <malloc>
c001c095:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c09c:	89 c6                	mov    esi,eax
c001c09e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c0a4:	c1 ef 0b             	shr    edi,0xb
c001c0a7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c0ae:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c0b2:	83 c4 10             	add    esp,0x10
c001c0b5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c0ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c0be:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c0c5:	74 28                	je     c001c0ef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c0c7:	52                   	push   edx
c001c0c8:	57                   	push   edi
c001c0c9:	50                   	push   eax
c001c0ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0ce:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c0d5:	e8 b9 f9 ff ff       	call   c001ba93 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c0da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0de:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c0e5:	05 00 08 00 00       	add    eax,0x800
c001c0ea:	83 c4 10             	add    esp,0x10
c001c0ed:	eb cb                	jmp    c001c0ba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c0ef:	83 ec 0c             	sub    esp,0xc
c001c0f2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c0f6:	57                   	push   edi
c001c0f7:	e8 a4 45 fe ff       	call   c00006a0 <strlen>
c001c0fc:	50                   	push   eax
c001c0fd:	57                   	push   edi
c001c0fe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c105:	56                   	push   esi
c001c106:	e8 46 f9 ff ff       	call   c001ba51 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c10b:	83 c4 20             	add    esp,0x20
c001c10e:	85 c0                	test   eax,eax
c001c110:	75 13                	jne    c001c125 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c112:	83 ec 0c             	sub    esp,0xc
c001c115:	56                   	push   esi
c001c116:	e8 b8 d8 fe ff       	call   c00099d3 <free>
c001c11b:	83 c4 10             	add    esp,0x10
c001c11e:	31 c0                	xor    eax,eax
c001c120:	e9 b3 00 00 00       	jmp    c001c1d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c125:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c129:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c12d:	c1 e7 08             	shl    edi,0x8
c001c130:	c1 e2 10             	shl    edx,0x10
c001c133:	09 d7                	or     edi,edx
c001c135:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c139:	09 d7                	or     edi,edx
c001c13b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c13f:	c1 e2 18             	shl    edx,0x18
c001c142:	09 d7                	or     edi,edx
c001c144:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c148:	89 d1                	mov    ecx,edx
c001c14a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c14e:	c1 e1 08             	shl    ecx,0x8
c001c151:	c1 e2 10             	shl    edx,0x10
c001c154:	09 ca                	or     edx,ecx
c001c156:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c15a:	09 ca                	or     edx,ecx
c001c15c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c160:	c1 e1 18             	shl    ecx,0x18
c001c163:	09 ca                	or     edx,ecx
c001c165:	89 e9                	mov    ecx,ebp
c001c167:	84 c9                	test   cl,cl
c001c169:	74 3c                	je     c001c1a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c16b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c16f:	83 ec 0c             	sub    esp,0xc
c001c172:	56                   	push   esi
c001c173:	e8 5b d8 fe ff       	call   c00099d3 <free>
c001c178:	83 c4 0c             	add    esp,0xc
c001c17b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c182:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c187:	50                   	push   eax
c001c188:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c18f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c196:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c19a:	52                   	push   edx
c001c19b:	57                   	push   edi
c001c19c:	53                   	push   ebx
c001c19d:	e8 6e fe ff ff       	call   c001c010 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c1a2:	83 c4 20             	add    esp,0x20
c001c1a5:	eb 31                	jmp    c001c1d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c1a7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c1aa:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c1b1:	d0 e8                	shr    al,1
c001c1b3:	89 3b                	mov    DWORD PTR [ebx],edi
c001c1b5:	83 e0 01             	and    eax,0x1
c001c1b8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c1bf:	83 ec 0c             	sub    esp,0xc
c001c1c2:	89 13                	mov    DWORD PTR [ebx],edx
c001c1c4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c1cb:	89 03                	mov    DWORD PTR [ebx],eax
c001c1cd:	56                   	push   esi
c001c1ce:	e8 00 d8 fe ff       	call   c00099d3 <free>
c001c1d3:	83 c4 10             	add    esp,0x10
c001c1d6:	b0 01                	mov    al,0x1
c001c1d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c1de:	5b                   	pop    ebx
c001c1df:	5e                   	pop    esi
c001c1e0:	5f                   	pop    edi
c001c1e1:	5d                   	pop    ebp
c001c1e2:	c3                   	ret    

c001c1e3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c1e3:	55                   	push   ebp
c001c1e4:	57                   	push   edi
c001c1e5:	56                   	push   esi
c001c1e6:	53                   	push   ebx
c001c1e7:	83 ec 20             	sub    esp,0x20
c001c1ea:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c1ee:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c1f2:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c1f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c1fe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c206:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c20b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c211:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c217:	57                   	push   edi
c001c218:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c21c:	50                   	push   eax
c001c21d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c221:	50                   	push   eax
c001c222:	e8 95 fd ff ff       	call   c001bfbc <readRoot(unsigned int*, unsigned int*, char)>
c001c227:	5a                   	pop    edx
c001c228:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c22c:	e8 6f 44 fe ff       	call   c00006a0 <strlen>
c001c231:	83 c4 10             	add    esp,0x10
c001c234:	83 f8 03             	cmp    eax,0x3
c001c237:	77 17                	ja     c001c250 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c239:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c23d:	89 03                	mov    DWORD PTR [ebx],eax
c001c23f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c243:	89 06                	mov    DWORD PTR [esi],eax
c001c245:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c24c:	b0 01                	mov    al,0x1
c001c24e:	eb 19                	jmp    c001c269 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c250:	50                   	push   eax
c001c251:	55                   	push   ebp
c001c252:	57                   	push   edi
c001c253:	56                   	push   esi
c001c254:	53                   	push   ebx
c001c255:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c259:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c25d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c261:	e8 aa fd ff ff       	call   c001c010 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c266:	83 c4 20             	add    esp,0x20
c001c269:	83 c4 1c             	add    esp,0x1c
c001c26c:	5b                   	pop    ebx
c001c26d:	5e                   	pop    esi
c001c26e:	5f                   	pop    edi
c001c26f:	5d                   	pop    ebp
c001c270:	c3                   	ret    
c001c271:	90                   	nop

c001c272 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c272:	57                   	push   edi
c001c273:	56                   	push   esi
c001c274:	53                   	push   ebx
c001c275:	83 ec 10             	sub    esp,0x10
c001c278:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c27c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c280:	85 ff                	test   edi,edi
c001c282:	0f 84 8b 00 00 00    	je     c001c313 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c288:	85 f6                	test   esi,esi
c001c28a:	0f 84 83 00 00 00    	je     c001c313 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c290:	b8 03 00 00 00       	mov    eax,0x3
c001c295:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c29a:	75 7c                	jne    c001c318 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c29c:	83 ec 0c             	sub    esp,0xc
c001c29f:	6a 1c                	push   0x1c
c001c2a1:	e8 1d d7 fe ff       	call   c00099c3 <malloc>
c001c2a6:	89 07                	mov    DWORD PTR [edi],eax
c001c2a8:	89 c3                	mov    ebx,eax
c001c2aa:	58                   	pop    eax
c001c2ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2af:	50                   	push   eax
c001c2b0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c2b3:	50                   	push   eax
c001c2b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2b8:	50                   	push   eax
c001c2b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2bd:	50                   	push   eax
c001c2be:	56                   	push   esi
c001c2bf:	e8 1f ff ff ff       	call   c001c1e3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2c4:	83 c4 20             	add    esp,0x20
c001c2c7:	84 c0                	test   al,al
c001c2c9:	74 07                	je     c001c2d2 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c2cb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c2d0:	74 0b                	je     c001c2dd <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c2d2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c2d6:	b8 01 00 00 00       	mov    eax,0x1
c001c2db:	eb 3b                	jmp    c001c318 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c2dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2e1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c2e5:	89 03                	mov    DWORD PTR [ebx],eax
c001c2e7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c2ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c2f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c300:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c303:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c30a:	8a 06                	mov    al,BYTE PTR [esi]
c001c30c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c30f:	31 c0                	xor    eax,eax
c001c311:	eb 05                	jmp    c001c318 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c313:	b8 04 00 00 00       	mov    eax,0x4
c001c318:	83 c4 10             	add    esp,0x10
c001c31b:	5b                   	pop    ebx
c001c31c:	5e                   	pop    esi
c001c31d:	5f                   	pop    edi
c001c31e:	c3                   	ret    
c001c31f:	90                   	nop

c001c320 <ISO9660::exists(char const*)>:
c001c320:	83 ec 28             	sub    esp,0x28
c001c323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c327:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c32b:	52                   	push   edx
c001c32c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c32f:	52                   	push   edx
c001c330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c334:	52                   	push   edx
c001c335:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c339:	52                   	push   edx
c001c33a:	50                   	push   eax
c001c33b:	e8 a3 fe ff ff       	call   c001c1e3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c340:	83 c4 3c             	add    esp,0x3c
c001c343:	c3                   	ret    

c001c344 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c344:	56                   	push   esi
c001c345:	53                   	push   ebx
c001c346:	83 ec 14             	sub    esp,0x14
c001c349:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c34d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c351:	85 db                	test   ebx,ebx
c001c353:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c357:	0f 94 c2             	sete   dl
c001c35a:	85 f6                	test   esi,esi
c001c35c:	0f 94 c0             	sete   al
c001c35f:	08 c2                	or     dl,al
c001c361:	75 68                	jne    c001c3cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c363:	85 c9                	test   ecx,ecx
c001c365:	74 64                	je     c001c3cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c367:	83 ec 0c             	sub    esp,0xc
c001c36a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c36d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c371:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c377:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c37e:	50                   	push   eax
c001c37f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c382:	50                   	push   eax
c001c383:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c387:	50                   	push   eax
c001c388:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c38c:	50                   	push   eax
c001c38d:	51                   	push   ecx
c001c38e:	e8 50 fe ff ff       	call   c001c1e3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c393:	83 c4 20             	add    esp,0x20
c001c396:	ba 01 00 00 00       	mov    edx,0x1
c001c39b:	84 c0                	test   al,al
c001c39d:	74 31                	je     c001c3d0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c39f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3a3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c3aa:	89 03                	mov    DWORD PTR [ebx],eax
c001c3ac:	ba 00 00 00 00       	mov    edx,0x0
c001c3b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3b5:	85 c0                	test   eax,eax
c001c3b7:	0f 95 06             	setne  BYTE PTR [esi]
c001c3ba:	74 14                	je     c001c3d0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c3bc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c3c2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c3c9:	eb 05                	jmp    c001c3d0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c3cb:	ba 04 00 00 00       	mov    edx,0x4
c001c3d0:	83 c4 14             	add    esp,0x14
c001c3d3:	89 d0                	mov    eax,edx
c001c3d5:	5b                   	pop    ebx
c001c3d6:	5e                   	pop    esi
c001c3d7:	c3                   	ret    

c001c3d8 <ISO9660::openDir(char const*, void**)>:
c001c3d8:	57                   	push   edi
c001c3d9:	56                   	push   esi
c001c3da:	53                   	push   ebx
c001c3db:	83 ec 10             	sub    esp,0x10
c001c3de:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c3e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c3e6:	85 ff                	test   edi,edi
c001c3e8:	74 7b                	je     c001c465 <ISO9660::openDir(char const*, void**)+0x8d>
c001c3ea:	85 f6                	test   esi,esi
c001c3ec:	74 77                	je     c001c465 <ISO9660::openDir(char const*, void**)+0x8d>
c001c3ee:	83 ec 0c             	sub    esp,0xc
c001c3f1:	6a 1c                	push   0x1c
c001c3f3:	e8 cb d5 fe ff       	call   c00099c3 <malloc>
c001c3f8:	89 07                	mov    DWORD PTR [edi],eax
c001c3fa:	89 c3                	mov    ebx,eax
c001c3fc:	58                   	pop    eax
c001c3fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c401:	50                   	push   eax
c001c402:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c405:	50                   	push   eax
c001c406:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c40a:	50                   	push   eax
c001c40b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c40f:	50                   	push   eax
c001c410:	56                   	push   esi
c001c411:	e8 cd fd ff ff       	call   c001c1e3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c416:	83 c4 20             	add    esp,0x20
c001c419:	84 c0                	test   al,al
c001c41b:	74 07                	je     c001c424 <ISO9660::openDir(char const*, void**)+0x4c>
c001c41d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c422:	75 0b                	jne    c001c42f <ISO9660::openDir(char const*, void**)+0x57>
c001c424:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c428:	b8 01 00 00 00       	mov    eax,0x1
c001c42d:	eb 3b                	jmp    c001c46a <ISO9660::openDir(char const*, void**)+0x92>
c001c42f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c433:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c437:	89 03                	mov    DWORD PTR [ebx],eax
c001c439:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c440:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c444:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c44b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c452:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c455:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c45c:	8a 06                	mov    al,BYTE PTR [esi]
c001c45e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c461:	31 c0                	xor    eax,eax
c001c463:	eb 05                	jmp    c001c46a <ISO9660::openDir(char const*, void**)+0x92>
c001c465:	b8 04 00 00 00       	mov    eax,0x4
c001c46a:	83 c4 10             	add    esp,0x10
c001c46d:	5b                   	pop    ebx
c001c46e:	5e                   	pop    esi
c001c46f:	5f                   	pop    edi
c001c470:	c3                   	ret    
c001c471:	90                   	nop

c001c472 <ISO9660::ISO9660()>:
c001c472:	83 ec 0c             	sub    esp,0xc
c001c475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c479:	83 ec 0c             	sub    esp,0xc
c001c47c:	50                   	push   eax
c001c47d:	e8 90 09 ff ff       	call   c000ce12 <Filesystem::Filesystem()>
c001c482:	83 c4 10             	add    esp,0x10
c001c485:	ba 70 4c 02 c0       	mov    edx,0xc0024c70
c001c48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48e:	89 10                	mov    DWORD PTR [eax],edx
c001c490:	90                   	nop
c001c491:	83 c4 0c             	add    esp,0xc
c001c494:	c3                   	ret    
c001c495:	90                   	nop

c001c496 <SoundCard::beginPlayback()>:
c001c496:	c7 44 24 04 d0 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cd0
c001c49e:	e9 1a 7f ff ff       	jmp    c00143bd <Krnl::panic(char const*)>
c001c4a3:	90                   	nop

c001c4a4 <SoundCard::stopPlayback()>:
c001c4a4:	c7 44 24 04 04 4d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024d04
c001c4ac:	e9 0c 7f ff ff       	jmp    c00143bd <Krnl::panic(char const*)>
c001c4b1:	90                   	nop

c001c4b2 <SoundCard::SoundCard(char const*)>:
c001c4b2:	83 ec 1c             	sub    esp,0x1c
c001c4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b9:	83 ec 08             	sub    esp,0x8
c001c4bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4c0:	50                   	push   eax
c001c4c1:	e8 80 1c ff ff       	call   c000e146 <Device::Device(char const*)>
c001c4c6:	83 c4 10             	add    esp,0x10
c001c4c9:	ba 10 4e 02 c0       	mov    edx,0xc0024e10
c001c4ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d2:	89 10                	mov    DWORD PTR [eax],edx
c001c4d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4e3:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c4ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4f1:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c4fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4ff:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c50d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c517:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c51f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c524:	7f 19                	jg     c001c53f <SoundCard::SoundCard(char const*)+0x8d>
c001c526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c52a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c52e:	83 c2 54             	add    edx,0x54
c001c531:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c539:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c53d:	eb e0                	jmp    c001c51f <SoundCard::SoundCard(char const*)+0x6d>
c001c53f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c543:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c54a:	90                   	nop
c001c54b:	83 c4 1c             	add    esp,0x1c
c001c54e:	c3                   	ret    
c001c54f:	90                   	nop

c001c550 <SoundCard::~SoundCard()>:
c001c550:	83 ec 0c             	sub    esp,0xc
c001c553:	ba 10 4e 02 c0       	mov    edx,0xc0024e10
c001c558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55c:	89 10                	mov    DWORD PTR [eax],edx
c001c55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c562:	83 ec 0c             	sub    esp,0xc
c001c565:	50                   	push   eax
c001c566:	e8 a5 18 ff ff       	call   c000de10 <Device::~Device()>
c001c56b:	83 c4 10             	add    esp,0x10
c001c56e:	90                   	nop
c001c56f:	83 c4 0c             	add    esp,0xc
c001c572:	c3                   	ret    
c001c573:	90                   	nop

c001c574 <SoundCard::~SoundCard()>:
c001c574:	83 ec 0c             	sub    esp,0xc
c001c577:	83 ec 0c             	sub    esp,0xc
c001c57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c57e:	e8 cd ff ff ff       	call   c001c550 <SoundCard::~SoundCard()>
c001c583:	83 c4 10             	add    esp,0x10
c001c586:	83 ec 08             	sub    esp,0x8
c001c589:	68 e8 01 00 00       	push   0x1e8
c001c58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c592:	e8 83 04 ff ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c001c597:	83 c4 10             	add    esp,0x10
c001c59a:	83 c4 0c             	add    esp,0xc
c001c59d:	c3                   	ret    

c001c59e <SoundCard::configureRates(int, int, int)>:
c001c59e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5a2:	31 c0                	xor    eax,eax
c001c5a4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c5ab:	75 20                	jne    c001c5cd <SoundCard::configureRates(int, int, int)+0x2f>
c001c5ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5b1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c5b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5bb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c5:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c5cb:	b0 01                	mov    al,0x1
c001c5cd:	c3                   	ret    

c001c5ce <SoundCard::getSamples16(int, short*)>:
c001c5ce:	55                   	push   ebp
c001c5cf:	57                   	push   edi
c001c5d0:	31 ff                	xor    edi,edi
c001c5d2:	56                   	push   esi
c001c5d3:	53                   	push   ebx
c001c5d4:	83 ec 28             	sub    esp,0x28
c001c5d7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c5db:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c5df:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c5e3:	68 37 4d 02 c0       	push   0xc0024d37
c001c5e8:	e8 0e 05 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c5ed:	83 c4 0c             	add    esp,0xc
c001c5f0:	53                   	push   ebx
c001c5f1:	6a 00                	push   0x0
c001c5f3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c5f7:	e8 88 40 fe ff       	call   c0000684 <memset>
c001c5fc:	58                   	pop    eax
c001c5fd:	5a                   	pop    edx
c001c5fe:	53                   	push   ebx
c001c5ff:	31 db                	xor    ebx,ebx
c001c601:	68 56 4d 02 c0       	push   0xc0024d56
c001c606:	e8 f0 04 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c60b:	83 c4 10             	add    esp,0x10
c001c60e:	52                   	push   edx
c001c60f:	52                   	push   edx
c001c610:	53                   	push   ebx
c001c611:	68 69 4d 02 c0       	push   0xc0024d69
c001c616:	e8 e0 04 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c61b:	59                   	pop    ecx
c001c61c:	58                   	pop    eax
c001c61d:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c624:	68 81 4d 02 c0       	push   0xc0024d81
c001c629:	e8 cd 04 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c62e:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c635:	83 c4 10             	add    esp,0x10
c001c638:	85 c0                	test   eax,eax
c001c63a:	74 44                	je     c001c680 <SoundCard::getSamples16(int, short*)+0xb2>
c001c63c:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c640:	75 3e                	jne    c001c680 <SoundCard::getSamples16(int, short*)+0xb2>
c001c642:	50                   	push   eax
c001c643:	50                   	push   eax
c001c644:	53                   	push   ebx
c001c645:	68 93 4d 02 c0       	push   0xc0024d93
c001c64a:	e8 ac 04 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c64f:	56                   	push   esi
c001c650:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c654:	55                   	push   ebp
c001c655:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c65c:	e8 6f 03 00 00       	call   c001c9d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c661:	83 c4 18             	add    esp,0x18
c001c664:	50                   	push   eax
c001c665:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c669:	68 aa 4d 02 c0       	push   0xc0024daa
c001c66e:	e8 88 04 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c673:	83 c4 10             	add    esp,0x10
c001c676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c67a:	39 c7                	cmp    edi,eax
c001c67c:	7d 02                	jge    c001c680 <SoundCard::getSamples16(int, short*)+0xb2>
c001c67e:	89 c7                	mov    edi,eax
c001c680:	43                   	inc    ebx
c001c681:	83 fb 20             	cmp    ebx,0x20
c001c684:	75 88                	jne    c001c60e <SoundCard::getSamples16(int, short*)+0x40>
c001c686:	83 c4 1c             	add    esp,0x1c
c001c689:	89 f8                	mov    eax,edi
c001c68b:	5b                   	pop    ebx
c001c68c:	5e                   	pop    esi
c001c68d:	5f                   	pop    edi
c001c68e:	5d                   	pop    ebp
c001c68f:	c3                   	ret    

c001c690 <SoundCard::getSamples32(int, int*)>:
c001c690:	55                   	push   ebp
c001c691:	57                   	push   edi
c001c692:	31 ff                	xor    edi,edi
c001c694:	56                   	push   esi
c001c695:	31 f6                	xor    esi,esi
c001c697:	53                   	push   ebx
c001c698:	83 ec 10             	sub    esp,0x10
c001c69b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c69f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c6a3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c6a7:	c1 e0 02             	shl    eax,0x2
c001c6aa:	50                   	push   eax
c001c6ab:	6a 00                	push   0x0
c001c6ad:	55                   	push   ebp
c001c6ae:	e8 d1 3f fe ff       	call   c0000684 <memset>
c001c6b3:	83 c4 10             	add    esp,0x10
c001c6b6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c6bd:	85 c0                	test   eax,eax
c001c6bf:	74 1b                	je     c001c6dc <SoundCard::getSamples32(int, int*)+0x4c>
c001c6c1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c6c5:	75 15                	jne    c001c6dc <SoundCard::getSamples32(int, int*)+0x4c>
c001c6c7:	53                   	push   ebx
c001c6c8:	55                   	push   ebp
c001c6c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c6cd:	50                   	push   eax
c001c6ce:	e8 f9 03 00 00       	call   c001cacc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c6d3:	83 c4 10             	add    esp,0x10
c001c6d6:	39 c6                	cmp    esi,eax
c001c6d8:	7d 02                	jge    c001c6dc <SoundCard::getSamples32(int, int*)+0x4c>
c001c6da:	89 c6                	mov    esi,eax
c001c6dc:	47                   	inc    edi
c001c6dd:	83 ff 20             	cmp    edi,0x20
c001c6e0:	75 d4                	jne    c001c6b6 <SoundCard::getSamples32(int, int*)+0x26>
c001c6e2:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c6e8:	85 f6                	test   esi,esi
c001c6ea:	75 0f                	jne    c001c6fb <SoundCard::getSamples32(int, int*)+0x6b>
c001c6ec:	84 c0                	test   al,al
c001c6ee:	74 1b                	je     c001c70b <SoundCard::getSamples32(int, int*)+0x7b>
c001c6f0:	83 ec 0c             	sub    esp,0xc
c001c6f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6f5:	53                   	push   ebx
c001c6f6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c6f9:	eb 0d                	jmp    c001c708 <SoundCard::getSamples32(int, int*)+0x78>
c001c6fb:	84 c0                	test   al,al
c001c6fd:	75 0c                	jne    c001c70b <SoundCard::getSamples32(int, int*)+0x7b>
c001c6ff:	83 ec 0c             	sub    esp,0xc
c001c702:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c704:	53                   	push   ebx
c001c705:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c708:	83 c4 10             	add    esp,0x10
c001c70b:	83 c4 0c             	add    esp,0xc
c001c70e:	89 f0                	mov    eax,esi
c001c710:	5b                   	pop    ebx
c001c711:	5e                   	pop    esi
c001c712:	5f                   	pop    edi
c001c713:	5d                   	pop    ebp
c001c714:	c3                   	ret    
c001c715:	90                   	nop

c001c716 <SoundCard::addChannel(SoundPort*)>:
c001c716:	56                   	push   esi
c001c717:	53                   	push   ebx
c001c718:	53                   	push   ebx
c001c719:	31 db                	xor    ebx,ebx
c001c71b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c71f:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c727:	74 27                	je     c001c750 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c729:	43                   	inc    ebx
c001c72a:	83 fb 20             	cmp    ebx,0x20
c001c72d:	75 f0                	jne    c001c71f <SoundCard::addChannel(SoundPort*)+0x9>
c001c72f:	83 ec 0c             	sub    esp,0xc
c001c732:	83 cb ff             	or     ebx,0xffffffff
c001c735:	68 cf 4d 02 c0       	push   0xc0024dcf
c001c73a:	e8 bc 03 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c73f:	c7 04 24 c8 4d 02 c0 	mov    DWORD PTR [esp],0xc0024dc8
c001c746:	e8 72 7c ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001c74b:	83 c4 10             	add    esp,0x10
c001c74e:	eb 1b                	jmp    c001c76b <SoundCard::addChannel(SoundPort*)+0x55>
c001c750:	51                   	push   ecx
c001c751:	51                   	push   ecx
c001c752:	53                   	push   ebx
c001c753:	68 e7 4d 02 c0       	push   0xc0024de7
c001c758:	e8 9e 03 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c75d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c761:	83 c4 10             	add    esp,0x10
c001c764:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c76b:	89 d8                	mov    eax,ebx
c001c76d:	5a                   	pop    edx
c001c76e:	5b                   	pop    ebx
c001c76f:	5e                   	pop    esi
c001c770:	c3                   	ret    
c001c771:	90                   	nop

c001c772 <SoundCard::removeChannel(int)>:
c001c772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c77a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c785:	c3                   	ret    
c001c786:	66 90                	xchg   ax,ax

c001c788 <SoundPort::SoundPort(int, int, int, int)>:
c001c788:	83 ec 0c             	sub    esp,0xc
c001c78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7a6:	89 10                	mov    DWORD PTR [eax],edx
c001c7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c7b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7be:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c7c3:	75 13                	jne    c001c7d8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7cb:	05 a0 0f 00 00       	add    eax,0xfa0
c001c7d0:	01 c0                	add    eax,eax
c001c7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7d6:	66 90                	xchg   ax,ax
c001c7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c7e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7f5:	c1 e0 02             	shl    eax,0x2
c001c7f8:	83 ec 0c             	sub    esp,0xc
c001c7fb:	50                   	push   eax
c001c7fc:	e8 c2 d1 fe ff       	call   c00099c3 <malloc>
c001c801:	83 c4 10             	add    esp,0x10
c001c804:	89 c2                	mov    edx,eax
c001c806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c80d:	90                   	nop
c001c80e:	83 c4 0c             	add    esp,0xc
c001c811:	c3                   	ret    
c001c812:	66 90                	xchg   ax,ax

c001c814 <SoundPort::~SoundPort()>:
c001c814:	83 ec 0c             	sub    esp,0xc
c001c817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c81e:	85 c0                	test   eax,eax
c001c820:	74 1e                	je     c001c840 <SoundPort::~SoundPort()+0x2c>
c001c822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c826:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c829:	83 ec 0c             	sub    esp,0xc
c001c82c:	50                   	push   eax
c001c82d:	e8 a1 d1 fe ff       	call   c00099d3 <free>
c001c832:	83 c4 10             	add    esp,0x10
c001c835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c839:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c840:	90                   	nop
c001c841:	83 c4 0c             	add    esp,0xc
c001c844:	c3                   	ret    
c001c845:	90                   	nop
c001c846:	66 90                	xchg   ax,ax

c001c848 <SoundPort::unpause()>:
c001c848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c84c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c850:	c3                   	ret    
c001c851:	90                   	nop
c001c852:	66 90                	xchg   ax,ax

c001c854 <SoundPort::pause()>:
c001c854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c858:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c85c:	c3                   	ret    
c001c85d:	90                   	nop
c001c85e:	66 90                	xchg   ax,ax

c001c860 <SoundPort::getBufferUsed()>:
c001c860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c864:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c867:	c3                   	ret    

c001c868 <SoundPort::getBufferSize()>:
c001c868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c86c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c86f:	c3                   	ret    

c001c870 <SoundPort::buffer16(short*, int)>:
c001c870:	55                   	push   ebp
c001c871:	57                   	push   edi
c001c872:	56                   	push   esi
c001c873:	53                   	push   ebx
c001c874:	83 ec 1c             	sub    esp,0x1c
c001c877:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c87b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c87f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c882:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c885:	0f 84 85 00 00 00    	je     c001c910 <SoundPort::buffer16(short*, int)+0xa0>
c001c88b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c88f:	85 c9                	test   ecx,ecx
c001c891:	7e 7d                	jle    c001c910 <SoundPort::buffer16(short*, int)+0xa0>
c001c893:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c897:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c89a:	c1 e1 0f             	shl    ecx,0xf
c001c89d:	8d 70 01             	lea    esi,[eax+0x1]
c001c8a0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c8a3:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c8a6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8a9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8ac:	74 6e                	je     c001c91c <SoundPort::buffer16(short*, int)+0xac>
c001c8ae:	31 f6                	xor    esi,esi
c001c8b0:	eb 22                	jmp    c001c8d4 <SoundPort::buffer16(short*, int)+0x64>
c001c8b2:	66 90                	xchg   ax,ax
c001c8b4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c8b9:	8d 79 01             	lea    edi,[ecx+0x1]
c001c8bc:	c1 e3 0f             	shl    ebx,0xf
c001c8bf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c8c2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c8c5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c8c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8ce:	74 1c                	je     c001c8ec <SoundPort::buffer16(short*, int)+0x7c>
c001c8d0:	89 c6                	mov    esi,eax
c001c8d2:	66 90                	xchg   ax,ax
c001c8d4:	8d 46 01             	lea    eax,[esi+0x1]
c001c8d7:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c8db:	75 d7                	jne    c001c8b4 <SoundPort::buffer16(short*, int)+0x44>
c001c8dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8e1:	83 c4 1c             	add    esp,0x1c
c001c8e4:	5b                   	pop    ebx
c001c8e5:	5e                   	pop    esi
c001c8e6:	5f                   	pop    edi
c001c8e7:	5d                   	pop    ebp
c001c8e8:	c3                   	ret    
c001c8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8ec:	8d 46 02             	lea    eax,[esi+0x2]
c001c8ef:	90                   	nop
c001c8f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8f4:	83 ec 0c             	sub    esp,0xc
c001c8f7:	68 3c 4e 02 c0       	push   0xc0024e3c
c001c8fc:	e8 fa 01 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c901:	83 c4 10             	add    esp,0x10
c001c904:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c908:	83 c4 1c             	add    esp,0x1c
c001c90b:	5b                   	pop    ebx
c001c90c:	5e                   	pop    esi
c001c90d:	5f                   	pop    edi
c001c90e:	5d                   	pop    ebp
c001c90f:	c3                   	ret    
c001c910:	83 c4 1c             	add    esp,0x1c
c001c913:	31 c0                	xor    eax,eax
c001c915:	5b                   	pop    ebx
c001c916:	5e                   	pop    esi
c001c917:	5f                   	pop    edi
c001c918:	5d                   	pop    ebp
c001c919:	c3                   	ret    
c001c91a:	66 90                	xchg   ax,ax
c001c91c:	b8 01 00 00 00       	mov    eax,0x1
c001c921:	eb cd                	jmp    c001c8f0 <SoundPort::buffer16(short*, int)+0x80>
c001c923:	90                   	nop

c001c924 <SoundPort::buffer32(int*, int)>:
c001c924:	55                   	push   ebp
c001c925:	57                   	push   edi
c001c926:	56                   	push   esi
c001c927:	53                   	push   ebx
c001c928:	83 ec 1c             	sub    esp,0x1c
c001c92b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c92f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c933:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c936:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c93a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c93e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c941:	74 79                	je     c001c9bc <SoundPort::buffer32(int*, int)+0x98>
c001c943:	85 c0                	test   eax,eax
c001c945:	7e 75                	jle    c001c9bc <SoundPort::buffer32(int*, int)+0x98>
c001c947:	8d 71 01             	lea    esi,[ecx+0x1]
c001c94a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c94d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c950:	8b 37                	mov    esi,DWORD PTR [edi]
c001c952:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c955:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c958:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c95b:	74 6b                	je     c001c9c8 <SoundPort::buffer32(int*, int)+0xa4>
c001c95d:	31 f6                	xor    esi,esi
c001c95f:	eb 1f                	jmp    c001c980 <SoundPort::buffer32(int*, int)+0x5c>
c001c961:	8d 76 00             	lea    esi,[esi+0x0]
c001c964:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c967:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c96a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c96d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c970:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c974:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c977:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c97a:	74 1c                	je     c001c998 <SoundPort::buffer32(int*, int)+0x74>
c001c97c:	89 de                	mov    esi,ebx
c001c97e:	66 90                	xchg   ax,ax
c001c980:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c983:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c987:	75 db                	jne    c001c964 <SoundPort::buffer32(int*, int)+0x40>
c001c989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c98d:	83 c4 1c             	add    esp,0x1c
c001c990:	5b                   	pop    ebx
c001c991:	5e                   	pop    esi
c001c992:	5f                   	pop    edi
c001c993:	5d                   	pop    ebp
c001c994:	c3                   	ret    
c001c995:	8d 76 00             	lea    esi,[esi+0x0]
c001c998:	8d 46 02             	lea    eax,[esi+0x2]
c001c99b:	90                   	nop
c001c99c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9a0:	83 ec 0c             	sub    esp,0xc
c001c9a3:	68 57 4e 02 c0       	push   0xc0024e57
c001c9a8:	e8 4e 01 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001c9ad:	83 c4 10             	add    esp,0x10
c001c9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9b4:	83 c4 1c             	add    esp,0x1c
c001c9b7:	5b                   	pop    ebx
c001c9b8:	5e                   	pop    esi
c001c9b9:	5f                   	pop    edi
c001c9ba:	5d                   	pop    ebp
c001c9bb:	c3                   	ret    
c001c9bc:	83 c4 1c             	add    esp,0x1c
c001c9bf:	31 c0                	xor    eax,eax
c001c9c1:	5b                   	pop    ebx
c001c9c2:	5e                   	pop    esi
c001c9c3:	5f                   	pop    edi
c001c9c4:	5d                   	pop    ebp
c001c9c5:	c3                   	ret    
c001c9c6:	66 90                	xchg   ax,ax
c001c9c8:	b8 01 00 00 00       	mov    eax,0x1
c001c9cd:	eb cd                	jmp    c001c99c <SoundPort::buffer32(int*, int)+0x78>
c001c9cf:	90                   	nop

c001c9d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c9d0:	57                   	push   edi
c001c9d1:	56                   	push   esi
c001c9d2:	53                   	push   ebx
c001c9d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c9db:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c9e1:	39 03                	cmp    DWORD PTR [ebx],eax
c001c9e3:	74 13                	je     c001c9f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c9e5:	83 ec 0c             	sub    esp,0xc
c001c9e8:	68 ac 4e 02 c0       	push   0xc0024eac
c001c9ed:	e8 cb 79 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001c9f2:	83 c4 10             	add    esp,0x10
c001c9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9f8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c9fe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ca01:	74 11                	je     c001ca14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ca03:	83 ec 0c             	sub    esp,0xc
c001ca06:	68 72 4e 02 c0       	push   0xc0024e72
c001ca0b:	e8 ad 79 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001ca10:	83 c4 10             	add    esp,0x10
c001ca13:	90                   	nop
c001ca14:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001ca1a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ca1d:	74 11                	je     c001ca30 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ca1f:	83 ec 0c             	sub    esp,0xc
c001ca22:	68 72 4e 02 c0       	push   0xc0024e72
c001ca27:	e8 91 79 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001ca2c:	83 c4 10             	add    esp,0x10
c001ca2f:	90                   	nop
c001ca30:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca33:	89 c6                	mov    esi,eax
c001ca35:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001ca39:	7e 05                	jle    c001ca40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ca3b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ca3f:	90                   	nop
c001ca40:	85 f6                	test   esi,esi
c001ca42:	7e 30                	jle    c001ca74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ca44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ca48:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ca4b:	31 c9                	xor    ecx,ecx
c001ca4d:	01 d7                	add    edi,edx
c001ca4f:	90                   	nop
c001ca50:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca53:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ca56:	85 c0                	test   eax,eax
c001ca58:	79 06                	jns    c001ca60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ca5a:	05 ff 7f 00 00       	add    eax,0x7fff
c001ca5f:	90                   	nop
c001ca60:	c1 f8 0f             	sar    eax,0xf
c001ca63:	83 c1 04             	add    ecx,0x4
c001ca66:	66 01 02             	add    WORD PTR [edx],ax
c001ca69:	83 c2 02             	add    edx,0x2
c001ca6c:	39 d7                	cmp    edi,edx
c001ca6e:	75 e0                	jne    c001ca50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ca70:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca73:	90                   	nop
c001ca74:	56                   	push   esi
c001ca75:	89 c2                	mov    edx,eax
c001ca77:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001ca7e:	29 f2                	sub    edx,esi
c001ca80:	52                   	push   edx
c001ca81:	50                   	push   eax
c001ca82:	68 cc 4e 02 c0       	push   0xc0024ecc
c001ca87:	e8 6f 00 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001ca8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca8f:	50                   	push   eax
c001ca90:	01 f8                	add    eax,edi
c001ca92:	50                   	push   eax
c001ca93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca96:	29 f0                	sub    eax,esi
c001ca98:	c1 e0 02             	shl    eax,0x2
c001ca9b:	50                   	push   eax
c001ca9c:	68 fc 4e 02 c0       	push   0xc0024efc
c001caa1:	e8 55 00 ff ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001caa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001caa9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001caac:	83 c4 1c             	add    esp,0x1c
c001caaf:	01 d7                	add    edi,edx
c001cab1:	29 f0                	sub    eax,esi
c001cab3:	c1 e0 02             	shl    eax,0x2
c001cab6:	50                   	push   eax
c001cab7:	57                   	push   edi
c001cab8:	52                   	push   edx
c001cab9:	e8 fe 3a fe ff       	call   c00005bc <memmove>
c001cabe:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001cac1:	83 c4 10             	add    esp,0x10
c001cac4:	89 f0                	mov    eax,esi
c001cac6:	5b                   	pop    ebx
c001cac7:	5e                   	pop    esi
c001cac8:	5f                   	pop    edi
c001cac9:	c3                   	ret    
c001caca:	66 90                	xchg   ax,ax

c001cacc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001cacc:	57                   	push   edi
c001cacd:	56                   	push   esi
c001cace:	53                   	push   ebx
c001cacf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cad3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cad7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cadb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001cae1:	39 06                	cmp    DWORD PTR [esi],eax
c001cae3:	74 13                	je     c001caf8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001cae5:	83 ec 0c             	sub    esp,0xc
c001cae8:	68 20 4f 02 c0       	push   0xc0024f20
c001caed:	e8 cb 78 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001caf2:	83 c4 10             	add    esp,0x10
c001caf5:	8d 76 00             	lea    esi,[esi+0x0]
c001caf8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001cafe:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001cb01:	74 11                	je     c001cb14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001cb03:	83 ec 0c             	sub    esp,0xc
c001cb06:	68 8e 4e 02 c0       	push   0xc0024e8e
c001cb0b:	e8 ad 78 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	90                   	nop
c001cb14:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001cb1a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001cb1d:	74 11                	je     c001cb30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001cb1f:	83 ec 0c             	sub    esp,0xc
c001cb22:	68 8e 4e 02 c0       	push   0xc0024e8e
c001cb27:	e8 91 78 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001cb2c:	83 c4 10             	add    esp,0x10
c001cb2f:	90                   	nop
c001cb30:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001cb33:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001cb37:	7e 07                	jle    c001cb40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cb39:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb3d:	8d 76 00             	lea    esi,[esi+0x0]
c001cb40:	85 ff                	test   edi,edi
c001cb42:	7e 1c                	jle    c001cb60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cb44:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cb4b:	31 c0                	xor    eax,eax
c001cb4d:	8d 76 00             	lea    esi,[esi+0x0]
c001cb50:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cb53:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cb56:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cb59:	83 c0 04             	add    eax,0x4
c001cb5c:	39 c1                	cmp    ecx,eax
c001cb5e:	75 f0                	jne    c001cb50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cb60:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cb63:	50                   	push   eax
c001cb64:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cb67:	29 f8                	sub    eax,edi
c001cb69:	c1 e0 02             	shl    eax,0x2
c001cb6c:	50                   	push   eax
c001cb6d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cb70:	50                   	push   eax
c001cb71:	52                   	push   edx
c001cb72:	e8 45 3a fe ff       	call   c00005bc <memmove>
c001cb77:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cb7a:	83 c4 10             	add    esp,0x10
c001cb7d:	89 f8                	mov    eax,edi
c001cb7f:	5b                   	pop    ebx
c001cb80:	5e                   	pop    esi
c001cb81:	5f                   	pop    edi
c001cb82:	c3                   	ret    
c001cb83:	90                   	nop

c001cb84 <PCI::open(int, int, void*)>:
c001cb84:	83 ec 18             	sub    esp,0x18
c001cb87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cb95:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb97:	50                   	push   eax
c001cb98:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb9b:	31 c0                	xor    eax,eax
c001cb9d:	83 c4 1c             	add    esp,0x1c
c001cba0:	c3                   	ret    
c001cba1:	90                   	nop

c001cba2 <PCI::close(int, int, void*)>:
c001cba2:	31 c0                	xor    eax,eax
c001cba4:	c3                   	ret    
c001cba5:	90                   	nop

c001cba6 <PCI::PCI()>:
c001cba6:	83 ec 0c             	sub    esp,0xc
c001cba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbad:	83 ec 08             	sub    esp,0x8
c001cbb0:	68 3f 4f 02 c0       	push   0xc0024f3f
c001cbb5:	50                   	push   eax
c001cbb6:	e8 ed 0b ff ff       	call   c000d7a8 <Bus::Bus(char const*)>
c001cbbb:	83 c4 10             	add    esp,0x10
c001cbbe:	ba 28 50 02 c0       	mov    edx,0xc0025028
c001cbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc7:	89 10                	mov    DWORD PTR [eax],edx
c001cbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbcd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cbd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbdb:	a3 80 83 02 c0       	mov    ds:0xc0028380,eax
c001cbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbea:	0f b6 d0             	movzx  edx,al
c001cbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cc02:	0f b6 d0             	movzx  edx,al
c001cc05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc09:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc12:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cc18:	8d 50 01             	lea    edx,[eax+0x1]
c001cc1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc1f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cc25:	0f b6 d0             	movzx  edx,al
c001cc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cc30:	83 c9 c0             	or     ecx,0xffffffc0
c001cc33:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cc37:	90                   	nop
c001cc38:	83 c4 0c             	add    esp,0xc
c001cc3b:	c3                   	ret    

c001cc3c <PCI::readBAR8(unsigned int, int)>:
c001cc3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc44:	f6 c2 01             	test   dl,0x1
c001cc47:	74 07                	je     c001cc50 <PCI::readBAR8(unsigned int, int)+0x14>
c001cc49:	83 e2 fc             	and    edx,0xfffffffc
c001cc4c:	01 c2                	add    edx,eax
c001cc4e:	ec                   	in     al,dx
c001cc4f:	c3                   	ret    
c001cc50:	83 e2 f0             	and    edx,0xfffffff0
c001cc53:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cc56:	c3                   	ret    
c001cc57:	90                   	nop

c001cc58 <PCI::readBAR16(unsigned int, int)>:
c001cc58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc60:	f6 c2 01             	test   dl,0x1
c001cc63:	74 08                	je     c001cc6d <PCI::readBAR16(unsigned int, int)+0x15>
c001cc65:	83 e2 fc             	and    edx,0xfffffffc
c001cc68:	01 c2                	add    edx,eax
c001cc6a:	66 ed                	in     ax,dx
c001cc6c:	c3                   	ret    
c001cc6d:	83 e2 f0             	and    edx,0xfffffff0
c001cc70:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cc74:	c3                   	ret    
c001cc75:	90                   	nop

c001cc76 <PCI::readBAR32(unsigned int, int)>:
c001cc76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc7e:	f6 c2 01             	test   dl,0x1
c001cc81:	74 07                	je     c001cc8a <PCI::readBAR32(unsigned int, int)+0x14>
c001cc83:	83 e2 fc             	and    edx,0xfffffffc
c001cc86:	01 c2                	add    edx,eax
c001cc88:	ed                   	in     eax,dx
c001cc89:	c3                   	ret    
c001cc8a:	83 e2 f0             	and    edx,0xfffffff0
c001cc8d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cc90:	c3                   	ret    
c001cc91:	90                   	nop

c001cc92 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cc92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc9e:	f6 c2 01             	test   dl,0x1
c001cca1:	74 07                	je     c001ccaa <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cca3:	83 e2 fc             	and    edx,0xfffffffc
c001cca6:	01 ca                	add    edx,ecx
c001cca8:	ee                   	out    dx,al
c001cca9:	c3                   	ret    
c001ccaa:	83 e2 f0             	and    edx,0xfffffff0
c001ccad:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ccb0:	c3                   	ret    
c001ccb1:	90                   	nop

c001ccb2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ccb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ccb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ccbe:	f6 c2 01             	test   dl,0x1
c001ccc1:	74 08                	je     c001cccb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ccc3:	83 e2 fc             	and    edx,0xfffffffc
c001ccc6:	01 ca                	add    edx,ecx
c001ccc8:	66 ef                	out    dx,ax
c001ccca:	c3                   	ret    
c001cccb:	83 e2 f0             	and    edx,0xfffffff0
c001ccce:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ccd2:	c3                   	ret    
c001ccd3:	90                   	nop

c001ccd4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ccd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ccd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccdc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cce0:	f6 c2 01             	test   dl,0x1
c001cce3:	74 07                	je     c001ccec <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cce5:	83 e2 fc             	and    edx,0xfffffffc
c001cce8:	01 ca                	add    edx,ecx
c001ccea:	ef                   	out    dx,eax
c001cceb:	c3                   	ret    
c001ccec:	83 e2 f0             	and    edx,0xfffffff0
c001ccef:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ccf2:	c3                   	ret    
c001ccf3:	90                   	nop

c001ccf4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccf4:	55                   	push   ebp
c001ccf5:	57                   	push   edi
c001ccf6:	56                   	push   esi
c001ccf7:	53                   	push   ebx
c001ccf8:	83 ec 0c             	sub    esp,0xc
c001ccfb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ccff:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cd03:	89 f0                	mov    eax,esi
c001cd05:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cd09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cd0d:	3c 07                	cmp    al,0x7
c001cd0f:	76 10                	jbe    c001cd21 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cd11:	83 ec 0c             	sub    esp,0xc
c001cd14:	68 47 4f 02 c0       	push   0xc0024f47
c001cd19:	e8 9f 76 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001cd1e:	83 c4 10             	add    esp,0x10
c001cd21:	80 fb 0f             	cmp    bl,0xf
c001cd24:	76 10                	jbe    c001cd36 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cd26:	83 ec 0c             	sub    esp,0xc
c001cd29:	68 77 4f 02 c0       	push   0xc0024f77
c001cd2e:	e8 8a 76 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001cd33:	83 c4 10             	add    esp,0x10
c001cd36:	8d 04 36             	lea    eax,[esi+esi*1]
c001cd39:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd3e:	83 c8 f0             	or     eax,0xfffffff0
c001cd41:	ee                   	out    dx,al
c001cd42:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cd47:	89 e8                	mov    eax,ebp
c001cd49:	ee                   	out    dx,al
c001cd4a:	83 c4 0c             	add    esp,0xc
c001cd4d:	89 d8                	mov    eax,ebx
c001cd4f:	66 81 e7 fc 00       	and    di,0xfc
c001cd54:	5b                   	pop    ebx
c001cd55:	c1 e0 08             	shl    eax,0x8
c001cd58:	5e                   	pop    esi
c001cd59:	09 f8                	or     eax,edi
c001cd5b:	5f                   	pop    edi
c001cd5c:	66 0d 00 c0          	or     ax,0xc000
c001cd60:	5d                   	pop    ebp
c001cd61:	c3                   	ret    

c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cd62:	57                   	push   edi
c001cd63:	56                   	push   esi
c001cd64:	53                   	push   ebx
c001cd65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd6d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cd73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd7f:	83 ff 01             	cmp    edi,0x1
c001cd82:	75 3e                	jne    c001cdc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cd84:	89 de                	mov    esi,ebx
c001cd86:	0f b6 c0             	movzx  eax,al
c001cd89:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cd8f:	c1 e0 10             	shl    eax,0x10
c001cd92:	0f b6 c9             	movzx  ecx,cl
c001cd95:	09 f0                	or     eax,esi
c001cd97:	c1 e1 08             	shl    ecx,0x8
c001cd9a:	0f b6 d2             	movzx  edx,dl
c001cd9d:	09 c8                	or     eax,ecx
c001cd9f:	c1 e2 0b             	shl    edx,0xb
c001cda2:	09 d0                	or     eax,edx
c001cda4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cda9:	0d 00 00 00 80       	or     eax,0x80000000
c001cdae:	ef                   	out    dx,eax
c001cdaf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cdb4:	ed                   	in     eax,dx
c001cdb5:	83 e3 02             	and    ebx,0x2
c001cdb8:	0f b6 cb             	movzx  ecx,bl
c001cdbb:	c1 e1 03             	shl    ecx,0x3
c001cdbe:	d3 e8                	shr    eax,cl
c001cdc0:	eb 43                	jmp    c001ce05 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cdc2:	83 ff 02             	cmp    edi,0x2
c001cdc5:	75 2c                	jne    c001cdf3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cdc7:	83 ec 0c             	sub    esp,0xc
c001cdca:	0f b6 c9             	movzx  ecx,cl
c001cdcd:	0f b6 d2             	movzx  edx,dl
c001cdd0:	0f b6 fb             	movzx  edi,bl
c001cdd3:	0f b6 c0             	movzx  eax,al
c001cdd6:	57                   	push   edi
c001cdd7:	51                   	push   ecx
c001cdd8:	52                   	push   edx
c001cdd9:	50                   	push   eax
c001cdda:	56                   	push   esi
c001cddb:	e8 14 ff ff ff       	call   c001ccf4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cde0:	89 c2                	mov    edx,eax
c001cde2:	ed                   	in     eax,dx
c001cde3:	83 e3 02             	and    ebx,0x2
c001cde6:	83 c4 20             	add    esp,0x20
c001cde9:	0f b6 cb             	movzx  ecx,bl
c001cdec:	c1 e1 03             	shl    ecx,0x3
c001cdef:	d3 e8                	shr    eax,cl
c001cdf1:	eb 12                	jmp    c001ce05 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cdf3:	83 ec 0c             	sub    esp,0xc
c001cdf6:	68 a7 4f 02 c0       	push   0xc0024fa7
c001cdfb:	e8 bd 75 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001ce00:	83 c4 10             	add    esp,0x10
c001ce03:	31 c0                	xor    eax,eax
c001ce05:	5b                   	pop    ebx
c001ce06:	5e                   	pop    esi
c001ce07:	5f                   	pop    edi
c001ce08:	c3                   	ret    
c001ce09:	90                   	nop

c001ce0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ce0a:	83 ec 18             	sub    esp,0x18
c001ce0d:	6a 00                	push   0x0
c001ce0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce14:	50                   	push   eax
c001ce15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce1a:	50                   	push   eax
c001ce1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce20:	50                   	push   eax
c001ce21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce25:	e8 38 ff ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce2a:	83 c4 2c             	add    esp,0x2c
c001ce2d:	c3                   	ret    

c001ce2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ce2e:	83 ec 18             	sub    esp,0x18
c001ce31:	6a 0e                	push   0xe
c001ce33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce38:	50                   	push   eax
c001ce39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce3e:	50                   	push   eax
c001ce3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce44:	50                   	push   eax
c001ce45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce49:	e8 14 ff ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce4e:	83 c4 2c             	add    esp,0x2c
c001ce51:	0f b6 c0             	movzx  eax,al
c001ce54:	c3                   	ret    
c001ce55:	90                   	nop

c001ce56 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ce56:	55                   	push   ebp
c001ce57:	57                   	push   edi
c001ce58:	56                   	push   esi
c001ce59:	53                   	push   ebx
c001ce5a:	83 ec 18             	sub    esp,0x18
c001ce5d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ce62:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ce67:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ce6c:	6a 0a                	push   0xa
c001ce6e:	56                   	push   esi
c001ce6f:	55                   	push   ebp
c001ce70:	57                   	push   edi
c001ce71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce75:	e8 e8 fe ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce7a:	83 c4 14             	add    esp,0x14
c001ce7d:	89 c3                	mov    ebx,eax
c001ce7f:	6a 0a                	push   0xa
c001ce81:	0f b6 db             	movzx  ebx,bl
c001ce84:	56                   	push   esi
c001ce85:	55                   	push   ebp
c001ce86:	57                   	push   edi
c001ce87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce8b:	e8 d2 fe ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce90:	83 c4 2c             	add    esp,0x2c
c001ce93:	25 00 ff 00 00       	and    eax,0xff00
c001ce98:	09 d8                	or     eax,ebx
c001ce9a:	5b                   	pop    ebx
c001ce9b:	5e                   	pop    esi
c001ce9c:	5f                   	pop    edi
c001ce9d:	5d                   	pop    ebp
c001ce9e:	c3                   	ret    
c001ce9f:	90                   	nop

c001cea0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cea0:	83 ec 18             	sub    esp,0x18
c001cea3:	6a 08                	push   0x8
c001cea5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceaa:	50                   	push   eax
c001ceab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceb0:	50                   	push   eax
c001ceb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceb6:	50                   	push   eax
c001ceb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cebb:	e8 a2 fe ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cec0:	83 c4 2c             	add    esp,0x2c
c001cec3:	0f b6 c4             	movzx  eax,ah
c001cec6:	c3                   	ret    
c001cec7:	90                   	nop

c001cec8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cec8:	83 ec 18             	sub    esp,0x18
c001cecb:	6a 08                	push   0x8
c001cecd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ced2:	50                   	push   eax
c001ced3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ced8:	50                   	push   eax
c001ced9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cede:	50                   	push   eax
c001cedf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cee3:	e8 7a fe ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cee8:	83 c4 2c             	add    esp,0x2c
c001ceeb:	c3                   	ret    

c001ceec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ceec:	83 ec 18             	sub    esp,0x18
c001ceef:	6a 3c                	push   0x3c
c001cef1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cef6:	50                   	push   eax
c001cef7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cefc:	50                   	push   eax
c001cefd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf02:	50                   	push   eax
c001cf03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf07:	e8 56 fe ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf0c:	83 c4 2c             	add    esp,0x2c
c001cf0f:	c3                   	ret    

c001cf10 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cf10:	83 ec 18             	sub    esp,0x18
c001cf13:	6a 18                	push   0x18
c001cf15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf1a:	50                   	push   eax
c001cf1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf20:	50                   	push   eax
c001cf21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf26:	50                   	push   eax
c001cf27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf2b:	e8 32 fe ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf30:	83 c4 2c             	add    esp,0x2c
c001cf33:	0f b6 c4             	movzx  eax,ah
c001cf36:	c3                   	ret    
c001cf37:	90                   	nop

c001cf38 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cf38:	55                   	push   ebp
c001cf39:	57                   	push   edi
c001cf3a:	56                   	push   esi
c001cf3b:	53                   	push   ebx
c001cf3c:	83 ec 28             	sub    esp,0x28
c001cf3f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cf43:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cf48:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cf4d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cf52:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cf59:	8d 43 12             	lea    eax,[ebx+0x12]
c001cf5c:	83 c3 10             	add    ebx,0x10
c001cf5f:	0f b6 c0             	movzx  eax,al
c001cf62:	0f b6 db             	movzx  ebx,bl
c001cf65:	50                   	push   eax
c001cf66:	51                   	push   ecx
c001cf67:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cf6b:	57                   	push   edi
c001cf6c:	55                   	push   ebp
c001cf6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf71:	e8 ec fd ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf76:	83 c4 14             	add    esp,0x14
c001cf79:	89 c6                	mov    esi,eax
c001cf7b:	53                   	push   ebx
c001cf7c:	c1 e6 10             	shl    esi,0x10
c001cf7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf83:	51                   	push   ecx
c001cf84:	57                   	push   edi
c001cf85:	55                   	push   ebp
c001cf86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf8a:	e8 d3 fd ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf8f:	83 c4 3c             	add    esp,0x3c
c001cf92:	0f b7 c0             	movzx  eax,ax
c001cf95:	5b                   	pop    ebx
c001cf96:	09 f0                	or     eax,esi
c001cf98:	5e                   	pop    esi
c001cf99:	5f                   	pop    edi
c001cf9a:	5d                   	pop    ebp
c001cf9b:	c3                   	ret    

c001cf9c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf9c:	55                   	push   ebp
c001cf9d:	57                   	push   edi
c001cf9e:	56                   	push   esi
c001cf9f:	53                   	push   ebx
c001cfa0:	83 ec 0c             	sub    esp,0xc
c001cfa3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cfa7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cfab:	89 f5                	mov    ebp,esi
c001cfad:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cfb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cfbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cfc3:	83 f9 01             	cmp    ecx,0x1
c001cfc6:	75 5d                	jne    c001d025 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cfc8:	0f b6 c8             	movzx  ecx,al
c001cfcb:	0f b6 d2             	movzx  edx,dl
c001cfce:	c1 e1 10             	shl    ecx,0x10
c001cfd1:	c1 e2 0b             	shl    edx,0xb
c001cfd4:	89 f0                	mov    eax,esi
c001cfd6:	25 fc 00 00 00       	and    eax,0xfc
c001cfdb:	09 c1                	or     ecx,eax
c001cfdd:	89 e8                	mov    eax,ebp
c001cfdf:	0f b6 c0             	movzx  eax,al
c001cfe2:	c1 e0 08             	shl    eax,0x8
c001cfe5:	09 c1                	or     ecx,eax
c001cfe7:	09 d1                	or     ecx,edx
c001cfe9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cfee:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cff4:	89 c8                	mov    eax,ecx
c001cff6:	ef                   	out    dx,eax
c001cff7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cffc:	ed                   	in     eax,dx
c001cffd:	0f b7 db             	movzx  ebx,bx
c001d000:	83 e6 02             	and    esi,0x2
c001d003:	74 0a                	je     c001d00f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d005:	0f b7 d0             	movzx  edx,ax
c001d008:	c1 e3 10             	shl    ebx,0x10
c001d00b:	09 d3                	or     ebx,edx
c001d00d:	eb 05                	jmp    c001d014 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d00f:	66 31 c0             	xor    ax,ax
c001d012:	09 c3                	or     ebx,eax
c001d014:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d019:	89 c8                	mov    eax,ecx
c001d01b:	ef                   	out    dx,eax
c001d01c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d021:	89 d8                	mov    eax,ebx
c001d023:	eb 41                	jmp    c001d066 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d025:	83 f9 02             	cmp    ecx,0x2
c001d028:	75 45                	jne    c001d06f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d02a:	83 ec 0c             	sub    esp,0xc
c001d02d:	0f b6 d2             	movzx  edx,dl
c001d030:	89 f1                	mov    ecx,esi
c001d032:	0f b6 c0             	movzx  eax,al
c001d035:	0f b6 f1             	movzx  esi,cl
c001d038:	89 e9                	mov    ecx,ebp
c001d03a:	56                   	push   esi
c001d03b:	0f b6 c9             	movzx  ecx,cl
c001d03e:	51                   	push   ecx
c001d03f:	52                   	push   edx
c001d040:	50                   	push   eax
c001d041:	57                   	push   edi
c001d042:	e8 ad fc ff ff       	call   c001ccf4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d047:	89 c2                	mov    edx,eax
c001d049:	ed                   	in     eax,dx
c001d04a:	83 c4 20             	add    esp,0x20
c001d04d:	0f b7 db             	movzx  ebx,bx
c001d050:	f6 c2 02             	test   dl,0x2
c001d053:	74 0c                	je     c001d061 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d055:	0f b7 c8             	movzx  ecx,ax
c001d058:	89 d8                	mov    eax,ebx
c001d05a:	c1 e0 10             	shl    eax,0x10
c001d05d:	09 c8                	or     eax,ecx
c001d05f:	eb 05                	jmp    c001d066 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d061:	66 31 c0             	xor    ax,ax
c001d064:	09 d8                	or     eax,ebx
c001d066:	ef                   	out    dx,eax
c001d067:	83 c4 0c             	add    esp,0xc
c001d06a:	5b                   	pop    ebx
c001d06b:	5e                   	pop    esi
c001d06c:	5f                   	pop    edi
c001d06d:	5d                   	pop    ebp
c001d06e:	c3                   	ret    
c001d06f:	c7 44 24 20 a7 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024fa7
c001d077:	83 c4 0c             	add    esp,0xc
c001d07a:	5b                   	pop    ebx
c001d07b:	5e                   	pop    esi
c001d07c:	5f                   	pop    edi
c001d07d:	5d                   	pop    ebp
c001d07e:	e9 3a 73 ff ff       	jmp    c00143bd <Krnl::panic(char const*)>
c001d083:	90                   	nop

c001d084 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d084:	55                   	push   ebp
c001d085:	57                   	push   edi
c001d086:	56                   	push   esi
c001d087:	53                   	push   ebx
c001d088:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d08e:	80 3d 8c 83 02 c0 00 	cmp    BYTE PTR ds:0xc002838c,0x0
c001d095:	0f 85 84 00 00 00    	jne    c001d11f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d09b:	83 ec 0c             	sub    esp,0xc
c001d09e:	68 14 01 00 00       	push   0x114
c001d0a3:	e8 1b c9 fe ff       	call   c00099c3 <malloc>
c001d0a8:	83 c4 0c             	add    esp,0xc
c001d0ab:	89 c3                	mov    ebx,eax
c001d0ad:	ff 35 90 79 02 c0    	push   DWORD PTR ds:0xc0027990
c001d0b3:	68 ad 4f 02 c0       	push   0xc0024fad
c001d0b8:	50                   	push   eax
c001d0b9:	e8 a8 ff fe ff       	call   c000d066 <File::File(char const*, Process*)>
c001d0be:	5a                   	pop    edx
c001d0bf:	59                   	pop    ecx
c001d0c0:	6a 01                	push   0x1
c001d0c2:	53                   	push   ebx
c001d0c3:	e8 02 00 ff ff       	call   c000d0ca <File::open(FileOpenMode)>
c001d0c8:	83 c4 0c             	add    esp,0xc
c001d0cb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d0cf:	50                   	push   eax
c001d0d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d0d4:	50                   	push   eax
c001d0d5:	53                   	push   ebx
c001d0d6:	e8 9b 02 ff ff       	call   c000d376 <File::stat(unsigned long long*, bool*)>
c001d0db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0df:	40                   	inc    eax
c001d0e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0e3:	e8 db c8 fe ff       	call   c00099c3 <malloc>
c001d0e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0ec:	a3 88 83 02 c0       	mov    ds:0xc0028388,eax
c001d0f1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d0f5:	5e                   	pop    esi
c001d0f6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d0f8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d0fc:	51                   	push   ecx
c001d0fd:	50                   	push   eax
c001d0fe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d102:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d106:	53                   	push   ebx
c001d107:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d10a:	83 c4 14             	add    esp,0x14
c001d10d:	53                   	push   ebx
c001d10e:	e8 15 00 ff ff       	call   c000d128 <File::close()>
c001d113:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d117:	83 c4 10             	add    esp,0x10
c001d11a:	a3 84 83 02 c0       	mov    ds:0xc0028384,eax
c001d11f:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c001d124:	8b 15 88 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028388
c001d12a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d12d:	31 ff                	xor    edi,edi
c001d12f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d137:	31 f6                	xor    esi,esi
c001d139:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d13e:	31 db                	xor    ebx,ebx
c001d140:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d148:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d14d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d154:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d158:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d15f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d163:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d166:	0f 8e 6b 01 00 00    	jle    c001d2d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d16c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d16f:	d4 40                	aam    0x40
c001d171:	d5 39                	aad    0x39
c001d173:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d177:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d17b:	d4 40                	aam    0x40
c001d17d:	d5 39                	aad    0x39
c001d17f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d183:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d187:	d4 40                	aam    0x40
c001d189:	d5 39                	aad    0x39
c001d18b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d18f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d193:	d4 40                	aam    0x40
c001d195:	d5 39                	aad    0x39
c001d197:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d19b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d19f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d1a3:	3c 56                	cmp    al,0x56
c001d1a5:	74 45                	je     c001d1ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d1a7:	d4 40                	aam    0x40
c001d1a9:	d5 39                	aad    0x39
c001d1ab:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d1ae:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d1b2:	0f b6 c9             	movzx  ecx,cl
c001d1b5:	c1 e1 04             	shl    ecx,0x4
c001d1b8:	d4 40                	aam    0x40
c001d1ba:	d5 39                	aad    0x39
c001d1bc:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d1bf:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d1c3:	0f b6 db             	movzx  ebx,bl
c001d1c6:	09 cb                	or     ebx,ecx
c001d1c8:	c1 e3 04             	shl    ebx,0x4
c001d1cb:	d4 40                	aam    0x40
c001d1cd:	d5 39                	aad    0x39
c001d1cf:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d1d2:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d1d6:	0f b6 c9             	movzx  ecx,cl
c001d1d9:	09 cb                	or     ebx,ecx
c001d1db:	c1 e3 04             	shl    ebx,0x4
c001d1de:	89 d9                	mov    ecx,ebx
c001d1e0:	d4 40                	aam    0x40
c001d1e2:	d5 39                	aad    0x39
c001d1e4:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d1e7:	0f b6 db             	movzx  ebx,bl
c001d1ea:	09 cb                	or     ebx,ecx
c001d1ec:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d1f0:	80 f9 44             	cmp    cl,0x44
c001d1f3:	74 47                	je     c001d23c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d1f5:	88 c8                	mov    al,cl
c001d1f7:	d4 40                	aam    0x40
c001d1f9:	d5 39                	aad    0x39
c001d1fb:	83 e8 30             	sub    eax,0x30
c001d1fe:	0f b6 e8             	movzx  ebp,al
c001d201:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d205:	c1 e5 04             	shl    ebp,0x4
c001d208:	d4 40                	aam    0x40
c001d20a:	d5 39                	aad    0x39
c001d20c:	83 e8 30             	sub    eax,0x30
c001d20f:	0f b6 f0             	movzx  esi,al
c001d212:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d216:	09 ee                	or     esi,ebp
c001d218:	c1 e6 04             	shl    esi,0x4
c001d21b:	d4 40                	aam    0x40
c001d21d:	d5 39                	aad    0x39
c001d21f:	83 e8 30             	sub    eax,0x30
c001d222:	0f b6 e8             	movzx  ebp,al
c001d225:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d229:	09 ee                	or     esi,ebp
c001d22b:	c1 e6 04             	shl    esi,0x4
c001d22e:	89 f5                	mov    ebp,esi
c001d230:	d4 40                	aam    0x40
c001d232:	d5 39                	aad    0x39
c001d234:	83 e8 30             	sub    eax,0x30
c001d237:	0f b6 f0             	movzx  esi,al
c001d23a:	09 ee                	or     esi,ebp
c001d23c:	83 c7 10             	add    edi,0x10
c001d23f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d243:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d246:	3c 0a                	cmp    al,0xa
c001d248:	74 09                	je     c001d253 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d24a:	45                   	inc    ebp
c001d24b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d24e:	75 16                	jne    c001d266 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d250:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d253:	3c 0a                	cmp    al,0xa
c001d255:	0f 94 c0             	sete   al
c001d258:	0f b6 c0             	movzx  eax,al
c001d25b:	01 c7                	add    edi,eax
c001d25d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d262:	75 0c                	jne    c001d270 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d264:	eb 15                	jmp    c001d27b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d266:	47                   	inc    edi
c001d267:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d26a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d26e:	eb d3                	jmp    c001d243 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d270:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d275:	0f 85 e8 fe ff ff    	jne    c001d163 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d27b:	80 f9 44             	cmp    cl,0x44
c001d27e:	74 0b                	je     c001d28b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d280:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d285:	0f 85 d8 fe ff ff    	jne    c001d163 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d28b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d28f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d293:	c1 e1 04             	shl    ecx,0x4
c001d296:	83 e8 30             	sub    eax,0x30
c001d299:	09 c8                	or     eax,ecx
c001d29b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d29f:	0f 85 be fe ff ff    	jne    c001d163 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d2a5:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d2a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d2ad:	c1 e1 04             	shl    ecx,0x4
c001d2b0:	83 e8 30             	sub    eax,0x30
c001d2b3:	09 c8                	or     eax,ecx
c001d2b5:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d2b9:	0f 85 a4 fe ff ff    	jne    c001d163 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d2bf:	50                   	push   eax
c001d2c0:	50                   	push   eax
c001d2c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d2c5:	50                   	push   eax
c001d2c6:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d2cd:	e8 6e 34 fe ff       	call   c0000740 <strcpy>
c001d2d2:	83 c4 10             	add    esp,0x10
c001d2d5:	eb 15                	jmp    c001d2ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d2d7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2de:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d2e9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d2ec:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2f3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2f9:	5b                   	pop    ebx
c001d2fa:	5e                   	pop    esi
c001d2fb:	5f                   	pop    edi
c001d2fc:	5d                   	pop    ebp
c001d2fd:	c3                   	ret    

c001d2fe <PCI::checkBus(unsigned char)>:
c001d2fe:	56                   	push   esi
c001d2ff:	53                   	push   ebx
c001d300:	31 db                	xor    ebx,ebx
c001d302:	51                   	push   ecx
c001d303:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d308:	52                   	push   edx
c001d309:	53                   	push   ebx
c001d30a:	43                   	inc    ebx
c001d30b:	56                   	push   esi
c001d30c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d310:	e8 37 03 00 00       	call   c001d64c <PCI::checkDevice(unsigned char, unsigned char)>
c001d315:	83 c4 10             	add    esp,0x10
c001d318:	83 fb 20             	cmp    ebx,0x20
c001d31b:	75 eb                	jne    c001d308 <PCI::checkBus(unsigned char)+0xa>
c001d31d:	58                   	pop    eax
c001d31e:	5b                   	pop    ebx
c001d31f:	5e                   	pop    esi
c001d320:	c3                   	ret    
c001d321:	90                   	nop

c001d322 <PCI::foundDevice(PCIDeviceInfo)>:
c001d322:	55                   	push   ebp
c001d323:	57                   	push   edi
c001d324:	56                   	push   esi
c001d325:	53                   	push   ebx
c001d326:	83 ec 1c             	sub    esp,0x1c
c001d329:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d32d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d333:	0f 84 52 01 00 00    	je     c001d48b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d339:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d33d:	66 81 f9 06 04       	cmp    cx,0x406
c001d342:	75 2c                	jne    c001d370 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d344:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d349:	50                   	push   eax
c001d34a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d34f:	50                   	push   eax
c001d350:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d355:	50                   	push   eax
c001d356:	56                   	push   esi
c001d357:	e8 b4 fb ff ff       	call   c001cf10 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d35c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d360:	0f b6 c0             	movzx  eax,al
c001d363:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d367:	83 c4 2c             	add    esp,0x2c
c001d36a:	5b                   	pop    ebx
c001d36b:	5e                   	pop    esi
c001d36c:	5f                   	pop    edi
c001d36d:	5d                   	pop    ebp
c001d36e:	eb 8e                	jmp    c001d2fe <PCI::checkBus(unsigned char)>
c001d370:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d374:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d37a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d37e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d382:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d386:	88 d3                	mov    bl,dl
c001d388:	85 c0                	test   eax,eax
c001d38a:	74 33                	je     c001d3bf <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d38c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d38f:	85 d2                	test   edx,edx
c001d391:	74 28                	je     c001d3bb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d393:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d399:	31 ef                	xor    edi,ebp
c001d39b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d3a1:	75 18                	jne    c001d3bb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d3a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d3a7:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d3ad:	75 0c                	jne    c001d3bb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d3af:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d3b5:	0f 84 d0 00 00 00    	je     c001d48b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d3bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3bd:	eb c9                	jmp    c001d388 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d3bf:	66 81 f9 01 06       	cmp    cx,0x601
c001d3c4:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d3c8:	75 19                	jne    c001d3e3 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d3ca:	83 ec 0c             	sub    esp,0xc
c001d3cd:	68 64 01 00 00       	push   0x164
c001d3d2:	e8 ec c5 fe ff       	call   c00099c3 <malloc>
c001d3d7:	89 c5                	mov    ebp,eax
c001d3d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3dc:	e8 7b 0e 00 00       	call   c001e25c <SATABus::SATABus()>
c001d3e1:	eb 1e                	jmp    c001d401 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d3e3:	66 81 f9 01 01       	cmp    cx,0x101
c001d3e8:	75 60                	jne    c001d44a <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d3ea:	83 ec 0c             	sub    esp,0xc
c001d3ed:	68 70 02 00 00       	push   0x270
c001d3f2:	e8 cc c5 fe ff       	call   c00099c3 <malloc>
c001d3f7:	89 c5                	mov    ebp,eax
c001d3f9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3fc:	e8 0f 03 00 00       	call   c001d710 <IDE::IDE()>
c001d401:	58                   	pop    eax
c001d402:	5a                   	pop    edx
c001d403:	55                   	push   ebp
c001d404:	56                   	push   esi
c001d405:	e8 38 0b ff ff       	call   c000df42 <Device::addChild(Device*)>
c001d40a:	83 ec 1c             	sub    esp,0x1c
c001d40d:	b9 09 00 00 00       	mov    ecx,0x9
c001d412:	fc                   	cld    
c001d413:	89 e7                	mov    edi,esp
c001d415:	89 de                	mov    esi,ebx
c001d417:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d419:	55                   	push   ebp
c001d41a:	e8 35 0a ff ff       	call   c000de54 <Device::preOpenPCI(PCIDeviceInfo)>
c001d41f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d422:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d426:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d42e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d436:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d43e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d441:	83 c4 4c             	add    esp,0x4c
c001d444:	5b                   	pop    ebx
c001d445:	5e                   	pop    esi
c001d446:	5f                   	pop    edi
c001d447:	5d                   	pop    ebp
c001d448:	ff e0                	jmp    eax
c001d44a:	83 ec 0c             	sub    esp,0xc
c001d44d:	68 58 01 00 00       	push   0x158
c001d452:	e8 6c c5 fe ff       	call   c00099c3 <malloc>
c001d457:	89 c5                	mov    ebp,eax
c001d459:	58                   	pop    eax
c001d45a:	5a                   	pop    edx
c001d45b:	68 c6 4f 02 c0       	push   0xc0024fc6
c001d460:	55                   	push   ebp
c001d461:	e8 e6 0d ff ff       	call   c000e24c <DriverlessDevice::DriverlessDevice(char const*)>
c001d466:	59                   	pop    ecx
c001d467:	5f                   	pop    edi
c001d468:	55                   	push   ebp
c001d469:	56                   	push   esi
c001d46a:	e8 d3 0a ff ff       	call   c000df42 <Device::addChild(Device*)>
c001d46f:	b9 09 00 00 00       	mov    ecx,0x9
c001d474:	fc                   	cld    
c001d475:	89 df                	mov    edi,ebx
c001d477:	89 de                	mov    esi,ebx
c001d479:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d47b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d47f:	83 c4 2c             	add    esp,0x2c
c001d482:	5b                   	pop    ebx
c001d483:	5e                   	pop    esi
c001d484:	5f                   	pop    edi
c001d485:	5d                   	pop    ebp
c001d486:	e9 c9 09 ff ff       	jmp    c000de54 <Device::preOpenPCI(PCIDeviceInfo)>
c001d48b:	83 c4 1c             	add    esp,0x1c
c001d48e:	5b                   	pop    ebx
c001d48f:	5e                   	pop    esi
c001d490:	5f                   	pop    edi
c001d491:	5d                   	pop    ebp
c001d492:	c3                   	ret    
c001d493:	90                   	nop

c001d494 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d494:	55                   	push   ebp
c001d495:	57                   	push   edi
c001d496:	56                   	push   esi
c001d497:	53                   	push   ebx
c001d498:	83 ec 68             	sub    esp,0x68
c001d49b:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d49f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d4a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d4aa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d4b1:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d4b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d4c1:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d4c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d4ca:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d4cf:	6a 0c                	push   0xc
c001d4d1:	57                   	push   edi
c001d4d2:	53                   	push   ebx
c001d4d3:	56                   	push   esi
c001d4d4:	55                   	push   ebp
c001d4d5:	e8 88 f8 ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4da:	83 c4 20             	add    esp,0x20
c001d4dd:	57                   	push   edi
c001d4de:	53                   	push   ebx
c001d4df:	56                   	push   esi
c001d4e0:	55                   	push   ebp
c001d4e1:	e8 70 f9 ff ff       	call   c001ce56 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d4e6:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d4eb:	57                   	push   edi
c001d4ec:	53                   	push   ebx
c001d4ed:	56                   	push   esi
c001d4ee:	55                   	push   ebp
c001d4ef:	e8 f8 f9 ff ff       	call   c001ceec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d4f4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4f8:	83 c4 14             	add    esp,0x14
c001d4fb:	6a 3c                	push   0x3c
c001d4fd:	57                   	push   edi
c001d4fe:	53                   	push   ebx
c001d4ff:	56                   	push   esi
c001d500:	55                   	push   ebp
c001d501:	e8 5c f8 ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d506:	0f b6 c4             	movzx  eax,ah
c001d509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d50d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d511:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d515:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c001d51a:	83 c4 20             	add    esp,0x20
c001d51d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d523:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d52a:	74 7c                	je     c001d5a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d52c:	31 c0                	xor    eax,eax
c001d52e:	8b 15 a8 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264a8
c001d534:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d53a:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d540:	7e 66                	jle    c001d5a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d542:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d545:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d54c:	39 cb                	cmp    ebx,ecx
c001d54e:	75 55                	jne    c001d5a5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d550:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d557:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d55b:	75 48                	jne    c001d5a5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d55d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d561:	83 ec 0c             	sub    esp,0xc
c001d564:	68 e0 4f 02 c0       	push   0xc0024fe0
c001d569:	e8 8d f5 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001d56e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d572:	8b 15 a8 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264a8
c001d578:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d57c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d582:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d58a:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d58e:	52                   	push   edx
c001d58f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d593:	53                   	push   ebx
c001d594:	68 05 50 02 c0       	push   0xc0025005
c001d599:	e8 5d f5 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001d59e:	83 c4 20             	add    esp,0x20
c001d5a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5a5:	40                   	inc    eax
c001d5a6:	eb 86                	jmp    c001d52e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d5a8:	31 d2                	xor    edx,edx
c001d5aa:	83 ec 0c             	sub    esp,0xc
c001d5ad:	57                   	push   edi
c001d5ae:	53                   	push   ebx
c001d5af:	56                   	push   esi
c001d5b0:	52                   	push   edx
c001d5b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d5b5:	55                   	push   ebp
c001d5b6:	e8 7d f9 ff ff       	call   c001cf38 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d5bf:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d5c3:	42                   	inc    edx
c001d5c4:	83 c4 20             	add    esp,0x20
c001d5c7:	83 fa 06             	cmp    edx,0x6
c001d5ca:	75 de                	jne    c001d5aa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d5cc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d5d1:	83 ec 0c             	sub    esp,0xc
c001d5d4:	86 e0                	xchg   al,ah
c001d5d6:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d5db:	6a 02                	push   0x2
c001d5dd:	57                   	push   edi
c001d5de:	53                   	push   ebx
c001d5df:	56                   	push   esi
c001d5e0:	55                   	push   ebp
c001d5e1:	e8 7c f7 ff ff       	call   c001cd62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5e6:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d5eb:	83 c4 20             	add    esp,0x20
c001d5ee:	57                   	push   edi
c001d5ef:	53                   	push   ebx
c001d5f0:	56                   	push   esi
c001d5f1:	55                   	push   ebp
c001d5f2:	e8 a9 f8 ff ff       	call   c001cea0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d5f7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d5fb:	57                   	push   edi
c001d5fc:	53                   	push   ebx
c001d5fd:	56                   	push   esi
c001d5fe:	55                   	push   ebp
c001d5ff:	e8 06 f8 ff ff       	call   c001ce0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d604:	b9 09 00 00 00       	mov    ecx,0x9
c001d609:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d60e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d612:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d616:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d61a:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d61e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d622:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d626:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d62a:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d62e:	83 ec 0c             	sub    esp,0xc
c001d631:	fc                   	cld    
c001d632:	89 e7                	mov    edi,esp
c001d634:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d638:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d63a:	55                   	push   ebp
c001d63b:	e8 e2 fc ff ff       	call   c001d322 <PCI::foundDevice(PCIDeviceInfo)>
c001d640:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d646:	5b                   	pop    ebx
c001d647:	5e                   	pop    esi
c001d648:	5f                   	pop    edi
c001d649:	5d                   	pop    ebp
c001d64a:	c3                   	ret    
c001d64b:	90                   	nop

c001d64c <PCI::checkDevice(unsigned char, unsigned char)>:
c001d64c:	55                   	push   ebp
c001d64d:	57                   	push   edi
c001d64e:	56                   	push   esi
c001d64f:	53                   	push   ebx
c001d650:	83 ec 0c             	sub    esp,0xc
c001d653:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d657:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d65c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d661:	6a 00                	push   0x0
c001d663:	56                   	push   esi
c001d664:	57                   	push   edi
c001d665:	55                   	push   ebp
c001d666:	e8 9f f7 ff ff       	call   c001ce0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d66b:	6a 00                	push   0x0
c001d66d:	56                   	push   esi
c001d66e:	57                   	push   edi
c001d66f:	55                   	push   ebp
c001d670:	e8 1f fe ff ff       	call   c001d494 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d675:	83 c4 20             	add    esp,0x20
c001d678:	6a 00                	push   0x0
c001d67a:	56                   	push   esi
c001d67b:	57                   	push   edi
c001d67c:	55                   	push   ebp
c001d67d:	e8 ac f7 ff ff       	call   c001ce2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d682:	83 c4 10             	add    esp,0x10
c001d685:	84 c0                	test   al,al
c001d687:	79 27                	jns    c001d6b0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d689:	bb 01 00 00 00       	mov    ebx,0x1
c001d68e:	53                   	push   ebx
c001d68f:	56                   	push   esi
c001d690:	57                   	push   edi
c001d691:	55                   	push   ebp
c001d692:	e8 73 f7 ff ff       	call   c001ce0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d697:	83 c4 10             	add    esp,0x10
c001d69a:	66 40                	inc    ax
c001d69c:	74 0c                	je     c001d6aa <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d69e:	53                   	push   ebx
c001d69f:	56                   	push   esi
c001d6a0:	57                   	push   edi
c001d6a1:	55                   	push   ebp
c001d6a2:	e8 ed fd ff ff       	call   c001d494 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d6a7:	83 c4 10             	add    esp,0x10
c001d6aa:	43                   	inc    ebx
c001d6ab:	83 fb 08             	cmp    ebx,0x8
c001d6ae:	75 de                	jne    c001d68e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d6b0:	83 c4 0c             	add    esp,0xc
c001d6b3:	5b                   	pop    ebx
c001d6b4:	5e                   	pop    esi
c001d6b5:	5f                   	pop    edi
c001d6b6:	5d                   	pop    ebp
c001d6b7:	c3                   	ret    

c001d6b8 <PCI::detect()>:
c001d6b8:	56                   	push   esi
c001d6b9:	53                   	push   ebx
c001d6ba:	53                   	push   ebx
c001d6bb:	31 db                	xor    ebx,ebx
c001d6bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6c1:	6a 00                	push   0x0
c001d6c3:	6a 00                	push   0x0
c001d6c5:	6a 00                	push   0x0
c001d6c7:	56                   	push   esi
c001d6c8:	e8 61 f7 ff ff       	call   c001ce2e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	a8 80                	test   al,0x80
c001d6d2:	75 21                	jne    c001d6f5 <PCI::detect()+0x3d>
c001d6d4:	51                   	push   ecx
c001d6d5:	51                   	push   ecx
c001d6d6:	6a 00                	push   0x0
c001d6d8:	56                   	push   esi
c001d6d9:	e8 20 fc ff ff       	call   c001d2fe <PCI::checkBus(unsigned char)>
c001d6de:	83 c4 10             	add    esp,0x10
c001d6e1:	eb 24                	jmp    c001d707 <PCI::detect()+0x4f>
c001d6e3:	52                   	push   edx
c001d6e4:	52                   	push   edx
c001d6e5:	53                   	push   ebx
c001d6e6:	43                   	inc    ebx
c001d6e7:	56                   	push   esi
c001d6e8:	e8 11 fc ff ff       	call   c001d2fe <PCI::checkBus(unsigned char)>
c001d6ed:	83 c4 10             	add    esp,0x10
c001d6f0:	83 fb 08             	cmp    ebx,0x8
c001d6f3:	74 12                	je     c001d707 <PCI::detect()+0x4f>
c001d6f5:	53                   	push   ebx
c001d6f6:	6a 00                	push   0x0
c001d6f8:	6a 00                	push   0x0
c001d6fa:	56                   	push   esi
c001d6fb:	e8 0a f7 ff ff       	call   c001ce0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d700:	83 c4 10             	add    esp,0x10
c001d703:	66 40                	inc    ax
c001d705:	74 dc                	je     c001d6e3 <PCI::detect()+0x2b>
c001d707:	58                   	pop    eax
c001d708:	5b                   	pop    ebx
c001d709:	5e                   	pop    esi
c001d70a:	c3                   	ret    
c001d70b:	90                   	nop

c001d70c <IDE::close(int, int, void*)>:
c001d70c:	83 c8 ff             	or     eax,0xffffffff
c001d70f:	c3                   	ret    

c001d710 <IDE::IDE()>:
c001d710:	83 ec 0c             	sub    esp,0xc
c001d713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d717:	83 ec 08             	sub    esp,0x8
c001d71a:	68 4c 50 02 c0       	push   0xc002504c
c001d71f:	50                   	push   eax
c001d720:	e8 cb 0b ff ff       	call   c000e2f0 <HardDiskController::HardDiskController(char const*)>
c001d725:	83 c4 10             	add    esp,0x10
c001d728:	ba dc 50 02 c0       	mov    edx,0xc00250dc
c001d72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d731:	89 10                	mov    DWORD PTR [eax],edx
c001d733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d737:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d73e:	90                   	nop
c001d73f:	83 c4 0c             	add    esp,0xc
c001d742:	c3                   	ret    
c001d743:	90                   	nop

c001d744 <IDE::prepareInterrupt(unsigned char)>:
c001d744:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d749:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d74d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d755:	c3                   	ret    

c001d756 <selectDrive(unsigned char, unsigned char)>:
c001d756:	c3                   	ret    
c001d757:	90                   	nop

c001d758 <IDE::getBase(unsigned char)>:
c001d758:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d75d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d761:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d769:	c3                   	ret    

c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d76a:	55                   	push   ebp
c001d76b:	57                   	push   edi
c001d76c:	56                   	push   esi
c001d76d:	53                   	push   ebx
c001d76e:	83 ec 1c             	sub    esp,0x1c
c001d771:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d775:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d779:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d77c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d780:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d784:	80 f9 03             	cmp    cl,0x3
c001d787:	77 51                	ja     c001d7da <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d789:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d78d:	0f b6 f2             	movzx  esi,dl
c001d790:	0f b6 db             	movzx  ebx,bl
c001d793:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d796:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d79a:	83 ca 80             	or     edx,0xffffff80
c001d79d:	0f b6 d2             	movzx  edx,dl
c001d7a0:	52                   	push   edx
c001d7a1:	6a 0c                	push   0xc
c001d7a3:	56                   	push   esi
c001d7a4:	57                   	push   edi
c001d7a5:	e8 c0 ff ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7aa:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d7af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7b3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d7b7:	ee                   	out    dx,al
c001d7b8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d7bd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d7c1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d7c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d7c9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d7d1:	83 c4 2c             	add    esp,0x2c
c001d7d4:	5b                   	pop    ebx
c001d7d5:	5e                   	pop    esi
c001d7d6:	5f                   	pop    edi
c001d7d7:	5d                   	pop    ebp
c001d7d8:	eb 90                	jmp    c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7da:	80 fb 07             	cmp    bl,0x7
c001d7dd:	77 12                	ja     c001d7f1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d7df:	0f b6 d2             	movzx  edx,dl
c001d7e2:	0f b6 db             	movzx  ebx,bl
c001d7e5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d7ed:	89 da                	mov    edx,ebx
c001d7ef:	eb 2f                	jmp    c001d820 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d7f1:	80 fb 0d             	cmp    bl,0xd
c001d7f4:	77 13                	ja     c001d809 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d7f6:	0f b6 d2             	movzx  edx,dl
c001d7f9:	0f b6 db             	movzx  ebx,bl
c001d7fc:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d803:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d807:	eb 17                	jmp    c001d820 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d809:	80 fb 15             	cmp    bl,0x15
c001d80c:	77 13                	ja     c001d821 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d80e:	0f b6 d2             	movzx  edx,dl
c001d811:	0f b6 db             	movzx  ebx,bl
c001d814:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d81c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d820:	ee                   	out    dx,al
c001d821:	83 c4 1c             	add    esp,0x1c
c001d824:	5b                   	pop    ebx
c001d825:	5e                   	pop    esi
c001d826:	5f                   	pop    edi
c001d827:	5d                   	pop    ebp
c001d828:	c3                   	ret    
c001d829:	90                   	nop

c001d82a <IDE::read(unsigned char, unsigned char)>:
c001d82a:	55                   	push   ebp
c001d82b:	57                   	push   edi
c001d82c:	56                   	push   esi
c001d82d:	53                   	push   ebx
c001d82e:	83 ec 1c             	sub    esp,0x1c
c001d831:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d835:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d839:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d83c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d840:	3c 03                	cmp    al,0x3
c001d842:	77 43                	ja     c001d887 <IDE::read(unsigned char, unsigned char)+0x5d>
c001d844:	0f b6 f2             	movzx  esi,dl
c001d847:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d84a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d84e:	83 c8 80             	or     eax,0xffffff80
c001d851:	0f b6 c0             	movzx  eax,al
c001d854:	50                   	push   eax
c001d855:	6a 0c                	push   0xc
c001d857:	56                   	push   esi
c001d858:	57                   	push   edi
c001d859:	e8 0c ff ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d85e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d863:	0f b6 c3             	movzx  eax,bl
c001d866:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d86a:	ec                   	in     al,dx
c001d86b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d86f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d874:	52                   	push   edx
c001d875:	6a 0c                	push   0xc
c001d877:	56                   	push   esi
c001d878:	57                   	push   edi
c001d879:	e8 ec fe ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d87e:	83 c4 20             	add    esp,0x20
c001d881:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d885:	eb 49                	jmp    c001d8d0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d887:	80 fb 07             	cmp    bl,0x7
c001d88a:	77 12                	ja     c001d89e <IDE::read(unsigned char, unsigned char)+0x74>
c001d88c:	0f b6 d2             	movzx  edx,dl
c001d88f:	0f b6 c3             	movzx  eax,bl
c001d892:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d89a:	89 c2                	mov    edx,eax
c001d89c:	eb 31                	jmp    c001d8cf <IDE::read(unsigned char, unsigned char)+0xa5>
c001d89e:	80 fb 0d             	cmp    bl,0xd
c001d8a1:	77 13                	ja     c001d8b6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d8a3:	0f b6 d2             	movzx  edx,dl
c001d8a6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d8ad:	0f b6 d3             	movzx  edx,bl
c001d8b0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d8b4:	eb 19                	jmp    c001d8cf <IDE::read(unsigned char, unsigned char)+0xa5>
c001d8b6:	31 c0                	xor    eax,eax
c001d8b8:	80 fb 15             	cmp    bl,0x15
c001d8bb:	77 13                	ja     c001d8d0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d8bd:	0f b6 d2             	movzx  edx,dl
c001d8c0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d8c8:	0f b6 d3             	movzx  edx,bl
c001d8cb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d8cf:	ec                   	in     al,dx
c001d8d0:	83 c4 1c             	add    esp,0x1c
c001d8d3:	5b                   	pop    ebx
c001d8d4:	5e                   	pop    esi
c001d8d5:	5f                   	pop    edi
c001d8d6:	5d                   	pop    ebp
c001d8d7:	c3                   	ret    

c001d8d8 <IDE::waitInterrupt(unsigned char)>:
c001d8d8:	55                   	push   ebp
c001d8d9:	57                   	push   edi
c001d8da:	56                   	push   esi
c001d8db:	53                   	push   ebx
c001d8dc:	31 db                	xor    ebx,ebx
c001d8de:	83 ec 0c             	sub    esp,0xc
c001d8e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d8e5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d8ea:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d8f2:	89 e8                	mov    eax,ebp
c001d8f4:	84 c0                	test   al,al
c001d8f6:	75 30                	jne    c001d928 <IDE::waitInterrupt(unsigned char)+0x50>
c001d8f8:	50                   	push   eax
c001d8f9:	6a 0c                	push   0xc
c001d8fb:	56                   	push   esi
c001d8fc:	57                   	push   edi
c001d8fd:	e8 28 ff ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	a8 01                	test   al,0x1
c001d907:	75 27                	jne    c001d930 <IDE::waitInterrupt(unsigned char)+0x58>
c001d909:	f6 c3 04             	test   bl,0x4
c001d90c:	75 12                	jne    c001d920 <IDE::waitInterrupt(unsigned char)+0x48>
c001d90e:	83 fb 32             	cmp    ebx,0x32
c001d911:	7e 0d                	jle    c001d920 <IDE::waitInterrupt(unsigned char)+0x48>
c001d913:	83 ec 0c             	sub    esp,0xc
c001d916:	6a 64                	push   0x64
c001d918:	e8 6b a9 ff ff       	call   c0018288 <milliTenthSleep(unsigned int)>
c001d91d:	83 c4 10             	add    esp,0x10
c001d920:	83 fb 3c             	cmp    ebx,0x3c
c001d923:	74 0b                	je     c001d930 <IDE::waitInterrupt(unsigned char)+0x58>
c001d925:	43                   	inc    ebx
c001d926:	eb c2                	jmp    c001d8ea <IDE::waitInterrupt(unsigned char)+0x12>
c001d928:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d930:	83 c4 0c             	add    esp,0xc
c001d933:	89 e8                	mov    eax,ebp
c001d935:	5b                   	pop    ebx
c001d936:	5e                   	pop    esi
c001d937:	5f                   	pop    edi
c001d938:	5d                   	pop    ebp
c001d939:	c3                   	ret    

c001d93a <ideChannel0IRQHandler(regs*, void*)>:
c001d93a:	83 ec 10             	sub    esp,0x10
c001d93d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d941:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d948:	6a 07                	push   0x7
c001d94a:	6a 00                	push   0x0
c001d94c:	50                   	push   eax
c001d94d:	e8 d8 fe ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001d952:	83 c4 1c             	add    esp,0x1c
c001d955:	c3                   	ret    

c001d956 <ideChannel1IRQHandler(regs*, void*)>:
c001d956:	83 ec 10             	sub    esp,0x10
c001d959:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d95d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d964:	6a 07                	push   0x7
c001d966:	6a 01                	push   0x1
c001d968:	50                   	push   eax
c001d969:	e8 bc fe ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001d96e:	83 c4 1c             	add    esp,0x1c
c001d971:	c3                   	ret    

c001d972 <IDE::enableIRQs(unsigned char, bool)>:
c001d972:	57                   	push   edi
c001d973:	56                   	push   esi
c001d974:	be 04 00 00 00       	mov    esi,0x4
c001d979:	53                   	push   ebx
c001d97a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d97f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d983:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d988:	0f 94 c0             	sete   al
c001d98b:	d1 e0                	shl    eax,1
c001d98d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d994:	0f b6 c0             	movzx  eax,al
c001d997:	50                   	push   eax
c001d998:	6a 0c                	push   0xc
c001d99a:	57                   	push   edi
c001d99b:	53                   	push   ebx
c001d99c:	e8 c9 fd ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9a1:	83 c4 10             	add    esp,0x10
c001d9a4:	50                   	push   eax
c001d9a5:	6a 0c                	push   0xc
c001d9a7:	57                   	push   edi
c001d9a8:	53                   	push   ebx
c001d9a9:	e8 7c fe ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001d9ae:	83 c4 10             	add    esp,0x10
c001d9b1:	4e                   	dec    esi
c001d9b2:	75 f0                	jne    c001d9a4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d9b4:	5b                   	pop    ebx
c001d9b5:	5e                   	pop    esi
c001d9b6:	5f                   	pop    edi
c001d9b7:	c3                   	ret    

c001d9b8 <IDE::open(int, int, void*)>:
c001d9b8:	55                   	push   ebp
c001d9b9:	57                   	push   edi
c001d9ba:	56                   	push   esi
c001d9bb:	53                   	push   ebx
c001d9bc:	83 ec 1c             	sub    esp,0x1c
c001d9bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d9c3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d9cc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d9d5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d9dc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d9e3:	0f 85 b0 02 00 00    	jne    c001dc99 <IDE::open(int, int, void*)+0x2e1>
c001d9e9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d9ef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d9f3:	83 e0 7f             	and    eax,0x7f
c001d9f6:	3c 05                	cmp    al,0x5
c001d9f8:	74 04                	je     c001d9fe <IDE::open(int, int, void*)+0x46>
c001d9fa:	3c 0f                	cmp    al,0xf
c001d9fc:	75 32                	jne    c001da30 <IDE::open(int, int, void*)+0x78>
c001d9fe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001da04:	83 e0 fc             	and    eax,0xfffffffc
c001da07:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001da0e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001da14:	83 e0 fc             	and    eax,0xfffffffc
c001da17:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001da1e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001da24:	83 e0 fc             	and    eax,0xfffffffc
c001da27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001da2e:	eb 14                	jmp    c001da44 <IDE::open(int, int, void*)+0x8c>
c001da30:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001da3a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001da44:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001da4b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001da52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da56:	89 c6                	mov    esi,eax
c001da58:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da5d:	c1 e6 10             	shl    esi,0x10
c001da60:	89 e8                	mov    eax,ebp
c001da62:	89 fa                	mov    edx,edi
c001da64:	c1 e0 0b             	shl    eax,0xb
c001da67:	09 f0                	or     eax,esi
c001da69:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001da70:	c1 e6 08             	shl    esi,0x8
c001da73:	09 c6                	or     esi,eax
c001da75:	89 f0                	mov    eax,esi
c001da77:	0d 08 00 00 80       	or     eax,0x80000008
c001da7c:	ef                   	out    dx,eax
c001da7d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001da82:	89 ca                	mov    edx,ecx
c001da84:	ed                   	in     eax,dx
c001da85:	c1 e8 10             	shr    eax,0x10
c001da88:	3d ff ff 00 00       	cmp    eax,0xffff
c001da8d:	0f 84 f5 00 00 00    	je     c001db88 <IDE::open(int, int, void*)+0x1d0>
c001da93:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da99:	89 fa                	mov    edx,edi
c001da9b:	89 f0                	mov    eax,esi
c001da9d:	ef                   	out    dx,eax
c001da9e:	b0 fe                	mov    al,0xfe
c001daa0:	89 ca                	mov    edx,ecx
c001daa2:	ee                   	out    dx,al
c001daa3:	89 f0                	mov    eax,esi
c001daa5:	89 fa                	mov    edx,edi
c001daa7:	ef                   	out    dx,eax
c001daa8:	89 ca                	mov    edx,ecx
c001daaa:	ed                   	in     eax,dx
c001daab:	3c fe                	cmp    al,0xfe
c001daad:	0f 85 a9 00 00 00    	jne    c001db5c <IDE::open(int, int, void*)+0x1a4>
c001dab3:	8b 15 a8 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264a8
c001dab9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001dac0:	74 33                	je     c001daf5 <IDE::open(int, int, void*)+0x13d>
c001dac2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001dac8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001dacc:	40                   	inc    eax
c001dacd:	83 ec 0c             	sub    esp,0xc
c001dad0:	0f b6 c0             	movzx  eax,al
c001dad3:	50                   	push   eax
c001dad4:	55                   	push   ebp
c001dad5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dad9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001dadf:	51                   	push   ecx
c001dae0:	e8 0f 44 ff ff       	call   c0011ef4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001dae5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001daea:	83 c4 1c             	add    esp,0x1c
c001daed:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001daf3:	eb 0a                	jmp    c001daff <IDE::open(int, int, void*)+0x147>
c001daf5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001daff:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001db06:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001db0d:	c1 e1 10             	shl    ecx,0x10
c001db10:	c1 e0 08             	shl    eax,0x8
c001db13:	bf f8 0c 00 00       	mov    edi,0xcf8
c001db18:	09 c1                	or     ecx,eax
c001db1a:	89 fa                	mov    edx,edi
c001db1c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001db23:	c1 e0 0b             	shl    eax,0xb
c001db26:	09 c1                	or     ecx,eax
c001db28:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001db2e:	89 c8                	mov    eax,ecx
c001db30:	ef                   	out    dx,eax
c001db31:	be fc 0c 00 00       	mov    esi,0xcfc
c001db36:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001db3c:	89 f2                	mov    edx,esi
c001db3e:	ee                   	out    dx,al
c001db3f:	89 c8                	mov    eax,ecx
c001db41:	89 fa                	mov    edx,edi
c001db43:	ef                   	out    dx,eax
c001db44:	89 f2                	mov    edx,esi
c001db46:	ed                   	in     eax,dx
c001db47:	0f b6 c0             	movzx  eax,al
c001db4a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001db50:	74 46                	je     c001db98 <IDE::open(int, int, void*)+0x1e0>
c001db52:	83 ec 0c             	sub    esp,0xc
c001db55:	68 64 50 02 c0       	push   0xc0025064
c001db5a:	eb 34                	jmp    c001db90 <IDE::open(int, int, void*)+0x1d8>
c001db5c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001db65:	75 17                	jne    c001db7e <IDE::open(int, int, void*)+0x1c6>
c001db67:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001db6c:	74 07                	je     c001db75 <IDE::open(int, int, void*)+0x1bd>
c001db6e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001db73:	75 09                	jne    c001db7e <IDE::open(int, int, void*)+0x1c6>
c001db75:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001db7c:	eb 1a                	jmp    c001db98 <IDE::open(int, int, void*)+0x1e0>
c001db7e:	83 ec 0c             	sub    esp,0xc
c001db81:	68 6c 50 02 c0       	push   0xc002506c
c001db86:	eb 08                	jmp    c001db90 <IDE::open(int, int, void*)+0x1d8>
c001db88:	83 ec 0c             	sub    esp,0xc
c001db8b:	68 9d 50 02 c0       	push   0xc002509d
c001db90:	e8 28 68 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001db95:	83 c4 10             	add    esp,0x10
c001db98:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db9f:	79 1a                	jns    c001dbbb <IDE::open(int, int, void*)+0x203>
c001dba1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001dba7:	83 e0 fc             	and    eax,0xfffffffc
c001dbaa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001dbb1:	83 c0 08             	add    eax,0x8
c001dbb4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001dbbb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001dbc1:	89 c2                	mov    edx,eax
c001dbc3:	83 e2 0f             	and    edx,0xf
c001dbc6:	66 83 fa 08          	cmp    dx,0x8
c001dbca:	75 0a                	jne    c001dbd6 <IDE::open(int, int, void*)+0x21e>
c001dbcc:	83 e8 02             	sub    eax,0x2
c001dbcf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dbd6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dbdc:	89 c2                	mov    edx,eax
c001dbde:	83 e2 0f             	and    edx,0xf
c001dbe1:	66 83 fa 08          	cmp    dx,0x8
c001dbe5:	75 0a                	jne    c001dbf1 <IDE::open(int, int, void*)+0x239>
c001dbe7:	83 e8 02             	sub    eax,0x2
c001dbea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dbf1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001dbf8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001dbff:	89 d0                	mov    eax,edx
c001dc01:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc04:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc08:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001dc0c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001dc0f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc14:	0f b6 c9             	movzx  ecx,cl
c001dc17:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001dc1e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dc21:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dc25:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001dc29:	8d 50 02             	lea    edx,[eax+0x2]
c001dc2c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dc31:	0f b6 d2             	movzx  edx,dl
c001dc34:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dc3a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc3d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc41:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dc45:	8d 48 03             	lea    ecx,[eax+0x3]
c001dc48:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc4d:	0f b6 c9             	movzx  ecx,cl
c001dc50:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dc56:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dc59:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dc5d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dc61:	8d 50 04             	lea    edx,[eax+0x4]
c001dc64:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dc6a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dc6f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dc76:	66 85 f6             	test   si,si
c001dc79:	74 5b                	je     c001dcd6 <IDE::open(int, int, void*)+0x31e>
c001dc7b:	0f b6 d2             	movzx  edx,dl
c001dc7e:	83 c0 05             	add    eax,0x5
c001dc81:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc84:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc88:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dc8c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dc92:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc97:	eb 3d                	jmp    c001dcd6 <IDE::open(int, int, void*)+0x31e>
c001dc99:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc9f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dca6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dcad:	66 05 06 02          	add    ax,0x206
c001dcb1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dcb8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dcbf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dcc6:	66 05 06 02          	add    ax,0x206
c001dcca:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dcd1:	e9 e5 fe ff ff       	jmp    c001dbbb <IDE::open(int, int, void*)+0x203>
c001dcd6:	50                   	push   eax
c001dcd7:	50                   	push   eax
c001dcd8:	6a 00                	push   0x0
c001dcda:	53                   	push   ebx
c001dcdb:	e8 64 fa ff ff       	call   c001d744 <IDE::prepareInterrupt(unsigned char)>
c001dce0:	5a                   	pop    edx
c001dce1:	59                   	pop    ecx
c001dce2:	6a 01                	push   0x1
c001dce4:	53                   	push   ebx
c001dce5:	e8 5a fa ff ff       	call   c001d744 <IDE::prepareInterrupt(unsigned char)>
c001dcea:	83 c4 0c             	add    esp,0xc
c001dced:	6a 00                	push   0x0
c001dcef:	6a 00                	push   0x0
c001dcf1:	53                   	push   ebx
c001dcf2:	e8 7b fc ff ff       	call   c001d972 <IDE::enableIRQs(unsigned char, bool)>
c001dcf7:	83 c4 0c             	add    esp,0xc
c001dcfa:	6a 00                	push   0x0
c001dcfc:	6a 01                	push   0x1
c001dcfe:	53                   	push   ebx
c001dcff:	e8 6e fc ff ff       	call   c001d972 <IDE::enableIRQs(unsigned char, bool)>
c001dd04:	83 c4 10             	add    esp,0x10
c001dd07:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dd0e:	74 34                	je     c001dd44 <IDE::open(int, int, void*)+0x38c>
c001dd10:	83 ec 0c             	sub    esp,0xc
c001dd13:	53                   	push   ebx
c001dd14:	6a 01                	push   0x1
c001dd16:	68 3a d9 01 c0       	push   0xc001d93a
c001dd1b:	6a 0e                	push   0xe
c001dd1d:	53                   	push   ebx
c001dd1e:	e8 97 01 ff ff       	call   c000deba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd23:	83 c4 14             	add    esp,0x14
c001dd26:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dd2c:	53                   	push   ebx
c001dd2d:	6a 01                	push   0x1
c001dd2f:	68 56 d9 01 c0       	push   0xc001d956
c001dd34:	6a 0f                	push   0xf
c001dd36:	53                   	push   ebx
c001dd37:	e8 7e 01 ff ff       	call   c000deba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd3c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dd42:	eb 38                	jmp    c001dd7c <IDE::open(int, int, void*)+0x3c4>
c001dd44:	83 ec 0c             	sub    esp,0xc
c001dd47:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dd51:	53                   	push   ebx
c001dd52:	6a 00                	push   0x0
c001dd54:	68 3a d9 01 c0       	push   0xc001d93a
c001dd59:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dd5f:	53                   	push   ebx
c001dd60:	e8 55 01 ff ff       	call   c000deba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd65:	83 c4 14             	add    esp,0x14
c001dd68:	53                   	push   ebx
c001dd69:	6a 00                	push   0x0
c001dd6b:	68 56 d9 01 c0       	push   0xc001d956
c001dd70:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dd76:	53                   	push   ebx
c001dd77:	e8 3e 01 ff ff       	call   c000deba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd7e:	83 c4 20             	add    esp,0x20
c001dd81:	83 ec 0c             	sub    esp,0xc
c001dd84:	53                   	push   ebx
c001dd85:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dd88:	83 c4 0c             	add    esp,0xc
c001dd8b:	6a 07                	push   0x7
c001dd8d:	6a 00                	push   0x0
c001dd8f:	53                   	push   ebx
c001dd90:	e8 95 fa ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001dd95:	83 c4 0c             	add    esp,0xc
c001dd98:	6a 07                	push   0x7
c001dd9a:	6a 01                	push   0x1
c001dd9c:	53                   	push   ebx
c001dd9d:	e8 88 fa ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001dda2:	83 c4 0c             	add    esp,0xc
c001dda5:	6a 01                	push   0x1
c001dda7:	6a 00                	push   0x0
c001dda9:	53                   	push   ebx
c001ddaa:	e8 c3 fb ff ff       	call   c001d972 <IDE::enableIRQs(unsigned char, bool)>
c001ddaf:	83 c4 0c             	add    esp,0xc
c001ddb2:	6a 01                	push   0x1
c001ddb4:	6a 01                	push   0x1
c001ddb6:	53                   	push   ebx
c001ddb7:	e8 b6 fb ff ff       	call   c001d972 <IDE::enableIRQs(unsigned char, bool)>
c001ddbc:	83 c4 2c             	add    esp,0x2c
c001ddbf:	31 c0                	xor    eax,eax
c001ddc1:	5b                   	pop    ebx
c001ddc2:	5e                   	pop    esi
c001ddc3:	5f                   	pop    edi
c001ddc4:	5d                   	pop    ebp
c001ddc5:	c3                   	ret    

c001ddc6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ddc6:	55                   	push   ebp
c001ddc7:	57                   	push   edi
c001ddc8:	56                   	push   esi
c001ddc9:	53                   	push   ebx
c001ddca:	83 ec 1c             	sub    esp,0x1c
c001ddcd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ddd1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ddd5:	8d 50 f8             	lea    edx,[eax-0x8]
c001ddd8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dddc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dde0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dde4:	80 fa 03             	cmp    dl,0x3
c001dde7:	77 5d                	ja     c001de46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dde9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dded:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ddf1:	0f b6 db             	movzx  ebx,bl
c001ddf4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ddf7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ddfb:	83 ca 80             	or     edx,0xffffff80
c001ddfe:	0f b6 d2             	movzx  edx,dl
c001de01:	52                   	push   edx
c001de02:	6a 0c                	push   0xc
c001de04:	53                   	push   ebx
c001de05:	56                   	push   esi
c001de06:	e8 5f f9 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de0b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001de10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de18:	0f b6 c0             	movzx  eax,al
c001de1b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001de1f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001de21:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001de26:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001de2a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001de2e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de32:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001de3a:	83 c4 2c             	add    esp,0x2c
c001de3d:	5b                   	pop    ebx
c001de3e:	5e                   	pop    esi
c001de3f:	5f                   	pop    edi
c001de40:	5d                   	pop    ebp
c001de41:	e9 24 f9 ff ff       	jmp    c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de46:	3c 07                	cmp    al,0x7
c001de48:	77 10                	ja     c001de5a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001de4a:	0f b6 db             	movzx  ebx,bl
c001de4d:	0f b6 d0             	movzx  edx,al
c001de50:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001de58:	eb 2d                	jmp    c001de87 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de5a:	3c 0d                	cmp    al,0xd
c001de5c:	77 13                	ja     c001de71 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001de5e:	0f b6 db             	movzx  ebx,bl
c001de61:	0f b6 c0             	movzx  eax,al
c001de64:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001de6b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001de6f:	eb 16                	jmp    c001de87 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de71:	3c 15                	cmp    al,0x15
c001de73:	77 14                	ja     c001de89 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001de75:	0f b6 db             	movzx  ebx,bl
c001de78:	0f b6 c0             	movzx  eax,al
c001de7b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001de83:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001de87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001de89:	83 c4 1c             	add    esp,0x1c
c001de8c:	5b                   	pop    ebx
c001de8d:	5e                   	pop    esi
c001de8e:	5f                   	pop    edi
c001de8f:	5d                   	pop    ebp
c001de90:	c3                   	ret    
c001de91:	90                   	nop

c001de92 <IDE::detect()>:
c001de92:	55                   	push   ebp
c001de93:	57                   	push   edi
c001de94:	56                   	push   esi
c001de95:	53                   	push   ebx
c001de96:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de9c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001dea3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001deaa:	0f 85 97 02 00 00    	jne    c001e147 <IDE::detect()+0x2b5>
c001deb0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001deb7:	31 f6                	xor    esi,esi
c001deb9:	31 ed                	xor    ebp,ebp
c001debb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dec3:	89 e8                	mov    eax,ebp
c001dec5:	c1 e0 06             	shl    eax,0x6
c001dec8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ded0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ded4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ded8:	c1 e0 04             	shl    eax,0x4
c001dedb:	83 c8 a0             	or     eax,0xffffffa0
c001dede:	0f b6 c0             	movzx  eax,al
c001dee1:	50                   	push   eax
c001dee2:	6a 06                	push   0x6
c001dee4:	56                   	push   esi
c001dee5:	53                   	push   ebx
c001dee6:	e8 7f f8 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deeb:	83 c4 0c             	add    esp,0xc
c001deee:	6a 0c                	push   0xc
c001def0:	56                   	push   esi
c001def1:	53                   	push   ebx
c001def2:	e8 33 f9 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001def7:	83 c4 0c             	add    esp,0xc
c001defa:	6a 0c                	push   0xc
c001defc:	56                   	push   esi
c001defd:	53                   	push   ebx
c001defe:	e8 27 f9 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df03:	83 c4 0c             	add    esp,0xc
c001df06:	6a 0c                	push   0xc
c001df08:	56                   	push   esi
c001df09:	53                   	push   ebx
c001df0a:	e8 1b f9 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df0f:	83 c4 0c             	add    esp,0xc
c001df12:	6a 0c                	push   0xc
c001df14:	56                   	push   esi
c001df15:	53                   	push   ebx
c001df16:	e8 0f f9 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df1b:	68 ec 00 00 00       	push   0xec
c001df20:	6a 07                	push   0x7
c001df22:	56                   	push   esi
c001df23:	53                   	push   ebx
c001df24:	e8 41 f8 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df29:	83 c4 1c             	add    esp,0x1c
c001df2c:	6a 0c                	push   0xc
c001df2e:	56                   	push   esi
c001df2f:	53                   	push   ebx
c001df30:	e8 f5 f8 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df35:	83 c4 0c             	add    esp,0xc
c001df38:	6a 0c                	push   0xc
c001df3a:	56                   	push   esi
c001df3b:	53                   	push   ebx
c001df3c:	e8 e9 f8 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df41:	83 c4 0c             	add    esp,0xc
c001df44:	6a 0c                	push   0xc
c001df46:	56                   	push   esi
c001df47:	53                   	push   ebx
c001df48:	e8 dd f8 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df4d:	83 c4 0c             	add    esp,0xc
c001df50:	6a 0c                	push   0xc
c001df52:	56                   	push   esi
c001df53:	53                   	push   ebx
c001df54:	e8 d1 f8 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df59:	83 c4 0c             	add    esp,0xc
c001df5c:	6a 0c                	push   0xc
c001df5e:	56                   	push   esi
c001df5f:	53                   	push   ebx
c001df60:	e8 c5 f8 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df65:	83 c4 10             	add    esp,0x10
c001df68:	84 c0                	test   al,al
c001df6a:	0f 84 5f 01 00 00    	je     c001e0cf <IDE::detect()+0x23d>
c001df70:	31 ff                	xor    edi,edi
c001df72:	50                   	push   eax
c001df73:	6a 0c                	push   0xc
c001df75:	56                   	push   esi
c001df76:	53                   	push   ebx
c001df77:	e8 ae f8 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001df7c:	83 c4 10             	add    esp,0x10
c001df7f:	a8 01                	test   al,0x1
c001df81:	0f 85 69 01 00 00    	jne    c001e0f0 <IDE::detect()+0x25e>
c001df87:	84 c0                	test   al,al
c001df89:	78 04                	js     c001df8f <IDE::detect()+0xfd>
c001df8b:	a8 08                	test   al,0x8
c001df8d:	75 23                	jne    c001dfb2 <IDE::detect()+0x120>
c001df8f:	47                   	inc    edi
c001df90:	81 ff 17 01 00 00    	cmp    edi,0x117
c001df96:	7e da                	jle    c001df72 <IDE::detect()+0xe0>
c001df98:	83 ec 0c             	sub    esp,0xc
c001df9b:	6a 32                	push   0x32
c001df9d:	e8 e6 a2 ff ff       	call   c0018288 <milliTenthSleep(unsigned int)>
c001dfa2:	83 c4 10             	add    esp,0x10
c001dfa5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001dfab:	75 c5                	jne    c001df72 <IDE::detect()+0xe0>
c001dfad:	e9 3e 01 00 00       	jmp    c001e0f0 <IDE::detect()+0x25e>
c001dfb2:	31 c9                	xor    ecx,ecx
c001dfb4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001dfb8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001dfbc:	83 ec 0c             	sub    esp,0xc
c001dfbf:	68 80 00 00 00       	push   0x80
c001dfc4:	57                   	push   edi
c001dfc5:	6a 00                	push   0x0
c001dfc7:	56                   	push   esi
c001dfc8:	53                   	push   ebx
c001dfc9:	e8 f8 fd ff ff       	call   c001ddc6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001dfce:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001dfd3:	89 e8                	mov    eax,ebp
c001dfd5:	89 d1                	mov    ecx,edx
c001dfd7:	c1 e0 06             	shl    eax,0x6
c001dfda:	01 d8                	add    eax,ebx
c001dfdc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001dfe3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001dfea:	89 f2                	mov    edx,esi
c001dfec:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001dff2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001dff6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001dffc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e000:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001e007:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001e00f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001e016:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001e01e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001e024:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001e02b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001e031:	8d 54 24 58          	lea    edx,[esp+0x58]
c001e035:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e039:	83 c4 20             	add    esp,0x20
c001e03c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e03f:	83 c0 02             	add    eax,0x2
c001e042:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e048:	83 c7 02             	add    edi,0x2
c001e04b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e04e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e054:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e058:	75 e2                	jne    c001e03c <IDE::detect()+0x1aa>
c001e05a:	89 e8                	mov    eax,ebp
c001e05c:	c1 e0 06             	shl    eax,0x6
c001e05f:	01 d8                	add    eax,ebx
c001e061:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e067:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e06e:	66 c1 ea 09          	shr    dx,0x9
c001e072:	83 e2 01             	and    edx,0x1
c001e075:	84 c9                	test   cl,cl
c001e077:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e07d:	75 22                	jne    c001e0a1 <IDE::detect()+0x20f>
c001e07f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e086:	74 46                	je     c001e0ce <IDE::detect()+0x23c>
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	68 7c 01 00 00       	push   0x17c
c001e090:	e8 2e b9 fe ff       	call   c00099c3 <malloc>
c001e095:	89 c7                	mov    edi,eax
c001e097:	89 04 24             	mov    DWORD PTR [esp],eax
c001e09a:	e8 13 05 00 00       	call   c001e5b2 <ATA::ATA()>
c001e09f:	eb 17                	jmp    c001e0b8 <IDE::detect()+0x226>
c001e0a1:	83 ec 0c             	sub    esp,0xc
c001e0a4:	68 80 01 00 00       	push   0x180
c001e0a9:	e8 15 b9 fe ff       	call   c00099c3 <malloc>
c001e0ae:	89 c7                	mov    edi,eax
c001e0b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001e0b3:	e8 82 0b 00 00       	call   c001ec3a <ATAPI::ATAPI()>
c001e0b8:	5a                   	pop    edx
c001e0b9:	59                   	pop    ecx
c001e0ba:	57                   	push   edi
c001e0bb:	53                   	push   ebx
c001e0bc:	e8 81 fe fe ff       	call   c000df42 <Device::addChild(Device*)>
c001e0c1:	8b 07                	mov    eax,DWORD PTR [edi]
c001e0c3:	53                   	push   ebx
c001e0c4:	55                   	push   ebp
c001e0c5:	6a 00                	push   0x0
c001e0c7:	57                   	push   edi
c001e0c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e0cb:	83 c4 20             	add    esp,0x20
c001e0ce:	45                   	inc    ebp
c001e0cf:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e0d4:	74 0d                	je     c001e0e3 <IDE::detect()+0x251>
c001e0d6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e0de:	e9 e0 fd ff ff       	jmp    c001dec3 <IDE::detect()+0x31>
c001e0e3:	4e                   	dec    esi
c001e0e4:	74 61                	je     c001e147 <IDE::detect()+0x2b5>
c001e0e6:	be 01 00 00 00       	mov    esi,0x1
c001e0eb:	e9 cb fd ff ff       	jmp    c001debb <IDE::detect()+0x29>
c001e0f0:	50                   	push   eax
c001e0f1:	6a 04                	push   0x4
c001e0f3:	56                   	push   esi
c001e0f4:	53                   	push   ebx
c001e0f5:	e8 30 f7 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001e0fa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e0fe:	83 c4 0c             	add    esp,0xc
c001e101:	6a 05                	push   0x5
c001e103:	56                   	push   esi
c001e104:	53                   	push   ebx
c001e105:	e8 20 f7 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001e10a:	83 c4 10             	add    esp,0x10
c001e10d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e111:	80 fa 14             	cmp    dl,0x14
c001e114:	75 04                	jne    c001e11a <IDE::detect()+0x288>
c001e116:	3c eb                	cmp    al,0xeb
c001e118:	eb 07                	jmp    c001e121 <IDE::detect()+0x28f>
c001e11a:	3c 96                	cmp    al,0x96
c001e11c:	75 b1                	jne    c001e0cf <IDE::detect()+0x23d>
c001e11e:	80 fa 69             	cmp    dl,0x69
c001e121:	75 ac                	jne    c001e0cf <IDE::detect()+0x23d>
c001e123:	68 a1 00 00 00       	push   0xa1
c001e128:	6a 07                	push   0x7
c001e12a:	56                   	push   esi
c001e12b:	53                   	push   ebx
c001e12c:	e8 39 f6 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e131:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e138:	e8 4b a1 ff ff       	call   c0018288 <milliTenthSleep(unsigned int)>
c001e13d:	83 c4 10             	add    esp,0x10
c001e140:	b1 01                	mov    cl,0x1
c001e142:	e9 6d fe ff ff       	jmp    c001dfb4 <IDE::detect()+0x122>
c001e147:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e14d:	5b                   	pop    ebx
c001e14e:	5e                   	pop    esi
c001e14f:	5f                   	pop    edi
c001e150:	5d                   	pop    ebp
c001e151:	c3                   	ret    

c001e152 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e152:	55                   	push   ebp
c001e153:	57                   	push   edi
c001e154:	56                   	push   esi
c001e155:	53                   	push   ebx
c001e156:	83 ec 1c             	sub    esp,0x1c
c001e159:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e15d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e161:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e165:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e169:	88 c3                	mov    bl,al
c001e16b:	84 c0                	test   al,al
c001e16d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e171:	0f 84 81 00 00 00    	je     c001e1f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e177:	83 ec 0c             	sub    esp,0xc
c001e17a:	68 c7 50 02 c0       	push   0xc00250c7
c001e17f:	e8 77 e9 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001e184:	83 c4 10             	add    esp,0x10
c001e187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e18b:	3c 01                	cmp    al,0x1
c001e18d:	74 63                	je     c001e1f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e18f:	3c 02                	cmp    al,0x2
c001e191:	75 53                	jne    c001e1e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e193:	d1 e6                	shl    esi,1
c001e195:	09 ee                	or     esi,ebp
c001e197:	50                   	push   eax
c001e198:	89 f0                	mov    eax,esi
c001e19a:	6a 01                	push   0x1
c001e19c:	0f b6 f0             	movzx  esi,al
c001e19f:	c1 e6 06             	shl    esi,0x6
c001e1a2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e1aa:	50                   	push   eax
c001e1ab:	57                   	push   edi
c001e1ac:	e8 79 f6 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001e1b1:	83 c4 10             	add    esp,0x10
c001e1b4:	a8 01                	test   al,0x1
c001e1b6:	74 02                	je     c001e1ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e1b8:	b3 07                	mov    bl,0x7
c001e1ba:	a8 02                	test   al,0x2
c001e1bc:	74 02                	je     c001e1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e1be:	b3 03                	mov    bl,0x3
c001e1c0:	a8 04                	test   al,0x4
c001e1c2:	74 02                	je     c001e1c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e1c4:	b3 14                	mov    bl,0x14
c001e1c6:	a8 08                	test   al,0x8
c001e1c8:	74 02                	je     c001e1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e1ca:	b3 03                	mov    bl,0x3
c001e1cc:	a8 10                	test   al,0x10
c001e1ce:	74 02                	je     c001e1d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e1d0:	b3 15                	mov    bl,0x15
c001e1d2:	a8 20                	test   al,0x20
c001e1d4:	74 02                	je     c001e1d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e1d6:	b3 03                	mov    bl,0x3
c001e1d8:	a8 40                	test   al,0x40
c001e1da:	74 02                	je     c001e1de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e1dc:	b3 16                	mov    bl,0x16
c001e1de:	84 c0                	test   al,al
c001e1e0:	79 16                	jns    c001e1f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1e2:	b3 0d                	mov    bl,0xd
c001e1e4:	eb 12                	jmp    c001e1f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1e6:	3c 03                	cmp    al,0x3
c001e1e8:	74 0c                	je     c001e1f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e1ea:	3c 04                	cmp    al,0x4
c001e1ec:	75 0a                	jne    c001e1f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1ee:	b3 08                	mov    bl,0x8
c001e1f0:	eb 06                	jmp    c001e1f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1f2:	b3 13                	mov    bl,0x13
c001e1f4:	eb 02                	jmp    c001e1f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1f6:	b3 17                	mov    bl,0x17
c001e1f8:	83 c4 1c             	add    esp,0x1c
c001e1fb:	88 d8                	mov    al,bl
c001e1fd:	5b                   	pop    ebx
c001e1fe:	5e                   	pop    esi
c001e1ff:	5f                   	pop    edi
c001e200:	5d                   	pop    ebp
c001e201:	c3                   	ret    

c001e202 <IDE::polling(unsigned char, unsigned int)>:
c001e202:	57                   	push   edi
c001e203:	56                   	push   esi
c001e204:	53                   	push   ebx
c001e205:	bb 04 00 00 00       	mov    ebx,0x4
c001e20a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e20e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e213:	52                   	push   edx
c001e214:	6a 0c                	push   0xc
c001e216:	56                   	push   esi
c001e217:	57                   	push   edi
c001e218:	e8 0d f6 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001e21d:	83 c4 10             	add    esp,0x10
c001e220:	4b                   	dec    ebx
c001e221:	75 f0                	jne    c001e213 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e223:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e228:	50                   	push   eax
c001e229:	6a 0c                	push   0xc
c001e22b:	56                   	push   esi
c001e22c:	57                   	push   edi
c001e22d:	e8 f8 f5 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001e232:	83 c4 10             	add    esp,0x10
c001e235:	a8 01                	test   al,0x1
c001e237:	75 17                	jne    c001e250 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e239:	a8 20                	test   al,0x20
c001e23b:	75 0f                	jne    c001e24c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e23d:	4b                   	dec    ebx
c001e23e:	74 10                	je     c001e250 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e240:	84 c0                	test   al,al
c001e242:	78 e4                	js     c001e228 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e244:	a8 08                	test   al,0x8
c001e246:	74 e0                	je     c001e228 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e248:	31 c0                	xor    eax,eax
c001e24a:	eb 06                	jmp    c001e252 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e24c:	b0 01                	mov    al,0x1
c001e24e:	eb 02                	jmp    c001e252 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e250:	b0 02                	mov    al,0x2
c001e252:	5b                   	pop    ebx
c001e253:	5e                   	pop    esi
c001e254:	5f                   	pop    edi
c001e255:	c3                   	ret    

c001e256 <SATABus::close(int, int, void*)>:
c001e256:	31 c0                	xor    eax,eax
c001e258:	c3                   	ret    
c001e259:	90                   	nop

c001e25a <SATABus::detect()>:
c001e25a:	c3                   	ret    
c001e25b:	90                   	nop

c001e25c <SATABus::SATABus()>:
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e263:	83 ec 08             	sub    esp,0x8
c001e266:	68 00 51 02 c0       	push   0xc0025100
c001e26b:	50                   	push   eax
c001e26c:	e8 7f 00 ff ff       	call   c000e2f0 <HardDiskController::HardDiskController(char const*)>
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	ba 54 51 02 c0       	mov    edx,0xc0025154
c001e279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27d:	89 10                	mov    DWORD PTR [eax],edx
c001e27f:	83 ec 0c             	sub    esp,0xc
c001e282:	6a 50                	push   0x50
c001e284:	e8 5b bc fe ff       	call   c0009ee4 <Phys::allocateContiguousPages(int)>
c001e289:	83 c4 10             	add    esp,0x10
c001e28c:	89 c2                	mov    edx,eax
c001e28e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e292:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e298:	83 ec 0c             	sub    esp,0xc
c001e29b:	6a 50                	push   0x50
c001e29d:	e8 87 d4 fe ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c001e2a2:	83 c4 10             	add    esp,0x10
c001e2a5:	89 c2                	mov    edx,eax
c001e2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e2b1:	a1 d0 65 02 c0       	mov    eax,ds:0xc00265d0
c001e2b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2ba:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e2c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2c4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e2ca:	83 ec 0c             	sub    esp,0xc
c001e2cd:	6a 03                	push   0x3
c001e2cf:	6a 50                	push   0x50
c001e2d1:	51                   	push   ecx
c001e2d2:	52                   	push   edx
c001e2d3:	50                   	push   eax
c001e2d4:	e8 ed dd fe ff       	call   c000c0c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e2d9:	83 c4 20             	add    esp,0x20
c001e2dc:	90                   	nop
c001e2dd:	83 c4 0c             	add    esp,0xc
c001e2e0:	c3                   	ret    
c001e2e1:	90                   	nop

c001e2e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e2e2:	83 ec 0c             	sub    esp,0xc
c001e2e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2e9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e2ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e2ef:	09 c2                	or     edx,eax
c001e2f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e2fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2fd:	31 c0                	xor    eax,eax
c001e2ff:	c1 e9 08             	shr    ecx,0x8
c001e302:	83 e1 0f             	and    ecx,0xf
c001e305:	39 c8                	cmp    eax,ecx
c001e307:	74 0a                	je     c001e313 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e309:	f6 c2 01             	test   dl,0x1
c001e30c:	74 18                	je     c001e326 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e30e:	d1 ea                	shr    edx,1
c001e310:	40                   	inc    eax
c001e311:	eb f2                	jmp    c001e305 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e313:	83 ec 0c             	sub    esp,0xc
c001e316:	68 24 51 02 c0       	push   0xc0025124
c001e31b:	e8 9d 60 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001e320:	83 c4 10             	add    esp,0x10
c001e323:	83 c8 ff             	or     eax,0xffffffff
c001e326:	83 c4 0c             	add    esp,0xc
c001e329:	c3                   	ret    

c001e32a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e32a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e32e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e331:	89 c2                	mov    edx,eax
c001e333:	c1 ea 08             	shr    edx,0x8
c001e336:	83 e2 0f             	and    edx,0xf
c001e339:	fe ca                	dec    dl
c001e33b:	75 31                	jne    c001e36e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e33d:	83 e0 0f             	and    eax,0xf
c001e340:	3c 03                	cmp    al,0x3
c001e342:	75 2a                	jne    c001e36e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e344:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e347:	b8 02 00 00 00       	mov    eax,0x2
c001e34c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e352:	74 1c                	je     c001e370 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e354:	b8 04 00 00 00       	mov    eax,0x4
c001e359:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e35f:	74 0f                	je     c001e370 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e361:	31 c0                	xor    eax,eax
c001e363:	83 fa 03             	cmp    edx,0x3
c001e366:	0f 94 c0             	sete   al
c001e369:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e36d:	c3                   	ret    
c001e36e:	31 c0                	xor    eax,eax
c001e370:	c3                   	ret    
c001e371:	90                   	nop

c001e372 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e376:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e379:	0f ba e2 0f          	bt     edx,0xf
c001e37d:	72 f7                	jb     c001e376 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e37f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e382:	83 ca 10             	or     edx,0x10
c001e385:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e388:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e38b:	83 ca 01             	or     edx,0x1
c001e38e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e391:	c3                   	ret    

c001e392 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e392:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e396:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e399:	83 e2 fe             	and    edx,0xfffffffe
c001e39c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e39f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3a2:	83 e2 ef             	and    edx,0xffffffef
c001e3a5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e3a8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3ab:	0f ba e2 0e          	bt     edx,0xe
c001e3af:	72 f7                	jb     c001e3a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e3b1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3b4:	0f ba e2 0f          	bt     edx,0xf
c001e3b8:	72 ee                	jb     c001e3a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e3ba:	c3                   	ret    
c001e3bb:	90                   	nop

c001e3bc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e3bc:	55                   	push   ebp
c001e3bd:	57                   	push   edi
c001e3be:	56                   	push   esi
c001e3bf:	53                   	push   ebx
c001e3c0:	83 ec 1c             	sub    esp,0x1c
c001e3c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e3cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e3cf:	53                   	push   ebx
c001e3d0:	89 fd                	mov    ebp,edi
c001e3d2:	56                   	push   esi
c001e3d3:	c1 e5 0a             	shl    ebp,0xa
c001e3d6:	e8 b7 ff ff ff       	call   c001e392 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e3db:	83 ec 0c             	sub    esp,0xc
c001e3de:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e3e4:	01 e8                	add    eax,ebp
c001e3e6:	89 03                	mov    DWORD PTR [ebx],eax
c001e3e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e3ea:	68 00 04 00 00       	push   0x400
c001e3ef:	6a 00                	push   0x0
c001e3f1:	50                   	push   eax
c001e3f2:	e8 8d 22 fe ff       	call   c0000684 <memset>
c001e3f7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e3fd:	89 fa                	mov    edx,edi
c001e3ff:	01 e8                	add    eax,ebp
c001e401:	c1 e7 0d             	shl    edi,0xd
c001e404:	89 03                	mov    DWORD PTR [ebx],eax
c001e406:	c1 e2 08             	shl    edx,0x8
c001e409:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e410:	81 c2 00 80 00 00    	add    edx,0x8000
c001e416:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e41a:	89 d0                	mov    eax,edx
c001e41c:	83 c4 1c             	add    esp,0x1c
c001e41f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e425:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e428:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e42b:	68 00 01 00 00       	push   0x100
c001e430:	6a 00                	push   0x0
c001e432:	50                   	push   eax
c001e433:	e8 4c 22 fe ff       	call   c0000684 <memset>
c001e438:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e43c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e442:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e448:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e44c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e44f:	83 c4 10             	add    esp,0x10
c001e452:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e459:	31 ff                	xor    edi,edi
c001e45b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e461:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e46b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e471:	83 c5 20             	add    ebp,0x20
c001e474:	01 f8                	add    eax,edi
c001e476:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e479:	52                   	push   edx
c001e47a:	68 00 01 00 00       	push   0x100
c001e47f:	6a 00                	push   0x0
c001e481:	50                   	push   eax
c001e482:	e8 fd 21 fe ff       	call   c0000684 <memset>
c001e487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e48b:	83 c4 10             	add    esp,0x10
c001e48e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e494:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e49b:	01 f8                	add    eax,edi
c001e49d:	81 c7 00 01 00 00    	add    edi,0x100
c001e4a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e4a6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e4ac:	75 b3                	jne    c001e461 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e4ae:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e4b2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e4b6:	83 c4 1c             	add    esp,0x1c
c001e4b9:	5b                   	pop    ebx
c001e4ba:	5e                   	pop    esi
c001e4bb:	5f                   	pop    edi
c001e4bc:	5d                   	pop    ebp
c001e4bd:	e9 b0 fe ff ff       	jmp    c001e372 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e4c2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e4c2:	55                   	push   ebp
c001e4c3:	57                   	push   edi
c001e4c4:	56                   	push   esi
c001e4c5:	53                   	push   ebx
c001e4c6:	31 db                	xor    ebx,ebx
c001e4c8:	83 ec 0c             	sub    esp,0xc
c001e4cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e4cf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e4d3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e4d6:	f7 c7 01 00 00 00    	test   edi,0x1
c001e4dc:	74 7a                	je     c001e558 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e4de:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e4e2:	89 d8                	mov    eax,ebx
c001e4e4:	c1 e0 07             	shl    eax,0x7
c001e4e7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e4ee:	55                   	push   ebp
c001e4ef:	56                   	push   esi
c001e4f0:	e8 35 fe ff ff       	call   c001e32a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e4f5:	5a                   	pop    edx
c001e4f6:	83 f8 01             	cmp    eax,0x1
c001e4f9:	59                   	pop    ecx
c001e4fa:	75 21                	jne    c001e51d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e4fc:	50                   	push   eax
c001e4fd:	53                   	push   ebx
c001e4fe:	55                   	push   ebp
c001e4ff:	56                   	push   esi
c001e500:	e8 b7 fe ff ff       	call   c001e3bc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e505:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e50c:	e8 b2 b4 fe ff       	call   c00099c3 <malloc>
c001e511:	89 c5                	mov    ebp,eax
c001e513:	89 04 24             	mov    DWORD PTR [esp],eax
c001e516:	e8 7f 0d 00 00       	call   c001f29a <SATA::SATA()>
c001e51b:	eb 24                	jmp    c001e541 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e51d:	83 f8 04             	cmp    eax,0x4
c001e520:	75 36                	jne    c001e558 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e522:	51                   	push   ecx
c001e523:	53                   	push   ebx
c001e524:	55                   	push   ebp
c001e525:	56                   	push   esi
c001e526:	e8 91 fe ff ff       	call   c001e3bc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e52b:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e532:	e8 8c b4 fe ff       	call   c00099c3 <malloc>
c001e537:	89 c5                	mov    ebp,eax
c001e539:	89 04 24             	mov    DWORD PTR [esp],eax
c001e53c:	e8 cf 10 00 00       	call   c001f610 <SATAPI::SATAPI()>
c001e541:	58                   	pop    eax
c001e542:	5a                   	pop    edx
c001e543:	55                   	push   ebp
c001e544:	56                   	push   esi
c001e545:	e8 f8 f9 fe ff       	call   c000df42 <Device::addChild(Device*)>
c001e54a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e54d:	56                   	push   esi
c001e54e:	6a 00                	push   0x0
c001e550:	53                   	push   ebx
c001e551:	55                   	push   ebp
c001e552:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e555:	83 c4 20             	add    esp,0x20
c001e558:	d1 ef                	shr    edi,1
c001e55a:	43                   	inc    ebx
c001e55b:	83 fb 20             	cmp    ebx,0x20
c001e55e:	0f 85 72 ff ff ff    	jne    c001e4d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e564:	83 c4 0c             	add    esp,0xc
c001e567:	5b                   	pop    ebx
c001e568:	5e                   	pop    esi
c001e569:	5f                   	pop    edi
c001e56a:	5d                   	pop    ebp
c001e56b:	c3                   	ret    

c001e56c <SATABus::open(int, int, void*)>:
c001e56c:	83 ec 14             	sub    esp,0x14
c001e56f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e573:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e579:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e57f:	52                   	push   edx
c001e580:	50                   	push   eax
c001e581:	e8 3c ff ff ff       	call   c001e4c2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e586:	31 c0                	xor    eax,eax
c001e588:	83 c4 1c             	add    esp,0x1c
c001e58b:	c3                   	ret    

c001e58c <ATA::close(int, int, void*)>:
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e593:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e599:	85 c0                	test   eax,eax
c001e59b:	74 0c                	je     c001e5a9 <ATA::close(int, int, void*)+0x1d>
c001e59d:	83 ec 0c             	sub    esp,0xc
c001e5a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001e5a2:	50                   	push   eax
c001e5a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e5a6:	83 c4 10             	add    esp,0x10
c001e5a9:	31 c0                	xor    eax,eax
c001e5ab:	83 c4 0c             	add    esp,0xc
c001e5ae:	c3                   	ret    
c001e5af:	90                   	nop

c001e5b0 <ATA::powerSaving(PowerSavingLevel)>:
c001e5b0:	c3                   	ret    
c001e5b1:	90                   	nop

c001e5b2 <ATA::ATA()>:
c001e5b2:	83 ec 0c             	sub    esp,0xc
c001e5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5b9:	83 ec 04             	sub    esp,0x4
c001e5bc:	68 00 02 00 00       	push   0x200
c001e5c1:	68 49 52 02 c0       	push   0xc0025249
c001e5c6:	50                   	push   eax
c001e5c7:	e8 ae fd fe ff       	call   c000e37a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e5cc:	83 c4 10             	add    esp,0x10
c001e5cf:	ba cc 51 02 c0       	mov    edx,0xc00251cc
c001e5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d8:	89 10                	mov    DWORD PTR [eax],edx
c001e5da:	90                   	nop
c001e5db:	83 c4 0c             	add    esp,0xc
c001e5de:	c3                   	ret    
c001e5df:	90                   	nop

c001e5e0 <ATA::flush(bool)>:
c001e5e0:	53                   	push   ebx
c001e5e1:	83 ec 08             	sub    esp,0x8
c001e5e4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e5e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5ed:	19 c0                	sbb    eax,eax
c001e5ef:	83 e0 fd             	and    eax,0xfffffffd
c001e5f2:	05 ea 00 00 00       	add    eax,0xea
c001e5f7:	50                   	push   eax
c001e5f8:	6a 07                	push   0x7
c001e5fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e601:	50                   	push   eax
c001e602:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e608:	e8 5d f1 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e60d:	83 c4 0c             	add    esp,0xc
c001e610:	6a 00                	push   0x0
c001e612:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e619:	50                   	push   eax
c001e61a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e620:	e8 dd fb ff ff       	call   c001e202 <IDE::polling(unsigned char, unsigned int)>
c001e625:	83 c4 18             	add    esp,0x18
c001e628:	5b                   	pop    ebx
c001e629:	c3                   	ret    

c001e62a <ATA::readyForCommand()>:
c001e62a:	56                   	push   esi
c001e62b:	53                   	push   ebx
c001e62c:	53                   	push   ebx
c001e62d:	31 db                	xor    ebx,ebx
c001e62f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e633:	51                   	push   ecx
c001e634:	6a 0c                	push   0xc
c001e636:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e63d:	50                   	push   eax
c001e63e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e644:	e8 e1 f1 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001e649:	83 c4 10             	add    esp,0x10
c001e64c:	a8 88                	test   al,0x88
c001e64e:	74 1f                	je     c001e66f <ATA::readyForCommand()+0x45>
c001e650:	43                   	inc    ebx
c001e651:	83 fb 63             	cmp    ebx,0x63
c001e654:	7e dd                	jle    c001e633 <ATA::readyForCommand()+0x9>
c001e656:	83 ec 0c             	sub    esp,0xc
c001e659:	6a 0a                	push   0xa
c001e65b:	e8 28 9c ff ff       	call   c0018288 <milliTenthSleep(unsigned int)>
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e669:	75 c8                	jne    c001e633 <ATA::readyForCommand()+0x9>
c001e66b:	31 c0                	xor    eax,eax
c001e66d:	eb 02                	jmp    c001e671 <ATA::readyForCommand()+0x47>
c001e66f:	b0 01                	mov    al,0x1
c001e671:	5a                   	pop    edx
c001e672:	5b                   	pop    ebx
c001e673:	5e                   	pop    esi
c001e674:	c3                   	ret    
c001e675:	90                   	nop

c001e676 <ATA::access(unsigned long long, int, void*, bool)>:
c001e676:	55                   	push   ebp
c001e677:	57                   	push   edi
c001e678:	56                   	push   esi
c001e679:	53                   	push   ebx
c001e67a:	83 ec 38             	sub    esp,0x38
c001e67d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e681:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e685:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e68d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e691:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e695:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e699:	68 78 51 02 c0       	push   0xc0025178
c001e69e:	e8 58 e4 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001e6a3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e6a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e6ad:	83 c4 10             	add    esp,0x10
c001e6b0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e6b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6ba:	c1 e0 06             	shl    eax,0x6
c001e6bd:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e6c5:	74 5d                	je     c001e724 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e6c7:	89 fa                	mov    edx,edi
c001e6c9:	89 f0                	mov    eax,esi
c001e6cb:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e6cf:	c1 ea 1c             	shr    edx,0x1c
c001e6d2:	89 d1                	mov    ecx,edx
c001e6d4:	09 c1                	or     ecx,eax
c001e6d6:	74 25                	je     c001e6fd <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e6d8:	31 ed                	xor    ebp,ebp
c001e6da:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e6e1:	89 fa                	mov    edx,edi
c001e6e3:	89 f0                	mov    eax,esi
c001e6e5:	0f ad d0             	shrd   eax,edx,cl
c001e6e8:	d3 ea                	shr    edx,cl
c001e6ea:	f6 c1 20             	test   cl,0x20
c001e6ed:	74 02                	je     c001e6f1 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e6ef:	89 d0                	mov    eax,edx
c001e6f1:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e6f5:	45                   	inc    ebp
c001e6f6:	83 fd 06             	cmp    ebp,0x6
c001e6f9:	75 df                	jne    c001e6da <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e6fb:	eb 76                	jmp    c001e773 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e6fd:	89 f0                	mov    eax,esi
c001e6ff:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e704:	89 fa                	mov    edx,edi
c001e706:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e70d:	0f ac d0 10          	shrd   eax,edx,0x10
c001e711:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e716:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e71a:	c1 ee 18             	shr    esi,0x18
c001e71d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e722:	eb 56                	jmp    c001e77a <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e724:	6a 00                	push   0x0
c001e726:	6a 3f                	push   0x3f
c001e728:	57                   	push   edi
c001e729:	56                   	push   esi
c001e72a:	e8 95 29 00 00       	call   c00210c4 <__umoddi3>
c001e72f:	83 c4 10             	add    esp,0x10
c001e732:	40                   	inc    eax
c001e733:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e737:	6a 00                	push   0x0
c001e739:	68 f0 03 00 00       	push   0x3f0
c001e73e:	57                   	push   edi
c001e73f:	56                   	push   esi
c001e740:	e8 7f 28 00 00       	call   c0020fc4 <__udivdi3>
c001e745:	83 c4 10             	add    esp,0x10
c001e748:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e74d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e754:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e759:	6a 00                	push   0x0
c001e75b:	6a 3f                	push   0x3f
c001e75d:	57                   	push   edi
c001e75e:	56                   	push   esi
c001e75f:	e8 60 28 00 00       	call   c0020fc4 <__udivdi3>
c001e764:	83 c4 10             	add    esp,0x10
c001e767:	89 c6                	mov    esi,eax
c001e769:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e76e:	83 e6 0f             	and    esi,0xf
c001e771:	eb 07                	jmp    c001e77a <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e773:	31 f6                	xor    esi,esi
c001e775:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e77a:	bf 01 00 00 00       	mov    edi,0x1
c001e77f:	50                   	push   eax
c001e780:	6a 00                	push   0x0
c001e782:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e789:	50                   	push   eax
c001e78a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e78e:	e8 df f1 ff ff       	call   c001d972 <IDE::enableIRQs(unsigned char, bool)>
c001e793:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e796:	e8 8f fe ff ff       	call   c001e62a <ATA::readyForCommand()>
c001e79b:	83 c4 10             	add    esp,0x10
c001e79e:	84 c0                	test   al,al
c001e7a0:	0f 84 bc 02 00 00    	je     c001ea62 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e7a6:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e7ac:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e7b2:	c1 e0 04             	shl    eax,0x4
c001e7b5:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e7bc:	09 c6                	or     esi,eax
c001e7be:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7c3:	75 05                	jne    c001e7ca <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e7c5:	83 ce a0             	or     esi,0xffffffa0
c001e7c8:	eb 03                	jmp    c001e7cd <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e7ca:	83 ce e0             	or     esi,0xffffffe0
c001e7cd:	89 f0                	mov    eax,esi
c001e7cf:	0f b6 f0             	movzx  esi,al
c001e7d2:	56                   	push   esi
c001e7d3:	6a 06                	push   0x6
c001e7d5:	51                   	push   ecx
c001e7d6:	52                   	push   edx
c001e7d7:	e8 8e ef ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7dc:	83 c4 10             	add    esp,0x10
c001e7df:	6a 00                	push   0x0
c001e7e1:	6a 01                	push   0x1
c001e7e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7ea:	50                   	push   eax
c001e7eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7f1:	e8 74 ef ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7f6:	83 c4 10             	add    esp,0x10
c001e7f9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e7fe:	75 6e                	jne    c001e86e <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e800:	6a 00                	push   0x0
c001e802:	6a 08                	push   0x8
c001e804:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e80b:	50                   	push   eax
c001e80c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e812:	e8 53 ef ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e817:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e81c:	50                   	push   eax
c001e81d:	6a 09                	push   0x9
c001e81f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e826:	50                   	push   eax
c001e827:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e82d:	e8 38 ef ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e832:	83 c4 20             	add    esp,0x20
c001e835:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e83a:	50                   	push   eax
c001e83b:	6a 0a                	push   0xa
c001e83d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e844:	50                   	push   eax
c001e845:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e84b:	e8 1a ef ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e850:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e855:	50                   	push   eax
c001e856:	6a 0b                	push   0xb
c001e858:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e85f:	50                   	push   eax
c001e860:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e866:	e8 ff ee ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e86b:	83 c4 20             	add    esp,0x20
c001e86e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e873:	50                   	push   eax
c001e874:	6a 02                	push   0x2
c001e876:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e87d:	50                   	push   eax
c001e87e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e884:	e8 e1 ee ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e889:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e88e:	50                   	push   eax
c001e88f:	6a 03                	push   0x3
c001e891:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e898:	50                   	push   eax
c001e899:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e89f:	e8 c6 ee ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8a4:	83 c4 20             	add    esp,0x20
c001e8a7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e8ac:	50                   	push   eax
c001e8ad:	6a 04                	push   0x4
c001e8af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8b6:	50                   	push   eax
c001e8b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8bd:	e8 a8 ee ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8c2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e8c7:	50                   	push   eax
c001e8c8:	6a 05                	push   0x5
c001e8ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8d1:	50                   	push   eax
c001e8d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8d8:	e8 8d ee ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8dd:	83 c4 20             	add    esp,0x20
c001e8e0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e8e5:	0f 94 c0             	sete   al
c001e8e8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e8ed:	74 09                	je     c001e8f8 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e8ef:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e8f6:	eb 07                	jmp    c001e8ff <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e8f8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e8ff:	0f b6 c0             	movzx  eax,al
c001e902:	50                   	push   eax
c001e903:	6a 07                	push   0x7
c001e905:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e90c:	50                   	push   eax
c001e90d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e913:	e8 52 ee ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e918:	c7 04 24 85 51 02 c0 	mov    DWORD PTR [esp],0xc0025185
c001e91f:	e8 d7 e1 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001e924:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e928:	83 c4 10             	add    esp,0x10
c001e92b:	85 f6                	test   esi,esi
c001e92d:	0f 84 f7 00 00 00    	je     c001ea2a <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e933:	83 ec 0c             	sub    esp,0xc
c001e936:	68 88 51 02 c0       	push   0xc0025188
c001e93b:	e8 bb e1 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001e940:	83 c4 0c             	add    esp,0xc
c001e943:	6a 01                	push   0x1
c001e945:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e94c:	50                   	push   eax
c001e94d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e953:	e8 aa f8 ff ff       	call   c001e202 <IDE::polling(unsigned char, unsigned int)>
c001e958:	c7 04 24 8b 51 02 c0 	mov    DWORD PTR [esp],0xc002518b
c001e95f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e963:	e8 93 e1 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001e968:	83 c4 10             	add    esp,0x10
c001e96b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e96f:	84 c0                	test   al,al
c001e971:	74 2b                	je     c001e99e <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e973:	0f b6 f8             	movzx  edi,al
c001e976:	57                   	push   edi
c001e977:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e97e:	50                   	push   eax
c001e97f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e986:	50                   	push   eax
c001e987:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e98d:	e8 c0 f7 ff ff       	call   c001e152 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e992:	c7 04 24 8e 51 02 c0 	mov    DWORD PTR [esp],0xc002518e
c001e999:	e9 bc 00 00 00       	jmp    c001ea5a <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e99e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e9a3:	74 50                	je     c001e9f5 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e9a5:	83 ec 0c             	sub    esp,0xc
c001e9a8:	31 ed                	xor    ebp,ebp
c001e9aa:	68 99 51 02 c0       	push   0xc0025199
c001e9af:	e8 47 e1 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001e9b4:	83 c4 10             	add    esp,0x10
c001e9b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e9bb:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e9bf:	50                   	push   eax
c001e9c0:	50                   	push   eax
c001e9c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9c8:	50                   	push   eax
c001e9c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9cf:	e8 84 ed ff ff       	call   c001d758 <IDE::getBase(unsigned char)>
c001e9d4:	89 c2                	mov    edx,eax
c001e9d6:	89 f8                	mov    eax,edi
c001e9d8:	66 ef                	out    dx,ax
c001e9da:	45                   	inc    ebp
c001e9db:	83 c4 10             	add    esp,0x10
c001e9de:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e9e4:	75 d1                	jne    c001e9b7 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e9e6:	83 ec 0c             	sub    esp,0xc
c001e9e9:	68 9c 51 02 c0       	push   0xc002519c
c001e9ee:	e8 08 e1 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001e9f3:	eb 24                	jmp    c001ea19 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e9f5:	51                   	push   ecx
c001e9f6:	51                   	push   ecx
c001e9f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9fe:	50                   	push   eax
c001e9ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea05:	e8 4e ed ff ff       	call   c001d758 <IDE::getBase(unsigned char)>
c001ea0a:	b9 00 01 00 00       	mov    ecx,0x100
c001ea0f:	89 c2                	mov    edx,eax
c001ea11:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ea15:	fc                   	cld    
c001ea16:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ea19:	83 c4 10             	add    esp,0x10
c001ea1c:	4e                   	dec    esi
c001ea1d:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ea25:	e9 01 ff ff ff       	jmp    c001e92b <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ea2a:	31 ff                	xor    edi,edi
c001ea2c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ea31:	74 2f                	je     c001ea62 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ea33:	83 ec 0c             	sub    esp,0xc
c001ea36:	68 9f 51 02 c0       	push   0xc002519f
c001ea3b:	e8 bb e0 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001ea40:	58                   	pop    eax
c001ea41:	31 c0                	xor    eax,eax
c001ea43:	5a                   	pop    edx
c001ea44:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ea49:	0f 94 c0             	sete   al
c001ea4c:	50                   	push   eax
c001ea4d:	53                   	push   ebx
c001ea4e:	e8 8d fb ff ff       	call   c001e5e0 <ATA::flush(bool)>
c001ea53:	c7 04 24 a2 51 02 c0 	mov    DWORD PTR [esp],0xc00251a2
c001ea5a:	e8 9c e0 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001ea5f:	83 c4 10             	add    esp,0x10
c001ea62:	83 c4 2c             	add    esp,0x2c
c001ea65:	89 f8                	mov    eax,edi
c001ea67:	5b                   	pop    ebx
c001ea68:	5e                   	pop    esi
c001ea69:	5f                   	pop    edi
c001ea6a:	5d                   	pop    ebp
c001ea6b:	c3                   	ret    

c001ea6c <ATA::read(unsigned long long, int, void*)>:
c001ea6c:	57                   	push   edi
c001ea6d:	b8 04 00 00 00       	mov    eax,0x4
c001ea72:	56                   	push   esi
c001ea73:	53                   	push   ebx
c001ea74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ea7c:	8d 7a ff             	lea    edi,[edx-0x1]
c001ea7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ea83:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ea87:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ea8d:	77 25                	ja     c001eab4 <ATA::read(unsigned long long, int, void*)+0x48>
c001ea8f:	b8 06 00 00 00       	mov    eax,0x6
c001ea94:	85 f6                	test   esi,esi
c001ea96:	74 1c                	je     c001eab4 <ATA::read(unsigned long long, int, void*)+0x48>
c001ea98:	50                   	push   eax
c001ea99:	50                   	push   eax
c001ea9a:	6a 00                	push   0x0
c001ea9c:	56                   	push   esi
c001ea9d:	52                   	push   edx
c001ea9e:	53                   	push   ebx
c001ea9f:	51                   	push   ecx
c001eaa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001eaa4:	e8 cd fb ff ff       	call   c001e676 <ATA::access(unsigned long long, int, void*, bool)>
c001eaa9:	83 c4 20             	add    esp,0x20
c001eaac:	85 c0                	test   eax,eax
c001eaae:	0f 95 c0             	setne  al
c001eab1:	0f b6 c0             	movzx  eax,al
c001eab4:	5b                   	pop    ebx
c001eab5:	5e                   	pop    esi
c001eab6:	5f                   	pop    edi
c001eab7:	c3                   	ret    

c001eab8 <ATA::write(unsigned long long, int, void*)>:
c001eab8:	55                   	push   ebp
c001eab9:	57                   	push   edi
c001eaba:	56                   	push   esi
c001eabb:	53                   	push   ebx
c001eabc:	83 ec 18             	sub    esp,0x18
c001eabf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eac3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eac7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001eacb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001eacf:	68 a5 51 02 c0       	push   0xc00251a5
c001ead4:	e8 22 e0 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001ead9:	8d 53 ff             	lea    edx,[ebx-0x1]
c001eadc:	83 c4 10             	add    esp,0x10
c001eadf:	b8 04 00 00 00       	mov    eax,0x4
c001eae4:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001eaea:	77 25                	ja     c001eb11 <ATA::write(unsigned long long, int, void*)+0x59>
c001eaec:	b8 06 00 00 00       	mov    eax,0x6
c001eaf1:	85 f6                	test   esi,esi
c001eaf3:	74 1c                	je     c001eb11 <ATA::write(unsigned long long, int, void*)+0x59>
c001eaf5:	50                   	push   eax
c001eaf6:	50                   	push   eax
c001eaf7:	6a 01                	push   0x1
c001eaf9:	56                   	push   esi
c001eafa:	53                   	push   ebx
c001eafb:	55                   	push   ebp
c001eafc:	57                   	push   edi
c001eafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001eb01:	e8 70 fb ff ff       	call   c001e676 <ATA::access(unsigned long long, int, void*, bool)>
c001eb06:	83 c4 20             	add    esp,0x20
c001eb09:	85 c0                	test   eax,eax
c001eb0b:	0f 95 c0             	setne  al
c001eb0e:	0f b6 c0             	movzx  eax,al
c001eb11:	83 c4 0c             	add    esp,0xc
c001eb14:	5b                   	pop    ebx
c001eb15:	5e                   	pop    esi
c001eb16:	5f                   	pop    edi
c001eb17:	5d                   	pop    ebp
c001eb18:	c3                   	ret    
c001eb19:	90                   	nop

c001eb1a <ATA::detectCHS()>:
c001eb1a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb1e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001eb24:	c1 e0 06             	shl    eax,0x6
c001eb27:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001eb2d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eb37:	c7 44 24 04 b1 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc00251b1
c001eb3f:	e9 79 58 ff ff       	jmp    c00143bd <Krnl::panic(char const*)>

c001eb44 <ATA::open(int, int, void*)>:
c001eb44:	53                   	push   ebx
c001eb45:	83 ec 08             	sub    esp,0x8
c001eb48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb54:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001eb5a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001eb60:	c1 e0 06             	shl    eax,0x6
c001eb63:	01 d0                	add    eax,edx
c001eb65:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001eb6c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eb72:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eb79:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eb83:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eb89:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eb90:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eb97:	75 0c                	jne    c001eba5 <ATA::open(int, int, void*)+0x61>
c001eb99:	83 ec 0c             	sub    esp,0xc
c001eb9c:	53                   	push   ebx
c001eb9d:	e8 78 ff ff ff       	call   c001eb1a <ATA::detectCHS()>
c001eba2:	83 c4 10             	add    esp,0x10
c001eba5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ebab:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ebb1:	c1 e0 06             	shl    eax,0x6
c001ebb4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ebbb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ebc5:	d1 e8                	shr    eax,1
c001ebc7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ebcd:	6a 04                	push   0x4
c001ebcf:	6a 0c                	push   0xc
c001ebd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebd8:	50                   	push   eax
c001ebd9:	52                   	push   edx
c001ebda:	e8 8b eb ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebdf:	90                   	nop
c001ebe0:	90                   	nop
c001ebe1:	6a 00                	push   0x0
c001ebe3:	6a 0c                	push   0xc
c001ebe5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebec:	50                   	push   eax
c001ebed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebf3:	e8 72 eb ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebf8:	83 c4 14             	add    esp,0x14
c001ebfb:	53                   	push   ebx
c001ebfc:	e8 e1 f7 fe ff       	call   c000e3e2 <PhysicalDisk::startCache()>
c001ec01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec04:	e8 15 18 ff ff       	call   c001041e <createPartitionsForDisk(PhysicalDisk*)>
c001ec09:	31 c0                	xor    eax,eax
c001ec0b:	83 c4 18             	add    esp,0x18
c001ec0e:	5b                   	pop    ebx
c001ec0f:	c3                   	ret    

c001ec10 <ATAPI::write(unsigned long long, int, void*)>:
c001ec10:	b8 03 00 00 00       	mov    eax,0x3
c001ec15:	c3                   	ret    

c001ec16 <ATAPI::close(int, int, void*)>:
c001ec16:	83 ec 0c             	sub    esp,0xc
c001ec19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec23:	85 c0                	test   eax,eax
c001ec25:	74 0c                	je     c001ec33 <ATAPI::close(int, int, void*)+0x1d>
c001ec27:	83 ec 0c             	sub    esp,0xc
c001ec2a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ec2c:	50                   	push   eax
c001ec2d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ec30:	83 c4 10             	add    esp,0x10
c001ec33:	31 c0                	xor    eax,eax
c001ec35:	83 c4 0c             	add    esp,0xc
c001ec38:	c3                   	ret    
c001ec39:	90                   	nop

c001ec3a <ATAPI::ATAPI()>:
c001ec3a:	83 ec 0c             	sub    esp,0xc
c001ec3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec41:	83 ec 04             	sub    esp,0x4
c001ec44:	68 00 08 00 00       	push   0x800
c001ec49:	68 e9 52 02 c0       	push   0xc00252e9
c001ec4e:	50                   	push   eax
c001ec4f:	e8 26 f7 fe ff       	call   c000e37a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ec54:	83 c4 10             	add    esp,0x10
c001ec57:	ba 04 52 02 c0       	mov    edx,0xc0025204
c001ec5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec60:	89 10                	mov    DWORD PTR [eax],edx
c001ec62:	90                   	nop
c001ec63:	83 c4 0c             	add    esp,0xc
c001ec66:	c3                   	ret    
c001ec67:	90                   	nop

c001ec68 <ATAPI::readyForCommand()>:
c001ec68:	56                   	push   esi
c001ec69:	53                   	push   ebx
c001ec6a:	53                   	push   ebx
c001ec6b:	31 db                	xor    ebx,ebx
c001ec6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ec71:	51                   	push   ecx
c001ec72:	6a 0c                	push   0xc
c001ec74:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ec7b:	50                   	push   eax
c001ec7c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ec82:	e8 a3 eb ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001ec87:	83 c4 10             	add    esp,0x10
c001ec8a:	a8 88                	test   al,0x88
c001ec8c:	74 1f                	je     c001ecad <ATAPI::readyForCommand()+0x45>
c001ec8e:	43                   	inc    ebx
c001ec8f:	83 fb 63             	cmp    ebx,0x63
c001ec92:	7e dd                	jle    c001ec71 <ATAPI::readyForCommand()+0x9>
c001ec94:	83 ec 0c             	sub    esp,0xc
c001ec97:	6a 0a                	push   0xa
c001ec99:	e8 ea 95 ff ff       	call   c0018288 <milliTenthSleep(unsigned int)>
c001ec9e:	83 c4 10             	add    esp,0x10
c001eca1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001eca7:	75 c8                	jne    c001ec71 <ATAPI::readyForCommand()+0x9>
c001eca9:	31 c0                	xor    eax,eax
c001ecab:	eb 02                	jmp    c001ecaf <ATAPI::readyForCommand()+0x47>
c001ecad:	b0 01                	mov    al,0x1
c001ecaf:	5a                   	pop    edx
c001ecb0:	5b                   	pop    ebx
c001ecb1:	5e                   	pop    esi
c001ecb2:	c3                   	ret    
c001ecb3:	90                   	nop

c001ecb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ecb4:	55                   	push   ebp
c001ecb5:	57                   	push   edi
c001ecb6:	56                   	push   esi
c001ecb7:	53                   	push   ebx
c001ecb8:	83 ec 20             	sub    esp,0x20
c001ecbb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ecbf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ecc3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ecc7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eccb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eccf:	6a 01                	push   0x1
c001ecd1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecd8:	50                   	push   eax
c001ecd9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecdf:	e8 8e ec ff ff       	call   c001d972 <IDE::enableIRQs(unsigned char, bool)>
c001ece4:	5e                   	pop    esi
c001ece5:	58                   	pop    eax
c001ece6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eced:	50                   	push   eax
c001ecee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecf4:	e8 4b ea ff ff       	call   c001d744 <IDE::prepareInterrupt(unsigned char)>
c001ecf9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ecfc:	e8 67 ff ff ff       	call   c001ec68 <ATAPI::readyForCommand()>
c001ed01:	83 c4 10             	add    esp,0x10
c001ed04:	84 c0                	test   al,al
c001ed06:	75 0a                	jne    c001ed12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ed08:	bb 01 00 00 00       	mov    ebx,0x1
c001ed0d:	e9 57 02 00 00       	jmp    c001ef69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ed12:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ed18:	c1 e0 04             	shl    eax,0x4
c001ed1b:	0f b6 c0             	movzx  eax,al
c001ed1e:	50                   	push   eax
c001ed1f:	6a 06                	push   0x6
c001ed21:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed28:	50                   	push   eax
c001ed29:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed2f:	e8 36 ea ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed34:	6a 00                	push   0x0
c001ed36:	6a 01                	push   0x1
c001ed38:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed3f:	50                   	push   eax
c001ed40:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed46:	e8 1f ea ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed4b:	83 c4 20             	add    esp,0x20
c001ed4e:	0f b6 c3             	movzx  eax,bl
c001ed51:	0f b6 df             	movzx  ebx,bh
c001ed54:	50                   	push   eax
c001ed55:	6a 04                	push   0x4
c001ed57:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed5e:	50                   	push   eax
c001ed5f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed65:	e8 00 ea ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed6a:	53                   	push   ebx
c001ed6b:	6a 05                	push   0x5
c001ed6d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed74:	50                   	push   eax
c001ed75:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed7b:	e8 ea e9 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed80:	83 c4 20             	add    esp,0x20
c001ed83:	68 a0 00 00 00       	push   0xa0
c001ed88:	6a 07                	push   0x7
c001ed8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed91:	50                   	push   eax
c001ed92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed98:	e8 cd e9 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed9d:	83 c4 0c             	add    esp,0xc
c001eda0:	6a 01                	push   0x1
c001eda2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eda9:	50                   	push   eax
c001edaa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edb0:	e8 4d f4 ff ff       	call   c001e202 <IDE::polling(unsigned char, unsigned int)>
c001edb5:	83 c4 10             	add    esp,0x10
c001edb8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001edbe:	84 c0                	test   al,al
c001edc0:	74 23                	je     c001ede5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001edc2:	0f b6 d8             	movzx  ebx,al
c001edc5:	0f b6 d2             	movzx  edx,dl
c001edc8:	53                   	push   ebx
c001edc9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001edd0:	50                   	push   eax
c001edd1:	52                   	push   edx
c001edd2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edd8:	e8 75 f3 ff ff       	call   c001e152 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001eddd:	83 c4 10             	add    esp,0x10
c001ede0:	e9 84 01 00 00       	jmp    c001ef69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ede5:	0f b6 d2             	movzx  edx,dl
c001ede8:	53                   	push   ebx
c001ede9:	53                   	push   ebx
c001edea:	52                   	push   edx
c001edeb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edf1:	e8 62 e9 ff ff       	call   c001d758 <IDE::getBase(unsigned char)>
c001edf6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001edfa:	b9 06 00 00 00       	mov    ecx,0x6
c001edff:	89 c2                	mov    edx,eax
c001ee01:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ee04:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ee08:	83 c4 10             	add    esp,0x10
c001ee0b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee11:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee18:	85 db                	test   ebx,ebx
c001ee1a:	0f 84 ec 00 00 00    	je     c001ef0c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ee20:	51                   	push   ecx
c001ee21:	51                   	push   ecx
c001ee22:	52                   	push   edx
c001ee23:	50                   	push   eax
c001ee24:	e8 af ea ff ff       	call   c001d8d8 <IDE::waitInterrupt(unsigned char)>
c001ee29:	83 c4 10             	add    esp,0x10
c001ee2c:	84 c0                	test   al,al
c001ee2e:	0f 84 d4 fe ff ff    	je     c001ed08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee34:	56                   	push   esi
c001ee35:	56                   	push   esi
c001ee36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee3d:	50                   	push   eax
c001ee3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee44:	e8 fb e8 ff ff       	call   c001d744 <IDE::prepareInterrupt(unsigned char)>
c001ee49:	83 c4 0c             	add    esp,0xc
c001ee4c:	6a 04                	push   0x4
c001ee4e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee55:	50                   	push   eax
c001ee56:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee5c:	e8 c9 e9 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001ee61:	83 c4 0c             	add    esp,0xc
c001ee64:	89 c6                	mov    esi,eax
c001ee66:	6a 05                	push   0x5
c001ee68:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee6f:	50                   	push   eax
c001ee70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee76:	e8 af e9 ff ff       	call   c001d82a <IDE::read(unsigned char, unsigned char)>
c001ee7b:	89 f1                	mov    ecx,esi
c001ee7d:	0f b6 c0             	movzx  eax,al
c001ee80:	0f b6 f1             	movzx  esi,cl
c001ee83:	c1 e0 08             	shl    eax,0x8
c001ee86:	09 c6                	or     esi,eax
c001ee88:	d1 fe                	sar    esi,1
c001ee8a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ee8e:	83 c4 10             	add    esp,0x10
c001ee91:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ee96:	74 41                	je     c001eed9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee98:	31 c9                	xor    ecx,ecx
c001ee9a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001eea0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eea7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001eeab:	75 0a                	jne    c001eeb7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001eead:	01 c9                	add    ecx,ecx
c001eeaf:	01 cd                	add    ebp,ecx
c001eeb1:	4b                   	dec    ebx
c001eeb2:	e9 54 ff ff ff       	jmp    c001ee0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001eeb7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001eebc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eec0:	51                   	push   ecx
c001eec1:	51                   	push   ecx
c001eec2:	52                   	push   edx
c001eec3:	50                   	push   eax
c001eec4:	e8 8f e8 ff ff       	call   c001d758 <IDE::getBase(unsigned char)>
c001eec9:	89 c2                	mov    edx,eax
c001eecb:	89 f0                	mov    eax,esi
c001eecd:	66 ef                	out    dx,ax
c001eecf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eed3:	83 c4 10             	add    esp,0x10
c001eed6:	41                   	inc    ecx
c001eed7:	eb c1                	jmp    c001ee9a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001eed9:	31 f6                	xor    esi,esi
c001eedb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001eee1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eee8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001eeec:	75 06                	jne    c001eef4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001eeee:	01 f6                	add    esi,esi
c001eef0:	01 f5                	add    ebp,esi
c001eef2:	eb bd                	jmp    c001eeb1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001eef4:	51                   	push   ecx
c001eef5:	51                   	push   ecx
c001eef6:	52                   	push   edx
c001eef7:	50                   	push   eax
c001eef8:	e8 5b e8 ff ff       	call   c001d758 <IDE::getBase(unsigned char)>
c001eefd:	89 c2                	mov    edx,eax
c001eeff:	66 ed                	in     ax,dx
c001ef01:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ef06:	83 c4 10             	add    esp,0x10
c001ef09:	46                   	inc    esi
c001ef0a:	eb cf                	jmp    c001eedb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ef0c:	51                   	push   ecx
c001ef0d:	51                   	push   ecx
c001ef0e:	52                   	push   edx
c001ef0f:	50                   	push   eax
c001ef10:	e8 c3 e9 ff ff       	call   c001d8d8 <IDE::waitInterrupt(unsigned char)>
c001ef15:	83 c4 10             	add    esp,0x10
c001ef18:	84 c0                	test   al,al
c001ef1a:	0f 84 e8 fd ff ff    	je     c001ed08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ef20:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ef25:	52                   	push   edx
c001ef26:	52                   	push   edx
c001ef27:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef2e:	50                   	push   eax
c001ef2f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef35:	e8 0a e8 ff ff       	call   c001d744 <IDE::prepareInterrupt(unsigned char)>
c001ef3a:	83 c4 10             	add    esp,0x10
c001ef3d:	50                   	push   eax
c001ef3e:	50                   	push   eax
c001ef3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef46:	50                   	push   eax
c001ef47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef4d:	e8 06 e8 ff ff       	call   c001d758 <IDE::getBase(unsigned char)>
c001ef52:	8d 50 07             	lea    edx,[eax+0x7]
c001ef55:	ec                   	in     al,dx
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	a8 88                	test   al,0x88
c001ef5b:	74 0a                	je     c001ef67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ef5d:	4b                   	dec    ebx
c001ef5e:	75 dd                	jne    c001ef3d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ef60:	bb 02 00 00 00       	mov    ebx,0x2
c001ef65:	eb 02                	jmp    c001ef69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ef67:	31 db                	xor    ebx,ebx
c001ef69:	83 c4 1c             	add    esp,0x1c
c001ef6c:	89 d8                	mov    eax,ebx
c001ef6e:	5b                   	pop    ebx
c001ef6f:	5e                   	pop    esi
c001ef70:	5f                   	pop    edi
c001ef71:	5d                   	pop    ebp
c001ef72:	c3                   	ret    
c001ef73:	90                   	nop

c001ef74 <ATAPI::diskRemoved()>:
c001ef74:	83 ec 18             	sub    esp,0x18
c001ef77:	68 f5 52 02 c0       	push   0xc00252f5
c001ef7c:	e8 7a db fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001ef81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef85:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ef8c:	83 c4 1c             	add    esp,0x1c
c001ef8f:	c3                   	ret    

c001ef90 <ATAPI::eject()>:
c001ef90:	57                   	push   edi
c001ef91:	b9 03 00 00 00       	mov    ecx,0x3
c001ef96:	53                   	push   ebx
c001ef97:	83 ec 14             	sub    esp,0x14
c001ef9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef9e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001efa2:	fc                   	cld    
c001efa3:	31 c0                	xor    eax,eax
c001efa5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001efa7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001efac:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001efb1:	50                   	push   eax
c001efb2:	50                   	push   eax
c001efb3:	6a 00                	push   0x0
c001efb5:	6a 00                	push   0x0
c001efb7:	6a 00                	push   0x0
c001efb9:	6a 02                	push   0x2
c001efbb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001efbf:	50                   	push   eax
c001efc0:	53                   	push   ebx
c001efc1:	e8 ee fc ff ff       	call   c001ecb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efc6:	83 c4 14             	add    esp,0x14
c001efc9:	53                   	push   ebx
c001efca:	e8 a5 ff ff ff       	call   c001ef74 <ATAPI::diskRemoved()>
c001efcf:	83 c4 24             	add    esp,0x24
c001efd2:	31 c0                	xor    eax,eax
c001efd4:	5b                   	pop    ebx
c001efd5:	5f                   	pop    edi
c001efd6:	c3                   	ret    
c001efd7:	90                   	nop

c001efd8 <ATAPI::diskInserted()>:
c001efd8:	53                   	push   ebx
c001efd9:	83 ec 14             	sub    esp,0x14
c001efdc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001efe0:	68 0c 53 02 c0       	push   0xc002530c
c001efe5:	e8 11 db fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001efea:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001eff1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eff4:	e8 e9 f3 fe ff       	call   c000e3e2 <PhysicalDisk::startCache()>
c001eff9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001effd:	83 c4 18             	add    esp,0x18
c001f000:	5b                   	pop    ebx
c001f001:	e9 18 14 ff ff       	jmp    c001041e <createPartitionsForDisk(PhysicalDisk*)>

c001f006 <ATAPI::detectMedia()>:
c001f006:	56                   	push   esi
c001f007:	53                   	push   ebx
c001f008:	83 ec 28             	sub    esp,0x28
c001f00b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f00f:	6a 0c                	push   0xc
c001f011:	6a 00                	push   0x0
c001f013:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f017:	56                   	push   esi
c001f018:	e8 67 16 fe ff       	call   c0000684 <memset>
c001f01d:	58                   	pop    eax
c001f01e:	5a                   	pop    edx
c001f01f:	6a 00                	push   0x0
c001f021:	6a 00                	push   0x0
c001f023:	6a 00                	push   0x0
c001f025:	6a 00                	push   0x0
c001f027:	56                   	push   esi
c001f028:	53                   	push   ebx
c001f029:	e8 86 fc ff ff       	call   c001ecb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f02e:	83 c4 1c             	add    esp,0x1c
c001f031:	6a 0c                	push   0xc
c001f033:	6a 00                	push   0x0
c001f035:	56                   	push   esi
c001f036:	e8 49 16 fe ff       	call   c0000684 <memset>
c001f03b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f040:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f045:	59                   	pop    ecx
c001f046:	58                   	pop    eax
c001f047:	6a 01                	push   0x1
c001f049:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f04d:	50                   	push   eax
c001f04e:	6a 00                	push   0x0
c001f050:	6a 12                	push   0x12
c001f052:	56                   	push   esi
c001f053:	53                   	push   ebx
c001f054:	e8 5b fc ff ff       	call   c001ecb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f059:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f05d:	83 c4 20             	add    esp,0x20
c001f060:	83 e0 7f             	and    eax,0x7f
c001f063:	3c 70                	cmp    al,0x70
c001f065:	74 15                	je     c001f07c <ATAPI::detectMedia()+0x76>
c001f067:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f06e:	75 0c                	jne    c001f07c <ATAPI::detectMedia()+0x76>
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	53                   	push   ebx
c001f074:	e8 5f ff ff ff       	call   c001efd8 <ATAPI::diskInserted()>
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f080:	83 e0 0f             	and    eax,0xf
c001f083:	3c 02                	cmp    al,0x2
c001f085:	75 1b                	jne    c001f0a2 <ATAPI::detectMedia()+0x9c>
c001f087:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f08c:	75 2d                	jne    c001f0bb <ATAPI::detectMedia()+0xb5>
c001f08e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f095:	74 24                	je     c001f0bb <ATAPI::detectMedia()+0xb5>
c001f097:	83 ec 0c             	sub    esp,0xc
c001f09a:	53                   	push   ebx
c001f09b:	e8 d4 fe ff ff       	call   c001ef74 <ATAPI::diskRemoved()>
c001f0a0:	eb 16                	jmp    c001f0b8 <ATAPI::detectMedia()+0xb2>
c001f0a2:	84 c0                	test   al,al
c001f0a4:	75 15                	jne    c001f0bb <ATAPI::detectMedia()+0xb5>
c001f0a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f0ad:	75 0c                	jne    c001f0bb <ATAPI::detectMedia()+0xb5>
c001f0af:	83 ec 0c             	sub    esp,0xc
c001f0b2:	53                   	push   ebx
c001f0b3:	e8 20 ff ff ff       	call   c001efd8 <ATAPI::diskInserted()>
c001f0b8:	83 c4 10             	add    esp,0x10
c001f0bb:	83 c4 24             	add    esp,0x24
c001f0be:	5b                   	pop    ebx
c001f0bf:	5e                   	pop    esi
c001f0c0:	c3                   	ret    
c001f0c1:	90                   	nop

c001f0c2 <ATAPI::open(int, int, void*)>:
c001f0c2:	53                   	push   ebx
c001f0c3:	83 ec 08             	sub    esp,0x8
c001f0c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f0ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f0d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f0d8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f0de:	c1 e0 06             	shl    eax,0x6
c001f0e1:	01 d0                	add    eax,edx
c001f0e3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f0ea:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f0f0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f0f7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f101:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f107:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f10e:	6a 04                	push   0x4
c001f110:	6a 0c                	push   0xc
c001f112:	51                   	push   ecx
c001f113:	52                   	push   edx
c001f114:	e8 51 e6 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f119:	90                   	nop
c001f11a:	90                   	nop
c001f11b:	6a 00                	push   0x0
c001f11d:	6a 0c                	push   0xc
c001f11f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f126:	50                   	push   eax
c001f127:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f12d:	e8 38 e6 ff ff       	call   c001d76a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f132:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f139:	83 c4 14             	add    esp,0x14
c001f13c:	53                   	push   ebx
c001f13d:	e8 c4 fe ff ff       	call   c001f006 <ATAPI::detectMedia()>
c001f142:	31 c0                	xor    eax,eax
c001f144:	83 c4 18             	add    esp,0x18
c001f147:	5b                   	pop    ebx
c001f148:	c3                   	ret    
c001f149:	90                   	nop

c001f14a <ATAPI::read(unsigned long long, int, void*)>:
c001f14a:	55                   	push   ebp
c001f14b:	57                   	push   edi
c001f14c:	56                   	push   esi
c001f14d:	53                   	push   ebx
c001f14e:	83 ec 1c             	sub    esp,0x1c
c001f151:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f155:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f159:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f15d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f164:	74 41                	je     c001f1a7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f166:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f16a:	b9 03 00 00 00       	mov    ecx,0x3
c001f16f:	fc                   	cld    
c001f170:	31 c0                	xor    eax,eax
c001f172:	86 fb                	xchg   bl,bh
c001f174:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f176:	c1 c3 10             	rol    ebx,0x10
c001f179:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f17e:	89 e8                	mov    eax,ebp
c001f180:	86 fb                	xchg   bl,bh
c001f182:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f186:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f18a:	50                   	push   eax
c001f18b:	50                   	push   eax
c001f18c:	55                   	push   ebp
c001f18d:	c1 e5 0b             	shl    ebp,0xb
c001f190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f194:	6a 00                	push   0x0
c001f196:	55                   	push   ebp
c001f197:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f19b:	50                   	push   eax
c001f19c:	56                   	push   esi
c001f19d:	e8 12 fb ff ff       	call   c001ecb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f1a2:	83 c4 20             	add    esp,0x20
c001f1a5:	eb 1a                	jmp    c001f1c1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f1a7:	83 ec 0c             	sub    esp,0xc
c001f1aa:	56                   	push   esi
c001f1ab:	e8 56 fe ff ff       	call   c001f006 <ATAPI::detectMedia()>
c001f1b0:	83 c4 10             	add    esp,0x10
c001f1b3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f1ba:	75 aa                	jne    c001f166 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f1bc:	b8 02 00 00 00       	mov    eax,0x2
c001f1c1:	83 c4 1c             	add    esp,0x1c
c001f1c4:	5b                   	pop    ebx
c001f1c5:	5e                   	pop    esi
c001f1c6:	5f                   	pop    edi
c001f1c7:	5d                   	pop    ebp
c001f1c8:	c3                   	ret    
c001f1c9:	90                   	nop

c001f1ca <SATA::close(int, int, void*)>:
c001f1ca:	83 ec 0c             	sub    esp,0xc
c001f1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f1d7:	85 c0                	test   eax,eax
c001f1d9:	74 0c                	je     c001f1e7 <SATA::close(int, int, void*)+0x1d>
c001f1db:	83 ec 0c             	sub    esp,0xc
c001f1de:	8b 10                	mov    edx,DWORD PTR [eax]
c001f1e0:	50                   	push   eax
c001f1e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f1e4:	83 c4 10             	add    esp,0x10
c001f1e7:	31 c0                	xor    eax,eax
c001f1e9:	83 c4 0c             	add    esp,0xc
c001f1ec:	c3                   	ret    
c001f1ed:	90                   	nop

c001f1ee <SATA::powerSaving(PowerSavingLevel)>:
c001f1ee:	c3                   	ret    
c001f1ef:	90                   	nop

c001f1f0 <SATA::open(int, int, void*)>:
c001f1f0:	56                   	push   esi
c001f1f1:	53                   	push   ebx
c001f1f2:	50                   	push   eax
c001f1f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f1f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f1fb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f205:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f20b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f219:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f223:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f229:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f230:	e8 c4 ab fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f235:	89 c6                	mov    esi,eax
c001f237:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f23d:	81 c6 00 10 00 00    	add    esi,0x1000
c001f243:	e8 b1 ab fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f248:	39 c6                	cmp    esi,eax
c001f24a:	74 10                	je     c001f25c <SATA::open(int, int, void*)+0x6c>
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	68 34 52 02 c0       	push   0xc0025234
c001f254:	e8 64 51 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001f259:	83 c4 10             	add    esp,0x10
c001f25c:	83 ec 0c             	sub    esp,0xc
c001f25f:	6a 02                	push   0x2
c001f261:	e8 c3 c4 fe ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c001f266:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f26c:	6a 03                	push   0x3
c001f26e:	50                   	push   eax
c001f26f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f275:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c001f27b:	e8 50 cb fe ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f280:	83 c4 14             	add    esp,0x14
c001f283:	53                   	push   ebx
c001f284:	e8 59 f1 fe ff       	call   c000e3e2 <PhysicalDisk::startCache()>
c001f289:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f28c:	e8 8d 11 ff ff       	call   c001041e <createPartitionsForDisk(PhysicalDisk*)>
c001f291:	83 c4 14             	add    esp,0x14
c001f294:	31 c0                	xor    eax,eax
c001f296:	5b                   	pop    ebx
c001f297:	5e                   	pop    esi
c001f298:	c3                   	ret    
c001f299:	90                   	nop

c001f29a <SATA::SATA()>:
c001f29a:	83 ec 0c             	sub    esp,0xc
c001f29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a1:	83 ec 04             	sub    esp,0x4
c001f2a4:	68 00 02 00 00       	push   0x200
c001f2a9:	68 48 52 02 c0       	push   0xc0025248
c001f2ae:	50                   	push   eax
c001f2af:	e8 c6 f0 fe ff       	call   c000e37a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f2b4:	83 c4 10             	add    esp,0x10
c001f2b7:	ba b8 52 02 c0       	mov    edx,0xc00252b8
c001f2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c0:	89 10                	mov    DWORD PTR [eax],edx
c001f2c2:	90                   	nop
c001f2c3:	83 c4 0c             	add    esp,0xc
c001f2c6:	c3                   	ret    
c001f2c7:	90                   	nop

c001f2c8 <SATA::access(unsigned long long, int, void*, bool)>:
c001f2c8:	55                   	push   ebp
c001f2c9:	57                   	push   edi
c001f2ca:	56                   	push   esi
c001f2cb:	53                   	push   ebx
c001f2cc:	83 ec 2c             	sub    esp,0x2c
c001f2cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f2d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f2d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f2db:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f2df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f2e3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f2e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2ec:	7e 10                	jle    c001f2fe <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f2ee:	83 ec 0c             	sub    esp,0xc
c001f2f1:	68 58 52 02 c0       	push   0xc0025258
c001f2f6:	e8 c2 50 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001f2fb:	83 c4 10             	add    esp,0x10
c001f2fe:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f304:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f30a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f310:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f314:	89 d0                	mov    eax,edx
c001f316:	c1 e0 07             	shl    eax,0x7
c001f319:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f31d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f327:	51                   	push   ecx
c001f328:	8d 42 02             	lea    eax,[edx+0x2]
c001f32b:	51                   	push   ecx
c001f32c:	c1 e0 07             	shl    eax,0x7
c001f32f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f333:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f337:	50                   	push   eax
c001f338:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f33e:	e8 9f ef ff ff       	call   c001e2e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f343:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f347:	83 c4 10             	add    esp,0x10
c001f34a:	b8 01 00 00 00       	mov    eax,0x1
c001f34f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f354:	0f 84 cb 01 00 00    	je     c001f525 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f35a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f35e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f362:	c1 e0 09             	shl    eax,0x9
c001f365:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f36a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f36e:	74 0e                	je     c001f37e <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f370:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f376:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f37a:	89 c1                	mov    ecx,eax
c001f37c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f37e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f382:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f388:	8d 42 02             	lea    eax,[edx+0x2]
c001f38b:	c1 e0 07             	shl    eax,0x7
c001f38e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f392:	8b 00                	mov    eax,DWORD PTR [eax]
c001f394:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f39a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f3a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3a4:	c1 e1 05             	shl    ecx,0x5
c001f3a7:	01 c8                	add    eax,ecx
c001f3a9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f3ad:	83 e1 01             	and    ecx,0x1
c001f3b0:	89 ce                	mov    esi,ecx
c001f3b2:	8a 08                	mov    cl,BYTE PTR [eax]
c001f3b4:	c1 e6 06             	shl    esi,0x6
c001f3b7:	83 e1 bf             	and    ecx,0xffffffbf
c001f3ba:	09 f1                	or     ecx,esi
c001f3bc:	88 08                	mov    BYTE PTR [eax],cl
c001f3be:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f3c0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f3c6:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f3cc:	89 08                	mov    DWORD PTR [eax],ecx
c001f3ce:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f3d4:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f3da:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f3e0:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f3e3:	50                   	push   eax
c001f3e4:	68 90 00 00 00       	push   0x90
c001f3e9:	6a 00                	push   0x0
c001f3eb:	56                   	push   esi
c001f3ec:	e8 93 12 fe ff       	call   c0000684 <memset>
c001f3f1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f3f7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f3fb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f401:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f405:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f409:	83 c4 10             	add    esp,0x10
c001f40c:	48                   	dec    eax
c001f40d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f412:	89 c1                	mov    ecx,eax
c001f414:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f41a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f41f:	09 c8                	or     eax,ecx
c001f421:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f427:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f42a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f431:	66 25 00 7f          	and    ax,0x7f00
c001f435:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f439:	66 0d 27 80          	or     ax,0x8027
c001f43d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f442:	66 89 06             	mov    WORD PTR [esi],ax
c001f445:	19 c0                	sbb    eax,eax
c001f447:	83 e0 f0             	and    eax,0xfffffff0
c001f44a:	83 c0 35             	add    eax,0x35
c001f44d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f450:	89 e8                	mov    eax,ebp
c001f452:	c1 e8 10             	shr    eax,0x10
c001f455:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f458:	89 e8                	mov    eax,ebp
c001f45a:	c1 e8 18             	shr    eax,0x18
c001f45d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f460:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f464:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f467:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f46b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f46e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f472:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f476:	89 d6                	mov    esi,edx
c001f478:	31 c0                	xor    eax,eax
c001f47a:	c1 e6 07             	shl    esi,0x7
c001f47d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f481:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f487:	80 e1 88             	and    cl,0x88
c001f48a:	74 0a                	je     c001f496 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f48c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f491:	74 0a                	je     c001f49d <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f493:	40                   	inc    eax
c001f494:	eb eb                	jmp    c001f481 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f496:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f49b:	75 0a                	jne    c001f4a7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f49d:	83 ec 0c             	sub    esp,0xc
c001f4a0:	68 91 52 02 c0       	push   0xc0025291
c001f4a5:	eb 56                	jmp    c001f4fd <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f4a7:	b8 01 00 00 00       	mov    eax,0x1
c001f4ac:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f4b0:	c1 e2 07             	shl    edx,0x7
c001f4b3:	d3 e0                	shl    eax,cl
c001f4b5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f4b9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f4bf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f4c5:	85 c8                	test   eax,ecx
c001f4c7:	74 20                	je     c001f4e9 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f4c9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f4cf:	0f ba e1 1e          	bt     ecx,0x1e
c001f4d3:	73 ea                	jae    c001f4bf <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f4d5:	83 ec 0c             	sub    esp,0xc
c001f4d8:	68 9f 52 02 c0       	push   0xc002529f
c001f4dd:	e8 db 4e ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001f4e2:	83 c4 10             	add    esp,0x10
c001f4e5:	31 c0                	xor    eax,eax
c001f4e7:	eb 3c                	jmp    c001f525 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4e9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f4ef:	0f ba e0 1e          	bt     eax,0x1e
c001f4f3:	73 17                	jae    c001f50c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f4f5:	83 ec 0c             	sub    esp,0xc
c001f4f8:	68 9f 52 02 c0       	push   0xc002529f
c001f4fd:	e8 bb 4e ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001f502:	83 c4 10             	add    esp,0x10
c001f505:	b8 01 00 00 00       	mov    eax,0x1
c001f50a:	eb 19                	jmp    c001f525 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f50c:	31 c0                	xor    eax,eax
c001f50e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f513:	75 10                	jne    c001f525 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f515:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f51b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f51f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f523:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f525:	83 c4 2c             	add    esp,0x2c
c001f528:	5b                   	pop    ebx
c001f529:	5e                   	pop    esi
c001f52a:	5f                   	pop    edi
c001f52b:	5d                   	pop    ebp
c001f52c:	c3                   	ret    
c001f52d:	90                   	nop

c001f52e <SATA::read(unsigned long long, int, void*)>:
c001f52e:	57                   	push   edi
c001f52f:	b8 04 00 00 00       	mov    eax,0x4
c001f534:	56                   	push   esi
c001f535:	53                   	push   ebx
c001f536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f53a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f53e:	8d 7a ff             	lea    edi,[edx-0x1]
c001f541:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f545:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f549:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f54f:	77 25                	ja     c001f576 <SATA::read(unsigned long long, int, void*)+0x48>
c001f551:	b8 06 00 00 00       	mov    eax,0x6
c001f556:	85 f6                	test   esi,esi
c001f558:	74 1c                	je     c001f576 <SATA::read(unsigned long long, int, void*)+0x48>
c001f55a:	50                   	push   eax
c001f55b:	50                   	push   eax
c001f55c:	6a 00                	push   0x0
c001f55e:	56                   	push   esi
c001f55f:	52                   	push   edx
c001f560:	53                   	push   ebx
c001f561:	51                   	push   ecx
c001f562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f566:	e8 5d fd ff ff       	call   c001f2c8 <SATA::access(unsigned long long, int, void*, bool)>
c001f56b:	83 c4 20             	add    esp,0x20
c001f56e:	85 c0                	test   eax,eax
c001f570:	0f 95 c0             	setne  al
c001f573:	0f b6 c0             	movzx  eax,al
c001f576:	5b                   	pop    ebx
c001f577:	5e                   	pop    esi
c001f578:	5f                   	pop    edi
c001f579:	c3                   	ret    

c001f57a <SATA::write(unsigned long long, int, void*)>:
c001f57a:	55                   	push   ebp
c001f57b:	b8 04 00 00 00       	mov    eax,0x4
c001f580:	57                   	push   edi
c001f581:	56                   	push   esi
c001f582:	53                   	push   ebx
c001f583:	83 ec 0c             	sub    esp,0xc
c001f586:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f58a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f58e:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f591:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f595:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f599:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f59f:	77 3d                	ja     c001f5de <SATA::write(unsigned long long, int, void*)+0x64>
c001f5a1:	b8 06 00 00 00       	mov    eax,0x6
c001f5a6:	85 ed                	test   ebp,ebp
c001f5a8:	74 34                	je     c001f5de <SATA::write(unsigned long long, int, void*)+0x64>
c001f5aa:	c1 e3 09             	shl    ebx,0x9
c001f5ad:	01 eb                	add    ebx,ebp
c001f5af:	89 d6                	mov    esi,edx
c001f5b1:	89 cf                	mov    edi,ecx
c001f5b3:	83 c6 01             	add    esi,0x1
c001f5b6:	83 d7 00             	adc    edi,0x0
c001f5b9:	50                   	push   eax
c001f5ba:	50                   	push   eax
c001f5bb:	6a 01                	push   0x1
c001f5bd:	55                   	push   ebp
c001f5be:	81 c5 00 02 00 00    	add    ebp,0x200
c001f5c4:	6a 01                	push   0x1
c001f5c6:	51                   	push   ecx
c001f5c7:	52                   	push   edx
c001f5c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f5cc:	e8 f7 fc ff ff       	call   c001f2c8 <SATA::access(unsigned long long, int, void*, bool)>
c001f5d1:	83 c4 20             	add    esp,0x20
c001f5d4:	89 f2                	mov    edx,esi
c001f5d6:	89 f9                	mov    ecx,edi
c001f5d8:	39 dd                	cmp    ebp,ebx
c001f5da:	75 d3                	jne    c001f5af <SATA::write(unsigned long long, int, void*)+0x35>
c001f5dc:	31 c0                	xor    eax,eax
c001f5de:	83 c4 0c             	add    esp,0xc
c001f5e1:	5b                   	pop    ebx
c001f5e2:	5e                   	pop    esi
c001f5e3:	5f                   	pop    edi
c001f5e4:	5d                   	pop    ebp
c001f5e5:	c3                   	ret    

c001f5e6 <SATAPI::write(unsigned long long, int, void*)>:
c001f5e6:	b8 03 00 00 00       	mov    eax,0x3
c001f5eb:	c3                   	ret    

c001f5ec <SATAPI::close(int, int, void*)>:
c001f5ec:	83 ec 0c             	sub    esp,0xc
c001f5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f5f9:	85 c0                	test   eax,eax
c001f5fb:	74 0c                	je     c001f609 <SATAPI::close(int, int, void*)+0x1d>
c001f5fd:	83 ec 0c             	sub    esp,0xc
c001f600:	8b 10                	mov    edx,DWORD PTR [eax]
c001f602:	50                   	push   eax
c001f603:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f606:	83 c4 10             	add    esp,0x10
c001f609:	31 c0                	xor    eax,eax
c001f60b:	83 c4 0c             	add    esp,0xc
c001f60e:	c3                   	ret    
c001f60f:	90                   	nop

c001f610 <SATAPI::SATAPI()>:
c001f610:	83 ec 0c             	sub    esp,0xc
c001f613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f617:	83 ec 04             	sub    esp,0x4
c001f61a:	68 00 08 00 00       	push   0x800
c001f61f:	68 e8 52 02 c0       	push   0xc00252e8
c001f624:	50                   	push   eax
c001f625:	e8 50 ed fe ff       	call   c000e37a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f62a:	83 c4 10             	add    esp,0x10
c001f62d:	ba 94 53 02 c0       	mov    edx,0xc0025394
c001f632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f636:	89 10                	mov    DWORD PTR [eax],edx
c001f638:	90                   	nop
c001f639:	83 c4 0c             	add    esp,0xc
c001f63c:	c3                   	ret    
c001f63d:	90                   	nop

c001f63e <SATAPI::diskRemoved()>:
c001f63e:	83 ec 18             	sub    esp,0x18
c001f641:	68 f4 52 02 c0       	push   0xc00252f4
c001f646:	e8 b0 d4 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001f64b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f64f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f656:	83 c4 1c             	add    esp,0x1c
c001f659:	c3                   	ret    

c001f65a <SATAPI::diskInserted()>:
c001f65a:	53                   	push   ebx
c001f65b:	83 ec 14             	sub    esp,0x14
c001f65e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f662:	68 0b 53 02 c0       	push   0xc002530b
c001f667:	e8 8f d4 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001f66c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f673:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f676:	e8 67 ed fe ff       	call   c000e3e2 <PhysicalDisk::startCache()>
c001f67b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f67f:	83 c4 18             	add    esp,0x18
c001f682:	5b                   	pop    ebx
c001f683:	e9 96 0d ff ff       	jmp    c001041e <createPartitionsForDisk(PhysicalDisk*)>

c001f688 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f688:	55                   	push   ebp
c001f689:	57                   	push   edi
c001f68a:	56                   	push   esi
c001f68b:	53                   	push   ebx
c001f68c:	83 ec 34             	sub    esp,0x34
c001f68f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f693:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f697:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f69b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f69f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f6a3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f6a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f6af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f6b3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f6b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f6bd:	c1 e0 07             	shl    eax,0x7
c001f6c0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f6c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f6c8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f6d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f6d6:	8d 58 02             	lea    ebx,[eax+0x2]
c001f6d9:	c1 e3 07             	shl    ebx,0x7
c001f6dc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f6e0:	53                   	push   ebx
c001f6e1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f6e7:	e8 f6 eb ff ff       	call   c001e2e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f6ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f6f0:	83 c4 10             	add    esp,0x10
c001f6f3:	b8 01 00 00 00       	mov    eax,0x1
c001f6f8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f6fd:	0f 84 85 01 00 00    	je     c001f888 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f703:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f709:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f70b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f711:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f717:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f71b:	c1 e1 05             	shl    ecx,0x5
c001f71e:	01 c8                	add    eax,ecx
c001f720:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f722:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f728:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f72e:	89 08                	mov    DWORD PTR [eax],ecx
c001f730:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f736:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f73c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f742:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f745:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f748:	50                   	push   eax
c001f749:	68 90 00 00 00       	push   0x90
c001f74e:	6a 00                	push   0x0
c001f750:	53                   	push   ebx
c001f751:	e8 2e 0f fe ff       	call   c0000684 <memset>
c001f756:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f75a:	b9 0c 00 00 00       	mov    ecx,0xc
c001f75f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f761:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f767:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f76b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f771:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f775:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f779:	48                   	dec    eax
c001f77a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f77f:	89 c1                	mov    ecx,eax
c001f781:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f787:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f78c:	09 c8                	or     eax,ecx
c001f78e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f794:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f797:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f79e:	66 25 00 7f          	and    ax,0x7f00
c001f7a2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f7a6:	66 0d 27 80          	or     ax,0x8027
c001f7aa:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f7ae:	66 89 03             	mov    WORD PTR [ebx],ax
c001f7b1:	89 d0                	mov    eax,edx
c001f7b3:	c1 ea 18             	shr    edx,0x18
c001f7b6:	c1 e8 10             	shr    eax,0x10
c001f7b9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f7bc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f7bf:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f7c3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f7c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f7ca:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f7cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f7d1:	83 c4 10             	add    esp,0x10
c001f7d4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f7d8:	31 c0                	xor    eax,eax
c001f7da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7de:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f7e4:	80 e2 88             	and    dl,0x88
c001f7e7:	74 0a                	je     c001f7f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f7e9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f7ee:	74 0a                	je     c001f7fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f7f0:	40                   	inc    eax
c001f7f1:	eb eb                	jmp    c001f7de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f7f3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f7f8:	75 0f                	jne    c001f809 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f7fa:	83 ec 0c             	sub    esp,0xc
c001f7fd:	68 91 52 02 c0       	push   0xc0025291
c001f802:	e8 b6 4b ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001f807:	eb 3f                	jmp    c001f848 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f809:	ba 01 00 00 00       	mov    edx,0x1
c001f80e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f812:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f816:	d3 e2                	shl    edx,cl
c001f818:	c1 e0 07             	shl    eax,0x7
c001f81b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f821:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f825:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f82b:	85 ca                	test   edx,ecx
c001f82d:	74 23                	je     c001f852 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f82f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f835:	0f ba e1 1e          	bt     ecx,0x1e
c001f839:	73 ea                	jae    c001f825 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f83b:	83 ec 0c             	sub    esp,0xc
c001f83e:	68 23 53 02 c0       	push   0xc0025323
c001f843:	e8 b3 d2 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c001f848:	83 c4 10             	add    esp,0x10
c001f84b:	b8 01 00 00 00       	mov    eax,0x1
c001f850:	eb 36                	jmp    c001f888 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f852:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f858:	0f ba e0 1e          	bt     eax,0x1e
c001f85c:	73 0a                	jae    c001f868 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f85e:	83 ec 0c             	sub    esp,0xc
c001f861:	68 36 53 02 c0       	push   0xc0025336
c001f866:	eb db                	jmp    c001f843 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f868:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f86d:	74 17                	je     c001f886 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f86f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f874:	74 10                	je     c001f886 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f876:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f87c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f880:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f886:	31 c0                	xor    eax,eax
c001f888:	83 c4 2c             	add    esp,0x2c
c001f88b:	5b                   	pop    ebx
c001f88c:	5e                   	pop    esi
c001f88d:	5f                   	pop    edi
c001f88e:	5d                   	pop    ebp
c001f88f:	c3                   	ret    

c001f890 <SATAPI::eject()>:
c001f890:	57                   	push   edi
c001f891:	b9 03 00 00 00       	mov    ecx,0x3
c001f896:	53                   	push   ebx
c001f897:	83 ec 14             	sub    esp,0x14
c001f89a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f89e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f8a2:	fc                   	cld    
c001f8a3:	31 c0                	xor    eax,eax
c001f8a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f8a7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f8ac:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f8b1:	50                   	push   eax
c001f8b2:	6a 00                	push   0x0
c001f8b4:	6a 00                	push   0x0
c001f8b6:	6a 00                	push   0x0
c001f8b8:	6a 00                	push   0x0
c001f8ba:	6a 02                	push   0x2
c001f8bc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8c0:	50                   	push   eax
c001f8c1:	53                   	push   ebx
c001f8c2:	e8 c1 fd ff ff       	call   c001f688 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8c7:	83 c4 14             	add    esp,0x14
c001f8ca:	53                   	push   ebx
c001f8cb:	e8 6e fd ff ff       	call   c001f63e <SATAPI::diskRemoved()>
c001f8d0:	83 c4 24             	add    esp,0x24
c001f8d3:	31 c0                	xor    eax,eax
c001f8d5:	5b                   	pop    ebx
c001f8d6:	5f                   	pop    edi
c001f8d7:	c3                   	ret    

c001f8d8 <SATAPI::detectMedia()>:
c001f8d8:	56                   	push   esi
c001f8d9:	53                   	push   ebx
c001f8da:	83 ec 28             	sub    esp,0x28
c001f8dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8e1:	6a 0c                	push   0xc
c001f8e3:	6a 00                	push   0x0
c001f8e5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f8e9:	56                   	push   esi
c001f8ea:	e8 95 0d fe ff       	call   c0000684 <memset>
c001f8ef:	83 c4 0c             	add    esp,0xc
c001f8f2:	6a 00                	push   0x0
c001f8f4:	6a 00                	push   0x0
c001f8f6:	6a 00                	push   0x0
c001f8f8:	6a 00                	push   0x0
c001f8fa:	6a 00                	push   0x0
c001f8fc:	56                   	push   esi
c001f8fd:	53                   	push   ebx
c001f8fe:	e8 85 fd ff ff       	call   c001f688 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f903:	83 c4 1c             	add    esp,0x1c
c001f906:	6a 0c                	push   0xc
c001f908:	6a 00                	push   0x0
c001f90a:	56                   	push   esi
c001f90b:	e8 74 0d fe ff       	call   c0000684 <memset>
c001f910:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f915:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f91a:	83 c4 0c             	add    esp,0xc
c001f91d:	6a 01                	push   0x1
c001f91f:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f923:	50                   	push   eax
c001f924:	6a 00                	push   0x0
c001f926:	6a 00                	push   0x0
c001f928:	6a 12                	push   0x12
c001f92a:	56                   	push   esi
c001f92b:	53                   	push   ebx
c001f92c:	e8 57 fd ff ff       	call   c001f688 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f931:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f935:	83 c4 20             	add    esp,0x20
c001f938:	83 e0 7f             	and    eax,0x7f
c001f93b:	3c 70                	cmp    al,0x70
c001f93d:	74 15                	je     c001f954 <SATAPI::detectMedia()+0x7c>
c001f93f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f946:	75 0c                	jne    c001f954 <SATAPI::detectMedia()+0x7c>
c001f948:	83 ec 0c             	sub    esp,0xc
c001f94b:	53                   	push   ebx
c001f94c:	e8 09 fd ff ff       	call   c001f65a <SATAPI::diskInserted()>
c001f951:	83 c4 10             	add    esp,0x10
c001f954:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f958:	83 e0 0f             	and    eax,0xf
c001f95b:	3c 02                	cmp    al,0x2
c001f95d:	75 1b                	jne    c001f97a <SATAPI::detectMedia()+0xa2>
c001f95f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f964:	75 2d                	jne    c001f993 <SATAPI::detectMedia()+0xbb>
c001f966:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f96d:	74 24                	je     c001f993 <SATAPI::detectMedia()+0xbb>
c001f96f:	83 ec 0c             	sub    esp,0xc
c001f972:	53                   	push   ebx
c001f973:	e8 c6 fc ff ff       	call   c001f63e <SATAPI::diskRemoved()>
c001f978:	eb 16                	jmp    c001f990 <SATAPI::detectMedia()+0xb8>
c001f97a:	84 c0                	test   al,al
c001f97c:	75 15                	jne    c001f993 <SATAPI::detectMedia()+0xbb>
c001f97e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f985:	75 0c                	jne    c001f993 <SATAPI::detectMedia()+0xbb>
c001f987:	83 ec 0c             	sub    esp,0xc
c001f98a:	53                   	push   ebx
c001f98b:	e8 ca fc ff ff       	call   c001f65a <SATAPI::diskInserted()>
c001f990:	83 c4 10             	add    esp,0x10
c001f993:	83 c4 24             	add    esp,0x24
c001f996:	5b                   	pop    ebx
c001f997:	5e                   	pop    esi
c001f998:	c3                   	ret    
c001f999:	90                   	nop

c001f99a <SATAPI::open(int, int, void*)>:
c001f99a:	56                   	push   esi
c001f99b:	53                   	push   ebx
c001f99c:	50                   	push   eax
c001f99d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f9a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f9a5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f9af:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f9b5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f9bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f9c3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f9cd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f9d3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f9da:	e8 1a a4 fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f9df:	89 c6                	mov    esi,eax
c001f9e1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f9e7:	81 c6 00 10 00 00    	add    esi,0x1000
c001f9ed:	e8 07 a4 fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f9f2:	39 c6                	cmp    esi,eax
c001f9f4:	74 10                	je     c001fa06 <SATAPI::open(int, int, void*)+0x6c>
c001f9f6:	83 ec 0c             	sub    esp,0xc
c001f9f9:	68 4b 53 02 c0       	push   0xc002534b
c001f9fe:	e8 ba 49 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001fa03:	83 c4 10             	add    esp,0x10
c001fa06:	83 ec 0c             	sub    esp,0xc
c001fa09:	6a 02                	push   0x2
c001fa0b:	e8 19 bd fe ff       	call   c000b729 <Virt::allocateKernelVirtualPages(int)>
c001fa10:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001fa16:	6a 03                	push   0x3
c001fa18:	50                   	push   eax
c001fa19:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001fa1f:	ff 35 d0 65 02 c0    	push   DWORD PTR ds:0xc00265d0
c001fa25:	e8 a6 c3 fe ff       	call   c000bdd0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fa2a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001fa31:	83 c4 14             	add    esp,0x14
c001fa34:	53                   	push   ebx
c001fa35:	e8 9e fe ff ff       	call   c001f8d8 <SATAPI::detectMedia()>
c001fa3a:	83 c4 14             	add    esp,0x14
c001fa3d:	31 c0                	xor    eax,eax
c001fa3f:	5b                   	pop    ebx
c001fa40:	5e                   	pop    esi
c001fa41:	c3                   	ret    

c001fa42 <SATAPI::read(unsigned long long, int, void*)>:
c001fa42:	55                   	push   ebp
c001fa43:	57                   	push   edi
c001fa44:	56                   	push   esi
c001fa45:	53                   	push   ebx
c001fa46:	83 ec 1c             	sub    esp,0x1c
c001fa49:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fa4d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa51:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fa55:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa5c:	74 19                	je     c001fa77 <SATAPI::read(unsigned long long, int, void*)+0x35>
c001fa5e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001fa63:	7e 2e                	jle    c001fa93 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa65:	83 ec 0c             	sub    esp,0xc
c001fa68:	68 61 53 02 c0       	push   0xc0025361
c001fa6d:	e8 4b 49 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c001fa72:	83 c4 10             	add    esp,0x10
c001fa75:	eb 1c                	jmp    c001fa93 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa77:	83 ec 0c             	sub    esp,0xc
c001fa7a:	55                   	push   ebp
c001fa7b:	e8 58 fe ff ff       	call   c001f8d8 <SATAPI::detectMedia()>
c001fa80:	83 c4 10             	add    esp,0x10
c001fa83:	b8 02 00 00 00       	mov    eax,0x2
c001fa88:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa8f:	75 cd                	jne    c001fa5e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001fa91:	eb 49                	jmp    c001fadc <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001fa93:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa97:	b9 03 00 00 00       	mov    ecx,0x3
c001fa9c:	fc                   	cld    
c001fa9d:	31 c0                	xor    eax,eax
c001fa9f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001faa1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001faa6:	89 d8                	mov    eax,ebx
c001faa8:	86 e0                	xchg   al,ah
c001faaa:	c1 c0 10             	rol    eax,0x10
c001faad:	86 e0                	xchg   al,ah
c001faaf:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fab3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fab7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fabb:	50                   	push   eax
c001fabc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fac0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fac4:	56                   	push   esi
c001fac5:	53                   	push   ebx
c001fac6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001faca:	c1 e0 0b             	shl    eax,0xb
c001facd:	50                   	push   eax
c001face:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fad2:	50                   	push   eax
c001fad3:	55                   	push   ebp
c001fad4:	e8 af fb ff ff       	call   c001f688 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fad9:	83 c4 20             	add    esp,0x20
c001fadc:	83 c4 1c             	add    esp,0x1c
c001fadf:	5b                   	pop    ebx
c001fae0:	5e                   	pop    esi
c001fae1:	5f                   	pop    edi
c001fae2:	5d                   	pop    ebp
c001fae3:	c3                   	ret    

c001fae4 <AVX::open(int, int, void*)>:
c001fae4:	83 ec 0c             	sub    esp,0xc
c001fae7:	e8 3c 11 00 00       	call   c0020c28 <avxInit>
c001faec:	b8 00 00 00 00       	mov    eax,0x0
c001faf1:	83 c4 0c             	add    esp,0xc
c001faf4:	c3                   	ret    
c001faf5:	90                   	nop
c001faf6:	66 90                	xchg   ax,ax

c001faf8 <AVX::close(int, int, void*)>:
c001faf8:	83 ec 0c             	sub    esp,0xc
c001fafb:	e8 29 11 00 00       	call   c0020c29 <avxClose>
c001fb00:	b8 00 00 00 00       	mov    eax,0x0
c001fb05:	83 c4 0c             	add    esp,0xc
c001fb08:	c3                   	ret    
c001fb09:	90                   	nop
c001fb0a:	66 90                	xchg   ax,ax

c001fb0c <AVX::available()>:
c001fb0c:	83 ec 0c             	sub    esp,0xc
c001fb0f:	e8 0c 11 00 00       	call   c0020c20 <avxDetect>
c001fb14:	85 c0                	test   eax,eax
c001fb16:	0f 95 c0             	setne  al
c001fb19:	83 c4 0c             	add    esp,0xc
c001fb1c:	c3                   	ret    
c001fb1d:	90                   	nop
c001fb1e:	66 90                	xchg   ax,ax

c001fb20 <AVX::save(void*)>:
c001fb20:	83 ec 0c             	sub    esp,0xc
c001fb23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb27:	83 ec 0c             	sub    esp,0xc
c001fb2a:	50                   	push   eax
c001fb2b:	e8 f6 10 00 00       	call   c0020c26 <avxSave>
c001fb30:	83 c4 10             	add    esp,0x10
c001fb33:	90                   	nop
c001fb34:	83 c4 0c             	add    esp,0xc
c001fb37:	c3                   	ret    

c001fb38 <AVX::load(void*)>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	50                   	push   eax
c001fb43:	e8 df 10 00 00       	call   c0020c27 <avxLoad>
c001fb48:	83 c4 10             	add    esp,0x10
c001fb4b:	90                   	nop
c001fb4c:	83 c4 0c             	add    esp,0xc
c001fb4f:	c3                   	ret    

c001fb50 <AVX::AVX()>:
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb57:	83 ec 08             	sub    esp,0x8
c001fb5a:	68 c4 53 02 c0       	push   0xc00253c4
c001fb5f:	50                   	push   eax
c001fb60:	e8 f3 e8 fe ff       	call   c000e458 <FPU::FPU(char const*)>
c001fb65:	83 c4 10             	add    esp,0x10
c001fb68:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c001fb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb71:	89 10                	mov    DWORD PTR [eax],edx
c001fb73:	90                   	nop
c001fb74:	83 c4 0c             	add    esp,0xc
c001fb77:	c3                   	ret    

c001fb78 <MMX::available()>:
c001fb78:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c001fb7d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fb83:	83 e0 20             	and    eax,0x20
c001fb86:	84 c0                	test   al,al
c001fb88:	0f 95 c0             	setne  al
c001fb8b:	c3                   	ret    

c001fb8c <MMX::open(int, int, void*)>:
c001fb8c:	83 ec 0c             	sub    esp,0xc
c001fb8f:	e8 1e 11 00 00       	call   c0020cb2 <x87Init>
c001fb94:	b8 00 00 00 00       	mov    eax,0x0
c001fb99:	83 c4 0c             	add    esp,0xc
c001fb9c:	c3                   	ret    
c001fb9d:	90                   	nop
c001fb9e:	66 90                	xchg   ax,ax

c001fba0 <MMX::close(int, int, void*)>:
c001fba0:	83 ec 0c             	sub    esp,0xc
c001fba3:	e8 24 11 00 00       	call   c0020ccc <x87Close>
c001fba8:	b8 00 00 00 00       	mov    eax,0x0
c001fbad:	83 c4 0c             	add    esp,0xc
c001fbb0:	c3                   	ret    
c001fbb1:	90                   	nop
c001fbb2:	66 90                	xchg   ax,ax

c001fbb4 <MMX::save(void*)>:
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	50                   	push   eax
c001fbbf:	e8 dd 10 00 00       	call   c0020ca1 <x87Save>
c001fbc4:	83 c4 10             	add    esp,0x10
c001fbc7:	90                   	nop
c001fbc8:	83 c4 0c             	add    esp,0xc
c001fbcb:	c3                   	ret    

c001fbcc <MMX::load(void*)>:
c001fbcc:	83 ec 0c             	sub    esp,0xc
c001fbcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbd3:	83 ec 0c             	sub    esp,0xc
c001fbd6:	50                   	push   eax
c001fbd7:	e8 ce 10 00 00       	call   c0020caa <x87Load>
c001fbdc:	83 c4 10             	add    esp,0x10
c001fbdf:	90                   	nop
c001fbe0:	83 c4 0c             	add    esp,0xc
c001fbe3:	c3                   	ret    

c001fbe4 <MMX::MMX()>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbeb:	83 ec 08             	sub    esp,0x8
c001fbee:	68 04 54 02 c0       	push   0xc0025404
c001fbf3:	50                   	push   eax
c001fbf4:	e8 5f e8 fe ff       	call   c000e458 <FPU::FPU(char const*)>
c001fbf9:	83 c4 10             	add    esp,0x10
c001fbfc:	ba 14 54 02 c0       	mov    edx,0xc0025414
c001fc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc05:	89 10                	mov    DWORD PTR [eax],edx
c001fc07:	90                   	nop
c001fc08:	83 c4 0c             	add    esp,0xc
c001fc0b:	c3                   	ret    

c001fc0c <SSE::open(int, int, void*)>:
c001fc0c:	83 ec 0c             	sub    esp,0xc
c001fc0f:	e8 50 10 00 00       	call   c0020c64 <sseInit>
c001fc14:	b8 00 00 00 00       	mov    eax,0x0
c001fc19:	83 c4 0c             	add    esp,0xc
c001fc1c:	c3                   	ret    
c001fc1d:	90                   	nop
c001fc1e:	66 90                	xchg   ax,ax

c001fc20 <SSE::close(int, int, void*)>:
c001fc20:	83 ec 0c             	sub    esp,0xc
c001fc23:	e8 4c 10 00 00       	call   c0020c74 <sseClose>
c001fc28:	b8 00 00 00 00       	mov    eax,0x0
c001fc2d:	83 c4 0c             	add    esp,0xc
c001fc30:	c3                   	ret    
c001fc31:	90                   	nop
c001fc32:	66 90                	xchg   ax,ax

c001fc34 <SSE::available()>:
c001fc34:	83 ec 1c             	sub    esp,0x1c
c001fc37:	e8 04 10 00 00       	call   c0020c40 <absolutelyNoChanceInHell>
c001fc3c:	85 c0                	test   eax,eax
c001fc3e:	0f 95 c0             	setne  al
c001fc41:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc45:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fc49:	83 c4 1c             	add    esp,0x1c
c001fc4c:	c3                   	ret    
c001fc4d:	90                   	nop
c001fc4e:	66 90                	xchg   ax,ax

c001fc50 <SSE::save(void*)>:
c001fc50:	83 ec 0c             	sub    esp,0xc
c001fc53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc57:	83 ec 0c             	sub    esp,0xc
c001fc5a:	50                   	push   eax
c001fc5b:	e8 f8 0f 00 00       	call   c0020c58 <sseSave>
c001fc60:	83 c4 10             	add    esp,0x10
c001fc63:	90                   	nop
c001fc64:	83 c4 0c             	add    esp,0xc
c001fc67:	c3                   	ret    

c001fc68 <SSE::load(void*)>:
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc6f:	83 ec 0c             	sub    esp,0xc
c001fc72:	50                   	push   eax
c001fc73:	e8 e6 0f 00 00       	call   c0020c5e <sseLoad>
c001fc78:	83 c4 10             	add    esp,0x10
c001fc7b:	90                   	nop
c001fc7c:	83 c4 0c             	add    esp,0xc
c001fc7f:	c3                   	ret    

c001fc80 <SSE::SSE()>:
c001fc80:	83 ec 0c             	sub    esp,0xc
c001fc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc87:	83 ec 08             	sub    esp,0x8
c001fc8a:	68 44 54 02 c0       	push   0xc0025444
c001fc8f:	50                   	push   eax
c001fc90:	e8 c3 e7 fe ff       	call   c000e458 <FPU::FPU(char const*)>
c001fc95:	83 c4 10             	add    esp,0x10
c001fc98:	ba 54 54 02 c0       	mov    edx,0xc0025454
c001fc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca1:	89 10                	mov    DWORD PTR [eax],edx
c001fca3:	90                   	nop
c001fca4:	83 c4 0c             	add    esp,0xc
c001fca7:	c3                   	ret    

c001fca8 <x87::open(int, int, void*)>:
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	e8 02 10 00 00       	call   c0020cb2 <x87Init>
c001fcb0:	b8 00 00 00 00       	mov    eax,0x0
c001fcb5:	83 c4 0c             	add    esp,0xc
c001fcb8:	c3                   	ret    
c001fcb9:	90                   	nop
c001fcba:	66 90                	xchg   ax,ax

c001fcbc <x87::close(int, int, void*)>:
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	e8 08 10 00 00       	call   c0020ccc <x87Close>
c001fcc4:	b8 00 00 00 00       	mov    eax,0x0
c001fcc9:	83 c4 0c             	add    esp,0xc
c001fccc:	c3                   	ret    
c001fccd:	90                   	nop
c001fcce:	66 90                	xchg   ax,ax

c001fcd0 <x87::available()>:
c001fcd0:	83 ec 0c             	sub    esp,0xc
c001fcd3:	e8 ae 0f 00 00       	call   c0020c86 <x87Detect>
c001fcd8:	85 c0                	test   eax,eax
c001fcda:	0f 95 c0             	setne  al
c001fcdd:	83 c4 0c             	add    esp,0xc
c001fce0:	c3                   	ret    
c001fce1:	90                   	nop
c001fce2:	66 90                	xchg   ax,ax

c001fce4 <x87::save(void*)>:
c001fce4:	83 ec 0c             	sub    esp,0xc
c001fce7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fceb:	83 ec 0c             	sub    esp,0xc
c001fcee:	50                   	push   eax
c001fcef:	e8 ad 0f 00 00       	call   c0020ca1 <x87Save>
c001fcf4:	83 c4 10             	add    esp,0x10
c001fcf7:	90                   	nop
c001fcf8:	83 c4 0c             	add    esp,0xc
c001fcfb:	c3                   	ret    

c001fcfc <x87::load(void*)>:
c001fcfc:	83 ec 0c             	sub    esp,0xc
c001fcff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd03:	83 ec 0c             	sub    esp,0xc
c001fd06:	50                   	push   eax
c001fd07:	e8 9e 0f 00 00       	call   c0020caa <x87Load>
c001fd0c:	83 c4 10             	add    esp,0x10
c001fd0f:	90                   	nop
c001fd10:	83 c4 0c             	add    esp,0xc
c001fd13:	c3                   	ret    

c001fd14 <x87::x87()>:
c001fd14:	83 ec 0c             	sub    esp,0xc
c001fd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1b:	83 ec 08             	sub    esp,0x8
c001fd1e:	68 84 54 02 c0       	push   0xc0025484
c001fd23:	50                   	push   eax
c001fd24:	e8 2f e7 fe ff       	call   c000e458 <FPU::FPU(char const*)>
c001fd29:	83 c4 10             	add    esp,0x10
c001fd2c:	ba 94 54 02 c0       	mov    edx,0xc0025494
c001fd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd35:	89 10                	mov    DWORD PTR [eax],edx
c001fd37:	90                   	nop
c001fd38:	83 c4 0c             	add    esp,0xc
c001fd3b:	c3                   	ret    

c001fd3c <APIC::disable()>:
c001fd3c:	90                   	nop
c001fd3d:	c3                   	ret    

c001fd3e <APIC::close(int, int, void*)>:
c001fd3e:	55                   	push   ebp
c001fd3f:	89 e5                	mov    ebp,esp
c001fd41:	83 ec 08             	sub    esp,0x8
c001fd44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd47:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd49:	83 c0 3c             	add    eax,0x3c
c001fd4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd54:	ff d0                	call   eax
c001fd56:	83 c4 10             	add    esp,0x10
c001fd59:	b8 00 00 00 00       	mov    eax,0x0
c001fd5e:	c9                   	leave  
c001fd5f:	c3                   	ret    

c001fd60 <IOAPIC::close(int, int, void*)>:
c001fd60:	b8 00 00 00 00       	mov    eax,0x0
c001fd65:	c3                   	ret    

c001fd66 <APIC::io_wait()>:
c001fd66:	eb 00                	jmp    c001fd68 <APIC::io_wait()+0x2>
c001fd68:	eb 00                	jmp    c001fd6a <APIC::io_wait()+0x4>
c001fd6a:	90                   	nop
c001fd6b:	c3                   	ret    

c001fd6c <APIC::getBase()>:
c001fd6c:	55                   	push   ebp
c001fd6d:	89 e5                	mov    ebp,esp
c001fd6f:	83 ec 18             	sub    esp,0x18
c001fd72:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c001fd77:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fd7d:	83 e0 08             	and    eax,0x8
c001fd80:	84 c0                	test   al,al
c001fd82:	75 07                	jne    c001fd8b <APIC::getBase()+0x1f>
c001fd84:	b8 00 00 00 00       	mov    eax,0x0
c001fd89:	eb 21                	jmp    c001fdac <APIC::getBase()+0x40>
c001fd8b:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c001fd90:	83 ec 08             	sub    esp,0x8
c001fd93:	6a 1b                	push   0x1b
c001fd95:	50                   	push   eax
c001fd96:	e8 89 91 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd9b:	83 c4 10             	add    esp,0x10
c001fd9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fda1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fda4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fda7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fdac:	c9                   	leave  
c001fdad:	c3                   	ret    

c001fdae <APIC::eoi(unsigned char)>:
c001fdae:	55                   	push   ebp
c001fdaf:	89 e5                	mov    ebp,esp
c001fdb1:	83 ec 28             	sub    esp,0x28
c001fdb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fdb7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdc0:	e8 a7 ff ff ff       	call   c001fd6c <APIC::getBase()>
c001fdc5:	83 c4 10             	add    esp,0x10
c001fdc8:	05 b0 00 00 00       	add    eax,0xb0
c001fdcd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fdd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fdd3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fdd9:	90                   	nop
c001fdda:	c9                   	leave  
c001fddb:	c3                   	ret    

c001fddc <APIC::open(int, int, void*)>:
c001fddc:	55                   	push   ebp
c001fddd:	89 e5                	mov    ebp,esp
c001fddf:	57                   	push   edi
c001fde0:	56                   	push   esi
c001fde1:	53                   	push   ebx
c001fde2:	83 ec 2c             	sub    esp,0x2c
c001fde5:	83 ec 0c             	sub    esp,0xc
c001fde8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdeb:	e8 7c ff ff ff       	call   c001fd6c <APIC::getBase()>
c001fdf0:	83 c4 10             	add    esp,0x10
c001fdf3:	89 c2                	mov    edx,eax
c001fdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdf8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fdfe:	0f b6 f8             	movzx  edi,al
c001fe01:	89 d0                	mov    eax,edx
c001fe03:	ba 00 00 00 00       	mov    edx,0x0
c001fe08:	89 c1                	mov    ecx,eax
c001fe0a:	80 e5 ff             	and    ch,0xff
c001fe0d:	89 cb                	mov    ebx,ecx
c001fe0f:	0f b6 f2             	movzx  esi,dl
c001fe12:	89 d8                	mov    eax,ebx
c001fe14:	89 f2                	mov    edx,esi
c001fe16:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fe19:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fe1c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fe20:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fe24:	83 e0 00             	and    eax,0x0
c001fe27:	09 d0                	or     eax,edx
c001fe29:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fe2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe30:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fe36:	8d 50 01             	lea    edx,[eax+0x1]
c001fe39:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fe3c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fe42:	0f b6 d0             	movzx  edx,al
c001fe45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe48:	83 c2 08             	add    edx,0x8
c001fe4b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fe4f:	0f b6 c9             	movzx  ecx,cl
c001fe52:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fe58:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe62:	e8 05 ff ff ff       	call   c001fd6c <APIC::getBase()>
c001fe67:	83 c4 10             	add    esp,0x10
c001fe6a:	05 f0 00 00 00       	add    eax,0xf0
c001fe6f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fe72:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe75:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe77:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fe7a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fe81:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fe88:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe8b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fe8e:	89 10                	mov    DWORD PTR [eax],edx
c001fe90:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fe97:	a1 10 6d 02 c0       	mov    eax,ds:0xc0026d10
c001fe9c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe9f:	7d 7c                	jge    c001ff1d <APIC::open(int, int, void*)+0x141>
c001fea1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fea4:	8b 04 85 20 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd92e0]
c001feab:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001feae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001feb1:	8b 04 85 20 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd92e0]
c001feb8:	c1 e8 08             	shr    eax,0x8
c001febb:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001febf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fec2:	8b 04 85 20 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd92e0]
c001fec9:	c1 e8 18             	shr    eax,0x18
c001fecc:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fecf:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fed3:	75 40                	jne    c001ff15 <APIC::open(int, int, void*)+0x139>
c001fed5:	83 ec 0c             	sub    esp,0xc
c001fed8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fedb:	e8 8c fe ff ff       	call   c001fd6c <APIC::getBase()>
c001fee0:	83 c4 10             	add    esp,0x10
c001fee3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fee7:	75 07                	jne    c001fef0 <APIC::open(int, int, void*)+0x114>
c001fee9:	ba 60 03 00 00       	mov    edx,0x360
c001feee:	eb 05                	jmp    c001fef5 <APIC::open(int, int, void*)+0x119>
c001fef0:	ba 50 03 00 00       	mov    edx,0x350
c001fef5:	01 d0                	add    eax,edx
c001fef7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fefa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fefd:	8b 00                	mov    eax,DWORD PTR [eax]
c001feff:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001ff02:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001ff09:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001ff0d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001ff10:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ff13:	89 10                	mov    DWORD PTR [eax],edx
c001ff15:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001ff18:	e9 7a ff ff ff       	jmp    c001fe97 <APIC::open(int, int, void*)+0xbb>
c001ff1d:	b8 00 00 00 00       	mov    eax,0x0
c001ff22:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ff25:	5b                   	pop    ebx
c001ff26:	5e                   	pop    esi
c001ff27:	5f                   	pop    edi
c001ff28:	5d                   	pop    ebp
c001ff29:	c3                   	ret    

c001ff2a <IOAPIC::IOAPIC()>:
c001ff2a:	83 ec 0c             	sub    esp,0xc
c001ff2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff31:	83 ec 08             	sub    esp,0x8
c001ff34:	68 c4 54 02 c0       	push   0xc00254c4
c001ff39:	50                   	push   eax
c001ff3a:	e8 07 e2 fe ff       	call   c000e146 <Device::Device(char const*)>
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	ba ec 55 02 c0       	mov    edx,0xc00255ec
c001ff47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4b:	89 10                	mov    DWORD PTR [eax],edx
c001ff4d:	90                   	nop
c001ff4e:	83 c4 0c             	add    esp,0xc
c001ff51:	c3                   	ret    

c001ff52 <APIC::APIC()>:
c001ff52:	53                   	push   ebx
c001ff53:	83 ec 18             	sub    esp,0x18
c001ff56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff5a:	83 ec 08             	sub    esp,0x8
c001ff5d:	68 cc 54 02 c0       	push   0xc00254cc
c001ff62:	50                   	push   eax
c001ff63:	e8 56 e9 fe ff       	call   c000e8be <InterruptController::InterruptController(char const*)>
c001ff68:	83 c4 10             	add    esp,0x10
c001ff6b:	ba a4 55 02 c0       	mov    edx,0xc00255a4
c001ff70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff74:	89 10                	mov    DWORD PTR [eax],edx
c001ff76:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c001ff7b:	83 f0 01             	xor    eax,0x1
c001ff7e:	84 c0                	test   al,al
c001ff80:	0f 84 a1 00 00 00    	je     c0020027 <APIC::APIC()+0xd5>
c001ff86:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ff8b:	a0 c0 6d 02 c0       	mov    al,ds:0xc0026dc0
c001ff90:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ff94:	0f 83 86 00 00 00    	jae    c0020020 <APIC::APIC()+0xce>
c001ff9a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ffa2:	83 ec 0c             	sub    esp,0xc
c001ffa5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ffa9:	e8 15 9a fe ff       	call   c00099c3 <malloc>
c001ffae:	83 c4 10             	add    esp,0x10
c001ffb1:	89 c3                	mov    ebx,eax
c001ffb3:	83 ec 0c             	sub    esp,0xc
c001ffb6:	53                   	push   ebx
c001ffb7:	e8 6e ff ff ff       	call   c001ff2a <IOAPIC::IOAPIC()>
c001ffbc:	83 c4 10             	add    esp,0x10
c001ffbf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ffc3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ffc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ffcc:	89 14 85 c0 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7c40],edx
c001ffd3:	a1 a0 83 02 c0       	mov    eax,ds:0xc00283a0
c001ffd8:	40                   	inc    eax
c001ffd9:	a3 a0 83 02 c0       	mov    ds:0xc00283a0,eax
c001ffde:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c001ffe3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ffe9:	83 ec 08             	sub    esp,0x8
c001ffec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fff0:	50                   	push   eax
c001fff1:	e8 4c df fe ff       	call   c000df42 <Device::addChild(Device*)>
c001fff6:	83 c4 10             	add    esp,0x10
c001fff9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fffd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffff:	83 c0 08             	add    eax,0x8
c0020002:	8b 00                	mov    eax,DWORD PTR [eax]
c0020004:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0020009:	6a 00                	push   0x0
c002000b:	6a 00                	push   0x0
c002000d:	52                   	push   edx
c002000e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020012:	ff d0                	call   eax
c0020014:	83 c4 10             	add    esp,0x10
c0020017:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002001b:	e9 6b ff ff ff       	jmp    c001ff8b <APIC::APIC()+0x39>
c0020020:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c0020027:	90                   	nop
c0020028:	83 c4 18             	add    esp,0x18
c002002b:	5b                   	pop    ebx
c002002c:	c3                   	ret    
c002002d:	90                   	nop

c002002e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002002e:	55                   	push   ebp
c002002f:	89 e5                	mov    ebp,esp
c0020031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020034:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002003a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002003d:	72 1d                	jb     c002005c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002003f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020042:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002004b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020051:	01 d0                	add    eax,edx
c0020053:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020056:	73 04                	jae    c002005c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020058:	b0 01                	mov    al,0x1
c002005a:	eb 02                	jmp    c002005e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002005c:	b0 00                	mov    al,0x0
c002005e:	5d                   	pop    ebp
c002005f:	c3                   	ret    

c0020060 <IOAPIC::read(int)>:
c0020060:	55                   	push   ebp
c0020061:	89 e5                	mov    ebp,esp
c0020063:	83 ec 10             	sub    esp,0x10
c0020066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020069:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002006f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020072:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020075:	0f b6 d0             	movzx  edx,al
c0020078:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002007b:	89 10                	mov    DWORD PTR [eax],edx
c002007d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020080:	83 c0 10             	add    eax,0x10
c0020083:	8b 00                	mov    eax,DWORD PTR [eax]
c0020085:	c9                   	leave  
c0020086:	c3                   	ret    
c0020087:	90                   	nop

c0020088 <IOAPIC::open(int, int, void*)>:
c0020088:	55                   	push   ebp
c0020089:	89 e5                	mov    ebp,esp
c002008b:	57                   	push   edi
c002008c:	56                   	push   esi
c002008d:	53                   	push   ebx
c002008e:	83 ec 0c             	sub    esp,0xc
c0020091:	83 ec 0c             	sub    esp,0xc
c0020094:	68 f7 54 02 c0       	push   0xc00254f7
c0020099:	e8 5d ca fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c002009e:	83 c4 10             	add    esp,0x10
c00200a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00200a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00200ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00200b6:	8b 14 85 00 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9200]
c00200bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00200c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200c9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00200cf:	8b 14 85 80 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9180]
c00200d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200d9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00200df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200e2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00200e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200eb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00200f1:	0f b6 f8             	movzx  edi,al
c00200f4:	89 d0                	mov    eax,edx
c00200f6:	ba 00 00 00 00       	mov    edx,0x0
c00200fb:	89 c1                	mov    ecx,eax
c00200fd:	80 e5 ff             	and    ch,0xff
c0020100:	89 cb                	mov    ebx,ecx
c0020102:	0f b6 f2             	movzx  esi,dl
c0020105:	89 d8                	mov    eax,ebx
c0020107:	89 f2                	mov    edx,esi
c0020109:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002010c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002010f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020113:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020117:	83 e0 00             	and    eax,0x0
c002011a:	09 d0                	or     eax,edx
c002011c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020123:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020129:	8d 50 01             	lea    edx,[eax+0x1]
c002012c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002012f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020135:	0f b6 d0             	movzx  edx,al
c0020138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002013b:	83 c2 08             	add    edx,0x8
c002013e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020142:	0f b6 c9             	movzx  ecx,cl
c0020145:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002014b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002014f:	83 ec 08             	sub    esp,0x8
c0020152:	6a 01                	push   0x1
c0020154:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020157:	e8 04 ff ff ff       	call   c0020060 <IOAPIC::read(int)>
c002015c:	83 c4 10             	add    esp,0x10
c002015f:	c1 f8 10             	sar    eax,0x10
c0020162:	0f b6 c0             	movzx  eax,al
c0020165:	8d 50 01             	lea    edx,[eax+0x1]
c0020168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002016b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020171:	b8 00 00 00 00       	mov    eax,0x0
c0020176:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020179:	5b                   	pop    ebx
c002017a:	5e                   	pop    esi
c002017b:	5f                   	pop    edi
c002017c:	5d                   	pop    ebp
c002017d:	c3                   	ret    

c002017e <IOAPIC::write(int, int)>:
c002017e:	55                   	push   ebp
c002017f:	89 e5                	mov    ebp,esp
c0020181:	83 ec 10             	sub    esp,0x10
c0020184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020187:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002018d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020190:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020193:	0f b6 d0             	movzx  edx,al
c0020196:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020199:	89 10                	mov    DWORD PTR [eax],edx
c002019b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002019e:	8d 50 10             	lea    edx,[eax+0x10]
c00201a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00201a4:	89 02                	mov    DWORD PTR [edx],eax
c00201a6:	90                   	nop
c00201a7:	c9                   	leave  
c00201a8:	c3                   	ret    
c00201a9:	90                   	nop

c00201aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00201aa:	55                   	push   ebp
c00201ab:	89 e5                	mov    ebp,esp
c00201ad:	53                   	push   ebx
c00201ae:	83 ec 2c             	sub    esp,0x2c
c00201b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201b4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00201b7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00201ba:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00201bd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00201c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00201c3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00201c6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00201c9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00201cc:	88 d8                	mov    al,bl
c00201ce:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00201d1:	88 c8                	mov    al,cl
c00201d3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00201d6:	88 d0                	mov    al,dl
c00201d8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00201db:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00201df:	83 c0 08             	add    eax,0x8
c00201e2:	01 c0                	add    eax,eax
c00201e4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00201e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00201eb:	83 c0 08             	add    eax,0x8
c00201ee:	01 c0                	add    eax,eax
c00201f0:	40                   	inc    eax
c00201f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00201f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00201f7:	50                   	push   eax
c00201f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201fb:	e8 60 fe ff ff       	call   c0020060 <IOAPIC::read(int)>
c0020200:	83 c4 08             	add    esp,0x8
c0020203:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020206:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002020d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020210:	c1 e0 18             	shl    eax,0x18
c0020213:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020216:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020219:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002021c:	52                   	push   edx
c002021d:	50                   	push   eax
c002021e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020221:	e8 58 ff ff ff       	call   c002017e <IOAPIC::write(int, int)>
c0020226:	83 c4 0c             	add    esp,0xc
c0020229:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002022c:	50                   	push   eax
c002022d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020230:	e8 2b fe ff ff       	call   c0020060 <IOAPIC::read(int)>
c0020235:	83 c4 08             	add    esp,0x8
c0020238:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002023b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020242:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020249:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020250:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020254:	74 09                	je     c002025f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0020256:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002025d:	eb 07                	jmp    c0020266 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002025f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020266:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002026a:	74 09                	je     c0020275 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002026c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020273:	eb 07                	jmp    c002027c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020275:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002027c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020283:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020287:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002028a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002028d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020290:	52                   	push   edx
c0020291:	50                   	push   eax
c0020292:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020295:	e8 e4 fe ff ff       	call   c002017e <IOAPIC::write(int, int)>
c002029a:	83 c4 0c             	add    esp,0xc
c002029d:	90                   	nop
c002029e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00202a1:	c9                   	leave  
c00202a2:	c3                   	ret    
c00202a3:	90                   	nop

c00202a4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00202a4:	55                   	push   ebp
c00202a5:	89 e5                	mov    ebp,esp
c00202a7:	57                   	push   edi
c00202a8:	56                   	push   esi
c00202a9:	53                   	push   ebx
c00202aa:	83 ec 2c             	sub    esp,0x2c
c00202ad:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00202b0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00202b3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00202b7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00202bb:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00202bf:	74 5a                	je     c002031b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202c1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00202c5:	7f 44                	jg     c002030b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00202c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202ca:	05 a0 5b 02 c0       	add    eax,0xc0025ba0
c00202cf:	8a 00                	mov    al,BYTE PTR [eax]
c00202d1:	0f b6 c0             	movzx  eax,al
c00202d4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00202d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202da:	66 8b 84 00 a0 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9260]
c00202e2:	0f b7 c0             	movzx  eax,ax
c00202e5:	83 e0 02             	and    eax,0x2
c00202e8:	85 c0                	test   eax,eax
c00202ea:	74 04                	je     c00202f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00202ec:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00202f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202f3:	66 8b 84 00 a0 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9260]
c00202fb:	0f b7 c0             	movzx  eax,ax
c00202fe:	83 e0 08             	and    eax,0x8
c0020301:	85 c0                	test   eax,eax
c0020303:	74 16                	je     c002031b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020305:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020309:	eb 10                	jmp    c002031b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002030b:	83 ec 0c             	sub    esp,0xc
c002030e:	68 08 55 02 c0       	push   0xc0025508
c0020313:	e8 a5 40 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0020318:	83 c4 10             	add    esp,0x10
c002031b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002031f:	a1 a0 83 02 c0       	mov    eax,ds:0xc00283a0
c0020324:	83 ec 08             	sub    esp,0x8
c0020327:	50                   	push   eax
c0020328:	68 40 55 02 c0       	push   0xc0025540
c002032d:	e8 c9 c7 fe ff       	call   c000cafb <Dbg::kprintf(char const*, ...)>
c0020332:	83 c4 10             	add    esp,0x10
c0020335:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002033c:	a1 a0 83 02 c0       	mov    eax,ds:0xc00283a0
c0020341:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0020344:	7d 67                	jge    c00203ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020346:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020349:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c0020350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020353:	83 ec 08             	sub    esp,0x8
c0020356:	52                   	push   edx
c0020357:	50                   	push   eax
c0020358:	e8 d1 fc ff ff       	call   c002002e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002035d:	83 c4 10             	add    esp,0x10
c0020360:	84 c0                	test   al,al
c0020362:	74 44                	je     c00203a8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0020364:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020367:	8b 1c 85 c0 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7c40]
c002036e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0020372:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0020375:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0020379:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002037c:	83 c0 20             	add    eax,0x20
c002037f:	0f b6 f0             	movzx  esi,al
c0020382:	b8 00 00 00 00       	mov    eax,0x0
c0020387:	99                   	cdq    
c0020388:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002038b:	0f b6 c9             	movzx  ecx,cl
c002038e:	83 ec 04             	sub    esp,0x4
c0020391:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020394:	57                   	push   edi
c0020395:	56                   	push   esi
c0020396:	52                   	push   edx
c0020397:	50                   	push   eax
c0020398:	51                   	push   ecx
c0020399:	53                   	push   ebx
c002039a:	e8 0b fe ff ff       	call   c00201aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002039f:	83 c4 20             	add    esp,0x20
c00203a2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00203a6:	eb 05                	jmp    c00203ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00203a8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00203ab:	eb 8f                	jmp    c002033c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00203ad:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00203b0:	83 f0 01             	xor    eax,0x1
c00203b3:	84 c0                	test   al,al
c00203b5:	74 10                	je     c00203c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00203b7:	83 ec 0c             	sub    esp,0xc
c00203ba:	68 57 55 02 c0       	push   0xc0025557
c00203bf:	e8 f9 3f ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00203c4:	83 c4 10             	add    esp,0x10
c00203c7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00203cb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00203d2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00203d6:	7f 65                	jg     c002043d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00203d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203db:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203de:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203e5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203e8:	01 ca                	add    edx,ecx
c00203ea:	83 c2 54             	add    edx,0x54
c00203ed:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00203f1:	85 c0                	test   eax,eax
c00203f3:	75 43                	jne    c0020438 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00203f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203fb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020402:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020405:	01 ca                	add    edx,ecx
c0020407:	8d 4a 54             	lea    ecx,[edx+0x54]
c002040a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002040d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020414:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020417:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002041e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020421:	01 ca                	add    edx,ecx
c0020423:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0020429:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002042c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020430:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020433:	83 e8 20             	sub    eax,0x20
c0020436:	eb 1a                	jmp    c0020452 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0020438:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002043b:	eb 95                	jmp    c00203d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002043d:	83 ec 0c             	sub    esp,0xc
c0020440:	68 64 55 02 c0       	push   0xc0025564
c0020445:	e8 73 3f ff ff       	call   c00143bd <Krnl::panic(char const*)>
c002044a:	83 c4 10             	add    esp,0x10
c002044d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020452:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020455:	5b                   	pop    ebx
c0020456:	5e                   	pop    esi
c0020457:	5f                   	pop    edi
c0020458:	5d                   	pop    ebp
c0020459:	c3                   	ret    

c002045a <PIC::disable()>:
c002045a:	55                   	push   ebp
c002045b:	89 e5                	mov    ebp,esp
c002045d:	83 ec 10             	sub    esp,0x10
c0020460:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0020466:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002046a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002046d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020471:	ee                   	out    dx,al
c0020472:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0020478:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002047c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002047f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0020483:	ee                   	out    dx,al
c0020484:	90                   	nop
c0020485:	c9                   	leave  
c0020486:	c3                   	ret    
c0020487:	90                   	nop

c0020488 <PIC::close(int, int, void*)>:
c0020488:	55                   	push   ebp
c0020489:	89 e5                	mov    ebp,esp
c002048b:	83 ec 08             	sub    esp,0x8
c002048e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020491:	8b 00                	mov    eax,DWORD PTR [eax]
c0020493:	83 c0 3c             	add    eax,0x3c
c0020496:	8b 00                	mov    eax,DWORD PTR [eax]
c0020498:	83 ec 0c             	sub    esp,0xc
c002049b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002049e:	ff d0                	call   eax
c00204a0:	83 c4 10             	add    esp,0x10
c00204a3:	b8 00 00 00 00       	mov    eax,0x0
c00204a8:	c9                   	leave  
c00204a9:	c3                   	ret    

c00204aa <PIC::PIC()>:
c00204aa:	83 ec 0c             	sub    esp,0xc
c00204ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b1:	83 ec 08             	sub    esp,0x8
c00204b4:	68 10 56 02 c0       	push   0xc0025610
c00204b9:	50                   	push   eax
c00204ba:	e8 ff e3 fe ff       	call   c000e8be <InterruptController::InterruptController(char const*)>
c00204bf:	83 c4 10             	add    esp,0x10
c00204c2:	ba 3c 56 02 c0       	mov    edx,0xc002563c
c00204c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204cb:	89 10                	mov    DWORD PTR [eax],edx
c00204cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204d7:	0f b6 d0             	movzx  edx,al
c00204da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204de:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00204e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204ef:	0f b6 d0             	movzx  edx,al
c00204f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020505:	8d 50 01             	lea    edx,[eax+0x1]
c0020508:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002050c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020512:	0f b6 d0             	movzx  edx,al
c0020515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020519:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002051d:	83 e1 3f             	and    ecx,0x3f
c0020520:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020528:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002052e:	0f b6 d0             	movzx  edx,al
c0020531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020535:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002053c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020540:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020546:	0f b6 d0             	movzx  edx,al
c0020549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002054d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020556:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002055c:	8d 50 01             	lea    edx,[eax+0x1]
c002055f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020563:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020569:	0f b6 d0             	movzx  edx,al
c002056c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020570:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020574:	83 e1 3f             	and    ecx,0x3f
c0020577:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002057b:	90                   	nop
c002057c:	83 c4 0c             	add    esp,0xc
c002057f:	c3                   	ret    

c0020580 <PIC::ioWait()>:
c0020580:	eb 00                	jmp    c0020582 <PIC::ioWait()+0x2>
c0020582:	eb 00                	jmp    c0020584 <PIC::ioWait()+0x4>
c0020584:	90                   	nop
c0020585:	c3                   	ret    

c0020586 <PIC::getIRQReg(int)>:
c0020586:	55                   	push   ebp
c0020587:	89 e5                	mov    ebp,esp
c0020589:	83 ec 10             	sub    esp,0x10
c002058c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002058f:	0f b6 c0             	movzx  eax,al
c0020592:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020598:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002059b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002059e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00205a2:	ee                   	out    dx,al
c00205a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00205a6:	0f b6 c0             	movzx  eax,al
c00205a9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00205af:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00205b2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00205b5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00205b9:	ee                   	out    dx,al
c00205ba:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00205c0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00205c4:	89 c2                	mov    edx,eax
c00205c6:	ec                   	in     al,dx
c00205c7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00205ca:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00205cd:	0f b6 c0             	movzx  eax,al
c00205d0:	c1 e0 08             	shl    eax,0x8
c00205d3:	89 c1                	mov    ecx,eax
c00205d5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00205db:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00205df:	89 c2                	mov    edx,eax
c00205e1:	ec                   	in     al,dx
c00205e2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00205e5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00205e8:	0f b6 c0             	movzx  eax,al
c00205eb:	09 c8                	or     eax,ecx
c00205ed:	c9                   	leave  
c00205ee:	c3                   	ret    
c00205ef:	90                   	nop

c00205f0 <PIC::eoi(unsigned char)>:
c00205f0:	55                   	push   ebp
c00205f1:	89 e5                	mov    ebp,esp
c00205f3:	83 ec 14             	sub    esp,0x14
c00205f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00205f9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00205fc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0020600:	75 1e                	jne    c0020620 <PIC::eoi(unsigned char)+0x30>
c0020602:	6a 0b                	push   0xb
c0020604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020607:	e8 7a ff ff ff       	call   c0020586 <PIC::getIRQReg(int)>
c002060c:	83 c4 08             	add    esp,0x8
c002060f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0020613:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0020617:	25 80 00 00 00       	and    eax,0x80
c002061c:	85 c0                	test   eax,eax
c002061e:	74 5f                	je     c002067f <PIC::eoi(unsigned char)+0x8f>
c0020620:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0020624:	75 2d                	jne    c0020653 <PIC::eoi(unsigned char)+0x63>
c0020626:	6a 0b                	push   0xb
c0020628:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002062b:	e8 56 ff ff ff       	call   c0020586 <PIC::getIRQReg(int)>
c0020630:	83 c4 08             	add    esp,0x8
c0020633:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0020637:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002063a:	66 85 c0             	test   ax,ax
c002063d:	78 14                	js     c0020653 <PIC::eoi(unsigned char)+0x63>
c002063f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0020645:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0020649:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002064c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020650:	ee                   	out    dx,al
c0020651:	eb 2d                	jmp    c0020680 <PIC::eoi(unsigned char)+0x90>
c0020653:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0020657:	76 12                	jbe    c002066b <PIC::eoi(unsigned char)+0x7b>
c0020659:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002065f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0020663:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020666:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002066a:	ee                   	out    dx,al
c002066b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020671:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0020675:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020678:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002067c:	ee                   	out    dx,al
c002067d:	eb 01                	jmp    c0020680 <PIC::eoi(unsigned char)+0x90>
c002067f:	90                   	nop
c0020680:	c9                   	leave  
c0020681:	c3                   	ret    

c0020682 <PIC::remap()>:
c0020682:	55                   	push   ebp
c0020683:	89 e5                	mov    ebp,esp
c0020685:	83 ec 48             	sub    esp,0x48
c0020688:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002068f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0020696:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002069c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002069f:	89 c2                	mov    edx,eax
c00206a1:	ec                   	in     al,dx
c00206a2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00206a5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00206a8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00206ab:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00206b1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00206b4:	89 c2                	mov    edx,eax
c00206b6:	ec                   	in     al,dx
c00206b7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00206ba:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00206bd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00206c0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00206c6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00206ca:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00206cd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00206d0:	ee                   	out    dx,al
c00206d1:	83 ec 0c             	sub    esp,0xc
c00206d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206d7:	e8 a4 fe ff ff       	call   c0020580 <PIC::ioWait()>
c00206dc:	83 c4 10             	add    esp,0x10
c00206df:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00206e5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00206e9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00206ec:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00206ef:	ee                   	out    dx,al
c00206f0:	83 ec 0c             	sub    esp,0xc
c00206f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206f6:	e8 85 fe ff ff       	call   c0020580 <PIC::ioWait()>
c00206fb:	83 c4 10             	add    esp,0x10
c00206fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0020701:	0f b6 c0             	movzx  eax,al
c0020704:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002070a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002070d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0020710:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0020713:	ee                   	out    dx,al
c0020714:	83 ec 0c             	sub    esp,0xc
c0020717:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002071a:	e8 61 fe ff ff       	call   c0020580 <PIC::ioWait()>
c002071f:	83 c4 10             	add    esp,0x10
c0020722:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020725:	0f b6 c0             	movzx  eax,al
c0020728:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002072e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0020731:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0020734:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020737:	ee                   	out    dx,al
c0020738:	83 ec 0c             	sub    esp,0xc
c002073b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002073e:	e8 3d fe ff ff       	call   c0020580 <PIC::ioWait()>
c0020743:	83 c4 10             	add    esp,0x10
c0020746:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002074c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0020750:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0020753:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0020756:	ee                   	out    dx,al
c0020757:	83 ec 0c             	sub    esp,0xc
c002075a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002075d:	e8 1e fe ff ff       	call   c0020580 <PIC::ioWait()>
c0020762:	83 c4 10             	add    esp,0x10
c0020765:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002076b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002076f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0020772:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020775:	ee                   	out    dx,al
c0020776:	83 ec 0c             	sub    esp,0xc
c0020779:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002077c:	e8 ff fd ff ff       	call   c0020580 <PIC::ioWait()>
c0020781:	83 c4 10             	add    esp,0x10
c0020784:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002078a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002078e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020791:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0020794:	ee                   	out    dx,al
c0020795:	83 ec 0c             	sub    esp,0xc
c0020798:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002079b:	e8 e0 fd ff ff       	call   c0020580 <PIC::ioWait()>
c00207a0:	83 c4 10             	add    esp,0x10
c00207a3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00207a9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00207ad:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00207b0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00207b3:	ee                   	out    dx,al
c00207b4:	83 ec 0c             	sub    esp,0xc
c00207b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00207ba:	e8 c1 fd ff ff       	call   c0020580 <PIC::ioWait()>
c00207bf:	83 c4 10             	add    esp,0x10
c00207c2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00207c6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00207cc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00207cf:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00207d2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00207d5:	ee                   	out    dx,al
c00207d6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00207da:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00207e0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00207e3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00207e6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00207e9:	ee                   	out    dx,al
c00207ea:	90                   	nop
c00207eb:	c9                   	leave  
c00207ec:	c3                   	ret    
c00207ed:	90                   	nop

c00207ee <PIC::open(int, int, void*)>:
c00207ee:	55                   	push   ebp
c00207ef:	89 e5                	mov    ebp,esp
c00207f1:	83 ec 18             	sub    esp,0x18
c00207f4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00207fa:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00207fe:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020801:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020805:	ee                   	out    dx,al
c0020806:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002080c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0020810:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020813:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020817:	ee                   	out    dx,al
c0020818:	83 ec 0c             	sub    esp,0xc
c002081b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002081e:	e8 5f fe ff ff       	call   c0020682 <PIC::remap()>
c0020823:	83 c4 10             	add    esp,0x10
c0020826:	b8 00 00 00 00       	mov    eax,0x0
c002082b:	c9                   	leave  
c002082c:	c3                   	ret    
c002082d:	66 90                	xchg   ax,ax
c002082f:	90                   	nop

c0020830 <APICTimer::close(int, int, void*)>:
c0020830:	b8 00 00 00 00       	mov    eax,0x0
c0020835:	c3                   	ret    
c0020836:	66 90                	xchg   ax,ax

c0020838 <apicTimerHandler(regs*, void*)>:
c0020838:	83 ec 0c             	sub    esp,0xc
c002083b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002083f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020841:	b8 10 27 00 00       	mov    eax,0x2710
c0020846:	ba 00 00 00 00       	mov    edx,0x0
c002084b:	f7 f1                	div    ecx
c002084d:	83 ec 0c             	sub    esp,0xc
c0020850:	50                   	push   eax
c0020851:	e8 73 ff fe ff       	call   c00107c9 <timerHandler(unsigned int)>
c0020856:	83 c4 10             	add    esp,0x10
c0020859:	90                   	nop
c002085a:	83 c4 0c             	add    esp,0xc
c002085d:	c3                   	ret    
c002085e:	66 90                	xchg   ax,ax

c0020860 <APICTimer::write(int)>:
c0020860:	83 ec 1c             	sub    esp,0x1c
c0020863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020867:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002086b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020871:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c0020876:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002087c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0020882:	83 ec 0c             	sub    esp,0xc
c0020885:	50                   	push   eax
c0020886:	e8 e1 f4 ff ff       	call   c001fd6c <APIC::getBase()>
c002088b:	83 c4 10             	add    esp,0x10
c002088e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020892:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c0020897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002089b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002089f:	05 e0 03 00 00       	add    eax,0x3e0
c00208a4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00208aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208ae:	05 80 03 00 00       	add    eax,0x380
c00208b3:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00208b9:	fb                   	sti    
c00208ba:	66 90                	xchg   ax,ax
c00208bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208c0:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00208c6:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c00208cb:	39 c2                	cmp    edx,eax
c00208cd:	76 05                	jbe    c00208d4 <APICTimer::write(int)+0x74>
c00208cf:	eb eb                	jmp    c00208bc <APICTimer::write(int)+0x5c>
c00208d1:	8d 76 00             	lea    esi,[esi+0x0]
c00208d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208d8:	05 20 03 00 00       	add    eax,0x320
c00208dd:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00208e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208e7:	05 90 03 00 00       	add    eax,0x390
c00208ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00208ee:	f7 d0                	not    eax
c00208f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00208f4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00208f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208fc:	ba 00 00 00 00       	mov    edx,0x0
c0020901:	f7 f1                	div    ecx
c0020903:	89 04 24             	mov    DWORD PTR [esp],eax
c0020906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002090a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020910:	0d 00 00 02 00       	or     eax,0x20000
c0020915:	89 c2                	mov    edx,eax
c0020917:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002091b:	05 20 03 00 00       	add    eax,0x320
c0020920:	89 10                	mov    DWORD PTR [eax],edx
c0020922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020926:	05 e0 03 00 00       	add    eax,0x3e0
c002092b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020935:	05 80 03 00 00       	add    eax,0x380
c002093a:	89 c2                	mov    edx,eax
c002093c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002093f:	89 02                	mov    DWORD PTR [edx],eax
c0020941:	90                   	nop
c0020942:	83 c4 1c             	add    esp,0x1c
c0020945:	c3                   	ret    
c0020946:	66 90                	xchg   ax,ax

c0020948 <APICTimer::open(int, int, void*)>:
c0020948:	57                   	push   edi
c0020949:	56                   	push   esi
c002094a:	53                   	push   ebx
c002094b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002094f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020951:	83 c0 24             	add    eax,0x24
c0020954:	8b 00                	mov    eax,DWORD PTR [eax]
c0020956:	83 ec 08             	sub    esp,0x8
c0020959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002095d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020961:	ff d0                	call   eax
c0020963:	83 c4 10             	add    esp,0x10
c0020966:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c002096b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020971:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0020977:	83 ec 0c             	sub    esp,0xc
c002097a:	50                   	push   eax
c002097b:	e8 ec f3 ff ff       	call   c001fd6c <APIC::getBase()>
c0020980:	83 c4 10             	add    esp,0x10
c0020983:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0020989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002098d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020993:	0f b6 f8             	movzx  edi,al
c0020996:	89 d0                	mov    eax,edx
c0020998:	ba 00 00 00 00       	mov    edx,0x0
c002099d:	89 c1                	mov    ecx,eax
c002099f:	80 e5 ff             	and    ch,0xff
c00209a2:	89 cb                	mov    ebx,ecx
c00209a4:	0f b6 f2             	movzx  esi,dl
c00209a7:	89 d8                	mov    eax,ebx
c00209a9:	89 f2                	mov    edx,esi
c00209ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00209af:	8d 5f 08             	lea    ebx,[edi+0x8]
c00209b2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00209b6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00209ba:	83 e0 00             	and    eax,0x0
c00209bd:	09 d0                	or     eax,edx
c00209bf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00209c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00209cd:	8d 50 01             	lea    edx,[eax+0x1]
c00209d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00209d4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00209da:	0f b6 d0             	movzx  edx,al
c00209dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209e1:	83 c2 08             	add    edx,0x8
c00209e4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00209e8:	0f b6 c9             	movzx  ecx,cl
c00209eb:	81 c9 00 00 01 00    	or     ecx,0x10000
c00209f1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00209f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209fd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020a0b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020a11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020a15:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020a1b:	83 ec 0c             	sub    esp,0xc
c0020a1e:	51                   	push   ecx
c0020a1f:	6a 01                	push   0x1
c0020a21:	68 38 08 02 c0       	push   0xc0020838
c0020a26:	52                   	push   edx
c0020a27:	50                   	push   eax
c0020a28:	e8 8d d4 fe ff       	call   c000deba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020a2d:	83 c4 20             	add    esp,0x20
c0020a30:	89 c2                	mov    edx,eax
c0020a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a36:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a3c:	b8 00 00 00 00       	mov    eax,0x0
c0020a41:	5b                   	pop    ebx
c0020a42:	5e                   	pop    esi
c0020a43:	5f                   	pop    edi
c0020a44:	c3                   	ret    
c0020a45:	90                   	nop
c0020a46:	66 90                	xchg   ax,ax

c0020a48 <APICTimer::APICTimer()>:
c0020a48:	83 ec 0c             	sub    esp,0xc
c0020a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a4f:	83 ec 08             	sub    esp,0x8
c0020a52:	68 7c 56 02 c0       	push   0xc002567c
c0020a57:	50                   	push   eax
c0020a58:	e8 db fc fe ff       	call   c0010738 <Timer::Timer(char const*)>
c0020a5d:	83 c4 10             	add    esp,0x10
c0020a60:	ba 90 56 02 c0       	mov    edx,0xc0025690
c0020a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a69:	89 10                	mov    DWORD PTR [eax],edx
c0020a6b:	90                   	nop
c0020a6c:	83 c4 0c             	add    esp,0xc
c0020a6f:	c3                   	ret    

c0020a70 <PIT::write(int)>:
c0020a70:	83 ec 10             	sub    esp,0x10
c0020a73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020a7b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a85:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c0020a8a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020a8f:	99                   	cdq    
c0020a90:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020a94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a98:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a9f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020aa4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020aa8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020aad:	ee                   	out    dx,al
c0020aae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ab2:	0f b6 c0             	movzx  eax,al
c0020ab5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020abc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020ac0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020ac4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020ac9:	ee                   	out    dx,al
c0020aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ace:	c1 f8 08             	sar    eax,0x8
c0020ad1:	0f b6 c0             	movzx  eax,al
c0020ad4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020adb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020adf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020ae3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020ae8:	ee                   	out    dx,al
c0020ae9:	90                   	nop
c0020aea:	83 c4 10             	add    esp,0x10
c0020aed:	c3                   	ret    
c0020aee:	66 90                	xchg   ax,ax

c0020af0 <pitHandler(regs*, void*)>:
c0020af0:	83 ec 0c             	sub    esp,0xc
c0020af3:	8b 0d e4 83 02 c0    	mov    ecx,DWORD PTR ds:0xc00283e4
c0020af9:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020afe:	99                   	cdq    
c0020aff:	f7 f9                	idiv   ecx
c0020b01:	83 ec 0c             	sub    esp,0xc
c0020b04:	50                   	push   eax
c0020b05:	e8 bf fc fe ff       	call   c00107c9 <timerHandler(unsigned int)>
c0020b0a:	83 c4 10             	add    esp,0x10
c0020b0d:	90                   	nop
c0020b0e:	83 c4 0c             	add    esp,0xc
c0020b11:	c3                   	ret    
c0020b12:	66 90                	xchg   ax,ax

c0020b14 <PIT::open(int, int, void*)>:
c0020b14:	83 ec 0c             	sub    esp,0xc
c0020b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b1d:	83 c0 24             	add    eax,0x24
c0020b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b22:	83 ec 08             	sub    esp,0x8
c0020b25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b2d:	ff d0                	call   eax
c0020b2f:	83 c4 10             	add    esp,0x10
c0020b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b36:	83 ec 0c             	sub    esp,0xc
c0020b39:	6a 00                	push   0x0
c0020b3b:	6a 01                	push   0x1
c0020b3d:	68 f0 0a 02 c0       	push   0xc0020af0
c0020b42:	6a 00                	push   0x0
c0020b44:	50                   	push   eax
c0020b45:	e8 70 d3 fe ff       	call   c000deba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020b4a:	83 c4 20             	add    esp,0x20
c0020b4d:	89 c2                	mov    edx,eax
c0020b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b53:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020b59:	b8 00 00 00 00       	mov    eax,0x0
c0020b5e:	83 c4 0c             	add    esp,0xc
c0020b61:	c3                   	ret    
c0020b62:	66 90                	xchg   ax,ax

c0020b64 <PIT::close(int, int, void*)>:
c0020b64:	83 ec 0c             	sub    esp,0xc
c0020b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b6b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b79:	6a 01                	push   0x1
c0020b7b:	68 f0 0a 02 c0       	push   0xc0020af0
c0020b80:	6a 00                	push   0x0
c0020b82:	50                   	push   eax
c0020b83:	e8 7c d3 fe ff       	call   c000df04 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020b88:	83 c4 10             	add    esp,0x10
c0020b8b:	b8 00 00 00 00       	mov    eax,0x0
c0020b90:	83 c4 0c             	add    esp,0xc
c0020b93:	c3                   	ret    

c0020b94 <PIT::PIT()>:
c0020b94:	83 ec 0c             	sub    esp,0xc
c0020b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9b:	83 ec 08             	sub    esp,0x8
c0020b9e:	68 b8 56 02 c0       	push   0xc00256b8
c0020ba3:	50                   	push   eax
c0020ba4:	e8 8f fb fe ff       	call   c0010738 <Timer::Timer(char const*)>
c0020ba9:	83 c4 10             	add    esp,0x10
c0020bac:	ba e0 56 02 c0       	mov    edx,0xc00256e0
c0020bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb5:	89 10                	mov    DWORD PTR [eax],edx
c0020bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bbb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bc1:	0f b6 d0             	movzx  edx,al
c0020bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bc8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bd3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bd9:	0f b6 d0             	movzx  edx,al
c0020bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bef:	8d 50 01             	lea    edx,[eax+0x1]
c0020bf2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bf6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020bfc:	0f b6 d0             	movzx  edx,al
c0020bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c03:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020c07:	83 e1 3f             	and    ecx,0x3f
c0020c0a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020c0e:	90                   	nop
c0020c0f:	83 c4 0c             	add    esp,0xc
c0020c12:	c3                   	ret    
c0020c13:	66 90                	xchg   ax,ax
c0020c15:	66 90                	xchg   ax,ax
c0020c17:	66 90                	xchg   ax,ax
c0020c19:	66 90                	xchg   ax,ax
c0020c1b:	66 90                	xchg   ax,ax
c0020c1d:	66 90                	xchg   ax,ax
c0020c1f:	90                   	nop

c0020c20 <avxDetect>:
c0020c20:	b8 00 00 00 00       	mov    eax,0x0
c0020c25:	c3                   	ret    

c0020c26 <avxSave>:
c0020c26:	c3                   	ret    

c0020c27 <avxLoad>:
c0020c27:	c3                   	ret    

c0020c28 <avxInit>:
c0020c28:	c3                   	ret    

c0020c29 <avxClose>:
c0020c29:	c3                   	ret    

c0020c2a <wouldSheSayYes>:
c0020c2a:	c3                   	ret    
c0020c2b:	49                   	dec    ecx
c0020c2c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020c30:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020c34:	75 20                	jne    c0020c56 <sseDetect.noSSE+0x1>
c0020c36:	4e                   	dec    esi
c0020c37:	79 61                	jns    c0020c9a <x87Detect+0x14>
c0020c39:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020c3e:	66 90                	xchg   ax,ax

c0020c40 <absolutelyNoChanceInHell>:
c0020c40:	b8 01 00 00 00       	mov    eax,0x1
c0020c45:	0f a2                	cpuid  
c0020c47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020c4d:	74 06                	je     c0020c55 <sseDetect.noSSE>
c0020c4f:	b8 01 00 00 00       	mov    eax,0x1
c0020c54:	c3                   	ret    

c0020c55 <sseDetect.noSSE>:
c0020c55:	31 c0                	xor    eax,eax
c0020c57:	c3                   	ret    

c0020c58 <sseSave>:
c0020c58:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020c5d:	c3                   	ret    

c0020c5e <sseLoad>:
c0020c5e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020c63:	c3                   	ret    

c0020c64 <sseInit>:
c0020c64:	e8 49 00 00 00       	call   c0020cb2 <x87Init>
c0020c69:	0f 20 e0             	mov    eax,cr4
c0020c6c:	66 0d 00 06          	or     ax,0x600
c0020c70:	0f 22 e0             	mov    cr4,eax
c0020c73:	c3                   	ret    

c0020c74 <sseClose>:
c0020c74:	c3                   	ret    
c0020c75:	66 90                	xchg   ax,ax
c0020c77:	66 90                	xchg   ax,ax
c0020c79:	66 90                	xchg   ax,ax
c0020c7b:	66 90                	xchg   ax,ax
c0020c7d:	66 90                	xchg   ax,ax
c0020c7f:	90                   	nop

c0020c80 <value_37F>:
c0020c80:	7f 03                	jg     c0020c85 <value_37A+0x1>

c0020c82 <value_37E>:
c0020c82:	7e 03                	jle    c0020c87 <x87Detect+0x1>

c0020c84 <value_37A>:
c0020c84:	7a 03                	jp     c0020c89 <x87Detect+0x3>

c0020c86 <x87Detect>:
c0020c86:	b8 01 00 00 00       	mov    eax,0x1
c0020c8b:	0f a2                	cpuid  
c0020c8d:	f7 c2 01 00 00 00    	test   edx,0x1
c0020c93:	74 06                	je     c0020c9b <x87Detect.nox87>
c0020c95:	b8 01 00 00 00       	mov    eax,0x1
c0020c9a:	c3                   	ret    

c0020c9b <x87Detect.nox87>:
c0020c9b:	b8 00 00 00 00       	mov    eax,0x0
c0020ca0:	c3                   	ret    

c0020ca1 <x87Save>:
c0020ca1:	55                   	push   ebp
c0020ca2:	89 e5                	mov    ebp,esp
c0020ca4:	9b dd 75 08          	fsave  [ebp+0x8]
c0020ca8:	c9                   	leave  
c0020ca9:	c3                   	ret    

c0020caa <x87Load>:
c0020caa:	55                   	push   ebp
c0020cab:	89 e5                	mov    ebp,esp
c0020cad:	dd 65 08             	frstor [ebp+0x8]
c0020cb0:	c9                   	leave  
c0020cb1:	c3                   	ret    

c0020cb2 <x87Init>:
c0020cb2:	9b db e3             	finit  
c0020cb5:	0f 20 c0             	mov    eax,cr0
c0020cb8:	66 25 fb ff          	and    ax,0xfffb
c0020cbc:	66 0d 22 00          	or     ax,0x22
c0020cc0:	0f 22 c0             	mov    cr0,eax
c0020cc3:	0f 06                	clts   
c0020cc5:	d9 2d 84 0c 02 c0    	fldcw  WORD PTR ds:0xc0020c84
c0020ccb:	c3                   	ret    

c0020ccc <x87Close>:
c0020ccc:	c3                   	ret    
c0020ccd:	66 90                	xchg   ax,ax
c0020ccf:	90                   	nop

c0020cd0 <__do_global_ctors_aux>:
c0020cd0:	a1 6c 1e 02 c0       	mov    eax,ds:0xc0021e6c
c0020cd5:	83 f8 ff             	cmp    eax,0xffffffff
c0020cd8:	74 1a                	je     c0020cf4 <__do_global_ctors_aux+0x24>
c0020cda:	55                   	push   ebp
c0020cdb:	89 e5                	mov    ebp,esp
c0020cdd:	53                   	push   ebx
c0020cde:	52                   	push   edx
c0020cdf:	bb 6c 1e 02 c0       	mov    ebx,0xc0021e6c
c0020ce4:	ff d0                	call   eax
c0020ce6:	83 eb 04             	sub    ebx,0x4
c0020ce9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020ceb:	83 f8 ff             	cmp    eax,0xffffffff
c0020cee:	75 f4                	jne    c0020ce4 <__do_global_ctors_aux+0x14>
c0020cf0:	58                   	pop    eax
c0020cf1:	5b                   	pop    ebx
c0020cf2:	5d                   	pop    ebp
c0020cf3:	c3                   	ret    
c0020cf4:	c3                   	ret    
c0020cf5:	66 90                	xchg   ax,ax
c0020cf7:	90                   	nop

c0020cf8 <__divdi3>:
c0020cf8:	55                   	push   ebp
c0020cf9:	57                   	push   edi
c0020cfa:	56                   	push   esi
c0020cfb:	53                   	push   ebx
c0020cfc:	83 ec 1c             	sub    esp,0x1c
c0020cff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020d03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020d07:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d0a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020d16:	85 db                	test   ebx,ebx
c0020d18:	0f 88 8e 00 00 00    	js     c0020dac <__divdi3+0xb4>
c0020d1e:	89 dd                	mov    ebp,ebx
c0020d20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020d28:	89 d3                	mov    ebx,edx
c0020d2a:	85 d2                	test   edx,edx
c0020d2c:	79 0d                	jns    c0020d3b <__divdi3+0x43>
c0020d2e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020d32:	f7 d8                	neg    eax
c0020d34:	83 d2 00             	adc    edx,0x0
c0020d37:	f7 da                	neg    edx
c0020d39:	89 d3                	mov    ebx,edx
c0020d3b:	89 c7                	mov    edi,eax
c0020d3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d40:	85 db                	test   ebx,ebx
c0020d42:	75 48                	jne    c0020d8c <__divdi3+0x94>
c0020d44:	39 ef                	cmp    edi,ebp
c0020d46:	76 24                	jbe    c0020d6c <__divdi3+0x74>
c0020d48:	89 ea                	mov    edx,ebp
c0020d4a:	f7 f7                	div    edi
c0020d4c:	89 c1                	mov    ecx,eax
c0020d4e:	31 f6                	xor    esi,esi
c0020d50:	89 c8                	mov    eax,ecx
c0020d52:	89 f2                	mov    edx,esi
c0020d54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d58:	85 c9                	test   ecx,ecx
c0020d5a:	74 07                	je     c0020d63 <__divdi3+0x6b>
c0020d5c:	f7 d8                	neg    eax
c0020d5e:	83 d2 00             	adc    edx,0x0
c0020d61:	f7 da                	neg    edx
c0020d63:	83 c4 1c             	add    esp,0x1c
c0020d66:	5b                   	pop    ebx
c0020d67:	5e                   	pop    esi
c0020d68:	5f                   	pop    edi
c0020d69:	5d                   	pop    ebp
c0020d6a:	c3                   	ret    
c0020d6b:	90                   	nop
c0020d6c:	85 ff                	test   edi,edi
c0020d6e:	75 0b                	jne    c0020d7b <__divdi3+0x83>
c0020d70:	b8 01 00 00 00       	mov    eax,0x1
c0020d75:	31 d2                	xor    edx,edx
c0020d77:	f7 f3                	div    ebx
c0020d79:	89 c7                	mov    edi,eax
c0020d7b:	31 d2                	xor    edx,edx
c0020d7d:	89 e8                	mov    eax,ebp
c0020d7f:	f7 f7                	div    edi
c0020d81:	89 c6                	mov    esi,eax
c0020d83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d86:	f7 f7                	div    edi
c0020d88:	89 c1                	mov    ecx,eax
c0020d8a:	eb c4                	jmp    c0020d50 <__divdi3+0x58>
c0020d8c:	39 eb                	cmp    ebx,ebp
c0020d8e:	77 3c                	ja     c0020dcc <__divdi3+0xd4>
c0020d90:	0f bd f3             	bsr    esi,ebx
c0020d93:	83 f6 1f             	xor    esi,0x1f
c0020d96:	75 40                	jne    c0020dd8 <__divdi3+0xe0>
c0020d98:	39 eb                	cmp    ebx,ebp
c0020d9a:	72 09                	jb     c0020da5 <__divdi3+0xad>
c0020d9c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020d9f:	0f 87 97 00 00 00    	ja     c0020e3c <__divdi3+0x144>
c0020da5:	b9 01 00 00 00       	mov    ecx,0x1
c0020daa:	eb a4                	jmp    c0020d50 <__divdi3+0x58>
c0020dac:	f7 d9                	neg    ecx
c0020dae:	83 d3 00             	adc    ebx,0x0
c0020db1:	f7 db                	neg    ebx
c0020db3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020db6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020dba:	89 dd                	mov    ebp,ebx
c0020dbc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020dc4:	e9 5f ff ff ff       	jmp    c0020d28 <__divdi3+0x30>
c0020dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0020dcc:	31 f6                	xor    esi,esi
c0020dce:	31 c9                	xor    ecx,ecx
c0020dd0:	e9 7b ff ff ff       	jmp    c0020d50 <__divdi3+0x58>
c0020dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0020dd8:	b8 20 00 00 00       	mov    eax,0x20
c0020ddd:	29 f0                	sub    eax,esi
c0020ddf:	89 f1                	mov    ecx,esi
c0020de1:	d3 e3                	shl    ebx,cl
c0020de3:	89 fa                	mov    edx,edi
c0020de5:	88 c1                	mov    cl,al
c0020de7:	d3 ea                	shr    edx,cl
c0020de9:	09 da                	or     edx,ebx
c0020deb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020def:	89 f1                	mov    ecx,esi
c0020df1:	d3 e7                	shl    edi,cl
c0020df3:	89 eb                	mov    ebx,ebp
c0020df5:	88 c1                	mov    cl,al
c0020df7:	d3 eb                	shr    ebx,cl
c0020df9:	89 f1                	mov    ecx,esi
c0020dfb:	d3 e5                	shl    ebp,cl
c0020dfd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020e00:	88 c1                	mov    cl,al
c0020e02:	d3 ea                	shr    edx,cl
c0020e04:	09 d5                	or     ebp,edx
c0020e06:	89 e8                	mov    eax,ebp
c0020e08:	89 da                	mov    edx,ebx
c0020e0a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020e0e:	89 d3                	mov    ebx,edx
c0020e10:	89 c5                	mov    ebp,eax
c0020e12:	f7 e7                	mul    edi
c0020e14:	39 d3                	cmp    ebx,edx
c0020e16:	72 18                	jb     c0020e30 <__divdi3+0x138>
c0020e18:	74 0a                	je     c0020e24 <__divdi3+0x12c>
c0020e1a:	89 e9                	mov    ecx,ebp
c0020e1c:	31 f6                	xor    esi,esi
c0020e1e:	e9 2d ff ff ff       	jmp    c0020d50 <__divdi3+0x58>
c0020e23:	90                   	nop
c0020e24:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020e27:	89 f1                	mov    ecx,esi
c0020e29:	d3 e7                	shl    edi,cl
c0020e2b:	39 c7                	cmp    edi,eax
c0020e2d:	73 eb                	jae    c0020e1a <__divdi3+0x122>
c0020e2f:	90                   	nop
c0020e30:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020e33:	31 f6                	xor    esi,esi
c0020e35:	e9 16 ff ff ff       	jmp    c0020d50 <__divdi3+0x58>
c0020e3a:	66 90                	xchg   ax,ax
c0020e3c:	31 c9                	xor    ecx,ecx
c0020e3e:	e9 0d ff ff ff       	jmp    c0020d50 <__divdi3+0x58>
c0020e43:	90                   	nop

c0020e44 <__moddi3>:
c0020e44:	55                   	push   ebp
c0020e45:	57                   	push   edi
c0020e46:	56                   	push   esi
c0020e47:	53                   	push   ebx
c0020e48:	83 ec 2c             	sub    esp,0x2c
c0020e4b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e4f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020e53:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020e57:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020e5b:	85 db                	test   ebx,ebx
c0020e5d:	0f 88 85 00 00 00    	js     c0020ee8 <__moddi3+0xa4>
c0020e63:	89 de                	mov    esi,ebx
c0020e65:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020e6d:	89 d7                	mov    edi,edx
c0020e6f:	85 d2                	test   edx,edx
c0020e71:	79 09                	jns    c0020e7c <__moddi3+0x38>
c0020e73:	f7 d8                	neg    eax
c0020e75:	83 d2 00             	adc    edx,0x0
c0020e78:	f7 da                	neg    edx
c0020e7a:	89 d7                	mov    edi,edx
c0020e7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e80:	89 cd                	mov    ebp,ecx
c0020e82:	85 ff                	test   edi,edi
c0020e84:	75 52                	jne    c0020ed8 <__moddi3+0x94>
c0020e86:	89 c3                	mov    ebx,eax
c0020e88:	39 f0                	cmp    eax,esi
c0020e8a:	76 24                	jbe    c0020eb0 <__moddi3+0x6c>
c0020e8c:	89 c8                	mov    eax,ecx
c0020e8e:	89 f2                	mov    edx,esi
c0020e90:	f7 f3                	div    ebx
c0020e92:	89 d6                	mov    esi,edx
c0020e94:	89 f0                	mov    eax,esi
c0020e96:	31 d2                	xor    edx,edx
c0020e98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e9c:	85 c9                	test   ecx,ecx
c0020e9e:	74 07                	je     c0020ea7 <__moddi3+0x63>
c0020ea0:	f7 d8                	neg    eax
c0020ea2:	83 d2 00             	adc    edx,0x0
c0020ea5:	f7 da                	neg    edx
c0020ea7:	83 c4 2c             	add    esp,0x2c
c0020eaa:	5b                   	pop    ebx
c0020eab:	5e                   	pop    esi
c0020eac:	5f                   	pop    edi
c0020ead:	5d                   	pop    ebp
c0020eae:	c3                   	ret    
c0020eaf:	90                   	nop
c0020eb0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020eb4:	85 db                	test   ebx,ebx
c0020eb6:	75 0d                	jne    c0020ec5 <__moddi3+0x81>
c0020eb8:	b8 01 00 00 00       	mov    eax,0x1
c0020ebd:	31 d2                	xor    edx,edx
c0020ebf:	f7 f7                	div    edi
c0020ec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ec5:	89 f0                	mov    eax,esi
c0020ec7:	31 d2                	xor    edx,edx
c0020ec9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020ecd:	f7 f7                	div    edi
c0020ecf:	89 e8                	mov    eax,ebp
c0020ed1:	f7 f7                	div    edi
c0020ed3:	89 d6                	mov    esi,edx
c0020ed5:	eb bd                	jmp    c0020e94 <__moddi3+0x50>
c0020ed7:	90                   	nop
c0020ed8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020edc:	39 f7                	cmp    edi,esi
c0020ede:	76 20                	jbe    c0020f00 <__moddi3+0xbc>
c0020ee0:	89 c8                	mov    eax,ecx
c0020ee2:	89 f2                	mov    edx,esi
c0020ee4:	eb b2                	jmp    c0020e98 <__moddi3+0x54>
c0020ee6:	66 90                	xchg   ax,ax
c0020ee8:	f7 d9                	neg    ecx
c0020eea:	83 d3 00             	adc    ebx,0x0
c0020eed:	f7 db                	neg    ebx
c0020eef:	89 de                	mov    esi,ebx
c0020ef1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020ef9:	e9 6f ff ff ff       	jmp    c0020e6d <__moddi3+0x29>
c0020efe:	66 90                	xchg   ax,ax
c0020f00:	0f bd c7             	bsr    eax,edi
c0020f03:	83 f0 1f             	xor    eax,0x1f
c0020f06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f0a:	75 24                	jne    c0020f30 <__moddi3+0xec>
c0020f0c:	39 f7                	cmp    edi,esi
c0020f0e:	72 06                	jb     c0020f16 <__moddi3+0xd2>
c0020f10:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020f14:	77 0c                	ja     c0020f22 <__moddi3+0xde>
c0020f16:	89 e9                	mov    ecx,ebp
c0020f18:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020f1c:	19 fe                	sbb    esi,edi
c0020f1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f26:	89 f2                	mov    edx,esi
c0020f28:	e9 6b ff ff ff       	jmp    c0020e98 <__moddi3+0x54>
c0020f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0020f30:	b8 20 00 00 00       	mov    eax,0x20
c0020f35:	89 c2                	mov    edx,eax
c0020f37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020f3b:	29 da                	sub    edx,ebx
c0020f3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020f41:	88 d9                	mov    cl,bl
c0020f43:	d3 e7                	shl    edi,cl
c0020f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f49:	88 d1                	mov    cl,dl
c0020f4b:	d3 e8                	shr    eax,cl
c0020f4d:	09 c7                	or     edi,eax
c0020f4f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020f53:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020f57:	89 d8                	mov    eax,ebx
c0020f59:	88 d9                	mov    cl,bl
c0020f5b:	d3 e7                	shl    edi,cl
c0020f5d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f61:	89 f3                	mov    ebx,esi
c0020f63:	88 d1                	mov    cl,dl
c0020f65:	d3 eb                	shr    ebx,cl
c0020f67:	89 c7                	mov    edi,eax
c0020f69:	88 c1                	mov    cl,al
c0020f6b:	d3 e6                	shl    esi,cl
c0020f6d:	89 e8                	mov    eax,ebp
c0020f6f:	88 d1                	mov    cl,dl
c0020f71:	d3 e8                	shr    eax,cl
c0020f73:	09 f0                	or     eax,esi
c0020f75:	89 f9                	mov    ecx,edi
c0020f77:	d3 e5                	shl    ebp,cl
c0020f79:	89 da                	mov    edx,ebx
c0020f7b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020f7f:	89 d3                	mov    ebx,edx
c0020f81:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020f85:	89 c6                	mov    esi,eax
c0020f87:	89 d1                	mov    ecx,edx
c0020f89:	39 d3                	cmp    ebx,edx
c0020f8b:	72 27                	jb     c0020fb4 <__moddi3+0x170>
c0020f8d:	74 21                	je     c0020fb0 <__moddi3+0x16c>
c0020f8f:	29 f5                	sub    ebp,esi
c0020f91:	19 cb                	sbb    ebx,ecx
c0020f93:	89 de                	mov    esi,ebx
c0020f95:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020f99:	d3 e6                	shl    esi,cl
c0020f9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020f9f:	89 f9                	mov    ecx,edi
c0020fa1:	d3 ed                	shr    ebp,cl
c0020fa3:	09 ee                	or     esi,ebp
c0020fa5:	89 f0                	mov    eax,esi
c0020fa7:	d3 eb                	shr    ebx,cl
c0020fa9:	89 da                	mov    edx,ebx
c0020fab:	e9 e8 fe ff ff       	jmp    c0020e98 <__moddi3+0x54>
c0020fb0:	39 c5                	cmp    ebp,eax
c0020fb2:	73 db                	jae    c0020f8f <__moddi3+0x14b>
c0020fb4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020fb8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020fbc:	89 d1                	mov    ecx,edx
c0020fbe:	89 c6                	mov    esi,eax
c0020fc0:	eb cd                	jmp    c0020f8f <__moddi3+0x14b>
c0020fc2:	66 90                	xchg   ax,ax

c0020fc4 <__udivdi3>:
c0020fc4:	55                   	push   ebp
c0020fc5:	57                   	push   edi
c0020fc6:	56                   	push   esi
c0020fc7:	53                   	push   ebx
c0020fc8:	83 ec 1c             	sub    esp,0x1c
c0020fcb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020fcf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020fd3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020fd7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020fdb:	85 d2                	test   edx,edx
c0020fdd:	75 41                	jne    c0021020 <__udivdi3+0x5c>
c0020fdf:	39 f7                	cmp    edi,esi
c0020fe1:	76 15                	jbe    c0020ff8 <__udivdi3+0x34>
c0020fe3:	89 e8                	mov    eax,ebp
c0020fe5:	89 f2                	mov    edx,esi
c0020fe7:	f7 f7                	div    edi
c0020fe9:	31 db                	xor    ebx,ebx
c0020feb:	89 da                	mov    edx,ebx
c0020fed:	83 c4 1c             	add    esp,0x1c
c0020ff0:	5b                   	pop    ebx
c0020ff1:	5e                   	pop    esi
c0020ff2:	5f                   	pop    edi
c0020ff3:	5d                   	pop    ebp
c0020ff4:	c3                   	ret    
c0020ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ff8:	89 f9                	mov    ecx,edi
c0020ffa:	85 ff                	test   edi,edi
c0020ffc:	75 0b                	jne    c0021009 <__udivdi3+0x45>
c0020ffe:	b8 01 00 00 00       	mov    eax,0x1
c0021003:	31 d2                	xor    edx,edx
c0021005:	f7 f7                	div    edi
c0021007:	89 c1                	mov    ecx,eax
c0021009:	31 d2                	xor    edx,edx
c002100b:	89 f0                	mov    eax,esi
c002100d:	f7 f1                	div    ecx
c002100f:	89 c3                	mov    ebx,eax
c0021011:	89 e8                	mov    eax,ebp
c0021013:	f7 f1                	div    ecx
c0021015:	89 da                	mov    edx,ebx
c0021017:	83 c4 1c             	add    esp,0x1c
c002101a:	5b                   	pop    ebx
c002101b:	5e                   	pop    esi
c002101c:	5f                   	pop    edi
c002101d:	5d                   	pop    ebp
c002101e:	c3                   	ret    
c002101f:	90                   	nop
c0021020:	39 f2                	cmp    edx,esi
c0021022:	77 1c                	ja     c0021040 <__udivdi3+0x7c>
c0021024:	0f bd da             	bsr    ebx,edx
c0021027:	83 f3 1f             	xor    ebx,0x1f
c002102a:	75 24                	jne    c0021050 <__udivdi3+0x8c>
c002102c:	39 f2                	cmp    edx,esi
c002102e:	72 08                	jb     c0021038 <__udivdi3+0x74>
c0021030:	39 ef                	cmp    edi,ebp
c0021032:	0f 87 84 00 00 00    	ja     c00210bc <__udivdi3+0xf8>
c0021038:	b8 01 00 00 00       	mov    eax,0x1
c002103d:	eb ac                	jmp    c0020feb <__udivdi3+0x27>
c002103f:	90                   	nop
c0021040:	31 db                	xor    ebx,ebx
c0021042:	31 c0                	xor    eax,eax
c0021044:	89 da                	mov    edx,ebx
c0021046:	83 c4 1c             	add    esp,0x1c
c0021049:	5b                   	pop    ebx
c002104a:	5e                   	pop    esi
c002104b:	5f                   	pop    edi
c002104c:	5d                   	pop    ebp
c002104d:	c3                   	ret    
c002104e:	66 90                	xchg   ax,ax
c0021050:	b8 20 00 00 00       	mov    eax,0x20
c0021055:	29 d8                	sub    eax,ebx
c0021057:	88 d9                	mov    cl,bl
c0021059:	d3 e2                	shl    edx,cl
c002105b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002105f:	89 fa                	mov    edx,edi
c0021061:	88 c1                	mov    cl,al
c0021063:	d3 ea                	shr    edx,cl
c0021065:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021069:	09 d1                	or     ecx,edx
c002106b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002106f:	88 d9                	mov    cl,bl
c0021071:	d3 e7                	shl    edi,cl
c0021073:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021077:	89 f7                	mov    edi,esi
c0021079:	88 c1                	mov    cl,al
c002107b:	d3 ef                	shr    edi,cl
c002107d:	88 d9                	mov    cl,bl
c002107f:	d3 e6                	shl    esi,cl
c0021081:	89 ea                	mov    edx,ebp
c0021083:	88 c1                	mov    cl,al
c0021085:	d3 ea                	shr    edx,cl
c0021087:	09 d6                	or     esi,edx
c0021089:	89 f0                	mov    eax,esi
c002108b:	89 fa                	mov    edx,edi
c002108d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021091:	89 d7                	mov    edi,edx
c0021093:	89 c6                	mov    esi,eax
c0021095:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021099:	39 d7                	cmp    edi,edx
c002109b:	72 13                	jb     c00210b0 <__udivdi3+0xec>
c002109d:	74 09                	je     c00210a8 <__udivdi3+0xe4>
c002109f:	89 f0                	mov    eax,esi
c00210a1:	31 db                	xor    ebx,ebx
c00210a3:	e9 43 ff ff ff       	jmp    c0020feb <__udivdi3+0x27>
c00210a8:	88 d9                	mov    cl,bl
c00210aa:	d3 e5                	shl    ebp,cl
c00210ac:	39 c5                	cmp    ebp,eax
c00210ae:	73 ef                	jae    c002109f <__udivdi3+0xdb>
c00210b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00210b3:	31 db                	xor    ebx,ebx
c00210b5:	e9 31 ff ff ff       	jmp    c0020feb <__udivdi3+0x27>
c00210ba:	66 90                	xchg   ax,ax
c00210bc:	31 c0                	xor    eax,eax
c00210be:	e9 28 ff ff ff       	jmp    c0020feb <__udivdi3+0x27>
c00210c3:	90                   	nop

c00210c4 <__umoddi3>:
c00210c4:	55                   	push   ebp
c00210c5:	57                   	push   edi
c00210c6:	56                   	push   esi
c00210c7:	53                   	push   ebx
c00210c8:	83 ec 1c             	sub    esp,0x1c
c00210cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00210cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00210d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00210d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00210db:	89 da                	mov    edx,ebx
c00210dd:	85 c0                	test   eax,eax
c00210df:	75 37                	jne    c0021118 <__umoddi3+0x54>
c00210e1:	39 df                	cmp    edi,ebx
c00210e3:	76 13                	jbe    c00210f8 <__umoddi3+0x34>
c00210e5:	89 f0                	mov    eax,esi
c00210e7:	f7 f7                	div    edi
c00210e9:	89 d0                	mov    eax,edx
c00210eb:	31 d2                	xor    edx,edx
c00210ed:	83 c4 1c             	add    esp,0x1c
c00210f0:	5b                   	pop    ebx
c00210f1:	5e                   	pop    esi
c00210f2:	5f                   	pop    edi
c00210f3:	5d                   	pop    ebp
c00210f4:	c3                   	ret    
c00210f5:	8d 76 00             	lea    esi,[esi+0x0]
c00210f8:	89 fd                	mov    ebp,edi
c00210fa:	85 ff                	test   edi,edi
c00210fc:	75 0b                	jne    c0021109 <__umoddi3+0x45>
c00210fe:	b8 01 00 00 00       	mov    eax,0x1
c0021103:	31 d2                	xor    edx,edx
c0021105:	f7 f7                	div    edi
c0021107:	89 c5                	mov    ebp,eax
c0021109:	89 d8                	mov    eax,ebx
c002110b:	31 d2                	xor    edx,edx
c002110d:	f7 f5                	div    ebp
c002110f:	89 f0                	mov    eax,esi
c0021111:	f7 f5                	div    ebp
c0021113:	89 d0                	mov    eax,edx
c0021115:	eb d4                	jmp    c00210eb <__umoddi3+0x27>
c0021117:	90                   	nop
c0021118:	89 f1                	mov    ecx,esi
c002111a:	39 d8                	cmp    eax,ebx
c002111c:	76 0a                	jbe    c0021128 <__umoddi3+0x64>
c002111e:	89 f0                	mov    eax,esi
c0021120:	83 c4 1c             	add    esp,0x1c
c0021123:	5b                   	pop    ebx
c0021124:	5e                   	pop    esi
c0021125:	5f                   	pop    edi
c0021126:	5d                   	pop    ebp
c0021127:	c3                   	ret    
c0021128:	0f bd e8             	bsr    ebp,eax
c002112b:	83 f5 1f             	xor    ebp,0x1f
c002112e:	75 1c                	jne    c002114c <__umoddi3+0x88>
c0021130:	39 d8                	cmp    eax,ebx
c0021132:	72 04                	jb     c0021138 <__umoddi3+0x74>
c0021134:	39 f7                	cmp    edi,esi
c0021136:	77 08                	ja     c0021140 <__umoddi3+0x7c>
c0021138:	89 da                	mov    edx,ebx
c002113a:	29 fe                	sub    esi,edi
c002113c:	19 c2                	sbb    edx,eax
c002113e:	89 f1                	mov    ecx,esi
c0021140:	89 c8                	mov    eax,ecx
c0021142:	83 c4 1c             	add    esp,0x1c
c0021145:	5b                   	pop    ebx
c0021146:	5e                   	pop    esi
c0021147:	5f                   	pop    edi
c0021148:	5d                   	pop    ebp
c0021149:	c3                   	ret    
c002114a:	66 90                	xchg   ax,ax
c002114c:	ba 20 00 00 00       	mov    edx,0x20
c0021151:	29 ea                	sub    edx,ebp
c0021153:	89 e9                	mov    ecx,ebp
c0021155:	d3 e0                	shl    eax,cl
c0021157:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002115b:	89 f8                	mov    eax,edi
c002115d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021161:	88 d1                	mov    cl,dl
c0021163:	d3 e8                	shr    eax,cl
c0021165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021169:	09 c1                	or     ecx,eax
c002116b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002116f:	89 e9                	mov    ecx,ebp
c0021171:	d3 e7                	shl    edi,cl
c0021173:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021177:	89 d8                	mov    eax,ebx
c0021179:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002117d:	88 d1                	mov    cl,dl
c002117f:	d3 e8                	shr    eax,cl
c0021181:	89 c7                	mov    edi,eax
c0021183:	89 e9                	mov    ecx,ebp
c0021185:	d3 e3                	shl    ebx,cl
c0021187:	89 f0                	mov    eax,esi
c0021189:	88 d1                	mov    cl,dl
c002118b:	d3 e8                	shr    eax,cl
c002118d:	09 d8                	or     eax,ebx
c002118f:	89 e9                	mov    ecx,ebp
c0021191:	d3 e6                	shl    esi,cl
c0021193:	89 f3                	mov    ebx,esi
c0021195:	89 fa                	mov    edx,edi
c0021197:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002119b:	89 d1                	mov    ecx,edx
c002119d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00211a1:	89 c6                	mov    esi,eax
c00211a3:	89 d7                	mov    edi,edx
c00211a5:	39 d1                	cmp    ecx,edx
c00211a7:	72 27                	jb     c00211d0 <__umoddi3+0x10c>
c00211a9:	74 21                	je     c00211cc <__umoddi3+0x108>
c00211ab:	89 ca                	mov    edx,ecx
c00211ad:	29 f3                	sub    ebx,esi
c00211af:	19 fa                	sbb    edx,edi
c00211b1:	89 d0                	mov    eax,edx
c00211b3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00211b7:	d3 e0                	shl    eax,cl
c00211b9:	89 e9                	mov    ecx,ebp
c00211bb:	d3 eb                	shr    ebx,cl
c00211bd:	09 d8                	or     eax,ebx
c00211bf:	d3 ea                	shr    edx,cl
c00211c1:	83 c4 1c             	add    esp,0x1c
c00211c4:	5b                   	pop    ebx
c00211c5:	5e                   	pop    esi
c00211c6:	5f                   	pop    edi
c00211c7:	5d                   	pop    ebp
c00211c8:	c3                   	ret    
c00211c9:	8d 76 00             	lea    esi,[esi+0x0]
c00211cc:	39 c3                	cmp    ebx,eax
c00211ce:	73 db                	jae    c00211ab <__umoddi3+0xe7>
c00211d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00211d4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00211d8:	89 d7                	mov    edi,edx
c00211da:	89 c6                	mov    esi,eax
c00211dc:	eb cd                	jmp    c00211ab <__umoddi3+0xe7>

Disassembly of section .init:

c00211de <_init>:
c00211de:	55                   	push   ebp
c00211df:	89 e5                	mov    ebp,esp
c00211e1:	e8 32 ef fd ff       	call   c0000118 <frame_dummy>
c00211e6:	e8 e5 fa ff ff       	call   c0020cd0 <__do_global_ctors_aux>
c00211eb:	5d                   	pop    ebp
c00211ec:	c3                   	ret    

Disassembly of section .fini:

c00211ed <_fini>:
c00211ed:	55                   	push   ebp
c00211ee:	89 e5                	mov    ebp,esp
c00211f0:	e8 b3 ee fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00211f5:	5d                   	pop    ebp
c00211f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00211f8 <Computer::~Computer()>:
c00211f8:	83 ec 0c             	sub    esp,0xc
c00211fb:	ba 14 28 02 c0       	mov    edx,0xc0022814
c0021200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021204:	89 10                	mov    DWORD PTR [eax],edx
c0021206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002120a:	83 ec 0c             	sub    esp,0xc
c002120d:	50                   	push   eax
c002120e:	e8 fd cb fe ff       	call   c000de10 <Device::~Device()>
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	90                   	nop
c0021217:	83 c4 0c             	add    esp,0xc
c002121a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002121c <Computer::~Computer()>:
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	83 ec 0c             	sub    esp,0xc
c0021222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021226:	e8 cd ff ff ff       	call   c00211f8 <Computer::~Computer()>
c002122b:	83 c4 10             	add    esp,0x10
c002122e:	83 ec 08             	sub    esp,0x8
c0021231:	68 ec 01 00 00       	push   0x1ec
c0021236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002123a:	e8 db b7 fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c002123f:	83 c4 10             	add    esp,0x10
c0021242:	83 c4 0c             	add    esp,0xc
c0021245:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021246 <idleCommon()>:
c0021246:	83 ec 0c             	sub    esp,0xc
c0021249:	fa                   	cli    
c002124a:	ff 05 68 79 02 c0    	inc    DWORD PTR ds:0xc0027968
c0021250:	e8 3b 6d ff ff       	call   c0017f90 <schedule()>
c0021255:	a1 68 79 02 c0       	mov    eax,ds:0xc0027968
c002125a:	48                   	dec    eax
c002125b:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0021260:	75 01                	jne    c0021263 <idleCommon()+0x1d>
c0021262:	fb                   	sti    
c0021263:	83 c4 0c             	add    esp,0xc
c0021266:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021268 <LinkedList<UnixFile>::~LinkedList()>:
c0021268:	90                   	nop
c0021269:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002126a <LinkedList<UnixFile>::LinkedList()>:
c002126a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002126e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021278:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002127f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021283:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002128a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002128e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021298:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002129f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212aa:	90                   	nop
c00212ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00212ac <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00212ac:	83 ec 0c             	sub    esp,0xc
c00212af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00212b4:	75 10                	jne    c00212c6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00212b6:	83 ec 0c             	sub    esp,0xc
c00212b9:	68 64 2b 02 c0       	push   0xc0022b64
c00212be:	e8 fa 30 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00212c3:	83 c4 10             	add    esp,0x10
c00212c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00212cc:	85 c0                	test   eax,eax
c00212ce:	74 34                	je     c0021304 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00212d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212d7:	85 c0                	test   eax,eax
c00212d9:	74 29                	je     c0021304 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00212db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021302:	eb 65                	jmp    c0021369 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021308:	8b 00                	mov    eax,DWORD PTR [eax]
c002130a:	85 c0                	test   eax,eax
c002130c:	75 4b                	jne    c0021359 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002130e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021312:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021315:	85 c0                	test   eax,eax
c0021317:	75 40                	jne    c0021359 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021321:	89 10                	mov    DWORD PTR [eax],edx
c0021323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021327:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002132b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002132e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021335:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002133c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021340:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021343:	85 c0                	test   eax,eax
c0021345:	74 22                	je     c0021369 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021347:	83 ec 0c             	sub    esp,0xc
c002134a:	68 86 2b 02 c0       	push   0xc0022b86
c002134f:	e8 69 30 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021354:	83 c4 10             	add    esp,0x10
c0021357:	eb 10                	jmp    c0021369 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021359:	83 ec 0c             	sub    esp,0xc
c002135c:	68 90 2b 02 c0       	push   0xc0022b90
c0021361:	e8 57 30 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021370:	8d 50 01             	lea    edx,[eax+0x1]
c0021373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021377:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002137a:	90                   	nop
c002137b:	83 c4 0c             	add    esp,0xc
c002137e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021380 <LinkedList<UnixFile>::getFirstElement()>:
c0021380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021384:	8b 00                	mov    eax,DWORD PTR [eax]
c0021386:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021388 <LinkedList<UnixFile>::removeFirst()>:
c0021388:	83 ec 0c             	sub    esp,0xc
c002138b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002138f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021391:	85 c0                	test   eax,eax
c0021393:	75 12                	jne    c00213a7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021395:	83 ec 0c             	sub    esp,0xc
c0021398:	68 9c 2b 02 c0       	push   0xc0022b9c
c002139d:	e8 1b 30 ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00213a2:	83 c4 10             	add    esp,0x10
c00213a5:	eb 7e                	jmp    c0021425 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00213a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213b1:	85 c0                	test   eax,eax
c00213b3:	74 10                	je     c00213c5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00213b5:	83 ec 0c             	sub    esp,0xc
c00213b8:	68 e7 2b 02 c0       	push   0xc0022be7
c00213bd:	e8 fb 2f ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00213c2:	83 c4 10             	add    esp,0x10
c00213c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00213cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213ce:	85 c0                	test   eax,eax
c00213d0:	75 33                	jne    c0021405 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00213d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213ee:	83 f8 01             	cmp    eax,0x1
c00213f1:	74 21                	je     c0021414 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213f3:	83 ec 0c             	sub    esp,0xc
c00213f6:	68 c0 2b 02 c0       	push   0xc0022bc0
c00213fb:	e8 bd 2f ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021400:	83 c4 10             	add    esp,0x10
c0021403:	eb 0f                	jmp    c0021414 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021409:	8b 00                	mov    eax,DWORD PTR [eax]
c002140b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002140e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021412:	89 10                	mov    DWORD PTR [eax],edx
c0021414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021418:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002141b:	8d 50 ff             	lea    edx,[eax-0x1]
c002141e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021422:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021425:	83 c4 0c             	add    esp,0xc
c0021428:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002142a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002142a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002142e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021431:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021432 <DriverlessDevice::~DriverlessDevice()>:
c0021432:	ba 5c 34 02 c0       	mov    edx,0xc002345c
c0021437:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002143b:	89 10                	mov    DWORD PTR [eax],edx
c002143d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021441:	50                   	push   eax
c0021442:	e8 c9 c9 fe ff       	call   c000de10 <Device::~Device()>
c0021447:	83 c4 04             	add    esp,0x4
c002144a:	90                   	nop
c002144b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002144c <DriverlessDevice::~DriverlessDevice()>:
c002144c:	83 ec 0c             	sub    esp,0xc
c002144f:	83 ec 0c             	sub    esp,0xc
c0021452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021456:	e8 d7 ff ff ff       	call   c0021432 <DriverlessDevice::~DriverlessDevice()>
c002145b:	83 c4 10             	add    esp,0x10
c002145e:	83 ec 08             	sub    esp,0x8
c0021461:	68 58 01 00 00       	push   0x158
c0021466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002146a:	e8 ab b5 fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c002146f:	83 c4 10             	add    esp,0x10
c0021472:	83 c4 0c             	add    esp,0xc
c0021475:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021476 <LinkedList<Device>::addElement(Device*)>:
c0021476:	83 ec 0c             	sub    esp,0xc
c0021479:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002147e:	75 10                	jne    c0021490 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021480:	83 ec 0c             	sub    esp,0xc
c0021483:	68 64 2b 02 c0       	push   0xc0022b64
c0021488:	e8 30 2f ff ff       	call   c00143bd <Krnl::panic(char const*)>
c002148d:	83 c4 10             	add    esp,0x10
c0021490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021494:	8b 00                	mov    eax,DWORD PTR [eax]
c0021496:	85 c0                	test   eax,eax
c0021498:	74 3a                	je     c00214d4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002149a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214a1:	85 c0                	test   eax,eax
c00214a3:	74 2f                	je     c00214d4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00214a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214b0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00214b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00214c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214c8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00214d2:	eb 68                	jmp    c002153c <LinkedList<Device>::addElement(Device*)+0xc6>
c00214d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00214da:	85 c0                	test   eax,eax
c00214dc:	75 4e                	jne    c002152c <LinkedList<Device>::addElement(Device*)+0xb6>
c00214de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214e5:	85 c0                	test   eax,eax
c00214e7:	75 43                	jne    c002152c <LinkedList<Device>::addElement(Device*)+0xb6>
c00214e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214f1:	89 10                	mov    DWORD PTR [eax],edx
c00214f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00214fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021505:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002150f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021513:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021516:	85 c0                	test   eax,eax
c0021518:	74 22                	je     c002153c <LinkedList<Device>::addElement(Device*)+0xc6>
c002151a:	83 ec 0c             	sub    esp,0xc
c002151d:	68 86 2b 02 c0       	push   0xc0022b86
c0021522:	e8 96 2e ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021527:	83 c4 10             	add    esp,0x10
c002152a:	eb 10                	jmp    c002153c <LinkedList<Device>::addElement(Device*)+0xc6>
c002152c:	83 ec 0c             	sub    esp,0xc
c002152f:	68 90 2b 02 c0       	push   0xc0022b90
c0021534:	e8 84 2e ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021539:	83 c4 10             	add    esp,0x10
c002153c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021540:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021543:	8d 50 01             	lea    edx,[eax+0x1]
c0021546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002154a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002154d:	90                   	nop
c002154e:	83 c4 0c             	add    esp,0xc
c0021551:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021552 <LinkedList<Device>::LinkedList()>:
c0021552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002155c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021560:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002156b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021576:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002157c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021580:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021587:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002158b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021592:	90                   	nop
c0021593:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021594 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021598:	8b 00                	mov    eax,DWORD PTR [eax]
c002159a:	85 c0                	test   eax,eax
c002159c:	75 0e                	jne    c00215ac <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002159e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215a5:	85 c0                	test   eax,eax
c00215a7:	75 03                	jne    c00215ac <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00215a9:	b0 01                	mov    al,0x1
c00215ab:	c3                   	ret    
c00215ac:	b0 00                	mov    al,0x0
c00215ae:	90                   	nop
c00215af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00215b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00215b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00215b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00215b8:	83 ec 0c             	sub    esp,0xc
c00215bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00215c1:	85 c0                	test   eax,eax
c00215c3:	75 17                	jne    c00215dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00215c5:	83 ec 0c             	sub    esp,0xc
c00215c8:	68 9c 2b 02 c0       	push   0xc0022b9c
c00215cd:	e8 eb 2d ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00215d2:	83 c4 10             	add    esp,0x10
c00215d5:	e9 92 00 00 00       	jmp    c002166c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00215da:	66 90                	xchg   ax,ax
c00215dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215e6:	85 c0                	test   eax,eax
c00215e8:	0f 95 c0             	setne  al
c00215eb:	84 c0                	test   al,al
c00215ed:	74 11                	je     c0021600 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00215ef:	83 ec 0c             	sub    esp,0xc
c00215f2:	68 e7 2b 02 c0       	push   0xc0022be7
c00215f7:	e8 c1 2d ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00215fc:	83 c4 10             	add    esp,0x10
c00215ff:	90                   	nop
c0021600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021604:	8b 00                	mov    eax,DWORD PTR [eax]
c0021606:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021609:	85 c0                	test   eax,eax
c002160b:	0f 94 c0             	sete   al
c002160e:	84 c0                	test   al,al
c0021610:	74 36                	je     c0021648 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021616:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002161c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021620:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002162e:	83 f8 01             	cmp    eax,0x1
c0021631:	74 25                	je     c0021658 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021633:	83 ec 0c             	sub    esp,0xc
c0021636:	68 c0 2b 02 c0       	push   0xc0022bc0
c002163b:	e8 7d 2d ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021640:	83 c4 10             	add    esp,0x10
c0021643:	eb 13                	jmp    c0021658 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021645:	8d 76 00             	lea    esi,[esi+0x0]
c0021648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164c:	8b 00                	mov    eax,DWORD PTR [eax]
c002164e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021655:	89 10                	mov    DWORD PTR [eax],edx
c0021657:	90                   	nop
c0021658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002165f:	8d 50 ff             	lea    edx,[eax-0x1]
c0021662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021666:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021669:	8d 76 00             	lea    esi,[esi+0x0]
c002166c:	83 c4 0c             	add    esp,0xc
c002166f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021670:	83 ec 0c             	sub    esp,0xc
c0021673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021678:	75 12                	jne    c002168c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002167a:	83 ec 0c             	sub    esp,0xc
c002167d:	68 64 2b 02 c0       	push   0xc0022b64
c0021682:	e8 36 2d ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021687:	83 c4 10             	add    esp,0x10
c002168a:	66 90                	xchg   ax,ax
c002168c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021690:	8b 00                	mov    eax,DWORD PTR [eax]
c0021692:	85 c0                	test   eax,eax
c0021694:	74 36                	je     c00216cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002169a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002169d:	85 c0                	test   eax,eax
c002169f:	74 2b                	je     c00216cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00216a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216ac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00216af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216c1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00216c8:	eb 6a                	jmp    c0021734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216ca:	66 90                	xchg   ax,ax
c00216cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00216d2:	85 c0                	test   eax,eax
c00216d4:	75 4e                	jne    c0021724 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00216d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216dd:	85 c0                	test   eax,eax
c00216df:	75 43                	jne    c0021724 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00216e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216e9:	89 10                	mov    DWORD PTR [eax],edx
c00216eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021708:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002170b:	85 c0                	test   eax,eax
c002170d:	74 25                	je     c0021734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002170f:	83 ec 0c             	sub    esp,0xc
c0021712:	68 86 2b 02 c0       	push   0xc0022b86
c0021717:	e8 a1 2c ff ff       	call   c00143bd <Krnl::panic(char const*)>
c002171c:	83 c4 10             	add    esp,0x10
c002171f:	eb 13                	jmp    c0021734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021721:	8d 76 00             	lea    esi,[esi+0x0]
c0021724:	83 ec 0c             	sub    esp,0xc
c0021727:	68 90 2b 02 c0       	push   0xc0022b90
c002172c:	e8 8c 2c ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021731:	83 c4 10             	add    esp,0x10
c0021734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021738:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002173b:	8d 50 01             	lea    edx,[eax+0x1]
c002173e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021742:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021745:	90                   	nop
c0021746:	83 c4 0c             	add    esp,0xc
c0021749:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002174c <ACPI::~ACPI()>:
c002174c:	83 ec 0c             	sub    esp,0xc
c002174f:	ba 2c 3f 02 c0       	mov    edx,0xc0023f2c
c0021754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021758:	89 10                	mov    DWORD PTR [eax],edx
c002175a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002175e:	83 ec 0c             	sub    esp,0xc
c0021761:	50                   	push   eax
c0021762:	e8 a9 c6 fe ff       	call   c000de10 <Device::~Device()>
c0021767:	83 c4 10             	add    esp,0x10
c002176a:	90                   	nop
c002176b:	83 c4 0c             	add    esp,0xc
c002176e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021770 <ACPI::~ACPI()>:
c0021770:	83 ec 0c             	sub    esp,0xc
c0021773:	83 ec 0c             	sub    esp,0xc
c0021776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002177a:	e8 cd ff ff ff       	call   c002174c <ACPI::~ACPI()>
c002177f:	83 c4 10             	add    esp,0x10
c0021782:	83 ec 08             	sub    esp,0x8
c0021785:	68 64 12 00 00       	push   0x1264
c002178a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002178e:	e8 87 b2 fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021793:	83 c4 10             	add    esp,0x10
c0021796:	83 c4 0c             	add    esp,0xc
c0021799:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002179c <LinkedList<Device>::~LinkedList()>:
c002179c:	90                   	nop
c002179d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00217a0 <LinkedList<Device>::isEmpty()>:
c00217a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00217a6:	85 c0                	test   eax,eax
c00217a8:	75 0e                	jne    c00217b8 <LinkedList<Device>::isEmpty()+0x18>
c00217aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217b1:	85 c0                	test   eax,eax
c00217b3:	75 03                	jne    c00217b8 <LinkedList<Device>::isEmpty()+0x18>
c00217b5:	b0 01                	mov    al,0x1
c00217b7:	c3                   	ret    
c00217b8:	b0 00                	mov    al,0x0
c00217ba:	90                   	nop
c00217bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00217bc <LinkedList<Device>::getFirstElement()>:
c00217bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00217c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00217c4 <LinkedList<Device>::removeFirst()>:
c00217c4:	83 ec 0c             	sub    esp,0xc
c00217c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00217cd:	85 c0                	test   eax,eax
c00217cf:	75 17                	jne    c00217e8 <LinkedList<Device>::removeFirst()+0x24>
c00217d1:	83 ec 0c             	sub    esp,0xc
c00217d4:	68 9c 2b 02 c0       	push   0xc0022b9c
c00217d9:	e8 df 2b ff ff       	call   c00143bd <Krnl::panic(char const*)>
c00217de:	83 c4 10             	add    esp,0x10
c00217e1:	e9 92 00 00 00       	jmp    c0021878 <LinkedList<Device>::removeFirst()+0xb4>
c00217e6:	66 90                	xchg   ax,ax
c00217e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217ef:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217f5:	85 c0                	test   eax,eax
c00217f7:	74 13                	je     c002180c <LinkedList<Device>::removeFirst()+0x48>
c00217f9:	83 ec 0c             	sub    esp,0xc
c00217fc:	68 e7 2b 02 c0       	push   0xc0022be7
c0021801:	e8 b7 2b ff ff       	call   c00143bd <Krnl::panic(char const*)>
c0021806:	83 c4 10             	add    esp,0x10
c0021809:	8d 76 00             	lea    esi,[esi+0x0]
c002180c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021810:	8b 00                	mov    eax,DWORD PTR [eax]
c0021812:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021818:	85 c0                	test   eax,eax
c002181a:	75 34                	jne    c0021850 <LinkedList<Device>::removeFirst()+0x8c>
c002181c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021820:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002182a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021835:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021838:	83 f8 01             	cmp    eax,0x1
c002183b:	74 27                	je     c0021864 <LinkedList<Device>::removeFirst()+0xa0>
c002183d:	83 ec 0c             	sub    esp,0xc
c0021840:	68 c0 2b 02 c0       	push   0xc0022bc0
c0021845:	e8 73 2b ff ff       	call   c00143bd <Krnl::panic(char const*)>
c002184a:	83 c4 10             	add    esp,0x10
c002184d:	eb 15                	jmp    c0021864 <LinkedList<Device>::removeFirst()+0xa0>
c002184f:	90                   	nop
c0021850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021854:	8b 00                	mov    eax,DWORD PTR [eax]
c0021856:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002185c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021860:	89 10                	mov    DWORD PTR [eax],edx
c0021862:	66 90                	xchg   ax,ax
c0021864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002186b:	8d 50 ff             	lea    edx,[eax-0x1]
c002186e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021872:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021875:	8d 76 00             	lea    esi,[esi+0x0]
c0021878:	83 c4 0c             	add    esp,0xc
c002187b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002187c <CPU::~CPU()>:
c002187c:	83 ec 0c             	sub    esp,0xc
c002187f:	ba c8 42 02 c0       	mov    edx,0xc00242c8
c0021884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021888:	89 10                	mov    DWORD PTR [eax],edx
c002188a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188e:	83 ec 0c             	sub    esp,0xc
c0021891:	50                   	push   eax
c0021892:	e8 79 c5 fe ff       	call   c000de10 <Device::~Device()>
c0021897:	83 c4 10             	add    esp,0x10
c002189a:	90                   	nop
c002189b:	83 c4 0c             	add    esp,0xc
c002189e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00218a0 <CPU::~CPU()>:
c00218a0:	83 ec 0c             	sub    esp,0xc
c00218a3:	83 ec 0c             	sub    esp,0xc
c00218a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218aa:	e8 cd ff ff ff       	call   c002187c <CPU::~CPU()>
c00218af:	83 c4 10             	add    esp,0x10
c00218b2:	83 ec 08             	sub    esp,0x8
c00218b5:	68 98 11 00 00       	push   0x1198
c00218ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218be:	e8 57 b1 fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c00218c3:	83 c4 10             	add    esp,0x10
c00218c6:	83 c4 0c             	add    esp,0xc
c00218c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00218cc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00218cc:	90                   	nop
c00218cd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00218d0 <ThreadControlBlock::ThreadControlBlock()>:
c00218d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00218db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218df:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00218e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ea:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00218f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00218fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021900:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002190b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002190f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021913:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021917:	90                   	nop
c0021918:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002191c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002191c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021920:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002192a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021935:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002193c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021940:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002194a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021955:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002195c:	90                   	nop
c002195d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021960 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021960:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021964:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021967:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021968 <Vm::_FPUState::_FPUState()>:
c0021968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002196c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021973:	90                   	nop
c0021974:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021976 <PCI::~PCI()>:
c0021976:	83 ec 0c             	sub    esp,0xc
c0021979:	ba 28 50 02 c0       	mov    edx,0xc0025028
c002197e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021982:	89 10                	mov    DWORD PTR [eax],edx
c0021984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021988:	83 ec 0c             	sub    esp,0xc
c002198b:	50                   	push   eax
c002198c:	e8 4f be fe ff       	call   c000d7e0 <Bus::~Bus()>
c0021991:	83 c4 10             	add    esp,0x10
c0021994:	90                   	nop
c0021995:	83 c4 0c             	add    esp,0xc
c0021998:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002199a <PCI::~PCI()>:
c002199a:	83 ec 0c             	sub    esp,0xc
c002199d:	83 ec 0c             	sub    esp,0xc
c00219a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219a4:	e8 cd ff ff ff       	call   c0021976 <PCI::~PCI()>
c00219a9:	83 c4 10             	add    esp,0x10
c00219ac:	83 ec 08             	sub    esp,0x8
c00219af:	68 5c 01 00 00       	push   0x15c
c00219b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b8:	e8 5d b0 fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c00219bd:	83 c4 10             	add    esp,0x10
c00219c0:	83 c4 0c             	add    esp,0xc
c00219c3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00219c4 <IDE::~IDE()>:
c00219c4:	83 ec 0c             	sub    esp,0xc
c00219c7:	ba dc 50 02 c0       	mov    edx,0xc00250dc
c00219cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d0:	89 10                	mov    DWORD PTR [eax],edx
c00219d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d6:	83 ec 0c             	sub    esp,0xc
c00219d9:	50                   	push   eax
c00219da:	e8 49 c9 fe ff       	call   c000e328 <HardDiskController::~HardDiskController()>
c00219df:	83 c4 10             	add    esp,0x10
c00219e2:	90                   	nop
c00219e3:	83 c4 0c             	add    esp,0xc
c00219e6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00219e8 <IDE::~IDE()>:
c00219e8:	83 ec 0c             	sub    esp,0xc
c00219eb:	83 ec 0c             	sub    esp,0xc
c00219ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219f2:	e8 cd ff ff ff       	call   c00219c4 <IDE::~IDE()>
c00219f7:	83 c4 10             	add    esp,0x10
c00219fa:	83 ec 08             	sub    esp,0x8
c00219fd:	68 70 02 00 00       	push   0x270
c0021a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a06:	e8 0f b0 fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021a0b:	83 c4 10             	add    esp,0x10
c0021a0e:	83 c4 0c             	add    esp,0xc
c0021a11:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021a12 <SATABus::~SATABus()>:
c0021a12:	83 ec 0c             	sub    esp,0xc
c0021a15:	ba 54 51 02 c0       	mov    edx,0xc0025154
c0021a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a1e:	89 10                	mov    DWORD PTR [eax],edx
c0021a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a24:	83 ec 0c             	sub    esp,0xc
c0021a27:	50                   	push   eax
c0021a28:	e8 fb c8 fe ff       	call   c000e328 <HardDiskController::~HardDiskController()>
c0021a2d:	83 c4 10             	add    esp,0x10
c0021a30:	90                   	nop
c0021a31:	83 c4 0c             	add    esp,0xc
c0021a34:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021a36 <SATABus::~SATABus()>:
c0021a36:	83 ec 0c             	sub    esp,0xc
c0021a39:	83 ec 0c             	sub    esp,0xc
c0021a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a40:	e8 cd ff ff ff       	call   c0021a12 <SATABus::~SATABus()>
c0021a45:	83 c4 10             	add    esp,0x10
c0021a48:	83 ec 08             	sub    esp,0x8
c0021a4b:	68 64 01 00 00       	push   0x164
c0021a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a54:	e8 c1 af fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021a59:	83 c4 10             	add    esp,0x10
c0021a5c:	83 c4 0c             	add    esp,0xc
c0021a5f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021a60 <ATA::~ATA()>:
c0021a60:	83 ec 0c             	sub    esp,0xc
c0021a63:	ba cc 51 02 c0       	mov    edx,0xc00251cc
c0021a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a6c:	89 10                	mov    DWORD PTR [eax],edx
c0021a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a72:	83 ec 0c             	sub    esp,0xc
c0021a75:	50                   	push   eax
c0021a76:	e8 8f c9 fe ff       	call   c000e40a <PhysicalDisk::~PhysicalDisk()>
c0021a7b:	83 c4 10             	add    esp,0x10
c0021a7e:	90                   	nop
c0021a7f:	83 c4 0c             	add    esp,0xc
c0021a82:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021a84 <ATA::~ATA()>:
c0021a84:	83 ec 0c             	sub    esp,0xc
c0021a87:	83 ec 0c             	sub    esp,0xc
c0021a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a8e:	e8 cd ff ff ff       	call   c0021a60 <ATA::~ATA()>
c0021a93:	83 c4 10             	add    esp,0x10
c0021a96:	83 ec 08             	sub    esp,0x8
c0021a99:	68 7c 01 00 00       	push   0x17c
c0021a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aa2:	e8 73 af fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021aa7:	83 c4 10             	add    esp,0x10
c0021aaa:	83 c4 0c             	add    esp,0xc
c0021aad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021aae <ATAPI::~ATAPI()>:
c0021aae:	83 ec 0c             	sub    esp,0xc
c0021ab1:	ba 04 52 02 c0       	mov    edx,0xc0025204
c0021ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aba:	89 10                	mov    DWORD PTR [eax],edx
c0021abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac0:	83 ec 0c             	sub    esp,0xc
c0021ac3:	50                   	push   eax
c0021ac4:	e8 41 c9 fe ff       	call   c000e40a <PhysicalDisk::~PhysicalDisk()>
c0021ac9:	83 c4 10             	add    esp,0x10
c0021acc:	90                   	nop
c0021acd:	83 c4 0c             	add    esp,0xc
c0021ad0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021ad2 <ATAPI::~ATAPI()>:
c0021ad2:	83 ec 0c             	sub    esp,0xc
c0021ad5:	83 ec 0c             	sub    esp,0xc
c0021ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021adc:	e8 cd ff ff ff       	call   c0021aae <ATAPI::~ATAPI()>
c0021ae1:	83 c4 10             	add    esp,0x10
c0021ae4:	83 ec 08             	sub    esp,0x8
c0021ae7:	68 80 01 00 00       	push   0x180
c0021aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021af0:	e8 25 af fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021af5:	83 c4 10             	add    esp,0x10
c0021af8:	83 c4 0c             	add    esp,0xc
c0021afb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021afc <SATA::~SATA()>:
c0021afc:	83 ec 0c             	sub    esp,0xc
c0021aff:	ba b8 52 02 c0       	mov    edx,0xc00252b8
c0021b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b08:	89 10                	mov    DWORD PTR [eax],edx
c0021b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b0e:	83 ec 0c             	sub    esp,0xc
c0021b11:	50                   	push   eax
c0021b12:	e8 f3 c8 fe ff       	call   c000e40a <PhysicalDisk::~PhysicalDisk()>
c0021b17:	83 c4 10             	add    esp,0x10
c0021b1a:	90                   	nop
c0021b1b:	83 c4 0c             	add    esp,0xc
c0021b1e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021b20 <SATA::~SATA()>:
c0021b20:	83 ec 0c             	sub    esp,0xc
c0021b23:	83 ec 0c             	sub    esp,0xc
c0021b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b2a:	e8 cd ff ff ff       	call   c0021afc <SATA::~SATA()>
c0021b2f:	83 c4 10             	add    esp,0x10
c0021b32:	83 ec 08             	sub    esp,0x8
c0021b35:	68 7c 01 00 00       	push   0x17c
c0021b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b3e:	e8 d7 ae fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021b43:	83 c4 10             	add    esp,0x10
c0021b46:	83 c4 0c             	add    esp,0xc
c0021b49:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021b4a <SATAPI::~SATAPI()>:
c0021b4a:	83 ec 0c             	sub    esp,0xc
c0021b4d:	ba 94 53 02 c0       	mov    edx,0xc0025394
c0021b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b56:	89 10                	mov    DWORD PTR [eax],edx
c0021b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5c:	83 ec 0c             	sub    esp,0xc
c0021b5f:	50                   	push   eax
c0021b60:	e8 a5 c8 fe ff       	call   c000e40a <PhysicalDisk::~PhysicalDisk()>
c0021b65:	83 c4 10             	add    esp,0x10
c0021b68:	90                   	nop
c0021b69:	83 c4 0c             	add    esp,0xc
c0021b6c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021b6e <SATAPI::~SATAPI()>:
c0021b6e:	83 ec 0c             	sub    esp,0xc
c0021b71:	83 ec 0c             	sub    esp,0xc
c0021b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b78:	e8 cd ff ff ff       	call   c0021b4a <SATAPI::~SATAPI()>
c0021b7d:	83 c4 10             	add    esp,0x10
c0021b80:	83 ec 08             	sub    esp,0x8
c0021b83:	68 80 01 00 00       	push   0x180
c0021b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b8c:	e8 89 ae fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021b91:	83 c4 10             	add    esp,0x10
c0021b94:	83 c4 0c             	add    esp,0xc
c0021b97:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021b98 <AVX::~AVX()>:
c0021b98:	83 ec 0c             	sub    esp,0xc
c0021b9b:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c0021ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba4:	89 10                	mov    DWORD PTR [eax],edx
c0021ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021baa:	83 ec 0c             	sub    esp,0xc
c0021bad:	50                   	push   eax
c0021bae:	e8 dd c8 fe ff       	call   c000e490 <FPU::~FPU()>
c0021bb3:	83 c4 10             	add    esp,0x10
c0021bb6:	90                   	nop
c0021bb7:	83 c4 0c             	add    esp,0xc
c0021bba:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021bbc <AVX::~AVX()>:
c0021bbc:	83 ec 0c             	sub    esp,0xc
c0021bbf:	83 ec 0c             	sub    esp,0xc
c0021bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bc6:	e8 cd ff ff ff       	call   c0021b98 <AVX::~AVX()>
c0021bcb:	83 c4 10             	add    esp,0x10
c0021bce:	83 ec 08             	sub    esp,0x8
c0021bd1:	68 58 01 00 00       	push   0x158
c0021bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bda:	e8 3b ae fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021bdf:	83 c4 10             	add    esp,0x10
c0021be2:	83 c4 0c             	add    esp,0xc
c0021be5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021be8 <MMX::~MMX()>:
c0021be8:	83 ec 0c             	sub    esp,0xc
c0021beb:	ba 14 54 02 c0       	mov    edx,0xc0025414
c0021bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf4:	89 10                	mov    DWORD PTR [eax],edx
c0021bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bfa:	83 ec 0c             	sub    esp,0xc
c0021bfd:	50                   	push   eax
c0021bfe:	e8 8d c8 fe ff       	call   c000e490 <FPU::~FPU()>
c0021c03:	83 c4 10             	add    esp,0x10
c0021c06:	90                   	nop
c0021c07:	83 c4 0c             	add    esp,0xc
c0021c0a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021c0c <MMX::~MMX()>:
c0021c0c:	83 ec 0c             	sub    esp,0xc
c0021c0f:	83 ec 0c             	sub    esp,0xc
c0021c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c16:	e8 cd ff ff ff       	call   c0021be8 <MMX::~MMX()>
c0021c1b:	83 c4 10             	add    esp,0x10
c0021c1e:	83 ec 08             	sub    esp,0x8
c0021c21:	68 58 01 00 00       	push   0x158
c0021c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c2a:	e8 eb ad fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021c2f:	83 c4 10             	add    esp,0x10
c0021c32:	83 c4 0c             	add    esp,0xc
c0021c35:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021c38 <SSE::~SSE()>:
c0021c38:	83 ec 0c             	sub    esp,0xc
c0021c3b:	ba 54 54 02 c0       	mov    edx,0xc0025454
c0021c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c44:	89 10                	mov    DWORD PTR [eax],edx
c0021c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c4a:	83 ec 0c             	sub    esp,0xc
c0021c4d:	50                   	push   eax
c0021c4e:	e8 3d c8 fe ff       	call   c000e490 <FPU::~FPU()>
c0021c53:	83 c4 10             	add    esp,0x10
c0021c56:	90                   	nop
c0021c57:	83 c4 0c             	add    esp,0xc
c0021c5a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021c5c <SSE::~SSE()>:
c0021c5c:	83 ec 0c             	sub    esp,0xc
c0021c5f:	83 ec 0c             	sub    esp,0xc
c0021c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c66:	e8 cd ff ff ff       	call   c0021c38 <SSE::~SSE()>
c0021c6b:	83 c4 10             	add    esp,0x10
c0021c6e:	83 ec 08             	sub    esp,0x8
c0021c71:	68 58 01 00 00       	push   0x158
c0021c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c7a:	e8 9b ad fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021c7f:	83 c4 10             	add    esp,0x10
c0021c82:	83 c4 0c             	add    esp,0xc
c0021c85:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021c88 <x87::~x87()>:
c0021c88:	83 ec 0c             	sub    esp,0xc
c0021c8b:	ba 94 54 02 c0       	mov    edx,0xc0025494
c0021c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c94:	89 10                	mov    DWORD PTR [eax],edx
c0021c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9a:	83 ec 0c             	sub    esp,0xc
c0021c9d:	50                   	push   eax
c0021c9e:	e8 ed c7 fe ff       	call   c000e490 <FPU::~FPU()>
c0021ca3:	83 c4 10             	add    esp,0x10
c0021ca6:	90                   	nop
c0021ca7:	83 c4 0c             	add    esp,0xc
c0021caa:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021cac <x87::~x87()>:
c0021cac:	83 ec 0c             	sub    esp,0xc
c0021caf:	83 ec 0c             	sub    esp,0xc
c0021cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cb6:	e8 cd ff ff ff       	call   c0021c88 <x87::~x87()>
c0021cbb:	83 c4 10             	add    esp,0x10
c0021cbe:	83 ec 08             	sub    esp,0x8
c0021cc1:	68 58 01 00 00       	push   0x158
c0021cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cca:	e8 4b ad fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021ccf:	83 c4 10             	add    esp,0x10
c0021cd2:	83 c4 0c             	add    esp,0xc
c0021cd5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021cd6 <IOAPIC::~IOAPIC()>:
c0021cd6:	83 ec 0c             	sub    esp,0xc
c0021cd9:	ba ec 55 02 c0       	mov    edx,0xc00255ec
c0021cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce2:	89 10                	mov    DWORD PTR [eax],edx
c0021ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce8:	83 ec 0c             	sub    esp,0xc
c0021ceb:	50                   	push   eax
c0021cec:	e8 1f c1 fe ff       	call   c000de10 <Device::~Device()>
c0021cf1:	83 c4 10             	add    esp,0x10
c0021cf4:	90                   	nop
c0021cf5:	83 c4 0c             	add    esp,0xc
c0021cf8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021cfa <IOAPIC::~IOAPIC()>:
c0021cfa:	83 ec 0c             	sub    esp,0xc
c0021cfd:	83 ec 0c             	sub    esp,0xc
c0021d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d04:	e8 cd ff ff ff       	call   c0021cd6 <IOAPIC::~IOAPIC()>
c0021d09:	83 c4 10             	add    esp,0x10
c0021d0c:	83 ec 08             	sub    esp,0x8
c0021d0f:	68 68 01 00 00       	push   0x168
c0021d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d18:	e8 fd ac fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021d1d:	83 c4 10             	add    esp,0x10
c0021d20:	83 c4 0c             	add    esp,0xc
c0021d23:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021d24 <APIC::~APIC()>:
c0021d24:	83 ec 0c             	sub    esp,0xc
c0021d27:	ba a4 55 02 c0       	mov    edx,0xc00255a4
c0021d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d30:	89 10                	mov    DWORD PTR [eax],edx
c0021d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d36:	83 ec 0c             	sub    esp,0xc
c0021d39:	50                   	push   eax
c0021d3a:	e8 25 cc fe ff       	call   c000e964 <InterruptController::~InterruptController()>
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	90                   	nop
c0021d43:	83 c4 0c             	add    esp,0xc
c0021d46:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021d48 <APIC::~APIC()>:
c0021d48:	83 ec 0c             	sub    esp,0xc
c0021d4b:	83 ec 0c             	sub    esp,0xc
c0021d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d52:	e8 cd ff ff ff       	call   c0021d24 <APIC::~APIC()>
c0021d57:	83 c4 10             	add    esp,0x10
c0021d5a:	83 ec 08             	sub    esp,0x8
c0021d5d:	68 58 21 00 00       	push   0x2158
c0021d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d66:	e8 af ac fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021d6b:	83 c4 10             	add    esp,0x10
c0021d6e:	83 c4 0c             	add    esp,0xc
c0021d71:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021d72 <PIC::~PIC()>:
c0021d72:	83 ec 0c             	sub    esp,0xc
c0021d75:	ba 3c 56 02 c0       	mov    edx,0xc002563c
c0021d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d7e:	89 10                	mov    DWORD PTR [eax],edx
c0021d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d84:	83 ec 0c             	sub    esp,0xc
c0021d87:	50                   	push   eax
c0021d88:	e8 d7 cb fe ff       	call   c000e964 <InterruptController::~InterruptController()>
c0021d8d:	83 c4 10             	add    esp,0x10
c0021d90:	90                   	nop
c0021d91:	83 c4 0c             	add    esp,0xc
c0021d94:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021d96 <PIC::~PIC()>:
c0021d96:	83 ec 0c             	sub    esp,0xc
c0021d99:	83 ec 0c             	sub    esp,0xc
c0021d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021da0:	e8 cd ff ff ff       	call   c0021d72 <PIC::~PIC()>
c0021da5:	83 c4 10             	add    esp,0x10
c0021da8:	83 ec 08             	sub    esp,0x8
c0021dab:	68 58 21 00 00       	push   0x2158
c0021db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021db4:	e8 61 ac fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021db9:	83 c4 10             	add    esp,0x10
c0021dbc:	83 c4 0c             	add    esp,0xc
c0021dbf:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021dc0 <APICTimer::~APICTimer()>:
c0021dc0:	83 ec 0c             	sub    esp,0xc
c0021dc3:	ba 90 56 02 c0       	mov    edx,0xc0025690
c0021dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dcc:	89 10                	mov    DWORD PTR [eax],edx
c0021dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd2:	83 ec 0c             	sub    esp,0xc
c0021dd5:	50                   	push   eax
c0021dd6:	e8 95 e9 fe ff       	call   c0010770 <Timer::~Timer()>
c0021ddb:	83 c4 10             	add    esp,0x10
c0021dde:	90                   	nop
c0021ddf:	83 c4 0c             	add    esp,0xc
c0021de2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021de4 <APICTimer::~APICTimer()>:
c0021de4:	83 ec 0c             	sub    esp,0xc
c0021de7:	83 ec 0c             	sub    esp,0xc
c0021dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dee:	e8 cd ff ff ff       	call   c0021dc0 <APICTimer::~APICTimer()>
c0021df3:	83 c4 10             	add    esp,0x10
c0021df6:	83 ec 08             	sub    esp,0x8
c0021df9:	68 60 01 00 00       	push   0x160
c0021dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e02:	e8 13 ac fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021e07:	83 c4 10             	add    esp,0x10
c0021e0a:	83 c4 0c             	add    esp,0xc
c0021e0d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021e10 <PIT::~PIT()>:
c0021e10:	83 ec 0c             	sub    esp,0xc
c0021e13:	ba e0 56 02 c0       	mov    edx,0xc00256e0
c0021e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e1c:	89 10                	mov    DWORD PTR [eax],edx
c0021e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e22:	83 ec 0c             	sub    esp,0xc
c0021e25:	50                   	push   eax
c0021e26:	e8 45 e9 fe ff       	call   c0010770 <Timer::~Timer()>
c0021e2b:	83 c4 10             	add    esp,0x10
c0021e2e:	90                   	nop
c0021e2f:	83 c4 0c             	add    esp,0xc
c0021e32:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021e34 <PIT::~PIT()>:
c0021e34:	83 ec 0c             	sub    esp,0xc
c0021e37:	83 ec 0c             	sub    esp,0xc
c0021e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e3e:	e8 cd ff ff ff       	call   c0021e10 <PIT::~PIT()>
c0021e43:	83 c4 10             	add    esp,0x10
c0021e46:	83 ec 08             	sub    esp,0x8
c0021e49:	68 5c 01 00 00       	push   0x15c
c0021e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e52:	e8 c3 ab fe ff       	call   c000ca1a <operator delete(void*, unsigned long)>
c0021e57:	83 c4 10             	add    esp,0x10
c0021e5a:	83 c4 0c             	add    esp,0xc
c0021e5d:	c3                   	ret    
