
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c0 7e 00 00       	call   c0007ee0 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 15 c4 01 00       	call   c001c43a <_init>
c0000025:	c3                   	ret    
c0000026:	bb d6 ce 01 c0       	mov    ebx,0xc001ced6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e0 ce 01 c0    	cmp    ebx,0xc001cee0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 f9 01 c0       	mov    eax,0xc001f9b8
c0000049:	3d b8 f9 01 c0       	cmp    eax,0xc001f9b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 f9 01 c0       	push   0xc001f9b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 f9 01 c0       	mov    eax,0xc001f9b8
c0000075:	2d b8 f9 01 c0       	sub    eax,0xc001f9b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 f9 01 c0       	push   0xc001f9b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e0 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fbe0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e8 ce 01 c0       	mov    ebx,0xc001cee8
c00000bb:	81 eb e4 ce 01 c0    	sub    ebx,0xc001cee4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e4 ce 01 c0       	mov    esi,0xc001cee4
c00000ca:	a1 e4 fb 01 c0       	mov    eax,ds:0xc001fbe4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e4 fb 01 c0       	mov    ds:0xc001fbe4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e4 fb 01 c0       	mov    eax,ds:0xc001fbe4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 f9 01 c0       	push   0xc001f9b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e0 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fbe0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e8 fb 01 c0       	push   0xc001fbe8
c000012c:	68 b8 f9 01 c0       	push   0xc001f9b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 14 2f 01 00       	call   c00131e4 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 34 a6 00 00       	call   c000a91c <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 f2 2e 01 00       	call   c00131e4 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 c3 33 01 00       	call   c00136d4 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 12 3a 01 00       	call   c0013d2c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 e0 09 02 c0 	lgdtd  ds:0xc00209e0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 86 6b 00 00       	jmp    c0006f28 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 00 fc 01 c0       	mov    ds:0xc001fc00,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 00 fc 01 c0    	mov    DWORD PTR ds:0xc001fc00,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 00 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fc00
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 00 cf 01 c0 02 	test   BYTE PTR [edx-0x3ffe3100],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 00 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe3100],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 00 cf 01 c0 08 	test   BYTE PTR [edx-0x3ffe3100],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 00 cf 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3100],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 00 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe3100],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 20 fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc20
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 20 fc 01 c0    	mov    DWORD PTR ds:0xc001fc20,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 24 fc 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe03dc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 24 fc 01 c0 	mov    DWORD PTR [eax*4-0x3ffe03dc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 20 fc 01 c0    	mov    DWORD PTR ds:0xc001fc20,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 4c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc4c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 5c fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc5c
c0000d5d:	c7 42 0c 54 fc 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fc54
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 5c fc 01 c0    	mov    DWORD PTR ds:0xc001fc5c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 4c fc 01 c0    	mov    DWORD PTR ds:0xc001fc4c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 20 fc 01 c0 02 	test   BYTE PTR ds:0xc001fc20,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 1e 6f 00 00       	call   c0007d5c <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 60 6e 00 00       	call   c0007d5c <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 4a 6e 00 00       	call   c0007d5c <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 26 6e 00 00       	call   c0007d5c <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 20 fc 01 c0    	mov    edi,DWORD PTR ds:0xc001fc20
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 24 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe03dc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 24 fc 01 c0 	mov    DWORD PTR [edx*4-0x3ffe03dc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 54 fc 01 c0 	lea    edx,[eax*8-0x3ffe03ac]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 60 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fc60
c00010df:	81 fb 54 fc 01 c0    	cmp    ebx,0xc001fc54
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 54 fc 01 c0       	cmp    eax,0xc001fc54
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 50 fc 01 c0    	cmp    DWORD PTR ds:0xc001fc50,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 5c fc 01 c0       	mov    ds:0xc001fc5c,eax
c000111b:	a3 60 fc 01 c0       	mov    ds:0xc001fc60,eax
c0001120:	a3 50 fc 01 c0       	mov    ds:0xc001fc50,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 54 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc54
c000112e:	c7 40 0c 54 fc 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fc54
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 60 fc 01 c0       	mov    ds:0xc001fc60,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 54 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc54
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 18 fc 01 c0 	lea    ebp,[edx*4-0x3ffe03e8]
c000117f:	8b 14 95 20 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe03e0]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 20 fc 01 c0 	lea    ecx,[edx*4-0x3ffe03e0]
c000119a:	8b 14 95 20 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe03e0]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 54 ff 01 c0 	or     DWORD PTR [edi*4-0x3ffe00ac],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 54 fc 01 c0 	lea    eax,[eax*8-0x3ffe03ac]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 5c fc 01 c0    	mov    DWORD PTR ds:0xc001fc5c,ecx
c0001254:	89 0d 60 fc 01 c0    	mov    DWORD PTR ds:0xc001fc60,ecx
c000125a:	c7 41 08 54 fc 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fc54
c0001261:	c7 41 0c 54 fc 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fc54
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 4c fc 01 c0 	lea    edx,[ecx*8-0x3ffe03b4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 54 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00ac]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 54 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00ac]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 4c fc 01 c0 	lea    edx,[eax*4-0x3ffe03b4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 54 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe00ac],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 5c fc 01 c0    	mov    DWORD PTR ds:0xc001fc5c,edi
c0001327:	89 3d 60 fc 01 c0    	mov    DWORD PTR ds:0xc001fc60,edi
c000132d:	c7 47 08 54 fc 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fc54
c0001334:	c7 47 0c 54 fc 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fc54
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 50 fc 01 c0    	mov    DWORD PTR ds:0xc001fc50,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 4c fc 01 c0       	mov    eax,ds:0xc001fc4c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 4c fc 01 c0    	mov    DWORD PTR ds:0xc001fc4c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 20 fc 01 c0       	mov    edx,0xc001fc20
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 20 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc20,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 74 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff74
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 74 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff74,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 74 ff 01 c0    	mov    DWORD PTR ds:0xc001ff74,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 4c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc4c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 4c fc 01 c0    	mov    DWORD PTR ds:0xc001fc4c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 20 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc20,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 7c ff 01 c0    	push   DWORD PTR ds:0xc001ff7c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 20 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc20,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 7c ff 01 c0       	mov    eax,ds:0xc001ff7c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 4c fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc4c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 4c fc 01 c0       	mov    eax,ds:0xc001fc4c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 24 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03dc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 54 fc 01 c0       	mov    eax,0xc001fc54
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 4c ff 01 c0       	cmp    eax,0xc001ff4c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 88 ff 01 c0       	mov    eax,ds:0xc001ff88
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 70 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff70
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 84 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff84
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 94 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff94
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 04 d0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2ffc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 20 fc 01 c0       	mov    eax,ds:0xc001fc20
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 20 fc 01 c0       	mov    ds:0xc001fc20,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 64 ff 01 c0    	mov    DWORD PTR ds:0xc001ff64,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 68 ff 01 c0    	mov    DWORD PTR ds:0xc001ff68,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 6c ff 01 c0    	mov    DWORD PTR ds:0xc001ff6c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 74 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff74,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 e0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc020]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 b2 53 01 00       	jmp    c00170bc <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 e0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc020]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 e0 53 01 00       	jmp    c0017100 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 e0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc020]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 05 54 01 00       	jmp    c0017144 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 60 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2ea0]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 60 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2ea0]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba 84 ef 01 c0       	mov    edx,0xc001ef84
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 1c d0 01 c0       	mov    edx,0xc001d01c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 c0 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0040]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 a0 ff 01 c0    	mov    ax,ds:0xc001ffa0
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 a0 ff 01 c0    	mov    ds:0xc001ffa0,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 22 d0 01 c0       	mov    eax,0xc001d022
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad e0 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f20]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 2b d0 01 c0       	mov    eax,0xc001d02b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 60 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2ea0]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 c0 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0040]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 c0 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0040],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 b0 d0 01 c0       	mov    eax,0xc001d0b0
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 c0 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0040]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb a0 d0 01 c0       	mov    ebx,0xc001d0a0
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba 80 d0 01 c0       	mov    edx,0xc001d080
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba 90 d0 01 c0       	mov    edx,0xc001d090
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 32 d0 01 c0       	mov    edx,0xc001d032
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 3e d0 01 c0       	mov    edx,0xc001d03e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 52 d0 01 c0       	mov    edx,0xc001d052
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 ea 23 00 00       	call   c0007e85 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 e2 23 00 00       	call   c0007e95 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c 80 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d480
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 80 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d480
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 80 d2 01 c0       	mov    eax,0xc001d280
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 c0 d1 01 c0       	mov    eax,0xc001d1c0
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 80 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2e80]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 40 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04c0]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 a0 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0460]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 f0 00 02 c0       	mov    eax,0xc00200f0
c0005ed7:	ba 30 0a 02 c0       	mov    edx,0xc0020a30
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 80 fb 01 c0 	movsx  eax,BYTE PTR ds:0xc001fb80
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 18 19 01 00       	call   c0017998 <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 a0 fb 01 c0       	mov    eax,0xc001fba0
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d d4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209d4,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 80 d5 01 c0       	push   0xc001d580
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 a0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0460]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d d4 09 02 c0    	mov    edi,DWORD PTR ds:0xc00209d4
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 a0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0460]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 a0 09 02 c0       	mov    ecx,0xc00209a0
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d 60 00 02 c0 00 	cmp    DWORD PTR ds:0xc0020060,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba f4 00 02 c0       	mov    edx,0xc00200f4
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 60 00 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdffa0],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa 60 00 02 c0    	lea    ebp,[edx-0x3ffdffa0]
c000658e:	89 82 60 00 02 c0    	mov    DWORD PTR [edx-0x3ffdffa0],eax
c0006594:	89 ba 64 00 02 c0    	mov    DWORD PTR [edx-0x3ffdff9c],edi
c000659a:	c7 82 68 00 02 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffdff98],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 60 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020060,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 60 00 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffdffa0],0x0
c00065fc:	e8 83 f8 ff ff       	call   c0005e84 <bclear_cache>
c0006601:	c3                   	ret    

c0006602 <iso_read>:
c0006602:	55                   	push   ebp
c0006603:	57                   	push   edi
c0006604:	56                   	push   esi
c0006605:	53                   	push   ebx
c0006606:	83 ec 1c             	sub    esp,0x1c
c0006609:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000660d:	83 fd 0f             	cmp    ebp,0xf
c0006610:	0f 8f ba 01 00 00    	jg     c00067d0 <iso_read+0x1ce>
c0006616:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000661a:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000661e:	83 3c 85 60 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffa0],0x0
c0006626:	0f 84 b0 01 00 00    	je     c00067dc <iso_read+0x1da>
c000662c:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006630:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006634:	8b 04 85 f0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff10]
c000663b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663f:	85 c0                	test   eax,eax
c0006641:	0f 85 a1 01 00 00    	jne    c00067e8 <iso_read+0x1e6>
c0006647:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000664c:	0f 84 71 01 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006652:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006656:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000665a:	8d 14 85 60 00 02 c0 	lea    edx,[eax*4-0x3ffdffa0]
c0006661:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0006664:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006667:	29 c2                	sub    edx,eax
c0006669:	89 d1                	mov    ecx,edx
c000666b:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666f:	76 04                	jbe    c0006675 <iso_read+0x73>
c0006671:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006675:	85 c9                	test   ecx,ecx
c0006677:	0f 84 42 01 00 00    	je     c00067bf <iso_read+0x1bd>
c000667d:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c0006684:	e9 b7 00 00 00       	jmp    c0006740 <iso_read+0x13e>
c0006689:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668f:	e9 e9 00 00 00       	jmp    c000677d <iso_read+0x17b>
c0006694:	ba 20 00 00 00       	mov    edx,0x20
c0006699:	e9 e2 00 00 00       	jmp    c0006780 <iso_read+0x17e>
c000669e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00066a2:	39 ca                	cmp    edx,ecx
c00066a4:	7e 04                	jle    c00066aa <iso_read+0xa8>
c00066a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066aa:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066ad:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066b1:	c1 e8 0b             	shr    eax,0xb
c00066b4:	03 04 95 60 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffa0]
c00066bb:	e8 72 fa ff ff       	call   c0006132 <bdread>
c00066c0:	85 c0                	test   eax,eax
c00066c2:	0f 88 2c 01 00 00    	js     c00067f4 <iso_read+0x1f2>
c00066c8:	8b 14 85 40 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04c0]
c00066cf:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066d2:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d6:	8b 04 85 68 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff98]
c00066dd:	25 ff 07 00 00       	and    eax,0x7ff
c00066e2:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066f4:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f8:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066fb:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066ff:	8d 14 85 60 00 02 c0 	lea    edx,[eax*4-0x3ffdffa0]
c0006706:	89 f8                	mov    eax,edi
c0006708:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c000670b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670e:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0006712:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006716:	0f 84 a7 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c000671c:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671f:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006723:	8b 14 95 6c 00 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdff94]
c000672a:	29 c2                	sub    edx,eax
c000672c:	89 d1                	mov    ecx,edx
c000672e:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006732:	76 04                	jbe    c0006738 <iso_read+0x136>
c0006734:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006738:	85 c9                	test   ecx,ecx
c000673a:	0f 84 83 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006740:	89 c6                	mov    esi,eax
c0006742:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006748:	ba 00 08 00 00       	mov    edx,0x800
c000674d:	29 f2                	sub    edx,esi
c000674f:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006755:	0f 85 43 ff ff ff    	jne    c000669e <iso_read+0x9c>
c000675b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006761:	0f 8e 37 ff ff ff    	jle    c000669e <iso_read+0x9c>
c0006767:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000676d:	0f 8f 21 ff ff ff    	jg     c0006694 <iso_read+0x92>
c0006773:	89 ca                	mov    edx,ecx
c0006775:	85 c9                	test   ecx,ecx
c0006777:	0f 88 0c ff ff ff    	js     c0006689 <iso_read+0x87>
c000677d:	c1 fa 0b             	sar    edx,0xb
c0006780:	89 d6                	mov    esi,edx
c0006782:	c1 e6 0b             	shl    esi,0xb
c0006785:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006789:	83 ec 04             	sub    esp,0x4
c000678c:	52                   	push   edx
c000678d:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006790:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006794:	c1 e8 0b             	shr    eax,0xb
c0006797:	03 04 95 60 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffa0]
c000679e:	50                   	push   eax
c000679f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00067a3:	e8 bc f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a8:	83 c4 10             	add    esp,0x10
c00067ab:	85 c0                	test   eax,eax
c00067ad:	0f 8f 3d ff ff ff    	jg     c00066f0 <iso_read+0xee>
c00067b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067bd:	eb 09                	jmp    c00067c8 <iso_read+0x1c6>
c00067bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c7:	99                   	cdq    
c00067c8:	83 c4 1c             	add    esp,0x1c
c00067cb:	5b                   	pop    ebx
c00067cc:	5e                   	pop    esi
c00067cd:	5f                   	pop    edi
c00067ce:	5d                   	pop    ebp
c00067cf:	c3                   	ret    
c00067d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067da:	eb ec                	jmp    c00067c8 <iso_read+0x1c6>
c00067dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e6:	eb e0                	jmp    c00067c8 <iso_read+0x1c6>
c00067e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f2:	eb d4                	jmp    c00067c8 <iso_read+0x1c6>
c00067f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067fe:	eb c8                	jmp    c00067c8 <iso_read+0x1c6>

c0006800 <iso_seek>:
c0006800:	53                   	push   ebx
c0006801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006805:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006809:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000680d:	83 f8 0f             	cmp    eax,0xf
c0006810:	0f 8f a4 00 00 00    	jg     c00068ba <iso_seek+0xba>
c0006816:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006819:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000681c:	83 3c 9d 60 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffa0],0x0
c0006824:	0f 84 9c 00 00 00    	je     c00068c6 <iso_seek+0xc6>
c000682a:	8d 1c c0             	lea    ebx,[eax+eax*8]
c000682d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006830:	83 3c 9d f0 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdff10],0x0
c0006838:	0f 85 94 00 00 00    	jne    c00068d2 <iso_seek+0xd2>
c000683e:	83 fa 01             	cmp    edx,0x1
c0006841:	74 53                	je     c0006896 <iso_seek+0x96>
c0006843:	83 fa 02             	cmp    edx,0x2
c0006846:	74 5d                	je     c00068a5 <iso_seek+0xa5>
c0006848:	85 d2                	test   edx,edx
c000684a:	74 0c                	je     c0006858 <iso_seek+0x58>
c000684c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006851:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006856:	eb 3c                	jmp    c0006894 <iso_seek+0x94>
c0006858:	89 0c 9d 68 00 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdff98],ecx
c000685f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006862:	8d 14 90             	lea    edx,[eax+edx*4]
c0006865:	8b 0c 95 6c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdff94]
c000686c:	39 0c 95 68 00 02 c0 	cmp    DWORD PTR [edx*4-0x3ffdff98],ecx
c0006873:	76 0d                	jbe    c0006882 <iso_seek+0x82>
c0006875:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006878:	8d 14 90             	lea    edx,[eax+edx*4]
c000687b:	89 0c 95 68 00 02 c0 	mov    DWORD PTR [edx*4-0x3ffdff98],ecx
c0006882:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006885:	8d 04 90             	lea    eax,[eax+edx*4]
c0006888:	8b 04 85 68 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff98]
c000688f:	ba 00 00 00 00       	mov    edx,0x0
c0006894:	5b                   	pop    ebx
c0006895:	c3                   	ret    
c0006896:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006899:	8d 14 90             	lea    edx,[eax+edx*4]
c000689c:	01 0c 95 68 00 02 c0 	add    DWORD PTR [edx*4-0x3ffdff98],ecx
c00068a3:	eb ba                	jmp    c000685f <iso_seek+0x5f>
c00068a5:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a8:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ab:	8d 14 95 60 00 02 c0 	lea    edx,[edx*4-0x3ffdffa0]
c00068b2:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b8:	eb a5                	jmp    c000685f <iso_seek+0x5f>
c00068ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068c4:	eb ce                	jmp    c0006894 <iso_seek+0x94>
c00068c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d0:	eb c2                	jmp    c0006894 <iso_seek+0x94>
c00068d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068dc:	eb b6                	jmp    c0006894 <iso_seek+0x94>

c00068de <iso_tell>:
c00068de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e2:	83 f8 0f             	cmp    eax,0xf
c00068e5:	7f 33                	jg     c000691a <iso_tell+0x3c>
c00068e7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068ea:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ed:	83 3c 95 60 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffa0],0x0
c00068f5:	74 2e                	je     c0006925 <iso_tell+0x47>
c00068f7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068fa:	8d 14 90             	lea    edx,[eax+edx*4]
c00068fd:	83 3c 95 f0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff10],0x0
c0006905:	75 29                	jne    c0006930 <iso_tell+0x52>
c0006907:	8d 14 c0             	lea    edx,[eax+eax*8]
c000690a:	8d 04 90             	lea    eax,[eax+edx*4]
c000690d:	8b 04 85 68 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff98]
c0006914:	ba 00 00 00 00       	mov    edx,0x0
c0006919:	c3                   	ret    
c000691a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006924:	c3                   	ret    
c0006925:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000692a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692f:	c3                   	ret    
c0006930:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006935:	ba ff ff ff ff       	mov    edx,0xffffffff
c000693a:	c3                   	ret    

c000693b <iso_total>:
c000693b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693f:	83 f8 0f             	cmp    eax,0xf
c0006942:	7f 2e                	jg     c0006972 <iso_total+0x37>
c0006944:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006947:	8d 14 90             	lea    edx,[eax+edx*4]
c000694a:	83 3c 95 60 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffa0],0x0
c0006952:	74 24                	je     c0006978 <iso_total+0x3d>
c0006954:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006957:	8d 14 90             	lea    edx,[eax+edx*4]
c000695a:	83 3c 95 f0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff10],0x0
c0006962:	75 1a                	jne    c000697e <iso_total+0x43>
c0006964:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006967:	8d 04 90             	lea    eax,[eax+edx*4]
c000696a:	8b 04 85 6c 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff94]
c0006971:	c3                   	ret    
c0006972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006977:	c3                   	ret    
c0006978:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697d:	c3                   	ret    
c000697e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006983:	c3                   	ret    

c0006984 <fn_postprocess>:
c0006984:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006988:	8a 01                	mov    al,BYTE PTR [ecx]
c000698a:	84 c0                	test   al,al
c000698c:	74 25                	je     c00069b3 <fn_postprocess+0x2f>
c000698e:	3c 3b                	cmp    al,0x3b
c0006990:	74 21                	je     c00069b3 <fn_postprocess+0x2f>
c0006992:	89 c8                	mov    eax,ecx
c0006994:	40                   	inc    eax
c0006995:	8a 10                	mov    dl,BYTE PTR [eax]
c0006997:	84 d2                	test   dl,dl
c0006999:	74 05                	je     c00069a0 <fn_postprocess+0x1c>
c000699b:	80 fa 3b             	cmp    dl,0x3b
c000699e:	75 f4                	jne    c0006994 <fn_postprocess+0x10>
c00069a0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069a3:	39 c1                	cmp    ecx,eax
c00069a5:	73 06                	jae    c00069ad <fn_postprocess+0x29>
c00069a7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069ab:	74 01                	je     c00069ae <fn_postprocess+0x2a>
c00069ad:	c3                   	ret    
c00069ae:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b2:	c3                   	ret    
c00069b3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00069b6:	eb f5                	jmp    c00069ad <fn_postprocess+0x29>

c00069b8 <iso_readdir>:
c00069b8:	55                   	push   ebp
c00069b9:	57                   	push   edi
c00069ba:	56                   	push   esi
c00069bb:	53                   	push   ebx
c00069bc:	83 ec 1c             	sub    esp,0x1c
c00069bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069c3:	83 fe 0f             	cmp    esi,0xf
c00069c6:	0f 8f 7a 02 00 00    	jg     c0006c46 <iso_readdir+0x28e>
c00069cc:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069cf:	8d 04 86             	lea    eax,[esi+eax*4]
c00069d2:	83 3c 85 60 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffa0],0x0
c00069da:	0f 84 70 02 00 00    	je     c0006c50 <iso_readdir+0x298>
c00069e0:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e3:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e6:	83 3c 85 64 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdff9c],0x0
c00069ee:	0f 84 66 02 00 00    	je     c0006c5a <iso_readdir+0x2a2>
c00069f4:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f7:	8d 04 86             	lea    eax,[esi+eax*4]
c00069fa:	83 3c 85 f0 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdff10],0x0
c0006a02:	0f 85 5c 02 00 00    	jne    c0006c64 <iso_readdir+0x2ac>
c0006a08:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a0b:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a0e:	8b 04 95 68 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff98]
c0006a15:	8b 0c 95 6c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdff94]
c0006a1c:	39 c8                	cmp    eax,ecx
c0006a1e:	73 57                	jae    c0006a77 <iso_readdir+0xbf>
c0006a20:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a23:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a26:	c1 e7 02             	shl    edi,0x2
c0006a29:	c1 e8 0b             	shr    eax,0xb
c0006a2c:	03 87 60 00 02 c0    	add    eax,DWORD PTR [edi-0x3ffdffa0]
c0006a32:	e8 e8 f6 ff ff       	call   c000611f <biread>
c0006a37:	85 c0                	test   eax,eax
c0006a39:	0f 88 2f 02 00 00    	js     c0006c6e <iso_readdir+0x2b6>
c0006a3f:	8b 14 85 a0 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0460]
c0006a46:	83 c2 04             	add    edx,0x4
c0006a49:	8b 87 68 00 02 c0    	mov    eax,DWORD PTR [edi-0x3ffdff98]
c0006a4f:	89 c3                	mov    ebx,eax
c0006a51:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a57:	01 d3                	add    ebx,edx
c0006a59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a5b:	84 c9                	test   cl,cl
c0006a5d:	75 22                	jne    c0006a81 <iso_readdir+0xc9>
c0006a5f:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a64:	05 00 08 00 00       	add    eax,0x800
c0006a69:	89 87 68 00 02 c0    	mov    DWORD PTR [edi-0x3ffdff98],eax
c0006a6f:	3b 87 6c 00 02 c0    	cmp    eax,DWORD PTR [edi-0x3ffdff94]
c0006a75:	72 b2                	jb     c0006a29 <iso_readdir+0x71>
c0006a77:	b8 00 00 00 00       	mov    eax,0x0
c0006a7c:	e9 83 00 00 00       	jmp    c0006b04 <iso_readdir+0x14c>
c0006a81:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a84:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a87:	3b 04 bd 6c 00 02 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffdff94]
c0006a8e:	0f 83 e4 01 00 00    	jae    c0006c78 <iso_readdir+0x2c0>
c0006a94:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a98:	75 06                	jne    c0006aa0 <iso_readdir+0xe8>
c0006a9a:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a9e:	74 6c                	je     c0006b0c <iso_readdir+0x154>
c0006aa0:	83 3d d4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209d4,0x0
c0006aa7:	0f 84 9d 00 00 00    	je     c0006b4a <iso_readdir+0x192>
c0006aad:	31 c9                	xor    ecx,ecx
c0006aaf:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ab2:	8d 53 21             	lea    edx,[ebx+0x21]
c0006ab5:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006ab8:	8d 04 86             	lea    eax,[esi+eax*4]
c0006abb:	8d 04 85 78 00 02 c0 	lea    eax,[eax*4-0x3ffdff88]
c0006ac2:	e8 c0 f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006ac7:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006acb:	0f 85 66 01 00 00    	jne    c0006c37 <iso_readdir+0x27f>
c0006ad1:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ad4:	e8 a5 f3 ff ff       	call   c0005e7e <iso_733>
c0006ad9:	ba 00 00 00 00       	mov    edx,0x0
c0006ade:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ae1:	c1 e1 02             	shl    ecx,0x2
c0006ae4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ae7:	8d 3c bd 60 00 02 c0 	lea    edi,[edi*4-0x3ffdffa0]
c0006aee:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006af1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006af4:	31 c0                	xor    eax,eax
c0006af6:	8a 03                	mov    al,BYTE PTR [ebx]
c0006af8:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006afb:	01 ce                	add    esi,ecx
c0006afd:	8d 04 b5 70 00 02 c0 	lea    eax,[esi*4-0x3ffdff90]
c0006b04:	83 c4 1c             	add    esp,0x1c
c0006b07:	5b                   	pop    ebx
c0006b08:	5e                   	pop    esi
c0006b09:	5f                   	pop    edi
c0006b0a:	5d                   	pop    ebp
c0006b0b:	c3                   	ret    
c0006b0c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b12:	01 c8                	add    eax,ecx
c0006b14:	8d 3c bd 60 00 02 c0 	lea    edi,[edi*4-0x3ffdffa0]
c0006b1b:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b1e:	89 c1                	mov    ecx,eax
c0006b20:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b26:	31 db                	xor    ebx,ebx
c0006b28:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b2b:	89 d9                	mov    ecx,ebx
c0006b2d:	01 c8                	add    eax,ecx
c0006b2f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b32:	25 ff 07 00 00       	and    eax,0x7ff
c0006b37:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b3a:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b3d:	0f 85 5d ff ff ff    	jne    c0006aa0 <iso_readdir+0xe8>
c0006b43:	b8 00 00 00 00       	mov    eax,0x0
c0006b48:	eb ba                	jmp    c0006b04 <iso_readdir+0x14c>
c0006b4a:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b4d:	c1 e7 02             	shl    edi,0x2
c0006b50:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b53:	8d 2c 85 78 00 02 c0 	lea    ebp,[eax*4-0x3ffdff88]
c0006b5a:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b5e:	83 ec 04             	sub    esp,0x4
c0006b61:	31 c0                	xor    eax,eax
c0006b63:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b66:	50                   	push   eax
c0006b67:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b6a:	50                   	push   eax
c0006b6b:	55                   	push   ebp
c0006b6c:	e8 df 9a ff ff       	call   c0000650 <strncpy>
c0006b71:	31 c0                	xor    eax,eax
c0006b73:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b76:	01 f7                	add    edi,esi
c0006b78:	c6 84 b8 78 00 02 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffdff88],0x0
c0006b80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b83:	e8 fc fd ff ff       	call   c0006984 <fn_postprocess>
c0006b88:	31 c0                	xor    eax,eax
c0006b8a:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b8d:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b90:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b96:	29 c5                	sub    ebp,eax
c0006b98:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006ba3:	74 25                	je     c0006bca <iso_readdir+0x212>
c0006ba5:	83 ed 21             	sub    ebp,0x21
c0006ba8:	83 fd 03             	cmp    ebp,0x3
c0006bab:	0f 8e 16 ff ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006bb1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bb4:	48                   	dec    eax
c0006bb5:	3c 01                	cmp    al,0x1
c0006bb7:	0f 87 0a ff ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bbd:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bc8:	eb 23                	jmp    c0006bed <iso_readdir+0x235>
c0006bca:	47                   	inc    edi
c0006bcb:	83 ed 22             	sub    ebp,0x22
c0006bce:	eb d8                	jmp    c0006ba8 <iso_readdir+0x1f0>
c0006bd0:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bd4:	29 c5                	sub    ebp,eax
c0006bd6:	01 c7                	add    edi,eax
c0006bd8:	83 fd 03             	cmp    ebp,0x3
c0006bdb:	0f 8e e6 fe ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006be1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006be4:	48                   	dec    eax
c0006be5:	3c 01                	cmp    al,0x1
c0006be7:	0f 87 da fe ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bed:	83 ec 04             	sub    esp,0x4
c0006bf0:	6a 02                	push   0x2
c0006bf2:	68 80 d5 01 c0       	push   0xc001d580
c0006bf7:	57                   	push   edi
c0006bf8:	e8 83 9b ff ff       	call   c0000780 <strncmp>
c0006bfd:	83 c4 10             	add    esp,0x10
c0006c00:	85 c0                	test   eax,eax
c0006c02:	75 cc                	jne    c0006bd0 <iso_readdir+0x218>
c0006c04:	83 ec 04             	sub    esp,0x4
c0006c07:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c0b:	83 e8 05             	sub    eax,0x5
c0006c0e:	50                   	push   eax
c0006c0f:	8d 47 05             	lea    eax,[edi+0x5]
c0006c12:	50                   	push   eax
c0006c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c17:	e8 34 9a ff ff       	call   c0000650 <strncpy>
c0006c1c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c24:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c27:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c2a:	c6 84 90 73 00 02 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffdff8d],0x0
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	eb 99                	jmp    c0006bd0 <iso_readdir+0x218>
c0006c37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c41:	e9 98 fe ff ff       	jmp    c0006ade <iso_readdir+0x126>
c0006c46:	b8 00 00 00 00       	mov    eax,0x0
c0006c4b:	e9 b4 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c50:	b8 00 00 00 00       	mov    eax,0x0
c0006c55:	e9 aa fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c5a:	b8 00 00 00 00       	mov    eax,0x0
c0006c5f:	e9 a0 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c64:	b8 00 00 00 00       	mov    eax,0x0
c0006c69:	e9 96 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c6e:	b8 00 00 00 00       	mov    eax,0x0
c0006c73:	e9 8c fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c78:	b8 00 00 00 00       	mov    eax,0x0
c0006c7d:	e9 82 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>

c0006c82 <iso_reset>:
c0006c82:	e8 4b f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c87:	e8 40 f2 ff ff       	call   c0005ecc <bclear>
c0006c8c:	b8 00 00 00 00       	mov    eax,0x0
c0006c91:	c3                   	ret    

c0006c92 <init_percd>:
c0006c92:	57                   	push   edi
c0006c93:	56                   	push   esi
c0006c94:	53                   	push   ebx
c0006c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c99:	a2 80 fb 01 c0       	mov    ds:0xc001fb80,al
c0006c9e:	e8 df ff ff ff       	call   c0006c82 <iso_reset>
c0006ca3:	c7 05 d4 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209d4,0x0
c0006cad:	bb 01 00 00 00       	mov    ebx,0x1
c0006cb2:	eb 06                	jmp    c0006cba <init_percd+0x28>
c0006cb4:	43                   	inc    ebx
c0006cb5:	83 fb 04             	cmp    ebx,0x4
c0006cb8:	74 53                	je     c0006d0d <init_percd+0x7b>
c0006cba:	a1 cc 09 02 c0       	mov    eax,ds:0xc00209cc
c0006cbf:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cc3:	e8 57 f4 ff ff       	call   c000611f <biread>
c0006cc8:	89 c6                	mov    esi,eax
c0006cca:	85 c0                	test   eax,eax
c0006ccc:	0f 88 c1 00 00 00    	js     c0006d93 <init_percd+0x101>
c0006cd2:	83 ec 04             	sub    esp,0x4
c0006cd5:	6a 06                	push   0x6
c0006cd7:	68 83 d5 01 c0       	push   0xc001d583
c0006cdc:	8b 04 85 a0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0460]
c0006ce3:	83 c0 04             	add    eax,0x4
c0006ce6:	50                   	push   eax
c0006ce7:	e8 c4 96 ff ff       	call   c00003b0 <memcmp>
c0006cec:	83 c4 10             	add    esp,0x10
c0006cef:	85 c0                	test   eax,eax
c0006cf1:	75 c1                	jne    c0006cb4 <init_percd+0x22>
c0006cf3:	8b 04 b5 a0 fb 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0460]
c0006cfa:	83 c0 5c             	add    eax,0x5c
c0006cfd:	e8 1e f1 ff ff       	call   c0005e20 <isjoliet>
c0006d02:	a3 d4 09 02 c0       	mov    ds:0xc00209d4,eax
c0006d07:	85 c0                	test   eax,eax
c0006d09:	74 a9                	je     c0006cb4 <init_percd+0x22>
c0006d0b:	eb 09                	jmp    c0006d16 <init_percd+0x84>
c0006d0d:	83 3d d4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209d4,0x0
c0006d14:	74 42                	je     c0006d58 <init_percd+0xc6>
c0006d16:	8b 34 b5 a0 fb 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0460]
c0006d1d:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d23:	bf a0 09 02 c0       	mov    edi,0xc00209a0
c0006d28:	b9 22 00 00 00       	mov    ecx,0x22
c0006d2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d2f:	b8 a2 09 02 c0       	mov    eax,0xc00209a2
c0006d34:	e8 45 f1 ff ff       	call   c0005e7e <iso_733>
c0006d39:	a3 c8 09 02 c0       	mov    ds:0xc00209c8,eax
c0006d3e:	b8 aa 09 02 c0       	mov    eax,0xc00209aa
c0006d43:	e8 36 f1 ff ff       	call   c0005e7e <iso_733>
c0006d48:	a3 c4 09 02 c0       	mov    ds:0xc00209c4,eax
c0006d4d:	bb 00 00 00 00       	mov    ebx,0x0
c0006d52:	89 d8                	mov    eax,ebx
c0006d54:	5b                   	pop    ebx
c0006d55:	5e                   	pop    esi
c0006d56:	5f                   	pop    edi
c0006d57:	c3                   	ret    
c0006d58:	a1 cc 09 02 c0       	mov    eax,ds:0xc00209cc
c0006d5d:	83 c0 10             	add    eax,0x10
c0006d60:	e8 ba f3 ff ff       	call   c000611f <biread>
c0006d65:	89 c6                	mov    esi,eax
c0006d67:	85 c0                	test   eax,eax
c0006d69:	78 e7                	js     c0006d52 <init_percd+0xc0>
c0006d6b:	83 ec 04             	sub    esp,0x4
c0006d6e:	6a 06                	push   0x6
c0006d70:	68 8a d5 01 c0       	push   0xc001d58a
c0006d75:	8b 04 85 a0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0460]
c0006d7c:	83 c0 04             	add    eax,0x4
c0006d7f:	50                   	push   eax
c0006d80:	e8 2b 96 ff ff       	call   c00003b0 <memcmp>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 8a                	je     c0006d16 <init_percd+0x84>
c0006d8c:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d91:	eb bf                	jmp    c0006d52 <init_percd+0xc0>
c0006d93:	89 c3                	mov    ebx,eax
c0006d95:	eb bb                	jmp    c0006d52 <init_percd+0xc0>

c0006d97 <iso_ioctl>:
c0006d97:	e8 e6 fe ff ff       	call   c0006c82 <iso_reset>
c0006d9c:	b8 00 00 00 00       	mov    eax,0x0
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_init>:
c0006da2:	53                   	push   ebx
c0006da3:	83 ec 0c             	sub    esp,0xc
c0006da6:	68 40 09 00 00       	push   0x940
c0006dab:	6a 00                	push   0x0
c0006dad:	68 60 00 02 c0       	push   0xc0020060
c0006db2:	e8 39 97 ff ff       	call   c00004f0 <memset>
c0006db7:	c7 05 60 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020060,0xffffffff
c0006dc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dc8:	e8 b8 10 00 00       	call   c0007e85 <malloc>
c0006dcd:	a3 d0 09 02 c0       	mov    ds:0xc00209d0,eax
c0006dd2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dd9:	e8 a7 10 00 00       	call   c0007e85 <malloc>
c0006dde:	a3 40 00 02 c0       	mov    ds:0xc0020040,eax
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	bb 00 00 00 00       	mov    ebx,0x0
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	68 04 08 00 00       	push   0x804
c0006df3:	e8 8d 10 00 00       	call   c0007e85 <malloc>
c0006df8:	89 04 9d a0 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0460],eax
c0006dff:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e05:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e0c:	e8 74 10 00 00       	call   c0007e85 <malloc>
c0006e11:	89 04 9d 40 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe04c0],eax
c0006e18:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e1e:	43                   	inc    ebx
c0006e1f:	83 c4 10             	add    esp,0x10
c0006e22:	83 fb 10             	cmp    ebx,0x10
c0006e25:	75 c4                	jne    c0006deb <fs_iso9660_init+0x49>
c0006e27:	b8 00 00 00 00       	mov    eax,0x0
c0006e2c:	83 c4 08             	add    esp,0x8
c0006e2f:	5b                   	pop    ebx
c0006e30:	c3                   	ret    

c0006e31 <fs_iso9660_shutdown>:
c0006e31:	53                   	push   ebx
c0006e32:	83 ec 08             	sub    esp,0x8
c0006e35:	bb 00 00 00 00       	mov    ebx,0x0
c0006e3a:	83 ec 0c             	sub    esp,0xc
c0006e3d:	ff 34 9d a0 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0460]
c0006e44:	e8 4c 10 00 00       	call   c0007e95 <free>
c0006e49:	83 c4 04             	add    esp,0x4
c0006e4c:	ff 34 9d 40 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe04c0]
c0006e53:	e8 3d 10 00 00       	call   c0007e95 <free>
c0006e58:	43                   	inc    ebx
c0006e59:	83 c4 10             	add    esp,0x10
c0006e5c:	83 fb 10             	cmp    ebx,0x10
c0006e5f:	75 d9                	jne    c0006e3a <fs_iso9660_shutdown+0x9>
c0006e61:	a1 d0 09 02 c0       	mov    eax,ds:0xc00209d0
c0006e66:	85 c0                	test   eax,eax
c0006e68:	74 0c                	je     c0006e76 <fs_iso9660_shutdown+0x45>
c0006e6a:	83 ec 0c             	sub    esp,0xc
c0006e6d:	50                   	push   eax
c0006e6e:	e8 22 10 00 00       	call   c0007e95 <free>
c0006e73:	83 c4 10             	add    esp,0x10
c0006e76:	a1 40 00 02 c0       	mov    eax,ds:0xc0020040
c0006e7b:	85 c0                	test   eax,eax
c0006e7d:	74 0c                	je     c0006e8b <fs_iso9660_shutdown+0x5a>
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	50                   	push   eax
c0006e83:	e8 0d 10 00 00       	call   c0007e95 <free>
c0006e88:	83 c4 10             	add    esp,0x10
c0006e8b:	c7 05 40 00 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020040,0x0
c0006e95:	c7 05 d0 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209d0,0x0
c0006e9f:	b8 00 00 00 00       	mov    eax,0x0
c0006ea4:	83 c4 08             	add    esp,0x8
c0006ea7:	5b                   	pop    ebx
c0006ea8:	c3                   	ret    

c0006ea9 <CPU::current()>:
c0006ea9:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0006eae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eb4:	c3                   	ret    

c0006eb5 <operator new(unsigned long)>:
c0006eb5:	e9 cb 0f 00 00       	jmp    c0007e85 <malloc>

c0006eba <operator delete(void*)>:
c0006eba:	e9 e6 0f 00 00       	jmp    c0007ea5 <rfree>

c0006ebf <disableIRQs()>:
c0006ebf:	fa                   	cli    
c0006ec0:	c3                   	ret    

c0006ec1 <enableIRQs()>:
c0006ec1:	fb                   	sti    
c0006ec2:	c3                   	ret    

c0006ec3 <lockScheduler()>:
c0006ec3:	fa                   	cli    
c0006ec4:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0006eca:	c3                   	ret    

c0006ecb <unlockScheduler()>:
c0006ecb:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0006ed0:	48                   	dec    eax
c0006ed1:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0006ed6:	75 01                	jne    c0006ed9 <unlockScheduler()+0xe>
c0006ed8:	fb                   	sti    
c0006ed9:	c3                   	ret    

c0006eda <lockStuff()>:
c0006eda:	fa                   	cli    
c0006edb:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0006ee1:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c0006ee7:	c3                   	ret    

c0006ee8 <unlockStuff()>:
c0006ee8:	83 ec 0c             	sub    esp,0xc
c0006eeb:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0006ef0:	48                   	dec    eax
c0006ef1:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0006ef6:	75 18                	jne    c0006f10 <unlockStuff()+0x28>
c0006ef8:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c0006eff:	74 0f                	je     c0006f10 <unlockStuff()+0x28>
c0006f01:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0006f0b:	e8 34 ca 00 00       	call   c0013944 <schedule()>
c0006f10:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0006f15:	48                   	dec    eax
c0006f16:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0006f1b:	75 01                	jne    c0006f1e <unlockStuff()+0x36>
c0006f1d:	fb                   	sti    
c0006f1e:	83 c4 0c             	add    esp,0xc
c0006f21:	c3                   	ret    

c0006f22 <Virt::getAKernelVAS()>:
c0006f22:	a1 d0 0a 02 c0       	mov    eax,ds:0xc0020ad0
c0006f27:	c3                   	ret    

c0006f28 <__not_memcpy>:
c0006f28:	57                   	push   edi
c0006f29:	56                   	push   esi
c0006f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f36:	89 c7                	mov    edi,eax
c0006f38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f3a:	5e                   	pop    esi
c0006f3b:	5f                   	pop    edi
c0006f3c:	c3                   	ret    
c0006f3d:	66 90                	xchg   ax,ax
c0006f3f:	90                   	nop

c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	83 ec 08             	sub    esp,0x8
c0006f46:	68 91 d5 01 c0       	push   0xc001d591
c0006f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f4f:	e8 ac 97 ff ff       	call   c0000700 <strcmp>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 94 c0             	sete   al
c0006f5c:	84 c0                	test   al,al
c0006f5e:	74 0c                	je     c0006f6c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f60:	b8 d8 09 02 c0       	mov    eax,0xc00209d8
c0006f65:	e9 12 01 00 00       	jmp    c000707c <Krnl::resolveCompatibilitySymbol(char*)+0x13c>
c0006f6a:	66 90                	xchg   ax,ax
c0006f6c:	83 ec 08             	sub    esp,0x8
c0006f6f:	68 9a d5 01 c0       	push   0xc001d59a
c0006f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f78:	e8 83 97 ff ff       	call   c0000700 <strcmp>
c0006f7d:	83 c4 10             	add    esp,0x10
c0006f80:	85 c0                	test   eax,eax
c0006f82:	0f 94 c0             	sete   al
c0006f85:	84 c0                	test   al,al
c0006f87:	74 0b                	je     c0006f94 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f89:	b8 20 c2 01 c0       	mov    eax,0xc001c220
c0006f8e:	e9 e9 00 00 00       	jmp    c000707c <Krnl::resolveCompatibilitySymbol(char*)+0x13c>
c0006f93:	90                   	nop
c0006f94:	83 ec 08             	sub    esp,0x8
c0006f97:	68 a4 d5 01 c0       	push   0xc001d5a4
c0006f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fa0:	e8 5b 97 ff ff       	call   c0000700 <strcmp>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 94 c0             	sete   al
c0006fad:	84 c0                	test   al,al
c0006faf:	74 0b                	je     c0006fbc <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fb1:	b8 54 bf 01 c0       	mov    eax,0xc001bf54
c0006fb6:	e9 c1 00 00 00       	jmp    c000707c <Krnl::resolveCompatibilitySymbol(char*)+0x13c>
c0006fbb:	90                   	nop
c0006fbc:	83 ec 08             	sub    esp,0x8
c0006fbf:	68 ad d5 01 c0       	push   0xc001d5ad
c0006fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fc8:	e8 33 97 ff ff       	call   c0000700 <strcmp>
c0006fcd:	83 c4 10             	add    esp,0x10
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	0f 94 c0             	sete   al
c0006fd5:	84 c0                	test   al,al
c0006fd7:	74 0b                	je     c0006fe4 <Krnl::resolveCompatibilitySymbol(char*)+0xa4>
c0006fd9:	b8 eb 06 01 c0       	mov    eax,0xc00106eb
c0006fde:	e9 99 00 00 00       	jmp    c000707c <Krnl::resolveCompatibilitySymbol(char*)+0x13c>
c0006fe3:	90                   	nop
c0006fe4:	83 ec 08             	sub    esp,0x8
c0006fe7:	68 c0 d5 01 c0       	push   0xc001d5c0
c0006fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006ff0:	e8 0b 97 ff ff       	call   c0000700 <strcmp>
c0006ff5:	83 c4 10             	add    esp,0x10
c0006ff8:	85 c0                	test   eax,eax
c0006ffa:	0f 94 c0             	sete   al
c0006ffd:	84 c0                	test   al,al
c0006fff:	74 07                	je     c0007008 <Krnl::resolveCompatibilitySymbol(char*)+0xc8>
c0007001:	b8 20 c3 01 c0       	mov    eax,0xc001c320
c0007006:	eb 74                	jmp    c000707c <Krnl::resolveCompatibilitySymbol(char*)+0x13c>
c0007008:	83 ec 08             	sub    esp,0x8
c000700b:	68 ca d5 01 c0       	push   0xc001d5ca
c0007010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007014:	e8 e7 96 ff ff       	call   c0000700 <strcmp>
c0007019:	83 c4 10             	add    esp,0x10
c000701c:	85 c0                	test   eax,eax
c000701e:	0f 94 c0             	sete   al
c0007021:	84 c0                	test   al,al
c0007023:	74 07                	je     c000702c <Krnl::resolveCompatibilitySymbol(char*)+0xec>
c0007025:	b8 a0 c0 01 c0       	mov    eax,0xc001c0a0
c000702a:	eb 50                	jmp    c000707c <Krnl::resolveCompatibilitySymbol(char*)+0x13c>
c000702c:	83 ec 08             	sub    esp,0x8
c000702f:	68 d3 d5 01 c0       	push   0xc001d5d3
c0007034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007038:	e8 c3 96 ff ff       	call   c0000700 <strcmp>
c000703d:	83 c4 10             	add    esp,0x10
c0007040:	85 c0                	test   eax,eax
c0007042:	0f 94 c0             	sete   al
c0007045:	84 c0                	test   al,al
c0007047:	74 07                	je     c0007050 <Krnl::resolveCompatibilitySymbol(char*)+0x110>
c0007049:	b8 dc 09 02 c0       	mov    eax,0xc00209dc
c000704e:	eb 2c                	jmp    c000707c <Krnl::resolveCompatibilitySymbol(char*)+0x13c>
c0007050:	83 ec 08             	sub    esp,0x8
c0007053:	68 e0 d5 01 c0       	push   0xc001d5e0
c0007058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000705c:	e8 9f 96 ff ff       	call   c0000700 <strcmp>
c0007061:	83 c4 10             	add    esp,0x10
c0007064:	85 c0                	test   eax,eax
c0007066:	0f 94 c0             	sete   al
c0007069:	84 c0                	test   al,al
c000706b:	74 07                	je     c0007074 <Krnl::resolveCompatibilitySymbol(char*)+0x134>
c000706d:	b8 dd 09 02 c0       	mov    eax,0xc00209dd
c0007072:	eb 08                	jmp    c000707c <Krnl::resolveCompatibilitySymbol(char*)+0x13c>
c0007074:	b8 00 00 00 00       	mov    eax,0x0
c0007079:	8d 76 00             	lea    esi,[esi+0x0]
c000707c:	83 c4 0c             	add    esp,0xc
c000707f:	c3                   	ret    

c0007080 <Computer::close(int, int, void*)>:
c0007080:	57                   	push   edi
c0007081:	56                   	push   esi
c0007082:	53                   	push   ebx
c0007083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007087:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000708b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000708f:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	50                   	push   eax
c0007099:	e8 dc 4f 00 00       	call   c000c07a <Device::closeAll()>
c000709e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00070a4:	83 c4 10             	add    esp,0x10
c00070a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00070a9:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00070ad:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00070b5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00070b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00070bd:	5b                   	pop    ebx
c00070be:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00070c1:	5e                   	pop    esi
c00070c2:	5f                   	pop    edi
c00070c3:	ff e0                	jmp    eax

c00070c5 <Krnl::firstTask()>:
c00070c5:	53                   	push   ebx
c00070c6:	83 ec 14             	sub    esp,0x14
c00070c9:	fb                   	sti    
c00070ca:	68 ed d5 01 c0       	push   0xc001d5ed
c00070cf:	e8 33 90 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c00070d4:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070db:	e8 a5 0d 00 00       	call   c0007e85 <malloc>
c00070e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070e7:	89 c3                	mov    ebx,eax
c00070e9:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00070ee:	50                   	push   eax
c00070ef:	68 06 d6 01 c0       	push   0xc001d606
c00070f4:	6a 01                	push   0x1
c00070f6:	53                   	push   ebx
c00070f7:	e8 1c c4 00 00       	call   c0013518 <Process::Process(bool, char const*, Process*, char**)>
c00070fc:	83 c4 20             	add    esp,0x20
c00070ff:	68 ff 00 00 00       	push   0xff
c0007104:	6a 00                	push   0x0
c0007106:	68 db 78 00 c0       	push   0xc00078db
c000710b:	53                   	push   ebx
c000710c:	e8 13 c6 00 00       	call   c0013724 <Process::createThread(void (*)(void*), void*, int)>
c0007111:	8b 15 b0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb0
c0007117:	6a 7a                	push   0x7a
c0007119:	6a 00                	push   0x0
c000711b:	68 78 41 01 c0       	push   0xc0014178
c0007120:	52                   	push   edx
c0007121:	e8 fe c5 00 00       	call   c0013724 <Process::createThread(void (*)(void*), void*, int)>
c0007126:	83 c4 14             	add    esp,0x14
c0007129:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000712e:	68 04 d7 01 c0       	push   0xc001d704
c0007133:	c6 05 dd 09 02 c0 01 	mov    BYTE PTR ds:0xc00209dd,0x1
c000713a:	e8 c8 8f 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c000713f:	e8 13 d4 00 00       	call   c0014557 <Vm::initialise8086()>
c0007144:	e8 75 3d 00 00       	call   c000aebe <Fs::initVFS()>
c0007149:	c7 04 24 13 d6 01 c0 	mov    DWORD PTR [esp],0xc001d613
c0007150:	e8 b2 8f 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c0007155:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000715a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007160:	8b 10                	mov    edx,DWORD PTR [eax]
c0007162:	6a 00                	push   0x0
c0007164:	6a 00                	push   0x0
c0007166:	6a 00                	push   0x0
c0007168:	50                   	push   eax
c0007169:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000716c:	83 c4 14             	add    esp,0x14
c000716f:	68 04 d7 01 c0       	push   0xc001d704
c0007174:	e8 8e 8f 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c0007179:	e8 ba a2 00 00       	call   c0011438 <KeLoadSystemCalls()>
c000717e:	e8 5f 94 00 00       	call   c00105e2 <Krnl::loadSystemEnv()>
c0007183:	e8 28 96 00 00       	call   c00107b0 <Krnl::setupPowerManager()>
c0007188:	83 c4 0c             	add    esp,0xc
c000718b:	6a 3a                	push   0x3a
c000718d:	68 2d d6 01 c0       	push   0xc001d62d
c0007192:	68 36 d6 01 c0       	push   0xc001d636
c0007197:	e8 6a a9 00 00       	call   c0011b06 <Reg::readIntWithDefault(char*, char*, int)>
c000719c:	89 04 24             	mov    DWORD PTR [esp],eax
c000719f:	e8 28 48 00 00       	call   c000b9cc <User::loadClockSettings(int)>
c00071a4:	c7 04 24 28 d7 01 c0 	mov    DWORD PTR [esp],0xc001d728
c00071ab:	e8 57 8f 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c00071b0:	59                   	pop    ecx
c00071b1:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00071b6:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00071bc:	53                   	push   ebx
c00071bd:	e8 b6 4e 00 00       	call   c000c078 <Device::loadDriversForAll()>
c00071c2:	c7 04 24 3e d6 01 c0 	mov    DWORD PTR [esp],0xc001d63e
c00071c9:	e8 39 8f 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c00071ce:	58                   	pop    eax
c00071cf:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c00071d5:	5a                   	pop    edx
c00071d6:	6a 01                	push   0x1
c00071d8:	68 4f d6 01 c0       	push   0xc001d64f
c00071dd:	e8 70 bd 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c00071e2:	59                   	pop    ecx
c00071e3:	5a                   	pop    edx
c00071e4:	53                   	push   ebx
c00071e5:	50                   	push   eax
c00071e6:	e8 98 bf 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c00071eb:	83 c4 10             	add    esp,0x10
c00071ee:	83 ec 0c             	sub    esp,0xc
c00071f1:	6a 02                	push   0x2
c00071f3:	e8 48 c9 00 00       	call   c0013b40 <blockTask(TaskState)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	eb f1                	jmp    c00071ee <Krnl::firstTask()+0x129>
c00071fd:	90                   	nop

c00071fe <Computer::Computer()>:
c00071fe:	83 ec 0c             	sub    esp,0xc
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	83 ec 08             	sub    esp,0x8
c0007208:	68 6b d6 01 c0       	push   0xc001d66b
c000720d:	50                   	push   eax
c000720e:	e8 e1 4e 00 00       	call   c000c0f4 <Device::Device(char const*)>
c0007213:	83 c4 10             	add    esp,0x10
c0007216:	ba 74 d7 01 c0       	mov    edx,0xc001d774
c000721b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000721f:	89 10                	mov    DWORD PTR [eax],edx
c0007221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007225:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000722f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007233:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000723d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007241:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0007247:	83 ca 04             	or     edx,0x4
c000724a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007254:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000725a:	31 d2                	xor    edx,edx
c000725c:	88 c2                	mov    dl,al
c000725e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007262:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000726d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007273:	31 d2                	xor    edx,edx
c0007275:	88 c2                	mov    dl,al
c0007277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000727b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007284:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000728a:	8d 50 01             	lea    edx,[eax+0x1]
c000728d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007291:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0007297:	31 d2                	xor    edx,edx
c0007299:	88 c2                	mov    dl,al
c000729b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000729f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00072a3:	83 e1 3f             	and    ecx,0x3f
c00072a6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00072aa:	90                   	nop
c00072ab:	83 c4 0c             	add    esp,0xc
c00072ae:	c3                   	ret    
c00072af:	90                   	nop

c00072b0 <Computer::setBootMessage(char const*)>:
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::detectFeatures()>:
c00072b2:	55                   	push   ebp
c00072b3:	57                   	push   edi
c00072b4:	56                   	push   esi
c00072b5:	53                   	push   ebx
c00072b6:	83 ec 1c             	sub    esp,0x1c
c00072b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00072bd:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c00072c7:	e8 4d 8f ff ff       	call   c0000219 <detectCPUID>
c00072cc:	85 c0                	test   eax,eax
c00072ce:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072d4:	0f 95 c2             	setne  dl
c00072d7:	83 e0 fd             	and    eax,0xfffffffd
c00072da:	01 d2                	add    edx,edx
c00072dc:	09 d0                	or     eax,edx
c00072de:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072e4:	a8 02                	test   al,0x2
c00072e6:	75 46                	jne    c000732e <Computer::detectFeatures()+0x7c>
c00072e8:	f6 05 f1 09 02 c0 04 	test   BYTE PTR ds:0xc00209f1,0x4
c00072ef:	74 07                	je     c00072f8 <Computer::detectFeatures()+0x46>
c00072f1:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072f8:	e8 e9 4b 01 00       	call   c001bee6 <x87Detect>
c00072fd:	83 e0 01             	and    eax,0x1
c0007300:	c1 e0 04             	shl    eax,0x4
c0007303:	88 c2                	mov    dl,al
c0007305:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000730b:	83 e0 ef             	and    eax,0xffffffef
c000730e:	09 d0                	or     eax,edx
c0007310:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007316:	a8 10                	test   al,0x10
c0007318:	0f 85 2a 01 00 00    	jne    c0007448 <Computer::detectFeatures()+0x196>
c000731e:	84 c0                	test   al,al
c0007320:	0f 88 45 01 00 00    	js     c000746b <Computer::detectFeatures()+0x1b9>
c0007326:	83 c4 1c             	add    esp,0x1c
c0007329:	5b                   	pop    ebx
c000732a:	5e                   	pop    esi
c000732b:	5f                   	pop    edi
c000732c:	5d                   	pop    ebp
c000732d:	c3                   	ret    
c000732e:	83 ec 0c             	sub    esp,0xc
c0007331:	6a 20                	push   0x20
c0007333:	e8 fc 82 00 00       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c0007338:	83 e0 01             	and    eax,0x1
c000733b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0007342:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007348:	83 e0 f7             	and    eax,0xfffffff7
c000734b:	09 d0                	or     eax,edx
c000734d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007353:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000735a:	e8 d5 82 00 00       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000735f:	83 e0 01             	and    eax,0x1
c0007362:	88 c2                	mov    dl,al
c0007364:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000736a:	83 e0 fe             	and    eax,0xfffffffe
c000736d:	09 d0                	or     eax,edx
c000736f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007375:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000737c:	e8 b3 82 00 00       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c0007381:	c1 e0 07             	shl    eax,0x7
c0007384:	88 c2                	mov    dl,al
c0007386:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000738c:	83 e0 7f             	and    eax,0x7f
c000738f:	09 d0                	or     eax,edx
c0007391:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007397:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000739e:	e8 91 82 00 00       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c00073a3:	83 c4 10             	add    esp,0x10
c00073a6:	83 e0 01             	and    eax,0x1
c00073a9:	c1 e0 05             	shl    eax,0x5
c00073ac:	88 c2                	mov    dl,al
c00073ae:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073b4:	83 e0 df             	and    eax,0xffffffdf
c00073b7:	09 d0                	or     eax,edx
c00073b9:	f7 05 f0 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00209f0,0x401
c00073c3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073c9:	0f 84 c2 00 00 00    	je     c0007491 <Computer::detectFeatures()+0x1df>
c00073cf:	83 e0 fe             	and    eax,0xfffffffe
c00073d2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073d8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073de:	88 c2                	mov    dl,al
c00073e0:	83 e2 09             	and    edx,0x9
c00073e3:	fe ca                	dec    dl
c00073e5:	75 09                	jne    c00073f0 <Computer::detectFeatures()+0x13e>
c00073e7:	83 e0 fe             	and    eax,0xfffffffe
c00073ea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073f7:	50                   	push   eax
c00073f8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073fc:	55                   	push   ebp
c00073fd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007401:	57                   	push   edi
c0007402:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007406:	56                   	push   esi
c0007407:	68 00 00 00 80       	push   0x80000000
c000740c:	e8 9f 81 00 00       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007411:	83 c4 20             	add    esp,0x20
c0007414:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000741b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000741f:	0f 86 c3 fe ff ff    	jbe    c00072e8 <Computer::detectFeatures()+0x36>
c0007425:	83 ec 0c             	sub    esp,0xc
c0007428:	50                   	push   eax
c0007429:	55                   	push   ebp
c000742a:	57                   	push   edi
c000742b:	56                   	push   esi
c000742c:	68 01 00 00 80       	push   0x80000001
c0007431:	e8 7a 81 00 00       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007436:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0007440:	83 c4 20             	add    esp,0x20
c0007443:	e9 a0 fe ff ff       	jmp    c00072e8 <Computer::detectFeatures()+0x36>
c0007448:	e8 53 4a 01 00       	call   c001bea0 <absolutelyNoChanceInHell>
c000744d:	88 c2                	mov    dl,al
c000744f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007455:	c1 e2 07             	shl    edx,0x7
c0007458:	83 e0 7f             	and    eax,0x7f
c000745b:	09 d0                	or     eax,edx
c000745d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007463:	84 c0                	test   al,al
c0007465:	0f 89 bb fe ff ff    	jns    c0007326 <Computer::detectFeatures()+0x74>
c000746b:	e8 b0 47 01 00       	call   c001bc20 <avxDetect>
c0007470:	83 e0 01             	and    eax,0x1
c0007473:	c1 e0 05             	shl    eax,0x5
c0007476:	88 c2                	mov    dl,al
c0007478:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000747e:	83 e0 df             	and    eax,0xffffffdf
c0007481:	09 d0                	or     eax,edx
c0007483:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007489:	83 c4 1c             	add    esp,0x1c
c000748c:	5b                   	pop    ebx
c000748d:	5e                   	pop    esi
c000748e:	5f                   	pop    edi
c000748f:	5d                   	pop    ebp
c0007490:	c3                   	ret    
c0007491:	83 ec 0c             	sub    esp,0xc
c0007494:	68 00 02 00 00       	push   0x200
c0007499:	e8 96 81 00 00       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000749e:	83 c4 10             	add    esp,0x10
c00074a1:	83 e0 01             	and    eax,0x1
c00074a4:	88 c2                	mov    dl,al
c00074a6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00074ac:	83 e0 fe             	and    eax,0xfffffffe
c00074af:	09 d0                	or     eax,edx
c00074b1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00074b7:	e9 1c ff ff ff       	jmp    c00073d8 <Computer::detectFeatures()+0x126>

c00074bc <Computer::displayFeatures()>:
c00074bc:	c3                   	ret    
c00074bd:	90                   	nop

c00074be <Computer::rdmsr(unsigned int)>:
c00074be:	83 ec 0c             	sub    esp,0xc
c00074c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074cc:	74 0a                	je     c00074d8 <Computer::rdmsr(unsigned int)+0x1a>
c00074ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074d2:	0f 32                	rdmsr  
c00074d4:	83 c4 0c             	add    esp,0xc
c00074d7:	c3                   	ret    
c00074d8:	83 ec 0c             	sub    esp,0xc
c00074db:	68 74 d6 01 c0       	push   0xc001d674
c00074e0:	e8 06 92 00 00       	call   c00106eb <KePanic(char const*)>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	eb e4                	jmp    c00074ce <Computer::rdmsr(unsigned int)+0x10>

c00074ea <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074ea:	57                   	push   edi
c00074eb:	56                   	push   esi
c00074ec:	52                   	push   edx
c00074ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074f5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074f9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007500:	74 0e                	je     c0007510 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0007502:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007506:	89 f0                	mov    eax,esi
c0007508:	89 fa                	mov    edx,edi
c000750a:	0f 30                	wrmsr  
c000750c:	58                   	pop    eax
c000750d:	5e                   	pop    esi
c000750e:	5f                   	pop    edi
c000750f:	c3                   	ret    
c0007510:	83 ec 0c             	sub    esp,0xc
c0007513:	68 7a d6 01 c0       	push   0xc001d67a
c0007518:	e8 ce 91 00 00       	call   c00106eb <KePanic(char const*)>
c000751d:	83 c4 10             	add    esp,0x10
c0007520:	eb e0                	jmp    c0007502 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0007522 <Computer::shutdown()>:
c0007522:	83 ec 0c             	sub    esp,0xc
c0007525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007529:	8b 10                	mov    edx,DWORD PTR [eax]
c000752b:	6a 00                	push   0x0
c000752d:	6a 00                	push   0x0
c000752f:	6a 00                	push   0x0
c0007531:	50                   	push   eax
c0007532:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007535:	83 c4 1c             	add    esp,0x1c
c0007538:	c3                   	ret    
c0007539:	90                   	nop

c000753a <Computer::restart()>:
c000753a:	83 ec 0c             	sub    esp,0xc
c000753d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007541:	8b 10                	mov    edx,DWORD PTR [eax]
c0007543:	6a 00                	push   0x0
c0007545:	6a 00                	push   0x0
c0007547:	6a 01                	push   0x1
c0007549:	50                   	push   eax
c000754a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000754d:	83 c4 1c             	add    esp,0x1c
c0007550:	c3                   	ret    
c0007551:	90                   	nop

c0007552 <Computer::sleep()>:
c0007552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007556:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000755c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007560:	e9 47 7b 00 00       	jmp    c000f0ac <ACPI::sleep()>
c0007565:	90                   	nop

c0007566 <Computer::nmiEnabled()>:
c0007566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000756a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007570:	c3                   	ret    
c0007571:	90                   	nop

c0007572 <Computer::readCMOS(unsigned char)>:
c0007572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007576:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000757d:	19 c0                	sbb    eax,eax
c000757f:	83 e0 80             	and    eax,0xffffff80
c0007582:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007586:	e6 70                	out    0x70,al
c0007588:	e4 71                	in     al,0x71
c000758a:	c3                   	ret    
c000758b:	90                   	nop

c000758c <Computer::enableNMI(bool)>:
c000758c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007594:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000759a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00075a2:	eb ce                	jmp    c0007572 <Computer::readCMOS(unsigned char)>

c00075a4 <Computer::open(int, int, void*)>:
c00075a4:	56                   	push   esi
c00075a5:	53                   	push   ebx
c00075a6:	83 ec 10             	sub    esp,0x10
c00075a9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00075ad:	f6 05 f0 09 02 c0 04 	test   BYTE PTR ds:0xc00209f0,0x4
c00075b4:	68 80 d6 01 c0       	push   0xc001d680
c00075b9:	0f 94 05 60 f7 01 c0 	sete   BYTE PTR ds:0xc001f760
c00075c0:	e8 42 8b 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c00075c5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075cc:	e8 b4 08 00 00       	call   c0007e85 <malloc>
c00075d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00075d4:	89 c6                	mov    esi,eax
c00075d6:	e8 69 76 00 00       	call   c000ec44 <ACPI::ACPI()>
c00075db:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075e1:	58                   	pop    eax
c00075e2:	5a                   	pop    edx
c00075e3:	56                   	push   esi
c00075e4:	53                   	push   ebx
c00075e5:	e8 72 49 00 00       	call   c000bf5c <Device::addChild(Device*)>
c00075ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075ed:	e8 c0 fc ff ff       	call   c00072b2 <Computer::detectFeatures()>
c00075f2:	59                   	pop    ecx
c00075f3:	5e                   	pop    esi
c00075f4:	6a 01                	push   0x1
c00075f6:	53                   	push   ebx
c00075f7:	e8 90 ff ff ff       	call   c000758c <Computer::enableNMI(bool)>
c00075fc:	c7 04 24 98 d6 01 c0 	mov    DWORD PTR [esp],0xc001d698
c0007603:	e8 ff 8a 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c0007608:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000760f:	e8 71 08 00 00       	call   c0007e85 <malloc>
c0007614:	89 04 24             	mov    DWORD PTR [esp],eax
c0007617:	89 c6                	mov    esi,eax
c0007619:	e8 ce 80 00 00       	call   c000f6ec <CPU::CPU()>
c000761e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007624:	58                   	pop    eax
c0007625:	5a                   	pop    edx
c0007626:	56                   	push   esi
c0007627:	53                   	push   ebx
c0007628:	e8 2f 49 00 00       	call   c000bf5c <Device::addChild(Device*)>
c000762d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007633:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007637:	8b 10                	mov    edx,DWORD PTR [eax]
c0007639:	51                   	push   ecx
c000763a:	6a 00                	push   0x0
c000763c:	6a 00                	push   0x0
c000763e:	50                   	push   eax
c000763f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007642:	83 c4 14             	add    esp,0x14
c0007645:	68 48 d7 01 c0       	push   0xc001d748
c000764a:	e8 b8 8a 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c000764f:	e8 3a e0 00 00       	call   c001568e <HalInitialiseCoprocessor()>
c0007654:	c7 04 24 b2 d6 01 c0 	mov    DWORD PTR [esp],0xc001d6b2
c000765b:	e8 a7 8a 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c0007660:	c7 04 24 c5 70 00 c0 	mov    DWORD PTR [esp],0xc00070c5
c0007667:	e8 d0 c1 00 00       	call   c001383c <setupMultitasking(void (*)())>
c000766c:	83 c4 14             	add    esp,0x14
c000766f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007674:	5b                   	pop    ebx
c0007675:	5e                   	pop    esi
c0007676:	c3                   	ret    
c0007677:	90                   	nop

c0007678 <Computer::disableNMI()>:
c0007678:	6a 00                	push   0x0
c000767a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767e:	50                   	push   eax
c000767f:	e8 08 ff ff ff       	call   c000758c <Computer::enableNMI(bool)>
c0007684:	5a                   	pop    edx
c0007685:	59                   	pop    ecx
c0007686:	c3                   	ret    
c0007687:	90                   	nop

c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000768c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007693:	19 c0                	sbb    eax,eax
c0007695:	83 e0 80             	and    eax,0xffffff80
c0007698:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000769c:	e6 70                	out    0x70,al
c000769e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076a2:	e6 71                	out    0x71,al
c00076a4:	c3                   	ret    
c00076a5:	90                   	nop

c00076a6 <Computer::handleNMI()>:
c00076a6:	56                   	push   esi
c00076a7:	53                   	push   ebx
c00076a8:	83 ec 10             	sub    esp,0x10
c00076ab:	e4 92                	in     al,0x92
c00076ad:	89 c6                	mov    esi,eax
c00076af:	e4 61                	in     al,0x61
c00076b1:	68 cd d6 01 c0       	push   0xc001d6cd
c00076b6:	88 c3                	mov    bl,al
c00076b8:	e8 5f 34 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00076bd:	83 c4 10             	add    esp,0x10
c00076c0:	83 e6 10             	and    esi,0x10
c00076c3:	75 0d                	jne    c00076d2 <Computer::handleNMI()+0x2c>
c00076c5:	f6 c3 40             	test   bl,0x40
c00076c8:	75 1d                	jne    c00076e7 <Computer::handleNMI()+0x41>
c00076ca:	84 db                	test   bl,bl
c00076cc:	78 2d                	js     c00076fb <Computer::handleNMI()+0x55>
c00076ce:	58                   	pop    eax
c00076cf:	5b                   	pop    ebx
c00076d0:	5e                   	pop    esi
c00076d1:	c3                   	ret    
c00076d2:	83 ec 0c             	sub    esp,0xc
c00076d5:	68 de d6 01 c0       	push   0xc001d6de
c00076da:	e8 0c 90 00 00       	call   c00106eb <KePanic(char const*)>
c00076df:	83 c4 10             	add    esp,0x10
c00076e2:	f6 c3 40             	test   bl,0x40
c00076e5:	74 e3                	je     c00076ca <Computer::handleNMI()+0x24>
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	68 eb d6 01 c0       	push   0xc001d6eb
c00076ef:	e8 f7 8f 00 00       	call   c00106eb <KePanic(char const*)>
c00076f4:	83 c4 10             	add    esp,0x10
c00076f7:	84 db                	test   bl,bl
c00076f9:	79 d3                	jns    c00076ce <Computer::handleNMI()+0x28>
c00076fb:	c7 44 24 10 f5 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d6f5
c0007703:	5a                   	pop    edx
c0007704:	5b                   	pop    ebx
c0007705:	5e                   	pop    esi
c0007706:	e9 e0 8f 00 00       	jmp    c00106eb <KePanic(char const*)>
c000770b:	90                   	nop

c000770c <GDTEntry::setBase(unsigned int)>:
c000770c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007710:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007714:	89 c1                	mov    ecx,eax
c0007716:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000771a:	c1 e9 10             	shr    ecx,0x10
c000771d:	c1 e8 18             	shr    eax,0x18
c0007720:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007723:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007726:	c3                   	ret    
c0007727:	90                   	nop

c0007728 <GDTEntry::setLimit(unsigned int)>:
c0007728:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000772c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007730:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007733:	66 89 01             	mov    WORD PTR [ecx],ax
c0007736:	83 e2 f0             	and    edx,0xfffffff0
c0007739:	c1 e8 10             	shr    eax,0x10
c000773c:	83 e0 0f             	and    eax,0xf
c000773f:	09 d0                	or     eax,edx
c0007741:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007744:	c3                   	ret    
c0007745:	90                   	nop

c0007746 <GDT::GDT()>:
c0007746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000774a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007754:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000775a:	90                   	nop
c000775b:	c3                   	ret    

c000775c <GDT::addEntry(GDTEntry)>:
c000775c:	53                   	push   ebx
c000775d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007761:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007765:	8b 02                	mov    eax,DWORD PTR [edx]
c0007767:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000776b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000776f:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007773:	8d 48 01             	lea    ecx,[eax+0x1]
c0007776:	c1 e0 03             	shl    eax,0x3
c0007779:	89 0a                	mov    DWORD PTR [edx],ecx
c000777b:	5b                   	pop    ebx
c000777c:	c3                   	ret    
c000777d:	90                   	nop

c000777e <GDT::getNumberOfEntries()>:
c000777e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007782:	8b 00                	mov    eax,DWORD PTR [eax]
c0007784:	c3                   	ret    
c0007785:	90                   	nop

c0007786 <GDT::flush()>:
c0007786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000778a:	8b 10                	mov    edx,DWORD PTR [eax]
c000778c:	83 c0 04             	add    eax,0x4
c000778f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007796:	a3 e2 09 02 c0       	mov    ds:0xc00209e2,eax
c000779b:	66 89 15 e0 09 02 c0 	mov    WORD PTR ds:0xc00209e0,dx
c00077a2:	e9 d6 8b ff ff       	jmp    c000037d <loadGDT>
c00077a7:	90                   	nop

c00077a8 <GDT::setup()>:
c00077a8:	57                   	push   edi
c00077a9:	56                   	push   esi
c00077aa:	53                   	push   ebx
c00077ab:	83 ec 30             	sub    esp,0x30
c00077ae:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00077b2:	6a 00                	push   0x0
c00077b4:	8d 74 24 14          	lea    esi,[esp+0x14]
c00077b8:	56                   	push   esi
c00077b9:	e8 4e ff ff ff       	call   c000770c <GDTEntry::setBase(unsigned int)>
c00077be:	6a 00                	push   0x0
c00077c0:	56                   	push   esi
c00077c1:	e8 62 ff ff ff       	call   c0007728 <GDTEntry::setLimit(unsigned int)>
c00077c6:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077ce:	6a 00                	push   0x0
c00077d0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077d4:	56                   	push   esi
c00077d5:	e8 32 ff ff ff       	call   c000770c <GDTEntry::setBase(unsigned int)>
c00077da:	68 ff ff ff 00       	push   0xffffff
c00077df:	56                   	push   esi
c00077e0:	e8 43 ff ff ff       	call   c0007728 <GDTEntry::setLimit(unsigned int)>
c00077e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077ed:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077f1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077f5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077fa:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077ff:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007803:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007807:	89 f8                	mov    eax,edi
c0007809:	89 fa                	mov    edx,edi
c000780b:	80 e4 f7             	and    ah,0xf7
c000780e:	80 ce 60             	or     dh,0x60
c0007811:	89 c7                	mov    edi,eax
c0007813:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007817:	80 cc 60             	or     ah,0x60
c000781a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000781e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007822:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007826:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000782a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000782e:	83 c4 20             	add    esp,0x20
c0007831:	6a 00                	push   0x0
c0007833:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007837:	50                   	push   eax
c0007838:	e8 cf fe ff ff       	call   c000770c <GDTEntry::setBase(unsigned int)>
c000783d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007841:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007845:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000784a:	6a 00                	push   0x0
c000784c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007850:	50                   	push   eax
c0007851:	e8 b6 fe ff ff       	call   c000770c <GDTEntry::setBase(unsigned int)>
c0007856:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000785b:	83 c4 0c             	add    esp,0xc
c000785e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007862:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007866:	53                   	push   ebx
c0007867:	e8 f0 fe ff ff       	call   c000775c <GDT::addEntry(GDTEntry)>
c000786c:	83 c4 0c             	add    esp,0xc
c000786f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007873:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007877:	53                   	push   ebx
c0007878:	e8 df fe ff ff       	call   c000775c <GDT::addEntry(GDTEntry)>
c000787d:	83 c4 0c             	add    esp,0xc
c0007880:	57                   	push   edi
c0007881:	56                   	push   esi
c0007882:	53                   	push   ebx
c0007883:	e8 d4 fe ff ff       	call   c000775c <GDT::addEntry(GDTEntry)>
c0007888:	83 c4 0c             	add    esp,0xc
c000788b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000788f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007893:	53                   	push   ebx
c0007894:	e8 c3 fe ff ff       	call   c000775c <GDT::addEntry(GDTEntry)>
c0007899:	83 c4 0c             	add    esp,0xc
c000789c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00078a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00078a4:	53                   	push   ebx
c00078a5:	e8 b2 fe ff ff       	call   c000775c <GDT::addEntry(GDTEntry)>
c00078aa:	83 c4 0c             	add    esp,0xc
c00078ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078b5:	53                   	push   ebx
c00078b6:	e8 a1 fe ff ff       	call   c000775c <GDT::addEntry(GDTEntry)>
c00078bb:	83 c4 0c             	add    esp,0xc
c00078be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00078c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00078c6:	53                   	push   ebx
c00078c7:	e8 90 fe ff ff       	call   c000775c <GDT::addEntry(GDTEntry)>
c00078cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078cf:	e8 b2 fe ff ff       	call   c0007786 <GDT::flush()>
c00078d4:	83 c4 40             	add    esp,0x40
c00078d7:	5b                   	pop    ebx
c00078d8:	5e                   	pop    esi
c00078d9:	5f                   	pop    edi
c00078da:	c3                   	ret    

c00078db <idleFunction(void*)>:
c00078db:	83 ec 0c             	sub    esp,0xc
c00078de:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00078e3:	48                   	dec    eax
c00078e4:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00078e9:	75 01                	jne    c00078ec <idleFunction(void*)+0x11>
c00078eb:	fb                   	sti    
c00078ec:	e8 77 da 00 00       	call   c0015368 <HalSystemIdle()>
c00078f1:	e8 ac 4b 01 00       	call   c001c4a2 <idleCommon()>
c00078f6:	eb f4                	jmp    c00078ec <idleFunction(void*)+0x11>

c00078f8 <IDTEntry::IDTEntry(bool)>:
c00078f8:	83 ec 04             	sub    esp,0x4
c00078fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078ff:	88 04 24             	mov    BYTE PTR [esp],al
c0007902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007906:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000790c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007910:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007918:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000791b:	83 e2 f0             	and    edx,0xfffffff0
c000791e:	83 ca 0e             	or     edx,0xe
c0007921:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007928:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000792b:	83 e2 ef             	and    edx,0xffffffef
c000792e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007931:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007935:	74 05                	je     c000793c <IDTEntry::IDTEntry(bool)+0x44>
c0007937:	b2 03                	mov    dl,0x3
c0007939:	eb 05                	jmp    c0007940 <IDTEntry::IDTEntry(bool)+0x48>
c000793b:	90                   	nop
c000793c:	b2 00                	mov    dl,0x0
c000793e:	66 90                	xchg   ax,ax
c0007940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007944:	83 e2 03             	and    edx,0x3
c0007947:	88 d1                	mov    cl,dl
c0007949:	c1 e1 05             	shl    ecx,0x5
c000794c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000794f:	83 e2 9f             	and    edx,0xffffff9f
c0007952:	09 ca                	or     edx,ecx
c0007954:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000795e:	83 ca 80             	or     edx,0xffffff80
c0007961:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007964:	90                   	nop
c0007965:	83 c4 04             	add    esp,0x4
c0007968:	c3                   	ret    
c0007969:	90                   	nop

c000796a <IDTEntry::setOffset(unsigned int)>:
c000796a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000796e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007972:	66 89 02             	mov    WORD PTR [edx],ax
c0007975:	c1 e8 10             	shr    eax,0x10
c0007978:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000797c:	c3                   	ret    
c000797d:	90                   	nop
c000797e:	66 90                	xchg   ax,ax

c0007980 <IDT::IDT()>:
c0007980:	90                   	nop
c0007981:	c3                   	ret    

c0007982 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007986:	83 c0 30             	add    eax,0x30
c0007989:	c3                   	ret    

c000798a <IDT::addEntry(IDTEntry, int)>:
c000798a:	53                   	push   ebx
c000798b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000798f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007993:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007997:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000799b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000799e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00079a2:	5b                   	pop    ebx
c00079a3:	c3                   	ret    

c00079a4 <IDT::addEntry(int, void (*)(), bool)>:
c00079a4:	53                   	push   ebx
c00079a5:	83 ec 10             	sub    esp,0x10
c00079a8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00079ad:	50                   	push   eax
c00079ae:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00079b2:	53                   	push   ebx
c00079b3:	e8 40 ff ff ff       	call   c00078f8 <IDTEntry::IDTEntry(bool)>
c00079b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079bc:	53                   	push   ebx
c00079bd:	e8 a8 ff ff ff       	call   c000796a <IDTEntry::setOffset(unsigned int)>
c00079c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00079c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079d2:	e8 b3 ff ff ff       	call   c000798a <IDT::addEntry(IDTEntry, int)>
c00079d7:	83 c4 30             	add    esp,0x30
c00079da:	5b                   	pop    ebx
c00079db:	c3                   	ret    

c00079dc <IDT::flush()>:
c00079dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079e0:	66 c7 05 e8 09 02 c0 ff 07 	mov    WORD PTR ds:0xc00209e8,0x7ff
c00079e9:	a3 ea 09 02 c0       	mov    ds:0xc00209ea,eax
c00079ee:	0f 01 1d e8 09 02 c0 	lidtd  ds:0xc00209e8
c00079f5:	c3                   	ret    

c00079f6 <IDT::setup()>:
c00079f6:	57                   	push   edi
c00079f7:	56                   	push   esi
c00079f8:	53                   	push   ebx
c00079f9:	83 ec 10             	sub    esp,0x10
c00079fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007a00:	6a 00                	push   0x0
c0007a02:	68 b0 bc 01 c0       	push   0xc001bcb0
c0007a07:	6a 00                	push   0x0
c0007a09:	53                   	push   ebx
c0007a0a:	e8 95 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a0f:	6a 00                	push   0x0
c0007a11:	68 c0 bc 01 c0       	push   0xc001bcc0
c0007a16:	6a 01                	push   0x1
c0007a18:	53                   	push   ebx
c0007a19:	e8 86 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a1e:	83 c4 20             	add    esp,0x20
c0007a21:	6a 00                	push   0x0
c0007a23:	68 ca bc 01 c0       	push   0xc001bcca
c0007a28:	6a 02                	push   0x2
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 74 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a30:	6a 00                	push   0x0
c0007a32:	68 d4 bc 01 c0       	push   0xc001bcd4
c0007a37:	6a 03                	push   0x3
c0007a39:	53                   	push   ebx
c0007a3a:	e8 65 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a3f:	83 c4 20             	add    esp,0x20
c0007a42:	6a 00                	push   0x0
c0007a44:	68 de bc 01 c0       	push   0xc001bcde
c0007a49:	6a 04                	push   0x4
c0007a4b:	53                   	push   ebx
c0007a4c:	e8 53 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a51:	6a 00                	push   0x0
c0007a53:	68 e8 bc 01 c0       	push   0xc001bce8
c0007a58:	6a 05                	push   0x5
c0007a5a:	53                   	push   ebx
c0007a5b:	e8 44 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a60:	83 c4 20             	add    esp,0x20
c0007a63:	6a 00                	push   0x0
c0007a65:	68 f2 bc 01 c0       	push   0xc001bcf2
c0007a6a:	6a 06                	push   0x6
c0007a6c:	53                   	push   ebx
c0007a6d:	e8 32 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a72:	6a 00                	push   0x0
c0007a74:	68 fc bc 01 c0       	push   0xc001bcfc
c0007a79:	6a 07                	push   0x7
c0007a7b:	53                   	push   ebx
c0007a7c:	e8 23 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a81:	83 c4 20             	add    esp,0x20
c0007a84:	6a 00                	push   0x0
c0007a86:	68 06 bd 01 c0       	push   0xc001bd06
c0007a8b:	6a 08                	push   0x8
c0007a8d:	53                   	push   ebx
c0007a8e:	e8 11 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007a93:	6a 00                	push   0x0
c0007a95:	68 0e bd 01 c0       	push   0xc001bd0e
c0007a9a:	6a 09                	push   0x9
c0007a9c:	53                   	push   ebx
c0007a9d:	e8 02 ff ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007aa2:	83 c4 20             	add    esp,0x20
c0007aa5:	6a 00                	push   0x0
c0007aa7:	68 18 bd 01 c0       	push   0xc001bd18
c0007aac:	6a 0a                	push   0xa
c0007aae:	53                   	push   ebx
c0007aaf:	e8 f0 fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007ab4:	6a 00                	push   0x0
c0007ab6:	68 20 bd 01 c0       	push   0xc001bd20
c0007abb:	6a 0b                	push   0xb
c0007abd:	53                   	push   ebx
c0007abe:	e8 e1 fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007ac3:	83 c4 20             	add    esp,0x20
c0007ac6:	6a 00                	push   0x0
c0007ac8:	68 28 bd 01 c0       	push   0xc001bd28
c0007acd:	6a 0c                	push   0xc
c0007acf:	53                   	push   ebx
c0007ad0:	e8 cf fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007ad5:	6a 00                	push   0x0
c0007ad7:	68 30 bd 01 c0       	push   0xc001bd30
c0007adc:	6a 0d                	push   0xd
c0007ade:	53                   	push   ebx
c0007adf:	e8 c0 fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007ae4:	83 c4 20             	add    esp,0x20
c0007ae7:	6a 00                	push   0x0
c0007ae9:	68 38 bd 01 c0       	push   0xc001bd38
c0007aee:	6a 0e                	push   0xe
c0007af0:	53                   	push   ebx
c0007af1:	e8 ae fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007af6:	6a 00                	push   0x0
c0007af8:	68 40 bd 01 c0       	push   0xc001bd40
c0007afd:	6a 0f                	push   0xf
c0007aff:	53                   	push   ebx
c0007b00:	e8 9f fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b05:	83 c4 20             	add    esp,0x20
c0007b08:	6a 00                	push   0x0
c0007b0a:	68 4a bd 01 c0       	push   0xc001bd4a
c0007b0f:	6a 10                	push   0x10
c0007b11:	53                   	push   ebx
c0007b12:	e8 8d fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b17:	6a 00                	push   0x0
c0007b19:	68 54 bd 01 c0       	push   0xc001bd54
c0007b1e:	6a 11                	push   0x11
c0007b20:	53                   	push   ebx
c0007b21:	e8 7e fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b26:	83 c4 20             	add    esp,0x20
c0007b29:	6a 00                	push   0x0
c0007b2b:	68 5e bd 01 c0       	push   0xc001bd5e
c0007b30:	6a 12                	push   0x12
c0007b32:	53                   	push   ebx
c0007b33:	e8 6c fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b38:	6a 01                	push   0x1
c0007b3a:	68 f8 bd 01 c0       	push   0xc001bdf8
c0007b3f:	6a 60                	push   0x60
c0007b41:	53                   	push   ebx
c0007b42:	e8 5d fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b47:	83 c4 20             	add    esp,0x20
c0007b4a:	6a 00                	push   0x0
c0007b4c:	68 ff bd 01 c0       	push   0xc001bdff
c0007b51:	6a 20                	push   0x20
c0007b53:	53                   	push   ebx
c0007b54:	e8 4b fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b59:	6a 00                	push   0x0
c0007b5b:	68 ea bd 01 c0       	push   0xc001bdea
c0007b60:	6a 21                	push   0x21
c0007b62:	53                   	push   ebx
c0007b63:	e8 3c fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b68:	83 c4 20             	add    esp,0x20
c0007b6b:	6a 00                	push   0x0
c0007b6d:	68 f1 bd 01 c0       	push   0xc001bdf1
c0007b72:	6a 22                	push   0x22
c0007b74:	53                   	push   ebx
c0007b75:	e8 2a fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b7a:	6a 00                	push   0x0
c0007b7c:	68 68 bd 01 c0       	push   0xc001bd68
c0007b81:	6a 23                	push   0x23
c0007b83:	53                   	push   ebx
c0007b84:	e8 1b fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b89:	83 c4 20             	add    esp,0x20
c0007b8c:	6a 00                	push   0x0
c0007b8e:	68 72 bd 01 c0       	push   0xc001bd72
c0007b93:	6a 24                	push   0x24
c0007b95:	53                   	push   ebx
c0007b96:	e8 09 fe ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007b9b:	6a 00                	push   0x0
c0007b9d:	68 7c bd 01 c0       	push   0xc001bd7c
c0007ba2:	6a 25                	push   0x25
c0007ba4:	53                   	push   ebx
c0007ba5:	e8 fa fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007baa:	83 c4 20             	add    esp,0x20
c0007bad:	6a 00                	push   0x0
c0007baf:	68 86 bd 01 c0       	push   0xc001bd86
c0007bb4:	6a 26                	push   0x26
c0007bb6:	53                   	push   ebx
c0007bb7:	e8 e8 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007bbc:	6a 00                	push   0x0
c0007bbe:	68 90 bd 01 c0       	push   0xc001bd90
c0007bc3:	6a 27                	push   0x27
c0007bc5:	53                   	push   ebx
c0007bc6:	e8 d9 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007bcb:	83 c4 20             	add    esp,0x20
c0007bce:	6a 00                	push   0x0
c0007bd0:	68 9a bd 01 c0       	push   0xc001bd9a
c0007bd5:	6a 28                	push   0x28
c0007bd7:	53                   	push   ebx
c0007bd8:	e8 c7 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007bdd:	6a 00                	push   0x0
c0007bdf:	68 a4 bd 01 c0       	push   0xc001bda4
c0007be4:	6a 29                	push   0x29
c0007be6:	53                   	push   ebx
c0007be7:	e8 b8 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007bec:	83 c4 20             	add    esp,0x20
c0007bef:	6a 00                	push   0x0
c0007bf1:	68 ae bd 01 c0       	push   0xc001bdae
c0007bf6:	6a 2a                	push   0x2a
c0007bf8:	53                   	push   ebx
c0007bf9:	e8 a6 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007bfe:	6a 00                	push   0x0
c0007c00:	68 b8 bd 01 c0       	push   0xc001bdb8
c0007c05:	6a 2b                	push   0x2b
c0007c07:	53                   	push   ebx
c0007c08:	e8 97 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	6a 00                	push   0x0
c0007c12:	68 c2 bd 01 c0       	push   0xc001bdc2
c0007c17:	6a 2c                	push   0x2c
c0007c19:	53                   	push   ebx
c0007c1a:	e8 85 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c1f:	6a 00                	push   0x0
c0007c21:	68 cc bd 01 c0       	push   0xc001bdcc
c0007c26:	6a 2d                	push   0x2d
c0007c28:	53                   	push   ebx
c0007c29:	e8 76 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c2e:	83 c4 20             	add    esp,0x20
c0007c31:	6a 00                	push   0x0
c0007c33:	68 d6 bd 01 c0       	push   0xc001bdd6
c0007c38:	6a 2e                	push   0x2e
c0007c3a:	53                   	push   ebx
c0007c3b:	e8 64 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c40:	6a 00                	push   0x0
c0007c42:	68 e0 bd 01 c0       	push   0xc001bde0
c0007c47:	6a 2f                	push   0x2f
c0007c49:	53                   	push   ebx
c0007c4a:	e8 55 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c4f:	83 c4 20             	add    esp,0x20
c0007c52:	6a 00                	push   0x0
c0007c54:	68 36 be 01 c0       	push   0xc001be36
c0007c59:	6a 30                	push   0x30
c0007c5b:	53                   	push   ebx
c0007c5c:	e8 43 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c61:	6a 00                	push   0x0
c0007c63:	68 40 be 01 c0       	push   0xc001be40
c0007c68:	6a 31                	push   0x31
c0007c6a:	53                   	push   ebx
c0007c6b:	e8 34 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c70:	83 c4 20             	add    esp,0x20
c0007c73:	6a 00                	push   0x0
c0007c75:	68 4a be 01 c0       	push   0xc001be4a
c0007c7a:	6a 32                	push   0x32
c0007c7c:	53                   	push   ebx
c0007c7d:	e8 22 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c82:	6a 00                	push   0x0
c0007c84:	68 54 be 01 c0       	push   0xc001be54
c0007c89:	6a 33                	push   0x33
c0007c8b:	53                   	push   ebx
c0007c8c:	e8 13 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007c91:	83 c4 20             	add    esp,0x20
c0007c94:	6a 00                	push   0x0
c0007c96:	68 5e be 01 c0       	push   0xc001be5e
c0007c9b:	6a 34                	push   0x34
c0007c9d:	53                   	push   ebx
c0007c9e:	e8 01 fd ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007ca3:	6a 00                	push   0x0
c0007ca5:	68 68 be 01 c0       	push   0xc001be68
c0007caa:	6a 35                	push   0x35
c0007cac:	53                   	push   ebx
c0007cad:	e8 f2 fc ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007cb2:	83 c4 20             	add    esp,0x20
c0007cb5:	6a 00                	push   0x0
c0007cb7:	68 72 be 01 c0       	push   0xc001be72
c0007cbc:	6a 36                	push   0x36
c0007cbe:	53                   	push   ebx
c0007cbf:	e8 e0 fc ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007cc4:	6a 00                	push   0x0
c0007cc6:	68 7c be 01 c0       	push   0xc001be7c
c0007ccb:	6a 37                	push   0x37
c0007ccd:	53                   	push   ebx
c0007cce:	e8 d1 fc ff ff       	call   c00079a4 <IDT::addEntry(int, void (*)(), bool)>
c0007cd3:	83 c4 1c             	add    esp,0x1c
c0007cd6:	6a 03                	push   0x3
c0007cd8:	6a 02                	push   0x2
c0007cda:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0007ce0:	e8 7d 23 00 00       	call   c000a062 <VAS::allocatePages(int, int)>
c0007ce5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cec:	89 c6                	mov    esi,eax
c0007cee:	e8 92 01 00 00       	call   c0007e85 <malloc>
c0007cf3:	81 c6 00 20 00 00    	add    esi,0x2000
c0007cf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cfc:	89 c7                	mov    edi,eax
c0007cfe:	e8 09 15 00 00       	call   c000920c <TSS::TSS()>
c0007d03:	83 c4 0c             	add    esp,0xc
c0007d06:	68 06 bd 01 c0       	push   0xc001bd06
c0007d0b:	56                   	push   esi
c0007d0c:	57                   	push   edi
c0007d0d:	e8 3e 15 00 00       	call   c0009250 <TSS::setup(unsigned long, unsigned long)>
c0007d12:	89 c6                	mov    esi,eax
c0007d14:	58                   	pop    eax
c0007d15:	5a                   	pop    edx
c0007d16:	6a 00                	push   0x0
c0007d18:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007d1c:	50                   	push   eax
c0007d1d:	e8 d6 fb ff ff       	call   c00078f8 <IDTEntry::IDTEntry(bool)>
c0007d22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d26:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007d2b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d32:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d3c:	80 ce 05             	or     dh,0x5
c0007d3f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d4a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d50:	e8 87 fc ff ff       	call   c00079dc <IDT::flush()>
c0007d55:	83 c4 20             	add    esp,0x20
c0007d58:	5b                   	pop    ebx
c0007d59:	5e                   	pop    esi
c0007d5a:	5f                   	pop    edi
c0007d5b:	c3                   	ret    

c0007d5c <sbrk>:
c0007d5c:	55                   	push   ebp
c0007d5d:	57                   	push   edi
c0007d5e:	56                   	push   esi
c0007d5f:	53                   	push   ebx
c0007d60:	83 ec 1c             	sub    esp,0x1c
c0007d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d67:	85 c0                	test   eax,eax
c0007d69:	74 5f                	je     c0007dca <sbrk+0x6e>
c0007d6b:	78 64                	js     c0007dd1 <sbrk+0x75>
c0007d6d:	8b 15 58 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f758
c0007d73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d77:	05 ff 0f 00 00       	add    eax,0xfff
c0007d7c:	89 c5                	mov    ebp,eax
c0007d7e:	78 69                	js     c0007de9 <sbrk+0x8d>
c0007d80:	c1 fd 0c             	sar    ebp,0xc
c0007d83:	bb 00 00 00 00       	mov    ebx,0x0
c0007d88:	8b 35 d0 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020ad0
c0007d8e:	8b 3d 58 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f758
c0007d94:	e8 c4 03 00 00       	call   c000815d <Phys::allocatePage()>
c0007d99:	68 01 04 00 00       	push   0x401
c0007d9e:	57                   	push   edi
c0007d9f:	50                   	push   eax
c0007da0:	56                   	push   esi
c0007da1:	e8 b8 21 00 00       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007da6:	81 05 58 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f758,0x1000
c0007db0:	43                   	inc    ebx
c0007db1:	83 c4 10             	add    esp,0x10
c0007db4:	39 dd                	cmp    ebp,ebx
c0007db6:	75 d0                	jne    c0007d88 <sbrk+0x2c>
c0007db8:	0f 20 d8             	mov    eax,cr3
c0007dbb:	0f 22 d8             	mov    cr3,eax
c0007dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dc2:	83 c4 1c             	add    esp,0x1c
c0007dc5:	5b                   	pop    ebx
c0007dc6:	5e                   	pop    esi
c0007dc7:	5f                   	pop    edi
c0007dc8:	5d                   	pop    ebp
c0007dc9:	c3                   	ret    
c0007dca:	a1 58 f7 01 c0       	mov    eax,ds:0xc001f758
c0007dcf:	eb f1                	jmp    c0007dc2 <sbrk+0x66>
c0007dd1:	83 ec 08             	sub    esp,0x8
c0007dd4:	50                   	push   eax
c0007dd5:	68 98 d7 01 c0       	push   0xc001d798
c0007dda:	e8 3d 2d 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0007ddf:	83 c4 10             	add    esp,0x10
c0007de2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007de7:	eb d9                	jmp    c0007dc2 <sbrk+0x66>
c0007de9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007def:	eb 8f                	jmp    c0007d80 <sbrk+0x24>

c0007df1 <mmap>:
c0007df1:	83 ec 18             	sub    esp,0x18
c0007df4:	68 c8 d7 01 c0       	push   0xc001d7c8
c0007df9:	e8 ed 88 00 00       	call   c00106eb <KePanic(char const*)>
c0007dfe:	b8 00 00 00 00       	mov    eax,0x0
c0007e03:	83 c4 1c             	add    esp,0x1c
c0007e06:	c3                   	ret    

c0007e07 <munmap>:
c0007e07:	83 ec 18             	sub    esp,0x18
c0007e0a:	68 cd d7 01 c0       	push   0xc001d7cd
c0007e0f:	e8 d7 88 00 00       	call   c00106eb <KePanic(char const*)>
c0007e14:	b8 00 00 00 00       	mov    eax,0x0
c0007e19:	83 c4 1c             	add    esp,0x1c
c0007e1c:	c3                   	ret    

c0007e1d <liballoc_lock()>:
c0007e1d:	fa                   	cli    
c0007e1e:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0007e24:	b8 00 00 00 00       	mov    eax,0x0
c0007e29:	c3                   	ret    

c0007e2a <liballoc_unlock()>:
c0007e2a:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0007e2f:	48                   	dec    eax
c0007e30:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0007e35:	75 01                	jne    c0007e38 <liballoc_unlock()+0xe>
c0007e37:	fb                   	sti    
c0007e38:	b8 00 00 00 00       	mov    eax,0x0
c0007e3d:	c3                   	ret    

c0007e3e <liballoc_alloc(int)>:
c0007e3e:	83 ec 10             	sub    esp,0x10
c0007e41:	6a 01                	push   0x1
c0007e43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e47:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0007e4d:	e8 10 22 00 00       	call   c000a062 <VAS::allocatePages(int, int)>
c0007e52:	83 c4 1c             	add    esp,0x1c
c0007e55:	c3                   	ret    

c0007e56 <liballoc_free(void*, int)>:
c0007e56:	83 ec 14             	sub    esp,0x14
c0007e59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e5d:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0007e63:	e8 b6 1e 00 00       	call   c0009d1e <VAS::freeAllocatedPages(unsigned long)>
c0007e68:	b8 00 00 00 00       	mov    eax,0x0
c0007e6d:	83 c4 1c             	add    esp,0x1c
c0007e70:	c3                   	ret    

c0007e71 <realloc>:
c0007e71:	83 ec 14             	sub    esp,0x14
c0007e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e7c:	e8 d0 96 ff ff       	call   c0001551 <dlrealloc>
c0007e81:	83 c4 1c             	add    esp,0x1c
c0007e84:	c3                   	ret    

c0007e85 <malloc>:
c0007e85:	83 ec 18             	sub    esp,0x18
c0007e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e8c:	e8 83 91 ff ff       	call   c0001014 <dlmalloc>
c0007e91:	83 c4 1c             	add    esp,0x1c
c0007e94:	c3                   	ret    

c0007e95 <free>:
c0007e95:	83 ec 18             	sub    esp,0x18
c0007e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e9c:	e8 18 8e ff ff       	call   c0000cb9 <dlfree>
c0007ea1:	83 c4 1c             	add    esp,0x1c
c0007ea4:	c3                   	ret    

c0007ea5 <rfree>:
c0007ea5:	83 ec 18             	sub    esp,0x18
c0007ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007eac:	e8 08 8e ff ff       	call   c0000cb9 <dlfree>
c0007eb1:	83 c4 1c             	add    esp,0x1c
c0007eb4:	c3                   	ret    

c0007eb5 <calloc>:
c0007eb5:	56                   	push   esi
c0007eb6:	53                   	push   ebx
c0007eb7:	83 ec 10             	sub    esp,0x10
c0007eba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ebe:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007ec3:	53                   	push   ebx
c0007ec4:	e8 bc ff ff ff       	call   c0007e85 <malloc>
c0007ec9:	89 c6                	mov    esi,eax
c0007ecb:	83 c4 0c             	add    esp,0xc
c0007ece:	53                   	push   ebx
c0007ecf:	6a 00                	push   0x0
c0007ed1:	50                   	push   eax
c0007ed2:	e8 19 86 ff ff       	call   c00004f0 <memset>
c0007ed7:	89 f0                	mov    eax,esi
c0007ed9:	83 c4 14             	add    esp,0x14
c0007edc:	5b                   	pop    ebx
c0007edd:	5e                   	pop    esi
c0007ede:	c3                   	ret    

c0007edf <Krnl::setBootMessage(char const*)>:
c0007edf:	c3                   	ret    

c0007ee0 <kernel_main>:
c0007ee0:	57                   	push   edi
c0007ee1:	bf f9 03 00 00       	mov    edi,0x3f9
c0007ee6:	56                   	push   esi
c0007ee7:	89 fa                	mov    edx,edi
c0007ee9:	53                   	push   ebx
c0007eea:	31 f6                	xor    esi,esi
c0007eec:	83 ec 2c             	sub    esp,0x2c
c0007eef:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007ef4:	a3 f0 09 02 c0       	mov    ds:0xc00209f0,eax
c0007ef9:	89 f0                	mov    eax,esi
c0007efb:	ee                   	out    dx,al
c0007efc:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f01:	b0 80                	mov    al,0x80
c0007f03:	89 da                	mov    edx,ebx
c0007f05:	ee                   	out    dx,al
c0007f06:	b1 03                	mov    cl,0x3
c0007f08:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f0d:	88 c8                	mov    al,cl
c0007f0f:	ee                   	out    dx,al
c0007f10:	89 f0                	mov    eax,esi
c0007f12:	89 fa                	mov    edx,edi
c0007f14:	ee                   	out    dx,al
c0007f15:	88 c8                	mov    al,cl
c0007f17:	89 da                	mov    edx,ebx
c0007f19:	ee                   	out    dx,al
c0007f1a:	b0 c7                	mov    al,0xc7
c0007f1c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f21:	ee                   	out    dx,al
c0007f22:	b0 0b                	mov    al,0xb
c0007f24:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f29:	ee                   	out    dx,al
c0007f2a:	68 d4 d7 01 c0       	push   0xc001d7d4
c0007f2f:	e8 e8 2b 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0007f34:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007f39:	05 ff 0f 00 00       	add    eax,0xfff
c0007f3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f43:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f46:	e8 64 03 00 00       	call   c00082af <Phys::physicalMemorySetup(unsigned int)>
c0007f4b:	e8 38 1b 00 00       	call   c0009a88 <Virt::virtualMemorySetup()>
c0007f50:	58                   	pop    eax
c0007f51:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007f55:	53                   	push   ebx
c0007f56:	e8 e9 1b 00 00       	call   c0009b44 <VAS::VAS()>
c0007f5b:	89 1d d0 0a 02 c0    	mov    DWORD PTR ds:0xc0020ad0,ebx
c0007f61:	e8 ba 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0007f66:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007f6d:	e8 13 ff ff ff       	call   c0007e85 <malloc>
c0007f72:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f75:	89 c6                	mov    esi,eax
c0007f77:	e8 82 f2 ff ff       	call   c00071fe <Computer::Computer()>
c0007f7c:	6a 00                	push   0x0
c0007f7e:	89 35 d8 09 02 c0    	mov    DWORD PTR ds:0xc00209d8,esi
c0007f84:	6a 00                	push   0x0
c0007f86:	6a 00                	push   0x0
c0007f88:	56                   	push   esi
c0007f89:	e8 16 f6 ff ff       	call   c00075a4 <Computer::open(int, int, void*)>
c0007f8e:	83 c4 14             	add    esp,0x14
c0007f91:	53                   	push   ebx
c0007f92:	e8 63 1e 00 00       	call   c0009dfa <VAS::~VAS()>
c0007f97:	83 c4 30             	add    esp,0x30
c0007f9a:	5b                   	pop    ebx
c0007f9b:	5e                   	pop    esi
c0007f9c:	5f                   	pop    edi
c0007f9d:	c3                   	ret    

c0007f9e <Phys::allocateDMA(unsigned long)>:
c0007f9e:	55                   	push   ebp
c0007f9f:	31 ed                	xor    ebp,ebp
c0007fa1:	57                   	push   edi
c0007fa2:	56                   	push   esi
c0007fa3:	53                   	push   ebx
c0007fa4:	31 db                	xor    ebx,ebx
c0007fa6:	83 ec 1c             	sub    esp,0x1c
c0007fa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007fad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007fb5:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007fbb:	31 c0                	xor    eax,eax
c0007fbd:	c1 ef 0c             	shr    edi,0xc
c0007fc0:	eb 19                	jmp    c0007fdb <Phys::allocateDMA(unsigned long)+0x3d>
c0007fc2:	85 c0                	test   eax,eax
c0007fc4:	75 06                	jne    c0007fcc <Phys::allocateDMA(unsigned long)+0x2e>
c0007fc6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fca:	89 dd                	mov    ebp,ebx
c0007fcc:	8d 70 01             	lea    esi,[eax+0x1]
c0007fcf:	39 f7                	cmp    edi,esi
c0007fd1:	74 33                	je     c0008006 <Phys::allocateDMA(unsigned long)+0x68>
c0007fd3:	89 f0                	mov    eax,esi
c0007fd5:	43                   	inc    ebx
c0007fd6:	83 fb 0f             	cmp    ebx,0xf
c0007fd9:	7f 11                	jg     c0007fec <Phys::allocateDMA(unsigned long)+0x4e>
c0007fdb:	80 bb 0c 0a 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf5f4],0x0
c0007fe2:	74 de                	je     c0007fc2 <Phys::allocateDMA(unsigned long)+0x24>
c0007fe4:	31 c0                	xor    eax,eax
c0007fe6:	43                   	inc    ebx
c0007fe7:	83 fb 0f             	cmp    ebx,0xf
c0007fea:	7e ef                	jle    c0007fdb <Phys::allocateDMA(unsigned long)+0x3d>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	68 ec d7 01 c0       	push   0xc001d7ec
c0007ff4:	e8 f2 86 00 00       	call   c00106eb <KePanic(char const*)>
c0007ff9:	83 c4 10             	add    esp,0x10
c0007ffc:	31 c0                	xor    eax,eax
c0007ffe:	83 c4 1c             	add    esp,0x1c
c0008001:	5b                   	pop    ebx
c0008002:	5e                   	pop    esi
c0008003:	5f                   	pop    edi
c0008004:	5d                   	pop    ebp
c0008005:	c3                   	ret    
c0008006:	89 e9                	mov    ecx,ebp
c0008008:	c1 f9 04             	sar    ecx,0x4
c000800b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000800f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0008013:	89 ca                	mov    edx,ecx
c0008015:	4a                   	dec    edx
c0008016:	79 03                	jns    c000801b <Phys::allocateDMA(unsigned long)+0x7d>
c0008018:	8d 51 0e             	lea    edx,[ecx+0xe]
c000801b:	c1 fa 04             	sar    edx,0x4
c000801e:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0008022:	74 08                	je     c000802c <Phys::allocateDMA(unsigned long)+0x8e>
c0008024:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008028:	31 c0                	xor    eax,eax
c000802a:	eb ba                	jmp    c0007fe6 <Phys::allocateDMA(unsigned long)+0x48>
c000802c:	85 f6                	test   esi,esi
c000802e:	74 15                	je     c0008045 <Phys::allocateDMA(unsigned long)+0xa7>
c0008030:	8d 95 0c 0a 02 c0    	lea    edx,[ebp-0x3ffdf5f4]
c0008036:	8d 84 05 0d 0a 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf5f3]
c000803d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0008040:	42                   	inc    edx
c0008041:	39 d0                	cmp    eax,edx
c0008043:	75 f8                	jne    c000803d <Phys::allocateDMA(unsigned long)+0x9f>
c0008045:	01 3d 04 0a 02 c0    	add    DWORD PTR ds:0xc0020a04,edi
c000804b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000804f:	85 c0                	test   eax,eax
c0008051:	74 17                	je     c000806a <Phys::allocateDMA(unsigned long)+0xcc>
c0008053:	83 ec 0c             	sub    esp,0xc
c0008056:	68 ec d7 01 c0       	push   0xc001d7ec
c000805b:	e8 8b 86 00 00       	call   c00106eb <KePanic(char const*)>
c0008060:	83 c4 10             	add    esp,0x10
c0008063:	89 f0                	mov    eax,esi
c0008065:	e9 6b ff ff ff       	jmp    c0007fd5 <Phys::allocateDMA(unsigned long)+0x37>
c000806a:	c1 e5 0c             	shl    ebp,0xc
c000806d:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0008073:	eb 89                	jmp    c0007ffe <Phys::allocateDMA(unsigned long)+0x60>

c0008075 <Phys::freeDMA(unsigned long, unsigned long)>:
c0008075:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008079:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000807f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008083:	c1 ea 0c             	shr    edx,0xc
c0008086:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000808b:	29 15 04 0a 02 c0    	sub    DWORD PTR ds:0xc0020a04,edx
c0008091:	c1 e8 0c             	shr    eax,0xc
c0008094:	85 d2                	test   edx,edx
c0008096:	74 0f                	je     c00080a7 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008098:	05 0c 0a 02 c0       	add    eax,0xc0020a0c
c000809d:	01 c2                	add    edx,eax
c000809f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00080a2:	40                   	inc    eax
c00080a3:	39 d0                	cmp    eax,edx
c00080a5:	75 f8                	jne    c000809f <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00080a7:	c3                   	ret    

c00080a8 <Phys::setPageState(unsigned long, bool)>:
c00080a8:	56                   	push   esi
c00080a9:	ba 01 00 00 00       	mov    edx,0x1
c00080ae:	53                   	push   ebx
c00080af:	8b 35 5c f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f75c
c00080b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00080b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080bd:	89 c8                	mov    eax,ecx
c00080bf:	83 e1 07             	and    ecx,0x7
c00080c2:	c1 e8 03             	shr    eax,0x3
c00080c5:	d3 e3                	shl    ebx,cl
c00080c7:	01 c6                	add    esi,eax
c00080c9:	d3 e2                	shl    edx,cl
c00080cb:	f7 d2                	not    edx
c00080cd:	20 16                	and    BYTE PTR [esi],dl
c00080cf:	03 05 5c f7 01 c0    	add    eax,DWORD PTR ds:0xc001f75c
c00080d5:	08 18                	or     BYTE PTR [eax],bl
c00080d7:	5b                   	pop    ebx
c00080d8:	5e                   	pop    esi
c00080d9:	c3                   	ret    

c00080da <Phys::getPageState(unsigned long)>:
c00080da:	53                   	push   ebx
c00080db:	8b 15 5c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f75c
c00080e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00080e5:	31 db                	xor    ebx,ebx
c00080e7:	89 c8                	mov    eax,ecx
c00080e9:	83 e1 07             	and    ecx,0x7
c00080ec:	c1 e8 03             	shr    eax,0x3
c00080ef:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00080f2:	89 d8                	mov    eax,ebx
c00080f4:	5b                   	pop    ebx
c00080f5:	d3 f8                	sar    eax,cl
c00080f7:	83 e0 01             	and    eax,0x1
c00080fa:	c3                   	ret    

c00080fb <Phys::freePage(unsigned long)>:
c00080fb:	53                   	push   ebx
c00080fc:	83 ec 08             	sub    esp,0x8
c00080ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008103:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0008109:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000810f:	76 3a                	jbe    c000814b <Phys::freePage(unsigned long)+0x50>
c0008111:	c1 e8 0c             	shr    eax,0xc
c0008114:	50                   	push   eax
c0008115:	89 c3                	mov    ebx,eax
c0008117:	e8 be ff ff ff       	call   c00080da <Phys::getPageState(unsigned long)>
c000811c:	5a                   	pop    edx
c000811d:	84 c0                	test   al,al
c000811f:	74 19                	je     c000813a <Phys::freePage(unsigned long)+0x3f>
c0008121:	83 ec 08             	sub    esp,0x8
c0008124:	ff 0d 04 0a 02 c0    	dec    DWORD PTR ds:0xc0020a04
c000812a:	6a 00                	push   0x0
c000812c:	53                   	push   ebx
c000812d:	e8 76 ff ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c0008132:	83 c4 10             	add    esp,0x10
c0008135:	83 c4 08             	add    esp,0x8
c0008138:	5b                   	pop    ebx
c0008139:	c3                   	ret    
c000813a:	c7 44 24 10 91 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d891
c0008142:	83 c4 08             	add    esp,0x8
c0008145:	5b                   	pop    ebx
c0008146:	e9 a0 85 00 00       	jmp    c00106eb <KePanic(char const*)>
c000814b:	68 00 10 00 00       	push   0x1000
c0008150:	50                   	push   eax
c0008151:	e8 1f ff ff ff       	call   c0008075 <Phys::freeDMA(unsigned long, unsigned long)>
c0008156:	59                   	pop    ecx
c0008157:	5b                   	pop    ebx
c0008158:	83 c4 08             	add    esp,0x8
c000815b:	5b                   	pop    ebx
c000815c:	c3                   	ret    

c000815d <Phys::allocatePage()>:
c000815d:	56                   	push   esi
c000815e:	53                   	push   ebx
c000815f:	83 ec 14             	sub    esp,0x14
c0008162:	8b 35 f8 09 02 c0    	mov    esi,DWORD PTR ds:0xc00209f8
c0008168:	89 f3                	mov    ebx,esi
c000816a:	eb 0a                	jmp    c0008176 <Phys::allocatePage()+0x19>
c000816c:	89 1d f8 09 02 c0    	mov    DWORD PTR ds:0xc00209f8,ebx
c0008172:	39 de                	cmp    esi,ebx
c0008174:	74 24                	je     c000819a <Phys::allocatePage()+0x3d>
c0008176:	53                   	push   ebx
c0008177:	e8 5e ff ff ff       	call   c00080da <Phys::getPageState(unsigned long)>
c000817c:	5a                   	pop    edx
c000817d:	84 c0                	test   al,al
c000817f:	74 5f                	je     c00081e0 <Phys::allocatePage()+0x83>
c0008181:	43                   	inc    ebx
c0008182:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008188:	75 e2                	jne    c000816c <Phys::allocatePage()+0xf>
c000818a:	31 db                	xor    ebx,ebx
c000818c:	c7 05 f8 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209f8,0x0
c0008196:	39 de                	cmp    esi,ebx
c0008198:	75 dc                	jne    c0008176 <Phys::allocatePage()+0x19>
c000819a:	83 ec 0c             	sub    esp,0xc
c000819d:	80 35 1c 0a 02 c0 01 	xor    BYTE PTR ds:0xc0020a1c,0x1
c00081a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00081a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00081ac:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00081b2:	50                   	push   eax
c00081b3:	e8 84 26 00 00       	call   c000a83c <VAS::scanForEviction()>
c00081b8:	83 c4 10             	add    esp,0x10
c00081bb:	85 c0                	test   eax,eax
c00081bd:	75 3f                	jne    c00081fe <Phys::allocatePage()+0xa1>
c00081bf:	83 ec 0c             	sub    esp,0xc
c00081c2:	68 14 d8 01 c0       	push   0xc001d814
c00081c7:	e8 1f 85 00 00       	call   c00106eb <KePanic(char const*)>
c00081cc:	83 c4 10             	add    esp,0x10
c00081cf:	8b 1d f8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209f8
c00081d5:	53                   	push   ebx
c00081d6:	e8 ff fe ff ff       	call   c00080da <Phys::getPageState(unsigned long)>
c00081db:	5a                   	pop    edx
c00081dc:	84 c0                	test   al,al
c00081de:	75 a1                	jne    c0008181 <Phys::allocatePage()+0x24>
c00081e0:	6a 01                	push   0x1
c00081e2:	53                   	push   ebx
c00081e3:	e8 c0 fe ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c00081e8:	a1 f8 09 02 c0       	mov    eax,ds:0xc00209f8
c00081ed:	5a                   	pop    edx
c00081ee:	ff 05 04 0a 02 c0    	inc    DWORD PTR ds:0xc0020a04
c00081f4:	c1 e0 0c             	shl    eax,0xc
c00081f7:	59                   	pop    ecx
c00081f8:	83 c4 14             	add    esp,0x14
c00081fb:	5b                   	pop    ebx
c00081fc:	5e                   	pop    esi
c00081fd:	c3                   	ret    
c00081fe:	83 ec 08             	sub    esp,0x8
c0008201:	89 c2                	mov    edx,eax
c0008203:	6a 01                	push   0x1
c0008205:	c1 ea 0c             	shr    edx,0xc
c0008208:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000820c:	52                   	push   edx
c000820d:	e8 96 fe ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c0008212:	83 c4 10             	add    esp,0x10
c0008215:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008219:	eb dd                	jmp    c00081f8 <Phys::allocatePage()+0x9b>

c000821b <Phys::allocateContiguousPages(int)>:
c000821b:	57                   	push   edi
c000821c:	56                   	push   esi
c000821d:	53                   	push   ebx
c000821e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008222:	fa                   	cli    
c0008223:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0008229:	31 db                	xor    ebx,ebx
c000822b:	85 db                	test   ebx,ebx
c000822d:	75 11                	jne    c0008240 <Phys::allocateContiguousPages(int)+0x25>
c000822f:	e8 29 ff ff ff       	call   c000815d <Phys::allocatePage()>
c0008234:	83 fe 01             	cmp    esi,0x1
c0008237:	89 c7                	mov    edi,eax
c0008239:	74 21                	je     c000825c <Phys::allocateContiguousPages(int)+0x41>
c000823b:	bb 01 00 00 00       	mov    ebx,0x1
c0008240:	e8 18 ff ff ff       	call   c000815d <Phys::allocatePage()>
c0008245:	89 da                	mov    edx,ebx
c0008247:	c1 e2 0c             	shl    edx,0xc
c000824a:	01 fa                	add    edx,edi
c000824c:	39 c2                	cmp    edx,eax
c000824e:	74 20                	je     c0008270 <Phys::allocateContiguousPages(int)+0x55>
c0008250:	bb 01 00 00 00       	mov    ebx,0x1
c0008255:	89 c7                	mov    edi,eax
c0008257:	83 fe 01             	cmp    esi,0x1
c000825a:	75 e4                	jne    c0008240 <Phys::allocateContiguousPages(int)+0x25>
c000825c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0008261:	48                   	dec    eax
c0008262:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0008267:	75 01                	jne    c000826a <Phys::allocateContiguousPages(int)+0x4f>
c0008269:	fb                   	sti    
c000826a:	89 f8                	mov    eax,edi
c000826c:	5b                   	pop    ebx
c000826d:	5e                   	pop    esi
c000826e:	5f                   	pop    edi
c000826f:	c3                   	ret    
c0008270:	43                   	inc    ebx
c0008271:	39 f3                	cmp    ebx,esi
c0008273:	75 b6                	jne    c000822b <Phys::allocateContiguousPages(int)+0x10>
c0008275:	eb e5                	jmp    c000825c <Phys::allocateContiguousPages(int)+0x41>

c0008277 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008277:	56                   	push   esi
c0008278:	53                   	push   ebx
c0008279:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000827d:	39 1d fc 09 02 c0    	cmp    DWORD PTR ds:0xc00209fc,ebx
c0008283:	73 06                	jae    c000828b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0008285:	89 1d fc 09 02 c0    	mov    DWORD PTR ds:0xc00209fc,ebx
c000828b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000828f:	c1 eb 0c             	shr    ebx,0xc
c0008292:	c1 e8 0c             	shr    eax,0xc
c0008295:	39 d8                	cmp    eax,ebx
c0008297:	73 13                	jae    c00082ac <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008299:	6a 00                	push   0x0
c000829b:	8d 70 01             	lea    esi,[eax+0x1]
c000829e:	50                   	push   eax
c000829f:	e8 04 fe ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c00082a4:	5a                   	pop    edx
c00082a5:	89 f0                	mov    eax,esi
c00082a7:	59                   	pop    ecx
c00082a8:	39 f3                	cmp    ebx,esi
c00082aa:	75 ed                	jne    c0008299 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00082ac:	5b                   	pop    ebx
c00082ad:	5e                   	pop    esi
c00082ae:	c3                   	ret    

c00082af <Phys::physicalMemorySetup(unsigned int)>:
c00082af:	55                   	push   ebp
c00082b0:	57                   	push   edi
c00082b1:	56                   	push   esi
c00082b2:	53                   	push   ebx
c00082b3:	31 db                	xor    ebx,ebx
c00082b5:	83 ec 40             	sub    esp,0x40
c00082b8:	6a 10                	push   0x10
c00082ba:	6a 00                	push   0x0
c00082bc:	68 0c 0a 02 c0       	push   0xc0020a0c
c00082c1:	e8 2a 82 ff ff       	call   c00004f0 <memset>
c00082c6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00082ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c00082cf:	05 00 10 00 00       	add    eax,0x1000
c00082d4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00082d8:	5a                   	pop    edx
c00082d9:	59                   	pop    ecx
c00082da:	50                   	push   eax
c00082db:	68 a7 d8 01 c0       	push   0xc001d8a7
c00082e0:	e8 37 28 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00082e5:	83 c4 10             	add    esp,0x10
c00082e8:	83 ec 08             	sub    esp,0x8
c00082eb:	6a 01                	push   0x1
c00082ed:	53                   	push   ebx
c00082ee:	43                   	inc    ebx
c00082ef:	e8 b4 fd ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c00082f4:	83 c4 10             	add    esp,0x10
c00082f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00082fd:	75 e9                	jne    c00082e8 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00082ff:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0008305:	66 85 c0             	test   ax,ax
c0008308:	0f 84 97 01 00 00    	je     c00084a5 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000830e:	89 c7                	mov    edi,eax
c0008310:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008318:	81 e7 ff ff 00 00    	and    edi,0xffff
c000831e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0008323:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0008327:	eb 15                	jmp    c000833e <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0008329:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000832d:	83 c3 18             	add    ebx,0x18
c0008330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008334:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008338:	0f 84 77 01 00 00    	je     c00084b5 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000833e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008341:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008344:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008347:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000834b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000834f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008351:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008354:	01 f0                	add    eax,esi
c0008356:	55                   	push   ebp
c0008357:	11 fa                	adc    edx,edi
c0008359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000835d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008361:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008365:	50                   	push   eax
c0008366:	56                   	push   esi
c0008367:	68 44 d8 01 c0       	push   0xc001d844
c000836c:	e8 ab 27 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0008371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008375:	83 c4 10             	add    esp,0x10
c0008378:	09 f8                	or     eax,edi
c000837a:	0f 85 35 01 00 00    	jne    c00084b5 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008380:	4d                   	dec    ebp
c0008381:	75 a6                	jne    c0008329 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008383:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008387:	ba 00 00 08 00       	mov    edx,0x80000
c000838c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0008390:	39 f2                	cmp    edx,esi
c0008392:	89 c1                	mov    ecx,eax
c0008394:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000839c:	19 f9                	sbb    ecx,edi
c000839e:	0f 82 a7 00 00 00    	jb     c000844b <Phys::physicalMemorySetup(unsigned int)+0x19c>
c00083a4:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00083a8:	89 c1                	mov    ecx,eax
c00083aa:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00083ae:	0f 83 97 00 00 00    	jae    c000844b <Phys::physicalMemorySetup(unsigned int)+0x19c>
c00083b4:	ba 00 00 0a 00       	mov    edx,0xa0000
c00083b9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083bd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00083c1:	39 fa                	cmp    edx,edi
c00083c3:	19 e8                	sbb    eax,ebp
c00083c5:	0f 82 9a 01 00 00    	jb     c0008565 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c00083cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00083d3:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00083d9:	ba ff 1f 00 00       	mov    edx,0x1fff
c00083de:	83 d5 ff             	adc    ebp,0xffffffff
c00083e1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00083e5:	31 c0                	xor    eax,eax
c00083e7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00083eb:	39 fa                	cmp    edx,edi
c00083ed:	89 c1                	mov    ecx,eax
c00083ef:	19 e9                	sbb    ecx,ebp
c00083f1:	0f 83 32 ff ff ff    	jae    c0008329 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00083f7:	be 00 00 08 00       	mov    esi,0x80000
c00083fc:	51                   	push   ecx
c00083fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008401:	57                   	push   edi
c0008402:	56                   	push   esi
c0008403:	68 68 d8 01 c0       	push   0xc001d868
c0008408:	e8 0f 27 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000840d:	5d                   	pop    ebp
c000840e:	58                   	pop    eax
c000840f:	57                   	push   edi
c0008410:	56                   	push   esi
c0008411:	e8 61 fe ff ff       	call   c0008277 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008416:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000841a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000841e:	83 c4 0c             	add    esp,0xc
c0008421:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008425:	03 05 08 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020a08
c000842b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008432:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c0008437:	52                   	push   edx
c0008438:	50                   	push   eax
c0008439:	68 cd d8 01 c0       	push   0xc001d8cd
c000843e:	e8 d9 26 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0008443:	83 c4 10             	add    esp,0x10
c0008446:	e9 de fe ff ff       	jmp    c0008329 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000844b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000844f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008453:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008457:	39 ea                	cmp    edx,ebp
c0008459:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000845d:	0f 82 c6 fe ff ff    	jb     c0008329 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008463:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008468:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000846c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008470:	0f 83 b3 fe ff ff    	jae    c0008329 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008476:	39 ee                	cmp    esi,ebp
c0008478:	89 f8                	mov    eax,edi
c000847a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000847e:	0f 83 78 ff ff ff    	jae    c00083fc <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008488:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000848c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008490:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008494:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008498:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000849c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00084a0:	e9 57 ff ff ff       	jmp    c00083fc <Phys::physicalMemorySetup(unsigned int)+0x14d>
c00084a5:	83 ec 0c             	sub    esp,0xc
c00084a8:	68 bf d8 01 c0       	push   0xc001d8bf
c00084ad:	e8 39 82 00 00       	call   c00106eb <KePanic(char const*)>
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	83 ec 08             	sub    esp,0x8
c00084b8:	bb 60 00 00 00       	mov    ebx,0x60
c00084bd:	6a 00                	push   0x0
c00084bf:	6a 06                	push   0x6
c00084c1:	e8 e2 fb ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c00084c6:	58                   	pop    eax
c00084c7:	5a                   	pop    edx
c00084c8:	6a 00                	push   0x0
c00084ca:	6a 07                	push   0x7
c00084cc:	e8 d7 fb ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c00084d1:	83 05 08 0a 02 c0 02 	add    DWORD PTR ds:0xc0020a08,0x2
c00084d8:	83 c4 10             	add    esp,0x10
c00084db:	83 ec 08             	sub    esp,0x8
c00084de:	6a 00                	push   0x0
c00084e0:	53                   	push   ebx
c00084e1:	43                   	inc    ebx
c00084e2:	e8 c1 fb ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c00084e7:	83 c4 10             	add    esp,0x10
c00084ea:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00084f0:	75 e9                	jne    c00084db <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00084f2:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c00084f7:	bb 40 01 00 00       	mov    ebx,0x140
c00084fc:	83 c0 20             	add    eax,0x20
c00084ff:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c0008504:	eb 22                	jmp    c0008528 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0008506:	83 ec 08             	sub    esp,0x8
c0008509:	6a 00                	push   0x0
c000850b:	53                   	push   ebx
c000850c:	43                   	inc    ebx
c000850d:	e8 96 fb ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c0008512:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	40                   	inc    eax
c000851b:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008521:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c0008526:	74 07                	je     c000852f <Phys::physicalMemorySetup(unsigned int)+0x280>
c0008528:	3d ff 03 00 00       	cmp    eax,0x3ff
c000852d:	7e d7                	jle    c0008506 <Phys::physicalMemorySetup(unsigned int)+0x257>
c000852f:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008534:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008539:	7f 22                	jg     c000855d <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000853b:	83 ec 08             	sub    esp,0x8
c000853e:	6a 00                	push   0x0
c0008540:	53                   	push   ebx
c0008541:	43                   	inc    ebx
c0008542:	e8 61 fb ff ff       	call   c00080a8 <Phys::setPageState(unsigned long, bool)>
c0008547:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c000854c:	83 c4 10             	add    esp,0x10
c000854f:	40                   	inc    eax
c0008550:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008556:	a3 08 0a 02 c0       	mov    ds:0xc0020a08,eax
c000855b:	75 d7                	jne    c0008534 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000855d:	83 c4 3c             	add    esp,0x3c
c0008560:	5b                   	pop    ebx
c0008561:	5e                   	pop    esi
c0008562:	5f                   	pop    edi
c0008563:	5d                   	pop    ebp
c0008564:	c3                   	ret    
c0008565:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000856d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008575:	e9 51 fe ff ff       	jmp    c00083cb <Phys::physicalMemorySetup(unsigned int)+0x11c>

c000857a <Pipe::isAtty()>:
c000857a:	31 c0                	xor    eax,eax
c000857c:	c3                   	ret    
c000857d:	90                   	nop

c000857e <Pipe::~Pipe()>:
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	ba 2c d9 01 c0       	mov    edx,0xc001d92c
c0008586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858a:	89 10                	mov    DWORD PTR [eax],edx
c000858c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008590:	83 ec 0c             	sub    esp,0xc
c0008593:	50                   	push   eax
c0008594:	e8 cf 10 00 00       	call   c0009668 <UnixFile::~UnixFile()>
c0008599:	83 c4 10             	add    esp,0x10
c000859c:	90                   	nop
c000859d:	83 c4 0c             	add    esp,0xc
c00085a0:	c3                   	ret    
c00085a1:	90                   	nop

c00085a2 <Pipe::~Pipe()>:
c00085a2:	83 ec 0c             	sub    esp,0xc
c00085a5:	83 ec 0c             	sub    esp,0xc
c00085a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ac:	e8 cd ff ff ff       	call   c000857e <Pipe::~Pipe()>
c00085b1:	83 c4 10             	add    esp,0x10
c00085b4:	83 ec 08             	sub    esp,0x8
c00085b7:	6a 20                	push   0x20
c00085b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085bd:	e8 64 24 00 00       	call   c000aa26 <operator delete(void*, unsigned long)>
c00085c2:	83 c4 10             	add    esp,0x10
c00085c5:	83 c4 0c             	add    esp,0xc
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <Pipe::write(unsigned long long, void*, int*)>:
c00085ca:	55                   	push   ebp
c00085cb:	57                   	push   edi
c00085cc:	56                   	push   esi
c00085cd:	53                   	push   ebx
c00085ce:	83 ec 1c             	sub    esp,0x1c
c00085d1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00085d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00085d9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00085dc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00085e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00085e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085e7:	89 d8                	mov    eax,ebx
c00085e9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00085ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00085f0:	89 d6                	mov    esi,edx
c00085f2:	89 d7                	mov    edi,edx
c00085f4:	c1 ff 1f             	sar    edi,0x1f
c00085f7:	03 34 24             	add    esi,DWORD PTR [esp]
c00085fa:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00085fe:	c1 f8 1f             	sar    eax,0x1f
c0008601:	39 f3                	cmp    ebx,esi
c0008603:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008607:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000860b:	19 f8                	sbb    eax,edi
c000860d:	b8 01 00 00 00       	mov    eax,0x1
c0008612:	72 6e                	jb     c0008682 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008614:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008617:	01 d0                	add    eax,edx
c0008619:	99                   	cdq    
c000861a:	f7 fb                	idiv   ebx
c000861c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008620:	29 d3                	sub    ebx,edx
c0008622:	89 d7                	mov    edi,edx
c0008624:	89 de                	mov    esi,ebx
c0008626:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008629:	c1 fb 1f             	sar    ebx,0x1f
c000862c:	39 f2                	cmp    edx,esi
c000862e:	19 d8                	sbb    eax,ebx
c0008630:	b8 00 00 00 00       	mov    eax,0x0
c0008635:	72 04                	jb     c000863b <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008637:	89 d0                	mov    eax,edx
c0008639:	29 f0                	sub    eax,esi
c000863b:	89 d3                	mov    ebx,edx
c000863d:	29 c3                	sub    ebx,eax
c000863f:	74 0b                	je     c000864c <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008641:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008644:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008648:	89 d9                	mov    ecx,ebx
c000864a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000864c:	85 c0                	test   eax,eax
c000864e:	74 0d                	je     c000865d <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008650:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008654:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008657:	89 de                	mov    esi,ebx
c0008659:	89 c1                	mov    ecx,eax
c000865b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000865d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008660:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008665:	75 10                	jne    c0008677 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008667:	83 ec 0c             	sub    esp,0xc
c000866a:	68 e9 d8 01 c0       	push   0xc001d8e9
c000866f:	e8 77 80 00 00       	call   c00106eb <KePanic(char const*)>
c0008674:	83 c4 10             	add    esp,0x10
c0008677:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000867b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000867e:	89 08                	mov    DWORD PTR [eax],ecx
c0008680:	31 c0                	xor    eax,eax
c0008682:	83 c4 1c             	add    esp,0x1c
c0008685:	5b                   	pop    ebx
c0008686:	5e                   	pop    esi
c0008687:	5f                   	pop    edi
c0008688:	5d                   	pop    ebp
c0008689:	c3                   	ret    

c000868a <Pipe::read(unsigned long long, void*, int*)>:
c000868a:	55                   	push   ebp
c000868b:	57                   	push   edi
c000868c:	56                   	push   esi
c000868d:	53                   	push   ebx
c000868e:	83 ec 1c             	sub    esp,0x1c
c0008691:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008695:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008699:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000869d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00086a0:	89 c8                	mov    eax,ecx
c00086a2:	99                   	cdq    
c00086a3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00086a7:	74 24                	je     c00086cd <Pipe::read(unsigned long long, void*, int*)+0x43>
c00086a9:	39 f9                	cmp    ecx,edi
c00086ab:	89 d1                	mov    ecx,edx
c00086ad:	19 f1                	sbb    ecx,esi
c00086af:	73 1c                	jae    c00086cd <Pipe::read(unsigned long long, void*, int*)+0x43>
c00086b1:	fa                   	cli    
c00086b2:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00086b8:	e8 87 b2 00 00       	call   c0013944 <schedule()>
c00086bd:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00086c2:	48                   	dec    eax
c00086c3:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00086c8:	75 d3                	jne    c000869d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00086ca:	fb                   	sti    
c00086cb:	eb d0                	jmp    c000869d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00086cd:	39 f8                	cmp    eax,edi
c00086cf:	89 d1                	mov    ecx,edx
c00086d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00086d4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00086d8:	19 f1                	sbb    ecx,esi
c00086da:	73 07                	jae    c00086e3 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00086dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00086df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086e3:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00086e6:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00086e9:	29 f7                	sub    edi,esi
c00086eb:	89 f8                	mov    eax,edi
c00086ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00086f1:	99                   	cdq    
c00086f2:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00086f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086f9:	19 d0                	sbb    eax,edx
c00086fb:	73 07                	jae    c0008704 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00086fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008704:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008707:	89 ea                	mov    edx,ebp
c0008709:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000870d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008712:	74 0d                	je     c0008721 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008714:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008717:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000871b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000871f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008721:	85 d2                	test   edx,edx
c0008723:	74 11                	je     c0008736 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008725:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008729:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000872c:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008730:	89 d1                	mov    ecx,edx
c0008732:	89 c7                	mov    edi,eax
c0008734:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008736:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008739:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000873c:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000873f:	99                   	cdq    
c0008740:	89 f7                	mov    edi,esi
c0008742:	03 04 24             	add    eax,DWORD PTR [esp]
c0008745:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008749:	c1 ff 1f             	sar    edi,0x1f
c000874c:	57                   	push   edi
c000874d:	56                   	push   esi
c000874e:	52                   	push   edx
c000874f:	50                   	push   eax
c0008750:	e8 cb 3b 01 00       	call   c001c320 <__umoddi3>
c0008755:	83 c4 10             	add    esp,0x10
c0008758:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000875b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008760:	75 10                	jne    c0008772 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008762:	83 ec 0c             	sub    esp,0xc
c0008765:	68 06 d9 01 c0       	push   0xc001d906
c000876a:	e8 7c 7f 00 00       	call   c00106eb <KePanic(char const*)>
c000876f:	83 c4 10             	add    esp,0x10
c0008772:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008776:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008779:	89 10                	mov    DWORD PTR [eax],edx
c000877b:	83 c4 1c             	add    esp,0x1c
c000877e:	31 c0                	xor    eax,eax
c0008780:	5b                   	pop    ebx
c0008781:	5e                   	pop    esi
c0008782:	5f                   	pop    edi
c0008783:	5d                   	pop    ebp
c0008784:	c3                   	ret    
c0008785:	90                   	nop

c0008786 <Pipe::Pipe(int)>:
c0008786:	83 ec 0c             	sub    esp,0xc
c0008789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000878d:	83 ec 08             	sub    esp,0x8
c0008790:	6a 00                	push   0x0
c0008792:	50                   	push   eax
c0008793:	e8 ee 0c 00 00       	call   c0009486 <UnixFile::UnixFile(int)>
c0008798:	83 c4 10             	add    esp,0x10
c000879b:	ba 2c d9 01 c0       	mov    edx,0xc001d92c
c00087a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a4:	89 10                	mov    DWORD PTR [eax],edx
c00087a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00087ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00087b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087b5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00087bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087c0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00087c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087cb:	83 ec 0c             	sub    esp,0xc
c00087ce:	50                   	push   eax
c00087cf:	e8 b1 f6 ff ff       	call   c0007e85 <malloc>
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	89 c2                	mov    edx,eax
c00087d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00087e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087e4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00087e8:	90                   	nop
c00087e9:	83 c4 0c             	add    esp,0xc
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <VgaText::isAtty()>:
c00087ee:	b0 01                	mov    al,0x1
c00087f0:	c3                   	ret    
c00087f1:	90                   	nop

c00087f2 <VgaText::~VgaText()>:
c00087f2:	83 ec 0c             	sub    esp,0xc
c00087f5:	ba b4 d9 01 c0       	mov    edx,0xc001d9b4
c00087fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087fe:	89 10                	mov    DWORD PTR [eax],edx
c0008800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008804:	83 ec 0c             	sub    esp,0xc
c0008807:	50                   	push   eax
c0008808:	e8 5b 0e 00 00       	call   c0009668 <UnixFile::~UnixFile()>
c000880d:	83 c4 10             	add    esp,0x10
c0008810:	90                   	nop
c0008811:	83 c4 0c             	add    esp,0xc
c0008814:	c3                   	ret    
c0008815:	90                   	nop

c0008816 <VgaText::~VgaText()>:
c0008816:	83 ec 0c             	sub    esp,0xc
c0008819:	83 ec 0c             	sub    esp,0xc
c000881c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008820:	e8 cd ff ff ff       	call   c00087f2 <VgaText::~VgaText()>
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	83 ec 08             	sub    esp,0x8
c000882b:	68 34 01 00 00       	push   0x134
c0008830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008834:	e8 ed 21 00 00       	call   c000aa26 <operator delete(void*, unsigned long)>
c0008839:	83 c4 10             	add    esp,0x10
c000883c:	83 c4 0c             	add    esp,0xc
c000883f:	c3                   	ret    

c0008840 <VgaText::read(unsigned long long, void*, int*)>:
c0008840:	83 ec 10             	sub    esp,0x10
c0008843:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008847:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000884b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000884f:	e8 22 45 00 00       	call   c000cd76 <readKeyboard(VgaText*, char*, unsigned long)>
c0008854:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008858:	89 02                	mov    DWORD PTR [edx],eax
c000885a:	31 c0                	xor    eax,eax
c000885c:	83 c4 1c             	add    esp,0x1c
c000885f:	c3                   	ret    

c0008860 <setTerminalScrollLock(bool)>:
c0008860:	c3                   	ret    

c0008861 <doTerminalCycle()>:
c0008861:	c3                   	ret    

c0008862 <addToTerminalCycle(VgaText*)>:
c0008862:	c3                   	ret    

c0008863 <scrollTerminalScrollLock(int)>:
c0008863:	c3                   	ret    

c0008864 <VgaText::updateTitle()>:
c0008864:	c3                   	ret    
c0008865:	90                   	nop

c0008866 <VgaText::load()>:
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <VgaText::updateCursor()>:
c0008868:	83 ec 14             	sub    esp,0x14
c000886b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000886f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008872:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008875:	e8 a6 dc 00 00       	call   c0016520 <HalConsoleCursorUpdate(int, int)>
c000887a:	83 c4 1c             	add    esp,0x1c
c000887d:	c3                   	ret    

c000887e <VgaText::doANSI_SGR(int)>:
c000887e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008886:	85 d2                	test   edx,edx
c0008888:	75 0b                	jne    c0008895 <VgaText::doANSI_SGR(int)+0x17>
c000888a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000888d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008890:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008893:	eb 59                	jmp    c00088ee <VgaText::doANSI_SGR(int)+0x70>
c0008895:	83 fa 07             	cmp    edx,0x7
c0008898:	75 0b                	jne    c00088a5 <VgaText::doANSI_SGR(int)+0x27>
c000889a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000889d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00088a0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00088a3:	eb 49                	jmp    c00088ee <VgaText::doANSI_SGR(int)+0x70>
c00088a5:	83 fa 1b             	cmp    edx,0x1b
c00088a8:	74 e0                	je     c000888a <VgaText::doANSI_SGR(int)+0xc>
c00088aa:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00088ad:	83 f9 07             	cmp    ecx,0x7
c00088b0:	77 09                	ja     c00088bb <VgaText::doANSI_SGR(int)+0x3d>
c00088b2:	8b 14 8d 80 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0880]
c00088b9:	eb 20                	jmp    c00088db <VgaText::doANSI_SGR(int)+0x5d>
c00088bb:	8d 4a d8             	lea    ecx,[edx-0x28]
c00088be:	83 f9 07             	cmp    ecx,0x7
c00088c1:	77 09                	ja     c00088cc <VgaText::doANSI_SGR(int)+0x4e>
c00088c3:	8b 14 8d 80 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0880]
c00088ca:	eb 22                	jmp    c00088ee <VgaText::doANSI_SGR(int)+0x70>
c00088cc:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00088cf:	83 f9 07             	cmp    ecx,0x7
c00088d2:	77 0b                	ja     c00088df <VgaText::doANSI_SGR(int)+0x61>
c00088d4:	8b 14 95 38 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09c8]
c00088db:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00088de:	c3                   	ret    
c00088df:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00088e2:	83 f9 07             	cmp    ecx,0x7
c00088e5:	77 0a                	ja     c00088f1 <VgaText::doANSI_SGR(int)+0x73>
c00088e7:	8b 14 95 10 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09f0]
c00088ee:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00088f1:	c3                   	ret    

c00088f2 <VgaText::setDefaultBgColour(VgaColour)>:
c00088f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00088fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00088fd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008900:	c3                   	ret    
c0008901:	90                   	nop

c0008902 <VgaText::setDefaultFgColour(VgaColour)>:
c0008902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000890a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000890d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008910:	c3                   	ret    
c0008911:	90                   	nop

c0008912 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008912:	53                   	push   ebx
c0008913:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008917:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000891b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000891f:	51                   	push   ecx
c0008920:	e8 cd ff ff ff       	call   c00088f2 <VgaText::setDefaultBgColour(VgaColour)>
c0008925:	58                   	pop    eax
c0008926:	5a                   	pop    edx
c0008927:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000892b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000892f:	5b                   	pop    ebx
c0008930:	eb d0                	jmp    c0008902 <VgaText::setDefaultFgColour(VgaColour)>

c0008932 <VgaText::setTitleTextColour(VgaColour)>:
c0008932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008936:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000893a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000893d:	c3                   	ret    

c000893e <VgaText::setTitleColour(VgaColour)>:
c000893e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008942:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008946:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008949:	c3                   	ret    

c000894a <VgaText::setTitle(char*)>:
c000894a:	c3                   	ret    
c000894b:	90                   	nop

c000894c <VgaText::combineColours(unsigned char, unsigned char)>:
c000894c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008950:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008955:	83 e0 0f             	and    eax,0xf
c0008958:	c1 e2 04             	shl    edx,0x4
c000895b:	09 d0                	or     eax,edx
c000895d:	c3                   	ret    

c000895e <VgaText::scrollScreen()>:
c000895e:	55                   	push   ebp
c000895f:	b9 01 00 00 00       	mov    ecx,0x1
c0008964:	57                   	push   edi
c0008965:	56                   	push   esi
c0008966:	53                   	push   ebx
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000896e:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008974:	31 ff                	xor    edi,edi
c0008976:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008979:	83 f9 18             	cmp    ecx,0x18
c000897c:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000897f:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008986:	75 27                	jne    c00089af <VgaText::scrollScreen()+0x51>
c0008988:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000898b:	01 f5                	add    ebp,esi
c000898d:	f7 c7 01 00 00 00    	test   edi,0x1
c0008993:	74 16                	je     c00089ab <VgaText::scrollScreen()+0x4d>
c0008995:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008999:	50                   	push   eax
c000899a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000899e:	50                   	push   eax
c000899f:	e8 a8 ff ff ff       	call   c000894c <VgaText::combineColours(unsigned char, unsigned char)>
c00089a4:	5a                   	pop    edx
c00089a5:	5a                   	pop    edx
c00089a6:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00089a9:	eb 04                	jmp    c00089af <VgaText::scrollScreen()+0x51>
c00089ab:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00089af:	47                   	inc    edi
c00089b0:	46                   	inc    esi
c00089b1:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00089b7:	75 bd                	jne    c0008976 <VgaText::scrollScreen()+0x18>
c00089b9:	41                   	inc    ecx
c00089ba:	83 f9 19             	cmp    ecx,0x19
c00089bd:	75 af                	jne    c000896e <VgaText::scrollScreen()+0x10>
c00089bf:	39 1d 24 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a24,ebx
c00089c5:	75 1f                	jne    c00089e6 <VgaText::scrollScreen()+0x88>
c00089c7:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00089cb:	74 05                	je     c00089d2 <VgaText::scrollScreen()+0x74>
c00089cd:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00089d0:	eb 14                	jmp    c00089e6 <VgaText::scrollScreen()+0x88>
c00089d2:	50                   	push   eax
c00089d3:	50                   	push   eax
c00089d4:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00089d8:	50                   	push   eax
c00089d9:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00089dd:	50                   	push   eax
c00089de:	e8 c9 d9 00 00       	call   c00163ac <HalConsoleScroll(int, int)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00089ea:	83 c4 0c             	add    esp,0xc
c00089ed:	5b                   	pop    ebx
c00089ee:	5e                   	pop    esi
c00089ef:	5f                   	pop    edi
c00089f0:	5d                   	pop    ebp
c00089f1:	e9 72 fe ff ff       	jmp    c0008868 <VgaText::updateCursor()>

c00089f6 <VgaText::combineCharAndColour(char, unsigned char)>:
c00089f6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00089fb:	c1 e0 08             	shl    eax,0x8
c00089fe:	89 c2                	mov    edx,eax
c0008a00:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008a05:	09 d0                	or     eax,edx
c0008a07:	c3                   	ret    

c0008a08 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008a08:	55                   	push   ebp
c0008a09:	57                   	push   edi
c0008a0a:	56                   	push   esi
c0008a0b:	53                   	push   ebx
c0008a0c:	83 ec 1c             	sub    esp,0x1c
c0008a0f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008a13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008a17:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008a1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008a1f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008a23:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008a27:	0f b6 c3             	movzx  eax,bl
c0008a2a:	50                   	push   eax
c0008a2b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008a30:	50                   	push   eax
c0008a31:	e8 16 ff ff ff       	call   c000894c <VgaText::combineColours(unsigned char, unsigned char)>
c0008a36:	5a                   	pop    edx
c0008a37:	0f b6 c0             	movzx  eax,al
c0008a3a:	59                   	pop    ecx
c0008a3b:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008a40:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008a44:	50                   	push   eax
c0008a45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a49:	e8 a8 ff ff ff       	call   c00089f6 <VgaText::combineCharAndColour(char, unsigned char)>
c0008a4e:	5a                   	pop    edx
c0008a4f:	66 6b d7 50          	imul   dx,di,0x50
c0008a53:	59                   	pop    ecx
c0008a54:	01 f2                	add    edx,esi
c0008a56:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008a59:	0f b7 d2             	movzx  edx,dx
c0008a5c:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008a60:	39 2d 24 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a24,ebp
c0008a66:	75 28                	jne    c0008a90 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008a68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a6c:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008a70:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008a74:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008a78:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008a7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a80:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008a84:	83 c4 1c             	add    esp,0x1c
c0008a87:	5b                   	pop    ebx
c0008a88:	5e                   	pop    esi
c0008a89:	5f                   	pop    edi
c0008a8a:	5d                   	pop    ebp
c0008a8b:	e9 24 da 00 00       	jmp    c00164b4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008a90:	83 c4 1c             	add    esp,0x1c
c0008a93:	5b                   	pop    ebx
c0008a94:	5e                   	pop    esi
c0008a95:	5f                   	pop    edi
c0008a96:	5d                   	pop    ebp
c0008a97:	c3                   	ret    

c0008a98 <VgaText::getCursorX()>:
c0008a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008a9f:	c3                   	ret    

c0008aa0 <VgaText::getCursorY()>:
c0008aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008aa4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008aa7:	c3                   	ret    

c0008aa8 <VgaText::setCursor(int, int)>:
c0008aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008aac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ab0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008ab3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ab7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008aba:	e9 a9 fd ff ff       	jmp    c0008868 <VgaText::updateCursor()>

c0008abf <setActiveTerminal(VgaText*)>:
c0008abf:	53                   	push   ebx
c0008ac0:	83 ec 08             	sub    esp,0x8
c0008ac3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ac7:	85 db                	test   ebx,ebx
c0008ac9:	75 11                	jne    c0008adc <setActiveTerminal(VgaText*)+0x1d>
c0008acb:	c7 44 24 10 40 d9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d940
c0008ad3:	83 c4 08             	add    esp,0x8
c0008ad6:	5b                   	pop    ebx
c0008ad7:	e9 0f 7c 00 00       	jmp    c00106eb <KePanic(char const*)>
c0008adc:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c0008ae1:	85 c0                	test   eax,eax
c0008ae3:	74 0c                	je     c0008af1 <setActiveTerminal(VgaText*)+0x32>
c0008ae5:	83 ec 0c             	sub    esp,0xc
c0008ae8:	50                   	push   eax
c0008ae9:	e8 7a fd ff ff       	call   c0008868 <VgaText::updateCursor()>
c0008aee:	83 c4 10             	add    esp,0x10
c0008af1:	89 1d 24 0a 02 c0    	mov    DWORD PTR ds:0xc0020a24,ebx
c0008af7:	50                   	push   eax
c0008af8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008afb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008afe:	53                   	push   ebx
c0008aff:	e8 a4 ff ff ff       	call   c0008aa8 <VgaText::setCursor(int, int)>
c0008b04:	83 c4 18             	add    esp,0x18
c0008b07:	5b                   	pop    ebx
c0008b08:	c3                   	ret    
c0008b09:	90                   	nop

c0008b0a <VgaText::clearScreen()>:
c0008b0a:	57                   	push   edi
c0008b0b:	56                   	push   esi
c0008b0c:	31 f6                	xor    esi,esi
c0008b0e:	53                   	push   ebx
c0008b0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b13:	52                   	push   edx
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	53                   	push   ebx
c0008b19:	e8 8a ff ff ff       	call   c0008aa8 <VgaText::setCursor(int, int)>
c0008b1e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b25:	83 c4 10             	add    esp,0x10
c0008b28:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008b2b:	7e 20                	jle    c0008b4d <VgaText::clearScreen()+0x43>
c0008b2d:	31 ff                	xor    edi,edi
c0008b2f:	50                   	push   eax
c0008b30:	50                   	push   eax
c0008b31:	56                   	push   esi
c0008b32:	57                   	push   edi
c0008b33:	47                   	inc    edi
c0008b34:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b37:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b3a:	6a 20                	push   0x20
c0008b3c:	53                   	push   ebx
c0008b3d:	e8 c6 fe ff ff       	call   c0008a08 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008b42:	83 c4 20             	add    esp,0x20
c0008b45:	83 ff 50             	cmp    edi,0x50
c0008b48:	75 e5                	jne    c0008b2f <VgaText::clearScreen()+0x25>
c0008b4a:	46                   	inc    esi
c0008b4b:	eb db                	jmp    c0008b28 <VgaText::clearScreen()+0x1e>
c0008b4d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008b54:	5b                   	pop    ebx
c0008b55:	5e                   	pop    esi
c0008b56:	5f                   	pop    edi
c0008b57:	c3                   	ret    

c0008b58 <VgaText::setCursorX(int)>:
c0008b58:	83 ec 10             	sub    esp,0x10
c0008b5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b66:	50                   	push   eax
c0008b67:	e8 3c ff ff ff       	call   c0008aa8 <VgaText::setCursor(int, int)>
c0008b6c:	83 c4 1c             	add    esp,0x1c
c0008b6f:	c3                   	ret    

c0008b70 <VgaText::setCursorY(int)>:
c0008b70:	83 ec 10             	sub    esp,0x10
c0008b73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008b7b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008b7e:	50                   	push   eax
c0008b7f:	e8 24 ff ff ff       	call   c0008aa8 <VgaText::setCursor(int, int)>
c0008b84:	83 c4 1c             	add    esp,0x1c
c0008b87:	c3                   	ret    

c0008b88 <VgaText::incrementCursor(bool)>:
c0008b88:	56                   	push   esi
c0008b89:	53                   	push   ebx
c0008b8a:	51                   	push   ecx
c0008b8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b93:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008b96:	40                   	inc    eax
c0008b97:	83 f8 50             	cmp    eax,0x50
c0008b9a:	74 05                	je     c0008ba1 <VgaText::incrementCursor(bool)+0x19>
c0008b9c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008b9f:	eb 24                	jmp    c0008bc5 <VgaText::incrementCursor(bool)+0x3d>
c0008ba1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ba4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008bab:	8d 50 01             	lea    edx,[eax+0x1]
c0008bae:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008bb1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008bb4:	75 0f                	jne    c0008bc5 <VgaText::incrementCursor(bool)+0x3d>
c0008bb6:	83 ec 0c             	sub    esp,0xc
c0008bb9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008bbc:	53                   	push   ebx
c0008bbd:	e8 9c fd ff ff       	call   c000895e <VgaText::scrollScreen()>
c0008bc2:	83 c4 10             	add    esp,0x10
c0008bc5:	89 f0                	mov    eax,esi
c0008bc7:	84 c0                	test   al,al
c0008bc9:	74 0c                	je     c0008bd7 <VgaText::incrementCursor(bool)+0x4f>
c0008bcb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008bcf:	5a                   	pop    edx
c0008bd0:	5b                   	pop    ebx
c0008bd1:	5e                   	pop    esi
c0008bd2:	e9 91 fc ff ff       	jmp    c0008868 <VgaText::updateCursor()>
c0008bd7:	58                   	pop    eax
c0008bd8:	5b                   	pop    ebx
c0008bd9:	5e                   	pop    esi
c0008bda:	c3                   	ret    
c0008bdb:	90                   	nop

c0008bdc <VgaText::decrementCursor(bool)>:
c0008bdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008be0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008be4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008be7:	85 c0                	test   eax,eax
c0008be9:	74 04                	je     c0008bef <VgaText::decrementCursor(bool)+0x13>
c0008beb:	48                   	dec    eax
c0008bec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008bef:	84 c9                	test   cl,cl
c0008bf1:	74 09                	je     c0008bfc <VgaText::decrementCursor(bool)+0x20>
c0008bf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008bf7:	e9 6c fc ff ff       	jmp    c0008868 <VgaText::updateCursor()>
c0008bfc:	c3                   	ret    
c0008bfd:	90                   	nop

c0008bfe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008bfe:	53                   	push   ebx
c0008bff:	83 ec 08             	sub    esp,0x8
c0008c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008c12:	3c 07                	cmp    al,0x7
c0008c14:	75 21                	jne    c0008c37 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008c16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c1e:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008c26:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008c2e:	83 c4 08             	add    esp,0x8
c0008c31:	5b                   	pop    ebx
c0008c32:	e9 3c 2d 00 00       	jmp    c000b973 <Krnl::beep(int, int, bool)>
c0008c37:	3c 0d                	cmp    al,0xd
c0008c39:	75 09                	jne    c0008c44 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008c3b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c42:	eb 2c                	jmp    c0008c70 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008c44:	3c 0a                	cmp    al,0xa
c0008c46:	75 31                	jne    c0008c79 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008c48:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c4b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c52:	8d 50 01             	lea    edx,[eax+0x1]
c0008c55:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c58:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c5b:	75 0f                	jne    c0008c6c <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008c5d:	83 ec 0c             	sub    esp,0xc
c0008c60:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c63:	53                   	push   ebx
c0008c64:	e8 f5 fc ff ff       	call   c000895e <VgaText::scrollScreen()>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c70:	83 c4 08             	add    esp,0x8
c0008c73:	5b                   	pop    ebx
c0008c74:	e9 ef fb ff ff       	jmp    c0008868 <VgaText::updateCursor()>
c0008c79:	3c 08                	cmp    al,0x8
c0008c7b:	75 25                	jne    c0008ca2 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008c7d:	50                   	push   eax
c0008c7e:	50                   	push   eax
c0008c7f:	6a 01                	push   0x1
c0008c81:	53                   	push   ebx
c0008c82:	e8 55 ff ff ff       	call   c0008bdc <VgaText::decrementCursor(bool)>
c0008c87:	5a                   	pop    edx
c0008c88:	59                   	pop    ecx
c0008c89:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c8c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c8f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c95:	6a 20                	push   0x20
c0008c97:	53                   	push   ebx
c0008c98:	e8 6b fd ff ff       	call   c0008a08 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c9d:	83 c4 28             	add    esp,0x28
c0008ca0:	5b                   	pop    ebx
c0008ca1:	c3                   	ret    
c0008ca2:	83 ec 08             	sub    esp,0x8
c0008ca5:	0f be c0             	movsx  eax,al
c0008ca8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008cab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008cae:	51                   	push   ecx
c0008caf:	52                   	push   edx
c0008cb0:	50                   	push   eax
c0008cb1:	53                   	push   ebx
c0008cb2:	e8 51 fd ff ff       	call   c0008a08 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008cb7:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008cbb:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008cc3:	83 c4 28             	add    esp,0x28
c0008cc6:	5b                   	pop    ebx
c0008cc7:	e9 bc fe ff ff       	jmp    c0008b88 <VgaText::incrementCursor(bool)>

c0008ccc <VgaText::putchar(char)>:
c0008ccc:	56                   	push   esi
c0008ccd:	53                   	push   ebx
c0008cce:	83 ec 14             	sub    esp,0x14
c0008cd1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008cd5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008cd9:	3c 5b                	cmp    al,0x5b
c0008cdb:	75 18                	jne    c0008cf5 <VgaText::putchar(char)+0x29>
c0008cdd:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008ce1:	74 1f                	je     c0008d02 <VgaText::putchar(char)+0x36>
c0008ce3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008ce9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008cf0:	e9 bd 00 00 00       	jmp    c0008db2 <VgaText::putchar(char)+0xe6>
c0008cf5:	3c 1b                	cmp    al,0x1b
c0008cf7:	75 09                	jne    c0008d02 <VgaText::putchar(char)+0x36>
c0008cf9:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008cfd:	e9 b0 00 00 00       	jmp    c0008db2 <VgaText::putchar(char)+0xe6>
c0008d02:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008d05:	84 c9                	test   cl,cl
c0008d07:	0f 84 92 00 00 00    	je     c0008d9f <VgaText::putchar(char)+0xd3>
c0008d0d:	8d 50 c0             	lea    edx,[eax-0x40]
c0008d10:	80 fa 3e             	cmp    dl,0x3e
c0008d13:	77 76                	ja     c0008d8b <VgaText::putchar(char)+0xbf>
c0008d15:	3c 6d                	cmp    al,0x6d
c0008d17:	75 47                	jne    c0008d60 <VgaText::putchar(char)+0x94>
c0008d19:	31 f6                	xor    esi,esi
c0008d1b:	31 d2                	xor    edx,edx
c0008d1d:	31 c0                	xor    eax,eax
c0008d1f:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008d22:	7e 2d                	jle    c0008d51 <VgaText::putchar(char)+0x85>
c0008d24:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008d29:	80 fa 3b             	cmp    dl,0x3b
c0008d2c:	75 17                	jne    c0008d45 <VgaText::putchar(char)+0x79>
c0008d2e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008d32:	50                   	push   eax
c0008d33:	53                   	push   ebx
c0008d34:	e8 45 fb ff ff       	call   c000887e <VgaText::doANSI_SGR(int)>
c0008d39:	59                   	pop    ecx
c0008d3a:	31 d2                	xor    edx,edx
c0008d3c:	58                   	pop    eax
c0008d3d:	31 c0                	xor    eax,eax
c0008d3f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008d43:	eb 09                	jmp    c0008d4e <VgaText::putchar(char)+0x82>
c0008d45:	6b c0 0a             	imul   eax,eax,0xa
c0008d48:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008d4c:	88 ca                	mov    dl,cl
c0008d4e:	46                   	inc    esi
c0008d4f:	eb ce                	jmp    c0008d1f <VgaText::putchar(char)+0x53>
c0008d51:	84 d2                	test   dl,dl
c0008d53:	74 2e                	je     c0008d83 <VgaText::putchar(char)+0xb7>
c0008d55:	50                   	push   eax
c0008d56:	53                   	push   ebx
c0008d57:	e8 22 fb ff ff       	call   c000887e <VgaText::doANSI_SGR(int)>
c0008d5c:	58                   	pop    eax
c0008d5d:	5a                   	pop    edx
c0008d5e:	eb 23                	jmp    c0008d83 <VgaText::putchar(char)+0xb7>
c0008d60:	3c 4a                	cmp    al,0x4a
c0008d62:	75 1f                	jne    c0008d83 <VgaText::putchar(char)+0xb7>
c0008d64:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008d68:	75 19                	jne    c0008d83 <VgaText::putchar(char)+0xb7>
c0008d6a:	83 ec 0c             	sub    esp,0xc
c0008d6d:	53                   	push   ebx
c0008d6e:	e8 97 fd ff ff       	call   c0008b0a <VgaText::clearScreen()>
c0008d73:	83 c4 0c             	add    esp,0xc
c0008d76:	6a 00                	push   0x0
c0008d78:	6a 00                	push   0x0
c0008d7a:	53                   	push   ebx
c0008d7b:	e8 28 fd ff ff       	call   c0008aa8 <VgaText::setCursor(int, int)>
c0008d80:	83 c4 10             	add    esp,0x10
c0008d83:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008d89:	eb 27                	jmp    c0008db2 <VgaText::putchar(char)+0xe6>
c0008d8b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008d8e:	83 fa 0e             	cmp    edx,0xe
c0008d91:	7f 1f                	jg     c0008db2 <VgaText::putchar(char)+0xe6>
c0008d93:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008d96:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008d99:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008d9d:	eb 13                	jmp    c0008db2 <VgaText::putchar(char)+0xe6>
c0008d9f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008da2:	0f be c0             	movsx  eax,al
c0008da5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008da8:	50                   	push   eax
c0008da9:	53                   	push   ebx
c0008daa:	e8 4f fe ff ff       	call   c0008bfe <VgaText::putchar(char, VgaColour, VgaColour)>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	83 c4 14             	add    esp,0x14
c0008db5:	5b                   	pop    ebx
c0008db6:	5e                   	pop    esi
c0008db7:	c3                   	ret    

c0008db8 <VgaText::putx(unsigned int)>:
c0008db8:	57                   	push   edi
c0008db9:	b9 11 00 00 00       	mov    ecx,0x11
c0008dbe:	56                   	push   esi
c0008dbf:	be 4e d9 01 c0       	mov    esi,0xc001d94e
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 20             	sub    esp,0x20
c0008dc8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008dcc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008dd0:	fc                   	cld    
c0008dd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008dd3:	be 08 00 00 00       	mov    esi,0x8
c0008dd8:	50                   	push   eax
c0008dd9:	50                   	push   eax
c0008dda:	89 d8                	mov    eax,ebx
c0008ddc:	c1 e3 04             	shl    ebx,0x4
c0008ddf:	c1 e8 1c             	shr    eax,0x1c
c0008de2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008de7:	50                   	push   eax
c0008de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008dec:	e8 db fe ff ff       	call   c0008ccc <VgaText::putchar(char)>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	4e                   	dec    esi
c0008df5:	75 e1                	jne    c0008dd8 <VgaText::putx(unsigned int)+0x20>
c0008df7:	83 c4 20             	add    esp,0x20
c0008dfa:	5b                   	pop    ebx
c0008dfb:	5e                   	pop    esi
c0008dfc:	5f                   	pop    edi
c0008dfd:	c3                   	ret    

c0008dfe <VgaText::puts(char const*)>:
c0008dfe:	53                   	push   ebx
c0008dff:	83 ec 08             	sub    esp,0x8
c0008e02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008e06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008e09:	84 c0                	test   al,al
c0008e0b:	74 12                	je     c0008e1f <VgaText::puts(char const*)+0x21>
c0008e0d:	43                   	inc    ebx
c0008e0e:	51                   	push   ecx
c0008e0f:	51                   	push   ecx
c0008e10:	50                   	push   eax
c0008e11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e15:	e8 b2 fe ff ff       	call   c0008ccc <VgaText::putchar(char)>
c0008e1a:	83 c4 10             	add    esp,0x10
c0008e1d:	eb e7                	jmp    c0008e06 <VgaText::puts(char const*)+0x8>
c0008e1f:	83 c4 08             	add    esp,0x8
c0008e22:	5b                   	pop    ebx
c0008e23:	c3                   	ret    

c0008e24 <VgaText::write(unsigned long long, void*, int*)>:
c0008e24:	55                   	push   ebp
c0008e25:	57                   	push   edi
c0008e26:	56                   	push   esi
c0008e27:	53                   	push   ebx
c0008e28:	83 ec 0c             	sub    esp,0xc
c0008e2b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008e2f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008e33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008e37:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008e3e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008e41:	39 eb                	cmp    ebx,ebp
c0008e43:	74 13                	je     c0008e58 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008e45:	43                   	inc    ebx
c0008e46:	50                   	push   eax
c0008e47:	50                   	push   eax
c0008e48:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008e4c:	50                   	push   eax
c0008e4d:	56                   	push   esi
c0008e4e:	e8 79 fe ff ff       	call   c0008ccc <VgaText::putchar(char)>
c0008e53:	83 c4 10             	add    esp,0x10
c0008e56:	eb e9                	jmp    c0008e41 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008e58:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008e5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e63:	89 38                	mov    DWORD PTR [eax],edi
c0008e65:	83 c4 0c             	add    esp,0xc
c0008e68:	31 c0                	xor    eax,eax
c0008e6a:	5b                   	pop    ebx
c0008e6b:	5e                   	pop    esi
c0008e6c:	5f                   	pop    edi
c0008e6d:	5d                   	pop    ebp
c0008e6e:	c3                   	ret    
c0008e6f:	90                   	nop

c0008e70 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008e70:	55                   	push   ebp
c0008e71:	57                   	push   edi
c0008e72:	56                   	push   esi
c0008e73:	53                   	push   ebx
c0008e74:	83 ec 0c             	sub    esp,0xc
c0008e77:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008e7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008e80:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008e87:	50                   	push   eax
c0008e88:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008e8d:	50                   	push   eax
c0008e8e:	e8 b9 fa ff ff       	call   c000894c <VgaText::combineColours(unsigned char, unsigned char)>
c0008e93:	5a                   	pop    edx
c0008e94:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008e99:	59                   	pop    ecx
c0008e9a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008e9d:	89 c5                	mov    ebp,eax
c0008e9f:	0f b7 f6             	movzx  esi,si
c0008ea2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ea6:	01 f6                	add    esi,esi
c0008ea8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008eab:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008eae:	84 c0                	test   al,al
c0008eb0:	0f 84 f4 00 00 00    	je     c0008faa <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008eb6:	3c 0d                	cmp    al,0xd
c0008eb8:	75 0c                	jne    c0008ec6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008eba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008ec1:	e9 de 00 00 00       	jmp    c0008fa4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008ec6:	3c 0a                	cmp    al,0xa
c0008ec8:	75 45                	jne    c0008f0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008eca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ecd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008ed4:	8d 48 01             	lea    ecx,[eax+0x1]
c0008ed7:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008eda:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008edd:	75 0f                	jne    c0008eee <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008edf:	83 ec 0c             	sub    esp,0xc
c0008ee2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008ee5:	53                   	push   ebx
c0008ee6:	e8 73 fa ff ff       	call   c000895e <VgaText::scrollScreen()>
c0008eeb:	83 c4 10             	add    esp,0x10
c0008eee:	83 ec 0c             	sub    esp,0xc
c0008ef1:	53                   	push   ebx
c0008ef2:	e8 71 f9 ff ff       	call   c0008868 <VgaText::updateCursor()>
c0008ef7:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008efc:	83 c4 10             	add    esp,0x10
c0008eff:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f02:	0f b7 f6             	movzx  esi,si
c0008f05:	01 f6                	add    esi,esi
c0008f07:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f0a:	e9 95 00 00 00       	jmp    c0008fa4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f0f:	3c 08                	cmp    al,0x8
c0008f11:	75 35                	jne    c0008f48 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008f13:	51                   	push   ecx
c0008f14:	51                   	push   ecx
c0008f15:	6a 01                	push   0x1
c0008f17:	53                   	push   ebx
c0008f18:	e8 bf fc ff ff       	call   c0008bdc <VgaText::decrementCursor(bool)>
c0008f1d:	5e                   	pop    esi
c0008f1e:	58                   	pop    eax
c0008f1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008f22:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008f25:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008f28:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008f2b:	6a 20                	push   0x20
c0008f2d:	53                   	push   ebx
c0008f2e:	e8 d5 fa ff ff       	call   c0008a08 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008f33:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f38:	83 c4 20             	add    esp,0x20
c0008f3b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f3e:	0f b7 f6             	movzx  esi,si
c0008f41:	01 f6                	add    esi,esi
c0008f43:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f46:	eb 5c                	jmp    c0008fa4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f48:	52                   	push   edx
c0008f49:	52                   	push   edx
c0008f4a:	89 ea                	mov    edx,ebp
c0008f4c:	0f b6 ca             	movzx  ecx,dl
c0008f4f:	51                   	push   ecx
c0008f50:	50                   	push   eax
c0008f51:	e8 a0 fa ff ff       	call   c00089f6 <VgaText::combineCharAndColour(char, unsigned char)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	66 89 06             	mov    WORD PTR [esi],ax
c0008f5c:	39 1d 24 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a24,ebx
c0008f62:	75 1d                	jne    c0008f81 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008f64:	83 ec 0c             	sub    esp,0xc
c0008f67:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008f6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008f6d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008f71:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008f75:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f78:	50                   	push   eax
c0008f79:	e8 36 d5 00 00       	call   c00164b4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008f7e:	83 c4 20             	add    esp,0x20
c0008f81:	83 c6 02             	add    esi,0x2
c0008f84:	50                   	push   eax
c0008f85:	50                   	push   eax
c0008f86:	6a 00                	push   0x0
c0008f88:	53                   	push   ebx
c0008f89:	e8 fa fb ff ff       	call   c0008b88 <VgaText::incrementCursor(bool)>
c0008f8e:	83 c4 10             	add    esp,0x10
c0008f91:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008f95:	75 0d                	jne    c0008fa4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f97:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f9c:	0f b7 f6             	movzx  esi,si
c0008f9f:	01 f6                	add    esi,esi
c0008fa1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fa4:	47                   	inc    edi
c0008fa5:	e9 01 ff ff ff       	jmp    c0008eab <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008faa:	83 ec 0c             	sub    esp,0xc
c0008fad:	53                   	push   ebx
c0008fae:	e8 b5 f8 ff ff       	call   c0008868 <VgaText::updateCursor()>
c0008fb3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008fba:	83 c4 1c             	add    esp,0x1c
c0008fbd:	5b                   	pop    ebx
c0008fbe:	5e                   	pop    esi
c0008fbf:	5f                   	pop    edi
c0008fc0:	5d                   	pop    ebp
c0008fc1:	c3                   	ret    

c0008fc2 <VgaText::VgaText(char const*)>:
c0008fc2:	56                   	push   esi
c0008fc3:	53                   	push   ebx
c0008fc4:	83 ec 04             	sub    esp,0x4
c0008fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fcb:	83 ec 08             	sub    esp,0x8
c0008fce:	6a 00                	push   0x0
c0008fd0:	50                   	push   eax
c0008fd1:	e8 b0 04 00 00       	call   c0009486 <UnixFile::UnixFile(int)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	ba b4 d9 01 c0       	mov    edx,0xc001d9b4
c0008fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe2:	89 10                	mov    DWORD PTR [eax],edx
c0008fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe8:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff3:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ffe:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0009002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009006:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000900a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000900e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0009015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009019:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0009020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009024:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000902b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000902f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000903a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	6a 01                	push   0x1
c0009046:	e8 7e 08 00 00       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	89 c2                	mov    edx,eax
c0009050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009054:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009057:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000905d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009061:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009064:	89 c6                	mov    esi,eax
c0009066:	e8 f2 f0 ff ff       	call   c000815d <Phys::allocatePage()>
c000906b:	68 05 0c 00 00       	push   0xc05
c0009070:	56                   	push   esi
c0009071:	50                   	push   eax
c0009072:	53                   	push   ebx
c0009073:	e8 e6 0e 00 00       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009078:	83 c4 10             	add    esp,0x10
c000907b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009082:	83 ec 04             	sub    esp,0x4
c0009085:	68 a0 0f 00 00       	push   0xfa0
c000908a:	6a 00                	push   0x0
c000908c:	50                   	push   eax
c000908d:	e8 5e 74 ff ff       	call   c00004f0 <memset>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	83 ec 04             	sub    esp,0x4
c0009098:	6a 00                	push   0x0
c000909a:	6a 07                	push   0x7
c000909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a0:	e8 6d f8 ff ff       	call   c0008912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00090a5:	83 c4 10             	add    esp,0x10
c00090a8:	83 ec 04             	sub    esp,0x4
c00090ab:	6a 00                	push   0x0
c00090ad:	6a 00                	push   0x0
c00090af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090b3:	e8 f0 f9 ff ff       	call   c0008aa8 <VgaText::setCursor(int, int)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	83 ec 0c             	sub    esp,0xc
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	e8 43 fa ff ff       	call   c0008b0a <VgaText::clearScreen()>
c00090c7:	83 c4 10             	add    esp,0x10
c00090ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ce:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	05 82 00 00 00       	add    eax,0x82
c00090db:	83 ec 04             	sub    esp,0x4
c00090de:	6a 30                	push   0x30
c00090e0:	6a 00                	push   0x0
c00090e2:	50                   	push   eax
c00090e3:	e8 08 74 ff ff       	call   c00004f0 <memset>
c00090e8:	83 c4 10             	add    esp,0x10
c00090eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ef:	05 b2 00 00 00       	add    eax,0xb2
c00090f4:	83 ec 04             	sub    esp,0x4
c00090f7:	68 80 00 00 00       	push   0x80
c00090fc:	6a 00                	push   0x0
c00090fe:	50                   	push   eax
c00090ff:	e8 ec 73 ff ff       	call   c00004f0 <memset>
c0009104:	83 c4 10             	add    esp,0x10
c0009107:	90                   	nop
c0009108:	83 c4 04             	add    esp,0x4
c000910b:	5b                   	pop    ebx
c000910c:	5e                   	pop    esi
c000910d:	c3                   	ret    

c000910e <VgaText::receiveKey(unsigned char)>:
c000910e:	57                   	push   edi
c000910f:	56                   	push   esi
c0009110:	53                   	push   ebx
c0009111:	83 ec 10             	sub    esp,0x10
c0009114:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0009118:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000911c:	84 db                	test   bl,bl
c000911e:	0f 84 ba 00 00 00    	je     c00091de <VgaText::receiveKey(unsigned char)+0xd0>
c0009124:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c000912a:	80 fb 08             	cmp    bl,0x8
c000912d:	75 2c                	jne    c000915b <VgaText::receiveKey(unsigned char)+0x4d>
c000912f:	83 ec 0c             	sub    esp,0xc
c0009132:	57                   	push   edi
c0009133:	e8 28 74 ff ff       	call   c0000560 <strlen>
c0009138:	83 c4 10             	add    esp,0x10
c000913b:	85 c0                	test   eax,eax
c000913d:	74 41                	je     c0009180 <VgaText::receiveKey(unsigned char)+0x72>
c000913f:	50                   	push   eax
c0009140:	50                   	push   eax
c0009141:	6a 08                	push   0x8
c0009143:	56                   	push   esi
c0009144:	e8 83 fb ff ff       	call   c0008ccc <VgaText::putchar(char)>
c0009149:	89 3c 24             	mov    DWORD PTR [esp],edi
c000914c:	e8 0f 74 ff ff       	call   c0000560 <strlen>
c0009151:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009159:	eb 22                	jmp    c000917d <VgaText::receiveKey(unsigned char)+0x6f>
c000915b:	0f be c3             	movsx  eax,bl
c000915e:	52                   	push   edx
c000915f:	52                   	push   edx
c0009160:	50                   	push   eax
c0009161:	56                   	push   esi
c0009162:	e8 65 fb ff ff       	call   c0008ccc <VgaText::putchar(char)>
c0009167:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000916b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0009170:	59                   	pop    ecx
c0009171:	58                   	pop    eax
c0009172:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009176:	50                   	push   eax
c0009177:	57                   	push   edi
c0009178:	e8 63 76 ff ff       	call   c00007e0 <strcat>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009187:	75 05                	jne    c000918e <VgaText::receiveKey(unsigned char)+0x80>
c0009189:	80 fb 0a             	cmp    bl,0xa
c000918c:	75 50                	jne    c00091de <VgaText::receiveKey(unsigned char)+0xd0>
c000918e:	83 ec 0c             	sub    esp,0xc
c0009191:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009197:	56                   	push   esi
c0009198:	e8 c3 73 ff ff       	call   c0000560 <strlen>
c000919d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00091a0:	89 c3                	mov    ebx,eax
c00091a2:	e8 b9 73 ff ff       	call   c0000560 <strlen>
c00091a7:	83 c4 10             	add    esp,0x10
c00091aa:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c00091ae:	3d 80 00 00 00       	cmp    eax,0x80
c00091b3:	76 10                	jbe    c00091c5 <VgaText::receiveKey(unsigned char)+0xb7>
c00091b5:	83 ec 0c             	sub    esp,0xc
c00091b8:	68 5f d9 01 c0       	push   0xc001d95f
c00091bd:	e8 29 75 00 00       	call   c00106eb <KePanic(char const*)>
c00091c2:	83 c4 10             	add    esp,0x10
c00091c5:	50                   	push   eax
c00091c6:	50                   	push   eax
c00091c7:	57                   	push   edi
c00091c8:	56                   	push   esi
c00091c9:	e8 12 76 ff ff       	call   c00007e0 <strcat>
c00091ce:	83 c4 0c             	add    esp,0xc
c00091d1:	6a 30                	push   0x30
c00091d3:	6a 00                	push   0x0
c00091d5:	57                   	push   edi
c00091d6:	e8 15 73 ff ff       	call   c00004f0 <memset>
c00091db:	83 c4 10             	add    esp,0x10
c00091de:	83 c4 10             	add    esp,0x10
c00091e1:	5b                   	pop    ebx
c00091e2:	5e                   	pop    esi
c00091e3:	5f                   	pop    edi
c00091e4:	c3                   	ret    
c00091e5:	90                   	nop

c00091e6 <VgaText::doUpdate()>:
c00091e6:	c3                   	ret    

c00091e7 <newTerminal(char*)>:
c00091e7:	83 ec 28             	sub    esp,0x28
c00091ea:	68 34 01 00 00       	push   0x134
c00091ef:	e8 91 ec ff ff       	call   c0007e85 <malloc>
c00091f4:	5a                   	pop    edx
c00091f5:	59                   	pop    ecx
c00091f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00091fa:	50                   	push   eax
c00091fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091ff:	e8 be fd ff ff       	call   c0008fc2 <VgaText::VgaText(char const*)>
c0009204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009208:	83 c4 2c             	add    esp,0x2c
c000920b:	c3                   	ret    

c000920c <TSS::TSS()>:
c000920c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009210:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009217:	90                   	nop
c0009218:	c3                   	ret    
c0009219:	90                   	nop
c000921a:	66 90                	xchg   ax,ax

c000921c <TSS::setESP(unsigned long)>:
c000921c:	55                   	push   ebp
c000921d:	89 e5                	mov    ebp,esp
c000921f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009225:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009228:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000922b:	90                   	nop
c000922c:	5d                   	pop    ebp
c000922d:	c3                   	ret    
c000922e:	66 90                	xchg   ax,ax

c0009230 <TSS::flush()>:
c0009230:	55                   	push   ebp
c0009231:	89 e5                	mov    ebp,esp
c0009233:	83 ec 10             	sub    esp,0x10
c0009236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009239:	8b 00                	mov    eax,DWORD PTR [eax]
c000923b:	83 c8 03             	or     eax,0x3
c000923e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0009242:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0009246:	66 89 d0             	mov    ax,dx
c0009249:	0f 00 d8             	ltr    ax
c000924c:	90                   	nop
c000924d:	c9                   	leave  
c000924e:	c3                   	ret    
c000924f:	90                   	nop

c0009250 <TSS::setup(unsigned long, unsigned long)>:
c0009250:	55                   	push   ebp
c0009251:	89 e5                	mov    ebp,esp
c0009253:	83 ec 18             	sub    esp,0x18
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	6a 68                	push   0x68
c000925b:	e8 25 ec ff ff       	call   c0007e85 <malloc>
c0009260:	83 c4 10             	add    esp,0x10
c0009263:	89 c2                	mov    edx,eax
c0009265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009268:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000926b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000926e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009271:	83 ec 04             	sub    esp,0x4
c0009274:	6a 68                	push   0x68
c0009276:	6a 00                	push   0x0
c0009278:	50                   	push   eax
c0009279:	e8 72 72 ff ff       	call   c00004f0 <memset>
c000927e:	83 c4 10             	add    esp,0x10
c0009281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009287:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000928d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009293:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000929c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000929f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092a2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092ab:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00092b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092b7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00092bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092c3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00092c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092cf:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00092d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092db:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00092e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092e7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00092ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092f3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00092f6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00092f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009302:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000930b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009315:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009318:	0f 20 da             	mov    edx,cr3
c000931b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000931e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009321:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009327:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000932a:	83 ec 08             	sub    esp,0x8
c000932d:	50                   	push   eax
c000932e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009331:	50                   	push   eax
c0009332:	e8 d5 e3 ff ff       	call   c000770c <GDTEntry::setBase(unsigned int)>
c0009337:	83 c4 10             	add    esp,0x10
c000933a:	83 ec 08             	sub    esp,0x8
c000933d:	6a 68                	push   0x68
c000933f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009342:	50                   	push   eax
c0009343:	e8 e0 e3 ff ff       	call   c0007728 <GDTEntry::setLimit(unsigned int)>
c0009348:	83 c4 10             	add    esp,0x10
c000934b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000934f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009352:	83 e0 0f             	and    eax,0xf
c0009355:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009358:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000935b:	83 c8 40             	or     eax,0x40
c000935e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009361:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0009366:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000936c:	05 78 01 00 00       	add    eax,0x178
c0009371:	83 ec 04             	sub    esp,0x4
c0009374:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009377:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000937a:	50                   	push   eax
c000937b:	e8 dc e3 ff ff       	call   c000775c <GDT::addEntry(GDTEntry)>
c0009380:	83 c4 10             	add    esp,0x10
c0009383:	89 c2                	mov    edx,eax
c0009385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009388:	89 10                	mov    DWORD PTR [eax],edx
c000938a:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000938f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009395:	05 78 01 00 00       	add    eax,0x178
c000939a:	83 ec 0c             	sub    esp,0xc
c000939d:	50                   	push   eax
c000939e:	e8 e3 e3 ff ff       	call   c0007786 <GDT::flush()>
c00093a3:	83 c4 10             	add    esp,0x10
c00093a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00093ab:	c9                   	leave  
c00093ac:	c3                   	ret    
c00093ad:	90                   	nop

c00093ae <ReservedFilename::read(unsigned long long, void*, int*)>:
c00093ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00093be:	75 08                	jne    c00093c8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00093c0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00093c6:	eb 38                	jmp    c0009400 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00093c8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00093cd:	75 17                	jne    c00093e6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00093cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00093d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00093d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00093dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00093df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00093e3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00093e6:	89 c1                	mov    ecx,eax
c00093e8:	83 e1 fd             	and    ecx,0xfffffffd
c00093eb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00093f1:	74 cd                	je     c00093c0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00093f3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00093f8:	83 e0 ef             	and    eax,0xffffffef
c00093fb:	83 f8 08             	cmp    eax,0x8
c00093fe:	76 c0                	jbe    c00093c0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009400:	31 c0                	xor    eax,eax
c0009402:	c3                   	ret    
c0009403:	90                   	nop

c0009404 <ReservedFilename::isAtty()>:
c0009404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009408:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000940b:	31 c0                	xor    eax,eax
c000940d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009413:	74 09                	je     c000941e <ReservedFilename::isAtty()+0x1a>
c0009415:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000941b:	0f 94 c0             	sete   al
c000941e:	c3                   	ret    
c000941f:	90                   	nop

c0009420 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009424:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000942b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000942f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009434:	75 08                	jne    c000943e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009436:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000943c:	eb 3d                	jmp    c000947b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000943e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009443:	75 17                	jne    c000945c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009445:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000944a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000944d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009453:	8b 10                	mov    edx,DWORD PTR [eax]
c0009455:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009459:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000945c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009461:	75 04                	jne    c0009467 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009463:	89 0a                	mov    DWORD PTR [edx],ecx
c0009465:	eb 14                	jmp    c000947b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009467:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000946c:	74 c8                	je     c0009436 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000946e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009473:	83 e0 ef             	and    eax,0xffffffef
c0009476:	83 f8 08             	cmp    eax,0x8
c0009479:	76 bb                	jbe    c0009436 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000947b:	31 c0                	xor    eax,eax
c000947d:	c3                   	ret    

c000947e <UnixFile::getFileDescriptor()>:
c000947e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009485:	c3                   	ret    

c0009486 <UnixFile::UnixFile(int)>:
c0009486:	53                   	push   ebx
c0009487:	83 ec 28             	sub    esp,0x28
c000948a:	ba 7c da 01 c0       	mov    edx,0xc001da7c
c000948f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009493:	89 10                	mov    DWORD PTR [eax],edx
c0009495:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000949d:	0f 8f 8c 01 00 00    	jg     c000962f <UnixFile::UnixFile(int)+0x1a9>
c00094a3:	a1 c0 f7 01 c0       	mov    eax,ds:0xc001f7c0
c00094a8:	8d 50 01             	lea    edx,[eax+0x1]
c00094ab:	89 15 c0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c0,edx
c00094b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00094b5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00094b8:	83 ec 08             	sub    esp,0x8
c00094bb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00094bf:	68 b8 0a 02 c0       	push   0xc0020ab8
c00094c4:	e8 3f 30 01 00       	call   c001c508 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00094c9:	83 c4 10             	add    esp,0x10
c00094cc:	a0 b4 0a 02 c0       	mov    al,ds:0xc0020ab4
c00094d1:	83 f0 01             	xor    eax,0x1
c00094d4:	84 c0                	test   al,al
c00094d6:	0f 84 54 01 00 00    	je     c0009630 <UnixFile::UnixFile(int)+0x1aa>
c00094dc:	c6 05 b4 0a 02 c0 01 	mov    BYTE PTR ds:0xc0020ab4,0x1
c00094e3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00094eb:	83 ec 0c             	sub    esp,0xc
c00094ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00094f2:	e8 8e e9 ff ff       	call   c0007e85 <malloc>
c00094f7:	83 c4 10             	add    esp,0x10
c00094fa:	89 c3                	mov    ebx,eax
c00094fc:	83 ec 08             	sub    esp,0x8
c00094ff:	68 03 ff ff 0f       	push   0xfffff03
c0009504:	53                   	push   ebx
c0009505:	e8 2c 01 00 00       	call   c0009636 <ReservedFilename::ReservedFilename(int)>
c000950a:	83 c4 10             	add    esp,0x10
c000950d:	89 1d ac 0a 02 c0    	mov    DWORD PTR ds:0xc0020aac,ebx
c0009513:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000951b:	83 ec 0c             	sub    esp,0xc
c000951e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009522:	e8 5e e9 ff ff       	call   c0007e85 <malloc>
c0009527:	83 c4 10             	add    esp,0x10
c000952a:	89 c3                	mov    ebx,eax
c000952c:	83 ec 08             	sub    esp,0x8
c000952f:	68 01 ff ff 0f       	push   0xfffff01
c0009534:	53                   	push   ebx
c0009535:	e8 fc 00 00 00       	call   c0009636 <ReservedFilename::ReservedFilename(int)>
c000953a:	83 c4 10             	add    esp,0x10
c000953d:	89 1d b0 0a 02 c0    	mov    DWORD PTR ds:0xc0020ab0,ebx
c0009543:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000954b:	83 ec 0c             	sub    esp,0xc
c000954e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009552:	e8 2e e9 ff ff       	call   c0007e85 <malloc>
c0009557:	83 c4 10             	add    esp,0x10
c000955a:	89 c3                	mov    ebx,eax
c000955c:	83 ec 08             	sub    esp,0x8
c000955f:	68 00 ff ff 0f       	push   0xfffff00
c0009564:	53                   	push   ebx
c0009565:	e8 cc 00 00 00       	call   c0009636 <ReservedFilename::ReservedFilename(int)>
c000956a:	83 c4 10             	add    esp,0x10
c000956d:	89 1d a4 0a 02 c0    	mov    DWORD PTR ds:0xc0020aa4,ebx
c0009573:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000957b:	83 ec 0c             	sub    esp,0xc
c000957e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009582:	e8 fe e8 ff ff       	call   c0007e85 <malloc>
c0009587:	83 c4 10             	add    esp,0x10
c000958a:	89 c3                	mov    ebx,eax
c000958c:	83 ec 08             	sub    esp,0x8
c000958f:	68 02 ff ff 0f       	push   0xfffff02
c0009594:	53                   	push   ebx
c0009595:	e8 9c 00 00 00       	call   c0009636 <ReservedFilename::ReservedFilename(int)>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 1d a8 0a 02 c0    	mov    DWORD PTR ds:0xc0020aa8,ebx
c00095a3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00095ab:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00095b0:	7f 7e                	jg     c0009630 <UnixFile::UnixFile(int)+0x1aa>
c00095b2:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00095ba:	83 ec 0c             	sub    esp,0xc
c00095bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00095c1:	e8 bf e8 ff ff       	call   c0007e85 <malloc>
c00095c6:	83 c4 10             	add    esp,0x10
c00095c9:	89 c3                	mov    ebx,eax
c00095cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095cf:	05 10 ff ff 0f       	add    eax,0xfffff10
c00095d4:	83 ec 08             	sub    esp,0x8
c00095d7:	50                   	push   eax
c00095d8:	53                   	push   ebx
c00095d9:	e8 58 00 00 00       	call   c0009636 <ReservedFilename::ReservedFilename(int)>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095e5:	89 1c 85 80 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf580],ebx
c00095ec:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00095f4:	83 ec 0c             	sub    esp,0xc
c00095f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00095fb:	e8 85 e8 ff ff       	call   c0007e85 <malloc>
c0009600:	83 c4 10             	add    esp,0x10
c0009603:	89 c3                	mov    ebx,eax
c0009605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009609:	05 20 ff ff 0f       	add    eax,0xfffff20
c000960e:	83 ec 08             	sub    esp,0x8
c0009611:	50                   	push   eax
c0009612:	53                   	push   ebx
c0009613:	e8 1e 00 00 00       	call   c0009636 <ReservedFilename::ReservedFilename(int)>
c0009618:	83 c4 10             	add    esp,0x10
c000961b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000961f:	89 1c 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],ebx
c0009626:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000962a:	e9 7c ff ff ff       	jmp    c00095ab <UnixFile::UnixFile(int)+0x125>
c000962f:	90                   	nop
c0009630:	83 c4 28             	add    esp,0x28
c0009633:	5b                   	pop    ebx
c0009634:	c3                   	ret    
c0009635:	90                   	nop

c0009636 <ReservedFilename::ReservedFilename(int)>:
c0009636:	83 ec 0c             	sub    esp,0xc
c0009639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963d:	83 ec 08             	sub    esp,0x8
c0009640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009644:	50                   	push   eax
c0009645:	e8 3c fe ff ff       	call   c0009486 <UnixFile::UnixFile(int)>
c000964a:	83 c4 10             	add    esp,0x10
c000964d:	ba 98 da 01 c0       	mov    edx,0xc001da98
c0009652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009656:	89 10                	mov    DWORD PTR [eax],edx
c0009658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000965c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009660:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009663:	90                   	nop
c0009664:	83 c4 0c             	add    esp,0xc
c0009667:	c3                   	ret    

c0009668 <UnixFile::~UnixFile()>:
c0009668:	83 ec 1c             	sub    esp,0x1c
c000966b:	ba 7c da 01 c0       	mov    edx,0xc001da7c
c0009670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009674:	89 10                	mov    DWORD PTR [eax],edx
c0009676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000967a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000967d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009682:	7f 73                	jg     c00096f7 <UnixFile::~UnixFile()+0x8f>
c0009684:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000968c:	83 ec 0c             	sub    esp,0xc
c000968f:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009694:	e8 43 2f 01 00       	call   c001c5dc <LinkedList<UnixFile>::getFirstElement()>
c0009699:	83 c4 10             	add    esp,0x10
c000969c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	68 b8 0a 02 c0       	push   0xc0020ab8
c00096a8:	e8 37 2f 01 00       	call   c001c5e4 <LinkedList<UnixFile>::removeFirst()>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096b4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00096b8:	74 40                	je     c00096fa <UnixFile::~UnixFile()+0x92>
c00096ba:	83 ec 08             	sub    esp,0x8
c00096bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096c1:	68 b8 0a 02 c0       	push   0xc0020ab8
c00096c6:	e8 3d 2e 01 00       	call   c001c508 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00096cb:	83 c4 10             	add    esp,0x10
c00096ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096d2:	8d 50 01             	lea    edx,[eax+0x1]
c00096d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096d9:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00096de:	0f 94 c0             	sete   al
c00096e1:	84 c0                	test   al,al
c00096e3:	74 a7                	je     c000968c <UnixFile::~UnixFile()+0x24>
c00096e5:	83 ec 0c             	sub    esp,0xc
c00096e8:	68 54 da 01 c0       	push   0xc001da54
c00096ed:	e8 f9 6f 00 00       	call   c00106eb <KePanic(char const*)>
c00096f2:	83 c4 10             	add    esp,0x10
c00096f5:	eb 95                	jmp    c000968c <UnixFile::~UnixFile()+0x24>
c00096f7:	90                   	nop
c00096f8:	eb 01                	jmp    c00096fb <UnixFile::~UnixFile()+0x93>
c00096fa:	90                   	nop
c00096fb:	90                   	nop
c00096fc:	83 c4 1c             	add    esp,0x1c
c00096ff:	c3                   	ret    

c0009700 <UnixFile::~UnixFile()>:
c0009700:	83 ec 0c             	sub    esp,0xc
c0009703:	83 ec 0c             	sub    esp,0xc
c0009706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000970a:	e8 59 ff ff ff       	call   c0009668 <UnixFile::~UnixFile()>
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	83 ec 08             	sub    esp,0x8
c0009715:	6a 0c                	push   0xc
c0009717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000971b:	e8 06 13 00 00       	call   c000aa26 <operator delete(void*, unsigned long)>
c0009720:	83 c4 10             	add    esp,0x10
c0009723:	83 c4 0c             	add    esp,0xc
c0009726:	c3                   	ret    
c0009727:	90                   	nop

c0009728 <ReservedFilename::~ReservedFilename()>:
c0009728:	83 ec 0c             	sub    esp,0xc
c000972b:	ba 98 da 01 c0       	mov    edx,0xc001da98
c0009730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009734:	89 10                	mov    DWORD PTR [eax],edx
c0009736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000973a:	83 ec 0c             	sub    esp,0xc
c000973d:	50                   	push   eax
c000973e:	e8 25 ff ff ff       	call   c0009668 <UnixFile::~UnixFile()>
c0009743:	83 c4 10             	add    esp,0x10
c0009746:	90                   	nop
c0009747:	83 c4 0c             	add    esp,0xc
c000974a:	c3                   	ret    
c000974b:	90                   	nop

c000974c <ReservedFilename::~ReservedFilename()>:
c000974c:	83 ec 0c             	sub    esp,0xc
c000974f:	83 ec 0c             	sub    esp,0xc
c0009752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009756:	e8 cd ff ff ff       	call   c0009728 <ReservedFilename::~ReservedFilename()>
c000975b:	83 c4 10             	add    esp,0x10
c000975e:	83 ec 08             	sub    esp,0x8
c0009761:	6a 0c                	push   0xc
c0009763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009767:	e8 ba 12 00 00       	call   c000aa26 <operator delete(void*, unsigned long)>
c000976c:	83 c4 10             	add    esp,0x10
c000976f:	83 c4 0c             	add    esp,0xc
c0009772:	c3                   	ret    

c0009773 <getFromFileDescriptor(int)>:
c0009773:	53                   	push   ebx
c0009774:	83 ec 08             	sub    esp,0x8
c0009777:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000977b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009781:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009787:	7f 2c                	jg     c00097b5 <getFromFileDescriptor(int)+0x42>
c0009789:	83 ec 0c             	sub    esp,0xc
c000978c:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009791:	e8 46 2e 01 00       	call   c001c5dc <LinkedList<UnixFile>::getFirstElement()>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	85 c0                	test   eax,eax
c000979b:	75 04                	jne    c00097a1 <getFromFileDescriptor(int)+0x2e>
c000979d:	31 c0                	xor    eax,eax
c000979f:	eb 6e                	jmp    c000980f <getFromFileDescriptor(int)+0x9c>
c00097a1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00097a4:	74 69                	je     c000980f <getFromFileDescriptor(int)+0x9c>
c00097a6:	52                   	push   edx
c00097a7:	52                   	push   edx
c00097a8:	50                   	push   eax
c00097a9:	68 b8 0a 02 c0       	push   0xc0020ab8
c00097ae:	e8 d3 2e 01 00       	call   c001c686 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00097b3:	eb e1                	jmp    c0009796 <getFromFileDescriptor(int)+0x23>
c00097b5:	a1 ac 0a 02 c0       	mov    eax,ds:0xc0020aac
c00097ba:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00097c0:	74 4d                	je     c000980f <getFromFileDescriptor(int)+0x9c>
c00097c2:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c00097c7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00097cd:	74 40                	je     c000980f <getFromFileDescriptor(int)+0x9c>
c00097cf:	a1 a8 0a 02 c0       	mov    eax,ds:0xc0020aa8
c00097d4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00097da:	74 33                	je     c000980f <getFromFileDescriptor(int)+0x9c>
c00097dc:	a1 a4 0a 02 c0       	mov    eax,ds:0xc0020aa4
c00097e1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00097e7:	74 26                	je     c000980f <getFromFileDescriptor(int)+0x9c>
c00097e9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00097ef:	83 f8 08             	cmp    eax,0x8
c00097f2:	77 09                	ja     c00097fd <getFromFileDescriptor(int)+0x8a>
c00097f4:	8b 04 85 80 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf580]
c00097fb:	eb 12                	jmp    c000980f <getFromFileDescriptor(int)+0x9c>
c00097fd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009803:	83 fb 08             	cmp    ebx,0x8
c0009806:	77 95                	ja     c000979d <getFromFileDescriptor(int)+0x2a>
c0009808:	8b 04 9d 40 0a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf5c0]
c000980f:	83 c4 08             	add    esp,0x8
c0009812:	5b                   	pop    ebx
c0009813:	c3                   	ret    

c0009814 <__static_initialization_and_destruction_0(int, int)>:
c0009814:	83 ec 0c             	sub    esp,0xc
c0009817:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000981c:	75 34                	jne    c0009852 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000981e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009826:	75 2a                	jne    c0009852 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009828:	83 ec 0c             	sub    esp,0xc
c000982b:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009830:	e8 91 2c 01 00       	call   c001c4c6 <LinkedList<UnixFile>::LinkedList()>
c0009835:	83 c4 10             	add    esp,0x10
c0009838:	83 ec 04             	sub    esp,0x4
c000983b:	68 54 f7 01 c0       	push   0xc001f754
c0009840:	68 b8 0a 02 c0       	push   0xc0020ab8
c0009845:	68 c4 c4 01 c0       	push   0xc001c4c4
c000984a:	e8 87 11 00 00       	call   c000a9d6 <__cxa_atexit>
c000984f:	83 c4 10             	add    esp,0x10
c0009852:	90                   	nop
c0009853:	83 c4 0c             	add    esp,0xc
c0009856:	c3                   	ret    

c0009857 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009857:	83 ec 0c             	sub    esp,0xc
c000985a:	83 ec 08             	sub    esp,0x8
c000985d:	68 ff ff 00 00       	push   0xffff
c0009862:	6a 01                	push   0x1
c0009864:	e8 ab ff ff ff       	call   c0009814 <__static_initialization_and_destruction_0(int, int)>
c0009869:	83 c4 10             	add    esp,0x10
c000986c:	83 c4 0c             	add    esp,0xc
c000986f:	c3                   	ret    

c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009870:	53                   	push   ebx
c0009871:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009875:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009879:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000987f:	89 c8                	mov    eax,ecx
c0009881:	d1 e8                	shr    eax,1
c0009883:	03 05 c8 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7c8
c0009889:	83 e1 01             	and    ecx,0x1
c000988c:	8a 10                	mov    dl,BYTE PTR [eax]
c000988e:	75 09                	jne    c0009899 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009890:	83 e2 f0             	and    edx,0xfffffff0
c0009893:	09 da                	or     edx,ebx
c0009895:	88 10                	mov    BYTE PTR [eax],dl
c0009897:	5b                   	pop    ebx
c0009898:	c3                   	ret    
c0009899:	c1 e3 04             	shl    ebx,0x4
c000989c:	83 e2 0f             	and    edx,0xf
c000989f:	09 da                	or     edx,ebx
c00098a1:	88 10                	mov    BYTE PTR [eax],dl
c00098a3:	5b                   	pop    ebx
c00098a4:	c3                   	ret    

c00098a5 <Virt::getPageState(unsigned long)>:
c00098a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a9:	8b 0d c8 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7c8
c00098af:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00098b5:	89 d0                	mov    eax,edx
c00098b7:	d1 e8                	shr    eax,1
c00098b9:	83 e2 01             	and    edx,0x1
c00098bc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00098bf:	75 04                	jne    c00098c5 <Virt::getPageState(unsigned long)+0x20>
c00098c1:	83 e0 0f             	and    eax,0xf
c00098c4:	c3                   	ret    
c00098c5:	c0 e8 04             	shr    al,0x4
c00098c8:	c3                   	ret    

c00098c9 <Virt::allocateKernelVirtualPages(int)>:
c00098c9:	55                   	push   ebp
c00098ca:	31 ed                	xor    ebp,ebp
c00098cc:	57                   	push   edi
c00098cd:	56                   	push   esi
c00098ce:	53                   	push   ebx
c00098cf:	31 db                	xor    ebx,ebx
c00098d1:	83 ec 1c             	sub    esp,0x1c
c00098d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00098d8:	8b 3d c4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7c4
c00098de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00098e3:	57                   	push   edi
c00098e4:	e8 bc ff ff ff       	call   c00098a5 <Virt::getPageState(unsigned long)>
c00098e9:	5a                   	pop    edx
c00098ea:	84 c0                	test   al,al
c00098ec:	75 3a                	jne    c0009928 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00098ee:	85 db                	test   ebx,ebx
c00098f0:	75 02                	jne    c00098f4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00098f2:	89 fd                	mov    ebp,edi
c00098f4:	43                   	inc    ebx
c00098f5:	39 f3                	cmp    ebx,esi
c00098f7:	74 5a                	je     c0009953 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00098f9:	47                   	inc    edi
c00098fa:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009900:	76 31                	jbe    c0009933 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009902:	c7 05 c4 f7 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f7c4,0xc8000
c000990c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009911:	75 28                	jne    c000993b <Virt::allocateKernelVirtualPages(int)+0x72>
c0009913:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009918:	bf 00 80 0c 00       	mov    edi,0xc8000
c000991d:	57                   	push   edi
c000991e:	e8 82 ff ff ff       	call   c00098a5 <Virt::getPageState(unsigned long)>
c0009923:	5a                   	pop    edx
c0009924:	84 c0                	test   al,al
c0009926:	74 c6                	je     c00098ee <Virt::allocateKernelVirtualPages(int)+0x25>
c0009928:	31 db                	xor    ebx,ebx
c000992a:	47                   	inc    edi
c000992b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009931:	77 cf                	ja     c0009902 <Virt::allocateKernelVirtualPages(int)+0x39>
c0009933:	89 3d c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,edi
c0009939:	eb a8                	jmp    c00098e3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000993b:	83 ec 0c             	sub    esp,0xc
c000993e:	68 ac da 01 c0       	push   0xc001daac
c0009943:	e8 a3 6d 00 00       	call   c00106eb <KePanic(char const*)>
c0009948:	8b 3d c4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7c4
c000994e:	83 c4 10             	add    esp,0x10
c0009951:	eb 90                	jmp    c00098e3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009953:	89 2d c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,ebp
c0009959:	4b                   	dec    ebx
c000995a:	74 5f                	je     c00099bb <Virt::allocateKernelVirtualPages(int)+0xf2>
c000995c:	85 f6                	test   esi,esi
c000995e:	74 3d                	je     c000999d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009960:	89 e8                	mov    eax,ebp
c0009962:	31 db                	xor    ebx,ebx
c0009964:	8d 7e ff             	lea    edi,[esi-0x1]
c0009967:	eb 14                	jmp    c000997d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009969:	6a 01                	push   0x1
c000996b:	43                   	inc    ebx
c000996c:	50                   	push   eax
c000996d:	e8 fe fe ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009972:	58                   	pop    eax
c0009973:	39 f3                	cmp    ebx,esi
c0009975:	5a                   	pop    edx
c0009976:	74 25                	je     c000999d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009978:	a1 c4 f7 01 c0       	mov    eax,ds:0xc001f7c4
c000997d:	8d 50 01             	lea    edx,[eax+0x1]
c0009980:	85 db                	test   ebx,ebx
c0009982:	89 15 c4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7c4,edx
c0009988:	74 20                	je     c00099aa <Virt::allocateKernelVirtualPages(int)+0xe1>
c000998a:	39 df                	cmp    edi,ebx
c000998c:	75 db                	jne    c0009969 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000998e:	6a 03                	push   0x3
c0009990:	43                   	inc    ebx
c0009991:	50                   	push   eax
c0009992:	e8 d9 fe ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009997:	59                   	pop    ecx
c0009998:	39 f3                	cmp    ebx,esi
c000999a:	58                   	pop    eax
c000999b:	75 db                	jne    c0009978 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000999d:	83 c4 1c             	add    esp,0x1c
c00099a0:	89 e8                	mov    eax,ebp
c00099a2:	5b                   	pop    ebx
c00099a3:	c1 e0 0c             	shl    eax,0xc
c00099a6:	5e                   	pop    esi
c00099a7:	5f                   	pop    edi
c00099a8:	5d                   	pop    ebp
c00099a9:	c3                   	ret    
c00099aa:	6a 02                	push   0x2
c00099ac:	bb 01 00 00 00       	mov    ebx,0x1
c00099b1:	50                   	push   eax
c00099b2:	e8 b9 fe ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099b7:	58                   	pop    eax
c00099b8:	5a                   	pop    edx
c00099b9:	eb bd                	jmp    c0009978 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00099bb:	6a 04                	push   0x4
c00099bd:	8d 45 01             	lea    eax,[ebp+0x1]
c00099c0:	55                   	push   ebp
c00099c1:	a3 c4 f7 01 c0       	mov    ds:0xc001f7c4,eax
c00099c6:	e8 a5 fe ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099cb:	59                   	pop    ecx
c00099cc:	89 e8                	mov    eax,ebp
c00099ce:	5b                   	pop    ebx
c00099cf:	c1 e0 0c             	shl    eax,0xc
c00099d2:	83 c4 1c             	add    esp,0x1c
c00099d5:	5b                   	pop    ebx
c00099d6:	5e                   	pop    esi
c00099d7:	5f                   	pop    edi
c00099d8:	5d                   	pop    ebp
c00099d9:	c3                   	ret    

c00099da <Virt::freeSwapfilePage(unsigned long)>:
c00099da:	53                   	push   ebx
c00099db:	8b 15 cc 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020acc
c00099e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00099e5:	b8 01 00 00 00       	mov    eax,0x1
c00099ea:	89 cb                	mov    ebx,ecx
c00099ec:	d3 e0                	shl    eax,cl
c00099ee:	c1 eb 05             	shr    ebx,0x5
c00099f1:	f7 d0                	not    eax
c00099f3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00099f6:	5b                   	pop    ebx
c00099f7:	c3                   	ret    

c00099f8 <Virt::swapIDToSector(unsigned long)>:
c00099f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099fc:	0f af 05 cc f7 01 c0 	imul   eax,DWORD PTR ds:0xc001f7cc
c0009a03:	03 05 d4 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7d4
c0009a09:	c3                   	ret    

c0009a0a <Virt::allocateSwapfilePage()>:
c0009a0a:	55                   	push   ebp
c0009a0b:	31 d2                	xor    edx,edx
c0009a0d:	57                   	push   edi
c0009a0e:	56                   	push   esi
c0009a0f:	53                   	push   ebx
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	8b 0d cc f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7cc
c0009a19:	a1 d0 f7 01 c0       	mov    eax,ds:0xc001f7d0
c0009a1e:	f7 f1                	div    ecx
c0009a20:	39 0d d0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7d0,ecx
c0009a26:	72 2d                	jb     c0009a55 <Virt::allocateSwapfilePage()+0x4b>
c0009a28:	8b 35 cc 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020acc
c0009a2e:	8b 16                	mov    edx,DWORD PTR [esi]
c0009a30:	f6 c2 01             	test   dl,0x1
c0009a33:	74 3c                	je     c0009a71 <Virt::allocateSwapfilePage()+0x67>
c0009a35:	31 c9                	xor    ecx,ecx
c0009a37:	bf 01 00 00 00       	mov    edi,0x1
c0009a3c:	eb 12                	jmp    c0009a50 <Virt::allocateSwapfilePage()+0x46>
c0009a3e:	89 fd                	mov    ebp,edi
c0009a40:	89 ca                	mov    edx,ecx
c0009a42:	d3 e5                	shl    ebp,cl
c0009a44:	c1 ea 05             	shr    edx,0x5
c0009a47:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009a4a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a4c:	85 ea                	test   edx,ebp
c0009a4e:	74 2a                	je     c0009a7a <Virt::allocateSwapfilePage()+0x70>
c0009a50:	41                   	inc    ecx
c0009a51:	39 c8                	cmp    eax,ecx
c0009a53:	77 e9                	ja     c0009a3e <Virt::allocateSwapfilePage()+0x34>
c0009a55:	83 ec 0c             	sub    esp,0xc
c0009a58:	68 13 dc 01 c0       	push   0xc001dc13
c0009a5d:	e8 89 6c 00 00       	call   c00106eb <KePanic(char const*)>
c0009a62:	83 c4 10             	add    esp,0x10
c0009a65:	31 c9                	xor    ecx,ecx
c0009a67:	83 c4 0c             	add    esp,0xc
c0009a6a:	89 c8                	mov    eax,ecx
c0009a6c:	5b                   	pop    ebx
c0009a6d:	5e                   	pop    esi
c0009a6e:	5f                   	pop    edi
c0009a6f:	5d                   	pop    ebp
c0009a70:	c3                   	ret    
c0009a71:	89 f3                	mov    ebx,esi
c0009a73:	bd 01 00 00 00       	mov    ebp,0x1
c0009a78:	31 c9                	xor    ecx,ecx
c0009a7a:	09 ea                	or     edx,ebp
c0009a7c:	89 c8                	mov    eax,ecx
c0009a7e:	89 13                	mov    DWORD PTR [ebx],edx
c0009a80:	83 c4 0c             	add    esp,0xc
c0009a83:	5b                   	pop    ebx
c0009a84:	5e                   	pop    esi
c0009a85:	5f                   	pop    edi
c0009a86:	5d                   	pop    ebp
c0009a87:	c3                   	ret    

c0009a88 <Virt::virtualMemorySetup()>:
c0009a88:	53                   	push   ebx
c0009a89:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009a8e:	6a 0f                	push   0xf
c0009a90:	53                   	push   ebx
c0009a91:	43                   	inc    ebx
c0009a92:	e8 d9 fd ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a97:	58                   	pop    eax
c0009a98:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009a9e:	5a                   	pop    edx
c0009a9f:	75 ed                	jne    c0009a8e <Virt::virtualMemorySetup()+0x6>
c0009aa1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009aa6:	6a 00                	push   0x0
c0009aa8:	53                   	push   ebx
c0009aa9:	43                   	inc    ebx
c0009aaa:	e8 c1 fd ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009aaf:	59                   	pop    ecx
c0009ab0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009ab6:	58                   	pop    eax
c0009ab7:	75 ed                	jne    c0009aa6 <Virt::virtualMemorySetup()+0x1e>
c0009ab9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009abe:	6a 0f                	push   0xf
c0009ac0:	53                   	push   ebx
c0009ac1:	43                   	inc    ebx
c0009ac2:	e8 a9 fd ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009ac7:	58                   	pop    eax
c0009ac8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009ace:	5a                   	pop    edx
c0009acf:	75 ed                	jne    c0009abe <Virt::virtualMemorySetup()+0x36>
c0009ad1:	5b                   	pop    ebx
c0009ad2:	c3                   	ret    

c0009ad3 <Virt::setupPageSwapping(int)>:
c0009ad3:	53                   	push   ebx
c0009ad4:	83 ec 0c             	sub    esp,0xc
c0009ad7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009adb:	a1 48 2f 02 c0       	mov    eax,ds:0xc0022f48
c0009ae0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009ae6:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ae8:	53                   	push   ebx
c0009ae9:	c1 e3 0b             	shl    ebx,0xb
c0009aec:	68 2a dc 01 c0       	push   0xc001dc2a
c0009af1:	50                   	push   eax
c0009af2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009af5:	89 1d d0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7d0,ebx
c0009afb:	c6 05 d8 f7 01 c0 43 	mov    BYTE PTR ds:0xc001f7d8,0x43
c0009b02:	c1 eb 08             	shr    ebx,0x8
c0009b05:	a3 d4 f7 01 c0       	mov    ds:0xc001f7d4,eax
c0009b0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009b0d:	c7 05 cc f7 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f7cc,0x8
c0009b17:	e8 69 e3 ff ff       	call   c0007e85 <malloc>
c0009b1c:	83 c4 0c             	add    esp,0xc
c0009b1f:	89 c1                	mov    ecx,eax
c0009b21:	a3 cc 0a 02 c0       	mov    ds:0xc0020acc,eax
c0009b26:	31 d2                	xor    edx,edx
c0009b28:	a1 d0 f7 01 c0       	mov    eax,ds:0xc001f7d0
c0009b2d:	f7 35 cc f7 01 c0    	div    DWORD PTR ds:0xc001f7cc
c0009b33:	c1 e8 05             	shr    eax,0x5
c0009b36:	50                   	push   eax
c0009b37:	6a 00                	push   0x0
c0009b39:	51                   	push   ecx
c0009b3a:	e8 b1 69 ff ff       	call   c00004f0 <memset>
c0009b3f:	83 c4 18             	add    esp,0x18
c0009b42:	5b                   	pop    ebx
c0009b43:	c3                   	ret    

c0009b44 <VAS::VAS()>:
c0009b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b53:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b5e:	a3 d0 0a 02 c0       	mov    ds:0xc0020ad0,eax
c0009b63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b67:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b76:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b7d:	90                   	nop
c0009b7e:	c3                   	ret    
c0009b7f:	90                   	nop

c0009b80 <VAS::VAS(VAS*)>:
c0009b80:	83 ec 0c             	sub    esp,0xc
c0009b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b99:	83 ec 0c             	sub    esp,0xc
c0009b9c:	68 cc da 01 c0       	push   0xc001dacc
c0009ba1:	e8 45 6b 00 00       	call   c00106eb <KePanic(char const*)>
c0009ba6:	83 c4 10             	add    esp,0x10
c0009ba9:	90                   	nop
c0009baa:	83 c4 0c             	add    esp,0xc
c0009bad:	c3                   	ret    

c0009bae <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bb2:	89 c2                	mov    edx,eax
c0009bb4:	c1 e8 0a             	shr    eax,0xa
c0009bb7:	c1 ea 16             	shr    edx,0x16
c0009bba:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009bbf:	19 c9                	sbb    ecx,ecx
c0009bc1:	c1 e2 0c             	shl    edx,0xc
c0009bc4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009bca:	25 fc 0f 00 00       	and    eax,0xffc
c0009bcf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009bd6:	01 d0                	add    eax,edx
c0009bd8:	c3                   	ret    
c0009bd9:	90                   	nop

c0009bda <VAS::getPageTableEntry(unsigned long)>:
c0009bda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009bde:	89 ca                	mov    edx,ecx
c0009be0:	c1 e9 0a             	shr    ecx,0xa
c0009be3:	c1 ea 16             	shr    edx,0x16
c0009be6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009bec:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009bf2:	c1 e0 0c             	shl    eax,0xc
c0009bf5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009bf8:	c3                   	ret    

c0009bf9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009bf9:	57                   	push   edi
c0009bfa:	56                   	push   esi
c0009bfb:	be 01 00 00 00       	mov    esi,0x1
c0009c00:	53                   	push   ebx
c0009c01:	83 ec 10             	sub    esp,0x10
c0009c04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009c08:	c1 eb 0c             	shr    ebx,0xc
c0009c0b:	eb 3f                	jmp    c0009c4c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009c0d:	83 ec 08             	sub    esp,0x8
c0009c10:	a1 d0 0a 02 c0       	mov    eax,ds:0xc0020ad0
c0009c15:	57                   	push   edi
c0009c16:	50                   	push   eax
c0009c17:	e8 be ff ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c0009c1c:	83 c4 10             	add    esp,0x10
c0009c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c21:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009c25:	f6 c4 04             	test   ah,0x4
c0009c28:	75 60                	jne    c0009c8a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009c2a:	80 fa 04             	cmp    dl,0x4
c0009c2d:	74 79                	je     c0009ca8 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009c2f:	80 fa 02             	cmp    dl,0x2
c0009c32:	0f 84 89 00 00 00    	je     c0009cc1 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009c38:	80 fa 03             	cmp    dl,0x3
c0009c3b:	0f 84 ae 00 00 00    	je     c0009cef <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009c41:	fe ca                	dec    dl
c0009c43:	0f 84 93 00 00 00    	je     c0009cdc <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009c49:	43                   	inc    ebx
c0009c4a:	31 f6                	xor    esi,esi
c0009c4c:	53                   	push   ebx
c0009c4d:	89 df                	mov    edi,ebx
c0009c4f:	e8 51 fc ff ff       	call   c00098a5 <Virt::getPageState(unsigned long)>
c0009c54:	c1 e7 0c             	shl    edi,0xc
c0009c57:	5a                   	pop    edx
c0009c58:	84 c0                	test   al,al
c0009c5a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c5e:	75 ad                	jne    c0009c0d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009c60:	83 ec 0c             	sub    esp,0xc
c0009c63:	68 41 dc 01 c0       	push   0xc001dc41
c0009c68:	e8 7e 6a 00 00       	call   c00106eb <KePanic(char const*)>
c0009c6d:	5a                   	pop    edx
c0009c6e:	59                   	pop    ecx
c0009c6f:	57                   	push   edi
c0009c70:	8b 3d d0 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020ad0
c0009c76:	57                   	push   edi
c0009c77:	e8 5e ff ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c0009c7c:	83 c4 10             	add    esp,0x10
c0009c7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c81:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009c85:	f6 c4 04             	test   ah,0x4
c0009c88:	74 bf                	je     c0009c49 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009c8a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009c8e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c93:	83 ec 0c             	sub    esp,0xc
c0009c96:	50                   	push   eax
c0009c97:	e8 5f e4 ff ff       	call   c00080fb <Phys::freePage(unsigned long)>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009ca3:	80 fa 04             	cmp    dl,0x4
c0009ca6:	75 87                	jne    c0009c2f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009ca8:	89 f0                	mov    eax,esi
c0009caa:	84 c0                	test   al,al
c0009cac:	75 47                	jne    c0009cf5 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009cae:	c7 44 24 20 f0 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001daf0
c0009cb6:	83 c4 10             	add    esp,0x10
c0009cb9:	5b                   	pop    ebx
c0009cba:	5e                   	pop    esi
c0009cbb:	5f                   	pop    edi
c0009cbc:	e9 2a 6a 00 00       	jmp    c00106eb <KePanic(char const*)>
c0009cc1:	89 f0                	mov    eax,esi
c0009cc3:	84 c0                	test   al,al
c0009cc5:	75 15                	jne    c0009cdc <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009cc7:	83 ec 0c             	sub    esp,0xc
c0009cca:	68 5d dc 01 c0       	push   0xc001dc5d
c0009ccf:	e8 17 6a 00 00       	call   c00106eb <KePanic(char const*)>
c0009cd4:	83 c4 10             	add    esp,0x10
c0009cd7:	e9 6d ff ff ff       	jmp    c0009c49 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009cdc:	83 ec 08             	sub    esp,0x8
c0009cdf:	6a 00                	push   0x0
c0009ce1:	53                   	push   ebx
c0009ce2:	e8 89 fb ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009ce7:	83 c4 10             	add    esp,0x10
c0009cea:	e9 5a ff ff ff       	jmp    c0009c49 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009cef:	89 f0                	mov    eax,esi
c0009cf1:	84 c0                	test   al,al
c0009cf3:	75 15                	jne    c0009d0a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009cf5:	83 ec 08             	sub    esp,0x8
c0009cf8:	6a 00                	push   0x0
c0009cfa:	53                   	push   ebx
c0009cfb:	e8 70 fb ff ff       	call   c0009870 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009d00:	83 c4 10             	add    esp,0x10
c0009d03:	83 c4 10             	add    esp,0x10
c0009d06:	5b                   	pop    ebx
c0009d07:	5e                   	pop    esi
c0009d08:	5f                   	pop    edi
c0009d09:	c3                   	ret    
c0009d0a:	c7 44 24 20 79 dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc79
c0009d12:	83 c4 10             	add    esp,0x10
c0009d15:	5b                   	pop    ebx
c0009d16:	5e                   	pop    esi
c0009d17:	5f                   	pop    edi
c0009d18:	e9 ce 69 00 00       	jmp    c00106eb <KePanic(char const*)>
c0009d1d:	90                   	nop

c0009d1e <VAS::freeAllocatedPages(unsigned long)>:
c0009d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009d22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d26:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009d2a:	74 09                	je     c0009d35 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009d2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009d30:	e9 c4 fe ff ff       	jmp    c0009bf9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d35:	c7 44 24 04 14 db 01 c0 	mov    DWORD PTR [esp+0x4],0xc001db14
c0009d3d:	e9 da 0d 00 00       	jmp    c000ab1c <Dbg::kprintf(char const*, ...)>

c0009d42 <VAS::virtualToPhysical(unsigned long)>:
c0009d42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d46:	50                   	push   eax
c0009d47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d4b:	52                   	push   edx
c0009d4c:	e8 89 fe ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c0009d51:	59                   	pop    ecx
c0009d52:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d54:	5a                   	pop    edx
c0009d55:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d5a:	c3                   	ret    
c0009d5b:	90                   	nop

c0009d5c <VAS::reflagRange(unsigned long, int, int, int)>:
c0009d5c:	55                   	push   ebp
c0009d5d:	57                   	push   edi
c0009d5e:	56                   	push   esi
c0009d5f:	53                   	push   ebx
c0009d60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d64:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009d68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009d6c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009d70:	85 db                	test   ebx,ebx
c0009d72:	7e 22                	jle    c0009d96 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009d74:	c1 e3 0c             	shl    ebx,0xc
c0009d77:	01 f3                	add    ebx,esi
c0009d79:	56                   	push   esi
c0009d7a:	81 c6 00 10 00 00    	add    esi,0x1000
c0009d80:	55                   	push   ebp
c0009d81:	e8 54 fe ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c0009d86:	5a                   	pop    edx
c0009d87:	59                   	pop    ecx
c0009d88:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009d8a:	21 f9                	and    ecx,edi
c0009d8c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009d90:	39 f3                	cmp    ebx,esi
c0009d92:	89 08                	mov    DWORD PTR [eax],ecx
c0009d94:	75 e3                	jne    c0009d79 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009d96:	5b                   	pop    ebx
c0009d97:	5e                   	pop    esi
c0009d98:	5f                   	pop    edi
c0009d99:	5d                   	pop    ebp
c0009d9a:	c3                   	ret    
c0009d9b:	90                   	nop

c0009d9c <VAS::setToWriteCombining(unsigned long, int)>:
c0009d9c:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0009da1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009da7:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009dae:	75 01                	jne    c0009db1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009db0:	c3                   	ret    
c0009db1:	68 80 00 00 00       	push   0x80
c0009db6:	6a ff                	push   0xffffffff
c0009db8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dbc:	50                   	push   eax
c0009dbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009dc1:	52                   	push   edx
c0009dc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009dc6:	51                   	push   ecx
c0009dc7:	e8 90 ff ff ff       	call   c0009d5c <VAS::reflagRange(unsigned long, int, int, int)>
c0009dcc:	83 c4 14             	add    esp,0x14
c0009dcf:	c3                   	ret    

c0009dd0 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009dd0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009dd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009dd9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009de0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009de3:	19 c0                	sbb    eax,eax
c0009de5:	83 ca 03             	or     edx,0x3
c0009de8:	83 e0 fc             	and    eax,0xfffffffc
c0009deb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009df2:	0f 20 d8             	mov    eax,cr3
c0009df5:	0f 22 d8             	mov    cr3,eax
c0009df8:	c3                   	ret    
c0009df9:	90                   	nop

c0009dfa <VAS::~VAS()>:
c0009dfa:	83 ec 2c             	sub    esp,0x2c
c0009dfd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e05:	fa                   	cli    
c0009e06:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0009e0b:	40                   	inc    eax
c0009e0c:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0009e11:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e1b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009e21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009e25:	6a 01                	push   0x1
c0009e27:	50                   	push   eax
c0009e28:	e8 a3 ff ff ff       	call   c0009dd0 <VAS::mapOtherVASIn(bool, VAS*)>
c0009e2d:	83 c4 0c             	add    esp,0xc
c0009e30:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009e38:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009e40:	0f 8f d4 00 00 00    	jg     c0009f1a <VAS::~VAS()+0x120>
c0009e46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e51:	c1 e2 02             	shl    edx,0x2
c0009e54:	01 d0                	add    eax,edx
c0009e56:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e60:	83 e0 01             	and    eax,0x1
c0009e63:	0f 84 a8 00 00 00    	je     c0009f11 <VAS::~VAS()+0x117>
c0009e69:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009e71:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009e79:	7f 72                	jg     c0009eed <VAS::~VAS()+0xf3>
c0009e7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e7f:	c1 e0 0a             	shl    eax,0xa
c0009e82:	89 c2                	mov    edx,eax
c0009e84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e88:	01 d0                	add    eax,edx
c0009e8a:	c1 e0 0c             	shl    eax,0xc
c0009e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e91:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009e96:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e9b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009ea1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009ea5:	6a 01                	push   0x1
c0009ea7:	50                   	push   eax
c0009ea8:	e8 01 fd ff ff       	call   c0009bae <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009ead:	83 c4 0c             	add    esp,0xc
c0009eb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009eba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ec2:	25 01 04 00 00       	and    eax,0x401
c0009ec7:	3d 01 04 00 00       	cmp    eax,0x401
c0009ecc:	75 19                	jne    c0009ee7 <VAS::~VAS()+0xed>
c0009ece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ed2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ed7:	83 ec 0c             	sub    esp,0xc
c0009eda:	50                   	push   eax
c0009edb:	e8 1b e2 ff ff       	call   c00080fb <Phys::freePage(unsigned long)>
c0009ee0:	83 c4 10             	add    esp,0x10
c0009ee3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ee7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009eeb:	eb 84                	jmp    c0009e71 <VAS::~VAS()+0x77>
c0009eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ef1:	25 00 04 00 00       	and    eax,0x400
c0009ef6:	74 19                	je     c0009f11 <VAS::~VAS()+0x117>
c0009ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009efc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f01:	83 ec 0c             	sub    esp,0xc
c0009f04:	50                   	push   eax
c0009f05:	e8 f1 e1 ff ff       	call   c00080fb <Phys::freePage(unsigned long)>
c0009f0a:	83 c4 10             	add    esp,0x10
c0009f0d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f11:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f15:	e9 1e ff ff ff       	jmp    c0009e38 <VAS::~VAS()+0x3e>
c0009f1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f21:	83 ec 0c             	sub    esp,0xc
c0009f24:	50                   	push   eax
c0009f25:	e8 cf fc ff ff       	call   c0009bf9 <Virt::freeKernelVirtualPages(unsigned long)>
c0009f2a:	83 c4 10             	add    esp,0x10
c0009f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f34:	83 ec 0c             	sub    esp,0xc
c0009f37:	50                   	push   eax
c0009f38:	e8 be e1 ff ff       	call   c00080fb <Phys::freePage(unsigned long)>
c0009f3d:	83 c4 10             	add    esp,0x10
c0009f40:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f44:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0009f49:	48                   	dec    eax
c0009f4a:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0009f4f:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0009f54:	85 c0                	test   eax,eax
c0009f56:	75 01                	jne    c0009f59 <VAS::~VAS()+0x15f>
c0009f58:	fb                   	sti    
c0009f59:	90                   	nop
c0009f5a:	83 c4 2c             	add    esp,0x2c
c0009f5d:	c3                   	ret    

c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	53                   	push   ebx
c0009f62:	83 ec 1c             	sub    esp,0x1c
c0009f65:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009f69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f6d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009f73:	77 0b                	ja     c0009f80 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009f75:	0f 20 d8             	mov    eax,cr3
c0009f78:	0f 20 d8             	mov    eax,cr3
c0009f7b:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009f7e:	75 47                	jne    c0009fc7 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009f80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f84:	09 d8                	or     eax,ebx
c0009f86:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f8b:	75 57                	jne    c0009fe4 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009f8d:	89 de                	mov    esi,ebx
c0009f8f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f92:	c1 ee 16             	shr    esi,0x16
c0009f95:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009f9c:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009fa0:	74 54                	je     c0009ff6 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009fa2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009fa6:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009fac:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009fb0:	c1 e6 0c             	shl    esi,0xc
c0009fb3:	c1 eb 0a             	shr    ebx,0xa
c0009fb6:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fbc:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009fbf:	83 c4 1c             	add    esp,0x1c
c0009fc2:	5b                   	pop    ebx
c0009fc3:	5e                   	pop    esi
c0009fc4:	5f                   	pop    edi
c0009fc5:	5d                   	pop    ebp
c0009fc6:	c3                   	ret    
c0009fc7:	83 ec 0c             	sub    esp,0xc
c0009fca:	68 38 db 01 c0       	push   0xc001db38
c0009fcf:	e8 48 0b 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0009fd4:	83 c4 10             	add    esp,0x10
c0009fd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009fdb:	09 d8                	or     eax,ebx
c0009fdd:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fe2:	74 a9                	je     c0009f8d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009fe4:	83 ec 0c             	sub    esp,0xc
c0009fe7:	68 a0 db 01 c0       	push   0xc001dba0
c0009fec:	e8 fa 66 00 00       	call   c00106eb <KePanic(char const*)>
c0009ff1:	83 c4 10             	add    esp,0x10
c0009ff4:	eb 97                	jmp    c0009f8d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ffa:	e8 5e e1 ff ff       	call   c000815d <Phys::allocatePage()>
c0009fff:	83 ec 0c             	sub    esp,0xc
c000a002:	89 c5                	mov    ebp,eax
c000a004:	8b 0d d0 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ad0
c000a00a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a00e:	6a 01                	push   0x1
c000a010:	e8 b4 f8 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000a015:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a01c:	6a 01                	push   0x1
c000a01e:	50                   	push   eax
c000a01f:	55                   	push   ebp
c000a020:	81 cd 07 04 00 00    	or     ebp,0x407
c000a026:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02a:	51                   	push   ecx
c000a02b:	e8 28 02 00 00       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a030:	83 c4 1c             	add    esp,0x1c
c000a033:	68 00 10 00 00       	push   0x1000
c000a038:	6a 00                	push   0x0
c000a03a:	50                   	push   eax
c000a03b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a03f:	e8 ac 64 ff ff       	call   c00004f0 <memset>
c000a044:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a048:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04b:	e8 a9 fb ff ff       	call   c0009bf9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a050:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a054:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a057:	83 c4 10             	add    esp,0x10
c000a05a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a05d:	e9 40 ff ff ff       	jmp    c0009fa2 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a062 <VAS::allocatePages(int, int)>:
c000a062:	55                   	push   ebp
c000a063:	57                   	push   edi
c000a064:	56                   	push   esi
c000a065:	53                   	push   ebx
c000a066:	83 ec 1c             	sub    esp,0x1c
c000a069:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a06d:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a072:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a078:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a07e:	83 e0 01             	and    eax,0x1
c000a081:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a085:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a089:	0f 85 cc 00 00 00    	jne    c000a15b <VAS::allocatePages(int, int)+0xf9>
c000a08f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a092:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a096:	85 c0                	test   eax,eax
c000a098:	0f 84 a1 00 00 00    	je     c000a13f <VAS::allocatePages(int, int)+0xdd>
c000a09e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a0a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0a6:	c1 e6 0c             	shl    esi,0xc
c000a0a9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a0ad:	85 c0                	test   eax,eax
c000a0af:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a0b2:	7e 33                	jle    c000a0e7 <VAS::allocatePages(int, int)+0x85>
c000a0b4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a0b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a0bc:	81 cd 00 04 00 00    	or     ebp,0x400
c000a0c2:	e8 96 e0 ff ff       	call   c000815d <Phys::allocatePage()>
c000a0c7:	55                   	push   ebp
c000a0c8:	53                   	push   ebx
c000a0c9:	50                   	push   eax
c000a0ca:	57                   	push   edi
c000a0cb:	e8 8e fe ff ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a0d0:	83 c4 10             	add    esp,0x10
c000a0d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a0d8:	74 03                	je     c000a0dd <VAS::allocatePages(int, int)+0x7b>
c000a0da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0e3:	39 de                	cmp    esi,ebx
c000a0e5:	75 db                	jne    c000a0c2 <VAS::allocatePages(int, int)+0x60>
c000a0e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a0ec:	75 12                	jne    c000a100 <VAS::allocatePages(int, int)+0x9e>
c000a0ee:	0f 20 d8             	mov    eax,cr3
c000a0f1:	0f 22 d8             	mov    cr3,eax
c000a0f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0f8:	83 c4 1c             	add    esp,0x1c
c000a0fb:	5b                   	pop    ebx
c000a0fc:	5e                   	pop    esi
c000a0fd:	5f                   	pop    edi
c000a0fe:	5d                   	pop    ebp
c000a0ff:	c3                   	ret    
c000a100:	c1 ee 0a             	shr    esi,0xa
c000a103:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a107:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a10d:	c1 eb 0a             	shr    ebx,0xa
c000a110:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a116:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a11c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a122:	39 c3                	cmp    ebx,eax
c000a124:	77 ce                	ja     c000a0f4 <VAS::allocatePages(int, int)+0x92>
c000a126:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a129:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a12f:	39 d8                	cmp    eax,ebx
c000a131:	73 f3                	jae    c000a126 <VAS::allocatePages(int, int)+0xc4>
c000a133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a137:	83 c4 1c             	add    esp,0x1c
c000a13a:	5b                   	pop    ebx
c000a13b:	5e                   	pop    esi
c000a13c:	5f                   	pop    edi
c000a13d:	5d                   	pop    ebp
c000a13e:	c3                   	ret    
c000a13f:	83 ec 0c             	sub    esp,0xc
c000a142:	68 c4 db 01 c0       	push   0xc001dbc4
c000a147:	e8 9f 65 00 00       	call   c00106eb <KePanic(char const*)>
c000a14c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a14f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a153:	83 c4 10             	add    esp,0x10
c000a156:	e9 43 ff ff ff       	jmp    c000a09e <VAS::allocatePages(int, int)+0x3c>
c000a15b:	83 ec 0c             	sub    esp,0xc
c000a15e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a162:	51                   	push   ecx
c000a163:	e8 61 f7 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000a168:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a16c:	83 c4 10             	add    esp,0x10
c000a16f:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a174:	0f 87 9b 00 00 00    	ja     c000a215 <VAS::allocatePages(int, int)+0x1b3>
c000a17a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a17e:	85 d2                	test   edx,edx
c000a180:	7e 3c                	jle    c000a1be <VAS::allocatePages(int, int)+0x15c>
c000a182:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a186:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a18a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a18e:	c1 e5 0c             	shl    ebp,0xc
c000a191:	81 ce 00 04 00 00    	or     esi,0x400
c000a197:	01 dd                	add    ebp,ebx
c000a199:	e8 bf df ff ff       	call   c000815d <Phys::allocatePage()>
c000a19e:	56                   	push   esi
c000a19f:	53                   	push   ebx
c000a1a0:	50                   	push   eax
c000a1a1:	57                   	push   edi
c000a1a2:	e8 b7 fd ff ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1af:	74 03                	je     c000a1b4 <VAS::allocatePages(int, int)+0x152>
c000a1b1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1ba:	39 dd                	cmp    ebp,ebx
c000a1bc:	75 db                	jne    c000a199 <VAS::allocatePages(int, int)+0x137>
c000a1be:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1c3:	0f 84 25 ff ff ff    	je     c000a0ee <VAS::allocatePages(int, int)+0x8c>
c000a1c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1d1:	89 d3                	mov    ebx,edx
c000a1d3:	c1 e0 0c             	shl    eax,0xc
c000a1d6:	c1 eb 0a             	shr    ebx,0xa
c000a1d9:	01 d0                	add    eax,edx
c000a1db:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1e1:	c1 e8 0a             	shr    eax,0xa
c000a1e4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a1ef:	2d 00 00 40 00       	sub    eax,0x400000
c000a1f4:	39 c3                	cmp    ebx,eax
c000a1f6:	0f 87 f8 fe ff ff    	ja     c000a0f4 <VAS::allocatePages(int, int)+0x92>
c000a1fc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a205:	39 d8                	cmp    eax,ebx
c000a207:	73 f3                	jae    c000a1fc <VAS::allocatePages(int, int)+0x19a>
c000a209:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a20d:	83 c4 1c             	add    esp,0x1c
c000a210:	5b                   	pop    ebx
c000a211:	5e                   	pop    esi
c000a212:	5f                   	pop    edi
c000a213:	5d                   	pop    ebp
c000a214:	c3                   	ret    
c000a215:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a21a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a220:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a227:	0f 84 4d ff ff ff    	je     c000a17a <VAS::allocatePages(int, int)+0x118>
c000a22d:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a235:	e9 40 ff ff ff       	jmp    c000a17a <VAS::allocatePages(int, int)+0x118>

c000a23a <VAS::setCPUSpecific(unsigned long)>:
c000a23a:	83 ec 0c             	sub    esp,0xc
c000a23d:	6a 05                	push   0x5
c000a23f:	68 00 00 40 c2       	push   0xc2400000
c000a244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a248:	50                   	push   eax
c000a249:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a24d:	52                   	push   edx
c000a24e:	e8 0b fd ff ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a253:	83 c4 1c             	add    esp,0x1c
c000a256:	c3                   	ret    
c000a257:	90                   	nop

c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a258:	55                   	push   ebp
c000a259:	57                   	push   edi
c000a25a:	56                   	push   esi
c000a25b:	53                   	push   ebx
c000a25c:	83 ec 1c             	sub    esp,0x1c
c000a25f:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a264:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a268:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a26e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a272:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a278:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a27c:	83 e0 01             	and    eax,0x1
c000a27f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a283:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a287:	85 c0                	test   eax,eax
c000a289:	7e 39                	jle    c000a2c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a28b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a28f:	89 f3                	mov    ebx,esi
c000a291:	c1 e0 0c             	shl    eax,0xc
c000a294:	01 f0                	add    eax,esi
c000a296:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a29a:	55                   	push   ebp
c000a29b:	53                   	push   ebx
c000a29c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a2a0:	29 f0                	sub    eax,esi
c000a2a2:	01 d8                	add    eax,ebx
c000a2a4:	50                   	push   eax
c000a2a5:	57                   	push   edi
c000a2a6:	e8 b3 fc ff ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2ab:	83 c4 10             	add    esp,0x10
c000a2ae:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a2b3:	74 03                	je     c000a2b8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a2b5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2b8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2be:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a2c2:	75 d6                	jne    c000a29a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a2c4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a2c9:	75 10                	jne    c000a2db <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a2cb:	0f 20 d8             	mov    eax,cr3
c000a2ce:	0f 22 d8             	mov    cr3,eax
c000a2d1:	83 c4 1c             	add    esp,0x1c
c000a2d4:	89 f0                	mov    eax,esi
c000a2d6:	5b                   	pop    ebx
c000a2d7:	5e                   	pop    esi
c000a2d8:	5f                   	pop    edi
c000a2d9:	5d                   	pop    ebp
c000a2da:	c3                   	ret    
c000a2db:	89 f3                	mov    ebx,esi
c000a2dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a2e1:	c1 eb 0a             	shr    ebx,0xa
c000a2e4:	c1 e0 0c             	shl    eax,0xc
c000a2e7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2ed:	01 f0                	add    eax,esi
c000a2ef:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2f5:	c1 e8 0a             	shr    eax,0xa
c000a2f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2fd:	2d 00 00 40 00       	sub    eax,0x400000
c000a302:	39 c3                	cmp    ebx,eax
c000a304:	77 cb                	ja     c000a2d1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a306:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a309:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a30f:	39 d8                	cmp    eax,ebx
c000a311:	73 f3                	jae    c000a306 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a313:	83 c4 1c             	add    esp,0x1c
c000a316:	89 f0                	mov    eax,esi
c000a318:	5b                   	pop    ebx
c000a319:	5e                   	pop    esi
c000a31a:	5f                   	pop    edi
c000a31b:	5d                   	pop    ebp
c000a31c:	c3                   	ret    
c000a31d:	90                   	nop

c000a31e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a31e:	55                   	push   ebp
c000a31f:	57                   	push   edi
c000a320:	56                   	push   esi
c000a321:	53                   	push   ebx
c000a322:	83 ec 1c             	sub    esp,0x1c
c000a325:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a329:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a32d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a331:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a335:	a9 ff 0f 00 00       	test   eax,0xfff
c000a33a:	75 4a                	jne    c000a386 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a33c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a340:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a343:	c1 eb 16             	shr    ebx,0x16
c000a346:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a34d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a351:	74 4d                	je     c000a3a0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a353:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a357:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a35b:	c1 e8 0a             	shr    eax,0xa
c000a35e:	80 fa 01             	cmp    dl,0x1
c000a361:	19 d2                	sbb    edx,edx
c000a363:	c1 e3 0c             	shl    ebx,0xc
c000a366:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a36a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a370:	25 fc 0f 00 00       	and    eax,0xffc
c000a375:	01 d8                	add    eax,ebx
c000a377:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a37e:	83 c4 1c             	add    esp,0x1c
c000a381:	5b                   	pop    ebx
c000a382:	5e                   	pop    esi
c000a383:	5f                   	pop    edi
c000a384:	5d                   	pop    ebp
c000a385:	c3                   	ret    
c000a386:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	68 f0 db 01 c0       	push   0xc001dbf0
c000a392:	e8 54 63 00 00       	call   c00106eb <KePanic(char const*)>
c000a397:	83 c4 10             	add    esp,0x10
c000a39a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a39e:	eb 9c                	jmp    c000a33c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a3a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3a4:	e8 b4 dd ff ff       	call   c000815d <Phys::allocatePage()>
c000a3a9:	83 ec 0c             	sub    esp,0xc
c000a3ac:	89 c5                	mov    ebp,eax
c000a3ae:	8b 0d d0 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ad0
c000a3b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a3b8:	6a 01                	push   0x1
c000a3ba:	e8 0a f5 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000a3bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a3c6:	6a 01                	push   0x1
c000a3c8:	50                   	push   eax
c000a3c9:	55                   	push   ebp
c000a3ca:	81 cd 07 04 00 00    	or     ebp,0x407
c000a3d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a3d4:	51                   	push   ecx
c000a3d5:	e8 7e fe ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3da:	83 c4 1c             	add    esp,0x1c
c000a3dd:	68 00 10 00 00       	push   0x1000
c000a3e2:	6a 00                	push   0x0
c000a3e4:	50                   	push   eax
c000a3e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3e9:	e8 02 61 ff ff       	call   c00004f0 <memset>
c000a3ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a3f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f5:	e8 ff f7 ff ff       	call   c0009bf9 <Virt::freeKernelVirtualPages(unsigned long)>
c000a3fa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a3fd:	83 c4 10             	add    esp,0x10
c000a400:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a403:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a407:	e9 47 ff ff ff       	jmp    c000a353 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a40c <VAS::VAS(bool)>:
c000a40c:	53                   	push   ebx
c000a40d:	83 ec 28             	sub    esp,0x28
c000a410:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a414:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a41c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a427:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a42e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a432:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a436:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a439:	e8 1f dd ff ff       	call   c000815d <Phys::allocatePage()>
c000a43e:	89 c2                	mov    edx,eax
c000a440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a444:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a447:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000a44d:	83 ec 0c             	sub    esp,0xc
c000a450:	6a 01                	push   0x1
c000a452:	e8 72 f4 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000a457:	83 c4 10             	add    esp,0x10
c000a45a:	89 c2                	mov    edx,eax
c000a45c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a460:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	6a 03                	push   0x3
c000a468:	6a 01                	push   0x1
c000a46a:	52                   	push   edx
c000a46b:	50                   	push   eax
c000a46c:	53                   	push   ebx
c000a46d:	e8 e6 fd ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a472:	83 c4 20             	add    esp,0x20
c000a475:	89 c2                	mov    edx,eax
c000a477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a47b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a47e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a486:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a48e:	7f 1c                	jg     c000a4ac <VAS::VAS(bool)+0xa0>
c000a490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a494:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a497:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a49b:	c1 e2 02             	shl    edx,0x2
c000a49e:	01 d0                	add    eax,edx
c000a4a0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a4a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a4aa:	eb da                	jmp    c000a486 <VAS::VAS(bool)+0x7a>
c000a4ac:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a4b4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a4bc:	7f 7a                	jg     c000a538 <VAS::VAS(bool)+0x12c>
c000a4be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4c2:	2d 00 02 00 00       	sub    eax,0x200
c000a4c7:	c1 e0 0c             	shl    eax,0xc
c000a4ca:	83 c8 03             	or     eax,0x3
c000a4cd:	89 c2                	mov    edx,eax
c000a4cf:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a4d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a4da:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a4e0:	83 e0 10             	and    eax,0x10
c000a4e3:	84 c0                	test   al,al
c000a4e5:	74 07                	je     c000a4ee <VAS::VAS(bool)+0xe2>
c000a4e7:	b8 00 01 00 00       	mov    eax,0x100
c000a4ec:	eb 05                	jmp    c000a4f3 <VAS::VAS(bool)+0xe7>
c000a4ee:	b8 00 00 00 00       	mov    eax,0x0
c000a4f3:	09 d0                	or     eax,edx
c000a4f5:	89 c1                	mov    ecx,eax
c000a4f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a4fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a502:	c1 e2 02             	shl    edx,0x2
c000a505:	01 d0                	add    eax,edx
c000a507:	89 ca                	mov    edx,ecx
c000a509:	89 10                	mov    DWORD PTR [eax],edx
c000a50b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a50f:	2d 40 03 00 00       	sub    eax,0x340
c000a514:	83 f8 7f             	cmp    eax,0x7f
c000a517:	77 16                	ja     c000a52f <VAS::VAS(bool)+0x123>
c000a519:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a51d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a520:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a524:	c1 e2 02             	shl    edx,0x2
c000a527:	01 d0                	add    eax,edx
c000a529:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a52f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a533:	e9 7c ff ff ff       	jmp    c000a4b4 <VAS::VAS(bool)+0xa8>
c000a538:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a53d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a543:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a549:	83 e0 10             	and    eax,0x10
c000a54c:	84 c0                	test   al,al
c000a54e:	74 07                	je     c000a557 <VAS::VAS(bool)+0x14b>
c000a550:	b8 03 41 00 00       	mov    eax,0x4103
c000a555:	eb 05                	jmp    c000a55c <VAS::VAS(bool)+0x150>
c000a557:	b8 03 40 00 00       	mov    eax,0x4003
c000a55c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a560:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a563:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a569:	89 02                	mov    DWORD PTR [edx],eax
c000a56b:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a570:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a576:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a57c:	83 ec 08             	sub    esp,0x8
c000a57f:	50                   	push   eax
c000a580:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a584:	e8 b1 fc ff ff       	call   c000a23a <VAS::setCPUSpecific(unsigned long)>
c000a589:	83 c4 10             	add    esp,0x10
c000a58c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a590:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a593:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a598:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a59e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5a4:	83 e0 10             	and    eax,0x10
c000a5a7:	84 c0                	test   al,al
c000a5a9:	74 07                	je     c000a5b2 <VAS::VAS(bool)+0x1a6>
c000a5ab:	b8 00 01 00 00       	mov    eax,0x100
c000a5b0:	eb 05                	jmp    c000a5b7 <VAS::VAS(bool)+0x1ab>
c000a5b2:	b8 00 00 00 00       	mov    eax,0x0
c000a5b7:	09 c2                	or     edx,eax
c000a5b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5bd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5c0:	05 fc 0f 00 00       	add    eax,0xffc
c000a5c5:	83 ca 03             	or     edx,0x3
c000a5c8:	89 10                	mov    DWORD PTR [eax],edx
c000a5ca:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a5cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5d5:	83 ec 0c             	sub    esp,0xc
c000a5d8:	50                   	push   eax
c000a5d9:	e8 12 1c 00 00       	call   c000c1f0 <Device::getName()>
c000a5de:	83 c4 10             	add    esp,0x10
c000a5e1:	83 ec 08             	sub    esp,0x8
c000a5e4:	68 93 dc 01 c0       	push   0xc001dc93
c000a5e9:	50                   	push   eax
c000a5ea:	e8 11 61 ff ff       	call   c0000700 <strcmp>
c000a5ef:	83 c4 10             	add    esp,0x10
c000a5f2:	85 c0                	test   eax,eax
c000a5f4:	0f 94 c0             	sete   al
c000a5f7:	84 c0                	test   al,al
c000a5f9:	0f 84 87 00 00 00    	je     c000a686 <VAS::VAS(bool)+0x27a>
c000a5ff:	fa                   	cli    
c000a600:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a605:	40                   	inc    eax
c000a606:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000a60b:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a610:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a616:	05 7c 09 00 00       	add    eax,0x97c
c000a61b:	83 ec 0c             	sub    esp,0xc
c000a61e:	50                   	push   eax
c000a61f:	e8 5e d3 ff ff       	call   c0007982 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a624:	83 c4 10             	add    esp,0x10
c000a627:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a62c:	89 c3                	mov    ebx,eax
c000a62e:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000a633:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a639:	05 7c 09 00 00       	add    eax,0x97c
c000a63e:	83 ec 0c             	sub    esp,0xc
c000a641:	50                   	push   eax
c000a642:	e8 3b d3 ff ff       	call   c0007982 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a647:	83 c4 10             	add    esp,0x10
c000a64a:	83 ec 08             	sub    esp,0x8
c000a64d:	50                   	push   eax
c000a64e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a652:	e8 83 f5 ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c000a657:	83 c4 10             	add    esp,0x10
c000a65a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a65c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a661:	6a 11                	push   0x11
c000a663:	53                   	push   ebx
c000a664:	50                   	push   eax
c000a665:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a669:	e8 f0 f8 ff ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a66e:	83 c4 10             	add    esp,0x10
c000a671:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a676:	48                   	dec    eax
c000a677:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000a67c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a681:	85 c0                	test   eax,eax
c000a683:	75 01                	jne    c000a686 <VAS::VAS(bool)+0x27a>
c000a685:	fb                   	sti    
c000a686:	90                   	nop
c000a687:	83 c4 28             	add    esp,0x28
c000a68a:	5b                   	pop    ebx
c000a68b:	c3                   	ret    

c000a68c <VAS::evict(unsigned long)>:
c000a68c:	55                   	push   ebp
c000a68d:	57                   	push   edi
c000a68e:	56                   	push   esi
c000a68f:	53                   	push   ebx
c000a690:	83 ec 1c             	sub    esp,0x1c
c000a693:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a697:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a69b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69f:	e8 66 f3 ff ff       	call   c0009a0a <Virt::allocateSwapfilePage()>
c000a6a4:	8b 0d cc f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7cc
c000a6aa:	89 c7                	mov    edi,eax
c000a6ac:	85 c9                	test   ecx,ecx
c000a6ae:	7e 3e                	jle    c000a6ee <VAS::evict(unsigned long)+0x62>
c000a6b0:	89 ee                	mov    esi,ebp
c000a6b2:	31 db                	xor    ebx,ebx
c000a6b4:	83 ec 0c             	sub    esp,0xc
c000a6b7:	57                   	push   edi
c000a6b8:	e8 3b f3 ff ff       	call   c00099f8 <Virt::swapIDToSector(unsigned long)>
c000a6bd:	89 34 24             	mov    DWORD PTR [esp],esi
c000a6c0:	01 d8                	add    eax,ebx
c000a6c2:	6a 01                	push   0x1
c000a6c4:	31 d2                	xor    edx,edx
c000a6c6:	43                   	inc    ebx
c000a6c7:	52                   	push   edx
c000a6c8:	81 c6 00 02 00 00    	add    esi,0x200
c000a6ce:	50                   	push   eax
c000a6cf:	0f be 05 d8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7d8
c000a6d6:	8b 14 85 3c 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1c4]
c000a6dd:	52                   	push   edx
c000a6de:	e8 8d 2b 00 00       	call   c000d270 <LogicalDisk::write(unsigned long long, int, void*)>
c000a6e3:	83 c4 20             	add    esp,0x20
c000a6e6:	39 1d cc f7 01 c0    	cmp    DWORD PTR ds:0xc001f7cc,ebx
c000a6ec:	7f c6                	jg     c000a6b4 <VAS::evict(unsigned long)+0x28>
c000a6ee:	83 ec 08             	sub    esp,0x8
c000a6f1:	c1 e7 0b             	shl    edi,0xb
c000a6f4:	55                   	push   ebp
c000a6f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6f9:	50                   	push   eax
c000a6fa:	e8 db f4 ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c000a6ff:	8b 10                	mov    edx,DWORD PTR [eax]
c000a701:	89 d1                	mov    ecx,edx
c000a703:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a709:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a70f:	09 cf                	or     edi,ecx
c000a711:	89 38                	mov    DWORD PTR [eax],edi
c000a713:	89 14 24             	mov    DWORD PTR [esp],edx
c000a716:	ff 05 c8 0a 02 c0    	inc    DWORD PTR ds:0xc0020ac8
c000a71c:	e8 da d9 ff ff       	call   c00080fb <Phys::freePage(unsigned long)>
c000a721:	0f 20 d8             	mov    eax,cr3
c000a724:	0f 22 d8             	mov    cr3,eax
c000a727:	a1 c4 0a 02 c0       	mov    eax,ds:0xc0020ac4
c000a72c:	c7 44 24 40 a1 dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dca1
c000a734:	8d 50 01             	lea    edx,[eax+0x1]
c000a737:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a73b:	89 15 c4 0a 02 c0    	mov    DWORD PTR ds:0xc0020ac4,edx
c000a741:	83 c4 2c             	add    esp,0x2c
c000a744:	5b                   	pop    ebx
c000a745:	5e                   	pop    esi
c000a746:	5f                   	pop    edi
c000a747:	5d                   	pop    ebp
c000a748:	e9 cf 03 00 00       	jmp    c000ab1c <Dbg::kprintf(char const*, ...)>
c000a74d:	90                   	nop

c000a74e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a74e:	55                   	push   ebp
c000a74f:	57                   	push   edi
c000a750:	56                   	push   esi
c000a751:	53                   	push   ebx
c000a752:	83 ec 14             	sub    esp,0x14
c000a755:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a759:	53                   	push   ebx
c000a75a:	68 b2 dc 01 c0       	push   0xc001dcb2
c000a75f:	e8 b8 03 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000a764:	83 c4 10             	add    esp,0x10
c000a767:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a76d:	74 21                	je     c000a790 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a76f:	83 ec 08             	sub    esp,0x8
c000a772:	53                   	push   ebx
c000a773:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a777:	57                   	push   edi
c000a778:	e8 5d f4 ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c000a77d:	83 c4 10             	add    esp,0x10
c000a780:	89 c6                	mov    esi,eax
c000a782:	85 c0                	test   eax,eax
c000a784:	74 0a                	je     c000a790 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a786:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a788:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a78e:	74 0a                	je     c000a79a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a790:	31 c0                	xor    eax,eax
c000a792:	83 c4 0c             	add    esp,0xc
c000a795:	5b                   	pop    ebx
c000a796:	5e                   	pop    esi
c000a797:	5f                   	pop    edi
c000a798:	5d                   	pop    ebp
c000a799:	c3                   	ret    
c000a79a:	e8 be d9 ff ff       	call   c000815d <Phys::allocatePage()>
c000a79f:	c1 ed 0b             	shr    ebp,0xb
c000a7a2:	8b 16                	mov    edx,DWORD PTR [esi]
c000a7a4:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a7aa:	09 c2                	or     edx,eax
c000a7ac:	81 ca 01 08 00 00    	or     edx,0x801
c000a7b2:	89 16                	mov    DWORD PTR [esi],edx
c000a7b4:	8b 35 cc f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7cc
c000a7ba:	85 f6                	test   esi,esi
c000a7bc:	7e 3e                	jle    c000a7fc <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a7be:	89 df                	mov    edi,ebx
c000a7c0:	31 f6                	xor    esi,esi
c000a7c2:	83 ec 0c             	sub    esp,0xc
c000a7c5:	55                   	push   ebp
c000a7c6:	e8 2d f2 ff ff       	call   c00099f8 <Virt::swapIDToSector(unsigned long)>
c000a7cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a7ce:	01 f0                	add    eax,esi
c000a7d0:	6a 01                	push   0x1
c000a7d2:	31 d2                	xor    edx,edx
c000a7d4:	46                   	inc    esi
c000a7d5:	52                   	push   edx
c000a7d6:	81 c7 00 02 00 00    	add    edi,0x200
c000a7dc:	50                   	push   eax
c000a7dd:	0f be 05 d8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7d8
c000a7e4:	8b 0c 85 3c 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1c4]
c000a7eb:	51                   	push   ecx
c000a7ec:	e8 13 2a 00 00       	call   c000d204 <LogicalDisk::read(unsigned long long, int, void*)>
c000a7f1:	83 c4 20             	add    esp,0x20
c000a7f4:	39 35 cc f7 01 c0    	cmp    DWORD PTR ds:0xc001f7cc,esi
c000a7fa:	7f c6                	jg     c000a7c2 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a7fc:	a1 c8 0a 02 c0       	mov    eax,ds:0xc0020ac8
c000a801:	48                   	dec    eax
c000a802:	52                   	push   edx
c000a803:	a3 c8 0a 02 c0       	mov    ds:0xc0020ac8,eax
c000a808:	50                   	push   eax
c000a809:	53                   	push   ebx
c000a80a:	68 c5 dc 01 c0       	push   0xc001dcc5
c000a80f:	e8 08 03 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000a814:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a817:	e8 be f1 ff ff       	call   c00099da <Virt::freeSwapfilePage(unsigned long)>
c000a81c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	48                   	dec    eax
c000a825:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000a82a:	85 c0                	test   eax,eax
c000a82c:	75 01                	jne    c000a82f <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a82e:	fb                   	sti    
c000a82f:	0f 20 d8             	mov    eax,cr3
c000a832:	0f 22 d8             	mov    cr3,eax
c000a835:	b0 01                	mov    al,0x1
c000a837:	e9 56 ff ff ff       	jmp    c000a792 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a83c <VAS::scanForEviction()>:
c000a83c:	57                   	push   edi
c000a83d:	31 ff                	xor    edi,edi
c000a83f:	56                   	push   esi
c000a840:	53                   	push   ebx
c000a841:	83 ec 10             	sub    esp,0x10
c000a844:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a848:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a84b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a851:	75 0e                	jne    c000a861 <VAS::scanForEviction()+0x25>
c000a853:	89 da                	mov    edx,ebx
c000a855:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a858:	c1 ea 16             	shr    edx,0x16
c000a85b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a85f:	74 4e                	je     c000a8af <VAS::scanForEviction()+0x73>
c000a861:	53                   	push   ebx
c000a862:	56                   	push   esi
c000a863:	e8 72 f3 ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c000a868:	5a                   	pop    edx
c000a869:	8b 10                	mov    edx,DWORD PTR [eax]
c000a86b:	59                   	pop    ecx
c000a86c:	89 d1                	mov    ecx,edx
c000a86e:	81 e1 01 08 00 00    	and    ecx,0x801
c000a874:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a87a:	74 3e                	je     c000a8ba <VAS::scanForEviction()+0x7e>
c000a87c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a882:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a888:	76 2b                	jbe    c000a8b5 <VAS::scanForEviction()+0x79>
c000a88a:	47                   	inc    edi
c000a88b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a892:	83 ff 03             	cmp    edi,0x3
c000a895:	74 32                	je     c000a8c9 <VAS::scanForEviction()+0x8d>
c000a897:	31 db                	xor    ebx,ebx
c000a899:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a89f:	75 c0                	jne    c000a861 <VAS::scanForEviction()+0x25>
c000a8a1:	89 da                	mov    edx,ebx
c000a8a3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a8a6:	c1 ea 16             	shr    edx,0x16
c000a8a9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a8ad:	75 b2                	jne    c000a861 <VAS::scanForEviction()+0x25>
c000a8af:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a8b5:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a8b8:	eb 91                	jmp    c000a84b <VAS::scanForEviction()+0xf>
c000a8ba:	f6 c2 20             	test   dl,0x20
c000a8bd:	74 13                	je     c000a8d2 <VAS::scanForEviction()+0x96>
c000a8bf:	83 e2 df             	and    edx,0xffffffdf
c000a8c2:	89 10                	mov    DWORD PTR [eax],edx
c000a8c4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a8c7:	eb b3                	jmp    c000a87c <VAS::scanForEviction()+0x40>
c000a8c9:	83 c4 10             	add    esp,0x10
c000a8cc:	31 c0                	xor    eax,eax
c000a8ce:	5b                   	pop    ebx
c000a8cf:	5e                   	pop    esi
c000a8d0:	5f                   	pop    edi
c000a8d1:	c3                   	ret    
c000a8d2:	83 ec 08             	sub    esp,0x8
c000a8d5:	89 d0                	mov    eax,edx
c000a8d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a8dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a8e0:	53                   	push   ebx
c000a8e1:	68 da dc 01 c0       	push   0xc001dcda
c000a8e6:	e8 31 02 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000a8eb:	58                   	pop    eax
c000a8ec:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a8ef:	5a                   	pop    edx
c000a8f0:	51                   	push   ecx
c000a8f1:	56                   	push   esi
c000a8f2:	e8 95 fd ff ff       	call   c000a68c <VAS::evict(unsigned long)>
c000a8f7:	5b                   	pop    ebx
c000a8f8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a8fb:	5f                   	pop    edi
c000a8fc:	50                   	push   eax
c000a8fd:	68 ee dc 01 c0       	push   0xc001dcee
c000a902:	e8 15 02 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000a907:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a90e:	83 c4 10             	add    esp,0x10
c000a911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	5b                   	pop    ebx
c000a919:	5e                   	pop    esi
c000a91a:	5f                   	pop    edi
c000a91b:	c3                   	ret    

c000a91c <mapVASFirstTime>:
c000a91c:	55                   	push   ebp
c000a91d:	57                   	push   edi
c000a91e:	56                   	push   esi
c000a91f:	53                   	push   ebx
c000a920:	83 ec 0c             	sub    esp,0xc
c000a923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a928:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a92b:	4a                   	dec    edx
c000a92c:	0f 84 8c 00 00 00    	je     c000a9be <mapVASFirstTime+0xa2>
c000a932:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a935:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a938:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a93d:	c1 e5 15             	shl    ebp,0x15
c000a940:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a945:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a94b:	29 eb                	sub    ebx,ebp
c000a94d:	29 ef                	sub    edi,ebp
c000a94f:	e8 09 d8 ff ff       	call   c000815d <Phys::allocatePage()>
c000a954:	83 ec 0c             	sub    esp,0xc
c000a957:	68 03 04 00 00       	push   0x403
c000a95c:	6a 01                	push   0x1
c000a95e:	53                   	push   ebx
c000a95f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a965:	50                   	push   eax
c000a966:	56                   	push   esi
c000a967:	e8 ec f8 ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a96c:	83 c4 20             	add    esp,0x20
c000a96f:	39 fb                	cmp    ebx,edi
c000a971:	75 dc                	jne    c000a94f <mapVASFirstTime+0x33>
c000a973:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a978:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a97d:	29 eb                	sub    ebx,ebp
c000a97f:	29 ef                	sub    edi,ebp
c000a981:	e8 d7 d7 ff ff       	call   c000815d <Phys::allocatePage()>
c000a986:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a98a:	19 d2                	sbb    edx,edx
c000a98c:	83 ec 0c             	sub    esp,0xc
c000a98f:	83 e2 04             	and    edx,0x4
c000a992:	81 c2 03 04 00 00    	add    edx,0x403
c000a998:	52                   	push   edx
c000a999:	6a 01                	push   0x1
c000a99b:	53                   	push   ebx
c000a99c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a9a2:	50                   	push   eax
c000a9a3:	56                   	push   esi
c000a9a4:	e8 af f8 ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a9a9:	83 c4 20             	add    esp,0x20
c000a9ac:	39 df                	cmp    edi,ebx
c000a9ae:	75 d1                	jne    c000a981 <mapVASFirstTime+0x65>
c000a9b0:	0f 20 d8             	mov    eax,cr3
c000a9b3:	0f 22 d8             	mov    cr3,eax
c000a9b6:	83 c4 0c             	add    esp,0xc
c000a9b9:	5b                   	pop    ebx
c000a9ba:	5e                   	pop    esi
c000a9bb:	5f                   	pop    edi
c000a9bc:	5d                   	pop    ebp
c000a9bd:	c3                   	ret    
c000a9be:	83 ec 0c             	sub    esp,0xc
c000a9c1:	68 01 dd 01 c0       	push   0xc001dd01
c000a9c6:	e8 51 01 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000a9cb:	83 c4 10             	add    esp,0x10
c000a9ce:	83 c4 0c             	add    esp,0xc
c000a9d1:	5b                   	pop    ebx
c000a9d2:	5e                   	pop    esi
c000a9d3:	5f                   	pop    edi
c000a9d4:	5d                   	pop    ebp
c000a9d5:	c3                   	ret    

c000a9d6 <__cxa_atexit>:
c000a9d6:	31 c0                	xor    eax,eax
c000a9d8:	c3                   	ret    

c000a9d9 <__cxa_finalize>:
c000a9d9:	c3                   	ret    

c000a9da <__stack_chk_fail>:
c000a9da:	55                   	push   ebp
c000a9db:	89 e5                	mov    ebp,esp
c000a9dd:	83 ec 10             	sub    esp,0x10
c000a9e0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a9e3:	68 1a dd 01 c0       	push   0xc001dd1a
c000a9e8:	e8 2f 01 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000a9ed:	58                   	pop    eax
c000a9ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a9f1:	5a                   	pop    edx
c000a9f2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a9f5:	68 1a dd 01 c0       	push   0xc001dd1a
c000a9fa:	e8 1d 01 00 00       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000a9ff:	c7 04 24 22 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd22
c000aa06:	e8 e0 5c 00 00       	call   c00106eb <KePanic(char const*)>
c000aa0b:	83 c4 10             	add    esp,0x10
c000aa0e:	c9                   	leave  
c000aa0f:	c3                   	ret    

c000aa10 <__cxa_pure_virtual>:
c000aa10:	83 ec 18             	sub    esp,0x18
c000aa13:	68 3a dd 01 c0       	push   0xc001dd3a
c000aa18:	e8 ce 5c 00 00       	call   c00106eb <KePanic(char const*)>
c000aa1d:	83 c4 1c             	add    esp,0x1c
c000aa20:	c3                   	ret    

c000aa21 <operator new[](unsigned long)>:
c000aa21:	e9 5f d4 ff ff       	jmp    c0007e85 <malloc>

c000aa26 <operator delete(void*, unsigned long)>:
c000aa26:	e9 7a d4 ff ff       	jmp    c0007ea5 <rfree>

c000aa2b <operator delete[](void*)>:
c000aa2b:	e9 75 d4 ff ff       	jmp    c0007ea5 <rfree>

c000aa30 <operator delete[](void*, unsigned long)>:
c000aa30:	e9 70 d4 ff ff       	jmp    c0007ea5 <rfree>

c000aa35 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000aa35:	55                   	push   ebp
c000aa36:	b9 04 00 00 00       	mov    ecx,0x4
c000aa3b:	57                   	push   edi
c000aa3c:	56                   	push   esi
c000aa3d:	be 4f d9 01 c0       	mov    esi,0xc001d94f
c000aa42:	53                   	push   ebx
c000aa43:	83 ec 20             	sub    esp,0x20
c000aa46:	a1 4e d9 01 c0       	mov    eax,ds:0xc001d94e
c000aa4b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000aa4f:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000aa53:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000aa57:	a1 5b d9 01 c0       	mov    eax,ds:0xc001d95b
c000aa5c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000aa60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa64:	fc                   	cld    
c000aa65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000aa67:	89 ee                	mov    esi,ebp
c000aa69:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000aa6d:	eb 02                	jmp    c000aa71 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000aa6f:	89 c6                	mov    esi,eax
c000aa71:	31 d2                	xor    edx,edx
c000aa73:	41                   	inc    ecx
c000aa74:	89 f0                	mov    eax,esi
c000aa76:	f7 f3                	div    ebx
c000aa78:	39 de                	cmp    esi,ebx
c000aa7a:	73 f3                	jae    c000aa6f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000aa7c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000aa7f:	eb 02                	jmp    c000aa83 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000aa81:	89 c5                	mov    ebp,eax
c000aa83:	31 d2                	xor    edx,edx
c000aa85:	49                   	dec    ecx
c000aa86:	89 e8                	mov    eax,ebp
c000aa88:	f7 f3                	div    ebx
c000aa8a:	39 dd                	cmp    ebp,ebx
c000aa8c:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000aa90:	88 11                	mov    BYTE PTR [ecx],dl
c000aa92:	73 ed                	jae    c000aa81 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000aa94:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000aa98:	83 c4 20             	add    esp,0x20
c000aa9b:	5b                   	pop    ebx
c000aa9c:	5e                   	pop    esi
c000aa9d:	5f                   	pop    edi
c000aa9e:	5d                   	pop    ebp
c000aa9f:	c3                   	ret    

c000aaa0 <Dbg::logc(char)>:
c000aaa0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aaa4:	f6 05 f0 09 02 c0 10 	test   BYTE PTR ds:0xc00209f0,0x10
c000aaab:	75 12                	jne    c000aabf <Dbg::logc(char)+0x1f>
c000aaad:	ba fd 03 00 00       	mov    edx,0x3fd
c000aab2:	ec                   	in     al,dx
c000aab3:	a8 20                	test   al,0x20
c000aab5:	74 fb                	je     c000aab2 <Dbg::logc(char)+0x12>
c000aab7:	ba f8 03 00 00       	mov    edx,0x3f8
c000aabc:	88 c8                	mov    al,cl
c000aabe:	ee                   	out    dx,al
c000aabf:	c3                   	ret    

c000aac0 <Dbg::logs(char*)>:
c000aac0:	53                   	push   ebx
c000aac1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000aac5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aac8:	84 c0                	test   al,al
c000aaca:	74 0f                	je     c000aadb <Dbg::logs(char*)+0x1b>
c000aacc:	50                   	push   eax
c000aacd:	43                   	inc    ebx
c000aace:	e8 cd ff ff ff       	call   c000aaa0 <Dbg::logc(char)>
c000aad3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aad6:	5a                   	pop    edx
c000aad7:	84 c0                	test   al,al
c000aad9:	75 f1                	jne    c000aacc <Dbg::logs(char*)+0xc>
c000aadb:	5b                   	pop    ebx
c000aadc:	c3                   	ret    

c000aadd <Dbg::logWriteInt(unsigned int)>:
c000aadd:	83 ec 10             	sub    esp,0x10
c000aae0:	6a 0a                	push   0xa
c000aae2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000aae6:	50                   	push   eax
c000aae7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaeb:	50                   	push   eax
c000aaec:	e8 44 ff ff ff       	call   c000aa35 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aaf1:	50                   	push   eax
c000aaf2:	e8 c9 ff ff ff       	call   c000aac0 <Dbg::logs(char*)>
c000aaf7:	83 c4 20             	add    esp,0x20
c000aafa:	c3                   	ret    

c000aafb <Dbg::logWriteIntBase(unsigned int, int)>:
c000aafb:	83 ec 10             	sub    esp,0x10
c000aafe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab02:	50                   	push   eax
c000ab03:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ab07:	50                   	push   eax
c000ab08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ab0c:	52                   	push   edx
c000ab0d:	e8 23 ff ff ff       	call   c000aa35 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ab12:	50                   	push   eax
c000ab13:	e8 a8 ff ff ff       	call   c000aac0 <Dbg::logs(char*)>
c000ab18:	83 c4 20             	add    esp,0x20
c000ab1b:	c3                   	ret    

c000ab1c <Dbg::kprintf(char const*, ...)>:
c000ab1c:	55                   	push   ebp
c000ab1d:	57                   	push   edi
c000ab1e:	56                   	push   esi
c000ab1f:	53                   	push   ebx
c000ab20:	83 ec 0c             	sub    esp,0xc
c000ab23:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ab27:	f6 05 f0 09 02 c0 10 	test   BYTE PTR ds:0xc00209f0,0x10
c000ab2e:	74 08                	je     c000ab38 <Dbg::kprintf(char const*, ...)+0x1c>
c000ab30:	83 c4 0c             	add    esp,0xc
c000ab33:	5b                   	pop    ebx
c000ab34:	5e                   	pop    esi
c000ab35:	5f                   	pop    edi
c000ab36:	5d                   	pop    ebp
c000ab37:	c3                   	ret    
c000ab38:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ab3c:	31 ff                	xor    edi,edi
c000ab3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab42:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab45:	84 c0                	test   al,al
c000ab47:	74 e7                	je     c000ab30 <Dbg::kprintf(char const*, ...)+0x14>
c000ab49:	8d 77 01             	lea    esi,[edi+0x1]
c000ab4c:	3c 25                	cmp    al,0x25
c000ab4e:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ab51:	75 47                	jne    c000ab9a <Dbg::kprintf(char const*, ...)+0x7e>
c000ab53:	83 c7 02             	add    edi,0x2
c000ab56:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ab59:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ab5c:	83 e8 25             	sub    eax,0x25
c000ab5f:	3c 53                	cmp    al,0x53
c000ab61:	0f 87 d2 00 00 00    	ja     c000ac39 <Dbg::kprintf(char const*, ...)+0x11d>
c000ab67:	25 ff 00 00 00       	and    eax,0xff
c000ab6c:	ff 24 85 50 dd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe22b0]
c000ab73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab77:	89 c8                	mov    eax,ecx
c000ab79:	83 c1 04             	add    ecx,0x4
c000ab7c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ab80:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ab82:	55                   	push   ebp
c000ab83:	e8 55 ff ff ff       	call   c000aadd <Dbg::logWriteInt(unsigned int)>
c000ab88:	58                   	pop    eax
c000ab89:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ab8c:	84 c0                	test   al,al
c000ab8e:	74 a0                	je     c000ab30 <Dbg::kprintf(char const*, ...)+0x14>
c000ab90:	8d 77 01             	lea    esi,[edi+0x1]
c000ab93:	3c 25                	cmp    al,0x25
c000ab95:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ab98:	74 b9                	je     c000ab53 <Dbg::kprintf(char const*, ...)+0x37>
c000ab9a:	50                   	push   eax
c000ab9b:	89 f7                	mov    edi,esi
c000ab9d:	e8 fe fe ff ff       	call   c000aaa0 <Dbg::logc(char)>
c000aba2:	89 ee                	mov    esi,ebp
c000aba4:	58                   	pop    eax
c000aba5:	eb e2                	jmp    c000ab89 <Dbg::kprintf(char const*, ...)+0x6d>
c000aba7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000abab:	89 c8                	mov    eax,ecx
c000abad:	83 c1 04             	add    ecx,0x4
c000abb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000abb2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000abb6:	50                   	push   eax
c000abb7:	e8 04 ff ff ff       	call   c000aac0 <Dbg::logs(char*)>
c000abbc:	58                   	pop    eax
c000abbd:	eb ca                	jmp    c000ab89 <Dbg::kprintf(char const*, ...)+0x6d>
c000abbf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abc3:	89 d0                	mov    eax,edx
c000abc5:	83 c2 04             	add    edx,0x4
c000abc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000abce:	50                   	push   eax
c000abcf:	e8 09 ff ff ff       	call   c000aadd <Dbg::logWriteInt(unsigned int)>
c000abd4:	58                   	pop    eax
c000abd5:	eb b2                	jmp    c000ab89 <Dbg::kprintf(char const*, ...)+0x6d>
c000abd7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abdb:	89 d0                	mov    eax,edx
c000abdd:	83 c2 04             	add    edx,0x4
c000abe0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000abe3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe7:	50                   	push   eax
c000abe8:	e8 b3 fe ff ff       	call   c000aaa0 <Dbg::logc(char)>
c000abed:	58                   	pop    eax
c000abee:	eb 99                	jmp    c000ab89 <Dbg::kprintf(char const*, ...)+0x6d>
c000abf0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000abf4:	89 c8                	mov    eax,ecx
c000abf6:	83 c1 04             	add    ecx,0x4
c000abf9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000abfd:	6a 10                	push   0x10
c000abff:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac01:	51                   	push   ecx
c000ac02:	e8 f4 fe ff ff       	call   c000aafb <Dbg::logWriteIntBase(unsigned int, int)>
c000ac07:	5d                   	pop    ebp
c000ac08:	58                   	pop    eax
c000ac09:	e9 7b ff ff ff       	jmp    c000ab89 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac12:	89 d0                	mov    eax,edx
c000ac14:	83 c2 08             	add    edx,0x8
c000ac17:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1b:	6a 10                	push   0x10
c000ac1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac1f:	50                   	push   eax
c000ac20:	e8 d6 fe ff ff       	call   c000aafb <Dbg::logWriteIntBase(unsigned int, int)>
c000ac25:	58                   	pop    eax
c000ac26:	5a                   	pop    edx
c000ac27:	e9 5d ff ff ff       	jmp    c000ab89 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac2c:	6a 25                	push   0x25
c000ac2e:	e8 6d fe ff ff       	call   c000aaa0 <Dbg::logc(char)>
c000ac33:	5a                   	pop    edx
c000ac34:	e9 50 ff ff ff       	jmp    c000ab89 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac39:	6a 25                	push   0x25
c000ac3b:	e8 60 fe ff ff       	call   c000aaa0 <Dbg::logc(char)>
c000ac40:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ac44:	50                   	push   eax
c000ac45:	e8 56 fe ff ff       	call   c000aaa0 <Dbg::logc(char)>
c000ac4a:	5a                   	pop    edx
c000ac4b:	59                   	pop    ecx
c000ac4c:	e9 38 ff ff ff       	jmp    c000ab89 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac51:	90                   	nop

c000ac52 <File::read(unsigned long long, void*, int*)>:
c000ac52:	53                   	push   ebx
c000ac53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac5b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac62:	3c 19                	cmp    al,0x19
c000ac64:	77 35                	ja     c000ac9b <File::read(unsigned long long, void*, int*)+0x49>
c000ac66:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000ac6d:	85 c0                	test   eax,eax
c000ac6f:	74 2a                	je     c000ac9b <File::read(unsigned long long, void*, int*)+0x49>
c000ac71:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac77:	85 c0                	test   eax,eax
c000ac79:	74 20                	je     c000ac9b <File::read(unsigned long long, void*, int*)+0x49>
c000ac7b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac7f:	74 21                	je     c000aca2 <File::read(unsigned long long, void*, int*)+0x50>
c000ac81:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac83:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac87:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac95:	5b                   	pop    ebx
c000ac96:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ac99:	ff e0                	jmp    eax
c000ac9b:	b8 0b 00 00 00       	mov    eax,0xb
c000aca0:	eb 05                	jmp    c000aca7 <File::read(unsigned long long, void*, int*)+0x55>
c000aca2:	b8 05 00 00 00       	mov    eax,0x5
c000aca7:	5b                   	pop    ebx
c000aca8:	c3                   	ret    
c000aca9:	90                   	nop

c000acaa <File::write(unsigned long long, void*, int*)>:
c000acaa:	53                   	push   ebx
c000acab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acaf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000acb3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000acba:	3c 19                	cmp    al,0x19
c000acbc:	77 35                	ja     c000acf3 <File::write(unsigned long long, void*, int*)+0x49>
c000acbe:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000acc5:	85 c0                	test   eax,eax
c000acc7:	74 2a                	je     c000acf3 <File::write(unsigned long long, void*, int*)+0x49>
c000acc9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000accf:	85 c0                	test   eax,eax
c000acd1:	74 20                	je     c000acf3 <File::write(unsigned long long, void*, int*)+0x49>
c000acd3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acd7:	74 21                	je     c000acfa <File::write(unsigned long long, void*, int*)+0x50>
c000acd9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acdb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000acdf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ace5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ace9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aced:	5b                   	pop    ebx
c000acee:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000acf1:	ff e0                	jmp    eax
c000acf3:	b8 0b 00 00 00       	mov    eax,0xb
c000acf8:	eb 05                	jmp    c000acff <File::write(unsigned long long, void*, int*)+0x55>
c000acfa:	b8 05 00 00 00       	mov    eax,0x5
c000acff:	5b                   	pop    ebx
c000ad00:	c3                   	ret    
c000ad01:	90                   	nop

c000ad02 <Directory::read(unsigned long long, void*, int*)>:
c000ad02:	53                   	push   ebx
c000ad03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad07:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad0b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad12:	3c 19                	cmp    al,0x19
c000ad14:	77 35                	ja     c000ad4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ad16:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000ad1d:	85 c0                	test   eax,eax
c000ad1f:	74 2a                	je     c000ad4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ad21:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad27:	85 c0                	test   eax,eax
c000ad29:	74 20                	je     c000ad4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ad2b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad2f:	74 21                	je     c000ad52 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ad31:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad33:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad37:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad45:	5b                   	pop    ebx
c000ad46:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ad49:	ff e0                	jmp    eax
c000ad4b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad50:	eb 05                	jmp    c000ad57 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ad52:	b8 05 00 00 00       	mov    eax,0x5
c000ad57:	5b                   	pop    ebx
c000ad58:	c3                   	ret    
c000ad59:	90                   	nop

c000ad5a <Directory::write(unsigned long long, void*, int*)>:
c000ad5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad5e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ad65:	b8 0b 00 00 00       	mov    eax,0xb
c000ad6a:	80 fa 19             	cmp    dl,0x19
c000ad6d:	77 18                	ja     c000ad87 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ad6f:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000ad76:	85 d2                	test   edx,edx
c000ad78:	74 0d                	je     c000ad87 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ad7a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ad81:	19 c0                	sbb    eax,eax
c000ad83:	83 e0 0a             	and    eax,0xa
c000ad86:	40                   	inc    eax
c000ad87:	c3                   	ret    

c000ad88 <File::isAtty()>:
c000ad88:	31 c0                	xor    eax,eax
c000ad8a:	c3                   	ret    
c000ad8b:	90                   	nop

c000ad8c <Directory::isAtty()>:
c000ad8c:	31 c0                	xor    eax,eax
c000ad8e:	c3                   	ret    
c000ad8f:	90                   	nop

c000ad90 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ad90:	b8 0a 00 00 00       	mov    eax,0xa
c000ad95:	c3                   	ret    

c000ad96 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ad96:	b8 0a 00 00 00       	mov    eax,0xa
c000ad9b:	c3                   	ret    

c000ad9c <Filesystem::allocateSwapfile(char const*, int)>:
c000ad9c:	31 c0                	xor    eax,eax
c000ad9e:	31 d2                	xor    edx,edx
c000ada0:	c3                   	ret    
c000ada1:	90                   	nop

c000ada2 <File::~File()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	ba 10 df 01 c0       	mov    edx,0xc001df10
c000adaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adae:	89 10                	mov    DWORD PTR [eax],edx
c000adb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	50                   	push   eax
c000adb8:	e8 ab e8 ff ff       	call   c0009668 <UnixFile::~UnixFile()>
c000adbd:	83 c4 10             	add    esp,0x10
c000adc0:	90                   	nop
c000adc1:	83 c4 0c             	add    esp,0xc
c000adc4:	c3                   	ret    
c000adc5:	90                   	nop

c000adc6 <File::~File()>:
c000adc6:	83 ec 0c             	sub    esp,0xc
c000adc9:	83 ec 0c             	sub    esp,0xc
c000adcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000add0:	e8 cd ff ff ff       	call   c000ada2 <File::~File()>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	83 ec 08             	sub    esp,0x8
c000addb:	68 14 01 00 00       	push   0x114
c000ade0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ade4:	e8 3d fc ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000ade9:	83 c4 10             	add    esp,0x10
c000adec:	83 c4 0c             	add    esp,0xc
c000adef:	c3                   	ret    

c000adf0 <Directory::~Directory()>:
c000adf0:	83 ec 0c             	sub    esp,0xc
c000adf3:	ba 2c df 01 c0       	mov    edx,0xc001df2c
c000adf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adfc:	89 10                	mov    DWORD PTR [eax],edx
c000adfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	50                   	push   eax
c000ae06:	e8 5d e8 ff ff       	call   c0009668 <UnixFile::~UnixFile()>
c000ae0b:	83 c4 10             	add    esp,0x10
c000ae0e:	90                   	nop
c000ae0f:	83 c4 0c             	add    esp,0xc
c000ae12:	c3                   	ret    
c000ae13:	90                   	nop

c000ae14 <Directory::~Directory()>:
c000ae14:	83 ec 0c             	sub    esp,0xc
c000ae17:	83 ec 0c             	sub    esp,0xc
c000ae1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae1e:	e8 cd ff ff ff       	call   c000adf0 <Directory::~Directory()>
c000ae23:	83 c4 10             	add    esp,0x10
c000ae26:	83 ec 08             	sub    esp,0x8
c000ae29:	68 14 01 00 00       	push   0x114
c000ae2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae32:	e8 ef fb ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000ae37:	83 c4 10             	add    esp,0x10
c000ae3a:	83 c4 0c             	add    esp,0xc
c000ae3d:	c3                   	ret    

c000ae3e <Filesystem::Filesystem()>:
c000ae3e:	ba a8 de 01 c0       	mov    edx,0xc001dea8
c000ae43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae47:	89 10                	mov    DWORD PTR [eax],edx
c000ae49:	8b 15 d4 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020ad4
c000ae4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ae56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae5a:	a3 d4 0a 02 c0       	mov    ds:0xc0020ad4,eax
c000ae5f:	90                   	nop
c000ae60:	c3                   	ret    
c000ae61:	90                   	nop

c000ae62 <Filesystem::~Filesystem()>:
c000ae62:	ba a8 de 01 c0       	mov    edx,0xc001dea8
c000ae67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae6b:	89 10                	mov    DWORD PTR [eax],edx
c000ae6d:	90                   	nop
c000ae6e:	c3                   	ret    
c000ae6f:	90                   	nop

c000ae70 <Filesystem::~Filesystem()>:
c000ae70:	83 ec 0c             	sub    esp,0xc
c000ae73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ae77:	e8 e6 ff ff ff       	call   c000ae62 <Filesystem::~Filesystem()>
c000ae7c:	83 c4 04             	add    esp,0x4
c000ae7f:	83 ec 08             	sub    esp,0x8
c000ae82:	6a 08                	push   0x8
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	e8 99 fb ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000ae8d:	83 c4 10             	add    esp,0x10
c000ae90:	83 c4 0c             	add    esp,0xc
c000ae93:	c3                   	ret    

c000ae94 <Fs::getcwd(Process*, char*, int)>:
c000ae94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae98:	31 c0                	xor    eax,eax
c000ae9a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ae9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000aea1:	7d 15                	jge    c000aeb8 <Fs::getcwd(Process*, char*, int)+0x24>
c000aea3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aea7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000aeae:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000aeb1:	84 c9                	test   cl,cl
c000aeb3:	74 06                	je     c000aebb <Fs::getcwd(Process*, char*, int)+0x27>
c000aeb5:	40                   	inc    eax
c000aeb6:	eb e2                	jmp    c000ae9a <Fs::getcwd(Process*, char*, int)+0x6>
c000aeb8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000aebb:	31 c0                	xor    eax,eax
c000aebd:	c3                   	ret    

c000aebe <Fs::initVFS()>:
c000aebe:	83 ec 18             	sub    esp,0x18
c000aec1:	6a 08                	push   0x8
c000aec3:	e8 bd cf ff ff       	call   c0007e85 <malloc>
c000aec8:	89 04 24             	mov    DWORD PTR [esp],eax
c000aecb:	e8 90 c3 00 00       	call   c0017260 <FAT::FAT()>
c000aed0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000aed7:	e8 a9 cf ff ff       	call   c0007e85 <malloc>
c000aedc:	89 04 24             	mov    DWORD PTR [esp],eax
c000aedf:	e8 74 d0 00 00       	call   c0017f58 <ISO9660::ISO9660()>
c000aee4:	83 c4 1c             	add    esp,0x1c
c000aee7:	c3                   	ret    

c000aee8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000aee8:	55                   	push   ebp
c000aee9:	57                   	push   edi
c000aeea:	56                   	push   esi
c000aeeb:	53                   	push   ebx
c000aeec:	81 ec 10 04 00 00    	sub    esp,0x410
c000aef2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000aef9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000af00:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000af07:	68 00 04 00 00       	push   0x400
c000af0c:	6a 00                	push   0x0
c000af0e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000af12:	56                   	push   esi
c000af13:	e8 d8 55 ff ff       	call   c00004f0 <memset>
c000af18:	83 c4 10             	add    esp,0x10
c000af1b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000af1f:	75 0b                	jne    c000af2c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000af21:	50                   	push   eax
c000af22:	50                   	push   eax
c000af23:	57                   	push   edi
c000af24:	56                   	push   esi
c000af25:	e8 f6 56 ff ff       	call   c0000620 <strcpy>
c000af2a:	eb 41                	jmp    c000af6d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000af2c:	8a 07                	mov    al,BYTE PTR [edi]
c000af2e:	3c 5c                	cmp    al,0x5c
c000af30:	74 04                	je     c000af36 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000af32:	3c 2f                	cmp    al,0x2f
c000af34:	75 18                	jne    c000af4e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000af36:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000af39:	3c 60                	cmp    al,0x60
c000af3b:	7e 03                	jle    c000af40 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000af3d:	83 e8 20             	sub    eax,0x20
c000af40:	88 04 24             	mov    BYTE PTR [esp],al
c000af43:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000af4a:	50                   	push   eax
c000af4b:	50                   	push   eax
c000af4c:	eb 18                	jmp    c000af66 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000af4e:	50                   	push   eax
c000af4f:	50                   	push   eax
c000af50:	55                   	push   ebp
c000af51:	56                   	push   esi
c000af52:	e8 c9 56 ff ff       	call   c0000620 <strcpy>
c000af57:	5a                   	pop    edx
c000af58:	59                   	pop    ecx
c000af59:	68 e5 ea 01 c0       	push   0xc001eae5
c000af5e:	56                   	push   esi
c000af5f:	e8 7c 58 ff ff       	call   c00007e0 <strcat>
c000af64:	5d                   	pop    ebp
c000af65:	58                   	pop    eax
c000af66:	57                   	push   edi
c000af67:	56                   	push   esi
c000af68:	e8 73 58 ff ff       	call   c00007e0 <strcat>
c000af6d:	83 c4 10             	add    esp,0x10
c000af70:	8a 04 24             	mov    al,BYTE PTR [esp]
c000af73:	3c 60                	cmp    al,0x60
c000af75:	7e 03                	jle    c000af7a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000af77:	83 e8 20             	sub    eax,0x20
c000af7a:	88 04 24             	mov    BYTE PTR [esp],al
c000af7d:	88 03                	mov    BYTE PTR [ebx],al
c000af7f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000af86:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000af8c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000af90:	bf 03 00 00 00       	mov    edi,0x3
c000af95:	b8 03 00 00 00       	mov    eax,0x3
c000af9a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000af9d:	84 d2                	test   dl,dl
c000af9f:	0f 84 91 00 00 00    	je     c000b036 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000afa5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000afa8:	80 fa 5c             	cmp    dl,0x5c
c000afab:	74 05                	je     c000afb2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000afad:	80 fa 2f             	cmp    dl,0x2f
c000afb0:	75 12                	jne    c000afc4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000afb2:	89 c5                	mov    ebp,eax
c000afb4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000afb9:	74 09                	je     c000afc4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000afbb:	40                   	inc    eax
c000afbc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000afc0:	89 cf                	mov    edi,ecx
c000afc2:	eb d6                	jmp    c000af9a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000afc4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000afc9:	75 5b                	jne    c000b026 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000afcb:	80 fa 2e             	cmp    dl,0x2e
c000afce:	75 56                	jne    c000b026 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000afd0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000afd4:	74 19                	je     c000afef <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000afd6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000afdb:	74 53                	je     c000b030 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000afdd:	89 f9                	mov    ecx,edi
c000afdf:	41                   	inc    ecx
c000afe0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000afe3:	80 fa 2f             	cmp    dl,0x2f
c000afe6:	74 f7                	je     c000afdf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000afe8:	80 fa 5c             	cmp    dl,0x5c
c000afeb:	74 f2                	je     c000afdf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000afed:	eb d1                	jmp    c000afc0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000afef:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aff4:	74 3a                	je     c000b030 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aff6:	83 f8 03             	cmp    eax,0x3
c000aff9:	74 c5                	je     c000afc0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000affb:	41                   	inc    ecx
c000affc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000afff:	80 fa 2f             	cmp    dl,0x2f
c000b002:	74 f7                	je     c000affb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b004:	80 fa 5c             	cmp    dl,0x5c
c000b007:	74 f2                	je     c000affb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b009:	48                   	dec    eax
c000b00a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b00e:	75 06                	jne    c000b016 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b010:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b014:	eb f3                	jmp    c000b009 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b016:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b01a:	74 07                	je     c000b023 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b01c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b020:	48                   	dec    eax
c000b021:	eb f3                	jmp    c000b016 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b023:	40                   	inc    eax
c000b024:	eb 9a                	jmp    c000afc0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b026:	80 fa 2f             	cmp    dl,0x2f
c000b029:	74 95                	je     c000afc0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b02b:	80 fa 5c             	cmp    dl,0x5c
c000b02e:	74 90                	je     c000afc0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b030:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b033:	40                   	inc    eax
c000b034:	eb 8a                	jmp    c000afc0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b036:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b03a:	83 ec 0c             	sub    esp,0xc
c000b03d:	53                   	push   ebx
c000b03e:	e8 1d 55 ff ff       	call   c0000560 <strlen>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b04b:	75 26                	jne    c000b073 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b04d:	83 ec 0c             	sub    esp,0xc
c000b050:	53                   	push   ebx
c000b051:	e8 0a 55 ff ff       	call   c0000560 <strlen>
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b05e:	74 26                	je     c000b086 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	53                   	push   ebx
c000b064:	e8 f7 54 ff ff       	call   c0000560 <strlen>
c000b069:	83 c4 10             	add    esp,0x10
c000b06c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b071:	eb c7                	jmp    c000b03a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	53                   	push   ebx
c000b077:	e8 e4 54 ff ff       	call   c0000560 <strlen>
c000b07c:	83 c4 10             	add    esp,0x10
c000b07f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b084:	74 c7                	je     c000b04d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b086:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b08c:	5b                   	pop    ebx
c000b08d:	5e                   	pop    esi
c000b08e:	5f                   	pop    edi
c000b08f:	5d                   	pop    ebp
c000b090:	c3                   	ret    
c000b091:	90                   	nop

c000b092 <File::File(char const*, Process*)>:
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b099:	83 ec 08             	sub    esp,0x8
c000b09c:	6a 00                	push   0x0
c000b09e:	50                   	push   eax
c000b09f:	e8 e2 e3 ff ff       	call   c0009486 <UnixFile::UnixFile(int)>
c000b0a4:	83 c4 10             	add    esp,0x10
c000b0a7:	ba 10 df 01 c0       	mov    edx,0xc001df10
c000b0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b0:	89 10                	mov    DWORD PTR [eax],edx
c000b0b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c0:	83 c0 0d             	add    eax,0xd
c000b0c3:	83 ec 04             	sub    esp,0x4
c000b0c6:	52                   	push   edx
c000b0c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0cb:	50                   	push   eax
c000b0cc:	e8 17 fe ff ff       	call   c000aee8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0db:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0fa:	25 ff 00 00 00       	and    eax,0xff
c000b0ff:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b106:	85 c0                	test   eax,eax
c000b108:	74 42                	je     c000b14c <File::File(char const*, Process*)+0xba>
c000b10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b114:	25 ff 00 00 00       	and    eax,0xff
c000b119:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b120:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b126:	85 c0                	test   eax,eax
c000b128:	75 22                	jne    c000b14c <File::File(char const*, Process*)+0xba>
c000b12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b134:	25 ff 00 00 00       	and    eax,0xff
c000b139:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b140:	83 ec 0c             	sub    esp,0xc
c000b143:	50                   	push   eax
c000b144:	e8 f9 1f 00 00       	call   c000d142 <LogicalDisk::mount()>
c000b149:	83 c4 10             	add    esp,0x10
c000b14c:	90                   	nop
c000b14d:	83 c4 0c             	add    esp,0xc
c000b150:	c3                   	ret    
c000b151:	90                   	nop

c000b152 <File::open(FileOpenMode)>:
c000b152:	53                   	push   ebx
c000b153:	b8 0b 00 00 00       	mov    eax,0xb
c000b158:	83 ec 08             	sub    esp,0x8
c000b15b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b15f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b166:	80 fa 19             	cmp    dl,0x19
c000b169:	77 40                	ja     c000b1ab <File::open(FileOpenMode)+0x59>
c000b16b:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b172:	85 d2                	test   edx,edx
c000b174:	74 35                	je     c000b1ab <File::open(FileOpenMode)+0x59>
c000b176:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b17c:	85 d2                	test   edx,edx
c000b17e:	74 2b                	je     c000b1ab <File::open(FileOpenMode)+0x59>
c000b180:	b8 06 00 00 00       	mov    eax,0x6
c000b185:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b189:	75 20                	jne    c000b1ab <File::open(FileOpenMode)+0x59>
c000b18b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b18d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b193:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b197:	51                   	push   ecx
c000b198:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b19b:	51                   	push   ecx
c000b19c:	52                   	push   edx
c000b19d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1a0:	83 c4 10             	add    esp,0x10
c000b1a3:	85 c0                	test   eax,eax
c000b1a5:	75 04                	jne    c000b1ab <File::open(FileOpenMode)+0x59>
c000b1a7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1ab:	83 c4 08             	add    esp,0x8
c000b1ae:	5b                   	pop    ebx
c000b1af:	c3                   	ret    

c000b1b0 <File::close()>:
c000b1b0:	53                   	push   ebx
c000b1b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b1b6:	83 ec 08             	sub    esp,0x8
c000b1b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1bd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1c4:	80 fa 19             	cmp    dl,0x19
c000b1c7:	77 41                	ja     c000b20a <File::close()+0x5a>
c000b1c9:	8b 1c 95 40 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b1d0:	85 db                	test   ebx,ebx
c000b1d2:	74 36                	je     c000b20a <File::close()+0x5a>
c000b1d4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b1db:	74 2d                	je     c000b20a <File::close()+0x5a>
c000b1dd:	b8 05 00 00 00       	mov    eax,0x5
c000b1e2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1e6:	74 22                	je     c000b20a <File::close()+0x5a>
c000b1e8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1ec:	8b 04 95 40 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd0c0]
c000b1f3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1f9:	53                   	push   ebx
c000b1fa:	53                   	push   ebx
c000b1fb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1fd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b203:	50                   	push   eax
c000b204:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b207:	83 c4 10             	add    esp,0x10
c000b20a:	83 c4 08             	add    esp,0x8
c000b20d:	5b                   	pop    ebx
c000b20e:	c3                   	ret    
c000b20f:	90                   	nop

c000b210 <File::seek(unsigned long long)>:
c000b210:	56                   	push   esi
c000b211:	53                   	push   ebx
c000b212:	b8 0b 00 00 00       	mov    eax,0xb
c000b217:	51                   	push   ecx
c000b218:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b21c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b220:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b227:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b22b:	80 fa 19             	cmp    dl,0x19
c000b22e:	77 31                	ja     c000b261 <File::seek(unsigned long long)+0x51>
c000b230:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b237:	85 d2                	test   edx,edx
c000b239:	74 26                	je     c000b261 <File::seek(unsigned long long)+0x51>
c000b23b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b241:	85 d2                	test   edx,edx
c000b243:	74 1c                	je     c000b261 <File::seek(unsigned long long)+0x51>
c000b245:	b8 05 00 00 00       	mov    eax,0x5
c000b24a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b24e:	74 11                	je     c000b261 <File::seek(unsigned long long)+0x51>
c000b250:	8b 02                	mov    eax,DWORD PTR [edx]
c000b252:	53                   	push   ebx
c000b253:	51                   	push   ecx
c000b254:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b25a:	52                   	push   edx
c000b25b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b25e:	83 c4 10             	add    esp,0x10
c000b261:	5a                   	pop    edx
c000b262:	5b                   	pop    ebx
c000b263:	5e                   	pop    esi
c000b264:	c3                   	ret    
c000b265:	90                   	nop

c000b266 <File::tell(unsigned long long*)>:
c000b266:	83 ec 0c             	sub    esp,0xc
c000b269:	b8 0b 00 00 00       	mov    eax,0xb
c000b26e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b272:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b279:	80 fa 19             	cmp    dl,0x19
c000b27c:	77 34                	ja     c000b2b2 <File::tell(unsigned long long*)+0x4c>
c000b27e:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b285:	85 d2                	test   edx,edx
c000b287:	74 29                	je     c000b2b2 <File::tell(unsigned long long*)+0x4c>
c000b289:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b28f:	85 d2                	test   edx,edx
c000b291:	74 1f                	je     c000b2b2 <File::tell(unsigned long long*)+0x4c>
c000b293:	b8 05 00 00 00       	mov    eax,0x5
c000b298:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b29c:	74 14                	je     c000b2b2 <File::tell(unsigned long long*)+0x4c>
c000b29e:	50                   	push   eax
c000b29f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b2a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2a5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2ab:	52                   	push   edx
c000b2ac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	83 c4 0c             	add    esp,0xc
c000b2b5:	c3                   	ret    

c000b2b6 <File::rewind()>:
c000b2b6:	83 ec 10             	sub    esp,0x10
c000b2b9:	6a 00                	push   0x0
c000b2bb:	6a 00                	push   0x0
c000b2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2c1:	e8 4a ff ff ff       	call   c000b210 <File::seek(unsigned long long)>
c000b2c6:	83 c4 1c             	add    esp,0x1c
c000b2c9:	c3                   	ret    

c000b2ca <File::unlink()>:
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b2d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2dd:	80 f9 19             	cmp    cl,0x19
c000b2e0:	77 2f                	ja     c000b311 <File::unlink()+0x47>
c000b2e2:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b2e9:	85 c9                	test   ecx,ecx
c000b2eb:	74 24                	je     c000b311 <File::unlink()+0x47>
c000b2ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2f3:	85 c9                	test   ecx,ecx
c000b2f5:	74 1a                	je     c000b311 <File::unlink()+0x47>
c000b2f7:	b8 06 00 00 00       	mov    eax,0x6
c000b2fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b300:	75 0f                	jne    c000b311 <File::unlink()+0x47>
c000b302:	83 c2 0d             	add    edx,0xd
c000b305:	50                   	push   eax
c000b306:	50                   	push   eax
c000b307:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b309:	52                   	push   edx
c000b30a:	51                   	push   ecx
c000b30b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b30e:	83 c4 10             	add    esp,0x10
c000b311:	83 c4 0c             	add    esp,0xc
c000b314:	c3                   	ret    
c000b315:	90                   	nop

c000b316 <File::rename(char const*)>:
c000b316:	83 ec 0c             	sub    esp,0xc
c000b319:	b8 0b 00 00 00       	mov    eax,0xb
c000b31e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b322:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b329:	80 f9 19             	cmp    cl,0x19
c000b32c:	77 32                	ja     c000b360 <File::rename(char const*)+0x4a>
c000b32e:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b335:	85 c9                	test   ecx,ecx
c000b337:	74 27                	je     c000b360 <File::rename(char const*)+0x4a>
c000b339:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b33f:	85 c9                	test   ecx,ecx
c000b341:	74 1d                	je     c000b360 <File::rename(char const*)+0x4a>
c000b343:	b8 06 00 00 00       	mov    eax,0x6
c000b348:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b34c:	75 12                	jne    c000b360 <File::rename(char const*)+0x4a>
c000b34e:	83 c2 0d             	add    edx,0xd
c000b351:	50                   	push   eax
c000b352:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b354:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b358:	52                   	push   edx
c000b359:	51                   	push   ecx
c000b35a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b35d:	83 c4 10             	add    esp,0x10
c000b360:	83 c4 0c             	add    esp,0xc
c000b363:	c3                   	ret    

c000b364 <File::chfatattr(unsigned char, unsigned char)>:
c000b364:	57                   	push   edi
c000b365:	b8 0b 00 00 00       	mov    eax,0xb
c000b36a:	56                   	push   esi
c000b36b:	53                   	push   ebx
c000b36c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b370:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b374:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b37b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b37f:	80 f9 19             	cmp    cl,0x19
c000b382:	77 37                	ja     c000b3bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b384:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b38b:	85 c9                	test   ecx,ecx
c000b38d:	74 2c                	je     c000b3bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b38f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b395:	85 c9                	test   ecx,ecx
c000b397:	74 22                	je     c000b3bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b399:	b8 06 00 00 00       	mov    eax,0x6
c000b39e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3a2:	75 17                	jne    c000b3bb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b3a4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b3a6:	89 f0                	mov    eax,esi
c000b3a8:	83 c2 0d             	add    edx,0xd
c000b3ab:	0f b6 f0             	movzx  esi,al
c000b3ae:	0f b6 db             	movzx  ebx,bl
c000b3b1:	56                   	push   esi
c000b3b2:	53                   	push   ebx
c000b3b3:	52                   	push   edx
c000b3b4:	51                   	push   ecx
c000b3b5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	5b                   	pop    ebx
c000b3bc:	5e                   	pop    esi
c000b3bd:	5f                   	pop    edi
c000b3be:	c3                   	ret    
c000b3bf:	90                   	nop

c000b3c0 <File::exists()>:
c000b3c0:	83 ec 0c             	sub    esp,0xc
c000b3c3:	31 c0                	xor    eax,eax
c000b3c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3c9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3d0:	80 f9 19             	cmp    cl,0x19
c000b3d3:	77 24                	ja     c000b3f9 <File::exists()+0x39>
c000b3d5:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b3dc:	85 c9                	test   ecx,ecx
c000b3de:	74 19                	je     c000b3f9 <File::exists()+0x39>
c000b3e0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3e6:	85 c9                	test   ecx,ecx
c000b3e8:	74 0f                	je     c000b3f9 <File::exists()+0x39>
c000b3ea:	83 c2 0d             	add    edx,0xd
c000b3ed:	50                   	push   eax
c000b3ee:	50                   	push   eax
c000b3ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3f1:	52                   	push   edx
c000b3f2:	51                   	push   ecx
c000b3f3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b3f6:	83 c4 10             	add    esp,0x10
c000b3f9:	83 c4 0c             	add    esp,0xc
c000b3fc:	c3                   	ret    
c000b3fd:	90                   	nop

c000b3fe <File::stat(unsigned long long*, bool*)>:
c000b3fe:	56                   	push   esi
c000b3ff:	53                   	push   ebx
c000b400:	50                   	push   eax
c000b401:	b8 0b 00 00 00       	mov    eax,0xb
c000b406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b40a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b40e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b419:	80 f9 19             	cmp    cl,0x19
c000b41c:	77 3d                	ja     c000b45b <File::stat(unsigned long long*, bool*)+0x5d>
c000b41e:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b425:	85 c9                	test   ecx,ecx
c000b427:	74 32                	je     c000b45b <File::stat(unsigned long long*, bool*)+0x5d>
c000b429:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b42f:	85 c9                	test   ecx,ecx
c000b431:	74 28                	je     c000b45b <File::stat(unsigned long long*, bool*)+0x5d>
c000b433:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b435:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b439:	74 13                	je     c000b44e <File::stat(unsigned long long*, bool*)+0x50>
c000b43b:	83 ec 04             	sub    esp,0x4
c000b43e:	56                   	push   esi
c000b43f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b445:	51                   	push   ecx
c000b446:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b449:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b44c:	eb 0a                	jmp    c000b458 <File::stat(unsigned long long*, bool*)+0x5a>
c000b44e:	53                   	push   ebx
c000b44f:	83 c2 0d             	add    edx,0xd
c000b452:	56                   	push   esi
c000b453:	52                   	push   edx
c000b454:	51                   	push   ecx
c000b455:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	5a                   	pop    edx
c000b45c:	5b                   	pop    ebx
c000b45d:	5e                   	pop    esi
c000b45e:	c3                   	ret    

c000b45f <Fs::setcwd(Process*, char*)>:
c000b45f:	55                   	push   ebp
c000b460:	57                   	push   edi
c000b461:	56                   	push   esi
c000b462:	53                   	push   ebx
c000b463:	81 ec 20 02 00 00    	sub    esp,0x220
c000b469:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b470:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b476:	57                   	push   edi
c000b477:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b47e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b482:	56                   	push   esi
c000b483:	e8 60 fa ff ff       	call   c000aee8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b488:	89 34 24             	mov    DWORD PTR [esp],esi
c000b48b:	e8 d0 50 ff ff       	call   c0000560 <strlen>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	83 f8 02             	cmp    eax,0x2
c000b496:	77 15                	ja     c000b4ad <Fs::setcwd(Process*, char*)+0x4e>
c000b498:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b49d:	83 eb 41             	sub    ebx,0x41
c000b4a0:	8b 04 9d 40 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0c0]
c000b4a7:	85 c0                	test   eax,eax
c000b4a9:	75 1c                	jne    c000b4c7 <Fs::setcwd(Process*, char*)+0x68>
c000b4ab:	eb 2f                	jmp    c000b4dc <Fs::setcwd(Process*, char*)+0x7d>
c000b4ad:	83 ec 0c             	sub    esp,0xc
c000b4b0:	56                   	push   esi
c000b4b1:	e8 aa 50 ff ff       	call   c0000560 <strlen>
c000b4b6:	83 c4 10             	add    esp,0x10
c000b4b9:	83 f8 03             	cmp    eax,0x3
c000b4bc:	75 57                	jne    c000b515 <Fs::setcwd(Process*, char*)+0xb6>
c000b4be:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b4c3:	75 50                	jne    c000b515 <Fs::setcwd(Process*, char*)+0xb6>
c000b4c5:	eb d1                	jmp    c000b498 <Fs::setcwd(Process*, char*)+0x39>
c000b4c7:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b4ce:	75 0c                	jne    c000b4dc <Fs::setcwd(Process*, char*)+0x7d>
c000b4d0:	83 ec 0c             	sub    esp,0xc
c000b4d3:	50                   	push   eax
c000b4d4:	e8 69 1c 00 00       	call   c000d142 <LogicalDisk::mount()>
c000b4d9:	83 c4 10             	add    esp,0x10
c000b4dc:	b8 03 00 00 00       	mov    eax,0x3
c000b4e1:	83 fb 19             	cmp    ebx,0x19
c000b4e4:	0f 87 c6 00 00 00    	ja     c000b5b0 <Fs::setcwd(Process*, char*)+0x151>
c000b4ea:	8b 14 9d 40 2f 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd0c0]
c000b4f1:	b8 05 00 00 00       	mov    eax,0x5
c000b4f6:	85 d2                	test   edx,edx
c000b4f8:	0f 84 b2 00 00 00    	je     c000b5b0 <Fs::setcwd(Process*, char*)+0x151>
c000b4fe:	b8 06 00 00 00       	mov    eax,0x6
c000b503:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b50a:	0f 85 92 00 00 00    	jne    c000b5a2 <Fs::setcwd(Process*, char*)+0x143>
c000b510:	e9 9b 00 00 00       	jmp    c000b5b0 <Fs::setcwd(Process*, char*)+0x151>
c000b515:	83 ec 0c             	sub    esp,0xc
c000b518:	68 14 01 00 00       	push   0x114
c000b51d:	e8 63 c9 ff ff       	call   c0007e85 <malloc>
c000b522:	83 c4 0c             	add    esp,0xc
c000b525:	89 c3                	mov    ebx,eax
c000b527:	55                   	push   ebp
c000b528:	56                   	push   esi
c000b529:	50                   	push   eax
c000b52a:	e8 63 fb ff ff       	call   c000b092 <File::File(char const*, Process*)>
c000b52f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b534:	83 c4 0c             	add    esp,0xc
c000b537:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b53b:	50                   	push   eax
c000b53c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b540:	50                   	push   eax
c000b541:	53                   	push   ebx
c000b542:	e8 b7 fe ff ff       	call   c000b3fe <File::stat(unsigned long long*, bool*)>
c000b547:	83 c4 10             	add    esp,0x10
c000b54a:	83 f8 02             	cmp    eax,0x2
c000b54d:	74 04                	je     c000b553 <Fs::setcwd(Process*, char*)+0xf4>
c000b54f:	85 c0                	test   eax,eax
c000b551:	74 1c                	je     c000b56f <Fs::setcwd(Process*, char*)+0x110>
c000b553:	b8 01 00 00 00       	mov    eax,0x1
c000b558:	85 db                	test   ebx,ebx
c000b55a:	74 54                	je     c000b5b0 <Fs::setcwd(Process*, char*)+0x151>
c000b55c:	83 ec 0c             	sub    esp,0xc
c000b55f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b561:	53                   	push   ebx
c000b562:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b565:	83 c4 10             	add    esp,0x10
c000b568:	b8 01 00 00 00       	mov    eax,0x1
c000b56d:	eb 41                	jmp    c000b5b0 <Fs::setcwd(Process*, char*)+0x151>
c000b56f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b574:	75 1c                	jne    c000b592 <Fs::setcwd(Process*, char*)+0x133>
c000b576:	b8 02 00 00 00       	mov    eax,0x2
c000b57b:	85 db                	test   ebx,ebx
c000b57d:	74 31                	je     c000b5b0 <Fs::setcwd(Process*, char*)+0x151>
c000b57f:	83 ec 0c             	sub    esp,0xc
c000b582:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b584:	53                   	push   ebx
c000b585:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	b8 02 00 00 00       	mov    eax,0x2
c000b590:	eb 1e                	jmp    c000b5b0 <Fs::setcwd(Process*, char*)+0x151>
c000b592:	85 db                	test   ebx,ebx
c000b594:	74 0c                	je     c000b5a2 <Fs::setcwd(Process*, char*)+0x143>
c000b596:	83 ec 0c             	sub    esp,0xc
c000b599:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b59b:	53                   	push   ebx
c000b59c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b59f:	83 c4 10             	add    esp,0x10
c000b5a2:	50                   	push   eax
c000b5a3:	50                   	push   eax
c000b5a4:	56                   	push   esi
c000b5a5:	57                   	push   edi
c000b5a6:	e8 75 50 ff ff       	call   c0000620 <strcpy>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	31 c0                	xor    eax,eax
c000b5b0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b5b6:	5b                   	pop    ebx
c000b5b7:	5e                   	pop    esi
c000b5b8:	5f                   	pop    edi
c000b5b9:	5d                   	pop    ebp
c000b5ba:	c3                   	ret    
c000b5bb:	90                   	nop

c000b5bc <Directory::Directory(char const*, Process*)>:
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5c3:	83 ec 08             	sub    esp,0x8
c000b5c6:	6a 00                	push   0x0
c000b5c8:	50                   	push   eax
c000b5c9:	e8 b8 de ff ff       	call   c0009486 <UnixFile::UnixFile(int)>
c000b5ce:	83 c4 10             	add    esp,0x10
c000b5d1:	ba 2c df 01 c0       	mov    edx,0xc001df2c
c000b5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5da:	89 10                	mov    DWORD PTR [eax],edx
c000b5dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5e0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ea:	83 c0 0d             	add    eax,0xd
c000b5ed:	83 ec 04             	sub    esp,0x4
c000b5f0:	52                   	push   edx
c000b5f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f5:	50                   	push   eax
c000b5f6:	e8 ed f8 ff ff       	call   c000aee8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b602:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b605:	8d 50 bf             	lea    edx,[eax-0x41]
c000b608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b60c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b616:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b61e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b624:	25 ff 00 00 00       	and    eax,0xff
c000b629:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b630:	85 c0                	test   eax,eax
c000b632:	74 42                	je     c000b676 <Directory::Directory(char const*, Process*)+0xba>
c000b634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b638:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b63e:	25 ff 00 00 00       	and    eax,0xff
c000b643:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b64a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b650:	85 c0                	test   eax,eax
c000b652:	75 22                	jne    c000b676 <Directory::Directory(char const*, Process*)+0xba>
c000b654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b658:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b65e:	25 ff 00 00 00       	and    eax,0xff
c000b663:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000b66a:	83 ec 0c             	sub    esp,0xc
c000b66d:	50                   	push   eax
c000b66e:	e8 cf 1a 00 00       	call   c000d142 <LogicalDisk::mount()>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	90                   	nop
c000b677:	83 c4 0c             	add    esp,0xc
c000b67a:	c3                   	ret    
c000b67b:	90                   	nop

c000b67c <Directory::open()>:
c000b67c:	53                   	push   ebx
c000b67d:	b8 0b 00 00 00       	mov    eax,0xb
c000b682:	83 ec 08             	sub    esp,0x8
c000b685:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b689:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b690:	80 fa 19             	cmp    dl,0x19
c000b693:	77 3d                	ja     c000b6d2 <Directory::open()+0x56>
c000b695:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b69c:	85 d2                	test   edx,edx
c000b69e:	74 32                	je     c000b6d2 <Directory::open()+0x56>
c000b6a0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b6a6:	85 d2                	test   edx,edx
c000b6a8:	74 28                	je     c000b6d2 <Directory::open()+0x56>
c000b6aa:	b8 06 00 00 00       	mov    eax,0x6
c000b6af:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b6b3:	75 1d                	jne    c000b6d2 <Directory::open()+0x56>
c000b6b5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b6bb:	50                   	push   eax
c000b6bc:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6be:	51                   	push   ecx
c000b6bf:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b6c2:	51                   	push   ecx
c000b6c3:	52                   	push   edx
c000b6c4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b6c7:	83 c4 10             	add    esp,0x10
c000b6ca:	85 c0                	test   eax,eax
c000b6cc:	75 04                	jne    c000b6d2 <Directory::open()+0x56>
c000b6ce:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b6d2:	83 c4 08             	add    esp,0x8
c000b6d5:	5b                   	pop    ebx
c000b6d6:	c3                   	ret    
c000b6d7:	90                   	nop

c000b6d8 <Directory::close()>:
c000b6d8:	53                   	push   ebx
c000b6d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b6de:	83 ec 08             	sub    esp,0x8
c000b6e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b6e5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b6ec:	80 fa 19             	cmp    dl,0x19
c000b6ef:	77 41                	ja     c000b732 <Directory::close()+0x5a>
c000b6f1:	8b 1c 95 40 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b6f8:	85 db                	test   ebx,ebx
c000b6fa:	74 36                	je     c000b732 <Directory::close()+0x5a>
c000b6fc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b703:	74 2d                	je     c000b732 <Directory::close()+0x5a>
c000b705:	b8 05 00 00 00       	mov    eax,0x5
c000b70a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b70e:	74 22                	je     c000b732 <Directory::close()+0x5a>
c000b710:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b714:	8b 04 95 40 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd0c0]
c000b71b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b721:	53                   	push   ebx
c000b722:	53                   	push   ebx
c000b723:	8b 10                	mov    edx,DWORD PTR [eax]
c000b725:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b72b:	50                   	push   eax
c000b72c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b72f:	83 c4 10             	add    esp,0x10
c000b732:	83 c4 08             	add    esp,0x8
c000b735:	5b                   	pop    ebx
c000b736:	c3                   	ret    
c000b737:	90                   	nop

c000b738 <Directory::unlink()>:
c000b738:	83 ec 0c             	sub    esp,0xc
c000b73b:	b8 0b 00 00 00       	mov    eax,0xb
c000b740:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b744:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b74b:	80 f9 19             	cmp    cl,0x19
c000b74e:	77 2f                	ja     c000b77f <Directory::unlink()+0x47>
c000b750:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b757:	85 c9                	test   ecx,ecx
c000b759:	74 24                	je     c000b77f <Directory::unlink()+0x47>
c000b75b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b761:	85 c9                	test   ecx,ecx
c000b763:	74 1a                	je     c000b77f <Directory::unlink()+0x47>
c000b765:	b8 06 00 00 00       	mov    eax,0x6
c000b76a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b76e:	75 0f                	jne    c000b77f <Directory::unlink()+0x47>
c000b770:	83 c2 0d             	add    edx,0xd
c000b773:	50                   	push   eax
c000b774:	50                   	push   eax
c000b775:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b777:	52                   	push   edx
c000b778:	51                   	push   ecx
c000b779:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	83 c4 0c             	add    esp,0xc
c000b782:	c3                   	ret    
c000b783:	90                   	nop

c000b784 <Directory::rename(char const*)>:
c000b784:	83 ec 0c             	sub    esp,0xc
c000b787:	b8 0b 00 00 00       	mov    eax,0xb
c000b78c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b790:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b797:	80 f9 19             	cmp    cl,0x19
c000b79a:	77 32                	ja     c000b7ce <Directory::rename(char const*)+0x4a>
c000b79c:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b7a3:	85 c9                	test   ecx,ecx
c000b7a5:	74 27                	je     c000b7ce <Directory::rename(char const*)+0x4a>
c000b7a7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b7ad:	85 c9                	test   ecx,ecx
c000b7af:	74 1d                	je     c000b7ce <Directory::rename(char const*)+0x4a>
c000b7b1:	b8 06 00 00 00       	mov    eax,0x6
c000b7b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b7ba:	75 12                	jne    c000b7ce <Directory::rename(char const*)+0x4a>
c000b7bc:	83 c2 0d             	add    edx,0xd
c000b7bf:	50                   	push   eax
c000b7c0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b7c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7c6:	52                   	push   edx
c000b7c7:	51                   	push   ecx
c000b7c8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b7cb:	83 c4 10             	add    esp,0x10
c000b7ce:	83 c4 0c             	add    esp,0xc
c000b7d1:	c3                   	ret    

c000b7d2 <Directory::exists()>:
c000b7d2:	83 ec 0c             	sub    esp,0xc
c000b7d5:	31 c0                	xor    eax,eax
c000b7d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7db:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7e2:	80 f9 19             	cmp    cl,0x19
c000b7e5:	77 24                	ja     c000b80b <Directory::exists()+0x39>
c000b7e7:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b7ee:	85 c9                	test   ecx,ecx
c000b7f0:	74 19                	je     c000b80b <Directory::exists()+0x39>
c000b7f2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b7f8:	85 c9                	test   ecx,ecx
c000b7fa:	74 0f                	je     c000b80b <Directory::exists()+0x39>
c000b7fc:	83 c2 0d             	add    edx,0xd
c000b7ff:	50                   	push   eax
c000b800:	50                   	push   eax
c000b801:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b803:	52                   	push   edx
c000b804:	51                   	push   ecx
c000b805:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b808:	83 c4 10             	add    esp,0x10
c000b80b:	83 c4 0c             	add    esp,0xc
c000b80e:	c3                   	ret    
c000b80f:	90                   	nop

c000b810 <Directory::read(dirent*)>:
c000b810:	83 ec 1c             	sub    esp,0x1c
c000b813:	b8 0b 00 00 00       	mov    eax,0xb
c000b818:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b81c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b823:	80 fa 19             	cmp    dl,0x19
c000b826:	77 30                	ja     c000b858 <Directory::read(dirent*)+0x48>
c000b828:	8b 14 95 40 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0c0]
c000b82f:	85 d2                	test   edx,edx
c000b831:	74 25                	je     c000b858 <Directory::read(dirent*)+0x48>
c000b833:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b83a:	74 1c                	je     c000b858 <Directory::read(dirent*)+0x48>
c000b83c:	83 ec 0c             	sub    esp,0xc
c000b83f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b841:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b845:	52                   	push   edx
c000b846:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b84a:	6a 00                	push   0x0
c000b84c:	68 10 01 00 00       	push   0x110
c000b851:	51                   	push   ecx
c000b852:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	83 c4 1c             	add    esp,0x1c
c000b85b:	c3                   	ret    

c000b85c <Directory::create()>:
c000b85c:	83 ec 0c             	sub    esp,0xc
c000b85f:	b8 0b 00 00 00       	mov    eax,0xb
c000b864:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b868:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b86f:	80 f9 19             	cmp    cl,0x19
c000b872:	77 2f                	ja     c000b8a3 <Directory::create()+0x47>
c000b874:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c000b87b:	85 c9                	test   ecx,ecx
c000b87d:	74 24                	je     c000b8a3 <Directory::create()+0x47>
c000b87f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b885:	85 c9                	test   ecx,ecx
c000b887:	74 1a                	je     c000b8a3 <Directory::create()+0x47>
c000b889:	b8 06 00 00 00       	mov    eax,0x6
c000b88e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b892:	75 0f                	jne    c000b8a3 <Directory::create()+0x47>
c000b894:	83 c2 0d             	add    edx,0xd
c000b897:	50                   	push   eax
c000b898:	50                   	push   eax
c000b899:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b89b:	52                   	push   edx
c000b89c:	51                   	push   ecx
c000b89d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b8a0:	83 c4 10             	add    esp,0x10
c000b8a3:	83 c4 0c             	add    esp,0xc
c000b8a6:	c3                   	ret    
c000b8a7:	90                   	nop

c000b8a8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b8a8:	b8 0a 00 00 00       	mov    eax,0xa
c000b8ad:	c3                   	ret    
c000b8ae:	66 90                	xchg   ax,ax

c000b8b0 <Bus::Bus(char const*)>:
c000b8b0:	83 ec 0c             	sub    esp,0xc
c000b8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b7:	83 ec 08             	sub    esp,0x8
c000b8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8be:	50                   	push   eax
c000b8bf:	e8 30 08 00 00       	call   c000c0f4 <Device::Device(char const*)>
c000b8c4:	83 c4 10             	add    esp,0x10
c000b8c7:	ba 48 df 01 c0       	mov    edx,0xc001df48
c000b8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d0:	89 10                	mov    DWORD PTR [eax],edx
c000b8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b8e0:	90                   	nop
c000b8e1:	83 c4 0c             	add    esp,0xc
c000b8e4:	c3                   	ret    
c000b8e5:	90                   	nop
c000b8e6:	66 90                	xchg   ax,ax

c000b8e8 <Bus::~Bus()>:
c000b8e8:	83 ec 0c             	sub    esp,0xc
c000b8eb:	ba 48 df 01 c0       	mov    edx,0xc001df48
c000b8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f4:	89 10                	mov    DWORD PTR [eax],edx
c000b8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fa:	83 ec 0c             	sub    esp,0xc
c000b8fd:	50                   	push   eax
c000b8fe:	e8 5b 05 00 00       	call   c000be5e <Device::~Device()>
c000b903:	83 c4 10             	add    esp,0x10
c000b906:	90                   	nop
c000b907:	83 c4 0c             	add    esp,0xc
c000b90a:	c3                   	ret    
c000b90b:	90                   	nop

c000b90c <Bus::~Bus()>:
c000b90c:	83 ec 0c             	sub    esp,0xc
c000b90f:	83 ec 0c             	sub    esp,0xc
c000b912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b916:	e8 cd ff ff ff       	call   c000b8e8 <Bus::~Bus()>
c000b91b:	83 c4 10             	add    esp,0x10
c000b91e:	83 ec 08             	sub    esp,0x8
c000b921:	68 58 01 00 00       	push   0x158
c000b926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b92a:	e8 f7 f0 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000b92f:	83 c4 10             	add    esp,0x10
c000b932:	83 c4 0c             	add    esp,0xc
c000b935:	c3                   	ret    

c000b936 <beepThread(void*)>:
c000b936:	83 ec 0c             	sub    esp,0xc
c000b939:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000b93e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b942:	48                   	dec    eax
c000b943:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000b948:	75 01                	jne    c000b94b <beepThread(void*)+0x15>
c000b94a:	fb                   	sti    
c000b94b:	83 ec 0c             	sub    esp,0xc
c000b94e:	6b c2 0a             	imul   eax,edx,0xa
c000b951:	50                   	push   eax
c000b952:	e8 ed 82 00 00       	call   c0013c44 <milliTenthSleep(unsigned int)>
c000b957:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b95e:	e8 93 a0 00 00       	call   c00159f6 <HalMakeBeep(int)>
c000b963:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b96b:	83 c4 1c             	add    esp,0x1c
c000b96e:	e9 cd 81 00 00       	jmp    c0013b40 <blockTask(TaskState)>

c000b973 <Krnl::beep(int, int, bool)>:
c000b973:	56                   	push   esi
c000b974:	53                   	push   ebx
c000b975:	83 ec 10             	sub    esp,0x10
c000b978:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b97c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b984:	e8 6d a0 00 00       	call   c00159f6 <HalMakeBeep(int)>
c000b989:	83 c4 10             	add    esp,0x10
c000b98c:	89 f0                	mov    eax,esi
c000b98e:	84 c0                	test   al,al
c000b990:	74 1e                	je     c000b9b0 <Krnl::beep(int, int, bool)+0x3d>
c000b992:	83 ec 0c             	sub    esp,0xc
c000b995:	6b db 0a             	imul   ebx,ebx,0xa
c000b998:	53                   	push   ebx
c000b999:	e8 a6 82 00 00       	call   c0013c44 <milliTenthSleep(unsigned int)>
c000b99e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b9a6:	83 c4 14             	add    esp,0x14
c000b9a9:	5b                   	pop    ebx
c000b9aa:	5e                   	pop    esi
c000b9ab:	e9 46 a0 00 00       	jmp    c00159f6 <HalMakeBeep(int)>
c000b9b0:	68 e6 00 00 00       	push   0xe6
c000b9b5:	53                   	push   ebx
c000b9b6:	68 36 b9 00 c0       	push   0xc000b936
c000b9bb:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c000b9c1:	e8 5e 7d 00 00       	call   c0013724 <Process::createThread(void (*)(void*), void*, int)>
c000b9c6:	83 c4 14             	add    esp,0x14
c000b9c9:	5b                   	pop    ebx
c000b9ca:	5e                   	pop    esi
c000b9cb:	c3                   	ret    

c000b9cc <User::loadClockSettings(int)>:
c000b9cc:	53                   	push   ebx
c000b9cd:	83 ec 14             	sub    esp,0x14
c000b9d0:	68 14 01 00 00       	push   0x114
c000b9d5:	e8 ab c4 ff ff       	call   c0007e85 <malloc>
c000b9da:	83 c4 0c             	add    esp,0xc
c000b9dd:	89 c3                	mov    ebx,eax
c000b9df:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c000b9e5:	68 6c df 01 c0       	push   0xc001df6c
c000b9ea:	50                   	push   eax
c000b9eb:	e8 a2 f6 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c000b9f0:	58                   	pop    eax
c000b9f1:	5a                   	pop    edx
c000b9f2:	6a 01                	push   0x1
c000b9f4:	53                   	push   ebx
c000b9f5:	e8 58 f7 ff ff       	call   c000b152 <File::open(FileOpenMode)>
c000b9fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b9fd:	e8 ae f7 ff ff       	call   c000b1b0 <File::close()>
c000ba02:	83 c4 10             	add    esp,0x10
c000ba05:	85 db                	test   ebx,ebx
c000ba07:	74 0f                	je     c000ba18 <User::loadClockSettings(int)+0x4c>
c000ba09:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ba0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba12:	83 c4 08             	add    esp,0x8
c000ba15:	5b                   	pop    ebx
c000ba16:	ff e0                	jmp    eax
c000ba18:	83 c4 08             	add    esp,0x8
c000ba1b:	5b                   	pop    ebx
c000ba1c:	c3                   	ret    
c000ba1d:	90                   	nop

c000ba1e <Clock::Clock(char const*)>:
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba25:	83 ec 08             	sub    esp,0x8
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	50                   	push   eax
c000ba2d:	e8 c2 06 00 00       	call   c000c0f4 <Device::Device(char const*)>
c000ba32:	83 c4 10             	add    esp,0x10
c000ba35:	ba 94 df 01 c0       	mov    edx,0xc001df94
c000ba3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3e:	89 10                	mov    DWORD PTR [eax],edx
c000ba40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba44:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ba4e:	90                   	nop
c000ba4f:	83 c4 0c             	add    esp,0xc
c000ba52:	c3                   	ret    
c000ba53:	90                   	nop

c000ba54 <Clock::~Clock()>:
c000ba54:	83 ec 0c             	sub    esp,0xc
c000ba57:	ba 94 df 01 c0       	mov    edx,0xc001df94
c000ba5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba60:	89 10                	mov    DWORD PTR [eax],edx
c000ba62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba66:	83 ec 0c             	sub    esp,0xc
c000ba69:	50                   	push   eax
c000ba6a:	e8 ef 03 00 00       	call   c000be5e <Device::~Device()>
c000ba6f:	83 c4 10             	add    esp,0x10
c000ba72:	90                   	nop
c000ba73:	83 c4 0c             	add    esp,0xc
c000ba76:	c3                   	ret    
c000ba77:	90                   	nop

c000ba78 <Clock::~Clock()>:
c000ba78:	83 ec 0c             	sub    esp,0xc
c000ba7b:	83 ec 0c             	sub    esp,0xc
c000ba7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba82:	e8 cd ff ff ff       	call   c000ba54 <Clock::~Clock()>
c000ba87:	83 c4 10             	add    esp,0x10
c000ba8a:	83 ec 08             	sub    esp,0x8
c000ba8d:	68 58 01 00 00       	push   0x158
c000ba92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba96:	e8 8b ef ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000ba9b:	83 c4 10             	add    esp,0x10
c000ba9e:	83 c4 0c             	add    esp,0xc
c000baa1:	c3                   	ret    

c000baa2 <Clock::timeInSecondsLocal()>:
c000baa2:	53                   	push   ebx
c000baa3:	83 ec 14             	sub    esp,0x14
c000baa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baaa:	8b 10                	mov    edx,DWORD PTR [eax]
c000baac:	50                   	push   eax
c000baad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bab0:	0f b6 0d d8 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020ad8
c000bab7:	03 0d dc 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020adc
c000babd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bac3:	89 cb                	mov    ebx,ecx
c000bac5:	c1 fb 1f             	sar    ebx,0x1f
c000bac8:	01 c8                	add    eax,ecx
c000baca:	11 da                	adc    edx,ebx
c000bacc:	83 c4 10             	add    esp,0x10
c000bacf:	31 c9                	xor    ecx,ecx
c000bad1:	80 3d d9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ad9,0x0
c000bad8:	74 05                	je     c000badf <Clock::timeInSecondsLocal()+0x3d>
c000bada:	b9 08 07 00 00       	mov    ecx,0x708
c000badf:	31 db                	xor    ebx,ebx
c000bae1:	01 c8                	add    eax,ecx
c000bae3:	11 da                	adc    edx,ebx
c000bae5:	83 c4 08             	add    esp,0x8
c000bae8:	5b                   	pop    ebx
c000bae9:	c3                   	ret    

c000baea <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000baea:	57                   	push   edi
c000baeb:	56                   	push   esi
c000baec:	53                   	push   ebx
c000baed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000baf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000baf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000baf7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bafb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bafe:	0f b6 05 d8 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020ad8
c000bb05:	03 05 dc 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020adc
c000bb0b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bb11:	99                   	cdq    
c000bb12:	29 c6                	sub    esi,eax
c000bb14:	19 d7                	sbb    edi,edx
c000bb16:	89 f0                	mov    eax,esi
c000bb18:	89 fa                	mov    edx,edi
c000bb1a:	31 f6                	xor    esi,esi
c000bb1c:	80 3d d9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ad9,0x0
c000bb23:	74 05                	je     c000bb2a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bb25:	be 08 07 00 00       	mov    esi,0x708
c000bb2a:	31 ff                	xor    edi,edi
c000bb2c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bb30:	29 f0                	sub    eax,esi
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	19 fa                	sbb    edx,edi
c000bb38:	89 d8                	mov    eax,ebx
c000bb3a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3e:	5b                   	pop    ebx
c000bb3f:	5e                   	pop    esi
c000bb40:	5f                   	pop    edi
c000bb41:	ff e0                	jmp    eax

c000bb43 <datetimeToSeconds(datetime_t)>:
c000bb43:	55                   	push   ebp
c000bb44:	57                   	push   edi
c000bb45:	56                   	push   esi
c000bb46:	53                   	push   ebx
c000bb47:	83 ec 14             	sub    esp,0x14
c000bb4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb4e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bb52:	89 d3                	mov    ebx,edx
c000bb54:	0f b6 c6             	movzx  eax,dh
c000bb57:	c1 eb 10             	shr    ebx,0x10
c000bb5a:	48                   	dec    eax
c000bb5b:	66 81 eb 6c 07       	sub    bx,0x76c
c000bb60:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bb64:	0f b6 f5             	movzx  esi,ch
c000bb67:	89 cf                	mov    edi,ecx
c000bb69:	6b f6 3c             	imul   esi,esi,0x3c
c000bb6c:	c1 ef 10             	shr    edi,0x10
c000bb6f:	0f b6 c9             	movzx  ecx,cl
c000bb72:	89 f8                	mov    eax,edi
c000bb74:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb7a:	0f b6 f8             	movzx  edi,al
c000bb7d:	0f b6 d2             	movzx  edx,dl
c000bb80:	01 fe                	add    esi,edi
c000bb82:	01 f1                	add    ecx,esi
c000bb84:	0f b7 f3             	movzx  esi,bx
c000bb87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bb8b:	c1 f9 1f             	sar    ecx,0x1f
c000bb8e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bb93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bb97:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bb9c:	8b 0c 8d e0 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2020]
c000bba3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bba7:	76 29                	jbe    c000bbd2 <datetimeToSeconds(datetime_t)+0x8f>
c000bba9:	f6 c3 03             	test   bl,0x3
c000bbac:	75 24                	jne    c000bbd2 <datetimeToSeconds(datetime_t)+0x8f>
c000bbae:	31 d2                	xor    edx,edx
c000bbb0:	bf 64 00 00 00       	mov    edi,0x64
c000bbb5:	89 d8                	mov    eax,ebx
c000bbb7:	66 f7 f7             	div    di
c000bbba:	66 85 d2             	test   dx,dx
c000bbbd:	75 12                	jne    c000bbd1 <datetimeToSeconds(datetime_t)+0x8e>
c000bbbf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bbc5:	bf 90 01 00 00       	mov    edi,0x190
c000bbca:	99                   	cdq    
c000bbcb:	f7 ff                	idiv   edi
c000bbcd:	85 d2                	test   edx,edx
c000bbcf:	75 01                	jne    c000bbd2 <datetimeToSeconds(datetime_t)+0x8f>
c000bbd1:	41                   	inc    ecx
c000bbd2:	66 83 fb 46          	cmp    bx,0x46
c000bbd6:	76 45                	jbe    c000bc1d <datetimeToSeconds(datetime_t)+0xda>
c000bbd8:	bb 46 00 00 00       	mov    ebx,0x46
c000bbdd:	bf 64 00 00 00       	mov    edi,0x64
c000bbe2:	bd 90 01 00 00       	mov    ebp,0x190
c000bbe7:	b8 6d 01 00 00       	mov    eax,0x16d
c000bbec:	f6 c3 03             	test   bl,0x3
c000bbef:	75 23                	jne    c000bc14 <datetimeToSeconds(datetime_t)+0xd1>
c000bbf1:	89 d8                	mov    eax,ebx
c000bbf3:	99                   	cdq    
c000bbf4:	f7 ff                	idiv   edi
c000bbf6:	b8 6e 01 00 00       	mov    eax,0x16e
c000bbfb:	85 d2                	test   edx,edx
c000bbfd:	75 15                	jne    c000bc14 <datetimeToSeconds(datetime_t)+0xd1>
c000bbff:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bc05:	99                   	cdq    
c000bc06:	f7 fd                	idiv   ebp
c000bc08:	31 c0                	xor    eax,eax
c000bc0a:	85 d2                	test   edx,edx
c000bc0c:	0f 94 c0             	sete   al
c000bc0f:	05 6d 01 00 00       	add    eax,0x16d
c000bc14:	01 c1                	add    ecx,eax
c000bc16:	43                   	inc    ebx
c000bc17:	39 f3                	cmp    ebx,esi
c000bc19:	7c cc                	jl     c000bbe7 <datetimeToSeconds(datetime_t)+0xa4>
c000bc1b:	eb 3b                	jmp    c000bc58 <datetimeToSeconds(datetime_t)+0x115>
c000bc1d:	74 39                	je     c000bc58 <datetimeToSeconds(datetime_t)+0x115>
c000bc1f:	b8 45 00 00 00       	mov    eax,0x45
c000bc24:	89 c2                	mov    edx,eax
c000bc26:	83 e2 03             	and    edx,0x3
c000bc29:	39 f0                	cmp    eax,esi
c000bc2b:	7e 13                	jle    c000bc40 <datetimeToSeconds(datetime_t)+0xfd>
c000bc2d:	85 d2                	test   edx,edx
c000bc2f:	0f 94 c2             	sete   dl
c000bc32:	48                   	dec    eax
c000bc33:	0f b6 d2             	movzx  edx,dl
c000bc36:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bc3c:	29 d1                	sub    ecx,edx
c000bc3e:	eb e4                	jmp    c000bc24 <datetimeToSeconds(datetime_t)+0xe1>
c000bc40:	b8 6d 01 00 00       	mov    eax,0x16d
c000bc45:	85 d2                	test   edx,edx
c000bc47:	75 0d                	jne    c000bc56 <datetimeToSeconds(datetime_t)+0x113>
c000bc49:	31 c0                	xor    eax,eax
c000bc4b:	66 85 db             	test   bx,bx
c000bc4e:	0f 95 c0             	setne  al
c000bc51:	05 6d 01 00 00       	add    eax,0x16d
c000bc56:	29 c1                	sub    ecx,eax
c000bc58:	b8 80 51 01 00       	mov    eax,0x15180
c000bc5d:	f7 e9                	imul   ecx
c000bc5f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bc63:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bc67:	83 c4 14             	add    esp,0x14
c000bc6a:	5b                   	pop    ebx
c000bc6b:	5e                   	pop    esi
c000bc6c:	5f                   	pop    edi
c000bc6d:	5d                   	pop    ebp
c000bc6e:	c3                   	ret    
c000bc6f:	90                   	nop

c000bc70 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bc70:	57                   	push   edi
c000bc71:	56                   	push   esi
c000bc72:	53                   	push   ebx
c000bc73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc77:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc79:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bc7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc84:	e8 ba fe ff ff       	call   c000bb43 <datetimeToSeconds(datetime_t)>
c000bc89:	59                   	pop    ecx
c000bc8a:	0f b6 0d d8 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020ad8
c000bc91:	5b                   	pop    ebx
c000bc92:	03 0d dc 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020adc
c000bc98:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc9e:	89 cb                	mov    ebx,ecx
c000bca0:	c1 fb 1f             	sar    ebx,0x1f
c000bca3:	29 c8                	sub    eax,ecx
c000bca5:	19 da                	sbb    edx,ebx
c000bca7:	31 c9                	xor    ecx,ecx
c000bca9:	80 3d d9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ad9,0x0
c000bcb0:	74 05                	je     c000bcb7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bcb2:	b9 08 07 00 00       	mov    ecx,0x708
c000bcb7:	31 db                	xor    ebx,ebx
c000bcb9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bcbd:	29 c8                	sub    eax,ecx
c000bcbf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bcc3:	19 da                	sbb    edx,ebx
c000bcc5:	89 f8                	mov    eax,edi
c000bcc7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bccb:	5b                   	pop    ebx
c000bccc:	5e                   	pop    esi
c000bccd:	5f                   	pop    edi
c000bcce:	ff e0                	jmp    eax

c000bcd0 <secondsToDatetime(unsigned long long)>:
c000bcd0:	55                   	push   ebp
c000bcd1:	57                   	push   edi
c000bcd2:	56                   	push   esi
c000bcd3:	53                   	push   ebx
c000bcd4:	83 ec 1c             	sub    esp,0x1c
c000bcd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bcdb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bcdf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bce3:	6a 00                	push   0x0
c000bce5:	68 80 51 01 00       	push   0x15180
c000bcea:	55                   	push   ebp
c000bceb:	57                   	push   edi
c000bcec:	e8 2f 05 01 00       	call   c001c220 <__udivdi3>
c000bcf1:	83 c4 10             	add    esp,0x10
c000bcf4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bcfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcfe:	6a 00                	push   0x0
c000bd00:	68 80 51 01 00       	push   0x15180
c000bd05:	55                   	push   ebp
c000bd06:	57                   	push   edi
c000bd07:	bf 10 0e 00 00       	mov    edi,0xe10
c000bd0c:	e8 0f 06 01 00       	call   c001c320 <__umoddi3>
c000bd11:	83 c4 10             	add    esp,0x10
c000bd14:	99                   	cdq    
c000bd15:	f7 ff                	idiv   edi
c000bd17:	bf 3c 00 00 00       	mov    edi,0x3c
c000bd1c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bd1f:	89 d0                	mov    eax,edx
c000bd21:	99                   	cdq    
c000bd22:	f7 ff                	idiv   edi
c000bd24:	85 db                	test   ebx,ebx
c000bd26:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bd29:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bd2c:	79 11                	jns    c000bd3f <secondsToDatetime(unsigned long long)+0x6f>
c000bd2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd32:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bd38:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bd3d:	eb 07                	jmp    c000bd46 <secondsToDatetime(unsigned long long)+0x76>
c000bd3f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bd44:	89 d8                	mov    eax,ebx
c000bd46:	bf b4 05 00 00       	mov    edi,0x5b4
c000bd4b:	99                   	cdq    
c000bd4c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bd51:	f7 f9                	idiv   ecx
c000bd53:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bd58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd5c:	31 d2                	xor    edx,edx
c000bd5e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bd66:	01 c3                	add    ebx,eax
c000bd68:	89 d8                	mov    eax,ebx
c000bd6a:	f7 f1                	div    ecx
c000bd6c:	31 d2                	xor    edx,edx
c000bd6e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bd71:	89 d8                	mov    eax,ebx
c000bd73:	f7 f7                	div    edi
c000bd75:	31 d2                	xor    edx,edx
c000bd77:	29 c1                	sub    ecx,eax
c000bd79:	89 d8                	mov    eax,ebx
c000bd7b:	f7 f5                	div    ebp
c000bd7d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bd82:	29 c1                	sub    ecx,eax
c000bd84:	31 d2                	xor    edx,edx
c000bd86:	89 c8                	mov    eax,ecx
c000bd88:	f7 f5                	div    ebp
c000bd8a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bd8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd93:	31 d2                	xor    edx,edx
c000bd95:	89 c8                	mov    eax,ecx
c000bd97:	f7 f5                	div    ebp
c000bd99:	31 d2                	xor    edx,edx
c000bd9b:	01 c3                	add    ebx,eax
c000bd9d:	89 c8                	mov    eax,ecx
c000bd9f:	f7 f7                	div    edi
c000bda1:	bf 99 00 00 00       	mov    edi,0x99
c000bda6:	29 c3                	sub    ebx,eax
c000bda8:	31 d2                	xor    edx,edx
c000bdaa:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bdb2:	29 c3                	sub    ebx,eax
c000bdb4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bdb7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bdba:	bb 05 00 00 00       	mov    ebx,0x5
c000bdbf:	83 c1 02             	add    ecx,0x2
c000bdc2:	89 c8                	mov    eax,ecx
c000bdc4:	f7 f7                	div    edi
c000bdc6:	31 d2                	xor    edx,edx
c000bdc8:	89 c7                	mov    edi,eax
c000bdca:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bdd0:	83 c0 02             	add    eax,0x2
c000bdd3:	f7 f3                	div    ebx
c000bdd5:	89 eb                	mov    ebx,ebp
c000bdd7:	29 c3                	sub    ebx,eax
c000bdd9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bddf:	88 1e                	mov    BYTE PTR [esi],bl
c000bde1:	19 c0                	sbb    eax,eax
c000bde3:	31 d2                	xor    edx,edx
c000bde5:	83 e0 0c             	and    eax,0xc
c000bde8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bdec:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bdf4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bdf8:	83 f9 01             	cmp    ecx,0x1
c000bdfb:	0f 96 c2             	setbe  dl
c000bdfe:	41                   	inc    ecx
c000bdff:	01 d0                	add    eax,edx
c000be01:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000be04:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000be08:	83 c4 1c             	add    esp,0x1c
c000be0b:	89 f0                	mov    eax,esi
c000be0d:	5b                   	pop    ebx
c000be0e:	5e                   	pop    esi
c000be0f:	5f                   	pop    edi
c000be10:	5d                   	pop    ebp
c000be11:	c2 04 00             	ret    0x4

c000be14 <Clock::timeInDatetimeLocal()>:
c000be14:	53                   	push   ebx
c000be15:	83 ec 14             	sub    esp,0x14
c000be18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000be20:	e8 7d fc ff ff       	call   c000baa2 <Clock::timeInSecondsLocal()>
c000be25:	83 c4 0c             	add    esp,0xc
c000be28:	52                   	push   edx
c000be29:	50                   	push   eax
c000be2a:	53                   	push   ebx
c000be2b:	e8 a0 fe ff ff       	call   c000bcd0 <secondsToDatetime(unsigned long long)>
c000be30:	89 d8                	mov    eax,ebx
c000be32:	83 c4 14             	add    esp,0x14
c000be35:	5b                   	pop    ebx
c000be36:	c2 04 00             	ret    0x4
c000be39:	90                   	nop

c000be3a <Device::hibernate()>:
c000be3a:	c3                   	ret    
c000be3b:	90                   	nop

c000be3c <Device::wake()>:
c000be3c:	c3                   	ret    
c000be3d:	90                   	nop

c000be3e <Device::detect()>:
c000be3e:	c3                   	ret    
c000be3f:	90                   	nop

c000be40 <Device::disableLegacy()>:
c000be40:	c3                   	ret    
c000be41:	90                   	nop

c000be42 <Device::powerSaving(PowerSavingLevel)>:
c000be42:	c3                   	ret    
c000be43:	90                   	nop

c000be44 <DriverlessDevice::close(int, int, void*)>:
c000be44:	31 c0                	xor    eax,eax
c000be46:	c3                   	ret    
c000be47:	90                   	nop

c000be48 <DriverlessDevice::detect()>:
c000be48:	c3                   	ret    
c000be49:	90                   	nop

c000be4a <DriverlessDevice::open(int, int, void*)>:
c000be4a:	83 ec 18             	sub    esp,0x18
c000be4d:	68 10 e0 01 c0       	push   0xc001e010
c000be52:	e8 94 48 00 00       	call   c00106eb <KePanic(char const*)>
c000be57:	83 c8 ff             	or     eax,0xffffffff
c000be5a:	83 c4 1c             	add    esp,0x1c
c000be5d:	c3                   	ret    

c000be5e <Device::~Device()>:
c000be5e:	ba 70 e0 01 c0       	mov    edx,0xc001e070
c000be63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be67:	89 10                	mov    DWORD PTR [eax],edx
c000be69:	90                   	nop
c000be6a:	c3                   	ret    
c000be6b:	90                   	nop

c000be6c <Device::~Device()>:
c000be6c:	83 ec 0c             	sub    esp,0xc
c000be6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000be73:	e8 e6 ff ff ff       	call   c000be5e <Device::~Device()>
c000be78:	83 c4 04             	add    esp,0x4
c000be7b:	83 ec 08             	sub    esp,0x8
c000be7e:	68 58 01 00 00       	push   0x158
c000be83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be87:	e8 9a eb ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000be8c:	83 c4 10             	add    esp,0x10
c000be8f:	83 c4 0c             	add    esp,0xc
c000be92:	c3                   	ret    
c000be93:	90                   	nop

c000be94 <Device::findAndLoadDriver()>:
c000be94:	c7 44 24 04 2e e0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e02e
c000be9c:	e9 7b ec ff ff       	jmp    c000ab1c <Dbg::kprintf(char const*, ...)>
c000bea1:	90                   	nop

c000bea2 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bea2:	57                   	push   edi
c000bea3:	b9 09 00 00 00       	mov    ecx,0x9
c000bea8:	56                   	push   esi
c000bea9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bead:	8d 74 24 10          	lea    esi,[esp+0x10]
c000beb1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bebb:	81 c7 18 01 00 00    	add    edi,0x118
c000bec1:	fc                   	cld    
c000bec2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bec4:	5e                   	pop    esi
c000bec5:	5f                   	pop    edi
c000bec6:	c3                   	ret    
c000bec7:	90                   	nop

c000bec8 <Device::preOpenACPI(void*, char*, char*)>:
c000bec8:	57                   	push   edi
c000bec9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bece:	56                   	push   esi
c000becf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bed3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bed7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bee1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bee7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000beed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bef1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bef3:	b9 0e 00 00 00       	mov    ecx,0xe
c000bef8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000befe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bf02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bf04:	5e                   	pop    esi
c000bf05:	5f                   	pop    edi
c000bf06:	c3                   	ret    
c000bf07:	90                   	nop

c000bf08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf08:	53                   	push   ebx
c000bf09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bf11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf19:	0f b6 c0             	movzx  eax,al
c000bf1c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bf20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bf28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bf2c:	5b                   	pop    ebx
c000bf2d:	e9 a6 05 00 00       	jmp    c000c4d8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bf32 <Device::getParent()>:
c000bf32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf36:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bf3c:	c3                   	ret    
c000bf3d:	90                   	nop

c000bf3e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bf3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf46:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bf4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bf4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bf53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf57:	e9 e8 06 00 00       	jmp    c000c644 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bf5c <Device::addChild(Device*)>:
c000bf5c:	53                   	push   ebx
c000bf5d:	83 ec 08             	sub    esp,0x8
c000bf60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf68:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bf6e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bf74:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf76:	85 d2                	test   edx,edx
c000bf78:	74 04                	je     c000bf7e <Device::addChild(Device*)+0x22>
c000bf7a:	89 d3                	mov    ebx,edx
c000bf7c:	eb f6                	jmp    c000bf74 <Device::addChild(Device*)+0x18>
c000bf7e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bf81:	83 ec 0c             	sub    esp,0xc
c000bf84:	6a 08                	push   0x8
c000bf86:	e8 fa be ff ff       	call   c0007e85 <malloc>
c000bf8b:	89 03                	mov    DWORD PTR [ebx],eax
c000bf8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf9a:	83 c4 18             	add    esp,0x18
c000bf9d:	5b                   	pop    ebx
c000bf9e:	c3                   	ret    
c000bf9f:	90                   	nop

c000bfa0 <Device::removeAllChildren()>:
c000bfa0:	56                   	push   esi
c000bfa1:	53                   	push   ebx
c000bfa2:	52                   	push   edx
c000bfa3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfa7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bfad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfb0:	74 17                	je     c000bfc9 <Device::removeAllChildren()+0x29>
c000bfb2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bfb5:	85 c0                	test   eax,eax
c000bfb7:	74 0c                	je     c000bfc5 <Device::removeAllChildren()+0x25>
c000bfb9:	83 ec 0c             	sub    esp,0xc
c000bfbc:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfbe:	50                   	push   eax
c000bfbf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bfc2:	83 c4 10             	add    esp,0x10
c000bfc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfc7:	eb e4                	jmp    c000bfad <Device::removeAllChildren()+0xd>
c000bfc9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bfcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfd5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bfdb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfe2:	58                   	pop    eax
c000bfe3:	5b                   	pop    ebx
c000bfe4:	5e                   	pop    esi
c000bfe5:	c3                   	ret    

c000bfe6 <Device::hibernateAll()>:
c000bfe6:	53                   	push   ebx
c000bfe7:	83 ec 14             	sub    esp,0x14
c000bfea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bfee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff0:	53                   	push   ebx
c000bff1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bff4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bffa:	83 c4 10             	add    esp,0x10
c000bffd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c000:	74 0f                	je     c000c011 <Device::hibernateAll()+0x2b>
c000c002:	83 ec 0c             	sub    esp,0xc
c000c005:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c008:	e8 d9 ff ff ff       	call   c000bfe6 <Device::hibernateAll()>
c000c00d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c00f:	eb e9                	jmp    c000bffa <Device::hibernateAll()+0x14>
c000c011:	83 c4 08             	add    esp,0x8
c000c014:	5b                   	pop    ebx
c000c015:	c3                   	ret    

c000c016 <Device::wakeAll()>:
c000c016:	53                   	push   ebx
c000c017:	83 ec 14             	sub    esp,0x14
c000c01a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c01e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c020:	53                   	push   ebx
c000c021:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c024:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c02a:	83 c4 10             	add    esp,0x10
c000c02d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c030:	74 0f                	je     c000c041 <Device::wakeAll()+0x2b>
c000c032:	83 ec 0c             	sub    esp,0xc
c000c035:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c038:	e8 d9 ff ff ff       	call   c000c016 <Device::wakeAll()>
c000c03d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c03f:	eb e9                	jmp    c000c02a <Device::wakeAll()+0x14>
c000c041:	83 c4 08             	add    esp,0x8
c000c044:	5b                   	pop    ebx
c000c045:	c3                   	ret    

c000c046 <Device::detectAll()>:
c000c046:	53                   	push   ebx
c000c047:	83 ec 14             	sub    esp,0x14
c000c04a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c04e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c050:	53                   	push   ebx
c000c051:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c054:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c05a:	83 c4 10             	add    esp,0x10
c000c05d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c060:	74 0f                	je     c000c071 <Device::detectAll()+0x2b>
c000c062:	83 ec 0c             	sub    esp,0xc
c000c065:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c068:	e8 d9 ff ff ff       	call   c000c046 <Device::detectAll()>
c000c06d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c06f:	eb e9                	jmp    c000c05a <Device::detectAll()+0x14>
c000c071:	83 c4 08             	add    esp,0x8
c000c074:	5b                   	pop    ebx
c000c075:	c3                   	ret    

c000c076 <Device::disableLegacyAll()>:
c000c076:	c3                   	ret    
c000c077:	90                   	nop

c000c078 <Device::loadDriversForAll()>:
c000c078:	c3                   	ret    
c000c079:	90                   	nop

c000c07a <Device::closeAll()>:
c000c07a:	53                   	push   ebx
c000c07b:	83 ec 08             	sub    esp,0x8
c000c07e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c082:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c084:	6a 00                	push   0x0
c000c086:	6a 00                	push   0x0
c000c088:	6a 00                	push   0x0
c000c08a:	53                   	push   ebx
c000c08b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c08e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c094:	83 c4 10             	add    esp,0x10
c000c097:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c09a:	74 0f                	je     c000c0ab <Device::closeAll()+0x31>
c000c09c:	83 ec 0c             	sub    esp,0xc
c000c09f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0a2:	e8 d3 ff ff ff       	call   c000c07a <Device::closeAll()>
c000c0a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0a9:	eb e9                	jmp    c000c094 <Device::closeAll()+0x1a>
c000c0ab:	83 c4 08             	add    esp,0x8
c000c0ae:	5b                   	pop    ebx
c000c0af:	c3                   	ret    

c000c0b0 <Device::powerSavingAll(PowerSavingLevel)>:
c000c0b0:	56                   	push   esi
c000c0b1:	53                   	push   ebx
c000c0b2:	83 ec 0c             	sub    esp,0xc
c000c0b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c0b9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c0bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0bf:	56                   	push   esi
c000c0c0:	53                   	push   ebx
c000c0c1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c0c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0ca:	83 c4 10             	add    esp,0x10
c000c0cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0d0:	74 0f                	je     c000c0e1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c0d2:	52                   	push   edx
c000c0d3:	52                   	push   edx
c000c0d4:	56                   	push   esi
c000c0d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0d8:	e8 d3 ff ff ff       	call   c000c0b0 <Device::powerSavingAll(PowerSavingLevel)>
c000c0dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0df:	eb e9                	jmp    c000c0ca <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c0e1:	58                   	pop    eax
c000c0e2:	5b                   	pop    ebx
c000c0e3:	5e                   	pop    esi
c000c0e4:	c3                   	ret    
c000c0e5:	90                   	nop

c000c0e6 <Device::setName(char const*)>:
c000c0e6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c0ee:	e9 2d 45 ff ff       	jmp    c0000620 <strcpy>
c000c0f3:	90                   	nop

c000c0f4 <Device::Device(char const*)>:
c000c0f4:	83 ec 1c             	sub    esp,0x1c
c000c0f7:	ba 70 e0 01 c0       	mov    edx,0xc001e070
c000c0fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c100:	89 10                	mov    DWORD PTR [eax],edx
c000c102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c106:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c114:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c11e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c122:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c12c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c130:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c13a:	83 ec 08             	sub    esp,0x8
c000c13d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c141:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c145:	e8 9c ff ff ff       	call   c000c0e6 <Device::setName(char const*)>
c000c14a:	83 c4 10             	add    esp,0x10
c000c14d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c155:	83 ec 0c             	sub    esp,0xc
c000c158:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c15c:	e8 24 bd ff ff       	call   c0007e85 <malloc>
c000c161:	83 c4 10             	add    esp,0x10
c000c164:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c16a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c171:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c175:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c17b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c17f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c185:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c18b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c195:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c19c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1a0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c1a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ab:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c1b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1b6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c1c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1c4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c1ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c1ea:	90                   	nop
c000c1eb:	83 c4 1c             	add    esp,0x1c
c000c1ee:	c3                   	ret    
c000c1ef:	90                   	nop

c000c1f0 <Device::getName()>:
c000c1f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c1f4:	05 d0 00 00 00       	add    eax,0xd0
c000c1f9:	c3                   	ret    

c000c1fa <DriverlessDevice::DriverlessDevice(char const*)>:
c000c1fa:	83 ec 0c             	sub    esp,0xc
c000c1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c201:	83 ec 08             	sub    esp,0x8
c000c204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c208:	50                   	push   eax
c000c209:	e8 e6 fe ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000c20e:	83 c4 10             	add    esp,0x10
c000c211:	ba 9c e0 01 c0       	mov    edx,0xc001e09c
c000c216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21a:	89 10                	mov    DWORD PTR [eax],edx
c000c21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c220:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c22a:	90                   	nop
c000c22b:	83 c4 0c             	add    esp,0xc
c000c22e:	c3                   	ret    
c000c22f:	90                   	nop

c000c230 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c230:	57                   	push   edi
c000c231:	56                   	push   esi
c000c232:	53                   	push   ebx
c000c233:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c237:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c23b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c23f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c245:	75 0c                	jne    c000c253 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c247:	52                   	push   edx
c000c248:	52                   	push   edx
c000c249:	53                   	push   ebx
c000c24a:	56                   	push   esi
c000c24b:	e8 82 04 01 00       	call   c001c6d2 <LinkedList<Device>::addElement(Device*)>
c000c250:	83 c4 10             	add    esp,0x10
c000c253:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c259:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c25c:	74 12                	je     c000c270 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c25e:	50                   	push   eax
c000c25f:	57                   	push   edi
c000c260:	56                   	push   esi
c000c261:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c264:	e8 c7 ff ff ff       	call   c000c230 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c269:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c26b:	83 c4 10             	add    esp,0x10
c000c26e:	eb e9                	jmp    c000c259 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c270:	5b                   	pop    ebx
c000c271:	5e                   	pop    esi
c000c272:	5f                   	pop    edi
c000c273:	c3                   	ret    

c000c274 <getDevicesOfType(DeviceType)>:
c000c274:	53                   	push   ebx
c000c275:	83 ec 14             	sub    esp,0x14
c000c278:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c27c:	53                   	push   ebx
c000c27d:	e8 2c 05 01 00       	call   c001c7ae <LinkedList<Device>::LinkedList()>
c000c282:	83 c4 0c             	add    esp,0xc
c000c285:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c289:	53                   	push   ebx
c000c28a:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c000c290:	e8 9b ff ff ff       	call   c000c230 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c295:	89 d8                	mov    eax,ebx
c000c297:	83 c4 18             	add    esp,0x18
c000c29a:	5b                   	pop    ebx
c000c29b:	c2 04 00             	ret    0x4
c000c29e:	66 90                	xchg   ax,ax

c000c2a0 <HardDiskController::HardDiskController(char const*)>:
c000c2a0:	83 ec 0c             	sub    esp,0xc
c000c2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2a7:	83 ec 08             	sub    esp,0x8
c000c2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ae:	50                   	push   eax
c000c2af:	e8 40 fe ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000c2b4:	83 c4 10             	add    esp,0x10
c000c2b7:	ba c8 e0 01 c0       	mov    edx,0xc001e0c8
c000c2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2c0:	89 10                	mov    DWORD PTR [eax],edx
c000c2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2c6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c2d0:	90                   	nop
c000c2d1:	83 c4 0c             	add    esp,0xc
c000c2d4:	c3                   	ret    
c000c2d5:	90                   	nop
c000c2d6:	66 90                	xchg   ax,ax

c000c2d8 <HardDiskController::~HardDiskController()>:
c000c2d8:	83 ec 0c             	sub    esp,0xc
c000c2db:	ba c8 e0 01 c0       	mov    edx,0xc001e0c8
c000c2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e4:	89 10                	mov    DWORD PTR [eax],edx
c000c2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	50                   	push   eax
c000c2ee:	e8 6b fb ff ff       	call   c000be5e <Device::~Device()>
c000c2f3:	83 c4 10             	add    esp,0x10
c000c2f6:	90                   	nop
c000c2f7:	83 c4 0c             	add    esp,0xc
c000c2fa:	c3                   	ret    
c000c2fb:	90                   	nop

c000c2fc <HardDiskController::~HardDiskController()>:
c000c2fc:	83 ec 0c             	sub    esp,0xc
c000c2ff:	83 ec 0c             	sub    esp,0xc
c000c302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c306:	e8 cd ff ff ff       	call   c000c2d8 <HardDiskController::~HardDiskController()>
c000c30b:	83 c4 10             	add    esp,0x10
c000c30e:	83 ec 08             	sub    esp,0x8
c000c311:	68 58 01 00 00       	push   0x158
c000c316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c31a:	e8 07 e7 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000c31f:	83 c4 10             	add    esp,0x10
c000c322:	83 c4 0c             	add    esp,0xc
c000c325:	c3                   	ret    

c000c326 <PhysicalDisk::eject()>:
c000c326:	83 c8 ff             	or     eax,0xffffffff
c000c329:	c3                   	ret    

c000c32a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c32a:	83 ec 0c             	sub    esp,0xc
c000c32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c331:	83 ec 08             	sub    esp,0x8
c000c334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c338:	50                   	push   eax
c000c339:	e8 b6 fd ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000c33e:	83 c4 10             	add    esp,0x10
c000c341:	ba f4 e0 01 c0       	mov    edx,0xc001e0f4
c000c346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34a:	89 10                	mov    DWORD PTR [eax],edx
c000c34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c350:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c35b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c366:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c374:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c378:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c382:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c38c:	90                   	nop
c000c38d:	83 c4 0c             	add    esp,0xc
c000c390:	c3                   	ret    
c000c391:	90                   	nop

c000c392 <PhysicalDisk::startCache()>:
c000c392:	56                   	push   esi
c000c393:	53                   	push   ebx
c000c394:	83 ec 10             	sub    esp,0x10
c000c397:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c39b:	6a 44                	push   0x44
c000c39d:	e8 e3 ba ff ff       	call   c0007e85 <malloc>
c000c3a2:	89 c6                	mov    esi,eax
c000c3a4:	58                   	pop    eax
c000c3a5:	5a                   	pop    edx
c000c3a6:	53                   	push   ebx
c000c3a7:	56                   	push   esi
c000c3a8:	e8 ab 15 00 00       	call   c000d958 <VCache::VCache(PhysicalDisk*)>
c000c3ad:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c3b3:	83 c4 14             	add    esp,0x14
c000c3b6:	5b                   	pop    ebx
c000c3b7:	5e                   	pop    esi
c000c3b8:	c3                   	ret    
c000c3b9:	90                   	nop

c000c3ba <PhysicalDisk::~PhysicalDisk()>:
c000c3ba:	83 ec 0c             	sub    esp,0xc
c000c3bd:	ba f4 e0 01 c0       	mov    edx,0xc001e0f4
c000c3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c6:	89 10                	mov    DWORD PTR [eax],edx
c000c3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	50                   	push   eax
c000c3d0:	e8 89 fa ff ff       	call   c000be5e <Device::~Device()>
c000c3d5:	83 c4 10             	add    esp,0x10
c000c3d8:	90                   	nop
c000c3d9:	83 c4 0c             	add    esp,0xc
c000c3dc:	c3                   	ret    
c000c3dd:	90                   	nop

c000c3de <PhysicalDisk::~PhysicalDisk()>:
c000c3de:	83 ec 0c             	sub    esp,0xc
c000c3e1:	83 ec 0c             	sub    esp,0xc
c000c3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e8:	e8 cd ff ff ff       	call   c000c3ba <PhysicalDisk::~PhysicalDisk()>
c000c3ed:	83 c4 10             	add    esp,0x10
c000c3f0:	83 ec 08             	sub    esp,0x8
c000c3f3:	68 6c 01 00 00       	push   0x16c
c000c3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fc:	e8 25 e6 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000c401:	83 c4 10             	add    esp,0x10
c000c404:	83 c4 0c             	add    esp,0xc
c000c407:	c3                   	ret    

c000c408 <int_handler>:
c000c408:	55                   	push   ebp
c000c409:	57                   	push   edi
c000c40a:	56                   	push   esi
c000c40b:	53                   	push   ebx
c000c40c:	83 ec 0c             	sub    esp,0xc
c000c40f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c413:	80 3d 58 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023458,0x0
c000c41a:	74 0b                	je     c000c427 <int_handler+0x1f>
c000c41c:	fa                   	cli    
c000c41d:	f4                   	hlt    
c000c41e:	80 3d 58 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023458,0x0
c000c425:	75 f5                	jne    c000c41c <int_handler+0x14>
c000c427:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c42a:	8d 46 e0             	lea    eax,[esi-0x20]
c000c42d:	83 f8 17             	cmp    eax,0x17
c000c430:	76 3e                	jbe    c000c470 <int_handler+0x68>
c000c432:	c1 e6 04             	shl    esi,0x4
c000c435:	31 db                	xor    ebx,ebx
c000c437:	8d ae e0 1a 02 c0    	lea    ebp,[esi-0x3ffde520]
c000c43d:	81 c6 e0 0a 02 c0    	add    esi,0xc0020ae0
c000c443:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c447:	85 c0                	test   eax,eax
c000c449:	74 13                	je     c000c45e <int_handler+0x56>
c000c44b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c44e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c452:	74 2a                	je     c000c47e <int_handler+0x76>
c000c454:	83 ec 08             	sub    esp,0x8
c000c457:	52                   	push   edx
c000c458:	57                   	push   edi
c000c459:	ff d0                	call   eax
c000c45b:	83 c4 10             	add    esp,0x10
c000c45e:	43                   	inc    ebx
c000c45f:	83 fb 04             	cmp    ebx,0x4
c000c462:	75 df                	jne    c000c443 <int_handler+0x3b>
c000c464:	83 c4 0c             	add    esp,0xc
c000c467:	31 c0                	xor    eax,eax
c000c469:	5b                   	pop    ebx
c000c46a:	31 d2                	xor    edx,edx
c000c46c:	5e                   	pop    esi
c000c46d:	5f                   	pop    edi
c000c46e:	5d                   	pop    ebp
c000c46f:	c3                   	ret    
c000c470:	83 ec 0c             	sub    esp,0xc
c000c473:	50                   	push   eax
c000c474:	e8 ba 95 00 00       	call   c0015a33 <HalEndOfInterrupt(int)>
c000c479:	83 c4 10             	add    esp,0x10
c000c47c:	eb b4                	jmp    c000c432 <int_handler+0x2a>
c000c47e:	83 ec 08             	sub    esp,0x8
c000c481:	52                   	push   edx
c000c482:	57                   	push   edi
c000c483:	ff d0                	call   eax
c000c485:	83 c4 10             	add    esp,0x10
c000c488:	83 c4 0c             	add    esp,0xc
c000c48b:	5b                   	pop    ebx
c000c48c:	5e                   	pop    esi
c000c48d:	5f                   	pop    edi
c000c48e:	5d                   	pop    ebp
c000c48f:	c3                   	ret    

c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c490:	56                   	push   esi
c000c491:	31 c0                	xor    eax,eax
c000c493:	53                   	push   ebx
c000c494:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c498:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c49c:	89 ca                	mov    edx,ecx
c000c49e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c4a2:	c1 e2 04             	shl    edx,0x4
c000c4a5:	83 bc 82 e0 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde520],0x0
c000c4ad:	74 15                	je     c000c4c4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c4af:	40                   	inc    eax
c000c4b0:	83 f8 04             	cmp    eax,0x4
c000c4b3:	75 f0                	jne    c000c4a5 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c4b5:	c7 44 24 0c 24 e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e124
c000c4bd:	5b                   	pop    ebx
c000c4be:	5e                   	pop    esi
c000c4bf:	e9 27 42 00 00       	jmp    c00106eb <KePanic(char const*)>
c000c4c4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c4c7:	89 1c 85 e0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde520],ebx
c000c4ce:	89 34 85 e0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf520],esi
c000c4d5:	5b                   	pop    ebx
c000c4d6:	5e                   	pop    esi
c000c4d7:	c3                   	ret    

c000c4d8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c4d8:	57                   	push   edi
c000c4d9:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c000c4df:	56                   	push   esi
c000c4e0:	53                   	push   ebx
c000c4e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c4e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4e9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c4f0:	74 5b                	je     c000c54d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c4f2:	89 c7                	mov    edi,eax
c000c4f4:	84 c0                	test   al,al
c000c4f6:	74 24                	je     c000c51c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c4f8:	83 fe 0f             	cmp    esi,0xf
c000c4fb:	0f 8f d9 00 00 00    	jg     c000c5da <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c501:	8a 86 e0 f7 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0820]
c000c507:	25 ff 00 00 00       	and    eax,0xff
c000c50c:	66 8b bc 00 80 32 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcd80]
c000c514:	89 c6                	mov    esi,eax
c000c516:	66 d1 ef             	shr    di,1
c000c519:	83 e7 01             	and    edi,0x1
c000c51c:	83 ec 08             	sub    esp,0x8
c000c51f:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c000c524:	31 db                	xor    ebx,ebx
c000c526:	50                   	push   eax
c000c527:	68 31 e1 01 c0       	push   0xc001e131
c000c52c:	e8 eb e5 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000c531:	83 c4 10             	add    esp,0x10
c000c534:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c000c539:	85 c0                	test   eax,eax
c000c53b:	7f 51                	jg     c000c58e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c53d:	83 ec 0c             	sub    esp,0xc
c000c540:	68 48 e1 01 c0       	push   0xc001e148
c000c545:	e8 a1 41 00 00       	call   c00106eb <KePanic(char const*)>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c550:	31 d2                	xor    edx,edx
c000c552:	89 c8                	mov    eax,ecx
c000c554:	c1 e0 04             	shl    eax,0x4
c000c557:	8b 9c 90 e0 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde520]
c000c55e:	85 db                	test   ebx,ebx
c000c560:	0f 84 8b 00 00 00    	je     c000c5f1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c566:	42                   	inc    edx
c000c567:	83 fa 04             	cmp    edx,0x4
c000c56a:	75 eb                	jne    c000c557 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c56c:	83 ec 0c             	sub    esp,0xc
c000c56f:	68 9c e1 01 c0       	push   0xc001e19c
c000c574:	e8 72 41 00 00       	call   c00106eb <KePanic(char const*)>
c000c579:	83 c4 10             	add    esp,0x10
c000c57c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c581:	5b                   	pop    ebx
c000c582:	5e                   	pop    esi
c000c583:	5f                   	pop    edi
c000c584:	c3                   	ret    
c000c585:	43                   	inc    ebx
c000c586:	39 1d 80 48 02 c0    	cmp    DWORD PTR ds:0xc0024880,ebx
c000c58c:	7e af                	jle    c000c53d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c58e:	83 ec 08             	sub    esp,0x8
c000c591:	8b 04 9d a0 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb760]
c000c598:	56                   	push   esi
c000c599:	50                   	push   eax
c000c59a:	e8 63 f1 00 00       	call   c001b702 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	84 c0                	test   al,al
c000c5a4:	74 df                	je     c000c585 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c5a6:	81 e7 ff 00 00 00    	and    edi,0xff
c000c5ac:	50                   	push   eax
c000c5ad:	8d 46 20             	lea    eax,[esi+0x20]
c000c5b0:	57                   	push   edi
c000c5b1:	25 ff 00 00 00       	and    eax,0xff
c000c5b6:	6a 00                	push   0x0
c000c5b8:	50                   	push   eax
c000c5b9:	89 f0                	mov    eax,esi
c000c5bb:	6a 00                	push   0x0
c000c5bd:	25 ff 00 00 00       	and    eax,0xff
c000c5c2:	6a 00                	push   0x0
c000c5c4:	50                   	push   eax
c000c5c5:	8b 04 9d a0 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb760]
c000c5cc:	50                   	push   eax
c000c5cd:	e8 aa f2 00 00       	call   c001b87c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c5d2:	83 c4 20             	add    esp,0x20
c000c5d5:	e9 73 ff ff ff       	jmp    c000c54d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5da:	83 ec 0c             	sub    esp,0xc
c000c5dd:	31 ff                	xor    edi,edi
c000c5df:	68 64 e1 01 c0       	push   0xc001e164
c000c5e4:	e8 02 41 00 00       	call   c00106eb <KePanic(char const*)>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	e9 2b ff ff ff       	jmp    c000c51c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5f1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c5f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c5f8:	89 14 85 e0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde520],edx
c000c5ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c603:	5b                   	pop    ebx
c000c604:	89 14 85 e0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf520],edx
c000c60b:	89 f0                	mov    eax,esi
c000c60d:	5e                   	pop    esi
c000c60e:	5f                   	pop    edi
c000c60f:	c3                   	ret    

c000c610 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c614:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c618:	c1 e0 04             	shl    eax,0x4
c000c61b:	8d 50 10             	lea    edx,[eax+0x10]
c000c61e:	39 88 e0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde520],ecx
c000c624:	74 08                	je     c000c62e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c626:	83 c0 04             	add    eax,0x4
c000c629:	39 d0                	cmp    eax,edx
c000c62b:	75 f1                	jne    c000c61e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c62d:	c3                   	ret    
c000c62e:	c7 80 e0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde520],0x0
c000c638:	c7 80 e0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf520],0x0
c000c642:	eb e2                	jmp    c000c626 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c644 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c644:	53                   	push   ebx
c000c645:	83 ec 08             	sub    esp,0x8
c000c648:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c64c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c651:	74 0e                	je     c000c661 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c653:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000c658:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c65f:	75 37                	jne    c000c698 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c665:	83 c0 20             	add    eax,0x20
c000c668:	c1 e0 04             	shl    eax,0x4
c000c66b:	8d 50 10             	lea    edx,[eax+0x10]
c000c66e:	39 98 e0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde520],ebx
c000c674:	74 0c                	je     c000c682 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c676:	83 c0 04             	add    eax,0x4
c000c679:	39 d0                	cmp    eax,edx
c000c67b:	75 f1                	jne    c000c66e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c67d:	83 c4 08             	add    esp,0x8
c000c680:	5b                   	pop    ebx
c000c681:	c3                   	ret    
c000c682:	c7 80 e0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde520],0x0
c000c68c:	c7 80 e0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf520],0x0
c000c696:	eb de                	jmp    c000c676 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c698:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c69d:	7f 12                	jg     c000c6b1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c69f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c6a3:	31 c0                	xor    eax,eax
c000c6a5:	8a 81 e0 f7 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0820]
c000c6ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6af:	eb b0                	jmp    c000c661 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c6b1:	83 ec 0c             	sub    esp,0xc
c000c6b4:	68 55 e1 01 c0       	push   0xc001e155
c000c6b9:	e8 2d 40 00 00       	call   c00106eb <KePanic(char const*)>
c000c6be:	83 c4 10             	add    esp,0x10
c000c6c1:	eb 9e                	jmp    c000c661 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c6c3 <setupINTS()>:
c000c6c3:	31 c0                	xor    eax,eax
c000c6c5:	c7 80 e0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde520],0x0
c000c6cf:	c7 80 e0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf520],0x0
c000c6d9:	c7 80 e4 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde51c],0x0
c000c6e3:	c7 80 e4 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf51c],0x0
c000c6ed:	c7 80 e8 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde518],0x0
c000c6f7:	c7 80 e8 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf518],0x0
c000c701:	c7 80 ec 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde514],0x0
c000c70b:	c7 80 ec 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf514],0x0
c000c715:	83 c0 10             	add    eax,0x10
c000c718:	3d 00 10 00 00       	cmp    eax,0x1000
c000c71d:	75 a6                	jne    c000c6c5 <setupINTS()+0x2>
c000c71f:	c3                   	ret    

c000c720 <convertLegacyIRQNumber(int)>:
c000c720:	83 ec 0c             	sub    esp,0xc
c000c723:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c000c729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c72d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c734:	74 0f                	je     c000c745 <convertLegacyIRQNumber(int)+0x25>
c000c736:	83 f8 0f             	cmp    eax,0xf
c000c739:	7f 0e                	jg     c000c749 <convertLegacyIRQNumber(int)+0x29>
c000c73b:	31 c9                	xor    ecx,ecx
c000c73d:	8a 88 e0 f7 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0820]
c000c743:	89 c8                	mov    eax,ecx
c000c745:	83 c4 0c             	add    esp,0xc
c000c748:	c3                   	ret    
c000c749:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c74d:	83 ec 0c             	sub    esp,0xc
c000c750:	68 64 e1 01 c0       	push   0xc001e164
c000c755:	e8 91 3f 00 00       	call   c00106eb <KePanic(char const*)>
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c761:	83 c4 0c             	add    esp,0xc
c000c764:	c3                   	ret    
c000c765:	90                   	nop

c000c766 <startGUI(void*)>:
c000c766:	55                   	push   ebp
c000c767:	89 e5                	mov    ebp,esp
c000c769:	53                   	push   ebx
c000c76a:	83 ec 04             	sub    esp,0x4
c000c76d:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c772:	48                   	dec    eax
c000c773:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000c778:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c77d:	85 c0                	test   eax,eax
c000c77f:	75 01                	jne    c000c782 <startGUI(void*)+0x1c>
c000c781:	fb                   	sti    
c000c782:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000c788:	83 ec 08             	sub    esp,0x8
c000c78b:	6a 01                	push   0x1
c000c78d:	68 c1 e1 01 c0       	push   0xc001e1c1
c000c792:	e8 bb 67 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c000c797:	83 c4 10             	add    esp,0x10
c000c79a:	83 ec 08             	sub    esp,0x8
c000c79d:	53                   	push   ebx
c000c79e:	50                   	push   eax
c000c79f:	e8 df 69 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000c7ad:	83 ec 08             	sub    esp,0x8
c000c7b0:	6a 01                	push   0x1
c000c7b2:	68 db e1 01 c0       	push   0xc001e1db
c000c7b7:	e8 96 67 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c000c7bc:	83 c4 10             	add    esp,0x10
c000c7bf:	83 ec 08             	sub    esp,0x8
c000c7c2:	53                   	push   ebx
c000c7c3:	50                   	push   eax
c000c7c4:	e8 ba 69 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	90                   	nop
c000c7cd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c7d0:	c9                   	leave  
c000c7d1:	c3                   	ret    

c000c7d2 <startGUIVESA(void*)>:
c000c7d2:	55                   	push   ebp
c000c7d3:	89 e5                	mov    ebp,esp
c000c7d5:	53                   	push   ebx
c000c7d6:	83 ec 04             	sub    esp,0x4
c000c7d9:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c7de:	48                   	dec    eax
c000c7df:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000c7e4:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c7e9:	85 c0                	test   eax,eax
c000c7eb:	75 01                	jne    c000c7ee <startGUIVESA(void*)+0x1c>
c000c7ed:	fb                   	sti    
c000c7ee:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000c7f4:	83 ec 08             	sub    esp,0x8
c000c7f7:	6a 01                	push   0x1
c000c7f9:	68 f9 e1 01 c0       	push   0xc001e1f9
c000c7fe:	e8 4f 67 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c000c803:	83 c4 10             	add    esp,0x10
c000c806:	83 ec 08             	sub    esp,0x8
c000c809:	53                   	push   ebx
c000c80a:	50                   	push   eax
c000c80b:	e8 73 69 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c000c810:	83 c4 10             	add    esp,0x10
c000c813:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000c819:	83 ec 08             	sub    esp,0x8
c000c81c:	6a 01                	push   0x1
c000c81e:	68 db e1 01 c0       	push   0xc001e1db
c000c823:	e8 2a 67 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c000c828:	83 c4 10             	add    esp,0x10
c000c82b:	83 ec 08             	sub    esp,0x8
c000c82e:	53                   	push   ebx
c000c82f:	50                   	push   eax
c000c830:	e8 4e 69 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c000c835:	83 c4 10             	add    esp,0x10
c000c838:	90                   	nop
c000c839:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c83c:	c9                   	leave  
c000c83d:	c3                   	ret    

c000c83e <sendKeyToTerminal(unsigned char)>:
c000c83e:	55                   	push   ebp
c000c83f:	89 e5                	mov    ebp,esp
c000c841:	83 ec 28             	sub    esp,0x28
c000c844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c847:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c84a:	8b 15 24 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a24
c000c850:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c853:	25 ff 00 00 00       	and    eax,0xff
c000c858:	83 ec 08             	sub    esp,0x8
c000c85b:	50                   	push   eax
c000c85c:	52                   	push   edx
c000c85d:	e8 ac c8 ff ff       	call   c000910e <VgaText::receiveKey(unsigned char)>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c869:	0f 85 8f 00 00 00    	jne    c000c8fe <sendKeyToTerminal(unsigned char)+0xc0>
c000c86f:	fa                   	cli    
c000c870:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c875:	40                   	inc    eax
c000c876:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000c87b:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c000c880:	40                   	inc    eax
c000c881:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c000c886:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c000c88b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c88e:	c7 05 e0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ae0,0x0
c000c898:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c89c:	74 1f                	je     c000c8bd <sendKeyToTerminal(unsigned char)+0x7f>
c000c89e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c8a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c8a7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c8aa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c8ad:	83 ec 0c             	sub    esp,0xc
c000c8b0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c8b3:	e8 50 75 00 00       	call   c0013e08 <unblockTask(ThreadControlBlock*)>
c000c8b8:	83 c4 10             	add    esp,0x10
c000c8bb:	eb db                	jmp    c000c898 <sendKeyToTerminal(unsigned char)+0x5a>
c000c8bd:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c000c8c2:	48                   	dec    eax
c000c8c3:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c000c8c8:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c000c8cd:	85 c0                	test   eax,eax
c000c8cf:	75 18                	jne    c000c8e9 <sendKeyToTerminal(unsigned char)+0xab>
c000c8d1:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c000c8d6:	85 c0                	test   eax,eax
c000c8d8:	74 0f                	je     c000c8e9 <sendKeyToTerminal(unsigned char)+0xab>
c000c8da:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c000c8e4:	e8 5b 70 00 00       	call   c0013944 <schedule()>
c000c8e9:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c8ee:	48                   	dec    eax
c000c8ef:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000c8f4:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000c8f9:	85 c0                	test   eax,eax
c000c8fb:	75 01                	jne    c000c8fe <sendKeyToTerminal(unsigned char)+0xc0>
c000c8fd:	fb                   	sti    
c000c8fe:	90                   	nop
c000c8ff:	c9                   	leave  
c000c900:	c3                   	ret    

c000c901 <sendKeyboardToken(KeyboardToken)>:
c000c901:	55                   	push   ebp
c000c902:	89 e5                	mov    ebp,esp
c000c904:	83 ec 18             	sub    esp,0x18
c000c907:	e8 2f 3e 00 00       	call   c001073b <Krnl::userIOReceived()>
c000c90c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c90f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c912:	25 ff ff 00 00       	and    eax,0xffff
c000c917:	83 f2 01             	xor    edx,0x1
c000c91a:	88 90 00 2b 02 c0    	mov    BYTE PTR [eax-0x3ffdd500],dl
c000c920:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000c925:	85 c0                	test   eax,eax
c000c927:	74 24                	je     c000c94d <sendKeyboardToken(KeyboardToken)+0x4c>
c000c929:	8b 0d e8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ae8
c000c92f:	83 ec 04             	sub    esp,0x4
c000c932:	68 00 2b 02 c0       	push   0xc0022b00
c000c937:	83 ec 08             	sub    esp,0x8
c000c93a:	89 e2                	mov    edx,esp
c000c93c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c93f:	89 02                	mov    DWORD PTR [edx],eax
c000c941:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c944:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c948:	ff d1                	call   ecx
c000c94a:	83 c4 10             	add    esp,0x10
c000c94d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c951:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c954:	a0 08 2f 02 c0       	mov    al,ds:0xc0022f08
c000c959:	38 c2                	cmp    dl,al
c000c95b:	74 1e                	je     c000c97b <sendKeyboardToken(KeyboardToken)+0x7a>
c000c95d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c960:	a2 08 2f 02 c0       	mov    ds:0xc0022f08,al
c000c965:	a0 08 2f 02 c0       	mov    al,ds:0xc0022f08
c000c96a:	25 ff 00 00 00       	and    eax,0xff
c000c96f:	83 ec 0c             	sub    esp,0xc
c000c972:	50                   	push   eax
c000c973:	e8 e8 be ff ff       	call   c0008860 <setTerminalScrollLock(bool)>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c97e:	84 c0                	test   al,al
c000c980:	0f 84 ae 00 00 00    	je     c000ca34 <sendKeyboardToken(KeyboardToken)+0x133>
c000c986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c989:	66 3d 10 03          	cmp    ax,0x310
c000c98d:	75 06                	jne    c000c995 <sendKeyboardToken(KeyboardToken)+0x94>
c000c98f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c998:	66 3d 11 03          	cmp    ax,0x311
c000c99c:	75 06                	jne    c000c9a4 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c99e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a7:	66 3d 12 03          	cmp    ax,0x312
c000c9ab:	75 06                	jne    c000c9b3 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c9ad:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c9b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b6:	66 3d 13 03          	cmp    ax,0x313
c000c9ba:	75 06                	jne    c000c9c2 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c9bc:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c9c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c5:	66 3d 14 03          	cmp    ax,0x314
c000c9c9:	75 06                	jne    c000c9d1 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c9cb:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c9d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d4:	66 3d 15 03          	cmp    ax,0x315
c000c9d8:	75 06                	jne    c000c9e0 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c9da:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e3:	66 3d 16 03          	cmp    ax,0x316
c000c9e7:	75 06                	jne    c000c9ef <sendKeyboardToken(KeyboardToken)+0xee>
c000c9e9:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c9ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9f2:	66 3d 17 03          	cmp    ax,0x317
c000c9f6:	75 06                	jne    c000c9fe <sendKeyboardToken(KeyboardToken)+0xfd>
c000c9f8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c9fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca01:	66 3d 18 03          	cmp    ax,0x318
c000ca05:	75 06                	jne    c000ca0d <sendKeyboardToken(KeyboardToken)+0x10c>
c000ca07:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000ca0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca10:	66 3d 19 03          	cmp    ax,0x319
c000ca14:	75 06                	jne    c000ca1c <sendKeyboardToken(KeyboardToken)+0x11b>
c000ca16:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000ca1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca1f:	66 3d 1a 03          	cmp    ax,0x31a
c000ca23:	0f 85 c9 00 00 00    	jne    c000caf2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000ca29:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000ca2f:	e9 be 00 00 00       	jmp    c000caf2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000ca34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca37:	66 3d 10 03          	cmp    ax,0x310
c000ca3b:	75 0a                	jne    c000ca47 <sendKeyboardToken(KeyboardToken)+0x146>
c000ca3d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000ca43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca4a:	66 3d 11 03          	cmp    ax,0x311
c000ca4e:	75 0a                	jne    c000ca5a <sendKeyboardToken(KeyboardToken)+0x159>
c000ca50:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000ca56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5d:	66 3d 12 03          	cmp    ax,0x312
c000ca61:	75 0a                	jne    c000ca6d <sendKeyboardToken(KeyboardToken)+0x16c>
c000ca63:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000ca69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca70:	66 3d 13 03          	cmp    ax,0x313
c000ca74:	75 0a                	jne    c000ca80 <sendKeyboardToken(KeyboardToken)+0x17f>
c000ca76:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000ca7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca83:	66 3d 14 03          	cmp    ax,0x314
c000ca87:	75 0a                	jne    c000ca93 <sendKeyboardToken(KeyboardToken)+0x192>
c000ca89:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000ca8f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca96:	66 3d 15 03          	cmp    ax,0x315
c000ca9a:	75 0a                	jne    c000caa6 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000ca9c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000caa2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000caa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa9:	66 3d 16 03          	cmp    ax,0x316
c000caad:	75 0a                	jne    c000cab9 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000caaf:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cab5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cabc:	66 3d 17 03          	cmp    ax,0x317
c000cac0:	75 0a                	jne    c000cacc <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cac2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cac8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cacc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cacf:	66 3d 18 03          	cmp    ax,0x318
c000cad3:	75 0a                	jne    c000cadf <sendKeyboardToken(KeyboardToken)+0x1de>
c000cad5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cadb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cadf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae2:	66 3d 19 03          	cmp    ax,0x319
c000cae6:	75 0a                	jne    c000caf2 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cae8:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000caee:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000caf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf5:	66 3d 00 02          	cmp    ax,0x200
c000caf9:	75 2c                	jne    c000cb27 <sendKeyboardToken(KeyboardToken)+0x226>
c000cafb:	a0 00 2f 02 c0       	mov    al,ds:0xc0022f00
c000cb00:	83 f0 01             	xor    eax,0x1
c000cb03:	84 c0                	test   al,al
c000cb05:	74 20                	je     c000cb27 <sendKeyboardToken(KeyboardToken)+0x226>
c000cb07:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000cb0c:	6a 01                	push   0x1
c000cb0e:	6a 00                	push   0x0
c000cb10:	68 66 c7 00 c0       	push   0xc000c766
c000cb15:	50                   	push   eax
c000cb16:	e8 09 6c 00 00       	call   c0013724 <Process::createThread(void (*)(void*), void*, int)>
c000cb1b:	83 c4 10             	add    esp,0x10
c000cb1e:	c6 05 00 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f00,0x1
c000cb25:	eb 33                	jmp    c000cb5a <sendKeyboardToken(KeyboardToken)+0x259>
c000cb27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb2a:	66 3d 01 02          	cmp    ax,0x201
c000cb2e:	75 2a                	jne    c000cb5a <sendKeyboardToken(KeyboardToken)+0x259>
c000cb30:	a0 00 2f 02 c0       	mov    al,ds:0xc0022f00
c000cb35:	83 f0 01             	xor    eax,0x1
c000cb38:	84 c0                	test   al,al
c000cb3a:	74 1e                	je     c000cb5a <sendKeyboardToken(KeyboardToken)+0x259>
c000cb3c:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000cb41:	6a 01                	push   0x1
c000cb43:	6a 00                	push   0x0
c000cb45:	68 d2 c7 00 c0       	push   0xc000c7d2
c000cb4a:	50                   	push   eax
c000cb4b:	e8 d4 6b 00 00       	call   c0013724 <Process::createThread(void (*)(void*), void*, int)>
c000cb50:	83 c4 10             	add    esp,0x10
c000cb53:	c6 05 00 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f00,0x1
c000cb5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb5d:	66 3d 1d 03          	cmp    ax,0x31d
c000cb61:	75 06                	jne    c000cb69 <sendKeyboardToken(KeyboardToken)+0x268>
c000cb63:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cb69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb6c:	66 3d 1c 03          	cmp    ax,0x31c
c000cb70:	75 06                	jne    c000cb78 <sendKeyboardToken(KeyboardToken)+0x277>
c000cb72:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cb78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb7b:	66 3d 1b 03          	cmp    ax,0x31b
c000cb7f:	75 06                	jne    c000cb87 <sendKeyboardToken(KeyboardToken)+0x286>
c000cb81:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cb87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb8a:	66 3d 1e 03          	cmp    ax,0x31e
c000cb8e:	75 06                	jne    c000cb96 <sendKeyboardToken(KeyboardToken)+0x295>
c000cb90:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cb96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb99:	66 3d 1f 03          	cmp    ax,0x31f
c000cb9d:	75 06                	jne    c000cba5 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cb9f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba8:	66 3d 1a 03          	cmp    ax,0x31a
c000cbac:	75 06                	jne    c000cbb4 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cbae:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cbb4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cbb8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbbb:	83 f0 01             	xor    eax,0x1
c000cbbe:	84 c0                	test   al,al
c000cbc0:	74 7b                	je     c000cc3d <sendKeyboardToken(KeyboardToken)+0x33c>
c000cbc2:	a0 01 2c 02 c0       	mov    al,ds:0xc0022c01
c000cbc7:	84 c0                	test   al,al
c000cbc9:	74 43                	je     c000cc0e <sendKeyboardToken(KeyboardToken)+0x30d>
c000cbcb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbcf:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cbd3:	74 2d                	je     c000cc02 <sendKeyboardToken(KeyboardToken)+0x301>
c000cbd5:	8b 15 04 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f04
c000cbdb:	89 d0                	mov    eax,edx
c000cbdd:	c1 e0 02             	shl    eax,0x2
c000cbe0:	01 d0                	add    eax,edx
c000cbe2:	01 c0                	add    eax,eax
c000cbe4:	a3 04 2f 02 c0       	mov    ds:0xc0022f04,eax
c000cbe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbec:	25 ff ff 00 00       	and    eax,0xffff
c000cbf1:	8d 50 d0             	lea    edx,[eax-0x30]
c000cbf4:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000cbf9:	01 d0                	add    eax,edx
c000cbfb:	a3 04 2f 02 c0       	mov    ds:0xc0022f04,eax
c000cc00:	eb 71                	jmp    c000cc73 <sendKeyboardToken(KeyboardToken)+0x372>
c000cc02:	c7 05 04 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x0
c000cc0c:	eb 65                	jmp    c000cc73 <sendKeyboardToken(KeyboardToken)+0x372>
c000cc0e:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000cc13:	85 c0                	test   eax,eax
c000cc15:	74 1a                	je     c000cc31 <sendKeyboardToken(KeyboardToken)+0x330>
c000cc17:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000cc1c:	25 ff 00 00 00       	and    eax,0xff
c000cc21:	83 ec 0c             	sub    esp,0xc
c000cc24:	50                   	push   eax
c000cc25:	e8 14 fc ff ff       	call   c000c83e <sendKeyToTerminal(unsigned char)>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc31:	c7 05 04 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x0
c000cc3b:	eb 36                	jmp    c000cc73 <sendKeyboardToken(KeyboardToken)+0x372>
c000cc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc40:	66 3d 01 01          	cmp    ax,0x101
c000cc44:	75 2d                	jne    c000cc73 <sendKeyboardToken(KeyboardToken)+0x372>
c000cc46:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000cc4b:	85 c0                	test   eax,eax
c000cc4d:	74 1a                	je     c000cc69 <sendKeyboardToken(KeyboardToken)+0x368>
c000cc4f:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c000cc54:	25 ff 00 00 00       	and    eax,0xff
c000cc59:	83 ec 0c             	sub    esp,0xc
c000cc5c:	50                   	push   eax
c000cc5d:	e8 dc fb ff ff       	call   c000c83e <sendKeyToTerminal(unsigned char)>
c000cc62:	83 c4 10             	add    esp,0x10
c000cc65:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc69:	c7 05 04 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x0
c000cc73:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc76:	83 f0 01             	xor    eax,0x1
c000cc79:	84 c0                	test   al,al
c000cc7b:	74 4e                	je     c000cccb <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cc7d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc80:	83 f0 01             	xor    eax,0x1
c000cc83:	84 c0                	test   al,al
c000cc85:	74 44                	je     c000cccb <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cc87:	a0 00 2c 02 c0       	mov    al,ds:0xc0022c00
c000cc8c:	83 f0 01             	xor    eax,0x1
c000cc8f:	84 c0                	test   al,al
c000cc91:	74 38                	je     c000cccb <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cc93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc96:	66 83 f8 1f          	cmp    ax,0x1f
c000cc9a:	76 09                	jbe    c000cca5 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cc9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc9f:	66 83 f8 7e          	cmp    ax,0x7e
c000cca3:	76 12                	jbe    c000ccb7 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cca8:	66 83 f8 0a          	cmp    ax,0xa
c000ccac:	74 09                	je     c000ccb7 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000ccae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccb1:	66 83 f8 08          	cmp    ax,0x8
c000ccb5:	75 14                	jne    c000cccb <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ccb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccba:	25 ff 00 00 00       	and    eax,0xff
c000ccbf:	83 ec 0c             	sub    esp,0xc
c000ccc2:	50                   	push   eax
c000ccc3:	e8 76 fb ff ff       	call   c000c83e <sendKeyToTerminal(unsigned char)>
c000ccc8:	83 c4 10             	add    esp,0x10
c000cccb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ccce:	83 f0 01             	xor    eax,0x1
c000ccd1:	84 c0                	test   al,al
c000ccd3:	74 51                	je     c000cd26 <sendKeyboardToken(KeyboardToken)+0x425>
c000ccd5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ccd8:	83 f0 01             	xor    eax,0x1
c000ccdb:	84 c0                	test   al,al
c000ccdd:	74 47                	je     c000cd26 <sendKeyboardToken(KeyboardToken)+0x425>
c000ccdf:	a0 00 2c 02 c0       	mov    al,ds:0xc0022c00
c000cce4:	84 c0                	test   al,al
c000cce6:	74 3e                	je     c000cd26 <sendKeyboardToken(KeyboardToken)+0x425>
c000cce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cceb:	66 83 f8 3f          	cmp    ax,0x3f
c000ccef:	76 35                	jbe    c000cd26 <sendKeyboardToken(KeyboardToken)+0x425>
c000ccf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccf4:	66 83 f8 7f          	cmp    ax,0x7f
c000ccf8:	77 2c                	ja     c000cd26 <sendKeyboardToken(KeyboardToken)+0x425>
c000ccfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccfd:	88 c2                	mov    dl,al
c000ccff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd02:	66 83 f8 5f          	cmp    ax,0x5f
c000cd06:	76 04                	jbe    c000cd0c <sendKeyboardToken(KeyboardToken)+0x40b>
c000cd08:	b0 20                	mov    al,0x20
c000cd0a:	eb 02                	jmp    c000cd0e <sendKeyboardToken(KeyboardToken)+0x40d>
c000cd0c:	b0 00                	mov    al,0x0
c000cd0e:	29 c2                	sub    edx,eax
c000cd10:	88 d0                	mov    al,dl
c000cd12:	83 e8 40             	sub    eax,0x40
c000cd15:	25 ff 00 00 00       	and    eax,0xff
c000cd1a:	83 ec 0c             	sub    esp,0xc
c000cd1d:	50                   	push   eax
c000cd1e:	e8 1b fb ff ff       	call   c000c83e <sendKeyToTerminal(unsigned char)>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd29:	66 3d 00 03          	cmp    ax,0x300
c000cd2d:	75 0f                	jne    c000cd3e <sendKeyboardToken(KeyboardToken)+0x43d>
c000cd2f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd32:	83 f0 01             	xor    eax,0x1
c000cd35:	84 c0                	test   al,al
c000cd37:	74 05                	je     c000cd3e <sendKeyboardToken(KeyboardToken)+0x43d>
c000cd39:	e8 23 bb ff ff       	call   c0008861 <doTerminalCycle()>
c000cd3e:	90                   	nop
c000cd3f:	c9                   	leave  
c000cd40:	c3                   	ret    

c000cd41 <clearInternalKeybuffer(VgaText*)>:
c000cd41:	55                   	push   ebp
c000cd42:	89 e5                	mov    ebp,esp
c000cd44:	83 ec 08             	sub    esp,0x8
c000cd47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd4a:	05 b2 00 00 00       	add    eax,0xb2
c000cd4f:	83 ec 0c             	sub    esp,0xc
c000cd52:	50                   	push   eax
c000cd53:	e8 08 38 ff ff       	call   c0000560 <strlen>
c000cd58:	83 c4 10             	add    esp,0x10
c000cd5b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd5e:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cd64:	83 ec 04             	sub    esp,0x4
c000cd67:	50                   	push   eax
c000cd68:	6a 00                	push   0x0
c000cd6a:	52                   	push   edx
c000cd6b:	e8 80 37 ff ff       	call   c00004f0 <memset>
c000cd70:	83 c4 10             	add    esp,0x10
c000cd73:	90                   	nop
c000cd74:	c9                   	leave  
c000cd75:	c3                   	ret    

c000cd76 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cd76:	55                   	push   ebp
c000cd77:	89 e5                	mov    ebp,esp
c000cd79:	83 ec 18             	sub    esp,0x18
c000cd7c:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000cd81:	85 c0                	test   eax,eax
c000cd83:	74 2a                	je     c000cdaf <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cd85:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cd8b:	8b 0d e8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ae8
c000cd91:	83 ec 04             	sub    esp,0x4
c000cd94:	68 00 2b 02 c0       	push   0xc0022b00
c000cd99:	83 ec 08             	sub    esp,0x8
c000cd9c:	89 e2                	mov    edx,esp
c000cd9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cda1:	89 02                	mov    DWORD PTR [edx],eax
c000cda3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cda6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cdaa:	ff d1                	call   ecx
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	fb                   	sti    
c000cdb0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cdb7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cdbb:	0f 84 a1 00 00 00    	je     c000ce62 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000cdc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc4:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cdca:	84 c0                	test   al,al
c000cdcc:	75 28                	jne    c000cdf6 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000cdce:	fa                   	cli    
c000cdcf:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000cdd4:	40                   	inc    eax
c000cdd5:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000cdda:	e8 65 6b 00 00       	call   c0013944 <schedule()>
c000cddf:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000cde4:	48                   	dec    eax
c000cde5:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000cdea:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000cdef:	85 c0                	test   eax,eax
c000cdf1:	75 ce                	jne    c000cdc1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cdf3:	fb                   	sti    
c000cdf4:	eb cb                	jmp    c000cdc1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cdf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cdf9:	8d 50 01             	lea    edx,[eax+0x1]
c000cdfc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cdff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce02:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ce08:	88 10                	mov    BYTE PTR [eax],dl
c000ce0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce0d:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce13:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	05 b2 00 00 00       	add    eax,0xb2
c000ce1e:	83 ec 0c             	sub    esp,0xc
c000ce21:	50                   	push   eax
c000ce22:	e8 39 37 ff ff       	call   c0000560 <strlen>
c000ce27:	83 c4 10             	add    esp,0x10
c000ce2a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce2d:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce33:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ce36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce39:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce3f:	83 ec 04             	sub    esp,0x4
c000ce42:	50                   	push   eax
c000ce43:	51                   	push   ecx
c000ce44:	52                   	push   edx
c000ce45:	e8 b6 35 ff ff       	call   c0000400 <memmove>
c000ce4a:	83 c4 10             	add    esp,0x10
c000ce4d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ce50:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ce53:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ce57:	0f 85 5a ff ff ff    	jne    c000cdb7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce60:	eb 03                	jmp    c000ce65 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000ce62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce65:	c9                   	leave  
c000ce66:	c3                   	ret    
c000ce67:	90                   	nop

c000ce68 <Keyboard::Keyboard(char const*)>:
c000ce68:	83 ec 0c             	sub    esp,0xc
c000ce6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6f:	83 ec 08             	sub    esp,0x8
c000ce72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce76:	50                   	push   eax
c000ce77:	e8 78 f2 ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000ce7c:	83 c4 10             	add    esp,0x10
c000ce7f:	ba 1c e2 01 c0       	mov    edx,0xc001e21c
c000ce84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce88:	89 10                	mov    DWORD PTR [eax],edx
c000ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce98:	c6 05 e4 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022ae4,0x1
c000ce9f:	90                   	nop
c000cea0:	83 c4 0c             	add    esp,0xc
c000cea3:	c3                   	ret    

c000cea4 <Keyboard::~Keyboard()>:
c000cea4:	83 ec 0c             	sub    esp,0xc
c000cea7:	ba 1c e2 01 c0       	mov    edx,0xc001e21c
c000ceac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb0:	89 10                	mov    DWORD PTR [eax],edx
c000ceb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb6:	83 ec 0c             	sub    esp,0xc
c000ceb9:	50                   	push   eax
c000ceba:	e8 9f ef ff ff       	call   c000be5e <Device::~Device()>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	90                   	nop
c000cec3:	83 c4 0c             	add    esp,0xc
c000cec6:	c3                   	ret    
c000cec7:	90                   	nop

c000cec8 <Keyboard::~Keyboard()>:
c000cec8:	83 ec 0c             	sub    esp,0xc
c000cecb:	83 ec 0c             	sub    esp,0xc
c000cece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced2:	e8 cd ff ff ff       	call   c000cea4 <Keyboard::~Keyboard()>
c000ced7:	83 c4 10             	add    esp,0x10
c000ceda:	83 ec 08             	sub    esp,0x8
c000cedd:	68 5c 01 00 00       	push   0x15c
c000cee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee6:	e8 3b db ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	83 c4 0c             	add    esp,0xc
c000cef1:	c3                   	ret    

c000cef2 <LogicalDisk::close(int, int, void*)>:
c000cef2:	83 c8 ff             	or     eax,0xffffffff
c000cef5:	c3                   	ret    

c000cef6 <LogicalDisk::~LogicalDisk()>:
c000cef6:	83 ec 0c             	sub    esp,0xc
c000cef9:	ba 94 e2 01 c0       	mov    edx,0xc001e294
c000cefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf02:	89 10                	mov    DWORD PTR [eax],edx
c000cf04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf08:	83 ec 0c             	sub    esp,0xc
c000cf0b:	50                   	push   eax
c000cf0c:	e8 4d ef ff ff       	call   c000be5e <Device::~Device()>
c000cf11:	83 c4 10             	add    esp,0x10
c000cf14:	90                   	nop
c000cf15:	83 c4 0c             	add    esp,0xc
c000cf18:	c3                   	ret    
c000cf19:	90                   	nop

c000cf1a <LogicalDisk::~LogicalDisk()>:
c000cf1a:	83 ec 0c             	sub    esp,0xc
c000cf1d:	83 ec 0c             	sub    esp,0xc
c000cf20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf24:	e8 cd ff ff ff       	call   c000cef6 <LogicalDisk::~LogicalDisk()>
c000cf29:	83 c4 10             	add    esp,0x10
c000cf2c:	83 ec 08             	sub    esp,0x8
c000cf2f:	68 74 01 00 00       	push   0x174
c000cf34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf38:	e8 e9 da ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000cf3d:	83 c4 10             	add    esp,0x10
c000cf40:	83 c4 0c             	add    esp,0xc
c000cf43:	c3                   	ret    

c000cf44 <LogicalDisk::open(int, int, void*)>:
c000cf44:	83 ec 18             	sub    esp,0x18
c000cf47:	68 48 e2 01 c0       	push   0xc001e248
c000cf4c:	e8 9a 37 00 00       	call   c00106eb <KePanic(char const*)>
c000cf51:	83 c8 ff             	or     eax,0xffffffff
c000cf54:	83 c4 1c             	add    esp,0x1c
c000cf57:	c3                   	ret    

c000cf58 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf58:	53                   	push   ebx
c000cf59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf65:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf6b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf71:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf77:	77 10                	ja     c000cf89 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf79:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf7f:	89 d3                	mov    ebx,edx
c000cf81:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf87:	72 05                	jb     c000cf8e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf89:	83 c8 ff             	or     eax,0xffffffff
c000cf8c:	89 c2                	mov    edx,eax
c000cf8e:	5b                   	pop    ebx
c000cf8f:	c3                   	ret    

c000cf90 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf90:	56                   	push   esi
c000cf91:	83 c8 ff             	or     eax,0xffffffff
c000cf94:	53                   	push   ebx
c000cf95:	89 c2                	mov    edx,eax
c000cf97:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf9b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf9f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cfa3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cfa9:	77 27                	ja     c000cfd2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfab:	89 d8                	mov    eax,ebx
c000cfad:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cfb3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cfb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfbe:	89 c2                	mov    edx,eax
c000cfc0:	73 10                	jae    c000cfd2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfc2:	89 c8                	mov    eax,ecx
c000cfc4:	89 da                	mov    edx,ebx
c000cfc6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfcc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfd2:	5b                   	pop    ebx
c000cfd3:	5e                   	pop    esi
c000cfd4:	c3                   	ret    
c000cfd5:	90                   	nop

c000cfd6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfd6:	83 ec 1c             	sub    esp,0x1c
c000cfd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfe9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfed:	89 04 24             	mov    DWORD PTR [esp],eax
c000cff0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cff4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cffc:	83 ec 08             	sub    esp,0x8
c000cfff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d003:	50                   	push   eax
c000d004:	e8 eb f0 ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	ba 94 e2 01 c0       	mov    edx,0xc001e294
c000d011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d015:	89 10                	mov    DWORD PTR [eax],edx
c000d017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d01b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d026:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d02d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d031:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d03b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d03f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d043:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d047:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d04d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d053:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d057:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d05a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d05e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d064:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d06a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d06e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d072:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d07c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d086:	90                   	nop
c000d087:	83 c4 1c             	add    esp,0x1c
c000d08a:	c3                   	ret    
c000d08b:	90                   	nop

c000d08c <LogicalDisk::assignDriveLetter()>:
c000d08c:	55                   	push   ebp
c000d08d:	57                   	push   edi
c000d08e:	56                   	push   esi
c000d08f:	53                   	push   ebx
c000d090:	83 ec 14             	sub    esp,0x14
c000d093:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d097:	8b 3d 20 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f20
c000d09d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d0a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d0a7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d0ad:	8b 3d 24 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f24
c000d0b3:	3c 01                	cmp    al,0x1
c000d0b5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d0b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d0bd:	19 c0                	sbb    eax,eax
c000d0bf:	83 e0 02             	and    eax,0x2
c000d0c2:	83 c0 41             	add    eax,0x41
c000d0c5:	0f be e8             	movsx  ebp,al
c000d0c8:	3c 43                	cmp    al,0x43
c000d0ca:	75 10                	jne    c000d0dc <LogicalDisk::assignDriveLetter()+0x50>
c000d0cc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d0d3:	75 5d                	jne    c000d132 <LogicalDisk::assignDriveLetter()+0xa6>
c000d0d5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d0da:	75 56                	jne    c000d132 <LogicalDisk::assignDriveLetter()+0xa6>
c000d0dc:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0df:	ba 01 00 00 00       	mov    edx,0x1
c000d0e4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d0e8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d0ec:	d3 e2                	shl    edx,cl
c000d0ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d0f2:	89 d7                	mov    edi,edx
c000d0f4:	89 d6                	mov    esi,edx
c000d0f6:	c1 ff 1f             	sar    edi,0x1f
c000d0f9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d0fd:	21 f9                	and    ecx,edi
c000d0ff:	09 d1                	or     ecx,edx
c000d101:	75 2f                	jne    c000d132 <LogicalDisk::assignDriveLetter()+0xa6>
c000d103:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d107:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d10b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d111:	09 f2                	or     edx,esi
c000d113:	89 15 20 2f 02 c0    	mov    DWORD PTR ds:0xc0022f20,edx
c000d119:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d11d:	09 fa                	or     edx,edi
c000d11f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d123:	89 15 24 2f 02 c0    	mov    DWORD PTR ds:0xc0022f24,edx
c000d129:	89 1c bd 40 2f 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd0c0],ebx
c000d130:	eb 08                	jmp    c000d13a <LogicalDisk::assignDriveLetter()+0xae>
c000d132:	45                   	inc    ebp
c000d133:	40                   	inc    eax
c000d134:	3c 5b                	cmp    al,0x5b
c000d136:	75 90                	jne    c000d0c8 <LogicalDisk::assignDriveLetter()+0x3c>
c000d138:	31 c0                	xor    eax,eax
c000d13a:	83 c4 14             	add    esp,0x14
c000d13d:	5b                   	pop    ebx
c000d13e:	5e                   	pop    esi
c000d13f:	5f                   	pop    edi
c000d140:	5d                   	pop    ebp
c000d141:	c3                   	ret    

c000d142 <LogicalDisk::mount()>:
c000d142:	56                   	push   esi
c000d143:	53                   	push   ebx
c000d144:	53                   	push   ebx
c000d145:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d149:	8b 1d d4 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad4
c000d14f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d159:	85 db                	test   ebx,ebx
c000d15b:	74 27                	je     c000d184 <LogicalDisk::mount()+0x42>
c000d15d:	51                   	push   ecx
c000d15e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d165:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d167:	83 e8 41             	sub    eax,0x41
c000d16a:	50                   	push   eax
c000d16b:	56                   	push   esi
c000d16c:	53                   	push   ebx
c000d16d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	84 c0                	test   al,al
c000d175:	74 08                	je     c000d17f <LogicalDisk::mount()+0x3d>
c000d177:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d17d:	eb 07                	jmp    c000d186 <LogicalDisk::mount()+0x44>
c000d17f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d182:	eb d5                	jmp    c000d159 <LogicalDisk::mount()+0x17>
c000d184:	31 c0                	xor    eax,eax
c000d186:	5a                   	pop    edx
c000d187:	5b                   	pop    ebx
c000d188:	5e                   	pop    esi
c000d189:	c3                   	ret    

c000d18a <LogicalDisk::unmount()>:
c000d18a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d18e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d198:	c3                   	ret    
c000d199:	90                   	nop

c000d19a <LogicalDisk::eject()>:
c000d19a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d19e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d1a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d1a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d1aa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d1ad:	90                   	nop

c000d1ae <LogicalDisk::unassignDriveLetter()>:
c000d1ae:	57                   	push   edi
c000d1af:	56                   	push   esi
c000d1b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d1bb:	84 c9                	test   cl,cl
c000d1bd:	75 0f                	jne    c000d1ce <LogicalDisk::unassignDriveLetter()+0x20>
c000d1bf:	c7 44 24 0c 6c e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e26c
c000d1c7:	5e                   	pop    esi
c000d1c8:	5f                   	pop    edi
c000d1c9:	e9 1d 35 00 00       	jmp    c00106eb <KePanic(char const*)>
c000d1ce:	83 e9 41             	sub    ecx,0x41
c000d1d1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d1d8:	b8 01 00 00 00       	mov    eax,0x1
c000d1dd:	c7 04 8d 40 2f 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd0c0],0x0
c000d1e8:	d3 e0                	shl    eax,cl
c000d1ea:	89 c7                	mov    edi,eax
c000d1ec:	f7 d0                	not    eax
c000d1ee:	c1 ff 1f             	sar    edi,0x1f
c000d1f1:	21 05 20 2f 02 c0    	and    DWORD PTR ds:0xc0022f20,eax
c000d1f7:	89 fe                	mov    esi,edi
c000d1f9:	f7 d6                	not    esi
c000d1fb:	21 35 24 2f 02 c0    	and    DWORD PTR ds:0xc0022f24,esi
c000d201:	5e                   	pop    esi
c000d202:	5f                   	pop    edi
c000d203:	c3                   	ret    

c000d204 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d204:	57                   	push   edi
c000d205:	56                   	push   esi
c000d206:	53                   	push   ebx
c000d207:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d20b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d20f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d213:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d217:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d21d:	77 41                	ja     c000d260 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d21f:	99                   	cdq    
c000d220:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d226:	01 c8                	add    eax,ecx
c000d228:	11 da                	adc    edx,ebx
c000d22a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d230:	19 d7                	sbb    edi,edx
c000d232:	72 33                	jb     c000d267 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d234:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d23a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d240:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d244:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d248:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d24e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d254:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d258:	5b                   	pop    ebx
c000d259:	5e                   	pop    esi
c000d25a:	5f                   	pop    edi
c000d25b:	e9 4e 0a 00 00       	jmp    c000dcae <VCache::read(unsigned long long, int, void*)>
c000d260:	b8 05 00 00 00       	mov    eax,0x5
c000d265:	eb 05                	jmp    c000d26c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d267:	b8 07 00 00 00       	mov    eax,0x7
c000d26c:	5b                   	pop    ebx
c000d26d:	5e                   	pop    esi
c000d26e:	5f                   	pop    edi
c000d26f:	c3                   	ret    

c000d270 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d270:	57                   	push   edi
c000d271:	56                   	push   esi
c000d272:	53                   	push   ebx
c000d273:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d27b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d27f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d283:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d289:	77 41                	ja     c000d2cc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d28b:	99                   	cdq    
c000d28c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d292:	01 c8                	add    eax,ecx
c000d294:	11 da                	adc    edx,ebx
c000d296:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d29c:	19 d7                	sbb    edi,edx
c000d29e:	72 33                	jb     c000d2d3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d2a0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d2a6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d2ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d2b0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d2b4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2c4:	5b                   	pop    ebx
c000d2c5:	5e                   	pop    esi
c000d2c6:	5f                   	pop    edi
c000d2c7:	e9 cc 08 00 00       	jmp    c000db98 <VCache::write(unsigned long long, int, void*)>
c000d2cc:	b8 05 00 00 00       	mov    eax,0x5
c000d2d1:	eb 05                	jmp    c000d2d8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2d3:	b8 07 00 00 00       	mov    eax,0x7
c000d2d8:	5b                   	pop    ebx
c000d2d9:	5e                   	pop    esi
c000d2da:	5f                   	pop    edi
c000d2db:	c3                   	ret    

c000d2dc <Mouse::Mouse(char const*)>:
c000d2dc:	83 ec 0c             	sub    esp,0xc
c000d2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e3:	83 ec 08             	sub    esp,0x8
c000d2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ea:	50                   	push   eax
c000d2eb:	e8 04 ee ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	ba c0 e2 01 c0       	mov    edx,0xc001e2c0
c000d2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fc:	89 10                	mov    DWORD PTR [eax],edx
c000d2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d302:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d30c:	90                   	nop
c000d30d:	83 c4 0c             	add    esp,0xc
c000d310:	c3                   	ret    
c000d311:	90                   	nop
c000d312:	66 90                	xchg   ax,ax

c000d314 <Mouse::~Mouse()>:
c000d314:	83 ec 0c             	sub    esp,0xc
c000d317:	ba c0 e2 01 c0       	mov    edx,0xc001e2c0
c000d31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d320:	89 10                	mov    DWORD PTR [eax],edx
c000d322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d326:	83 ec 0c             	sub    esp,0xc
c000d329:	50                   	push   eax
c000d32a:	e8 2f eb ff ff       	call   c000be5e <Device::~Device()>
c000d32f:	83 c4 10             	add    esp,0x10
c000d332:	90                   	nop
c000d333:	83 c4 0c             	add    esp,0xc
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <Mouse::~Mouse()>:
c000d338:	83 ec 0c             	sub    esp,0xc
c000d33b:	83 ec 0c             	sub    esp,0xc
c000d33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d342:	e8 cd ff ff ff       	call   c000d314 <Mouse::~Mouse()>
c000d347:	83 c4 10             	add    esp,0x10
c000d34a:	83 ec 08             	sub    esp,0x8
c000d34d:	68 58 01 00 00       	push   0x158
c000d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d356:	e8 cb d6 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	83 c4 0c             	add    esp,0xc
c000d361:	c3                   	ret    

c000d362 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d362:	55                   	push   ebp
c000d363:	57                   	push   edi
c000d364:	56                   	push   esi
c000d365:	53                   	push   ebx
c000d366:	81 ec 28 01 00 00    	sub    esp,0x128
c000d36c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d373:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d37a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d381:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d388:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d38c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d390:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d397:	e8 54 ee ff ff       	call   c000c1f0 <Device::getName()>
c000d39c:	5a                   	pop    edx
c000d39d:	59                   	pop    ecx
c000d39e:	50                   	push   eax
c000d39f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3a3:	55                   	push   ebp
c000d3a4:	e8 77 32 ff ff       	call   c0000620 <strcpy>
c000d3a9:	5b                   	pop    ebx
c000d3aa:	58                   	pop    eax
c000d3ab:	68 e4 e2 01 c0       	push   0xc001e2e4
c000d3b0:	55                   	push   ebp
c000d3b1:	e8 2a 34 ff ff       	call   c00007e0 <strcat>
c000d3b6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d3bd:	e8 c3 aa ff ff       	call   c0007e85 <malloc>
c000d3c2:	83 c4 0c             	add    esp,0xc
c000d3c5:	89 c3                	mov    ebx,eax
c000d3c7:	57                   	push   edi
c000d3c8:	56                   	push   esi
c000d3c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3d1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d3d8:	55                   	push   ebp
c000d3d9:	50                   	push   eax
c000d3da:	e8 f7 fb ff ff       	call   c000cfd6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d3df:	83 c4 14             	add    esp,0x14
c000d3e2:	53                   	push   ebx
c000d3e3:	e8 a4 fc ff ff       	call   c000d08c <LogicalDisk::assignDriveLetter()>
c000d3e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3eb:	e8 52 fd ff ff       	call   c000d142 <LogicalDisk::mount()>
c000d3f0:	58                   	pop    eax
c000d3f1:	5a                   	pop    edx
c000d3f2:	53                   	push   ebx
c000d3f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3fa:	e8 5d eb ff ff       	call   c000bf5c <Device::addChild(Device*)>
c000d3ff:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d405:	5b                   	pop    ebx
c000d406:	5e                   	pop    esi
c000d407:	5f                   	pop    edi
c000d408:	5d                   	pop    ebp
c000d409:	c3                   	ret    

c000d40a <createPartitionsForDisk(PhysicalDisk*)>:
c000d40a:	55                   	push   ebp
c000d40b:	57                   	push   edi
c000d40c:	56                   	push   esi
c000d40d:	53                   	push   ebx
c000d40e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d414:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d41b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d421:	3d 00 02 00 00       	cmp    eax,0x200
c000d426:	74 27                	je     c000d44f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d428:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d42e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d434:	83 ec 10             	sub    esp,0x10
c000d437:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d43b:	99                   	cdq    
c000d43c:	c1 e6 0a             	shl    esi,0xa
c000d43f:	52                   	push   edx
c000d440:	89 fd                	mov    ebp,edi
c000d442:	50                   	push   eax
c000d443:	55                   	push   ebp
c000d444:	56                   	push   esi
c000d445:	e8 d6 ed 00 00       	call   c001c220 <__udivdi3>
c000d44a:	e9 b1 00 00 00       	jmp    c000d500 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d44f:	83 ec 0c             	sub    esp,0xc
c000d452:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d454:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d458:	56                   	push   esi
c000d459:	6a 01                	push   0x1
c000d45b:	6a 00                	push   0x0
c000d45d:	6a 00                	push   0x0
c000d45f:	53                   	push   ebx
c000d460:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d463:	83 c4 20             	add    esp,0x20
c000d466:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d46e:	75 0a                	jne    c000d47a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d470:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d478:	74 2c                	je     c000d4a6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d47a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d480:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d486:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d48c:	83 ec 10             	sub    esp,0x10
c000d48f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d493:	89 f7                	mov    edi,esi
c000d495:	c1 e0 0a             	shl    eax,0xa
c000d498:	c1 ff 1f             	sar    edi,0x1f
c000d49b:	57                   	push   edi
c000d49c:	56                   	push   esi
c000d49d:	52                   	push   edx
c000d49e:	50                   	push   eax
c000d49f:	e8 7c ed 00 00       	call   c001c220 <__udivdi3>
c000d4a4:	eb 5a                	jmp    c000d500 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d4a6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4ad:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d4b4:	83 e1 7f             	and    ecx,0x7f
c000d4b7:	83 e0 7f             	and    eax,0x7f
c000d4ba:	01 c1                	add    ecx,eax
c000d4bc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4c3:	83 e0 7f             	and    eax,0x7f
c000d4c6:	01 c1                	add    ecx,eax
c000d4c8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4cf:	83 e0 7f             	and    eax,0x7f
c000d4d2:	00 c1                	add    cl,al
c000d4d4:	74 41                	je     c000d517 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d4d6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4dc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4e2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4e8:	83 ec 10             	sub    esp,0x10
c000d4eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4ef:	89 f7                	mov    edi,esi
c000d4f1:	c1 e0 0a             	shl    eax,0xa
c000d4f4:	c1 ff 1f             	sar    edi,0x1f
c000d4f7:	57                   	push   edi
c000d4f8:	56                   	push   esi
c000d4f9:	52                   	push   edx
c000d4fa:	50                   	push   eax
c000d4fb:	e8 20 ed 00 00       	call   c001c220 <__udivdi3>
c000d500:	83 c4 14             	add    esp,0x14
c000d503:	52                   	push   edx
c000d504:	50                   	push   eax
c000d505:	6a 00                	push   0x0
c000d507:	6a 00                	push   0x0
c000d509:	53                   	push   ebx
c000d50a:	e8 53 fe ff ff       	call   c000d362 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d50f:	83 c4 20             	add    esp,0x20
c000d512:	e9 79 01 00 00       	jmp    c000d690 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d517:	89 f0                	mov    eax,esi
c000d519:	31 f6                	xor    esi,esi
c000d51b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d522:	75 02                	jne    c000d526 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d524:	89 f1                	mov    ecx,esi
c000d526:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d52d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d534:	c1 e2 08             	shl    edx,0x8
c000d537:	c1 e7 10             	shl    edi,0x10
c000d53a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d542:	09 fa                	or     edx,edi
c000d544:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d54c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d553:	83 c0 10             	add    eax,0x10
c000d556:	09 fa                	or     edx,edi
c000d558:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d55f:	c1 e7 18             	shl    edi,0x18
c000d562:	09 fa                	or     edx,edi
c000d564:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d56b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d56f:	c1 e7 10             	shl    edi,0x10
c000d572:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d579:	c1 e2 08             	shl    edx,0x8
c000d57c:	09 fa                	or     edx,edi
c000d57e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d585:	09 fa                	or     edx,edi
c000d587:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d58e:	c1 e7 18             	shl    edi,0x18
c000d591:	09 fa                	or     edx,edi
c000d593:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d597:	46                   	inc    esi
c000d598:	83 fe 04             	cmp    esi,0x4
c000d59b:	0f 85 7a ff ff ff    	jne    c000d51b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5a5:	83 f0 01             	xor    eax,0x1
c000d5a8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5ac:	75 57                	jne    c000d605 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5b2:	83 f0 01             	xor    eax,0x1
c000d5b5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5b9:	75 4a                	jne    c000d605 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5bb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d5bf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d5c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d5cf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5d5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5db:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5e5:	89 f7                	mov    edi,esi
c000d5e7:	c1 e0 0a             	shl    eax,0xa
c000d5ea:	c1 ff 1f             	sar    edi,0x1f
c000d5ed:	57                   	push   edi
c000d5ee:	56                   	push   esi
c000d5ef:	52                   	push   edx
c000d5f0:	50                   	push   eax
c000d5f1:	e8 2a ec 00 00       	call   c001c220 <__udivdi3>
c000d5f6:	83 c4 10             	add    esp,0x10
c000d5f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d601:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d605:	84 c9                	test   cl,cl
c000d607:	74 53                	je     c000d65c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d609:	0f b6 c9             	movzx  ecx,cl
c000d60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d610:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d614:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d618:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d61c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d620:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d624:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d628:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d62c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d630:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d634:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d638:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d63c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d640:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d644:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d648:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d64c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d650:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d654:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d658:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d65c:	31 ed                	xor    ebp,ebp
c000d65e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d662:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d666:	89 f8                	mov    eax,edi
c000d668:	09 f0                	or     eax,esi
c000d66a:	74 1e                	je     c000d68a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d66c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d670:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d674:	89 d1                	mov    ecx,edx
c000d676:	09 c1                	or     ecx,eax
c000d678:	74 10                	je     c000d68a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d67a:	83 ec 0c             	sub    esp,0xc
c000d67d:	57                   	push   edi
c000d67e:	56                   	push   esi
c000d67f:	52                   	push   edx
c000d680:	50                   	push   eax
c000d681:	53                   	push   ebx
c000d682:	e8 db fc ff ff       	call   c000d362 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d687:	83 c4 20             	add    esp,0x20
c000d68a:	45                   	inc    ebp
c000d68b:	83 fd 04             	cmp    ebp,0x4
c000d68e:	75 ce                	jne    c000d65e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d690:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d696:	5b                   	pop    ebx
c000d697:	5e                   	pop    esi
c000d698:	5f                   	pop    edi
c000d699:	5d                   	pop    ebp
c000d69a:	c3                   	ret    
c000d69b:	90                   	nop

c000d69c <Serial::Serial(char const*)>:
c000d69c:	83 ec 0c             	sub    esp,0xc
c000d69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a3:	83 ec 08             	sub    esp,0x8
c000d6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6aa:	50                   	push   eax
c000d6ab:	e8 44 ea ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000d6b0:	83 c4 10             	add    esp,0x10
c000d6b3:	ba f8 e2 01 c0       	mov    edx,0xc001e2f8
c000d6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6bc:	89 10                	mov    DWORD PTR [eax],edx
c000d6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6cc:	90                   	nop
c000d6cd:	83 c4 0c             	add    esp,0xc
c000d6d0:	c3                   	ret    
c000d6d1:	90                   	nop
c000d6d2:	66 90                	xchg   ax,ax

c000d6d4 <Serial::~Serial()>:
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	ba f8 e2 01 c0       	mov    edx,0xc001e2f8
c000d6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e0:	89 10                	mov    DWORD PTR [eax],edx
c000d6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e6:	83 ec 0c             	sub    esp,0xc
c000d6e9:	50                   	push   eax
c000d6ea:	e8 6f e7 ff ff       	call   c000be5e <Device::~Device()>
c000d6ef:	83 c4 10             	add    esp,0x10
c000d6f2:	90                   	nop
c000d6f3:	83 c4 0c             	add    esp,0xc
c000d6f6:	c3                   	ret    
c000d6f7:	90                   	nop

c000d6f8 <Serial::~Serial()>:
c000d6f8:	83 ec 0c             	sub    esp,0xc
c000d6fb:	83 ec 0c             	sub    esp,0xc
c000d6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d702:	e8 cd ff ff ff       	call   c000d6d4 <Serial::~Serial()>
c000d707:	83 c4 10             	add    esp,0x10
c000d70a:	83 ec 08             	sub    esp,0x8
c000d70d:	68 58 01 00 00       	push   0x158
c000d712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d716:	e8 0b d3 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000d71b:	83 c4 10             	add    esp,0x10
c000d71e:	83 c4 0c             	add    esp,0xc
c000d721:	c3                   	ret    
c000d722:	66 90                	xchg   ax,ax

c000d724 <Timer::Timer(char const*)>:
c000d724:	83 ec 0c             	sub    esp,0xc
c000d727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72b:	83 ec 08             	sub    esp,0x8
c000d72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d732:	50                   	push   eax
c000d733:	e8 bc e9 ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000d738:	83 c4 10             	add    esp,0x10
c000d73b:	ba 3c e3 01 c0       	mov    edx,0xc001e33c
c000d740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d744:	89 10                	mov    DWORD PTR [eax],edx
c000d746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d754:	90                   	nop
c000d755:	83 c4 0c             	add    esp,0xc
c000d758:	c3                   	ret    
c000d759:	90                   	nop
c000d75a:	66 90                	xchg   ax,ax

c000d75c <Timer::~Timer()>:
c000d75c:	83 ec 0c             	sub    esp,0xc
c000d75f:	ba 3c e3 01 c0       	mov    edx,0xc001e33c
c000d764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d768:	89 10                	mov    DWORD PTR [eax],edx
c000d76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76e:	83 ec 0c             	sub    esp,0xc
c000d771:	50                   	push   eax
c000d772:	e8 e7 e6 ff ff       	call   c000be5e <Device::~Device()>
c000d777:	83 c4 10             	add    esp,0x10
c000d77a:	90                   	nop
c000d77b:	83 c4 0c             	add    esp,0xc
c000d77e:	c3                   	ret    
c000d77f:	90                   	nop

c000d780 <Timer::~Timer()>:
c000d780:	83 ec 0c             	sub    esp,0xc
c000d783:	83 ec 0c             	sub    esp,0xc
c000d786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d78a:	e8 cd ff ff ff       	call   c000d75c <Timer::~Timer()>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	83 ec 08             	sub    esp,0x8
c000d795:	68 5c 01 00 00       	push   0x15c
c000d79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79e:	e8 83 d2 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000d7a3:	83 c4 10             	add    esp,0x10
c000d7a6:	83 c4 0c             	add    esp,0xc
c000d7a9:	c3                   	ret    

c000d7aa <Timer::read()>:
c000d7aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7b4:	c3                   	ret    

c000d7b5 <setupTimer(int)>:
c000d7b5:	53                   	push   ebx
c000d7b6:	83 ec 14             	sub    esp,0x14
c000d7b9:	68 5c 01 00 00       	push   0x15c
c000d7be:	e8 c2 a6 ff ff       	call   c0007e85 <malloc>
c000d7c3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7c6:	89 c3                	mov    ebx,eax
c000d7c8:	e8 cf e3 00 00       	call   c001bb9c <PIT::PIT()>
c000d7cd:	58                   	pop    eax
c000d7ce:	5a                   	pop    edx
c000d7cf:	53                   	push   ebx
c000d7d0:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c000d7d6:	e8 81 e7 ff ff       	call   c000bf5c <Device::addChild(Device*)>
c000d7db:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d7dd:	6a 00                	push   0x0
c000d7df:	6a 00                	push   0x0
c000d7e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7e5:	53                   	push   ebx
c000d7e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d7e9:	89 d8                	mov    eax,ebx
c000d7eb:	83 c4 28             	add    esp,0x28
c000d7ee:	5b                   	pop    ebx
c000d7ef:	c3                   	ret    

c000d7f0 <timerHandler(unsigned int)>:
c000d7f0:	56                   	push   esi
c000d7f1:	53                   	push   ebx
c000d7f2:	51                   	push   ecx
c000d7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f7:	01 05 ac 2f 02 c0    	add    DWORD PTR ds:0xc0022fac,eax
c000d7fd:	80 3d dd 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209dd,0x0
c000d804:	0f 84 4a 01 00 00    	je     c000d954 <timerHandler(unsigned int)+0x164>
c000d80a:	fa                   	cli    
c000d80b:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c000d811:	83 ec 0c             	sub    esp,0xc
c000d814:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c000d81a:	68 98 3e 02 c0       	push   0xc0023e98
c000d81f:	e8 cc ef 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d824:	83 c4 10             	add    esp,0x10
c000d827:	84 c0                	test   al,al
c000d829:	0f 85 a1 00 00 00    	jne    c000d8d0 <timerHandler(unsigned int)+0xe0>
c000d82f:	83 ec 0c             	sub    esp,0xc
c000d832:	68 98 3e 02 c0       	push   0xc0023e98
c000d837:	e8 d0 ef 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d83c:	83 c4 10             	add    esp,0x10
c000d83f:	89 c6                	mov    esi,eax
c000d841:	8d 76 00             	lea    esi,[esi+0x0]
c000d844:	83 ec 0c             	sub    esp,0xc
c000d847:	68 98 3e 02 c0       	push   0xc0023e98
c000d84c:	e8 bb ef 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d851:	c7 04 24 98 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e98
c000d858:	89 c3                	mov    ebx,eax
c000d85a:	e8 b5 ef 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d85f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	3b 05 ac 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022fac
c000d86b:	77 23                	ja     c000d890 <timerHandler(unsigned int)+0xa0>
c000d86d:	83 ec 0c             	sub    esp,0xc
c000d870:	53                   	push   ebx
c000d871:	e8 92 65 00 00       	call   c0013e08 <unblockTask(ThreadControlBlock*)>
c000d876:	83 c4 10             	add    esp,0x10
c000d879:	39 de                	cmp    esi,ebx
c000d87b:	75 27                	jne    c000d8a4 <timerHandler(unsigned int)+0xb4>
c000d87d:	83 ec 0c             	sub    esp,0xc
c000d880:	68 98 3e 02 c0       	push   0xc0023e98
c000d885:	e8 82 ef 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d88a:	89 c6                	mov    esi,eax
c000d88c:	eb 12                	jmp    c000d8a0 <timerHandler(unsigned int)+0xb0>
c000d88e:	66 90                	xchg   ax,ax
c000d890:	52                   	push   edx
c000d891:	52                   	push   edx
c000d892:	53                   	push   ebx
c000d893:	68 98 3e 02 c0       	push   0xc0023e98
c000d898:	e8 2f f0 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d89d:	8d 76 00             	lea    esi,[esi+0x0]
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	90                   	nop
c000d8a4:	83 ec 0c             	sub    esp,0xc
c000d8a7:	68 98 3e 02 c0       	push   0xc0023e98
c000d8ac:	e8 3f ef 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8b1:	83 c4 10             	add    esp,0x10
c000d8b4:	84 c0                	test   al,al
c000d8b6:	75 18                	jne    c000d8d0 <timerHandler(unsigned int)+0xe0>
c000d8b8:	83 ec 0c             	sub    esp,0xc
c000d8bb:	68 98 3e 02 c0       	push   0xc0023e98
c000d8c0:	e8 47 ef 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8c5:	83 c4 10             	add    esp,0x10
c000d8c8:	39 f0                	cmp    eax,esi
c000d8ca:	0f 85 74 ff ff ff    	jne    c000d844 <timerHandler(unsigned int)+0x54>
c000d8d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8d5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d8d9:	74 41                	je     c000d91c <timerHandler(unsigned int)+0x12c>
c000d8db:	80 3d dc 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209dc,0x0
c000d8e2:	74 38                	je     c000d91c <timerHandler(unsigned int)+0x12c>
c000d8e4:	fa                   	cli    
c000d8e5:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c000d8eb:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000d8f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d8f6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d8f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d8ff:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d902:	72 08                	jb     c000d90c <timerHandler(unsigned int)+0x11c>
c000d904:	e8 3b 60 00 00       	call   c0013944 <schedule()>
c000d909:	8d 76 00             	lea    esi,[esi+0x0]
c000d90c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000d911:	48                   	dec    eax
c000d912:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000d917:	75 03                	jne    c000d91c <timerHandler(unsigned int)+0x12c>
c000d919:	fb                   	sti    
c000d91a:	66 90                	xchg   ax,ax
c000d91c:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c000d921:	48                   	dec    eax
c000d922:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c000d927:	75 1b                	jne    c000d944 <timerHandler(unsigned int)+0x154>
c000d929:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c000d930:	74 12                	je     c000d944 <timerHandler(unsigned int)+0x154>
c000d932:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c000d93c:	e8 03 60 00 00       	call   c0013944 <schedule()>
c000d941:	8d 76 00             	lea    esi,[esi+0x0]
c000d944:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c000d949:	48                   	dec    eax
c000d94a:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c000d94f:	75 03                	jne    c000d954 <timerHandler(unsigned int)+0x164>
c000d951:	fb                   	sti    
c000d952:	66 90                	xchg   ax,ax
c000d954:	58                   	pop    eax
c000d955:	5b                   	pop    ebx
c000d956:	5e                   	pop    esi
c000d957:	c3                   	ret    

c000d958 <VCache::VCache(PhysicalDisk*)>:
c000d958:	53                   	push   ebx
c000d959:	83 ec 18             	sub    esp,0x18
c000d95c:	ba 6c e3 01 c0       	mov    edx,0xc001e36c
c000d961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d965:	89 10                	mov    DWORD PTR [eax],edx
c000d967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d976:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d981:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d988:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d993:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d99a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9bf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9da:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d9e9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d9f1:	83 ec 0c             	sub    esp,0xc
c000d9f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9f8:	e8 88 a4 ff ff       	call   c0007e85 <malloc>
c000d9fd:	83 c4 10             	add    esp,0x10
c000da00:	89 c3                	mov    ebx,eax
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	53                   	push   ebx
c000da06:	e8 05 5d 00 00       	call   c0013710 <Mutex::Mutex()>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da12:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da19:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da24:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da2f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da39:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da40:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da4c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da50:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da53:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da68:	05 00 01 00 00       	add    eax,0x100
c000da6d:	c1 e0 04             	shl    eax,0x4
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	50                   	push   eax
c000da74:	e8 0c a4 ff ff       	call   c0007e85 <malloc>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	89 c2                	mov    edx,eax
c000da7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da82:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000da85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da89:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da94:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da9c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000daa2:	c1 e0 06             	shl    eax,0x6
c000daa5:	83 ec 0c             	sub    esp,0xc
c000daa8:	50                   	push   eax
c000daa9:	e8 d7 a3 ff ff       	call   c0007e85 <malloc>
c000daae:	83 c4 10             	add    esp,0x10
c000dab1:	89 c2                	mov    edx,eax
c000dab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000daba:	90                   	nop
c000dabb:	83 c4 18             	add    esp,0x18
c000dabe:	5b                   	pop    ebx
c000dabf:	c3                   	ret    

c000dac0 <VCache::invalidateReadBuffer()>:
c000dac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000daca:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dace:	c3                   	ret    
c000dacf:	90                   	nop

c000dad0 <VCache::writeWriteBuffer()>:
c000dad0:	53                   	push   ebx
c000dad1:	83 ec 08             	sub    esp,0x8
c000dad4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dad8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dadc:	74 1e                	je     c000dafc <VCache::writeWriteBuffer()+0x2c>
c000dade:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dae1:	83 ec 0c             	sub    esp,0xc
c000dae4:	8b 10                	mov    edx,DWORD PTR [eax]
c000dae6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dae9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000daec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000daef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf2:	50                   	push   eax
c000daf3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000daf6:	83 c4 20             	add    esp,0x20
c000daf9:	8d 76 00             	lea    esi,[esi+0x0]
c000dafc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db03:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db0a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db0e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db15:	83 c4 08             	add    esp,0x8
c000db18:	5b                   	pop    ebx
c000db19:	c3                   	ret    
c000db1a:	66 90                	xchg   ax,ax

c000db1c <VCache::~VCache()>:
c000db1c:	83 ec 0c             	sub    esp,0xc
c000db1f:	ba 6c e3 01 c0       	mov    edx,0xc001e36c
c000db24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db28:	89 10                	mov    DWORD PTR [eax],edx
c000db2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db31:	84 c0                	test   al,al
c000db33:	74 0f                	je     c000db44 <VCache::~VCache()+0x28>
c000db35:	83 ec 0c             	sub    esp,0xc
c000db38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3c:	e8 8f ff ff ff       	call   c000dad0 <VCache::writeWriteBuffer()>
c000db41:	83 c4 10             	add    esp,0x10
c000db44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db48:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db4b:	83 ec 0c             	sub    esp,0xc
c000db4e:	50                   	push   eax
c000db4f:	e8 41 a3 ff ff       	call   c0007e95 <free>
c000db54:	83 c4 10             	add    esp,0x10
c000db57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db5e:	83 ec 0c             	sub    esp,0xc
c000db61:	50                   	push   eax
c000db62:	e8 2e a3 ff ff       	call   c0007e95 <free>
c000db67:	83 c4 10             	add    esp,0x10
c000db6a:	90                   	nop
c000db6b:	83 c4 0c             	add    esp,0xc
c000db6e:	c3                   	ret    
c000db6f:	90                   	nop

c000db70 <VCache::~VCache()>:
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	83 ec 0c             	sub    esp,0xc
c000db76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7a:	e8 9d ff ff ff       	call   c000db1c <VCache::~VCache()>
c000db7f:	83 c4 10             	add    esp,0x10
c000db82:	83 ec 08             	sub    esp,0x8
c000db85:	6a 44                	push   0x44
c000db87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8b:	e8 96 ce ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000db90:	83 c4 10             	add    esp,0x10
c000db93:	83 c4 0c             	add    esp,0xc
c000db96:	c3                   	ret    
c000db97:	90                   	nop

c000db98 <VCache::write(unsigned long long, int, void*)>:
c000db98:	55                   	push   ebp
c000db99:	57                   	push   edi
c000db9a:	56                   	push   esi
c000db9b:	53                   	push   ebx
c000db9c:	83 ec 1c             	sub    esp,0x1c
c000db9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dba3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dba7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbab:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dbaf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbb3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbbb:	31 c0                	xor    eax,eax
c000dbbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc0:	39 e8                	cmp    eax,ebp
c000dbc2:	7d 18                	jge    c000dbdc <VCache::write(unsigned long long, int, void*)+0x44>
c000dbc4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dbc7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dbcd:	0f af c8             	imul   ecx,eax
c000dbd0:	89 ca                	mov    edx,ecx
c000dbd2:	01 f2                	add    edx,esi
c000dbd4:	8b 3a                	mov    edi,DWORD PTR [edx]
c000dbd6:	40                   	inc    eax
c000dbd7:	eb e7                	jmp    c000dbc0 <VCache::write(unsigned long long, int, void*)+0x28>
c000dbd9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbdc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbe0:	74 0a                	je     c000dbec <VCache::write(unsigned long long, int, void*)+0x54>
c000dbe2:	53                   	push   ebx
c000dbe3:	e8 d8 fe ff ff       	call   c000dac0 <VCache::invalidateReadBuffer()>
c000dbe8:	58                   	pop    eax
c000dbe9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbf0:	74 5a                	je     c000dc4c <VCache::write(unsigned long long, int, void*)+0xb4>
c000dbf2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000dbf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dbf9:	89 f8                	mov    eax,edi
c000dbfb:	99                   	cdq    
c000dbfc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dbff:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc02:	31 c1                	xor    ecx,eax
c000dc04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc08:	31 d0                	xor    eax,edx
c000dc0a:	09 c1                	or     ecx,eax
c000dc0c:	75 32                	jne    c000dc40 <VCache::write(unsigned long long, int, void*)+0xa8>
c000dc0e:	83 fd 01             	cmp    ebp,0x1
c000dc11:	75 2d                	jne    c000dc40 <VCache::write(unsigned long long, int, void*)+0xa8>
c000dc13:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc16:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc1c:	0f af f9             	imul   edi,ecx
c000dc1f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc24:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc27:	40                   	inc    eax
c000dc28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc2b:	83 f8 40             	cmp    eax,0x40
c000dc2e:	75 74                	jne    c000dca4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dc30:	83 ec 0c             	sub    esp,0xc
c000dc33:	53                   	push   ebx
c000dc34:	e8 97 fe ff ff       	call   c000dad0 <VCache::writeWriteBuffer()>
c000dc39:	83 c4 10             	add    esp,0x10
c000dc3c:	eb 66                	jmp    c000dca4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dc3e:	66 90                	xchg   ax,ax
c000dc40:	83 ec 0c             	sub    esp,0xc
c000dc43:	53                   	push   ebx
c000dc44:	e8 87 fe ff ff       	call   c000dad0 <VCache::writeWriteBuffer()>
c000dc49:	83 c4 10             	add    esp,0x10
c000dc4c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc4f:	83 fd 3f             	cmp    ebp,0x3f
c000dc52:	7f 24                	jg     c000dc78 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dc54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc58:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000dc5b:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dc5e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc66:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc69:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000dc6c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc74:	eb 2e                	jmp    c000dca4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dc76:	66 90                	xchg   ax,ax
c000dc78:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc7a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dc7e:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dc82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc8a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dc8e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dc92:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000dc96:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dc99:	83 c4 1c             	add    esp,0x1c
c000dc9c:	5b                   	pop    ebx
c000dc9d:	5e                   	pop    esi
c000dc9e:	5f                   	pop    edi
c000dc9f:	5d                   	pop    ebp
c000dca0:	ff e0                	jmp    eax
c000dca2:	66 90                	xchg   ax,ax
c000dca4:	83 c4 1c             	add    esp,0x1c
c000dca7:	31 c0                	xor    eax,eax
c000dca9:	5b                   	pop    ebx
c000dcaa:	5e                   	pop    esi
c000dcab:	5f                   	pop    edi
c000dcac:	5d                   	pop    ebp
c000dcad:	c3                   	ret    

c000dcae <VCache::read(unsigned long long, int, void*)>:
c000dcae:	55                   	push   ebp
c000dcaf:	57                   	push   edi
c000dcb0:	56                   	push   esi
c000dcb1:	53                   	push   ebx
c000dcb2:	83 ec 1c             	sub    esp,0x1c
c000dcb5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dcb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dcbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dcc5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dcc9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dccd:	31 c0                	xor    eax,eax
c000dccf:	90                   	nop
c000dcd0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dcd4:	7d 16                	jge    c000dcec <VCache::read(unsigned long long, int, void*)+0x3e>
c000dcd6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dcd9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dcdf:	0f af c8             	imul   ecx,eax
c000dce2:	89 ca                	mov    edx,ecx
c000dce4:	01 f2                	add    edx,esi
c000dce6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dce8:	40                   	inc    eax
c000dce9:	eb e5                	jmp    c000dcd0 <VCache::read(unsigned long long, int, void*)+0x22>
c000dceb:	90                   	nop
c000dcec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcf0:	74 0e                	je     c000dd00 <VCache::read(unsigned long long, int, void*)+0x52>
c000dcf2:	83 ec 0c             	sub    esp,0xc
c000dcf5:	53                   	push   ebx
c000dcf6:	e8 d5 fd ff ff       	call   c000dad0 <VCache::writeWriteBuffer()>
c000dcfb:	83 c4 10             	add    esp,0x10
c000dcfe:	66 90                	xchg   ax,ax
c000dd00:	83 ec 0c             	sub    esp,0xc
c000dd03:	53                   	push   ebx
c000dd04:	e8 b7 fd ff ff       	call   c000dac0 <VCache::invalidateReadBuffer()>
c000dd09:	83 c4 0c             	add    esp,0xc
c000dd0c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd0f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000dd15:	6a 00                	push   0x0
c000dd17:	56                   	push   esi
c000dd18:	e8 d3 27 ff ff       	call   c00004f0 <memset>
c000dd1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd20:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd22:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000dd26:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000dd2a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000dd2e:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000dd32:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000dd36:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd3a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dd3d:	83 c4 2c             	add    esp,0x2c
c000dd40:	5b                   	pop    ebx
c000dd41:	5e                   	pop    esi
c000dd42:	5f                   	pop    edi
c000dd43:	5d                   	pop    ebp
c000dd44:	ff e0                	jmp    eax

c000dd46 <Video::putrect(int, int, int, int, unsigned int)>:
c000dd46:	55                   	push   ebp
c000dd47:	57                   	push   edi
c000dd48:	56                   	push   esi
c000dd49:	53                   	push   ebx
c000dd4a:	83 ec 1c             	sub    esp,0x1c
c000dd4d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000dd59:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000dd5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd65:	01 df                	add    edi,ebx
c000dd67:	39 fb                	cmp    ebx,edi
c000dd69:	7d 1f                	jge    c000dd8a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000dd6b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd6f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000dd73:	7d 12                	jge    c000dd87 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000dd75:	8b 16                	mov    edx,DWORD PTR [esi]
c000dd77:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd7b:	53                   	push   ebx
c000dd7c:	55                   	push   ebp
c000dd7d:	45                   	inc    ebp
c000dd7e:	56                   	push   esi
c000dd7f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd82:	83 c4 10             	add    esp,0x10
c000dd85:	eb e8                	jmp    c000dd6f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000dd87:	43                   	inc    ebx
c000dd88:	eb dd                	jmp    c000dd67 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dd8a:	83 c4 1c             	add    esp,0x1c
c000dd8d:	5b                   	pop    ebx
c000dd8e:	5e                   	pop    esi
c000dd8f:	5f                   	pop    edi
c000dd90:	5d                   	pop    ebp
c000dd91:	c3                   	ret    

c000dd92 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dd92:	55                   	push   ebp
c000dd93:	57                   	push   edi
c000dd94:	31 ff                	xor    edi,edi
c000dd96:	56                   	push   esi
c000dd97:	53                   	push   ebx
c000dd98:	83 ec 1c             	sub    esp,0x1c
c000dd9b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000dd9f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dda3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ddaa:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ddaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ddb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ddbb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ddbe:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ddc2:	01 f9                	add    ecx,edi
c000ddc4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ddc8:	7d 2f                	jge    c000ddf9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ddca:	31 f6                	xor    esi,esi
c000ddcc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ddd0:	01 f2                	add    edx,esi
c000ddd2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ddd6:	7d 1a                	jge    c000ddf2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ddd8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dddb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ddde:	46                   	inc    esi
c000dddf:	51                   	push   ecx
c000dde0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dde4:	52                   	push   edx
c000dde5:	55                   	push   ebp
c000dde6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dde9:	83 c4 10             	add    esp,0x10
c000ddec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddf0:	eb da                	jmp    c000ddcc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ddf2:	47                   	inc    edi
c000ddf3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ddf7:	eb c5                	jmp    c000ddbe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ddf9:	83 c4 1c             	add    esp,0x1c
c000ddfc:	5b                   	pop    ebx
c000ddfd:	5e                   	pop    esi
c000ddfe:	5f                   	pop    edi
c000ddff:	5d                   	pop    ebp
c000de00:	c3                   	ret    
c000de01:	90                   	nop

c000de02 <Video::blit(unsigned int*, int, int, int, int)>:
c000de02:	55                   	push   ebp
c000de03:	57                   	push   edi
c000de04:	56                   	push   esi
c000de05:	53                   	push   ebx
c000de06:	83 ec 1c             	sub    esp,0x1c
c000de09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de11:	85 c0                	test   eax,eax
c000de13:	79 02                	jns    c000de17 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000de15:	31 c0                	xor    eax,eax
c000de17:	c1 e0 02             	shl    eax,0x2
c000de1a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000de1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000de26:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000de2a:	39 d8                	cmp    eax,ebx
c000de2c:	7e 49                	jle    c000de77 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000de2e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de34:	7c 41                	jl     c000de77 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000de36:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000de3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de3e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de42:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000de46:	39 f9                	cmp    ecx,edi
c000de48:	7e 22                	jle    c000de6c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000de4a:	83 c5 04             	add    ebp,0x4
c000de4d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de53:	7c 14                	jl     c000de69 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000de55:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000de57:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000de5a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000de5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000de62:	56                   	push   esi
c000de63:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000de66:	83 c4 10             	add    esp,0x10
c000de69:	47                   	inc    edi
c000de6a:	eb d2                	jmp    c000de3e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000de6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de70:	43                   	inc    ebx
c000de71:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de75:	eb ab                	jmp    c000de22 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000de77:	83 c4 1c             	add    esp,0x1c
c000de7a:	5b                   	pop    ebx
c000de7b:	5e                   	pop    esi
c000de7c:	5f                   	pop    edi
c000de7d:	5d                   	pop    ebp
c000de7e:	c3                   	ret    
c000de7f:	90                   	nop

c000de80 <Video::clearScreen(unsigned int)>:
c000de80:	57                   	push   edi
c000de81:	56                   	push   esi
c000de82:	53                   	push   ebx
c000de83:	31 db                	xor    ebx,ebx
c000de85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de89:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de8f:	7e 1f                	jle    c000deb0 <Video::clearScreen(unsigned int)+0x30>
c000de91:	31 ff                	xor    edi,edi
c000de93:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de99:	7e 12                	jle    c000dead <Video::clearScreen(unsigned int)+0x2d>
c000de9b:	8b 06                	mov    eax,DWORD PTR [esi]
c000de9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dea1:	53                   	push   ebx
c000dea2:	57                   	push   edi
c000dea3:	47                   	inc    edi
c000dea4:	56                   	push   esi
c000dea5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dea8:	83 c4 10             	add    esp,0x10
c000deab:	eb e6                	jmp    c000de93 <Video::clearScreen(unsigned int)+0x13>
c000dead:	43                   	inc    ebx
c000deae:	eb d9                	jmp    c000de89 <Video::clearScreen(unsigned int)+0x9>
c000deb0:	5b                   	pop    ebx
c000deb1:	5e                   	pop    esi
c000deb2:	5f                   	pop    edi
c000deb3:	c3                   	ret    

c000deb4 <Video::putpixel(int, int, unsigned int)>:
c000deb4:	c7 44 24 04 74 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e374
c000debc:	e9 2a 28 00 00       	jmp    c00106eb <KePanic(char const*)>
c000dec1:	90                   	nop

c000dec2 <Video::Video(char const*)>:
c000dec2:	83 ec 0c             	sub    esp,0xc
c000dec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec9:	83 ec 08             	sub    esp,0x8
c000decc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded0:	50                   	push   eax
c000ded1:	e8 1e e2 ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000ded6:	83 c4 10             	add    esp,0x10
c000ded9:	ba e4 e3 01 c0       	mov    edx,0xc001e3e4
c000dede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee2:	89 10                	mov    DWORD PTR [eax],edx
c000dee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000def2:	90                   	nop
c000def3:	83 c4 0c             	add    esp,0xc
c000def6:	c3                   	ret    
c000def7:	90                   	nop

c000def8 <Video::~Video()>:
c000def8:	83 ec 0c             	sub    esp,0xc
c000defb:	ba e4 e3 01 c0       	mov    edx,0xc001e3e4
c000df00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df04:	89 10                	mov    DWORD PTR [eax],edx
c000df06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df0a:	83 ec 0c             	sub    esp,0xc
c000df0d:	50                   	push   eax
c000df0e:	e8 4b df ff ff       	call   c000be5e <Device::~Device()>
c000df13:	83 c4 10             	add    esp,0x10
c000df16:	90                   	nop
c000df17:	83 c4 0c             	add    esp,0xc
c000df1a:	c3                   	ret    
c000df1b:	90                   	nop

c000df1c <Video::~Video()>:
c000df1c:	83 ec 0c             	sub    esp,0xc
c000df1f:	83 ec 0c             	sub    esp,0xc
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	e8 cd ff ff ff       	call   c000def8 <Video::~Video()>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	83 ec 08             	sub    esp,0x8
c000df31:	68 64 01 00 00       	push   0x164
c000df36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3a:	e8 e7 ca ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c000df3f:	83 c4 10             	add    esp,0x10
c000df42:	83 c4 0c             	add    esp,0xc
c000df45:	c3                   	ret    

c000df46 <Video::isMonochrome()>:
c000df46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df4a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000df50:	c3                   	ret    
c000df51:	90                   	nop

c000df52 <Video::getWidth()>:
c000df52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000df5c:	c3                   	ret    
c000df5d:	90                   	nop

c000df5e <Video::getHeight()>:
c000df5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000df68:	c3                   	ret    
c000df69:	90                   	nop

c000df6a <Video::drawCursor(int, int, unsigned char*, int)>:
c000df6a:	55                   	push   ebp
c000df6b:	57                   	push   edi
c000df6c:	56                   	push   esi
c000df6d:	53                   	push   ebx
c000df6e:	83 ec 2c             	sub    esp,0x2c
c000df71:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df75:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000df79:	83 f8 01             	cmp    eax,0x1
c000df7c:	19 c9                	sbb    ecx,ecx
c000df7e:	31 db                	xor    ebx,ebx
c000df80:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000df84:	89 cd                	mov    ebp,ecx
c000df86:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000df8e:	f7 d5                	not    ebp
c000df90:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000df96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df9a:	01 d8                	add    eax,ebx
c000df9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dfa0:	56                   	push   esi
c000dfa1:	e8 b8 ff ff ff       	call   c000df5e <Video::getHeight()>
c000dfa6:	59                   	pop    ecx
c000dfa7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dfab:	7e 70                	jle    c000e01d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000dfad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dfb1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dfb5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dfb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dfc0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dfc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfcb:	89 f8                	mov    eax,edi
c000dfcd:	83 c0 20             	add    eax,0x20
c000dfd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd4:	56                   	push   esi
c000dfd5:	e8 78 ff ff ff       	call   c000df52 <Video::getWidth()>
c000dfda:	5a                   	pop    edx
c000dfdb:	39 c7                	cmp    edi,eax
c000dfdd:	7d 34                	jge    c000e013 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000dfdf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dfe4:	74 05                	je     c000dfeb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000dfe6:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfe8:	55                   	push   ebp
c000dfe9:	eb 0d                	jmp    c000dff8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000dfeb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dff0:	74 12                	je     c000e004 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000dff2:	8b 06                	mov    eax,DWORD PTR [esi]
c000dff4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dff8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dffc:	57                   	push   edi
c000dffd:	56                   	push   esi
c000dffe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e001:	83 c4 10             	add    esp,0x10
c000e004:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e008:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e00c:	47                   	inc    edi
c000e00d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e011:	75 c1                	jne    c000dfd4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e013:	43                   	inc    ebx
c000e014:	83 fb 20             	cmp    ebx,0x20
c000e017:	0f 85 79 ff ff ff    	jne    c000df96 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e01d:	83 c4 2c             	add    esp,0x2c
c000e020:	5b                   	pop    ebx
c000e021:	5e                   	pop    esi
c000e022:	5f                   	pop    edi
c000e023:	5d                   	pop    ebp
c000e024:	c3                   	ret    
c000e025:	90                   	nop

c000e026 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e026:	55                   	push   ebp
c000e027:	57                   	push   edi
c000e028:	56                   	push   esi
c000e029:	53                   	push   ebx
c000e02a:	83 ec 28             	sub    esp,0x28
c000e02d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e031:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e035:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e039:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e03d:	c1 e6 08             	shl    esi,0x8
c000e040:	01 c6                	add    esi,eax
c000e042:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e046:	c1 e0 08             	shl    eax,0x8
c000e049:	01 d0                	add    eax,edx
c000e04b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e04f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e053:	0f af c6             	imul   eax,esi
c000e056:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e05d:	50                   	push   eax
c000e05e:	e8 22 9e ff ff       	call   c0007e85 <malloc>
c000e063:	83 c4 10             	add    esp,0x10
c000e066:	89 c7                	mov    edi,eax
c000e068:	85 c0                	test   eax,eax
c000e06a:	75 10                	jne    c000e07c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e06c:	83 ec 0c             	sub    esp,0xc
c000e06f:	68 95 e3 01 c0       	push   0xc001e395
c000e074:	e8 72 26 00 00       	call   c00106eb <KePanic(char const*)>
c000e079:	83 c4 10             	add    esp,0x10
c000e07c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e07f:	ba 12 00 00 00       	mov    edx,0x12
c000e084:	84 c0                	test   al,al
c000e086:	74 11                	je     c000e099 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e088:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e08c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e090:	c1 fa 03             	sar    edx,0x3
c000e093:	0f af d1             	imul   edx,ecx
c000e096:	83 c2 12             	add    edx,0x12
c000e099:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e09d:	74 04                	je     c000e0a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e09f:	85 f6                	test   esi,esi
c000e0a1:	75 12                	jne    c000e0b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	68 a5 e3 01 c0       	push   0xc001e3a5
c000e0ab:	e8 6c ca ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000e0b0:	e9 b8 00 00 00       	jmp    c000e16d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e0b5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e0b9:	80 f9 02             	cmp    cl,0x2
c000e0bc:	0f 85 96 00 00 00    	jne    c000e158 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e0c2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e0c7:	75 0e                	jne    c000e0d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e0c9:	84 c0                	test   al,al
c000e0cb:	75 0a                	jne    c000e0d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e0cd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e0d0:	83 e8 18             	sub    eax,0x18
c000e0d3:	a8 f7                	test   al,0xf7
c000e0d5:	74 0a                	je     c000e0e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e0d7:	83 ec 0c             	sub    esp,0xc
c000e0da:	68 ba e3 01 c0       	push   0xc001e3ba
c000e0df:	eb 7f                	jmp    c000e160 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e0e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0e9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e0f1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e0f5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e0fd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e101:	75 0c                	jne    c000e10f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e103:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e108:	c1 e0 18             	shl    eax,0x18
c000e10b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e10f:	45                   	inc    ebp
c000e110:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e115:	c1 e1 10             	shl    ecx,0x10
c000e118:	89 c8                	mov    eax,ecx
c000e11a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e11f:	c1 e1 08             	shl    ecx,0x8
c000e122:	09 c1                	or     ecx,eax
c000e124:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e128:	09 c1                	or     ecx,eax
c000e12a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e12e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e132:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e136:	c1 f8 03             	sar    eax,0x3
c000e139:	01 c2                	add    edx,eax
c000e13b:	89 e8                	mov    eax,ebp
c000e13d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e141:	39 c6                	cmp    esi,eax
c000e143:	7f b0                	jg     c000e0f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e145:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e149:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e14d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e150:	7e 22                	jle    c000e174 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e152:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e156:	eb 99                	jmp    c000e0f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e158:	50                   	push   eax
c000e159:	50                   	push   eax
c000e15a:	51                   	push   ecx
c000e15b:	68 c8 e3 01 c0       	push   0xc001e3c8
c000e160:	e8 b7 c9 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000e165:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e168:	e8 28 9d ff ff       	call   c0007e95 <free>
c000e16d:	83 c4 10             	add    esp,0x10
c000e170:	31 ff                	xor    edi,edi
c000e172:	eb 0f                	jmp    c000e183 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e174:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e178:	89 30                	mov    DWORD PTR [eax],esi
c000e17a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e17e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e181:	89 30                	mov    DWORD PTR [eax],esi
c000e183:	83 c4 1c             	add    esp,0x1c
c000e186:	89 f8                	mov    eax,edi
c000e188:	5b                   	pop    ebx
c000e189:	5e                   	pop    esi
c000e18a:	5f                   	pop    edi
c000e18b:	5d                   	pop    ebp
c000e18c:	c3                   	ret    
c000e18d:	90                   	nop

c000e18e <Video::putTGA(int, int, unsigned char*, int)>:
c000e18e:	55                   	push   ebp
c000e18f:	57                   	push   edi
c000e190:	56                   	push   esi
c000e191:	53                   	push   ebx
c000e192:	83 ec 28             	sub    esp,0x28
c000e195:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e199:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e19d:	50                   	push   eax
c000e19e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e1a2:	50                   	push   eax
c000e1a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e1a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e1ab:	56                   	push   esi
c000e1ac:	e8 75 fe ff ff       	call   c000e026 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e1b1:	83 c4 20             	add    esp,0x20
c000e1b4:	85 c0                	test   eax,eax
c000e1b6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e1ba:	74 35                	je     c000e1f1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e1bc:	89 c7                	mov    edi,eax
c000e1be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e1c2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e1c6:	39 d8                	cmp    eax,ebx
c000e1c8:	7e 27                	jle    c000e1f1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e1ca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e1ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e1d2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e1d6:	39 e8                	cmp    eax,ebp
c000e1d8:	7e 14                	jle    c000e1ee <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e1da:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1dc:	83 c7 04             	add    edi,0x4
c000e1df:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e1e2:	53                   	push   ebx
c000e1e3:	55                   	push   ebp
c000e1e4:	45                   	inc    ebp
c000e1e5:	56                   	push   esi
c000e1e6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e1e9:	83 c4 10             	add    esp,0x10
c000e1ec:	eb e0                	jmp    c000e1ce <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e1ee:	43                   	inc    ebx
c000e1ef:	eb cd                	jmp    c000e1be <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e1f1:	83 c4 1c             	add    esp,0x1c
c000e1f4:	5b                   	pop    ebx
c000e1f5:	5e                   	pop    esi
c000e1f6:	5f                   	pop    edi
c000e1f7:	5d                   	pop    ebp
c000e1f8:	c3                   	ret    
c000e1f9:	66 90                	xchg   ax,ax
c000e1fb:	90                   	nop

c000e1fc <ACPI::close(int, int, void*)>:
c000e1fc:	83 ec 1c             	sub    esp,0x1c
c000e1ff:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e207:	74 0b                	je     c000e214 <ACPI::close(int, int, void*)+0x18>
c000e209:	b8 00 00 00 00       	mov    eax,0x0
c000e20e:	e9 9d 00 00 00       	jmp    c000e2b0 <ACPI::close(int, int, void*)+0xb4>
c000e213:	90                   	nop
c000e214:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e219:	75 29                	jne    c000e244 <ACPI::close(int, int, void*)+0x48>
c000e21b:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000e220:	85 c0                	test   eax,eax
c000e222:	74 08                	je     c000e22c <ACPI::close(int, int, void*)+0x30>
c000e224:	a1 c8 2f 02 c0       	mov    eax,ds:0xc0022fc8
c000e229:	ff d0                	call   eax
c000e22b:	90                   	nop
c000e22c:	83 ec 0c             	sub    esp,0xc
c000e22f:	68 24 e4 01 c0       	push   0xc001e424
c000e234:	e8 b2 24 00 00       	call   c00106eb <KePanic(char const*)>
c000e239:	83 c4 10             	add    esp,0x10
c000e23c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e241:	eb 6d                	jmp    c000e2b0 <ACPI::close(int, int, void*)+0xb4>
c000e243:	90                   	nop
c000e244:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e249:	75 5d                	jne    c000e2a8 <ACPI::close(int, int, void*)+0xac>
c000e24b:	a1 c4 2f 02 c0       	mov    eax,ds:0xc0022fc4
c000e250:	85 c0                	test   eax,eax
c000e252:	74 08                	je     c000e25c <ACPI::close(int, int, void*)+0x60>
c000e254:	a1 c4 2f 02 c0       	mov    eax,ds:0xc0022fc4
c000e259:	ff d0                	call   eax
c000e25b:	90                   	nop
c000e25c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e261:	8d 76 00             	lea    esi,[esi+0x0]
c000e264:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e268:	25 ff 00 00 00       	and    eax,0xff
c000e26d:	83 e0 02             	and    eax,0x2
c000e270:	74 1e                	je     c000e290 <ACPI::close(int, int, void*)+0x94>
c000e272:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e27d:	89 c2                	mov    edx,eax
c000e27f:	ec                   	in     al,dx
c000e280:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e284:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e288:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e28c:	eb d6                	jmp    c000e264 <ACPI::close(int, int, void*)+0x68>
c000e28e:	66 90                	xchg   ax,ax
c000e290:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e297:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e29c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e2a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e2a4:	ee                   	out    dx,al
c000e2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e2b0:	83 c4 1c             	add    esp,0x1c
c000e2b3:	c3                   	ret    

c000e2b4 <findRSDP()>:
c000e2b4:	83 ec 1c             	sub    esp,0x1c
c000e2b7:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e2bc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e2c2:	83 e0 04             	and    eax,0x4
c000e2c5:	84 c0                	test   al,al
c000e2c7:	75 07                	jne    c000e2d0 <findRSDP()+0x1c>
c000e2c9:	b8 00 00 00 00       	mov    eax,0x0
c000e2ce:	eb 70                	jmp    c000e340 <findRSDP()+0x8c>
c000e2d0:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c000e2d5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e2da:	7f 1c                	jg     c000e2f8 <findRSDP()+0x44>
c000e2dc:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e2e1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2e7:	83 e2 fb             	and    edx,0xfffffffb
c000e2ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2f0:	b8 00 00 00 00       	mov    eax,0x0
c000e2f5:	eb 49                	jmp    c000e340 <findRSDP()+0x8c>
c000e2f7:	90                   	nop
c000e2f8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e300:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e308:	77 2e                	ja     c000e338 <findRSDP()+0x84>
c000e30a:	83 ec 04             	sub    esp,0x4
c000e30d:	6a 08                	push   0x8
c000e30f:	68 bf e4 01 c0       	push   0xc001e4bf
c000e314:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e318:	e8 93 20 ff ff       	call   c00003b0 <memcmp>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	0f 94 c0             	sete   al
c000e325:	84 c0                	test   al,al
c000e327:	74 07                	je     c000e330 <findRSDP()+0x7c>
c000e329:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e32d:	eb 11                	jmp    c000e340 <findRSDP()+0x8c>
c000e32f:	90                   	nop
c000e330:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e335:	eb c9                	jmp    c000e300 <findRSDP()+0x4c>
c000e337:	90                   	nop
c000e338:	b8 00 00 00 00       	mov    eax,0x0
c000e33d:	8d 76 00             	lea    esi,[esi+0x0]
c000e340:	83 c4 1c             	add    esp,0x1c
c000e343:	c3                   	ret    

c000e344 <loadACPITables(unsigned char*)>:
c000e344:	57                   	push   edi
c000e345:	56                   	push   esi
c000e346:	53                   	push   ebx
c000e347:	83 ec 60             	sub    esp,0x60
c000e34a:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e34f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e355:	83 e0 04             	and    eax,0x4
c000e358:	84 c0                	test   al,al
c000e35a:	0f 84 3c 02 00 00    	je     c000e59c <loadACPITables(unsigned char*)+0x258>
c000e360:	a0 e0 31 02 c0       	mov    al,ds:0xc00231e0
c000e365:	84 c0                	test   al,al
c000e367:	74 77                	je     c000e3e0 <loadACPITables(unsigned char*)+0x9c>
c000e369:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e36d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e371:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e375:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e378:	83 e8 24             	sub    eax,0x24
c000e37b:	c1 e8 03             	shr    eax,0x3
c000e37e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e382:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e38a:	66 90                	xchg   ax,ax
c000e38c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e390:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e394:	0f 8d b6 00 00 00    	jge    c000e450 <loadACPITables(unsigned char*)+0x10c>
c000e39a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e39e:	83 c0 24             	add    eax,0x24
c000e3a1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e3a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e3a9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e3ad:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e3b1:	c1 e0 03             	shl    eax,0x3
c000e3b4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e3b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e3bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e3bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3c1:	89 c1                	mov    ecx,eax
c000e3c3:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000e3c8:	8d 50 01             	lea    edx,[eax+0x1]
c000e3cb:	89 15 cc 2f 02 c0    	mov    DWORD PTR ds:0xc0022fcc,edx
c000e3d1:	89 ca                	mov    edx,ecx
c000e3d3:	89 14 c5 e4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd01c],edx
c000e3da:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e3de:	eb ac                	jmp    c000e38c <loadACPITables(unsigned char*)+0x48>
c000e3e0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e3e4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e3e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e3ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3ef:	83 e8 24             	sub    eax,0x24
c000e3f2:	c1 e8 02             	shr    eax,0x2
c000e3f5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e3f9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e408:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e40c:	7d 42                	jge    c000e450 <loadACPITables(unsigned char*)+0x10c>
c000e40e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e412:	83 c0 24             	add    eax,0x24
c000e415:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e419:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e41d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e421:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e425:	c1 e0 02             	shl    eax,0x2
c000e428:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e42c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e430:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e432:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000e437:	8d 50 01             	lea    edx,[eax+0x1]
c000e43a:	89 15 cc 2f 02 c0    	mov    DWORD PTR ds:0xc0022fcc,edx
c000e440:	89 ca                	mov    edx,ecx
c000e442:	89 14 c5 e4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd01c],edx
c000e449:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e44d:	eb b5                	jmp    c000e404 <loadACPITables(unsigned char*)+0xc0>
c000e44f:	90                   	nop
c000e450:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e458:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000e45d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e461:	0f 8d 39 01 00 00    	jge    c000e5a0 <loadACPITables(unsigned char*)+0x25c>
c000e467:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e46b:	8b 04 c5 e4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd01c]
c000e472:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e47a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e47e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e482:	25 ff 0f 00 00       	and    eax,0xfff
c000e487:	89 c6                	mov    esi,eax
c000e489:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000e48f:	83 ec 0c             	sub    esp,0xc
c000e492:	6a 01                	push   0x1
c000e494:	e8 30 b4 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000e499:	83 c4 10             	add    esp,0x10
c000e49c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4a0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e4a6:	83 ec 0c             	sub    esp,0xc
c000e4a9:	6a 01                	push   0x1
c000e4ab:	6a 01                	push   0x1
c000e4ad:	50                   	push   eax
c000e4ae:	52                   	push   edx
c000e4af:	53                   	push   ebx
c000e4b0:	e8 a3 bd ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e4b5:	83 c4 20             	add    esp,0x20
c000e4b8:	09 f0                	or     eax,esi
c000e4ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4be:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e4c2:	c1 e0 03             	shl    eax,0x3
c000e4c5:	05 e0 2f 02 c0       	add    eax,0xc0022fe0
c000e4ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e4d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4d6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e4de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e4e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e4ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e4f2:	89 c6                	mov    esi,eax
c000e4f4:	89 d7                	mov    edi,edx
c000e4f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4f8:	89 c8                	mov    eax,ecx
c000e4fa:	89 fa                	mov    edx,edi
c000e4fc:	89 f3                	mov    ebx,esi
c000e4fe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e502:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e506:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e50a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e50e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e515:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e519:	05 00 10 00 00       	add    eax,0x1000
c000e51e:	c1 e8 0c             	shr    eax,0xc
c000e521:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e525:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e529:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e52d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e531:	25 ff 0f 00 00       	and    eax,0xfff
c000e536:	89 c6                	mov    esi,eax
c000e538:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000e53e:	83 ec 0c             	sub    esp,0xc
c000e541:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e545:	e8 7f b3 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000e54a:	83 c4 10             	add    esp,0x10
c000e54d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e551:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e557:	83 ec 0c             	sub    esp,0xc
c000e55a:	6a 01                	push   0x1
c000e55c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e560:	50                   	push   eax
c000e561:	52                   	push   edx
c000e562:	53                   	push   ebx
c000e563:	e8 f0 bc ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e568:	83 c4 20             	add    esp,0x20
c000e56b:	09 f0                	or     eax,esi
c000e56d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e575:	83 ec 0c             	sub    esp,0xc
c000e578:	50                   	push   eax
c000e579:	e8 7b b6 ff ff       	call   c0009bf9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e585:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e589:	89 14 c5 e4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd01c],edx
c000e590:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e594:	e9 bf fe ff ff       	jmp    c000e458 <loadACPITables(unsigned char*)+0x114>
c000e599:	8d 76 00             	lea    esi,[esi+0x0]
c000e59c:	90                   	nop
c000e59d:	8d 76 00             	lea    esi,[esi+0x0]
c000e5a0:	83 c4 60             	add    esp,0x60
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	c3                   	ret    
c000e5a7:	90                   	nop

c000e5a8 <findRSDT(unsigned char*)>:
c000e5a8:	57                   	push   edi
c000e5a9:	56                   	push   esi
c000e5aa:	53                   	push   ebx
c000e5ab:	83 ec 50             	sub    esp,0x50
c000e5ae:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e5b3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e5b9:	83 e0 04             	and    eax,0x4
c000e5bc:	84 c0                	test   al,al
c000e5be:	75 0c                	jne    c000e5cc <findRSDT(unsigned char*)+0x24>
c000e5c0:	b8 00 00 00 00       	mov    eax,0x0
c000e5c5:	e9 26 01 00 00       	jmp    c000e6f0 <findRSDT(unsigned char*)+0x148>
c000e5ca:	66 90                	xchg   ax,ax
c000e5cc:	89 e0                	mov    eax,esp
c000e5ce:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e5d2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e5d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e5da:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e5e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e5ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e5f2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e5f6:	89 c6                	mov    esi,eax
c000e5f8:	89 d7                	mov    edi,edx
c000e5fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5fc:	89 c8                	mov    eax,ecx
c000e5fe:	89 fa                	mov    edx,edi
c000e600:	89 f3                	mov    ebx,esi
c000e602:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e606:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e60a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e60e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e612:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e616:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e61e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e622:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e626:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e632:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e636:	25 ff 0f 00 00       	and    eax,0xfff
c000e63b:	89 c6                	mov    esi,eax
c000e63d:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000e643:	83 ec 0c             	sub    esp,0xc
c000e646:	6a 02                	push   0x2
c000e648:	e8 7c b2 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000e64d:	83 c4 10             	add    esp,0x10
c000e650:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e654:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e65a:	83 ec 0c             	sub    esp,0xc
c000e65d:	6a 01                	push   0x1
c000e65f:	6a 02                	push   0x2
c000e661:	50                   	push   eax
c000e662:	52                   	push   edx
c000e663:	53                   	push   ebx
c000e664:	e8 ef bb ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e669:	83 c4 20             	add    esp,0x20
c000e66c:	09 f0                	or     eax,esi
c000e66e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e672:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e676:	25 ff 0f 00 00       	and    eax,0xfff
c000e67b:	89 c6                	mov    esi,eax
c000e67d:	8b 1d d0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad0
c000e683:	83 ec 0c             	sub    esp,0xc
c000e686:	6a 02                	push   0x2
c000e688:	e8 3c b2 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c000e68d:	83 c4 10             	add    esp,0x10
c000e690:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e694:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e69a:	83 ec 0c             	sub    esp,0xc
c000e69d:	6a 01                	push   0x1
c000e69f:	6a 02                	push   0x2
c000e6a1:	50                   	push   eax
c000e6a2:	52                   	push   edx
c000e6a3:	53                   	push   ebx
c000e6a4:	e8 af bb ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e6a9:	83 c4 20             	add    esp,0x20
c000e6ac:	09 f0                	or     eax,esi
c000e6ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6b2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e6b7:	75 13                	jne    c000e6cc <findRSDT(unsigned char*)+0x124>
c000e6b9:	c6 05 e0 31 02 c0 00 	mov    BYTE PTR ds:0xc00231e0,0x0
c000e6c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6c4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6c8:	eb 22                	jmp    c000e6ec <findRSDT(unsigned char*)+0x144>
c000e6ca:	66 90                	xchg   ax,ax
c000e6cc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e6d1:	75 11                	jne    c000e6e4 <findRSDT(unsigned char*)+0x13c>
c000e6d3:	c6 05 e0 31 02 c0 01 	mov    BYTE PTR ds:0xc00231e0,0x1
c000e6da:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6e2:	eb 08                	jmp    c000e6ec <findRSDT(unsigned char*)+0x144>
c000e6e4:	b8 00 00 00 00       	mov    eax,0x0
c000e6e9:	eb 05                	jmp    c000e6f0 <findRSDT(unsigned char*)+0x148>
c000e6eb:	90                   	nop
c000e6ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e6f0:	83 c4 50             	add    esp,0x50
c000e6f3:	5b                   	pop    ebx
c000e6f4:	5e                   	pop    esi
c000e6f5:	5f                   	pop    edi
c000e6f6:	c3                   	ret    
c000e6f7:	90                   	nop

c000e6f8 <findDataTable(unsigned char*, char*)>:
c000e6f8:	83 ec 1c             	sub    esp,0x1c
c000e6fb:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e700:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e706:	83 e0 04             	and    eax,0x4
c000e709:	84 c0                	test   al,al
c000e70b:	75 07                	jne    c000e714 <findDataTable(unsigned char*, char*)+0x1c>
c000e70d:	b8 00 00 00 00       	mov    eax,0x0
c000e712:	eb 58                	jmp    c000e76c <findDataTable(unsigned char*, char*)+0x74>
c000e714:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e71c:	a1 cc 2f 02 c0       	mov    eax,ds:0xc0022fcc
c000e721:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e725:	7d 3d                	jge    c000e764 <findDataTable(unsigned char*, char*)+0x6c>
c000e727:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72b:	c1 e0 03             	shl    eax,0x3
c000e72e:	05 e0 2f 02 c0       	add    eax,0xc0022fe0
c000e733:	83 ec 04             	sub    esp,0x4
c000e736:	6a 04                	push   0x4
c000e738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e73c:	50                   	push   eax
c000e73d:	e8 6e 1c ff ff       	call   c00003b0 <memcmp>
c000e742:	83 c4 10             	add    esp,0x10
c000e745:	85 c0                	test   eax,eax
c000e747:	0f 94 c0             	sete   al
c000e74a:	84 c0                	test   al,al
c000e74c:	74 0e                	je     c000e75c <findDataTable(unsigned char*, char*)+0x64>
c000e74e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e752:	8b 04 c5 e4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd01c]
c000e759:	eb 11                	jmp    c000e76c <findDataTable(unsigned char*, char*)+0x74>
c000e75b:	90                   	nop
c000e75c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e760:	eb ba                	jmp    c000e71c <findDataTable(unsigned char*, char*)+0x24>
c000e762:	66 90                	xchg   ax,ax
c000e764:	b8 00 00 00 00       	mov    eax,0x0
c000e769:	8d 76 00             	lea    esi,[esi+0x0]
c000e76c:	83 c4 1c             	add    esp,0x1c
c000e76f:	c3                   	ret    

c000e770 <scanMADT()>:
c000e770:	53                   	push   ebx
c000e771:	83 ec 38             	sub    esp,0x38
c000e774:	a1 f0 09 02 c0       	mov    eax,ds:0xc00209f0
c000e779:	25 00 04 00 00       	and    eax,0x400
c000e77e:	74 14                	je     c000e794 <scanMADT()+0x24>
c000e780:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e785:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e78b:	83 e2 fb             	and    edx,0xfffffffb
c000e78e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e794:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e799:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e79f:	83 e0 04             	and    eax,0x4
c000e7a2:	84 c0                	test   al,al
c000e7a4:	0f 84 8a 04 00 00    	je     c000ec34 <scanMADT()+0x4c4>
c000e7aa:	e8 05 fb ff ff       	call   c000e2b4 <findRSDP()>
c000e7af:	a3 ec 31 02 c0       	mov    ds:0xc00231ec,eax
c000e7b4:	a1 ec 31 02 c0       	mov    eax,ds:0xc00231ec
c000e7b9:	85 c0                	test   eax,eax
c000e7bb:	75 1b                	jne    c000e7d8 <scanMADT()+0x68>
c000e7bd:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e7c2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e7c8:	83 e2 fb             	and    edx,0xfffffffb
c000e7cb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e7d1:	e9 66 04 00 00       	jmp    c000ec3c <scanMADT()+0x4cc>
c000e7d6:	66 90                	xchg   ax,ax
c000e7d8:	a1 ec 31 02 c0       	mov    eax,ds:0xc00231ec
c000e7dd:	83 ec 0c             	sub    esp,0xc
c000e7e0:	50                   	push   eax
c000e7e1:	e8 c2 fd ff ff       	call   c000e5a8 <findRSDT(unsigned char*)>
c000e7e6:	83 c4 10             	add    esp,0x10
c000e7e9:	a3 e8 31 02 c0       	mov    ds:0xc00231e8,eax
c000e7ee:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000e7f3:	85 c0                	test   eax,eax
c000e7f5:	75 19                	jne    c000e810 <scanMADT()+0xa0>
c000e7f7:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e7fc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e802:	83 e2 fb             	and    edx,0xfffffffb
c000e805:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e80b:	e9 2c 04 00 00       	jmp    c000ec3c <scanMADT()+0x4cc>
c000e810:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000e815:	83 ec 0c             	sub    esp,0xc
c000e818:	50                   	push   eax
c000e819:	e8 26 fb ff ff       	call   c000e344 <loadACPITables(unsigned char*)>
c000e81e:	83 c4 10             	add    esp,0x10
c000e821:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000e826:	83 ec 08             	sub    esp,0x8
c000e829:	68 c8 e4 01 c0       	push   0xc001e4c8
c000e82e:	50                   	push   eax
c000e82f:	e8 c4 fe ff ff       	call   c000e6f8 <findDataTable(unsigned char*, char*)>
c000e834:	83 c4 10             	add    esp,0x10
c000e837:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e83b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e840:	75 1a                	jne    c000e85c <scanMADT()+0xec>
c000e842:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000e847:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e84d:	83 e2 fe             	and    edx,0xfffffffe
c000e850:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e856:	e9 e1 03 00 00       	jmp    c000ec3c <scanMADT()+0x4cc>
c000e85b:	90                   	nop
c000e85c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e864:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e868:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e86b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e86f:	0f 87 c7 03 00 00    	ja     c000ec3c <scanMADT()+0x4cc>
c000e875:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e87d:	0f 87 b9 03 00 00    	ja     c000ec3c <scanMADT()+0x4cc>
c000e883:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e887:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e88b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e88f:	8d 50 01             	lea    edx,[eax+0x1]
c000e892:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e896:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e89a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e89e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e8a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8a6:	8d 50 01             	lea    edx,[eax+0x1]
c000e8a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e8ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e8b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e8b5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e8b9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e8be:	0f 86 74 03 00 00    	jbe    c000ec38 <scanMADT()+0x4c8>
c000e8c4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e8c9:	75 5d                	jne    c000e928 <scanMADT()+0x1b8>
c000e8cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8cf:	8d 50 01             	lea    edx,[eax+0x1]
c000e8d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e8d6:	8a 15 e0 33 02 c0    	mov    dl,BYTE PTR ds:0xc00233e0
c000e8dc:	81 e2 ff 00 00 00    	and    edx,0xff
c000e8e2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e8e6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e8ea:	88 82 20 34 02 c0    	mov    BYTE PTR [edx-0x3ffdcbe0],al
c000e8f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8f4:	8d 42 01             	lea    eax,[edx+0x1]
c000e8f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8fb:	a0 e0 33 02 c0       	mov    al,ds:0xc00233e0
c000e900:	8d 48 01             	lea    ecx,[eax+0x1]
c000e903:	88 0d e0 33 02 c0    	mov    BYTE PTR ds:0xc00233e0,cl
c000e909:	25 ff 00 00 00       	and    eax,0xff
c000e90e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e912:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e916:	88 90 00 34 02 c0    	mov    BYTE PTR [eax-0x3ffdcc00],dl
c000e91c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e921:	e9 f6 02 00 00       	jmp    c000ec1c <scanMADT()+0x4ac>
c000e926:	66 90                	xchg   ax,ax
c000e928:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e92d:	0f 85 29 01 00 00    	jne    c000ea5c <scanMADT()+0x2ec>
c000e933:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e937:	8d 50 01             	lea    edx,[eax+0x1]
c000e93a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e93e:	8a 15 a0 32 02 c0    	mov    dl,BYTE PTR ds:0xc00232a0
c000e944:	81 e2 ff 00 00 00    	and    edx,0xff
c000e94a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e94e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e952:	88 82 c0 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcd40],al
c000e958:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e95c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e964:	01 d0                	add    eax,edx
c000e966:	83 c0 2c             	add    eax,0x2c
c000e969:	8a 00                	mov    al,BYTE PTR [eax]
c000e96b:	31 d2                	xor    edx,edx
c000e96d:	88 c2                	mov    dl,al
c000e96f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e973:	8d 48 01             	lea    ecx,[eax+0x1]
c000e976:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e97a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e97e:	25 ff 00 00 00       	and    eax,0xff
c000e983:	c1 e0 08             	shl    eax,0x8
c000e986:	89 d1                	mov    ecx,edx
c000e988:	09 c1                	or     ecx,eax
c000e98a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e98e:	8d 50 02             	lea    edx,[eax+0x2]
c000e991:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e995:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e999:	25 ff 00 00 00       	and    eax,0xff
c000e99e:	c1 e0 10             	shl    eax,0x10
c000e9a1:	09 c1                	or     ecx,eax
c000e9a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9a7:	8d 50 03             	lea    edx,[eax+0x3]
c000e9aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e9b2:	25 ff 00 00 00       	and    eax,0xff
c000e9b7:	c1 e0 18             	shl    eax,0x18
c000e9ba:	09 c1                	or     ecx,eax
c000e9bc:	89 ca                	mov    edx,ecx
c000e9be:	a0 a0 32 02 c0       	mov    al,ds:0xc00232a0
c000e9c3:	25 ff 00 00 00       	and    eax,0xff
c000e9c8:	89 14 85 e0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd20],edx
c000e9cf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9dc:	01 d0                	add    eax,edx
c000e9de:	83 c0 2c             	add    eax,0x2c
c000e9e1:	8a 00                	mov    al,BYTE PTR [eax]
c000e9e3:	31 d2                	xor    edx,edx
c000e9e5:	88 c2                	mov    dl,al
c000e9e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9eb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9f2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e9f6:	25 ff 00 00 00       	and    eax,0xff
c000e9fb:	c1 e0 08             	shl    eax,0x8
c000e9fe:	89 d1                	mov    ecx,edx
c000ea00:	09 c1                	or     ecx,eax
c000ea02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea06:	8d 50 02             	lea    edx,[eax+0x2]
c000ea09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea11:	25 ff 00 00 00       	and    eax,0xff
c000ea16:	c1 e0 10             	shl    eax,0x10
c000ea19:	09 c1                	or     ecx,eax
c000ea1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea1f:	8d 50 03             	lea    edx,[eax+0x3]
c000ea22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea2a:	25 ff 00 00 00       	and    eax,0xff
c000ea2f:	c1 e0 18             	shl    eax,0x18
c000ea32:	09 c1                	or     ecx,eax
c000ea34:	89 ca                	mov    edx,ecx
c000ea36:	a0 a0 32 02 c0       	mov    al,ds:0xc00232a0
c000ea3b:	25 ff 00 00 00       	and    eax,0xff
c000ea40:	89 14 85 60 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcca0],edx
c000ea47:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea4c:	a0 a0 32 02 c0       	mov    al,ds:0xc00232a0
c000ea51:	40                   	inc    eax
c000ea52:	a2 a0 32 02 c0       	mov    ds:0xc00232a0,al
c000ea57:	e9 c0 01 00 00       	jmp    c000ec1c <scanMADT()+0x4ac>
c000ea5c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000ea61:	0f 85 fd 00 00 00    	jne    c000eb64 <scanMADT()+0x3f4>
c000ea67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea6b:	8d 50 01             	lea    edx,[eax+0x1]
c000ea6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea76:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea7a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ea7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea82:	8d 50 01             	lea    edx,[eax+0x1]
c000ea85:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea8d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea91:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ea95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea9d:	01 d0                	add    eax,edx
c000ea9f:	83 c0 2c             	add    eax,0x2c
c000eaa2:	8a 00                	mov    al,BYTE PTR [eax]
c000eaa4:	31 d2                	xor    edx,edx
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaac:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eab3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eab7:	25 ff 00 00 00       	and    eax,0xff
c000eabc:	c1 e0 08             	shl    eax,0x8
c000eabf:	89 d1                	mov    ecx,edx
c000eac1:	09 c1                	or     ecx,eax
c000eac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac7:	8d 50 02             	lea    edx,[eax+0x2]
c000eaca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eace:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ead2:	25 ff 00 00 00       	and    eax,0xff
c000ead7:	c1 e0 10             	shl    eax,0x10
c000eada:	09 c1                	or     ecx,eax
c000eadc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eae0:	8d 50 03             	lea    edx,[eax+0x3]
c000eae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eae7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaeb:	25 ff 00 00 00       	and    eax,0xff
c000eaf0:	c1 e0 18             	shl    eax,0x18
c000eaf3:	09 c8                	or     eax,ecx
c000eaf5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eaf9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eafe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb06:	01 d0                	add    eax,edx
c000eb08:	83 c0 2c             	add    eax,0x2c
c000eb0b:	8a 00                	mov    al,BYTE PTR [eax]
c000eb0d:	25 ff 00 00 00       	and    eax,0xff
c000eb12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eb16:	8d 4a 01             	lea    ecx,[edx+0x1]
c000eb19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb1d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000eb21:	81 e2 ff 00 00 00    	and    edx,0xff
c000eb27:	c1 e2 08             	shl    edx,0x8
c000eb2a:	09 d0                	or     eax,edx
c000eb2c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000eb31:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eb36:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000eb3a:	25 ff 00 00 00       	and    eax,0xff
c000eb3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb43:	88 90 e0 f7 01 c0    	mov    BYTE PTR [eax-0x3ffe0820],dl
c000eb49:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000eb4d:	31 d2                	xor    edx,edx
c000eb4f:	88 c2                	mov    dl,al
c000eb51:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000eb56:	66 89 84 12 80 32 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcd80],ax
c000eb5e:	e9 b9 00 00 00       	jmp    c000ec1c <scanMADT()+0x4ac>
c000eb63:	90                   	nop
c000eb64:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000eb69:	0f 85 a1 00 00 00    	jne    c000ec10 <scanMADT()+0x4a0>
c000eb6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb73:	8d 50 01             	lea    edx,[eax+0x1]
c000eb76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb7e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb82:	25 ff 00 00 00       	and    eax,0xff
c000eb87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb93:	01 d0                	add    eax,edx
c000eb95:	83 c0 2c             	add    eax,0x2c
c000eb98:	8a 00                	mov    al,BYTE PTR [eax]
c000eb9a:	31 d2                	xor    edx,edx
c000eb9c:	88 c2                	mov    dl,al
c000eb9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eba2:	8d 48 01             	lea    ecx,[eax+0x1]
c000eba5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eba9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebad:	25 ff 00 00 00       	and    eax,0xff
c000ebb2:	c1 e0 08             	shl    eax,0x8
c000ebb5:	09 d0                	or     eax,edx
c000ebb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ebbb:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc4:	8d 50 01             	lea    edx,[eax+0x1]
c000ebc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebcb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebcf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebd3:	25 ff 00 00 00       	and    eax,0xff
c000ebd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe0:	c1 e0 08             	shl    eax,0x8
c000ebe3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ebe7:	89 c1                	mov    ecx,eax
c000ebe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebed:	c1 e0 18             	shl    eax,0x18
c000ebf0:	89 c3                	mov    ebx,eax
c000ebf2:	a1 f0 31 02 c0       	mov    eax,ds:0xc00231f0
c000ebf7:	8d 50 01             	lea    edx,[eax+0x1]
c000ebfa:	89 15 f0 31 02 c0    	mov    DWORD PTR ds:0xc00231f0,edx
c000ec00:	09 d9                	or     ecx,ebx
c000ec02:	89 ca                	mov    edx,ecx
c000ec04:	89 14 85 00 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce00],edx
c000ec0b:	eb 0f                	jmp    c000ec1c <scanMADT()+0x4ac>
c000ec0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec10:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ec15:	75 05                	jne    c000ec1c <scanMADT()+0x4ac>
c000ec17:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ec1c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ec20:	31 d2                	xor    edx,edx
c000ec22:	88 c2                	mov    dl,al
c000ec24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ec28:	01 d0                	add    eax,edx
c000ec2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ec2e:	e9 31 fc ff ff       	jmp    c000e864 <scanMADT()+0xf4>
c000ec33:	90                   	nop
c000ec34:	90                   	nop
c000ec35:	eb 05                	jmp    c000ec3c <scanMADT()+0x4cc>
c000ec37:	90                   	nop
c000ec38:	90                   	nop
c000ec39:	8d 76 00             	lea    esi,[esi+0x0]
c000ec3c:	83 c4 38             	add    esp,0x38
c000ec3f:	5b                   	pop    ebx
c000ec40:	c3                   	ret    
c000ec41:	90                   	nop
c000ec42:	66 90                	xchg   ax,ax

c000ec44 <ACPI::ACPI()>:
c000ec44:	83 ec 0c             	sub    esp,0xc
c000ec47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec4b:	83 ec 08             	sub    esp,0x8
c000ec4e:	68 cd e4 01 c0       	push   0xc001e4cd
c000ec53:	50                   	push   eax
c000ec54:	e8 9b d4 ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	ba 04 e6 01 c0       	mov    edx,0xc001e604
c000ec61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec65:	89 10                	mov    DWORD PTR [eax],edx
c000ec67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec6b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ec72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec76:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ec80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec84:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ec8e:	e8 dd fa ff ff       	call   c000e770 <scanMADT()>
c000ec93:	90                   	nop
c000ec94:	83 c4 0c             	add    esp,0xc
c000ec97:	c3                   	ret    

c000ec98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ec98:	83 ec 2c             	sub    esp,0x2c
c000ec9b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ec9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eca3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000eca7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ecab:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ecb0:	88 d0                	mov    al,dl
c000ecb2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ecb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ecbb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ecc3:	90                   	nop
c000ecc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecc8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ecce:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ecd2:	0f 8d 9c 00 00 00    	jge    c000ed74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000ecd8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecdc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ece0:	83 c2 2a             	add    edx,0x2a
c000ece3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ece7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000ecec:	75 7a                	jne    c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ecee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecf2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecf6:	83 c2 2a             	add    edx,0x2a
c000ecf9:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ecfd:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000ed01:	75 65                	jne    c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ed03:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ed08:	74 3a                	je     c000ed44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000ed0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed12:	83 c2 2a             	add    edx,0x2a
c000ed15:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ed19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed20:	39 c2                	cmp    edx,eax
c000ed22:	74 10                	je     c000ed34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ed24:	83 ec 0c             	sub    esp,0xc
c000ed27:	68 48 e4 01 c0       	push   0xc001e448
c000ed2c:	e8 ba 19 00 00       	call   c00106eb <KePanic(char const*)>
c000ed31:	83 c4 10             	add    esp,0x10
c000ed34:	83 ec 0c             	sub    esp,0xc
c000ed37:	68 d2 e4 01 c0       	push   0xc001e4d2
c000ed3c:	e8 aa 19 00 00       	call   c00106eb <KePanic(char const*)>
c000ed41:	83 c4 10             	add    esp,0x10
c000ed44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ed48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed50:	83 c2 2a             	add    edx,0x2a
c000ed53:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ed57:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed59:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ed5c:	89 01                	mov    DWORD PTR [ecx],eax
c000ed5e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ed61:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ed66:	66 90                	xchg   ax,ax
c000ed68:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ed6c:	e9 53 ff ff ff       	jmp    c000ecc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ed71:	8d 76 00             	lea    esi,[esi+0x0]
c000ed74:	90                   	nop
c000ed75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed79:	83 c4 2c             	add    esp,0x2c
c000ed7c:	c2 04 00             	ret    0x4
c000ed7f:	90                   	nop

c000ed80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ed80:	83 ec 1c             	sub    esp,0x1c
c000ed83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed87:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ed8b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ed8f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ed94:	88 c8                	mov    al,cl
c000ed96:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ed9a:	88 d0                	mov    al,dl
c000ed9c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eda0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eda4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edae:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000edb1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000edb5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000edb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edbd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edc3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000edc7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000edca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edce:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000edd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edd7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eddd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ede1:	8d 48 01             	lea    ecx,[eax+0x1]
c000ede4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ede8:	83 c2 2a             	add    edx,0x2a
c000edeb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000edef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edf3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edfd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee00:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee04:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ee08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee0c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee12:	8d 50 01             	lea    edx,[eax+0x1]
c000ee15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee19:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ee1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee23:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee29:	3d 00 02 00 00       	cmp    eax,0x200
c000ee2e:	75 10                	jne    c000ee40 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ee30:	83 ec 0c             	sub    esp,0xc
c000ee33:	68 e1 e4 01 c0       	push   0xc001e4e1
c000ee38:	e8 ae 18 00 00       	call   c00106eb <KePanic(char const*)>
c000ee3d:	83 c4 10             	add    esp,0x10
c000ee40:	90                   	nop
c000ee41:	83 c4 1c             	add    esp,0x1c
c000ee44:	c3                   	ret    
c000ee45:	90                   	nop
c000ee46:	66 90                	xchg   ax,ax

c000ee48 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ee48:	b8 00 00 00 00       	mov    eax,0x0
c000ee4d:	c3                   	ret    
c000ee4e:	66 90                	xchg   ax,ax

c000ee50 <ACPI::detectPCI()>:
c000ee50:	53                   	push   ebx
c000ee51:	83 ec 28             	sub    esp,0x28
c000ee54:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ee59:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ee5e:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000ee63:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee69:	83 e0 04             	and    eax,0x4
c000ee6c:	84 c0                	test   al,al
c000ee6e:	74 2c                	je     c000ee9c <ACPI::detectPCI()+0x4c>
c000ee70:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000ee75:	83 ec 08             	sub    esp,0x8
c000ee78:	68 fe e4 01 c0       	push   0xc001e4fe
c000ee7d:	50                   	push   eax
c000ee7e:	e8 75 f8 ff ff       	call   c000e6f8 <findDataTable(unsigned char*, char*)>
c000ee83:	83 c4 10             	add    esp,0x10
c000ee86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee8a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ee8f:	74 0b                	je     c000ee9c <ACPI::detectPCI()+0x4c>
c000ee91:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee96:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ee9b:	90                   	nop
c000ee9c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eea4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eea8:	8a 00                	mov    al,BYTE PTR [eax]
c000eeaa:	3c 01                	cmp    al,0x1
c000eeac:	75 0e                	jne    c000eebc <ACPI::detectPCI()+0x6c>
c000eeae:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eeb3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eeb8:	eb 2a                	jmp    c000eee4 <ACPI::detectPCI()+0x94>
c000eeba:	66 90                	xchg   ax,ax
c000eebc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eec0:	8a 00                	mov    al,BYTE PTR [eax]
c000eec2:	3c 02                	cmp    al,0x2
c000eec4:	75 1e                	jne    c000eee4 <ACPI::detectPCI()+0x94>
c000eec6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eecb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eed0:	74 12                	je     c000eee4 <ACPI::detectPCI()+0x94>
c000eed2:	83 ec 0c             	sub    esp,0xc
c000eed5:	68 78 e4 01 c0       	push   0xc001e478
c000eeda:	e8 0c 18 00 00       	call   c00106eb <KePanic(char const*)>
c000eedf:	83 c4 10             	add    esp,0x10
c000eee2:	66 90                	xchg   ax,ax
c000eee4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eee8:	83 f0 01             	xor    eax,0x1
c000eeeb:	84 c0                	test   al,al
c000eeed:	74 41                	je     c000ef30 <ACPI::detectPCI()+0xe0>
c000eeef:	e8 5c 12 ff ff       	call   c0000150 <manualPCIProbe>
c000eef4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eef8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eefd:	75 0d                	jne    c000ef0c <ACPI::detectPCI()+0xbc>
c000eeff:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef04:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef09:	eb 25                	jmp    c000ef30 <ACPI::detectPCI()+0xe0>
c000ef0b:	90                   	nop
c000ef0c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ef11:	75 1d                	jne    c000ef30 <ACPI::detectPCI()+0xe0>
c000ef13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef18:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ef1d:	74 11                	je     c000ef30 <ACPI::detectPCI()+0xe0>
c000ef1f:	83 ec 0c             	sub    esp,0xc
c000ef22:	68 78 e4 01 c0       	push   0xc001e478
c000ef27:	e8 bf 17 00 00       	call   c00106eb <KePanic(char const*)>
c000ef2c:	83 c4 10             	add    esp,0x10
c000ef2f:	90                   	nop
c000ef30:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ef35:	0f 84 85 00 00 00    	je     c000efc0 <ACPI::detectPCI()+0x170>
c000ef3b:	83 ec 0c             	sub    esp,0xc
c000ef3e:	68 03 e5 01 c0       	push   0xc001e503
c000ef43:	e8 bf 11 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c000ef48:	83 c4 10             	add    esp,0x10
c000ef4b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ef53:	83 ec 0c             	sub    esp,0xc
c000ef56:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ef5a:	e8 26 8f ff ff       	call   c0007e85 <malloc>
c000ef5f:	83 c4 10             	add    esp,0x10
c000ef62:	89 c3                	mov    ebx,eax
c000ef64:	83 ec 0c             	sub    esp,0xc
c000ef67:	53                   	push   ebx
c000ef68:	e8 19 96 00 00       	call   c0018586 <PCI::PCI()>
c000ef6d:	83 c4 10             	add    esp,0x10
c000ef70:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef78:	83 ec 08             	sub    esp,0x8
c000ef7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef7f:	50                   	push   eax
c000ef80:	e8 d7 cf ff ff       	call   c000bf5c <Device::addChild(Device*)>
c000ef85:	83 c4 10             	add    esp,0x10
c000ef88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef8e:	83 c0 08             	add    eax,0x8
c000ef91:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef93:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ef98:	74 0a                	je     c000efa4 <ACPI::detectPCI()+0x154>
c000ef9a:	ba 01 00 00 00       	mov    edx,0x1
c000ef9f:	eb 0b                	jmp    c000efac <ACPI::detectPCI()+0x15c>
c000efa1:	8d 76 00             	lea    esi,[esi+0x0]
c000efa4:	ba 02 00 00 00       	mov    edx,0x2
c000efa9:	8d 76 00             	lea    esi,[esi+0x0]
c000efac:	6a 00                	push   0x0
c000efae:	6a 00                	push   0x0
c000efb0:	52                   	push   edx
c000efb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efb5:	ff d0                	call   eax
c000efb7:	83 c4 10             	add    esp,0x10
c000efba:	e9 91 00 00 00       	jmp    c000f050 <ACPI::detectPCI()+0x200>
c000efbf:	90                   	nop
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 1b e5 01 c0       	push   0xc001e51b
c000efc8:	e8 3a 11 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000efd7:	83 ec 0c             	sub    esp,0xc
c000efda:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000efde:	e8 a2 8e ff ff       	call   c0007e85 <malloc>
c000efe3:	83 c4 10             	add    esp,0x10
c000efe6:	89 c3                	mov    ebx,eax
c000efe8:	83 ec 0c             	sub    esp,0xc
c000efeb:	53                   	push   ebx
c000efec:	e8 c1 a0 00 00       	call   c00190b2 <IDE::IDE()>
c000eff1:	83 c4 10             	add    esp,0x10
c000eff4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eff8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000effc:	83 ec 08             	sub    esp,0x8
c000efff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f003:	50                   	push   eax
c000f004:	e8 53 cf ff ff       	call   c000bf5c <Device::addChild(Device*)>
c000f009:	83 c4 10             	add    esp,0x10
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f01a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f01e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f038:	8b 00                	mov    eax,DWORD PTR [eax]
c000f03a:	83 c0 08             	add    eax,0x8
c000f03d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f03f:	6a 00                	push   0x0
c000f041:	6a 00                	push   0x0
c000f043:	6a 00                	push   0x0
c000f045:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f049:	ff d0                	call   eax
c000f04b:	83 c4 10             	add    esp,0x10
c000f04e:	66 90                	xchg   ax,ax
c000f050:	90                   	nop
c000f051:	83 c4 28             	add    esp,0x28
c000f054:	5b                   	pop    ebx
c000f055:	c3                   	ret    
c000f056:	66 90                	xchg   ax,ax

c000f058 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f058:	83 ec 1c             	sub    esp,0x1c
c000f05b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f05f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f062:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f066:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c000f06c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f070:	25 ff 00 00 00       	and    eax,0xff
c000f075:	83 ec 08             	sub    esp,0x8
c000f078:	50                   	push   eax
c000f079:	52                   	push   edx
c000f07a:	e8 f3 84 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c000f07f:	83 c4 10             	add    esp,0x10
c000f082:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f086:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c000f08c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f090:	25 ff 00 00 00       	and    eax,0xff
c000f095:	83 ec 04             	sub    esp,0x4
c000f098:	6a 01                	push   0x1
c000f09a:	50                   	push   eax
c000f09b:	52                   	push   edx
c000f09c:	e8 e7 85 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f0a1:	83 c4 10             	add    esp,0x10
c000f0a4:	90                   	nop
c000f0a5:	83 c4 1c             	add    esp,0x1c
c000f0a8:	c3                   	ret    
c000f0a9:	90                   	nop
c000f0aa:	66 90                	xchg   ax,ax

c000f0ac <ACPI::sleep()>:
c000f0ac:	83 ec 0c             	sub    esp,0xc
c000f0af:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c000f0b4:	85 c0                	test   eax,eax
c000f0b6:	74 08                	je     c000f0c0 <ACPI::sleep()+0x14>
c000f0b8:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c000f0bd:	ff d0                	call   eax
c000f0bf:	90                   	nop
c000f0c0:	90                   	nop
c000f0c1:	83 c4 0c             	add    esp,0xc
c000f0c4:	c3                   	ret    
c000f0c5:	90                   	nop
c000f0c6:	66 90                	xchg   ax,ax

c000f0c8 <ACPI::open(int, int, void*)>:
c000f0c8:	57                   	push   edi
c000f0c9:	56                   	push   esi
c000f0ca:	53                   	push   ebx
c000f0cb:	81 ec 70 01 00 00    	sub    esp,0x170
c000f0d1:	83 ec 0c             	sub    esp,0xc
c000f0d4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f0db:	e8 70 fd ff ff       	call   c000ee50 <ACPI::detectPCI()>
c000f0e0:	83 c4 10             	add    esp,0x10
c000f0e3:	83 ec 0c             	sub    esp,0xc
c000f0e6:	68 a0 e4 01 c0       	push   0xc001e4a0
c000f0eb:	e8 17 10 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c000f0f0:	83 c4 10             	add    esp,0x10
c000f0f3:	83 ec 0c             	sub    esp,0xc
c000f0f6:	68 30 e5 01 c0       	push   0xc001e530
c000f0fb:	e8 db 33 00 00       	call   c00124db <Thr::loadKernelSymbolTable(char const*)>
c000f100:	83 c4 10             	add    esp,0x10
c000f103:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f10b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f116:	83 ec 0c             	sub    esp,0xc
c000f119:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f120:	e8 60 8d ff ff       	call   c0007e85 <malloc>
c000f125:	83 c4 10             	add    esp,0x10
c000f128:	89 c3                	mov    ebx,eax
c000f12a:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000f12f:	83 ec 04             	sub    esp,0x4
c000f132:	50                   	push   eax
c000f133:	68 4e e5 01 c0       	push   0xc001e54e
c000f138:	53                   	push   ebx
c000f139:	e8 54 bf ff ff       	call   c000b092 <File::File(char const*, Process*)>
c000f13e:	83 c4 10             	add    esp,0x10
c000f141:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f148:	83 ec 08             	sub    esp,0x8
c000f14b:	6a 01                	push   0x1
c000f14d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f154:	e8 f9 bf ff ff       	call   c000b152 <File::open(FileOpenMode)>
c000f159:	83 c4 10             	add    esp,0x10
c000f15c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f163:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f16b:	75 17                	jne    c000f184 <ACPI::open(int, int, void*)+0xbc>
c000f16d:	83 ec 0c             	sub    esp,0xc
c000f170:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f177:	e8 34 c0 ff ff       	call   c000b1b0 <File::close()>
c000f17c:	83 c4 10             	add    esp,0x10
c000f17f:	eb 0b                	jmp    c000f18c <ACPI::open(int, int, void*)+0xc4>
c000f181:	8d 76 00             	lea    esi,[esi+0x0]
c000f184:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f18c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f194:	74 1e                	je     c000f1b4 <ACPI::open(int, int, void*)+0xec>
c000f196:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f19d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f19f:	83 c0 08             	add    eax,0x8
c000f1a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1a4:	83 ec 0c             	sub    esp,0xc
c000f1a7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f1ae:	ff d0                	call   eax
c000f1b0:	83 c4 10             	add    esp,0x10
c000f1b3:	90                   	nop
c000f1b4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f1bb:	83 f0 01             	xor    eax,0x1
c000f1be:	84 c0                	test   al,al
c000f1c0:	74 42                	je     c000f204 <ACPI::open(int, int, void*)+0x13c>
c000f1c2:	83 ec 0c             	sub    esp,0xc
c000f1c5:	68 6c e5 01 c0       	push   0xc001e56c
c000f1ca:	e8 38 0f 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c000f1cf:	83 c4 10             	add    esp,0x10
c000f1d2:	83 ec 04             	sub    esp,0x4
c000f1d5:	6a 0c                	push   0xc
c000f1d7:	68 87 e5 01 c0       	push   0xc001e587
c000f1dc:	68 98 e5 01 c0       	push   0xc001e598
c000f1e1:	e8 20 29 00 00       	call   c0011b06 <Reg::readIntWithDefault(char*, char*, int)>
c000f1e6:	83 c4 10             	add    esp,0x10
c000f1e9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f1f0:	83 ec 0c             	sub    esp,0xc
c000f1f3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f1fa:	e8 d4 a8 ff ff       	call   c0009ad3 <Virt::setupPageSwapping(int)>
c000f1ff:	83 c4 10             	add    esp,0x10
c000f202:	66 90                	xchg   ax,ax
c000f204:	83 ec 0c             	sub    esp,0xc
c000f207:	68 13 d6 01 c0       	push   0xc001d613
c000f20c:	e8 f6 0e 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c000f211:	83 c4 10             	add    esp,0x10
c000f214:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f21b:	83 ec 08             	sub    esp,0x8
c000f21e:	6a 12                	push   0x12
c000f220:	50                   	push   eax
c000f221:	e8 4e d0 ff ff       	call   c000c274 <getDevicesOfType(DeviceType)>
c000f226:	83 c4 0c             	add    esp,0xc
c000f229:	8d 76 00             	lea    esi,[esi+0x0]
c000f22c:	83 ec 0c             	sub    esp,0xc
c000f22f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f236:	50                   	push   eax
c000f237:	e8 c0 d7 00 00       	call   c001c9fc <LinkedList<Device>::isEmpty()>
c000f23c:	83 c4 10             	add    esp,0x10
c000f23f:	83 f0 01             	xor    eax,0x1
c000f242:	84 c0                	test   al,al
c000f244:	0f 84 46 01 00 00    	je     c000f390 <ACPI::open(int, int, void*)+0x2c8>
c000f24a:	83 ec 0c             	sub    esp,0xc
c000f24d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f254:	50                   	push   eax
c000f255:	e8 be d7 00 00       	call   c001ca18 <LinkedList<Device>::getFirstElement()>
c000f25a:	83 c4 10             	add    esp,0x10
c000f25d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f264:	83 ec 0c             	sub    esp,0xc
c000f267:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f26e:	50                   	push   eax
c000f26f:	e8 ac d7 00 00       	call   c001ca20 <LinkedList<Device>::removeFirst()>
c000f274:	83 c4 10             	add    esp,0x10
c000f277:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f27e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f285:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f28c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f290:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f296:	ba 09 00 00 00       	mov    edx,0x9
c000f29b:	fc                   	cld    
c000f29c:	89 c7                	mov    edi,eax
c000f29e:	89 de                	mov    esi,ebx
c000f2a0:	89 d1                	mov    ecx,edx
c000f2a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f2a4:	83 ec 08             	sub    esp,0x8
c000f2a7:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f2ab:	50                   	push   eax
c000f2ac:	83 ec 24             	sub    esp,0x24
c000f2af:	89 e0                	mov    eax,esp
c000f2b1:	89 c3                	mov    ebx,eax
c000f2b3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f2b7:	ba 09 00 00 00       	mov    edx,0x9
c000f2bc:	89 df                	mov    edi,ebx
c000f2be:	89 c6                	mov    esi,eax
c000f2c0:	89 d1                	mov    ecx,edx
c000f2c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f2c4:	e8 9f 97 00 00       	call   c0018a68 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f2c9:	83 c4 30             	add    esp,0x30
c000f2cc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f2d3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f2db:	0f 84 4b ff ff ff    	je     c000f22c <ACPI::open(int, int, void*)+0x164>
c000f2e1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f2ec:	83 ec 0c             	sub    esp,0xc
c000f2ef:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f2f6:	e8 8a 8b ff ff       	call   c0007e85 <malloc>
c000f2fb:	83 c4 10             	add    esp,0x10
c000f2fe:	89 c3                	mov    ebx,eax
c000f300:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000f305:	83 ec 04             	sub    esp,0x4
c000f308:	50                   	push   eax
c000f309:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f310:	53                   	push   ebx
c000f311:	e8 7c bd ff ff       	call   c000b092 <File::File(char const*, Process*)>
c000f316:	83 c4 10             	add    esp,0x10
c000f319:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f320:	83 ec 0c             	sub    esp,0xc
c000f323:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f32a:	e8 91 c0 ff ff       	call   c000b3c0 <File::exists()>
c000f32f:	83 c4 10             	add    esp,0x10
c000f332:	84 c0                	test   al,al
c000f334:	74 2a                	je     c000f360 <ACPI::open(int, int, void*)+0x298>
c000f336:	83 ec 08             	sub    esp,0x8
c000f339:	6a 01                	push   0x1
c000f33b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f342:	e8 0b 3c 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c000f347:	83 c4 10             	add    esp,0x10
c000f34a:	83 ec 08             	sub    esp,0x8
c000f34d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f354:	50                   	push   eax
c000f355:	e8 29 3e 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c000f35a:	83 c4 10             	add    esp,0x10
c000f35d:	8d 76 00             	lea    esi,[esi+0x0]
c000f360:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f368:	0f 84 be fe ff ff    	je     c000f22c <ACPI::open(int, int, void*)+0x164>
c000f36e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f375:	8b 00                	mov    eax,DWORD PTR [eax]
c000f377:	83 c0 08             	add    eax,0x8
c000f37a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f37c:	83 ec 0c             	sub    esp,0xc
c000f37f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f386:	ff d0                	call   eax
c000f388:	83 c4 10             	add    esp,0x10
c000f38b:	e9 9c fe ff ff       	jmp    c000f22c <ACPI::open(int, int, void*)+0x164>
c000f390:	83 ec 0c             	sub    esp,0xc
c000f393:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f39a:	50                   	push   eax
c000f39b:	e8 58 d6 00 00       	call   c001c9f8 <LinkedList<Device>::~LinkedList()>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c000f3a9:	83 ec 08             	sub    esp,0x8
c000f3ac:	6a 01                	push   0x1
c000f3ae:	68 9f e5 01 c0       	push   0xc001e59f
c000f3b3:	e8 9a 3b 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c000f3b8:	83 c4 10             	add    esp,0x10
c000f3bb:	83 ec 08             	sub    esp,0x8
c000f3be:	53                   	push   ebx
c000f3bf:	50                   	push   eax
c000f3c0:	e8 be 3d 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c000f3c5:	83 c4 10             	add    esp,0x10
c000f3c8:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000f3cd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3d3:	83 e0 04             	and    eax,0x4
c000f3d6:	84 c0                	test   al,al
c000f3d8:	0f 84 16 01 00 00    	je     c000f4f4 <ACPI::open(int, int, void*)+0x42c>
c000f3de:	83 ec 0c             	sub    esp,0xc
c000f3e1:	68 bc e5 01 c0       	push   0xc001e5bc
c000f3e6:	e8 1c 0d 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c000f3eb:	83 c4 10             	add    esp,0x10
c000f3ee:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f3f9:	83 ec 0c             	sub    esp,0xc
c000f3fc:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f403:	e8 7d 8a ff ff       	call   c0007e85 <malloc>
c000f408:	83 c4 10             	add    esp,0x10
c000f40b:	89 c3                	mov    ebx,eax
c000f40d:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c000f412:	83 ec 04             	sub    esp,0x4
c000f415:	50                   	push   eax
c000f416:	68 d9 e5 01 c0       	push   0xc001e5d9
c000f41b:	53                   	push   ebx
c000f41c:	e8 71 bc ff ff       	call   c000b092 <File::File(char const*, Process*)>
c000f421:	83 c4 10             	add    esp,0x10
c000f424:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f42b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f433:	74 1b                	je     c000f450 <ACPI::open(int, int, void*)+0x388>
c000f435:	83 ec 0c             	sub    esp,0xc
c000f438:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f43f:	e8 7c bf ff ff       	call   c000b3c0 <File::exists()>
c000f444:	83 c4 10             	add    esp,0x10
c000f447:	84 c0                	test   al,al
c000f449:	74 05                	je     c000f450 <ACPI::open(int, int, void*)+0x388>
c000f44b:	b0 01                	mov    al,0x1
c000f44d:	eb 05                	jmp    c000f454 <ACPI::open(int, int, void*)+0x38c>
c000f44f:	90                   	nop
c000f450:	b0 00                	mov    al,0x0
c000f452:	66 90                	xchg   ax,ax
c000f454:	84 c0                	test   al,al
c000f456:	74 28                	je     c000f480 <ACPI::open(int, int, void*)+0x3b8>
c000f458:	83 ec 08             	sub    esp,0x8
c000f45b:	6a 01                	push   0x1
c000f45d:	68 d9 e5 01 c0       	push   0xc001e5d9
c000f462:	e8 eb 3a 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c000f467:	83 c4 10             	add    esp,0x10
c000f46a:	83 ec 08             	sub    esp,0x8
c000f46d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f474:	50                   	push   eax
c000f475:	e8 09 3d 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c000f47a:	83 c4 10             	add    esp,0x10
c000f47d:	8d 76 00             	lea    esi,[esi+0x0]
c000f480:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f488:	74 2a                	je     c000f4b4 <ACPI::open(int, int, void*)+0x3ec>
c000f48a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f492:	74 20                	je     c000f4b4 <ACPI::open(int, int, void*)+0x3ec>
c000f494:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f49b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f49d:	83 c0 08             	add    eax,0x8
c000f4a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f4ac:	ff d0                	call   eax
c000f4ae:	83 c4 10             	add    esp,0x10
c000f4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4b4:	a1 e8 31 02 c0       	mov    eax,ds:0xc00231e8
c000f4b9:	83 ec 08             	sub    esp,0x8
c000f4bc:	68 f6 e5 01 c0       	push   0xc001e5f6
c000f4c1:	50                   	push   eax
c000f4c2:	e8 31 f2 ff ff       	call   c000e6f8 <findDataTable(unsigned char*, char*)>
c000f4c7:	83 c4 10             	add    esp,0x10
c000f4ca:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f4d1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f4d9:	74 19                	je     c000f4f4 <ACPI::open(int, int, void*)+0x42c>
c000f4db:	83 ec 08             	sub    esp,0x8
c000f4de:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f4e5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f4ec:	e8 67 fb ff ff       	call   c000f058 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f4f1:	83 c4 10             	add    esp,0x10
c000f4f4:	b8 00 00 00 00       	mov    eax,0x0
c000f4f9:	81 c4 70 01 00 00    	add    esp,0x170
c000f4ff:	5b                   	pop    ebx
c000f500:	5e                   	pop    esi
c000f501:	5f                   	pop    edi
c000f502:	c3                   	ret    
c000f503:	90                   	nop

c000f504 <CPU::close(int, int, void*)>:
c000f504:	31 c0                	xor    eax,eax
c000f506:	c3                   	ret    
c000f507:	90                   	nop

c000f508 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f508:	60                   	pusha  
c000f509:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f50d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f511:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f515:	9c                   	pushf  
c000f516:	fa                   	cli    
c000f517:	0f 09                	wbinvd 
c000f519:	0f 30                	wrmsr  
c000f51b:	9d                   	popf   
c000f51c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f520:	89 02                	mov    DWORD PTR [edx],eax
c000f522:	61                   	popa   
c000f523:	c3                   	ret    

c000f524 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f524:	60                   	pusha  
c000f525:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f529:	9c                   	pushf  
c000f52a:	fa                   	cli    
c000f52b:	0f 09                	wbinvd 
c000f52d:	31 c0                	xor    eax,eax
c000f52f:	31 d2                	xor    edx,edx
c000f531:	0f 32                	rdmsr  
c000f533:	9d                   	popf   
c000f534:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f538:	89 02                	mov    DWORD PTR [edx],eax
c000f53a:	61                   	popa   
c000f53b:	c3                   	ret    

c000f53c <CPU::AMD_K6_writeback(int, int, int)>:
c000f53c:	56                   	push   esi
c000f53d:	53                   	push   ebx
c000f53e:	83 ec 10             	sub    esp,0x10
c000f541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f545:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f54a:	75 5d                	jne    c000f5a9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f54c:	83 f8 08             	cmp    eax,0x8
c000f54f:	75 09                	jne    c000f55a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f551:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f556:	7e 13                	jle    c000f56b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f558:	eb 30                	jmp    c000f58a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f55a:	83 f8 06             	cmp    eax,0x6
c000f55d:	7c 4a                	jl     c000f5a9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f55f:	83 f8 07             	cmp    eax,0x7
c000f562:	7e 07                	jle    c000f56b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f564:	83 f8 09             	cmp    eax,0x9
c000f567:	74 21                	je     c000f58a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f569:	eb 3e                	jmp    c000f5a9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f56b:	89 e6                	mov    esi,esp
c000f56d:	8b 1d fc 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209fc
c000f573:	56                   	push   esi
c000f574:	c1 eb 15             	shr    ebx,0x15
c000f577:	68 82 00 00 c0       	push   0xc0000082
c000f57c:	83 e3 7e             	and    ebx,0x7e
c000f57f:	e8 a0 ff ff ff       	call   c000f524 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f584:	56                   	push   esi
c000f585:	6a 00                	push   0x0
c000f587:	53                   	push   ebx
c000f588:	eb 12                	jmp    c000f59c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f58a:	89 e3                	mov    ebx,esp
c000f58c:	53                   	push   ebx
c000f58d:	68 82 00 00 c0       	push   0xc0000082
c000f592:	e8 8d ff ff ff       	call   c000f524 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f597:	53                   	push   ebx
c000f598:	6a 00                	push   0x0
c000f59a:	6a 00                	push   0x0
c000f59c:	68 82 00 00 c0       	push   0xc0000082
c000f5a1:	e8 62 ff ff ff       	call   c000f508 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f5a6:	83 c4 18             	add    esp,0x18
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	5b                   	pop    ebx
c000f5ad:	5e                   	pop    esi
c000f5ae:	c3                   	ret    
c000f5af:	90                   	nop

c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f5b0:	55                   	push   ebp
c000f5b1:	57                   	push   edi
c000f5b2:	56                   	push   esi
c000f5b3:	53                   	push   ebx
c000f5b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f5bc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f5c0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f5c4:	39 05 f0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7f0,eax
c000f5ca:	75 23                	jne    c000f5ef <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f5cc:	a1 4c 34 02 c0       	mov    eax,ds:0xc002344c
c000f5d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f5d5:	89 06                	mov    DWORD PTR [esi],eax
c000f5d7:	a1 48 34 02 c0       	mov    eax,ds:0xc0023448
c000f5dc:	89 07                	mov    DWORD PTR [edi],eax
c000f5de:	a1 44 34 02 c0       	mov    eax,ds:0xc0023444
c000f5e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f5e6:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c000f5eb:	89 02                	mov    DWORD PTR [edx],eax
c000f5ed:	eb 3f                	jmp    c000f62e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f5ef:	31 c9                	xor    ecx,ecx
c000f5f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5f5:	0f a2                	cpuid  
c000f5f7:	89 06                	mov    DWORD PTR [esi],eax
c000f5f9:	89 1f                	mov    DWORD PTR [edi],ebx
c000f5fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5ff:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f602:	89 10                	mov    DWORD PTR [eax],edx
c000f604:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f608:	a3 f0 f7 01 c0       	mov    ds:0xc001f7f0,eax
c000f60d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f60f:	a3 4c 34 02 c0       	mov    ds:0xc002344c,eax
c000f614:	8b 07                	mov    eax,DWORD PTR [edi]
c000f616:	a3 48 34 02 c0       	mov    ds:0xc0023448,eax
c000f61b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f61e:	a3 44 34 02 c0       	mov    ds:0xc0023444,eax
c000f623:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f627:	8b 00                	mov    eax,DWORD PTR [eax]
c000f629:	a3 40 34 02 c0       	mov    ds:0xc0023440,eax
c000f62e:	5b                   	pop    ebx
c000f62f:	5e                   	pop    esi
c000f630:	5f                   	pop    edi
c000f631:	5d                   	pop    ebp
c000f632:	c3                   	ret    
c000f633:	90                   	nop

c000f634 <CPU::cpuidCheckEDX(unsigned int)>:
c000f634:	83 ec 10             	sub    esp,0x10
c000f637:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f63b:	50                   	push   eax
c000f63c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f640:	50                   	push   eax
c000f641:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f645:	50                   	push   eax
c000f646:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f64a:	50                   	push   eax
c000f64b:	6a 01                	push   0x1
c000f64d:	e8 5e ff ff ff       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f656:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f65a:	0f 95 c0             	setne  al
c000f65d:	83 c4 24             	add    esp,0x24
c000f660:	c3                   	ret    
c000f661:	90                   	nop

c000f662 <CPU::cpuidCheckECX(unsigned int)>:
c000f662:	83 ec 10             	sub    esp,0x10
c000f665:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f669:	50                   	push   eax
c000f66a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f66e:	50                   	push   eax
c000f66f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f673:	50                   	push   eax
c000f674:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f678:	50                   	push   eax
c000f679:	6a 01                	push   0x1
c000f67b:	e8 30 ff ff ff       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f680:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f684:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f688:	0f 95 c0             	setne  al
c000f68b:	83 c4 24             	add    esp,0x24
c000f68e:	c3                   	ret    
c000f68f:	90                   	nop

c000f690 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f690:	83 ec 10             	sub    esp,0x10
c000f693:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f697:	50                   	push   eax
c000f698:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f69c:	50                   	push   eax
c000f69d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a1:	50                   	push   eax
c000f6a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a6:	50                   	push   eax
c000f6a7:	6a 07                	push   0x7
c000f6a9:	e8 02 ff ff ff       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6b2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f6b6:	0f 95 c0             	setne  al
c000f6b9:	83 c4 24             	add    esp,0x24
c000f6bc:	c3                   	ret    
c000f6bd:	90                   	nop

c000f6be <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f6be:	83 ec 10             	sub    esp,0x10
c000f6c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6c5:	50                   	push   eax
c000f6c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ca:	50                   	push   eax
c000f6cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6cf:	50                   	push   eax
c000f6d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6d4:	50                   	push   eax
c000f6d5:	6a 07                	push   0x7
c000f6d7:	e8 d4 fe ff ff       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f6e4:	0f 95 c0             	setne  al
c000f6e7:	83 c4 24             	add    esp,0x24
c000f6ea:	c3                   	ret    
c000f6eb:	90                   	nop

c000f6ec <CPU::CPU()>:
c000f6ec:	83 ec 0c             	sub    esp,0xc
c000f6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	68 19 e7 01 c0       	push   0xc001e719
c000f6fb:	50                   	push   eax
c000f6fc:	e8 f3 c9 ff ff       	call   c000c0f4 <Device::Device(char const*)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	ba a0 e7 01 c0       	mov    edx,0xc001e7a0
c000f709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f70d:	89 10                	mov    DWORD PTR [eax],edx
c000f70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f713:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f721:	05 78 01 00 00       	add    eax,0x178
c000f726:	83 ec 0c             	sub    esp,0xc
c000f729:	50                   	push   eax
c000f72a:	e8 17 80 ff ff       	call   c0007746 <GDT::GDT()>
c000f72f:	83 c4 10             	add    esp,0x10
c000f732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f736:	05 7c 09 00 00       	add    eax,0x97c
c000f73b:	83 ec 0c             	sub    esp,0xc
c000f73e:	50                   	push   eax
c000f73f:	e8 3c 82 ff ff       	call   c0007980 <IDT::IDT()>
c000f744:	83 c4 10             	add    esp,0x10
c000f747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f74b:	05 7c 11 00 00       	add    eax,0x117c
c000f750:	83 ec 0c             	sub    esp,0xc
c000f753:	50                   	push   eax
c000f754:	e8 b3 9a ff ff       	call   c000920c <TSS::TSS()>
c000f759:	83 c4 10             	add    esp,0x10
c000f75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f760:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f76b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f775:	90                   	nop
c000f776:	83 c4 0c             	add    esp,0xc
c000f779:	c3                   	ret    

c000f77a <CPU::displayFeatures()>:
c000f77a:	c3                   	ret    
c000f77b:	90                   	nop

c000f77c <CPU::detectFeatures()>:
c000f77c:	55                   	push   ebp
c000f77d:	57                   	push   edi
c000f77e:	56                   	push   esi
c000f77f:	53                   	push   ebx
c000f780:	83 ec 30             	sub    esp,0x30
c000f783:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f787:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f791:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f798:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f79e:	6a 0d                	push   0xd
c000f7a0:	6a 00                	push   0x0
c000f7a2:	55                   	push   ebp
c000f7a3:	e8 48 0d ff ff       	call   c00004f0 <memset>
c000f7a8:	83 c4 10             	add    esp,0x10
c000f7ab:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000f7b0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f7b7:	0f 84 d5 05 00 00    	je     c000fd92 <CPU::detectFeatures()+0x616>
c000f7bd:	83 ec 0c             	sub    esp,0xc
c000f7c0:	89 ef                	mov    edi,ebp
c000f7c2:	6a 10                	push   0x10
c000f7c4:	e8 6b fe ff ff       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000f7c9:	83 e0 01             	and    eax,0x1
c000f7cc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7cf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7d5:	83 e0 fd             	and    eax,0xfffffffd
c000f7d8:	09 d0                	or     eax,edx
c000f7da:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7e0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f7e7:	e8 48 fe ff ff       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000f7ec:	83 e0 01             	and    eax,0x1
c000f7ef:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f7f6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7fc:	83 e0 fb             	and    eax,0xfffffffb
c000f7ff:	09 d0                	or     eax,edx
c000f801:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f807:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f80e:	e8 21 fe ff ff       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000f813:	83 e0 01             	and    eax,0x1
c000f816:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f81d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f823:	83 e0 f7             	and    eax,0xfffffff7
c000f826:	09 d0                	or     eax,edx
c000f828:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f82e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f835:	e8 fa fd ff ff       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000f83a:	83 e0 01             	and    eax,0x1
c000f83d:	c1 e0 04             	shl    eax,0x4
c000f840:	88 c2                	mov    dl,al
c000f842:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f848:	83 e0 ef             	and    eax,0xffffffef
c000f84b:	09 d0                	or     eax,edx
c000f84d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f853:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f85a:	e8 d5 fd ff ff       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000f85f:	83 e0 01             	and    eax,0x1
c000f862:	c1 e0 05             	shl    eax,0x5
c000f865:	88 c2                	mov    dl,al
c000f867:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f86d:	83 e0 df             	and    eax,0xffffffdf
c000f870:	09 d0                	or     eax,edx
c000f872:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f878:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f87f:	e8 b0 fd ff ff       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000f884:	83 e0 01             	and    eax,0x1
c000f887:	8d 14 00             	lea    edx,[eax+eax*1]
c000f88a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f890:	83 e0 fd             	and    eax,0xfffffffd
c000f893:	09 d0                	or     eax,edx
c000f895:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f89b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f8a2:	e8 8d fd ff ff       	call   c000f634 <CPU::cpuidCheckEDX(unsigned int)>
c000f8a7:	83 e0 01             	and    eax,0x1
c000f8aa:	c1 e0 06             	shl    eax,0x6
c000f8ad:	88 c2                	mov    dl,al
c000f8af:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8b5:	83 e0 bf             	and    eax,0xffffffbf
c000f8b8:	09 d0                	or     eax,edx
c000f8ba:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8c0:	58                   	pop    eax
c000f8c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8c5:	50                   	push   eax
c000f8c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8ca:	50                   	push   eax
c000f8cb:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f8cf:	56                   	push   esi
c000f8d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8d4:	50                   	push   eax
c000f8d5:	6a 00                	push   0x0
c000f8d7:	e8 d4 fc ff ff       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8dc:	b8 04 00 00 00       	mov    eax,0x4
c000f8e1:	89 c1                	mov    ecx,eax
c000f8e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8e5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f8eb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f8ef:	89 c1                	mov    ecx,eax
c000f8f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8f3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f8f9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f8fd:	89 c1                	mov    ecx,eax
c000f8ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f901:	83 c4 18             	add    esp,0x18
c000f904:	68 28 e6 01 c0       	push   0xc001e628
c000f909:	55                   	push   ebp
c000f90a:	e8 f1 0d ff ff       	call   c0000700 <strcmp>
c000f90f:	83 c4 10             	add    esp,0x10
c000f912:	85 c0                	test   eax,eax
c000f914:	75 0f                	jne    c000f925 <CPU::detectFeatures()+0x1a9>
c000f916:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f920:	e9 22 02 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000f925:	50                   	push   eax
c000f926:	50                   	push   eax
c000f927:	68 35 e6 01 c0       	push   0xc001e635
c000f92c:	55                   	push   ebp
c000f92d:	e8 ce 0d ff ff       	call   c0000700 <strcmp>
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	85 c0                	test   eax,eax
c000f937:	74 dd                	je     c000f916 <CPU::detectFeatures()+0x19a>
c000f939:	50                   	push   eax
c000f93a:	50                   	push   eax
c000f93b:	68 42 e6 01 c0       	push   0xc001e642
c000f940:	55                   	push   ebp
c000f941:	e8 ba 0d ff ff       	call   c0000700 <strcmp>
c000f946:	83 c4 10             	add    esp,0x10
c000f949:	85 c0                	test   eax,eax
c000f94b:	74 2a                	je     c000f977 <CPU::detectFeatures()+0x1fb>
c000f94d:	50                   	push   eax
c000f94e:	50                   	push   eax
c000f94f:	68 4f e6 01 c0       	push   0xc001e64f
c000f954:	55                   	push   ebp
c000f955:	e8 a6 0d ff ff       	call   c0000700 <strcmp>
c000f95a:	83 c4 10             	add    esp,0x10
c000f95d:	85 c0                	test   eax,eax
c000f95f:	74 16                	je     c000f977 <CPU::detectFeatures()+0x1fb>
c000f961:	50                   	push   eax
c000f962:	50                   	push   eax
c000f963:	68 5c e6 01 c0       	push   0xc001e65c
c000f968:	55                   	push   ebp
c000f969:	e8 92 0d ff ff       	call   c0000700 <strcmp>
c000f96e:	83 c4 10             	add    esp,0x10
c000f971:	85 c0                	test   eax,eax
c000f973:	74 48                	je     c000f9bd <CPU::detectFeatures()+0x241>
c000f975:	eb 0f                	jmp    c000f986 <CPU::detectFeatures()+0x20a>
c000f977:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f981:	e9 c1 01 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000f986:	50                   	push   eax
c000f987:	50                   	push   eax
c000f988:	68 69 e6 01 c0       	push   0xc001e669
c000f98d:	55                   	push   ebp
c000f98e:	e8 6d 0d ff ff       	call   c0000700 <strcmp>
c000f993:	83 c4 10             	add    esp,0x10
c000f996:	85 c0                	test   eax,eax
c000f998:	74 23                	je     c000f9bd <CPU::detectFeatures()+0x241>
c000f99a:	57                   	push   edi
c000f99b:	57                   	push   edi
c000f99c:	68 76 e6 01 c0       	push   0xc001e676
c000f9a1:	55                   	push   ebp
c000f9a2:	e8 59 0d ff ff       	call   c0000700 <strcmp>
c000f9a7:	83 c4 10             	add    esp,0x10
c000f9aa:	85 c0                	test   eax,eax
c000f9ac:	75 1e                	jne    c000f9cc <CPU::detectFeatures()+0x250>
c000f9ae:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9b8:	e9 8a 01 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000f9bd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f9c7:	e9 7b 01 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000f9cc:	56                   	push   esi
c000f9cd:	56                   	push   esi
c000f9ce:	68 83 e6 01 c0       	push   0xc001e683
c000f9d3:	55                   	push   ebp
c000f9d4:	e8 27 0d ff ff       	call   c0000700 <strcmp>
c000f9d9:	83 c4 10             	add    esp,0x10
c000f9dc:	85 c0                	test   eax,eax
c000f9de:	75 0f                	jne    c000f9ef <CPU::detectFeatures()+0x273>
c000f9e0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f9ea:	e9 58 01 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000f9ef:	51                   	push   ecx
c000f9f0:	51                   	push   ecx
c000f9f1:	68 42 e6 01 c0       	push   0xc001e642
c000f9f6:	55                   	push   ebp
c000f9f7:	e8 04 0d ff ff       	call   c0000700 <strcmp>
c000f9fc:	83 c4 10             	add    esp,0x10
c000f9ff:	85 c0                	test   eax,eax
c000fa01:	75 0f                	jne    c000fa12 <CPU::detectFeatures()+0x296>
c000fa03:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fa0d:	e9 35 01 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000fa12:	52                   	push   edx
c000fa13:	52                   	push   edx
c000fa14:	68 90 e6 01 c0       	push   0xc001e690
c000fa19:	55                   	push   ebp
c000fa1a:	e8 e1 0c ff ff       	call   c0000700 <strcmp>
c000fa1f:	83 c4 10             	add    esp,0x10
c000fa22:	85 c0                	test   eax,eax
c000fa24:	75 0f                	jne    c000fa35 <CPU::detectFeatures()+0x2b9>
c000fa26:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fa30:	e9 12 01 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000fa35:	50                   	push   eax
c000fa36:	50                   	push   eax
c000fa37:	68 9d e6 01 c0       	push   0xc001e69d
c000fa3c:	55                   	push   ebp
c000fa3d:	e8 be 0c ff ff       	call   c0000700 <strcmp>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	85 c0                	test   eax,eax
c000fa47:	75 0f                	jne    c000fa58 <CPU::detectFeatures()+0x2dc>
c000fa49:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fa53:	e9 ef 00 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000fa58:	50                   	push   eax
c000fa59:	50                   	push   eax
c000fa5a:	68 aa e6 01 c0       	push   0xc001e6aa
c000fa5f:	55                   	push   ebp
c000fa60:	e8 9b 0c ff ff       	call   c0000700 <strcmp>
c000fa65:	83 c4 10             	add    esp,0x10
c000fa68:	85 c0                	test   eax,eax
c000fa6a:	75 0f                	jne    c000fa7b <CPU::detectFeatures()+0x2ff>
c000fa6c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fa76:	e9 cc 00 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000fa7b:	50                   	push   eax
c000fa7c:	50                   	push   eax
c000fa7d:	68 b7 e6 01 c0       	push   0xc001e6b7
c000fa82:	55                   	push   ebp
c000fa83:	e8 78 0c ff ff       	call   c0000700 <strcmp>
c000fa88:	83 c4 10             	add    esp,0x10
c000fa8b:	85 c0                	test   eax,eax
c000fa8d:	75 0f                	jne    c000fa9e <CPU::detectFeatures()+0x322>
c000fa8f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fa99:	e9 a9 00 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000fa9e:	50                   	push   eax
c000fa9f:	50                   	push   eax
c000faa0:	68 c4 e6 01 c0       	push   0xc001e6c4
c000faa5:	55                   	push   ebp
c000faa6:	e8 55 0c ff ff       	call   c0000700 <strcmp>
c000faab:	83 c4 10             	add    esp,0x10
c000faae:	85 c0                	test   eax,eax
c000fab0:	75 0f                	jne    c000fac1 <CPU::detectFeatures()+0x345>
c000fab2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fabc:	e9 86 00 00 00       	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000fac1:	50                   	push   eax
c000fac2:	50                   	push   eax
c000fac3:	68 d1 e6 01 c0       	push   0xc001e6d1
c000fac8:	55                   	push   ebp
c000fac9:	e8 32 0c ff ff       	call   c0000700 <strcmp>
c000face:	83 c4 10             	add    esp,0x10
c000fad1:	85 c0                	test   eax,eax
c000fad3:	75 0c                	jne    c000fae1 <CPU::detectFeatures()+0x365>
c000fad5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fadf:	eb 66                	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000fae1:	50                   	push   eax
c000fae2:	50                   	push   eax
c000fae3:	68 de e6 01 c0       	push   0xc001e6de
c000fae8:	55                   	push   ebp
c000fae9:	e8 12 0c ff ff       	call   c0000700 <strcmp>
c000faee:	83 c4 10             	add    esp,0x10
c000faf1:	85 c0                	test   eax,eax
c000faf3:	75 0c                	jne    c000fb01 <CPU::detectFeatures()+0x385>
c000faf5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000faff:	eb 46                	jmp    c000fb47 <CPU::detectFeatures()+0x3cb>
c000fb01:	57                   	push   edi
c000fb02:	57                   	push   edi
c000fb03:	68 eb e6 01 c0       	push   0xc001e6eb
c000fb08:	55                   	push   ebp
c000fb09:	e8 f2 0b ff ff       	call   c0000700 <strcmp>
c000fb0e:	83 c4 10             	add    esp,0x10
c000fb11:	85 c0                	test   eax,eax
c000fb13:	74 e0                	je     c000faf5 <CPU::detectFeatures()+0x379>
c000fb15:	56                   	push   esi
c000fb16:	56                   	push   esi
c000fb17:	68 f8 e6 01 c0       	push   0xc001e6f8
c000fb1c:	55                   	push   ebp
c000fb1d:	e8 de 0b ff ff       	call   c0000700 <strcmp>
c000fb22:	83 c4 10             	add    esp,0x10
c000fb25:	85 c0                	test   eax,eax
c000fb27:	74 cc                	je     c000faf5 <CPU::detectFeatures()+0x379>
c000fb29:	51                   	push   ecx
c000fb2a:	51                   	push   ecx
c000fb2b:	68 05 e7 01 c0       	push   0xc001e705
c000fb30:	55                   	push   ebp
c000fb31:	e8 ca 0b ff ff       	call   c0000700 <strcmp>
c000fb36:	83 c4 10             	add    esp,0x10
c000fb39:	85 c0                	test   eax,eax
c000fb3b:	74 b8                	je     c000faf5 <CPU::detectFeatures()+0x379>
c000fb3d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fb47:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fb4c:	0f 86 be 00 00 00    	jbe    c000fc10 <CPU::detectFeatures()+0x494>
c000fb52:	83 ec 0c             	sub    esp,0xc
c000fb55:	68 80 00 00 00       	push   0x80
c000fb5a:	e8 31 fb ff ff       	call   c000f690 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb5f:	83 e0 01             	and    eax,0x1
c000fb62:	c1 e0 06             	shl    eax,0x6
c000fb65:	88 c2                	mov    dl,al
c000fb67:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fb6d:	83 e0 bf             	and    eax,0xffffffbf
c000fb70:	09 d0                	or     eax,edx
c000fb72:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb78:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fb7f:	e8 0c fb ff ff       	call   c000f690 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb84:	83 e0 01             	and    eax,0x1
c000fb87:	c1 e0 04             	shl    eax,0x4
c000fb8a:	88 c2                	mov    dl,al
c000fb8c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fb92:	83 e0 ef             	and    eax,0xffffffef
c000fb95:	09 d0                	or     eax,edx
c000fb97:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fb9d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fba4:	e8 e7 fa ff ff       	call   c000f690 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fba9:	c1 e0 07             	shl    eax,0x7
c000fbac:	88 c2                	mov    dl,al
c000fbae:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbb4:	83 e0 7f             	and    eax,0x7f
c000fbb7:	09 d0                	or     eax,edx
c000fbb9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbbf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fbc6:	e8 f3 fa ff ff       	call   c000f6be <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fbcb:	83 e0 01             	and    eax,0x1
c000fbce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fbd5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fbdb:	83 e0 f7             	and    eax,0xfffffff7
c000fbde:	09 d0                	or     eax,edx
c000fbe0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fbe6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fbed:	e8 cc fa ff ff       	call   c000f6be <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	83 e0 01             	and    eax,0x1
c000fbf8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fbff:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc05:	83 e0 fb             	and    eax,0xfffffffb
c000fc08:	09 d0                	or     eax,edx
c000fc0a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc10:	83 ec 0c             	sub    esp,0xc
c000fc13:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc17:	50                   	push   eax
c000fc18:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc1c:	50                   	push   eax
c000fc1d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc21:	56                   	push   esi
c000fc22:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc26:	50                   	push   eax
c000fc27:	6a 01                	push   0x1
c000fc29:	e8 82 f9 ff ff       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc2e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fc32:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fc38:	88 ca                	mov    dl,cl
c000fc3a:	83 e0 f0             	and    eax,0xfffffff0
c000fc3d:	83 e2 0f             	and    edx,0xf
c000fc40:	09 d0                	or     eax,edx
c000fc42:	88 ca                	mov    dl,cl
c000fc44:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fc4a:	c0 ea 04             	shr    dl,0x4
c000fc4d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fc51:	0f b6 c2             	movzx  eax,dl
c000fc54:	83 c4 20             	add    esp,0x20
c000fc57:	c1 e0 06             	shl    eax,0x6
c000fc5a:	89 c7                	mov    edi,eax
c000fc5c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fc62:	66 25 3f c0          	and    ax,0xc03f
c000fc66:	09 f8                	or     eax,edi
c000fc68:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fc6f:	89 c8                	mov    eax,ecx
c000fc71:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fc78:	c1 e8 08             	shr    eax,0x8
c000fc7b:	83 e5 3f             	and    ebp,0x3f
c000fc7e:	83 e0 0f             	and    eax,0xf
c000fc81:	89 c7                	mov    edi,eax
c000fc83:	c1 e7 06             	shl    edi,0x6
c000fc86:	09 ef                	or     edi,ebp
c000fc88:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fc8f:	89 fa                	mov    edx,edi
c000fc91:	83 e5 c0             	and    ebp,0xffffffc0
c000fc94:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fc9a:	88 c2                	mov    dl,al
c000fc9c:	c0 ea 02             	shr    dl,0x2
c000fc9f:	89 d7                	mov    edi,edx
c000fca1:	09 ef                	or     edi,ebp
c000fca3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fca9:	89 fa                	mov    edx,edi
c000fcab:	83 e5 cf             	and    ebp,0xffffffcf
c000fcae:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fcb4:	89 cf                	mov    edi,ecx
c000fcb6:	c1 ef 0c             	shr    edi,0xc
c000fcb9:	83 e7 03             	and    edi,0x3
c000fcbc:	c1 e7 04             	shl    edi,0x4
c000fcbf:	09 ef                	or     edi,ebp
c000fcc1:	3c 06                	cmp    al,0x6
c000fcc3:	89 fa                	mov    edx,edi
c000fcc5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fccb:	74 04                	je     c000fcd1 <CPU::detectFeatures()+0x555>
c000fccd:	3c 0f                	cmp    al,0xf
c000fccf:	75 5c                	jne    c000fd2d <CPU::detectFeatures()+0x5b1>
c000fcd1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fcd5:	89 cf                	mov    edi,ecx
c000fcd7:	c1 ef 10             	shr    edi,0x10
c000fcda:	c1 e7 04             	shl    edi,0x4
c000fcdd:	09 fa                	or     edx,edi
c000fcdf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fce5:	0f b6 d2             	movzx  edx,dl
c000fce8:	66 81 e7 3f c0       	and    di,0xc03f
c000fced:	c1 e2 06             	shl    edx,0x6
c000fcf0:	09 fa                	or     edx,edi
c000fcf2:	3c 0f                	cmp    al,0xf
c000fcf4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fcfb:	75 30                	jne    c000fd2d <CPU::detectFeatures()+0x5b1>
c000fcfd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fd03:	c1 e9 14             	shr    ecx,0x14
c000fd06:	83 e0 3f             	and    eax,0x3f
c000fd09:	83 c1 0f             	add    ecx,0xf
c000fd0c:	88 ca                	mov    dl,cl
c000fd0e:	c0 e9 02             	shr    cl,0x2
c000fd11:	c1 e2 06             	shl    edx,0x6
c000fd14:	09 d0                	or     eax,edx
c000fd16:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fd1c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fd22:	83 e0 c0             	and    eax,0xffffffc0
c000fd25:	09 c1                	or     ecx,eax
c000fd27:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd2d:	83 ec 0c             	sub    esp,0xc
c000fd30:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fd37:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd3b:	50                   	push   eax
c000fd3c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fd40:	55                   	push   ebp
c000fd41:	56                   	push   esi
c000fd42:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fd46:	57                   	push   edi
c000fd47:	68 00 00 00 80       	push   0x80000000
c000fd4c:	e8 5f f8 ff ff       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd51:	83 c4 20             	add    esp,0x20
c000fd54:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fd5c:	76 22                	jbe    c000fd80 <CPU::detectFeatures()+0x604>
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd65:	50                   	push   eax
c000fd66:	55                   	push   ebp
c000fd67:	56                   	push   esi
c000fd68:	57                   	push   edi
c000fd69:	68 01 00 00 80       	push   0x80000001
c000fd6e:	e8 3d f8 ff ff       	call   c000f5b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd73:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fd7d:	83 c4 20             	add    esp,0x20
c000fd80:	52                   	push   edx
c000fd81:	52                   	push   edx
c000fd82:	68 11 e7 01 c0       	push   0xc001e711
c000fd87:	53                   	push   ebx
c000fd88:	e8 59 c3 ff ff       	call   c000c0e6 <Device::setName(char const*)>
c000fd8d:	83 c4 10             	add    esp,0x10
c000fd90:	eb 67                	jmp    c000fdf9 <CPU::detectFeatures()+0x67d>
c000fd92:	50                   	push   eax
c000fd93:	50                   	push   eax
c000fd94:	68 76 e6 01 c0       	push   0xc001e676
c000fd99:	55                   	push   ebp
c000fd9a:	e8 81 08 ff ff       	call   c0000620 <strcpy>
c000fd9f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fda9:	e8 35 04 ff ff       	call   c00001e3 <is486>
c000fdae:	83 c4 10             	add    esp,0x10
c000fdb1:	85 c0                	test   eax,eax
c000fdb3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fdb9:	74 1d                	je     c000fdd8 <CPU::detectFeatures()+0x65c>
c000fdbb:	83 c8 07             	or     eax,0x7
c000fdbe:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fdc4:	0f 20 c0             	mov    eax,cr0
c000fdc7:	83 e0 14             	and    eax,0x14
c000fdca:	83 f8 04             	cmp    eax,0x4
c000fdcd:	75 0e                	jne    c000fddd <CPU::detectFeatures()+0x661>
c000fdcf:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fdd6:	eb 21                	jmp    c000fdf9 <CPU::detectFeatures()+0x67d>
c000fdd8:	83 e0 f8             	and    eax,0xfffffff8
c000fddb:	eb e1                	jmp    c000fdbe <CPU::detectFeatures()+0x642>
c000fddd:	e8 dc 03 ff ff       	call   c00001be <hasLegacyFPU>
c000fde2:	83 e0 01             	and    eax,0x1
c000fde5:	8d 14 00             	lea    edx,[eax+eax*1]
c000fde8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fdee:	83 e0 fd             	and    eax,0xfffffffd
c000fdf1:	09 d0                	or     eax,edx
c000fdf3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fdf9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fe00:	74 0e                	je     c000fe10 <CPU::detectFeatures()+0x694>
c000fe02:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000fe07:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fe0e:	eb 20                	jmp    c000fe30 <CPU::detectFeatures()+0x6b4>
c000fe10:	e8 a9 03 ff ff       	call   c00001be <hasLegacyFPU>
c000fe15:	83 e0 01             	and    eax,0x1
c000fe18:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe1b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe21:	83 e0 fd             	and    eax,0xfffffffd
c000fe24:	09 d0                	or     eax,edx
c000fe26:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe2c:	a8 02                	test   al,0x2
c000fe2e:	75 d2                	jne    c000fe02 <CPU::detectFeatures()+0x686>
c000fe30:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fe37:	83 c4 2c             	add    esp,0x2c
c000fe3a:	5b                   	pop    ebx
c000fe3b:	5e                   	pop    esi
c000fe3c:	5f                   	pop    edi
c000fe3d:	5d                   	pop    ebp
c000fe3e:	c3                   	ret    
c000fe3f:	90                   	nop

c000fe40 <CPU::setupSMEP()>:
c000fe40:	0f 20 e0             	mov    eax,cr4
c000fe43:	0d 00 00 10 00       	or     eax,0x100000
c000fe48:	0f 22 e0             	mov    cr4,eax
c000fe4b:	c3                   	ret    

c000fe4c <CPU::setupUMIP()>:
c000fe4c:	0f 20 e0             	mov    eax,cr4
c000fe4f:	80 cc 08             	or     ah,0x8
c000fe52:	0f 22 e0             	mov    cr4,eax
c000fe55:	c3                   	ret    

c000fe56 <CPU::setupTSC()>:
c000fe56:	0f 20 e0             	mov    eax,cr4
c000fe59:	83 c8 04             	or     eax,0x4
c000fe5c:	0f 22 e0             	mov    cr4,eax
c000fe5f:	c3                   	ret    

c000fe60 <CPU::setupLargePages()>:
c000fe60:	0f 20 e0             	mov    eax,cr4
c000fe63:	83 c8 10             	or     eax,0x10
c000fe66:	0f 22 e0             	mov    cr4,eax
c000fe69:	c3                   	ret    

c000fe6a <CPU::setupPAT()>:
c000fe6a:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c000fe6f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fe76:	74 2c                	je     c000fea4 <CPU::setupPAT()+0x3a>
c000fe78:	53                   	push   ebx
c000fe79:	83 ec 10             	sub    esp,0x10
c000fe7c:	68 77 02 00 00       	push   0x277
c000fe81:	50                   	push   eax
c000fe82:	e8 37 76 ff ff       	call   c00074be <Computer::rdmsr(unsigned int)>
c000fe87:	83 e2 f8             	and    edx,0xfffffff8
c000fe8a:	83 ca 01             	or     edx,0x1
c000fe8d:	52                   	push   edx
c000fe8e:	50                   	push   eax
c000fe8f:	68 77 02 00 00       	push   0x277
c000fe94:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c000fe9a:	e8 4b 76 ff ff       	call   c00074ea <Computer::wrmsr(unsigned int, unsigned long long)>
c000fe9f:	83 c4 28             	add    esp,0x28
c000fea2:	5b                   	pop    ebx
c000fea3:	c3                   	ret    
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <CPU::setupMTRR()>:
c000fea6:	c3                   	ret    
c000fea7:	90                   	nop

c000fea8 <CPU::setupGlobalPages()>:
c000fea8:	0f 20 e0             	mov    eax,cr4
c000feab:	0c 80                	or     al,0x80
c000fead:	0f 22 e0             	mov    cr4,eax
c000feb0:	c3                   	ret    
c000feb1:	90                   	nop

c000feb2 <CPU::allowUsermodeDataAccess()>:
c000feb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000febd:	74 03                	je     c000fec2 <CPU::allowUsermodeDataAccess()+0x10>
c000febf:	0f 01 cb             	stac   
c000fec2:	c3                   	ret    
c000fec3:	90                   	nop

c000fec4 <CPU::prohibitUsermodeDataAccess()>:
c000fec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fec8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fecf:	74 03                	je     c000fed4 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fed1:	0f 01 ca             	clac   
c000fed4:	c3                   	ret    
c000fed5:	90                   	nop

c000fed6 <CPU::setupSMAP()>:
c000fed6:	0f 20 e0             	mov    eax,cr4
c000fed9:	0d 00 00 20 00       	or     eax,0x200000
c000fede:	0f 22 e0             	mov    cr4,eax
c000fee1:	eb e1                	jmp    c000fec4 <CPU::prohibitUsermodeDataAccess()>
c000fee3:	90                   	nop

c000fee4 <CPU::setupFeatures()>:
c000fee4:	53                   	push   ebx
c000fee5:	83 ec 08             	sub    esp,0x8
c000fee8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000feec:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fef3:	74 18                	je     c000ff0d <CPU::setupFeatures()+0x29>
c000fef5:	83 ec 0c             	sub    esp,0xc
c000fef8:	68 1d e7 01 c0       	push   0xc001e71d
c000fefd:	e8 1a ac ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000ff02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff05:	e8 42 ff ff ff       	call   c000fe4c <CPU::setupUMIP()>
c000ff0a:	83 c4 10             	add    esp,0x10
c000ff0d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ff14:	74 18                	je     c000ff2e <CPU::setupFeatures()+0x4a>
c000ff16:	83 ec 0c             	sub    esp,0xc
c000ff19:	68 27 e7 01 c0       	push   0xc001e727
c000ff1e:	e8 f9 ab ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000ff23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff26:	e8 2b ff ff ff       	call   c000fe56 <CPU::setupTSC()>
c000ff2b:	83 c4 10             	add    esp,0x10
c000ff2e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ff35:	74 18                	je     c000ff4f <CPU::setupFeatures()+0x6b>
c000ff37:	83 ec 0c             	sub    esp,0xc
c000ff3a:	68 30 e7 01 c0       	push   0xc001e730
c000ff3f:	e8 d8 ab ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000ff44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff47:	e8 14 ff ff ff       	call   c000fe60 <CPU::setupLargePages()>
c000ff4c:	83 c4 10             	add    esp,0x10
c000ff4f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ff56:	74 18                	je     c000ff70 <CPU::setupFeatures()+0x8c>
c000ff58:	83 ec 0c             	sub    esp,0xc
c000ff5b:	68 39 e7 01 c0       	push   0xc001e739
c000ff60:	e8 b7 ab ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000ff65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff68:	e8 3b ff ff ff       	call   c000fea8 <CPU::setupGlobalPages()>
c000ff6d:	83 c4 10             	add    esp,0x10
c000ff70:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ff77:	74 18                	je     c000ff91 <CPU::setupFeatures()+0xad>
c000ff79:	83 ec 0c             	sub    esp,0xc
c000ff7c:	68 4b e7 01 c0       	push   0xc001e74b
c000ff81:	e8 96 ab ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c000ff86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff89:	e8 dc fe ff ff       	call   c000fe6a <CPU::setupPAT()>
c000ff8e:	83 c4 10             	add    esp,0x10
c000ff91:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ff98:	74 11                	je     c000ffab <CPU::setupFeatures()+0xc7>
c000ff9a:	c7 44 24 10 54 e7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e754
c000ffa2:	83 c4 08             	add    esp,0x8
c000ffa5:	5b                   	pop    ebx
c000ffa6:	e9 71 ab ff ff       	jmp    c000ab1c <Dbg::kprintf(char const*, ...)>
c000ffab:	83 c4 08             	add    esp,0x8
c000ffae:	5b                   	pop    ebx
c000ffaf:	c3                   	ret    

c000ffb0 <CPU::open(int, int, void*)>:
c000ffb0:	57                   	push   edi
c000ffb1:	56                   	push   esi
c000ffb2:	53                   	push   ebx
c000ffb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffb7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ffbb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ffc1:	83 ec 0c             	sub    esp,0xc
c000ffc4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ffca:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ffd0:	50                   	push   eax
c000ffd1:	e8 d2 77 ff ff       	call   c00077a8 <GDT::setup()>
c000ffd6:	83 c4 0c             	add    esp,0xc
c000ffd9:	6a 00                	push   0x0
c000ffdb:	68 ef be ad de       	push   0xdeadbeef
c000ffe0:	57                   	push   edi
c000ffe1:	e8 6a 92 ff ff       	call   c0009250 <TSS::setup(unsigned long, unsigned long)>
c000ffe6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ffe9:	e8 42 92 ff ff       	call   c0009230 <TSS::flush()>
c000ffee:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fff4:	89 04 24             	mov    DWORD PTR [esp],eax
c000fff7:	e8 fa 79 ff ff       	call   c00079f6 <IDT::setup()>
c000fffc:	b8 00 04 00 00       	mov    eax,0x400
c0010001:	0f 23 f8             	mov    db7,eax
c0010004:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001000e:	e8 4a 81 ff ff       	call   c000815d <Phys::allocatePage()>
c0010013:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010019:	89 30                	mov    DWORD PTR [eax],esi
c001001b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010021:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010024:	58                   	pop    eax
c0010025:	5a                   	pop    edx
c0010026:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001002c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010030:	e8 05 a2 ff ff       	call   c000a23a <VAS::setCPUSpecific(unsigned long)>
c0010035:	c7 04 24 5e e7 01 c0 	mov    DWORD PTR [esp],0xc001e75e
c001003c:	e8 c6 00 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c0010041:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010044:	e8 33 f7 ff ff       	call   c000f77c <CPU::detectFeatures()>
c0010049:	c7 04 24 81 e7 01 c0 	mov    DWORD PTR [esp],0xc001e781
c0010050:	e8 b2 00 00 00       	call   c0010107 <KeSetBootMessage(char const*)>
c0010055:	e8 f6 57 00 00       	call   c0015850 <HalInitialise()>
c001005a:	a1 f0 09 02 c0       	mov    eax,ds:0xc00209f0
c001005f:	83 e0 10             	and    eax,0x10
c0010062:	83 f8 01             	cmp    eax,0x1
c0010065:	19 c0                	sbb    eax,eax
c0010067:	83 e0 46             	and    eax,0x46
c001006a:	83 c0 1e             	add    eax,0x1e
c001006d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010070:	e8 40 d7 ff ff       	call   c000d7b5 <setupTimer(int)>
c0010075:	83 c4 10             	add    esp,0x10
c0010078:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001007e:	f6 05 f0 09 02 c0 20 	test   BYTE PTR ds:0xc00209f0,0x20
c0010085:	74 0c                	je     c0010093 <CPU::open(int, int, void*)+0xe3>
c0010087:	83 ec 0c             	sub    esp,0xc
c001008a:	53                   	push   ebx
c001008b:	e8 54 fe ff ff       	call   c000fee4 <CPU::setupFeatures()>
c0010090:	83 c4 10             	add    esp,0x10
c0010093:	5b                   	pop    ebx
c0010094:	31 c0                	xor    eax,eax
c0010096:	5e                   	pop    esi
c0010097:	5f                   	pop    edi
c0010098:	c3                   	ret    

c0010099 <KeDisplaySplashScreen()>:
c0010099:	55                   	push   ebp
c001009a:	bd 05 00 00 00       	mov    ebp,0x5
c001009f:	57                   	push   edi
c00100a0:	bf 00 f8 01 c0       	mov    edi,0xc001f800
c00100a5:	56                   	push   esi
c00100a6:	be 0a 00 00 00       	mov    esi,0xa
c00100ab:	53                   	push   ebx
c00100ac:	31 db                	xor    ebx,ebx
c00100ae:	83 ec 0c             	sub    esp,0xc
c00100b1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00100b4:	84 c0                	test   al,al
c00100b6:	74 47                	je     c00100ff <KeDisplaySplashScreen()+0x66>
c00100b8:	80 bb 36 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe07ca],0xdb
c00100bf:	75 13                	jne    c00100d4 <KeDisplaySplashScreen()+0x3b>
c00100c1:	0f b6 93 35 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe07cb]
c00100c8:	83 e2 fe             	and    edx,0xfffffffe
c00100cb:	81 fa ba 00 00 00    	cmp    edx,0xba
c00100d1:	75 01                	jne    c00100d4 <KeDisplaySplashScreen()+0x3b>
c00100d3:	46                   	inc    esi
c00100d4:	3c 0d                	cmp    al,0xd
c00100d6:	74 24                	je     c00100fc <KeDisplaySplashScreen()+0x63>
c00100d8:	3c 0a                	cmp    al,0xa
c00100da:	75 0a                	jne    c00100e6 <KeDisplaySplashScreen()+0x4d>
c00100dc:	45                   	inc    ebp
c00100dd:	be 0a 00 00 00       	mov    esi,0xa
c00100e2:	31 db                	xor    ebx,ebx
c00100e4:	eb 16                	jmp    c00100fc <KeDisplaySplashScreen()+0x63>
c00100e6:	83 ec 0c             	sub    esp,0xc
c00100e9:	8d 14 33             	lea    edx,[ebx+esi*1]
c00100ec:	55                   	push   ebp
c00100ed:	43                   	inc    ebx
c00100ee:	52                   	push   edx
c00100ef:	6a 00                	push   0x0
c00100f1:	6a 0e                	push   0xe
c00100f3:	50                   	push   eax
c00100f4:	e8 bb 63 00 00       	call   c00164b4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00100f9:	83 c4 20             	add    esp,0x20
c00100fc:	47                   	inc    edi
c00100fd:	eb b2                	jmp    c00100b1 <KeDisplaySplashScreen()+0x18>
c00100ff:	83 c4 0c             	add    esp,0xc
c0010102:	5b                   	pop    ebx
c0010103:	5e                   	pop    esi
c0010104:	5f                   	pop    edi
c0010105:	5d                   	pop    ebp
c0010106:	c3                   	ret    

c0010107 <KeSetBootMessage(char const*)>:
c0010107:	57                   	push   edi
c0010108:	56                   	push   esi
c0010109:	53                   	push   ebx
c001010a:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010110:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010117:	68 9e 00 00 00       	push   0x9e
c001011c:	6a 00                	push   0x0
c001011e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010122:	56                   	push   esi
c0010123:	e8 c8 03 ff ff       	call   c00004f0 <memset>
c0010128:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001012b:	e8 30 04 ff ff       	call   c0000560 <strlen>
c0010130:	ba 50 00 00 00       	mov    edx,0x50
c0010135:	83 c4 10             	add    esp,0x10
c0010138:	29 c2                	sub    edx,eax
c001013a:	31 c9                	xor    ecx,ecx
c001013c:	83 e2 fe             	and    edx,0xfffffffe
c001013f:	01 f2                	add    edx,esi
c0010141:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010146:	84 c0                	test   al,al
c0010148:	74 0a                	je     c0010154 <KeSetBootMessage(char const*)+0x4d>
c001014a:	80 cc 0f             	or     ah,0xf
c001014d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010151:	41                   	inc    ecx
c0010152:	eb ed                	jmp    c0010141 <KeSetBootMessage(char const*)+0x3a>
c0010154:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010159:	b9 9e 00 00 00       	mov    ecx,0x9e
c001015e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010160:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010166:	5b                   	pop    ebx
c0010167:	5e                   	pop    esi
c0010168:	5f                   	pop    edi
c0010169:	c3                   	ret    

c001016a <EnvVarContainer::getEnv(char const*)>:
c001016a:	57                   	push   edi
c001016b:	56                   	push   esi
c001016c:	53                   	push   ebx
c001016d:	31 db                	xor    ebx,ebx
c001016f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010173:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010175:	7e 2b                	jle    c00101a2 <EnvVarContainer::getEnv(char const*)+0x38>
c0010177:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001017e:	50                   	push   eax
c001017f:	50                   	push   eax
c0010180:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010183:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010186:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001018a:	e8 71 05 ff ff       	call   c0000700 <strcmp>
c001018f:	83 c4 10             	add    esp,0x10
c0010192:	85 c0                	test   eax,eax
c0010194:	75 09                	jne    c001019f <EnvVarContainer::getEnv(char const*)+0x35>
c0010196:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010199:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001019d:	eb 05                	jmp    c00101a4 <EnvVarContainer::getEnv(char const*)+0x3a>
c001019f:	43                   	inc    ebx
c00101a0:	eb d1                	jmp    c0010173 <EnvVarContainer::getEnv(char const*)+0x9>
c00101a2:	31 c0                	xor    eax,eax
c00101a4:	5b                   	pop    ebx
c00101a5:	5e                   	pop    esi
c00101a6:	5f                   	pop    edi
c00101a7:	c3                   	ret    

c00101a8 <EnvVarContainer::setEnv(char const*, char const*)>:
c00101a8:	55                   	push   ebp
c00101a9:	57                   	push   edi
c00101aa:	56                   	push   esi
c00101ab:	53                   	push   ebx
c00101ac:	83 ec 28             	sub    esp,0x28
c00101af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00101b3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00101bb:	56                   	push   esi
c00101bc:	e8 9f 03 ff ff       	call   c0000560 <strlen>
c00101c1:	40                   	inc    eax
c00101c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00101c5:	e8 bb 7c ff ff       	call   c0007e85 <malloc>
c00101ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101d1:	e8 8a 03 ff ff       	call   c0000560 <strlen>
c00101d6:	40                   	inc    eax
c00101d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00101da:	e8 a6 7c ff ff       	call   c0007e85 <malloc>
c00101df:	89 34 24             	mov    DWORD PTR [esp],esi
c00101e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101e6:	e8 75 03 ff ff       	call   c0000560 <strlen>
c00101eb:	83 c4 0c             	add    esp,0xc
c00101ee:	40                   	inc    eax
c00101ef:	50                   	push   eax
c00101f0:	6a 00                	push   0x0
c00101f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00101f6:	e8 f5 02 ff ff       	call   c00004f0 <memset>
c00101fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00101fe:	e8 5d 03 ff ff       	call   c0000560 <strlen>
c0010203:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010207:	8d 48 01             	lea    ecx,[eax+0x1]
c001020a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001020c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001020f:	89 de                	mov    esi,ebx
c0010211:	e8 4a 03 ff ff       	call   c0000560 <strlen>
c0010216:	83 c4 0c             	add    esp,0xc
c0010219:	40                   	inc    eax
c001021a:	50                   	push   eax
c001021b:	6a 00                	push   0x0
c001021d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010221:	e8 ca 02 ff ff       	call   c00004f0 <memset>
c0010226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010229:	e8 32 03 ff ff       	call   c0000560 <strlen>
c001022e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010232:	8d 48 01             	lea    ecx,[eax+0x1]
c0010235:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010237:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001023a:	40                   	inc    eax
c001023b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001023e:	c1 e0 03             	shl    eax,0x3
c0010241:	5a                   	pop    edx
c0010242:	59                   	pop    ecx
c0010243:	50                   	push   eax
c0010244:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010247:	e8 25 7c ff ff       	call   c0007e71 <realloc>
c001024c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010250:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010253:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010256:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001025a:	b9 08 00 00 00       	mov    ecx,0x8
c001025f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010261:	83 c4 2c             	add    esp,0x2c
c0010264:	5b                   	pop    ebx
c0010265:	5e                   	pop    esi
c0010266:	5f                   	pop    edi
c0010267:	5d                   	pop    ebp
c0010268:	c3                   	ret    
c0010269:	90                   	nop

c001026a <EnvVarContainer::deleteEnv(char const*)>:
c001026a:	c3                   	ret    
c001026b:	90                   	nop

c001026c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001026c:	55                   	push   ebp
c001026d:	57                   	push   edi
c001026e:	56                   	push   esi
c001026f:	53                   	push   ebx
c0010270:	81 ec 38 01 00 00    	sub    esp,0x138
c0010276:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001027d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010284:	68 14 01 00 00       	push   0x114
c0010289:	e8 f7 7b ff ff       	call   c0007e85 <malloc>
c001028e:	83 c4 0c             	add    esp,0xc
c0010291:	89 c3                	mov    ebx,eax
c0010293:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010296:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001029d:	50                   	push   eax
c001029e:	e8 ef ad ff ff       	call   c000b092 <File::File(char const*, Process*)>
c00102a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102a6:	e8 15 b1 ff ff       	call   c000b3c0 <File::exists()>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	84 c0                	test   al,al
c00102b0:	75 31                	jne    c00102e3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00102b2:	50                   	push   eax
c00102b3:	50                   	push   eax
c00102b4:	6a 12                	push   0x12
c00102b6:	53                   	push   ebx
c00102b7:	e8 96 ae ff ff       	call   c000b152 <File::open(FileOpenMode)>
c00102bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102be:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00102c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00102c4:	e8 97 02 ff ff       	call   c0000560 <strlen>
c00102c9:	5a                   	pop    edx
c00102ca:	31 d2                	xor    edx,edx
c00102cc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102d0:	51                   	push   ecx
c00102d1:	56                   	push   esi
c00102d2:	52                   	push   edx
c00102d3:	50                   	push   eax
c00102d4:	53                   	push   ebx
c00102d5:	ff d7                	call   edi
c00102d7:	83 c4 14             	add    esp,0x14
c00102da:	53                   	push   ebx
c00102db:	e8 d0 ae ff ff       	call   c000b1b0 <File::close()>
c00102e0:	83 c4 10             	add    esp,0x10
c00102e3:	56                   	push   esi
c00102e4:	31 f6                	xor    esi,esi
c00102e6:	68 00 01 00 00       	push   0x100
c00102eb:	6a 00                	push   0x0
c00102ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00102f1:	50                   	push   eax
c00102f2:	e8 f9 01 ff ff       	call   c00004f0 <memset>
c00102f7:	5f                   	pop    edi
c00102f8:	58                   	pop    eax
c00102f9:	6a 01                	push   0x1
c00102fb:	53                   	push   ebx
c00102fc:	e8 51 ae ff ff       	call   c000b152 <File::open(FileOpenMode)>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001030c:	83 ec 0c             	sub    esp,0xc
c001030f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010311:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010315:	51                   	push   ecx
c0010316:	8d 54 24 23          	lea    edx,[esp+0x23]
c001031a:	52                   	push   edx
c001031b:	6a 00                	push   0x0
c001031d:	6a 01                	push   0x1
c001031f:	53                   	push   ebx
c0010320:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010323:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010327:	83 c4 20             	add    esp,0x20
c001032a:	3c 0d                	cmp    al,0xd
c001032c:	0f 84 09 01 00 00    	je     c001043b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010332:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010337:	0f 84 ef 00 00 00    	je     c001042c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001033d:	3c 0a                	cmp    al,0xa
c001033f:	74 13                	je     c0010354 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010341:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010346:	74 0c                	je     c0010354 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010348:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001034e:	0f 8e d8 00 00 00    	jle    c001042c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010358:	83 ec 0c             	sub    esp,0xc
c001035b:	8d 78 01             	lea    edi,[eax+0x1]
c001035e:	57                   	push   edi
c001035f:	e8 21 7b ff ff       	call   c0007e85 <malloc>
c0010364:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010368:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001036c:	8d 56 04             	lea    edx,[esi+0x4]
c001036f:	89 14 24             	mov    DWORD PTR [esp],edx
c0010372:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010376:	e8 0a 7b ff ff       	call   c0007e85 <malloc>
c001037b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001037f:	83 c4 0c             	add    esp,0xc
c0010382:	57                   	push   edi
c0010383:	6a 00                	push   0x0
c0010385:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010389:	e8 62 01 ff ff       	call   c00004f0 <memset>
c001038e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010392:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010396:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001039a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039c:	83 c4 0c             	add    esp,0xc
c001039f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103a3:	52                   	push   edx
c00103a4:	6a 00                	push   0x0
c00103a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103aa:	e8 41 01 ff ff       	call   c00004f0 <memset>
c00103af:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103b3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00103b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00103ba:	e8 a1 01 ff ff       	call   c0000560 <strlen>
c00103bf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00103c3:	89 c1                	mov    ecx,eax
c00103c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103ca:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00103cd:	40                   	inc    eax
c00103ce:	83 c4 10             	add    esp,0x10
c00103d1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103d4:	85 d2                	test   edx,edx
c00103d6:	75 0c                	jne    c00103e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00103d8:	83 ec 0c             	sub    esp,0xc
c00103db:	6a 08                	push   0x8
c00103dd:	e8 a3 7a ff ff       	call   c0007e85 <malloc>
c00103e2:	eb 0c                	jmp    c00103f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00103e4:	c1 e0 03             	shl    eax,0x3
c00103e7:	51                   	push   ecx
c00103e8:	51                   	push   ecx
c00103e9:	50                   	push   eax
c00103ea:	52                   	push   edx
c00103eb:	e8 81 7a ff ff       	call   c0007e71 <realloc>
c00103f0:	83 c4 10             	add    esp,0x10
c00103f3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103f9:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00103fc:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010400:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010404:	b9 08 00 00 00       	mov    ecx,0x8
c0010409:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001040b:	31 f6                	xor    esi,esi
c001040d:	50                   	push   eax
c001040e:	68 00 01 00 00       	push   0x100
c0010413:	6a 00                	push   0x0
c0010415:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010419:	50                   	push   eax
c001041a:	e8 d1 00 ff ff       	call   c00004f0 <memset>
c001041f:	83 c4 10             	add    esp,0x10
c0010422:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001042a:	eb 0f                	jmp    c001043b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001042c:	3c 3d                	cmp    al,0x3d
c001042e:	74 07                	je     c0010437 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010430:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010434:	46                   	inc    esi
c0010435:	eb 04                	jmp    c001043b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010437:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001043b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010440:	0f 85 c6 fe ff ff    	jne    c001030c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010446:	81 c4 2c 01 00 00    	add    esp,0x12c
c001044c:	5b                   	pop    ebx
c001044d:	5e                   	pop    esi
c001044e:	5f                   	pop    edi
c001044f:	5d                   	pop    ebp
c0010450:	c3                   	ret    
c0010451:	90                   	nop

c0010452 <EnvVarContainer::__loadSystem()>:
c0010452:	83 ec 10             	sub    esp,0x10
c0010455:	68 60 f9 01 c0       	push   0xc001f960
c001045a:	68 c4 e7 01 c0       	push   0xc001e7c4
c001045f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010463:	e8 04 fe ff ff       	call   c001026c <EnvVarContainer::loadFrom(char const*, char const*)>
c0010468:	83 c4 1c             	add    esp,0x1c
c001046b:	c3                   	ret    

c001046c <EnvVarContainer::__loadUser()>:
c001046c:	c3                   	ret    
c001046d:	90                   	nop

c001046e <EnvVarContainer::EnvVarContainer(Process*)>:
c001046e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010472:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001047c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010480:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010487:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001048e:	90                   	nop
c001048f:	c3                   	ret    

c0010490 <EnvVarContainer::~EnvVarContainer()>:
c0010490:	83 ec 0c             	sub    esp,0xc
c0010493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010497:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001049a:	85 c0                	test   eax,eax
c001049c:	74 1d                	je     c00104bb <EnvVarContainer::~EnvVarContainer()+0x2b>
c001049e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00104a4:	85 c0                	test   eax,eax
c00104a6:	74 13                	je     c00104bb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104af:	83 ec 0c             	sub    esp,0xc
c00104b2:	50                   	push   eax
c00104b3:	e8 dd 79 ff ff       	call   c0007e95 <free>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	90                   	nop
c00104bc:	83 c4 0c             	add    esp,0xc
c00104bf:	c3                   	ret    

c00104c0 <Krnl::getEnv(Process*, char const*)>:
c00104c0:	53                   	push   ebx
c00104c1:	83 ec 08             	sub    esp,0x8
c00104c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00104cc:	39 05 b0 3e 02 c0    	cmp    DWORD PTR ds:0xc0023eb0,eax
c00104d2:	74 04                	je     c00104d8 <Krnl::getEnv(Process*, char const*)+0x18>
c00104d4:	85 c0                	test   eax,eax
c00104d6:	75 0b                	jne    c00104e3 <Krnl::getEnv(Process*, char const*)+0x23>
c00104d8:	a1 50 34 02 c0       	mov    eax,ds:0xc0023450
c00104dd:	85 c0                	test   eax,eax
c00104df:	75 19                	jne    c00104fa <Krnl::getEnv(Process*, char const*)+0x3a>
c00104e1:	eb 27                	jmp    c001050a <Krnl::getEnv(Process*, char const*)+0x4a>
c00104e3:	52                   	push   edx
c00104e4:	52                   	push   edx
c00104e5:	53                   	push   ebx
c00104e6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00104ec:	e8 79 fc ff ff       	call   c001016a <EnvVarContainer::getEnv(char const*)>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	85 c0                	test   eax,eax
c00104f6:	75 28                	jne    c0010520 <Krnl::getEnv(Process*, char const*)+0x60>
c00104f8:	eb de                	jmp    c00104d8 <Krnl::getEnv(Process*, char const*)+0x18>
c00104fa:	52                   	push   edx
c00104fb:	52                   	push   edx
c00104fc:	53                   	push   ebx
c00104fd:	50                   	push   eax
c00104fe:	e8 67 fc ff ff       	call   c001016a <EnvVarContainer::getEnv(char const*)>
c0010503:	83 c4 10             	add    esp,0x10
c0010506:	85 c0                	test   eax,eax
c0010508:	75 16                	jne    c0010520 <Krnl::getEnv(Process*, char const*)+0x60>
c001050a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001050e:	a1 54 34 02 c0       	mov    eax,ds:0xc0023454
c0010513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010517:	83 c4 08             	add    esp,0x8
c001051a:	5b                   	pop    ebx
c001051b:	e9 4a fc ff ff       	jmp    c001016a <EnvVarContainer::getEnv(char const*)>
c0010520:	83 c4 08             	add    esp,0x8
c0010523:	5b                   	pop    ebx
c0010524:	c3                   	ret    

c0010525 <Krnl::setEnvSystem(char const*, char const*)>:
c0010525:	83 ec 10             	sub    esp,0x10
c0010528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010530:	ff 35 54 34 02 c0    	push   DWORD PTR ds:0xc0023454
c0010536:	e8 6d fc ff ff       	call   c00101a8 <EnvVarContainer::setEnv(char const*, char const*)>
c001053b:	83 c4 1c             	add    esp,0x1c
c001053e:	c3                   	ret    

c001053f <Krnl::setEnvUser(char const*, char const*)>:
c001053f:	a1 50 34 02 c0       	mov    eax,ds:0xc0023450
c0010544:	85 c0                	test   eax,eax
c0010546:	74 15                	je     c001055d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010548:	83 ec 10             	sub    esp,0x10
c001054b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001054f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010553:	50                   	push   eax
c0010554:	e8 4f fc ff ff       	call   c00101a8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010559:	83 c4 1c             	add    esp,0x1c
c001055c:	c3                   	ret    
c001055d:	c3                   	ret    

c001055e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001055e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010562:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010568:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001056c:	e9 37 fc ff ff       	jmp    c00101a8 <EnvVarContainer::setEnv(char const*, char const*)>

c0010571 <Krnl::deleteEnvSystem(char const*)>:
c0010571:	c3                   	ret    

c0010572 <Krnl::deleteEnvUser(char const*)>:
c0010572:	c3                   	ret    

c0010573 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010573:	c3                   	ret    

c0010574 <Krnl::newProcessEnv(Process*)>:
c0010574:	83 ec 28             	sub    esp,0x28
c0010577:	6a 0c                	push   0xc
c0010579:	e8 07 79 ff ff       	call   c0007e85 <malloc>
c001057e:	5a                   	pop    edx
c001057f:	59                   	pop    ecx
c0010580:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010584:	50                   	push   eax
c0010585:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010589:	e8 e0 fe ff ff       	call   c001046e <EnvVarContainer::EnvVarContainer(Process*)>
c001058e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010592:	83 c4 2c             	add    esp,0x2c
c0010595:	c3                   	ret    

c0010596 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010596:	57                   	push   edi
c0010597:	56                   	push   esi
c0010598:	53                   	push   ebx
c0010599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059d:	83 ec 0c             	sub    esp,0xc
c00105a0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105a6:	6a 0c                	push   0xc
c00105a8:	e8 d8 78 ff ff       	call   c0007e85 <malloc>
c00105ad:	89 c3                	mov    ebx,eax
c00105af:	58                   	pop    eax
c00105b0:	5a                   	pop    edx
c00105b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b5:	53                   	push   ebx
c00105b6:	e8 b3 fe ff ff       	call   c001046e <EnvVarContainer::EnvVarContainer(Process*)>
c00105bb:	8b 07                	mov    eax,DWORD PTR [edi]
c00105bd:	89 03                	mov    DWORD PTR [ebx],eax
c00105bf:	c1 e0 03             	shl    eax,0x3
c00105c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00105c5:	e8 bb 78 ff ff       	call   c0007e85 <malloc>
c00105ca:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00105cd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00105cf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00105d2:	c1 e1 03             	shl    ecx,0x3
c00105d5:	89 c7                	mov    edi,eax
c00105d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d9:	83 c4 10             	add    esp,0x10
c00105dc:	89 d8                	mov    eax,ebx
c00105de:	5b                   	pop    ebx
c00105df:	5e                   	pop    esi
c00105e0:	5f                   	pop    edi
c00105e1:	c3                   	ret    

c00105e2 <Krnl::loadSystemEnv()>:
c00105e2:	53                   	push   ebx
c00105e3:	83 ec 14             	sub    esp,0x14
c00105e6:	6a 0c                	push   0xc
c00105e8:	e8 98 78 ff ff       	call   c0007e85 <malloc>
c00105ed:	89 c3                	mov    ebx,eax
c00105ef:	58                   	pop    eax
c00105f0:	5a                   	pop    edx
c00105f1:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c00105f7:	53                   	push   ebx
c00105f8:	e8 71 fe ff ff       	call   c001046e <EnvVarContainer::EnvVarContainer(Process*)>
c00105fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010600:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0010606:	e8 47 fe ff ff       	call   c0010452 <EnvVarContainer::__loadSystem()>
c001060b:	83 c4 18             	add    esp,0x18
c001060e:	5b                   	pop    ebx
c001060f:	c3                   	ret    

c0010610 <Krnl::loadUserEnv()>:
c0010610:	53                   	push   ebx
c0010611:	83 ec 14             	sub    esp,0x14
c0010614:	6a 0c                	push   0xc
c0010616:	e8 6a 78 ff ff       	call   c0007e85 <malloc>
c001061b:	89 c3                	mov    ebx,eax
c001061d:	58                   	pop    eax
c001061e:	5a                   	pop    edx
c001061f:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0010625:	53                   	push   ebx
c0010626:	e8 43 fe ff ff       	call   c001046e <EnvVarContainer::EnvVarContainer(Process*)>
c001062b:	89 1d 50 34 02 c0    	mov    DWORD PTR ds:0xc0023450,ebx
c0010631:	83 c4 18             	add    esp,0x18
c0010634:	5b                   	pop    ebx
c0010635:	c3                   	ret    

c0010636 <Krnl::flushEnv()>:
c0010636:	c3                   	ret    

c0010637 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063b:	8b 15 50 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023450
c0010641:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010647:	a1 54 34 02 c0       	mov    eax,ds:0xc0023454
c001064c:	8b 00                	mov    eax,DWORD PTR [eax]
c001064e:	03 01                	add    eax,DWORD PTR [ecx]
c0010650:	85 d2                	test   edx,edx
c0010652:	74 02                	je     c0010656 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010654:	03 02                	add    eax,DWORD PTR [edx]
c0010656:	c3                   	ret    

c0010657 <Krnl::getProcessEnvPair(Process*, int)>:
c0010657:	57                   	push   edi
c0010658:	56                   	push   esi
c0010659:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c001065f:	53                   	push   ebx
c0010660:	85 f6                	test   esi,esi
c0010662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010666:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001066a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010670:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010674:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010676:	75 16                	jne    c001068e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010678:	39 c2                	cmp    edx,eax
c001067a:	7c 16                	jl     c0010692 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001067c:	8b 0d 54 34 02 c0    	mov    ecx,DWORD PTR ds:0xc0023454
c0010682:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010684:	01 c6                	add    esi,eax
c0010686:	39 d6                	cmp    esi,edx
c0010688:	7e 3c                	jle    c00106c6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001068a:	29 c2                	sub    edx,eax
c001068c:	eb 04                	jmp    c0010692 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001068e:	39 c2                	cmp    edx,eax
c0010690:	7d 05                	jge    c0010697 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010692:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010695:	eb 20                	jmp    c00106b7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010697:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010699:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001069c:	39 d1                	cmp    ecx,edx
c001069e:	7e 04                	jle    c00106a4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106a0:	29 c2                	sub    edx,eax
c00106a2:	eb 10                	jmp    c00106b4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106a4:	8b 35 54 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023454
c00106aa:	03 0e                	add    ecx,DWORD PTR [esi]
c00106ac:	39 d1                	cmp    ecx,edx
c00106ae:	7e 16                	jle    c00106c6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106b0:	29 c2                	sub    edx,eax
c00106b2:	29 fa                	sub    edx,edi
c00106b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00106b7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00106ba:	8b 02                	mov    eax,DWORD PTR [edx]
c00106bc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00106bf:	89 03                	mov    DWORD PTR [ebx],eax
c00106c1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00106c4:	eb 1d                	jmp    c00106e3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00106c6:	83 ec 0c             	sub    esp,0xc
c00106c9:	68 e6 e7 01 c0       	push   0xc001e7e6
c00106ce:	e8 18 00 00 00       	call   c00106eb <KePanic(char const*)>
c00106d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00106d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00106e0:	83 c4 10             	add    esp,0x10
c00106e3:	89 d8                	mov    eax,ebx
c00106e5:	5b                   	pop    ebx
c00106e6:	5e                   	pop    esi
c00106e7:	5f                   	pop    edi
c00106e8:	c2 04 00             	ret    0x4

c00106eb <KePanic(char const*)>:
c00106eb:	c6 05 58 34 02 c0 01 	mov    BYTE PTR ds:0xc0023458,0x1
c00106f2:	e9 45 50 00 00       	jmp    c001573c <HalPanic(char const*)>

c00106f7 <Krnl::powerThread(void*)>:
c00106f7:	83 ec 0c             	sub    esp,0xc
c00106fa:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00106ff:	48                   	dec    eax
c0010700:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0010705:	75 01                	jne    c0010708 <Krnl::powerThread(void*)+0x11>
c0010707:	fb                   	sti    
c0010708:	83 ec 0c             	sub    esp,0xc
c001070b:	c6 05 60 34 02 c0 00 	mov    BYTE PTR ds:0xc0023460,0x0
c0010712:	6a 0a                	push   0xa
c0010714:	e8 3b 35 00 00       	call   c0013c54 <sleep(unsigned int)>
c0010719:	83 05 a4 34 02 c0 0a 	add    DWORD PTR ds:0xc00234a4,0xa
c0010720:	83 c4 10             	add    esp,0x10
c0010723:	eb e3                	jmp    c0010708 <Krnl::powerThread(void*)+0x11>

c0010725 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010725:	57                   	push   edi
c0010726:	b9 09 00 00 00       	mov    ecx,0x9
c001072b:	56                   	push   esi
c001072c:	bf 80 34 02 c0       	mov    edi,0xc0023480
c0010731:	fc                   	cld    
c0010732:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010736:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010738:	5e                   	pop    esi
c0010739:	5f                   	pop    edi
c001073a:	c3                   	ret    

c001073b <Krnl::userIOReceived()>:
c001073b:	c7 05 a4 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234a4,0x0
c0010745:	c3                   	ret    

c0010746 <Krnl::handlePowerButton()>:
c0010746:	83 ec 0c             	sub    esp,0xc
c0010749:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c001074e:	83 f8 02             	cmp    eax,0x2
c0010751:	75 10                	jne    c0010763 <Krnl::handlePowerButton()+0x1d>
c0010753:	83 ec 0c             	sub    esp,0xc
c0010756:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001075c:	e8 c1 6d ff ff       	call   c0007522 <Computer::shutdown()>
c0010761:	eb 11                	jmp    c0010774 <Krnl::handlePowerButton()+0x2e>
c0010763:	48                   	dec    eax
c0010764:	75 11                	jne    c0010777 <Krnl::handlePowerButton()+0x31>
c0010766:	83 ec 0c             	sub    esp,0xc
c0010769:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001076f:	e8 de 6d ff ff       	call   c0007552 <Computer::sleep()>
c0010774:	83 c4 10             	add    esp,0x10
c0010777:	83 c4 0c             	add    esp,0xc
c001077a:	c3                   	ret    

c001077b <Krnl::handleSleepButton()>:
c001077b:	83 ec 0c             	sub    esp,0xc
c001077e:	a1 84 34 02 c0       	mov    eax,ds:0xc0023484
c0010783:	83 f8 02             	cmp    eax,0x2
c0010786:	75 10                	jne    c0010798 <Krnl::handleSleepButton()+0x1d>
c0010788:	83 ec 0c             	sub    esp,0xc
c001078b:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0010791:	e8 8c 6d ff ff       	call   c0007522 <Computer::shutdown()>
c0010796:	eb 11                	jmp    c00107a9 <Krnl::handleSleepButton()+0x2e>
c0010798:	48                   	dec    eax
c0010799:	75 11                	jne    c00107ac <Krnl::handleSleepButton()+0x31>
c001079b:	83 ec 0c             	sub    esp,0xc
c001079e:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c00107a4:	e8 a9 6d ff ff       	call   c0007552 <Computer::sleep()>
c00107a9:	83 c4 10             	add    esp,0x10
c00107ac:	83 c4 0c             	add    esp,0xc
c00107af:	c3                   	ret    

c00107b0 <Krnl::setupPowerManager()>:
c00107b0:	83 ec 0c             	sub    esp,0xc
c00107b3:	c7 05 a4 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00234a4,0x0
c00107bd:	68 f0 00 00 00       	push   0xf0
c00107c2:	c6 05 60 34 02 c0 00 	mov    BYTE PTR ds:0xc0023460,0x0
c00107c9:	6a 00                	push   0x0
c00107cb:	68 f7 06 01 c0       	push   0xc00106f7
c00107d0:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c00107d6:	e8 49 2f 00 00       	call   c0013724 <Process::createThread(void (*)(void*), void*, int)>
c00107db:	c7 05 80 34 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023480,0x2
c00107e5:	c7 05 84 34 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023484,0x1
c00107ef:	c7 05 88 34 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023488,0x3
c00107f9:	c7 05 8c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002348c,0x0
c0010803:	c7 05 98 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023498,0x0
c001080d:	c7 05 90 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023490,0x0
c0010817:	c7 05 9c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002349c,0x0
c0010821:	c7 05 94 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023494,0x3c
c001082b:	c7 05 a0 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00234a0,0x3c
c0010835:	83 c4 1c             	add    esp,0x1c
c0010838:	c3                   	ret    

c0010839 <sysCallSeekDir(regs*)>:
c0010839:	31 c0                	xor    eax,eax
c001083b:	31 d2                	xor    edx,edx
c001083d:	c3                   	ret    

c001083e <sysCallTellDir(regs*)>:
c001083e:	31 c0                	xor    eax,eax
c0010840:	31 d2                	xor    edx,edx
c0010842:	c3                   	ret    

c0010843 <sysCallVerify(regs*)>:
c0010843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010847:	31 d2                	xor    edx,edx
c0010849:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001084c:	c3                   	ret    

c001084d <sysCallGetArgc(regs*)>:
c001084d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010852:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010855:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001085b:	99                   	cdq    
c001085c:	c3                   	ret    

c001085d <sysCallTTYName(regs*)>:
c001085d:	b8 01 00 00 00       	mov    eax,0x1
c0010862:	31 d2                	xor    edx,edx
c0010864:	c3                   	ret    

c0010865 <sysFormatDisk(regs*)>:
c0010865:	56                   	push   esi
c0010866:	53                   	push   ebx
c0010867:	50                   	push   eax
c0010868:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001086c:	8b 1d d4 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ad4
c0010872:	eb 28                	jmp    c001089c <sysFormatDisk(regs*)+0x37>
c0010874:	83 ec 0c             	sub    esp,0xc
c0010877:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001087a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001087d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001087f:	51                   	push   ecx
c0010880:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010883:	51                   	push   ecx
c0010884:	50                   	push   eax
c0010885:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c001088c:	50                   	push   eax
c001088d:	53                   	push   ebx
c001088e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010891:	83 c4 20             	add    esp,0x20
c0010894:	83 f8 08             	cmp    eax,0x8
c0010897:	75 12                	jne    c00108ab <sysFormatDisk(regs*)+0x46>
c0010899:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001089c:	85 db                	test   ebx,ebx
c001089e:	75 d4                	jne    c0010874 <sysFormatDisk(regs*)+0xf>
c00108a0:	59                   	pop    ecx
c00108a1:	b8 03 00 00 00       	mov    eax,0x3
c00108a6:	31 d2                	xor    edx,edx
c00108a8:	5b                   	pop    ebx
c00108a9:	5e                   	pop    esi
c00108aa:	c3                   	ret    
c00108ab:	85 c0                	test   eax,eax
c00108ad:	74 1b                	je     c00108ca <sysFormatDisk(regs*)+0x65>
c00108af:	83 f8 09             	cmp    eax,0x9
c00108b2:	74 0b                	je     c00108bf <sysFormatDisk(regs*)+0x5a>
c00108b4:	59                   	pop    ecx
c00108b5:	b8 02 00 00 00       	mov    eax,0x2
c00108ba:	31 d2                	xor    edx,edx
c00108bc:	5b                   	pop    ebx
c00108bd:	5e                   	pop    esi
c00108be:	c3                   	ret    
c00108bf:	59                   	pop    ecx
c00108c0:	b8 01 00 00 00       	mov    eax,0x1
c00108c5:	31 d2                	xor    edx,edx
c00108c7:	5b                   	pop    ebx
c00108c8:	5e                   	pop    esi
c00108c9:	c3                   	ret    
c00108ca:	59                   	pop    ecx
c00108cb:	31 c0                	xor    eax,eax
c00108cd:	31 d2                	xor    edx,edx
c00108cf:	5b                   	pop    ebx
c00108d0:	5e                   	pop    esi
c00108d1:	c3                   	ret    

c00108d2 <sysSetDiskVolumeLabel(regs*)>:
c00108d2:	56                   	push   esi
c00108d3:	53                   	push   ebx
c00108d4:	53                   	push   ebx
c00108d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108d9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108dc:	83 f8 19             	cmp    eax,0x19
c00108df:	77 2d                	ja     c001090e <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108e1:	8b 0c 85 40 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0c0]
c00108e8:	85 c9                	test   ecx,ecx
c00108ea:	74 22                	je     c001090e <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108ec:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00108ef:	85 db                	test   ebx,ebx
c00108f1:	74 1b                	je     c001090e <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108f3:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00108f9:	85 d2                	test   edx,edx
c00108fb:	74 11                	je     c001090e <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108fd:	8b 32                	mov    esi,DWORD PTR [edx]
c00108ff:	53                   	push   ebx
c0010900:	50                   	push   eax
c0010901:	51                   	push   ecx
c0010902:	52                   	push   edx
c0010903:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010906:	83 c4 10             	add    esp,0x10
c0010909:	99                   	cdq    
c001090a:	59                   	pop    ecx
c001090b:	5b                   	pop    ebx
c001090c:	5e                   	pop    esi
c001090d:	c3                   	ret    
c001090e:	59                   	pop    ecx
c001090f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010914:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010919:	5b                   	pop    ebx
c001091a:	5e                   	pop    esi
c001091b:	c3                   	ret    

c001091c <sysGetDiskVolumeLabel(regs*)>:
c001091c:	57                   	push   edi
c001091d:	56                   	push   esi
c001091e:	53                   	push   ebx
c001091f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010923:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010926:	83 fa 19             	cmp    edx,0x19
c0010929:	77 38                	ja     c0010963 <sysGetDiskVolumeLabel(regs*)+0x47>
c001092b:	8b 0c 95 40 2f 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd0c0]
c0010932:	85 c9                	test   ecx,ecx
c0010934:	74 2d                	je     c0010963 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010936:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010939:	85 db                	test   ebx,ebx
c001093b:	74 26                	je     c0010963 <sysGetDiskVolumeLabel(regs*)+0x47>
c001093d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010940:	85 f6                	test   esi,esi
c0010942:	74 1f                	je     c0010963 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010944:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001094a:	85 c0                	test   eax,eax
c001094c:	74 15                	je     c0010963 <sysGetDiskVolumeLabel(regs*)+0x47>
c001094e:	83 ec 0c             	sub    esp,0xc
c0010951:	8b 38                	mov    edi,DWORD PTR [eax]
c0010953:	56                   	push   esi
c0010954:	53                   	push   ebx
c0010955:	52                   	push   edx
c0010956:	51                   	push   ecx
c0010957:	50                   	push   eax
c0010958:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001095b:	83 c4 20             	add    esp,0x20
c001095e:	99                   	cdq    
c001095f:	5b                   	pop    ebx
c0010960:	5e                   	pop    esi
c0010961:	5f                   	pop    edi
c0010962:	c3                   	ret    
c0010963:	5b                   	pop    ebx
c0010964:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010969:	ba ff ff ff ff       	mov    edx,0xffffffff
c001096e:	5e                   	pop    esi
c001096f:	5f                   	pop    edi
c0010970:	c3                   	ret    

c0010971 <sysShutdown(regs*)>:
c0010971:	83 ec 0c             	sub    esp,0xc
c0010974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010978:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001097b:	85 c0                	test   eax,eax
c001097d:	74 18                	je     c0010997 <sysShutdown(regs*)+0x26>
c001097f:	83 f8 01             	cmp    eax,0x1
c0010982:	74 38                	je     c00109bc <sysShutdown(regs*)+0x4b>
c0010984:	83 f8 02             	cmp    eax,0x2
c0010987:	74 24                	je     c00109ad <sysShutdown(regs*)+0x3c>
c0010989:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001098e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010993:	83 c4 0c             	add    esp,0xc
c0010996:	c3                   	ret    
c0010997:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001099c:	8b 10                	mov    edx,DWORD PTR [eax]
c001099e:	6a 00                	push   0x0
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	50                   	push   eax
c00109a5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109a8:	83 c4 10             	add    esp,0x10
c00109ab:	eb dc                	jmp    c0010989 <sysShutdown(regs*)+0x18>
c00109ad:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00109b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00109b4:	6a 00                	push   0x0
c00109b6:	6a 00                	push   0x0
c00109b8:	6a 01                	push   0x1
c00109ba:	eb e8                	jmp    c00109a4 <sysShutdown(regs*)+0x33>
c00109bc:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c00109c1:	85 c0                	test   eax,eax
c00109c3:	74 02                	je     c00109c7 <sysShutdown(regs*)+0x56>
c00109c5:	ff d0                	call   eax
c00109c7:	31 c0                	xor    eax,eax
c00109c9:	31 d2                	xor    edx,edx
c00109cb:	83 c4 0c             	add    esp,0xc
c00109ce:	c3                   	ret    

c00109cf <sysCallRealpath(regs*)>:
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109d9:	85 d2                	test   edx,edx
c00109db:	74 07                	je     c00109e4 <sysCallRealpath(regs*)+0x15>
c00109dd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109e0:	85 c0                	test   eax,eax
c00109e2:	75 0b                	jne    c00109ef <sysCallRealpath(regs*)+0x20>
c00109e4:	b8 01 00 00 00       	mov    eax,0x1
c00109e9:	31 d2                	xor    edx,edx
c00109eb:	83 c4 0c             	add    esp,0xc
c00109ee:	c3                   	ret    
c00109ef:	51                   	push   ecx
c00109f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00109f6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00109f9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00109ff:	51                   	push   ecx
c0010a00:	52                   	push   edx
c0010a01:	50                   	push   eax
c0010a02:	e8 e1 a4 ff ff       	call   c000aee8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	31 c0                	xor    eax,eax
c0010a0c:	31 d2                	xor    edx,edx
c0010a0e:	83 c4 0c             	add    esp,0xc
c0010a11:	c3                   	ret    

c0010a12 <sysCallReadDir(regs*)>:
c0010a12:	53                   	push   ebx
c0010a13:	83 ec 18             	sub    esp,0x18
c0010a16:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a1a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a1d:	83 f8 02             	cmp    eax,0x2
c0010a20:	76 61                	jbe    c0010a83 <sysCallReadDir(regs*)+0x71>
c0010a22:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a29:	77 49                	ja     c0010a74 <sysCallReadDir(regs*)+0x62>
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	50                   	push   eax
c0010a2f:	e8 3f 8d ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0010a34:	83 c4 10             	add    esp,0x10
c0010a37:	85 c0                	test   eax,eax
c0010a39:	74 39                	je     c0010a74 <sysCallReadDir(regs*)+0x62>
c0010a3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a43:	83 ec 0c             	sub    esp,0xc
c0010a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a48:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a4c:	51                   	push   ecx
c0010a4d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a50:	51                   	push   ecx
c0010a51:	6a 00                	push   0x0
c0010a53:	68 10 01 00 00       	push   0x110
c0010a58:	50                   	push   eax
c0010a59:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a5c:	83 c4 20             	add    esp,0x20
c0010a5f:	85 c0                	test   eax,eax
c0010a61:	74 29                	je     c0010a8c <sysCallReadDir(regs*)+0x7a>
c0010a63:	83 f8 07             	cmp    eax,0x7
c0010a66:	74 1b                	je     c0010a83 <sysCallReadDir(regs*)+0x71>
c0010a68:	b8 02 00 00 00       	mov    eax,0x2
c0010a6d:	31 d2                	xor    edx,edx
c0010a6f:	83 c4 18             	add    esp,0x18
c0010a72:	5b                   	pop    ebx
c0010a73:	c3                   	ret    
c0010a74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a79:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a7e:	83 c4 18             	add    esp,0x18
c0010a81:	5b                   	pop    ebx
c0010a82:	c3                   	ret    
c0010a83:	b8 01 00 00 00       	mov    eax,0x1
c0010a88:	31 d2                	xor    edx,edx
c0010a8a:	eb e3                	jmp    c0010a6f <sysCallReadDir(regs*)+0x5d>
c0010a8c:	31 c0                	xor    eax,eax
c0010a8e:	31 d2                	xor    edx,edx
c0010a90:	eb dd                	jmp    c0010a6f <sysCallReadDir(regs*)+0x5d>

c0010a92 <sysCallIsATTY(regs*)>:
c0010a92:	83 ec 0c             	sub    esp,0xc
c0010a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a99:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a9c:	83 f8 02             	cmp    eax,0x2
c0010a9f:	76 07                	jbe    c0010aa8 <sysCallIsATTY(regs*)+0x16>
c0010aa1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010aa6:	75 28                	jne    c0010ad0 <sysCallIsATTY(regs*)+0x3e>
c0010aa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010aad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ab0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010ab6:	85 c0                	test   eax,eax
c0010ab8:	74 26                	je     c0010ae0 <sysCallIsATTY(regs*)+0x4e>
c0010aba:	83 ec 0c             	sub    esp,0xc
c0010abd:	8b 10                	mov    edx,DWORD PTR [eax]
c0010abf:	50                   	push   eax
c0010ac0:	ff 12                	call   DWORD PTR [edx]
c0010ac2:	31 d2                	xor    edx,edx
c0010ac4:	25 ff 00 00 00       	and    eax,0xff
c0010ac9:	83 c4 10             	add    esp,0x10
c0010acc:	83 c4 0c             	add    esp,0xc
c0010acf:	c3                   	ret    
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	50                   	push   eax
c0010ad4:	e8 9a 8c ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0010ad9:	83 c4 10             	add    esp,0x10
c0010adc:	85 c0                	test   eax,eax
c0010ade:	75 da                	jne    c0010aba <sysCallIsATTY(regs*)+0x28>
c0010ae0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ae5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010aea:	83 c4 0c             	add    esp,0xc
c0010aed:	c3                   	ret    

c0010aee <sysCallSeek(regs*)>:
c0010aee:	53                   	push   ebx
c0010aef:	83 ec 08             	sub    esp,0x8
c0010af2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010af6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010af9:	8d 50 fd             	lea    edx,[eax-0x3]
c0010afc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010b02:	77 34                	ja     c0010b38 <sysCallSeek(regs*)+0x4a>
c0010b04:	83 ec 0c             	sub    esp,0xc
c0010b07:	50                   	push   eax
c0010b08:	e8 66 8c ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0010b0d:	83 c4 0c             	add    esp,0xc
c0010b10:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010b13:	31 db                	xor    ebx,ebx
c0010b15:	53                   	push   ebx
c0010b16:	51                   	push   ecx
c0010b17:	50                   	push   eax
c0010b18:	e8 f3 a6 ff ff       	call   c000b210 <File::seek(unsigned long long)>
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	85 c0                	test   eax,eax
c0010b22:	0f 95 c0             	setne  al
c0010b25:	31 d2                	xor    edx,edx
c0010b27:	25 ff 00 00 00       	and    eax,0xff
c0010b2c:	f7 d8                	neg    eax
c0010b2e:	83 d2 00             	adc    edx,0x0
c0010b31:	83 c4 08             	add    esp,0x8
c0010b34:	f7 da                	neg    edx
c0010b36:	5b                   	pop    ebx
c0010b37:	c3                   	ret    
c0010b38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b42:	83 c4 08             	add    esp,0x8
c0010b45:	5b                   	pop    ebx
c0010b46:	c3                   	ret    

c0010b47 <sysCallTell(regs*)>:
c0010b47:	53                   	push   ebx
c0010b48:	83 ec 08             	sub    esp,0x8
c0010b4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b4f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b52:	83 f8 02             	cmp    eax,0x2
c0010b55:	76 50                	jbe    c0010ba7 <sysCallTell(regs*)+0x60>
c0010b57:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b5c:	76 19                	jbe    c0010b77 <sysCallTell(regs*)+0x30>
c0010b5e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b61:	31 d2                	xor    edx,edx
c0010b63:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b70:	31 c0                	xor    eax,eax
c0010b72:	83 c4 08             	add    esp,0x8
c0010b75:	5b                   	pop    ebx
c0010b76:	c3                   	ret    
c0010b77:	83 ec 0c             	sub    esp,0xc
c0010b7a:	50                   	push   eax
c0010b7b:	e8 f3 8b ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0010b80:	5a                   	pop    edx
c0010b81:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b84:	59                   	pop    ecx
c0010b85:	53                   	push   ebx
c0010b86:	50                   	push   eax
c0010b87:	e8 da a6 ff ff       	call   c000b266 <File::tell(unsigned long long*)>
c0010b8c:	83 c4 10             	add    esp,0x10
c0010b8f:	85 c0                	test   eax,eax
c0010b91:	0f 95 c0             	setne  al
c0010b94:	31 d2                	xor    edx,edx
c0010b96:	25 ff 00 00 00       	and    eax,0xff
c0010b9b:	f7 d8                	neg    eax
c0010b9d:	83 d2 00             	adc    edx,0x0
c0010ba0:	83 c4 08             	add    esp,0x8
c0010ba3:	f7 da                	neg    edx
c0010ba5:	5b                   	pop    ebx
c0010ba6:	c3                   	ret    
c0010ba7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bac:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bb1:	83 c4 08             	add    esp,0x8
c0010bb4:	5b                   	pop    ebx
c0010bb5:	c3                   	ret    

c0010bb6 <sysCallSize(regs*)>:
c0010bb6:	53                   	push   ebx
c0010bb7:	83 ec 18             	sub    esp,0x18
c0010bba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bbe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bc1:	83 f8 02             	cmp    eax,0x2
c0010bc4:	76 56                	jbe    c0010c1c <sysCallSize(regs*)+0x66>
c0010bc6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bcb:	76 19                	jbe    c0010be6 <sysCallSize(regs*)+0x30>
c0010bcd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bd0:	31 d2                	xor    edx,edx
c0010bd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bdf:	31 c0                	xor    eax,eax
c0010be1:	83 c4 18             	add    esp,0x18
c0010be4:	5b                   	pop    ebx
c0010be5:	c3                   	ret    
c0010be6:	83 ec 0c             	sub    esp,0xc
c0010be9:	50                   	push   eax
c0010bea:	e8 84 8b ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0010bef:	83 c4 0c             	add    esp,0xc
c0010bf2:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010bf6:	52                   	push   edx
c0010bf7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010bfa:	52                   	push   edx
c0010bfb:	50                   	push   eax
c0010bfc:	e8 fd a7 ff ff       	call   c000b3fe <File::stat(unsigned long long*, bool*)>
c0010c01:	83 c4 10             	add    esp,0x10
c0010c04:	85 c0                	test   eax,eax
c0010c06:	0f 95 c0             	setne  al
c0010c09:	31 d2                	xor    edx,edx
c0010c0b:	25 ff 00 00 00       	and    eax,0xff
c0010c10:	f7 d8                	neg    eax
c0010c12:	83 d2 00             	adc    edx,0x0
c0010c15:	83 c4 18             	add    esp,0x18
c0010c18:	f7 da                	neg    edx
c0010c1a:	5b                   	pop    ebx
c0010c1b:	c3                   	ret    
c0010c1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c21:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c26:	83 c4 18             	add    esp,0x18
c0010c29:	5b                   	pop    ebx
c0010c2a:	c3                   	ret    

c0010c2b <sysCallSizeFromFilename(regs*)>:
c0010c2b:	57                   	push   edi
c0010c2c:	56                   	push   esi
c0010c2d:	53                   	push   ebx
c0010c2e:	83 ec 20             	sub    esp,0x20
c0010c31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c35:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c38:	83 fb 02             	cmp    ebx,0x2
c0010c3b:	0f 86 8c 00 00 00    	jbe    c0010ccd <sysCallSizeFromFilename(regs*)+0xa2>
c0010c41:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c47:	76 1b                	jbe    c0010c64 <sysCallSizeFromFilename(regs*)+0x39>
c0010c49:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c4c:	31 d2                	xor    edx,edx
c0010c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c5b:	83 c4 20             	add    esp,0x20
c0010c5e:	31 c0                	xor    eax,eax
c0010c60:	5b                   	pop    ebx
c0010c61:	5e                   	pop    esi
c0010c62:	5f                   	pop    edi
c0010c63:	c3                   	ret    
c0010c64:	83 ec 0c             	sub    esp,0xc
c0010c67:	68 14 01 00 00       	push   0x114
c0010c6c:	e8 14 72 ff ff       	call   c0007e85 <malloc>
c0010c71:	83 c4 0c             	add    esp,0xc
c0010c74:	89 c7                	mov    edi,eax
c0010c76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c7e:	50                   	push   eax
c0010c7f:	53                   	push   ebx
c0010c80:	57                   	push   edi
c0010c81:	e8 0c a4 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0010c86:	83 c4 0c             	add    esp,0xc
c0010c89:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010c8d:	50                   	push   eax
c0010c8e:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010c91:	52                   	push   edx
c0010c92:	57                   	push   edi
c0010c93:	e8 66 a7 ff ff       	call   c000b3fe <File::stat(unsigned long long*, bool*)>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	85 ff                	test   edi,edi
c0010c9d:	74 14                	je     c0010cb3 <sysCallSizeFromFilename(regs*)+0x88>
c0010c9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ca3:	8b 17                	mov    edx,DWORD PTR [edi]
c0010ca5:	83 ec 0c             	sub    esp,0xc
c0010ca8:	57                   	push   edi
c0010ca9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010cac:	83 c4 10             	add    esp,0x10
c0010caf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cb3:	85 c0                	test   eax,eax
c0010cb5:	0f 95 c0             	setne  al
c0010cb8:	31 d2                	xor    edx,edx
c0010cba:	25 ff 00 00 00       	and    eax,0xff
c0010cbf:	f7 d8                	neg    eax
c0010cc1:	83 d2 00             	adc    edx,0x0
c0010cc4:	83 c4 20             	add    esp,0x20
c0010cc7:	f7 da                	neg    edx
c0010cc9:	5b                   	pop    ebx
c0010cca:	5e                   	pop    esi
c0010ccb:	5f                   	pop    edi
c0010ccc:	c3                   	ret    
c0010ccd:	83 c4 20             	add    esp,0x20
c0010cd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cd5:	5b                   	pop    ebx
c0010cd6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cdb:	5e                   	pop    esi
c0010cdc:	5f                   	pop    edi
c0010cdd:	c3                   	ret    

c0010cde <sysCallClose(regs*)>:
c0010cde:	53                   	push   ebx
c0010cdf:	83 ec 08             	sub    esp,0x8
c0010ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ce9:	83 f8 02             	cmp    eax,0x2
c0010cec:	76 41                	jbe    c0010d2f <sysCallClose(regs*)+0x51>
c0010cee:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010cf4:	83 fa 01             	cmp    edx,0x1
c0010cf7:	76 2d                	jbe    c0010d26 <sysCallClose(regs*)+0x48>
c0010cf9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cfe:	77 2f                	ja     c0010d2f <sysCallClose(regs*)+0x51>
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	50                   	push   eax
c0010d04:	e8 6a 8a ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0010d09:	89 c3                	mov    ebx,eax
c0010d0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d0e:	e8 9d a4 ff ff       	call   c000b1b0 <File::close()>
c0010d13:	83 c4 10             	add    esp,0x10
c0010d16:	85 db                	test   ebx,ebx
c0010d18:	74 0c                	je     c0010d26 <sysCallClose(regs*)+0x48>
c0010d1a:	83 ec 0c             	sub    esp,0xc
c0010d1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d1f:	53                   	push   ebx
c0010d20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d23:	83 c4 10             	add    esp,0x10
c0010d26:	31 c0                	xor    eax,eax
c0010d28:	31 d2                	xor    edx,edx
c0010d2a:	83 c4 08             	add    esp,0x8
c0010d2d:	5b                   	pop    ebx
c0010d2e:	c3                   	ret    
c0010d2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d34:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d39:	83 c4 08             	add    esp,0x8
c0010d3c:	5b                   	pop    ebx
c0010d3d:	c3                   	ret    

c0010d3e <sysCallOpenDir(regs*)>:
c0010d3e:	56                   	push   esi
c0010d3f:	53                   	push   ebx
c0010d40:	50                   	push   eax
c0010d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d45:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d48:	85 c0                	test   eax,eax
c0010d4a:	74 5b                	je     c0010da7 <sysCallOpenDir(regs*)+0x69>
c0010d4c:	83 ec 0c             	sub    esp,0xc
c0010d4f:	68 14 01 00 00       	push   0x114
c0010d54:	e8 2c 71 ff ff       	call   c0007e85 <malloc>
c0010d59:	83 c4 0c             	add    esp,0xc
c0010d5c:	89 c6                	mov    esi,eax
c0010d5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d66:	50                   	push   eax
c0010d67:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d6a:	50                   	push   eax
c0010d6b:	56                   	push   esi
c0010d6c:	e8 4b a8 ff ff       	call   c000b5bc <Directory::Directory(char const*, Process*)>
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	85 f6                	test   esi,esi
c0010d76:	74 2f                	je     c0010da7 <sysCallOpenDir(regs*)+0x69>
c0010d78:	83 ec 0c             	sub    esp,0xc
c0010d7b:	56                   	push   esi
c0010d7c:	e8 fb a8 ff ff       	call   c000b67c <Directory::open()>
c0010d81:	83 c4 10             	add    esp,0x10
c0010d84:	85 c0                	test   eax,eax
c0010d86:	75 1f                	jne    c0010da7 <sysCallOpenDir(regs*)+0x69>
c0010d88:	83 ec 0c             	sub    esp,0xc
c0010d8b:	56                   	push   esi
c0010d8c:	e8 ed 86 ff ff       	call   c000947e <UnixFile::getFileDescriptor()>
c0010d91:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d94:	83 c4 10             	add    esp,0x10
c0010d97:	89 02                	mov    DWORD PTR [edx],eax
c0010d99:	c1 f8 1f             	sar    eax,0x1f
c0010d9c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d9f:	31 c0                	xor    eax,eax
c0010da1:	59                   	pop    ecx
c0010da2:	31 d2                	xor    edx,edx
c0010da4:	5b                   	pop    ebx
c0010da5:	5e                   	pop    esi
c0010da6:	c3                   	ret    
c0010da7:	59                   	pop    ecx
c0010da8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dad:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010db2:	5b                   	pop    ebx
c0010db3:	5e                   	pop    esi
c0010db4:	c3                   	ret    

c0010db5 <sysCallCloseDir(regs*)>:
c0010db5:	53                   	push   ebx
c0010db6:	83 ec 08             	sub    esp,0x8
c0010db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010dc0:	8d 50 fd             	lea    edx,[eax-0x3]
c0010dc3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010dc9:	77 2f                	ja     c0010dfa <sysCallCloseDir(regs*)+0x45>
c0010dcb:	83 ec 0c             	sub    esp,0xc
c0010dce:	50                   	push   eax
c0010dcf:	e8 9f 89 ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0010dd4:	89 c3                	mov    ebx,eax
c0010dd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dd9:	e8 fa a8 ff ff       	call   c000b6d8 <Directory::close()>
c0010dde:	83 c4 10             	add    esp,0x10
c0010de1:	85 db                	test   ebx,ebx
c0010de3:	74 0c                	je     c0010df1 <sysCallCloseDir(regs*)+0x3c>
c0010de5:	83 ec 0c             	sub    esp,0xc
c0010de8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dea:	53                   	push   ebx
c0010deb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dee:	83 c4 10             	add    esp,0x10
c0010df1:	31 c0                	xor    eax,eax
c0010df3:	31 d2                	xor    edx,edx
c0010df5:	83 c4 08             	add    esp,0x8
c0010df8:	5b                   	pop    ebx
c0010df9:	c3                   	ret    
c0010dfa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e04:	83 c4 08             	add    esp,0x8
c0010e07:	5b                   	pop    ebx
c0010e08:	c3                   	ret    

c0010e09 <sysCallMakeDir(regs*)>:
c0010e09:	56                   	push   esi
c0010e0a:	53                   	push   ebx
c0010e0b:	83 ec 10             	sub    esp,0x10
c0010e0e:	68 14 01 00 00       	push   0x114
c0010e13:	e8 6d 70 ff ff       	call   c0007e85 <malloc>
c0010e18:	83 c4 0c             	add    esp,0xc
c0010e1b:	89 c3                	mov    ebx,eax
c0010e1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e22:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e25:	56                   	push   esi
c0010e26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e2a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e2d:	50                   	push   eax
c0010e2e:	53                   	push   ebx
c0010e2f:	e8 88 a7 ff ff       	call   c000b5bc <Directory::Directory(char const*, Process*)>
c0010e34:	83 c4 10             	add    esp,0x10
c0010e37:	85 db                	test   ebx,ebx
c0010e39:	74 32                	je     c0010e6d <sysCallMakeDir(regs*)+0x64>
c0010e3b:	83 ec 0c             	sub    esp,0xc
c0010e3e:	53                   	push   ebx
c0010e3f:	e8 18 aa ff ff       	call   c000b85c <Directory::create()>
c0010e44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e47:	89 c6                	mov    esi,eax
c0010e49:	e8 8a a8 ff ff       	call   c000b6d8 <Directory::close()>
c0010e4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	31 c0                	xor    eax,eax
c0010e5b:	59                   	pop    ecx
c0010e5c:	85 f6                	test   esi,esi
c0010e5e:	5b                   	pop    ebx
c0010e5f:	0f 95 c0             	setne  al
c0010e62:	5e                   	pop    esi
c0010e63:	31 d2                	xor    edx,edx
c0010e65:	f7 d8                	neg    eax
c0010e67:	83 d2 00             	adc    edx,0x0
c0010e6a:	f7 da                	neg    edx
c0010e6c:	c3                   	ret    
c0010e6d:	59                   	pop    ecx
c0010e6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e78:	5b                   	pop    ebx
c0010e79:	5e                   	pop    esi
c0010e7a:	c3                   	ret    

c0010e7b <sysCallWait(regs*)>:
c0010e7b:	83 ec 10             	sub    esp,0x10
c0010e7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e82:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e85:	52                   	push   edx
c0010e86:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e89:	51                   	push   ecx
c0010e8a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e8d:	50                   	push   eax
c0010e8e:	e8 dd 2c 00 00       	call   c0013b70 <waitTask(int, int*, int)>
c0010e93:	83 c4 1c             	add    esp,0x1c
c0010e96:	99                   	cdq    
c0010e97:	c3                   	ret    

c0010e98 <sysCallNotImpl(regs*)>:
c0010e98:	83 ec 18             	sub    esp,0x18
c0010e9b:	68 00 e8 01 c0       	push   0xc001e800
c0010ea0:	e8 46 f8 ff ff       	call   c00106eb <KePanic(char const*)>
c0010ea5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010eaf:	83 c4 1c             	add    esp,0x1c
c0010eb2:	c3                   	ret    

c0010eb3 <sysPanic(regs*)>:
c0010eb3:	83 ec 18             	sub    esp,0x18
c0010eb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ebd:	50                   	push   eax
c0010ebe:	e8 28 f8 ff ff       	call   c00106eb <KePanic(char const*)>
c0010ec3:	b8 01 00 00 00       	mov    eax,0x1
c0010ec8:	31 d2                	xor    edx,edx
c0010eca:	83 c4 1c             	add    esp,0x1c
c0010ecd:	c3                   	ret    

c0010ece <sysCallRmdir(regs*)>:
c0010ece:	56                   	push   esi
c0010ecf:	53                   	push   ebx
c0010ed0:	83 ec 20             	sub    esp,0x20
c0010ed3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ed7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010eda:	68 14 01 00 00       	push   0x114
c0010edf:	e8 a1 6f ff ff       	call   c0007e85 <malloc>
c0010ee4:	83 c4 0c             	add    esp,0xc
c0010ee7:	89 c3                	mov    ebx,eax
c0010ee9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010eee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ef1:	50                   	push   eax
c0010ef2:	56                   	push   esi
c0010ef3:	53                   	push   ebx
c0010ef4:	e8 99 a1 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0010ef9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010efc:	e8 c9 a3 ff ff       	call   c000b2ca <File::unlink()>
c0010f01:	83 c4 10             	add    esp,0x10
c0010f04:	85 db                	test   ebx,ebx
c0010f06:	74 14                	je     c0010f1c <sysCallRmdir(regs*)+0x4e>
c0010f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	53                   	push   ebx
c0010f12:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f15:	83 c4 10             	add    esp,0x10
c0010f18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f1c:	85 c0                	test   eax,eax
c0010f1e:	0f 95 c0             	setne  al
c0010f21:	31 d2                	xor    edx,edx
c0010f23:	25 ff 00 00 00       	and    eax,0xff
c0010f28:	f7 d8                	neg    eax
c0010f2a:	83 d2 00             	adc    edx,0x0
c0010f2d:	83 c4 14             	add    esp,0x14
c0010f30:	f7 da                	neg    edx
c0010f32:	5b                   	pop    ebx
c0010f33:	5e                   	pop    esi
c0010f34:	c3                   	ret    

c0010f35 <sysCallUnlink(regs*)>:
c0010f35:	56                   	push   esi
c0010f36:	53                   	push   ebx
c0010f37:	83 ec 20             	sub    esp,0x20
c0010f3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f3e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f41:	68 14 01 00 00       	push   0x114
c0010f46:	e8 3a 6f ff ff       	call   c0007e85 <malloc>
c0010f4b:	83 c4 0c             	add    esp,0xc
c0010f4e:	89 c3                	mov    ebx,eax
c0010f50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f58:	50                   	push   eax
c0010f59:	56                   	push   esi
c0010f5a:	53                   	push   ebx
c0010f5b:	e8 32 a1 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0010f60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f63:	e8 62 a3 ff ff       	call   c000b2ca <File::unlink()>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	85 db                	test   ebx,ebx
c0010f6d:	74 14                	je     c0010f83 <sysCallUnlink(regs*)+0x4e>
c0010f6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f73:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f75:	83 ec 0c             	sub    esp,0xc
c0010f78:	53                   	push   ebx
c0010f79:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f83:	85 c0                	test   eax,eax
c0010f85:	0f 95 c0             	setne  al
c0010f88:	31 d2                	xor    edx,edx
c0010f8a:	25 ff 00 00 00       	and    eax,0xff
c0010f8f:	f7 d8                	neg    eax
c0010f91:	83 d2 00             	adc    edx,0x0
c0010f94:	83 c4 14             	add    esp,0x14
c0010f97:	f7 da                	neg    edx
c0010f99:	5b                   	pop    ebx
c0010f9a:	5e                   	pop    esi
c0010f9b:	c3                   	ret    

c0010f9c <sysCallGetArgv(regs*)>:
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fa3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fa6:	85 c0                	test   eax,eax
c0010fa8:	78 2c                	js     c0010fd6 <sysCallGetArgv(regs*)+0x3a>
c0010faa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010fb0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010fb3:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010fb9:	7d 1b                	jge    c0010fd6 <sysCallGetArgv(regs*)+0x3a>
c0010fbb:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010fc2:	85 c0                	test   eax,eax
c0010fc4:	74 18                	je     c0010fde <sysCallGetArgv(regs*)+0x42>
c0010fc6:	83 ec 08             	sub    esp,0x8
c0010fc9:	50                   	push   eax
c0010fca:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fcd:	50                   	push   eax
c0010fce:	e8 4d f6 fe ff       	call   c0000620 <strcpy>
c0010fd3:	83 c4 10             	add    esp,0x10
c0010fd6:	31 c0                	xor    eax,eax
c0010fd8:	31 d2                	xor    edx,edx
c0010fda:	83 c4 0c             	add    esp,0xc
c0010fdd:	c3                   	ret    
c0010fde:	b8 01 00 00 00       	mov    eax,0x1
c0010fe3:	31 d2                	xor    edx,edx
c0010fe5:	83 c4 0c             	add    esp,0xc
c0010fe8:	c3                   	ret    

c0010fe9 <sysCallUSleep(regs*)>:
c0010fe9:	83 ec 1c             	sub    esp,0x1c
c0010fec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ff0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010ff3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010ff6:	6a 00                	push   0x0
c0010ff8:	6a 64                	push   0x64
c0010ffa:	52                   	push   edx
c0010ffb:	50                   	push   eax
c0010ffc:	e8 1f b2 00 00       	call   c001c220 <__udivdi3>
c0011001:	83 c4 14             	add    esp,0x14
c0011004:	50                   	push   eax
c0011005:	e8 3a 2c 00 00       	call   c0013c44 <milliTenthSleep(unsigned int)>
c001100a:	31 c0                	xor    eax,eax
c001100c:	31 d2                	xor    edx,edx
c001100e:	83 c4 1c             	add    esp,0x1c
c0011011:	c3                   	ret    

c0011012 <sysCallSpawn(regs*)>:
c0011012:	56                   	push   esi
c0011013:	53                   	push   ebx
c0011014:	50                   	push   eax
c0011015:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011019:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001101c:	85 c0                	test   eax,eax
c001101e:	75 08                	jne    c0011028 <sysCallSpawn(regs*)+0x16>
c0011020:	59                   	pop    ecx
c0011021:	31 c0                	xor    eax,eax
c0011023:	31 d2                	xor    edx,edx
c0011025:	5b                   	pop    ebx
c0011026:	5e                   	pop    esi
c0011027:	c3                   	ret    
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	68 1f 07 00 00       	push   0x71f
c0011030:	e8 50 6e ff ff       	call   c0007e85 <malloc>
c0011035:	83 c4 10             	add    esp,0x10
c0011038:	89 c6                	mov    esi,eax
c001103a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001103d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011040:	85 c0                	test   eax,eax
c0011042:	75 33                	jne    c0011077 <sysCallSpawn(regs*)+0x65>
c0011044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011049:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001104c:	52                   	push   edx
c001104d:	50                   	push   eax
c001104e:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011051:	53                   	push   ebx
c0011052:	56                   	push   esi
c0011053:	e8 d0 22 00 00       	call   c0013328 <Process::Process(char const*, Process*, char**)>
c0011058:	83 c4 10             	add    esp,0x10
c001105b:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011062:	75 bc                	jne    c0011020 <sysCallSpawn(regs*)+0xe>
c0011064:	83 ec 0c             	sub    esp,0xc
c0011067:	56                   	push   esi
c0011068:	e8 af 27 00 00       	call   c001381c <Process::createUserThread()>
c001106d:	8b 06                	mov    eax,DWORD PTR [esi]
c001106f:	83 c4 10             	add    esp,0x10
c0011072:	99                   	cdq    
c0011073:	59                   	pop    ecx
c0011074:	5b                   	pop    ebx
c0011075:	5e                   	pop    esi
c0011076:	c3                   	ret    
c0011077:	31 c0                	xor    eax,eax
c0011079:	eb d1                	jmp    c001104c <sysCallSpawn(regs*)+0x3a>

c001107b <sysCallGetEnv(regs*)>:
c001107b:	57                   	push   edi
c001107c:	56                   	push   esi
c001107d:	53                   	push   ebx
c001107e:	83 ec 1c             	sub    esp,0x1c
c0011081:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011085:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001108a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001108d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011090:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011093:	50                   	push   eax
c0011094:	e8 9e f5 ff ff       	call   c0010637 <Krnl::getProcessTotalEnvCount(Process*)>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	39 c7                	cmp    edi,eax
c001109e:	7c 14                	jl     c00110b4 <sysCallGetEnv(regs*)+0x39>
c00110a0:	85 f6                	test   esi,esi
c00110a2:	75 0b                	jne    c00110af <sysCallGetEnv(regs*)+0x34>
c00110a4:	83 c4 10             	add    esp,0x10
c00110a7:	31 c0                	xor    eax,eax
c00110a9:	5b                   	pop    ebx
c00110aa:	31 d2                	xor    edx,edx
c00110ac:	5e                   	pop    esi
c00110ad:	5f                   	pop    edi
c00110ae:	c3                   	ret    
c00110af:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110b2:	eb f0                	jmp    c00110a4 <sysCallGetEnv(regs*)+0x29>
c00110b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00110b8:	52                   	push   edx
c00110b9:	57                   	push   edi
c00110ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110c0:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00110c3:	51                   	push   ecx
c00110c4:	50                   	push   eax
c00110c5:	e8 8d f5 ff ff       	call   c0010657 <Krnl::getProcessEnvPair(Process*, int)>
c00110ca:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110d5:	83 c4 0c             	add    esp,0xc
c00110d8:	85 db                	test   ebx,ebx
c00110da:	75 23                	jne    c00110ff <sysCallGetEnv(regs*)+0x84>
c00110dc:	83 ec 0c             	sub    esp,0xc
c00110df:	50                   	push   eax
c00110e0:	e8 7b f4 fe ff       	call   c0000560 <strlen>
c00110e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110e8:	89 c3                	mov    ebx,eax
c00110ea:	e8 71 f4 fe ff       	call   c0000560 <strlen>
c00110ef:	31 d2                	xor    edx,edx
c00110f1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	83 c4 10             	add    esp,0x10
c00110fb:	5b                   	pop    ebx
c00110fc:	5e                   	pop    esi
c00110fd:	5f                   	pop    edi
c00110fe:	c3                   	ret    
c00110ff:	83 ec 08             	sub    esp,0x8
c0011102:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011105:	50                   	push   eax
c0011106:	56                   	push   esi
c0011107:	e8 14 f5 fe ff       	call   c0000620 <strcpy>
c001110c:	58                   	pop    eax
c001110d:	5a                   	pop    edx
c001110e:	68 1a e8 01 c0       	push   0xc001e81a
c0011113:	56                   	push   esi
c0011114:	e8 c7 f6 fe ff       	call   c00007e0 <strcat>
c0011119:	59                   	pop    ecx
c001111a:	5b                   	pop    ebx
c001111b:	57                   	push   edi
c001111c:	56                   	push   esi
c001111d:	e8 be f6 fe ff       	call   c00007e0 <strcat>
c0011122:	83 c4 10             	add    esp,0x10
c0011125:	e9 7a ff ff ff       	jmp    c00110a4 <sysCallGetEnv(regs*)+0x29>

c001112a <sysSetFatAttrib(regs*)>:
c001112a:	57                   	push   edi
c001112b:	56                   	push   esi
c001112c:	53                   	push   ebx
c001112d:	83 ec 1c             	sub    esp,0x1c
c0011130:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011134:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011137:	68 14 01 00 00       	push   0x114
c001113c:	e8 44 6d ff ff       	call   c0007e85 <malloc>
c0011141:	83 c4 0c             	add    esp,0xc
c0011144:	89 c3                	mov    ebx,eax
c0011146:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001114b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001114e:	50                   	push   eax
c001114f:	57                   	push   edi
c0011150:	53                   	push   ebx
c0011151:	e8 3c 9f ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0011156:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011159:	83 c4 0c             	add    esp,0xc
c001115c:	0f b6 d4             	movzx  edx,ah
c001115f:	25 ff 00 00 00       	and    eax,0xff
c0011164:	52                   	push   edx
c0011165:	50                   	push   eax
c0011166:	53                   	push   ebx
c0011167:	e8 f8 a1 ff ff       	call   c000b364 <File::chfatattr(unsigned char, unsigned char)>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	85 db                	test   ebx,ebx
c0011171:	74 14                	je     c0011187 <sysSetFatAttrib(regs*)+0x5d>
c0011173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011177:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011179:	83 ec 0c             	sub    esp,0xc
c001117c:	53                   	push   ebx
c001117d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011180:	83 c4 10             	add    esp,0x10
c0011183:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011187:	85 c0                	test   eax,eax
c0011189:	0f 95 c0             	setne  al
c001118c:	31 d2                	xor    edx,edx
c001118e:	25 ff 00 00 00       	and    eax,0xff
c0011193:	f7 d8                	neg    eax
c0011195:	83 d2 00             	adc    edx,0x0
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	f7 da                	neg    edx
c001119d:	5b                   	pop    ebx
c001119e:	5e                   	pop    esi
c001119f:	5f                   	pop    edi
c00111a0:	c3                   	ret    

c00111a1 <sysPipe(regs*)>:
c00111a1:	57                   	push   edi
c00111a2:	56                   	push   esi
c00111a3:	53                   	push   ebx
c00111a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a8:	83 ec 0c             	sub    esp,0xc
c00111ab:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00111ae:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00111b1:	6a 20                	push   0x20
c00111b3:	e8 cd 6c ff ff       	call   c0007e85 <malloc>
c00111b8:	89 c3                	mov    ebx,eax
c00111ba:	58                   	pop    eax
c00111bb:	5a                   	pop    edx
c00111bc:	68 00 50 00 00       	push   0x5000
c00111c1:	53                   	push   ebx
c00111c2:	e8 bf 75 ff ff       	call   c0008786 <Pipe::Pipe(int)>
c00111c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111ca:	e8 af 82 ff ff       	call   c000947e <UnixFile::getFileDescriptor()>
c00111cf:	89 07                	mov    DWORD PTR [edi],eax
c00111d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111d4:	e8 a5 82 ff ff       	call   c000947e <UnixFile::getFileDescriptor()>
c00111d9:	83 c4 10             	add    esp,0x10
c00111dc:	89 06                	mov    DWORD PTR [esi],eax
c00111de:	31 d2                	xor    edx,edx
c00111e0:	5b                   	pop    ebx
c00111e1:	31 c0                	xor    eax,eax
c00111e3:	5e                   	pop    esi
c00111e4:	5f                   	pop    edi
c00111e5:	c3                   	ret    

c00111e6 <sysGetUnixTime(regs*)>:
c00111e6:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00111eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111f5:	e9 a8 a8 ff ff       	jmp    c000baa2 <Clock::timeInSecondsLocal()>

c00111fa <string_ends_with(char const*, char const*)>:
c00111fa:	57                   	push   edi
c00111fb:	56                   	push   esi
c00111fc:	53                   	push   ebx
c00111fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011201:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011205:	83 ec 0c             	sub    esp,0xc
c0011208:	53                   	push   ebx
c0011209:	e8 52 f3 fe ff       	call   c0000560 <strlen>
c001120e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011211:	89 c6                	mov    esi,eax
c0011213:	e8 48 f3 fe ff       	call   c0000560 <strlen>
c0011218:	83 c4 10             	add    esp,0x10
c001121b:	39 c6                	cmp    esi,eax
c001121d:	7d 06                	jge    c0011225 <string_ends_with(char const*, char const*)+0x2b>
c001121f:	5b                   	pop    ebx
c0011220:	31 c0                	xor    eax,eax
c0011222:	5e                   	pop    esi
c0011223:	5f                   	pop    edi
c0011224:	c3                   	ret    
c0011225:	83 ec 08             	sub    esp,0x8
c0011228:	29 c6                	sub    esi,eax
c001122a:	57                   	push   edi
c001122b:	01 f3                	add    ebx,esi
c001122d:	53                   	push   ebx
c001122e:	e8 cd f4 fe ff       	call   c0000700 <strcmp>
c0011233:	83 c4 10             	add    esp,0x10
c0011236:	85 c0                	test   eax,eax
c0011238:	5b                   	pop    ebx
c0011239:	0f 94 c0             	sete   al
c001123c:	5e                   	pop    esi
c001123d:	25 ff 00 00 00       	and    eax,0xff
c0011242:	5f                   	pop    edi
c0011243:	c3                   	ret    

c0011244 <sysCallOpen(regs*)>:
c0011244:	56                   	push   esi
c0011245:	53                   	push   ebx
c0011246:	81 ec 04 01 00 00    	sub    esp,0x104
c001124c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011253:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011256:	85 c9                	test   ecx,ecx
c0011258:	0f 84 b9 01 00 00    	je     c0011417 <sysCallOpen(regs*)+0x1d3>
c001125e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011261:	85 c0                	test   eax,eax
c0011263:	0f 84 ae 01 00 00    	je     c0011417 <sysCallOpen(regs*)+0x1d3>
c0011269:	52                   	push   edx
c001126a:	68 1c e8 01 c0       	push   0xc001e81c
c001126f:	50                   	push   eax
c0011270:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011274:	56                   	push   esi
c0011275:	e8 6e 9c ff ff       	call   c000aee8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001127a:	89 34 24             	mov    DWORD PTR [esp],esi
c001127d:	e8 de f2 fe ff       	call   c0000560 <strlen>
c0011282:	83 c4 10             	add    esp,0x10
c0011285:	48                   	dec    eax
c0011286:	74 1d                	je     c00112a5 <sysCallOpen(regs*)+0x61>
c0011288:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001128b:	eb 0f                	jmp    c001129c <sysCallOpen(regs*)+0x58>
c001128d:	80 fa 3a             	cmp    dl,0x3a
c0011290:	74 0f                	je     c00112a1 <sysCallOpen(regs*)+0x5d>
c0011292:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011296:	48                   	dec    eax
c0011297:	74 0c                	je     c00112a5 <sysCallOpen(regs*)+0x61>
c0011299:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001129c:	80 fa 2e             	cmp    dl,0x2e
c001129f:	75 ec                	jne    c001128d <sysCallOpen(regs*)+0x49>
c00112a1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00112a5:	83 ec 08             	sub    esp,0x8
c00112a8:	68 20 e8 01 c0       	push   0xc001e820
c00112ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112b0:	50                   	push   eax
c00112b1:	e8 44 ff ff ff       	call   c00111fa <string_ends_with(char const*, char const*)>
c00112b6:	83 c4 10             	add    esp,0x10
c00112b9:	85 c0                	test   eax,eax
c00112bb:	74 1d                	je     c00112da <sysCallOpen(regs*)+0x96>
c00112bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112c0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112cd:	81 c4 04 01 00 00    	add    esp,0x104
c00112d3:	31 c0                	xor    eax,eax
c00112d5:	31 d2                	xor    edx,edx
c00112d7:	5b                   	pop    ebx
c00112d8:	5e                   	pop    esi
c00112d9:	c3                   	ret    
c00112da:	83 ec 08             	sub    esp,0x8
c00112dd:	68 25 e8 01 c0       	push   0xc001e825
c00112e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112e5:	50                   	push   eax
c00112e6:	e8 0f ff ff ff       	call   c00111fa <string_ends_with(char const*, char const*)>
c00112eb:	83 c4 10             	add    esp,0x10
c00112ee:	85 c0                	test   eax,eax
c00112f0:	75 cb                	jne    c00112bd <sysCallOpen(regs*)+0x79>
c00112f2:	83 ec 08             	sub    esp,0x8
c00112f5:	68 21 e8 01 c0       	push   0xc001e821
c00112fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112fd:	50                   	push   eax
c00112fe:	e8 fd f3 fe ff       	call   c0000700 <strcmp>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	85 c0                	test   eax,eax
c0011308:	74 b3                	je     c00112bd <sysCallOpen(regs*)+0x79>
c001130a:	83 ec 08             	sub    esp,0x8
c001130d:	68 20 e8 01 c0       	push   0xc001e820
c0011312:	56                   	push   esi
c0011313:	e8 e2 fe ff ff       	call   c00111fa <string_ends_with(char const*, char const*)>
c0011318:	83 c4 10             	add    esp,0x10
c001131b:	85 c0                	test   eax,eax
c001131d:	75 9e                	jne    c00112bd <sysCallOpen(regs*)+0x79>
c001131f:	83 ec 08             	sub    esp,0x8
c0011322:	68 2a e8 01 c0       	push   0xc001e82a
c0011327:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001132a:	50                   	push   eax
c001132b:	e8 ca fe ff ff       	call   c00111fa <string_ends_with(char const*, char const*)>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	85 c0                	test   eax,eax
c0011335:	0f 85 ef 00 00 00    	jne    c001142a <sysCallOpen(regs*)+0x1e6>
c001133b:	83 ec 08             	sub    esp,0x8
c001133e:	68 2f e8 01 c0       	push   0xc001e82f
c0011343:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011346:	50                   	push   eax
c0011347:	e8 ae fe ff ff       	call   c00111fa <string_ends_with(char const*, char const*)>
c001134c:	83 c4 10             	add    esp,0x10
c001134f:	85 c0                	test   eax,eax
c0011351:	0f 85 d3 00 00 00    	jne    c001142a <sysCallOpen(regs*)+0x1e6>
c0011357:	83 ec 08             	sub    esp,0x8
c001135a:	68 2b e8 01 c0       	push   0xc001e82b
c001135f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011362:	51                   	push   ecx
c0011363:	e8 98 f3 fe ff       	call   c0000700 <strcmp>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	85 c0                	test   eax,eax
c001136d:	0f 84 b7 00 00 00    	je     c001142a <sysCallOpen(regs*)+0x1e6>
c0011373:	83 ec 08             	sub    esp,0x8
c0011376:	68 2a e8 01 c0       	push   0xc001e82a
c001137b:	56                   	push   esi
c001137c:	e8 79 fe ff ff       	call   c00111fa <string_ends_with(char const*, char const*)>
c0011381:	83 c4 10             	add    esp,0x10
c0011384:	85 c0                	test   eax,eax
c0011386:	0f 85 9e 00 00 00    	jne    c001142a <sysCallOpen(regs*)+0x1e6>
c001138c:	83 ec 0c             	sub    esp,0xc
c001138f:	68 14 01 00 00       	push   0x114
c0011394:	e8 ec 6a ff ff       	call   c0007e85 <malloc>
c0011399:	83 c4 0c             	add    esp,0xc
c001139c:	89 c6                	mov    esi,eax
c001139e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113a6:	50                   	push   eax
c00113a7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113aa:	52                   	push   edx
c00113ab:	56                   	push   esi
c00113ac:	e8 e1 9c ff ff       	call   c000b092 <File::File(char const*, Process*)>
c00113b1:	83 c4 10             	add    esp,0x10
c00113b4:	85 f6                	test   esi,esi
c00113b6:	74 5f                	je     c0011417 <sysCallOpen(regs*)+0x1d3>
c00113b8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113bb:	89 d0                	mov    eax,edx
c00113bd:	25 ff 00 00 00       	and    eax,0xff
c00113c2:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113c5:	89 d0                	mov    eax,edx
c00113c7:	83 e0 01             	and    eax,0x1
c00113ca:	f6 c2 02             	test   dl,0x2
c00113cd:	74 03                	je     c00113d2 <sysCallOpen(regs*)+0x18e>
c00113cf:	83 c8 02             	or     eax,0x2
c00113d2:	f6 c2 04             	test   dl,0x4
c00113d5:	74 03                	je     c00113da <sysCallOpen(regs*)+0x196>
c00113d7:	83 c8 04             	or     eax,0x4
c00113da:	f6 c2 08             	test   dl,0x8
c00113dd:	74 03                	je     c00113e2 <sysCallOpen(regs*)+0x19e>
c00113df:	83 c8 0a             	or     eax,0xa
c00113e2:	83 e2 10             	and    edx,0x10
c00113e5:	74 03                	je     c00113ea <sysCallOpen(regs*)+0x1a6>
c00113e7:	83 c8 12             	or     eax,0x12
c00113ea:	83 ec 08             	sub    esp,0x8
c00113ed:	50                   	push   eax
c00113ee:	56                   	push   esi
c00113ef:	e8 5e 9d ff ff       	call   c000b152 <File::open(FileOpenMode)>
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	85 c0                	test   eax,eax
c00113f9:	75 1c                	jne    c0011417 <sysCallOpen(regs*)+0x1d3>
c00113fb:	83 ec 0c             	sub    esp,0xc
c00113fe:	56                   	push   esi
c00113ff:	e8 7a 80 ff ff       	call   c000947e <UnixFile::getFileDescriptor()>
c0011404:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	89 02                	mov    DWORD PTR [edx],eax
c001140c:	c1 f8 1f             	sar    eax,0x1f
c001140f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011412:	e9 b6 fe ff ff       	jmp    c00112cd <sysCallOpen(regs*)+0x89>
c0011417:	81 c4 04 01 00 00    	add    esp,0x104
c001141d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011422:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011427:	5b                   	pop    ebx
c0011428:	5e                   	pop    esi
c0011429:	c3                   	ret    
c001142a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001142d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011433:	e9 8e fe ff ff       	jmp    c00112c6 <sysCallOpen(regs*)+0x82>

c0011438 <KeLoadSystemCalls()>:
c0011438:	c7 05 c0 34 02 c0 b2 1f 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc0011fb2
c0011442:	c7 05 c4 34 02 c0 a9 1b 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0011ba9
c001144c:	c7 05 c8 34 02 c0 98 1d 01 c0 	mov    DWORD PTR ds:0xc00234c8,0xc0011d98
c0011456:	c7 05 cc 34 02 c0 e8 1e 01 c0 	mov    DWORD PTR ds:0xc00234cc,0xc0011ee8
c0011460:	c7 05 d0 34 02 c0 30 1d 01 c0 	mov    DWORD PTR ds:0xc00234d0,0xc0011d30
c001146a:	c7 05 d4 34 02 c0 e0 1b 01 c0 	mov    DWORD PTR ds:0xc00234d4,0xc0011be0
c0011474:	c7 05 d8 34 02 c0 c1 1b 01 c0 	mov    DWORD PTR ds:0xc00234d8,0xc0011bc1
c001147e:	c7 05 dc 34 02 c0 ed 1d 01 c0 	mov    DWORD PTR ds:0xc00234dc,0xc0011ded
c0011488:	c7 05 e4 34 02 c0 de 0c 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0010cde
c0011492:	c7 05 e0 34 02 c0 44 12 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc0011244
c001149c:	c7 05 e8 34 02 c0 3e 0d 01 c0 	mov    DWORD PTR ds:0xc00234e8,0xc0010d3e
c00114a6:	c7 05 ec 34 02 c0 12 0a 01 c0 	mov    DWORD PTR ds:0xc00234ec,0xc0010a12
c00114b0:	c7 05 f0 34 02 c0 39 08 01 c0 	mov    DWORD PTR ds:0xc00234f0,0xc0010839
c00114ba:	c7 05 f4 34 02 c0 3e 08 01 c0 	mov    DWORD PTR ds:0xc00234f4,0xc001083e
c00114c4:	c7 05 f8 34 02 c0 09 0e 01 c0 	mov    DWORD PTR ds:0xc00234f8,0xc0010e09
c00114ce:	c7 05 fc 34 02 c0 b5 0d 01 c0 	mov    DWORD PTR ds:0xc00234fc,0xc0010db5
c00114d8:	c7 05 00 35 02 c0 ee 0a 01 c0 	mov    DWORD PTR ds:0xc0023500,0xc0010aee
c00114e2:	c7 05 04 35 02 c0 47 0b 01 c0 	mov    DWORD PTR ds:0xc0023504,0xc0010b47
c00114ec:	c7 05 08 35 02 c0 b6 0b 01 c0 	mov    DWORD PTR ds:0xc0023508,0xc0010bb6
c00114f6:	c7 05 0c 35 02 c0 43 08 01 c0 	mov    DWORD PTR ds:0xc002350c,0xc0010843
c0011500:	c7 05 10 35 02 c0 7b 0e 01 c0 	mov    DWORD PTR ds:0xc0023510,0xc0010e7b
c001150a:	c7 05 14 35 02 c0 98 0e 01 c0 	mov    DWORD PTR ds:0xc0023514,0xc0010e98
c0011514:	c7 05 18 35 02 c0 98 0e 01 c0 	mov    DWORD PTR ds:0xc0023518,0xc0010e98
c001151e:	c7 05 1c 35 02 c0 ce 0e 01 c0 	mov    DWORD PTR ds:0xc002351c,0xc0010ece
c0011528:	c7 05 20 35 02 c0 35 0f 01 c0 	mov    DWORD PTR ds:0xc0023520,0xc0010f35
c0011532:	c7 05 24 35 02 c0 4d 08 01 c0 	mov    DWORD PTR ds:0xc0023524,0xc001084d
c001153c:	c7 05 28 35 02 c0 9c 0f 01 c0 	mov    DWORD PTR ds:0xc0023528,0xc0010f9c
c0011546:	c7 05 2c 35 02 c0 cf 09 01 c0 	mov    DWORD PTR ds:0xc002352c,0xc00109cf
c0011550:	c7 05 30 35 02 c0 5d 08 01 c0 	mov    DWORD PTR ds:0xc0023530,0xc001085d
c001155a:	c7 05 34 35 02 c0 92 0a 01 c0 	mov    DWORD PTR ds:0xc0023534,0xc0010a92
c0011564:	c7 05 38 35 02 c0 e9 0f 01 c0 	mov    DWORD PTR ds:0xc0023538,0xc0010fe9
c001156e:	c7 05 3c 35 02 c0 2b 0c 01 c0 	mov    DWORD PTR ds:0xc002353c,0xc0010c2b
c0011578:	c7 05 40 35 02 c0 12 10 01 c0 	mov    DWORD PTR ds:0xc0023540,0xc0011012
c0011582:	c7 05 44 35 02 c0 7b 10 01 c0 	mov    DWORD PTR ds:0xc0023544,0xc001107b
c001158c:	c7 05 4c 35 02 c0 65 08 01 c0 	mov    DWORD PTR ds:0xc002354c,0xc0010865
c0011596:	c7 05 50 35 02 c0 d2 08 01 c0 	mov    DWORD PTR ds:0xc0023550,0xc00108d2
c00115a0:	c7 05 54 35 02 c0 1c 09 01 c0 	mov    DWORD PTR ds:0xc0023554,0xc001091c
c00115aa:	c7 05 58 35 02 c0 2a 11 01 c0 	mov    DWORD PTR ds:0xc0023558,0xc001112a
c00115b4:	c7 05 5c 35 02 c0 b3 0e 01 c0 	mov    DWORD PTR ds:0xc002355c,0xc0010eb3
c00115be:	c7 05 60 35 02 c0 71 09 01 c0 	mov    DWORD PTR ds:0xc0023560,0xc0010971
c00115c8:	c7 05 64 35 02 c0 a1 11 01 c0 	mov    DWORD PTR ds:0xc0023564,0xc00111a1
c00115d2:	c7 05 68 35 02 c0 e6 11 01 c0 	mov    DWORD PTR ds:0xc0023568,0xc00111e6
c00115dc:	c7 05 6c 35 02 c0 88 1c 01 c0 	mov    DWORD PTR ds:0xc002356c,0xc0011c88
c00115e6:	c7 05 70 35 02 c0 09 1e 01 c0 	mov    DWORD PTR ds:0xc0023570,0xc0011e09
c00115f0:	c7 05 74 35 02 c0 9e 1e 01 c0 	mov    DWORD PTR ds:0xc0023574,0xc0011e9e
c00115fa:	c7 05 78 35 02 c0 73 1b 01 c0 	mov    DWORD PTR ds:0xc0023578,0xc0011b73
c0011604:	c7 05 7c 35 02 c0 50 1f 01 c0 	mov    DWORD PTR ds:0xc002357c,0xc0011f50
c001160e:	c7 05 80 35 02 c0 ec 1b 01 c0 	mov    DWORD PTR ds:0xc0023580,0xc0011bec
c0011618:	c7 05 84 35 02 c0 06 1c 01 c0 	mov    DWORD PTR ds:0xc0023584,0xc0011c06
c0011622:	c3                   	ret    

c0011623 <KeSystemCall(regs*, void*)>:
c0011623:	53                   	push   ebx
c0011624:	83 ec 08             	sub    esp,0x8
c0011627:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001162b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001162e:	83 f8 7f             	cmp    eax,0x7f
c0011631:	77 16                	ja     c0011649 <KeSystemCall(regs*, void*)+0x26>
c0011633:	8b 14 85 c0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb40]
c001163a:	85 d2                	test   edx,edx
c001163c:	74 0b                	je     c0011649 <KeSystemCall(regs*, void*)+0x26>
c001163e:	83 ec 0c             	sub    esp,0xc
c0011641:	53                   	push   ebx
c0011642:	ff d2                	call   edx
c0011644:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011647:	eb 0d                	jmp    c0011656 <KeSystemCall(regs*, void*)+0x33>
c0011649:	52                   	push   edx
c001164a:	52                   	push   edx
c001164b:	50                   	push   eax
c001164c:	68 34 e8 01 c0       	push   0xc001e834
c0011651:	e8 c6 94 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0011656:	83 c4 10             	add    esp,0x10
c0011659:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001165e:	31 d2                	xor    edx,edx
c0011660:	83 c4 08             	add    esp,0x8
c0011663:	5b                   	pop    ebx
c0011664:	c3                   	ret    

c0011665 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011665:	55                   	push   ebp
c0011666:	57                   	push   edi
c0011667:	56                   	push   esi
c0011668:	53                   	push   ebx
c0011669:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001166f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011676:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011678:	8d 6e 01             	lea    ebp,[esi+0x1]
c001167b:	80 fb 40             	cmp    bl,0x40
c001167e:	75 1b                	jne    c001169b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011680:	8a 16                	mov    dl,BYTE PTR [esi]
c0011682:	84 d2                	test   dl,dl
c0011684:	0f 84 f1 00 00 00    	je     c001177b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001168a:	8d 46 01             	lea    eax,[esi+0x1]
c001168d:	80 fa 3a             	cmp    dl,0x3a
c0011690:	74 04                	je     c0011696 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011692:	89 c6                	mov    esi,eax
c0011694:	eb ea                	jmp    c0011680 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011696:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011699:	89 c6                	mov    esi,eax
c001169b:	50                   	push   eax
c001169c:	6a 40                	push   0x40
c001169e:	6a 00                	push   0x0
c00116a0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00116a4:	50                   	push   eax
c00116a5:	e8 46 ee fe ff       	call   c00004f0 <memset>
c00116aa:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00116b1:	31 c0                	xor    eax,eax
c00116b3:	83 c4 10             	add    esp,0x10
c00116b6:	8a 0f                	mov    cl,BYTE PTR [edi]
c00116b8:	84 c9                	test   cl,cl
c00116ba:	0f 84 bb 00 00 00    	je     c001177b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116c0:	3d c7 00 00 00       	cmp    eax,0xc7
c00116c5:	0f 8f b0 00 00 00    	jg     c001177b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116cb:	80 f9 0a             	cmp    cl,0xa
c00116ce:	0f 85 98 00 00 00    	jne    c001176c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00116d4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00116d9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00116dd:	a8 df                	test   al,0xdf
c00116df:	0f 94 c1             	sete   cl
c00116e2:	3c 23                	cmp    al,0x23
c00116e4:	0f 94 c2             	sete   dl
c00116e7:	08 d1                	or     cl,dl
c00116e9:	75 4a                	jne    c0011735 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116eb:	8d 50 f7             	lea    edx,[eax-0x9]
c00116ee:	80 fa 01             	cmp    dl,0x1
c00116f1:	76 42                	jbe    c0011735 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116f3:	3c 5b                	cmp    al,0x5b
c00116f5:	75 42                	jne    c0011739 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00116f7:	80 fb 40             	cmp    bl,0x40
c00116fa:	75 39                	jne    c0011735 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011703:	52                   	push   edx
c0011704:	e8 57 ee fe ff       	call   c0000560 <strlen>
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	83 f8 3f             	cmp    eax,0x3f
c001170f:	77 6a                	ja     c001177b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011711:	50                   	push   eax
c0011712:	50                   	push   eax
c0011713:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011717:	52                   	push   edx
c0011718:	8d 54 24 24          	lea    edx,[esp+0x24]
c001171c:	52                   	push   edx
c001171d:	e8 fe ee fe ff       	call   c0000620 <strcpy>
c0011722:	58                   	pop    eax
c0011723:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011727:	52                   	push   edx
c0011728:	e8 33 ee fe ff       	call   c0000560 <strlen>
c001172d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011732:	83 c4 10             	add    esp,0x10
c0011735:	31 d2                	xor    edx,edx
c0011737:	eb 3a                	jmp    c0011773 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011739:	80 fb 40             	cmp    bl,0x40
c001173c:	74 06                	je     c0011744 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001173e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011742:	eb 20                	jmp    c0011764 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011744:	50                   	push   eax
c0011745:	50                   	push   eax
c0011746:	55                   	push   ebp
c0011747:	8d 44 24 24          	lea    eax,[esp+0x24]
c001174b:	50                   	push   eax
c001174c:	e8 af ef fe ff       	call   c0000700 <strcmp>
c0011751:	83 c4 10             	add    esp,0x10
c0011754:	85 c0                	test   eax,eax
c0011756:	75 dd                	jne    c0011735 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011758:	eb e4                	jmp    c001173e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001175a:	8d 50 01             	lea    edx,[eax+0x1]
c001175d:	80 f9 3d             	cmp    cl,0x3d
c0011760:	74 1d                	je     c001177f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011762:	89 d0                	mov    eax,edx
c0011764:	8a 08                	mov    cl,BYTE PTR [eax]
c0011766:	84 c9                	test   cl,cl
c0011768:	75 f0                	jne    c001175a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001176a:	eb 0f                	jmp    c001177b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001176c:	8d 50 01             	lea    edx,[eax+0x1]
c001176f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011773:	47                   	inc    edi
c0011774:	89 d0                	mov    eax,edx
c0011776:	e9 3b ff ff ff       	jmp    c00116b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001177b:	31 c0                	xor    eax,eax
c001177d:	eb 33                	jmp    c00117b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001177f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011783:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011786:	50                   	push   eax
c0011787:	50                   	push   eax
c0011788:	8d 44 24 60          	lea    eax,[esp+0x60]
c001178c:	50                   	push   eax
c001178d:	56                   	push   esi
c001178e:	e8 6d ef fe ff       	call   c0000700 <strcmp>
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	85 c0                	test   eax,eax
c0011798:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001179c:	75 97                	jne    c0011735 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001179e:	51                   	push   ecx
c001179f:	51                   	push   ecx
c00117a0:	52                   	push   edx
c00117a1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00117a8:	e8 73 ee fe ff       	call   c0000620 <strcpy>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	b0 01                	mov    al,0x1
c00117b2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00117b8:	5b                   	pop    ebx
c00117b9:	5e                   	pop    esi
c00117ba:	5f                   	pop    edi
c00117bb:	5d                   	pop    ebp
c00117bc:	c3                   	ret    

c00117bd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00117bd:	57                   	push   edi
c00117be:	56                   	push   esi
c00117bf:	53                   	push   ebx
c00117c0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00117c6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00117cd:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00117d4:	53                   	push   ebx
c00117d5:	e8 86 ed fe ff       	call   c0000560 <strlen>
c00117da:	89 34 24             	mov    DWORD PTR [esp],esi
c00117dd:	89 c7                	mov    edi,eax
c00117df:	e8 7c ed fe ff       	call   c0000560 <strlen>
c00117e4:	83 c4 10             	add    esp,0x10
c00117e7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00117eb:	3d ff 00 00 00       	cmp    eax,0xff
c00117f0:	0f 87 d3 00 00 00    	ja     c00118c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00117f6:	57                   	push   edi
c00117f7:	57                   	push   edi
c00117f8:	56                   	push   esi
c00117f9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00117fd:	56                   	push   esi
c00117fe:	e8 1d ee fe ff       	call   c0000620 <strcpy>
c0011803:	58                   	pop    eax
c0011804:	5a                   	pop    edx
c0011805:	68 e5 ea 01 c0       	push   0xc001eae5
c001180a:	56                   	push   esi
c001180b:	e8 d0 ef fe ff       	call   c00007e0 <strcat>
c0011810:	59                   	pop    ecx
c0011811:	5f                   	pop    edi
c0011812:	53                   	push   ebx
c0011813:	56                   	push   esi
c0011814:	e8 c7 ef fe ff       	call   c00007e0 <strcat>
c0011819:	58                   	pop    eax
c001181a:	5a                   	pop    edx
c001181b:	68 48 e8 01 c0       	push   0xc001e848
c0011820:	56                   	push   esi
c0011821:	e8 ba ef fe ff       	call   c00007e0 <strcat>
c0011826:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001182d:	e8 53 66 ff ff       	call   c0007e85 <malloc>
c0011832:	83 c4 0c             	add    esp,0xc
c0011835:	89 c3                	mov    ebx,eax
c0011837:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c001183d:	56                   	push   esi
c001183e:	50                   	push   eax
c001183f:	e8 4e 98 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0011844:	83 c4 10             	add    esp,0x10
c0011847:	85 db                	test   ebx,ebx
c0011849:	74 7e                	je     c00118c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001184b:	51                   	push   ecx
c001184c:	51                   	push   ecx
c001184d:	6a 01                	push   0x1
c001184f:	53                   	push   ebx
c0011850:	e8 fd 98 ff ff       	call   c000b152 <File::open(FileOpenMode)>
c0011855:	83 c4 10             	add    esp,0x10
c0011858:	85 c0                	test   eax,eax
c001185a:	74 08                	je     c0011864 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001185c:	83 ec 0c             	sub    esp,0xc
c001185f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011861:	53                   	push   ebx
c0011862:	eb 5f                	jmp    c00118c3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011864:	52                   	push   edx
c0011865:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011869:	50                   	push   eax
c001186a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001186e:	50                   	push   eax
c001186f:	53                   	push   ebx
c0011870:	e8 89 9b ff ff       	call   c000b3fe <File::stat(unsigned long long*, bool*)>
c0011875:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	89 c1                	mov    ecx,eax
c001187e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011882:	74 31                	je     c00118b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011884:	83 ec 0c             	sub    esp,0xc
c0011887:	50                   	push   eax
c0011888:	e8 f8 65 ff ff       	call   c0007e85 <malloc>
c001188d:	89 c6                	mov    esi,eax
c001188f:	58                   	pop    eax
c0011890:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011892:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011896:	52                   	push   edx
c0011897:	56                   	push   esi
c0011898:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001189c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118a0:	53                   	push   ebx
c00118a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00118a4:	83 c4 20             	add    esp,0x20
c00118a7:	85 c0                	test   eax,eax
c00118a9:	75 0a                	jne    c00118b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00118ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118af:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00118b3:	74 18                	je     c00118cd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00118b5:	83 ec 0c             	sub    esp,0xc
c00118b8:	53                   	push   ebx
c00118b9:	e8 f2 98 ff ff       	call   c000b1b0 <File::close()>
c00118be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118c6:	83 c4 10             	add    esp,0x10
c00118c9:	31 c0                	xor    eax,eax
c00118cb:	eb 3b                	jmp    c0011908 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00118cd:	83 ec 0c             	sub    esp,0xc
c00118d0:	53                   	push   ebx
c00118d1:	e8 da 98 ff ff       	call   c000b1b0 <File::close()>
c00118d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118de:	83 c4 0c             	add    esp,0xc
c00118e1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00118e8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00118ef:	56                   	push   esi
c00118f0:	e8 70 fd ff ff       	call   c0011665 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00118f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00118f8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00118fc:	e8 94 65 ff ff       	call   c0007e95 <free>
c0011901:	83 c4 10             	add    esp,0x10
c0011904:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011908:	81 c4 20 01 00 00    	add    esp,0x120
c001190e:	5b                   	pop    ebx
c001190f:	5e                   	pop    esi
c0011910:	5f                   	pop    edi
c0011911:	c3                   	ret    

c0011912 <Reg::getLine(char*, char*, char*)>:
c0011912:	57                   	push   edi
c0011913:	56                   	push   esi
c0011914:	53                   	push   ebx
c0011915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011919:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001191d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011921:	57                   	push   edi
c0011922:	56                   	push   esi
c0011923:	53                   	push   ebx
c0011924:	68 4d e8 01 c0       	push   0xc001e84d
c0011929:	e8 8f fe ff ff       	call   c00117bd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001192e:	83 c4 10             	add    esp,0x10
c0011931:	84 c0                	test   al,al
c0011933:	75 10                	jne    c0011945 <Reg::getLine(char*, char*, char*)+0x33>
c0011935:	57                   	push   edi
c0011936:	56                   	push   esi
c0011937:	53                   	push   ebx
c0011938:	68 72 e8 01 c0       	push   0xc001e872
c001193d:	e8 7b fe ff ff       	call   c00117bd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	5b                   	pop    ebx
c0011946:	5e                   	pop    esi
c0011947:	5f                   	pop    edi
c0011948:	c3                   	ret    

c0011949 <Reg::readInt(char*, char*, int*)>:
c0011949:	55                   	push   ebp
c001194a:	57                   	push   edi
c001194b:	56                   	push   esi
c001194c:	53                   	push   ebx
c001194d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011953:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011957:	57                   	push   edi
c0011958:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001195f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011966:	e8 a7 ff ff ff       	call   c0011912 <Reg::getLine(char*, char*, char*)>
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	84 c0                	test   al,al
c0011970:	0f 84 b3 00 00 00    	je     c0011a29 <Reg::readInt(char*, char*, int*)+0xe0>
c0011976:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001197a:	80 fa 2b             	cmp    dl,0x2b
c001197d:	74 0c                	je     c001198b <Reg::readInt(char*, char*, int*)+0x42>
c001197f:	80 fa 2d             	cmp    dl,0x2d
c0011982:	75 0e                	jne    c0011992 <Reg::readInt(char*, char*, int*)+0x49>
c0011984:	ba 01 00 00 00       	mov    edx,0x1
c0011989:	eb 0b                	jmp    c0011996 <Reg::readInt(char*, char*, int*)+0x4d>
c001198b:	ba 01 00 00 00       	mov    edx,0x1
c0011990:	eb 02                	jmp    c0011994 <Reg::readInt(char*, char*, int*)+0x4b>
c0011992:	31 d2                	xor    edx,edx
c0011994:	31 c0                	xor    eax,eax
c0011996:	be 0a 00 00 00       	mov    esi,0xa
c001199b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00119a0:	75 20                	jne    c00119c2 <Reg::readInt(char*, char*, int*)+0x79>
c00119a2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00119a6:	80 f9 78             	cmp    cl,0x78
c00119a9:	75 0a                	jne    c00119b5 <Reg::readInt(char*, char*, int*)+0x6c>
c00119ab:	83 c2 02             	add    edx,0x2
c00119ae:	be 10 00 00 00       	mov    esi,0x10
c00119b3:	eb 0d                	jmp    c00119c2 <Reg::readInt(char*, char*, int*)+0x79>
c00119b5:	80 f9 62             	cmp    cl,0x62
c00119b8:	75 08                	jne    c00119c2 <Reg::readInt(char*, char*, int*)+0x79>
c00119ba:	83 c2 02             	add    edx,0x2
c00119bd:	be 02 00 00 00       	mov    esi,0x2
c00119c2:	01 d7                	add    edi,edx
c00119c4:	31 d2                	xor    edx,edx
c00119c6:	8a 1f                	mov    bl,BYTE PTR [edi]
c00119c8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00119cc:	80 fb 0d             	cmp    bl,0xd
c00119cf:	0f 94 c3             	sete   bl
c00119d2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00119d7:	0f 94 c1             	sete   cl
c00119da:	08 cb                	or     bl,cl
c00119dc:	75 3a                	jne    c0011a18 <Reg::readInt(char*, char*, int*)+0xcf>
c00119de:	0f af d6             	imul   edx,esi
c00119e1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00119e6:	83 fe 10             	cmp    esi,0x10
c00119e9:	75 26                	jne    c0011a11 <Reg::readInt(char*, char*, int*)+0xc8>
c00119eb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00119ef:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00119f2:	89 e9                	mov    ecx,ebp
c00119f4:	80 f9 05             	cmp    cl,0x5
c00119f7:	77 06                	ja     c00119ff <Reg::readInt(char*, char*, int*)+0xb6>
c00119f9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00119fd:	eb 16                	jmp    c0011a15 <Reg::readInt(char*, char*, int*)+0xcc>
c00119ff:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011a03:	83 e9 61             	sub    ecx,0x61
c0011a06:	80 f9 05             	cmp    cl,0x5
c0011a09:	77 06                	ja     c0011a11 <Reg::readInt(char*, char*, int*)+0xc8>
c0011a0b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011a0f:	eb 04                	jmp    c0011a15 <Reg::readInt(char*, char*, int*)+0xcc>
c0011a11:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011a15:	47                   	inc    edi
c0011a16:	eb ae                	jmp    c00119c6 <Reg::readInt(char*, char*, int*)+0x7d>
c0011a18:	84 c0                	test   al,al
c0011a1a:	74 02                	je     c0011a1e <Reg::readInt(char*, char*, int*)+0xd5>
c0011a1c:	f7 da                	neg    edx
c0011a1e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011a25:	89 10                	mov    DWORD PTR [eax],edx
c0011a27:	88 d8                	mov    al,bl
c0011a29:	81 c4 ec 00 00 00    	add    esp,0xec
c0011a2f:	5b                   	pop    ebx
c0011a30:	5e                   	pop    esi
c0011a31:	5f                   	pop    edi
c0011a32:	5d                   	pop    ebp
c0011a33:	c3                   	ret    

c0011a34 <Reg::readString(char*, char*, char*, int)>:
c0011a34:	57                   	push   edi
c0011a35:	56                   	push   esi
c0011a36:	53                   	push   ebx
c0011a37:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011a3d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011a44:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011a48:	57                   	push   edi
c0011a49:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011a50:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011a57:	e8 b6 fe ff ff       	call   c0011912 <Reg::getLine(char*, char*, char*)>
c0011a5c:	83 c4 10             	add    esp,0x10
c0011a5f:	89 c6                	mov    esi,eax
c0011a61:	84 c0                	test   al,al
c0011a63:	74 44                	je     c0011aa9 <Reg::readString(char*, char*, char*, int)+0x75>
c0011a65:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011a6c:	31 c0                	xor    eax,eax
c0011a6e:	4a                   	dec    edx
c0011a6f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011a72:	84 c9                	test   cl,cl
c0011a74:	74 0f                	je     c0011a85 <Reg::readString(char*, char*, char*, int)+0x51>
c0011a76:	39 c2                	cmp    edx,eax
c0011a78:	7e 0b                	jle    c0011a85 <Reg::readString(char*, char*, char*, int)+0x51>
c0011a7a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011a7d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011a82:	40                   	inc    eax
c0011a83:	eb ea                	jmp    c0011a6f <Reg::readString(char*, char*, char*, int)+0x3b>
c0011a85:	83 ec 0c             	sub    esp,0xc
c0011a88:	53                   	push   ebx
c0011a89:	e8 d2 ea fe ff       	call   c0000560 <strlen>
c0011a8e:	83 c4 10             	add    esp,0x10
c0011a91:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011a96:	75 11                	jne    c0011aa9 <Reg::readString(char*, char*, char*, int)+0x75>
c0011a98:	83 ec 0c             	sub    esp,0xc
c0011a9b:	53                   	push   ebx
c0011a9c:	e8 bf ea fe ff       	call   c0000560 <strlen>
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011aa9:	81 c4 d0 00 00 00    	add    esp,0xd0
c0011aaf:	89 f0                	mov    eax,esi
c0011ab1:	5b                   	pop    ebx
c0011ab2:	5e                   	pop    esi
c0011ab3:	5f                   	pop    edi
c0011ab4:	c3                   	ret    

c0011ab5 <Reg::readBool(char*, char*, bool*)>:
c0011ab5:	83 ec 20             	sub    esp,0x20
c0011ab8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011abc:	50                   	push   eax
c0011abd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ac1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ac5:	e8 7f fe ff ff       	call   c0011949 <Reg::readInt(char*, char*, int*)>
c0011aca:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011acf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011ad3:	0f 95 02             	setne  BYTE PTR [edx]
c0011ad6:	83 c4 2c             	add    esp,0x2c
c0011ad9:	c3                   	ret    

c0011ada <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011ada:	53                   	push   ebx
c0011adb:	83 ec 1c             	sub    esp,0x1c
c0011ade:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011ae2:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011ae6:	50                   	push   eax
c0011ae7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011aeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011aef:	e8 c1 ff ff ff       	call   c0011ab5 <Reg::readBool(char*, char*, bool*)>
c0011af4:	83 c4 10             	add    esp,0x10
c0011af7:	84 c0                	test   al,al
c0011af9:	74 04                	je     c0011aff <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011afb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011aff:	88 d8                	mov    al,bl
c0011b01:	83 c4 18             	add    esp,0x18
c0011b04:	5b                   	pop    ebx
c0011b05:	c3                   	ret    

c0011b06 <Reg::readIntWithDefault(char*, char*, int)>:
c0011b06:	53                   	push   ebx
c0011b07:	83 ec 1c             	sub    esp,0x1c
c0011b0a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011b12:	50                   	push   eax
c0011b13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b1b:	e8 29 fe ff ff       	call   c0011949 <Reg::readInt(char*, char*, int*)>
c0011b20:	83 c4 10             	add    esp,0x10
c0011b23:	84 c0                	test   al,al
c0011b25:	74 04                	je     c0011b2b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011b27:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b2b:	89 d8                	mov    eax,ebx
c0011b2d:	83 c4 18             	add    esp,0x18
c0011b30:	5b                   	pop    ebx
c0011b31:	c3                   	ret    

c0011b32 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011b32:	57                   	push   edi
c0011b33:	56                   	push   esi
c0011b34:	56                   	push   esi
c0011b35:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b39:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011b3d:	56                   	push   esi
c0011b3e:	57                   	push   edi
c0011b3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b47:	e8 e8 fe ff ff       	call   c0011a34 <Reg::readString(char*, char*, char*, int)>
c0011b4c:	83 c4 10             	add    esp,0x10
c0011b4f:	84 c0                	test   al,al
c0011b51:	75 1a                	jne    c0011b6d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011b53:	51                   	push   ecx
c0011b54:	56                   	push   esi
c0011b55:	6a 00                	push   0x0
c0011b57:	57                   	push   edi
c0011b58:	e8 93 e9 fe ff       	call   c00004f0 <memset>
c0011b5d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011b60:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b66:	83 c4 10             	add    esp,0x10
c0011b69:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b6d:	89 f8                	mov    eax,edi
c0011b6f:	5a                   	pop    edx
c0011b70:	5e                   	pop    esi
c0011b71:	5f                   	pop    edi
c0011b72:	c3                   	ret    

c0011b73 <SysEject(regs*)>:
c0011b73:	83 ec 0c             	sub    esp,0xc
c0011b76:	83 ca ff             	or     edx,0xffffffff
c0011b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b7d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011b80:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b85:	83 e9 41             	sub    ecx,0x41
c0011b88:	83 f9 19             	cmp    ecx,0x19
c0011b8b:	77 18                	ja     c0011ba5 <SysEject(regs*)+0x32>
c0011b8d:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c0011b94:	85 c9                	test   ecx,ecx
c0011b96:	74 0d                	je     c0011ba5 <SysEject(regs*)+0x32>
c0011b98:	83 ec 0c             	sub    esp,0xc
c0011b9b:	51                   	push   ecx
c0011b9c:	e8 f9 b5 ff ff       	call   c000d19a <LogicalDisk::eject()>
c0011ba1:	83 c4 10             	add    esp,0x10
c0011ba4:	99                   	cdq    
c0011ba5:	83 c4 0c             	add    esp,0xc
c0011ba8:	c3                   	ret    

c0011ba9 <SysExit(regs*)>:
c0011ba9:	83 ec 18             	sub    esp,0x18
c0011bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bb0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bb3:	e8 b0 26 00 00       	call   c0014268 <terminateTask(int)>
c0011bb8:	83 c8 ff             	or     eax,0xffffffff
c0011bbb:	83 c4 1c             	add    esp,0x1c
c0011bbe:	89 c2                	mov    edx,eax
c0011bc0:	c3                   	ret    

c0011bc1 <SysGetCwd(regs*)>:
c0011bc1:	83 ec 10             	sub    esp,0x10
c0011bc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bc8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011bcb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bd3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011bd6:	e8 b9 92 ff ff       	call   c000ae94 <Fs::getcwd(Process*, char*, int)>
c0011bdb:	83 c4 1c             	add    esp,0x1c
c0011bde:	99                   	cdq    
c0011bdf:	c3                   	ret    

c0011be0 <SysGetPID(regs*)>:
c0011be0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bea:	99                   	cdq    
c0011beb:	c3                   	ret    

c0011bec <SysGetRAMData(regs*)>:
c0011bec:	8b 0d 08 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a08
c0011bf2:	69 05 04 0a 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020a04,0xc8
c0011bfc:	99                   	cdq    
c0011bfd:	f7 f9                	idiv   ecx
c0011bff:	c1 e0 18             	shl    eax,0x18
c0011c02:	09 c8                	or     eax,ecx
c0011c04:	99                   	cdq    
c0011c05:	c3                   	ret    

c0011c06 <SysGetVGAPtr(regs*)>:
c0011c06:	55                   	push   ebp
c0011c07:	57                   	push   edi
c0011c08:	56                   	push   esi
c0011c09:	53                   	push   ebx
c0011c0a:	83 ec 18             	sub    esp,0x18
c0011c0d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011c11:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011c14:	e8 4f 21 00 00       	call   c0013d68 <Thr::processFromPID(int)>
c0011c19:	83 c4 10             	add    esp,0x10
c0011c1c:	89 c1                	mov    ecx,eax
c0011c1e:	b8 01 00 00 00       	mov    eax,0x1
c0011c23:	85 c9                	test   ecx,ecx
c0011c25:	74 57                	je     c0011c7e <SysGetVGAPtr(regs*)+0x78>
c0011c27:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011c2d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011c31:	74 0c                	je     c0011c3f <SysGetVGAPtr(regs*)+0x39>
c0011c33:	83 ec 0c             	sub    esp,0xc
c0011c36:	55                   	push   ebp
c0011c37:	e8 83 6e ff ff       	call   c0008abf <setActiveTerminal(VgaText*)>
c0011c3c:	83 c4 10             	add    esp,0x10
c0011c3f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011c42:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c45:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011c4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011c4c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011c4f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c52:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011c58:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c5b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011c5e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011c64:	50                   	push   eax
c0011c65:	50                   	push   eax
c0011c66:	68 8d e8 01 c0       	push   0xc001e88d
c0011c6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c6e:	05 a8 0f 00 00       	add    eax,0xfa8
c0011c73:	50                   	push   eax
c0011c74:	e8 a7 e9 fe ff       	call   c0000620 <strcpy>
c0011c79:	83 c4 10             	add    esp,0x10
c0011c7c:	31 c0                	xor    eax,eax
c0011c7e:	83 c4 0c             	add    esp,0xc
c0011c81:	31 d2                	xor    edx,edx
c0011c83:	5b                   	pop    ebx
c0011c84:	5e                   	pop    esi
c0011c85:	5f                   	pop    edi
c0011c86:	5d                   	pop    ebp
c0011c87:	c3                   	ret    

c0011c88 <SysLoadDLL(regs*)>:
c0011c88:	56                   	push   esi
c0011c89:	53                   	push   ebx
c0011c8a:	31 d2                	xor    edx,edx
c0011c8c:	51                   	push   ecx
c0011c8d:	b8 01 00 00 00       	mov    eax,0x1
c0011c92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c96:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011c9a:	0f 84 8c 00 00 00    	je     c0011d2c <SysLoadDLL(regs*)+0xa4>
c0011ca0:	83 ec 0c             	sub    esp,0xc
c0011ca3:	68 14 01 00 00       	push   0x114
c0011ca8:	e8 d8 61 ff ff       	call   c0007e85 <malloc>
c0011cad:	83 c4 0c             	add    esp,0xc
c0011cb0:	89 c3                	mov    ebx,eax
c0011cb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cb7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011cba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011cbd:	53                   	push   ebx
c0011cbe:	e8 cf 93 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0011cc3:	83 c4 10             	add    esp,0x10
c0011cc6:	31 d2                	xor    edx,edx
c0011cc8:	b8 02 00 00 00       	mov    eax,0x2
c0011ccd:	85 db                	test   ebx,ebx
c0011ccf:	74 5b                	je     c0011d2c <SysLoadDLL(regs*)+0xa4>
c0011cd1:	83 ec 0c             	sub    esp,0xc
c0011cd4:	53                   	push   ebx
c0011cd5:	e8 e6 96 ff ff       	call   c000b3c0 <File::exists()>
c0011cda:	83 c4 10             	add    esp,0x10
c0011cdd:	84 c0                	test   al,al
c0011cdf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ce1:	75 11                	jne    c0011cf4 <SysLoadDLL(regs*)+0x6c>
c0011ce3:	83 ec 0c             	sub    esp,0xc
c0011ce6:	53                   	push   ebx
c0011ce7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cea:	83 c4 10             	add    esp,0x10
c0011ced:	b8 03 00 00 00       	mov    eax,0x3
c0011cf2:	eb 36                	jmp    c0011d2a <SysLoadDLL(regs*)+0xa2>
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	53                   	push   ebx
c0011cf8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cfb:	58                   	pop    eax
c0011cfc:	5a                   	pop    edx
c0011cfd:	6a 00                	push   0x0
c0011cff:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011d02:	e8 4b 12 00 00       	call   c0012f52 <Thr::loadDLL(char const*, bool)>
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	89 c1                	mov    ecx,eax
c0011d0c:	31 d2                	xor    edx,edx
c0011d0e:	b8 04 00 00 00       	mov    eax,0x4
c0011d13:	85 c9                	test   ecx,ecx
c0011d15:	74 15                	je     c0011d2c <SysLoadDLL(regs*)+0xa4>
c0011d17:	53                   	push   ebx
c0011d18:	53                   	push   ebx
c0011d19:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0011d1f:	51                   	push   ecx
c0011d20:	e8 5e 14 00 00       	call   c0013183 <Thr::executeDLL(unsigned long, void*)>
c0011d25:	83 c4 10             	add    esp,0x10
c0011d28:	31 c0                	xor    eax,eax
c0011d2a:	31 d2                	xor    edx,edx
c0011d2c:	59                   	pop    ecx
c0011d2d:	5b                   	pop    ebx
c0011d2e:	5e                   	pop    esi
c0011d2f:	c3                   	ret    

c0011d30 <SysRead(regs*)>:
c0011d30:	57                   	push   edi
c0011d31:	56                   	push   esi
c0011d32:	53                   	push   ebx
c0011d33:	83 ec 10             	sub    esp,0x10
c0011d36:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d3d:	83 f8 02             	cmp    eax,0x2
c0011d40:	77 10                	ja     c0011d52 <SysRead(regs*)+0x22>
c0011d42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d4a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d50:	eb 0e                	jmp    c0011d60 <SysRead(regs*)+0x30>
c0011d52:	83 ec 0c             	sub    esp,0xc
c0011d55:	50                   	push   eax
c0011d56:	e8 18 7a ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0011d5b:	83 c4 10             	add    esp,0x10
c0011d5e:	89 c1                	mov    ecx,eax
c0011d60:	83 c8 ff             	or     eax,0xffffffff
c0011d63:	85 c9                	test   ecx,ecx
c0011d65:	89 c2                	mov    edx,eax
c0011d67:	74 28                	je     c0011d91 <SysRead(regs*)+0x61>
c0011d69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d71:	31 ff                	xor    edi,edi
c0011d73:	83 ec 0c             	sub    esp,0xc
c0011d76:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d78:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d7c:	52                   	push   edx
c0011d7d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d80:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d83:	57                   	push   edi
c0011d84:	56                   	push   esi
c0011d85:	51                   	push   ecx
c0011d86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011d89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d8d:	83 c4 20             	add    esp,0x20
c0011d90:	99                   	cdq    
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	5b                   	pop    ebx
c0011d95:	5e                   	pop    esi
c0011d96:	5f                   	pop    edi
c0011d97:	c3                   	ret    

c0011d98 <SysSbrk(regs*)>:
c0011d98:	56                   	push   esi
c0011d99:	53                   	push   ebx
c0011d9a:	50                   	push   eax
c0011d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011da0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011da4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011da7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011daa:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011db0:	85 db                	test   ebx,ebx
c0011db2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011db5:	74 02                	je     c0011db9 <SysSbrk(regs*)+0x21>
c0011db7:	79 06                	jns    c0011dbf <SysSbrk(regs*)+0x27>
c0011db9:	89 f0                	mov    eax,esi
c0011dbb:	31 d2                	xor    edx,edx
c0011dbd:	eb 2a                	jmp    c0011de9 <SysSbrk(regs*)+0x51>
c0011dbf:	83 c8 ff             	or     eax,0xffffffff
c0011dc2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011dc8:	89 c2                	mov    edx,eax
c0011dca:	77 1d                	ja     c0011de9 <SysSbrk(regs*)+0x51>
c0011dcc:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011dd2:	50                   	push   eax
c0011dd3:	c1 ea 0c             	shr    edx,0xc
c0011dd6:	68 07 0c 00 00       	push   0xc07
c0011ddb:	52                   	push   edx
c0011ddc:	51                   	push   ecx
c0011ddd:	e8 80 82 ff ff       	call   c000a062 <VAS::allocatePages(int, int)>
c0011de2:	89 f0                	mov    eax,esi
c0011de4:	31 d2                	xor    edx,edx
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	59                   	pop    ecx
c0011dea:	5b                   	pop    ebx
c0011deb:	5e                   	pop    esi
c0011dec:	c3                   	ret    

c0011ded <SysSetCwd(regs*)>:
c0011ded:	83 ec 14             	sub    esp,0x14
c0011df0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011df4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011df7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dfc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011dff:	e8 5b 96 ff ff       	call   c000b45f <Fs::setcwd(Process*, char*)>
c0011e04:	83 c4 1c             	add    esp,0x1c
c0011e07:	99                   	cdq    
c0011e08:	c3                   	ret    

c0011e09 <SysSetTime(regs*)>:
c0011e09:	55                   	push   ebp
c0011e0a:	31 c9                	xor    ecx,ecx
c0011e0c:	57                   	push   edi
c0011e0d:	bd 0c 00 00 00       	mov    ebp,0xc
c0011e12:	56                   	push   esi
c0011e13:	53                   	push   ebx
c0011e14:	31 db                	xor    ebx,ebx
c0011e16:	83 ec 10             	sub    esp,0x10
c0011e19:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011e1d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011e20:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011e23:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011e26:	89 c2                	mov    edx,eax
c0011e28:	66 81 ef 6c 07       	sub    di,0x76c
c0011e2d:	83 e2 1f             	and    edx,0x1f
c0011e30:	c1 e7 10             	shl    edi,0x10
c0011e33:	42                   	inc    edx
c0011e34:	c1 e8 05             	shr    eax,0x5
c0011e37:	88 d1                	mov    cl,dl
c0011e39:	31 d2                	xor    edx,edx
c0011e3b:	f7 f5                	div    ebp
c0011e3d:	89 dd                	mov    ebp,ebx
c0011e3f:	88 d5                	mov    ch,dl
c0011e41:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011e47:	0f b7 c1             	movzx  eax,cx
c0011e4a:	31 d2                	xor    edx,edx
c0011e4c:	09 f8                	or     eax,edi
c0011e4e:	bf 3c 00 00 00       	mov    edi,0x3c
c0011e53:	89 c1                	mov    ecx,eax
c0011e55:	89 f0                	mov    eax,esi
c0011e57:	f7 f7                	div    edi
c0011e59:	c1 e2 10             	shl    edx,0x10
c0011e5c:	09 d5                	or     ebp,edx
c0011e5e:	31 d2                	xor    edx,edx
c0011e60:	89 eb                	mov    ebx,ebp
c0011e62:	f7 f7                	div    edi
c0011e64:	bf 10 0e 00 00       	mov    edi,0xe10
c0011e69:	88 d7                	mov    bh,dl
c0011e6b:	89 f0                	mov    eax,esi
c0011e6d:	31 d2                	xor    edx,edx
c0011e6f:	f7 f7                	div    edi
c0011e71:	bf 18 00 00 00       	mov    edi,0x18
c0011e76:	31 d2                	xor    edx,edx
c0011e78:	f7 f7                	div    edi
c0011e7a:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0011e7f:	88 d3                	mov    bl,dl
c0011e81:	53                   	push   ebx
c0011e82:	51                   	push   ecx
c0011e83:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011e89:	e8 e2 9d ff ff       	call   c000bc70 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011e8e:	83 c4 1c             	add    esp,0x1c
c0011e91:	83 f0 01             	xor    eax,0x1
c0011e94:	5b                   	pop    ebx
c0011e95:	0f b6 c0             	movzx  eax,al
c0011e98:	5e                   	pop    esi
c0011e99:	31 d2                	xor    edx,edx
c0011e9b:	5f                   	pop    edi
c0011e9c:	5d                   	pop    ebp
c0011e9d:	c3                   	ret    

c0011e9e <SysTimezone(regs*)>:
c0011e9e:	53                   	push   ebx
c0011e9f:	83 ec 08             	sub    esp,0x8
c0011ea2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ea6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011eaa:	75 17                	jne    c0011ec3 <SysTimezone(regs*)+0x25>
c0011eac:	83 ec 0c             	sub    esp,0xc
c0011eaf:	68 97 e8 01 c0       	push   0xc001e897
c0011eb4:	e8 63 8c ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0011eb9:	83 c8 ff             	or     eax,0xffffffff
c0011ebc:	83 c4 10             	add    esp,0x10
c0011ebf:	89 c2                	mov    edx,eax
c0011ec1:	eb 20                	jmp    c0011ee3 <SysTimezone(regs*)+0x45>
c0011ec3:	83 ec 0c             	sub    esp,0xc
c0011ec6:	68 ac e8 01 c0       	push   0xc001e8ac
c0011ecb:	e8 4c 8c ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0011ed0:	58                   	pop    eax
c0011ed1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011ed4:	e8 f3 9a ff ff       	call   c000b9cc <User::loadClockSettings(int)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	b8 01 00 00 00       	mov    eax,0x1
c0011ee1:	31 d2                	xor    edx,edx
c0011ee3:	83 c4 08             	add    esp,0x8
c0011ee6:	5b                   	pop    ebx
c0011ee7:	c3                   	ret    

c0011ee8 <SysWrite(regs*)>:
c0011ee8:	57                   	push   edi
c0011ee9:	56                   	push   esi
c0011eea:	53                   	push   ebx
c0011eeb:	83 ec 10             	sub    esp,0x10
c0011eee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ef2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ef5:	83 f8 02             	cmp    eax,0x2
c0011ef8:	77 10                	ja     c0011f0a <SysWrite(regs*)+0x22>
c0011efa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011eff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f02:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011f08:	eb 0e                	jmp    c0011f18 <SysWrite(regs*)+0x30>
c0011f0a:	83 ec 0c             	sub    esp,0xc
c0011f0d:	50                   	push   eax
c0011f0e:	e8 60 78 ff ff       	call   c0009773 <getFromFileDescriptor(int)>
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	89 c1                	mov    ecx,eax
c0011f18:	83 c8 ff             	or     eax,0xffffffff
c0011f1b:	85 c9                	test   ecx,ecx
c0011f1d:	89 c2                	mov    edx,eax
c0011f1f:	74 28                	je     c0011f49 <SysWrite(regs*)+0x61>
c0011f21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f29:	31 ff                	xor    edi,edi
c0011f2b:	83 ec 0c             	sub    esp,0xc
c0011f2e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011f30:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f34:	52                   	push   edx
c0011f35:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011f38:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011f3b:	57                   	push   edi
c0011f3c:	56                   	push   esi
c0011f3d:	51                   	push   ecx
c0011f3e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f45:	83 c4 20             	add    esp,0x20
c0011f48:	99                   	cdq    
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	5b                   	pop    ebx
c0011f4d:	5e                   	pop    esi
c0011f4e:	5f                   	pop    edi
c0011f4f:	c3                   	ret    

c0011f50 <SysWsbe(regs*)>:
c0011f50:	57                   	push   edi
c0011f51:	b9 0b 00 00 00       	mov    ecx,0xb
c0011f56:	56                   	push   esi
c0011f57:	be eb e8 01 c0       	mov    esi,0xc001e8eb
c0011f5c:	53                   	push   ebx
c0011f5d:	83 ec 30             	sub    esp,0x30
c0011f60:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011f64:	fc                   	cld    
c0011f65:	83 ec 0c             	sub    esp,0xc
c0011f68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011f6a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011f6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f76:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011f7c:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f7e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011f81:	57                   	push   edi
c0011f82:	e8 d9 e5 fe ff       	call   c0000560 <strlen>
c0011f87:	5a                   	pop    edx
c0011f88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011f8c:	52                   	push   edx
c0011f8d:	31 d2                	xor    edx,edx
c0011f8f:	57                   	push   edi
c0011f90:	52                   	push   edx
c0011f91:	50                   	push   eax
c0011f92:	56                   	push   esi
c0011f93:	ff d3                	call   ebx
c0011f95:	83 c4 14             	add    esp,0x14
c0011f98:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011f9c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011f9f:	e8 c4 22 00 00       	call   c0014268 <terminateTask(int)>
c0011fa4:	83 c4 40             	add    esp,0x40
c0011fa7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011fac:	5b                   	pop    ebx
c0011fad:	31 d2                	xor    edx,edx
c0011faf:	5e                   	pop    esi
c0011fb0:	5f                   	pop    edi
c0011fb1:	c3                   	ret    

c0011fb2 <SysYield(regs*)>:
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	fa                   	cli    
c0011fb6:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0011fbc:	e8 83 19 00 00       	call   c0013944 <schedule()>
c0011fc1:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0011fc6:	48                   	dec    eax
c0011fc7:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0011fcc:	75 01                	jne    c0011fcf <SysYield(regs*)+0x1d>
c0011fce:	fb                   	sti    
c0011fcf:	31 c0                	xor    eax,eax
c0011fd1:	31 d2                	xor    edx,edx
c0011fd3:	83 c4 0c             	add    esp,0xc
c0011fd6:	c3                   	ret    

c0011fd7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011fd7:	55                   	push   ebp
c0011fd8:	57                   	push   edi
c0011fd9:	56                   	push   esi
c0011fda:	53                   	push   ebx
c0011fdb:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011fe1:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011fe9:	0f 95 c2             	setne  dl
c0011fec:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011ff4:	0f 94 c0             	sete   al
c0011ff7:	84 c2                	test   dl,al
c0011ff9:	74 34                	je     c001202f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011ffb:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012006:	74 27                	je     c001202f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012008:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001200f:	05 00 10 00 00       	add    eax,0x1000
c0012014:	89 c1                	mov    ecx,eax
c0012016:	25 00 f0 ff ff       	and    eax,0xfffff000
c001201b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012021:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012028:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001202f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012036:	83 ec 0c             	sub    esp,0xc
c0012039:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001203f:	6a 01                	push   0x1
c0012041:	e8 83 78 ff ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c0012046:	83 c4 10             	add    esp,0x10
c0012049:	89 c3                	mov    ebx,eax
c001204b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012051:	0f 86 25 01 00 00    	jbe    c001217c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0012057:	c1 ee 0c             	shr    esi,0xc
c001205a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012061:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0012065:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001206d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0012074:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012078:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001207f:	29 ef                	sub    edi,ebp
c0012081:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0012085:	0f 83 f8 00 00 00    	jae    c0012183 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c001208b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012091:	76 05                	jbe    c0012098 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0012093:	bf 00 10 00 00       	mov    edi,0x1000
c0012098:	83 ec 0c             	sub    esp,0xc
c001209b:	31 d2                	xor    edx,edx
c001209d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00120a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00120a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00120aa:	50                   	push   eax
c00120ab:	8d 74 24 30          	lea    esi,[esp+0x30]
c00120af:	56                   	push   esi
c00120b0:	52                   	push   edx
c00120b1:	57                   	push   edi
c00120b2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00120b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00120bc:	83 c4 20             	add    esp,0x20
c00120bf:	85 c0                	test   eax,eax
c00120c1:	75 06                	jne    c00120c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00120c3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00120c7:	74 13                	je     c00120dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00120c9:	83 ec 0c             	sub    esp,0xc
c00120cc:	53                   	push   ebx
c00120cd:	e8 27 7b ff ff       	call   c0009bf9 <Virt::freeKernelVirtualPages(unsigned long)>
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	31 c0                	xor    eax,eax
c00120d7:	e9 7c 01 00 00       	jmp    c0012258 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00120dc:	fa                   	cli    
c00120dd:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00120e3:	e8 75 60 ff ff       	call   c000815d <Phys::allocatePage()>
c00120e8:	6a 07                	push   0x7
c00120ea:	89 c7                	mov    edi,eax
c00120ec:	53                   	push   ebx
c00120ed:	50                   	push   eax
c00120ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120f6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120fc:	e8 5d 7e ff ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012101:	83 c4 0c             	add    esp,0xc
c0012104:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001210b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012111:	6a 00                	push   0x0
c0012113:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012118:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001211b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012121:	e8 aa 7c ff ff       	call   c0009dd0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012126:	58                   	pop    eax
c0012127:	5a                   	pop    edx
c0012128:	68 07 0c 00 00       	push   0xc07
c001212d:	55                   	push   ebp
c001212e:	57                   	push   edi
c001212f:	89 df                	mov    edi,ebx
c0012131:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012138:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001213e:	6a 00                	push   0x0
c0012140:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012145:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012148:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001214e:	e8 cb 81 ff ff       	call   c000a31e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012153:	b9 00 10 00 00       	mov    ecx,0x1000
c0012158:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001215a:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001215f:	83 c4 20             	add    esp,0x20
c0012162:	48                   	dec    eax
c0012163:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0012168:	85 c0                	test   eax,eax
c001216a:	75 01                	jne    c001216d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c001216c:	fb                   	sti    
c001216d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012173:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012177:	e9 f1 fe ff ff       	jmp    c001206d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c001217c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012183:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001218a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012190:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012196:	0f 86 ae 00 00 00    	jbe    c001224a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001219c:	fa                   	cli    
c001219d:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00121a3:	c1 ee 0c             	shr    esi,0xc
c00121a6:	51                   	push   ecx
c00121a7:	31 ff                	xor    edi,edi
c00121a9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00121b0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121b6:	6a 00                	push   0x0
c00121b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121c6:	e8 05 7c ff ff       	call   c0009dd0 <VAS::mapOtherVASIn(bool, VAS*)>
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	e8 8a 5f ff ff       	call   c000815d <Phys::allocatePage()>
c00121d3:	47                   	inc    edi
c00121d4:	6a 07                	push   0x7
c00121d6:	53                   	push   ebx
c00121d7:	50                   	push   eax
c00121d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121e2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00121e5:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00121eb:	e8 6e 7d ff ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c00121f0:	58                   	pop    eax
c00121f1:	5a                   	pop    edx
c00121f2:	68 07 0c 00 00       	push   0xc07
c00121f7:	55                   	push   ebp
c00121f8:	81 c5 00 10 00 00    	add    ebp,0x1000
c00121fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012202:	50                   	push   eax
c0012203:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001220a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012210:	6a 00                	push   0x0
c0012212:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012217:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001221a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012220:	e8 f9 80 ff ff       	call   c000a31e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012225:	83 c4 1c             	add    esp,0x1c
c0012228:	68 00 10 00 00       	push   0x1000
c001222d:	6a 00                	push   0x0
c001222f:	53                   	push   ebx
c0012230:	e8 bb e2 fe ff       	call   c00004f0 <memset>
c0012235:	83 c4 10             	add    esp,0x10
c0012238:	39 fe                	cmp    esi,edi
c001223a:	77 92                	ja     c00121ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001223c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0012241:	48                   	dec    eax
c0012242:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0012247:	75 01                	jne    c001224a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012249:	fb                   	sti    
c001224a:	83 ec 0c             	sub    esp,0xc
c001224d:	53                   	push   ebx
c001224e:	e8 a6 79 ff ff       	call   c0009bf9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012253:	83 c4 10             	add    esp,0x10
c0012256:	b0 01                	mov    al,0x1
c0012258:	81 c4 2c 10 00 00    	add    esp,0x102c
c001225e:	5b                   	pop    ebx
c001225f:	5e                   	pop    esi
c0012260:	5f                   	pop    edi
c0012261:	5d                   	pop    ebp
c0012262:	c3                   	ret    

c0012263 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0012263:	55                   	push   ebp
c0012264:	57                   	push   edi
c0012265:	56                   	push   esi
c0012266:	53                   	push   ebx
c0012267:	83 ec 48             	sub    esp,0x48
c001226a:	68 14 01 00 00       	push   0x114
c001226f:	e8 11 5c ff ff       	call   c0007e85 <malloc>
c0012274:	83 c4 0c             	add    esp,0xc
c0012277:	89 c6                	mov    esi,eax
c0012279:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001227d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012281:	50                   	push   eax
c0012282:	e8 0b 8e ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0012287:	58                   	pop    eax
c0012288:	5a                   	pop    edx
c0012289:	6a 01                	push   0x1
c001228b:	56                   	push   esi
c001228c:	e8 c1 8e ff ff       	call   c000b152 <File::open(FileOpenMode)>
c0012291:	83 c4 10             	add    esp,0x10
c0012294:	85 c0                	test   eax,eax
c0012296:	0f 85 47 01 00 00    	jne    c00123e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001229c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00122a4:	83 ec 0c             	sub    esp,0xc
c00122a7:	6a 34                	push   0x34
c00122a9:	e8 d7 5b ff ff       	call   c0007e85 <malloc>
c00122ae:	89 c3                	mov    ebx,eax
c00122b0:	58                   	pop    eax
c00122b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00122b3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00122b7:	57                   	push   edi
c00122b8:	53                   	push   ebx
c00122b9:	6a 00                	push   0x0
c00122bb:	6a 34                	push   0x34
c00122bd:	56                   	push   esi
c00122be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00122c1:	83 c4 20             	add    esp,0x20
c00122c4:	85 c0                	test   eax,eax
c00122c6:	0f 85 17 01 00 00    	jne    c00123e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122cc:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00122d2:	0f 85 0b 01 00 00    	jne    c00123e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122db:	85 c0                	test   eax,eax
c00122dd:	0f 84 00 01 00 00    	je     c00123e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122e3:	31 d2                	xor    edx,edx
c00122e5:	55                   	push   ebp
c00122e6:	52                   	push   edx
c00122e7:	50                   	push   eax
c00122e8:	56                   	push   esi
c00122e9:	e8 22 8f ff ff       	call   c000b210 <File::seek(unsigned long long)>
c00122ee:	83 c4 10             	add    esp,0x10
c00122f1:	85 c0                	test   eax,eax
c00122f3:	0f 85 ea 00 00 00    	jne    c00123e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122f9:	83 ec 0c             	sub    esp,0xc
c00122fc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00122ff:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012307:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001230b:	0f af c2             	imul   eax,edx
c001230e:	50                   	push   eax
c001230f:	e8 71 5b ff ff       	call   c0007e85 <malloc>
c0012314:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012316:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001231a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001231d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012321:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012325:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012329:	0f af c2             	imul   eax,edx
c001232c:	99                   	cdq    
c001232d:	52                   	push   edx
c001232e:	50                   	push   eax
c001232f:	56                   	push   esi
c0012330:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012333:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012336:	83 c4 20             	add    esp,0x20
c0012339:	85 c0                	test   eax,eax
c001233b:	0f 84 a2 00 00 00    	je     c00123e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012341:	31 d2                	xor    edx,edx
c0012343:	51                   	push   ecx
c0012344:	52                   	push   edx
c0012345:	50                   	push   eax
c0012346:	56                   	push   esi
c0012347:	e8 c4 8e ff ff       	call   c000b210 <File::seek(unsigned long long)>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	85 c0                	test   eax,eax
c0012351:	0f 85 8c 00 00 00    	jne    c00123e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012357:	83 ec 0c             	sub    esp,0xc
c001235a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001235e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012362:	31 ed                	xor    ebp,ebp
c0012364:	0f af c2             	imul   eax,edx
c0012367:	50                   	push   eax
c0012368:	e8 18 5b ff ff       	call   c0007e85 <malloc>
c001236d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001236f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001237a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001237e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012382:	0f af c2             	imul   eax,edx
c0012385:	99                   	cdq    
c0012386:	52                   	push   edx
c0012387:	50                   	push   eax
c0012388:	56                   	push   esi
c0012389:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001238c:	83 c4 20             	add    esp,0x20
c001238f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012397:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001239b:	0f 86 80 00 00 00    	jbe    c0012421 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00123a1:	0f b7 fd             	movzx  edi,bp
c00123a4:	c1 e7 05             	shl    edi,0x5
c00123a7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00123ab:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00123ae:	75 6b                	jne    c001241b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00123b0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123b7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00123ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123be:	52                   	push   edx
c00123bf:	31 d2                	xor    edx,edx
c00123c1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123c4:	52                   	push   edx
c00123c5:	50                   	push   eax
c00123c6:	56                   	push   esi
c00123c7:	e8 44 8e ff ff       	call   c000b210 <File::seek(unsigned long long)>
c00123cc:	83 c4 10             	add    esp,0x10
c00123cf:	85 c0                	test   eax,eax
c00123d1:	74 17                	je     c00123ea <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00123d3:	83 ec 0c             	sub    esp,0xc
c00123d6:	68 17 e9 01 c0       	push   0xc001e917
c00123db:	e8 3c 87 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00123e0:	83 c4 10             	add    esp,0x10
c00123e3:	31 c0                	xor    eax,eax
c00123e5:	e9 87 00 00 00       	jmp    c0012471 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00123ea:	83 ec 0c             	sub    esp,0xc
c00123ed:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00123f0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00123f3:	50                   	push   eax
c00123f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00123f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123fc:	56                   	push   esi
c00123fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012401:	e8 d1 fb ff ff       	call   c0011fd7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012406:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001240a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001240e:	83 c4 20             	add    esp,0x20
c0012411:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012415:	73 04                	jae    c001241b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012417:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001241b:	45                   	inc    ebp
c001241c:	e9 76 ff ff ff       	jmp    c0012397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012421:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012425:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001242d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012433:	83 ec 0c             	sub    esp,0xc
c0012436:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001243c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012441:	05 00 10 00 00       	add    eax,0x1000
c0012446:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001244d:	e8 43 5a ff ff       	call   c0007e95 <free>
c0012452:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012455:	e8 3b 5a ff ff       	call   c0007e95 <free>
c001245a:	58                   	pop    eax
c001245b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001245f:	e8 31 5a ff ff       	call   c0007e95 <free>
c0012464:	89 34 24             	mov    DWORD PTR [esp],esi
c0012467:	e8 44 8d ff ff       	call   c000b1b0 <File::close()>
c001246c:	83 c4 10             	add    esp,0x10
c001246f:	b0 01                	mov    al,0x1
c0012471:	83 c4 3c             	add    esp,0x3c
c0012474:	5b                   	pop    ebx
c0012475:	5e                   	pop    esi
c0012476:	5f                   	pop    edi
c0012477:	5d                   	pop    ebp
c0012478:	c3                   	ret    

c0012479 <Thr::runtimeReferenceHelper()>:
c0012479:	83 ec 18             	sub    esp,0x18
c001247c:	68 1f e9 01 c0       	push   0xc001e91f
c0012481:	e8 96 86 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0012486:	fa                   	cli    
c0012487:	83 c4 10             	add    esp,0x10
c001248a:	eb fe                	jmp    c001248a <Thr::runtimeReferenceHelper()+0x11>

c001248c <Thr::getAddressOfKernelSymbol(char const*)>:
c001248c:	57                   	push   edi
c001248d:	56                   	push   esi
c001248e:	53                   	push   ebx
c001248f:	31 db                	xor    ebx,ebx
c0012491:	39 1d 60 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e60,ebx
c0012497:	7e 3c                	jle    c00124d5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012499:	8b 34 9d e0 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc220]
c00124a0:	31 ff                	xor    edi,edi
c00124a2:	39 3c 9d e0 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc320],edi
c00124a9:	7e 27                	jle    c00124d2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00124ab:	50                   	push   eax
c00124ac:	50                   	push   eax
c00124ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00124b3:	03 04 9d 60 3d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc2a0]
c00124ba:	50                   	push   eax
c00124bb:	e8 40 e2 fe ff       	call   c0000700 <strcmp>
c00124c0:	83 c4 10             	add    esp,0x10
c00124c3:	85 c0                	test   eax,eax
c00124c5:	75 05                	jne    c00124cc <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00124c7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00124ca:	eb 0b                	jmp    c00124d7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00124cc:	83 c6 10             	add    esi,0x10
c00124cf:	47                   	inc    edi
c00124d0:	eb d0                	jmp    c00124a2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00124d2:	43                   	inc    ebx
c00124d3:	eb bc                	jmp    c0012491 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00124d5:	31 c0                	xor    eax,eax
c00124d7:	5b                   	pop    ebx
c00124d8:	5e                   	pop    esi
c00124d9:	5f                   	pop    edi
c00124da:	c3                   	ret    

c00124db <Thr::loadKernelSymbolTable(char const*)>:
c00124db:	55                   	push   ebp
c00124dc:	57                   	push   edi
c00124dd:	56                   	push   esi
c00124de:	53                   	push   ebx
c00124df:	83 ec 68             	sub    esp,0x68
c00124e2:	8b 35 b0 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb0
c00124e8:	68 14 01 00 00       	push   0x114
c00124ed:	e8 93 59 ff ff       	call   c0007e85 <malloc>
c00124f2:	83 c4 0c             	add    esp,0xc
c00124f5:	89 c3                	mov    ebx,eax
c00124f7:	56                   	push   esi
c00124f8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00124fc:	50                   	push   eax
c00124fd:	e8 90 8b ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0012502:	5e                   	pop    esi
c0012503:	5f                   	pop    edi
c0012504:	6a 01                	push   0x1
c0012506:	53                   	push   ebx
c0012507:	e8 46 8c ff ff       	call   c000b152 <File::open(FileOpenMode)>
c001250c:	83 c4 10             	add    esp,0x10
c001250f:	85 c0                	test   eax,eax
c0012511:	74 0a                	je     c001251d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012513:	83 ec 0c             	sub    esp,0xc
c0012516:	68 41 e9 01 c0       	push   0xc001e941
c001251b:	eb 34                	jmp    c0012551 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001251d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012525:	83 ec 0c             	sub    esp,0xc
c0012528:	6a 34                	push   0x34
c001252a:	e8 56 59 ff ff       	call   c0007e85 <malloc>
c001252f:	59                   	pop    ecx
c0012530:	89 c7                	mov    edi,eax
c0012532:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012536:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012538:	56                   	push   esi
c0012539:	57                   	push   edi
c001253a:	6a 00                	push   0x0
c001253c:	6a 34                	push   0x34
c001253e:	53                   	push   ebx
c001253f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012542:	83 c4 20             	add    esp,0x20
c0012545:	85 c0                	test   eax,eax
c0012547:	74 17                	je     c0012560 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012549:	83 ec 0c             	sub    esp,0xc
c001254c:	68 58 e9 01 c0       	push   0xc001e958
c0012551:	e8 95 e1 ff ff       	call   c00106eb <KePanic(char const*)>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	31 c0                	xor    eax,eax
c001255b:	e9 31 02 00 00       	jmp    c0012791 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012560:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012566:	75 e1                	jne    c0012549 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012568:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001256b:	85 c0                	test   eax,eax
c001256d:	74 da                	je     c0012549 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001256f:	52                   	push   edx
c0012570:	31 d2                	xor    edx,edx
c0012572:	52                   	push   edx
c0012573:	50                   	push   eax
c0012574:	53                   	push   ebx
c0012575:	e8 96 8c ff ff       	call   c000b210 <File::seek(unsigned long long)>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	85 c0                	test   eax,eax
c001257f:	75 c8                	jne    c0012549 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012581:	83 ec 0c             	sub    esp,0xc
c0012584:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012588:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001258c:	31 ed                	xor    ebp,ebp
c001258e:	0f af c2             	imul   eax,edx
c0012591:	50                   	push   eax
c0012592:	e8 ee 58 ff ff       	call   c0007e85 <malloc>
c0012597:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001259d:	89 34 24             	mov    DWORD PTR [esp],esi
c00125a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125a4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00125a8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00125ac:	0f af c2             	imul   eax,edx
c00125af:	99                   	cdq    
c00125b0:	52                   	push   edx
c00125b1:	50                   	push   eax
c00125b2:	53                   	push   ebx
c00125b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125b6:	83 c4 20             	add    esp,0x20
c00125b9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00125d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00125d9:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00125dd:	0f 86 aa 00 00 00    	jbe    c001268d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00125e3:	0f b7 f5             	movzx  esi,bp
c00125e6:	6b f6 28             	imul   esi,esi,0x28
c00125e9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00125ed:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00125f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125f4:	50                   	push   eax
c00125f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00125f9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00125fd:	8b 16                	mov    edx,DWORD PTR [esi]
c00125ff:	6b c0 28             	imul   eax,eax,0x28
c0012602:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012606:	89 d0                	mov    eax,edx
c0012608:	31 d2                	xor    edx,edx
c001260a:	52                   	push   edx
c001260b:	50                   	push   eax
c001260c:	53                   	push   ebx
c001260d:	e8 fe 8b ff ff       	call   c000b210 <File::seek(unsigned long long)>
c0012612:	83 c4 0c             	add    esp,0xc
c0012615:	6a 20                	push   0x20
c0012617:	6a 00                	push   0x0
c0012619:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001261d:	52                   	push   edx
c001261e:	e8 cd de fe ff       	call   c00004f0 <memset>
c0012623:	58                   	pop    eax
c0012624:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012626:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001262a:	51                   	push   ecx
c001262b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001262f:	52                   	push   edx
c0012630:	6a 00                	push   0x0
c0012632:	6a 1f                	push   0x1f
c0012634:	53                   	push   ebx
c0012635:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012638:	83 c4 18             	add    esp,0x18
c001263b:	68 6f e9 01 c0       	push   0xc001e96f
c0012640:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012644:	52                   	push   edx
c0012645:	e8 b6 e0 fe ff       	call   c0000700 <strcmp>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	85 c0                	test   eax,eax
c001264f:	75 0f                	jne    c0012660 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012651:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001265c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012660:	50                   	push   eax
c0012661:	50                   	push   eax
c0012662:	68 77 e9 01 c0       	push   0xc001e977
c0012667:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001266b:	50                   	push   eax
c001266c:	e8 8f e0 fe ff       	call   c0000700 <strcmp>
c0012671:	83 c4 10             	add    esp,0x10
c0012674:	85 c0                	test   eax,eax
c0012676:	75 0f                	jne    c0012687 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012678:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001267b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001267f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012687:	45                   	inc    ebp
c0012688:	e9 4c ff ff ff       	jmp    c00125d9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001268d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012692:	75 10                	jne    c00126a4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012694:	83 ec 0c             	sub    esp,0xc
c0012697:	68 7f e9 01 c0       	push   0xc001e97f
c001269c:	e8 4a e0 ff ff       	call   c00106eb <KePanic(char const*)>
c00126a1:	83 c4 10             	add    esp,0x10
c00126a4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00126a9:	75 10                	jne    c00126bb <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00126ab:	83 ec 0c             	sub    esp,0xc
c00126ae:	68 7f e9 01 c0       	push   0xc001e97f
c00126b3:	e8 33 e0 ff ff       	call   c00106eb <KePanic(char const*)>
c00126b8:	83 c4 10             	add    esp,0x10
c00126bb:	31 d2                	xor    edx,edx
c00126bd:	50                   	push   eax
c00126be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c2:	52                   	push   edx
c00126c3:	50                   	push   eax
c00126c4:	53                   	push   ebx
c00126c5:	e8 46 8b ff ff       	call   c000b210 <File::seek(unsigned long long)>
c00126ca:	5a                   	pop    edx
c00126cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00126cf:	e8 b1 57 ff ff       	call   c0007e85 <malloc>
c00126d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00126d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00126dc:	31 c9                	xor    ecx,ecx
c00126de:	5e                   	pop    esi
c00126df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126e1:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00126e5:	55                   	push   ebp
c00126e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126ea:	51                   	push   ecx
c00126eb:	52                   	push   edx
c00126ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00126f0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00126f4:	53                   	push   ebx
c00126f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126f8:	83 c4 14             	add    esp,0x14
c00126fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126ff:	e8 81 57 ff ff       	call   c0007e85 <malloc>
c0012704:	89 c6                	mov    esi,eax
c0012706:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012708:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001270b:	56                   	push   esi
c001270c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012710:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012714:	51                   	push   ecx
c0012715:	52                   	push   edx
c0012716:	53                   	push   ebx
c0012717:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001271a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001271e:	8b 15 60 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e60
c0012724:	83 c4 1c             	add    esp,0x1c
c0012727:	c1 e8 04             	shr    eax,0x4
c001272a:	89 04 95 e0 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc320],eax
c0012731:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012735:	31 d2                	xor    edx,edx
c0012737:	52                   	push   edx
c0012738:	50                   	push   eax
c0012739:	53                   	push   ebx
c001273a:	e8 d1 8a ff ff       	call   c000b210 <File::seek(unsigned long long)>
c001273f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012741:	31 d2                	xor    edx,edx
c0012743:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012746:	56                   	push   esi
c0012747:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001274b:	52                   	push   edx
c001274c:	50                   	push   eax
c001274d:	53                   	push   ebx
c001274e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012751:	83 c4 14             	add    esp,0x14
c0012754:	53                   	push   ebx
c0012755:	e8 56 8a ff ff       	call   c000b1b0 <File::close()>
c001275a:	5d                   	pop    ebp
c001275b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001275f:	e8 31 57 ff ff       	call   c0007e95 <free>
c0012764:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012767:	e8 29 57 ff ff       	call   c0007e95 <free>
c001276c:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c0012771:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012775:	8d 50 01             	lea    edx,[eax+0x1]
c0012778:	89 0c 85 e0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc220],ecx
c001277f:	89 34 85 60 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2a0],esi
c0012786:	89 15 60 3e 02 c0    	mov    DWORD PTR ds:0xc0023e60,edx
c001278c:	83 c4 10             	add    esp,0x10
c001278f:	b0 01                	mov    al,0x1
c0012791:	83 c4 5c             	add    esp,0x5c
c0012794:	5b                   	pop    ebx
c0012795:	5e                   	pop    esi
c0012796:	5f                   	pop    edi
c0012797:	5d                   	pop    ebp
c0012798:	c3                   	ret    

c0012799 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012799:	55                   	push   ebp
c001279a:	57                   	push   edi
c001279b:	56                   	push   esi
c001279c:	53                   	push   ebx
c001279d:	81 ec 68 03 00 00    	sub    esp,0x368
c00127a3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00127aa:	8b 1d b0 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb0
c00127b0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00127b4:	68 14 01 00 00       	push   0x114
c00127b9:	e8 c7 56 ff ff       	call   c0007e85 <malloc>
c00127be:	83 c4 0c             	add    esp,0xc
c00127c1:	89 c5                	mov    ebp,eax
c00127c3:	53                   	push   ebx
c00127c4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00127cb:	50                   	push   eax
c00127cc:	e8 c1 88 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c00127d1:	5e                   	pop    esi
c00127d2:	5f                   	pop    edi
c00127d3:	6a 01                	push   0x1
c00127d5:	55                   	push   ebp
c00127d6:	e8 77 89 ff ff       	call   c000b152 <File::open(FileOpenMode)>
c00127db:	83 c4 10             	add    esp,0x10
c00127de:	85 c0                	test   eax,eax
c00127e0:	0f 85 a7 06 00 00    	jne    c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127e6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00127ee:	83 ec 0c             	sub    esp,0xc
c00127f1:	6a 34                	push   0x34
c00127f3:	e8 8d 56 ff ff       	call   c0007e85 <malloc>
c00127f8:	5b                   	pop    ebx
c00127f9:	89 c7                	mov    edi,eax
c00127fb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00127ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012802:	53                   	push   ebx
c0012803:	57                   	push   edi
c0012804:	6a 00                	push   0x0
c0012806:	6a 34                	push   0x34
c0012808:	55                   	push   ebp
c0012809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001280c:	83 c4 20             	add    esp,0x20
c001280f:	85 c0                	test   eax,eax
c0012811:	0f 85 76 06 00 00    	jne    c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012817:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001281d:	0f 85 6a 06 00 00    	jne    c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012823:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012826:	85 c0                	test   eax,eax
c0012828:	0f 84 5f 06 00 00    	je     c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001282e:	31 d2                	xor    edx,edx
c0012830:	51                   	push   ecx
c0012831:	52                   	push   edx
c0012832:	50                   	push   eax
c0012833:	55                   	push   ebp
c0012834:	e8 d7 89 ff ff       	call   c000b210 <File::seek(unsigned long long)>
c0012839:	83 c4 10             	add    esp,0x10
c001283c:	85 c0                	test   eax,eax
c001283e:	0f 85 49 06 00 00    	jne    c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012844:	83 ec 0c             	sub    esp,0xc
c0012847:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001284a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001284e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012852:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012856:	0f af c2             	imul   eax,edx
c0012859:	50                   	push   eax
c001285a:	e8 26 56 ff ff       	call   c0007e85 <malloc>
c001285f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012866:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012869:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001286d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012871:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012875:	0f af c2             	imul   eax,edx
c0012878:	99                   	cdq    
c0012879:	52                   	push   edx
c001287a:	50                   	push   eax
c001287b:	55                   	push   ebp
c001287c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001287f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012882:	83 c4 20             	add    esp,0x20
c0012885:	85 c0                	test   eax,eax
c0012887:	0f 84 00 06 00 00    	je     c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001288d:	52                   	push   edx
c001288e:	31 d2                	xor    edx,edx
c0012890:	52                   	push   edx
c0012891:	50                   	push   eax
c0012892:	55                   	push   ebp
c0012893:	e8 78 89 ff ff       	call   c000b210 <File::seek(unsigned long long)>
c0012898:	83 c4 10             	add    esp,0x10
c001289b:	85 c0                	test   eax,eax
c001289d:	0f 85 ea 05 00 00    	jne    c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128a3:	83 ec 0c             	sub    esp,0xc
c00128a6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00128aa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00128ae:	31 f6                	xor    esi,esi
c00128b0:	0f af c2             	imul   eax,edx
c00128b3:	50                   	push   eax
c00128b4:	e8 cc 55 ff ff       	call   c0007e85 <malloc>
c00128b9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00128bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00128c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128c7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00128cb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00128cf:	0f af c2             	imul   eax,edx
c00128d2:	99                   	cdq    
c00128d3:	52                   	push   edx
c00128d4:	50                   	push   eax
c00128d5:	55                   	push   ebp
c00128d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00128d9:	83 c4 20             	add    esp,0x20
c00128dc:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00128e0:	0f 86 8a 00 00 00    	jbe    c0012970 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00128e6:	0f b7 de             	movzx  ebx,si
c00128e9:	c1 e3 05             	shl    ebx,0x5
c00128ec:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00128f0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00128f3:	75 75                	jne    c001296a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00128f5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00128f8:	31 d2                	xor    edx,edx
c00128fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012905:	50                   	push   eax
c0012906:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012909:	52                   	push   edx
c001290a:	50                   	push   eax
c001290b:	55                   	push   ebp
c001290c:	e8 ff 88 ff ff       	call   c000b210 <File::seek(unsigned long long)>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	85 c0                	test   eax,eax
c0012916:	0f 85 71 05 00 00    	jne    c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001291c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012923:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012926:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001292a:	31 d2                	xor    edx,edx
c001292c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012930:	83 ec 0c             	sub    esp,0xc
c0012933:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012937:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001293e:	50                   	push   eax
c001293f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012947:	52                   	push   edx
c0012948:	50                   	push   eax
c0012949:	55                   	push   ebp
c001294a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001294d:	83 c4 1c             	add    esp,0x1c
c0012950:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012953:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012956:	50                   	push   eax
c0012957:	6a 00                	push   0x0
c0012959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012961:	50                   	push   eax
c0012962:	e8 89 db fe ff       	call   c00004f0 <memset>
c0012967:	83 c4 10             	add    esp,0x10
c001296a:	46                   	inc    esi
c001296b:	e9 6c ff ff ff       	jmp    c00128dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012970:	53                   	push   ebx
c0012971:	31 db                	xor    ebx,ebx
c0012973:	68 00 01 00 00       	push   0x100
c0012978:	6a 00                	push   0x0
c001297a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001297e:	50                   	push   eax
c001297f:	e8 6c db fe ff       	call   c00004f0 <memset>
c0012984:	83 c4 0c             	add    esp,0xc
c0012987:	68 00 01 00 00       	push   0x100
c001298c:	6a 00                	push   0x0
c001298e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012995:	50                   	push   eax
c0012996:	e8 55 db fe ff       	call   c00004f0 <memset>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00129a6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00129ae:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00129b6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00129c6:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00129ca:	0f 86 30 01 00 00    	jbe    c0012b00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00129d0:	0f b7 f3             	movzx  esi,bx
c00129d3:	6b f6 28             	imul   esi,esi,0x28
c00129d6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00129da:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00129dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129e1:	52                   	push   edx
c00129e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00129e6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00129ea:	8b 06                	mov    eax,DWORD PTR [esi]
c00129ec:	6b d2 28             	imul   edx,edx,0x28
c00129ef:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00129f3:	31 d2                	xor    edx,edx
c00129f5:	52                   	push   edx
c00129f6:	50                   	push   eax
c00129f7:	55                   	push   ebp
c00129f8:	e8 13 88 ff ff       	call   c000b210 <File::seek(unsigned long long)>
c00129fd:	83 c4 0c             	add    esp,0xc
c0012a00:	6a 20                	push   0x20
c0012a02:	6a 00                	push   0x0
c0012a04:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012a0b:	51                   	push   ecx
c0012a0c:	e8 df da fe ff       	call   c00004f0 <memset>
c0012a11:	59                   	pop    ecx
c0012a12:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a15:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012a19:	52                   	push   edx
c0012a1a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012a21:	51                   	push   ecx
c0012a22:	6a 00                	push   0x0
c0012a24:	6a 1f                	push   0x1f
c0012a26:	55                   	push   ebp
c0012a27:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012a2a:	83 c4 1c             	add    esp,0x1c
c0012a2d:	6a 09                	push   0x9
c0012a2f:	68 99 e9 01 c0       	push   0xc001e999
c0012a34:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012a3b:	51                   	push   ecx
c0012a3c:	e8 6f d9 fe ff       	call   c00003b0 <memcmp>
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	85 c0                	test   eax,eax
c0012a46:	75 21                	jne    c0012a69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a50:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012a54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a58:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a5b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012a62:	89 d0                	mov    eax,edx
c0012a64:	40                   	inc    eax
c0012a65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a69:	50                   	push   eax
c0012a6a:	6a 09                	push   0x9
c0012a6c:	68 a3 e9 01 c0       	push   0xc001e9a3
c0012a71:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a78:	50                   	push   eax
c0012a79:	e8 32 d9 fe ff       	call   c00003b0 <memcmp>
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	85 c0                	test   eax,eax
c0012a83:	75 21                	jne    c0012aa6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012a85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a8d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012a91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a98:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012a9f:	89 d0                	mov    eax,edx
c0012aa1:	40                   	inc    eax
c0012aa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012aa6:	50                   	push   eax
c0012aa7:	50                   	push   eax
c0012aa8:	68 6f e9 01 c0       	push   0xc001e96f
c0012aad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ab4:	50                   	push   eax
c0012ab5:	e8 46 dc fe ff       	call   c0000700 <strcmp>
c0012aba:	83 c4 10             	add    esp,0x10
c0012abd:	85 c0                	test   eax,eax
c0012abf:	75 0f                	jne    c0012ad0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012ac1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012ac4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012acc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ad0:	50                   	push   eax
c0012ad1:	50                   	push   eax
c0012ad2:	68 77 e9 01 c0       	push   0xc001e977
c0012ad7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ade:	50                   	push   eax
c0012adf:	e8 1c dc fe ff       	call   c0000700 <strcmp>
c0012ae4:	83 c4 10             	add    esp,0x10
c0012ae7:	85 c0                	test   eax,eax
c0012ae9:	75 0f                	jne    c0012afa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012aeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012aee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012af2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012af6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012afa:	43                   	inc    ebx
c0012afb:	e9 c6 fe ff ff       	jmp    c00129c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012b00:	31 d2                	xor    edx,edx
c0012b02:	50                   	push   eax
c0012b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b07:	52                   	push   edx
c0012b08:	50                   	push   eax
c0012b09:	55                   	push   ebp
c0012b0a:	e8 01 87 ff ff       	call   c000b210 <File::seek(unsigned long long)>
c0012b0f:	58                   	pop    eax
c0012b10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012b14:	e8 6c 53 ff ff       	call   c0007e85 <malloc>
c0012b19:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012b1c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012b20:	31 d2                	xor    edx,edx
c0012b22:	58                   	pop    eax
c0012b23:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012b27:	53                   	push   ebx
c0012b28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012b2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b30:	52                   	push   edx
c0012b31:	50                   	push   eax
c0012b32:	55                   	push   ebp
c0012b33:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012b36:	83 c4 14             	add    esp,0x14
c0012b39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b3d:	e8 43 53 ff ff       	call   c0007e85 <malloc>
c0012b42:	31 d2                	xor    edx,edx
c0012b44:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012b48:	83 c4 0c             	add    esp,0xc
c0012b4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b4f:	52                   	push   edx
c0012b50:	50                   	push   eax
c0012b51:	55                   	push   ebp
c0012b52:	e8 b9 86 ff ff       	call   c000b210 <File::seek(unsigned long long)>
c0012b57:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012b5a:	31 d2                	xor    edx,edx
c0012b5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012b63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b67:	52                   	push   edx
c0012b68:	50                   	push   eax
c0012b69:	55                   	push   ebp
c0012b6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012b6d:	83 c4 20             	add    esp,0x20
c0012b70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b78:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b7c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012b80:	0f 84 0b 03 00 00    	je     c0012e91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012b86:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012b8d:	31 d2                	xor    edx,edx
c0012b8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b93:	c1 e8 03             	shr    eax,0x3
c0012b96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012b9a:	51                   	push   ecx
c0012b9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b9f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012ba3:	52                   	push   edx
c0012ba4:	50                   	push   eax
c0012ba5:	55                   	push   ebp
c0012ba6:	e8 65 86 ff ff       	call   c000b210 <File::seek(unsigned long long)>
c0012bab:	5b                   	pop    ebx
c0012bac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bb0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012bb7:	e8 c9 52 ff ff       	call   c0007e85 <malloc>
c0012bbc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012bbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bc3:	31 d2                	xor    edx,edx
c0012bc5:	5e                   	pop    esi
c0012bc6:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012bca:	50                   	push   eax
c0012bcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012bd3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012bda:	52                   	push   edx
c0012bdb:	50                   	push   eax
c0012bdc:	55                   	push   ebp
c0012bdd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012be0:	83 c4 20             	add    esp,0x20
c0012be3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012beb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012bef:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012bf3:	0f 8d 7c 02 00 00    	jge    c0012e75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012bf9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012bfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c01:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012c06:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012c09:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012c0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c11:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012c15:	89 d8                	mov    eax,ebx
c0012c17:	c1 e8 08             	shr    eax,0x8
c0012c1a:	89 c6                	mov    esi,eax
c0012c1c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c20:	c1 e6 04             	shl    esi,0x4
c0012c23:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012c27:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012c2a:	85 d2                	test   edx,edx
c0012c2c:	0f 85 bf 00 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c32:	83 ec 0c             	sub    esp,0xc
c0012c35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c39:	03 06                	add    eax,DWORD PTR [esi]
c0012c3b:	50                   	push   eax
c0012c3c:	e8 4b f8 ff ff       	call   c001248c <Thr::getAddressOfKernelSymbol(char const*)>
c0012c41:	83 c4 10             	add    esp,0x10
c0012c44:	89 c2                	mov    edx,eax
c0012c46:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012c4b:	85 c0                	test   eax,eax
c0012c4d:	0f 85 9e 00 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c53:	83 ec 0c             	sub    esp,0xc
c0012c56:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c5a:	03 06                	add    eax,DWORD PTR [esi]
c0012c5c:	50                   	push   eax
c0012c5d:	e8 de 42 ff ff       	call   c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	89 c2                	mov    edx,eax
c0012c67:	85 c0                	test   eax,eax
c0012c69:	0f 85 82 00 00 00    	jne    c0012cf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c6f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012c73:	50                   	push   eax
c0012c74:	50                   	push   eax
c0012c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c79:	03 06                	add    eax,DWORD PTR [esi]
c0012c7b:	50                   	push   eax
c0012c7c:	68 ad e9 01 c0       	push   0xc001e9ad
c0012c81:	e8 96 7e ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0012c86:	58                   	pop    eax
c0012c87:	5a                   	pop    edx
c0012c88:	68 c7 e9 01 c0       	push   0xc001e9c7
c0012c8d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c94:	50                   	push   eax
c0012c95:	e8 86 d9 fe ff       	call   c0000620 <strcpy>
c0012c9a:	59                   	pop    ecx
c0012c9b:	58                   	pop    eax
c0012c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ca0:	03 06                	add    eax,DWORD PTR [esi]
c0012ca2:	50                   	push   eax
c0012ca3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012caa:	50                   	push   eax
c0012cab:	e8 30 db fe ff       	call   c00007e0 <strcat>
c0012cb0:	58                   	pop    eax
c0012cb1:	5a                   	pop    edx
c0012cb2:	68 5d ea 01 c0       	push   0xc001ea5d
c0012cb7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012cbe:	50                   	push   eax
c0012cbf:	e8 1c db fe ff       	call   c00007e0 <strcat>
c0012cc4:	83 c4 10             	add    esp,0x10
c0012cc7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ccc:	0f 84 5d 01 00 00    	je     c0012e2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012cd2:	83 ec 0c             	sub    esp,0xc
c0012cd5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012cdc:	50                   	push   eax
c0012cdd:	e8 09 da ff ff       	call   c00106eb <KePanic(char const*)>
c0012ce2:	83 c4 10             	add    esp,0x10
c0012ce5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012ce9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012ced:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012cf1:	80 fb 01             	cmp    bl,0x1
c0012cf4:	0f 85 88 00 00 00    	jne    c0012d82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012cfa:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012d01:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012d05:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012d09:	01 ce                	add    esi,ecx
c0012d0b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012d11:	0f 94 c0             	sete   al
c0012d14:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012d1a:	0f 94 c3             	sete   bl
c0012d1d:	09 c3                	or     ebx,eax
c0012d1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d21:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012d26:	74 41                	je     c0012d69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012d28:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012d2b:	84 db                	test   bl,bl
c0012d2d:	75 15                	jne    c0012d44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012d2f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d33:	66 83 f8 0c          	cmp    ax,0xc
c0012d37:	76 05                	jbe    c0012d3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012d39:	b8 0c 00 00 00       	mov    eax,0xc
c0012d3e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012d42:	76 37                	jbe    c0012d7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d44:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012d48:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d4d:	0f 84 dc 00 00 00    	je     c0012e2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012d53:	83 ec 0c             	sub    esp,0xc
c0012d56:	68 de e9 01 c0       	push   0xc001e9de
c0012d5b:	e8 8b d9 ff ff       	call   c00106eb <KePanic(char const*)>
c0012d60:	83 c4 10             	add    esp,0x10
c0012d63:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012d67:	eb 12                	jmp    c0012d7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d69:	01 c1                	add    ecx,eax
c0012d6b:	84 db                	test   bl,bl
c0012d6d:	75 0c                	jne    c0012d7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d6f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d73:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012d77:	77 02                	ja     c0012d7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d79:	01 d1                	add    ecx,edx
c0012d7b:	89 0e                	mov    DWORD PTR [esi],ecx
c0012d7d:	e9 ea 00 00 00       	jmp    c0012e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d82:	80 fb 02             	cmp    bl,0x2
c0012d85:	75 7c                	jne    c0012e03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012d87:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012d8e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012d92:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012d96:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012d9c:	74 20                	je     c0012dbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012d9e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012da4:	74 18                	je     c0012dbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012da6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012daa:	b9 0a 00 00 00       	mov    ecx,0xa
c0012daf:	66 83 f8 0e          	cmp    ax,0xe
c0012db3:	77 03                	ja     c0012db8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012db5:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012db8:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012dbc:	76 1f                	jbe    c0012ddd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012dbe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012dc2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012dc7:	74 66                	je     c0012e2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012dc9:	83 ec 0c             	sub    esp,0xc
c0012dcc:	68 fa e9 01 c0       	push   0xc001e9fa
c0012dd1:	e8 15 d9 ff ff       	call   c00106eb <KePanic(char const*)>
c0012dd6:	83 c4 10             	add    esp,0x10
c0012dd9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012ddd:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ddf:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012de4:	74 13                	je     c0012df9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012de6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012dea:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012df1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012df5:	01 c8                	add    eax,ecx
c0012df7:	eb 04                	jmp    c0012dfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012df9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012dfd:	01 c2                	add    edx,eax
c0012dff:	89 16                	mov    DWORD PTR [esi],edx
c0012e01:	eb 69                	jmp    c0012e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012e03:	0f b6 db             	movzx  ebx,bl
c0012e06:	50                   	push   eax
c0012e07:	50                   	push   eax
c0012e08:	53                   	push   ebx
c0012e09:	68 16 ea 01 c0       	push   0xc001ea16
c0012e0e:	e8 09 7d ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e1b:	74 12                	je     c0012e2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e1d:	83 ec 0c             	sub    esp,0xc
c0012e20:	68 21 ea 01 c0       	push   0xc001ea21
c0012e25:	e8 c1 d8 ff ff       	call   c00106eb <KePanic(char const*)>
c0012e2a:	83 c4 10             	add    esp,0x10
c0012e2d:	eb 3d                	jmp    c0012e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012e2f:	83 ec 0c             	sub    esp,0xc
c0012e32:	55                   	push   ebp
c0012e33:	e8 78 83 ff ff       	call   c000b1b0 <File::close()>
c0012e38:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e41:	59                   	pop    ecx
c0012e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e46:	e8 4a 50 ff ff       	call   c0007e95 <free>
c0012e4b:	5b                   	pop    ebx
c0012e4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e50:	e8 40 50 ff ff       	call   c0007e95 <free>
c0012e55:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012e58:	e8 38 50 ff ff       	call   c0007e95 <free>
c0012e5d:	5e                   	pop    esi
c0012e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e62:	e8 2e 50 ff ff       	call   c0007e95 <free>
c0012e67:	83 c4 10             	add    esp,0x10
c0012e6a:	eb 21                	jmp    c0012e8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012e6c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012e70:	e9 76 fd ff ff       	jmp    c0012beb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012e75:	83 ec 0c             	sub    esp,0xc
c0012e78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e7c:	e8 14 50 ff ff       	call   c0007e95 <free>
c0012e81:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012e85:	83 c4 10             	add    esp,0x10
c0012e88:	e9 eb fc ff ff       	jmp    c0012b78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012e8d:	31 c0                	xor    eax,eax
c0012e8f:	eb 33                	jmp    c0012ec4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012e91:	83 ec 0c             	sub    esp,0xc
c0012e94:	55                   	push   ebp
c0012e95:	e8 16 83 ff ff       	call   c000b1b0 <File::close()>
c0012e9a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e9d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ea0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ea3:	58                   	pop    eax
c0012ea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ea8:	e8 e8 4f ff ff       	call   c0007e95 <free>
c0012ead:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012eb0:	e8 e0 4f ff ff       	call   c0007e95 <free>
c0012eb5:	5a                   	pop    edx
c0012eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eba:	e8 d6 4f ff ff       	call   c0007e95 <free>
c0012ebf:	83 c4 10             	add    esp,0x10
c0012ec2:	b0 01                	mov    al,0x1
c0012ec4:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012eca:	5b                   	pop    ebx
c0012ecb:	5e                   	pop    esi
c0012ecc:	5f                   	pop    edi
c0012ecd:	5d                   	pop    ebp
c0012ece:	c3                   	ret    

c0012ecf <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012ecf:	56                   	push   esi
c0012ed0:	31 d2                	xor    edx,edx
c0012ed2:	53                   	push   ebx
c0012ed3:	8b 1d c0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236c0
c0012ed9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012edd:	39 d3                	cmp    ebx,edx
c0012edf:	7e 1b                	jle    c0012efc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012ee1:	8b 04 95 e0 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc720]
c0012ee8:	39 c8                	cmp    eax,ecx
c0012eea:	77 0d                	ja     c0012ef9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012eec:	8b 34 95 e0 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc920]
c0012ef3:	01 c6                	add    esi,eax
c0012ef5:	39 ce                	cmp    esi,ecx
c0012ef7:	77 05                	ja     c0012efe <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012ef9:	42                   	inc    edx
c0012efa:	eb e1                	jmp    c0012edd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012efc:	31 c0                	xor    eax,eax
c0012efe:	5b                   	pop    ebx
c0012eff:	5e                   	pop    esi
c0012f00:	c3                   	ret    

c0012f01 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012f01:	53                   	push   ebx
c0012f02:	31 c0                	xor    eax,eax
c0012f04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012f08:	8b 1d c0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236c0
c0012f0e:	39 c3                	cmp    ebx,eax
c0012f10:	7e 22                	jle    c0012f34 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012f12:	8b 14 85 e0 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc720]
c0012f19:	39 ca                	cmp    edx,ecx
c0012f1b:	77 14                	ja     c0012f31 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012f1d:	03 14 85 e0 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc920]
c0012f24:	39 ca                	cmp    edx,ecx
c0012f26:	76 09                	jbe    c0012f31 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012f28:	8b 04 85 e0 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc520]
c0012f2f:	eb 05                	jmp    c0012f36 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012f31:	40                   	inc    eax
c0012f32:	eb da                	jmp    c0012f0e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012f34:	31 c0                	xor    eax,eax
c0012f36:	5b                   	pop    ebx
c0012f37:	c3                   	ret    

c0012f38 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012f38:	53                   	push   ebx
c0012f39:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f3d:	53                   	push   ebx
c0012f3e:	e8 8c ff ff ff       	call   c0012ecf <Thr::getDriverBaseFromAddress(unsigned long)>
c0012f43:	5a                   	pop    edx
c0012f44:	31 d2                	xor    edx,edx
c0012f46:	85 c0                	test   eax,eax
c0012f48:	74 04                	je     c0012f4e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012f4a:	89 da                	mov    edx,ebx
c0012f4c:	29 c2                	sub    edx,eax
c0012f4e:	89 d0                	mov    eax,edx
c0012f50:	5b                   	pop    ebx
c0012f51:	c3                   	ret    

c0012f52 <Thr::loadDLL(char const*, bool)>:
c0012f52:	55                   	push   ebp
c0012f53:	57                   	push   edi
c0012f54:	56                   	push   esi
c0012f55:	53                   	push   ebx
c0012f56:	81 ec 34 01 00 00    	sub    esp,0x134
c0012f5c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012f63:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012f6a:	56                   	push   esi
c0012f6b:	68 39 ea 01 c0       	push   0xc001ea39
c0012f70:	e8 a7 7b ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0012f75:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f7c:	e8 04 4f ff ff       	call   c0007e85 <malloc>
c0012f81:	83 c4 0c             	add    esp,0xc
c0012f84:	89 c3                	mov    ebx,eax
c0012f86:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0012f8c:	56                   	push   esi
c0012f8d:	50                   	push   eax
c0012f8e:	e8 ff 80 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0012f93:	83 c4 10             	add    esp,0x10
c0012f96:	85 db                	test   ebx,ebx
c0012f98:	75 3c                	jne    c0012fd6 <Thr::loadDLL(char const*, bool)+0x84>
c0012f9a:	89 f8                	mov    eax,edi
c0012f9c:	84 c0                	test   al,al
c0012f9e:	0f 84 d2 01 00 00    	je     c0013176 <Thr::loadDLL(char const*, bool)+0x224>
c0012fa4:	55                   	push   ebp
c0012fa5:	55                   	push   ebp
c0012fa6:	68 4a ea 01 c0       	push   0xc001ea4a
c0012fab:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012faf:	55                   	push   ebp
c0012fb0:	e8 6b d6 fe ff       	call   c0000620 <strcpy>
c0012fb5:	58                   	pop    eax
c0012fb6:	5a                   	pop    edx
c0012fb7:	56                   	push   esi
c0012fb8:	55                   	push   ebp
c0012fb9:	e8 22 d8 fe ff       	call   c00007e0 <strcat>
c0012fbe:	59                   	pop    ecx
c0012fbf:	58                   	pop    eax
c0012fc0:	68 5d ea 01 c0       	push   0xc001ea5d
c0012fc5:	55                   	push   ebp
c0012fc6:	e8 15 d8 fe ff       	call   c00007e0 <strcat>
c0012fcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012fce:	e8 18 d7 ff ff       	call   c00106eb <KePanic(char const*)>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	51                   	push   ecx
c0012fd7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012fdb:	50                   	push   eax
c0012fdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012fe0:	50                   	push   eax
c0012fe1:	53                   	push   ebx
c0012fe2:	e8 17 84 ff ff       	call   c000b3fe <File::stat(unsigned long long*, bool*)>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	85 db                	test   ebx,ebx
c0012fec:	74 0c                	je     c0012ffa <Thr::loadDLL(char const*, bool)+0xa8>
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ff3:	53                   	push   ebx
c0012ff4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012fff:	75 0a                	jne    c001300b <Thr::loadDLL(char const*, bool)+0xb9>
c0013001:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013005:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013009:	75 3c                	jne    c0013047 <Thr::loadDLL(char const*, bool)+0xf5>
c001300b:	89 f8                	mov    eax,edi
c001300d:	84 c0                	test   al,al
c001300f:	0f 84 49 01 00 00    	je     c001315e <Thr::loadDLL(char const*, bool)+0x20c>
c0013015:	51                   	push   ecx
c0013016:	51                   	push   ecx
c0013017:	68 4a ea 01 c0       	push   0xc001ea4a
c001301c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013020:	53                   	push   ebx
c0013021:	e8 fa d5 fe ff       	call   c0000620 <strcpy>
c0013026:	5d                   	pop    ebp
c0013027:	58                   	pop    eax
c0013028:	56                   	push   esi
c0013029:	53                   	push   ebx
c001302a:	e8 b1 d7 fe ff       	call   c00007e0 <strcat>
c001302f:	58                   	pop    eax
c0013030:	5a                   	pop    edx
c0013031:	68 5d ea 01 c0       	push   0xc001ea5d
c0013036:	53                   	push   ebx
c0013037:	e8 a4 d7 fe ff       	call   c00007e0 <strcat>
c001303c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001303f:	e8 a7 d6 ff ff       	call   c00106eb <KePanic(char const*)>
c0013044:	83 c4 10             	add    esp,0x10
c0013047:	52                   	push   edx
c0013048:	6a 03                	push   0x3
c001304a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001304e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013052:	05 ff 0f 00 00       	add    eax,0xfff
c0013057:	83 d2 00             	adc    edx,0x0
c001305a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001305e:	50                   	push   eax
c001305f:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0013065:	e8 f8 6f ff ff       	call   c000a062 <VAS::allocatePages(int, int)>
c001306a:	59                   	pop    ecx
c001306b:	89 c3                	mov    ebx,eax
c001306d:	5d                   	pop    ebp
c001306e:	50                   	push   eax
c001306f:	68 b2 d8 01 c0       	push   0xc001d8b2
c0013074:	e8 a3 7a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0013079:	89 34 24             	mov    DWORD PTR [esp],esi
c001307c:	e8 df d4 fe ff       	call   c0000560 <strlen>
c0013081:	8b 2d c0 36 02 c0    	mov    ebp,DWORD PTR ds:0xc00236c0
c0013087:	40                   	inc    eax
c0013088:	89 04 24             	mov    DWORD PTR [esp],eax
c001308b:	e8 f5 4d ff ff       	call   c0007e85 <malloc>
c0013090:	89 04 ad e0 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc520],eax
c0013097:	58                   	pop    eax
c0013098:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c001309d:	5a                   	pop    edx
c001309e:	56                   	push   esi
c001309f:	ff 34 85 e0 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc520]
c00130a6:	e8 75 d5 fe ff       	call   c0000620 <strcpy>
c00130ab:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c00130b0:	8d 50 01             	lea    edx,[eax+0x1]
c00130b3:	89 1c 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],ebx
c00130ba:	89 15 c0 36 02 c0    	mov    DWORD PTR ds:0xc00236c0,edx
c00130c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00130c4:	83 c4 0c             	add    esp,0xc
c00130c7:	89 14 85 e0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc920],edx
c00130ce:	6a 01                	push   0x1
c00130d0:	53                   	push   ebx
c00130d1:	56                   	push   esi
c00130d2:	e8 c2 f6 ff ff       	call   c0012799 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00130d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130e3:	0f 85 89 00 00 00    	jne    c0013172 <Thr::loadDLL(char const*, bool)+0x220>
c00130e9:	89 f8                	mov    eax,edi
c00130eb:	84 c0                	test   al,al
c00130ed:	74 73                	je     c0013162 <Thr::loadDLL(char const*, bool)+0x210>
c00130ef:	83 ec 0c             	sub    esp,0xc
c00130f2:	68 5f ea 01 c0       	push   0xc001ea5f
c00130f7:	e8 ef d5 ff ff       	call   c00106eb <KePanic(char const*)>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	eb 61                	jmp    c0013162 <Thr::loadDLL(char const*, bool)+0x210>
c0013101:	50                   	push   eax
c0013102:	50                   	push   eax
c0013103:	89 e8                	mov    eax,ebp
c0013105:	c1 e0 0c             	shl    eax,0xc
c0013108:	01 d8                	add    eax,ebx
c001310a:	50                   	push   eax
c001310b:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c0013111:	e8 c4 6a ff ff       	call   c0009bda <VAS::getPageTableEntry(unsigned long)>
c0013116:	83 c4 10             	add    esp,0x10
c0013119:	8b 00                	mov    eax,DWORD PTR [eax]
c001311b:	a8 60                	test   al,0x60
c001311d:	75 11                	jne    c0013130 <Thr::loadDLL(char const*, bool)+0x1de>
c001311f:	83 ec 0c             	sub    esp,0xc
c0013122:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013127:	50                   	push   eax
c0013128:	e8 ce 4f ff ff       	call   c00080fb <Phys::freePage(unsigned long)>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	45                   	inc    ebp
c0013131:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013135:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013139:	05 ff 0f 00 00       	add    eax,0xfff
c001313e:	bf 00 00 00 00       	mov    edi,0x0
c0013143:	83 d2 00             	adc    edx,0x0
c0013146:	0f ac d0 0c          	shrd   eax,edx,0xc
c001314a:	c1 ea 0c             	shr    edx,0xc
c001314d:	39 c5                	cmp    ebp,eax
c001314f:	89 d1                	mov    ecx,edx
c0013151:	89 f8                	mov    eax,edi
c0013153:	19 c8                	sbb    eax,ecx
c0013155:	72 aa                	jb     c0013101 <Thr::loadDLL(char const*, bool)+0x1af>
c0013157:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001315c:	75 18                	jne    c0013176 <Thr::loadDLL(char const*, bool)+0x224>
c001315e:	31 db                	xor    ebx,ebx
c0013160:	eb 14                	jmp    c0013176 <Thr::loadDLL(char const*, bool)+0x224>
c0013162:	83 ec 0c             	sub    esp,0xc
c0013165:	68 7e ea 01 c0       	push   0xc001ea7e
c001316a:	e8 7c d5 ff ff       	call   c00106eb <KePanic(char const*)>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	31 ed                	xor    ebp,ebp
c0013174:	eb bb                	jmp    c0013131 <Thr::loadDLL(char const*, bool)+0x1df>
c0013176:	81 c4 2c 01 00 00    	add    esp,0x12c
c001317c:	89 d8                	mov    eax,ebx
c001317e:	5b                   	pop    ebx
c001317f:	5e                   	pop    esi
c0013180:	5f                   	pop    edi
c0013181:	5d                   	pop    ebp
c0013182:	c3                   	ret    

c0013183 <Thr::executeDLL(unsigned long, void*)>:
c0013183:	56                   	push   esi
c0013184:	53                   	push   ebx
c0013185:	52                   	push   edx
c0013186:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001318a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001318e:	85 db                	test   ebx,ebx
c0013190:	75 10                	jne    c00131a2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013192:	83 ec 0c             	sub    esp,0xc
c0013195:	68 9a ea 01 c0       	push   0xc001ea9a
c001319a:	e8 4c d5 ff ff       	call   c00106eb <KePanic(char const*)>
c001319f:	83 c4 10             	add    esp,0x10
c00131a2:	50                   	push   eax
c00131a3:	50                   	push   eax
c00131a4:	53                   	push   ebx
c00131a5:	68 c4 ea 01 c0       	push   0xc001eac4
c00131aa:	e8 6d 79 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00131af:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00131b3:	89 d8                	mov    eax,ebx
c00131b5:	83 c4 14             	add    esp,0x14
c00131b8:	5b                   	pop    ebx
c00131b9:	5e                   	pop    esi
c00131ba:	ff e0                	jmp    eax

c00131bc <userModeEntryPoint(void*)>:
c00131bc:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00131c1:	48                   	dec    eax
c00131c2:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00131c7:	75 03                	jne    c00131cc <userModeEntryPoint(void*)+0x10>
c00131c9:	fb                   	sti    
c00131ca:	66 90                	xchg   ax,ax
c00131cc:	fb                   	sti    
c00131cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131d5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00131db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00131df:	e9 7b d0 fe ff       	jmp    c000025f <goToUsermode>

c00131e4 <changeTSS>:
c00131e4:	83 ec 14             	sub    esp,0x14
c00131e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131ec:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00131ef:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00131f4:	c1 e2 15             	shl    edx,0x15
c00131f7:	29 d0                	sub    eax,edx
c00131f9:	50                   	push   eax
c00131fa:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00131ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013205:	05 7c 11 00 00       	add    eax,0x117c
c001320a:	50                   	push   eax
c001320b:	e8 0c 60 ff ff       	call   c000921c <TSS::setESP(unsigned long)>
c0013210:	83 c4 1c             	add    esp,0x1c
c0013213:	c3                   	ret    

c0013214 <switchToThread(ThreadControlBlock*)>:
c0013214:	57                   	push   edi
c0013215:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c001321a:	56                   	push   esi
c001321b:	85 c0                	test   eax,eax
c001321d:	53                   	push   ebx
c001321e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013222:	0f 85 90 00 00 00    	jne    c00132b8 <switchToThread(ThreadControlBlock*)+0xa4>
c0013228:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001322b:	80 fa ff             	cmp    dl,0xff
c001322e:	0f 84 80 00 00 00    	je     c00132b4 <switchToThread(ThreadControlBlock*)+0xa0>
c0013234:	81 e2 ff 00 00 00    	and    edx,0xff
c001323a:	b8 00 04 00 00       	mov    eax,0x400
c001323f:	29 d0                	sub    eax,edx
c0013241:	d1 f8                	sar    eax,1
c0013243:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013246:	66 90                	xchg   ax,ax
c0013248:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001324b:	e8 e5 25 00 00       	call   c0015835 <HalQueryPerformanceCounter()>
c0013250:	a3 c8 3e 02 c0       	mov    ds:0xc0023ec8,eax
c0013255:	89 15 cc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ecc,edx
c001325b:	89 c6                	mov    esi,eax
c001325d:	89 d7                	mov    edi,edx
c001325f:	2b 35 b8 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023eb8
c0013265:	a3 b8 3e 02 c0       	mov    ds:0xc0023eb8,eax
c001326a:	1b 3d bc 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023ebc
c0013270:	89 35 c0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec0,esi
c0013276:	89 3d c4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec4,edi
c001327c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013282:	89 15 bc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ebc,edx
c0013288:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001328b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001328e:	01 c6                	add    esi,eax
c0013290:	11 d7                	adc    edi,edx
c0013292:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013295:	83 ec 0c             	sub    esp,0xc
c0013298:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001329b:	53                   	push   ebx
c001329c:	e8 f6 cf fe ff       	call   c0000297 <switchToThreadASM>
c00132a1:	0f 20 c0             	mov    eax,cr0
c00132a4:	83 c8 08             	or     eax,0x8
c00132a7:	0f 22 c0             	mov    cr0,eax
c00132aa:	83 c4 10             	add    esp,0x10
c00132ad:	5b                   	pop    ebx
c00132ae:	5e                   	pop    esi
c00132af:	5f                   	pop    edi
c00132b0:	c3                   	ret    
c00132b1:	8d 76 00             	lea    esi,[esi+0x0]
c00132b4:	31 c0                	xor    eax,eax
c00132b6:	eb 90                	jmp    c0013248 <switchToThread(ThreadControlBlock*)+0x34>
c00132b8:	5b                   	pop    ebx
c00132b9:	c7 05 80 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x1
c00132c3:	5e                   	pop    esi
c00132c4:	5f                   	pop    edi
c00132c5:	c3                   	ret    
c00132c6:	66 90                	xchg   ax,ax

c00132c8 <Process::addArgs(char**)>:
c00132c8:	57                   	push   edi
c00132c9:	56                   	push   esi
c00132ca:	53                   	push   ebx
c00132cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132d3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00132dd:	85 ff                	test   edi,edi
c00132df:	74 43                	je     c0013324 <Process::addArgs(char**)+0x5c>
c00132e1:	8b 07                	mov    eax,DWORD PTR [edi]
c00132e3:	85 c0                	test   eax,eax
c00132e5:	74 3d                	je     c0013324 <Process::addArgs(char**)+0x5c>
c00132e7:	31 db                	xor    ebx,ebx
c00132e9:	8d 76 00             	lea    esi,[esi+0x0]
c00132ec:	83 ec 0c             	sub    esp,0xc
c00132ef:	50                   	push   eax
c00132f0:	e8 6b d2 fe ff       	call   c0000560 <strlen>
c00132f5:	40                   	inc    eax
c00132f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00132f9:	e8 87 4b ff ff       	call   c0007e85 <malloc>
c00132fe:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013305:	5a                   	pop    edx
c0013306:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013309:	59                   	pop    ecx
c001330a:	43                   	inc    ebx
c001330b:	52                   	push   edx
c001330c:	50                   	push   eax
c001330d:	e8 0e d3 fe ff       	call   c0000620 <strcpy>
c0013312:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013318:	83 c4 10             	add    esp,0x10
c001331b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001331e:	85 c0                	test   eax,eax
c0013320:	75 ca                	jne    c00132ec <Process::addArgs(char**)+0x24>
c0013322:	66 90                	xchg   ax,ax
c0013324:	5b                   	pop    ebx
c0013325:	5e                   	pop    esi
c0013326:	5f                   	pop    edi
c0013327:	c3                   	ret    

c0013328 <Process::Process(char const*, Process*, char**)>:
c0013328:	56                   	push   esi
c0013329:	53                   	push   ebx
c001332a:	83 ec 14             	sub    esp,0x14
c001332d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013331:	05 0c 02 00 00       	add    eax,0x20c
c0013336:	bb 07 00 00 00       	mov    ebx,0x7
c001333b:	89 c6                	mov    esi,eax
c001333d:	8d 76 00             	lea    esi,[esi+0x0]
c0013340:	85 db                	test   ebx,ebx
c0013342:	78 14                	js     c0013358 <Process::Process(char const*, Process*, char**)+0x30>
c0013344:	83 ec 0c             	sub    esp,0xc
c0013347:	56                   	push   esi
c0013348:	e8 df 97 00 00       	call   c001cb2c <ThreadControlBlock::ThreadControlBlock()>
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	83 c6 5f             	add    esi,0x5f
c0013353:	4b                   	dec    ebx
c0013354:	eb ea                	jmp    c0013340 <Process::Process(char const*, Process*, char**)+0x18>
c0013356:	66 90                	xchg   ax,ax
c0013358:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001335c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013363:	83 ec 0c             	sub    esp,0xc
c0013366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001336a:	e8 05 d2 ff ff       	call   c0010574 <Krnl::newProcessEnv(Process*)>
c001336f:	83 c4 10             	add    esp,0x10
c0013372:	89 c2                	mov    edx,eax
c0013374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013378:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001337e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013382:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001338b:	a1 b0 f9 01 c0       	mov    eax,ds:0xc001f9b0
c0013390:	8d 50 01             	lea    edx,[eax+0x1]
c0013393:	89 15 b0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9b0,edx
c0013399:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001339d:	89 02                	mov    DWORD PTR [edx],eax
c001339f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00133a7:	83 ec 0c             	sub    esp,0xc
c00133aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133ae:	e8 d2 4a ff ff       	call   c0007e85 <malloc>
c00133b3:	83 c4 10             	add    esp,0x10
c00133b6:	89 c3                	mov    ebx,eax
c00133b8:	83 ec 08             	sub    esp,0x8
c00133bb:	6a 00                	push   0x0
c00133bd:	53                   	push   ebx
c00133be:	e8 49 70 ff ff       	call   c000a40c <VAS::VAS(bool)>
c00133c3:	83 c4 10             	add    esp,0x10
c00133c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ca:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00133d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133d4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00133de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00133e6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00133ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00133f6:	85 c0                	test   eax,eax
c00133f8:	74 42                	je     c001343c <Process::Process(char const*, Process*, char**)+0x114>
c00133fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133fe:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013404:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001340a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001340e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013418:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001341e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013428:	05 0c 01 00 00       	add    eax,0x10c
c001342d:	83 ec 08             	sub    esp,0x8
c0013430:	52                   	push   edx
c0013431:	50                   	push   eax
c0013432:	e8 e9 d1 fe ff       	call   c0000620 <strcpy>
c0013437:	83 c4 10             	add    esp,0x10
c001343a:	eb 64                	jmp    c00134a0 <Process::Process(char const*, Process*, char**)+0x178>
c001343c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013444:	83 ec 0c             	sub    esp,0xc
c0013447:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001344b:	e8 35 4a ff ff       	call   c0007e85 <malloc>
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	89 c3                	mov    ebx,eax
c0013455:	83 ec 08             	sub    esp,0x8
c0013458:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001345c:	53                   	push   ebx
c001345d:	e8 60 5b ff ff       	call   c0008fc2 <VgaText::VgaText(char const*)>
c0013462:	83 c4 10             	add    esp,0x10
c0013465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013469:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001346f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013473:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013479:	83 ec 0c             	sub    esp,0xc
c001347c:	50                   	push   eax
c001347d:	e8 e0 53 ff ff       	call   c0008862 <addToTerminalCycle(VgaText*)>
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013489:	05 0c 01 00 00       	add    eax,0x10c
c001348e:	83 ec 08             	sub    esp,0x8
c0013491:	68 e3 ea 01 c0       	push   0xc001eae3
c0013496:	50                   	push   eax
c0013497:	e8 84 d1 fe ff       	call   c0000620 <strcpy>
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	90                   	nop
c00134a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134a4:	83 c0 0c             	add    eax,0xc
c00134a7:	83 ec 08             	sub    esp,0x8
c00134aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134ae:	50                   	push   eax
c00134af:	e8 6c d1 fe ff       	call   c0000620 <strcpy>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	83 ec 08             	sub    esp,0x8
c00134ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00134be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134c2:	e8 01 fe ff ff       	call   c00132c8 <Process::addArgs(char**)>
c00134c7:	83 c4 10             	add    esp,0x10
c00134ca:	83 ec 08             	sub    esp,0x8
c00134cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134d5:	e8 89 ed ff ff       	call   c0012263 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134e1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00134e5:	83 f0 01             	xor    eax,0x1
c00134e8:	88 c2                	mov    dl,al
c00134ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134ee:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00134f4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00134f8:	25 ff 00 00 00       	and    eax,0xff
c00134fd:	83 ec 08             	sub    esp,0x8
c0013500:	50                   	push   eax
c0013501:	68 3c eb 01 c0       	push   0xc001eb3c
c0013506:	e8 11 76 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001350b:	83 c4 10             	add    esp,0x10
c001350e:	90                   	nop
c001350f:	83 c4 14             	add    esp,0x14
c0013512:	5b                   	pop    ebx
c0013513:	5e                   	pop    esi
c0013514:	c3                   	ret    
c0013515:	90                   	nop
c0013516:	66 90                	xchg   ax,ax

c0013518 <Process::Process(bool, char const*, Process*, char**)>:
c0013518:	56                   	push   esi
c0013519:	53                   	push   ebx
c001351a:	83 ec 24             	sub    esp,0x24
c001351d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013521:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013525:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013529:	05 0c 02 00 00       	add    eax,0x20c
c001352e:	bb 07 00 00 00       	mov    ebx,0x7
c0013533:	89 c6                	mov    esi,eax
c0013535:	8d 76 00             	lea    esi,[esi+0x0]
c0013538:	85 db                	test   ebx,ebx
c001353a:	78 14                	js     c0013550 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001353c:	83 ec 0c             	sub    esp,0xc
c001353f:	56                   	push   esi
c0013540:	e8 e7 95 00 00       	call   c001cb2c <ThreadControlBlock::ThreadControlBlock()>
c0013545:	83 c4 10             	add    esp,0x10
c0013548:	83 c6 5f             	add    esi,0x5f
c001354b:	4b                   	dec    ebx
c001354c:	eb ea                	jmp    c0013538 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001354e:	66 90                	xchg   ax,ax
c0013550:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013554:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001355b:	83 ec 0c             	sub    esp,0xc
c001355e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013562:	e8 0d d0 ff ff       	call   c0010574 <Krnl::newProcessEnv(Process*)>
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	89 c2                	mov    edx,eax
c001356c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013570:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013576:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001357a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013583:	a1 b0 f9 01 c0       	mov    eax,ds:0xc001f9b0
c0013588:	8d 50 01             	lea    edx,[eax+0x1]
c001358b:	89 15 b0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9b0,edx
c0013591:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013595:	89 02                	mov    DWORD PTR [edx],eax
c0013597:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001359f:	83 ec 0c             	sub    esp,0xc
c00135a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00135a6:	e8 da 48 ff ff       	call   c0007e85 <malloc>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	89 c3                	mov    ebx,eax
c00135b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00135b4:	25 ff 00 00 00       	and    eax,0xff
c00135b9:	83 ec 08             	sub    esp,0x8
c00135bc:	50                   	push   eax
c00135bd:	53                   	push   ebx
c00135be:	e8 49 6e ff ff       	call   c000a40c <VAS::VAS(bool)>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135ca:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00135d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00135de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00135e6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00135ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135f6:	85 c0                	test   eax,eax
c00135f8:	74 42                	je     c001363c <Process::Process(bool, char const*, Process*, char**)+0x124>
c00135fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135fe:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013604:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001360a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001360e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013614:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013618:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001361e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013624:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013628:	05 0c 01 00 00       	add    eax,0x10c
c001362d:	83 ec 08             	sub    esp,0x8
c0013630:	52                   	push   edx
c0013631:	50                   	push   eax
c0013632:	e8 e9 cf fe ff       	call   c0000620 <strcpy>
c0013637:	83 c4 10             	add    esp,0x10
c001363a:	eb 64                	jmp    c00136a0 <Process::Process(bool, char const*, Process*, char**)+0x188>
c001363c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013644:	83 ec 0c             	sub    esp,0xc
c0013647:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001364b:	e8 35 48 ff ff       	call   c0007e85 <malloc>
c0013650:	83 c4 10             	add    esp,0x10
c0013653:	89 c3                	mov    ebx,eax
c0013655:	83 ec 08             	sub    esp,0x8
c0013658:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001365c:	53                   	push   ebx
c001365d:	e8 60 59 ff ff       	call   c0008fc2 <VgaText::VgaText(char const*)>
c0013662:	83 c4 10             	add    esp,0x10
c0013665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013669:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001366f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013673:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013679:	83 ec 0c             	sub    esp,0xc
c001367c:	50                   	push   eax
c001367d:	e8 e0 51 ff ff       	call   c0008862 <addToTerminalCycle(VgaText*)>
c0013682:	83 c4 10             	add    esp,0x10
c0013685:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013689:	05 0c 01 00 00       	add    eax,0x10c
c001368e:	83 ec 08             	sub    esp,0x8
c0013691:	68 e3 ea 01 c0       	push   0xc001eae3
c0013696:	50                   	push   eax
c0013697:	e8 84 cf fe ff       	call   c0000620 <strcpy>
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	90                   	nop
c00136a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136a4:	83 c0 0c             	add    eax,0xc
c00136a7:	83 ec 08             	sub    esp,0x8
c00136aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00136ae:	50                   	push   eax
c00136af:	e8 6c cf fe ff       	call   c0000620 <strcpy>
c00136b4:	83 c4 10             	add    esp,0x10
c00136b7:	83 ec 08             	sub    esp,0x8
c00136ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00136be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136c2:	e8 01 fc ff ff       	call   c00132c8 <Process::addArgs(char**)>
c00136c7:	83 c4 10             	add    esp,0x10
c00136ca:	90                   	nop
c00136cb:	83 c4 24             	add    esp,0x24
c00136ce:	5b                   	pop    ebx
c00136cf:	5e                   	pop    esi
c00136d0:	c3                   	ret    
c00136d1:	8d 76 00             	lea    esi,[esi+0x0]

c00136d4 <taskStartupFunction>:
c00136d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136d9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00136dc:	c3                   	ret    
c00136dd:	90                   	nop
c00136de:	66 90                	xchg   ax,ax

c00136e0 <Semaphore::Semaphore(int)>:
c00136e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136e8:	89 10                	mov    DWORD PTR [eax],edx
c00136ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136ee:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00136f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013704:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001370b:	90                   	nop
c001370c:	c3                   	ret    
c001370d:	90                   	nop
c001370e:	66 90                	xchg   ax,ax

c0013710 <Mutex::Mutex()>:
c0013710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013714:	6a 01                	push   0x1
c0013716:	50                   	push   eax
c0013717:	e8 c4 ff ff ff       	call   c00136e0 <Semaphore::Semaphore(int)>
c001371c:	83 c4 08             	add    esp,0x8
c001371f:	90                   	nop
c0013720:	c3                   	ret    
c0013721:	90                   	nop
c0013722:	66 90                	xchg   ax,ax

c0013724 <Process::createThread(void (*)(void*), void*, int)>:
c0013724:	57                   	push   edi
c0013725:	31 c9                	xor    ecx,ecx
c0013727:	56                   	push   esi
c0013728:	53                   	push   ebx
c0013729:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001372d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013734:	89 f2                	mov    edx,esi
c0013736:	66 90                	xchg   ax,ax
c0013738:	31 c0                	xor    eax,eax
c001373a:	66 89 d0             	mov    ax,dx
c001373d:	83 e2 01             	and    edx,0x1
c0013740:	74 12                	je     c0013754 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013742:	d1 f8                	sar    eax,1
c0013744:	41                   	inc    ecx
c0013745:	89 c2                	mov    edx,eax
c0013747:	83 f9 10             	cmp    ecx,0x10
c001374a:	75 ec                	jne    c0013738 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001374c:	31 db                	xor    ebx,ebx
c001374e:	89 d8                	mov    eax,ebx
c0013750:	5b                   	pop    ebx
c0013751:	5e                   	pop    esi
c0013752:	5f                   	pop    edi
c0013753:	c3                   	ret    
c0013754:	b8 01 00 00 00       	mov    eax,0x1
c0013759:	d3 e0                	shl    eax,cl
c001375b:	09 c6                	or     esi,eax
c001375d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013760:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013767:	01 c0                	add    eax,eax
c0013769:	01 c8                	add    eax,ecx
c001376b:	8d 04 80             	lea    eax,[eax+eax*4]
c001376e:	01 d8                	add    eax,ebx
c0013770:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013777:	75 0b                	jne    c0013784 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013779:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013783:	90                   	nop
c0013784:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001378a:	83 ec 08             	sub    esp,0x8
c001378d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013790:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013793:	01 c0                	add    eax,eax
c0013795:	01 c8                	add    eax,ecx
c0013797:	8d 3c 80             	lea    edi,[eax+eax*4]
c001379a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001379d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00137a3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00137a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00137ad:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00137b3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00137b9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00137c0:	89 ca                	mov    edx,ecx
c00137c2:	f7 da                	neg    edx
c00137c4:	c1 e2 15             	shl    edx,0x15
c00137c7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00137cd:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00137d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137d7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00137e1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00137e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137eb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00137f1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00137fb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013805:	53                   	push   ebx
c0013806:	68 a4 3e 02 c0       	push   0xc0023ea4
c001380b:	e8 bc 90 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013810:	83 c4 10             	add    esp,0x10
c0013813:	89 d8                	mov    eax,ebx
c0013815:	5b                   	pop    ebx
c0013816:	5e                   	pop    esi
c0013817:	5f                   	pop    edi
c0013818:	c3                   	ret    
c0013819:	90                   	nop
c001381a:	66 90                	xchg   ax,ax

c001381c <Process::createUserThread()>:
c001381c:	83 ec 0c             	sub    esp,0xc
c001381f:	68 80 00 00 00       	push   0x80
c0013824:	6a 00                	push   0x0
c0013826:	68 bc 31 01 c0       	push   0xc00131bc
c001382b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001382f:	50                   	push   eax
c0013830:	e8 ef fe ff ff       	call   c0013724 <Process::createThread(void (*)(void*), void*, int)>
c0013835:	83 c4 1c             	add    esp,0x1c
c0013838:	c3                   	ret    
c0013839:	8d 76 00             	lea    esi,[esi+0x0]

c001383c <setupMultitasking(void (*)())>:
c001383c:	56                   	push   esi
c001383d:	53                   	push   ebx
c001383e:	53                   	push   ebx
c001383f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013843:	eb 13                	jmp    c0013858 <setupMultitasking(void (*)())+0x1c>
c0013845:	8d 76 00             	lea    esi,[esi+0x0]
c0013848:	83 ec 0c             	sub    esp,0xc
c001384b:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013850:	e8 bf 8f 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013855:	83 c4 10             	add    esp,0x10
c0013858:	83 ec 0c             	sub    esp,0xc
c001385b:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013860:	e8 8b 8f 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013865:	83 c4 10             	add    esp,0x10
c0013868:	84 c0                	test   al,al
c001386a:	74 dc                	je     c0013848 <setupMultitasking(void (*)())+0xc>
c001386c:	83 ec 0c             	sub    esp,0xc
c001386f:	68 1f 07 00 00       	push   0x71f
c0013874:	e8 0c 46 ff ff       	call   c0007e85 <malloc>
c0013879:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013880:	89 c3                	mov    ebx,eax
c0013882:	6a 00                	push   0x0
c0013884:	68 e7 ea 01 c0       	push   0xc001eae7
c0013889:	6a 01                	push   0x1
c001388b:	50                   	push   eax
c001388c:	e8 87 fc ff ff       	call   c0013518 <Process::Process(bool, char const*, Process*, char**)>
c0013891:	83 c4 14             	add    esp,0x14
c0013894:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001389a:	89 1d b0 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb0,ebx
c00138a0:	50                   	push   eax
c00138a1:	e8 19 52 ff ff       	call   c0008abf <setActiveTerminal(VgaText*)>
c00138a6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00138ae:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00138b8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00138be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00138c1:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00138cb:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00138d1:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00138d7:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00138e1:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00138eb:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00138f5:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00138fb:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013901:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001390b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013911:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001391b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013921:	5a                   	pop    edx
c0013922:	59                   	pop    ecx
c0013923:	68 e3 ea 01 c0       	push   0xc001eae3
c0013928:	50                   	push   eax
c0013929:	e8 f2 cc fe ff       	call   c0000620 <strcpy>
c001392e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013935:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013939:	83 c4 14             	add    esp,0x14
c001393c:	5b                   	pop    ebx
c001393d:	5e                   	pop    esi
c001393e:	e9 46 c9 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013943:	90                   	nop

c0013944 <schedule()>:
c0013944:	8b 15 84 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e84
c001394a:	85 d2                	test   edx,edx
c001394c:	74 0e                	je     c001395c <schedule()+0x18>
c001394e:	c7 05 80 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x1
c0013958:	c3                   	ret    
c0013959:	8d 76 00             	lea    esi,[esi+0x0]
c001395c:	53                   	push   ebx
c001395d:	83 ec 14             	sub    esp,0x14
c0013960:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013965:	e8 86 8e 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001396a:	83 c4 10             	add    esp,0x10
c001396d:	84 c0                	test   al,al
c001396f:	75 3b                	jne    c00139ac <schedule()+0x68>
c0013971:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013976:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013979:	4a                   	dec    edx
c001397a:	74 38                	je     c00139b4 <schedule()+0x70>
c001397c:	83 ec 0c             	sub    esp,0xc
c001397f:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013984:	e8 83 8e 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013989:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c0013990:	89 c3                	mov    ebx,eax
c0013992:	e8 7d 8e 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013997:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001399e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139a1:	e8 6e f8 ff ff       	call   c0013214 <switchToThread(ThreadControlBlock*)>
c00139a6:	83 c4 10             	add    esp,0x10
c00139a9:	8d 76 00             	lea    esi,[esi+0x0]
c00139ac:	83 c4 08             	add    esp,0x8
c00139af:	5b                   	pop    ebx
c00139b0:	c3                   	ret    
c00139b1:	8d 76 00             	lea    esi,[esi+0x0]
c00139b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00139bb:	83 ec 08             	sub    esp,0x8
c00139be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139c3:	50                   	push   eax
c00139c4:	68 a4 3e 02 c0       	push   0xc0023ea4
c00139c9:	e8 fe 8e 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	eb a9                	jmp    c001397c <schedule()+0x38>
c00139d3:	90                   	nop

c00139d4 <Semaphore::tryAcquire()>:
c00139d4:	53                   	push   ebx
c00139d5:	83 ec 08             	sub    esp,0x8
c00139d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139dc:	fa                   	cli    
c00139dd:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00139e2:	8d 50 01             	lea    edx,[eax+0x1]
c00139e5:	89 15 88 3e 02 c0    	mov    DWORD PTR ds:0xc0023e88,edx
c00139eb:	8b 15 84 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e84
c00139f1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00139f4:	89 1d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,ebx
c00139fa:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00139fd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00139ff:	7c 33                	jl     c0013a34 <Semaphore::tryAcquire()+0x60>
c0013a01:	89 15 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,edx
c0013a07:	85 d2                	test   edx,edx
c0013a09:	75 0d                	jne    c0013a18 <Semaphore::tryAcquire()+0x44>
c0013a0b:	8b 15 80 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e80
c0013a11:	85 d2                	test   edx,edx
c0013a13:	75 6b                	jne    c0013a80 <Semaphore::tryAcquire()+0xac>
c0013a15:	8d 76 00             	lea    esi,[esi+0x0]
c0013a18:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013a1d:	85 c0                	test   eax,eax
c0013a1f:	74 0b                	je     c0013a2c <Semaphore::tryAcquire()+0x58>
c0013a21:	8d 76 00             	lea    esi,[esi+0x0]
c0013a24:	31 c0                	xor    eax,eax
c0013a26:	83 c4 08             	add    esp,0x8
c0013a29:	5b                   	pop    ebx
c0013a2a:	c3                   	ret    
c0013a2b:	90                   	nop
c0013a2c:	fb                   	sti    
c0013a2d:	83 c4 08             	add    esp,0x8
c0013a30:	5b                   	pop    ebx
c0013a31:	c3                   	ret    
c0013a32:	66 90                	xchg   ax,ax
c0013a34:	43                   	inc    ebx
c0013a35:	89 15 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,edx
c0013a3b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013a3e:	85 d2                	test   edx,edx
c0013a40:	75 22                	jne    c0013a64 <Semaphore::tryAcquire()+0x90>
c0013a42:	8b 0d 80 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e80
c0013a48:	85 c9                	test   ecx,ecx
c0013a4a:	74 18                	je     c0013a64 <Semaphore::tryAcquire()+0x90>
c0013a4c:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013a56:	e8 e9 fe ff ff       	call   c0013944 <schedule()>
c0013a5b:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013a60:	48                   	dec    eax
c0013a61:	8d 76 00             	lea    esi,[esi+0x0]
c0013a64:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013a69:	85 c0                	test   eax,eax
c0013a6b:	75 0b                	jne    c0013a78 <Semaphore::tryAcquire()+0xa4>
c0013a6d:	fb                   	sti    
c0013a6e:	b0 01                	mov    al,0x1
c0013a70:	83 c4 08             	add    esp,0x8
c0013a73:	5b                   	pop    ebx
c0013a74:	c3                   	ret    
c0013a75:	8d 76 00             	lea    esi,[esi+0x0]
c0013a78:	b0 01                	mov    al,0x1
c0013a7a:	83 c4 08             	add    esp,0x8
c0013a7d:	5b                   	pop    ebx
c0013a7e:	c3                   	ret    
c0013a7f:	90                   	nop
c0013a80:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013a8a:	e8 b5 fe ff ff       	call   c0013944 <schedule()>
c0013a8f:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013a94:	48                   	dec    eax
c0013a95:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013a9a:	85 c0                	test   eax,eax
c0013a9c:	75 86                	jne    c0013a24 <Semaphore::tryAcquire()+0x50>
c0013a9e:	eb 8c                	jmp    c0013a2c <Semaphore::tryAcquire()+0x58>

c0013aa0 <Semaphore::assertLocked(char const*)>:
c0013aa0:	83 ec 0c             	sub    esp,0xc
c0013aa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa7:	fa                   	cli    
c0013aa8:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013aae:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013ab3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ab6:	89 0d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,ecx
c0013abc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013abe:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013ac1:	7c 29                	jl     c0013aec <Semaphore::assertLocked(char const*)+0x4c>
c0013ac3:	90                   	nop
c0013ac4:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0013ac9:	85 c0                	test   eax,eax
c0013acb:	75 0b                	jne    c0013ad8 <Semaphore::assertLocked(char const*)+0x38>
c0013acd:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0013ad2:	85 c0                	test   eax,eax
c0013ad4:	75 2e                	jne    c0013b04 <Semaphore::assertLocked(char const*)+0x64>
c0013ad6:	66 90                	xchg   ax,ax
c0013ad8:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013add:	48                   	dec    eax
c0013ade:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013ae3:	75 03                	jne    c0013ae8 <Semaphore::assertLocked(char const*)+0x48>
c0013ae5:	fb                   	sti    
c0013ae6:	66 90                	xchg   ax,ax
c0013ae8:	83 c4 0c             	add    esp,0xc
c0013aeb:	c3                   	ret    
c0013aec:	83 ec 0c             	sub    esp,0xc
c0013aef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013af3:	52                   	push   edx
c0013af4:	e8 f2 cb ff ff       	call   c00106eb <KePanic(char const*)>
c0013af9:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013afe:	83 c4 10             	add    esp,0x10
c0013b01:	48                   	dec    eax
c0013b02:	eb c0                	jmp    c0013ac4 <Semaphore::assertLocked(char const*)+0x24>
c0013b04:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013b0e:	e8 31 fe ff ff       	call   c0013944 <schedule()>
c0013b13:	eb c3                	jmp    c0013ad8 <Semaphore::assertLocked(char const*)+0x38>
c0013b15:	8d 76 00             	lea    esi,[esi+0x0]

c0013b18 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b24:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013b27:	e8 18 fe ff ff       	call   c0013944 <schedule()>
c0013b2c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013b31:	48                   	dec    eax
c0013b32:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013b37:	75 03                	jne    c0013b3c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013b39:	fb                   	sti    
c0013b3a:	66 90                	xchg   ax,ax
c0013b3c:	83 c4 0c             	add    esp,0xc
c0013b3f:	c3                   	ret    

c0013b40 <blockTask(TaskState)>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	fa                   	cli    
c0013b44:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013b4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b53:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013b56:	e8 e9 fd ff ff       	call   c0013944 <schedule()>
c0013b5b:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013b60:	48                   	dec    eax
c0013b61:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013b66:	75 04                	jne    c0013b6c <blockTask(TaskState)+0x2c>
c0013b68:	fb                   	sti    
c0013b69:	8d 76 00             	lea    esi,[esi+0x0]
c0013b6c:	83 c4 0c             	add    esp,0xc
c0013b6f:	c3                   	ret    

c0013b70 <waitTask(int, int*, int)>:
c0013b70:	83 ec 18             	sub    esp,0x18
c0013b73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b7c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013b7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013b83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b88:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013b8b:	6a 07                	push   0x7
c0013b8d:	e8 ae ff ff ff       	call   c0013b40 <blockTask(TaskState)>
c0013b92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013b9d:	85 d2                	test   edx,edx
c0013b9f:	74 0b                	je     c0013bac <waitTask(int, int*, int)+0x3c>
c0013ba1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013ba4:	89 02                	mov    DWORD PTR [edx],eax
c0013ba6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bab:	90                   	nop
c0013bac:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013baf:	83 c4 0c             	add    esp,0xc
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <milliTenthSleepUntil(unsigned int)>:
c0013bb4:	83 ec 0c             	sub    esp,0xc
c0013bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbb:	39 05 ac 2f 02 c0    	cmp    DWORD PTR ds:0xc0022fac,eax
c0013bc1:	76 05                	jbe    c0013bc8 <milliTenthSleepUntil(unsigned int)+0x14>
c0013bc3:	90                   	nop
c0013bc4:	83 c4 0c             	add    esp,0xc
c0013bc7:	c3                   	ret    
c0013bc8:	fa                   	cli    
c0013bc9:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013bcf:	83 ec 08             	sub    esp,0x8
c0013bd2:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c0013bd8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bde:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013be1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013be7:	52                   	push   edx
c0013be8:	68 98 3e 02 c0       	push   0xc0023e98
c0013bed:	e8 da 8c 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013bf2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013bf9:	e8 42 ff ff ff       	call   c0013b40 <blockTask(TaskState)>
c0013bfe:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013c03:	83 c4 10             	add    esp,0x10
c0013c06:	48                   	dec    eax
c0013c07:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0013c0c:	85 c0                	test   eax,eax
c0013c0e:	75 0c                	jne    c0013c1c <milliTenthSleepUntil(unsigned int)+0x68>
c0013c10:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0013c15:	85 c0                	test   eax,eax
c0013c17:	75 17                	jne    c0013c30 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013c19:	8d 76 00             	lea    esi,[esi+0x0]
c0013c1c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013c21:	48                   	dec    eax
c0013c22:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013c27:	75 9b                	jne    c0013bc4 <milliTenthSleepUntil(unsigned int)+0x10>
c0013c29:	fb                   	sti    
c0013c2a:	83 c4 0c             	add    esp,0xc
c0013c2d:	c3                   	ret    
c0013c2e:	66 90                	xchg   ax,ax
c0013c30:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013c3a:	e8 05 fd ff ff       	call   c0013944 <schedule()>
c0013c3f:	eb db                	jmp    c0013c1c <milliTenthSleepUntil(unsigned int)+0x68>
c0013c41:	8d 76 00             	lea    esi,[esi+0x0]

c0013c44 <milliTenthSleep(unsigned int)>:
c0013c44:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c0013c49:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013c4d:	e9 62 ff ff ff       	jmp    c0013bb4 <milliTenthSleepUntil(unsigned int)>
c0013c52:	66 90                	xchg   ax,ax

c0013c54 <sleep(unsigned int)>:
c0013c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c58:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c5b:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c5e:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c61:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c64:	c1 e0 04             	shl    eax,0x4
c0013c67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c6b:	eb d7                	jmp    c0013c44 <milliTenthSleep(unsigned int)>
c0013c6d:	90                   	nop
c0013c6e:	66 90                	xchg   ax,ax

c0013c70 <Semaphore::acquire()>:
c0013c70:	83 ec 0c             	sub    esp,0xc
c0013c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c77:	fa                   	cli    
c0013c78:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013c7d:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013c83:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c86:	89 0d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,ecx
c0013c8c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013c8f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013c91:	7d 2d                	jge    c0013cc0 <Semaphore::acquire()+0x50>
c0013c93:	41                   	inc    ecx
c0013c94:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013c97:	90                   	nop
c0013c98:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0013c9d:	85 c0                	test   eax,eax
c0013c9f:	75 0b                	jne    c0013cac <Semaphore::acquire()+0x3c>
c0013ca1:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0013ca6:	85 c0                	test   eax,eax
c0013ca8:	75 62                	jne    c0013d0c <Semaphore::acquire()+0x9c>
c0013caa:	66 90                	xchg   ax,ax
c0013cac:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013cb1:	48                   	dec    eax
c0013cb2:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013cb7:	75 03                	jne    c0013cbc <Semaphore::acquire()+0x4c>
c0013cb9:	fb                   	sti    
c0013cba:	66 90                	xchg   ax,ax
c0013cbc:	83 c4 0c             	add    esp,0xc
c0013cbf:	c3                   	ret    
c0013cc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013ccc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013ccf:	85 c9                	test   ecx,ecx
c0013cd1:	74 4d                	je     c0013d20 <Semaphore::acquire()+0xb0>
c0013cd3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013cd6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013cdc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013cdf:	90                   	nop
c0013ce0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce5:	83 ec 0c             	sub    esp,0xc
c0013ce8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013ceb:	68 64 eb 01 c0       	push   0xc001eb64
c0013cf0:	e8 27 6e ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0013cf5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013cfc:	e8 3f fe ff ff       	call   c0013b40 <blockTask(TaskState)>
c0013d01:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	48                   	dec    eax
c0013d0a:	eb 8c                	jmp    c0013c98 <Semaphore::acquire()+0x28>
c0013d0c:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0013d16:	e8 29 fc ff ff       	call   c0013944 <schedule()>
c0013d1b:	eb 8f                	jmp    c0013cac <Semaphore::acquire()+0x3c>
c0013d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d25:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d28:	eb b6                	jmp    c0013ce0 <Semaphore::acquire()+0x70>
c0013d2a:	66 90                	xchg   ax,ax

c0013d2c <taskReturned>:
c0013d2c:	83 ec 18             	sub    esp,0x18
c0013d2f:	68 84 eb 01 c0       	push   0xc001eb84
c0013d34:	e8 b2 c9 ff ff       	call   c00106eb <KePanic(char const*)>
c0013d39:	83 c4 10             	add    esp,0x10
c0013d3c:	83 ec 0c             	sub    esp,0xc
c0013d3f:	6a 02                	push   0x2
c0013d41:	e8 fa fd ff ff       	call   c0013b40 <blockTask(TaskState)>
c0013d46:	fa                   	cli    
c0013d47:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013d4d:	e8 f2 fb ff ff       	call   c0013944 <schedule()>
c0013d52:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013d57:	83 c4 10             	add    esp,0x10
c0013d5a:	48                   	dec    eax
c0013d5b:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013d60:	85 c0                	test   eax,eax
c0013d62:	75 d8                	jne    c0013d3c <taskReturned+0x10>
c0013d64:	fb                   	sti    
c0013d65:	eb d5                	jmp    c0013d3c <taskReturned+0x10>
c0013d67:	90                   	nop

c0013d68 <Thr::processFromPID(int)>:
c0013d68:	57                   	push   edi
c0013d69:	56                   	push   esi
c0013d6a:	53                   	push   ebx
c0013d6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d6f:	fa                   	cli    
c0013d70:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013d76:	83 ec 0c             	sub    esp,0xc
c0013d79:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013d7e:	e8 89 8a 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d83:	83 c4 10             	add    esp,0x10
c0013d86:	89 c7                	mov    edi,eax
c0013d88:	eb 16                	jmp    c0013da0 <Thr::processFromPID(int)+0x38>
c0013d8a:	66 90                	xchg   ax,ax
c0013d8c:	83 ec 0c             	sub    esp,0xc
c0013d8f:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013d94:	e8 73 8a 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d99:	83 c4 10             	add    esp,0x10
c0013d9c:	39 f8                	cmp    eax,edi
c0013d9e:	74 4c                	je     c0013dec <Thr::processFromPID(int)+0x84>
c0013da0:	83 ec 0c             	sub    esp,0xc
c0013da3:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013da8:	e8 5f 8a 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013dad:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c0013db4:	89 c3                	mov    ebx,eax
c0013db6:	e8 59 8a 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013dbb:	58                   	pop    eax
c0013dbc:	5a                   	pop    edx
c0013dbd:	53                   	push   ebx
c0013dbe:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013dc3:	e8 04 8b 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013dc8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dcb:	83 c4 10             	add    esp,0x10
c0013dce:	39 30                	cmp    DWORD PTR [eax],esi
c0013dd0:	75 ba                	jne    c0013d8c <Thr::processFromPID(int)+0x24>
c0013dd2:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013dd7:	48                   	dec    eax
c0013dd8:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013ddd:	74 09                	je     c0013de8 <Thr::processFromPID(int)+0x80>
c0013ddf:	90                   	nop
c0013de0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013de3:	5b                   	pop    ebx
c0013de4:	5e                   	pop    esi
c0013de5:	5f                   	pop    edi
c0013de6:	c3                   	ret    
c0013de7:	90                   	nop
c0013de8:	fb                   	sti    
c0013de9:	eb f5                	jmp    c0013de0 <Thr::processFromPID(int)+0x78>
c0013deb:	90                   	nop
c0013dec:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013df1:	48                   	dec    eax
c0013df2:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013df7:	75 07                	jne    c0013e00 <Thr::processFromPID(int)+0x98>
c0013df9:	fb                   	sti    
c0013dfa:	5b                   	pop    ebx
c0013dfb:	5e                   	pop    esi
c0013dfc:	5f                   	pop    edi
c0013dfd:	c3                   	ret    
c0013dfe:	66 90                	xchg   ax,ax
c0013e00:	5b                   	pop    ebx
c0013e01:	31 c0                	xor    eax,eax
c0013e03:	5e                   	pop    esi
c0013e04:	5f                   	pop    edi
c0013e05:	c3                   	ret    
c0013e06:	66 90                	xchg   ax,ax

c0013e08 <unblockTask(ThreadControlBlock*)>:
c0013e08:	53                   	push   ebx
c0013e09:	83 ec 08             	sub    esp,0x8
c0013e0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e10:	fa                   	cli    
c0013e11:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0013e17:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013e1a:	85 c0                	test   eax,eax
c0013e1c:	74 66                	je     c0013e84 <unblockTask(ThreadControlBlock*)+0x7c>
c0013e1e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013e21:	48                   	dec    eax
c0013e22:	74 38                	je     c0013e5c <unblockTask(ThreadControlBlock*)+0x54>
c0013e24:	83 ec 0c             	sub    esp,0xc
c0013e27:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013e2c:	e8 db 89 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	85 c0                	test   eax,eax
c0013e36:	75 1c                	jne    c0013e54 <unblockTask(ThreadControlBlock*)+0x4c>
c0013e38:	eb 5e                	jmp    c0013e98 <unblockTask(ThreadControlBlock*)+0x90>
c0013e3a:	66 90                	xchg   ax,ax
c0013e3c:	83 ec 08             	sub    esp,0x8
c0013e3f:	50                   	push   eax
c0013e40:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013e45:	e8 72 8d 00 00       	call   c001cbbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013e4a:	83 c4 10             	add    esp,0x10
c0013e4d:	85 c0                	test   eax,eax
c0013e4f:	74 47                	je     c0013e98 <unblockTask(ThreadControlBlock*)+0x90>
c0013e51:	8d 76 00             	lea    esi,[esi+0x0]
c0013e54:	39 c3                	cmp    ebx,eax
c0013e56:	75 e4                	jne    c0013e3c <unblockTask(ThreadControlBlock*)+0x34>
c0013e58:	eb 12                	jmp    c0013e6c <unblockTask(ThreadControlBlock*)+0x64>
c0013e5a:	66 90                	xchg   ax,ax
c0013e5c:	83 ec 0c             	sub    esp,0xc
c0013e5f:	68 05 eb 01 c0       	push   0xc001eb05
c0013e64:	e8 b3 6c ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0013e71:	48                   	dec    eax
c0013e72:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0013e77:	75 03                	jne    c0013e7c <unblockTask(ThreadControlBlock*)+0x74>
c0013e79:	fb                   	sti    
c0013e7a:	66 90                	xchg   ax,ax
c0013e7c:	83 c4 08             	add    esp,0x8
c0013e7f:	5b                   	pop    ebx
c0013e80:	c3                   	ret    
c0013e81:	8d 76 00             	lea    esi,[esi+0x0]
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	68 ee ea 01 c0       	push   0xc001eaee
c0013e8c:	e8 8b 6c ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	eb d6                	jmp    c0013e6c <unblockTask(ThreadControlBlock*)+0x64>
c0013e96:	66 90                	xchg   ax,ax
c0013e98:	83 ec 08             	sub    esp,0x8
c0013e9b:	53                   	push   ebx
c0013e9c:	68 a4 3e 02 c0       	push   0xc0023ea4
c0013ea1:	e8 26 8a 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ea6:	83 c4 10             	add    esp,0x10
c0013ea9:	eb c1                	jmp    c0013e6c <unblockTask(ThreadControlBlock*)+0x64>
c0013eab:	90                   	nop

c0013eac <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013eac:	55                   	push   ebp
c0013ead:	57                   	push   edi
c0013eae:	56                   	push   esi
c0013eaf:	53                   	push   ebx
c0013eb0:	83 ec 1c             	sub    esp,0x1c
c0013eb3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013eb7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eba:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013ec0:	85 ed                	test   ebp,ebp
c0013ec2:	7e 24                	jle    c0013ee8 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013ec4:	31 f6                	xor    esi,esi
c0013ec6:	66 90                	xchg   ax,ax
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013ed2:	46                   	inc    esi
c0013ed3:	57                   	push   edi
c0013ed4:	e8 bc 3f ff ff       	call   c0007e95 <free>
c0013ed9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013edc:	83 c4 10             	add    esp,0x10
c0013edf:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013ee5:	7f e1                	jg     c0013ec8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013ee7:	90                   	nop
c0013ee8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013ef2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ef7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013efa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013efd:	d3 c0                	rol    eax,cl
c0013eff:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013f06:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f09:	89 f7                	mov    edi,esi
c0013f0b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013f13:	0f 85 77 01 00 00    	jne    c0014090 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f19:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013f1f:	85 ed                	test   ebp,ebp
c0013f21:	74 1d                	je     c0013f40 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013f23:	83 ec 0c             	sub    esp,0xc
c0013f26:	55                   	push   ebp
c0013f27:	e8 64 c5 ff ff       	call   c0010490 <EnvVarContainer::~EnvVarContainer()>
c0013f2c:	59                   	pop    ecx
c0013f2d:	5e                   	pop    esi
c0013f2e:	6a 0c                	push   0xc
c0013f30:	55                   	push   ebp
c0013f31:	e8 f0 6a ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c0013f36:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f39:	83 c4 10             	add    esp,0x10
c0013f3c:	89 f7                	mov    edi,esi
c0013f3e:	66 90                	xchg   ax,ax
c0013f40:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f46:	85 c0                	test   eax,eax
c0013f48:	0f 84 b6 00 00 00    	je     c0014004 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f4e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013f51:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f55:	31 c9                	xor    ecx,ecx
c0013f57:	eb 17                	jmp    c0013f70 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013f59:	8d 76 00             	lea    esi,[esi+0x0]
c0013f5c:	41                   	inc    ecx
c0013f5d:	83 f9 10             	cmp    ecx,0x10
c0013f60:	0f 84 9e 00 00 00    	je     c0014004 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f66:	66 90                	xchg   ax,ax
c0013f68:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f6e:	66 90                	xchg   ax,ax
c0013f70:	31 d2                	xor    edx,edx
c0013f72:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013f79:	d3 fa                	sar    edx,cl
c0013f7b:	83 e2 01             	and    edx,0x1
c0013f7e:	74 dc                	je     c0013f5c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f80:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013f83:	01 d2                	add    edx,edx
c0013f85:	01 ca                	add    edx,ecx
c0013f87:	8d 14 92             	lea    edx,[edx+edx*4]
c0013f8a:	01 d0                	add    eax,edx
c0013f8c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013f92:	83 fd 07             	cmp    ebp,0x7
c0013f95:	75 c5                	jne    c0013f5c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f97:	05 40 02 00 00       	add    eax,0x240
c0013f9c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013f9f:	83 fd ff             	cmp    ebp,0xffffffff
c0013fa2:	0f 8c f0 00 00 00    	jl     c0014098 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013fa8:	0f 84 ae 01 00 00    	je     c001415c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013fae:	85 ed                	test   ebp,ebp
c0013fb0:	0f 84 92 01 00 00    	je     c0014148 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013fb6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013fb8:	75 a2                	jne    c0013f5c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013fba:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013fc0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fc4:	01 d0                	add    eax,edx
c0013fc6:	66 90                	xchg   ax,ax
c0013fc8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013fd5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fd8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013fde:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013fe5:	50                   	push   eax
c0013fe6:	e8 1d fe ff ff       	call   c0013e08 <unblockTask(ThreadControlBlock*)>
c0013feb:	83 c4 10             	add    esp,0x10
c0013fee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ff1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ff5:	89 f7                	mov    edi,esi
c0013ff7:	41                   	inc    ecx
c0013ff8:	83 f9 10             	cmp    ecx,0x10
c0013ffb:	0f 85 67 ff ff ff    	jne    c0013f68 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014001:	8d 76 00             	lea    esi,[esi+0x0]
c0014004:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001400a:	85 c0                	test   eax,eax
c001400c:	74 62                	je     c0014070 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001400e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014014:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001401a:	74 54                	je     c0014070 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001401c:	83 ec 0c             	sub    esp,0xc
c001401f:	68 a4 3e 02 c0       	push   0xc0023ea4
c0014024:	e8 e3 87 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014029:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c0014030:	89 c7                	mov    edi,eax
c0014032:	e8 b9 87 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014037:	83 c4 10             	add    esp,0x10
c001403a:	84 c0                	test   al,al
c001403c:	0f 84 ce 00 00 00    	je     c0014110 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014042:	66 90                	xchg   ax,ax
c0014044:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014047:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001404d:	85 d2                	test   edx,edx
c001404f:	74 0f                	je     c0014060 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014051:	83 ec 0c             	sub    esp,0xc
c0014054:	8b 02                	mov    eax,DWORD PTR [edx]
c0014056:	52                   	push   edx
c0014057:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001405a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001405d:	83 c4 10             	add    esp,0x10
c0014060:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001406a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001406d:	8d 76 00             	lea    esi,[esi+0x0]
c0014070:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0014076:	85 db                	test   ebx,ebx
c0014078:	74 16                	je     c0014090 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c001407a:	83 ec 0c             	sub    esp,0xc
c001407d:	53                   	push   ebx
c001407e:	e8 77 5d ff ff       	call   c0009dfa <VAS::~VAS()>
c0014083:	58                   	pop    eax
c0014084:	5a                   	pop    edx
c0014085:	6a 14                	push   0x14
c0014087:	53                   	push   ebx
c0014088:	e8 99 69 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001408d:	83 c4 10             	add    esp,0x10
c0014090:	83 c4 1c             	add    esp,0x1c
c0014093:	5b                   	pop    ebx
c0014094:	5e                   	pop    esi
c0014095:	5f                   	pop    edi
c0014096:	5d                   	pop    ebp
c0014097:	c3                   	ret    
c0014098:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001409c:	83 ec 0c             	sub    esp,0xc
c001409f:	68 b8 eb 01 c0       	push   0xc001ebb8
c00140a4:	e8 42 c6 ff ff       	call   c00106eb <KePanic(char const*)>
c00140a9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	89 f7                	mov    edi,esi
c00140b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140b5:	e9 a2 fe ff ff       	jmp    c0013f5c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140ba:	66 90                	xchg   ax,ax
c00140bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140c2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00140c8:	75 1e                	jne    c00140e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140ca:	83 ec 0c             	sub    esp,0xc
c00140cd:	68 20 ec 01 c0       	push   0xc001ec20
c00140d2:	e8 45 6a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00140d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00140de:	e8 5d fa ff ff       	call   c0013b40 <blockTask(TaskState)>
c00140e3:	83 c4 10             	add    esp,0x10
c00140e6:	66 90                	xchg   ax,ax
c00140e8:	83 ec 08             	sub    esp,0x8
c00140eb:	56                   	push   esi
c00140ec:	68 a4 3e 02 c0       	push   0xc0023ea4
c00140f1:	e8 d6 87 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140f6:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c00140fd:	e8 0a 87 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	39 f8                	cmp    eax,edi
c0014107:	0f 84 37 ff ff ff    	je     c0014044 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c001410d:	8d 76 00             	lea    esi,[esi+0x0]
c0014110:	83 ec 0c             	sub    esp,0xc
c0014113:	68 a4 3e 02 c0       	push   0xc0023ea4
c0014118:	e8 ef 86 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001411d:	c7 04 24 a4 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea4
c0014124:	89 c6                	mov    esi,eax
c0014126:	e8 e9 86 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001412b:	83 c4 10             	add    esp,0x10
c001412e:	39 f3                	cmp    ebx,esi
c0014130:	74 b6                	je     c00140e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014132:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014135:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014138:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001413e:	75 a8                	jne    c00140e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014140:	e9 77 ff ff ff       	jmp    c00140bc <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014145:	8d 76 00             	lea    esi,[esi+0x0]
c0014148:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001414c:	83 ec 0c             	sub    esp,0xc
c001414f:	68 ec eb 01 c0       	push   0xc001ebec
c0014154:	e9 4b ff ff ff       	jmp    c00140a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014159:	8d 76 00             	lea    esi,[esi+0x0]
c001415c:	8b 36                	mov    esi,DWORD PTR [esi]
c001415e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014162:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014165:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014168:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001416e:	01 d7                	add    edi,edx
c0014170:	89 f8                	mov    eax,edi
c0014172:	e9 51 fe ff ff       	jmp    c0013fc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014177:	90                   	nop

c0014178 <cleanerTaskFunction(void*)>:
c0014178:	53                   	push   ebx
c0014179:	83 ec 08             	sub    esp,0x8
c001417c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014181:	48                   	dec    eax
c0014182:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0014187:	75 03                	jne    c001418c <cleanerTaskFunction(void*)+0x14>
c0014189:	fb                   	sti    
c001418a:	66 90                	xchg   ax,ax
c001418c:	fa                   	cli    
c001418d:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014192:	80 3d 6c 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e6c,0x0
c0014199:	8d 50 01             	lea    edx,[eax+0x1]
c001419c:	89 15 88 3e 02 c0    	mov    DWORD PTR ds:0xc0023e88,edx
c00141a2:	0f 84 ac 00 00 00    	je     c0014254 <cleanerTaskFunction(void*)+0xdc>
c00141a8:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00141ad:	85 c0                	test   eax,eax
c00141af:	75 03                	jne    c00141b4 <cleanerTaskFunction(void*)+0x3c>
c00141b1:	fb                   	sti    
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	c6 05 6c 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e6c,0x0
c00141bb:	fa                   	cli    
c00141bc:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00141c2:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c00141c8:	fa                   	cli    
c00141c9:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00141cf:	eb 2b                	jmp    c00141fc <cleanerTaskFunction(void*)+0x84>
c00141d1:	8d 76 00             	lea    esi,[esi+0x0]
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	68 8c 3e 02 c0       	push   0xc0023e8c
c00141dc:	e8 2b 86 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141e1:	c7 04 24 8c 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e8c
c00141e8:	89 c3                	mov    ebx,eax
c00141ea:	e8 25 86 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00141ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141f2:	e8 b5 fc ff ff       	call   c0013eac <cleanupTerminatedTask(ThreadControlBlock*)>
c00141f7:	83 c4 10             	add    esp,0x10
c00141fa:	66 90                	xchg   ax,ax
c00141fc:	83 ec 0c             	sub    esp,0xc
c00141ff:	68 8c 3e 02 c0       	push   0xc0023e8c
c0014204:	e8 e7 85 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014209:	83 c4 10             	add    esp,0x10
c001420c:	84 c0                	test   al,al
c001420e:	74 c4                	je     c00141d4 <cleanerTaskFunction(void*)+0x5c>
c0014210:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014215:	48                   	dec    eax
c0014216:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001421b:	75 03                	jne    c0014220 <cleanerTaskFunction(void*)+0xa8>
c001421d:	fb                   	sti    
c001421e:	66 90                	xchg   ax,ax
c0014220:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0014225:	48                   	dec    eax
c0014226:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c001422b:	0f 85 4b ff ff ff    	jne    c001417c <cleanerTaskFunction(void*)+0x4>
c0014231:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0014236:	85 c0                	test   eax,eax
c0014238:	0f 84 3e ff ff ff    	je     c001417c <cleanerTaskFunction(void*)+0x4>
c001423e:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0014248:	e8 f7 f6 ff ff       	call   c0013944 <schedule()>
c001424d:	e9 2a ff ff ff       	jmp    c001417c <cleanerTaskFunction(void*)+0x4>
c0014252:	66 90                	xchg   ax,ax
c0014254:	83 ec 0c             	sub    esp,0xc
c0014257:	6a 02                	push   0x2
c0014259:	e8 ba f8 ff ff       	call   c0013b18 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001425e:	83 c4 10             	add    esp,0x10
c0014261:	e9 4e ff ff ff       	jmp    c00141b4 <cleanerTaskFunction(void*)+0x3c>
c0014266:	66 90                	xchg   ax,ax

c0014268 <terminateTask(int)>:
c0014268:	83 ec 14             	sub    esp,0x14
c001426b:	fa                   	cli    
c001426c:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0014272:	ff 05 84 3e 02 c0    	inc    DWORD PTR ds:0xc0023e84
c0014278:	fa                   	cli    
c0014279:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001427f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014283:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014288:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001428b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014290:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014293:	50                   	push   eax
c0014294:	68 8c 3e 02 c0       	push   0xc0023e8c
c0014299:	e8 2e 86 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001429e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142a3:	83 c4 10             	add    esp,0x10
c00142a6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00142ad:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00142b2:	85 c0                	test   eax,eax
c00142b4:	74 5e                	je     c0014314 <terminateTask(int)+0xac>
c00142b6:	83 ec 0c             	sub    esp,0xc
c00142b9:	c6 05 6c 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e6c,0x1
c00142c0:	50                   	push   eax
c00142c1:	e8 42 fb ff ff       	call   c0013e08 <unblockTask(ThreadControlBlock*)>
c00142c6:	83 c4 10             	add    esp,0x10
c00142c9:	8d 76 00             	lea    esi,[esi+0x0]
c00142cc:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00142d1:	48                   	dec    eax
c00142d2:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00142d7:	75 03                	jne    c00142dc <terminateTask(int)+0x74>
c00142d9:	fb                   	sti    
c00142da:	66 90                	xchg   ax,ax
c00142dc:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c00142e1:	48                   	dec    eax
c00142e2:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c00142e7:	75 0b                	jne    c00142f4 <terminateTask(int)+0x8c>
c00142e9:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c00142f0:	75 36                	jne    c0014328 <terminateTask(int)+0xc0>
c00142f2:	66 90                	xchg   ax,ax
c00142f4:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00142f9:	48                   	dec    eax
c00142fa:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00142ff:	75 03                	jne    c0014304 <terminateTask(int)+0x9c>
c0014301:	fb                   	sti    
c0014302:	66 90                	xchg   ax,ax
c0014304:	fa                   	cli    
c0014305:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001430b:	90                   	nop
c001430c:	e8 33 f6 ff ff       	call   c0013944 <schedule()>
c0014311:	eb e1                	jmp    c00142f4 <terminateTask(int)+0x8c>
c0014313:	90                   	nop
c0014314:	83 ec 0c             	sub    esp,0xc
c0014317:	68 1c eb 01 c0       	push   0xc001eb1c
c001431c:	e8 fb 67 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0014321:	83 c4 10             	add    esp,0x10
c0014324:	eb a6                	jmp    c00142cc <terminateTask(int)+0x64>
c0014326:	66 90                	xchg   ax,ax
c0014328:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c0014332:	eb d8                	jmp    c001430c <terminateTask(int)+0xa4>

c0014334 <Thr::terminateFromIRQ(int)>:
c0014334:	83 ec 18             	sub    esp,0x18
c0014337:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001433b:	50                   	push   eax
c001433c:	e8 27 ff ff ff       	call   c0014268 <terminateTask(int)>
c0014341:	90                   	nop
c0014342:	66 90                	xchg   ax,ax

c0014344 <Semaphore::release()>:
c0014344:	83 ec 0c             	sub    esp,0xc
c0014347:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001434b:	fa                   	cli    
c001434c:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c0014351:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c0014357:	8d 48 01             	lea    ecx,[eax+0x1]
c001435a:	89 0d 84 3e 02 c0    	mov    DWORD PTR ds:0xc0023e84,ecx
c0014360:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014363:	85 c9                	test   ecx,ecx
c0014365:	74 41                	je     c00143a8 <Semaphore::release()+0x64>
c0014367:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001436a:	83 ec 0c             	sub    esp,0xc
c001436d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014370:	51                   	push   ecx
c0014371:	e8 92 fa ff ff       	call   c0013e08 <unblockTask(ThreadControlBlock*)>
c0014376:	a1 84 3e 02 c0       	mov    eax,ds:0xc0023e84
c001437b:	83 c4 10             	add    esp,0x10
c001437e:	48                   	dec    eax
c001437f:	90                   	nop
c0014380:	a3 84 3e 02 c0       	mov    ds:0xc0023e84,eax
c0014385:	85 c0                	test   eax,eax
c0014387:	75 0b                	jne    c0014394 <Semaphore::release()+0x50>
c0014389:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c001438e:	85 c0                	test   eax,eax
c0014390:	75 1e                	jne    c00143b0 <Semaphore::release()+0x6c>
c0014392:	66 90                	xchg   ax,ax
c0014394:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014399:	48                   	dec    eax
c001439a:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001439f:	75 03                	jne    c00143a4 <Semaphore::release()+0x60>
c00143a1:	fb                   	sti    
c00143a2:	66 90                	xchg   ax,ax
c00143a4:	83 c4 0c             	add    esp,0xc
c00143a7:	c3                   	ret    
c00143a8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00143ab:	eb d3                	jmp    c0014380 <Semaphore::release()+0x3c>
c00143ad:	8d 76 00             	lea    esi,[esi+0x0]
c00143b0:	c7 05 80 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e80,0x0
c00143ba:	e8 85 f5 ff ff       	call   c0013944 <schedule()>
c00143bf:	eb d3                	jmp    c0014394 <Semaphore::release()+0x50>
c00143c1:	8d 76 00             	lea    esi,[esi+0x0]

c00143c4 <__static_initialization_and_destruction_0(int, int)>:
c00143c4:	83 ec 0c             	sub    esp,0xc
c00143c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00143cc:	0f 85 8e 00 00 00    	jne    c0014460 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00143da:	0f 85 80 00 00 00    	jne    c0014460 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143e0:	83 ec 0c             	sub    esp,0xc
c00143e3:	68 a4 3e 02 c0       	push   0xc0023ea4
c00143e8:	e8 8b 87 00 00       	call   c001cb78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143ed:	83 c4 10             	add    esp,0x10
c00143f0:	83 ec 04             	sub    esp,0x4
c00143f3:	68 54 f7 01 c0       	push   0xc001f754
c00143f8:	68 a4 3e 02 c0       	push   0xc0023ea4
c00143fd:	68 28 cb 01 c0       	push   0xc001cb28
c0014402:	e8 cf 65 ff ff       	call   c000a9d6 <__cxa_atexit>
c0014407:	83 c4 10             	add    esp,0x10
c001440a:	83 ec 0c             	sub    esp,0xc
c001440d:	68 98 3e 02 c0       	push   0xc0023e98
c0014412:	e8 61 87 00 00       	call   c001cb78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014417:	83 c4 10             	add    esp,0x10
c001441a:	83 ec 04             	sub    esp,0x4
c001441d:	68 54 f7 01 c0       	push   0xc001f754
c0014422:	68 98 3e 02 c0       	push   0xc0023e98
c0014427:	68 28 cb 01 c0       	push   0xc001cb28
c001442c:	e8 a5 65 ff ff       	call   c000a9d6 <__cxa_atexit>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	68 8c 3e 02 c0       	push   0xc0023e8c
c001443c:	e8 37 87 00 00       	call   c001cb78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014441:	83 c4 10             	add    esp,0x10
c0014444:	83 ec 04             	sub    esp,0x4
c0014447:	68 54 f7 01 c0       	push   0xc001f754
c001444c:	68 8c 3e 02 c0       	push   0xc0023e8c
c0014451:	68 28 cb 01 c0       	push   0xc001cb28
c0014456:	e8 7b 65 ff ff       	call   c000a9d6 <__cxa_atexit>
c001445b:	83 c4 10             	add    esp,0x10
c001445e:	66 90                	xchg   ax,ax
c0014460:	90                   	nop
c0014461:	83 c4 0c             	add    esp,0xc
c0014464:	c3                   	ret    
c0014465:	8d 76 00             	lea    esi,[esi+0x0]

c0014468 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014468:	83 ec 0c             	sub    esp,0xc
c001446b:	83 ec 08             	sub    esp,0x8
c001446e:	68 ff ff 00 00       	push   0xffff
c0014473:	6a 01                	push   0x1
c0014475:	e8 4a ff ff ff       	call   c00143c4 <__static_initialization_and_destruction_0(int, int)>
c001447a:	83 c4 10             	add    esp,0x10
c001447d:	83 c4 0c             	add    esp,0xc
c0014480:	c3                   	ret    

c0014481 <Vm::inbv(unsigned short)>:
c0014481:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014485:	66 81 fa fe fe       	cmp    dx,0xfefe
c001448a:	75 06                	jne    c0014492 <Vm::inbv(unsigned short)+0x11>
c001448c:	a0 ec 3e 02 c0       	mov    al,ds:0xc0023eec
c0014491:	c3                   	ret    
c0014492:	ec                   	in     al,dx
c0014493:	c3                   	ret    

c0014494 <Vm::outbv(unsigned short, unsigned char)>:
c0014494:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001449c:	66 81 fa fe fe       	cmp    dx,0xfefe
c00144a1:	75 25                	jne    c00144c8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00144a3:	8b 0d ec 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023eec
c00144a9:	8d 51 01             	lea    edx,[ecx+0x1]
c00144ac:	88 81 00 3f 02 c0    	mov    BYTE PTR [ecx-0x3ffdc100],al
c00144b2:	89 15 ec 3e 02 c0    	mov    DWORD PTR ds:0xc0023eec,edx
c00144b8:	83 fa 20             	cmp    edx,0x20
c00144bb:	75 0c                	jne    c00144c9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00144bd:	c7 05 ec 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023eec,0x1f
c00144c7:	c3                   	ret    
c00144c8:	ee                   	out    dx,al
c00144c9:	c3                   	ret    

c00144ca <Vm::realToLinear(unsigned short, unsigned short)>:
c00144ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00144cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00144d4:	c1 e0 04             	shl    eax,0x4
c00144d7:	01 d0                	add    eax,edx
c00144d9:	c3                   	ret    

c00144da <Vm::getSegment(unsigned int)>:
c00144da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144de:	c1 e8 10             	shr    eax,0x10
c00144e1:	c3                   	ret    

c00144e2 <Vm::getOffset(unsigned int)>:
c00144e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144e6:	c3                   	ret    

c00144e7 <Vm::mainloop2()>:
c00144e7:	83 ec 18             	sub    esp,0x18
c00144ea:	fa                   	cli    
c00144eb:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00144f1:	6a 02                	push   0x2
c00144f3:	c6 05 e5 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ee5,0x1
c00144fa:	e8 19 f6 ff ff       	call   c0013b18 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00144ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014504:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014508:	52                   	push   edx
c0014509:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001450d:	52                   	push   edx
c001450e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014512:	52                   	push   edx
c0014513:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014517:	50                   	push   eax
c0014518:	e8 12 bd fe ff       	call   c000022f <goToVM86>
c001451d:	83 c4 2c             	add    esp,0x2c
c0014520:	c3                   	ret    

c0014521 <Vm::mainVm8086Loop(void*)>:
c0014521:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014526:	48                   	dec    eax
c0014527:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001452c:	75 01                	jne    c001452f <Vm::mainVm8086Loop(void*)+0xe>
c001452e:	fb                   	sti    
c001452f:	eb b6                	jmp    c00144e7 <Vm::mainloop2()>

c0014531 <Vm::mainloop3(unsigned long)>:
c0014531:	83 ec 18             	sub    esp,0x18
c0014534:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014538:	fa                   	cli    
c0014539:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001453f:	6a 02                	push   0x2
c0014541:	c6 05 e4 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ee4,0x1
c0014548:	a3 e0 3e 02 c0       	mov    ds:0xc0023ee0,eax
c001454d:	e8 c6 f5 ff ff       	call   c0013b18 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014552:	83 c4 1c             	add    esp,0x1c
c0014555:	eb 90                	jmp    c00144e7 <Vm::mainloop2()>

c0014557 <Vm::initialise8086()>:
c0014557:	83 ec 0c             	sub    esp,0xc
c001455a:	68 80 00 00 00       	push   0x80
c001455f:	6a 00                	push   0x0
c0014561:	68 21 45 01 c0       	push   0xc0014521
c0014566:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c001456c:	e8 b3 f1 ff ff       	call   c0013724 <Process::createThread(void (*)(void*), void*, int)>
c0014571:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014578:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001457d:	68 00 01 00 00       	push   0x100
c0014582:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0014587:	6a 00                	push   0x0
c0014589:	6a 00                	push   0x0
c001458b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014591:	e8 c2 5c ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014596:	83 c4 2c             	add    esp,0x2c
c0014599:	c3                   	ret    

c001459a <Vm::finish8086()>:
c001459a:	53                   	push   ebx
c001459b:	83 ec 08             	sub    esp,0x8
c001459e:	fa                   	cli    
c001459f:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00145a5:	80 3d e4 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ee4,0x0
c00145ac:	75 15                	jne    c00145c3 <Vm::finish8086()+0x29>
c00145ae:	e8 91 f3 ff ff       	call   c0013944 <schedule()>
c00145b3:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00145b8:	48                   	dec    eax
c00145b9:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00145be:	75 de                	jne    c001459e <Vm::finish8086()+0x4>
c00145c0:	fb                   	sti    
c00145c1:	eb db                	jmp    c001459e <Vm::finish8086()+0x4>
c00145c3:	83 ec 0c             	sub    esp,0xc
c00145c6:	8b 1d e0 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ee0
c00145cc:	ff 35 e8 3e 02 c0    	push   DWORD PTR ds:0xc0023ee8
c00145d2:	c6 05 e4 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ee4,0x0
c00145d9:	e8 2a f8 ff ff       	call   c0013e08 <unblockTask(ThreadControlBlock*)>
c00145de:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	8d 50 ff             	lea    edx,[eax-0x1]
c00145e9:	89 15 88 3e 02 c0    	mov    DWORD PTR ds:0xc0023e88,edx
c00145ef:	85 d2                	test   edx,edx
c00145f1:	75 01                	jne    c00145f4 <Vm::finish8086()+0x5a>
c00145f3:	fb                   	sti    
c00145f4:	89 d8                	mov    eax,ebx
c00145f6:	83 c4 08             	add    esp,0x8
c00145f9:	5b                   	pop    ebx
c00145fa:	c3                   	ret    

c00145fb <Vm::getOutput8086(unsigned char*)>:
c00145fb:	57                   	push   edi
c00145fc:	8b 0d ec 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023eec
c0014602:	56                   	push   esi
c0014603:	be 00 3f 02 c0       	mov    esi,0xc0023f00
c0014608:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001460c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001460e:	a1 ec 3e 02 c0       	mov    eax,ds:0xc0023eec
c0014613:	5e                   	pop    esi
c0014614:	c7 05 ec 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eec,0x0
c001461e:	5f                   	pop    edi
c001461f:	c3                   	ret    

c0014620 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014620:	55                   	push   ebp
c0014621:	57                   	push   edi
c0014622:	56                   	push   esi
c0014623:	53                   	push   ebx
c0014624:	83 ec 0c             	sub    esp,0xc
c0014627:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001462b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001462f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014633:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014637:	fa                   	cli    
c0014638:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001463e:	80 3d e5 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ee5,0x0
c0014645:	75 15                	jne    c001465c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014647:	e8 f8 f2 ff ff       	call   c0013944 <schedule()>
c001464c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014651:	48                   	dec    eax
c0014652:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0014657:	75 de                	jne    c0014637 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014659:	fb                   	sti    
c001465a:	eb db                	jmp    c0014637 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001465c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014661:	c7 05 ec 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eec,0x0
c001466b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001466f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014673:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014677:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001467b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001467f:	0f b7 ff             	movzx  edi,di
c0014682:	0f b7 f6             	movzx  esi,si
c0014685:	50                   	push   eax
c0014686:	6a 20                	push   0x20
c0014688:	6a 00                	push   0x0
c001468a:	68 00 3f 02 c0       	push   0xc0023f00
c001468f:	e8 5c be fe ff       	call   c00004f0 <memset>
c0014694:	5a                   	pop    edx
c0014695:	59                   	pop    ecx
c0014696:	57                   	push   edi
c0014697:	56                   	push   esi
c0014698:	e8 2d fe ff ff       	call   c00144ca <Vm::realToLinear(unsigned short, unsigned short)>
c001469d:	83 c4 10             	add    esp,0x10
c00146a0:	89 c7                	mov    edi,eax
c00146a2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00146a6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00146aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146ac:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00146b1:	c6 05 e5 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ee5,0x0
c00146b8:	48                   	dec    eax
c00146b9:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00146be:	75 01                	jne    c00146c1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00146c0:	fb                   	sti    
c00146c1:	83 ec 0c             	sub    esp,0xc
c00146c4:	ff 35 e8 3e 02 c0    	push   DWORD PTR ds:0xc0023ee8
c00146ca:	e8 39 f7 ff ff       	call   c0013e08 <unblockTask(ThreadControlBlock*)>
c00146cf:	83 c4 1c             	add    esp,0x1c
c00146d2:	b0 01                	mov    al,0x1
c00146d4:	5b                   	pop    ebx
c00146d5:	5e                   	pop    esi
c00146d6:	5f                   	pop    edi
c00146d7:	5d                   	pop    ebp
c00146d8:	c3                   	ret    

c00146d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00146d9:	55                   	push   ebp
c00146da:	57                   	push   edi
c00146db:	56                   	push   esi
c00146dc:	53                   	push   ebx
c00146dd:	83 ec 2c             	sub    esp,0x2c
c00146e0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00146e4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00146e8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00146ec:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00146f0:	fa                   	cli    
c00146f1:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c00146f7:	0f b6 35 e5 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023ee5
c00146fe:	89 f0                	mov    eax,esi
c0014700:	84 c0                	test   al,al
c0014702:	75 1d                	jne    c0014721 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014704:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014708:	e8 37 f2 ff ff       	call   c0013944 <schedule()>
c001470d:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014712:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014716:	48                   	dec    eax
c0014717:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001471c:	75 d2                	jne    c00146f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001471e:	fb                   	sti    
c001471f:	eb cf                	jmp    c00146f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014721:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0014726:	c7 05 ec 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eec,0x0
c0014730:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014734:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014738:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001473c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014740:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014744:	50                   	push   eax
c0014745:	6a 20                	push   0x20
c0014747:	6a 00                	push   0x0
c0014749:	68 00 3f 02 c0       	push   0xc0023f00
c001474e:	e8 9d bd fe ff       	call   c00004f0 <memset>
c0014753:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001475a:	e8 26 37 ff ff       	call   c0007e85 <malloc>
c001475f:	83 c4 0c             	add    esp,0xc
c0014762:	89 c3                	mov    ebx,eax
c0014764:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c001476a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001476e:	50                   	push   eax
c001476f:	e8 1e 69 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0014774:	83 c4 10             	add    esp,0x10
c0014777:	85 db                	test   ebx,ebx
c0014779:	75 0a                	jne    c0014785 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	68 48 ec 01 c0       	push   0xc001ec48
c0014783:	eb 3e                	jmp    c00147c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014785:	50                   	push   eax
c0014786:	8d 44 24 17          	lea    eax,[esp+0x17]
c001478a:	50                   	push   eax
c001478b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001478f:	50                   	push   eax
c0014790:	53                   	push   ebx
c0014791:	e8 68 6c ff ff       	call   c000b3fe <File::stat(unsigned long long*, bool*)>
c0014796:	83 c4 10             	add    esp,0x10
c0014799:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001479e:	74 0a                	je     c00147aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00147a0:	83 ec 0c             	sub    esp,0xc
c00147a3:	68 5c ec 01 c0       	push   0xc001ec5c
c00147a8:	eb 19                	jmp    c00147c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00147aa:	51                   	push   ecx
c00147ab:	51                   	push   ecx
c00147ac:	6a 01                	push   0x1
c00147ae:	53                   	push   ebx
c00147af:	e8 9e 69 ff ff       	call   c000b152 <File::open(FileOpenMode)>
c00147b4:	83 c4 10             	add    esp,0x10
c00147b7:	85 c0                	test   eax,eax
c00147b9:	74 24                	je     c00147df <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00147bb:	83 ec 0c             	sub    esp,0xc
c00147be:	68 75 ec 01 c0       	push   0xc001ec75
c00147c3:	e8 23 bf ff ff       	call   c00106eb <KePanic(char const*)>
c00147c8:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00147cd:	83 c4 10             	add    esp,0x10
c00147d0:	48                   	dec    eax
c00147d1:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00147d6:	85 c0                	test   eax,eax
c00147d8:	75 01                	jne    c00147db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00147da:	fb                   	sti    
c00147db:	31 f6                	xor    esi,esi
c00147dd:	eb 58                	jmp    c0014837 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00147df:	0f b7 ed             	movzx  ebp,bp
c00147e2:	50                   	push   eax
c00147e3:	0f b7 ff             	movzx  edi,di
c00147e6:	50                   	push   eax
c00147e7:	55                   	push   ebp
c00147e8:	57                   	push   edi
c00147e9:	e8 dc fc ff ff       	call   c00144ca <Vm::realToLinear(unsigned short, unsigned short)>
c00147ee:	5a                   	pop    edx
c00147ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00147f1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00147f5:	51                   	push   ecx
c00147f6:	50                   	push   eax
c00147f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147ff:	53                   	push   ebx
c0014800:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014803:	83 c4 14             	add    esp,0x14
c0014806:	53                   	push   ebx
c0014807:	e8 a4 69 ff ff       	call   c000b1b0 <File::close()>
c001480c:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	48                   	dec    eax
c0014815:	c6 05 e5 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ee5,0x0
c001481c:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0014821:	85 c0                	test   eax,eax
c0014823:	75 01                	jne    c0014826 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014825:	fb                   	sti    
c0014826:	83 ec 0c             	sub    esp,0xc
c0014829:	ff 35 e8 3e 02 c0    	push   DWORD PTR ds:0xc0023ee8
c001482f:	e8 d4 f5 ff ff       	call   c0013e08 <unblockTask(ThreadControlBlock*)>
c0014834:	83 c4 10             	add    esp,0x10
c0014837:	83 c4 2c             	add    esp,0x2c
c001483a:	89 f0                	mov    eax,esi
c001483c:	5b                   	pop    ebx
c001483d:	5e                   	pop    esi
c001483e:	5f                   	pop    edi
c001483f:	5d                   	pop    ebp
c0014840:	c3                   	ret    

c0014841 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014841:	57                   	push   edi
c0014842:	56                   	push   esi
c0014843:	53                   	push   ebx
c0014844:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001484c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014850:	83 e8 06             	sub    eax,0x6
c0014853:	0f b7 c0             	movzx  eax,ax
c0014856:	50                   	push   eax
c0014857:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001485c:	50                   	push   eax
c001485d:	e8 68 fc ff ff       	call   c00144ca <Vm::realToLinear(unsigned short, unsigned short)>
c0014862:	5a                   	pop    edx
c0014863:	5e                   	pop    esi
c0014864:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014867:	8d 56 fa             	lea    edx,[esi-0x6]
c001486a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014870:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014873:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014876:	83 c2 02             	add    edx,0x2
c0014879:	66 89 10             	mov    WORD PTR [eax],dx
c001487c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001487f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014883:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014886:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001488a:	89 d6                	mov    esi,edx
c001488c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014892:	66 81 e6 ff fd       	and    si,0xfdff
c0014897:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001489b:	74 07                	je     c00148a4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001489d:	89 d6                	mov    esi,edx
c001489f:	66 81 ce 00 02       	or     si,0x200
c00148a4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00148a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ad:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00148b1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00148b9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00148bc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00148c4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00148c7:	5b                   	pop    ebx
c00148c8:	5e                   	pop    esi
c00148c9:	5f                   	pop    edi
c00148ca:	c3                   	ret    

c00148cb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00148cb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148d0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148d5:	c1 e0 04             	shl    eax,0x4
c00148d8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00148db:	c3                   	ret    

c00148dc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00148dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148e1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148e6:	c1 e0 04             	shl    eax,0x4
c00148e9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00148ed:	c3                   	ret    

c00148ee <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00148ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148f8:	c1 e0 04             	shl    eax,0x4
c00148fb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00148fe:	c3                   	ret    

c00148ff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00148ff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014904:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014909:	c1 e0 04             	shl    eax,0x4
c001490c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014910:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014913:	c3                   	ret    

c0014914 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014914:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014919:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001491e:	c1 e0 04             	shl    eax,0x4
c0014921:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014925:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014929:	c3                   	ret    

c001492a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001492a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001492f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014934:	c1 e0 04             	shl    eax,0x4
c0014937:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001493b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001493e:	c3                   	ret    

c001493f <Vm::faultHandler(regs*)>:
c001493f:	55                   	push   ebp
c0014940:	57                   	push   edi
c0014941:	56                   	push   esi
c0014942:	53                   	push   ebx
c0014943:	83 ec 1c             	sub    esp,0x1c
c0014946:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001494a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001494d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014951:	0f b7 f8             	movzx  edi,ax
c0014954:	52                   	push   edx
c0014955:	0f b7 c0             	movzx  eax,ax
c0014958:	50                   	push   eax
c0014959:	e8 6c fb ff ff       	call   c00144ca <Vm::realToLinear(unsigned short, unsigned short)>
c001495e:	5a                   	pop    edx
c001495f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014962:	59                   	pop    ecx
c0014963:	89 c1                	mov    ecx,eax
c0014965:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014968:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001496c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014971:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014975:	0f b7 c5             	movzx  eax,bp
c0014978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001497c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014980:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014984:	e8 41 fb ff ff       	call   c00144ca <Vm::realToLinear(unsigned short, unsigned short)>
c0014989:	5e                   	pop    esi
c001498a:	be 06 00 00 00       	mov    esi,0x6
c001498f:	5a                   	pop    edx
c0014990:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014995:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001499a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001499d:	80 fa 9d             	cmp    dl,0x9d
c00149a0:	0f 84 2c 02 00 00    	je     c0014bd2 <Vm::faultHandler(regs*)+0x293>
c00149a6:	0f 87 91 00 00 00    	ja     c0014a3d <Vm::faultHandler(regs*)+0xfe>
c00149ac:	80 fa 66             	cmp    dl,0x66
c00149af:	0f 84 98 01 00 00    	je     c0014b4d <Vm::faultHandler(regs*)+0x20e>
c00149b5:	77 47                	ja     c00149fe <Vm::faultHandler(regs*)+0xbf>
c00149b7:	80 fa 36             	cmp    dl,0x36
c00149ba:	0f 84 80 01 00 00    	je     c0014b40 <Vm::faultHandler(regs*)+0x201>
c00149c0:	77 1a                	ja     c00149dc <Vm::faultHandler(regs*)+0x9d>
c00149c2:	80 fa 26             	cmp    dl,0x26
c00149c5:	0f 84 4e 01 00 00    	je     c0014b19 <Vm::faultHandler(regs*)+0x1da>
c00149cb:	80 fa 2e             	cmp    dl,0x2e
c00149ce:	0f 85 e2 05 00 00    	jne    c0014fb6 <Vm::faultHandler(regs*)+0x677>
c00149d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149d7:	31 f6                	xor    esi,esi
c00149d9:	41                   	inc    ecx
c00149da:	eb be                	jmp    c001499a <Vm::faultHandler(regs*)+0x5b>
c00149dc:	80 fa 64             	cmp    dl,0x64
c00149df:	0f 84 41 01 00 00    	je     c0014b26 <Vm::faultHandler(regs*)+0x1e7>
c00149e5:	0f 87 48 01 00 00    	ja     c0014b33 <Vm::faultHandler(regs*)+0x1f4>
c00149eb:	80 fa 3e             	cmp    dl,0x3e
c00149ee:	0f 85 c2 05 00 00    	jne    c0014fb6 <Vm::faultHandler(regs*)+0x677>
c00149f4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149f7:	be 01 00 00 00       	mov    esi,0x1
c00149fc:	eb db                	jmp    c00149d9 <Vm::faultHandler(regs*)+0x9a>
c00149fe:	80 fa 6d             	cmp    dl,0x6d
c0014a01:	0f 84 ec 02 00 00    	je     c0014cf3 <Vm::faultHandler(regs*)+0x3b4>
c0014a07:	77 17                	ja     c0014a20 <Vm::faultHandler(regs*)+0xe1>
c0014a09:	80 fa 67             	cmp    dl,0x67
c0014a0c:	0f 84 48 01 00 00    	je     c0014b5a <Vm::faultHandler(regs*)+0x21b>
c0014a12:	80 fa 6c             	cmp    dl,0x6c
c0014a15:	0f 84 69 02 00 00    	je     c0014c84 <Vm::faultHandler(regs*)+0x345>
c0014a1b:	e9 96 05 00 00       	jmp    c0014fb6 <Vm::faultHandler(regs*)+0x677>
c0014a20:	80 fa 6f             	cmp    dl,0x6f
c0014a23:	0f 84 f4 03 00 00    	je     c0014e1d <Vm::faultHandler(regs*)+0x4de>
c0014a29:	0f 82 59 03 00 00    	jb     c0014d88 <Vm::faultHandler(regs*)+0x449>
c0014a2f:	80 fa 9c             	cmp    dl,0x9c
c0014a32:	0f 84 2f 01 00 00    	je     c0014b67 <Vm::faultHandler(regs*)+0x228>
c0014a38:	e9 79 05 00 00       	jmp    c0014fb6 <Vm::faultHandler(regs*)+0x677>
c0014a3d:	80 fa ec             	cmp    dl,0xec
c0014a40:	0f 84 14 05 00 00    	je     c0014f5a <Vm::faultHandler(regs*)+0x61b>
c0014a46:	77 7b                	ja     c0014ac3 <Vm::faultHandler(regs*)+0x184>
c0014a48:	80 fa e4             	cmp    dl,0xe4
c0014a4b:	0f 84 93 04 00 00    	je     c0014ee4 <Vm::faultHandler(regs*)+0x5a5>
c0014a51:	77 53                	ja     c0014aa6 <Vm::faultHandler(regs*)+0x167>
c0014a53:	80 fa cd             	cmp    dl,0xcd
c0014a56:	0f 84 d9 01 00 00    	je     c0014c35 <Vm::faultHandler(regs*)+0x2f6>
c0014a5c:	80 fa cf             	cmp    dl,0xcf
c0014a5f:	0f 85 51 05 00 00    	jne    c0014fb6 <Vm::faultHandler(regs*)+0x677>
c0014a65:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a68:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014a6b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014a6f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014a72:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014a76:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a7c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a7f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a83:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a89:	66 c1 e8 09          	shr    ax,0x9
c0014a8d:	83 e0 01             	and    eax,0x1
c0014a90:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a93:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a96:	83 c0 06             	add    eax,0x6
c0014a99:	25 ff ff 00 00       	and    eax,0xffff
c0014a9e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014aa1:	e9 0c 05 00 00       	jmp    c0014fb2 <Vm::faultHandler(regs*)+0x673>
c0014aa6:	80 fa e6             	cmp    dl,0xe6
c0014aa9:	0f 84 7f 04 00 00    	je     c0014f2e <Vm::faultHandler(regs*)+0x5ef>
c0014aaf:	0f 82 4b 04 00 00    	jb     c0014f00 <Vm::faultHandler(regs*)+0x5c1>
c0014ab5:	80 fa e7             	cmp    dl,0xe7
c0014ab8:	0f 84 87 04 00 00    	je     c0014f45 <Vm::faultHandler(regs*)+0x606>
c0014abe:	e9 f3 04 00 00       	jmp    c0014fb6 <Vm::faultHandler(regs*)+0x677>
c0014ac3:	80 fa ef             	cmp    dl,0xef
c0014ac6:	0f 84 d1 04 00 00    	je     c0014f9d <Vm::faultHandler(regs*)+0x65e>
c0014acc:	77 28                	ja     c0014af6 <Vm::faultHandler(regs*)+0x1b7>
c0014ace:	80 fa ed             	cmp    dl,0xed
c0014ad1:	0f 84 9f 04 00 00    	je     c0014f76 <Vm::faultHandler(regs*)+0x637>
c0014ad7:	80 fa ee             	cmp    dl,0xee
c0014ada:	0f 85 d6 04 00 00    	jne    c0014fb6 <Vm::faultHandler(regs*)+0x677>
c0014ae0:	50                   	push   eax
c0014ae1:	50                   	push   eax
c0014ae2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014ae6:	50                   	push   eax
c0014ae7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014aeb:	50                   	push   eax
c0014aec:	e8 a3 f9 ff ff       	call   c0014494 <Vm::outbv(unsigned short, unsigned char)>
c0014af1:	e9 9f 04 00 00       	jmp    c0014f95 <Vm::faultHandler(regs*)+0x656>
c0014af6:	80 fa fa             	cmp    dl,0xfa
c0014af9:	0f 84 69 01 00 00    	je     c0014c68 <Vm::faultHandler(regs*)+0x329>
c0014aff:	80 fa fb             	cmp    dl,0xfb
c0014b02:	0f 84 6e 01 00 00    	je     c0014c76 <Vm::faultHandler(regs*)+0x337>
c0014b08:	80 fa f3             	cmp    dl,0xf3
c0014b0b:	0f 85 a5 04 00 00    	jne    c0014fb6 <Vm::faultHandler(regs*)+0x677>
c0014b11:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b14:	e9 c0 fe ff ff       	jmp    c00149d9 <Vm::faultHandler(regs*)+0x9a>
c0014b19:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b1c:	be 02 00 00 00       	mov    esi,0x2
c0014b21:	e9 b3 fe ff ff       	jmp    c00149d9 <Vm::faultHandler(regs*)+0x9a>
c0014b26:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b29:	be 03 00 00 00       	mov    esi,0x3
c0014b2e:	e9 a6 fe ff ff       	jmp    c00149d9 <Vm::faultHandler(regs*)+0x9a>
c0014b33:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b36:	be 04 00 00 00       	mov    esi,0x4
c0014b3b:	e9 99 fe ff ff       	jmp    c00149d9 <Vm::faultHandler(regs*)+0x9a>
c0014b40:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b43:	be 05 00 00 00       	mov    esi,0x5
c0014b48:	e9 8c fe ff ff       	jmp    c00149d9 <Vm::faultHandler(regs*)+0x9a>
c0014b4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b50:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014b55:	e9 7f fe ff ff       	jmp    c00149d9 <Vm::faultHandler(regs*)+0x9a>
c0014b5a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b5d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014b62:	e9 72 fe ff ff       	jmp    c00149d9 <Vm::faultHandler(regs*)+0x9a>
c0014b67:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014b6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014b6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b73:	74 30                	je     c0014ba5 <Vm::faultHandler(regs*)+0x266>
c0014b75:	83 e9 04             	sub    ecx,0x4
c0014b78:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b7e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b84:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b87:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b8a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b90:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b94:	0f 84 15 04 00 00    	je     c0014faf <Vm::faultHandler(regs*)+0x670>
c0014b9a:	80 ce 02             	or     dh,0x2
c0014b9d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014ba0:	e9 0a 04 00 00       	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014ba5:	83 e9 02             	sub    ecx,0x2
c0014ba8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014bae:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014bb1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014bb5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014bbb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014bbf:	74 05                	je     c0014bc6 <Vm::faultHandler(regs*)+0x287>
c0014bc1:	80 ce 02             	or     dh,0x2
c0014bc4:	eb 03                	jmp    c0014bc9 <Vm::faultHandler(regs*)+0x28a>
c0014bc6:	80 e6 fd             	and    dh,0xfd
c0014bc9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014bcd:	e9 dd 03 00 00       	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014bd2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014bd7:	74 2a                	je     c0014c03 <Vm::faultHandler(regs*)+0x2c4>
c0014bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0014bdb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014be1:	81 ca 00 02 02 00    	or     edx,0x20200
c0014be7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bf2:	c1 e8 09             	shr    eax,0x9
c0014bf5:	83 e0 01             	and    eax,0x1
c0014bf8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bfb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bfe:	83 c0 04             	add    eax,0x4
c0014c01:	eb 25                	jmp    c0014c28 <Vm::faultHandler(regs*)+0x2e9>
c0014c03:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014c06:	81 ca 00 02 02 00    	or     edx,0x20200
c0014c0c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014c0f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014c12:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014c18:	66 c1 e8 09          	shr    ax,0x9
c0014c1c:	83 e0 01             	and    eax,0x1
c0014c1f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014c22:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014c25:	83 c0 02             	add    eax,0x2
c0014c28:	25 ff ff 00 00       	and    eax,0xffff
c0014c2d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014c30:	e9 7a 03 00 00       	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014c35:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c39:	3c ee                	cmp    al,0xee
c0014c3b:	75 10                	jne    c0014c4d <Vm::faultHandler(regs*)+0x30e>
c0014c3d:	83 ec 0c             	sub    esp,0xc
c0014c40:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c43:	e8 e9 f8 ff ff       	call   c0014531 <Vm::mainloop3(unsigned long)>
c0014c48:	e9 4b 03 00 00       	jmp    c0014f98 <Vm::faultHandler(regs*)+0x659>
c0014c4d:	83 ec 0c             	sub    esp,0xc
c0014c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c58:	51                   	push   ecx
c0014c59:	50                   	push   eax
c0014c5a:	53                   	push   ebx
c0014c5b:	e8 e1 fb ff ff       	call   c0014841 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014c60:	83 c4 20             	add    esp,0x20
c0014c63:	e9 4a 03 00 00       	jmp    c0014fb2 <Vm::faultHandler(regs*)+0x673>
c0014c68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c6d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014c71:	e9 39 03 00 00       	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014c76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c7b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014c7f:	e9 2b 03 00 00       	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014c84:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c87:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c8c:	74 2b                	je     c0014cb9 <Vm::faultHandler(regs*)+0x37a>
c0014c8e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014c95:	76 22                	jbe    c0014cb9 <Vm::faultHandler(regs*)+0x37a>
c0014c97:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c9b:	50                   	push   eax
c0014c9c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ca0:	50                   	push   eax
c0014ca1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ca5:	50                   	push   eax
c0014ca6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014caa:	50                   	push   eax
c0014cab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014caf:	50                   	push   eax
c0014cb0:	6a 6c                	push   0x6c
c0014cb2:	6a 6c                	push   0x6c
c0014cb4:	e9 b9 01 00 00       	jmp    c0014e72 <Vm::faultHandler(regs*)+0x533>
c0014cb9:	83 ec 0c             	sub    esp,0xc
c0014cbc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014cc0:	0f b7 f6             	movzx  esi,si
c0014cc3:	50                   	push   eax
c0014cc4:	e8 b8 f7 ff ff       	call   c0014481 <Vm::inbv(unsigned short)>
c0014cc9:	83 c4 0c             	add    esp,0xc
c0014ccc:	0f b6 c0             	movzx  eax,al
c0014ccf:	50                   	push   eax
c0014cd0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014cd4:	50                   	push   eax
c0014cd5:	56                   	push   esi
c0014cd6:	e8 24 fc ff ff       	call   c00148ff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014cdb:	83 c4 10             	add    esp,0x10
c0014cde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ce1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ce5:	74 03                	je     c0014cea <Vm::faultHandler(regs*)+0x3ab>
c0014ce7:	48                   	dec    eax
c0014ce8:	eb 01                	jmp    c0014ceb <Vm::faultHandler(regs*)+0x3ac>
c0014cea:	40                   	inc    eax
c0014ceb:	0f b7 c0             	movzx  eax,ax
c0014cee:	e9 8d 00 00 00       	jmp    c0014d80 <Vm::faultHandler(regs*)+0x441>
c0014cf3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014cf6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cf9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cfe:	74 29                	je     c0014d29 <Vm::faultHandler(regs*)+0x3ea>
c0014d00:	3d ff ff 00 00       	cmp    eax,0xffff
c0014d05:	76 22                	jbe    c0014d29 <Vm::faultHandler(regs*)+0x3ea>
c0014d07:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d0b:	50                   	push   eax
c0014d0c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d10:	50                   	push   eax
c0014d11:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d15:	50                   	push   eax
c0014d16:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d1a:	50                   	push   eax
c0014d1b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d1f:	50                   	push   eax
c0014d20:	6a 6d                	push   0x6d
c0014d22:	6a 6d                	push   0x6d
c0014d24:	e9 49 01 00 00       	jmp    c0014e72 <Vm::faultHandler(regs*)+0x533>
c0014d29:	0f b7 c8             	movzx  ecx,ax
c0014d2c:	0f b7 f6             	movzx  esi,si
c0014d2f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014d32:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d37:	74 20                	je     c0014d59 <Vm::faultHandler(regs*)+0x41a>
c0014d39:	ed                   	in     eax,dx
c0014d3a:	55                   	push   ebp
c0014d3b:	50                   	push   eax
c0014d3c:	51                   	push   ecx
c0014d3d:	56                   	push   esi
c0014d3e:	e8 e7 fb ff ff       	call   c001492a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d49:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d4d:	74 05                	je     c0014d54 <Vm::faultHandler(regs*)+0x415>
c0014d4f:	83 e8 04             	sub    eax,0x4
c0014d52:	eb 27                	jmp    c0014d7b <Vm::faultHandler(regs*)+0x43c>
c0014d54:	83 c0 04             	add    eax,0x4
c0014d57:	eb 22                	jmp    c0014d7b <Vm::faultHandler(regs*)+0x43c>
c0014d59:	66 ed                	in     ax,dx
c0014d5b:	0f b7 c0             	movzx  eax,ax
c0014d5e:	57                   	push   edi
c0014d5f:	50                   	push   eax
c0014d60:	51                   	push   ecx
c0014d61:	56                   	push   esi
c0014d62:	e8 ad fb ff ff       	call   c0014914 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d6d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d71:	74 05                	je     c0014d78 <Vm::faultHandler(regs*)+0x439>
c0014d73:	83 e8 02             	sub    eax,0x2
c0014d76:	eb 03                	jmp    c0014d7b <Vm::faultHandler(regs*)+0x43c>
c0014d78:	83 c0 02             	add    eax,0x2
c0014d7b:	25 ff ff 00 00       	and    eax,0xffff
c0014d80:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014d83:	e9 27 02 00 00       	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014d88:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d8b:	3c 05                	cmp    al,0x5
c0014d8d:	77 24                	ja     c0014db3 <Vm::faultHandler(regs*)+0x474>
c0014d8f:	0f b6 c0             	movzx  eax,al
c0014d92:	ff 24 85 e8 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1318]
c0014d99:	0f b7 fd             	movzx  edi,bp
c0014d9c:	eb 15                	jmp    c0014db3 <Vm::faultHandler(regs*)+0x474>
c0014d9e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014da2:	eb 0f                	jmp    c0014db3 <Vm::faultHandler(regs*)+0x474>
c0014da4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014da8:	eb 09                	jmp    c0014db3 <Vm::faultHandler(regs*)+0x474>
c0014daa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014dae:	eb 03                	jmp    c0014db3 <Vm::faultHandler(regs*)+0x474>
c0014db0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014db3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014db6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014dbb:	74 29                	je     c0014de6 <Vm::faultHandler(regs*)+0x4a7>
c0014dbd:	3d ff ff 00 00       	cmp    eax,0xffff
c0014dc2:	76 22                	jbe    c0014de6 <Vm::faultHandler(regs*)+0x4a7>
c0014dc4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014dc8:	50                   	push   eax
c0014dc9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014dcd:	50                   	push   eax
c0014dce:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014dd2:	50                   	push   eax
c0014dd3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014dd7:	50                   	push   eax
c0014dd8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ddc:	50                   	push   eax
c0014ddd:	6a 6e                	push   0x6e
c0014ddf:	6a 6e                	push   0x6e
c0014de1:	e9 8c 00 00 00       	jmp    c0014e72 <Vm::faultHandler(regs*)+0x533>
c0014de6:	0f b7 c0             	movzx  eax,ax
c0014de9:	52                   	push   edx
c0014dea:	52                   	push   edx
c0014deb:	50                   	push   eax
c0014dec:	57                   	push   edi
c0014ded:	e8 d9 fa ff ff       	call   c00148cb <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014df2:	59                   	pop    ecx
c0014df3:	0f b6 c0             	movzx  eax,al
c0014df6:	5e                   	pop    esi
c0014df7:	50                   	push   eax
c0014df8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dfc:	50                   	push   eax
c0014dfd:	e8 92 f6 ff ff       	call   c0014494 <Vm::outbv(unsigned short, unsigned char)>
c0014e02:	83 c4 10             	add    esp,0x10
c0014e05:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014e08:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e0c:	74 03                	je     c0014e11 <Vm::faultHandler(regs*)+0x4d2>
c0014e0e:	48                   	dec    eax
c0014e0f:	eb 01                	jmp    c0014e12 <Vm::faultHandler(regs*)+0x4d3>
c0014e11:	40                   	inc    eax
c0014e12:	0f b7 c0             	movzx  eax,ax
c0014e15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014e18:	e9 92 01 00 00       	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014e1d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014e20:	3c 05                	cmp    al,0x5
c0014e22:	77 1f                	ja     c0014e43 <Vm::faultHandler(regs*)+0x504>
c0014e24:	0f b6 c0             	movzx  eax,al
c0014e27:	ff 24 85 00 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1300]
c0014e2e:	89 ef                	mov    edi,ebp
c0014e30:	eb 11                	jmp    c0014e43 <Vm::faultHandler(regs*)+0x504>
c0014e32:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014e35:	eb 0c                	jmp    c0014e43 <Vm::faultHandler(regs*)+0x504>
c0014e37:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014e3a:	eb 07                	jmp    c0014e43 <Vm::faultHandler(regs*)+0x504>
c0014e3c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014e3f:	eb 02                	jmp    c0014e43 <Vm::faultHandler(regs*)+0x504>
c0014e41:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014e43:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014e46:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e4b:	74 37                	je     c0014e84 <Vm::faultHandler(regs*)+0x545>
c0014e4d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014e53:	76 2f                	jbe    c0014e84 <Vm::faultHandler(regs*)+0x545>
c0014e55:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e59:	50                   	push   eax
c0014e5a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e5e:	50                   	push   eax
c0014e5f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e63:	50                   	push   eax
c0014e64:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e68:	50                   	push   eax
c0014e69:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e6d:	50                   	push   eax
c0014e6e:	6a 6f                	push   0x6f
c0014e70:	6a 6f                	push   0x6f
c0014e72:	68 8e ec 01 c0       	push   0xc001ec8e
c0014e77:	e8 a0 5c ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0014e7c:	83 c4 20             	add    esp,0x20
c0014e7f:	e9 86 01 00 00       	jmp    c001500a <Vm::faultHandler(regs*)+0x6cb>
c0014e84:	0f b7 d7             	movzx  edx,di
c0014e87:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014e8a:	0f b7 c6             	movzx  eax,si
c0014e8d:	81 e1 00 04 00 00    	and    ecx,0x400
c0014e93:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014e96:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e9b:	74 1d                	je     c0014eba <Vm::faultHandler(regs*)+0x57b>
c0014e9d:	55                   	push   ebp
c0014e9e:	55                   	push   ebp
c0014e9f:	50                   	push   eax
c0014ea0:	52                   	push   edx
c0014ea1:	e8 48 fa ff ff       	call   c00148ee <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	89 fa                	mov    edx,edi
c0014eab:	ef                   	out    dx,eax
c0014eac:	85 c9                	test   ecx,ecx
c0014eae:	74 05                	je     c0014eb5 <Vm::faultHandler(regs*)+0x576>
c0014eb0:	83 ee 04             	sub    esi,0x4
c0014eb3:	eb 21                	jmp    c0014ed6 <Vm::faultHandler(regs*)+0x597>
c0014eb5:	83 c6 04             	add    esi,0x4
c0014eb8:	eb 1c                	jmp    c0014ed6 <Vm::faultHandler(regs*)+0x597>
c0014eba:	55                   	push   ebp
c0014ebb:	55                   	push   ebp
c0014ebc:	50                   	push   eax
c0014ebd:	52                   	push   edx
c0014ebe:	e8 19 fa ff ff       	call   c00148dc <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014ec3:	83 c4 10             	add    esp,0x10
c0014ec6:	89 fa                	mov    edx,edi
c0014ec8:	66 ef                	out    dx,ax
c0014eca:	85 c9                	test   ecx,ecx
c0014ecc:	74 05                	je     c0014ed3 <Vm::faultHandler(regs*)+0x594>
c0014ece:	83 ee 02             	sub    esi,0x2
c0014ed1:	eb 03                	jmp    c0014ed6 <Vm::faultHandler(regs*)+0x597>
c0014ed3:	83 c6 02             	add    esi,0x2
c0014ed6:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014edc:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014edf:	e9 cb 00 00 00       	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014ee4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014eeb:	83 ec 0c             	sub    esp,0xc
c0014eee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ef2:	50                   	push   eax
c0014ef3:	e8 89 f5 ff ff       	call   c0014481 <Vm::inbv(unsigned short)>
c0014ef8:	0f b6 c0             	movzx  eax,al
c0014efb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014efe:	eb 3f                	jmp    c0014f3f <Vm::faultHandler(regs*)+0x600>
c0014f00:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f05:	74 07                	je     c0014f0e <Vm::faultHandler(regs*)+0x5cf>
c0014f07:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f0b:	ed                   	in     eax,dx
c0014f0c:	eb 14                	jmp    c0014f22 <Vm::faultHandler(regs*)+0x5e3>
c0014f0e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014f11:	66 31 f6             	xor    si,si
c0014f14:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014f17:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f1b:	66 ed                	in     ax,dx
c0014f1d:	0f b7 c0             	movzx  eax,ax
c0014f20:	09 f0                	or     eax,esi
c0014f22:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f25:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f29:	e9 84 00 00 00       	jmp    c0014fb2 <Vm::faultHandler(regs*)+0x673>
c0014f2e:	52                   	push   edx
c0014f2f:	52                   	push   edx
c0014f30:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014f34:	50                   	push   eax
c0014f35:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f39:	50                   	push   eax
c0014f3a:	e8 55 f5 ff ff       	call   c0014494 <Vm::outbv(unsigned short, unsigned char)>
c0014f3f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f43:	eb 53                	jmp    c0014f98 <Vm::faultHandler(regs*)+0x659>
c0014f45:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f48:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f4c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f51:	74 03                	je     c0014f56 <Vm::faultHandler(regs*)+0x617>
c0014f53:	ef                   	out    dx,eax
c0014f54:	eb cf                	jmp    c0014f25 <Vm::faultHandler(regs*)+0x5e6>
c0014f56:	66 ef                	out    dx,ax
c0014f58:	eb cb                	jmp    c0014f25 <Vm::faultHandler(regs*)+0x5e6>
c0014f5a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014f61:	83 ec 0c             	sub    esp,0xc
c0014f64:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f68:	50                   	push   eax
c0014f69:	e8 13 f5 ff ff       	call   c0014481 <Vm::inbv(unsigned short)>
c0014f6e:	0f b6 c0             	movzx  eax,al
c0014f71:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014f74:	eb 1f                	jmp    c0014f95 <Vm::faultHandler(regs*)+0x656>
c0014f76:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f79:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f7e:	74 03                	je     c0014f83 <Vm::faultHandler(regs*)+0x644>
c0014f80:	ed                   	in     eax,dx
c0014f81:	eb 0d                	jmp    c0014f90 <Vm::faultHandler(regs*)+0x651>
c0014f83:	66 ed                	in     ax,dx
c0014f85:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014f88:	0f b7 c0             	movzx  eax,ax
c0014f8b:	66 31 d2             	xor    dx,dx
c0014f8e:	09 d0                	or     eax,edx
c0014f90:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f93:	eb 1a                	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014f95:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f98:	83 c4 10             	add    esp,0x10
c0014f9b:	eb 15                	jmp    c0014fb2 <Vm::faultHandler(regs*)+0x673>
c0014f9d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014fa0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014fa3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014fa8:	74 03                	je     c0014fad <Vm::faultHandler(regs*)+0x66e>
c0014faa:	ef                   	out    dx,eax
c0014fab:	eb 02                	jmp    c0014faf <Vm::faultHandler(regs*)+0x670>
c0014fad:	66 ef                	out    dx,ax
c0014faf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014fb2:	b0 01                	mov    al,0x1
c0014fb4:	eb 56                	jmp    c001500c <Vm::faultHandler(regs*)+0x6cd>
c0014fb6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014fba:	50                   	push   eax
c0014fbb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014fbf:	50                   	push   eax
c0014fc0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014fc4:	50                   	push   eax
c0014fc5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014fc9:	50                   	push   eax
c0014fca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fce:	50                   	push   eax
c0014fcf:	52                   	push   edx
c0014fd0:	52                   	push   edx
c0014fd1:	68 bb ec 01 c0       	push   0xc001ecbb
c0014fd6:	e8 41 5b ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0014fdb:	83 c4 20             	add    esp,0x20
c0014fde:	83 ec 0c             	sub    esp,0xc
c0014fe1:	6a 60                	push   0x60
c0014fe3:	e8 99 f4 ff ff       	call   c0014481 <Vm::inbv(unsigned short)>
c0014fe8:	83 c4 10             	add    esp,0x10
c0014feb:	3c 1c                	cmp    al,0x1c
c0014fed:	74 04                	je     c0014ff3 <Vm::faultHandler(regs*)+0x6b4>
c0014fef:	3c 5a                	cmp    al,0x5a
c0014ff1:	75 eb                	jne    c0014fde <Vm::faultHandler(regs*)+0x69f>
c0014ff3:	3c 5a                	cmp    al,0x5a
c0014ff5:	74 04                	je     c0014ffb <Vm::faultHandler(regs*)+0x6bc>
c0014ff7:	3c 1c                	cmp    al,0x1c
c0014ff9:	75 0f                	jne    c001500a <Vm::faultHandler(regs*)+0x6cb>
c0014ffb:	83 ec 0c             	sub    esp,0xc
c0014ffe:	6a 60                	push   0x60
c0015000:	e8 7c f4 ff ff       	call   c0014481 <Vm::inbv(unsigned short)>
c0015005:	83 c4 10             	add    esp,0x10
c0015008:	eb e9                	jmp    c0014ff3 <Vm::faultHandler(regs*)+0x6b4>
c001500a:	31 c0                	xor    eax,eax
c001500c:	83 c4 1c             	add    esp,0x1c
c001500f:	5b                   	pop    ebx
c0015010:	5e                   	pop    esi
c0015011:	5f                   	pop    edi
c0015012:	5d                   	pop    ebp
c0015013:	c3                   	ret    

c0015014 <noCopro(unsigned long)>:
c0015014:	c3                   	ret    

c0015015 <nmiHandler(regs*, void*)>:
c0015015:	83 ec 0c             	sub    esp,0xc
c0015018:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001501d:	83 ec 0c             	sub    esp,0xc
c0015020:	50                   	push   eax
c0015021:	e8 80 26 ff ff       	call   c00076a6 <Computer::handleNMI()>
c0015026:	83 c4 10             	add    esp,0x10
c0015029:	90                   	nop
c001502a:	83 c4 0c             	add    esp,0xc
c001502d:	c3                   	ret    

c001502e <doubleFault(regs*, void*)>:
c001502e:	55                   	push   ebp
c001502f:	89 e5                	mov    ebp,esp
c0015031:	83 ec 08             	sub    esp,0x8
c0015034:	83 ec 0c             	sub    esp,0xc
c0015037:	68 18 ed 01 c0       	push   0xc001ed18
c001503c:	e8 aa b6 ff ff       	call   c00106eb <KePanic(char const*)>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	90                   	nop
c0015045:	c9                   	leave  
c0015046:	c3                   	ret    

c0015047 <displayDebugInfo(regs*)>:
c0015047:	83 ec 1c             	sub    esp,0x1c
c001504a:	0f 20 c0             	mov    eax,cr0
c001504d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015051:	0f 20 d0             	mov    eax,cr2
c0015054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015058:	0f 20 d8             	mov    eax,cr3
c001505b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001505f:	0f 20 e0             	mov    eax,cr4
c0015062:	89 04 24             	mov    DWORD PTR [esp],eax
c0015065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015069:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001506c:	83 ec 08             	sub    esp,0x8
c001506f:	50                   	push   eax
c0015070:	68 34 ed 01 c0       	push   0xc001ed34
c0015075:	e8 a2 5a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001507a:	83 c4 10             	add    esp,0x10
c001507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015081:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015084:	83 ec 08             	sub    esp,0x8
c0015087:	50                   	push   eax
c0015088:	68 25 ed 01 c0       	push   0xc001ed25
c001508d:	e8 8a 5a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015099:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001509c:	83 ec 08             	sub    esp,0x8
c001509f:	50                   	push   eax
c00150a0:	68 30 ed 01 c0       	push   0xc001ed30
c00150a5:	e8 72 5a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150b4:	83 ec 08             	sub    esp,0x8
c00150b7:	50                   	push   eax
c00150b8:	68 3f ed 01 c0       	push   0xc001ed3f
c00150bd:	e8 5a 5a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150c9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00150cc:	83 ec 08             	sub    esp,0x8
c00150cf:	50                   	push   eax
c00150d0:	68 4a ed 01 c0       	push   0xc001ed4a
c00150d5:	e8 42 5a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	83 ec 08             	sub    esp,0x8
c00150e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150e4:	68 55 ed 01 c0       	push   0xc001ed55
c00150e9:	e8 2e 5a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00150ee:	83 c4 10             	add    esp,0x10
c00150f1:	83 ec 08             	sub    esp,0x8
c00150f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00150f8:	68 60 ed 01 c0       	push   0xc001ed60
c00150fd:	e8 1a 5a ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0015102:	83 c4 10             	add    esp,0x10
c0015105:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001510a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015110:	83 ec 0c             	sub    esp,0xc
c0015113:	50                   	push   eax
c0015114:	e8 a6 39 ff ff       	call   c0008abf <setActiveTerminal(VgaText*)>
c0015119:	83 c4 10             	add    esp,0x10
c001511c:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015121:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015127:	83 ec 08             	sub    esp,0x8
c001512a:	68 6b ed 01 c0       	push   0xc001ed6b
c001512f:	50                   	push   eax
c0015130:	e8 c9 3c ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001513d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015143:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015148:	8b 12                	mov    edx,DWORD PTR [edx]
c001514a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001514d:	83 c2 0c             	add    edx,0xc
c0015150:	83 ec 08             	sub    esp,0x8
c0015153:	52                   	push   edx
c0015154:	50                   	push   eax
c0015155:	e8 a4 3c ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c001515a:	83 c4 10             	add    esp,0x10
c001515d:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015162:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015168:	83 ec 08             	sub    esp,0x8
c001516b:	68 74 ed 01 c0       	push   0xc001ed74
c0015170:	50                   	push   eax
c0015171:	e8 88 3c ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001517e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015184:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015188:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001518b:	83 ec 08             	sub    esp,0x8
c001518e:	52                   	push   edx
c001518f:	50                   	push   eax
c0015190:	e8 23 3c ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c0015195:	83 c4 10             	add    esp,0x10
c0015198:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001519d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a3:	83 ec 08             	sub    esp,0x8
c00151a6:	68 7c ed 01 c0       	push   0xc001ed7c
c00151ab:	50                   	push   eax
c00151ac:	e8 4d 3c ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00151b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151c3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00151c6:	83 ec 08             	sub    esp,0x8
c00151c9:	52                   	push   edx
c00151ca:	50                   	push   eax
c00151cb:	e8 e8 3b ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c00151d0:	83 c4 10             	add    esp,0x10
c00151d3:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00151d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151de:	83 ec 08             	sub    esp,0x8
c00151e1:	68 84 ed 01 c0       	push   0xc001ed84
c00151e6:	50                   	push   eax
c00151e7:	e8 12 3c ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00151f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151fe:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015201:	83 ec 08             	sub    esp,0x8
c0015204:	52                   	push   edx
c0015205:	50                   	push   eax
c0015206:	e8 ad 3b ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c001520b:	83 c4 10             	add    esp,0x10
c001520e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015213:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015219:	83 ec 08             	sub    esp,0x8
c001521c:	68 8c ed 01 c0       	push   0xc001ed8c
c0015221:	50                   	push   eax
c0015222:	e8 d7 3b ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001522f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015235:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015239:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001523c:	83 ec 08             	sub    esp,0x8
c001523f:	52                   	push   edx
c0015240:	50                   	push   eax
c0015241:	e8 72 3b ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001524e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015254:	83 ec 08             	sub    esp,0x8
c0015257:	68 94 ed 01 c0       	push   0xc001ed94
c001525c:	50                   	push   eax
c001525d:	e8 9c 3b ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c0015262:	83 c4 10             	add    esp,0x10
c0015265:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001526a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015270:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015274:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015277:	83 ec 08             	sub    esp,0x8
c001527a:	52                   	push   edx
c001527b:	50                   	push   eax
c001527c:	e8 37 3b ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015289:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001528f:	83 ec 08             	sub    esp,0x8
c0015292:	68 9c ed 01 c0       	push   0xc001ed9c
c0015297:	50                   	push   eax
c0015298:	e8 61 3b ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c001529d:	83 c4 10             	add    esp,0x10
c00152a0:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00152a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152af:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00152b2:	83 ec 08             	sub    esp,0x8
c00152b5:	52                   	push   edx
c00152b6:	50                   	push   eax
c00152b7:	e8 fc 3a ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c00152bc:	83 c4 10             	add    esp,0x10
c00152bf:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00152c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ca:	83 ec 08             	sub    esp,0x8
c00152cd:	68 a4 ed 01 c0       	push   0xc001eda4
c00152d2:	50                   	push   eax
c00152d3:	e8 26 3b ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00152e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152e6:	83 ec 08             	sub    esp,0x8
c00152e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152ed:	50                   	push   eax
c00152ee:	e8 c5 3a ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00152fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015301:	83 ec 08             	sub    esp,0x8
c0015304:	68 ad ed 01 c0       	push   0xc001edad
c0015309:	50                   	push   eax
c001530a:	e8 ef 3a ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c001530f:	83 c4 10             	add    esp,0x10
c0015312:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015317:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001531d:	83 ec 08             	sub    esp,0x8
c0015320:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015324:	50                   	push   eax
c0015325:	e8 8e 3a ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c001532a:	83 c4 10             	add    esp,0x10
c001532d:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015332:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015338:	83 ec 08             	sub    esp,0x8
c001533b:	68 b5 ed 01 c0       	push   0xc001edb5
c0015340:	50                   	push   eax
c0015341:	e8 b8 3a ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001534e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015354:	83 ec 08             	sub    esp,0x8
c0015357:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001535b:	50                   	push   eax
c001535c:	e8 57 3a ff ff       	call   c0008db8 <VgaText::putx(unsigned int)>
c0015361:	83 c4 10             	add    esp,0x10
c0015364:	fa                   	cli    
c0015365:	f4                   	hlt    
c0015366:	eb fe                	jmp    c0015366 <displayDebugInfo(regs*)+0x31f>

c0015368 <HalSystemIdle()>:
c0015368:	56                   	push   esi
c0015369:	53                   	push   ebx
c001536a:	83 ec 14             	sub    esp,0x14
c001536d:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0015372:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015378:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001537e:	83 e0 04             	and    eax,0x4
c0015381:	84 c0                	test   al,al
c0015383:	0f 95 c0             	setne  al
c0015386:	84 c0                	test   al,al
c0015388:	74 4c                	je     c00153d6 <HalSystemIdle()+0x6e>
c001538a:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001538f:	83 ec 08             	sub    esp,0x8
c0015392:	68 e1 00 00 00       	push   0xe1
c0015397:	50                   	push   eax
c0015398:	e8 21 21 ff ff       	call   c00074be <Computer::rdmsr(unsigned int)>
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153a8:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00153ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00153b1:	83 e2 02             	and    edx,0x2
c00153b4:	89 d3                	mov    ebx,edx
c00153b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153ba:	83 e2 00             	and    edx,0x0
c00153bd:	89 d6                	mov    esi,edx
c00153bf:	56                   	push   esi
c00153c0:	53                   	push   ebx
c00153c1:	68 e1 00 00 00       	push   0xe1
c00153c6:	50                   	push   eax
c00153c7:	e8 1e 21 ff ff       	call   c00074ea <Computer::wrmsr(unsigned int, unsigned long long)>
c00153cc:	83 c4 10             	add    esp,0x10
c00153cf:	e8 e0 ad fe ff       	call   c00001b4 <doTPAUSE>
c00153d4:	eb 01                	jmp    c00153d7 <HalSystemIdle()+0x6f>
c00153d6:	f4                   	hlt    
c00153d7:	90                   	nop
c00153d8:	83 c4 14             	add    esp,0x14
c00153db:	5b                   	pop    ebx
c00153dc:	5e                   	pop    esi
c00153dd:	c3                   	ret    

c00153de <displayProgramFault(char const*)>:
c00153de:	83 ec 0c             	sub    esp,0xc
c00153e1:	83 ec 0c             	sub    esp,0xc
c00153e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153e8:	e8 2f 57 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00153ed:	83 c4 10             	add    esp,0x10
c00153f0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015400:	85 c0                	test   eax,eax
c0015402:	74 21                	je     c0015425 <displayProgramFault(char const*)+0x47>
c0015404:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015409:	8b 00                	mov    eax,DWORD PTR [eax]
c001540b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001540e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015414:	6a 04                	push   0x4
c0015416:	6a 0f                	push   0xf
c0015418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001541c:	50                   	push   eax
c001541d:	e8 4e 3a ff ff       	call   c0008e70 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	90                   	nop
c0015426:	83 c4 0c             	add    esp,0xc
c0015429:	c3                   	ret    

c001542a <gpFault(regs*, void*)>:
c001542a:	83 ec 1c             	sub    esp,0x1c
c001542d:	c7 05 30 3f 02 c0 3f 49 01 c0 	mov    DWORD PTR ds:0xc0023f30,0xc001493f
c0015437:	a1 30 3f 02 c0       	mov    eax,ds:0xc0023f30
c001543c:	85 c0                	test   eax,eax
c001543e:	74 1c                	je     c001545c <gpFault(regs*, void*)+0x32>
c0015440:	a1 30 3f 02 c0       	mov    eax,ds:0xc0023f30
c0015445:	83 ec 0c             	sub    esp,0xc
c0015448:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001544c:	ff d0                	call   eax
c001544e:	83 c4 10             	add    esp,0x10
c0015451:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015455:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001545a:	75 2e                	jne    c001548a <gpFault(regs*, void*)+0x60>
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015463:	e8 df fb ff ff       	call   c0015047 <displayDebugInfo(regs*)>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	83 ec 0c             	sub    esp,0xc
c001546e:	68 bd ed 01 c0       	push   0xc001edbd
c0015473:	e8 66 ff ff ff       	call   c00153de <displayProgramFault(char const*)>
c0015478:	83 c4 10             	add    esp,0x10
c001547b:	83 ec 0c             	sub    esp,0xc
c001547e:	6a 00                	push   0x0
c0015480:	e8 af ee ff ff       	call   c0014334 <Thr::terminateFromIRQ(int)>
c0015485:	83 c4 10             	add    esp,0x10
c0015488:	eb 01                	jmp    c001548b <gpFault(regs*, void*)+0x61>
c001548a:	90                   	nop
c001548b:	83 c4 1c             	add    esp,0x1c
c001548e:	c3                   	ret    

c001548f <pgFault(regs*, void*)>:
c001548f:	83 ec 1c             	sub    esp,0x1c
c0015492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015496:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015499:	0f 20 d0             	mov    eax,cr2
c001549c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00154a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00154a4:	83 ec 04             	sub    esp,0x4
c00154a7:	52                   	push   edx
c00154a8:	50                   	push   eax
c00154a9:	68 9c ee 01 c0       	push   0xc001ee9c
c00154ae:	e8 69 56 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154c0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00154c6:	0f 20 d2             	mov    edx,cr2
c00154c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00154cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154d1:	83 ec 08             	sub    esp,0x8
c00154d4:	52                   	push   edx
c00154d5:	50                   	push   eax
c00154d6:	e8 73 52 ff ff       	call   c000a74e <VAS::tryLoadBackOffDisk(unsigned long)>
c00154db:	83 c4 10             	add    esp,0x10
c00154de:	84 c0                	test   al,al
c00154e0:	75 2e                	jne    c0015510 <pgFault(regs*, void*)+0x81>
c00154e2:	83 ec 0c             	sub    esp,0xc
c00154e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154e9:	e8 59 fb ff ff       	call   c0015047 <displayDebugInfo(regs*)>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	83 ec 0c             	sub    esp,0xc
c00154f4:	68 d6 ed 01 c0       	push   0xc001edd6
c00154f9:	e8 e0 fe ff ff       	call   c00153de <displayProgramFault(char const*)>
c00154fe:	83 c4 10             	add    esp,0x10
c0015501:	83 ec 0c             	sub    esp,0xc
c0015504:	6a 00                	push   0x0
c0015506:	e8 29 ee ff ff       	call   c0014334 <Thr::terminateFromIRQ(int)>
c001550b:	83 c4 10             	add    esp,0x10
c001550e:	eb 01                	jmp    c0015511 <pgFault(regs*, void*)+0x82>
c0015510:	90                   	nop
c0015511:	83 c4 1c             	add    esp,0x1c
c0015514:	c3                   	ret    

c0015515 <otherISRHandler(regs*, void*)>:
c0015515:	83 ec 0c             	sub    esp,0xc
c0015518:	83 ec 0c             	sub    esp,0xc
c001551b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001551f:	e8 23 fb ff ff       	call   c0015047 <displayDebugInfo(regs*)>
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	83 ec 0c             	sub    esp,0xc
c001552a:	68 c4 ee 01 c0       	push   0xc001eec4
c001552f:	e8 aa fe ff ff       	call   c00153de <displayProgramFault(char const*)>
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	83 ec 0c             	sub    esp,0xc
c001553a:	6a 00                	push   0x0
c001553c:	e8 f3 ed ff ff       	call   c0014334 <Thr::terminateFromIRQ(int)>
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	90                   	nop
c0015545:	83 c4 0c             	add    esp,0xc
c0015548:	c3                   	ret    

c0015549 <opcodeFault(regs*, void*)>:
c0015549:	55                   	push   ebp
c001554a:	89 e5                	mov    ebp,esp
c001554c:	83 ec 08             	sub    esp,0x8
c001554f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015552:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015555:	83 ec 08             	sub    esp,0x8
c0015558:	50                   	push   eax
c0015559:	68 e1 ed 01 c0       	push   0xc001ede1
c001555e:	e8 b9 55 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001556b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015571:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015577:	84 c0                	test   al,al
c0015579:	74 21                	je     c001559c <opcodeFault(regs*, void*)+0x53>
c001557b:	83 ec 0c             	sub    esp,0xc
c001557e:	68 ec ee 01 c0       	push   0xc001eeec
c0015583:	e8 94 55 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0015588:	83 c4 10             	add    esp,0x10
c001558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015591:	8d 50 19             	lea    edx,[eax+0x19]
c0015594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015597:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001559a:	eb 2b                	jmp    c00155c7 <opcodeFault(regs*, void*)+0x7e>
c001559c:	83 ec 0c             	sub    esp,0xc
c001559f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155a2:	e8 a0 fa ff ff       	call   c0015047 <displayDebugInfo(regs*)>
c00155a7:	83 c4 10             	add    esp,0x10
c00155aa:	83 ec 0c             	sub    esp,0xc
c00155ad:	68 ef ed 01 c0       	push   0xc001edef
c00155b2:	e8 27 fe ff ff       	call   c00153de <displayProgramFault(char const*)>
c00155b7:	83 c4 10             	add    esp,0x10
c00155ba:	83 ec 0c             	sub    esp,0xc
c00155bd:	6a 00                	push   0x0
c00155bf:	e8 70 ed ff ff       	call   c0014334 <Thr::terminateFromIRQ(int)>
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	c9                   	leave  
c00155c8:	c3                   	ret    

c00155c9 <i386SaveCoprocessor(void*)>:
c00155c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155cd:	83 c0 3f             	add    eax,0x3f
c00155d0:	83 e0 c0             	and    eax,0xffffffc0
c00155d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155d7:	ff 25 2c 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f2c

c00155dd <i386LoadCoprocessor(void*)>:
c00155dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155e1:	83 c0 3f             	add    eax,0x3f
c00155e4:	83 e0 c0             	and    eax,0xffffffc0
c00155e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155eb:	ff 25 28 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f28

c00155f1 <x87EmulHandler(regs*, void*)>:
c00155f1:	53                   	push   ebx
c00155f2:	83 ec 08             	sub    esp,0x8
c00155f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155fa:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00155fe:	74 10                	je     c0015610 <x87EmulHandler(regs*, void*)+0x1f>
c0015600:	83 ec 0c             	sub    esp,0xc
c0015603:	68 fc ed 01 c0       	push   0xc001edfc
c0015608:	e8 de b0 ff ff       	call   c00106eb <KePanic(char const*)>
c001560d:	83 c4 10             	add    esp,0x10
c0015610:	0f 20 c0             	mov    eax,cr0
c0015613:	a8 08                	test   al,0x8
c0015615:	74 59                	je     c0015670 <x87EmulHandler(regs*, void*)+0x7f>
c0015617:	0f 06                	clts   
c0015619:	a1 24 3f 02 c0       	mov    eax,ds:0xc0023f24
c001561e:	85 c0                	test   eax,eax
c0015620:	74 0e                	je     c0015630 <x87EmulHandler(regs*, void*)+0x3f>
c0015622:	83 ec 0c             	sub    esp,0xc
c0015625:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015628:	e8 9c ff ff ff       	call   c00155c9 <i386SaveCoprocessor(void*)>
c001562d:	83 c4 10             	add    esp,0x10
c0015630:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015636:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001563a:	75 12                	jne    c001564e <x87EmulHandler(regs*, void*)+0x5d>
c001563c:	83 ec 0c             	sub    esp,0xc
c001563f:	68 40 02 00 00       	push   0x240
c0015644:	e8 3c 28 ff ff       	call   c0007e85 <malloc>
c0015649:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001564c:	eb 10                	jmp    c001565e <x87EmulHandler(regs*, void*)+0x6d>
c001564e:	83 ec 0c             	sub    esp,0xc
c0015651:	a1 24 3f 02 c0       	mov    eax,ds:0xc0023f24
c0015656:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015659:	e8 7f ff ff ff       	call   c00155dd <i386LoadCoprocessor(void*)>
c001565e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015663:	83 c4 10             	add    esp,0x10
c0015666:	a3 24 3f 02 c0       	mov    ds:0xc0023f24,eax
c001566b:	83 c4 08             	add    esp,0x8
c001566e:	5b                   	pop    ebx
c001566f:	c3                   	ret    
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	68 10 ee 01 c0       	push   0xc001ee10
c0015678:	e8 9f 54 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001567d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015685:	83 c4 18             	add    esp,0x18
c0015688:	5b                   	pop    ebx
c0015689:	e9 a6 ec ff ff       	jmp    c0014334 <Thr::terminateFromIRQ(int)>

c001568e <HalInitialiseCoprocessor()>:
c001568e:	83 ec 10             	sub    esp,0x10
c0015691:	c7 05 24 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f24,0x0
c001569b:	6a 00                	push   0x0
c001569d:	68 f1 55 01 c0       	push   0xc00155f1
c00156a2:	6a 07                	push   0x7
c00156a4:	e8 e7 6d ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00156a9:	e8 72 65 00 00       	call   c001bc20 <avxDetect>
c00156ae:	83 c4 10             	add    esp,0x10
c00156b1:	85 c0                	test   eax,eax
c00156b3:	74 1c                	je     c00156d1 <HalInitialiseCoprocessor()+0x43>
c00156b5:	c7 05 2c 3f 02 c0 4a bc 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc001bc4a
c00156bf:	c7 05 28 3f 02 c0 5b bc 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc001bc5b
c00156c9:	83 c4 0c             	add    esp,0xc
c00156cc:	e9 9b 65 00 00       	jmp    c001bc6c <avxInit>
c00156d1:	e8 ca 67 00 00       	call   c001bea0 <absolutelyNoChanceInHell>
c00156d6:	85 c0                	test   eax,eax
c00156d8:	74 1c                	je     c00156f6 <HalInitialiseCoprocessor()+0x68>
c00156da:	c7 05 2c 3f 02 c0 b8 be 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc001beb8
c00156e4:	c7 05 28 3f 02 c0 c0 be 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc001bec0
c00156ee:	83 c4 0c             	add    esp,0xc
c00156f1:	e9 d2 67 00 00       	jmp    c001bec8 <sseInit>
c00156f6:	e8 eb 67 00 00       	call   c001bee6 <x87Detect>
c00156fb:	85 c0                	test   eax,eax
c00156fd:	74 1c                	je     c001571b <HalInitialiseCoprocessor()+0x8d>
c00156ff:	c7 05 2c 3f 02 c0 01 bf 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc001bf01
c0015709:	c7 05 28 3f 02 c0 08 bf 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc001bf08
c0015713:	83 c4 0c             	add    esp,0xc
c0015716:	e9 f4 67 00 00       	jmp    c001bf0f <x87Init>
c001571b:	c7 05 2c 3f 02 c0 14 50 01 c0 	mov    DWORD PTR ds:0xc0023f2c,0xc0015014
c0015725:	c7 05 28 3f 02 c0 14 50 01 c0 	mov    DWORD PTR ds:0xc0023f28,0xc0015014
c001572f:	0f 20 c0             	mov    eax,cr0
c0015732:	83 c8 04             	or     eax,0x4
c0015735:	0f 22 c0             	mov    cr0,eax
c0015738:	83 c4 0c             	add    esp,0xc
c001573b:	c3                   	ret    

c001573c <HalPanic(char const*)>:
c001573c:	53                   	push   ebx
c001573d:	83 ec 10             	sub    esp,0x10
c0015740:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015744:	fa                   	cli    
c0015745:	53                   	push   ebx
c0015746:	68 26 ee 01 c0       	push   0xc001ee26
c001574b:	e8 cc 53 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0015750:	83 c4 0c             	add    esp,0xc
c0015753:	6a 01                	push   0x1
c0015755:	6a 0f                	push   0xf
c0015757:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001575d:	e8 b0 31 ff ff       	call   c0008912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015762:	58                   	pop    eax
c0015763:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c0015769:	e8 9c 33 ff ff       	call   c0008b0a <VgaText::clearScreen()>
c001576e:	5a                   	pop    edx
c001576f:	59                   	pop    ecx
c0015770:	68 8e ee 01 c0       	push   0xc001ee8e
c0015775:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001577b:	e8 ca 31 ff ff       	call   c000894a <VgaText::setTitle(char*)>
c0015780:	83 c4 0c             	add    esp,0xc
c0015783:	6a 01                	push   0x1
c0015785:	6a 0f                	push   0xf
c0015787:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001578d:	e8 80 31 ff ff       	call   c0008912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015792:	58                   	pop    eax
c0015793:	5a                   	pop    edx
c0015794:	68 3f ee 01 c0       	push   0xc001ee3f
c0015799:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001579f:	e8 5a 36 ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c00157a4:	83 c4 0c             	add    esp,0xc
c00157a7:	6a 0f                	push   0xf
c00157a9:	6a 01                	push   0x1
c00157ab:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c00157b1:	e8 5c 31 ff ff       	call   c0008912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00157b6:	59                   	pop    ecx
c00157b7:	58                   	pop    eax
c00157b8:	68 48 ee 01 c0       	push   0xc001ee48
c00157bd:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c00157c3:	e8 36 36 ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c00157c8:	83 c4 0c             	add    esp,0xc
c00157cb:	6a 01                	push   0x1
c00157cd:	6a 0f                	push   0xf
c00157cf:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c00157d5:	e8 38 31 ff ff       	call   c0008912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00157da:	58                   	pop    eax
c00157db:	5a                   	pop    edx
c00157dc:	68 8c ee 01 c0       	push   0xc001ee8c
c00157e1:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c00157e7:	e8 12 36 ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c00157ec:	59                   	pop    ecx
c00157ed:	58                   	pop    eax
c00157ee:	68 55 ee 01 c0       	push   0xc001ee55
c00157f3:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c00157f9:	e8 00 36 ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c00157fe:	58                   	pop    eax
c00157ff:	5a                   	pop    edx
c0015800:	68 8f ee 01 c0       	push   0xc001ee8f
c0015805:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001580b:	e8 ee 35 ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c0015810:	59                   	pop    ecx
c0015811:	58                   	pop    eax
c0015812:	53                   	push   ebx
c0015813:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c0015819:	e8 e0 35 ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c001581e:	58                   	pop    eax
c001581f:	5a                   	pop    edx
c0015820:	68 8c ee 01 c0       	push   0xc001ee8c
c0015825:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001582b:	e8 ce 35 ff ff       	call   c0008dfe <VgaText::puts(char const*)>
c0015830:	83 c4 10             	add    esp,0x10
c0015833:	eb fe                	jmp    c0015833 <HalPanic(char const*)+0xf7>

c0015835 <HalQueryPerformanceCounter()>:
c0015835:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001583a:	31 d2                	xor    edx,edx
c001583c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015842:	31 c0                	xor    eax,eax
c0015844:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001584b:	74 02                	je     c001584f <HalQueryPerformanceCounter()+0x1a>
c001584d:	0f 31                	rdtsc  
c001584f:	c3                   	ret    

c0015850 <HalInitialise()>:
c0015850:	53                   	push   ebx
c0015851:	83 ec 08             	sub    esp,0x8
c0015854:	e8 6a 6e ff ff       	call   c000c6c3 <setupINTS()>
c0015859:	80 3d a0 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232a0,0x0
c0015860:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0015865:	75 07                	jne    c001586e <HalInitialise()+0x1e>
c0015867:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001586e:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015874:	83 e0 01             	and    eax,0x1
c0015877:	a2 20 3f 02 c0       	mov    ds:0xc0023f20,al
c001587c:	e8 a7 02 00 00       	call   c0015b28 <picOpen()>
c0015881:	80 3d 20 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f20,0x0
c0015888:	74 0a                	je     c0015894 <HalInitialise()+0x44>
c001588a:	e8 e1 01 00 00       	call   c0015a70 <picDisable()>
c001588f:	e8 08 5d 00 00       	call   c001b59c <apicOpen()>
c0015894:	bb 0f 00 00 00       	mov    ebx,0xf
c0015899:	50                   	push   eax
c001589a:	6a 00                	push   0x0
c001589c:	68 15 55 01 c0       	push   0xc0015515
c00158a1:	6a 00                	push   0x0
c00158a3:	e8 e8 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158a8:	83 c4 0c             	add    esp,0xc
c00158ab:	6a 00                	push   0x0
c00158ad:	68 15 55 01 c0       	push   0xc0015515
c00158b2:	6a 01                	push   0x1
c00158b4:	e8 d7 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b9:	83 c4 0c             	add    esp,0xc
c00158bc:	6a 00                	push   0x0
c00158be:	68 15 50 01 c0       	push   0xc0015015
c00158c3:	6a 02                	push   0x2
c00158c5:	e8 c6 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ca:	83 c4 0c             	add    esp,0xc
c00158cd:	6a 00                	push   0x0
c00158cf:	68 15 55 01 c0       	push   0xc0015515
c00158d4:	6a 03                	push   0x3
c00158d6:	e8 b5 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158db:	83 c4 0c             	add    esp,0xc
c00158de:	6a 00                	push   0x0
c00158e0:	68 15 55 01 c0       	push   0xc0015515
c00158e5:	6a 04                	push   0x4
c00158e7:	e8 a4 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ec:	83 c4 0c             	add    esp,0xc
c00158ef:	6a 00                	push   0x0
c00158f1:	68 15 55 01 c0       	push   0xc0015515
c00158f6:	6a 05                	push   0x5
c00158f8:	e8 93 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158fd:	83 c4 0c             	add    esp,0xc
c0015900:	6a 00                	push   0x0
c0015902:	68 49 55 01 c0       	push   0xc0015549
c0015907:	6a 06                	push   0x6
c0015909:	e8 82 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001590e:	83 c4 0c             	add    esp,0xc
c0015911:	6a 00                	push   0x0
c0015913:	68 2e 50 01 c0       	push   0xc001502e
c0015918:	6a 08                	push   0x8
c001591a:	e8 71 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001591f:	83 c4 0c             	add    esp,0xc
c0015922:	6a 00                	push   0x0
c0015924:	68 15 55 01 c0       	push   0xc0015515
c0015929:	6a 09                	push   0x9
c001592b:	e8 60 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015930:	83 c4 0c             	add    esp,0xc
c0015933:	6a 00                	push   0x0
c0015935:	68 15 55 01 c0       	push   0xc0015515
c001593a:	6a 0a                	push   0xa
c001593c:	e8 4f 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015941:	83 c4 0c             	add    esp,0xc
c0015944:	6a 00                	push   0x0
c0015946:	68 15 55 01 c0       	push   0xc0015515
c001594b:	6a 0b                	push   0xb
c001594d:	e8 3e 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015952:	83 c4 0c             	add    esp,0xc
c0015955:	6a 00                	push   0x0
c0015957:	68 2a 54 01 c0       	push   0xc001542a
c001595c:	6a 0d                	push   0xd
c001595e:	e8 2d 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015963:	83 c4 0c             	add    esp,0xc
c0015966:	6a 00                	push   0x0
c0015968:	68 8f 54 01 c0       	push   0xc001548f
c001596d:	6a 0e                	push   0xe
c001596f:	e8 1c 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015974:	83 c4 10             	add    esp,0x10
c0015977:	50                   	push   eax
c0015978:	6a 00                	push   0x0
c001597a:	68 15 55 01 c0       	push   0xc0015515
c001597f:	53                   	push   ebx
c0015980:	43                   	inc    ebx
c0015981:	e8 0a 6b ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	83 fb 1e             	cmp    ebx,0x1e
c001598c:	75 e9                	jne    c0015977 <HalInitialise()+0x127>
c001598e:	50                   	push   eax
c001598f:	6a 00                	push   0x0
c0015991:	68 23 16 01 c0       	push   0xc0011623
c0015996:	6a 60                	push   0x60
c0015998:	e8 f3 6a ff ff       	call   c000c490 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001599d:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00159a2:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00159ac:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00159b3:	e8 cd 24 ff ff       	call   c0007e85 <malloc>
c00159b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00159bb:	89 c3                	mov    ebx,eax
c00159bd:	e8 2e 09 00 00       	call   c00162f0 <RTC::RTC()>
c00159c2:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159cc:	5a                   	pop    edx
c00159cd:	59                   	pop    ecx
c00159ce:	53                   	push   ebx
c00159cf:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c00159d5:	e8 82 65 ff ff       	call   c000bf5c <Device::addChild(Device*)>
c00159da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159dc:	6a 00                	push   0x0
c00159de:	6a 00                	push   0x0
c00159e0:	6a 00                	push   0x0
c00159e2:	53                   	push   ebx
c00159e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159e6:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c00159eb:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159f1:	83 c4 28             	add    esp,0x28
c00159f4:	5b                   	pop    ebx
c00159f5:	c3                   	ret    

c00159f6 <HalMakeBeep(int)>:
c00159f6:	53                   	push   ebx
c00159f7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159fb:	85 db                	test   ebx,ebx
c00159fd:	75 07                	jne    c0015a06 <HalMakeBeep(int)+0x10>
c00159ff:	e4 61                	in     al,0x61
c0015a01:	83 e0 fc             	and    eax,0xfffffffc
c0015a04:	eb 26                	jmp    c0015a2c <HalMakeBeep(int)+0x36>
c0015a06:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015a0b:	99                   	cdq    
c0015a0c:	f7 fb                	idiv   ebx
c0015a0e:	89 c1                	mov    ecx,eax
c0015a10:	b0 b6                	mov    al,0xb6
c0015a12:	e6 43                	out    0x43,al
c0015a14:	88 c8                	mov    al,cl
c0015a16:	e6 42                	out    0x42,al
c0015a18:	89 c8                	mov    eax,ecx
c0015a1a:	c1 e8 08             	shr    eax,0x8
c0015a1d:	e6 42                	out    0x42,al
c0015a1f:	e4 61                	in     al,0x61
c0015a21:	88 c2                	mov    dl,al
c0015a23:	83 ca 03             	or     edx,0x3
c0015a26:	38 c2                	cmp    dl,al
c0015a28:	74 04                	je     c0015a2e <HalMakeBeep(int)+0x38>
c0015a2a:	88 d0                	mov    al,dl
c0015a2c:	e6 61                	out    0x61,al
c0015a2e:	5b                   	pop    ebx
c0015a2f:	c3                   	ret    

c0015a30 <HalGetRand()>:
c0015a30:	31 c0                	xor    eax,eax
c0015a32:	c3                   	ret    

c0015a33 <HalEndOfInterrupt(int)>:
c0015a33:	80 3d 20 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f20,0x0
c0015a3a:	74 23                	je     c0015a5f <HalEndOfInterrupt(int)+0x2c>
c0015a3c:	83 ec 14             	sub    esp,0x14
c0015a3f:	6a 1b                	push   0x1b
c0015a41:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015a47:	e8 72 1a ff ff       	call   c00074be <Computer::rdmsr(unsigned int)>
c0015a4c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a51:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a5b:	83 c4 1c             	add    esp,0x1c
c0015a5e:	c3                   	ret    
c0015a5f:	e9 54 02 00 00       	jmp    c0015cb8 <picEOI(int)>

c0015a64 <HalRestart()>:
c0015a64:	c3                   	ret    

c0015a65 <HalShutdown()>:
c0015a65:	c3                   	ret    

c0015a66 <HalSleep()>:
c0015a66:	c3                   	ret    
c0015a67:	90                   	nop

c0015a68 <picIoWait()>:
c0015a68:	eb 00                	jmp    c0015a6a <picIoWait()+0x2>
c0015a6a:	eb 00                	jmp    c0015a6c <picIoWait()+0x4>
c0015a6c:	90                   	nop
c0015a6d:	c3                   	ret    
c0015a6e:	66 90                	xchg   ax,ax

c0015a70 <picDisable()>:
c0015a70:	83 ec 10             	sub    esp,0x10
c0015a73:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a7a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a7f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a83:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a88:	ee                   	out    dx,al
c0015a89:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a90:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a95:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a99:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a9e:	ee                   	out    dx,al
c0015a9f:	90                   	nop
c0015aa0:	83 c4 10             	add    esp,0x10
c0015aa3:	c3                   	ret    

c0015aa4 <picGetIRQReg(int)>:
c0015aa4:	83 ec 10             	sub    esp,0x10
c0015aa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015aab:	25 ff 00 00 00       	and    eax,0xff
c0015ab0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015ab7:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015abb:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015abf:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015ac4:	ee                   	out    dx,al
c0015ac5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ac9:	25 ff 00 00 00       	and    eax,0xff
c0015ace:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015ad5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015ad9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015add:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015ae2:	ee                   	out    dx,al
c0015ae3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015aea:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015aef:	89 c2                	mov    edx,eax
c0015af1:	ec                   	in     al,dx
c0015af2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015af6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015afa:	25 ff 00 00 00       	and    eax,0xff
c0015aff:	c1 e0 08             	shl    eax,0x8
c0015b02:	89 c1                	mov    ecx,eax
c0015b04:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015b0b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b10:	89 c2                	mov    edx,eax
c0015b12:	ec                   	in     al,dx
c0015b13:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015b17:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015b1b:	25 ff 00 00 00       	and    eax,0xff
c0015b20:	09 c8                	or     eax,ecx
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	c3                   	ret    
c0015b26:	66 90                	xchg   ax,ax

c0015b28 <picOpen()>:
c0015b28:	83 ec 50             	sub    esp,0x50
c0015b2b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b32:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b3f:	ee                   	out    dx,al
c0015b40:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b47:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b4c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b54:	ee                   	out    dx,al
c0015b55:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b5d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b65:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b70:	89 c2                	mov    edx,eax
c0015b72:	ec                   	in     al,dx
c0015b73:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b77:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b7b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b7f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b8a:	89 c2                	mov    edx,eax
c0015b8c:	ec                   	in     al,dx
c0015b8d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b91:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b95:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b99:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015ba0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015ba5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bad:	ee                   	out    dx,al
c0015bae:	e8 b5 fe ff ff       	call   c0015a68 <picIoWait()>
c0015bb3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015bba:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015bbf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015bc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015bc7:	ee                   	out    dx,al
c0015bc8:	e8 9b fe ff ff       	call   c0015a68 <picIoWait()>
c0015bcd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015bd1:	25 ff 00 00 00       	and    eax,0xff
c0015bd6:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bdd:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015be1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015be5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015be9:	ee                   	out    dx,al
c0015bea:	e8 79 fe ff ff       	call   c0015a68 <picIoWait()>
c0015bef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bf3:	25 ff 00 00 00       	and    eax,0xff
c0015bf8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015bff:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015c03:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015c07:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015c0b:	ee                   	out    dx,al
c0015c0c:	e8 57 fe ff ff       	call   c0015a68 <picIoWait()>
c0015c11:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015c18:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015c1d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015c21:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c25:	ee                   	out    dx,al
c0015c26:	e8 3d fe ff ff       	call   c0015a68 <picIoWait()>
c0015c2b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c32:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c37:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c3f:	ee                   	out    dx,al
c0015c40:	e8 23 fe ff ff       	call   c0015a68 <picIoWait()>
c0015c45:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c4c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c51:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c55:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c59:	ee                   	out    dx,al
c0015c5a:	e8 09 fe ff ff       	call   c0015a68 <picIoWait()>
c0015c5f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c66:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c6b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c6f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c73:	ee                   	out    dx,al
c0015c74:	e8 ef fd ff ff       	call   c0015a68 <picIoWait()>
c0015c79:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c7d:	25 ff 00 00 00       	and    eax,0xff
c0015c82:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c89:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c8d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c91:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c95:	ee                   	out    dx,al
c0015c96:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c9a:	25 ff 00 00 00       	and    eax,0xff
c0015c9f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015ca6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015caa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015cae:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015cb2:	ee                   	out    dx,al
c0015cb3:	90                   	nop
c0015cb4:	83 c4 50             	add    esp,0x50
c0015cb7:	c3                   	ret    

c0015cb8 <picEOI(int)>:
c0015cb8:	83 ec 10             	sub    esp,0x10
c0015cbb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cc0:	75 22                	jne    c0015ce4 <picEOI(int)+0x2c>
c0015cc2:	6a 0b                	push   0xb
c0015cc4:	e8 db fd ff ff       	call   c0015aa4 <picGetIRQReg(int)>
c0015cc9:	83 c4 04             	add    esp,0x4
c0015ccc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015cd1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cd6:	25 ff ff 00 00       	and    eax,0xffff
c0015cdb:	25 80 00 00 00       	and    eax,0x80
c0015ce0:	74 72                	je     c0015d54 <picEOI(int)+0x9c>
c0015ce2:	66 90                	xchg   ax,ax
c0015ce4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015ce9:	75 31                	jne    c0015d1c <picEOI(int)+0x64>
c0015ceb:	6a 0b                	push   0xb
c0015ced:	e8 b2 fd ff ff       	call   c0015aa4 <picGetIRQReg(int)>
c0015cf2:	83 c4 04             	add    esp,0x4
c0015cf5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cfe:	66 85 c0             	test   ax,ax
c0015d01:	78 19                	js     c0015d1c <picEOI(int)+0x64>
c0015d03:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015d0a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015d0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015d13:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015d18:	ee                   	out    dx,al
c0015d19:	eb 3d                	jmp    c0015d58 <picEOI(int)+0xa0>
c0015d1b:	90                   	nop
c0015d1c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015d21:	7e 19                	jle    c0015d3c <picEOI(int)+0x84>
c0015d23:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d2a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d2f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d33:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d38:	ee                   	out    dx,al
c0015d39:	8d 76 00             	lea    esi,[esi+0x0]
c0015d3c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d43:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d48:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d4c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d51:	ee                   	out    dx,al
c0015d52:	eb 04                	jmp    c0015d58 <picEOI(int)+0xa0>
c0015d54:	90                   	nop
c0015d55:	8d 76 00             	lea    esi,[esi+0x0]
c0015d58:	83 c4 10             	add    esp,0x10
c0015d5b:	c3                   	ret    

c0015d5c <RTC::open(int, int, void*)>:
c0015d5c:	31 c0                	xor    eax,eax
c0015d5e:	c3                   	ret    
c0015d5f:	90                   	nop

c0015d60 <RTC::close(int, int, void*)>:
c0015d60:	31 c0                	xor    eax,eax
c0015d62:	c3                   	ret    
c0015d63:	90                   	nop

c0015d64 <RTC::timeInSecondsUTC()>:
c0015d64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d68:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d74:	c3                   	ret    
c0015d75:	90                   	nop

c0015d76 <RTC::timeInDatetimeUTC()>:
c0015d76:	53                   	push   ebx
c0015d77:	83 ec 14             	sub    esp,0x14
c0015d7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d82:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d84:	50                   	push   eax
c0015d85:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d88:	83 c4 0c             	add    esp,0xc
c0015d8b:	52                   	push   edx
c0015d8c:	50                   	push   eax
c0015d8d:	53                   	push   ebx
c0015d8e:	e8 3d 5f ff ff       	call   c000bcd0 <secondsToDatetime(unsigned long long)>
c0015d93:	89 d8                	mov    eax,ebx
c0015d95:	83 c4 14             	add    esp,0x14
c0015d98:	5b                   	pop    ebx
c0015d99:	c2 04 00             	ret    0x4

c0015d9c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d9c:	56                   	push   esi
c0015d9d:	53                   	push   ebx
c0015d9e:	83 ec 14             	sub    esp,0x14
c0015da1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015da5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015da7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015daa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015dae:	52                   	push   edx
c0015daf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015db3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015db7:	50                   	push   eax
c0015db8:	e8 13 5f ff ff       	call   c000bcd0 <secondsToDatetime(unsigned long long)>
c0015dbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dc1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015dc5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015dc9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015dcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015dd1:	89 f0                	mov    eax,esi
c0015dd3:	83 c4 20             	add    esp,0x20
c0015dd6:	5b                   	pop    ebx
c0015dd7:	5e                   	pop    esi
c0015dd8:	ff e0                	jmp    eax

c0015dda <RTC::~RTC()>:
c0015dda:	83 ec 0c             	sub    esp,0xc
c0015ddd:	ba 2c ef 01 c0       	mov    edx,0xc001ef2c
c0015de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015de6:	89 10                	mov    DWORD PTR [eax],edx
c0015de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dec:	83 ec 0c             	sub    esp,0xc
c0015def:	50                   	push   eax
c0015df0:	e8 5f 5c ff ff       	call   c000ba54 <Clock::~Clock()>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	90                   	nop
c0015df9:	83 c4 0c             	add    esp,0xc
c0015dfc:	c3                   	ret    
c0015dfd:	90                   	nop

c0015dfe <RTC::~RTC()>:
c0015dfe:	83 ec 0c             	sub    esp,0xc
c0015e01:	83 ec 0c             	sub    esp,0xc
c0015e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e08:	e8 cd ff ff ff       	call   c0015dda <RTC::~RTC()>
c0015e0d:	83 c4 10             	add    esp,0x10
c0015e10:	83 ec 08             	sub    esp,0x8
c0015e13:	68 60 01 00 00       	push   0x160
c0015e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e1c:	e8 05 4c ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c0015e21:	83 c4 10             	add    esp,0x10
c0015e24:	83 c4 0c             	add    esp,0xc
c0015e27:	c3                   	ret    

c0015e28 <RTC::get_update_in_progress_flag()>:
c0015e28:	83 ec 14             	sub    esp,0x14
c0015e2b:	6a 0a                	push   0xa
c0015e2d:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015e33:	e8 3a 17 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015e38:	83 c4 1c             	add    esp,0x1c
c0015e3b:	c0 e8 07             	shr    al,0x7
c0015e3e:	c3                   	ret    
c0015e3f:	90                   	nop

c0015e40 <RTC::completeRTCRefresh()>:
c0015e40:	55                   	push   ebp
c0015e41:	57                   	push   edi
c0015e42:	56                   	push   esi
c0015e43:	53                   	push   ebx
c0015e44:	83 ec 2c             	sub    esp,0x2c
c0015e47:	8b 1d ac 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fac
c0015e4d:	83 ec 0c             	sub    esp,0xc
c0015e50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e54:	e8 cf ff ff ff       	call   c0015e28 <RTC::get_update_in_progress_flag()>
c0015e59:	83 c4 10             	add    esp,0x10
c0015e5c:	84 c0                	test   al,al
c0015e5e:	74 0e                	je     c0015e6e <RTC::completeRTCRefresh()+0x2e>
c0015e60:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e66:	3b 05 ac 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022fac
c0015e6c:	73 df                	jae    c0015e4d <RTC::completeRTCRefresh()+0xd>
c0015e6e:	55                   	push   ebp
c0015e6f:	55                   	push   ebp
c0015e70:	6a 00                	push   0x0
c0015e72:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015e78:	e8 f5 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015e7d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e81:	58                   	pop    eax
c0015e82:	5a                   	pop    edx
c0015e83:	6a 02                	push   0x2
c0015e85:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015e8b:	e8 e2 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015e90:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e94:	59                   	pop    ecx
c0015e95:	5b                   	pop    ebx
c0015e96:	6a 04                	push   0x4
c0015e98:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015e9e:	e8 cf 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015ea3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015ea7:	5e                   	pop    esi
c0015ea8:	5f                   	pop    edi
c0015ea9:	6a 07                	push   0x7
c0015eab:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015eb1:	e8 bc 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015eb6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015eba:	5d                   	pop    ebp
c0015ebb:	58                   	pop    eax
c0015ebc:	6a 08                	push   0x8
c0015ebe:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015ec4:	e8 a9 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015ec9:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015ecd:	58                   	pop    eax
c0015ece:	5a                   	pop    edx
c0015ecf:	6a 09                	push   0x9
c0015ed1:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015ed7:	e8 96 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015edc:	83 c4 10             	add    esp,0x10
c0015edf:	0f b6 e8             	movzx  ebp,al
c0015ee2:	8b 1d ac 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fac
c0015ee8:	83 ec 0c             	sub    esp,0xc
c0015eeb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015eef:	e8 34 ff ff ff       	call   c0015e28 <RTC::get_update_in_progress_flag()>
c0015ef4:	83 c4 10             	add    esp,0x10
c0015ef7:	84 c0                	test   al,al
c0015ef9:	74 0e                	je     c0015f09 <RTC::completeRTCRefresh()+0xc9>
c0015efb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015f01:	3b 05 ac 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022fac
c0015f07:	73 df                	jae    c0015ee8 <RTC::completeRTCRefresh()+0xa8>
c0015f09:	50                   	push   eax
c0015f0a:	50                   	push   eax
c0015f0b:	6a 00                	push   0x0
c0015f0d:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f13:	e8 5a 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015f18:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015f1c:	58                   	pop    eax
c0015f1d:	5a                   	pop    edx
c0015f1e:	6a 02                	push   0x2
c0015f20:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f26:	e8 47 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015f2b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f2f:	59                   	pop    ecx
c0015f30:	5b                   	pop    ebx
c0015f31:	6a 04                	push   0x4
c0015f33:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f39:	e8 34 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015f3e:	5e                   	pop    esi
c0015f3f:	88 c3                	mov    bl,al
c0015f41:	5f                   	pop    edi
c0015f42:	6a 07                	push   0x7
c0015f44:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f4a:	e8 23 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015f4f:	89 c6                	mov    esi,eax
c0015f51:	58                   	pop    eax
c0015f52:	5a                   	pop    edx
c0015f53:	6a 08                	push   0x8
c0015f55:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f5b:	e8 12 16 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015f60:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f64:	59                   	pop    ecx
c0015f65:	5f                   	pop    edi
c0015f66:	6a 09                	push   0x9
c0015f68:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015f6e:	e8 ff 15 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015f73:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f77:	0f b6 f8             	movzx  edi,al
c0015f7a:	83 c4 10             	add    esp,0x10
c0015f7d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f81:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f85:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f89:	89 f1                	mov    ecx,esi
c0015f8b:	0f 94 c0             	sete   al
c0015f8e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f92:	0f 94 c2             	sete   dl
c0015f95:	21 d0                	and    eax,edx
c0015f97:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f9b:	0f 94 c2             	sete   dl
c0015f9e:	21 c2                	and    edx,eax
c0015fa0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015fa4:	0f 94 c0             	sete   al
c0015fa7:	21 d0                	and    eax,edx
c0015fa9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015fad:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015fb1:	0f 94 c1             	sete   cl
c0015fb4:	84 c8                	test   al,cl
c0015fb6:	75 29                	jne    c0015fe1 <RTC::completeRTCRefresh()+0x1a1>
c0015fb8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fbc:	89 fd                	mov    ebp,edi
c0015fbe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015fc2:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015fc6:	89 f0                	mov    eax,esi
c0015fc8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fcc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fd0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fd4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fd8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fdc:	e9 01 ff ff ff       	jmp    c0015ee2 <RTC::completeRTCRefresh()+0xa2>
c0015fe1:	39 fd                	cmp    ebp,edi
c0015fe3:	75 d3                	jne    c0015fb8 <RTC::completeRTCRefresh()+0x178>
c0015fe5:	55                   	push   ebp
c0015fe6:	55                   	push   ebp
c0015fe7:	6a 0b                	push   0xb
c0015fe9:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0015fef:	e8 7e 15 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0015ff4:	83 c4 10             	add    esp,0x10
c0015ff7:	89 c5                	mov    ebp,eax
c0015ff9:	a8 04                	test   al,0x4
c0015ffb:	75 78                	jne    c0016075 <RTC::completeRTCRefresh()+0x235>
c0015ffd:	b1 0a                	mov    cl,0xa
c0015fff:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0016003:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016007:	83 e2 0f             	and    edx,0xf
c001600a:	c0 e8 04             	shr    al,0x4
c001600d:	c1 ef 04             	shr    edi,0x4
c0016010:	f6 e1                	mul    cl
c0016012:	6b ff 0a             	imul   edi,edi,0xa
c0016015:	01 d0                	add    eax,edx
c0016017:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001601b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001601f:	83 e2 0f             	and    edx,0xf
c0016022:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016026:	c0 e8 04             	shr    al,0x4
c0016029:	f6 e1                	mul    cl
c001602b:	01 d0                	add    eax,edx
c001602d:	88 da                	mov    dl,bl
c001602f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016033:	83 e2 0f             	and    edx,0xf
c0016036:	88 d8                	mov    al,bl
c0016038:	83 e3 80             	and    ebx,0xffffff80
c001603b:	c0 e8 04             	shr    al,0x4
c001603e:	83 e0 07             	and    eax,0x7
c0016041:	f6 e1                	mul    cl
c0016043:	01 d0                	add    eax,edx
c0016045:	89 f2                	mov    edx,esi
c0016047:	09 c3                	or     ebx,eax
c0016049:	83 e2 0f             	and    edx,0xf
c001604c:	89 f0                	mov    eax,esi
c001604e:	c0 e8 04             	shr    al,0x4
c0016051:	f6 e1                	mul    cl
c0016053:	8d 34 02             	lea    esi,[edx+eax*1]
c0016056:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001605a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001605e:	83 e2 0f             	and    edx,0xf
c0016061:	c0 e8 04             	shr    al,0x4
c0016064:	f6 e1                	mul    cl
c0016066:	01 d0                	add    eax,edx
c0016068:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001606c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016070:	83 e0 0f             	and    eax,0xf
c0016073:	01 c7                	add    edi,eax
c0016075:	83 e5 02             	and    ebp,0x2
c0016078:	75 14                	jne    c001608e <RTC::completeRTCRefresh()+0x24e>
c001607a:	84 db                	test   bl,bl
c001607c:	79 10                	jns    c001608e <RTC::completeRTCRefresh()+0x24e>
c001607e:	83 e3 7f             	and    ebx,0x7f
c0016081:	b9 18 00 00 00       	mov    ecx,0x18
c0016086:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016089:	99                   	cdq    
c001608a:	f7 f9                	idiv   ecx
c001608c:	88 d3                	mov    bl,dl
c001608e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016094:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001609a:	77 06                	ja     c00160a2 <RTC::completeRTCRefresh()+0x262>
c001609c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c00160a2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c00160a7:	31 d2                	xor    edx,edx
c00160a9:	c1 e1 10             	shl    ecx,0x10
c00160ac:	89 d7                	mov    edi,edx
c00160ae:	c1 e5 10             	shl    ebp,0x10
c00160b1:	31 c0                	xor    eax,eax
c00160b3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00160b9:	09 cf                	or     edi,ecx
c00160bb:	89 fa                	mov    edx,edi
c00160bd:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c00160c1:	88 da                	mov    dl,bl
c00160c3:	89 f3                	mov    ebx,esi
c00160c5:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160c9:	88 d8                	mov    al,bl
c00160cb:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160cf:	0f b7 c8             	movzx  ecx,ax
c00160d2:	09 e9                	or     ecx,ebp
c00160d4:	89 c8                	mov    eax,ecx
c00160d6:	51                   	push   ecx
c00160d7:	51                   	push   ecx
c00160d8:	52                   	push   edx
c00160d9:	50                   	push   eax
c00160da:	e8 64 5a ff ff       	call   c000bb43 <datetimeToSeconds(datetime_t)>
c00160df:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160e3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160e9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160ef:	83 c4 3c             	add    esp,0x3c
c00160f2:	5b                   	pop    ebx
c00160f3:	5e                   	pop    esi
c00160f4:	5f                   	pop    edi
c00160f5:	5d                   	pop    ebp
c00160f6:	c3                   	ret    
c00160f7:	90                   	nop

c00160f8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160f8:	55                   	push   ebp
c00160f9:	57                   	push   edi
c00160fa:	56                   	push   esi
c00160fb:	53                   	push   ebx
c00160fc:	83 ec 30             	sub    esp,0x30
c00160ff:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016103:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016107:	6a 00                	push   0x0
c0016109:	6a 00                	push   0x0
c001610b:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016111:	e8 72 15 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016116:	83 c4 0c             	add    esp,0xc
c0016119:	6a 00                	push   0x0
c001611b:	6a 02                	push   0x2
c001611d:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016123:	e8 60 15 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016128:	31 d2                	xor    edx,edx
c001612a:	89 f9                	mov    ecx,edi
c001612c:	89 f8                	mov    eax,edi
c001612e:	c1 e9 10             	shr    ecx,0x10
c0016131:	0f b6 c4             	movzx  eax,ah
c0016134:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016138:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001613c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016140:	b9 64 00 00 00       	mov    ecx,0x64
c0016145:	89 f0                	mov    eax,esi
c0016147:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001614b:	89 f0                	mov    eax,esi
c001614d:	0f b6 c4             	movzx  eax,ah
c0016150:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016154:	89 f0                	mov    eax,esi
c0016156:	c1 e8 10             	shr    eax,0x10
c0016159:	66 f7 f1             	div    cx
c001615c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016161:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016166:	59                   	pop    ecx
c0016167:	5b                   	pop    ebx
c0016168:	89 fb                	mov    ebx,edi
c001616a:	6a 0b                	push   0xb
c001616c:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016172:	e8 fb 13 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0016177:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001617b:	83 c4 10             	add    esp,0x10
c001617e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016183:	75 74                	jne    c00161f9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016185:	b2 0a                	mov    dl,0xa
c0016187:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001618b:	0f b6 c1             	movzx  eax,cl
c001618e:	f6 f2                	div    dl
c0016190:	88 c3                	mov    bl,al
c0016192:	88 e0                	mov    al,ah
c0016194:	c1 e3 04             	shl    ebx,0x4
c0016197:	09 c3                	or     ebx,eax
c0016199:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001619e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c00161a2:	f6 f2                	div    dl
c00161a4:	88 c1                	mov    cl,al
c00161a6:	88 e0                	mov    al,ah
c00161a8:	c1 e1 04             	shl    ecx,0x4
c00161ab:	09 c1                	or     ecx,eax
c00161ad:	89 f8                	mov    eax,edi
c00161af:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00161b3:	0f b6 c0             	movzx  eax,al
c00161b6:	f6 f2                	div    dl
c00161b8:	88 c3                	mov    bl,al
c00161ba:	88 e0                	mov    al,ah
c00161bc:	c1 e3 04             	shl    ebx,0x4
c00161bf:	09 c3                	or     ebx,eax
c00161c1:	89 f0                	mov    eax,esi
c00161c3:	0f b6 c0             	movzx  eax,al
c00161c6:	f6 f2                	div    dl
c00161c8:	88 c1                	mov    cl,al
c00161ca:	88 e0                	mov    al,ah
c00161cc:	c1 e1 04             	shl    ecx,0x4
c00161cf:	09 c1                	or     ecx,eax
c00161d1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161d6:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161da:	f6 f2                	div    dl
c00161dc:	88 c1                	mov    cl,al
c00161de:	88 e0                	mov    al,ah
c00161e0:	c1 e1 04             	shl    ecx,0x4
c00161e3:	09 c1                	or     ecx,eax
c00161e5:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161ea:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161ee:	f6 f2                	div    dl
c00161f0:	89 c5                	mov    ebp,eax
c00161f2:	88 e0                	mov    al,ah
c00161f4:	c1 e5 04             	shl    ebp,0x4
c00161f7:	09 c5                	or     ebp,eax
c00161f9:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161fe:	75 17                	jne    c0016217 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016200:	80 fb 0b             	cmp    bl,0xb
c0016203:	76 0c                	jbe    c0016211 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016205:	80 eb 0c             	sub    bl,0xc
c0016208:	75 02                	jne    c001620c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001620a:	b3 0c                	mov    bl,0xc
c001620c:	83 cb 80             	or     ebx,0xffffff80
c001620f:	eb 06                	jmp    c0016217 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016211:	84 db                	test   bl,bl
c0016213:	75 02                	jne    c0016217 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016215:	b3 0c                	mov    bl,0xc
c0016217:	0f b6 db             	movzx  ebx,bl
c001621a:	50                   	push   eax
c001621b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016220:	50                   	push   eax
c0016221:	6a 00                	push   0x0
c0016223:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016229:	e8 5a 14 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c001622e:	83 c4 0c             	add    esp,0xc
c0016231:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016236:	50                   	push   eax
c0016237:	6a 02                	push   0x2
c0016239:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001623f:	e8 44 14 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016244:	83 c4 0c             	add    esp,0xc
c0016247:	53                   	push   ebx
c0016248:	6a 04                	push   0x4
c001624a:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016250:	e8 33 14 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016255:	83 c4 0c             	add    esp,0xc
c0016258:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001625d:	50                   	push   eax
c001625e:	6a 07                	push   0x7
c0016260:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016266:	e8 1d 14 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c001626b:	83 c4 0c             	add    esp,0xc
c001626e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016273:	50                   	push   eax
c0016274:	6a 08                	push   0x8
c0016276:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c001627c:	e8 07 14 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016281:	83 c4 0c             	add    esp,0xc
c0016284:	89 e8                	mov    eax,ebp
c0016286:	0f b6 e8             	movzx  ebp,al
c0016289:	55                   	push   ebp
c001628a:	6a 09                	push   0x9
c001628c:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c0016292:	e8 f1 13 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016297:	5a                   	pop    edx
c0016298:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001629c:	e8 9f fb ff ff       	call   c0015e40 <RTC::completeRTCRefresh()>
c00162a1:	83 c4 3c             	add    esp,0x3c
c00162a4:	b0 01                	mov    al,0x1
c00162a6:	5b                   	pop    ebx
c00162a7:	5e                   	pop    esi
c00162a8:	5f                   	pop    edi
c00162a9:	5d                   	pop    ebp
c00162aa:	c3                   	ret    

c00162ab <rtcIRQHandler(regs*, void*)>:
c00162ab:	53                   	push   ebx
c00162ac:	83 ec 10             	sub    esp,0x10
c00162af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00162b3:	6a 0c                	push   0xc
c00162b5:	ff 35 d8 09 02 c0    	push   DWORD PTR ds:0xc00209d8
c00162bb:	e8 b2 12 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c00162c0:	83 c4 10             	add    esp,0x10
c00162c3:	84 c0                	test   al,al
c00162c5:	79 24                	jns    c00162eb <rtcIRQHandler(regs*, void*)+0x40>
c00162c7:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162ce:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162d5:	66 ff 05 34 3f 02 c0 	inc    WORD PTR ds:0xc0023f34
c00162dc:	75 0d                	jne    c00162eb <rtcIRQHandler(regs*, void*)+0x40>
c00162de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162e2:	83 c4 08             	add    esp,0x8
c00162e5:	5b                   	pop    ebx
c00162e6:	e9 55 fb ff ff       	jmp    c0015e40 <RTC::completeRTCRefresh()>
c00162eb:	83 c4 08             	add    esp,0x8
c00162ee:	5b                   	pop    ebx
c00162ef:	c3                   	ret    

c00162f0 <RTC::RTC()>:
c00162f0:	83 ec 1c             	sub    esp,0x1c
c00162f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162f7:	83 ec 08             	sub    esp,0x8
c00162fa:	68 0f ef 01 c0       	push   0xc001ef0f
c00162ff:	50                   	push   eax
c0016300:	e8 19 57 ff ff       	call   c000ba1e <Clock::Clock(char const*)>
c0016305:	83 c4 10             	add    esp,0x10
c0016308:	ba 2c ef 01 c0       	mov    edx,0xc001ef2c
c001630d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016311:	89 10                	mov    DWORD PTR [eax],edx
c0016313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016317:	83 ec 0c             	sub    esp,0xc
c001631a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001631e:	6a 01                	push   0x1
c0016320:	68 ab 62 01 c0       	push   0xc00162ab
c0016325:	6a 08                	push   0x8
c0016327:	50                   	push   eax
c0016328:	e8 db 5b ff ff       	call   c000bf08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001632d:	83 c4 20             	add    esp,0x20
c0016330:	89 c2                	mov    edx,eax
c0016332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016336:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001633c:	fa                   	cli    
c001633d:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0016342:	40                   	inc    eax
c0016343:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c0016348:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001634d:	83 ec 08             	sub    esp,0x8
c0016350:	6a 0b                	push   0xb
c0016352:	50                   	push   eax
c0016353:	e8 1a 12 ff ff       	call   c0007572 <Computer::readCMOS(unsigned char)>
c0016358:	83 c4 10             	add    esp,0x10
c001635b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001635f:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0016364:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016368:	83 ca 10             	or     edx,0x10
c001636b:	81 e2 ff 00 00 00    	and    edx,0xff
c0016371:	83 ec 04             	sub    esp,0x4
c0016374:	52                   	push   edx
c0016375:	6a 0b                	push   0xb
c0016377:	50                   	push   eax
c0016378:	e8 0b 13 ff ff       	call   c0007688 <Computer::writeCMOS(unsigned char, unsigned char)>
c001637d:	83 c4 10             	add    esp,0x10
c0016380:	83 ec 0c             	sub    esp,0xc
c0016383:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016387:	e8 b4 fa ff ff       	call   c0015e40 <RTC::completeRTCRefresh()>
c001638c:	83 c4 10             	add    esp,0x10
c001638f:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c0016394:	48                   	dec    eax
c0016395:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001639a:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001639f:	85 c0                	test   eax,eax
c00163a1:	75 01                	jne    c00163a4 <RTC::RTC()+0xb4>
c00163a3:	fb                   	sti    
c00163a4:	90                   	nop
c00163a5:	83 c4 1c             	add    esp,0x1c
c00163a8:	c3                   	ret    
c00163a9:	66 90                	xchg   ax,ax
c00163ab:	90                   	nop

c00163ac <HalConsoleScroll(int, int)>:
c00163ac:	83 ec 10             	sub    esp,0x10
c00163af:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00163b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00163bf:	90                   	nop
c00163c0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163c5:	0f 8f e1 00 00 00    	jg     c00164ac <HalConsoleScroll(int, int)+0x100>
c00163cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163d3:	90                   	nop
c00163d4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163dc:	0f 8f be 00 00 00    	jg     c00164a0 <HalConsoleScroll(int, int)+0xf4>
c00163e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163e6:	89 d0                	mov    eax,edx
c00163e8:	c1 e0 02             	shl    eax,0x2
c00163eb:	01 d0                	add    eax,edx
c00163ed:	c1 e0 05             	shl    eax,0x5
c00163f0:	89 c2                	mov    edx,eax
c00163f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163f6:	01 d0                	add    eax,edx
c00163f8:	89 c2                	mov    edx,eax
c00163fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163fe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016401:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016405:	89 d0                	mov    eax,edx
c0016407:	c1 e0 02             	shl    eax,0x2
c001640a:	01 d0                	add    eax,edx
c001640c:	c1 e0 05             	shl    eax,0x5
c001640f:	89 c2                	mov    edx,eax
c0016411:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016415:	01 d0                	add    eax,edx
c0016417:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001641d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016421:	01 c2                	add    edx,eax
c0016423:	8a 01                	mov    al,BYTE PTR [ecx]
c0016425:	88 02                	mov    BYTE PTR [edx],al
c0016427:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001642c:	75 66                	jne    c0016494 <HalConsoleScroll(int, int)+0xe8>
c001642e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016432:	83 e0 01             	and    eax,0x1
c0016435:	74 39                	je     c0016470 <HalConsoleScroll(int, int)+0xc4>
c0016437:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001643b:	83 e0 0f             	and    eax,0xf
c001643e:	88 c2                	mov    dl,al
c0016440:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016444:	c1 e0 04             	shl    eax,0x4
c0016447:	88 d1                	mov    cl,dl
c0016449:	09 c1                	or     ecx,eax
c001644b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001644f:	89 d0                	mov    eax,edx
c0016451:	c1 e0 02             	shl    eax,0x2
c0016454:	01 d0                	add    eax,edx
c0016456:	c1 e0 05             	shl    eax,0x5
c0016459:	89 c2                	mov    edx,eax
c001645b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001645f:	01 d0                	add    eax,edx
c0016461:	89 c2                	mov    edx,eax
c0016463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016467:	01 d0                	add    eax,edx
c0016469:	88 ca                	mov    dl,cl
c001646b:	88 10                	mov    BYTE PTR [eax],dl
c001646d:	eb 25                	jmp    c0016494 <HalConsoleScroll(int, int)+0xe8>
c001646f:	90                   	nop
c0016470:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016474:	89 d0                	mov    eax,edx
c0016476:	c1 e0 02             	shl    eax,0x2
c0016479:	01 d0                	add    eax,edx
c001647b:	c1 e0 05             	shl    eax,0x5
c001647e:	89 c2                	mov    edx,eax
c0016480:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016484:	01 d0                	add    eax,edx
c0016486:	89 c2                	mov    edx,eax
c0016488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001648c:	01 d0                	add    eax,edx
c001648e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016491:	8d 76 00             	lea    esi,[esi+0x0]
c0016494:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016498:	e9 37 ff ff ff       	jmp    c00163d4 <HalConsoleScroll(int, int)+0x28>
c001649d:	8d 76 00             	lea    esi,[esi+0x0]
c00164a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00164a4:	e9 17 ff ff ff       	jmp    c00163c0 <HalConsoleScroll(int, int)+0x14>
c00164a9:	8d 76 00             	lea    esi,[esi+0x0]
c00164ac:	90                   	nop
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	c3                   	ret    
c00164b1:	8d 76 00             	lea    esi,[esi+0x0]

c00164b4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00164b4:	83 ec 14             	sub    esp,0x14
c00164b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164bb:	88 04 24             	mov    BYTE PTR [esp],al
c00164be:	8a 04 24             	mov    al,BYTE PTR [esp]
c00164c1:	25 ff 00 00 00       	and    eax,0xff
c00164c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164ca:	89 d1                	mov    ecx,edx
c00164cc:	83 e1 0f             	and    ecx,0xf
c00164cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164d3:	c1 e2 04             	shl    edx,0x4
c00164d6:	81 e2 ff 00 00 00    	and    edx,0xff
c00164dc:	09 ca                	or     edx,ecx
c00164de:	c1 e2 08             	shl    edx,0x8
c00164e1:	09 d0                	or     eax,edx
c00164e3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164e8:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164f4:	89 d0                	mov    eax,edx
c00164f6:	c1 e0 02             	shl    eax,0x2
c00164f9:	01 d0                	add    eax,edx
c00164fb:	c1 e0 04             	shl    eax,0x4
c00164fe:	89 c2                	mov    edx,eax
c0016500:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016504:	01 d0                	add    eax,edx
c0016506:	01 c0                	add    eax,eax
c0016508:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001650c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016515:	66 89 02             	mov    WORD PTR [edx],ax
c0016518:	90                   	nop
c0016519:	83 c4 14             	add    esp,0x14
c001651c:	c3                   	ret    
c001651d:	8d 76 00             	lea    esi,[esi+0x0]

c0016520 <HalConsoleCursorUpdate(int, int)>:
c0016520:	83 ec 20             	sub    esp,0x20
c0016523:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016527:	89 c2                	mov    edx,eax
c0016529:	89 d0                	mov    eax,edx
c001652b:	c1 e0 02             	shl    eax,0x2
c001652e:	01 d0                	add    eax,edx
c0016530:	c1 e0 04             	shl    eax,0x4
c0016533:	89 c2                	mov    edx,eax
c0016535:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016539:	01 d0                	add    eax,edx
c001653b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016540:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016547:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001654c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016550:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016554:	ee                   	out    dx,al
c0016555:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001655a:	25 ff 00 00 00       	and    eax,0xff
c001655f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016566:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001656a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001656e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016572:	ee                   	out    dx,al
c0016573:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001657a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001657f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016583:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016587:	ee                   	out    dx,al
c0016588:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001658d:	66 c1 e8 08          	shr    ax,0x8
c0016591:	25 ff 00 00 00       	and    eax,0xff
c0016596:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001659d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00165a1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00165a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00165a9:	ee                   	out    dx,al
c00165aa:	90                   	nop
c00165ab:	83 c4 20             	add    esp,0x20
c00165ae:	c3                   	ret    
c00165af:	90                   	nop

c00165b0 <FAT::getName()>:
c00165b0:	b8 60 ef 01 c0       	mov    eax,0xc001ef60
c00165b5:	c3                   	ret    
c00165b6:	66 90                	xchg   ax,ax

c00165b8 <FAT::tell(void*, unsigned long long*)>:
c00165b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165bd:	75 09                	jne    c00165c8 <FAT::tell(void*, unsigned long long*)+0x10>
c00165bf:	b8 04 00 00 00       	mov    eax,0x4
c00165c4:	c3                   	ret    
c00165c5:	8d 76 00             	lea    esi,[esi+0x0]
c00165c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165cd:	75 09                	jne    c00165d8 <FAT::tell(void*, unsigned long long*)+0x20>
c00165cf:	b8 04 00 00 00       	mov    eax,0x4
c00165d4:	c3                   	ret    
c00165d5:	8d 76 00             	lea    esi,[esi+0x0]
c00165d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165dc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165df:	ba 00 00 00 00       	mov    edx,0x0
c00165e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165e8:	89 01                	mov    DWORD PTR [ecx],eax
c00165ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165ed:	b8 00 00 00 00       	mov    eax,0x0
c00165f2:	c3                   	ret    
c00165f3:	90                   	nop

c00165f4 <FAT::stat(void*, unsigned long long*)>:
c00165f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165f9:	75 09                	jne    c0016604 <FAT::stat(void*, unsigned long long*)+0x10>
c00165fb:	b8 04 00 00 00       	mov    eax,0x4
c0016600:	c3                   	ret    
c0016601:	8d 76 00             	lea    esi,[esi+0x0]
c0016604:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016609:	75 09                	jne    c0016614 <FAT::stat(void*, unsigned long long*)+0x20>
c001660b:	b8 04 00 00 00       	mov    eax,0x4
c0016610:	c3                   	ret    
c0016611:	8d 76 00             	lea    esi,[esi+0x0]
c0016614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016618:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001661b:	ba 00 00 00 00       	mov    edx,0x0
c0016620:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016624:	89 01                	mov    DWORD PTR [ecx],eax
c0016626:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016629:	b8 00 00 00 00       	mov    eax,0x0
c001662e:	c3                   	ret    
c001662f:	90                   	nop

c0016630 <FAT::~FAT()>:
c0016630:	83 ec 0c             	sub    esp,0xc
c0016633:	ba ac ef 01 c0       	mov    edx,0xc001efac
c0016638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001663c:	89 10                	mov    DWORD PTR [eax],edx
c001663e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016642:	83 ec 0c             	sub    esp,0xc
c0016645:	50                   	push   eax
c0016646:	e8 17 48 ff ff       	call   c000ae62 <Filesystem::~Filesystem()>
c001664b:	83 c4 10             	add    esp,0x10
c001664e:	90                   	nop
c001664f:	83 c4 0c             	add    esp,0xc
c0016652:	c3                   	ret    
c0016653:	90                   	nop

c0016654 <FAT::~FAT()>:
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	83 ec 0c             	sub    esp,0xc
c001665a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001665e:	e8 cd ff ff ff       	call   c0016630 <FAT::~FAT()>
c0016663:	83 c4 10             	add    esp,0x10
c0016666:	83 ec 08             	sub    esp,0x8
c0016669:	6a 08                	push   0x8
c001666b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001666f:	e8 b2 43 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c0016674:	83 c4 10             	add    esp,0x10
c0016677:	83 c4 0c             	add    esp,0xc
c001667a:	c3                   	ret    
c001667b:	90                   	nop

c001667c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001667c:	83 ec 1c             	sub    esp,0x1c
c001667f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016686:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001668b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001668f:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c0016696:	83 f8 ff             	cmp    eax,0xffffffff
c0016699:	75 35                	jne    c00166d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001669b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001669f:	88 c2                	mov    dl,al
c00166a1:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c00166a6:	01 d0                	add    eax,edx
c00166a8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166ac:	8b 15 40 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f40
c00166b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166b6:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c00166bd:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c00166c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166c6:	89 14 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],edx
c00166cd:	eb 19                	jmp    c00166e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166cf:	90                   	nop
c00166d0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166d4:	88 c2                	mov    dl,al
c00166d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166da:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c00166e1:	01 d0                	add    eax,edx
c00166e3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166e7:	90                   	nop
c00166e8:	83 ec 04             	sub    esp,0x4
c00166eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166f3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166f7:	50                   	push   eax
c00166f8:	e8 77 e7 fe ff       	call   c0004e74 <f_getlabel>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016704:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016709:	75 09                	jne    c0016714 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001670b:	b8 00 00 00 00       	mov    eax,0x0
c0016710:	eb 0a                	jmp    c001671c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016712:	66 90                	xchg   ax,ax
c0016714:	b8 01 00 00 00       	mov    eax,0x1
c0016719:	8d 76 00             	lea    esi,[esi+0x0]
c001671c:	83 c4 1c             	add    esp,0x1c
c001671f:	c3                   	ret    

c0016720 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016720:	57                   	push   edi
c0016721:	83 ec 58             	sub    esp,0x58
c0016724:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001672c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016730:	b8 00 00 00 00       	mov    eax,0x0
c0016735:	b9 0f 00 00 00       	mov    ecx,0xf
c001673a:	fc                   	cld    
c001673b:	89 d7                	mov    edi,edx
c001673d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001673f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016743:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c001674a:	83 f8 ff             	cmp    eax,0xffffffff
c001674d:	75 35                	jne    c0016784 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001674f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016753:	88 c2                	mov    dl,al
c0016755:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c001675a:	01 d0                	add    eax,edx
c001675c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016760:	8b 15 40 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f40
c0016766:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001676a:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016771:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016776:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001677a:	89 14 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],edx
c0016781:	eb 19                	jmp    c001679c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016783:	90                   	nop
c0016784:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016788:	88 c2                	mov    dl,al
c001678a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001678e:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c0016795:	01 d0                	add    eax,edx
c0016797:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001679b:	90                   	nop
c001679c:	83 ec 08             	sub    esp,0x8
c001679f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00167a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167a7:	50                   	push   eax
c00167a8:	e8 33 a0 fe ff       	call   c00007e0 <strcat>
c00167ad:	83 c4 10             	add    esp,0x10
c00167b0:	83 ec 0c             	sub    esp,0xc
c00167b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167b7:	50                   	push   eax
c00167b8:	e8 08 e8 fe ff       	call   c0004fc5 <f_setlabel>
c00167bd:	83 c4 10             	add    esp,0x10
c00167c0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00167c4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167c9:	75 09                	jne    c00167d4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167cb:	b8 00 00 00 00       	mov    eax,0x0
c00167d0:	eb 0a                	jmp    c00167dc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167d2:	66 90                	xchg   ax,ax
c00167d4:	b8 01 00 00 00       	mov    eax,0x1
c00167d9:	8d 76 00             	lea    esi,[esi+0x0]
c00167dc:	83 c4 58             	add    esp,0x58
c00167df:	5f                   	pop    edi
c00167e0:	c3                   	ret    
c00167e1:	90                   	nop
c00167e2:	66 90                	xchg   ax,ax

c00167e4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167e4:	83 ec 2c             	sub    esp,0x2c
c00167e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167ef:	83 ec 08             	sub    esp,0x8
c00167f2:	68 84 ef 01 c0       	push   0xc001ef84
c00167f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167fb:	e8 00 9f fe ff       	call   c0000700 <strcmp>
c0016800:	83 c4 10             	add    esp,0x10
c0016803:	85 c0                	test   eax,eax
c0016805:	0f 94 c0             	sete   al
c0016808:	84 c0                	test   al,al
c001680a:	74 10                	je     c001681c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001680c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016814:	e9 b3 00 00 00       	jmp    c00168cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016819:	8d 76 00             	lea    esi,[esi+0x0]
c001681c:	83 ec 08             	sub    esp,0x8
c001681f:	68 76 ef 01 c0       	push   0xc001ef76
c0016824:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016828:	e8 d3 9e fe ff       	call   c0000700 <strcmp>
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	85 c0                	test   eax,eax
c0016832:	0f 94 c0             	sete   al
c0016835:	84 c0                	test   al,al
c0016837:	74 0f                	je     c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016839:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016841:	e9 86 00 00 00       	jmp    c00168cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016846:	66 90                	xchg   ax,ax
c0016848:	83 ec 08             	sub    esp,0x8
c001684b:	68 7c ef 01 c0       	push   0xc001ef7c
c0016850:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016854:	e8 a7 9e fe ff       	call   c0000700 <strcmp>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	85 c0                	test   eax,eax
c001685e:	0f 94 c0             	sete   al
c0016861:	84 c0                	test   al,al
c0016863:	74 0b                	je     c0016870 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016865:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001686d:	eb 5d                	jmp    c00168cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001686f:	90                   	nop
c0016870:	83 ec 08             	sub    esp,0x8
c0016873:	68 1c d0 01 c0       	push   0xc001d01c
c0016878:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001687c:	e8 7f 9e fe ff       	call   c0000700 <strcmp>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	85 c0                	test   eax,eax
c0016886:	0f 94 c0             	sete   al
c0016889:	84 c0                	test   al,al
c001688b:	74 0b                	je     c0016898 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001688d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016895:	eb 35                	jmp    c00168cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016897:	90                   	nop
c0016898:	83 ec 08             	sub    esp,0x8
c001689b:	68 82 ef 01 c0       	push   0xc001ef82
c00168a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00168a4:	e8 57 9e fe ff       	call   c0000700 <strcmp>
c00168a9:	83 c4 10             	add    esp,0x10
c00168ac:	85 c0                	test   eax,eax
c00168ae:	0f 94 c0             	sete   al
c00168b1:	84 c0                	test   al,al
c00168b3:	74 0b                	je     c00168c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00168b5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00168bd:	eb 0d                	jmp    c00168cc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00168bf:	90                   	nop
c00168c0:	b8 08 00 00 00       	mov    eax,0x8
c00168c5:	e9 ea 00 00 00       	jmp    c00169b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168ca:	66 90                	xchg   ax,ax
c00168cc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168d3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168dc:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c00168e3:	83 f8 ff             	cmp    eax,0xffffffff
c00168e6:	75 34                	jne    c001691c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168e8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168ec:	88 c2                	mov    dl,al
c00168ee:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c00168f3:	01 d0                	add    eax,edx
c00168f5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168f9:	8b 15 40 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f40
c00168ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016903:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c001690a:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c001690f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016913:	89 14 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],edx
c001691a:	eb 18                	jmp    c0016934 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001691c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016920:	88 c2                	mov    dl,al
c0016922:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016926:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c001692d:	01 d0                	add    eax,edx
c001692f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016933:	90                   	nop
c0016934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016938:	88 04 24             	mov    BYTE PTR [esp],al
c001693b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001693f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016943:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001694b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016950:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016958:	83 ec 0c             	sub    esp,0xc
c001695b:	68 00 20 00 00       	push   0x2000
c0016960:	e8 20 15 ff ff       	call   c0007e85 <malloc>
c0016965:	83 c4 10             	add    esp,0x10
c0016968:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001696c:	68 00 20 00 00       	push   0x2000
c0016971:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016975:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016979:	50                   	push   eax
c001697a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001697e:	50                   	push   eax
c001697f:	e8 31 e9 fe ff       	call   c00052b5 <f_mkfs>
c0016984:	83 c4 10             	add    esp,0x10
c0016987:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001698b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016990:	75 0a                	jne    c001699c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016992:	b8 00 00 00 00       	mov    eax,0x0
c0016997:	eb 1b                	jmp    c00169b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016999:	8d 76 00             	lea    esi,[esi+0x0]
c001699c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00169a1:	75 09                	jne    c00169ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00169a3:	b8 09 00 00 00       	mov    eax,0x9
c00169a8:	eb 0a                	jmp    c00169b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00169aa:	66 90                	xchg   ax,ax
c00169ac:	b8 01 00 00 00       	mov    eax,0x1
c00169b1:	8d 76 00             	lea    esi,[esi+0x0]
c00169b4:	83 c4 2c             	add    esp,0x2c
c00169b7:	c3                   	ret    

c00169b8 <FAT::tryMount(LogicalDisk*, int)>:
c00169b8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00169be:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c00169c3:	83 f8 14             	cmp    eax,0x14
c00169c6:	75 18                	jne    c00169e0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169c8:	83 ec 0c             	sub    esp,0xc
c00169cb:	68 88 ef 01 c0       	push   0xc001ef88
c00169d0:	e8 16 9d ff ff       	call   c00106eb <KePanic(char const*)>
c00169d5:	83 c4 10             	add    esp,0x10
c00169d8:	b0 00                	mov    al,0x0
c00169da:	e9 e9 01 00 00       	jmp    c0016bc8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169df:	90                   	nop
c00169e0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169f3:	3d 00 02 00 00       	cmp    eax,0x200
c00169f8:	74 0a                	je     c0016a04 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169fa:	b0 00                	mov    al,0x0
c00169fc:	e9 c7 01 00 00       	jmp    c0016bc8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a01:	8d 76 00             	lea    esi,[esi+0x0]
c0016a04:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016a0c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a13:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c0016a1a:	83 f8 ff             	cmp    eax,0xffffffff
c0016a1d:	74 09                	je     c0016a28 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016a1f:	b0 01                	mov    al,0x1
c0016a21:	e9 a2 01 00 00       	jmp    c0016bc8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a26:	66 90                	xchg   ax,ax
c0016a28:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a32:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a3a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a41:	88 c2                	mov    dl,al
c0016a43:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016a48:	01 d0                	add    eax,edx
c0016a4a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a51:	8b 15 40 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f40
c0016a57:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a5e:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016a65:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016a6a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a71:	89 14 85 e0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc020],edx
c0016a78:	83 ec 0c             	sub    esp,0xc
c0016a7b:	68 34 02 00 00       	push   0x234
c0016a80:	e8 00 14 ff ff       	call   c0007e85 <malloc>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a8f:	83 ec 04             	sub    esp,0x4
c0016a92:	6a 00                	push   0x0
c0016a94:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a9b:	50                   	push   eax
c0016a9c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016aa3:	e8 33 d0 fe ff       	call   c0003adb <f_mount>
c0016aa8:	83 c4 10             	add    esp,0x10
c0016aab:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016ab2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016aba:	74 1c                	je     c0016ad8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016abc:	83 ec 0c             	sub    esp,0xc
c0016abf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016ac6:	e8 da 13 ff ff       	call   c0007ea5 <rfree>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	b0 00                	mov    al,0x0
c0016ad0:	e9 f3 00 00 00       	jmp    c0016bc8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ad8:	83 ec 04             	sub    esp,0x4
c0016adb:	68 00 01 00 00       	push   0x100
c0016ae0:	6a 00                	push   0x0
c0016ae2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ae9:	50                   	push   eax
c0016aea:	e8 01 9a fe ff       	call   c00004f0 <memset>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	83 ec 08             	sub    esp,0x8
c0016af5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016afc:	50                   	push   eax
c0016afd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b04:	50                   	push   eax
c0016b05:	e8 d6 9c fe ff       	call   c00007e0 <strcat>
c0016b0a:	83 c4 10             	add    esp,0x10
c0016b0d:	83 ec 08             	sub    esp,0x8
c0016b10:	68 96 ef 01 c0       	push   0xc001ef96
c0016b15:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b1c:	50                   	push   eax
c0016b1d:	e8 be 9c fe ff       	call   c00007e0 <strcat>
c0016b22:	83 c4 10             	add    esp,0x10
c0016b25:	83 ec 04             	sub    esp,0x4
c0016b28:	6a 01                	push   0x1
c0016b2a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b31:	50                   	push   eax
c0016b32:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b36:	50                   	push   eax
c0016b37:	e8 01 d0 fe ff       	call   c0003b3d <f_open>
c0016b3c:	83 c4 10             	add    esp,0x10
c0016b3f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b46:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b4d:	85 c0                	test   eax,eax
c0016b4f:	74 0b                	je     c0016b5c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b51:	78 31                	js     c0016b84 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b53:	83 e8 04             	sub    eax,0x4
c0016b56:	83 f8 01             	cmp    eax,0x1
c0016b59:	77 29                	ja     c0016b84 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b5b:	90                   	nop
c0016b5c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b64:	83 ec 0c             	sub    esp,0xc
c0016b67:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b6b:	50                   	push   eax
c0016b6c:	e8 7f d7 fe ff       	call   c00042f0 <f_close>
c0016b71:	83 c4 10             	add    esp,0x10
c0016b74:	90                   	nop
c0016b75:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b7d:	74 41                	je     c0016bc0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b7f:	eb 33                	jmp    c0016bb4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b81:	8d 76 00             	lea    esi,[esi+0x0]
c0016b84:	83 ec 0c             	sub    esp,0xc
c0016b87:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b8e:	e8 12 13 ff ff       	call   c0007ea5 <rfree>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	83 ec 04             	sub    esp,0x4
c0016b99:	6a 00                	push   0x0
c0016b9b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ba2:	50                   	push   eax
c0016ba3:	6a 00                	push   0x0
c0016ba5:	e8 31 cf fe ff       	call   c0003adb <f_mount>
c0016baa:	83 c4 10             	add    esp,0x10
c0016bad:	b0 00                	mov    al,0x0
c0016baf:	eb 17                	jmp    c0016bc8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016bb4:	a1 40 3f 02 c0       	mov    eax,ds:0xc0023f40
c0016bb9:	40                   	inc    eax
c0016bba:	a3 40 3f 02 c0       	mov    ds:0xc0023f40,eax
c0016bbf:	90                   	nop
c0016bc0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016bc7:	90                   	nop
c0016bc8:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016bce:	c3                   	ret    
c0016bcf:	90                   	nop

c0016bd0 <FAT::allocateSwapfile(char const*, int)>:
c0016bd0:	55                   	push   ebp
c0016bd1:	57                   	push   edi
c0016bd2:	56                   	push   esi
c0016bd3:	53                   	push   ebx
c0016bd4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bda:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016be5:	83 ec 0c             	sub    esp,0xc
c0016be8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bef:	e8 91 12 ff ff       	call   c0007e85 <malloc>
c0016bf4:	83 c4 10             	add    esp,0x10
c0016bf7:	89 c7                	mov    edi,eax
c0016bf9:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0016bfe:	83 ec 04             	sub    esp,0x4
c0016c01:	50                   	push   eax
c0016c02:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016c09:	57                   	push   edi
c0016c0a:	e8 83 44 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0016c0f:	83 c4 10             	add    esp,0x10
c0016c12:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016c19:	83 ec 04             	sub    esp,0x4
c0016c1c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016c20:	50                   	push   eax
c0016c21:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c25:	50                   	push   eax
c0016c26:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c2d:	e8 cc 47 ff ff       	call   c000b3fe <File::stat(unsigned long long*, bool*)>
c0016c32:	83 c4 10             	add    esp,0x10
c0016c35:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c3c:	c1 e0 14             	shl    eax,0x14
c0016c3f:	89 c7                	mov    edi,eax
c0016c41:	89 c5                	mov    ebp,eax
c0016c43:	c1 fd 1f             	sar    ebp,0x1f
c0016c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c4e:	89 f9                	mov    ecx,edi
c0016c50:	31 c1                	xor    ecx,eax
c0016c52:	89 cb                	mov    ebx,ecx
c0016c54:	89 e9                	mov    ecx,ebp
c0016c56:	31 d1                	xor    ecx,edx
c0016c58:	89 ce                	mov    esi,ecx
c0016c5a:	89 f0                	mov    eax,esi
c0016c5c:	09 d8                	or     eax,ebx
c0016c5e:	0f 84 9c 00 00 00    	je     c0016d00 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c6e:	e8 57 46 ff ff       	call   c000b2ca <File::unlink()>
c0016c73:	83 c4 10             	add    esp,0x10
c0016c76:	83 ec 08             	sub    esp,0x8
c0016c79:	6a 12                	push   0x12
c0016c7b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c82:	e8 cb 44 ff ff       	call   c000b152 <File::open(FileOpenMode)>
c0016c87:	83 c4 10             	add    esp,0x10
c0016c8a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c91:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c97:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c9e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016ca5:	c1 e0 14             	shl    eax,0x14
c0016ca8:	83 ec 04             	sub    esp,0x4
c0016cab:	6a 01                	push   0x1
c0016cad:	50                   	push   eax
c0016cae:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016cb5:	e8 9b e4 fe ff       	call   c0005155 <f_expand>
c0016cba:	83 c4 10             	add    esp,0x10
c0016cbd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cc6:	83 c0 10             	add    eax,0x10
c0016cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cd2:	52                   	push   edx
c0016cd3:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016cd7:	52                   	push   edx
c0016cd8:	6a 00                	push   0x0
c0016cda:	68 00 04 00 00       	push   0x400
c0016cdf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016ce6:	ff d0                	call   eax
c0016ce8:	83 c4 20             	add    esp,0x20
c0016ceb:	83 ec 0c             	sub    esp,0xc
c0016cee:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cf5:	e8 b6 44 ff ff       	call   c000b1b0 <File::close()>
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0016d00:	83 ec 08             	sub    esp,0x8
c0016d03:	6a 01                	push   0x1
c0016d05:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d0c:	e8 41 44 ff ff       	call   c000b152 <File::open(FileOpenMode)>
c0016d11:	83 c4 10             	add    esp,0x10
c0016d14:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d1d:	83 c0 0c             	add    eax,0xc
c0016d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d22:	83 ec 0c             	sub    esp,0xc
c0016d25:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d29:	52                   	push   edx
c0016d2a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d2e:	52                   	push   edx
c0016d2f:	6a 00                	push   0x0
c0016d31:	6a 04                	push   0x4
c0016d33:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d3a:	ff d0                	call   eax
c0016d3c:	83 c4 20             	add    esp,0x20
c0016d3f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d46:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d4c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d53:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d5a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d5d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d64:	83 ec 0c             	sub    esp,0xc
c0016d67:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d6e:	e8 3d 44 ff ff       	call   c000b1b0 <File::close()>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d7d:	ba 00 00 00 00       	mov    edx,0x0
c0016d82:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d88:	5b                   	pop    ebx
c0016d89:	5e                   	pop    esi
c0016d8a:	5f                   	pop    edi
c0016d8b:	5d                   	pop    ebp
c0016d8c:	c3                   	ret    
c0016d8d:	90                   	nop
c0016d8e:	66 90                	xchg   ax,ax

c0016d90 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d90:	57                   	push   edi
c0016d91:	56                   	push   esi
c0016d92:	53                   	push   ebx
c0016d93:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d99:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016da1:	74 0d                	je     c0016db0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016da3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016dab:	75 0f                	jne    c0016dbc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016dad:	8d 76 00             	lea    esi,[esi+0x0]
c0016db0:	b8 04 00 00 00       	mov    eax,0x4
c0016db5:	e9 36 01 00 00       	jmp    c0016ef0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dba:	66 90                	xchg   ax,ax
c0016dbc:	83 ec 08             	sub    esp,0x8
c0016dbf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dc6:	50                   	push   eax
c0016dc7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016dce:	e8 e0 d7 fe ff       	call   c00045b3 <f_readdir>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016ddd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016dee:	83 c0 16             	add    eax,0x16
c0016df1:	50                   	push   eax
c0016df2:	e8 69 97 fe ff       	call   c0000560 <strlen>
c0016df7:	83 c4 10             	add    esp,0x10
c0016dfa:	ba 00 00 00 00       	mov    edx,0x0
c0016dff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e03:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016e07:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016e0e:	25 ff 00 00 00       	and    eax,0xff
c0016e13:	83 e0 10             	and    eax,0x10
c0016e16:	74 08                	je     c0016e20 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016e18:	b8 02 00 00 00       	mov    eax,0x2
c0016e1d:	eb 09                	jmp    c0016e28 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016e1f:	90                   	nop
c0016e20:	b8 01 00 00 00       	mov    eax,0x1
c0016e25:	8d 76 00             	lea    esi,[esi+0x0]
c0016e28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e2c:	83 ec 08             	sub    esp,0x8
c0016e2f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e36:	83 c0 16             	add    eax,0x16
c0016e39:	50                   	push   eax
c0016e3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e3e:	83 c0 10             	add    eax,0x10
c0016e41:	50                   	push   eax
c0016e42:	e8 d9 97 fe ff       	call   c0000620 <strcpy>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e51:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e5c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e63:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e6a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e71:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e78:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e7f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e86:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e8d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e94:	89 c6                	mov    esi,eax
c0016e96:	89 d7                	mov    edi,edx
c0016e98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e9a:	89 c8                	mov    eax,ecx
c0016e9c:	89 fa                	mov    edx,edi
c0016e9e:	89 f3                	mov    ebx,esi
c0016ea0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016ea7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016eae:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016eb5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016ebc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016ec2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ec9:	84 c0                	test   al,al
c0016ecb:	75 07                	jne    c0016ed4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016ecd:	b8 07 00 00 00       	mov    eax,0x7
c0016ed2:	eb 1c                	jmp    c0016ef0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ed4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016edb:	85 c0                	test   eax,eax
c0016edd:	75 09                	jne    c0016ee8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016edf:	b8 00 00 00 00       	mov    eax,0x0
c0016ee4:	eb 0a                	jmp    c0016ef0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ee6:	66 90                	xchg   ax,ax
c0016ee8:	b8 01 00 00 00       	mov    eax,0x1
c0016eed:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef0:	81 c4 50 02 00 00    	add    esp,0x250
c0016ef6:	5b                   	pop    ebx
c0016ef7:	5e                   	pop    esi
c0016ef8:	5f                   	pop    edi
c0016ef9:	c3                   	ret    
c0016efa:	66 90                	xchg   ax,ax

c0016efc <FAT::read(void*, unsigned long, void*, int*)>:
c0016efc:	83 ec 1c             	sub    esp,0x1c
c0016eff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f04:	74 0a                	je     c0016f10 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016f06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f0b:	75 0b                	jne    c0016f18 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	b8 04 00 00 00       	mov    eax,0x4
c0016f15:	eb 41                	jmp    c0016f58 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f17:	90                   	nop
c0016f18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f1c:	50                   	push   eax
c0016f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f29:	e8 da ce fe ff       	call   c0003e08 <f_read>
c0016f2e:	83 c4 10             	add    esp,0x10
c0016f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f39:	89 c2                	mov    edx,eax
c0016f3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f3f:	89 10                	mov    DWORD PTR [eax],edx
c0016f41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f45:	85 c0                	test   eax,eax
c0016f47:	75 07                	jne    c0016f50 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f49:	b8 00 00 00 00       	mov    eax,0x0
c0016f4e:	eb 08                	jmp    c0016f58 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f50:	b8 01 00 00 00       	mov    eax,0x1
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	83 c4 1c             	add    esp,0x1c
c0016f5b:	c3                   	ret    

c0016f5c <FAT::write(void*, unsigned long, void*, int*)>:
c0016f5c:	83 ec 1c             	sub    esp,0x1c
c0016f5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f64:	74 0a                	je     c0016f70 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f66:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f6b:	75 0b                	jne    c0016f78 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f70:	b8 04 00 00 00       	mov    eax,0x4
c0016f75:	eb 41                	jmp    c0016fb8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f77:	90                   	nop
c0016f78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f7c:	50                   	push   eax
c0016f7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f89:	e8 79 d0 fe ff       	call   c0004007 <f_write>
c0016f8e:	83 c4 10             	add    esp,0x10
c0016f91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f99:	89 c2                	mov    edx,eax
c0016f9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f9f:	89 10                	mov    DWORD PTR [eax],edx
c0016fa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fa5:	85 c0                	test   eax,eax
c0016fa7:	75 07                	jne    c0016fb0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016fa9:	b8 00 00 00 00       	mov    eax,0x0
c0016fae:	eb 08                	jmp    c0016fb8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016fb0:	b8 01 00 00 00       	mov    eax,0x1
c0016fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fb8:	83 c4 1c             	add    esp,0x1c
c0016fbb:	c3                   	ret    

c0016fbc <FAT::close(void*)>:
c0016fbc:	83 ec 1c             	sub    esp,0x1c
c0016fbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fc4:	75 0a                	jne    c0016fd0 <FAT::close(void*)+0x14>
c0016fc6:	b8 04 00 00 00       	mov    eax,0x4
c0016fcb:	eb 3f                	jmp    c001700c <FAT::close(void*)+0x50>
c0016fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd0:	83 ec 0c             	sub    esp,0xc
c0016fd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fd7:	e8 14 d3 fe ff       	call   c00042f0 <f_close>
c0016fdc:	83 c4 10             	add    esp,0x10
c0016fdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fe3:	83 ec 0c             	sub    esp,0xc
c0016fe6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fea:	e8 a6 0e ff ff       	call   c0007e95 <free>
c0016fef:	83 c4 10             	add    esp,0x10
c0016ff2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ff6:	85 c0                	test   eax,eax
c0016ff8:	75 0a                	jne    c0017004 <FAT::close(void*)+0x48>
c0016ffa:	b8 00 00 00 00       	mov    eax,0x0
c0016fff:	eb 0b                	jmp    c001700c <FAT::close(void*)+0x50>
c0017001:	8d 76 00             	lea    esi,[esi+0x0]
c0017004:	b8 01 00 00 00       	mov    eax,0x1
c0017009:	8d 76 00             	lea    esi,[esi+0x0]
c001700c:	83 c4 1c             	add    esp,0x1c
c001700f:	c3                   	ret    

c0017010 <FAT::closeDir(void*)>:
c0017010:	83 ec 1c             	sub    esp,0x1c
c0017013:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017018:	75 0a                	jne    c0017024 <FAT::closeDir(void*)+0x14>
c001701a:	b8 04 00 00 00       	mov    eax,0x4
c001701f:	eb 3f                	jmp    c0017060 <FAT::closeDir(void*)+0x50>
c0017021:	8d 76 00             	lea    esi,[esi+0x0]
c0017024:	83 ec 0c             	sub    esp,0xc
c0017027:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001702b:	e8 61 d5 fe ff       	call   c0004591 <f_closedir>
c0017030:	83 c4 10             	add    esp,0x10
c0017033:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017037:	83 ec 0c             	sub    esp,0xc
c001703a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001703e:	e8 52 0e ff ff       	call   c0007e95 <free>
c0017043:	83 c4 10             	add    esp,0x10
c0017046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001704a:	85 c0                	test   eax,eax
c001704c:	75 0a                	jne    c0017058 <FAT::closeDir(void*)+0x48>
c001704e:	b8 00 00 00 00       	mov    eax,0x0
c0017053:	eb 0b                	jmp    c0017060 <FAT::closeDir(void*)+0x50>
c0017055:	8d 76 00             	lea    esi,[esi+0x0]
c0017058:	b8 01 00 00 00       	mov    eax,0x1
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	83 c4 1c             	add    esp,0x1c
c0017063:	c3                   	ret    

c0017064 <FAT::seek(void*, unsigned long long)>:
c0017064:	83 ec 2c             	sub    esp,0x2c
c0017067:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001706b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001706f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017073:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017077:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001707c:	75 0a                	jne    c0017088 <FAT::seek(void*, unsigned long long)+0x24>
c001707e:	b8 04 00 00 00       	mov    eax,0x4
c0017083:	eb 33                	jmp    c00170b8 <FAT::seek(void*, unsigned long long)+0x54>
c0017085:	8d 76 00             	lea    esi,[esi+0x0]
c0017088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001708c:	83 ec 08             	sub    esp,0x8
c001708f:	50                   	push   eax
c0017090:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017094:	e8 86 d2 fe ff       	call   c000431f <f_lseek>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170a4:	85 c0                	test   eax,eax
c00170a6:	75 08                	jne    c00170b0 <FAT::seek(void*, unsigned long long)+0x4c>
c00170a8:	b8 00 00 00 00       	mov    eax,0x0
c00170ad:	eb 09                	jmp    c00170b8 <FAT::seek(void*, unsigned long long)+0x54>
c00170af:	90                   	nop
c00170b0:	b8 01 00 00 00       	mov    eax,0x1
c00170b5:	8d 76 00             	lea    esi,[esi+0x0]
c00170b8:	83 c4 2c             	add    esp,0x2c
c00170bb:	c3                   	ret    

c00170bc <fatWrapperReadDisk>:
c00170bc:	53                   	push   ebx
c00170bd:	83 ec 18             	sub    esp,0x18
c00170c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170cc:	25 ff 00 00 00       	and    eax,0xff
c00170d1:	8b 0c 85 40 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0c0]
c00170d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170e0:	ba 00 00 00 00       	mov    edx,0x0
c00170e5:	83 ec 0c             	sub    esp,0xc
c00170e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170ec:	53                   	push   ebx
c00170ed:	52                   	push   edx
c00170ee:	50                   	push   eax
c00170ef:	51                   	push   ecx
c00170f0:	e8 0f 61 ff ff       	call   c000d204 <LogicalDisk::read(unsigned long long, int, void*)>
c00170f5:	83 c4 20             	add    esp,0x20
c00170f8:	83 c4 18             	add    esp,0x18
c00170fb:	5b                   	pop    ebx
c00170fc:	c3                   	ret    
c00170fd:	8d 76 00             	lea    esi,[esi+0x0]

c0017100 <fatWrapperWriteDisk>:
c0017100:	53                   	push   ebx
c0017101:	83 ec 18             	sub    esp,0x18
c0017104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017108:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001710c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017110:	25 ff 00 00 00       	and    eax,0xff
c0017115:	8b 0c 85 40 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0c0]
c001711c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017120:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017124:	ba 00 00 00 00       	mov    edx,0x0
c0017129:	83 ec 0c             	sub    esp,0xc
c001712c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017130:	53                   	push   ebx
c0017131:	52                   	push   edx
c0017132:	50                   	push   eax
c0017133:	51                   	push   ecx
c0017134:	e8 37 61 ff ff       	call   c000d270 <LogicalDisk::write(unsigned long long, int, void*)>
c0017139:	83 c4 20             	add    esp,0x20
c001713c:	83 c4 18             	add    esp,0x18
c001713f:	5b                   	pop    ebx
c0017140:	c3                   	ret    
c0017141:	8d 76 00             	lea    esi,[esi+0x0]

c0017144 <fatWrapperIoctl>:
c0017144:	53                   	push   ebx
c0017145:	83 ec 28             	sub    esp,0x28
c0017148:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001714c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017150:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017154:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017158:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001715d:	75 35                	jne    c0017194 <fatWrapperIoctl+0x50>
c001715f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017163:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017167:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001716b:	25 ff 00 00 00       	and    eax,0xff
c0017170:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c0017177:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001717d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017183:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017187:	66 89 02             	mov    WORD PTR [edx],ax
c001718a:	b8 00 00 00 00       	mov    eax,0x0
c001718f:	e9 c4 00 00 00       	jmp    c0017258 <fatWrapperIoctl+0x114>
c0017194:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017199:	75 75                	jne    c0017210 <fatWrapperIoctl+0xcc>
c001719b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001719f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171a3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171a7:	25 ff 00 00 00       	and    eax,0xff
c00171ac:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c00171b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00171b9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00171bf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00171c5:	89 c8                	mov    eax,ecx
c00171c7:	89 da                	mov    edx,ebx
c00171c9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171cd:	c1 e0 0a             	shl    eax,0xa
c00171d0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171d4:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171da:	8b 0c 8d 40 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0c0]
c00171e1:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171e7:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171ed:	89 cb                	mov    ebx,ecx
c00171ef:	c1 fb 1f             	sar    ebx,0x1f
c00171f2:	53                   	push   ebx
c00171f3:	51                   	push   ecx
c00171f4:	52                   	push   edx
c00171f5:	50                   	push   eax
c00171f6:	e8 25 50 00 00       	call   c001c220 <__udivdi3>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	89 c2                	mov    edx,eax
c0017200:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017204:	89 10                	mov    DWORD PTR [eax],edx
c0017206:	b8 00 00 00 00       	mov    eax,0x0
c001720b:	eb 4b                	jmp    c0017258 <fatWrapperIoctl+0x114>
c001720d:	8d 76 00             	lea    esi,[esi+0x0]
c0017210:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017215:	75 09                	jne    c0017220 <fatWrapperIoctl+0xdc>
c0017217:	b8 00 00 00 00       	mov    eax,0x0
c001721c:	eb 3a                	jmp    c0017258 <fatWrapperIoctl+0x114>
c001721e:	66 90                	xchg   ax,ax
c0017220:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017225:	75 19                	jne    c0017240 <fatWrapperIoctl+0xfc>
c0017227:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001722b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001722f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017233:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017239:	b8 00 00 00 00       	mov    eax,0x0
c001723e:	eb 18                	jmp    c0017258 <fatWrapperIoctl+0x114>
c0017240:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017245:	75 09                	jne    c0017250 <fatWrapperIoctl+0x10c>
c0017247:	b8 00 00 00 00       	mov    eax,0x0
c001724c:	eb 0a                	jmp    c0017258 <fatWrapperIoctl+0x114>
c001724e:	66 90                	xchg   ax,ax
c0017250:	b8 04 00 00 00       	mov    eax,0x4
c0017255:	8d 76 00             	lea    esi,[esi+0x0]
c0017258:	83 c4 28             	add    esp,0x28
c001725b:	5b                   	pop    ebx
c001725c:	c3                   	ret    
c001725d:	90                   	nop
c001725e:	66 90                	xchg   ax,ax

c0017260 <FAT::FAT()>:
c0017260:	83 ec 1c             	sub    esp,0x1c
c0017263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017267:	83 ec 0c             	sub    esp,0xc
c001726a:	50                   	push   eax
c001726b:	e8 ce 3b ff ff       	call   c000ae3e <Filesystem::Filesystem()>
c0017270:	83 c4 10             	add    esp,0x10
c0017273:	ba ac ef 01 c0       	mov    edx,0xc001efac
c0017278:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001727c:	89 10                	mov    DWORD PTR [eax],edx
c001727e:	c7 05 40 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f40,0x0
c0017288:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017290:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017295:	7f 15                	jg     c00172ac <FAT::FAT()+0x4c>
c0017297:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001729b:	c7 04 85 60 3f 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc0a0],0xffffffff
c00172a6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172aa:	eb e4                	jmp    c0017290 <FAT::FAT()+0x30>
c00172ac:	90                   	nop
c00172ad:	83 c4 1c             	add    esp,0x1c
c00172b0:	c3                   	ret    
c00172b1:	90                   	nop
c00172b2:	66 90                	xchg   ax,ax

c00172b4 <FAT::fixFilepath(char*)>:
c00172b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b8:	8a 00                	mov    al,BYTE PTR [eax]
c00172ba:	3c 40                	cmp    al,0x40
c00172bc:	7e 2e                	jle    c00172ec <FAT::fixFilepath(char*)+0x38>
c00172be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c2:	8a 00                	mov    al,BYTE PTR [eax]
c00172c4:	83 e8 41             	sub    eax,0x41
c00172c7:	88 c2                	mov    dl,al
c00172c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172cd:	88 10                	mov    BYTE PTR [eax],dl
c00172cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172d3:	8a 00                	mov    al,BYTE PTR [eax]
c00172d5:	0f be c0             	movsx  eax,al
c00172d8:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c00172df:	83 c0 30             	add    eax,0x30
c00172e2:	88 c2                	mov    dl,al
c00172e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172e8:	88 10                	mov    BYTE PTR [eax],dl
c00172ea:	66 90                	xchg   ax,ax
c00172ec:	90                   	nop
c00172ed:	c3                   	ret    
c00172ee:	66 90                	xchg   ax,ax

c00172f0 <FAT::open(char const*, void**, FileOpenMode)>:
c00172f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172fe:	74 0c                	je     c001730c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017300:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017308:	75 0e                	jne    c0017318 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001730a:	66 90                	xchg   ax,ax
c001730c:	b8 04 00 00 00       	mov    eax,0x4
c0017311:	e9 0a 01 00 00       	jmp    c0017420 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017316:	66 90                	xchg   ax,ax
c0017318:	83 ec 08             	sub    esp,0x8
c001731b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017322:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017326:	50                   	push   eax
c0017327:	e8 f4 92 fe ff       	call   c0000620 <strcpy>
c001732c:	83 c4 10             	add    esp,0x10
c001732f:	83 ec 08             	sub    esp,0x8
c0017332:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017336:	50                   	push   eax
c0017337:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001733e:	e8 71 ff ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c0017343:	83 c4 10             	add    esp,0x10
c0017346:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001734e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017355:	83 e0 01             	and    eax,0x1
c0017358:	74 0a                	je     c0017364 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001735a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017362:	66 90                	xchg   ax,ax
c0017364:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001736b:	83 e0 04             	and    eax,0x4
c001736e:	74 10                	je     c0017380 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017370:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017378:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017380:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017387:	83 e0 02             	and    eax,0x2
c001738a:	74 08                	je     c0017394 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001738c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017394:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001739b:	83 e0 08             	and    eax,0x8
c001739e:	74 08                	je     c00173a8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00173a0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00173a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00173af:	83 e0 10             	and    eax,0x10
c00173b2:	74 08                	je     c00173bc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00173b4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00173bc:	83 ec 0c             	sub    esp,0xc
c00173bf:	68 28 02 00 00       	push   0x228
c00173c4:	e8 bc 0a ff ff       	call   c0007e85 <malloc>
c00173c9:	83 c4 10             	add    esp,0x10
c00173cc:	89 c2                	mov    edx,eax
c00173ce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173d5:	89 10                	mov    DWORD PTR [eax],edx
c00173d7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173de:	31 d2                	xor    edx,edx
c00173e0:	88 c2                	mov    dl,al
c00173e2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00173eb:	83 ec 04             	sub    esp,0x4
c00173ee:	52                   	push   edx
c00173ef:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173f3:	52                   	push   edx
c00173f4:	50                   	push   eax
c00173f5:	e8 43 c7 fe ff       	call   c0003b3d <f_open>
c00173fa:	83 c4 10             	add    esp,0x10
c00173fd:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017404:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001740c:	74 0a                	je     c0017418 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001740e:	b8 01 00 00 00       	mov    eax,0x1
c0017413:	eb 0b                	jmp    c0017420 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017415:	8d 76 00             	lea    esi,[esi+0x0]
c0017418:	b8 00 00 00 00       	mov    eax,0x0
c001741d:	8d 76 00             	lea    esi,[esi+0x0]
c0017420:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017426:	c3                   	ret    
c0017427:	90                   	nop

c0017428 <FAT::openDir(char const*, void**)>:
c0017428:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001742e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017436:	74 0c                	je     c0017444 <FAT::openDir(char const*, void**)+0x1c>
c0017438:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017440:	75 0e                	jne    c0017450 <FAT::openDir(char const*, void**)+0x28>
c0017442:	66 90                	xchg   ax,ax
c0017444:	b8 04 00 00 00       	mov    eax,0x4
c0017449:	e9 82 00 00 00       	jmp    c00174d0 <FAT::openDir(char const*, void**)+0xa8>
c001744e:	66 90                	xchg   ax,ax
c0017450:	83 ec 08             	sub    esp,0x8
c0017453:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001745a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001745e:	50                   	push   eax
c001745f:	e8 bc 91 fe ff       	call   c0000620 <strcpy>
c0017464:	83 c4 10             	add    esp,0x10
c0017467:	83 ec 08             	sub    esp,0x8
c001746a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001746e:	50                   	push   eax
c001746f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017476:	e8 39 fe ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c001747b:	83 c4 10             	add    esp,0x10
c001747e:	83 ec 0c             	sub    esp,0xc
c0017481:	6a 30                	push   0x30
c0017483:	e8 fd 09 ff ff       	call   c0007e85 <malloc>
c0017488:	83 c4 10             	add    esp,0x10
c001748b:	89 c2                	mov    edx,eax
c001748d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017494:	89 10                	mov    DWORD PTR [eax],edx
c0017496:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001749d:	8b 00                	mov    eax,DWORD PTR [eax]
c001749f:	83 ec 08             	sub    esp,0x8
c00174a2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00174a6:	52                   	push   edx
c00174a7:	50                   	push   eax
c00174a8:	e8 19 d0 fe ff       	call   c00044c6 <f_opendir>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174b7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00174bf:	74 07                	je     c00174c8 <FAT::openDir(char const*, void**)+0xa0>
c00174c1:	b8 01 00 00 00       	mov    eax,0x1
c00174c6:	eb 08                	jmp    c00174d0 <FAT::openDir(char const*, void**)+0xa8>
c00174c8:	b8 00 00 00 00       	mov    eax,0x0
c00174cd:	8d 76 00             	lea    esi,[esi+0x0]
c00174d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174d6:	c3                   	ret    
c00174d7:	90                   	nop

c00174d8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174d8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174de:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174e6:	75 0c                	jne    c00174f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174e8:	b8 04 00 00 00       	mov    eax,0x4
c00174ed:	e9 d6 00 00 00       	jmp    c00175c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174f2:	66 90                	xchg   ax,ax
c00174f4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174fc:	75 0a                	jne    c0017508 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174fe:	b8 04 00 00 00       	mov    eax,0x4
c0017503:	e9 c0 00 00 00       	jmp    c00175c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017508:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017510:	75 0a                	jne    c001751c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017512:	b8 04 00 00 00       	mov    eax,0x4
c0017517:	e9 ac 00 00 00       	jmp    c00175c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001751c:	83 ec 08             	sub    esp,0x8
c001751f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017526:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001752d:	50                   	push   eax
c001752e:	e8 ed 90 fe ff       	call   c0000620 <strcpy>
c0017533:	83 c4 10             	add    esp,0x10
c0017536:	83 ec 08             	sub    esp,0x8
c0017539:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017540:	50                   	push   eax
c0017541:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017548:	e8 67 fd ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c001754d:	83 c4 10             	add    esp,0x10
c0017550:	83 ec 08             	sub    esp,0x8
c0017553:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017557:	50                   	push   eax
c0017558:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001755f:	50                   	push   eax
c0017560:	e8 e0 d0 fe ff       	call   c0004645 <f_stat>
c0017565:	83 c4 10             	add    esp,0x10
c0017568:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001756f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017576:	85 c0                	test   eax,eax
c0017578:	74 0a                	je     c0017584 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001757a:	83 f8 04             	cmp    eax,0x4
c001757d:	74 39                	je     c00175b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001757f:	eb 3f                	jmp    c00175c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017581:	8d 76 00             	lea    esi,[esi+0x0]
c0017584:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017588:	25 ff 00 00 00       	and    eax,0xff
c001758d:	83 e0 10             	and    eax,0x10
c0017590:	0f 95 c2             	setne  dl
c0017593:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001759a:	88 10                	mov    BYTE PTR [eax],dl
c001759c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a0:	ba 00 00 00 00       	mov    edx,0x0
c00175a5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00175ac:	89 01                	mov    DWORD PTR [ecx],eax
c00175ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00175b1:	b8 00 00 00 00       	mov    eax,0x0
c00175b6:	eb 10                	jmp    c00175c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175b8:	b8 02 00 00 00       	mov    eax,0x2
c00175bd:	eb 09                	jmp    c00175c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175bf:	90                   	nop
c00175c0:	b8 01 00 00 00       	mov    eax,0x1
c00175c5:	8d 76 00             	lea    esi,[esi+0x0]
c00175c8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175ce:	c3                   	ret    
c00175cf:	90                   	nop

c00175d0 <FAT::unlink(char const*)>:
c00175d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175de:	75 08                	jne    c00175e8 <FAT::unlink(char const*)+0x18>
c00175e0:	b8 04 00 00 00       	mov    eax,0x4
c00175e5:	eb 61                	jmp    c0017648 <FAT::unlink(char const*)+0x78>
c00175e7:	90                   	nop
c00175e8:	83 ec 08             	sub    esp,0x8
c00175eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175f6:	50                   	push   eax
c00175f7:	e8 24 90 fe ff       	call   c0000620 <strcpy>
c00175fc:	83 c4 10             	add    esp,0x10
c00175ff:	83 ec 08             	sub    esp,0x8
c0017602:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017606:	50                   	push   eax
c0017607:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001760e:	e8 a1 fc ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c0017613:	83 c4 10             	add    esp,0x10
c0017616:	83 ec 0c             	sub    esp,0xc
c0017619:	8d 44 24 18          	lea    eax,[esp+0x18]
c001761d:	50                   	push   eax
c001761e:	e8 87 d2 fe ff       	call   c00048aa <f_unlink>
c0017623:	83 c4 10             	add    esp,0x10
c0017626:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001762d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017634:	85 c0                	test   eax,eax
c0017636:	75 08                	jne    c0017640 <FAT::unlink(char const*)+0x70>
c0017638:	b8 00 00 00 00       	mov    eax,0x0
c001763d:	eb 09                	jmp    c0017648 <FAT::unlink(char const*)+0x78>
c001763f:	90                   	nop
c0017640:	b8 01 00 00 00       	mov    eax,0x1
c0017645:	8d 76 00             	lea    esi,[esi+0x0]
c0017648:	81 c4 1c 01 00 00    	add    esp,0x11c
c001764e:	c3                   	ret    
c001764f:	90                   	nop

c0017650 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017650:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017656:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001765d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017664:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017668:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001766c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017674:	75 0a                	jne    c0017680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017676:	b8 04 00 00 00       	mov    eax,0x4
c001767b:	e9 54 01 00 00       	jmp    c00177d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017680:	83 ec 08             	sub    esp,0x8
c0017683:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001768a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001768e:	50                   	push   eax
c001768f:	e8 8c 8f fe ff       	call   c0000620 <strcpy>
c0017694:	83 c4 10             	add    esp,0x10
c0017697:	83 ec 08             	sub    esp,0x8
c001769a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001769e:	50                   	push   eax
c001769f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00176a6:	e8 09 fc ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c00176ab:	83 c4 10             	add    esp,0x10
c00176ae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00176b6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00176be:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176c2:	25 ff 00 00 00       	and    eax,0xff
c00176c7:	83 e0 01             	and    eax,0x1
c00176ca:	74 08                	je     c00176d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176cc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176d4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176d8:	25 ff 00 00 00       	and    eax,0xff
c00176dd:	83 e0 02             	and    eax,0x2
c00176e0:	74 0a                	je     c00176ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176e2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176f0:	25 ff 00 00 00       	and    eax,0xff
c00176f5:	83 e0 04             	and    eax,0x4
c00176f8:	74 0a                	je     c0017704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176fa:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017702:	66 90                	xchg   ax,ax
c0017704:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017708:	25 ff 00 00 00       	and    eax,0xff
c001770d:	83 e0 08             	and    eax,0x8
c0017710:	74 0a                	je     c001771c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017712:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001771a:	66 90                	xchg   ax,ax
c001771c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017720:	25 ff 00 00 00       	and    eax,0xff
c0017725:	83 e0 01             	and    eax,0x1
c0017728:	74 0a                	je     c0017734 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001772a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017732:	66 90                	xchg   ax,ax
c0017734:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017738:	25 ff 00 00 00       	and    eax,0xff
c001773d:	83 e0 02             	and    eax,0x2
c0017740:	74 0a                	je     c001774c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017742:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001774a:	66 90                	xchg   ax,ax
c001774c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017750:	25 ff 00 00 00       	and    eax,0xff
c0017755:	83 e0 04             	and    eax,0x4
c0017758:	74 0a                	je     c0017764 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001775a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017762:	66 90                	xchg   ax,ax
c0017764:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017768:	25 ff 00 00 00       	and    eax,0xff
c001776d:	83 e0 08             	and    eax,0x8
c0017770:	74 0a                	je     c001777c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017772:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001777a:	66 90                	xchg   ax,ax
c001777c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017783:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001778a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017791:	31 d2                	xor    edx,edx
c0017793:	88 c2                	mov    dl,al
c0017795:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001779c:	25 ff 00 00 00       	and    eax,0xff
c00177a1:	83 ec 04             	sub    esp,0x4
c00177a4:	52                   	push   edx
c00177a5:	50                   	push   eax
c00177a6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00177aa:	50                   	push   eax
c00177ab:	e8 6d d5 fe ff       	call   c0004d1d <f_chmod>
c00177b0:	83 c4 10             	add    esp,0x10
c00177b3:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00177ba:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00177c1:	85 c0                	test   eax,eax
c00177c3:	75 07                	jne    c00177cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00177c5:	b8 00 00 00 00       	mov    eax,0x0
c00177ca:	eb 08                	jmp    c00177d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177cc:	b8 01 00 00 00       	mov    eax,0x1
c00177d1:	8d 76 00             	lea    esi,[esi+0x0]
c00177d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177da:	c3                   	ret    
c00177db:	90                   	nop

c00177dc <FAT::rename(char const*, char const*)>:
c00177dc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177e2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177ea:	74 0c                	je     c00177f8 <FAT::rename(char const*, char const*)+0x1c>
c00177ec:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177f4:	75 0e                	jne    c0017804 <FAT::rename(char const*, char const*)+0x28>
c00177f6:	66 90                	xchg   ax,ax
c00177f8:	b8 04 00 00 00       	mov    eax,0x4
c00177fd:	e9 9e 00 00 00       	jmp    c00178a0 <FAT::rename(char const*, char const*)+0xc4>
c0017802:	66 90                	xchg   ax,ax
c0017804:	83 ec 08             	sub    esp,0x8
c0017807:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001780e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017815:	50                   	push   eax
c0017816:	e8 05 8e fe ff       	call   c0000620 <strcpy>
c001781b:	83 c4 10             	add    esp,0x10
c001781e:	83 ec 08             	sub    esp,0x8
c0017821:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017828:	50                   	push   eax
c0017829:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017830:	e8 7f fa ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c0017835:	83 c4 10             	add    esp,0x10
c0017838:	83 ec 08             	sub    esp,0x8
c001783b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017842:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017846:	50                   	push   eax
c0017847:	e8 d4 8d fe ff       	call   c0000620 <strcpy>
c001784c:	83 c4 10             	add    esp,0x10
c001784f:	83 ec 08             	sub    esp,0x8
c0017852:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017856:	50                   	push   eax
c0017857:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001785e:	e8 51 fa ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	83 ec 08             	sub    esp,0x8
c0017869:	8d 44 24 14          	lea    eax,[esp+0x14]
c001786d:	50                   	push   eax
c001786e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017875:	50                   	push   eax
c0017876:	e8 ec d2 fe ff       	call   c0004b67 <f_rename>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017885:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001788c:	85 c0                	test   eax,eax
c001788e:	75 08                	jne    c0017898 <FAT::rename(char const*, char const*)+0xbc>
c0017890:	b8 00 00 00 00       	mov    eax,0x0
c0017895:	eb 09                	jmp    c00178a0 <FAT::rename(char const*, char const*)+0xc4>
c0017897:	90                   	nop
c0017898:	b8 01 00 00 00       	mov    eax,0x1
c001789d:	8d 76 00             	lea    esi,[esi+0x0]
c00178a0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00178a6:	c3                   	ret    
c00178a7:	90                   	nop

c00178a8 <FAT::mkdir(char const*)>:
c00178a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00178ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00178b6:	75 08                	jne    c00178c0 <FAT::mkdir(char const*)+0x18>
c00178b8:	b8 04 00 00 00       	mov    eax,0x4
c00178bd:	eb 61                	jmp    c0017920 <FAT::mkdir(char const*)+0x78>
c00178bf:	90                   	nop
c00178c0:	83 ec 08             	sub    esp,0x8
c00178c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178ce:	50                   	push   eax
c00178cf:	e8 4c 8d fe ff       	call   c0000620 <strcpy>
c00178d4:	83 c4 10             	add    esp,0x10
c00178d7:	83 ec 08             	sub    esp,0x8
c00178da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178de:	50                   	push   eax
c00178df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178e6:	e8 c9 f9 ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	83 ec 0c             	sub    esp,0xc
c00178f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178f5:	50                   	push   eax
c00178f6:	e8 d1 d0 fe ff       	call   c00049cc <f_mkdir>
c00178fb:	83 c4 10             	add    esp,0x10
c00178fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017905:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001790c:	85 c0                	test   eax,eax
c001790e:	75 08                	jne    c0017918 <FAT::mkdir(char const*)+0x70>
c0017910:	b8 00 00 00 00       	mov    eax,0x0
c0017915:	eb 09                	jmp    c0017920 <FAT::mkdir(char const*)+0x78>
c0017917:	90                   	nop
c0017918:	b8 01 00 00 00       	mov    eax,0x1
c001791d:	8d 76 00             	lea    esi,[esi+0x0]
c0017920:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017926:	c3                   	ret    
c0017927:	90                   	nop

c0017928 <FAT::exists(char const*)>:
c0017928:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001792e:	83 ec 08             	sub    esp,0x8
c0017931:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017938:	8d 44 24 10          	lea    eax,[esp+0x10]
c001793c:	50                   	push   eax
c001793d:	e8 de 8c fe ff       	call   c0000620 <strcpy>
c0017942:	83 c4 10             	add    esp,0x10
c0017945:	83 ec 08             	sub    esp,0x8
c0017948:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001794c:	50                   	push   eax
c001794d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017954:	e8 5b f9 ff ff       	call   c00172b4 <FAT::fixFilepath(char*)>
c0017959:	83 c4 10             	add    esp,0x10
c001795c:	83 ec 08             	sub    esp,0x8
c001795f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017966:	50                   	push   eax
c0017967:	8d 44 24 10          	lea    eax,[esp+0x10]
c001796b:	50                   	push   eax
c001796c:	e8 d4 cc fe ff       	call   c0004645 <f_stat>
c0017971:	83 c4 10             	add    esp,0x10
c0017974:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001797b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017982:	85 c0                	test   eax,eax
c0017984:	75 06                	jne    c001798c <FAT::exists(char const*)+0x64>
c0017986:	b0 01                	mov    al,0x1
c0017988:	eb 06                	jmp    c0017990 <FAT::exists(char const*)+0x68>
c001798a:	66 90                	xchg   ax,ax
c001798c:	b0 00                	mov    al,0x0
c001798e:	66 90                	xchg   ax,ax
c0017990:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017996:	c3                   	ret    
c0017997:	90                   	nop

c0017998 <isoReadDiscSectorHelper>:
c0017998:	83 ec 2c             	sub    esp,0x2c
c001799b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001799f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00179a3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00179a8:	83 e8 41             	sub    eax,0x41
c00179ab:	8b 0c 85 40 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0c0]
c00179b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179b6:	ba 00 00 00 00       	mov    edx,0x0
c00179bb:	83 ec 0c             	sub    esp,0xc
c00179be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00179c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179c6:	52                   	push   edx
c00179c7:	50                   	push   eax
c00179c8:	51                   	push   ecx
c00179c9:	e8 36 58 ff ff       	call   c000d204 <LogicalDisk::read(unsigned long long, int, void*)>
c00179ce:	83 c4 20             	add    esp,0x20
c00179d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179d5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179da:	74 0c                	je     c00179e8 <isoReadDiscSectorHelper+0x50>
c00179dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179e0:	c1 e0 0b             	shl    eax,0xb
c00179e3:	eb 0b                	jmp    c00179f0 <isoReadDiscSectorHelper+0x58>
c00179e5:	8d 76 00             	lea    esi,[esi+0x0]
c00179e8:	b8 00 00 00 00       	mov    eax,0x0
c00179ed:	8d 76 00             	lea    esi,[esi+0x0]
c00179f0:	83 c4 2c             	add    esp,0x2c
c00179f3:	c3                   	ret    

c00179f4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179f4:	b8 08 00 00 00       	mov    eax,0x8
c00179f9:	c3                   	ret    

c00179fa <ISO9660::getName()>:
c00179fa:	b8 0c f0 01 c0       	mov    eax,0xc001f00c
c00179ff:	c3                   	ret    

c0017a00 <ISO9660::closeDir(void*)>:
c0017a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a04:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a06:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017a09:	90                   	nop

c0017a0a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017a0a:	b8 01 00 00 00       	mov    eax,0x1
c0017a0f:	c3                   	ret    

c0017a10 <ISO9660::unlink(char const*)>:
c0017a10:	b8 01 00 00 00       	mov    eax,0x1
c0017a15:	c3                   	ret    

c0017a16 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017a16:	b8 03 00 00 00       	mov    eax,0x3
c0017a1b:	c3                   	ret    

c0017a1c <ISO9660::rename(char const*, char const*)>:
c0017a1c:	b8 01 00 00 00       	mov    eax,0x1
c0017a21:	c3                   	ret    

c0017a22 <ISO9660::mkdir(char const*)>:
c0017a22:	b8 01 00 00 00       	mov    eax,0x1
c0017a27:	c3                   	ret    

c0017a28 <ISO9660::~ISO9660()>:
c0017a28:	83 ec 0c             	sub    esp,0xc
c0017a2b:	ba 8c f0 01 c0       	mov    edx,0xc001f08c
c0017a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a34:	89 10                	mov    DWORD PTR [eax],edx
c0017a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a3a:	83 ec 0c             	sub    esp,0xc
c0017a3d:	50                   	push   eax
c0017a3e:	e8 1f 34 ff ff       	call   c000ae62 <Filesystem::~Filesystem()>
c0017a43:	83 c4 10             	add    esp,0x10
c0017a46:	90                   	nop
c0017a47:	83 c4 0c             	add    esp,0xc
c0017a4a:	c3                   	ret    
c0017a4b:	90                   	nop

c0017a4c <ISO9660::~ISO9660()>:
c0017a4c:	83 ec 0c             	sub    esp,0xc
c0017a4f:	83 ec 0c             	sub    esp,0xc
c0017a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a56:	e8 cd ff ff ff       	call   c0017a28 <ISO9660::~ISO9660()>
c0017a5b:	83 c4 10             	add    esp,0x10
c0017a5e:	83 ec 08             	sub    esp,0x8
c0017a61:	6a 08                	push   0x8
c0017a63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a67:	e8 ba 2f ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c0017a6c:	83 c4 10             	add    esp,0x10
c0017a6f:	83 c4 0c             	add    esp,0xc
c0017a72:	c3                   	ret    
c0017a73:	90                   	nop

c0017a74 <ISO9660::exists(char const*)>:
c0017a74:	83 ec 18             	sub    esp,0x18
c0017a77:	68 27 f0 01 c0       	push   0xc001f027
c0017a7c:	e8 6a 8c ff ff       	call   c00106eb <KePanic(char const*)>
c0017a81:	31 c0                	xor    eax,eax
c0017a83:	83 c4 1c             	add    esp,0x1c
c0017a86:	c3                   	ret    
c0017a87:	90                   	nop

c0017a88 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a88:	56                   	push   esi
c0017a89:	53                   	push   ebx
c0017a8a:	53                   	push   ebx
c0017a8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a8f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a93:	85 db                	test   ebx,ebx
c0017a95:	74 72                	je     c0017b09 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a97:	85 f6                	test   esi,esi
c0017a99:	74 6e                	je     c0017b09 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a9b:	ba 03 00 00 00       	mov    edx,0x3
c0017aa0:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017aa5:	75 67                	jne    c0017b0e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017aa7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017aaa:	3a 05 40 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024040
c0017ab0:	74 34                	je     c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017ab2:	83 ec 0c             	sub    esp,0xc
c0017ab5:	50                   	push   eax
c0017ab6:	e8 d7 f1 fe ff       	call   c0006c92 <init_percd>
c0017abb:	83 c4 10             	add    esp,0x10
c0017abe:	ba 0b 00 00 00       	mov    edx,0xb
c0017ac3:	40                   	inc    eax
c0017ac4:	74 48                	je     c0017b0e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ac6:	80 3d 40 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024040,0x0
c0017acd:	74 10                	je     c0017adf <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017acf:	83 ec 0c             	sub    esp,0xc
c0017ad2:	68 45 f0 01 c0       	push   0xc001f045
c0017ad7:	e8 0f 8c ff ff       	call   c00106eb <KePanic(char const*)>
c0017adc:	83 c4 10             	add    esp,0x10
c0017adf:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ae1:	a2 40 40 02 c0       	mov    ds:0xc0024040,al
c0017ae6:	83 c3 03             	add    ebx,0x3
c0017ae9:	51                   	push   ecx
c0017aea:	51                   	push   ecx
c0017aeb:	6a 00                	push   0x0
c0017aed:	53                   	push   ebx
c0017aee:	e8 0f ea fe ff       	call   c0006502 <iso_open>
c0017af3:	83 c4 10             	add    esp,0x10
c0017af6:	ba 01 00 00 00       	mov    edx,0x1
c0017afb:	83 f8 ff             	cmp    eax,0xffffffff
c0017afe:	74 0e                	je     c0017b0e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b00:	83 c0 64             	add    eax,0x64
c0017b03:	31 d2                	xor    edx,edx
c0017b05:	89 06                	mov    DWORD PTR [esi],eax
c0017b07:	eb 05                	jmp    c0017b0e <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017b09:	ba 04 00 00 00       	mov    edx,0x4
c0017b0e:	89 d0                	mov    eax,edx
c0017b10:	5a                   	pop    edx
c0017b11:	5b                   	pop    ebx
c0017b12:	5e                   	pop    esi
c0017b13:	c3                   	ret    

c0017b14 <ISO9660::openDir(char const*, void**)>:
c0017b14:	56                   	push   esi
c0017b15:	53                   	push   ebx
c0017b16:	53                   	push   ebx
c0017b17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b1f:	85 db                	test   ebx,ebx
c0017b21:	74 66                	je     c0017b89 <ISO9660::openDir(char const*, void**)+0x75>
c0017b23:	85 f6                	test   esi,esi
c0017b25:	74 62                	je     c0017b89 <ISO9660::openDir(char const*, void**)+0x75>
c0017b27:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b2a:	3a 05 40 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024040
c0017b30:	74 34                	je     c0017b66 <ISO9660::openDir(char const*, void**)+0x52>
c0017b32:	83 ec 0c             	sub    esp,0xc
c0017b35:	50                   	push   eax
c0017b36:	e8 57 f1 fe ff       	call   c0006c92 <init_percd>
c0017b3b:	83 c4 10             	add    esp,0x10
c0017b3e:	ba 0b 00 00 00       	mov    edx,0xb
c0017b43:	40                   	inc    eax
c0017b44:	74 48                	je     c0017b8e <ISO9660::openDir(char const*, void**)+0x7a>
c0017b46:	80 3d 40 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024040,0x0
c0017b4d:	74 10                	je     c0017b5f <ISO9660::openDir(char const*, void**)+0x4b>
c0017b4f:	83 ec 0c             	sub    esp,0xc
c0017b52:	68 45 f0 01 c0       	push   0xc001f045
c0017b57:	e8 8f 8b ff ff       	call   c00106eb <KePanic(char const*)>
c0017b5c:	83 c4 10             	add    esp,0x10
c0017b5f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b61:	a2 40 40 02 c0       	mov    ds:0xc0024040,al
c0017b66:	83 c3 03             	add    ebx,0x3
c0017b69:	51                   	push   ecx
c0017b6a:	51                   	push   ecx
c0017b6b:	6a 01                	push   0x1
c0017b6d:	53                   	push   ebx
c0017b6e:	e8 8f e9 fe ff       	call   c0006502 <iso_open>
c0017b73:	83 c4 10             	add    esp,0x10
c0017b76:	ba 01 00 00 00       	mov    edx,0x1
c0017b7b:	83 f8 ff             	cmp    eax,0xffffffff
c0017b7e:	74 0e                	je     c0017b8e <ISO9660::openDir(char const*, void**)+0x7a>
c0017b80:	83 c0 64             	add    eax,0x64
c0017b83:	31 d2                	xor    edx,edx
c0017b85:	89 06                	mov    DWORD PTR [esi],eax
c0017b87:	eb 05                	jmp    c0017b8e <ISO9660::openDir(char const*, void**)+0x7a>
c0017b89:	ba 04 00 00 00       	mov    edx,0x4
c0017b8e:	89 d0                	mov    eax,edx
c0017b90:	5a                   	pop    edx
c0017b91:	5b                   	pop    ebx
c0017b92:	5e                   	pop    esi
c0017b93:	c3                   	ret    

c0017b94 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b94:	53                   	push   ebx
c0017b95:	83 ec 08             	sub    esp,0x8
c0017b98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b9c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ba0:	85 c0                	test   eax,eax
c0017ba2:	74 25                	je     c0017bc9 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017ba4:	85 db                	test   ebx,ebx
c0017ba6:	74 21                	je     c0017bc9 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017ba8:	83 e8 64             	sub    eax,0x64
c0017bab:	52                   	push   edx
c0017bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bb4:	50                   	push   eax
c0017bb5:	e8 48 ea fe ff       	call   c0006602 <iso_read>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	89 03                	mov    DWORD PTR [ebx],eax
c0017bbf:	09 d0                	or     eax,edx
c0017bc1:	0f 94 c0             	sete   al
c0017bc4:	0f b6 c0             	movzx  eax,al
c0017bc7:	eb 05                	jmp    c0017bce <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017bc9:	b8 04 00 00 00       	mov    eax,0x4
c0017bce:	83 c4 08             	add    esp,0x8
c0017bd1:	5b                   	pop    ebx
c0017bd2:	c3                   	ret    
c0017bd3:	90                   	nop

c0017bd4 <ISO9660::seek(void*, unsigned long long)>:
c0017bd4:	57                   	push   edi
c0017bd5:	56                   	push   esi
c0017bd6:	b8 04 00 00 00       	mov    eax,0x4
c0017bdb:	51                   	push   ecx
c0017bdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017be0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017be4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017be8:	85 d2                	test   edx,edx
c0017bea:	74 1c                	je     c0017c08 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017bec:	6a 00                	push   0x0
c0017bee:	83 ea 64             	sub    edx,0x64
c0017bf1:	57                   	push   edi
c0017bf2:	56                   	push   esi
c0017bf3:	52                   	push   edx
c0017bf4:	e8 07 ec fe ff       	call   c0006800 <iso_seek>
c0017bf9:	83 c4 10             	add    esp,0x10
c0017bfc:	31 f0                	xor    eax,esi
c0017bfe:	31 fa                	xor    edx,edi
c0017c00:	09 d0                	or     eax,edx
c0017c02:	0f 95 c0             	setne  al
c0017c05:	0f b6 c0             	movzx  eax,al
c0017c08:	5a                   	pop    edx
c0017c09:	5e                   	pop    esi
c0017c0a:	5f                   	pop    edi
c0017c0b:	c3                   	ret    

c0017c0c <ISO9660::tell(void*, unsigned long long*)>:
c0017c0c:	53                   	push   ebx
c0017c0d:	83 ec 08             	sub    esp,0x8
c0017c10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c18:	85 c0                	test   eax,eax
c0017c1a:	74 1c                	je     c0017c38 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c1c:	85 db                	test   ebx,ebx
c0017c1e:	74 18                	je     c0017c38 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c20:	83 ec 0c             	sub    esp,0xc
c0017c23:	83 e8 64             	sub    eax,0x64
c0017c26:	50                   	push   eax
c0017c27:	e8 b2 ec fe ff       	call   c00068de <iso_tell>
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	89 03                	mov    DWORD PTR [ebx],eax
c0017c31:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c34:	31 c0                	xor    eax,eax
c0017c36:	eb 05                	jmp    c0017c3d <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c38:	b8 04 00 00 00       	mov    eax,0x4
c0017c3d:	83 c4 08             	add    esp,0x8
c0017c40:	5b                   	pop    ebx
c0017c41:	c3                   	ret    

c0017c42 <ISO9660::stat(void*, unsigned long long*)>:
c0017c42:	53                   	push   ebx
c0017c43:	83 ec 08             	sub    esp,0x8
c0017c46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c4e:	85 c0                	test   eax,eax
c0017c50:	74 20                	je     c0017c72 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c52:	85 db                	test   ebx,ebx
c0017c54:	74 1c                	je     c0017c72 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c56:	83 ec 0c             	sub    esp,0xc
c0017c59:	83 e8 64             	sub    eax,0x64
c0017c5c:	50                   	push   eax
c0017c5d:	e8 d9 ec fe ff       	call   c000693b <iso_total>
c0017c62:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c69:	89 03                	mov    DWORD PTR [ebx],eax
c0017c6b:	83 c4 10             	add    esp,0x10
c0017c6e:	31 c0                	xor    eax,eax
c0017c70:	eb 05                	jmp    c0017c77 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c72:	b8 04 00 00 00       	mov    eax,0x4
c0017c77:	83 c4 08             	add    esp,0x8
c0017c7a:	5b                   	pop    ebx
c0017c7b:	c3                   	ret    

c0017c7c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c7c:	55                   	push   ebp
c0017c7d:	57                   	push   edi
c0017c7e:	56                   	push   esi
c0017c7f:	53                   	push   ebx
c0017c80:	83 ec 0c             	sub    esp,0xc
c0017c83:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c87:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c8b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c8f:	85 ff                	test   edi,edi
c0017c91:	0f 94 c2             	sete   dl
c0017c94:	85 f6                	test   esi,esi
c0017c96:	0f 94 c0             	sete   al
c0017c99:	08 c2                	or     dl,al
c0017c9b:	0f 85 b7 00 00 00    	jne    c0017d58 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017ca1:	85 db                	test   ebx,ebx
c0017ca3:	0f 84 af 00 00 00    	je     c0017d58 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017ca9:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017cac:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017cb2:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cb9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017cbc:	3a 05 40 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024040
c0017cc2:	74 38                	je     c0017cfc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c0017cc4:	83 ec 0c             	sub    esp,0xc
c0017cc7:	50                   	push   eax
c0017cc8:	e8 c5 ef fe ff       	call   c0006c92 <init_percd>
c0017ccd:	83 c4 10             	add    esp,0x10
c0017cd0:	ba 0b 00 00 00       	mov    edx,0xb
c0017cd5:	40                   	inc    eax
c0017cd6:	0f 84 81 00 00 00    	je     c0017d5d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017cdc:	80 3d 40 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024040,0x0
c0017ce3:	74 10                	je     c0017cf5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c0017ce5:	83 ec 0c             	sub    esp,0xc
c0017ce8:	68 45 f0 01 c0       	push   0xc001f045
c0017ced:	e8 f9 89 ff ff       	call   c00106eb <KePanic(char const*)>
c0017cf2:	83 c4 10             	add    esp,0x10
c0017cf5:	8a 03                	mov    al,BYTE PTR [ebx]
c0017cf7:	a2 40 40 02 c0       	mov    ds:0xc0024040,al
c0017cfc:	83 c3 03             	add    ebx,0x3
c0017cff:	55                   	push   ebp
c0017d00:	55                   	push   ebp
c0017d01:	6a 00                	push   0x0
c0017d03:	53                   	push   ebx
c0017d04:	e8 f9 e7 fe ff       	call   c0006502 <iso_open>
c0017d09:	83 c4 10             	add    esp,0x10
c0017d0c:	89 c5                	mov    ebp,eax
c0017d0e:	83 f8 ff             	cmp    eax,0xffffffff
c0017d11:	75 0f                	jne    c0017d22 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017d13:	56                   	push   esi
c0017d14:	56                   	push   esi
c0017d15:	6a 01                	push   0x1
c0017d17:	53                   	push   ebx
c0017d18:	e8 e5 e7 fe ff       	call   c0006502 <iso_open>
c0017d1d:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d20:	eb 2f                	jmp    c0017d51 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017d22:	83 ec 0c             	sub    esp,0xc
c0017d25:	50                   	push   eax
c0017d26:	e8 10 ec fe ff       	call   c000693b <iso_total>
c0017d2b:	5a                   	pop    edx
c0017d2c:	59                   	pop    ecx
c0017d2d:	50                   	push   eax
c0017d2e:	68 55 f0 01 c0       	push   0xc001f055
c0017d33:	e8 e4 2d ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0017d38:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d3b:	e8 fb eb fe ff       	call   c000693b <iso_total>
c0017d40:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d47:	89 06                	mov    DWORD PTR [esi],eax
c0017d49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d4c:	e8 91 e8 fe ff       	call   c00065e2 <iso_close>
c0017d51:	83 c4 10             	add    esp,0x10
c0017d54:	31 d2                	xor    edx,edx
c0017d56:	eb 05                	jmp    c0017d5d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017d58:	ba 04 00 00 00       	mov    edx,0x4
c0017d5d:	83 c4 0c             	add    esp,0xc
c0017d60:	89 d0                	mov    eax,edx
c0017d62:	5b                   	pop    ebx
c0017d63:	5e                   	pop    esi
c0017d64:	5f                   	pop    edi
c0017d65:	5d                   	pop    ebp
c0017d66:	c3                   	ret    
c0017d67:	90                   	nop

c0017d68 <ISO9660::close(void*)>:
c0017d68:	83 ec 0c             	sub    esp,0xc
c0017d6b:	b8 04 00 00 00       	mov    eax,0x4
c0017d70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d74:	85 d2                	test   edx,edx
c0017d76:	74 11                	je     c0017d89 <ISO9660::close(void*)+0x21>
c0017d78:	83 ec 0c             	sub    esp,0xc
c0017d7b:	83 ea 64             	sub    edx,0x64
c0017d7e:	52                   	push   edx
c0017d7f:	e8 5e e8 fe ff       	call   c00065e2 <iso_close>
c0017d84:	83 c4 10             	add    esp,0x10
c0017d87:	31 c0                	xor    eax,eax
c0017d89:	83 c4 0c             	add    esp,0xc
c0017d8c:	c3                   	ret    
c0017d8d:	90                   	nop

c0017d8e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d8e:	55                   	push   ebp
c0017d8f:	57                   	push   edi
c0017d90:	56                   	push   esi
c0017d91:	53                   	push   ebx
c0017d92:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d98:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d9f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017da6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017dad:	85 c0                	test   eax,eax
c0017daf:	0f 84 96 00 00 00    	je     c0017e4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017db5:	85 db                	test   ebx,ebx
c0017db7:	0f 84 8e 00 00 00    	je     c0017e4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017dbd:	83 ec 0c             	sub    esp,0xc
c0017dc0:	83 e8 64             	sub    eax,0x64
c0017dc3:	50                   	push   eax
c0017dc4:	e8 ef eb fe ff       	call   c00069b8 <iso_readdir>
c0017dc9:	83 c4 10             	add    esp,0x10
c0017dcc:	89 c6                	mov    esi,eax
c0017dce:	85 c0                	test   eax,eax
c0017dd0:	75 18                	jne    c0017dea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017dd2:	52                   	push   edx
c0017dd3:	68 10 01 00 00       	push   0x110
c0017dd8:	6a 00                	push   0x0
c0017dda:	57                   	push   edi
c0017ddb:	e8 10 87 fe ff       	call   c00004f0 <memset>
c0017de0:	83 c4 10             	add    esp,0x10
c0017de3:	b8 01 00 00 00       	mov    eax,0x1
c0017de8:	eb 66                	jmp    c0017e50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017dea:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017df0:	8d 68 08             	lea    ebp,[eax+0x8]
c0017df3:	83 ec 0c             	sub    esp,0xc
c0017df6:	55                   	push   ebp
c0017df7:	e8 64 87 fe ff       	call   c0000560 <strlen>
c0017dfc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e08:	83 c4 10             	add    esp,0x10
c0017e0b:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017e0f:	75 0a                	jne    c0017e1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017e11:	b8 02 00 00 00       	mov    eax,0x2
c0017e16:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e19:	74 05                	je     c0017e20 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017e1b:	b8 01 00 00 00       	mov    eax,0x1
c0017e20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e24:	50                   	push   eax
c0017e25:	50                   	push   eax
c0017e26:	55                   	push   ebp
c0017e27:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e2b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e2f:	50                   	push   eax
c0017e30:	e8 eb 87 fe ff       	call   c0000620 <strcpy>
c0017e35:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e3e:	31 c0                	xor    eax,eax
c0017e40:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e46:	83 c4 10             	add    esp,0x10
c0017e49:	eb 05                	jmp    c0017e50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e4b:	b8 04 00 00 00       	mov    eax,0x4
c0017e50:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e56:	5b                   	pop    ebx
c0017e57:	5e                   	pop    esi
c0017e58:	5f                   	pop    edi
c0017e59:	5d                   	pop    ebp
c0017e5a:	c3                   	ret    

c0017e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e5b:	57                   	push   edi
c0017e5c:	56                   	push   esi
c0017e5d:	53                   	push   ebx
c0017e5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e62:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e6a:	39 35 44 40 02 c0    	cmp    DWORD PTR ds:0xc0024044,esi
c0017e70:	75 08                	jne    c0017e7a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e72:	38 1d b4 f9 01 c0    	cmp    BYTE PTR ds:0xc001f9b4,bl
c0017e78:	74 59                	je     c0017ed3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e7a:	83 ec 0c             	sub    esp,0xc
c0017e7d:	31 d2                	xor    edx,edx
c0017e7f:	68 60 40 02 c0       	push   0xc0024060
c0017e84:	0f be c3             	movsx  eax,bl
c0017e87:	6a 01                	push   0x1
c0017e89:	52                   	push   edx
c0017e8a:	56                   	push   esi
c0017e8b:	ff 34 85 3c 2e 02 c0 	push   DWORD PTR [eax*4-0x3ffdd1c4]
c0017e92:	e8 6d 53 ff ff       	call   c000d204 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e97:	83 c4 20             	add    esp,0x20
c0017e9a:	85 c0                	test   eax,eax
c0017e9c:	75 0e                	jne    c0017eac <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e9e:	89 35 44 40 02 c0    	mov    DWORD PTR ds:0xc0024044,esi
c0017ea4:	88 1d b4 f9 01 c0    	mov    BYTE PTR ds:0xc001f9b4,bl
c0017eaa:	eb 27                	jmp    c0017ed3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017eac:	83 ec 0c             	sub    esp,0xc
c0017eaf:	68 67 f0 01 c0       	push   0xc001f067
c0017eb4:	e8 63 2c ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0017eb9:	83 c4 0c             	add    esp,0xc
c0017ebc:	68 00 08 00 00       	push   0x800
c0017ec1:	6a 00                	push   0x0
c0017ec3:	57                   	push   edi
c0017ec4:	e8 27 86 fe ff       	call   c00004f0 <memset>
c0017ec9:	83 c4 10             	add    esp,0x10
c0017ecc:	b8 01 00 00 00       	mov    eax,0x1
c0017ed1:	eb 0e                	jmp    c0017ee1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017ed3:	be 60 40 02 c0       	mov    esi,0xc0024060
c0017ed8:	b9 00 08 00 00       	mov    ecx,0x800
c0017edd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017edf:	31 c0                	xor    eax,eax
c0017ee1:	5b                   	pop    ebx
c0017ee2:	5e                   	pop    esi
c0017ee3:	5f                   	pop    edi
c0017ee4:	c3                   	ret    
c0017ee5:	90                   	nop

c0017ee6 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017ee6:	53                   	push   ebx
c0017ee7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017eed:	c7 05 44 40 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0024044,0xdeadbeef
c0017ef7:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017efe:	8d 58 41             	lea    ebx,[eax+0x41]
c0017f01:	0f be db             	movsx  ebx,bl
c0017f04:	53                   	push   ebx
c0017f05:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f09:	50                   	push   eax
c0017f0a:	6a 10                	push   0x10
c0017f0c:	e8 4a ff ff ff       	call   c0017e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f11:	83 c4 10             	add    esp,0x10
c0017f14:	31 d2                	xor    edx,edx
c0017f16:	85 c0                	test   eax,eax
c0017f18:	75 33                	jne    c0017f4d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f1a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f1f:	75 2c                	jne    c0017f4d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f21:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f26:	75 25                	jne    c0017f4d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f28:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f2d:	75 1e                	jne    c0017f4d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f2f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f34:	75 17                	jne    c0017f4d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f36:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f3b:	75 10                	jne    c0017f4d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f3d:	83 ec 0c             	sub    esp,0xc
c0017f40:	53                   	push   ebx
c0017f41:	e8 4c ed fe ff       	call   c0006c92 <init_percd>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	40                   	inc    eax
c0017f4a:	0f 95 c2             	setne  dl
c0017f4d:	88 d0                	mov    al,dl
c0017f4f:	81 c4 08 08 00 00    	add    esp,0x808
c0017f55:	5b                   	pop    ebx
c0017f56:	c3                   	ret    
c0017f57:	90                   	nop

c0017f58 <ISO9660::ISO9660()>:
c0017f58:	83 ec 0c             	sub    esp,0xc
c0017f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f5f:	83 ec 0c             	sub    esp,0xc
c0017f62:	50                   	push   eax
c0017f63:	e8 d6 2e ff ff       	call   c000ae3e <Filesystem::Filesystem()>
c0017f68:	83 c4 10             	add    esp,0x10
c0017f6b:	ba 8c f0 01 c0       	mov    edx,0xc001f08c
c0017f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f74:	89 10                	mov    DWORD PTR [eax],edx
c0017f76:	e8 27 ee fe ff       	call   c0006da2 <fs_iso9660_init>
c0017f7b:	90                   	nop
c0017f7c:	83 c4 0c             	add    esp,0xc
c0017f7f:	c3                   	ret    

c0017f80 <SoundCard::beginPlayback()>:
c0017f80:	c7 44 24 04 ec f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0ec
c0017f88:	e9 5e 87 ff ff       	jmp    c00106eb <KePanic(char const*)>
c0017f8d:	90                   	nop

c0017f8e <SoundCard::stopPlayback()>:
c0017f8e:	c7 44 24 04 ec f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0ec
c0017f96:	e9 50 87 ff ff       	jmp    c00106eb <KePanic(char const*)>
c0017f9b:	90                   	nop

c0017f9c <SoundCard::SoundCard(char const*)>:
c0017f9c:	83 ec 1c             	sub    esp,0x1c
c0017f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa3:	83 ec 08             	sub    esp,0x8
c0017fa6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017faa:	50                   	push   eax
c0017fab:	e8 44 41 ff ff       	call   c000c0f4 <Device::Device(char const*)>
c0017fb0:	83 c4 10             	add    esp,0x10
c0017fb3:	ba 38 f1 01 c0       	mov    edx,0xc001f138
c0017fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fbc:	89 10                	mov    DWORD PTR [eax],edx
c0017fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fcd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fdb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0018001:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018009:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001800e:	7f 19                	jg     c0018029 <SoundCard::SoundCard(char const*)+0x8d>
c0018010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018014:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018018:	83 c2 54             	add    edx,0x54
c001801b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0018023:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018027:	eb e0                	jmp    c0018009 <SoundCard::SoundCard(char const*)+0x6d>
c0018029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001802d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018034:	90                   	nop
c0018035:	83 c4 1c             	add    esp,0x1c
c0018038:	c3                   	ret    
c0018039:	90                   	nop

c001803a <SoundCard::~SoundCard()>:
c001803a:	83 ec 0c             	sub    esp,0xc
c001803d:	ba 38 f1 01 c0       	mov    edx,0xc001f138
c0018042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018046:	89 10                	mov    DWORD PTR [eax],edx
c0018048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001804c:	83 ec 0c             	sub    esp,0xc
c001804f:	50                   	push   eax
c0018050:	e8 09 3e ff ff       	call   c000be5e <Device::~Device()>
c0018055:	83 c4 10             	add    esp,0x10
c0018058:	90                   	nop
c0018059:	83 c4 0c             	add    esp,0xc
c001805c:	c3                   	ret    
c001805d:	90                   	nop

c001805e <SoundCard::~SoundCard()>:
c001805e:	83 ec 0c             	sub    esp,0xc
c0018061:	83 ec 0c             	sub    esp,0xc
c0018064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018068:	e8 cd ff ff ff       	call   c001803a <SoundCard::~SoundCard()>
c001806d:	83 c4 10             	add    esp,0x10
c0018070:	83 ec 08             	sub    esp,0x8
c0018073:	68 e8 01 00 00       	push   0x1e8
c0018078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001807c:	e8 a5 29 ff ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	83 c4 0c             	add    esp,0xc
c0018087:	c3                   	ret    

c0018088 <SoundCard::configureRates(int, int, int)>:
c0018088:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001808c:	31 c0                	xor    eax,eax
c001808e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018095:	75 20                	jne    c00180b7 <SoundCard::configureRates(int, int, int)+0x2f>
c0018097:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001809b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00180a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180a5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00180ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180af:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00180b5:	b0 01                	mov    al,0x1
c00180b7:	c3                   	ret    

c00180b8 <SoundCard::getSamples16(int, short*)>:
c00180b8:	55                   	push   ebp
c00180b9:	57                   	push   edi
c00180ba:	31 ff                	xor    edi,edi
c00180bc:	56                   	push   esi
c00180bd:	53                   	push   ebx
c00180be:	31 db                	xor    ebx,ebx
c00180c0:	83 ec 10             	sub    esp,0x10
c00180c3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00180c7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180cb:	8d 04 36             	lea    eax,[esi+esi*1]
c00180ce:	50                   	push   eax
c00180cf:	6a 00                	push   0x0
c00180d1:	55                   	push   ebp
c00180d2:	e8 19 84 fe ff       	call   c00004f0 <memset>
c00180d7:	83 c4 10             	add    esp,0x10
c00180da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180de:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00180e5:	85 c0                	test   eax,eax
c00180e7:	74 1b                	je     c0018104 <SoundCard::getSamples16(int, short*)+0x4c>
c00180e9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180ed:	75 15                	jne    c0018104 <SoundCard::getSamples16(int, short*)+0x4c>
c00180ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180f3:	55                   	push   ebp
c00180f4:	56                   	push   esi
c00180f5:	50                   	push   eax
c00180f6:	e8 ed 02 00 00       	call   c00183e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00180fb:	83 c4 10             	add    esp,0x10
c00180fe:	39 c7                	cmp    edi,eax
c0018100:	7d 02                	jge    c0018104 <SoundCard::getSamples16(int, short*)+0x4c>
c0018102:	89 c7                	mov    edi,eax
c0018104:	43                   	inc    ebx
c0018105:	83 fb 20             	cmp    ebx,0x20
c0018108:	75 d0                	jne    c00180da <SoundCard::getSamples16(int, short*)+0x22>
c001810a:	83 c4 0c             	add    esp,0xc
c001810d:	89 f8                	mov    eax,edi
c001810f:	5b                   	pop    ebx
c0018110:	5e                   	pop    esi
c0018111:	5f                   	pop    edi
c0018112:	5d                   	pop    ebp
c0018113:	c3                   	ret    

c0018114 <SoundCard::getSamples32(int, int*)>:
c0018114:	55                   	push   ebp
c0018115:	57                   	push   edi
c0018116:	31 ff                	xor    edi,edi
c0018118:	56                   	push   esi
c0018119:	31 f6                	xor    esi,esi
c001811b:	53                   	push   ebx
c001811c:	83 ec 10             	sub    esp,0x10
c001811f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018123:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018127:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001812b:	c1 e0 02             	shl    eax,0x2
c001812e:	50                   	push   eax
c001812f:	6a 00                	push   0x0
c0018131:	55                   	push   ebp
c0018132:	e8 b9 83 fe ff       	call   c00004f0 <memset>
c0018137:	83 c4 10             	add    esp,0x10
c001813a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018141:	85 c0                	test   eax,eax
c0018143:	74 1b                	je     c0018160 <SoundCard::getSamples32(int, int*)+0x4c>
c0018145:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018149:	75 15                	jne    c0018160 <SoundCard::getSamples32(int, int*)+0x4c>
c001814b:	53                   	push   ebx
c001814c:	55                   	push   ebp
c001814d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018151:	50                   	push   eax
c0018152:	e8 55 03 00 00       	call   c00184ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018157:	83 c4 10             	add    esp,0x10
c001815a:	39 c6                	cmp    esi,eax
c001815c:	7d 02                	jge    c0018160 <SoundCard::getSamples32(int, int*)+0x4c>
c001815e:	89 c6                	mov    esi,eax
c0018160:	47                   	inc    edi
c0018161:	83 ff 20             	cmp    edi,0x20
c0018164:	75 d4                	jne    c001813a <SoundCard::getSamples32(int, int*)+0x26>
c0018166:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001816c:	85 f6                	test   esi,esi
c001816e:	75 0f                	jne    c001817f <SoundCard::getSamples32(int, int*)+0x6b>
c0018170:	84 c0                	test   al,al
c0018172:	74 1b                	je     c001818f <SoundCard::getSamples32(int, int*)+0x7b>
c0018174:	83 ec 0c             	sub    esp,0xc
c0018177:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018179:	53                   	push   ebx
c001817a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001817d:	eb 0d                	jmp    c001818c <SoundCard::getSamples32(int, int*)+0x78>
c001817f:	84 c0                	test   al,al
c0018181:	75 0c                	jne    c001818f <SoundCard::getSamples32(int, int*)+0x7b>
c0018183:	83 ec 0c             	sub    esp,0xc
c0018186:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018188:	53                   	push   ebx
c0018189:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001818c:	83 c4 10             	add    esp,0x10
c001818f:	83 c4 0c             	add    esp,0xc
c0018192:	89 f0                	mov    eax,esi
c0018194:	5b                   	pop    ebx
c0018195:	5e                   	pop    esi
c0018196:	5f                   	pop    edi
c0018197:	5d                   	pop    ebp
c0018198:	c3                   	ret    
c0018199:	90                   	nop

c001819a <SoundCard::addChannel(SoundPort*)>:
c001819a:	83 ec 0c             	sub    esp,0xc
c001819d:	31 c0                	xor    eax,eax
c001819f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181a3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00181ab:	74 1b                	je     c00181c8 <SoundCard::addChannel(SoundPort*)+0x2e>
c00181ad:	40                   	inc    eax
c00181ae:	83 f8 20             	cmp    eax,0x20
c00181b1:	75 f0                	jne    c00181a3 <SoundCard::addChannel(SoundPort*)+0x9>
c00181b3:	83 ec 0c             	sub    esp,0xc
c00181b6:	68 11 f1 01 c0       	push   0xc001f111
c00181bb:	e8 2b 85 ff ff       	call   c00106eb <KePanic(char const*)>
c00181c0:	83 c4 10             	add    esp,0x10
c00181c3:	83 c8 ff             	or     eax,0xffffffff
c00181c6:	eb 0b                	jmp    c00181d3 <SoundCard::addChannel(SoundPort*)+0x39>
c00181c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181cc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181d3:	83 c4 0c             	add    esp,0xc
c00181d6:	c3                   	ret    
c00181d7:	90                   	nop

c00181d8 <SoundCard::removeChannel(int)>:
c00181d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181e0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00181eb:	c3                   	ret    

c00181ec <SoundPort::SoundPort(int, int, int, int)>:
c00181ec:	83 ec 0c             	sub    esp,0xc
c00181ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fe:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001820a:	89 10                	mov    DWORD PTR [eax],edx
c001820c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018210:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018214:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001821f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018222:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0018227:	75 13                	jne    c001823c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822d:	8b 00                	mov    eax,DWORD PTR [eax]
c001822f:	05 a0 0f 00 00       	add    eax,0xfa0
c0018234:	01 c0                	add    eax,eax
c0018236:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001823a:	66 90                	xchg   ax,ax
c001823c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018240:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018244:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018256:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018259:	c1 e0 02             	shl    eax,0x2
c001825c:	83 ec 0c             	sub    esp,0xc
c001825f:	50                   	push   eax
c0018260:	e8 20 fc fe ff       	call   c0007e85 <malloc>
c0018265:	83 c4 10             	add    esp,0x10
c0018268:	89 c2                	mov    edx,eax
c001826a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018271:	90                   	nop
c0018272:	83 c4 0c             	add    esp,0xc
c0018275:	c3                   	ret    
c0018276:	66 90                	xchg   ax,ax

c0018278 <SoundPort::~SoundPort()>:
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001827f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018282:	85 c0                	test   eax,eax
c0018284:	74 1e                	je     c00182a4 <SoundPort::~SoundPort()+0x2c>
c0018286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001828a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001828d:	83 ec 0c             	sub    esp,0xc
c0018290:	50                   	push   eax
c0018291:	e8 ff fb fe ff       	call   c0007e95 <free>
c0018296:	83 c4 10             	add    esp,0x10
c0018299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00182a4:	90                   	nop
c00182a5:	83 c4 0c             	add    esp,0xc
c00182a8:	c3                   	ret    
c00182a9:	90                   	nop
c00182aa:	66 90                	xchg   ax,ax

c00182ac <SoundPort::unpause()>:
c00182ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182b0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00182b4:	c3                   	ret    
c00182b5:	90                   	nop
c00182b6:	66 90                	xchg   ax,ax

c00182b8 <SoundPort::pause()>:
c00182b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182bc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182c0:	c3                   	ret    
c00182c1:	90                   	nop
c00182c2:	66 90                	xchg   ax,ax

c00182c4 <SoundPort::getBufferUsed()>:
c00182c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182cb:	c3                   	ret    

c00182cc <SoundPort::getBufferSize()>:
c00182cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182d3:	c3                   	ret    

c00182d4 <SoundPort::buffer16(short*, int)>:
c00182d4:	55                   	push   ebp
c00182d5:	57                   	push   edi
c00182d6:	56                   	push   esi
c00182d7:	53                   	push   ebx
c00182d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182dc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00182e0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00182e3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00182e6:	74 68                	je     c0018350 <SoundPort::buffer16(short*, int)+0x7c>
c00182e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00182ec:	85 c9                	test   ecx,ecx
c00182ee:	7e 60                	jle    c0018350 <SoundPort::buffer16(short*, int)+0x7c>
c00182f0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00182f4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182f7:	c1 e1 0f             	shl    ecx,0xf
c00182fa:	8d 70 01             	lea    esi,[eax+0x1]
c00182fd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018300:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0018303:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018306:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018309:	74 4d                	je     c0018358 <SoundPort::buffer16(short*, int)+0x84>
c001830b:	31 f6                	xor    esi,esi
c001830d:	eb 21                	jmp    c0018330 <SoundPort::buffer16(short*, int)+0x5c>
c001830f:	90                   	nop
c0018310:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018315:	8d 79 01             	lea    edi,[ecx+0x1]
c0018318:	c1 e3 0f             	shl    ebx,0xf
c001831b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001831e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018321:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018324:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018327:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001832a:	74 1c                	je     c0018348 <SoundPort::buffer16(short*, int)+0x74>
c001832c:	89 c6                	mov    esi,eax
c001832e:	66 90                	xchg   ax,ax
c0018330:	8d 46 01             	lea    eax,[esi+0x1]
c0018333:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018337:	75 d7                	jne    c0018310 <SoundPort::buffer16(short*, int)+0x3c>
c0018339:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001833d:	8d 76 00             	lea    esi,[esi+0x0]
c0018340:	5b                   	pop    ebx
c0018341:	5e                   	pop    esi
c0018342:	5f                   	pop    edi
c0018343:	5d                   	pop    ebp
c0018344:	c3                   	ret    
c0018345:	8d 76 00             	lea    esi,[esi+0x0]
c0018348:	5b                   	pop    ebx
c0018349:	8d 46 02             	lea    eax,[esi+0x2]
c001834c:	5e                   	pop    esi
c001834d:	5f                   	pop    edi
c001834e:	5d                   	pop    ebp
c001834f:	c3                   	ret    
c0018350:	5b                   	pop    ebx
c0018351:	31 c0                	xor    eax,eax
c0018353:	5e                   	pop    esi
c0018354:	5f                   	pop    edi
c0018355:	5d                   	pop    ebp
c0018356:	c3                   	ret    
c0018357:	90                   	nop
c0018358:	b8 01 00 00 00       	mov    eax,0x1
c001835d:	eb e1                	jmp    c0018340 <SoundPort::buffer16(short*, int)+0x6c>
c001835f:	90                   	nop

c0018360 <SoundPort::buffer32(int*, int)>:
c0018360:	55                   	push   ebp
c0018361:	57                   	push   edi
c0018362:	56                   	push   esi
c0018363:	53                   	push   ebx
c0018364:	51                   	push   ecx
c0018365:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001836d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018370:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018374:	89 04 24             	mov    DWORD PTR [esp],eax
c0018377:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001837a:	74 5c                	je     c00183d8 <SoundPort::buffer32(int*, int)+0x78>
c001837c:	85 c0                	test   eax,eax
c001837e:	7e 58                	jle    c00183d8 <SoundPort::buffer32(int*, int)+0x78>
c0018380:	8d 71 01             	lea    esi,[ecx+0x1]
c0018383:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018386:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018389:	8b 37                	mov    esi,DWORD PTR [edi]
c001838b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001838e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018391:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018394:	74 4a                	je     c00183e0 <SoundPort::buffer32(int*, int)+0x80>
c0018396:	31 f6                	xor    esi,esi
c0018398:	eb 1e                	jmp    c00183b8 <SoundPort::buffer32(int*, int)+0x58>
c001839a:	66 90                	xchg   ax,ax
c001839c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001839f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00183a2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00183a5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00183a8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00183ac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183af:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183b2:	74 18                	je     c00183cc <SoundPort::buffer32(int*, int)+0x6c>
c00183b4:	89 de                	mov    esi,ebx
c00183b6:	66 90                	xchg   ax,ax
c00183b8:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183bb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183be:	75 dc                	jne    c001839c <SoundPort::buffer32(int*, int)+0x3c>
c00183c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183c3:	90                   	nop
c00183c4:	5a                   	pop    edx
c00183c5:	5b                   	pop    ebx
c00183c6:	5e                   	pop    esi
c00183c7:	5f                   	pop    edi
c00183c8:	5d                   	pop    ebp
c00183c9:	c3                   	ret    
c00183ca:	66 90                	xchg   ax,ax
c00183cc:	5a                   	pop    edx
c00183cd:	8d 46 02             	lea    eax,[esi+0x2]
c00183d0:	5b                   	pop    ebx
c00183d1:	5e                   	pop    esi
c00183d2:	5f                   	pop    edi
c00183d3:	5d                   	pop    ebp
c00183d4:	c3                   	ret    
c00183d5:	8d 76 00             	lea    esi,[esi+0x0]
c00183d8:	5a                   	pop    edx
c00183d9:	31 c0                	xor    eax,eax
c00183db:	5b                   	pop    ebx
c00183dc:	5e                   	pop    esi
c00183dd:	5f                   	pop    edi
c00183de:	5d                   	pop    ebp
c00183df:	c3                   	ret    
c00183e0:	b8 01 00 00 00       	mov    eax,0x1
c00183e5:	eb dd                	jmp    c00183c4 <SoundPort::buffer32(int*, int)+0x64>
c00183e7:	90                   	nop

c00183e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00183e8:	57                   	push   edi
c00183e9:	56                   	push   esi
c00183ea:	53                   	push   ebx
c00183eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183ef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00183f3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00183f9:	39 03                	cmp    DWORD PTR [ebx],eax
c00183fb:	74 13                	je     c0018410 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00183fd:	83 ec 0c             	sub    esp,0xc
c0018400:	68 64 f1 01 c0       	push   0xc001f164
c0018405:	e8 e1 82 ff ff       	call   c00106eb <KePanic(char const*)>
c001840a:	83 c4 10             	add    esp,0x10
c001840d:	8d 76 00             	lea    esi,[esi+0x0]
c0018410:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018416:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018419:	74 11                	je     c001842c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001841b:	83 ec 0c             	sub    esp,0xc
c001841e:	68 a3 f1 01 c0       	push   0xc001f1a3
c0018423:	e8 c3 82 ff ff       	call   c00106eb <KePanic(char const*)>
c0018428:	83 c4 10             	add    esp,0x10
c001842b:	90                   	nop
c001842c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018432:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018435:	74 11                	je     c0018448 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018437:	83 ec 0c             	sub    esp,0xc
c001843a:	68 a3 f1 01 c0       	push   0xc001f1a3
c001843f:	e8 a7 82 ff ff       	call   c00106eb <KePanic(char const*)>
c0018444:	83 c4 10             	add    esp,0x10
c0018447:	90                   	nop
c0018448:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001844b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001844f:	7e 07                	jle    c0018458 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018451:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018455:	8d 76 00             	lea    esi,[esi+0x0]
c0018458:	85 f6                	test   esi,esi
c001845a:	7e 2c                	jle    c0018488 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001845c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018460:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018463:	31 c9                	xor    ecx,ecx
c0018465:	01 d7                	add    edi,edx
c0018467:	90                   	nop
c0018468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001846b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001846e:	85 c0                	test   eax,eax
c0018470:	79 06                	jns    c0018478 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018472:	05 ff 7f 00 00       	add    eax,0x7fff
c0018477:	90                   	nop
c0018478:	c1 f8 0f             	sar    eax,0xf
c001847b:	83 c1 04             	add    ecx,0x4
c001847e:	66 01 02             	add    WORD PTR [edx],ax
c0018481:	83 c2 02             	add    edx,0x2
c0018484:	39 d7                	cmp    edi,edx
c0018486:	75 e0                	jne    c0018468 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018488:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001848b:	50                   	push   eax
c001848c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001848f:	29 f0                	sub    eax,esi
c0018491:	c1 e0 02             	shl    eax,0x2
c0018494:	50                   	push   eax
c0018495:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018498:	50                   	push   eax
c0018499:	52                   	push   edx
c001849a:	e8 61 7f fe ff       	call   c0000400 <memmove>
c001849f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00184a2:	83 c4 10             	add    esp,0x10
c00184a5:	89 f0                	mov    eax,esi
c00184a7:	5b                   	pop    ebx
c00184a8:	5e                   	pop    esi
c00184a9:	5f                   	pop    edi
c00184aa:	c3                   	ret    
c00184ab:	90                   	nop

c00184ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00184ac:	57                   	push   edi
c00184ad:	56                   	push   esi
c00184ae:	53                   	push   ebx
c00184af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00184b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184bb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184c1:	39 06                	cmp    DWORD PTR [esi],eax
c00184c3:	74 13                	je     c00184d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00184c5:	83 ec 0c             	sub    esp,0xc
c00184c8:	68 84 f1 01 c0       	push   0xc001f184
c00184cd:	e8 19 82 ff ff       	call   c00106eb <KePanic(char const*)>
c00184d2:	83 c4 10             	add    esp,0x10
c00184d5:	8d 76 00             	lea    esi,[esi+0x0]
c00184d8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184de:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00184e1:	74 11                	je     c00184f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00184e3:	83 ec 0c             	sub    esp,0xc
c00184e6:	68 bf f1 01 c0       	push   0xc001f1bf
c00184eb:	e8 fb 81 ff ff       	call   c00106eb <KePanic(char const*)>
c00184f0:	83 c4 10             	add    esp,0x10
c00184f3:	90                   	nop
c00184f4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00184fa:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00184fd:	74 11                	je     c0018510 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00184ff:	83 ec 0c             	sub    esp,0xc
c0018502:	68 bf f1 01 c0       	push   0xc001f1bf
c0018507:	e8 df 81 ff ff       	call   c00106eb <KePanic(char const*)>
c001850c:	83 c4 10             	add    esp,0x10
c001850f:	90                   	nop
c0018510:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018513:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018517:	7e 07                	jle    c0018520 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018519:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001851d:	8d 76 00             	lea    esi,[esi+0x0]
c0018520:	85 ff                	test   edi,edi
c0018522:	7e 1c                	jle    c0018540 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018524:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001852b:	31 c0                	xor    eax,eax
c001852d:	8d 76 00             	lea    esi,[esi+0x0]
c0018530:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018533:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018536:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018539:	83 c0 04             	add    eax,0x4
c001853c:	39 c1                	cmp    ecx,eax
c001853e:	75 f0                	jne    c0018530 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018540:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018543:	50                   	push   eax
c0018544:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018547:	29 f8                	sub    eax,edi
c0018549:	c1 e0 02             	shl    eax,0x2
c001854c:	50                   	push   eax
c001854d:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018550:	50                   	push   eax
c0018551:	52                   	push   edx
c0018552:	e8 a9 7e fe ff       	call   c0000400 <memmove>
c0018557:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001855a:	83 c4 10             	add    esp,0x10
c001855d:	89 f8                	mov    eax,edi
c001855f:	5b                   	pop    ebx
c0018560:	5e                   	pop    esi
c0018561:	5f                   	pop    edi
c0018562:	c3                   	ret    
c0018563:	90                   	nop

c0018564 <PCI::open(int, int, void*)>:
c0018564:	83 ec 18             	sub    esp,0x18
c0018567:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001856b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001856f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018575:	8b 10                	mov    edx,DWORD PTR [eax]
c0018577:	50                   	push   eax
c0018578:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001857b:	31 c0                	xor    eax,eax
c001857d:	83 c4 1c             	add    esp,0x1c
c0018580:	c3                   	ret    
c0018581:	90                   	nop

c0018582 <PCI::close(int, int, void*)>:
c0018582:	31 c0                	xor    eax,eax
c0018584:	c3                   	ret    
c0018585:	90                   	nop

c0018586 <PCI::PCI()>:
c0018586:	83 ec 0c             	sub    esp,0xc
c0018589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858d:	83 ec 08             	sub    esp,0x8
c0018590:	68 db f1 01 c0       	push   0xc001f1db
c0018595:	50                   	push   eax
c0018596:	e8 15 33 ff ff       	call   c000b8b0 <Bus::Bus(char const*)>
c001859b:	83 c4 10             	add    esp,0x10
c001859e:	ba 84 f2 01 c0       	mov    edx,0xc001f284
c00185a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a7:	89 10                	mov    DWORD PTR [eax],edx
c00185a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ad:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00185b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185bb:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c00185c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185ca:	31 d2                	xor    edx,edx
c00185cc:	88 c2                	mov    dl,al
c00185ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185e3:	31 d2                	xor    edx,edx
c00185e5:	88 c2                	mov    dl,al
c00185e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185eb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00185f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185fa:	8d 50 01             	lea    edx,[eax+0x1]
c00185fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018601:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018607:	31 d2                	xor    edx,edx
c0018609:	88 c2                	mov    dl,al
c001860b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018613:	83 c9 c0             	or     ecx,0xffffffc0
c0018616:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001861a:	90                   	nop
c001861b:	83 c4 0c             	add    esp,0xc
c001861e:	c3                   	ret    
c001861f:	90                   	nop

c0018620 <PCI::readBAR8(unsigned int, int)>:
c0018620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018624:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018628:	f6 c2 01             	test   dl,0x1
c001862b:	74 07                	je     c0018634 <PCI::readBAR8(unsigned int, int)+0x14>
c001862d:	83 e2 fc             	and    edx,0xfffffffc
c0018630:	01 c2                	add    edx,eax
c0018632:	ec                   	in     al,dx
c0018633:	c3                   	ret    
c0018634:	83 e2 f0             	and    edx,0xfffffff0
c0018637:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001863a:	c3                   	ret    
c001863b:	90                   	nop

c001863c <PCI::readBAR16(unsigned int, int)>:
c001863c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018644:	f6 c2 01             	test   dl,0x1
c0018647:	74 08                	je     c0018651 <PCI::readBAR16(unsigned int, int)+0x15>
c0018649:	83 e2 fc             	and    edx,0xfffffffc
c001864c:	01 c2                	add    edx,eax
c001864e:	66 ed                	in     ax,dx
c0018650:	c3                   	ret    
c0018651:	83 e2 f0             	and    edx,0xfffffff0
c0018654:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018658:	c3                   	ret    
c0018659:	90                   	nop

c001865a <PCI::readBAR32(unsigned int, int)>:
c001865a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001865e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018662:	f6 c2 01             	test   dl,0x1
c0018665:	74 07                	je     c001866e <PCI::readBAR32(unsigned int, int)+0x14>
c0018667:	83 e2 fc             	and    edx,0xfffffffc
c001866a:	01 c2                	add    edx,eax
c001866c:	ed                   	in     eax,dx
c001866d:	c3                   	ret    
c001866e:	83 e2 f0             	and    edx,0xfffffff0
c0018671:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018674:	c3                   	ret    
c0018675:	90                   	nop

c0018676 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001867a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001867e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018682:	f6 c2 01             	test   dl,0x1
c0018685:	74 07                	je     c001868e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018687:	83 e2 fc             	and    edx,0xfffffffc
c001868a:	01 ca                	add    edx,ecx
c001868c:	ee                   	out    dx,al
c001868d:	c3                   	ret    
c001868e:	83 e2 f0             	and    edx,0xfffffff0
c0018691:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018694:	c3                   	ret    
c0018695:	90                   	nop

c0018696 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018696:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001869a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001869e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186a2:	f6 c2 01             	test   dl,0x1
c00186a5:	74 08                	je     c00186af <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00186a7:	83 e2 fc             	and    edx,0xfffffffc
c00186aa:	01 ca                	add    edx,ecx
c00186ac:	66 ef                	out    dx,ax
c00186ae:	c3                   	ret    
c00186af:	83 e2 f0             	and    edx,0xfffffff0
c00186b2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00186b6:	c3                   	ret    
c00186b7:	90                   	nop

c00186b8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186c4:	f6 c2 01             	test   dl,0x1
c00186c7:	74 07                	je     c00186d0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186c9:	83 e2 fc             	and    edx,0xfffffffc
c00186cc:	01 ca                	add    edx,ecx
c00186ce:	ef                   	out    dx,eax
c00186cf:	c3                   	ret    
c00186d0:	83 e2 f0             	and    edx,0xfffffff0
c00186d3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186d6:	c3                   	ret    
c00186d7:	90                   	nop

c00186d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186d8:	55                   	push   ebp
c00186d9:	57                   	push   edi
c00186da:	56                   	push   esi
c00186db:	53                   	push   ebx
c00186dc:	83 ec 0c             	sub    esp,0xc
c00186df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00186e3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00186e7:	89 f0                	mov    eax,esi
c00186e9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00186ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00186f1:	3c 07                	cmp    al,0x7
c00186f3:	76 10                	jbe    c0018705 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00186f5:	83 ec 0c             	sub    esp,0xc
c00186f8:	68 e3 f1 01 c0       	push   0xc001f1e3
c00186fd:	e8 e9 7f ff ff       	call   c00106eb <KePanic(char const*)>
c0018702:	83 c4 10             	add    esp,0x10
c0018705:	80 fb 0f             	cmp    bl,0xf
c0018708:	76 10                	jbe    c001871a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001870a:	83 ec 0c             	sub    esp,0xc
c001870d:	68 13 f2 01 c0       	push   0xc001f213
c0018712:	e8 d4 7f ff ff       	call   c00106eb <KePanic(char const*)>
c0018717:	83 c4 10             	add    esp,0x10
c001871a:	8d 04 36             	lea    eax,[esi+esi*1]
c001871d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018722:	83 c8 f0             	or     eax,0xfffffff0
c0018725:	ee                   	out    dx,al
c0018726:	ba fa 0c 00 00       	mov    edx,0xcfa
c001872b:	89 e8                	mov    eax,ebp
c001872d:	ee                   	out    dx,al
c001872e:	83 c4 0c             	add    esp,0xc
c0018731:	89 d8                	mov    eax,ebx
c0018733:	66 81 e7 fc 00       	and    di,0xfc
c0018738:	5b                   	pop    ebx
c0018739:	c1 e0 08             	shl    eax,0x8
c001873c:	5e                   	pop    esi
c001873d:	09 f8                	or     eax,edi
c001873f:	5f                   	pop    edi
c0018740:	66 0d 00 c0          	or     ax,0xc000
c0018744:	5d                   	pop    ebp
c0018745:	c3                   	ret    

c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018746:	57                   	push   edi
c0018747:	56                   	push   esi
c0018748:	53                   	push   ebx
c0018749:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001874d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018751:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018757:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001875b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001875f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018763:	83 ff 01             	cmp    edi,0x1
c0018766:	75 3e                	jne    c00187a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018768:	89 de                	mov    esi,ebx
c001876a:	0f b6 c0             	movzx  eax,al
c001876d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018773:	c1 e0 10             	shl    eax,0x10
c0018776:	0f b6 c9             	movzx  ecx,cl
c0018779:	09 f0                	or     eax,esi
c001877b:	c1 e1 08             	shl    ecx,0x8
c001877e:	0f b6 d2             	movzx  edx,dl
c0018781:	09 c8                	or     eax,ecx
c0018783:	c1 e2 0b             	shl    edx,0xb
c0018786:	09 d0                	or     eax,edx
c0018788:	ba f8 0c 00 00       	mov    edx,0xcf8
c001878d:	0d 00 00 00 80       	or     eax,0x80000000
c0018792:	ef                   	out    dx,eax
c0018793:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018798:	ed                   	in     eax,dx
c0018799:	83 e3 02             	and    ebx,0x2
c001879c:	0f b6 cb             	movzx  ecx,bl
c001879f:	c1 e1 03             	shl    ecx,0x3
c00187a2:	d3 e8                	shr    eax,cl
c00187a4:	eb 43                	jmp    c00187e9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187a6:	83 ff 02             	cmp    edi,0x2
c00187a9:	75 2c                	jne    c00187d7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00187ab:	83 ec 0c             	sub    esp,0xc
c00187ae:	0f b6 c9             	movzx  ecx,cl
c00187b1:	0f b6 d2             	movzx  edx,dl
c00187b4:	0f b6 fb             	movzx  edi,bl
c00187b7:	0f b6 c0             	movzx  eax,al
c00187ba:	57                   	push   edi
c00187bb:	51                   	push   ecx
c00187bc:	52                   	push   edx
c00187bd:	50                   	push   eax
c00187be:	56                   	push   esi
c00187bf:	e8 14 ff ff ff       	call   c00186d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187c4:	89 c2                	mov    edx,eax
c00187c6:	ed                   	in     eax,dx
c00187c7:	83 e3 02             	and    ebx,0x2
c00187ca:	83 c4 20             	add    esp,0x20
c00187cd:	0f b6 cb             	movzx  ecx,bl
c00187d0:	c1 e1 03             	shl    ecx,0x3
c00187d3:	d3 e8                	shr    eax,cl
c00187d5:	eb 12                	jmp    c00187e9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187d7:	83 ec 0c             	sub    esp,0xc
c00187da:	68 43 f2 01 c0       	push   0xc001f243
c00187df:	e8 07 7f ff ff       	call   c00106eb <KePanic(char const*)>
c00187e4:	83 c4 10             	add    esp,0x10
c00187e7:	31 c0                	xor    eax,eax
c00187e9:	5b                   	pop    ebx
c00187ea:	5e                   	pop    esi
c00187eb:	5f                   	pop    edi
c00187ec:	c3                   	ret    
c00187ed:	90                   	nop

c00187ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00187ee:	83 ec 18             	sub    esp,0x18
c00187f1:	6a 00                	push   0x0
c00187f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f8:	50                   	push   eax
c00187f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187fe:	50                   	push   eax
c00187ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018804:	50                   	push   eax
c0018805:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018809:	e8 38 ff ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001880e:	83 c4 2c             	add    esp,0x2c
c0018811:	c3                   	ret    

c0018812 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018812:	83 ec 18             	sub    esp,0x18
c0018815:	6a 0e                	push   0xe
c0018817:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881c:	50                   	push   eax
c001881d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018822:	50                   	push   eax
c0018823:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018828:	50                   	push   eax
c0018829:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882d:	e8 14 ff ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018832:	83 c4 2c             	add    esp,0x2c
c0018835:	0f b6 c0             	movzx  eax,al
c0018838:	c3                   	ret    
c0018839:	90                   	nop

c001883a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001883a:	55                   	push   ebp
c001883b:	57                   	push   edi
c001883c:	56                   	push   esi
c001883d:	53                   	push   ebx
c001883e:	83 ec 18             	sub    esp,0x18
c0018841:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018846:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001884b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018850:	6a 0a                	push   0xa
c0018852:	56                   	push   esi
c0018853:	55                   	push   ebp
c0018854:	57                   	push   edi
c0018855:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018859:	e8 e8 fe ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001885e:	83 c4 14             	add    esp,0x14
c0018861:	89 c3                	mov    ebx,eax
c0018863:	6a 0a                	push   0xa
c0018865:	0f b6 db             	movzx  ebx,bl
c0018868:	56                   	push   esi
c0018869:	55                   	push   ebp
c001886a:	57                   	push   edi
c001886b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001886f:	e8 d2 fe ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018874:	83 c4 2c             	add    esp,0x2c
c0018877:	25 00 ff 00 00       	and    eax,0xff00
c001887c:	09 d8                	or     eax,ebx
c001887e:	5b                   	pop    ebx
c001887f:	5e                   	pop    esi
c0018880:	5f                   	pop    edi
c0018881:	5d                   	pop    ebp
c0018882:	c3                   	ret    
c0018883:	90                   	nop

c0018884 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018884:	83 ec 18             	sub    esp,0x18
c0018887:	6a 08                	push   0x8
c0018889:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888e:	50                   	push   eax
c001888f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018894:	50                   	push   eax
c0018895:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001889a:	50                   	push   eax
c001889b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001889f:	e8 a2 fe ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a4:	83 c4 2c             	add    esp,0x2c
c00188a7:	0f b6 c4             	movzx  eax,ah
c00188aa:	c3                   	ret    
c00188ab:	90                   	nop

c00188ac <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00188ac:	83 ec 18             	sub    esp,0x18
c00188af:	6a 08                	push   0x8
c00188b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188b6:	50                   	push   eax
c00188b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188bc:	50                   	push   eax
c00188bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c2:	50                   	push   eax
c00188c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188c7:	e8 7a fe ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188cc:	83 c4 2c             	add    esp,0x2c
c00188cf:	c3                   	ret    

c00188d0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188d0:	83 ec 18             	sub    esp,0x18
c00188d3:	6a 3c                	push   0x3c
c00188d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188da:	50                   	push   eax
c00188db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e0:	50                   	push   eax
c00188e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e6:	50                   	push   eax
c00188e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188eb:	e8 56 fe ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f0:	83 c4 2c             	add    esp,0x2c
c00188f3:	c3                   	ret    

c00188f4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00188f4:	83 ec 18             	sub    esp,0x18
c00188f7:	6a 18                	push   0x18
c00188f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188fe:	50                   	push   eax
c00188ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018904:	50                   	push   eax
c0018905:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001890a:	50                   	push   eax
c001890b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001890f:	e8 32 fe ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018914:	83 c4 2c             	add    esp,0x2c
c0018917:	0f b6 c4             	movzx  eax,ah
c001891a:	c3                   	ret    
c001891b:	90                   	nop

c001891c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001891c:	55                   	push   ebp
c001891d:	57                   	push   edi
c001891e:	56                   	push   esi
c001891f:	53                   	push   ebx
c0018920:	83 ec 28             	sub    esp,0x28
c0018923:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018927:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001892c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018931:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018936:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001893d:	8d 43 12             	lea    eax,[ebx+0x12]
c0018940:	83 c3 10             	add    ebx,0x10
c0018943:	0f b6 c0             	movzx  eax,al
c0018946:	0f b6 db             	movzx  ebx,bl
c0018949:	50                   	push   eax
c001894a:	51                   	push   ecx
c001894b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001894f:	57                   	push   edi
c0018950:	55                   	push   ebp
c0018951:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018955:	e8 ec fd ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001895a:	83 c4 14             	add    esp,0x14
c001895d:	89 c6                	mov    esi,eax
c001895f:	53                   	push   ebx
c0018960:	c1 e6 10             	shl    esi,0x10
c0018963:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018967:	51                   	push   ecx
c0018968:	57                   	push   edi
c0018969:	55                   	push   ebp
c001896a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001896e:	e8 d3 fd ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018973:	83 c4 3c             	add    esp,0x3c
c0018976:	0f b7 c0             	movzx  eax,ax
c0018979:	5b                   	pop    ebx
c001897a:	09 f0                	or     eax,esi
c001897c:	5e                   	pop    esi
c001897d:	5f                   	pop    edi
c001897e:	5d                   	pop    ebp
c001897f:	c3                   	ret    

c0018980 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018980:	55                   	push   ebp
c0018981:	57                   	push   edi
c0018982:	56                   	push   esi
c0018983:	53                   	push   ebx
c0018984:	83 ec 0c             	sub    esp,0xc
c0018987:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001898b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001898f:	89 f5                	mov    ebp,esi
c0018991:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018997:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001899b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001899f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189a7:	83 f9 01             	cmp    ecx,0x1
c00189aa:	75 5d                	jne    c0018a09 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00189ac:	0f b6 c8             	movzx  ecx,al
c00189af:	0f b6 d2             	movzx  edx,dl
c00189b2:	c1 e1 10             	shl    ecx,0x10
c00189b5:	c1 e2 0b             	shl    edx,0xb
c00189b8:	89 f0                	mov    eax,esi
c00189ba:	25 fc 00 00 00       	and    eax,0xfc
c00189bf:	09 c1                	or     ecx,eax
c00189c1:	89 e8                	mov    eax,ebp
c00189c3:	0f b6 c0             	movzx  eax,al
c00189c6:	c1 e0 08             	shl    eax,0x8
c00189c9:	09 c1                	or     ecx,eax
c00189cb:	09 d1                	or     ecx,edx
c00189cd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189d2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189d8:	89 c8                	mov    eax,ecx
c00189da:	ef                   	out    dx,eax
c00189db:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189e0:	ed                   	in     eax,dx
c00189e1:	0f b7 db             	movzx  ebx,bx
c00189e4:	83 e6 02             	and    esi,0x2
c00189e7:	74 0a                	je     c00189f3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00189e9:	0f b7 d0             	movzx  edx,ax
c00189ec:	c1 e3 10             	shl    ebx,0x10
c00189ef:	09 d3                	or     ebx,edx
c00189f1:	eb 05                	jmp    c00189f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00189f3:	66 31 c0             	xor    ax,ax
c00189f6:	09 c3                	or     ebx,eax
c00189f8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189fd:	89 c8                	mov    eax,ecx
c00189ff:	ef                   	out    dx,eax
c0018a00:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a05:	89 d8                	mov    eax,ebx
c0018a07:	eb 41                	jmp    c0018a4a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a09:	83 f9 02             	cmp    ecx,0x2
c0018a0c:	75 45                	jne    c0018a53 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018a0e:	83 ec 0c             	sub    esp,0xc
c0018a11:	0f b6 d2             	movzx  edx,dl
c0018a14:	89 f1                	mov    ecx,esi
c0018a16:	0f b6 c0             	movzx  eax,al
c0018a19:	0f b6 f1             	movzx  esi,cl
c0018a1c:	89 e9                	mov    ecx,ebp
c0018a1e:	56                   	push   esi
c0018a1f:	0f b6 c9             	movzx  ecx,cl
c0018a22:	51                   	push   ecx
c0018a23:	52                   	push   edx
c0018a24:	50                   	push   eax
c0018a25:	57                   	push   edi
c0018a26:	e8 ad fc ff ff       	call   c00186d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a2b:	89 c2                	mov    edx,eax
c0018a2d:	ed                   	in     eax,dx
c0018a2e:	83 c4 20             	add    esp,0x20
c0018a31:	0f b7 db             	movzx  ebx,bx
c0018a34:	f6 c2 02             	test   dl,0x2
c0018a37:	74 0c                	je     c0018a45 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a39:	0f b7 c8             	movzx  ecx,ax
c0018a3c:	89 d8                	mov    eax,ebx
c0018a3e:	c1 e0 10             	shl    eax,0x10
c0018a41:	09 c8                	or     eax,ecx
c0018a43:	eb 05                	jmp    c0018a4a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a45:	66 31 c0             	xor    ax,ax
c0018a48:	09 d8                	or     eax,ebx
c0018a4a:	ef                   	out    dx,eax
c0018a4b:	83 c4 0c             	add    esp,0xc
c0018a4e:	5b                   	pop    ebx
c0018a4f:	5e                   	pop    esi
c0018a50:	5f                   	pop    edi
c0018a51:	5d                   	pop    ebp
c0018a52:	c3                   	ret    
c0018a53:	c7 44 24 20 43 f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f243
c0018a5b:	83 c4 0c             	add    esp,0xc
c0018a5e:	5b                   	pop    ebx
c0018a5f:	5e                   	pop    esi
c0018a60:	5f                   	pop    edi
c0018a61:	5d                   	pop    ebp
c0018a62:	e9 84 7c ff ff       	jmp    c00106eb <KePanic(char const*)>
c0018a67:	90                   	nop

c0018a68 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a68:	55                   	push   ebp
c0018a69:	57                   	push   edi
c0018a6a:	56                   	push   esi
c0018a6b:	53                   	push   ebx
c0018a6c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a72:	80 3d 6c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002486c,0x0
c0018a79:	0f 85 84 00 00 00    	jne    c0018b03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a7f:	83 ec 0c             	sub    esp,0xc
c0018a82:	68 14 01 00 00       	push   0x114
c0018a87:	e8 f9 f3 fe ff       	call   c0007e85 <malloc>
c0018a8c:	83 c4 0c             	add    esp,0xc
c0018a8f:	89 c3                	mov    ebx,eax
c0018a91:	ff 35 b0 3e 02 c0    	push   DWORD PTR ds:0xc0023eb0
c0018a97:	68 49 f2 01 c0       	push   0xc001f249
c0018a9c:	50                   	push   eax
c0018a9d:	e8 f0 25 ff ff       	call   c000b092 <File::File(char const*, Process*)>
c0018aa2:	5a                   	pop    edx
c0018aa3:	59                   	pop    ecx
c0018aa4:	6a 01                	push   0x1
c0018aa6:	53                   	push   ebx
c0018aa7:	e8 a6 26 ff ff       	call   c000b152 <File::open(FileOpenMode)>
c0018aac:	83 c4 0c             	add    esp,0xc
c0018aaf:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018ab3:	50                   	push   eax
c0018ab4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ab8:	50                   	push   eax
c0018ab9:	53                   	push   ebx
c0018aba:	e8 3f 29 ff ff       	call   c000b3fe <File::stat(unsigned long long*, bool*)>
c0018abf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ac3:	40                   	inc    eax
c0018ac4:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ac7:	e8 b9 f3 fe ff       	call   c0007e85 <malloc>
c0018acc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ad0:	a3 68 48 02 c0       	mov    ds:0xc0024868,eax
c0018ad5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018ad9:	5e                   	pop    esi
c0018ada:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018adc:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018ae0:	51                   	push   ecx
c0018ae1:	50                   	push   eax
c0018ae2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018ae6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018aea:	53                   	push   ebx
c0018aeb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018aee:	83 c4 14             	add    esp,0x14
c0018af1:	53                   	push   ebx
c0018af2:	e8 b9 26 ff ff       	call   c000b1b0 <File::close()>
c0018af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018afb:	83 c4 10             	add    esp,0x10
c0018afe:	a3 64 48 02 c0       	mov    ds:0xc0024864,eax
c0018b03:	a1 64 48 02 c0       	mov    eax,ds:0xc0024864
c0018b08:	8b 15 68 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024868
c0018b0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b11:	31 ff                	xor    edi,edi
c0018b13:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b1b:	31 f6                	xor    esi,esi
c0018b1d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b22:	31 db                	xor    ebx,ebx
c0018b24:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b2c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b31:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b38:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b3c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b43:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b47:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b4a:	0f 8e 6b 01 00 00    	jle    c0018cbb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b50:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b53:	d4 40                	aam    0x40
c0018b55:	d5 39                	aad    0x39
c0018b57:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b5b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b5f:	d4 40                	aam    0x40
c0018b61:	d5 39                	aad    0x39
c0018b63:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b67:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b6b:	d4 40                	aam    0x40
c0018b6d:	d5 39                	aad    0x39
c0018b6f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b73:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b77:	d4 40                	aam    0x40
c0018b79:	d5 39                	aad    0x39
c0018b7b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b7f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b83:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b87:	3c 56                	cmp    al,0x56
c0018b89:	74 45                	je     c0018bd0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b8b:	d4 40                	aam    0x40
c0018b8d:	d5 39                	aad    0x39
c0018b8f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b92:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b96:	0f b6 c9             	movzx  ecx,cl
c0018b99:	c1 e1 04             	shl    ecx,0x4
c0018b9c:	d4 40                	aam    0x40
c0018b9e:	d5 39                	aad    0x39
c0018ba0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018ba3:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018ba7:	0f b6 db             	movzx  ebx,bl
c0018baa:	09 cb                	or     ebx,ecx
c0018bac:	c1 e3 04             	shl    ebx,0x4
c0018baf:	d4 40                	aam    0x40
c0018bb1:	d5 39                	aad    0x39
c0018bb3:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bb6:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018bba:	0f b6 c9             	movzx  ecx,cl
c0018bbd:	09 cb                	or     ebx,ecx
c0018bbf:	c1 e3 04             	shl    ebx,0x4
c0018bc2:	89 d9                	mov    ecx,ebx
c0018bc4:	d4 40                	aam    0x40
c0018bc6:	d5 39                	aad    0x39
c0018bc8:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bcb:	0f b6 db             	movzx  ebx,bl
c0018bce:	09 cb                	or     ebx,ecx
c0018bd0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018bd4:	80 f9 44             	cmp    cl,0x44
c0018bd7:	74 47                	je     c0018c20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018bd9:	88 c8                	mov    al,cl
c0018bdb:	d4 40                	aam    0x40
c0018bdd:	d5 39                	aad    0x39
c0018bdf:	83 e8 30             	sub    eax,0x30
c0018be2:	0f b6 e8             	movzx  ebp,al
c0018be5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018be9:	c1 e5 04             	shl    ebp,0x4
c0018bec:	d4 40                	aam    0x40
c0018bee:	d5 39                	aad    0x39
c0018bf0:	83 e8 30             	sub    eax,0x30
c0018bf3:	0f b6 f0             	movzx  esi,al
c0018bf6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018bfa:	09 ee                	or     esi,ebp
c0018bfc:	c1 e6 04             	shl    esi,0x4
c0018bff:	d4 40                	aam    0x40
c0018c01:	d5 39                	aad    0x39
c0018c03:	83 e8 30             	sub    eax,0x30
c0018c06:	0f b6 e8             	movzx  ebp,al
c0018c09:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018c0d:	09 ee                	or     esi,ebp
c0018c0f:	c1 e6 04             	shl    esi,0x4
c0018c12:	89 f5                	mov    ebp,esi
c0018c14:	d4 40                	aam    0x40
c0018c16:	d5 39                	aad    0x39
c0018c18:	83 e8 30             	sub    eax,0x30
c0018c1b:	0f b6 f0             	movzx  esi,al
c0018c1e:	09 ee                	or     esi,ebp
c0018c20:	83 c7 10             	add    edi,0x10
c0018c23:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c27:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c2a:	3c 0a                	cmp    al,0xa
c0018c2c:	74 09                	je     c0018c37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c2e:	45                   	inc    ebp
c0018c2f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c32:	75 16                	jne    c0018c4a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c37:	3c 0a                	cmp    al,0xa
c0018c39:	0f 94 c0             	sete   al
c0018c3c:	0f b6 c0             	movzx  eax,al
c0018c3f:	01 c7                	add    edi,eax
c0018c41:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c46:	75 0c                	jne    c0018c54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c48:	eb 15                	jmp    c0018c5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c4a:	47                   	inc    edi
c0018c4b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c4e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c52:	eb d3                	jmp    c0018c27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c54:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c59:	0f 85 e8 fe ff ff    	jne    c0018b47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c5f:	80 f9 44             	cmp    cl,0x44
c0018c62:	74 0b                	je     c0018c6f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c64:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c69:	0f 85 d8 fe ff ff    	jne    c0018b47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c6f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c73:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c77:	c1 e1 04             	shl    ecx,0x4
c0018c7a:	83 e8 30             	sub    eax,0x30
c0018c7d:	09 c8                	or     eax,ecx
c0018c7f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c83:	0f 85 be fe ff ff    	jne    c0018b47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c89:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c8d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c91:	c1 e1 04             	shl    ecx,0x4
c0018c94:	83 e8 30             	sub    eax,0x30
c0018c97:	09 c8                	or     eax,ecx
c0018c99:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c9d:	0f 85 a4 fe ff ff    	jne    c0018b47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ca3:	50                   	push   eax
c0018ca4:	50                   	push   eax
c0018ca5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ca9:	50                   	push   eax
c0018caa:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018cb1:	e8 6a 79 fe ff       	call   c0000620 <strcpy>
c0018cb6:	83 c4 10             	add    esp,0x10
c0018cb9:	eb 15                	jmp    c0018cd0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018cbb:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cc2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018ccd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018cd0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018cdd:	5b                   	pop    ebx
c0018cde:	5e                   	pop    esi
c0018cdf:	5f                   	pop    edi
c0018ce0:	5d                   	pop    ebp
c0018ce1:	c3                   	ret    

c0018ce2 <PCI::checkBus(unsigned char)>:
c0018ce2:	56                   	push   esi
c0018ce3:	53                   	push   ebx
c0018ce4:	31 f6                	xor    esi,esi
c0018ce6:	51                   	push   ecx
c0018ce7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018ceb:	0f b6 c3             	movzx  eax,bl
c0018cee:	52                   	push   edx
c0018cef:	56                   	push   esi
c0018cf0:	46                   	inc    esi
c0018cf1:	50                   	push   eax
c0018cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cf6:	e8 f3 02 00 00       	call   c0018fee <PCI::checkDevice(unsigned char, unsigned char)>
c0018cfb:	83 c4 10             	add    esp,0x10
c0018cfe:	83 fe 20             	cmp    esi,0x20
c0018d01:	75 e8                	jne    c0018ceb <PCI::checkBus(unsigned char)+0x9>
c0018d03:	58                   	pop    eax
c0018d04:	5b                   	pop    ebx
c0018d05:	5e                   	pop    esi
c0018d06:	c3                   	ret    
c0018d07:	90                   	nop

c0018d08 <PCI::foundDevice(PCIDeviceInfo)>:
c0018d08:	55                   	push   ebp
c0018d09:	57                   	push   edi
c0018d0a:	56                   	push   esi
c0018d0b:	53                   	push   ebx
c0018d0c:	83 ec 1c             	sub    esp,0x1c
c0018d0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d13:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d19:	0f 84 52 01 00 00    	je     c0018e71 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d1f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d23:	66 81 f9 06 04       	cmp    cx,0x406
c0018d28:	75 2c                	jne    c0018d56 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d2a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d2f:	50                   	push   eax
c0018d30:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d35:	50                   	push   eax
c0018d36:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d3b:	50                   	push   eax
c0018d3c:	56                   	push   esi
c0018d3d:	e8 b2 fb ff ff       	call   c00188f4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d42:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d46:	0f b6 c0             	movzx  eax,al
c0018d49:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d4d:	83 c4 2c             	add    esp,0x2c
c0018d50:	5b                   	pop    ebx
c0018d51:	5e                   	pop    esi
c0018d52:	5f                   	pop    edi
c0018d53:	5d                   	pop    ebp
c0018d54:	eb 8c                	jmp    c0018ce2 <PCI::checkBus(unsigned char)>
c0018d56:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d5a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d68:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d6c:	88 d3                	mov    bl,dl
c0018d6e:	85 c0                	test   eax,eax
c0018d70:	74 33                	je     c0018da5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d72:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d75:	85 d2                	test   edx,edx
c0018d77:	74 28                	je     c0018da1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d79:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d7f:	31 ef                	xor    edi,ebp
c0018d81:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d87:	75 18                	jne    c0018da1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d89:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d8d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d93:	75 0c                	jne    c0018da1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d95:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d9b:	0f 84 d0 00 00 00    	je     c0018e71 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018da3:	eb c9                	jmp    c0018d6e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018da5:	66 81 f9 01 06       	cmp    cx,0x601
c0018daa:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018dae:	75 19                	jne    c0018dc9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018db0:	83 ec 0c             	sub    esp,0xc
c0018db3:	68 64 01 00 00       	push   0x164
c0018db8:	e8 c8 f0 fe ff       	call   c0007e85 <malloc>
c0018dbd:	89 c5                	mov    ebp,eax
c0018dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dc2:	e8 47 0e 00 00       	call   c0019c0e <SATABus::SATABus()>
c0018dc7:	eb 1e                	jmp    c0018de7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018dc9:	66 81 f9 01 01       	cmp    cx,0x101
c0018dce:	75 60                	jne    c0018e30 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018dd0:	83 ec 0c             	sub    esp,0xc
c0018dd3:	68 70 02 00 00       	push   0x270
c0018dd8:	e8 a8 f0 fe ff       	call   c0007e85 <malloc>
c0018ddd:	89 c5                	mov    ebp,eax
c0018ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0018de2:	e8 cb 02 00 00       	call   c00190b2 <IDE::IDE()>
c0018de7:	58                   	pop    eax
c0018de8:	5a                   	pop    edx
c0018de9:	55                   	push   ebp
c0018dea:	56                   	push   esi
c0018deb:	e8 6c 31 ff ff       	call   c000bf5c <Device::addChild(Device*)>
c0018df0:	83 ec 1c             	sub    esp,0x1c
c0018df3:	b9 09 00 00 00       	mov    ecx,0x9
c0018df8:	fc                   	cld    
c0018df9:	89 e7                	mov    edi,esp
c0018dfb:	89 de                	mov    esi,ebx
c0018dfd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018dff:	55                   	push   ebp
c0018e00:	e8 9d 30 ff ff       	call   c000bea2 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018e08:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018e0c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018e14:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e1c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e27:	83 c4 4c             	add    esp,0x4c
c0018e2a:	5b                   	pop    ebx
c0018e2b:	5e                   	pop    esi
c0018e2c:	5f                   	pop    edi
c0018e2d:	5d                   	pop    ebp
c0018e2e:	ff e0                	jmp    eax
c0018e30:	83 ec 0c             	sub    esp,0xc
c0018e33:	68 58 01 00 00       	push   0x158
c0018e38:	e8 48 f0 fe ff       	call   c0007e85 <malloc>
c0018e3d:	89 c5                	mov    ebp,eax
c0018e3f:	58                   	pop    eax
c0018e40:	5a                   	pop    edx
c0018e41:	68 62 f2 01 c0       	push   0xc001f262
c0018e46:	55                   	push   ebp
c0018e47:	e8 ae 33 ff ff       	call   c000c1fa <DriverlessDevice::DriverlessDevice(char const*)>
c0018e4c:	59                   	pop    ecx
c0018e4d:	5f                   	pop    edi
c0018e4e:	55                   	push   ebp
c0018e4f:	56                   	push   esi
c0018e50:	e8 07 31 ff ff       	call   c000bf5c <Device::addChild(Device*)>
c0018e55:	b9 09 00 00 00       	mov    ecx,0x9
c0018e5a:	fc                   	cld    
c0018e5b:	89 df                	mov    edi,ebx
c0018e5d:	89 de                	mov    esi,ebx
c0018e5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e61:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e65:	83 c4 2c             	add    esp,0x2c
c0018e68:	5b                   	pop    ebx
c0018e69:	5e                   	pop    esi
c0018e6a:	5f                   	pop    edi
c0018e6b:	5d                   	pop    ebp
c0018e6c:	e9 31 30 ff ff       	jmp    c000bea2 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e71:	83 c4 1c             	add    esp,0x1c
c0018e74:	5b                   	pop    ebx
c0018e75:	5e                   	pop    esi
c0018e76:	5f                   	pop    edi
c0018e77:	5d                   	pop    ebp
c0018e78:	c3                   	ret    
c0018e79:	90                   	nop

c0018e7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e7a:	55                   	push   ebp
c0018e7b:	57                   	push   edi
c0018e7c:	56                   	push   esi
c0018e7d:	53                   	push   ebx
c0018e7e:	83 ec 68             	sub    esp,0x68
c0018e81:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e85:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e90:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e97:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ea0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018ea7:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018eac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018eb0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018eb5:	6a 0c                	push   0xc
c0018eb7:	57                   	push   edi
c0018eb8:	53                   	push   ebx
c0018eb9:	56                   	push   esi
c0018eba:	55                   	push   ebp
c0018ebb:	e8 86 f8 ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ec0:	83 c4 20             	add    esp,0x20
c0018ec3:	57                   	push   edi
c0018ec4:	53                   	push   ebx
c0018ec5:	56                   	push   esi
c0018ec6:	55                   	push   ebp
c0018ec7:	e8 6e f9 ff ff       	call   c001883a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018ecc:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ed1:	57                   	push   edi
c0018ed2:	53                   	push   ebx
c0018ed3:	56                   	push   esi
c0018ed4:	55                   	push   ebp
c0018ed5:	e8 f6 f9 ff ff       	call   c00188d0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018eda:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018ede:	83 c4 14             	add    esp,0x14
c0018ee1:	6a 3c                	push   0x3c
c0018ee3:	57                   	push   edi
c0018ee4:	53                   	push   ebx
c0018ee5:	56                   	push   esi
c0018ee6:	55                   	push   ebp
c0018ee7:	e8 5a f8 ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018eec:	0f b6 c4             	movzx  eax,ah
c0018eef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018ef3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018ef7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018efb:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0018f00:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018f06:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018f0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018f10:	83 c4 20             	add    esp,0x20
c0018f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f18:	74 30                	je     c0018f4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f1a:	31 c0                	xor    eax,eax
c0018f1c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f20:	7e 28                	jle    c0018f4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f22:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f2a:	39 cb                	cmp    ebx,ecx
c0018f2c:	75 19                	jne    c0018f47 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f2e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f36:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f3a:	75 0b                	jne    c0018f47 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f3c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f43:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f47:	40                   	inc    eax
c0018f48:	eb d2                	jmp    c0018f1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f4a:	31 d2                	xor    edx,edx
c0018f4c:	83 ec 0c             	sub    esp,0xc
c0018f4f:	57                   	push   edi
c0018f50:	53                   	push   ebx
c0018f51:	56                   	push   esi
c0018f52:	52                   	push   edx
c0018f53:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f57:	55                   	push   ebp
c0018f58:	e8 bf f9 ff ff       	call   c001891c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f61:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f65:	42                   	inc    edx
c0018f66:	83 c4 20             	add    esp,0x20
c0018f69:	83 fa 06             	cmp    edx,0x6
c0018f6c:	75 de                	jne    c0018f4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f6e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f73:	83 ec 0c             	sub    esp,0xc
c0018f76:	86 e0                	xchg   al,ah
c0018f78:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f7d:	6a 02                	push   0x2
c0018f7f:	57                   	push   edi
c0018f80:	53                   	push   ebx
c0018f81:	56                   	push   esi
c0018f82:	55                   	push   ebp
c0018f83:	e8 be f7 ff ff       	call   c0018746 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f88:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f8d:	83 c4 20             	add    esp,0x20
c0018f90:	57                   	push   edi
c0018f91:	53                   	push   ebx
c0018f92:	56                   	push   esi
c0018f93:	55                   	push   ebp
c0018f94:	e8 eb f8 ff ff       	call   c0018884 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f99:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f9d:	57                   	push   edi
c0018f9e:	53                   	push   ebx
c0018f9f:	56                   	push   esi
c0018fa0:	55                   	push   ebp
c0018fa1:	e8 48 f8 ff ff       	call   c00187ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fa6:	b9 09 00 00 00       	mov    ecx,0x9
c0018fab:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018fb0:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018fb4:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018fb8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018fbc:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018fc0:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018fc4:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018fc8:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018fcc:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018fd0:	83 ec 0c             	sub    esp,0xc
c0018fd3:	fc                   	cld    
c0018fd4:	89 e7                	mov    edi,esp
c0018fd6:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018fda:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018fdc:	55                   	push   ebp
c0018fdd:	e8 26 fd ff ff       	call   c0018d08 <PCI::foundDevice(PCIDeviceInfo)>
c0018fe2:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018fe8:	5b                   	pop    ebx
c0018fe9:	5e                   	pop    esi
c0018fea:	5f                   	pop    edi
c0018feb:	5d                   	pop    ebp
c0018fec:	c3                   	ret    
c0018fed:	90                   	nop

c0018fee <PCI::checkDevice(unsigned char, unsigned char)>:
c0018fee:	55                   	push   ebp
c0018fef:	57                   	push   edi
c0018ff0:	56                   	push   esi
c0018ff1:	53                   	push   ebx
c0018ff2:	83 ec 0c             	sub    esp,0xc
c0018ff5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ff9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018ffe:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019003:	6a 00                	push   0x0
c0019005:	56                   	push   esi
c0019006:	57                   	push   edi
c0019007:	55                   	push   ebp
c0019008:	e8 e1 f7 ff ff       	call   c00187ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001900d:	6a 00                	push   0x0
c001900f:	56                   	push   esi
c0019010:	57                   	push   edi
c0019011:	55                   	push   ebp
c0019012:	e8 63 fe ff ff       	call   c0018e7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019017:	83 c4 20             	add    esp,0x20
c001901a:	6a 00                	push   0x0
c001901c:	56                   	push   esi
c001901d:	57                   	push   edi
c001901e:	55                   	push   ebp
c001901f:	e8 ee f7 ff ff       	call   c0018812 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019024:	83 c4 10             	add    esp,0x10
c0019027:	84 c0                	test   al,al
c0019029:	79 27                	jns    c0019052 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001902b:	bb 01 00 00 00       	mov    ebx,0x1
c0019030:	53                   	push   ebx
c0019031:	56                   	push   esi
c0019032:	57                   	push   edi
c0019033:	55                   	push   ebp
c0019034:	e8 b5 f7 ff ff       	call   c00187ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019039:	83 c4 10             	add    esp,0x10
c001903c:	66 40                	inc    ax
c001903e:	74 0c                	je     c001904c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019040:	53                   	push   ebx
c0019041:	56                   	push   esi
c0019042:	57                   	push   edi
c0019043:	55                   	push   ebp
c0019044:	e8 31 fe ff ff       	call   c0018e7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019049:	83 c4 10             	add    esp,0x10
c001904c:	43                   	inc    ebx
c001904d:	83 fb 08             	cmp    ebx,0x8
c0019050:	75 de                	jne    c0019030 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019052:	83 c4 0c             	add    esp,0xc
c0019055:	5b                   	pop    ebx
c0019056:	5e                   	pop    esi
c0019057:	5f                   	pop    edi
c0019058:	5d                   	pop    ebp
c0019059:	c3                   	ret    

c001905a <PCI::detect()>:
c001905a:	56                   	push   esi
c001905b:	53                   	push   ebx
c001905c:	53                   	push   ebx
c001905d:	31 db                	xor    ebx,ebx
c001905f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019063:	6a 00                	push   0x0
c0019065:	6a 00                	push   0x0
c0019067:	6a 00                	push   0x0
c0019069:	56                   	push   esi
c001906a:	e8 a3 f7 ff ff       	call   c0018812 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001906f:	83 c4 10             	add    esp,0x10
c0019072:	a8 80                	test   al,0x80
c0019074:	75 21                	jne    c0019097 <PCI::detect()+0x3d>
c0019076:	51                   	push   ecx
c0019077:	51                   	push   ecx
c0019078:	6a 00                	push   0x0
c001907a:	56                   	push   esi
c001907b:	e8 62 fc ff ff       	call   c0018ce2 <PCI::checkBus(unsigned char)>
c0019080:	83 c4 10             	add    esp,0x10
c0019083:	eb 24                	jmp    c00190a9 <PCI::detect()+0x4f>
c0019085:	52                   	push   edx
c0019086:	52                   	push   edx
c0019087:	53                   	push   ebx
c0019088:	43                   	inc    ebx
c0019089:	56                   	push   esi
c001908a:	e8 53 fc ff ff       	call   c0018ce2 <PCI::checkBus(unsigned char)>
c001908f:	83 c4 10             	add    esp,0x10
c0019092:	83 fb 08             	cmp    ebx,0x8
c0019095:	74 12                	je     c00190a9 <PCI::detect()+0x4f>
c0019097:	53                   	push   ebx
c0019098:	6a 00                	push   0x0
c001909a:	6a 00                	push   0x0
c001909c:	56                   	push   esi
c001909d:	e8 4c f7 ff ff       	call   c00187ee <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00190a2:	83 c4 10             	add    esp,0x10
c00190a5:	66 40                	inc    ax
c00190a7:	74 dc                	je     c0019085 <PCI::detect()+0x2b>
c00190a9:	58                   	pop    eax
c00190aa:	5b                   	pop    ebx
c00190ab:	5e                   	pop    esi
c00190ac:	c3                   	ret    
c00190ad:	90                   	nop

c00190ae <IDE::close(int, int, void*)>:
c00190ae:	83 c8 ff             	or     eax,0xffffffff
c00190b1:	c3                   	ret    

c00190b2 <IDE::IDE()>:
c00190b2:	83 ec 0c             	sub    esp,0xc
c00190b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190b9:	83 ec 08             	sub    esp,0x8
c00190bc:	68 a8 f2 01 c0       	push   0xc001f2a8
c00190c1:	50                   	push   eax
c00190c2:	e8 d9 31 ff ff       	call   c000c2a0 <HardDiskController::HardDiskController(char const*)>
c00190c7:	83 c4 10             	add    esp,0x10
c00190ca:	ba 38 f3 01 c0       	mov    edx,0xc001f338
c00190cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d3:	89 10                	mov    DWORD PTR [eax],edx
c00190d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00190e0:	90                   	nop
c00190e1:	83 c4 0c             	add    esp,0xc
c00190e4:	c3                   	ret    
c00190e5:	90                   	nop

c00190e6 <IDE::prepareInterrupt(unsigned char)>:
c00190e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190eb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190ef:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00190f7:	c3                   	ret    

c00190f8 <selectDrive(unsigned char, unsigned char)>:
c00190f8:	c3                   	ret    
c00190f9:	90                   	nop

c00190fa <IDE::getBase(unsigned char)>:
c00190fa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00190ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019103:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001910b:	c3                   	ret    

c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001910c:	55                   	push   ebp
c001910d:	57                   	push   edi
c001910e:	56                   	push   esi
c001910f:	53                   	push   ebx
c0019110:	83 ec 1c             	sub    esp,0x1c
c0019113:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019117:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001911b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001911e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019122:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019126:	80 f9 03             	cmp    cl,0x3
c0019129:	77 51                	ja     c001917c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001912b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001912f:	0f b6 f2             	movzx  esi,dl
c0019132:	0f b6 db             	movzx  ebx,bl
c0019135:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019138:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001913c:	83 ca 80             	or     edx,0xffffff80
c001913f:	0f b6 d2             	movzx  edx,dl
c0019142:	52                   	push   edx
c0019143:	6a 0c                	push   0xc
c0019145:	56                   	push   esi
c0019146:	57                   	push   edi
c0019147:	e8 c0 ff ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001914c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019151:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019155:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019159:	ee                   	out    dx,al
c001915a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001915f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019163:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019167:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001916b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019173:	83 c4 2c             	add    esp,0x2c
c0019176:	5b                   	pop    ebx
c0019177:	5e                   	pop    esi
c0019178:	5f                   	pop    edi
c0019179:	5d                   	pop    ebp
c001917a:	eb 90                	jmp    c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001917c:	80 fb 07             	cmp    bl,0x7
c001917f:	77 12                	ja     c0019193 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019181:	0f b6 d2             	movzx  edx,dl
c0019184:	0f b6 db             	movzx  ebx,bl
c0019187:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001918f:	89 da                	mov    edx,ebx
c0019191:	eb 2f                	jmp    c00191c2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019193:	80 fb 0d             	cmp    bl,0xd
c0019196:	77 13                	ja     c00191ab <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019198:	0f b6 d2             	movzx  edx,dl
c001919b:	0f b6 db             	movzx  ebx,bl
c001919e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00191a5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00191a9:	eb 17                	jmp    c00191c2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191ab:	80 fb 15             	cmp    bl,0x15
c00191ae:	77 13                	ja     c00191c3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00191b0:	0f b6 d2             	movzx  edx,dl
c00191b3:	0f b6 db             	movzx  ebx,bl
c00191b6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191be:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191c2:	ee                   	out    dx,al
c00191c3:	83 c4 1c             	add    esp,0x1c
c00191c6:	5b                   	pop    ebx
c00191c7:	5e                   	pop    esi
c00191c8:	5f                   	pop    edi
c00191c9:	5d                   	pop    ebp
c00191ca:	c3                   	ret    
c00191cb:	90                   	nop

c00191cc <IDE::read(unsigned char, unsigned char)>:
c00191cc:	55                   	push   ebp
c00191cd:	57                   	push   edi
c00191ce:	56                   	push   esi
c00191cf:	53                   	push   ebx
c00191d0:	83 ec 1c             	sub    esp,0x1c
c00191d3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191d7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191db:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191de:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191e2:	3c 03                	cmp    al,0x3
c00191e4:	77 43                	ja     c0019229 <IDE::read(unsigned char, unsigned char)+0x5d>
c00191e6:	0f b6 f2             	movzx  esi,dl
c00191e9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00191ec:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00191f0:	83 c8 80             	or     eax,0xffffff80
c00191f3:	0f b6 c0             	movzx  eax,al
c00191f6:	50                   	push   eax
c00191f7:	6a 0c                	push   0xc
c00191f9:	56                   	push   esi
c00191fa:	57                   	push   edi
c00191fb:	e8 0c ff ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019200:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019205:	0f b6 c3             	movzx  eax,bl
c0019208:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001920c:	ec                   	in     al,dx
c001920d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019211:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0019216:	52                   	push   edx
c0019217:	6a 0c                	push   0xc
c0019219:	56                   	push   esi
c001921a:	57                   	push   edi
c001921b:	e8 ec fe ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019220:	83 c4 20             	add    esp,0x20
c0019223:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019227:	eb 49                	jmp    c0019272 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019229:	80 fb 07             	cmp    bl,0x7
c001922c:	77 12                	ja     c0019240 <IDE::read(unsigned char, unsigned char)+0x74>
c001922e:	0f b6 d2             	movzx  edx,dl
c0019231:	0f b6 c3             	movzx  eax,bl
c0019234:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001923c:	89 c2                	mov    edx,eax
c001923e:	eb 31                	jmp    c0019271 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019240:	80 fb 0d             	cmp    bl,0xd
c0019243:	77 13                	ja     c0019258 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019245:	0f b6 d2             	movzx  edx,dl
c0019248:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001924f:	0f b6 d3             	movzx  edx,bl
c0019252:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019256:	eb 19                	jmp    c0019271 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019258:	31 c0                	xor    eax,eax
c001925a:	80 fb 15             	cmp    bl,0x15
c001925d:	77 13                	ja     c0019272 <IDE::read(unsigned char, unsigned char)+0xa6>
c001925f:	0f b6 d2             	movzx  edx,dl
c0019262:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001926a:	0f b6 d3             	movzx  edx,bl
c001926d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019271:	ec                   	in     al,dx
c0019272:	83 c4 1c             	add    esp,0x1c
c0019275:	5b                   	pop    ebx
c0019276:	5e                   	pop    esi
c0019277:	5f                   	pop    edi
c0019278:	5d                   	pop    ebp
c0019279:	c3                   	ret    

c001927a <IDE::waitInterrupt(unsigned char)>:
c001927a:	57                   	push   edi
c001927b:	56                   	push   esi
c001927c:	31 f6                	xor    esi,esi
c001927e:	53                   	push   ebx
c001927f:	83 ec 10             	sub    esp,0x10
c0019282:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019286:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001928a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001928e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019293:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001929a:	84 db                	test   bl,bl
c001929c:	75 33                	jne    c00192d1 <IDE::waitInterrupt(unsigned char)+0x57>
c001929e:	52                   	push   edx
c001929f:	6a 0c                	push   0xc
c00192a1:	50                   	push   eax
c00192a2:	57                   	push   edi
c00192a3:	e8 24 ff ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c00192a8:	83 c4 10             	add    esp,0x10
c00192ab:	a8 01                	test   al,0x1
c00192ad:	75 2a                	jne    c00192d9 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192af:	f7 c6 04 00 00 00    	test   esi,0x4
c00192b5:	75 12                	jne    c00192c9 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192b7:	83 fe 32             	cmp    esi,0x32
c00192ba:	7e 0d                	jle    c00192c9 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192bc:	83 ec 0c             	sub    esp,0xc
c00192bf:	6a 64                	push   0x64
c00192c1:	e8 7e a9 ff ff       	call   c0013c44 <milliTenthSleep(unsigned int)>
c00192c6:	83 c4 10             	add    esp,0x10
c00192c9:	83 fe 3c             	cmp    esi,0x3c
c00192cc:	74 0b                	je     c00192d9 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192ce:	46                   	inc    esi
c00192cf:	eb bd                	jmp    c001928e <IDE::waitInterrupt(unsigned char)+0x14>
c00192d1:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192d9:	83 c4 10             	add    esp,0x10
c00192dc:	88 d8                	mov    al,bl
c00192de:	5b                   	pop    ebx
c00192df:	5e                   	pop    esi
c00192e0:	5f                   	pop    edi
c00192e1:	c3                   	ret    

c00192e2 <ideChannel0IRQHandler(regs*, void*)>:
c00192e2:	83 ec 10             	sub    esp,0x10
c00192e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192e9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00192f0:	6a 07                	push   0x7
c00192f2:	6a 00                	push   0x0
c00192f4:	50                   	push   eax
c00192f5:	e8 d2 fe ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c00192fa:	83 c4 1c             	add    esp,0x1c
c00192fd:	c3                   	ret    

c00192fe <ideChannel1IRQHandler(regs*, void*)>:
c00192fe:	83 ec 10             	sub    esp,0x10
c0019301:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019305:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001930c:	6a 07                	push   0x7
c001930e:	6a 01                	push   0x1
c0019310:	50                   	push   eax
c0019311:	e8 b6 fe ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019316:	83 c4 1c             	add    esp,0x1c
c0019319:	c3                   	ret    

c001931a <IDE::enableIRQs(unsigned char, bool)>:
c001931a:	57                   	push   edi
c001931b:	56                   	push   esi
c001931c:	be 04 00 00 00       	mov    esi,0x4
c0019321:	53                   	push   ebx
c0019322:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001932b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019330:	0f 94 c0             	sete   al
c0019333:	01 c0                	add    eax,eax
c0019335:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001933c:	0f b6 c0             	movzx  eax,al
c001933f:	50                   	push   eax
c0019340:	6a 0c                	push   0xc
c0019342:	57                   	push   edi
c0019343:	53                   	push   ebx
c0019344:	e8 c3 fd ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	50                   	push   eax
c001934d:	6a 0c                	push   0xc
c001934f:	57                   	push   edi
c0019350:	53                   	push   ebx
c0019351:	e8 76 fe ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019356:	83 c4 10             	add    esp,0x10
c0019359:	4e                   	dec    esi
c001935a:	75 f0                	jne    c001934c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001935c:	5b                   	pop    ebx
c001935d:	5e                   	pop    esi
c001935e:	5f                   	pop    edi
c001935f:	c3                   	ret    

c0019360 <IDE::open(int, int, void*)>:
c0019360:	55                   	push   ebp
c0019361:	57                   	push   edi
c0019362:	56                   	push   esi
c0019363:	53                   	push   ebx
c0019364:	83 ec 1c             	sub    esp,0x1c
c0019367:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001936b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019374:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001937d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019384:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001938b:	0f 85 b0 02 00 00    	jne    c0019641 <IDE::open(int, int, void*)+0x2e1>
c0019391:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019397:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001939b:	83 e0 7f             	and    eax,0x7f
c001939e:	3c 05                	cmp    al,0x5
c00193a0:	74 04                	je     c00193a6 <IDE::open(int, int, void*)+0x46>
c00193a2:	3c 0f                	cmp    al,0xf
c00193a4:	75 32                	jne    c00193d8 <IDE::open(int, int, void*)+0x78>
c00193a6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00193ac:	83 e0 fc             	and    eax,0xfffffffc
c00193af:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00193b6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193bc:	83 e0 fc             	and    eax,0xfffffffc
c00193bf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00193c6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193cc:	83 e0 fc             	and    eax,0xfffffffc
c00193cf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193d6:	eb 14                	jmp    c00193ec <IDE::open(int, int, void*)+0x8c>
c00193d8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00193e2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00193ec:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00193f3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00193fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193fe:	89 c6                	mov    esi,eax
c0019400:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019405:	c1 e6 10             	shl    esi,0x10
c0019408:	89 e8                	mov    eax,ebp
c001940a:	89 fa                	mov    edx,edi
c001940c:	c1 e0 0b             	shl    eax,0xb
c001940f:	09 f0                	or     eax,esi
c0019411:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019418:	c1 e6 08             	shl    esi,0x8
c001941b:	09 c6                	or     esi,eax
c001941d:	89 f0                	mov    eax,esi
c001941f:	0d 08 00 00 80       	or     eax,0x80000008
c0019424:	ef                   	out    dx,eax
c0019425:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001942a:	89 ca                	mov    edx,ecx
c001942c:	ed                   	in     eax,dx
c001942d:	c1 e8 10             	shr    eax,0x10
c0019430:	3d ff ff 00 00       	cmp    eax,0xffff
c0019435:	0f 84 f5 00 00 00    	je     c0019530 <IDE::open(int, int, void*)+0x1d0>
c001943b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019441:	89 fa                	mov    edx,edi
c0019443:	89 f0                	mov    eax,esi
c0019445:	ef                   	out    dx,eax
c0019446:	b0 fe                	mov    al,0xfe
c0019448:	89 ca                	mov    edx,ecx
c001944a:	ee                   	out    dx,al
c001944b:	89 f0                	mov    eax,esi
c001944d:	89 fa                	mov    edx,edi
c001944f:	ef                   	out    dx,eax
c0019450:	89 ca                	mov    edx,ecx
c0019452:	ed                   	in     eax,dx
c0019453:	3c fe                	cmp    al,0xfe
c0019455:	0f 85 a9 00 00 00    	jne    c0019504 <IDE::open(int, int, void*)+0x1a4>
c001945b:	8b 15 d8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209d8
c0019461:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019468:	74 33                	je     c001949d <IDE::open(int, int, void*)+0x13d>
c001946a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019470:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019474:	40                   	inc    eax
c0019475:	83 ec 0c             	sub    esp,0xc
c0019478:	0f b6 c0             	movzx  eax,al
c001947b:	50                   	push   eax
c001947c:	55                   	push   ebp
c001947d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019481:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019487:	51                   	push   ecx
c0019488:	e8 0b 58 ff ff       	call   c000ec98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001948d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019492:	83 c4 1c             	add    esp,0x1c
c0019495:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001949b:	eb 0a                	jmp    c00194a7 <IDE::open(int, int, void*)+0x147>
c001949d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00194a7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00194ae:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00194b5:	c1 e1 10             	shl    ecx,0x10
c00194b8:	c1 e0 08             	shl    eax,0x8
c00194bb:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194c0:	09 c1                	or     ecx,eax
c00194c2:	89 fa                	mov    edx,edi
c00194c4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194cb:	c1 e0 0b             	shl    eax,0xb
c00194ce:	09 c1                	or     ecx,eax
c00194d0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194d6:	89 c8                	mov    eax,ecx
c00194d8:	ef                   	out    dx,eax
c00194d9:	be fc 0c 00 00       	mov    esi,0xcfc
c00194de:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00194e4:	89 f2                	mov    edx,esi
c00194e6:	ee                   	out    dx,al
c00194e7:	89 c8                	mov    eax,ecx
c00194e9:	89 fa                	mov    edx,edi
c00194eb:	ef                   	out    dx,eax
c00194ec:	89 f2                	mov    edx,esi
c00194ee:	ed                   	in     eax,dx
c00194ef:	0f b6 c0             	movzx  eax,al
c00194f2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00194f8:	74 46                	je     c0019540 <IDE::open(int, int, void*)+0x1e0>
c00194fa:	83 ec 0c             	sub    esp,0xc
c00194fd:	68 c0 f2 01 c0       	push   0xc001f2c0
c0019502:	eb 34                	jmp    c0019538 <IDE::open(int, int, void*)+0x1d8>
c0019504:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001950d:	75 17                	jne    c0019526 <IDE::open(int, int, void*)+0x1c6>
c001950f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019514:	74 07                	je     c001951d <IDE::open(int, int, void*)+0x1bd>
c0019516:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001951b:	75 09                	jne    c0019526 <IDE::open(int, int, void*)+0x1c6>
c001951d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019524:	eb 1a                	jmp    c0019540 <IDE::open(int, int, void*)+0x1e0>
c0019526:	83 ec 0c             	sub    esp,0xc
c0019529:	68 c8 f2 01 c0       	push   0xc001f2c8
c001952e:	eb 08                	jmp    c0019538 <IDE::open(int, int, void*)+0x1d8>
c0019530:	83 ec 0c             	sub    esp,0xc
c0019533:	68 f9 f2 01 c0       	push   0xc001f2f9
c0019538:	e8 ae 71 ff ff       	call   c00106eb <KePanic(char const*)>
c001953d:	83 c4 10             	add    esp,0x10
c0019540:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019547:	79 1a                	jns    c0019563 <IDE::open(int, int, void*)+0x203>
c0019549:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001954f:	83 e0 fc             	and    eax,0xfffffffc
c0019552:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019559:	83 c0 08             	add    eax,0x8
c001955c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019563:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019569:	89 c2                	mov    edx,eax
c001956b:	83 e2 0f             	and    edx,0xf
c001956e:	66 83 fa 08          	cmp    dx,0x8
c0019572:	75 0a                	jne    c001957e <IDE::open(int, int, void*)+0x21e>
c0019574:	83 e8 02             	sub    eax,0x2
c0019577:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001957e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019584:	89 c2                	mov    edx,eax
c0019586:	83 e2 0f             	and    edx,0xf
c0019589:	66 83 fa 08          	cmp    dx,0x8
c001958d:	75 0a                	jne    c0019599 <IDE::open(int, int, void*)+0x239>
c001958f:	83 e8 02             	sub    eax,0x2
c0019592:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019599:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195a0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00195a7:	89 d0                	mov    eax,edx
c00195a9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195ac:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195b0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00195b4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00195b7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195bc:	0f b6 c9             	movzx  ecx,cl
c00195bf:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00195c6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195c9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195cd:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195d1:	8d 50 02             	lea    edx,[eax+0x2]
c00195d4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195d9:	0f b6 d2             	movzx  edx,dl
c00195dc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00195e2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195e5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195e9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00195ed:	8d 48 03             	lea    ecx,[eax+0x3]
c00195f0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195f5:	0f b6 c9             	movzx  ecx,cl
c00195f8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00195fe:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019601:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019605:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019609:	8d 50 04             	lea    edx,[eax+0x4]
c001960c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019612:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019617:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001961e:	66 85 f6             	test   si,si
c0019621:	74 5b                	je     c001967e <IDE::open(int, int, void*)+0x31e>
c0019623:	0f b6 d2             	movzx  edx,dl
c0019626:	83 c0 05             	add    eax,0x5
c0019629:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001962c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019630:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019634:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001963a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001963f:	eb 3d                	jmp    c001967e <IDE::open(int, int, void*)+0x31e>
c0019641:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019647:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001964e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019655:	66 05 06 02          	add    ax,0x206
c0019659:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019660:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019667:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001966e:	66 05 06 02          	add    ax,0x206
c0019672:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019679:	e9 e5 fe ff ff       	jmp    c0019563 <IDE::open(int, int, void*)+0x203>
c001967e:	50                   	push   eax
c001967f:	50                   	push   eax
c0019680:	6a 00                	push   0x0
c0019682:	53                   	push   ebx
c0019683:	e8 5e fa ff ff       	call   c00190e6 <IDE::prepareInterrupt(unsigned char)>
c0019688:	5a                   	pop    edx
c0019689:	59                   	pop    ecx
c001968a:	6a 01                	push   0x1
c001968c:	53                   	push   ebx
c001968d:	e8 54 fa ff ff       	call   c00190e6 <IDE::prepareInterrupt(unsigned char)>
c0019692:	83 c4 0c             	add    esp,0xc
c0019695:	6a 00                	push   0x0
c0019697:	6a 00                	push   0x0
c0019699:	53                   	push   ebx
c001969a:	e8 7b fc ff ff       	call   c001931a <IDE::enableIRQs(unsigned char, bool)>
c001969f:	83 c4 0c             	add    esp,0xc
c00196a2:	6a 00                	push   0x0
c00196a4:	6a 01                	push   0x1
c00196a6:	53                   	push   ebx
c00196a7:	e8 6e fc ff ff       	call   c001931a <IDE::enableIRQs(unsigned char, bool)>
c00196ac:	83 c4 10             	add    esp,0x10
c00196af:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00196b6:	74 34                	je     c00196ec <IDE::open(int, int, void*)+0x38c>
c00196b8:	83 ec 0c             	sub    esp,0xc
c00196bb:	53                   	push   ebx
c00196bc:	6a 01                	push   0x1
c00196be:	68 e2 92 01 c0       	push   0xc00192e2
c00196c3:	6a 0e                	push   0xe
c00196c5:	53                   	push   ebx
c00196c6:	e8 3d 28 ff ff       	call   c000bf08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196cb:	83 c4 14             	add    esp,0x14
c00196ce:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196d4:	53                   	push   ebx
c00196d5:	6a 01                	push   0x1
c00196d7:	68 fe 92 01 c0       	push   0xc00192fe
c00196dc:	6a 0f                	push   0xf
c00196de:	53                   	push   ebx
c00196df:	e8 24 28 ff ff       	call   c000bf08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196e4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00196ea:	eb 38                	jmp    c0019724 <IDE::open(int, int, void*)+0x3c4>
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00196f9:	53                   	push   ebx
c00196fa:	6a 00                	push   0x0
c00196fc:	68 e2 92 01 c0       	push   0xc00192e2
c0019701:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019707:	53                   	push   ebx
c0019708:	e8 fb 27 ff ff       	call   c000bf08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001970d:	83 c4 14             	add    esp,0x14
c0019710:	53                   	push   ebx
c0019711:	6a 00                	push   0x0
c0019713:	68 fe 92 01 c0       	push   0xc00192fe
c0019718:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001971e:	53                   	push   ebx
c001971f:	e8 e4 27 ff ff       	call   c000bf08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019726:	83 c4 20             	add    esp,0x20
c0019729:	83 ec 0c             	sub    esp,0xc
c001972c:	53                   	push   ebx
c001972d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019730:	83 c4 0c             	add    esp,0xc
c0019733:	6a 07                	push   0x7
c0019735:	6a 00                	push   0x0
c0019737:	53                   	push   ebx
c0019738:	e8 8f fa ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c001973d:	83 c4 0c             	add    esp,0xc
c0019740:	6a 07                	push   0x7
c0019742:	6a 01                	push   0x1
c0019744:	53                   	push   ebx
c0019745:	e8 82 fa ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c001974a:	83 c4 0c             	add    esp,0xc
c001974d:	6a 01                	push   0x1
c001974f:	6a 00                	push   0x0
c0019751:	53                   	push   ebx
c0019752:	e8 c3 fb ff ff       	call   c001931a <IDE::enableIRQs(unsigned char, bool)>
c0019757:	83 c4 0c             	add    esp,0xc
c001975a:	6a 01                	push   0x1
c001975c:	6a 01                	push   0x1
c001975e:	53                   	push   ebx
c001975f:	e8 b6 fb ff ff       	call   c001931a <IDE::enableIRQs(unsigned char, bool)>
c0019764:	83 c4 2c             	add    esp,0x2c
c0019767:	31 c0                	xor    eax,eax
c0019769:	5b                   	pop    ebx
c001976a:	5e                   	pop    esi
c001976b:	5f                   	pop    edi
c001976c:	5d                   	pop    ebp
c001976d:	c3                   	ret    

c001976e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001976e:	55                   	push   ebp
c001976f:	57                   	push   edi
c0019770:	56                   	push   esi
c0019771:	53                   	push   ebx
c0019772:	83 ec 1c             	sub    esp,0x1c
c0019775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019779:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001977d:	8d 50 f8             	lea    edx,[eax-0x8]
c0019780:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019784:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019788:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001978c:	80 fa 03             	cmp    dl,0x3
c001978f:	77 5d                	ja     c00197ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019791:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019795:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019799:	0f b6 db             	movzx  ebx,bl
c001979c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001979f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00197a3:	83 ca 80             	or     edx,0xffffff80
c00197a6:	0f b6 d2             	movzx  edx,dl
c00197a9:	52                   	push   edx
c00197aa:	6a 0c                	push   0xc
c00197ac:	53                   	push   ebx
c00197ad:	56                   	push   esi
c00197ae:	e8 59 f9 ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197b3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197c0:	0f b6 c0             	movzx  eax,al
c00197c3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00197c7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197c9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197ce:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197d2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197da:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00197e2:	83 c4 2c             	add    esp,0x2c
c00197e5:	5b                   	pop    ebx
c00197e6:	5e                   	pop    esi
c00197e7:	5f                   	pop    edi
c00197e8:	5d                   	pop    ebp
c00197e9:	e9 1e f9 ff ff       	jmp    c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197ee:	3c 07                	cmp    al,0x7
c00197f0:	77 10                	ja     c0019802 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00197f2:	0f b6 db             	movzx  ebx,bl
c00197f5:	0f b6 d0             	movzx  edx,al
c00197f8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019800:	eb 2d                	jmp    c001982f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019802:	3c 0d                	cmp    al,0xd
c0019804:	77 13                	ja     c0019819 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019806:	0f b6 db             	movzx  ebx,bl
c0019809:	0f b6 c0             	movzx  eax,al
c001980c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019813:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019817:	eb 16                	jmp    c001982f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019819:	3c 15                	cmp    al,0x15
c001981b:	77 14                	ja     c0019831 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001981d:	0f b6 db             	movzx  ebx,bl
c0019820:	0f b6 c0             	movzx  eax,al
c0019823:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001982b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001982f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019831:	83 c4 1c             	add    esp,0x1c
c0019834:	5b                   	pop    ebx
c0019835:	5e                   	pop    esi
c0019836:	5f                   	pop    edi
c0019837:	5d                   	pop    ebp
c0019838:	c3                   	ret    
c0019839:	90                   	nop

c001983a <IDE::detect()>:
c001983a:	55                   	push   ebp
c001983b:	57                   	push   edi
c001983c:	56                   	push   esi
c001983d:	53                   	push   ebx
c001983e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019844:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001984b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019852:	0f 85 97 02 00 00    	jne    c0019aef <IDE::detect()+0x2b5>
c0019858:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001985f:	31 f6                	xor    esi,esi
c0019861:	31 ed                	xor    ebp,ebp
c0019863:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001986b:	89 e8                	mov    eax,ebp
c001986d:	c1 e0 06             	shl    eax,0x6
c0019870:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019878:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001987c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019880:	c1 e0 04             	shl    eax,0x4
c0019883:	83 c8 a0             	or     eax,0xffffffa0
c0019886:	0f b6 c0             	movzx  eax,al
c0019889:	50                   	push   eax
c001988a:	6a 06                	push   0x6
c001988c:	56                   	push   esi
c001988d:	53                   	push   ebx
c001988e:	e8 79 f8 ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019893:	83 c4 0c             	add    esp,0xc
c0019896:	6a 0c                	push   0xc
c0019898:	56                   	push   esi
c0019899:	53                   	push   ebx
c001989a:	e8 2d f9 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c001989f:	83 c4 0c             	add    esp,0xc
c00198a2:	6a 0c                	push   0xc
c00198a4:	56                   	push   esi
c00198a5:	53                   	push   ebx
c00198a6:	e8 21 f9 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c00198ab:	83 c4 0c             	add    esp,0xc
c00198ae:	6a 0c                	push   0xc
c00198b0:	56                   	push   esi
c00198b1:	53                   	push   ebx
c00198b2:	e8 15 f9 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c00198b7:	83 c4 0c             	add    esp,0xc
c00198ba:	6a 0c                	push   0xc
c00198bc:	56                   	push   esi
c00198bd:	53                   	push   ebx
c00198be:	e8 09 f9 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c00198c3:	68 ec 00 00 00       	push   0xec
c00198c8:	6a 07                	push   0x7
c00198ca:	56                   	push   esi
c00198cb:	53                   	push   ebx
c00198cc:	e8 3b f8 ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198d1:	83 c4 1c             	add    esp,0x1c
c00198d4:	6a 0c                	push   0xc
c00198d6:	56                   	push   esi
c00198d7:	53                   	push   ebx
c00198d8:	e8 ef f8 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c00198dd:	83 c4 0c             	add    esp,0xc
c00198e0:	6a 0c                	push   0xc
c00198e2:	56                   	push   esi
c00198e3:	53                   	push   ebx
c00198e4:	e8 e3 f8 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c00198e9:	83 c4 0c             	add    esp,0xc
c00198ec:	6a 0c                	push   0xc
c00198ee:	56                   	push   esi
c00198ef:	53                   	push   ebx
c00198f0:	e8 d7 f8 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c00198f5:	83 c4 0c             	add    esp,0xc
c00198f8:	6a 0c                	push   0xc
c00198fa:	56                   	push   esi
c00198fb:	53                   	push   ebx
c00198fc:	e8 cb f8 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019901:	83 c4 0c             	add    esp,0xc
c0019904:	6a 0c                	push   0xc
c0019906:	56                   	push   esi
c0019907:	53                   	push   ebx
c0019908:	e8 bf f8 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c001990d:	83 c4 10             	add    esp,0x10
c0019910:	84 c0                	test   al,al
c0019912:	0f 84 5f 01 00 00    	je     c0019a77 <IDE::detect()+0x23d>
c0019918:	31 ff                	xor    edi,edi
c001991a:	50                   	push   eax
c001991b:	6a 0c                	push   0xc
c001991d:	56                   	push   esi
c001991e:	53                   	push   ebx
c001991f:	e8 a8 f8 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019924:	83 c4 10             	add    esp,0x10
c0019927:	a8 01                	test   al,0x1
c0019929:	0f 85 69 01 00 00    	jne    c0019a98 <IDE::detect()+0x25e>
c001992f:	84 c0                	test   al,al
c0019931:	78 04                	js     c0019937 <IDE::detect()+0xfd>
c0019933:	a8 08                	test   al,0x8
c0019935:	75 23                	jne    c001995a <IDE::detect()+0x120>
c0019937:	47                   	inc    edi
c0019938:	81 ff 17 01 00 00    	cmp    edi,0x117
c001993e:	7e da                	jle    c001991a <IDE::detect()+0xe0>
c0019940:	83 ec 0c             	sub    esp,0xc
c0019943:	6a 32                	push   0x32
c0019945:	e8 fa a2 ff ff       	call   c0013c44 <milliTenthSleep(unsigned int)>
c001994a:	83 c4 10             	add    esp,0x10
c001994d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019953:	75 c5                	jne    c001991a <IDE::detect()+0xe0>
c0019955:	e9 3e 01 00 00       	jmp    c0019a98 <IDE::detect()+0x25e>
c001995a:	31 c9                	xor    ecx,ecx
c001995c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019960:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019964:	83 ec 0c             	sub    esp,0xc
c0019967:	68 80 00 00 00       	push   0x80
c001996c:	57                   	push   edi
c001996d:	6a 00                	push   0x0
c001996f:	56                   	push   esi
c0019970:	53                   	push   ebx
c0019971:	e8 f8 fd ff ff       	call   c001976e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019976:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001997b:	89 e8                	mov    eax,ebp
c001997d:	89 d1                	mov    ecx,edx
c001997f:	c1 e0 06             	shl    eax,0x6
c0019982:	01 d8                	add    eax,ebx
c0019984:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001998b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019992:	89 f2                	mov    edx,esi
c0019994:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001999a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001999e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00199a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199a8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00199af:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00199b7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199be:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00199c6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199cc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199d3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199d9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199dd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00199e1:	83 c4 20             	add    esp,0x20
c00199e4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00199e7:	83 c0 02             	add    eax,0x2
c00199ea:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00199f0:	83 c7 02             	add    edi,0x2
c00199f3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00199f6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00199fc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019a00:	75 e2                	jne    c00199e4 <IDE::detect()+0x1aa>
c0019a02:	89 e8                	mov    eax,ebp
c0019a04:	c1 e0 06             	shl    eax,0x6
c0019a07:	01 d8                	add    eax,ebx
c0019a09:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019a0f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019a16:	66 c1 ea 09          	shr    dx,0x9
c0019a1a:	83 e2 01             	and    edx,0x1
c0019a1d:	84 c9                	test   cl,cl
c0019a1f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a25:	75 22                	jne    c0019a49 <IDE::detect()+0x20f>
c0019a27:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a2e:	74 46                	je     c0019a76 <IDE::detect()+0x23c>
c0019a30:	83 ec 0c             	sub    esp,0xc
c0019a33:	68 7c 01 00 00       	push   0x17c
c0019a38:	e8 48 e4 fe ff       	call   c0007e85 <malloc>
c0019a3d:	89 c7                	mov    edi,eax
c0019a3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a42:	e8 11 05 00 00       	call   c0019f58 <ATA::ATA()>
c0019a47:	eb 17                	jmp    c0019a60 <IDE::detect()+0x226>
c0019a49:	83 ec 0c             	sub    esp,0xc
c0019a4c:	68 84 01 00 00       	push   0x184
c0019a51:	e8 2f e4 fe ff       	call   c0007e85 <malloc>
c0019a56:	89 c7                	mov    edi,eax
c0019a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a5b:	e8 f0 0a 00 00       	call   c001a550 <ATAPI::ATAPI()>
c0019a60:	5a                   	pop    edx
c0019a61:	59                   	pop    ecx
c0019a62:	57                   	push   edi
c0019a63:	53                   	push   ebx
c0019a64:	e8 f3 24 ff ff       	call   c000bf5c <Device::addChild(Device*)>
c0019a69:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a6b:	53                   	push   ebx
c0019a6c:	55                   	push   ebp
c0019a6d:	6a 00                	push   0x0
c0019a6f:	57                   	push   edi
c0019a70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a73:	83 c4 20             	add    esp,0x20
c0019a76:	45                   	inc    ebp
c0019a77:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a7c:	74 0d                	je     c0019a8b <IDE::detect()+0x251>
c0019a7e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a86:	e9 e0 fd ff ff       	jmp    c001986b <IDE::detect()+0x31>
c0019a8b:	4e                   	dec    esi
c0019a8c:	74 61                	je     c0019aef <IDE::detect()+0x2b5>
c0019a8e:	be 01 00 00 00       	mov    esi,0x1
c0019a93:	e9 cb fd ff ff       	jmp    c0019863 <IDE::detect()+0x29>
c0019a98:	50                   	push   eax
c0019a99:	6a 04                	push   0x4
c0019a9b:	56                   	push   esi
c0019a9c:	53                   	push   ebx
c0019a9d:	e8 2a f7 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019aa2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019aa6:	83 c4 0c             	add    esp,0xc
c0019aa9:	6a 05                	push   0x5
c0019aab:	56                   	push   esi
c0019aac:	53                   	push   ebx
c0019aad:	e8 1a f7 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019ab2:	83 c4 10             	add    esp,0x10
c0019ab5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019ab9:	80 fa 14             	cmp    dl,0x14
c0019abc:	75 04                	jne    c0019ac2 <IDE::detect()+0x288>
c0019abe:	3c eb                	cmp    al,0xeb
c0019ac0:	eb 07                	jmp    c0019ac9 <IDE::detect()+0x28f>
c0019ac2:	3c 96                	cmp    al,0x96
c0019ac4:	75 b1                	jne    c0019a77 <IDE::detect()+0x23d>
c0019ac6:	80 fa 69             	cmp    dl,0x69
c0019ac9:	75 ac                	jne    c0019a77 <IDE::detect()+0x23d>
c0019acb:	68 a1 00 00 00       	push   0xa1
c0019ad0:	6a 07                	push   0x7
c0019ad2:	56                   	push   esi
c0019ad3:	53                   	push   ebx
c0019ad4:	e8 33 f6 ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ad9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019ae0:	e8 5f a1 ff ff       	call   c0013c44 <milliTenthSleep(unsigned int)>
c0019ae5:	83 c4 10             	add    esp,0x10
c0019ae8:	b1 01                	mov    cl,0x1
c0019aea:	e9 6d fe ff ff       	jmp    c001995c <IDE::detect()+0x122>
c0019aef:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019af5:	5b                   	pop    ebx
c0019af6:	5e                   	pop    esi
c0019af7:	5f                   	pop    edi
c0019af8:	5d                   	pop    ebp
c0019af9:	c3                   	ret    

c0019afa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019afa:	55                   	push   ebp
c0019afb:	57                   	push   edi
c0019afc:	56                   	push   esi
c0019afd:	53                   	push   ebx
c0019afe:	83 ec 1c             	sub    esp,0x1c
c0019b01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b05:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b09:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019b0d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019b11:	88 c3                	mov    bl,al
c0019b13:	84 c0                	test   al,al
c0019b15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b19:	0f 84 81 00 00 00    	je     c0019ba0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b1f:	83 ec 0c             	sub    esp,0xc
c0019b22:	68 23 f3 01 c0       	push   0xc001f323
c0019b27:	e8 f0 0f ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c0019b2c:	83 c4 10             	add    esp,0x10
c0019b2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b33:	3c 01                	cmp    al,0x1
c0019b35:	74 63                	je     c0019b9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b37:	3c 02                	cmp    al,0x2
c0019b39:	75 53                	jne    c0019b8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b3b:	01 f6                	add    esi,esi
c0019b3d:	09 ee                	or     esi,ebp
c0019b3f:	50                   	push   eax
c0019b40:	89 f0                	mov    eax,esi
c0019b42:	6a 01                	push   0x1
c0019b44:	0f b6 f0             	movzx  esi,al
c0019b47:	c1 e6 06             	shl    esi,0x6
c0019b4a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b52:	50                   	push   eax
c0019b53:	57                   	push   edi
c0019b54:	e8 73 f6 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019b59:	83 c4 10             	add    esp,0x10
c0019b5c:	a8 01                	test   al,0x1
c0019b5e:	74 02                	je     c0019b62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b60:	b3 07                	mov    bl,0x7
c0019b62:	a8 02                	test   al,0x2
c0019b64:	74 02                	je     c0019b68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b66:	b3 03                	mov    bl,0x3
c0019b68:	a8 04                	test   al,0x4
c0019b6a:	74 02                	je     c0019b6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b6c:	b3 14                	mov    bl,0x14
c0019b6e:	a8 08                	test   al,0x8
c0019b70:	74 02                	je     c0019b74 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b72:	b3 03                	mov    bl,0x3
c0019b74:	a8 10                	test   al,0x10
c0019b76:	74 02                	je     c0019b7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b78:	b3 15                	mov    bl,0x15
c0019b7a:	a8 20                	test   al,0x20
c0019b7c:	74 02                	je     c0019b80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b7e:	b3 03                	mov    bl,0x3
c0019b80:	a8 40                	test   al,0x40
c0019b82:	74 02                	je     c0019b86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b84:	b3 16                	mov    bl,0x16
c0019b86:	84 c0                	test   al,al
c0019b88:	79 16                	jns    c0019ba0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b8a:	b3 0d                	mov    bl,0xd
c0019b8c:	eb 12                	jmp    c0019ba0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b8e:	3c 03                	cmp    al,0x3
c0019b90:	74 0c                	je     c0019b9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b92:	3c 04                	cmp    al,0x4
c0019b94:	75 0a                	jne    c0019ba0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b96:	b3 08                	mov    bl,0x8
c0019b98:	eb 06                	jmp    c0019ba0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b9a:	b3 13                	mov    bl,0x13
c0019b9c:	eb 02                	jmp    c0019ba0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b9e:	b3 17                	mov    bl,0x17
c0019ba0:	83 c4 1c             	add    esp,0x1c
c0019ba3:	88 d8                	mov    al,bl
c0019ba5:	5b                   	pop    ebx
c0019ba6:	5e                   	pop    esi
c0019ba7:	5f                   	pop    edi
c0019ba8:	5d                   	pop    ebp
c0019ba9:	c3                   	ret    

c0019baa <IDE::polling(unsigned char, unsigned int)>:
c0019baa:	55                   	push   ebp
c0019bab:	bd 04 00 00 00       	mov    ebp,0x4
c0019bb0:	57                   	push   edi
c0019bb1:	56                   	push   esi
c0019bb2:	53                   	push   ebx
c0019bb3:	83 ec 0c             	sub    esp,0xc
c0019bb6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bba:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019bbe:	0f b6 f3             	movzx  esi,bl
c0019bc1:	52                   	push   edx
c0019bc2:	6a 0c                	push   0xc
c0019bc4:	56                   	push   esi
c0019bc5:	57                   	push   edi
c0019bc6:	e8 01 f6 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019bcb:	83 c4 10             	add    esp,0x10
c0019bce:	4d                   	dec    ebp
c0019bcf:	75 ed                	jne    c0019bbe <IDE::polling(unsigned char, unsigned int)+0x14>
c0019bd1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019bd6:	50                   	push   eax
c0019bd7:	6a 0c                	push   0xc
c0019bd9:	56                   	push   esi
c0019bda:	57                   	push   edi
c0019bdb:	e8 ec f5 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	a8 01                	test   al,0x1
c0019be5:	75 17                	jne    c0019bfe <IDE::polling(unsigned char, unsigned int)+0x54>
c0019be7:	a8 20                	test   al,0x20
c0019be9:	75 0f                	jne    c0019bfa <IDE::polling(unsigned char, unsigned int)+0x50>
c0019beb:	4b                   	dec    ebx
c0019bec:	74 10                	je     c0019bfe <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bee:	84 c0                	test   al,al
c0019bf0:	78 e4                	js     c0019bd6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bf2:	a8 08                	test   al,0x8
c0019bf4:	74 e0                	je     c0019bd6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bf6:	31 c0                	xor    eax,eax
c0019bf8:	eb 06                	jmp    c0019c00 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bfa:	b0 01                	mov    al,0x1
c0019bfc:	eb 02                	jmp    c0019c00 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bfe:	b0 02                	mov    al,0x2
c0019c00:	83 c4 0c             	add    esp,0xc
c0019c03:	5b                   	pop    ebx
c0019c04:	5e                   	pop    esi
c0019c05:	5f                   	pop    edi
c0019c06:	5d                   	pop    ebp
c0019c07:	c3                   	ret    

c0019c08 <SATABus::close(int, int, void*)>:
c0019c08:	31 c0                	xor    eax,eax
c0019c0a:	c3                   	ret    
c0019c0b:	90                   	nop

c0019c0c <SATABus::detect()>:
c0019c0c:	c3                   	ret    
c0019c0d:	90                   	nop

c0019c0e <SATABus::SATABus()>:
c0019c0e:	83 ec 0c             	sub    esp,0xc
c0019c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c15:	83 ec 08             	sub    esp,0x8
c0019c18:	68 5c f3 01 c0       	push   0xc001f35c
c0019c1d:	50                   	push   eax
c0019c1e:	e8 7d 26 ff ff       	call   c000c2a0 <HardDiskController::HardDiskController(char const*)>
c0019c23:	83 c4 10             	add    esp,0x10
c0019c26:	ba 88 f3 01 c0       	mov    edx,0xc001f388
c0019c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c2f:	89 10                	mov    DWORD PTR [eax],edx
c0019c31:	83 ec 0c             	sub    esp,0xc
c0019c34:	6a 50                	push   0x50
c0019c36:	e8 e0 e5 fe ff       	call   c000821b <Phys::allocateContiguousPages(int)>
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	89 c2                	mov    edx,eax
c0019c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c44:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c4a:	83 ec 0c             	sub    esp,0xc
c0019c4d:	6a 50                	push   0x50
c0019c4f:	e8 75 fc fe ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c0019c54:	83 c4 10             	add    esp,0x10
c0019c57:	89 c2                	mov    edx,eax
c0019c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c5d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c63:	a1 d0 0a 02 c0       	mov    eax,ds:0xc0020ad0
c0019c68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c6c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c76:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c7c:	83 ec 0c             	sub    esp,0xc
c0019c7f:	6a 03                	push   0x3
c0019c81:	6a 50                	push   0x50
c0019c83:	51                   	push   ecx
c0019c84:	52                   	push   edx
c0019c85:	50                   	push   eax
c0019c86:	e8 cd 05 ff ff       	call   c000a258 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c8b:	83 c4 20             	add    esp,0x20
c0019c8e:	90                   	nop
c0019c8f:	83 c4 0c             	add    esp,0xc
c0019c92:	c3                   	ret    
c0019c93:	90                   	nop

c0019c94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c98:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c9b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c9e:	09 c2                	or     edx,eax
c0019ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019caa:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019cac:	31 c0                	xor    eax,eax
c0019cae:	c1 e9 08             	shr    ecx,0x8
c0019cb1:	83 e1 0f             	and    ecx,0xf
c0019cb4:	39 c8                	cmp    eax,ecx
c0019cb6:	74 0a                	je     c0019cc2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019cb8:	f6 c2 01             	test   dl,0x1
c0019cbb:	74 08                	je     c0019cc5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019cbd:	d1 ea                	shr    edx,1
c0019cbf:	40                   	inc    eax
c0019cc0:	eb f2                	jmp    c0019cb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019cc2:	83 c8 ff             	or     eax,0xffffffff
c0019cc5:	c3                   	ret    

c0019cc6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019cc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019cca:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019ccd:	89 c2                	mov    edx,eax
c0019ccf:	c1 ea 08             	shr    edx,0x8
c0019cd2:	83 e2 0f             	and    edx,0xf
c0019cd5:	fe ca                	dec    dl
c0019cd7:	75 31                	jne    c0019d0a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cd9:	83 e0 0f             	and    eax,0xf
c0019cdc:	3c 03                	cmp    al,0x3
c0019cde:	75 2a                	jne    c0019d0a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ce0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019ce3:	b8 02 00 00 00       	mov    eax,0x2
c0019ce8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019cee:	74 1c                	je     c0019d0c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cf0:	b8 04 00 00 00       	mov    eax,0x4
c0019cf5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019cfb:	74 0f                	je     c0019d0c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cfd:	31 c0                	xor    eax,eax
c0019cff:	83 fa 03             	cmp    edx,0x3
c0019d02:	0f 94 c0             	sete   al
c0019d05:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019d09:	c3                   	ret    
c0019d0a:	31 c0                	xor    eax,eax
c0019d0c:	c3                   	ret    
c0019d0d:	90                   	nop

c0019d0e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d15:	0f ba e2 0f          	bt     edx,0xf
c0019d19:	72 f7                	jb     c0019d12 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d1b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d1e:	83 ca 10             	or     edx,0x10
c0019d21:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d24:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d27:	83 ca 01             	or     edx,0x1
c0019d2a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d2d:	c3                   	ret    

c0019d2e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d35:	83 e2 fe             	and    edx,0xfffffffe
c0019d38:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d3e:	83 e2 ef             	and    edx,0xffffffef
c0019d41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d44:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d47:	0f ba e2 0e          	bt     edx,0xe
c0019d4b:	72 f7                	jb     c0019d44 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d4d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d50:	0f ba e2 0f          	bt     edx,0xf
c0019d54:	72 ee                	jb     c0019d44 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d56:	c3                   	ret    
c0019d57:	90                   	nop

c0019d58 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d58:	55                   	push   ebp
c0019d59:	57                   	push   edi
c0019d5a:	56                   	push   esi
c0019d5b:	53                   	push   ebx
c0019d5c:	83 ec 1c             	sub    esp,0x1c
c0019d5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d67:	53                   	push   ebx
c0019d68:	56                   	push   esi
c0019d69:	e8 c0 ff ff ff       	call   c0019d2e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d6e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d72:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d78:	83 ec 0c             	sub    esp,0xc
c0019d7b:	c1 e5 0a             	shl    ebp,0xa
c0019d7e:	01 e8                	add    eax,ebp
c0019d80:	89 03                	mov    DWORD PTR [ebx],eax
c0019d82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d84:	68 00 04 00 00       	push   0x400
c0019d89:	6a 00                	push   0x0
c0019d8b:	50                   	push   eax
c0019d8c:	e8 5f 67 fe ff       	call   c00004f0 <memset>
c0019d91:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d97:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d9b:	01 e8                	add    eax,ebp
c0019d9d:	83 c4 1c             	add    esp,0x1c
c0019da0:	89 03                	mov    DWORD PTR [ebx],eax
c0019da2:	c1 e2 08             	shl    edx,0x8
c0019da5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019dac:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019db2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019db8:	01 f8                	add    eax,edi
c0019dba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019dbd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019dc0:	68 00 01 00 00       	push   0x100
c0019dc5:	6a 00                	push   0x0
c0019dc7:	50                   	push   eax
c0019dc8:	e8 23 67 fe ff       	call   c00004f0 <memset>
c0019dcd:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019dd3:	01 fa                	add    edx,edi
c0019dd5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019dd9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019ddc:	c1 e7 0d             	shl    edi,0xd
c0019ddf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019de6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019dec:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019df2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019df6:	31 ff                	xor    edi,edi
c0019df8:	83 c4 10             	add    esp,0x10
c0019dfb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019e01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e05:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019e0b:	83 c5 20             	add    ebp,0x20
c0019e0e:	01 f8                	add    eax,edi
c0019e10:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e13:	52                   	push   edx
c0019e14:	68 00 01 00 00       	push   0x100
c0019e19:	6a 00                	push   0x0
c0019e1b:	50                   	push   eax
c0019e1c:	e8 cf 66 fe ff       	call   c00004f0 <memset>
c0019e21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e25:	83 c4 10             	add    esp,0x10
c0019e28:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e2e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e35:	01 f8                	add    eax,edi
c0019e37:	81 c7 00 01 00 00    	add    edi,0x100
c0019e3d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e40:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e46:	75 b3                	jne    c0019dfb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e48:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e4f:	50                   	push   eax
c0019e50:	50                   	push   eax
c0019e51:	53                   	push   ebx
c0019e52:	56                   	push   esi
c0019e53:	e8 b6 fe ff ff       	call   c0019d0e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e58:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e5f:	83 c4 2c             	add    esp,0x2c
c0019e62:	5b                   	pop    ebx
c0019e63:	5e                   	pop    esi
c0019e64:	5f                   	pop    edi
c0019e65:	5d                   	pop    ebp
c0019e66:	c3                   	ret    
c0019e67:	90                   	nop

c0019e68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e68:	55                   	push   ebp
c0019e69:	57                   	push   edi
c0019e6a:	56                   	push   esi
c0019e6b:	53                   	push   ebx
c0019e6c:	31 db                	xor    ebx,ebx
c0019e6e:	83 ec 0c             	sub    esp,0xc
c0019e71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e79:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e7c:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e82:	74 7a                	je     c0019efe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e84:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e88:	89 d8                	mov    eax,ebx
c0019e8a:	c1 e0 07             	shl    eax,0x7
c0019e8d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e94:	55                   	push   ebp
c0019e95:	56                   	push   esi
c0019e96:	e8 2b fe ff ff       	call   c0019cc6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e9b:	5a                   	pop    edx
c0019e9c:	83 f8 01             	cmp    eax,0x1
c0019e9f:	59                   	pop    ecx
c0019ea0:	75 21                	jne    c0019ec3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019ea2:	50                   	push   eax
c0019ea3:	53                   	push   ebx
c0019ea4:	55                   	push   ebp
c0019ea5:	56                   	push   esi
c0019ea6:	e8 ad fe ff ff       	call   c0019d58 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019eab:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019eb2:	e8 ce df fe ff       	call   c0007e85 <malloc>
c0019eb7:	89 c5                	mov    ebp,eax
c0019eb9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ebc:	e8 43 0d 00 00       	call   c001ac04 <SATA::SATA()>
c0019ec1:	eb 24                	jmp    c0019ee7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019ec3:	83 f8 04             	cmp    eax,0x4
c0019ec6:	75 36                	jne    c0019efe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ec8:	51                   	push   ecx
c0019ec9:	53                   	push   ebx
c0019eca:	55                   	push   ebp
c0019ecb:	56                   	push   esi
c0019ecc:	e8 87 fe ff ff       	call   c0019d58 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ed1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019ed8:	e8 a8 df fe ff       	call   c0007e85 <malloc>
c0019edd:	89 c5                	mov    ebp,eax
c0019edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ee2:	e8 79 10 00 00       	call   c001af60 <SATAPI::SATAPI()>
c0019ee7:	58                   	pop    eax
c0019ee8:	5a                   	pop    edx
c0019ee9:	55                   	push   ebp
c0019eea:	56                   	push   esi
c0019eeb:	e8 6c 20 ff ff       	call   c000bf5c <Device::addChild(Device*)>
c0019ef0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ef3:	56                   	push   esi
c0019ef4:	6a 00                	push   0x0
c0019ef6:	53                   	push   ebx
c0019ef7:	55                   	push   ebp
c0019ef8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019efb:	83 c4 20             	add    esp,0x20
c0019efe:	d1 ef                	shr    edi,1
c0019f00:	43                   	inc    ebx
c0019f01:	83 fb 20             	cmp    ebx,0x20
c0019f04:	0f 85 72 ff ff ff    	jne    c0019e7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019f0a:	83 c4 0c             	add    esp,0xc
c0019f0d:	5b                   	pop    ebx
c0019f0e:	5e                   	pop    esi
c0019f0f:	5f                   	pop    edi
c0019f10:	5d                   	pop    ebp
c0019f11:	c3                   	ret    

c0019f12 <SATABus::open(int, int, void*)>:
c0019f12:	83 ec 14             	sub    esp,0x14
c0019f15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f19:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f1f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f25:	52                   	push   edx
c0019f26:	50                   	push   eax
c0019f27:	e8 3c ff ff ff       	call   c0019e68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f2c:	31 c0                	xor    eax,eax
c0019f2e:	83 c4 1c             	add    esp,0x1c
c0019f31:	c3                   	ret    

c0019f32 <ATA::close(int, int, void*)>:
c0019f32:	83 ec 0c             	sub    esp,0xc
c0019f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f3f:	85 c0                	test   eax,eax
c0019f41:	74 0c                	je     c0019f4f <ATA::close(int, int, void*)+0x1d>
c0019f43:	83 ec 0c             	sub    esp,0xc
c0019f46:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f48:	50                   	push   eax
c0019f49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f4c:	83 c4 10             	add    esp,0x10
c0019f4f:	31 c0                	xor    eax,eax
c0019f51:	83 c4 0c             	add    esp,0xc
c0019f54:	c3                   	ret    
c0019f55:	90                   	nop

c0019f56 <ATA::powerSaving(PowerSavingLevel)>:
c0019f56:	c3                   	ret    
c0019f57:	90                   	nop

c0019f58 <ATA::ATA()>:
c0019f58:	83 ec 0c             	sub    esp,0xc
c0019f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f5f:	83 ec 04             	sub    esp,0x4
c0019f62:	68 00 02 00 00       	push   0x200
c0019f67:	68 55 f4 01 c0       	push   0xc001f455
c0019f6c:	50                   	push   eax
c0019f6d:	e8 b8 23 ff ff       	call   c000c32a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f72:	83 c4 10             	add    esp,0x10
c0019f75:	ba c8 f3 01 c0       	mov    edx,0xc001f3c8
c0019f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f7e:	89 10                	mov    DWORD PTR [eax],edx
c0019f80:	90                   	nop
c0019f81:	83 c4 0c             	add    esp,0xc
c0019f84:	c3                   	ret    
c0019f85:	90                   	nop

c0019f86 <ATA::flush(bool)>:
c0019f86:	53                   	push   ebx
c0019f87:	83 ec 08             	sub    esp,0x8
c0019f8a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f93:	19 c0                	sbb    eax,eax
c0019f95:	83 e0 fd             	and    eax,0xfffffffd
c0019f98:	05 ea 00 00 00       	add    eax,0xea
c0019f9d:	50                   	push   eax
c0019f9e:	6a 07                	push   0x7
c0019fa0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fa7:	50                   	push   eax
c0019fa8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fae:	e8 59 f1 ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fb3:	83 c4 0c             	add    esp,0xc
c0019fb6:	6a 00                	push   0x0
c0019fb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fbf:	50                   	push   eax
c0019fc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fc6:	e8 df fb ff ff       	call   c0019baa <IDE::polling(unsigned char, unsigned int)>
c0019fcb:	83 c4 18             	add    esp,0x18
c0019fce:	5b                   	pop    ebx
c0019fcf:	c3                   	ret    

c0019fd0 <ATA::readyForCommand()>:
c0019fd0:	56                   	push   esi
c0019fd1:	53                   	push   ebx
c0019fd2:	53                   	push   ebx
c0019fd3:	31 db                	xor    ebx,ebx
c0019fd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fd9:	51                   	push   ecx
c0019fda:	6a 0c                	push   0xc
c0019fdc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fe3:	50                   	push   eax
c0019fe4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019fea:	e8 dd f1 ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c0019fef:	83 c4 10             	add    esp,0x10
c0019ff2:	a8 88                	test   al,0x88
c0019ff4:	74 1f                	je     c001a015 <ATA::readyForCommand()+0x45>
c0019ff6:	43                   	inc    ebx
c0019ff7:	83 fb 63             	cmp    ebx,0x63
c0019ffa:	7e dd                	jle    c0019fd9 <ATA::readyForCommand()+0x9>
c0019ffc:	83 ec 0c             	sub    esp,0xc
c0019fff:	6a 0a                	push   0xa
c001a001:	e8 3e 9c ff ff       	call   c0013c44 <milliTenthSleep(unsigned int)>
c001a006:	83 c4 10             	add    esp,0x10
c001a009:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a00f:	75 c8                	jne    c0019fd9 <ATA::readyForCommand()+0x9>
c001a011:	31 c0                	xor    eax,eax
c001a013:	eb 02                	jmp    c001a017 <ATA::readyForCommand()+0x47>
c001a015:	b0 01                	mov    al,0x1
c001a017:	5a                   	pop    edx
c001a018:	5b                   	pop    ebx
c001a019:	5e                   	pop    esi
c001a01a:	c3                   	ret    
c001a01b:	90                   	nop

c001a01c <ATA::access(unsigned long long, int, void*, bool)>:
c001a01c:	55                   	push   ebp
c001a01d:	57                   	push   edi
c001a01e:	56                   	push   esi
c001a01f:	53                   	push   ebx
c001a020:	83 ec 2c             	sub    esp,0x2c
c001a023:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a027:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a02b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a02f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a033:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a037:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a03b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a03f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a045:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a049:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a04f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a053:	c1 e0 06             	shl    eax,0x6
c001a056:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a05e:	74 5d                	je     c001a0bd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a060:	89 fa                	mov    edx,edi
c001a062:	89 f0                	mov    eax,esi
c001a064:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a068:	c1 ea 1c             	shr    edx,0x1c
c001a06b:	89 d1                	mov    ecx,edx
c001a06d:	09 c1                	or     ecx,eax
c001a06f:	74 25                	je     c001a096 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a071:	31 ed                	xor    ebp,ebp
c001a073:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a07a:	89 fa                	mov    edx,edi
c001a07c:	89 f0                	mov    eax,esi
c001a07e:	0f ad d0             	shrd   eax,edx,cl
c001a081:	d3 ea                	shr    edx,cl
c001a083:	f6 c1 20             	test   cl,0x20
c001a086:	74 02                	je     c001a08a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a088:	89 d0                	mov    eax,edx
c001a08a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a08e:	45                   	inc    ebp
c001a08f:	83 fd 06             	cmp    ebp,0x6
c001a092:	75 df                	jne    c001a073 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a094:	eb 76                	jmp    c001a10c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a096:	89 f0                	mov    eax,esi
c001a098:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a09d:	89 fa                	mov    edx,edi
c001a09f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0a6:	0f ac d0 10          	shrd   eax,edx,0x10
c001a0aa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a0b3:	c1 ee 18             	shr    esi,0x18
c001a0b6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0bb:	eb 56                	jmp    c001a113 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0bd:	6a 00                	push   0x0
c001a0bf:	6a 3f                	push   0x3f
c001a0c1:	57                   	push   edi
c001a0c2:	56                   	push   esi
c001a0c3:	e8 58 22 00 00       	call   c001c320 <__umoddi3>
c001a0c8:	83 c4 10             	add    esp,0x10
c001a0cb:	40                   	inc    eax
c001a0cc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0d0:	6a 00                	push   0x0
c001a0d2:	68 f0 03 00 00       	push   0x3f0
c001a0d7:	57                   	push   edi
c001a0d8:	56                   	push   esi
c001a0d9:	e8 42 21 00 00       	call   c001c220 <__udivdi3>
c001a0de:	83 c4 10             	add    esp,0x10
c001a0e1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a0e6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0ed:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0f2:	6a 00                	push   0x0
c001a0f4:	6a 3f                	push   0x3f
c001a0f6:	57                   	push   edi
c001a0f7:	56                   	push   esi
c001a0f8:	e8 23 21 00 00       	call   c001c220 <__udivdi3>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	89 c6                	mov    esi,eax
c001a102:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a107:	83 e6 0f             	and    esi,0xf
c001a10a:	eb 07                	jmp    c001a113 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a10c:	31 f6                	xor    esi,esi
c001a10e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a113:	bf 01 00 00 00       	mov    edi,0x1
c001a118:	50                   	push   eax
c001a119:	6a 00                	push   0x0
c001a11b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a122:	50                   	push   eax
c001a123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a127:	e8 ee f1 ff ff       	call   c001931a <IDE::enableIRQs(unsigned char, bool)>
c001a12c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a12f:	e8 9c fe ff ff       	call   c0019fd0 <ATA::readyForCommand()>
c001a134:	83 c4 10             	add    esp,0x10
c001a137:	84 c0                	test   al,al
c001a139:	0f 84 4e 02 00 00    	je     c001a38d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a13f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a145:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a14b:	c1 e0 04             	shl    eax,0x4
c001a14e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a155:	09 c6                	or     esi,eax
c001a157:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a15c:	75 05                	jne    c001a163 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a15e:	83 ce a0             	or     esi,0xffffffa0
c001a161:	eb 03                	jmp    c001a166 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a163:	83 ce e0             	or     esi,0xffffffe0
c001a166:	89 f0                	mov    eax,esi
c001a168:	0f b6 f0             	movzx  esi,al
c001a16b:	56                   	push   esi
c001a16c:	6a 06                	push   0x6
c001a16e:	51                   	push   ecx
c001a16f:	52                   	push   edx
c001a170:	e8 97 ef ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a175:	83 c4 10             	add    esp,0x10
c001a178:	6a 00                	push   0x0
c001a17a:	6a 01                	push   0x1
c001a17c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a183:	50                   	push   eax
c001a184:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a18a:	e8 7d ef ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a18f:	83 c4 10             	add    esp,0x10
c001a192:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a197:	75 6e                	jne    c001a207 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a199:	6a 00                	push   0x0
c001a19b:	6a 08                	push   0x8
c001a19d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a4:	50                   	push   eax
c001a1a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ab:	e8 5c ef ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a1b5:	50                   	push   eax
c001a1b6:	6a 09                	push   0x9
c001a1b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1bf:	50                   	push   eax
c001a1c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c6:	e8 41 ef ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1cb:	83 c4 20             	add    esp,0x20
c001a1ce:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1d3:	50                   	push   eax
c001a1d4:	6a 0a                	push   0xa
c001a1d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1dd:	50                   	push   eax
c001a1de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e4:	e8 23 ef ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1e9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a1ee:	50                   	push   eax
c001a1ef:	6a 0b                	push   0xb
c001a1f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1f8:	50                   	push   eax
c001a1f9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ff:	e8 08 ef ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a204:	83 c4 20             	add    esp,0x20
c001a207:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a20c:	50                   	push   eax
c001a20d:	6a 02                	push   0x2
c001a20f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a216:	50                   	push   eax
c001a217:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a21d:	e8 ea ee ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a222:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a227:	50                   	push   eax
c001a228:	6a 03                	push   0x3
c001a22a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a231:	50                   	push   eax
c001a232:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a238:	e8 cf ee ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a23d:	83 c4 20             	add    esp,0x20
c001a240:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a245:	50                   	push   eax
c001a246:	6a 04                	push   0x4
c001a248:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a24f:	50                   	push   eax
c001a250:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a256:	e8 b1 ee ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a25b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a260:	50                   	push   eax
c001a261:	6a 05                	push   0x5
c001a263:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a26a:	50                   	push   eax
c001a26b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a271:	e8 96 ee ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a276:	83 c4 20             	add    esp,0x20
c001a279:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a27e:	0f 94 c0             	sete   al
c001a281:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a286:	74 09                	je     c001a291 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a288:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a28f:	eb 07                	jmp    c001a298 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a291:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a298:	0f b6 c0             	movzx  eax,al
c001a29b:	50                   	push   eax
c001a29c:	6a 07                	push   0x7
c001a29e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2a5:	50                   	push   eax
c001a2a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2ac:	e8 5b ee ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2b1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a2b5:	83 c4 10             	add    esp,0x10
c001a2b8:	85 f6                	test   esi,esi
c001a2ba:	0f 84 ae 00 00 00    	je     c001a36e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2c0:	50                   	push   eax
c001a2c1:	6a 01                	push   0x1
c001a2c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2ca:	50                   	push   eax
c001a2cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d1:	e8 d4 f8 ff ff       	call   c0019baa <IDE::polling(unsigned char, unsigned int)>
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2df:	84 c0                	test   al,al
c001a2e1:	74 20                	je     c001a303 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a2e3:	0f b6 f8             	movzx  edi,al
c001a2e6:	0f b6 d2             	movzx  edx,dl
c001a2e9:	57                   	push   edi
c001a2ea:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a2f1:	50                   	push   eax
c001a2f2:	52                   	push   edx
c001a2f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2f9:	e8 fc f7 ff ff       	call   c0019afa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a2fe:	e9 87 00 00 00       	jmp    c001a38a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a303:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a308:	74 33                	je     c001a33d <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a30a:	31 ed                	xor    ebp,ebp
c001a30c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a310:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a314:	50                   	push   eax
c001a315:	50                   	push   eax
c001a316:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a31d:	50                   	push   eax
c001a31e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a324:	e8 d1 ed ff ff       	call   c00190fa <IDE::getBase(unsigned char)>
c001a329:	89 c2                	mov    edx,eax
c001a32b:	89 f8                	mov    eax,edi
c001a32d:	66 ef                	out    dx,ax
c001a32f:	45                   	inc    ebp
c001a330:	83 c4 10             	add    esp,0x10
c001a333:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a339:	75 d1                	jne    c001a30c <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a33b:	eb 23                	jmp    c001a360 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a33d:	0f b6 d2             	movzx  edx,dl
c001a340:	51                   	push   ecx
c001a341:	51                   	push   ecx
c001a342:	52                   	push   edx
c001a343:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a349:	e8 ac ed ff ff       	call   c00190fa <IDE::getBase(unsigned char)>
c001a34e:	b9 00 01 00 00       	mov    ecx,0x100
c001a353:	89 c2                	mov    edx,eax
c001a355:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a359:	fc                   	cld    
c001a35a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a35d:	83 c4 10             	add    esp,0x10
c001a360:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a368:	4e                   	dec    esi
c001a369:	e9 4a ff ff ff       	jmp    c001a2b8 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a36e:	31 ff                	xor    edi,edi
c001a370:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a375:	74 16                	je     c001a38d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a377:	50                   	push   eax
c001a378:	50                   	push   eax
c001a379:	31 c0                	xor    eax,eax
c001a37b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a380:	0f 94 c0             	sete   al
c001a383:	50                   	push   eax
c001a384:	53                   	push   ebx
c001a385:	e8 fc fb ff ff       	call   c0019f86 <ATA::flush(bool)>
c001a38a:	83 c4 10             	add    esp,0x10
c001a38d:	83 c4 2c             	add    esp,0x2c
c001a390:	89 f8                	mov    eax,edi
c001a392:	5b                   	pop    ebx
c001a393:	5e                   	pop    esi
c001a394:	5f                   	pop    edi
c001a395:	5d                   	pop    ebp
c001a396:	c3                   	ret    
c001a397:	90                   	nop

c001a398 <ATA::read(unsigned long long, int, void*)>:
c001a398:	57                   	push   edi
c001a399:	b8 04 00 00 00       	mov    eax,0x4
c001a39e:	56                   	push   esi
c001a39f:	53                   	push   ebx
c001a3a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3a8:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3b3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3b9:	77 25                	ja     c001a3e0 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3bb:	b8 06 00 00 00       	mov    eax,0x6
c001a3c0:	85 f6                	test   esi,esi
c001a3c2:	74 1c                	je     c001a3e0 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3c4:	50                   	push   eax
c001a3c5:	50                   	push   eax
c001a3c6:	6a 00                	push   0x0
c001a3c8:	56                   	push   esi
c001a3c9:	52                   	push   edx
c001a3ca:	53                   	push   ebx
c001a3cb:	51                   	push   ecx
c001a3cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d0:	e8 47 fc ff ff       	call   c001a01c <ATA::access(unsigned long long, int, void*, bool)>
c001a3d5:	83 c4 20             	add    esp,0x20
c001a3d8:	85 c0                	test   eax,eax
c001a3da:	0f 95 c0             	setne  al
c001a3dd:	0f b6 c0             	movzx  eax,al
c001a3e0:	5b                   	pop    ebx
c001a3e1:	5e                   	pop    esi
c001a3e2:	5f                   	pop    edi
c001a3e3:	c3                   	ret    

c001a3e4 <ATA::write(unsigned long long, int, void*)>:
c001a3e4:	57                   	push   edi
c001a3e5:	b8 04 00 00 00       	mov    eax,0x4
c001a3ea:	56                   	push   esi
c001a3eb:	53                   	push   ebx
c001a3ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3f4:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3ff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a405:	77 25                	ja     c001a42c <ATA::write(unsigned long long, int, void*)+0x48>
c001a407:	b8 06 00 00 00       	mov    eax,0x6
c001a40c:	85 f6                	test   esi,esi
c001a40e:	74 1c                	je     c001a42c <ATA::write(unsigned long long, int, void*)+0x48>
c001a410:	50                   	push   eax
c001a411:	50                   	push   eax
c001a412:	6a 01                	push   0x1
c001a414:	56                   	push   esi
c001a415:	52                   	push   edx
c001a416:	53                   	push   ebx
c001a417:	51                   	push   ecx
c001a418:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a41c:	e8 fb fb ff ff       	call   c001a01c <ATA::access(unsigned long long, int, void*, bool)>
c001a421:	83 c4 20             	add    esp,0x20
c001a424:	85 c0                	test   eax,eax
c001a426:	0f 95 c0             	setne  al
c001a429:	0f b6 c0             	movzx  eax,al
c001a42c:	5b                   	pop    ebx
c001a42d:	5e                   	pop    esi
c001a42e:	5f                   	pop    edi
c001a42f:	c3                   	ret    

c001a430 <ATA::detectCHS()>:
c001a430:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a434:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a43a:	c1 e0 06             	shl    eax,0x6
c001a43d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a443:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a44d:	c7 44 24 04 ac f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f3ac
c001a455:	e9 91 62 ff ff       	jmp    c00106eb <KePanic(char const*)>

c001a45a <ATA::open(int, int, void*)>:
c001a45a:	53                   	push   ebx
c001a45b:	83 ec 08             	sub    esp,0x8
c001a45e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a462:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a466:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a46a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a470:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a476:	c1 e0 06             	shl    eax,0x6
c001a479:	01 d0                	add    eax,edx
c001a47b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a482:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a488:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a48f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a499:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a49f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a4a6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a4ad:	75 0c                	jne    c001a4bb <ATA::open(int, int, void*)+0x61>
c001a4af:	83 ec 0c             	sub    esp,0xc
c001a4b2:	53                   	push   ebx
c001a4b3:	e8 78 ff ff ff       	call   c001a430 <ATA::detectCHS()>
c001a4b8:	83 c4 10             	add    esp,0x10
c001a4bb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4c1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a4c7:	c1 e0 06             	shl    eax,0x6
c001a4ca:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a4d1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a4db:	d1 e8                	shr    eax,1
c001a4dd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a4e3:	6a 04                	push   0x4
c001a4e5:	6a 0c                	push   0xc
c001a4e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4ee:	50                   	push   eax
c001a4ef:	52                   	push   edx
c001a4f0:	e8 17 ec ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4f5:	90                   	nop
c001a4f6:	90                   	nop
c001a4f7:	6a 00                	push   0x0
c001a4f9:	6a 0c                	push   0xc
c001a4fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a502:	50                   	push   eax
c001a503:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a509:	e8 fe eb ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a50e:	83 c4 14             	add    esp,0x14
c001a511:	53                   	push   ebx
c001a512:	e8 7b 1e ff ff       	call   c000c392 <PhysicalDisk::startCache()>
c001a517:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a51a:	e8 eb 2e ff ff       	call   c000d40a <createPartitionsForDisk(PhysicalDisk*)>
c001a51f:	31 c0                	xor    eax,eax
c001a521:	83 c4 18             	add    esp,0x18
c001a524:	5b                   	pop    ebx
c001a525:	c3                   	ret    

c001a526 <ATAPI::write(unsigned long long, int, void*)>:
c001a526:	b8 03 00 00 00       	mov    eax,0x3
c001a52b:	c3                   	ret    

c001a52c <ATAPI::close(int, int, void*)>:
c001a52c:	83 ec 0c             	sub    esp,0xc
c001a52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a533:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a539:	85 c0                	test   eax,eax
c001a53b:	74 0c                	je     c001a549 <ATAPI::close(int, int, void*)+0x1d>
c001a53d:	83 ec 0c             	sub    esp,0xc
c001a540:	8b 10                	mov    edx,DWORD PTR [eax]
c001a542:	50                   	push   eax
c001a543:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a546:	83 c4 10             	add    esp,0x10
c001a549:	31 c0                	xor    eax,eax
c001a54b:	83 c4 0c             	add    esp,0xc
c001a54e:	c3                   	ret    
c001a54f:	90                   	nop

c001a550 <ATAPI::ATAPI()>:
c001a550:	83 ec 0c             	sub    esp,0xc
c001a553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a557:	83 ec 04             	sub    esp,0x4
c001a55a:	68 00 08 00 00       	push   0x800
c001a55f:	68 f5 f4 01 c0       	push   0xc001f4f5
c001a564:	50                   	push   eax
c001a565:	e8 c0 1d ff ff       	call   c000c32a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a56a:	83 c4 10             	add    esp,0x10
c001a56d:	ba 10 f4 01 c0       	mov    edx,0xc001f410
c001a572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a576:	89 10                	mov    DWORD PTR [eax],edx
c001a578:	90                   	nop
c001a579:	83 c4 0c             	add    esp,0xc
c001a57c:	c3                   	ret    
c001a57d:	90                   	nop

c001a57e <ATAPI::readyForCommand()>:
c001a57e:	56                   	push   esi
c001a57f:	53                   	push   ebx
c001a580:	53                   	push   ebx
c001a581:	31 db                	xor    ebx,ebx
c001a583:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a587:	51                   	push   ecx
c001a588:	6a 0c                	push   0xc
c001a58a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a591:	50                   	push   eax
c001a592:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a598:	e8 2f ec ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c001a59d:	83 c4 10             	add    esp,0x10
c001a5a0:	a8 88                	test   al,0x88
c001a5a2:	74 25                	je     c001a5c9 <ATAPI::readyForCommand()+0x4b>
c001a5a4:	43                   	inc    ebx
c001a5a5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a5ab:	7e da                	jle    c001a587 <ATAPI::readyForCommand()+0x9>
c001a5ad:	83 ec 0c             	sub    esp,0xc
c001a5b0:	68 5e 01 00 00       	push   0x15e
c001a5b5:	e8 8a 96 ff ff       	call   c0013c44 <milliTenthSleep(unsigned int)>
c001a5ba:	83 c4 10             	add    esp,0x10
c001a5bd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a5c3:	75 c2                	jne    c001a587 <ATAPI::readyForCommand()+0x9>
c001a5c5:	31 c0                	xor    eax,eax
c001a5c7:	eb 02                	jmp    c001a5cb <ATAPI::readyForCommand()+0x4d>
c001a5c9:	b0 01                	mov    al,0x1
c001a5cb:	5a                   	pop    edx
c001a5cc:	5b                   	pop    ebx
c001a5cd:	5e                   	pop    esi
c001a5ce:	c3                   	ret    
c001a5cf:	90                   	nop

c001a5d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a5d0:	55                   	push   ebp
c001a5d1:	57                   	push   edi
c001a5d2:	56                   	push   esi
c001a5d3:	53                   	push   ebx
c001a5d4:	83 ec 20             	sub    esp,0x20
c001a5d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a5db:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a5df:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a5e7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5eb:	6a 01                	push   0x1
c001a5ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5f4:	50                   	push   eax
c001a5f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5fb:	e8 1a ed ff ff       	call   c001931a <IDE::enableIRQs(unsigned char, bool)>
c001a600:	5e                   	pop    esi
c001a601:	58                   	pop    eax
c001a602:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a609:	50                   	push   eax
c001a60a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a610:	e8 d1 ea ff ff       	call   c00190e6 <IDE::prepareInterrupt(unsigned char)>
c001a615:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a618:	e8 61 ff ff ff       	call   c001a57e <ATAPI::readyForCommand()>
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	84 c0                	test   al,al
c001a622:	75 0a                	jne    c001a62e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a624:	bb 01 00 00 00       	mov    ebx,0x1
c001a629:	e9 57 02 00 00       	jmp    c001a885 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a62e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a634:	c1 e0 04             	shl    eax,0x4
c001a637:	0f b6 c0             	movzx  eax,al
c001a63a:	50                   	push   eax
c001a63b:	6a 06                	push   0x6
c001a63d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a644:	50                   	push   eax
c001a645:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a64b:	e8 bc ea ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a650:	6a 00                	push   0x0
c001a652:	6a 01                	push   0x1
c001a654:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a65b:	50                   	push   eax
c001a65c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a662:	e8 a5 ea ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a667:	83 c4 20             	add    esp,0x20
c001a66a:	0f b6 c3             	movzx  eax,bl
c001a66d:	0f b6 df             	movzx  ebx,bh
c001a670:	50                   	push   eax
c001a671:	6a 04                	push   0x4
c001a673:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a67a:	50                   	push   eax
c001a67b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a681:	e8 86 ea ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a686:	53                   	push   ebx
c001a687:	6a 05                	push   0x5
c001a689:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a690:	50                   	push   eax
c001a691:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a697:	e8 70 ea ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a69c:	83 c4 20             	add    esp,0x20
c001a69f:	68 a0 00 00 00       	push   0xa0
c001a6a4:	6a 07                	push   0x7
c001a6a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6ad:	50                   	push   eax
c001a6ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6b4:	e8 53 ea ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6b9:	83 c4 0c             	add    esp,0xc
c001a6bc:	6a 01                	push   0x1
c001a6be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6c5:	50                   	push   eax
c001a6c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6cc:	e8 d9 f4 ff ff       	call   c0019baa <IDE::polling(unsigned char, unsigned int)>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a6da:	84 c0                	test   al,al
c001a6dc:	74 23                	je     c001a701 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a6de:	0f b6 d8             	movzx  ebx,al
c001a6e1:	0f b6 d2             	movzx  edx,dl
c001a6e4:	53                   	push   ebx
c001a6e5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a6ec:	50                   	push   eax
c001a6ed:	52                   	push   edx
c001a6ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f4:	e8 01 f4 ff ff       	call   c0019afa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	e9 84 01 00 00       	jmp    c001a885 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a701:	0f b6 d2             	movzx  edx,dl
c001a704:	53                   	push   ebx
c001a705:	53                   	push   ebx
c001a706:	52                   	push   edx
c001a707:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a70d:	e8 e8 e9 ff ff       	call   c00190fa <IDE::getBase(unsigned char)>
c001a712:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a716:	b9 06 00 00 00       	mov    ecx,0x6
c001a71b:	89 c2                	mov    edx,eax
c001a71d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a720:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a724:	83 c4 10             	add    esp,0x10
c001a727:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a72d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a734:	85 db                	test   ebx,ebx
c001a736:	0f 84 ec 00 00 00    	je     c001a828 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a73c:	51                   	push   ecx
c001a73d:	51                   	push   ecx
c001a73e:	52                   	push   edx
c001a73f:	50                   	push   eax
c001a740:	e8 35 eb ff ff       	call   c001927a <IDE::waitInterrupt(unsigned char)>
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	84 c0                	test   al,al
c001a74a:	0f 84 d4 fe ff ff    	je     c001a624 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a750:	56                   	push   esi
c001a751:	56                   	push   esi
c001a752:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a759:	50                   	push   eax
c001a75a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a760:	e8 81 e9 ff ff       	call   c00190e6 <IDE::prepareInterrupt(unsigned char)>
c001a765:	83 c4 0c             	add    esp,0xc
c001a768:	6a 04                	push   0x4
c001a76a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a771:	50                   	push   eax
c001a772:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a778:	e8 4f ea ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c001a77d:	83 c4 0c             	add    esp,0xc
c001a780:	89 c6                	mov    esi,eax
c001a782:	6a 05                	push   0x5
c001a784:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a78b:	50                   	push   eax
c001a78c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a792:	e8 35 ea ff ff       	call   c00191cc <IDE::read(unsigned char, unsigned char)>
c001a797:	89 f1                	mov    ecx,esi
c001a799:	0f b6 c0             	movzx  eax,al
c001a79c:	0f b6 f1             	movzx  esi,cl
c001a79f:	c1 e0 08             	shl    eax,0x8
c001a7a2:	09 c6                	or     esi,eax
c001a7a4:	d1 fe                	sar    esi,1
c001a7a6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a7aa:	83 c4 10             	add    esp,0x10
c001a7ad:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a7b2:	74 41                	je     c001a7f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a7b4:	31 c9                	xor    ecx,ecx
c001a7b6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7bc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7c3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a7c7:	75 0a                	jne    c001a7d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a7c9:	01 c9                	add    ecx,ecx
c001a7cb:	01 cd                	add    ebp,ecx
c001a7cd:	4b                   	dec    ebx
c001a7ce:	e9 54 ff ff ff       	jmp    c001a727 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a7d3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a7d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7dc:	51                   	push   ecx
c001a7dd:	51                   	push   ecx
c001a7de:	52                   	push   edx
c001a7df:	50                   	push   eax
c001a7e0:	e8 15 e9 ff ff       	call   c00190fa <IDE::getBase(unsigned char)>
c001a7e5:	89 c2                	mov    edx,eax
c001a7e7:	89 f0                	mov    eax,esi
c001a7e9:	66 ef                	out    dx,ax
c001a7eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a7ef:	83 c4 10             	add    esp,0x10
c001a7f2:	41                   	inc    ecx
c001a7f3:	eb c1                	jmp    c001a7b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a7f5:	31 f6                	xor    esi,esi
c001a7f7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7fd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a804:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a808:	75 06                	jne    c001a810 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a80a:	01 f6                	add    esi,esi
c001a80c:	01 f5                	add    ebp,esi
c001a80e:	eb bd                	jmp    c001a7cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a810:	51                   	push   ecx
c001a811:	51                   	push   ecx
c001a812:	52                   	push   edx
c001a813:	50                   	push   eax
c001a814:	e8 e1 e8 ff ff       	call   c00190fa <IDE::getBase(unsigned char)>
c001a819:	89 c2                	mov    edx,eax
c001a81b:	66 ed                	in     ax,dx
c001a81d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a822:	83 c4 10             	add    esp,0x10
c001a825:	46                   	inc    esi
c001a826:	eb cf                	jmp    c001a7f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a828:	51                   	push   ecx
c001a829:	51                   	push   ecx
c001a82a:	52                   	push   edx
c001a82b:	50                   	push   eax
c001a82c:	e8 49 ea ff ff       	call   c001927a <IDE::waitInterrupt(unsigned char)>
c001a831:	83 c4 10             	add    esp,0x10
c001a834:	84 c0                	test   al,al
c001a836:	0f 84 e8 fd ff ff    	je     c001a624 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a83c:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a841:	52                   	push   edx
c001a842:	52                   	push   edx
c001a843:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a84a:	50                   	push   eax
c001a84b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a851:	e8 90 e8 ff ff       	call   c00190e6 <IDE::prepareInterrupt(unsigned char)>
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	50                   	push   eax
c001a85a:	50                   	push   eax
c001a85b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a862:	50                   	push   eax
c001a863:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a869:	e8 8c e8 ff ff       	call   c00190fa <IDE::getBase(unsigned char)>
c001a86e:	8d 50 07             	lea    edx,[eax+0x7]
c001a871:	ec                   	in     al,dx
c001a872:	83 c4 10             	add    esp,0x10
c001a875:	a8 88                	test   al,0x88
c001a877:	74 0a                	je     c001a883 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a879:	4b                   	dec    ebx
c001a87a:	75 dd                	jne    c001a859 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a87c:	bb 02 00 00 00       	mov    ebx,0x2
c001a881:	eb 02                	jmp    c001a885 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a883:	31 db                	xor    ebx,ebx
c001a885:	83 c4 1c             	add    esp,0x1c
c001a888:	89 d8                	mov    eax,ebx
c001a88a:	5b                   	pop    ebx
c001a88b:	5e                   	pop    esi
c001a88c:	5f                   	pop    edi
c001a88d:	5d                   	pop    ebp
c001a88e:	c3                   	ret    
c001a88f:	90                   	nop

c001a890 <ATAPI::diskRemoved()>:
c001a890:	53                   	push   ebx
c001a891:	83 ec 14             	sub    esp,0x14
c001a894:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a898:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a89f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a8a5:	e8 e0 28 ff ff       	call   c000d18a <LogicalDisk::unmount()>
c001a8aa:	58                   	pop    eax
c001a8ab:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a8b1:	e8 1a 32 ff ff       	call   c000dad0 <VCache::writeWriteBuffer()>
c001a8b6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8c0:	83 c4 18             	add    esp,0x18
c001a8c3:	5b                   	pop    ebx
c001a8c4:	e9 f7 31 ff ff       	jmp    c000dac0 <VCache::invalidateReadBuffer()>
c001a8c9:	90                   	nop

c001a8ca <ATAPI::eject()>:
c001a8ca:	57                   	push   edi
c001a8cb:	b9 03 00 00 00       	mov    ecx,0x3
c001a8d0:	53                   	push   ebx
c001a8d1:	83 ec 14             	sub    esp,0x14
c001a8d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a8dc:	fc                   	cld    
c001a8dd:	31 c0                	xor    eax,eax
c001a8df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8e1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a8e6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a8eb:	50                   	push   eax
c001a8ec:	50                   	push   eax
c001a8ed:	6a 00                	push   0x0
c001a8ef:	6a 00                	push   0x0
c001a8f1:	6a 00                	push   0x0
c001a8f3:	6a 02                	push   0x2
c001a8f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8f9:	50                   	push   eax
c001a8fa:	53                   	push   ebx
c001a8fb:	e8 d0 fc ff ff       	call   c001a5d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a900:	83 c4 14             	add    esp,0x14
c001a903:	53                   	push   ebx
c001a904:	e8 87 ff ff ff       	call   c001a890 <ATAPI::diskRemoved()>
c001a909:	83 c4 24             	add    esp,0x24
c001a90c:	31 c0                	xor    eax,eax
c001a90e:	5b                   	pop    ebx
c001a90f:	5f                   	pop    edi
c001a910:	c3                   	ret    
c001a911:	90                   	nop

c001a912 <ATAPI::diskInserted()>:
c001a912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a916:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a91d:	c3                   	ret    

c001a91e <ATAPI::detectMedia()>:
c001a91e:	56                   	push   esi
c001a91f:	53                   	push   ebx
c001a920:	83 ec 28             	sub    esp,0x28
c001a923:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a927:	6a 0c                	push   0xc
c001a929:	6a 00                	push   0x0
c001a92b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a92f:	56                   	push   esi
c001a930:	e8 bb 5b fe ff       	call   c00004f0 <memset>
c001a935:	58                   	pop    eax
c001a936:	5a                   	pop    edx
c001a937:	6a 00                	push   0x0
c001a939:	6a 00                	push   0x0
c001a93b:	6a 00                	push   0x0
c001a93d:	6a 00                	push   0x0
c001a93f:	56                   	push   esi
c001a940:	53                   	push   ebx
c001a941:	e8 8a fc ff ff       	call   c001a5d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a946:	83 c4 1c             	add    esp,0x1c
c001a949:	6a 0c                	push   0xc
c001a94b:	6a 00                	push   0x0
c001a94d:	56                   	push   esi
c001a94e:	e8 9d 5b fe ff       	call   c00004f0 <memset>
c001a953:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a958:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a95d:	59                   	pop    ecx
c001a95e:	58                   	pop    eax
c001a95f:	6a 01                	push   0x1
c001a961:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a965:	50                   	push   eax
c001a966:	6a 00                	push   0x0
c001a968:	6a 12                	push   0x12
c001a96a:	56                   	push   esi
c001a96b:	53                   	push   ebx
c001a96c:	e8 5f fc ff ff       	call   c001a5d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a971:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a975:	83 c4 20             	add    esp,0x20
c001a978:	83 e0 7f             	and    eax,0x7f
c001a97b:	3c 70                	cmp    al,0x70
c001a97d:	74 15                	je     c001a994 <ATAPI::detectMedia()+0x76>
c001a97f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a986:	75 0c                	jne    c001a994 <ATAPI::detectMedia()+0x76>
c001a988:	83 ec 0c             	sub    esp,0xc
c001a98b:	53                   	push   ebx
c001a98c:	e8 81 ff ff ff       	call   c001a912 <ATAPI::diskInserted()>
c001a991:	83 c4 10             	add    esp,0x10
c001a994:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a998:	83 e0 0f             	and    eax,0xf
c001a99b:	3c 02                	cmp    al,0x2
c001a99d:	75 1b                	jne    c001a9ba <ATAPI::detectMedia()+0x9c>
c001a99f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a9a4:	75 2d                	jne    c001a9d3 <ATAPI::detectMedia()+0xb5>
c001a9a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9ad:	74 24                	je     c001a9d3 <ATAPI::detectMedia()+0xb5>
c001a9af:	83 ec 0c             	sub    esp,0xc
c001a9b2:	53                   	push   ebx
c001a9b3:	e8 d8 fe ff ff       	call   c001a890 <ATAPI::diskRemoved()>
c001a9b8:	eb 16                	jmp    c001a9d0 <ATAPI::detectMedia()+0xb2>
c001a9ba:	84 c0                	test   al,al
c001a9bc:	75 15                	jne    c001a9d3 <ATAPI::detectMedia()+0xb5>
c001a9be:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9c5:	75 0c                	jne    c001a9d3 <ATAPI::detectMedia()+0xb5>
c001a9c7:	83 ec 0c             	sub    esp,0xc
c001a9ca:	53                   	push   ebx
c001a9cb:	e8 42 ff ff ff       	call   c001a912 <ATAPI::diskInserted()>
c001a9d0:	83 c4 10             	add    esp,0x10
c001a9d3:	83 c4 24             	add    esp,0x24
c001a9d6:	5b                   	pop    ebx
c001a9d7:	5e                   	pop    esi
c001a9d8:	c3                   	ret    
c001a9d9:	90                   	nop

c001a9da <ATAPI::open(int, int, void*)>:
c001a9da:	56                   	push   esi
c001a9db:	53                   	push   ebx
c001a9dc:	50                   	push   eax
c001a9dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9e9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a9ef:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a9f5:	c1 e0 06             	shl    eax,0x6
c001a9f8:	01 d0                	add    eax,edx
c001a9fa:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001aa01:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001aa07:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001aa0e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aa18:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa1e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aa25:	6a 04                	push   0x4
c001aa27:	6a 0c                	push   0xc
c001aa29:	51                   	push   ecx
c001aa2a:	52                   	push   edx
c001aa2b:	e8 dc e6 ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa30:	90                   	nop
c001aa31:	90                   	nop
c001aa32:	6a 00                	push   0x0
c001aa34:	6a 0c                	push   0xc
c001aa36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa3d:	50                   	push   eax
c001aa3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa44:	e8 c3 e6 ff ff       	call   c001910c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa49:	83 c4 14             	add    esp,0x14
c001aa4c:	68 74 01 00 00       	push   0x174
c001aa51:	e8 2f d4 fe ff       	call   c0007e85 <malloc>
c001aa56:	83 c4 0c             	add    esp,0xc
c001aa59:	89 c6                	mov    esi,eax
c001aa5b:	6a 00                	push   0x0
c001aa5d:	68 ff ff ff 7f       	push   0x7fffffff
c001aa62:	6a 00                	push   0x0
c001aa64:	6a 00                	push   0x0
c001aa66:	53                   	push   ebx
c001aa67:	68 e0 f5 01 c0       	push   0xc001f5e0
c001aa6c:	50                   	push   eax
c001aa6d:	e8 64 25 ff ff       	call   c000cfd6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa72:	83 c4 14             	add    esp,0x14
c001aa75:	56                   	push   esi
c001aa76:	e8 11 26 ff ff       	call   c000d08c <LogicalDisk::assignDriveLetter()>
c001aa7b:	5a                   	pop    edx
c001aa7c:	0f be c0             	movsx  eax,al
c001aa7f:	59                   	pop    ecx
c001aa80:	50                   	push   eax
c001aa81:	68 f8 f3 01 c0       	push   0xc001f3f8
c001aa86:	e8 91 00 ff ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001aa8b:	58                   	pop    eax
c001aa8c:	5a                   	pop    edx
c001aa8d:	56                   	push   esi
c001aa8e:	53                   	push   ebx
c001aa8f:	e8 c8 14 ff ff       	call   c000bf5c <Device::addChild(Device*)>
c001aa94:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa9d:	e8 f0 18 ff ff       	call   c000c392 <PhysicalDisk::startCache()>
c001aaa2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aaa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaac:	e8 6d fe ff ff       	call   c001a91e <ATAPI::detectMedia()>
c001aab1:	83 c4 14             	add    esp,0x14
c001aab4:	31 c0                	xor    eax,eax
c001aab6:	5b                   	pop    ebx
c001aab7:	5e                   	pop    esi
c001aab8:	c3                   	ret    
c001aab9:	90                   	nop

c001aaba <ATAPI::read(unsigned long long, int, void*)>:
c001aaba:	55                   	push   ebp
c001aabb:	57                   	push   edi
c001aabc:	56                   	push   esi
c001aabd:	53                   	push   ebx
c001aabe:	83 ec 1c             	sub    esp,0x1c
c001aac1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aac5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aac9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aacd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aad4:	74 3c                	je     c001ab12 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aad6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aada:	b9 03 00 00 00       	mov    ecx,0x3
c001aadf:	fc                   	cld    
c001aae0:	31 c0                	xor    eax,eax
c001aae2:	0f ce                	bswap  esi
c001aae4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aae6:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aaeb:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aaef:	89 e8                	mov    eax,ebp
c001aaf1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aaf5:	50                   	push   eax
c001aaf6:	50                   	push   eax
c001aaf7:	55                   	push   ebp
c001aaf8:	c1 e5 0b             	shl    ebp,0xb
c001aafb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aaff:	6a 00                	push   0x0
c001ab01:	55                   	push   ebp
c001ab02:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab06:	50                   	push   eax
c001ab07:	53                   	push   ebx
c001ab08:	e8 c3 fa ff ff       	call   c001a5d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab0d:	83 c4 20             	add    esp,0x20
c001ab10:	eb 1a                	jmp    c001ab2c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ab12:	83 ec 0c             	sub    esp,0xc
c001ab15:	53                   	push   ebx
c001ab16:	e8 03 fe ff ff       	call   c001a91e <ATAPI::detectMedia()>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab25:	75 af                	jne    c001aad6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ab27:	b8 02 00 00 00       	mov    eax,0x2
c001ab2c:	83 c4 1c             	add    esp,0x1c
c001ab2f:	5b                   	pop    ebx
c001ab30:	5e                   	pop    esi
c001ab31:	5f                   	pop    edi
c001ab32:	5d                   	pop    ebp
c001ab33:	c3                   	ret    

c001ab34 <SATA::close(int, int, void*)>:
c001ab34:	83 ec 0c             	sub    esp,0xc
c001ab37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab41:	85 c0                	test   eax,eax
c001ab43:	74 0c                	je     c001ab51 <SATA::close(int, int, void*)+0x1d>
c001ab45:	83 ec 0c             	sub    esp,0xc
c001ab48:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab4a:	50                   	push   eax
c001ab4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab4e:	83 c4 10             	add    esp,0x10
c001ab51:	31 c0                	xor    eax,eax
c001ab53:	83 c4 0c             	add    esp,0xc
c001ab56:	c3                   	ret    
c001ab57:	90                   	nop

c001ab58 <SATA::powerSaving(PowerSavingLevel)>:
c001ab58:	c3                   	ret    
c001ab59:	90                   	nop

c001ab5a <SATA::open(int, int, void*)>:
c001ab5a:	56                   	push   esi
c001ab5b:	53                   	push   ebx
c001ab5c:	50                   	push   eax
c001ab5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab65:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab6f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab75:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab83:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab8d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab93:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab9a:	e8 be d5 fe ff       	call   c000815d <Phys::allocatePage()>
c001ab9f:	89 c6                	mov    esi,eax
c001aba1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aba7:	81 c6 00 10 00 00    	add    esi,0x1000
c001abad:	e8 ab d5 fe ff       	call   c000815d <Phys::allocatePage()>
c001abb2:	39 c6                	cmp    esi,eax
c001abb4:	74 10                	je     c001abc6 <SATA::open(int, int, void*)+0x6c>
c001abb6:	83 ec 0c             	sub    esp,0xc
c001abb9:	68 40 f4 01 c0       	push   0xc001f440
c001abbe:	e8 28 5b ff ff       	call   c00106eb <KePanic(char const*)>
c001abc3:	83 c4 10             	add    esp,0x10
c001abc6:	83 ec 0c             	sub    esp,0xc
c001abc9:	6a 02                	push   0x2
c001abcb:	e8 f9 ec fe ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c001abd0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abd6:	6a 03                	push   0x3
c001abd8:	50                   	push   eax
c001abd9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001abdf:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c001abe5:	e8 74 f3 fe ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001abea:	83 c4 14             	add    esp,0x14
c001abed:	53                   	push   ebx
c001abee:	e8 9f 17 ff ff       	call   c000c392 <PhysicalDisk::startCache()>
c001abf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abf6:	e8 0f 28 ff ff       	call   c000d40a <createPartitionsForDisk(PhysicalDisk*)>
c001abfb:	83 c4 14             	add    esp,0x14
c001abfe:	31 c0                	xor    eax,eax
c001ac00:	5b                   	pop    ebx
c001ac01:	5e                   	pop    esi
c001ac02:	c3                   	ret    
c001ac03:	90                   	nop

c001ac04 <SATA::SATA()>:
c001ac04:	83 ec 0c             	sub    esp,0xc
c001ac07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0b:	83 ec 04             	sub    esp,0x4
c001ac0e:	68 00 02 00 00       	push   0x200
c001ac13:	68 54 f4 01 c0       	push   0xc001f454
c001ac18:	50                   	push   eax
c001ac19:	e8 0c 17 ff ff       	call   c000c32a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	ba c4 f4 01 c0       	mov    edx,0xc001f4c4
c001ac26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2a:	89 10                	mov    DWORD PTR [eax],edx
c001ac2c:	90                   	nop
c001ac2d:	83 c4 0c             	add    esp,0xc
c001ac30:	c3                   	ret    
c001ac31:	90                   	nop

c001ac32 <SATA::access(unsigned long long, int, void*, bool)>:
c001ac32:	55                   	push   ebp
c001ac33:	57                   	push   edi
c001ac34:	56                   	push   esi
c001ac35:	53                   	push   ebx
c001ac36:	83 ec 2c             	sub    esp,0x2c
c001ac39:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac3d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac45:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac49:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac4d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac56:	7e 10                	jle    c001ac68 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac58:	83 ec 0c             	sub    esp,0xc
c001ac5b:	68 64 f4 01 c0       	push   0xc001f464
c001ac60:	e8 86 5a ff ff       	call   c00106eb <KePanic(char const*)>
c001ac65:	83 c4 10             	add    esp,0x10
c001ac68:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac6e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac7e:	89 d0                	mov    eax,edx
c001ac80:	c1 e0 07             	shl    eax,0x7
c001ac83:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac87:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac91:	51                   	push   ecx
c001ac92:	8d 42 02             	lea    eax,[edx+0x2]
c001ac95:	51                   	push   ecx
c001ac96:	c1 e0 07             	shl    eax,0x7
c001ac99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac9d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001aca1:	50                   	push   eax
c001aca2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001aca8:	e8 e7 ef ff ff       	call   c0019c94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001acad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001acb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acbd:	0f 84 4f 01 00 00    	je     c001ae12 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001acc3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001acc7:	c1 e0 09             	shl    eax,0x9
c001acca:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001accf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acd3:	74 0e                	je     c001ace3 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001acd5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001acdb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001acdf:	89 c1                	mov    ecx,eax
c001ace1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ace3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ace7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001aced:	8d 42 02             	lea    eax,[edx+0x2]
c001acf0:	c1 e0 07             	shl    eax,0x7
c001acf3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001acf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001acf9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001acff:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ad05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad09:	c1 e1 05             	shl    ecx,0x5
c001ad0c:	01 c8                	add    eax,ecx
c001ad0e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ad12:	83 e1 01             	and    ecx,0x1
c001ad15:	89 ce                	mov    esi,ecx
c001ad17:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad19:	c1 e6 06             	shl    esi,0x6
c001ad1c:	83 e1 bf             	and    ecx,0xffffffbf
c001ad1f:	09 f1                	or     ecx,esi
c001ad21:	88 08                	mov    BYTE PTR [eax],cl
c001ad23:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad25:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad2b:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad31:	89 08                	mov    DWORD PTR [eax],ecx
c001ad33:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad39:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad3f:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad45:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad48:	50                   	push   eax
c001ad49:	68 90 00 00 00       	push   0x90
c001ad4e:	6a 00                	push   0x0
c001ad50:	56                   	push   esi
c001ad51:	e8 9a 57 fe ff       	call   c00004f0 <memset>
c001ad56:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad5c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad60:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad66:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad6e:	83 c4 10             	add    esp,0x10
c001ad71:	48                   	dec    eax
c001ad72:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad77:	89 c1                	mov    ecx,eax
c001ad79:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad7f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad84:	09 c8                	or     eax,ecx
c001ad86:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad8c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad8f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad96:	66 25 00 7f          	and    ax,0x7f00
c001ad9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad9e:	66 0d 27 80          	or     ax,0x8027
c001ada2:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ada7:	66 89 06             	mov    WORD PTR [esi],ax
c001adaa:	19 c0                	sbb    eax,eax
c001adac:	83 e0 f0             	and    eax,0xfffffff0
c001adaf:	83 c0 35             	add    eax,0x35
c001adb2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001adb5:	89 e8                	mov    eax,ebp
c001adb7:	c1 e8 10             	shr    eax,0x10
c001adba:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001adbd:	89 e8                	mov    eax,ebp
c001adbf:	c1 e8 18             	shr    eax,0x18
c001adc2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001adc5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001adc9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001adcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001add0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001add3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001add7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001addb:	89 d6                	mov    esi,edx
c001addd:	31 c0                	xor    eax,eax
c001addf:	c1 e6 07             	shl    esi,0x7
c001ade2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ade6:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001adec:	80 e1 88             	and    cl,0x88
c001adef:	74 0a                	je     c001adfb <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001adf1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001adf6:	74 0a                	je     c001ae02 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001adf8:	40                   	inc    eax
c001adf9:	eb eb                	jmp    c001ade6 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001adfb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae00:	75 17                	jne    c001ae19 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ae02:	83 ec 0c             	sub    esp,0xc
c001ae05:	68 9d f4 01 c0       	push   0xc001f49d
c001ae0a:	e8 0d fd fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	b8 01 00 00 00       	mov    eax,0x1
c001ae17:	eb 5d                	jmp    c001ae76 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae19:	b8 01 00 00 00       	mov    eax,0x1
c001ae1e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ae22:	c1 e2 07             	shl    edx,0x7
c001ae25:	d3 e0                	shl    eax,cl
c001ae27:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae2b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae31:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae37:	85 c8                	test   eax,ecx
c001ae39:	74 16                	je     c001ae51 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae3b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae41:	0f ba e1 1e          	bt     ecx,0x1e
c001ae45:	73 ea                	jae    c001ae31 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae47:	83 ec 0c             	sub    esp,0xc
c001ae4a:	68 ab f4 01 c0       	push   0xc001f4ab
c001ae4f:	eb b9                	jmp    c001ae0a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae51:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae57:	0f ba e0 1e          	bt     eax,0x1e
c001ae5b:	72 b5                	jb     c001ae12 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae5d:	31 c0                	xor    eax,eax
c001ae5f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae64:	75 10                	jne    c001ae76 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae66:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae6c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae76:	83 c4 2c             	add    esp,0x2c
c001ae79:	5b                   	pop    ebx
c001ae7a:	5e                   	pop    esi
c001ae7b:	5f                   	pop    edi
c001ae7c:	5d                   	pop    ebp
c001ae7d:	c3                   	ret    

c001ae7e <SATA::read(unsigned long long, int, void*)>:
c001ae7e:	57                   	push   edi
c001ae7f:	b8 04 00 00 00       	mov    eax,0x4
c001ae84:	56                   	push   esi
c001ae85:	53                   	push   ebx
c001ae86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae8e:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae99:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae9f:	77 25                	ja     c001aec6 <SATA::read(unsigned long long, int, void*)+0x48>
c001aea1:	b8 06 00 00 00       	mov    eax,0x6
c001aea6:	85 f6                	test   esi,esi
c001aea8:	74 1c                	je     c001aec6 <SATA::read(unsigned long long, int, void*)+0x48>
c001aeaa:	50                   	push   eax
c001aeab:	50                   	push   eax
c001aeac:	6a 00                	push   0x0
c001aeae:	56                   	push   esi
c001aeaf:	52                   	push   edx
c001aeb0:	53                   	push   ebx
c001aeb1:	51                   	push   ecx
c001aeb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeb6:	e8 77 fd ff ff       	call   c001ac32 <SATA::access(unsigned long long, int, void*, bool)>
c001aebb:	83 c4 20             	add    esp,0x20
c001aebe:	85 c0                	test   eax,eax
c001aec0:	0f 95 c0             	setne  al
c001aec3:	0f b6 c0             	movzx  eax,al
c001aec6:	5b                   	pop    ebx
c001aec7:	5e                   	pop    esi
c001aec8:	5f                   	pop    edi
c001aec9:	c3                   	ret    

c001aeca <SATA::write(unsigned long long, int, void*)>:
c001aeca:	55                   	push   ebp
c001aecb:	b8 04 00 00 00       	mov    eax,0x4
c001aed0:	57                   	push   edi
c001aed1:	56                   	push   esi
c001aed2:	53                   	push   ebx
c001aed3:	83 ec 0c             	sub    esp,0xc
c001aed6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aeda:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aede:	8d 73 ff             	lea    esi,[ebx-0x1]
c001aee1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001aee5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001aee9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001aeef:	77 3d                	ja     c001af2e <SATA::write(unsigned long long, int, void*)+0x64>
c001aef1:	b8 06 00 00 00       	mov    eax,0x6
c001aef6:	85 ed                	test   ebp,ebp
c001aef8:	74 34                	je     c001af2e <SATA::write(unsigned long long, int, void*)+0x64>
c001aefa:	c1 e3 09             	shl    ebx,0x9
c001aefd:	01 eb                	add    ebx,ebp
c001aeff:	89 d6                	mov    esi,edx
c001af01:	89 cf                	mov    edi,ecx
c001af03:	83 c6 01             	add    esi,0x1
c001af06:	83 d7 00             	adc    edi,0x0
c001af09:	50                   	push   eax
c001af0a:	50                   	push   eax
c001af0b:	6a 01                	push   0x1
c001af0d:	55                   	push   ebp
c001af0e:	81 c5 00 02 00 00    	add    ebp,0x200
c001af14:	6a 01                	push   0x1
c001af16:	51                   	push   ecx
c001af17:	52                   	push   edx
c001af18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af1c:	e8 11 fd ff ff       	call   c001ac32 <SATA::access(unsigned long long, int, void*, bool)>
c001af21:	83 c4 20             	add    esp,0x20
c001af24:	89 f2                	mov    edx,esi
c001af26:	89 f9                	mov    ecx,edi
c001af28:	39 dd                	cmp    ebp,ebx
c001af2a:	75 d3                	jne    c001aeff <SATA::write(unsigned long long, int, void*)+0x35>
c001af2c:	31 c0                	xor    eax,eax
c001af2e:	83 c4 0c             	add    esp,0xc
c001af31:	5b                   	pop    ebx
c001af32:	5e                   	pop    esi
c001af33:	5f                   	pop    edi
c001af34:	5d                   	pop    ebp
c001af35:	c3                   	ret    

c001af36 <SATAPI::write(unsigned long long, int, void*)>:
c001af36:	b8 03 00 00 00       	mov    eax,0x3
c001af3b:	c3                   	ret    

c001af3c <SATAPI::close(int, int, void*)>:
c001af3c:	83 ec 0c             	sub    esp,0xc
c001af3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af49:	85 c0                	test   eax,eax
c001af4b:	74 0c                	je     c001af59 <SATAPI::close(int, int, void*)+0x1d>
c001af4d:	83 ec 0c             	sub    esp,0xc
c001af50:	8b 10                	mov    edx,DWORD PTR [eax]
c001af52:	50                   	push   eax
c001af53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af56:	83 c4 10             	add    esp,0x10
c001af59:	31 c0                	xor    eax,eax
c001af5b:	83 c4 0c             	add    esp,0xc
c001af5e:	c3                   	ret    
c001af5f:	90                   	nop

c001af60 <SATAPI::SATAPI()>:
c001af60:	83 ec 0c             	sub    esp,0xc
c001af63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af67:	83 ec 04             	sub    esp,0x4
c001af6a:	68 00 08 00 00       	push   0x800
c001af6f:	68 f4 f4 01 c0       	push   0xc001f4f4
c001af74:	50                   	push   eax
c001af75:	e8 b0 13 ff ff       	call   c000c32a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af7a:	83 c4 10             	add    esp,0x10
c001af7d:	ba 54 f6 01 c0       	mov    edx,0xc001f654
c001af82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af86:	89 10                	mov    DWORD PTR [eax],edx
c001af88:	90                   	nop
c001af89:	83 c4 0c             	add    esp,0xc
c001af8c:	c3                   	ret    
c001af8d:	90                   	nop

c001af8e <SATAPI::diskRemoved()>:
c001af8e:	c3                   	ret    
c001af8f:	90                   	nop

c001af90 <SATAPI::diskInserted()>:
c001af90:	83 ec 18             	sub    esp,0x18
c001af93:	68 00 f5 01 c0       	push   0xc001f500
c001af98:	e8 7f fb fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001af9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afa1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001afa8:	83 c4 1c             	add    esp,0x1c
c001afab:	c3                   	ret    

c001afac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001afac:	55                   	push   ebp
c001afad:	57                   	push   edi
c001afae:	56                   	push   esi
c001afaf:	53                   	push   ebx
c001afb0:	83 ec 38             	sub    esp,0x38
c001afb3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001afb7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001afbb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001afbf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afc3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001afc7:	68 18 f5 01 c0       	push   0xc001f518
c001afcc:	e8 4b fb fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001afd1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001afd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001afdd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afe1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001afe7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afeb:	c1 e0 07             	shl    eax,0x7
c001afee:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aff2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aff6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b000:	58                   	pop    eax
c001b001:	5a                   	pop    edx
c001b002:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b006:	8d 58 02             	lea    ebx,[eax+0x2]
c001b009:	c1 e3 07             	shl    ebx,0x7
c001b00c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b010:	53                   	push   ebx
c001b011:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b017:	e8 78 ec ff ff       	call   c0019c94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b01c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	b8 01 00 00 00       	mov    eax,0x1
c001b028:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b02d:	0f 84 4c 02 00 00    	je     c001b27f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b033:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b039:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b03b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b041:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b047:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b04b:	c1 e1 05             	shl    ecx,0x5
c001b04e:	01 c8                	add    eax,ecx
c001b050:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b052:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b058:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b05e:	89 08                	mov    DWORD PTR [eax],ecx
c001b060:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b066:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b06c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b072:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b075:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b078:	50                   	push   eax
c001b079:	68 90 00 00 00       	push   0x90
c001b07e:	6a 00                	push   0x0
c001b080:	53                   	push   ebx
c001b081:	e8 6a 54 fe ff       	call   c00004f0 <memset>
c001b086:	b9 0c 00 00 00       	mov    ecx,0xc
c001b08b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b08f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b091:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b097:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b09b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b0a1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b0a5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b0a9:	48                   	dec    eax
c001b0aa:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0af:	89 c1                	mov    ecx,eax
c001b0b1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b0b7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b0bc:	09 c8                	or     eax,ecx
c001b0be:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b0c4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b0c7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b0ce:	66 25 00 7f          	and    ax,0x7f00
c001b0d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0d6:	66 0d 27 80          	or     ax,0x8027
c001b0da:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b0de:	66 89 03             	mov    WORD PTR [ebx],ax
c001b0e1:	89 d0                	mov    eax,edx
c001b0e3:	c1 ea 18             	shr    edx,0x18
c001b0e6:	c1 e8 10             	shr    eax,0x10
c001b0e9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b0ec:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b0ef:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b0f3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b0f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b0fa:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b0fd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b101:	83 c4 10             	add    esp,0x10
c001b104:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b108:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b10c:	31 c0                	xor    eax,eax
c001b10e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b114:	80 e1 88             	and    cl,0x88
c001b117:	74 0a                	je     c001b123 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b119:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b11e:	74 0a                	je     c001b12a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b120:	40                   	inc    eax
c001b121:	eb eb                	jmp    c001b10e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b123:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b128:	75 16                	jne    c001b140 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b12a:	83 ec 0c             	sub    esp,0xc
c001b12d:	68 32 f5 01 c0       	push   0xc001f532
c001b132:	e8 e5 f9 fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001b137:	5f                   	pop    edi
c001b138:	5d                   	pop    ebp
c001b139:	68 47 f5 01 c0       	push   0xc001f547
c001b13e:	eb 4f                	jmp    c001b18f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b140:	be 01 00 00 00       	mov    esi,0x1
c001b145:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b149:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b14d:	d3 e6                	shl    esi,cl
c001b14f:	c1 e7 07             	shl    edi,0x7
c001b152:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b158:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b15d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b161:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b167:	85 c6                	test   esi,eax
c001b169:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b16f:	0f 84 cb 00 00 00    	je     c001b240 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b175:	0f ba e0 1e          	bt     eax,0x1e
c001b179:	73 2c                	jae    c001b1a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b17b:	83 ec 0c             	sub    esp,0xc
c001b17e:	68 59 f5 01 c0       	push   0xc001f559
c001b183:	e8 94 f9 fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001b188:	5b                   	pop    ebx
c001b189:	5e                   	pop    esi
c001b18a:	68 6c f5 01 c0       	push   0xc001f56c
c001b18f:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b195:	e8 64 dc fe ff       	call   c0008dfe <VgaText::puts(char const*)>
c001b19a:	83 c4 10             	add    esp,0x10
c001b19d:	b8 01 00 00 00       	mov    eax,0x1
c001b1a2:	e9 d8 00 00 00       	jmp    c001b27f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b1a7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b1ad:	83 f8 0d             	cmp    eax,0xd
c001b1b0:	77 0a                	ja     c001b1bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b1b2:	83 ec 0c             	sub    esp,0xc
c001b1b5:	68 c8 00 00 00       	push   0xc8
c001b1ba:	eb 28                	jmp    c001b1e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1bc:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b1c2:	83 f8 0d             	cmp    eax,0xd
c001b1c5:	77 0a                	ja     c001b1d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b1c7:	83 ec 0c             	sub    esp,0xc
c001b1ca:	68 58 02 00 00       	push   0x258
c001b1cf:	eb 13                	jmp    c001b1e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1d1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b1d7:	83 f8 06             	cmp    eax,0x6
c001b1da:	77 10                	ja     c001b1ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b1dc:	83 ec 0c             	sub    esp,0xc
c001b1df:	68 dc 05 00 00       	push   0x5dc
c001b1e4:	e8 5b 8a ff ff       	call   c0013c44 <milliTenthSleep(unsigned int)>
c001b1e9:	83 c4 10             	add    esp,0x10
c001b1ec:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b1f0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b1f3:	75 06                	jne    c001b1fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b1f5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b1f9:	74 15                	je     c001b210 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b1fb:	83 fb 06             	cmp    ebx,0x6
c001b1fe:	77 10                	ja     c001b210 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b200:	83 ec 0c             	sub    esp,0xc
c001b203:	68 c4 09 00 00       	push   0x9c4
c001b208:	e8 37 8a ff ff       	call   c0013c44 <milliTenthSleep(unsigned int)>
c001b20d:	83 c4 10             	add    esp,0x10
c001b210:	43                   	inc    ebx
c001b211:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b217:	0f 85 44 ff ff ff    	jne    c001b161 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b21d:	51                   	push   ecx
c001b21e:	51                   	push   ecx
c001b21f:	68 7d f5 01 c0       	push   0xc001f57d
c001b224:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b22a:	e8 cf db fe ff       	call   c0008dfe <VgaText::puts(char const*)>
c001b22f:	c7 04 24 8d f5 01 c0 	mov    DWORD PTR [esp],0xc001f58d
c001b236:	e8 e1 f8 fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001b23b:	e9 5a ff ff ff       	jmp    c001b19a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b240:	0f ba e0 1e          	bt     eax,0x1e
c001b244:	73 19                	jae    c001b25f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b246:	83 ec 0c             	sub    esp,0xc
c001b249:	68 a1 f5 01 c0       	push   0xc001f5a1
c001b24e:	e8 c9 f8 fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001b253:	58                   	pop    eax
c001b254:	5a                   	pop    edx
c001b255:	68 b6 f5 01 c0       	push   0xc001f5b6
c001b25a:	e9 30 ff ff ff       	jmp    c001b18f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b25f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b264:	74 17                	je     c001b27d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b266:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b26b:	74 10                	je     c001b27d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b26d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b273:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b277:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b27b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b27d:	31 c0                	xor    eax,eax
c001b27f:	83 c4 2c             	add    esp,0x2c
c001b282:	5b                   	pop    ebx
c001b283:	5e                   	pop    esi
c001b284:	5f                   	pop    edi
c001b285:	5d                   	pop    ebp
c001b286:	c3                   	ret    
c001b287:	90                   	nop

c001b288 <SATAPI::eject()>:
c001b288:	57                   	push   edi
c001b289:	b9 03 00 00 00       	mov    ecx,0x3
c001b28e:	83 ec 18             	sub    esp,0x18
c001b291:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b295:	fc                   	cld    
c001b296:	31 c0                	xor    eax,eax
c001b298:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b29a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b29f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b2a4:	50                   	push   eax
c001b2a5:	6a 00                	push   0x0
c001b2a7:	6a 00                	push   0x0
c001b2a9:	6a 00                	push   0x0
c001b2ab:	6a 00                	push   0x0
c001b2ad:	6a 02                	push   0x2
c001b2af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2b3:	50                   	push   eax
c001b2b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2b8:	e8 ef fc ff ff       	call   c001afac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2bd:	31 c0                	xor    eax,eax
c001b2bf:	83 c4 38             	add    esp,0x38
c001b2c2:	5f                   	pop    edi
c001b2c3:	c3                   	ret    

c001b2c4 <SATAPI::detectMedia()>:
c001b2c4:	53                   	push   ebx
c001b2c5:	83 ec 14             	sub    esp,0x14
c001b2c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2cc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b2d2:	e8 f9 27 ff ff       	call   c000dad0 <VCache::writeWriteBuffer()>
c001b2d7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b2dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2e1:	83 c4 18             	add    esp,0x18
c001b2e4:	5b                   	pop    ebx
c001b2e5:	e9 d6 27 ff ff       	jmp    c000dac0 <VCache::invalidateReadBuffer()>

c001b2ea <SATAPI::open(int, int, void*)>:
c001b2ea:	56                   	push   esi
c001b2eb:	53                   	push   ebx
c001b2ec:	51                   	push   ecx
c001b2ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2f5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b2ff:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b305:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b30f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b313:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b31d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b323:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b32a:	e8 2e ce fe ff       	call   c000815d <Phys::allocatePage()>
c001b32f:	89 c6                	mov    esi,eax
c001b331:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b337:	81 c6 00 10 00 00    	add    esi,0x1000
c001b33d:	e8 1b ce fe ff       	call   c000815d <Phys::allocatePage()>
c001b342:	39 c6                	cmp    esi,eax
c001b344:	74 10                	je     c001b356 <SATAPI::open(int, int, void*)+0x6c>
c001b346:	83 ec 0c             	sub    esp,0xc
c001b349:	68 c9 f5 01 c0       	push   0xc001f5c9
c001b34e:	e8 98 53 ff ff       	call   c00106eb <KePanic(char const*)>
c001b353:	83 c4 10             	add    esp,0x10
c001b356:	83 ec 0c             	sub    esp,0xc
c001b359:	6a 02                	push   0x2
c001b35b:	e8 69 e5 fe ff       	call   c00098c9 <Virt::allocateKernelVirtualPages(int)>
c001b360:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b366:	6a 03                	push   0x3
c001b368:	50                   	push   eax
c001b369:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b36f:	ff 35 d0 0a 02 c0    	push   DWORD PTR ds:0xc0020ad0
c001b375:	e8 e4 eb fe ff       	call   c0009f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001b37a:	83 c4 14             	add    esp,0x14
c001b37d:	68 74 01 00 00       	push   0x174
c001b382:	e8 fe ca fe ff       	call   c0007e85 <malloc>
c001b387:	83 c4 0c             	add    esp,0xc
c001b38a:	89 c6                	mov    esi,eax
c001b38c:	6a 00                	push   0x0
c001b38e:	68 ff ff ff 7f       	push   0x7fffffff
c001b393:	6a 00                	push   0x0
c001b395:	6a 00                	push   0x0
c001b397:	53                   	push   ebx
c001b398:	68 df f5 01 c0       	push   0xc001f5df
c001b39d:	50                   	push   eax
c001b39e:	e8 33 1c ff ff       	call   c000cfd6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b3a3:	83 c4 14             	add    esp,0x14
c001b3a6:	56                   	push   esi
c001b3a7:	e8 e0 1c ff ff       	call   c000d08c <LogicalDisk::assignDriveLetter()>
c001b3ac:	5a                   	pop    edx
c001b3ad:	0f be c0             	movsx  eax,al
c001b3b0:	59                   	pop    ecx
c001b3b1:	50                   	push   eax
c001b3b2:	68 f8 f3 01 c0       	push   0xc001f3f8
c001b3b7:	e8 60 f7 fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001b3bc:	58                   	pop    eax
c001b3bd:	5a                   	pop    edx
c001b3be:	56                   	push   esi
c001b3bf:	53                   	push   ebx
c001b3c0:	e8 97 0b ff ff       	call   c000bf5c <Device::addChild(Device*)>
c001b3c5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b3cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3ce:	e8 bf 0f ff ff       	call   c000c392 <PhysicalDisk::startCache()>
c001b3d3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b3da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3dd:	e8 e2 fe ff ff       	call   c001b2c4 <SATAPI::detectMedia()>
c001b3e2:	83 c4 14             	add    esp,0x14
c001b3e5:	31 c0                	xor    eax,eax
c001b3e7:	5b                   	pop    ebx
c001b3e8:	5e                   	pop    esi
c001b3e9:	c3                   	ret    

c001b3ea <SATAPI::read(unsigned long long, int, void*)>:
c001b3ea:	57                   	push   edi
c001b3eb:	56                   	push   esi
c001b3ec:	53                   	push   ebx
c001b3ed:	83 ec 3c             	sub    esp,0x3c
c001b3f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b3f4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b3f8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b3fc:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b400:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b404:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b408:	68 ed f5 01 c0       	push   0xc001f5ed
c001b40d:	e8 0a f7 fe ff       	call   c000ab1c <Dbg::kprintf(char const*, ...)>
c001b412:	83 c4 10             	add    esp,0x10
c001b415:	83 fe 04             	cmp    esi,0x4
c001b418:	7e 10                	jle    c001b42a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b41a:	83 ec 0c             	sub    esp,0xc
c001b41d:	68 fe f5 01 c0       	push   0xc001f5fe
c001b422:	e8 c4 52 ff ff       	call   c00106eb <KePanic(char const*)>
c001b427:	83 c4 10             	add    esp,0x10
c001b42a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b430:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b436:	51                   	push   ecx
c001b437:	50                   	push   eax
c001b438:	83 c0 02             	add    eax,0x2
c001b43b:	c1 e0 07             	shl    eax,0x7
c001b43e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b444:	50                   	push   eax
c001b445:	52                   	push   edx
c001b446:	e8 0d e9 ff ff       	call   c0019d58 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b44b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b44f:	b9 03 00 00 00       	mov    ecx,0x3
c001b454:	fc                   	cld    
c001b455:	31 c0                	xor    eax,eax
c001b457:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b459:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b45e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b463:	83 c4 0c             	add    esp,0xc
c001b466:	6a 00                	push   0x0
c001b468:	6a 00                	push   0x0
c001b46a:	6a 00                	push   0x0
c001b46c:	6a 00                	push   0x0
c001b46e:	6a 02                	push   0x2
c001b470:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b474:	50                   	push   eax
c001b475:	53                   	push   ebx
c001b476:	e8 31 fb ff ff       	call   c001afac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b47b:	83 c4 20             	add    esp,0x20
c001b47e:	85 c0                	test   eax,eax
c001b480:	74 27                	je     c001b4a9 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001b482:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b486:	50                   	push   eax
c001b487:	50                   	push   eax
c001b488:	68 28 f6 01 c0       	push   0xc001f628
c001b48d:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b493:	e8 66 d9 fe ff       	call   c0008dfe <VgaText::puts(char const*)>
c001b498:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b49b:	e8 24 fe ff ff       	call   c001b2c4 <SATAPI::detectMedia()>
c001b4a0:	58                   	pop    eax
c001b4a1:	5a                   	pop    edx
c001b4a2:	68 30 f6 01 c0       	push   0xc001f630
c001b4a7:	eb 69                	jmp    c001b512 <SATAPI::read(unsigned long long, int, void*)+0x128>
c001b4a9:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b4ad:	b9 03 00 00 00       	mov    ecx,0x3
c001b4b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b4b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4b8:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b4bd:	0f c8                	bswap  eax
c001b4bf:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b4c3:	89 f0                	mov    eax,esi
c001b4c5:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4c9:	57                   	push   edi
c001b4ca:	56                   	push   esi
c001b4cb:	c1 e6 0b             	shl    esi,0xb
c001b4ce:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4da:	56                   	push   esi
c001b4db:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4df:	50                   	push   eax
c001b4e0:	53                   	push   ebx
c001b4e1:	e8 c6 fa ff ff       	call   c001afac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4e6:	83 c4 20             	add    esp,0x20
c001b4e9:	85 c0                	test   eax,eax
c001b4eb:	74 37                	je     c001b524 <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001b4ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4f1:	50                   	push   eax
c001b4f2:	50                   	push   eax
c001b4f3:	68 3a f6 01 c0       	push   0xc001f63a
c001b4f8:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b4fe:	e8 fb d8 fe ff       	call   c0008dfe <VgaText::puts(char const*)>
c001b503:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b506:	e8 b9 fd ff ff       	call   c001b2c4 <SATAPI::detectMedia()>
c001b50b:	5a                   	pop    edx
c001b50c:	59                   	pop    ecx
c001b50d:	68 42 f6 01 c0       	push   0xc001f642
c001b512:	ff 35 24 0a 02 c0    	push   DWORD PTR ds:0xc0020a24
c001b518:	e8 e1 d8 fe ff       	call   c0008dfe <VgaText::puts(char const*)>
c001b51d:	83 c4 10             	add    esp,0x10
c001b520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b524:	83 c4 30             	add    esp,0x30
c001b527:	5b                   	pop    ebx
c001b528:	5e                   	pop    esi
c001b529:	5f                   	pop    edi
c001b52a:	c3                   	ret    
c001b52b:	90                   	nop

c001b52c <IOAPIC::close(int, int, void*)>:
c001b52c:	b8 00 00 00 00       	mov    eax,0x0
c001b531:	c3                   	ret    

c001b532 <apicGetBase()>:
c001b532:	55                   	push   ebp
c001b533:	89 e5                	mov    ebp,esp
c001b535:	83 ec 18             	sub    esp,0x18
c001b538:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001b53d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b543:	83 e0 08             	and    eax,0x8
c001b546:	84 c0                	test   al,al
c001b548:	75 07                	jne    c001b551 <apicGetBase()+0x1f>
c001b54a:	b8 00 00 00 00       	mov    eax,0x0
c001b54f:	eb 21                	jmp    c001b572 <apicGetBase()+0x40>
c001b551:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001b556:	83 ec 08             	sub    esp,0x8
c001b559:	6a 1b                	push   0x1b
c001b55b:	50                   	push   eax
c001b55c:	e8 5d bf fe ff       	call   c00074be <Computer::rdmsr(unsigned int)>
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b567:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b56a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b56d:	25 00 00 ff ff       	and    eax,0xffff0000
c001b572:	c9                   	leave  
c001b573:	c3                   	ret    

c001b574 <IOAPIC::IOAPIC()>:
c001b574:	83 ec 0c             	sub    esp,0xc
c001b577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57b:	83 ec 08             	sub    esp,0x8
c001b57e:	68 84 f6 01 c0       	push   0xc001f684
c001b583:	50                   	push   eax
c001b584:	e8 6b 0b ff ff       	call   c000c0f4 <Device::Device(char const*)>
c001b589:	83 c4 10             	add    esp,0x10
c001b58c:	ba 94 f6 01 c0       	mov    edx,0xc001f694
c001b591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b595:	89 10                	mov    DWORD PTR [eax],edx
c001b597:	90                   	nop
c001b598:	83 c4 0c             	add    esp,0xc
c001b59b:	c3                   	ret    

c001b59c <apicOpen()>:
c001b59c:	55                   	push   ebp
c001b59d:	89 e5                	mov    ebp,esp
c001b59f:	53                   	push   ebx
c001b5a0:	83 ec 34             	sub    esp,0x34
c001b5a3:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c001b5a8:	83 f0 01             	xor    eax,0x1
c001b5ab:	84 c0                	test   al,al
c001b5ad:	0f 84 9d 00 00 00    	je     c001b650 <apicOpen()+0xb4>
c001b5b3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b5b7:	a0 a0 32 02 c0       	mov    al,ds:0xc00232a0
c001b5bc:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b5bf:	0f 83 84 00 00 00    	jae    c001b649 <apicOpen()+0xad>
c001b5c5:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b5d2:	e8 ae c8 fe ff       	call   c0007e85 <malloc>
c001b5d7:	83 c4 10             	add    esp,0x10
c001b5da:	89 c3                	mov    ebx,eax
c001b5dc:	83 ec 0c             	sub    esp,0xc
c001b5df:	53                   	push   ebx
c001b5e0:	e8 8f ff ff ff       	call   c001b574 <IOAPIC::IOAPIC()>
c001b5e5:	83 c4 10             	add    esp,0x10
c001b5e8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b5eb:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5ee:	25 ff 00 00 00       	and    eax,0xff
c001b5f3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b5f6:	89 14 85 a0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb760],edx
c001b5fd:	a1 80 48 02 c0       	mov    eax,ds:0xc0024880
c001b602:	40                   	inc    eax
c001b603:	a3 80 48 02 c0       	mov    ds:0xc0024880,eax
c001b608:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c001b60d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b613:	83 ec 08             	sub    esp,0x8
c001b616:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b619:	50                   	push   eax
c001b61a:	e8 3d 09 ff ff       	call   c000bf5c <Device::addChild(Device*)>
c001b61f:	83 c4 10             	add    esp,0x10
c001b622:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b625:	8b 00                	mov    eax,DWORD PTR [eax]
c001b627:	83 c0 08             	add    eax,0x8
c001b62a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b62c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b62f:	25 ff 00 00 00       	and    eax,0xff
c001b634:	6a 00                	push   0x0
c001b636:	6a 00                	push   0x0
c001b638:	50                   	push   eax
c001b639:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b63c:	ff d2                	call   edx
c001b63e:	83 c4 10             	add    esp,0x10
c001b641:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b644:	e9 6e ff ff ff       	jmp    c001b5b7 <apicOpen()+0x1b>
c001b649:	c6 05 c0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248c0,0x1
c001b650:	e8 dd fe ff ff       	call   c001b532 <apicGetBase()>
c001b655:	05 f0 00 00 00       	add    eax,0xf0
c001b65a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b65d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b660:	8b 00                	mov    eax,DWORD PTR [eax]
c001b662:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b665:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b66c:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b673:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b676:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b679:	89 10                	mov    DWORD PTR [eax],edx
c001b67b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b682:	a1 f0 31 02 c0       	mov    eax,ds:0xc00231f0
c001b687:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b68a:	7d 70                	jge    c001b6fc <apicOpen()+0x160>
c001b68c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b68f:	8b 04 85 00 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce00]
c001b696:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b699:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b69c:	8b 04 85 00 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce00]
c001b6a3:	c1 e8 08             	shr    eax,0x8
c001b6a6:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b6aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b6ad:	8b 04 85 00 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce00]
c001b6b4:	c1 e8 18             	shr    eax,0x18
c001b6b7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b6ba:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b6be:	75 37                	jne    c001b6f7 <apicOpen()+0x15b>
c001b6c0:	e8 6d fe ff ff       	call   c001b532 <apicGetBase()>
c001b6c5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b6c9:	75 07                	jne    c001b6d2 <apicOpen()+0x136>
c001b6cb:	ba 60 03 00 00       	mov    edx,0x360
c001b6d0:	eb 05                	jmp    c001b6d7 <apicOpen()+0x13b>
c001b6d2:	ba 50 03 00 00       	mov    edx,0x350
c001b6d7:	01 d0                	add    eax,edx
c001b6d9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6dc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6df:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6e1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b6e4:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b6eb:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b6ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6f2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b6f5:	89 10                	mov    DWORD PTR [eax],edx
c001b6f7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b6fa:	eb 86                	jmp    c001b682 <apicOpen()+0xe6>
c001b6fc:	90                   	nop
c001b6fd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b700:	c9                   	leave  
c001b701:	c3                   	ret    

c001b702 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b702:	55                   	push   ebp
c001b703:	89 e5                	mov    ebp,esp
c001b705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b708:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b70e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b711:	72 1d                	jb     c001b730 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b716:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b71f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b725:	01 d0                	add    eax,edx
c001b727:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b72a:	73 04                	jae    c001b730 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b72c:	b0 01                	mov    al,0x1
c001b72e:	eb 02                	jmp    c001b732 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b730:	b0 00                	mov    al,0x0
c001b732:	5d                   	pop    ebp
c001b733:	c3                   	ret    

c001b734 <IOAPIC::read(int)>:
c001b734:	55                   	push   ebp
c001b735:	89 e5                	mov    ebp,esp
c001b737:	83 ec 10             	sub    esp,0x10
c001b73a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b73d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b743:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b746:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b749:	31 d2                	xor    edx,edx
c001b74b:	88 c2                	mov    dl,al
c001b74d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b750:	89 10                	mov    DWORD PTR [eax],edx
c001b752:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b755:	83 c0 10             	add    eax,0x10
c001b758:	8b 00                	mov    eax,DWORD PTR [eax]
c001b75a:	c9                   	leave  
c001b75b:	c3                   	ret    

c001b75c <IOAPIC::open(int, int, void*)>:
c001b75c:	55                   	push   ebp
c001b75d:	89 e5                	mov    ebp,esp
c001b75f:	57                   	push   edi
c001b760:	56                   	push   esi
c001b761:	53                   	push   ebx
c001b762:	83 ec 04             	sub    esp,0x4
c001b765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b768:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b76b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b774:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b77a:	8b 14 85 e0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd20]
c001b781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b784:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b78d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b793:	8b 14 85 60 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcca0]
c001b79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b79d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b7a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b7ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7b5:	89 c6                	mov    esi,eax
c001b7b7:	81 e6 ff 00 00 00    	and    esi,0xff
c001b7bd:	89 d0                	mov    eax,edx
c001b7bf:	ba 00 00 00 00       	mov    edx,0x0
c001b7c4:	89 c7                	mov    edi,eax
c001b7c6:	83 e7 ff             	and    edi,0xffffffff
c001b7c9:	89 f9                	mov    ecx,edi
c001b7cb:	89 d0                	mov    eax,edx
c001b7cd:	25 ff 00 00 00       	and    eax,0xff
c001b7d2:	89 c3                	mov    ebx,eax
c001b7d4:	89 c8                	mov    eax,ecx
c001b7d6:	89 da                	mov    edx,ebx
c001b7d8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7db:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b7de:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b7e2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b7e6:	83 e0 00             	and    eax,0x0
c001b7e9:	09 d0                	or     eax,edx
c001b7eb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b7ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7f2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7f8:	8d 50 01             	lea    edx,[eax+0x1]
c001b7fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7fe:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b804:	31 d2                	xor    edx,edx
c001b806:	88 c2                	mov    dl,al
c001b808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b80b:	83 c2 08             	add    edx,0x8
c001b80e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b812:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b818:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b81e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b822:	6a 01                	push   0x1
c001b824:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b827:	e8 08 ff ff ff       	call   c001b734 <IOAPIC::read(int)>
c001b82c:	83 c4 08             	add    esp,0x8
c001b82f:	c1 f8 10             	sar    eax,0x10
c001b832:	25 ff 00 00 00       	and    eax,0xff
c001b837:	8d 50 01             	lea    edx,[eax+0x1]
c001b83a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b83d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b843:	b8 00 00 00 00       	mov    eax,0x0
c001b848:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b84b:	5b                   	pop    ebx
c001b84c:	5e                   	pop    esi
c001b84d:	5f                   	pop    edi
c001b84e:	5d                   	pop    ebp
c001b84f:	c3                   	ret    

c001b850 <IOAPIC::write(int, int)>:
c001b850:	55                   	push   ebp
c001b851:	89 e5                	mov    ebp,esp
c001b853:	83 ec 10             	sub    esp,0x10
c001b856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b859:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b85f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b862:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b865:	31 d2                	xor    edx,edx
c001b867:	88 c2                	mov    dl,al
c001b869:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b86c:	89 10                	mov    DWORD PTR [eax],edx
c001b86e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b871:	8d 50 10             	lea    edx,[eax+0x10]
c001b874:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b877:	89 02                	mov    DWORD PTR [edx],eax
c001b879:	90                   	nop
c001b87a:	c9                   	leave  
c001b87b:	c3                   	ret    

c001b87c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b87c:	55                   	push   ebp
c001b87d:	89 e5                	mov    ebp,esp
c001b87f:	53                   	push   ebx
c001b880:	83 ec 2c             	sub    esp,0x2c
c001b883:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b886:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b889:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b88c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b88f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b892:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b895:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b898:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b89b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b89e:	88 d8                	mov    al,bl
c001b8a0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b8a3:	88 c8                	mov    al,cl
c001b8a5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b8a8:	88 d0                	mov    al,dl
c001b8aa:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b8ad:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8b0:	25 ff 00 00 00       	and    eax,0xff
c001b8b5:	83 c0 08             	add    eax,0x8
c001b8b8:	01 c0                	add    eax,eax
c001b8ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b8bd:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8c0:	25 ff 00 00 00       	and    eax,0xff
c001b8c5:	83 c0 08             	add    eax,0x8
c001b8c8:	01 c0                	add    eax,eax
c001b8ca:	40                   	inc    eax
c001b8cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b8ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8d1:	50                   	push   eax
c001b8d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8d5:	e8 5a fe ff ff       	call   c001b734 <IOAPIC::read(int)>
c001b8da:	83 c4 08             	add    esp,0x8
c001b8dd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b8e0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b8e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b8ea:	c1 e0 18             	shl    eax,0x18
c001b8ed:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b8f0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b8f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8f6:	52                   	push   edx
c001b8f7:	50                   	push   eax
c001b8f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8fb:	e8 50 ff ff ff       	call   c001b850 <IOAPIC::write(int, int)>
c001b900:	83 c4 0c             	add    esp,0xc
c001b903:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b906:	50                   	push   eax
c001b907:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b90a:	e8 25 fe ff ff       	call   c001b734 <IOAPIC::read(int)>
c001b90f:	83 c4 08             	add    esp,0x8
c001b912:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b915:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b91c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b923:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b92a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b92e:	74 09                	je     c001b939 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b930:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b937:	eb 07                	jmp    c001b940 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b939:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b940:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b944:	74 09                	je     c001b94f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b946:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b94d:	eb 07                	jmp    c001b956 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b94f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b956:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b95d:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b960:	25 ff 00 00 00       	and    eax,0xff
c001b965:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b968:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b96b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b96e:	52                   	push   edx
c001b96f:	50                   	push   eax
c001b970:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b973:	e8 d8 fe ff ff       	call   c001b850 <IOAPIC::write(int, int)>
c001b978:	83 c4 0c             	add    esp,0xc
c001b97b:	90                   	nop
c001b97c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b97f:	c9                   	leave  
c001b980:	c3                   	ret    
c001b981:	66 90                	xchg   ax,ax
c001b983:	90                   	nop

c001b984 <APICTimer::close(int, int, void*)>:
c001b984:	b8 00 00 00 00       	mov    eax,0x0
c001b989:	c3                   	ret    
c001b98a:	66 90                	xchg   ax,ax

c001b98c <apicTimerHandler(regs*, void*)>:
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b993:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b995:	b8 10 27 00 00       	mov    eax,0x2710
c001b99a:	ba 00 00 00 00       	mov    edx,0x0
c001b99f:	f7 f1                	div    ecx
c001b9a1:	83 ec 0c             	sub    esp,0xc
c001b9a4:	50                   	push   eax
c001b9a5:	e8 46 1e ff ff       	call   c000d7f0 <timerHandler(unsigned int)>
c001b9aa:	83 c4 10             	add    esp,0x10
c001b9ad:	90                   	nop
c001b9ae:	83 c4 0c             	add    esp,0xc
c001b9b1:	c3                   	ret    
c001b9b2:	66 90                	xchg   ax,ax

c001b9b4 <APICTimer::open(int, int, void*)>:
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9bd:	83 c0 24             	add    eax,0x24
c001b9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9c2:	83 ec 08             	sub    esp,0x8
c001b9c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9cd:	ff d0                	call   eax
c001b9cf:	83 c4 10             	add    esp,0x10
c001b9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9da:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9e8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b9ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9f2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b9f8:	83 ec 0c             	sub    esp,0xc
c001b9fb:	51                   	push   ecx
c001b9fc:	6a 01                	push   0x1
c001b9fe:	68 8c b9 01 c0       	push   0xc001b98c
c001ba03:	52                   	push   edx
c001ba04:	50                   	push   eax
c001ba05:	e8 fe 04 ff ff       	call   c000bf08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba0a:	83 c4 20             	add    esp,0x20
c001ba0d:	89 c2                	mov    edx,eax
c001ba0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba13:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba19:	b8 00 00 00 00       	mov    eax,0x0
c001ba1e:	83 c4 0c             	add    esp,0xc
c001ba21:	c3                   	ret    
c001ba22:	66 90                	xchg   ax,ax

c001ba24 <APICTimer::write(int)>:
c001ba24:	83 ec 0c             	sub    esp,0xc
c001ba27:	83 ec 0c             	sub    esp,0xc
c001ba2a:	68 b8 f6 01 c0       	push   0xc001f6b8
c001ba2f:	e8 b7 4c ff ff       	call   c00106eb <KePanic(char const*)>
c001ba34:	83 c4 10             	add    esp,0x10
c001ba37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba3f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba45:	90                   	nop
c001ba46:	83 c4 0c             	add    esp,0xc
c001ba49:	c3                   	ret    
c001ba4a:	66 90                	xchg   ax,ax

c001ba4c <APICTimer::APICTimer()>:
c001ba4c:	83 ec 0c             	sub    esp,0xc
c001ba4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba53:	83 ec 08             	sub    esp,0x8
c001ba56:	68 c8 f6 01 c0       	push   0xc001f6c8
c001ba5b:	50                   	push   eax
c001ba5c:	e8 c3 1c ff ff       	call   c000d724 <Timer::Timer(char const*)>
c001ba61:	83 c4 10             	add    esp,0x10
c001ba64:	ba dc f6 01 c0       	mov    edx,0xc001f6dc
c001ba69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6d:	89 10                	mov    DWORD PTR [eax],edx
c001ba6f:	90                   	nop
c001ba70:	83 c4 0c             	add    esp,0xc
c001ba73:	c3                   	ret    

c001ba74 <PIT::write(int)>:
c001ba74:	83 ec 10             	sub    esp,0x10
c001ba77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba89:	a3 c4 48 02 c0       	mov    ds:0xc00248c4,eax
c001ba8e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba93:	99                   	cdq    
c001ba94:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba9c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001baa3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001baa8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001baac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bab1:	ee                   	out    dx,al
c001bab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab6:	25 ff 00 00 00       	and    eax,0xff
c001babb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001bac2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bac6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001baca:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bacf:	ee                   	out    dx,al
c001bad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bad4:	c1 f8 08             	sar    eax,0x8
c001bad7:	25 ff 00 00 00       	and    eax,0xff
c001badc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001bae3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bae7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001baeb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001baf0:	ee                   	out    dx,al
c001baf1:	90                   	nop
c001baf2:	83 c4 10             	add    esp,0x10
c001baf5:	c3                   	ret    
c001baf6:	66 90                	xchg   ax,ax

c001baf8 <pitHandler(regs*, void*)>:
c001baf8:	83 ec 0c             	sub    esp,0xc
c001bafb:	8b 0d c4 48 02 c0    	mov    ecx,DWORD PTR ds:0xc00248c4
c001bb01:	b8 10 27 00 00       	mov    eax,0x2710
c001bb06:	99                   	cdq    
c001bb07:	f7 f9                	idiv   ecx
c001bb09:	83 ec 0c             	sub    esp,0xc
c001bb0c:	50                   	push   eax
c001bb0d:	e8 de 1c ff ff       	call   c000d7f0 <timerHandler(unsigned int)>
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	90                   	nop
c001bb16:	83 c4 0c             	add    esp,0xc
c001bb19:	c3                   	ret    
c001bb1a:	66 90                	xchg   ax,ax

c001bb1c <PIT::open(int, int, void*)>:
c001bb1c:	83 ec 0c             	sub    esp,0xc
c001bb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb23:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb25:	83 c0 24             	add    eax,0x24
c001bb28:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb2a:	83 ec 08             	sub    esp,0x8
c001bb2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb35:	ff d0                	call   eax
c001bb37:	83 c4 10             	add    esp,0x10
c001bb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3e:	83 ec 0c             	sub    esp,0xc
c001bb41:	6a 00                	push   0x0
c001bb43:	6a 01                	push   0x1
c001bb45:	68 f8 ba 01 c0       	push   0xc001baf8
c001bb4a:	6a 00                	push   0x0
c001bb4c:	50                   	push   eax
c001bb4d:	e8 b6 03 ff ff       	call   c000bf08 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb52:	83 c4 20             	add    esp,0x20
c001bb55:	89 c2                	mov    edx,eax
c001bb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb61:	b8 00 00 00 00       	mov    eax,0x0
c001bb66:	83 c4 0c             	add    esp,0xc
c001bb69:	c3                   	ret    
c001bb6a:	66 90                	xchg   ax,ax

c001bb6c <PIT::close(int, int, void*)>:
c001bb6c:	83 ec 0c             	sub    esp,0xc
c001bb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb73:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb81:	6a 01                	push   0x1
c001bb83:	68 f8 ba 01 c0       	push   0xc001baf8
c001bb88:	6a 00                	push   0x0
c001bb8a:	50                   	push   eax
c001bb8b:	e8 ae 03 ff ff       	call   c000bf3e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb90:	83 c4 10             	add    esp,0x10
c001bb93:	b8 00 00 00 00       	mov    eax,0x0
c001bb98:	83 c4 0c             	add    esp,0xc
c001bb9b:	c3                   	ret    

c001bb9c <PIT::PIT()>:
c001bb9c:	83 ec 0c             	sub    esp,0xc
c001bb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba3:	83 ec 08             	sub    esp,0x8
c001bba6:	68 04 f7 01 c0       	push   0xc001f704
c001bbab:	50                   	push   eax
c001bbac:	e8 73 1b ff ff       	call   c000d724 <Timer::Timer(char const*)>
c001bbb1:	83 c4 10             	add    esp,0x10
c001bbb4:	ba 2c f7 01 c0       	mov    edx,0xc001f72c
c001bbb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbbd:	89 10                	mov    DWORD PTR [eax],edx
c001bbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbc9:	31 d2                	xor    edx,edx
c001bbcb:	88 c2                	mov    dl,al
c001bbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd1:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbe2:	31 d2                	xor    edx,edx
c001bbe4:	88 c2                	mov    dl,al
c001bbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbea:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bbef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbf9:	8d 50 01             	lea    edx,[eax+0x1]
c001bbfc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bc06:	31 d2                	xor    edx,edx
c001bc08:	88 c2                	mov    dl,al
c001bc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bc12:	83 e1 3f             	and    ecx,0x3f
c001bc15:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bc19:	90                   	nop
c001bc1a:	83 c4 0c             	add    esp,0xc
c001bc1d:	c3                   	ret    
c001bc1e:	66 90                	xchg   ax,ax

c001bc20 <avxDetect>:
c001bc20:	b8 01 00 00 00       	mov    eax,0x1
c001bc25:	0f a2                	cpuid  
c001bc27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bc2d:	74 15                	je     c001bc44 <avxDetect.noAVX>
c001bc2f:	b8 01 00 00 00       	mov    eax,0x1
c001bc34:	0f a2                	cpuid  
c001bc36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bc3c:	74 06                	je     c001bc44 <avxDetect.noAVX>
c001bc3e:	b8 01 00 00 00       	mov    eax,0x1
c001bc43:	c3                   	ret    

c001bc44 <avxDetect.noAVX>:
c001bc44:	b8 00 00 00 00       	mov    eax,0x0
c001bc49:	c3                   	ret    

c001bc4a <avxSave>:
c001bc4a:	53                   	push   ebx
c001bc4b:	52                   	push   edx
c001bc4c:	31 c0                	xor    eax,eax
c001bc4e:	48                   	dec    eax
c001bc4f:	89 c2                	mov    edx,eax
c001bc51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc55:	0f ae 23             	xsave  [ebx]
c001bc58:	5a                   	pop    edx
c001bc59:	5b                   	pop    ebx
c001bc5a:	c3                   	ret    

c001bc5b <avxLoad>:
c001bc5b:	53                   	push   ebx
c001bc5c:	52                   	push   edx
c001bc5d:	31 c0                	xor    eax,eax
c001bc5f:	48                   	dec    eax
c001bc60:	89 c2                	mov    edx,eax
c001bc62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc66:	0f ae 2b             	xrstor [ebx]
c001bc69:	5a                   	pop    edx
c001bc6a:	5b                   	pop    ebx
c001bc6b:	c3                   	ret    

c001bc6c <avxInit>:
c001bc6c:	e8 57 02 00 00       	call   c001bec8 <sseInit>
c001bc71:	50                   	push   eax
c001bc72:	51                   	push   ecx
c001bc73:	0f 20 e0             	mov    eax,cr4
c001bc76:	0d 00 00 04 00       	or     eax,0x40000
c001bc7b:	0f 22 e0             	mov    cr4,eax
c001bc7e:	31 c9                	xor    ecx,ecx
c001bc80:	0f 01 d0             	xgetbv 
c001bc83:	0d 07 00 00 00       	or     eax,0x7
c001bc88:	0f 01 d1             	xsetbv 
c001bc8b:	59                   	pop    ecx
c001bc8c:	58                   	pop    eax
c001bc8d:	c3                   	ret    

c001bc8e <avxClose>:
c001bc8e:	c3                   	ret    

c001bc8f <wouldSheSayYes>:
c001bc8f:	c3                   	ret    
c001bc90:	49                   	dec    ecx
c001bc91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc99:	75 20                	jne    c001bcbb <isr0+0xb>
c001bc9b:	4e                   	dec    esi
c001bc9c:	79 61                	jns    c001bcff <isr7+0x3>
c001bc9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bca3:	66 90                	xchg   ax,ax
c001bca5:	66 90                	xchg   ax,ax
c001bca7:	66 90                	xchg   ax,ax
c001bca9:	66 90                	xchg   ax,ax
c001bcab:	66 90                	xchg   ax,ax
c001bcad:	66 90                	xchg   ax,ax
c001bcaf:	90                   	nop

c001bcb0 <isr0>:
c001bcb0:	fa                   	cli    
c001bcb1:	68 00 00 00 00       	push   0x0
c001bcb6:	68 00 00 00 00       	push   0x0
c001bcbb:	e9 44 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcc0 <isr1>:
c001bcc0:	fa                   	cli    
c001bcc1:	6a 00                	push   0x0
c001bcc3:	6a 01                	push   0x1
c001bcc5:	e9 3a 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcca <isr2>:
c001bcca:	fa                   	cli    
c001bccb:	6a 00                	push   0x0
c001bccd:	6a 02                	push   0x2
c001bccf:	e9 30 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcd4 <isr3>:
c001bcd4:	fa                   	cli    
c001bcd5:	6a 00                	push   0x0
c001bcd7:	6a 03                	push   0x3
c001bcd9:	e9 26 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcde <isr4>:
c001bcde:	fa                   	cli    
c001bcdf:	6a 00                	push   0x0
c001bce1:	6a 04                	push   0x4
c001bce3:	e9 1c 01 00 00       	jmp    c001be04 <int_common_stub>

c001bce8 <isr5>:
c001bce8:	fa                   	cli    
c001bce9:	6a 00                	push   0x0
c001bceb:	6a 05                	push   0x5
c001bced:	e9 12 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcf2 <isr6>:
c001bcf2:	fa                   	cli    
c001bcf3:	6a 00                	push   0x0
c001bcf5:	6a 06                	push   0x6
c001bcf7:	e9 08 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcfc <isr7>:
c001bcfc:	fa                   	cli    
c001bcfd:	6a 00                	push   0x0
c001bcff:	6a 07                	push   0x7
c001bd01:	e9 fe 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd06 <isr8>:
c001bd06:	fa                   	cli    
c001bd07:	6a 08                	push   0x8
c001bd09:	e9 f6 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd0e <isr9>:
c001bd0e:	fa                   	cli    
c001bd0f:	6a 00                	push   0x0
c001bd11:	6a 09                	push   0x9
c001bd13:	e9 ec 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd18 <isr10>:
c001bd18:	fa                   	cli    
c001bd19:	6a 0a                	push   0xa
c001bd1b:	e9 e4 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd20 <isr11>:
c001bd20:	fa                   	cli    
c001bd21:	6a 0b                	push   0xb
c001bd23:	e9 dc 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd28 <isr12>:
c001bd28:	fa                   	cli    
c001bd29:	6a 0c                	push   0xc
c001bd2b:	e9 d4 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd30 <isr13>:
c001bd30:	fa                   	cli    
c001bd31:	6a 0d                	push   0xd
c001bd33:	e9 cc 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd38 <isr14>:
c001bd38:	fa                   	cli    
c001bd39:	6a 0e                	push   0xe
c001bd3b:	e9 c4 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd40 <isr15>:
c001bd40:	fa                   	cli    
c001bd41:	6a 00                	push   0x0
c001bd43:	6a 0f                	push   0xf
c001bd45:	e9 ba 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd4a <isr16>:
c001bd4a:	fa                   	cli    
c001bd4b:	6a 00                	push   0x0
c001bd4d:	6a 10                	push   0x10
c001bd4f:	e9 b0 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd54 <isr17>:
c001bd54:	fa                   	cli    
c001bd55:	6a 00                	push   0x0
c001bd57:	6a 11                	push   0x11
c001bd59:	e9 a6 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd5e <isr18>:
c001bd5e:	fa                   	cli    
c001bd5f:	6a 00                	push   0x0
c001bd61:	6a 12                	push   0x12
c001bd63:	e9 9c 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd68 <irq3>:
c001bd68:	fa                   	cli    
c001bd69:	6a 00                	push   0x0
c001bd6b:	6a 23                	push   0x23
c001bd6d:	e9 92 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd72 <irq4>:
c001bd72:	fa                   	cli    
c001bd73:	6a 00                	push   0x0
c001bd75:	6a 24                	push   0x24
c001bd77:	e9 88 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd7c <irq5>:
c001bd7c:	fa                   	cli    
c001bd7d:	6a 00                	push   0x0
c001bd7f:	6a 25                	push   0x25
c001bd81:	e9 7e 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd86 <irq6>:
c001bd86:	fa                   	cli    
c001bd87:	6a 00                	push   0x0
c001bd89:	6a 26                	push   0x26
c001bd8b:	e9 74 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd90 <irq7>:
c001bd90:	fa                   	cli    
c001bd91:	6a 00                	push   0x0
c001bd93:	6a 27                	push   0x27
c001bd95:	e9 6a 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd9a <irq8>:
c001bd9a:	fa                   	cli    
c001bd9b:	6a 00                	push   0x0
c001bd9d:	6a 28                	push   0x28
c001bd9f:	e9 60 00 00 00       	jmp    c001be04 <int_common_stub>

c001bda4 <irq9>:
c001bda4:	fa                   	cli    
c001bda5:	6a 00                	push   0x0
c001bda7:	6a 29                	push   0x29
c001bda9:	e9 56 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdae <irq10>:
c001bdae:	fa                   	cli    
c001bdaf:	6a 00                	push   0x0
c001bdb1:	6a 2a                	push   0x2a
c001bdb3:	e9 4c 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdb8 <irq11>:
c001bdb8:	fa                   	cli    
c001bdb9:	6a 00                	push   0x0
c001bdbb:	6a 2b                	push   0x2b
c001bdbd:	e9 42 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdc2 <irq12>:
c001bdc2:	fa                   	cli    
c001bdc3:	6a 00                	push   0x0
c001bdc5:	6a 2c                	push   0x2c
c001bdc7:	e9 38 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdcc <irq13>:
c001bdcc:	fa                   	cli    
c001bdcd:	6a 00                	push   0x0
c001bdcf:	6a 2d                	push   0x2d
c001bdd1:	e9 2e 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdd6 <irq14>:
c001bdd6:	fa                   	cli    
c001bdd7:	6a 00                	push   0x0
c001bdd9:	6a 2e                	push   0x2e
c001bddb:	e9 24 00 00 00       	jmp    c001be04 <int_common_stub>

c001bde0 <irq15>:
c001bde0:	fa                   	cli    
c001bde1:	6a 00                	push   0x0
c001bde3:	6a 2f                	push   0x2f
c001bde5:	e9 1a 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdea <irq1>:
c001bdea:	fa                   	cli    
c001bdeb:	6a 00                	push   0x0
c001bded:	6a 21                	push   0x21
c001bdef:	eb 13                	jmp    c001be04 <int_common_stub>

c001bdf1 <irq2>:
c001bdf1:	fa                   	cli    
c001bdf2:	6a 00                	push   0x0
c001bdf4:	6a 22                	push   0x22
c001bdf6:	eb 0c                	jmp    c001be04 <int_common_stub>

c001bdf8 <isr96>:
c001bdf8:	6a 00                	push   0x0
c001bdfa:	6a 60                	push   0x60
c001bdfc:	fb                   	sti    
c001bdfd:	eb 05                	jmp    c001be04 <int_common_stub>

c001bdff <irq0>:
c001bdff:	fa                   	cli    
c001be00:	6a 00                	push   0x0
c001be02:	6a 20                	push   0x20

c001be04 <int_common_stub>:
c001be04:	60                   	pusha  
c001be05:	1e                   	push   ds
c001be06:	06                   	push   es
c001be07:	0f a0                	push   fs
c001be09:	0f a8                	push   gs
c001be0b:	66 b8 10 00          	mov    ax,0x10
c001be0f:	66 8e d8             	mov    ds,ax
c001be12:	66 8e c0             	mov    es,ax
c001be15:	66 8e e0             	mov    fs,ax
c001be18:	66 8e e8             	mov    gs,ax
c001be1b:	54                   	push   esp
c001be1c:	fc                   	cld    
c001be1d:	e8 e6 05 ff ff       	call   c000c408 <int_handler>
c001be22:	81 c4 04 00 00 00    	add    esp,0x4
c001be28:	0f a9                	pop    gs
c001be2a:	0f a1                	pop    fs
c001be2c:	07                   	pop    es
c001be2d:	1f                   	pop    ds
c001be2e:	61                   	popa   
c001be2f:	81 c4 08 00 00 00    	add    esp,0x8
c001be35:	cf                   	iret   

c001be36 <irq16>:
c001be36:	fa                   	cli    
c001be37:	6a 00                	push   0x0
c001be39:	6a 30                	push   0x30
c001be3b:	e9 c4 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be40 <irq17>:
c001be40:	fa                   	cli    
c001be41:	6a 00                	push   0x0
c001be43:	6a 31                	push   0x31
c001be45:	e9 ba ff ff ff       	jmp    c001be04 <int_common_stub>

c001be4a <irq18>:
c001be4a:	fa                   	cli    
c001be4b:	6a 00                	push   0x0
c001be4d:	6a 32                	push   0x32
c001be4f:	e9 b0 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be54 <irq19>:
c001be54:	fa                   	cli    
c001be55:	6a 00                	push   0x0
c001be57:	6a 33                	push   0x33
c001be59:	e9 a6 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be5e <irq20>:
c001be5e:	fa                   	cli    
c001be5f:	6a 00                	push   0x0
c001be61:	6a 34                	push   0x34
c001be63:	e9 9c ff ff ff       	jmp    c001be04 <int_common_stub>

c001be68 <irq21>:
c001be68:	fa                   	cli    
c001be69:	6a 00                	push   0x0
c001be6b:	6a 35                	push   0x35
c001be6d:	e9 92 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be72 <irq22>:
c001be72:	fa                   	cli    
c001be73:	6a 00                	push   0x0
c001be75:	6a 36                	push   0x36
c001be77:	e9 88 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be7c <irq23>:
c001be7c:	fa                   	cli    
c001be7d:	6a 00                	push   0x0
c001be7f:	6a 37                	push   0x37
c001be81:	e9 7e ff ff ff       	jmp    c001be04 <int_common_stub>
c001be86:	66 90                	xchg   ax,ax
c001be88:	66 90                	xchg   ax,ax
c001be8a:	66 90                	xchg   ax,ax
c001be8c:	66 90                	xchg   ax,ax
c001be8e:	66 90                	xchg   ax,ax

c001be90 <i386GetRDRAND>:
c001be90:	b9 64 00 00 00       	mov    ecx,0x64

c001be95 <retry>:
c001be95:	0f c7 f0             	rdrand eax
c001be98:	72 05                	jb     c001be9f <retry.done>
c001be9a:	e2 f9                	loop   c001be95 <retry>

c001be9c <retry.fail>:
c001be9c:	31 c0                	xor    eax,eax
c001be9e:	c3                   	ret    

c001be9f <retry.done>:
c001be9f:	c3                   	ret    

c001bea0 <absolutelyNoChanceInHell>:
c001bea0:	b8 01 00 00 00       	mov    eax,0x1
c001bea5:	0f a2                	cpuid  
c001bea7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bead:	74 06                	je     c001beb5 <sseDetect.noSSE>
c001beaf:	b8 01 00 00 00       	mov    eax,0x1
c001beb4:	c3                   	ret    

c001beb5 <sseDetect.noSSE>:
c001beb5:	31 c0                	xor    eax,eax
c001beb7:	c3                   	ret    

c001beb8 <sseSave>:
c001beb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bebc:	0f ae 00             	fxsave [eax]
c001bebf:	c3                   	ret    

c001bec0 <sseLoad>:
c001bec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bec4:	0f ae 08             	fxrstor [eax]
c001bec7:	c3                   	ret    

c001bec8 <sseInit>:
c001bec8:	e8 42 00 00 00       	call   c001bf0f <x87Init>
c001becd:	0f 20 e0             	mov    eax,cr4
c001bed0:	66 0d 00 06          	or     ax,0x600
c001bed4:	0f 22 e0             	mov    cr4,eax
c001bed7:	c3                   	ret    

c001bed8 <sseClose>:
c001bed8:	c3                   	ret    
c001bed9:	66 90                	xchg   ax,ax
c001bedb:	66 90                	xchg   ax,ax
c001bedd:	66 90                	xchg   ax,ax
c001bedf:	90                   	nop

c001bee0 <value_37F>:
c001bee0:	7f 03                	jg     c001bee5 <value_37A+0x1>

c001bee2 <value_37E>:
c001bee2:	7e 03                	jle    c001bee7 <x87Detect+0x1>

c001bee4 <value_37A>:
c001bee4:	7a 03                	jp     c001bee9 <x87Detect+0x3>

c001bee6 <x87Detect>:
c001bee6:	b8 01 00 00 00       	mov    eax,0x1
c001beeb:	0f a2                	cpuid  
c001beed:	f7 c2 01 00 00 00    	test   edx,0x1
c001bef3:	74 06                	je     c001befb <x87Detect.nox87>
c001bef5:	b8 01 00 00 00       	mov    eax,0x1
c001befa:	c3                   	ret    

c001befb <x87Detect.nox87>:
c001befb:	b8 00 00 00 00       	mov    eax,0x0
c001bf00:	c3                   	ret    

c001bf01 <x87Save>:
c001bf01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf05:	dd 30                	fnsave [eax]
c001bf07:	c3                   	ret    

c001bf08 <x87Load>:
c001bf08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf0c:	dd 20                	frstor [eax]
c001bf0e:	c3                   	ret    

c001bf0f <x87Init>:
c001bf0f:	0f 20 c0             	mov    eax,cr0
c001bf12:	66 25 fb ff          	and    ax,0xfffb
c001bf16:	66 0d 22 00          	or     ax,0x22
c001bf1a:	0f 22 c0             	mov    cr0,eax
c001bf1d:	db e3                	fninit 
c001bf1f:	0f 06                	clts   
c001bf21:	d9 2d e4 be 01 c0    	fldcw  WORD PTR ds:0xc001bee4
c001bf27:	c3                   	ret    

c001bf28 <x87Close>:
c001bf28:	c3                   	ret    
c001bf29:	66 90                	xchg   ax,ax
c001bf2b:	90                   	nop

c001bf2c <__do_global_ctors_aux>:
c001bf2c:	a1 dc ce 01 c0       	mov    eax,ds:0xc001cedc
c001bf31:	83 f8 ff             	cmp    eax,0xffffffff
c001bf34:	74 1a                	je     c001bf50 <__do_global_ctors_aux+0x24>
c001bf36:	55                   	push   ebp
c001bf37:	89 e5                	mov    ebp,esp
c001bf39:	53                   	push   ebx
c001bf3a:	52                   	push   edx
c001bf3b:	bb dc ce 01 c0       	mov    ebx,0xc001cedc
c001bf40:	ff d0                	call   eax
c001bf42:	83 eb 04             	sub    ebx,0x4
c001bf45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf47:	83 f8 ff             	cmp    eax,0xffffffff
c001bf4a:	75 f4                	jne    c001bf40 <__do_global_ctors_aux+0x14>
c001bf4c:	58                   	pop    eax
c001bf4d:	5b                   	pop    ebx
c001bf4e:	5d                   	pop    ebp
c001bf4f:	c3                   	ret    
c001bf50:	c3                   	ret    
c001bf51:	66 90                	xchg   ax,ax
c001bf53:	90                   	nop

c001bf54 <__divdi3>:
c001bf54:	55                   	push   ebp
c001bf55:	57                   	push   edi
c001bf56:	56                   	push   esi
c001bf57:	53                   	push   ebx
c001bf58:	83 ec 1c             	sub    esp,0x1c
c001bf5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf72:	85 db                	test   ebx,ebx
c001bf74:	0f 88 8e 00 00 00    	js     c001c008 <__divdi3+0xb4>
c001bf7a:	89 dd                	mov    ebp,ebx
c001bf7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf84:	89 d3                	mov    ebx,edx
c001bf86:	85 d2                	test   edx,edx
c001bf88:	79 0d                	jns    c001bf97 <__divdi3+0x43>
c001bf8a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf8e:	f7 d8                	neg    eax
c001bf90:	83 d2 00             	adc    edx,0x0
c001bf93:	f7 da                	neg    edx
c001bf95:	89 d3                	mov    ebx,edx
c001bf97:	89 c7                	mov    edi,eax
c001bf99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf9c:	85 db                	test   ebx,ebx
c001bf9e:	75 48                	jne    c001bfe8 <__divdi3+0x94>
c001bfa0:	39 ef                	cmp    edi,ebp
c001bfa2:	76 24                	jbe    c001bfc8 <__divdi3+0x74>
c001bfa4:	89 ea                	mov    edx,ebp
c001bfa6:	f7 f7                	div    edi
c001bfa8:	89 c1                	mov    ecx,eax
c001bfaa:	31 f6                	xor    esi,esi
c001bfac:	89 c8                	mov    eax,ecx
c001bfae:	89 f2                	mov    edx,esi
c001bfb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfb4:	85 c9                	test   ecx,ecx
c001bfb6:	74 07                	je     c001bfbf <__divdi3+0x6b>
c001bfb8:	f7 d8                	neg    eax
c001bfba:	83 d2 00             	adc    edx,0x0
c001bfbd:	f7 da                	neg    edx
c001bfbf:	83 c4 1c             	add    esp,0x1c
c001bfc2:	5b                   	pop    ebx
c001bfc3:	5e                   	pop    esi
c001bfc4:	5f                   	pop    edi
c001bfc5:	5d                   	pop    ebp
c001bfc6:	c3                   	ret    
c001bfc7:	90                   	nop
c001bfc8:	85 ff                	test   edi,edi
c001bfca:	75 0b                	jne    c001bfd7 <__divdi3+0x83>
c001bfcc:	b8 01 00 00 00       	mov    eax,0x1
c001bfd1:	31 d2                	xor    edx,edx
c001bfd3:	f7 f3                	div    ebx
c001bfd5:	89 c7                	mov    edi,eax
c001bfd7:	31 d2                	xor    edx,edx
c001bfd9:	89 e8                	mov    eax,ebp
c001bfdb:	f7 f7                	div    edi
c001bfdd:	89 c6                	mov    esi,eax
c001bfdf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfe2:	f7 f7                	div    edi
c001bfe4:	89 c1                	mov    ecx,eax
c001bfe6:	eb c4                	jmp    c001bfac <__divdi3+0x58>
c001bfe8:	39 eb                	cmp    ebx,ebp
c001bfea:	77 3c                	ja     c001c028 <__divdi3+0xd4>
c001bfec:	0f bd f3             	bsr    esi,ebx
c001bfef:	83 f6 1f             	xor    esi,0x1f
c001bff2:	75 40                	jne    c001c034 <__divdi3+0xe0>
c001bff4:	39 eb                	cmp    ebx,ebp
c001bff6:	72 09                	jb     c001c001 <__divdi3+0xad>
c001bff8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bffb:	0f 87 97 00 00 00    	ja     c001c098 <__divdi3+0x144>
c001c001:	b9 01 00 00 00       	mov    ecx,0x1
c001c006:	eb a4                	jmp    c001bfac <__divdi3+0x58>
c001c008:	f7 d9                	neg    ecx
c001c00a:	83 d3 00             	adc    ebx,0x0
c001c00d:	f7 db                	neg    ebx
c001c00f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c012:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c016:	89 dd                	mov    ebp,ebx
c001c018:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c020:	e9 5f ff ff ff       	jmp    c001bf84 <__divdi3+0x30>
c001c025:	8d 76 00             	lea    esi,[esi+0x0]
c001c028:	31 f6                	xor    esi,esi
c001c02a:	31 c9                	xor    ecx,ecx
c001c02c:	e9 7b ff ff ff       	jmp    c001bfac <__divdi3+0x58>
c001c031:	8d 76 00             	lea    esi,[esi+0x0]
c001c034:	b8 20 00 00 00       	mov    eax,0x20
c001c039:	29 f0                	sub    eax,esi
c001c03b:	89 f1                	mov    ecx,esi
c001c03d:	d3 e3                	shl    ebx,cl
c001c03f:	89 fa                	mov    edx,edi
c001c041:	88 c1                	mov    cl,al
c001c043:	d3 ea                	shr    edx,cl
c001c045:	09 da                	or     edx,ebx
c001c047:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c04b:	89 f1                	mov    ecx,esi
c001c04d:	d3 e7                	shl    edi,cl
c001c04f:	89 eb                	mov    ebx,ebp
c001c051:	88 c1                	mov    cl,al
c001c053:	d3 eb                	shr    ebx,cl
c001c055:	89 f1                	mov    ecx,esi
c001c057:	d3 e5                	shl    ebp,cl
c001c059:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c05c:	88 c1                	mov    cl,al
c001c05e:	d3 ea                	shr    edx,cl
c001c060:	09 d5                	or     ebp,edx
c001c062:	89 e8                	mov    eax,ebp
c001c064:	89 da                	mov    edx,ebx
c001c066:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c06a:	89 d3                	mov    ebx,edx
c001c06c:	89 c5                	mov    ebp,eax
c001c06e:	f7 e7                	mul    edi
c001c070:	39 d3                	cmp    ebx,edx
c001c072:	72 18                	jb     c001c08c <__divdi3+0x138>
c001c074:	74 0a                	je     c001c080 <__divdi3+0x12c>
c001c076:	89 e9                	mov    ecx,ebp
c001c078:	31 f6                	xor    esi,esi
c001c07a:	e9 2d ff ff ff       	jmp    c001bfac <__divdi3+0x58>
c001c07f:	90                   	nop
c001c080:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c083:	89 f1                	mov    ecx,esi
c001c085:	d3 e7                	shl    edi,cl
c001c087:	39 c7                	cmp    edi,eax
c001c089:	73 eb                	jae    c001c076 <__divdi3+0x122>
c001c08b:	90                   	nop
c001c08c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c08f:	31 f6                	xor    esi,esi
c001c091:	e9 16 ff ff ff       	jmp    c001bfac <__divdi3+0x58>
c001c096:	66 90                	xchg   ax,ax
c001c098:	31 c9                	xor    ecx,ecx
c001c09a:	e9 0d ff ff ff       	jmp    c001bfac <__divdi3+0x58>
c001c09f:	90                   	nop

c001c0a0 <__moddi3>:
c001c0a0:	55                   	push   ebp
c001c0a1:	57                   	push   edi
c001c0a2:	56                   	push   esi
c001c0a3:	53                   	push   ebx
c001c0a4:	83 ec 2c             	sub    esp,0x2c
c001c0a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c0ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c0af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c0b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c0b7:	85 db                	test   ebx,ebx
c001c0b9:	0f 88 85 00 00 00    	js     c001c144 <__moddi3+0xa4>
c001c0bf:	89 de                	mov    esi,ebx
c001c0c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0c9:	89 d7                	mov    edi,edx
c001c0cb:	85 d2                	test   edx,edx
c001c0cd:	79 09                	jns    c001c0d8 <__moddi3+0x38>
c001c0cf:	f7 d8                	neg    eax
c001c0d1:	83 d2 00             	adc    edx,0x0
c001c0d4:	f7 da                	neg    edx
c001c0d6:	89 d7                	mov    edi,edx
c001c0d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0dc:	89 cd                	mov    ebp,ecx
c001c0de:	85 ff                	test   edi,edi
c001c0e0:	75 52                	jne    c001c134 <__moddi3+0x94>
c001c0e2:	89 c3                	mov    ebx,eax
c001c0e4:	39 f0                	cmp    eax,esi
c001c0e6:	76 24                	jbe    c001c10c <__moddi3+0x6c>
c001c0e8:	89 c8                	mov    eax,ecx
c001c0ea:	89 f2                	mov    edx,esi
c001c0ec:	f7 f3                	div    ebx
c001c0ee:	89 d6                	mov    esi,edx
c001c0f0:	89 f0                	mov    eax,esi
c001c0f2:	31 d2                	xor    edx,edx
c001c0f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0f8:	85 c9                	test   ecx,ecx
c001c0fa:	74 07                	je     c001c103 <__moddi3+0x63>
c001c0fc:	f7 d8                	neg    eax
c001c0fe:	83 d2 00             	adc    edx,0x0
c001c101:	f7 da                	neg    edx
c001c103:	83 c4 2c             	add    esp,0x2c
c001c106:	5b                   	pop    ebx
c001c107:	5e                   	pop    esi
c001c108:	5f                   	pop    edi
c001c109:	5d                   	pop    ebp
c001c10a:	c3                   	ret    
c001c10b:	90                   	nop
c001c10c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c110:	85 db                	test   ebx,ebx
c001c112:	75 0d                	jne    c001c121 <__moddi3+0x81>
c001c114:	b8 01 00 00 00       	mov    eax,0x1
c001c119:	31 d2                	xor    edx,edx
c001c11b:	f7 f7                	div    edi
c001c11d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c121:	89 f0                	mov    eax,esi
c001c123:	31 d2                	xor    edx,edx
c001c125:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c129:	f7 f7                	div    edi
c001c12b:	89 e8                	mov    eax,ebp
c001c12d:	f7 f7                	div    edi
c001c12f:	89 d6                	mov    esi,edx
c001c131:	eb bd                	jmp    c001c0f0 <__moddi3+0x50>
c001c133:	90                   	nop
c001c134:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c138:	39 f7                	cmp    edi,esi
c001c13a:	76 20                	jbe    c001c15c <__moddi3+0xbc>
c001c13c:	89 c8                	mov    eax,ecx
c001c13e:	89 f2                	mov    edx,esi
c001c140:	eb b2                	jmp    c001c0f4 <__moddi3+0x54>
c001c142:	66 90                	xchg   ax,ax
c001c144:	f7 d9                	neg    ecx
c001c146:	83 d3 00             	adc    ebx,0x0
c001c149:	f7 db                	neg    ebx
c001c14b:	89 de                	mov    esi,ebx
c001c14d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c155:	e9 6f ff ff ff       	jmp    c001c0c9 <__moddi3+0x29>
c001c15a:	66 90                	xchg   ax,ax
c001c15c:	0f bd c7             	bsr    eax,edi
c001c15f:	83 f0 1f             	xor    eax,0x1f
c001c162:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c166:	75 24                	jne    c001c18c <__moddi3+0xec>
c001c168:	39 f7                	cmp    edi,esi
c001c16a:	72 06                	jb     c001c172 <__moddi3+0xd2>
c001c16c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c170:	77 0c                	ja     c001c17e <__moddi3+0xde>
c001c172:	89 e9                	mov    ecx,ebp
c001c174:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c178:	19 fe                	sbb    esi,edi
c001c17a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c17e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c182:	89 f2                	mov    edx,esi
c001c184:	e9 6b ff ff ff       	jmp    c001c0f4 <__moddi3+0x54>
c001c189:	8d 76 00             	lea    esi,[esi+0x0]
c001c18c:	b8 20 00 00 00       	mov    eax,0x20
c001c191:	89 c2                	mov    edx,eax
c001c193:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c197:	29 da                	sub    edx,ebx
c001c199:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c19d:	88 d9                	mov    cl,bl
c001c19f:	d3 e7                	shl    edi,cl
c001c1a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1a5:	88 d1                	mov    cl,dl
c001c1a7:	d3 e8                	shr    eax,cl
c001c1a9:	09 c7                	or     edi,eax
c001c1ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c1af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c1b3:	89 d8                	mov    eax,ebx
c001c1b5:	88 d9                	mov    cl,bl
c001c1b7:	d3 e7                	shl    edi,cl
c001c1b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1bd:	89 f3                	mov    ebx,esi
c001c1bf:	88 d1                	mov    cl,dl
c001c1c1:	d3 eb                	shr    ebx,cl
c001c1c3:	89 c7                	mov    edi,eax
c001c1c5:	88 c1                	mov    cl,al
c001c1c7:	d3 e6                	shl    esi,cl
c001c1c9:	89 e8                	mov    eax,ebp
c001c1cb:	88 d1                	mov    cl,dl
c001c1cd:	d3 e8                	shr    eax,cl
c001c1cf:	09 f0                	or     eax,esi
c001c1d1:	89 f9                	mov    ecx,edi
c001c1d3:	d3 e5                	shl    ebp,cl
c001c1d5:	89 da                	mov    edx,ebx
c001c1d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1db:	89 d3                	mov    ebx,edx
c001c1dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1e1:	89 c6                	mov    esi,eax
c001c1e3:	89 d1                	mov    ecx,edx
c001c1e5:	39 d3                	cmp    ebx,edx
c001c1e7:	72 27                	jb     c001c210 <__moddi3+0x170>
c001c1e9:	74 21                	je     c001c20c <__moddi3+0x16c>
c001c1eb:	29 f5                	sub    ebp,esi
c001c1ed:	19 cb                	sbb    ebx,ecx
c001c1ef:	89 de                	mov    esi,ebx
c001c1f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1f5:	d3 e6                	shl    esi,cl
c001c1f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1fb:	89 f9                	mov    ecx,edi
c001c1fd:	d3 ed                	shr    ebp,cl
c001c1ff:	09 ee                	or     esi,ebp
c001c201:	89 f0                	mov    eax,esi
c001c203:	d3 eb                	shr    ebx,cl
c001c205:	89 da                	mov    edx,ebx
c001c207:	e9 e8 fe ff ff       	jmp    c001c0f4 <__moddi3+0x54>
c001c20c:	39 c5                	cmp    ebp,eax
c001c20e:	73 db                	jae    c001c1eb <__moddi3+0x14b>
c001c210:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c214:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c218:	89 d1                	mov    ecx,edx
c001c21a:	89 c6                	mov    esi,eax
c001c21c:	eb cd                	jmp    c001c1eb <__moddi3+0x14b>
c001c21e:	66 90                	xchg   ax,ax

c001c220 <__udivdi3>:
c001c220:	55                   	push   ebp
c001c221:	57                   	push   edi
c001c222:	56                   	push   esi
c001c223:	53                   	push   ebx
c001c224:	83 ec 1c             	sub    esp,0x1c
c001c227:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c22b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c22f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c233:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c237:	85 d2                	test   edx,edx
c001c239:	75 41                	jne    c001c27c <__udivdi3+0x5c>
c001c23b:	39 f7                	cmp    edi,esi
c001c23d:	76 15                	jbe    c001c254 <__udivdi3+0x34>
c001c23f:	89 e8                	mov    eax,ebp
c001c241:	89 f2                	mov    edx,esi
c001c243:	f7 f7                	div    edi
c001c245:	31 db                	xor    ebx,ebx
c001c247:	89 da                	mov    edx,ebx
c001c249:	83 c4 1c             	add    esp,0x1c
c001c24c:	5b                   	pop    ebx
c001c24d:	5e                   	pop    esi
c001c24e:	5f                   	pop    edi
c001c24f:	5d                   	pop    ebp
c001c250:	c3                   	ret    
c001c251:	8d 76 00             	lea    esi,[esi+0x0]
c001c254:	89 f9                	mov    ecx,edi
c001c256:	85 ff                	test   edi,edi
c001c258:	75 0b                	jne    c001c265 <__udivdi3+0x45>
c001c25a:	b8 01 00 00 00       	mov    eax,0x1
c001c25f:	31 d2                	xor    edx,edx
c001c261:	f7 f7                	div    edi
c001c263:	89 c1                	mov    ecx,eax
c001c265:	31 d2                	xor    edx,edx
c001c267:	89 f0                	mov    eax,esi
c001c269:	f7 f1                	div    ecx
c001c26b:	89 c3                	mov    ebx,eax
c001c26d:	89 e8                	mov    eax,ebp
c001c26f:	f7 f1                	div    ecx
c001c271:	89 da                	mov    edx,ebx
c001c273:	83 c4 1c             	add    esp,0x1c
c001c276:	5b                   	pop    ebx
c001c277:	5e                   	pop    esi
c001c278:	5f                   	pop    edi
c001c279:	5d                   	pop    ebp
c001c27a:	c3                   	ret    
c001c27b:	90                   	nop
c001c27c:	39 f2                	cmp    edx,esi
c001c27e:	77 1c                	ja     c001c29c <__udivdi3+0x7c>
c001c280:	0f bd da             	bsr    ebx,edx
c001c283:	83 f3 1f             	xor    ebx,0x1f
c001c286:	75 24                	jne    c001c2ac <__udivdi3+0x8c>
c001c288:	39 f2                	cmp    edx,esi
c001c28a:	72 08                	jb     c001c294 <__udivdi3+0x74>
c001c28c:	39 ef                	cmp    edi,ebp
c001c28e:	0f 87 84 00 00 00    	ja     c001c318 <__udivdi3+0xf8>
c001c294:	b8 01 00 00 00       	mov    eax,0x1
c001c299:	eb ac                	jmp    c001c247 <__udivdi3+0x27>
c001c29b:	90                   	nop
c001c29c:	31 db                	xor    ebx,ebx
c001c29e:	31 c0                	xor    eax,eax
c001c2a0:	89 da                	mov    edx,ebx
c001c2a2:	83 c4 1c             	add    esp,0x1c
c001c2a5:	5b                   	pop    ebx
c001c2a6:	5e                   	pop    esi
c001c2a7:	5f                   	pop    edi
c001c2a8:	5d                   	pop    ebp
c001c2a9:	c3                   	ret    
c001c2aa:	66 90                	xchg   ax,ax
c001c2ac:	b8 20 00 00 00       	mov    eax,0x20
c001c2b1:	29 d8                	sub    eax,ebx
c001c2b3:	88 d9                	mov    cl,bl
c001c2b5:	d3 e2                	shl    edx,cl
c001c2b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c2bb:	89 fa                	mov    edx,edi
c001c2bd:	88 c1                	mov    cl,al
c001c2bf:	d3 ea                	shr    edx,cl
c001c2c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2c5:	09 d1                	or     ecx,edx
c001c2c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2cb:	88 d9                	mov    cl,bl
c001c2cd:	d3 e7                	shl    edi,cl
c001c2cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2d3:	89 f7                	mov    edi,esi
c001c2d5:	88 c1                	mov    cl,al
c001c2d7:	d3 ef                	shr    edi,cl
c001c2d9:	88 d9                	mov    cl,bl
c001c2db:	d3 e6                	shl    esi,cl
c001c2dd:	89 ea                	mov    edx,ebp
c001c2df:	88 c1                	mov    cl,al
c001c2e1:	d3 ea                	shr    edx,cl
c001c2e3:	09 d6                	or     esi,edx
c001c2e5:	89 f0                	mov    eax,esi
c001c2e7:	89 fa                	mov    edx,edi
c001c2e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2ed:	89 d7                	mov    edi,edx
c001c2ef:	89 c6                	mov    esi,eax
c001c2f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2f5:	39 d7                	cmp    edi,edx
c001c2f7:	72 13                	jb     c001c30c <__udivdi3+0xec>
c001c2f9:	74 09                	je     c001c304 <__udivdi3+0xe4>
c001c2fb:	89 f0                	mov    eax,esi
c001c2fd:	31 db                	xor    ebx,ebx
c001c2ff:	e9 43 ff ff ff       	jmp    c001c247 <__udivdi3+0x27>
c001c304:	88 d9                	mov    cl,bl
c001c306:	d3 e5                	shl    ebp,cl
c001c308:	39 c5                	cmp    ebp,eax
c001c30a:	73 ef                	jae    c001c2fb <__udivdi3+0xdb>
c001c30c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c30f:	31 db                	xor    ebx,ebx
c001c311:	e9 31 ff ff ff       	jmp    c001c247 <__udivdi3+0x27>
c001c316:	66 90                	xchg   ax,ax
c001c318:	31 c0                	xor    eax,eax
c001c31a:	e9 28 ff ff ff       	jmp    c001c247 <__udivdi3+0x27>
c001c31f:	90                   	nop

c001c320 <__umoddi3>:
c001c320:	55                   	push   ebp
c001c321:	57                   	push   edi
c001c322:	56                   	push   esi
c001c323:	53                   	push   ebx
c001c324:	83 ec 1c             	sub    esp,0x1c
c001c327:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c32b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c32f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c333:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c337:	89 da                	mov    edx,ebx
c001c339:	85 c0                	test   eax,eax
c001c33b:	75 37                	jne    c001c374 <__umoddi3+0x54>
c001c33d:	39 df                	cmp    edi,ebx
c001c33f:	76 13                	jbe    c001c354 <__umoddi3+0x34>
c001c341:	89 f0                	mov    eax,esi
c001c343:	f7 f7                	div    edi
c001c345:	89 d0                	mov    eax,edx
c001c347:	31 d2                	xor    edx,edx
c001c349:	83 c4 1c             	add    esp,0x1c
c001c34c:	5b                   	pop    ebx
c001c34d:	5e                   	pop    esi
c001c34e:	5f                   	pop    edi
c001c34f:	5d                   	pop    ebp
c001c350:	c3                   	ret    
c001c351:	8d 76 00             	lea    esi,[esi+0x0]
c001c354:	89 fd                	mov    ebp,edi
c001c356:	85 ff                	test   edi,edi
c001c358:	75 0b                	jne    c001c365 <__umoddi3+0x45>
c001c35a:	b8 01 00 00 00       	mov    eax,0x1
c001c35f:	31 d2                	xor    edx,edx
c001c361:	f7 f7                	div    edi
c001c363:	89 c5                	mov    ebp,eax
c001c365:	89 d8                	mov    eax,ebx
c001c367:	31 d2                	xor    edx,edx
c001c369:	f7 f5                	div    ebp
c001c36b:	89 f0                	mov    eax,esi
c001c36d:	f7 f5                	div    ebp
c001c36f:	89 d0                	mov    eax,edx
c001c371:	eb d4                	jmp    c001c347 <__umoddi3+0x27>
c001c373:	90                   	nop
c001c374:	89 f1                	mov    ecx,esi
c001c376:	39 d8                	cmp    eax,ebx
c001c378:	76 0a                	jbe    c001c384 <__umoddi3+0x64>
c001c37a:	89 f0                	mov    eax,esi
c001c37c:	83 c4 1c             	add    esp,0x1c
c001c37f:	5b                   	pop    ebx
c001c380:	5e                   	pop    esi
c001c381:	5f                   	pop    edi
c001c382:	5d                   	pop    ebp
c001c383:	c3                   	ret    
c001c384:	0f bd e8             	bsr    ebp,eax
c001c387:	83 f5 1f             	xor    ebp,0x1f
c001c38a:	75 1c                	jne    c001c3a8 <__umoddi3+0x88>
c001c38c:	39 d8                	cmp    eax,ebx
c001c38e:	72 04                	jb     c001c394 <__umoddi3+0x74>
c001c390:	39 f7                	cmp    edi,esi
c001c392:	77 08                	ja     c001c39c <__umoddi3+0x7c>
c001c394:	89 da                	mov    edx,ebx
c001c396:	29 fe                	sub    esi,edi
c001c398:	19 c2                	sbb    edx,eax
c001c39a:	89 f1                	mov    ecx,esi
c001c39c:	89 c8                	mov    eax,ecx
c001c39e:	83 c4 1c             	add    esp,0x1c
c001c3a1:	5b                   	pop    ebx
c001c3a2:	5e                   	pop    esi
c001c3a3:	5f                   	pop    edi
c001c3a4:	5d                   	pop    ebp
c001c3a5:	c3                   	ret    
c001c3a6:	66 90                	xchg   ax,ax
c001c3a8:	ba 20 00 00 00       	mov    edx,0x20
c001c3ad:	29 ea                	sub    edx,ebp
c001c3af:	89 e9                	mov    ecx,ebp
c001c3b1:	d3 e0                	shl    eax,cl
c001c3b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3b7:	89 f8                	mov    eax,edi
c001c3b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3bd:	88 d1                	mov    cl,dl
c001c3bf:	d3 e8                	shr    eax,cl
c001c3c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3c5:	09 c1                	or     ecx,eax
c001c3c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3cb:	89 e9                	mov    ecx,ebp
c001c3cd:	d3 e7                	shl    edi,cl
c001c3cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3d3:	89 d8                	mov    eax,ebx
c001c3d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3d9:	88 d1                	mov    cl,dl
c001c3db:	d3 e8                	shr    eax,cl
c001c3dd:	89 c7                	mov    edi,eax
c001c3df:	89 e9                	mov    ecx,ebp
c001c3e1:	d3 e3                	shl    ebx,cl
c001c3e3:	89 f0                	mov    eax,esi
c001c3e5:	88 d1                	mov    cl,dl
c001c3e7:	d3 e8                	shr    eax,cl
c001c3e9:	09 d8                	or     eax,ebx
c001c3eb:	89 e9                	mov    ecx,ebp
c001c3ed:	d3 e6                	shl    esi,cl
c001c3ef:	89 f3                	mov    ebx,esi
c001c3f1:	89 fa                	mov    edx,edi
c001c3f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3f7:	89 d1                	mov    ecx,edx
c001c3f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3fd:	89 c6                	mov    esi,eax
c001c3ff:	89 d7                	mov    edi,edx
c001c401:	39 d1                	cmp    ecx,edx
c001c403:	72 27                	jb     c001c42c <__umoddi3+0x10c>
c001c405:	74 21                	je     c001c428 <__umoddi3+0x108>
c001c407:	89 ca                	mov    edx,ecx
c001c409:	29 f3                	sub    ebx,esi
c001c40b:	19 fa                	sbb    edx,edi
c001c40d:	89 d0                	mov    eax,edx
c001c40f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c413:	d3 e0                	shl    eax,cl
c001c415:	89 e9                	mov    ecx,ebp
c001c417:	d3 eb                	shr    ebx,cl
c001c419:	09 d8                	or     eax,ebx
c001c41b:	d3 ea                	shr    edx,cl
c001c41d:	83 c4 1c             	add    esp,0x1c
c001c420:	5b                   	pop    ebx
c001c421:	5e                   	pop    esi
c001c422:	5f                   	pop    edi
c001c423:	5d                   	pop    ebp
c001c424:	c3                   	ret    
c001c425:	8d 76 00             	lea    esi,[esi+0x0]
c001c428:	39 c3                	cmp    ebx,eax
c001c42a:	73 db                	jae    c001c407 <__umoddi3+0xe7>
c001c42c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c430:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c434:	89 d7                	mov    edi,edx
c001c436:	89 c6                	mov    esi,eax
c001c438:	eb cd                	jmp    c001c407 <__umoddi3+0xe7>

Disassembly of section .init:

c001c43a <_init>:
c001c43a:	55                   	push   ebp
c001c43b:	89 e5                	mov    ebp,esp
c001c43d:	e8 d6 3c fe ff       	call   c0000118 <frame_dummy>
c001c442:	e8 e5 fa ff ff       	call   c001bf2c <__do_global_ctors_aux>
c001c447:	5d                   	pop    ebp
c001c448:	c3                   	ret    

Disassembly of section .fini:

c001c449 <_fini>:
c001c449:	55                   	push   ebp
c001c44a:	89 e5                	mov    ebp,esp
c001c44c:	e8 57 3c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c451:	5d                   	pop    ebp
c001c452:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c454 <Computer::~Computer()>:
c001c454:	83 ec 0c             	sub    esp,0xc
c001c457:	ba 74 d7 01 c0       	mov    edx,0xc001d774
c001c45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c460:	89 10                	mov    DWORD PTR [eax],edx
c001c462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c466:	83 ec 0c             	sub    esp,0xc
c001c469:	50                   	push   eax
c001c46a:	e8 ef f9 fe ff       	call   c000be5e <Device::~Device()>
c001c46f:	83 c4 10             	add    esp,0x10
c001c472:	90                   	nop
c001c473:	83 c4 0c             	add    esp,0xc
c001c476:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c478 <Computer::~Computer()>:
c001c478:	83 ec 0c             	sub    esp,0xc
c001c47b:	83 ec 0c             	sub    esp,0xc
c001c47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c482:	e8 cd ff ff ff       	call   c001c454 <Computer::~Computer()>
c001c487:	83 c4 10             	add    esp,0x10
c001c48a:	83 ec 08             	sub    esp,0x8
c001c48d:	68 70 01 00 00       	push   0x170
c001c492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c496:	e8 8b e5 fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001c49b:	83 c4 10             	add    esp,0x10
c001c49e:	83 c4 0c             	add    esp,0xc
c001c4a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c4a2 <idleCommon()>:
c001c4a2:	83 ec 0c             	sub    esp,0xc
c001c4a5:	fa                   	cli    
c001c4a6:	ff 05 88 3e 02 c0    	inc    DWORD PTR ds:0xc0023e88
c001c4ac:	e8 93 74 ff ff       	call   c0013944 <schedule()>
c001c4b1:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001c4b6:	48                   	dec    eax
c001c4b7:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c001c4bc:	75 01                	jne    c001c4bf <idleCommon()+0x1d>
c001c4be:	fb                   	sti    
c001c4bf:	83 c4 0c             	add    esp,0xc
c001c4c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4c4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4c4:	90                   	nop
c001c4c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4c6 <LinkedList<UnixFile>::LinkedList()>:
c001c4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c506:	90                   	nop
c001c507:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c508 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c510:	75 10                	jne    c001c522 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c512:	83 ec 0c             	sub    esp,0xc
c001c515:	68 c8 d9 01 c0       	push   0xc001d9c8
c001c51a:	e8 cc 41 ff ff       	call   c00106eb <KePanic(char const*)>
c001c51f:	83 c4 10             	add    esp,0x10
c001c522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c526:	8b 00                	mov    eax,DWORD PTR [eax]
c001c528:	85 c0                	test   eax,eax
c001c52a:	74 34                	je     c001c560 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c533:	85 c0                	test   eax,eax
c001c535:	74 29                	je     c001c560 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c53e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c542:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c549:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c54d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c557:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c55e:	eb 65                	jmp    c001c5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c564:	8b 00                	mov    eax,DWORD PTR [eax]
c001c566:	85 c0                	test   eax,eax
c001c568:	75 4b                	jne    c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c571:	85 c0                	test   eax,eax
c001c573:	75 40                	jne    c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c579:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c57d:	89 10                	mov    DWORD PTR [eax],edx
c001c57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c583:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c587:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c591:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c59f:	85 c0                	test   eax,eax
c001c5a1:	74 22                	je     c001c5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5a3:	83 ec 0c             	sub    esp,0xc
c001c5a6:	68 ea d9 01 c0       	push   0xc001d9ea
c001c5ab:	e8 3b 41 ff ff       	call   c00106eb <KePanic(char const*)>
c001c5b0:	83 c4 10             	add    esp,0x10
c001c5b3:	eb 10                	jmp    c001c5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5b5:	83 ec 0c             	sub    esp,0xc
c001c5b8:	68 f4 d9 01 c0       	push   0xc001d9f4
c001c5bd:	e8 29 41 ff ff       	call   c00106eb <KePanic(char const*)>
c001c5c2:	83 c4 10             	add    esp,0x10
c001c5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5cc:	8d 50 01             	lea    edx,[eax+0x1]
c001c5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5d6:	90                   	nop
c001c5d7:	83 c4 0c             	add    esp,0xc
c001c5da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5dc <LinkedList<UnixFile>::getFirstElement()>:
c001c5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c5e4 <LinkedList<UnixFile>::removeFirst()>:
c001c5e4:	83 ec 0c             	sub    esp,0xc
c001c5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5ed:	85 c0                	test   eax,eax
c001c5ef:	75 12                	jne    c001c603 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5f1:	83 ec 0c             	sub    esp,0xc
c001c5f4:	68 00 da 01 c0       	push   0xc001da00
c001c5f9:	e8 ed 40 ff ff       	call   c00106eb <KePanic(char const*)>
c001c5fe:	83 c4 10             	add    esp,0x10
c001c601:	eb 7e                	jmp    c001c681 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c607:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c60a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c60d:	85 c0                	test   eax,eax
c001c60f:	74 10                	je     c001c621 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c611:	83 ec 0c             	sub    esp,0xc
c001c614:	68 4b da 01 c0       	push   0xc001da4b
c001c619:	e8 cd 40 ff ff       	call   c00106eb <KePanic(char const*)>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c625:	8b 00                	mov    eax,DWORD PTR [eax]
c001c627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c62a:	85 c0                	test   eax,eax
c001c62c:	75 33                	jne    c001c661 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c632:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c647:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c64a:	83 f8 01             	cmp    eax,0x1
c001c64d:	74 21                	je     c001c670 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c64f:	83 ec 0c             	sub    esp,0xc
c001c652:	68 24 da 01 c0       	push   0xc001da24
c001c657:	e8 8f 40 ff ff       	call   c00106eb <KePanic(char const*)>
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	eb 0f                	jmp    c001c670 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c665:	8b 00                	mov    eax,DWORD PTR [eax]
c001c667:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66e:	89 10                	mov    DWORD PTR [eax],edx
c001c670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c674:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c677:	8d 50 ff             	lea    edx,[eax-0x1]
c001c67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c681:	83 c4 0c             	add    esp,0xc
c001c684:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c686 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c68a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c68d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c68e <DriverlessDevice::~DriverlessDevice()>:
c001c68e:	ba 9c e0 01 c0       	mov    edx,0xc001e09c
c001c693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c697:	89 10                	mov    DWORD PTR [eax],edx
c001c699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69d:	50                   	push   eax
c001c69e:	e8 bb f7 fe ff       	call   c000be5e <Device::~Device()>
c001c6a3:	83 c4 04             	add    esp,0x4
c001c6a6:	90                   	nop
c001c6a7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c6a8 <DriverlessDevice::~DriverlessDevice()>:
c001c6a8:	83 ec 0c             	sub    esp,0xc
c001c6ab:	83 ec 0c             	sub    esp,0xc
c001c6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6b2:	e8 d7 ff ff ff       	call   c001c68e <DriverlessDevice::~DriverlessDevice()>
c001c6b7:	83 c4 10             	add    esp,0x10
c001c6ba:	83 ec 08             	sub    esp,0x8
c001c6bd:	68 58 01 00 00       	push   0x158
c001c6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6c6:	e8 5b e3 fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001c6cb:	83 c4 10             	add    esp,0x10
c001c6ce:	83 c4 0c             	add    esp,0xc
c001c6d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6d2 <LinkedList<Device>::addElement(Device*)>:
c001c6d2:	83 ec 0c             	sub    esp,0xc
c001c6d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6da:	75 10                	jne    c001c6ec <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6dc:	83 ec 0c             	sub    esp,0xc
c001c6df:	68 c8 d9 01 c0       	push   0xc001d9c8
c001c6e4:	e8 02 40 ff ff       	call   c00106eb <KePanic(char const*)>
c001c6e9:	83 c4 10             	add    esp,0x10
c001c6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6f2:	85 c0                	test   eax,eax
c001c6f4:	74 3a                	je     c001c730 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6fd:	85 c0                	test   eax,eax
c001c6ff:	74 2f                	je     c001c730 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c708:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c70c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c716:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c71a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c724:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c72e:	eb 68                	jmp    c001c798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c734:	8b 00                	mov    eax,DWORD PTR [eax]
c001c736:	85 c0                	test   eax,eax
c001c738:	75 4e                	jne    c001c788 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c741:	85 c0                	test   eax,eax
c001c743:	75 43                	jne    c001c788 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c749:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c74d:	89 10                	mov    DWORD PTR [eax],edx
c001c74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c753:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c757:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c761:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c772:	85 c0                	test   eax,eax
c001c774:	74 22                	je     c001c798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c776:	83 ec 0c             	sub    esp,0xc
c001c779:	68 ea d9 01 c0       	push   0xc001d9ea
c001c77e:	e8 68 3f ff ff       	call   c00106eb <KePanic(char const*)>
c001c783:	83 c4 10             	add    esp,0x10
c001c786:	eb 10                	jmp    c001c798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c788:	83 ec 0c             	sub    esp,0xc
c001c78b:	68 f4 d9 01 c0       	push   0xc001d9f4
c001c790:	e8 56 3f ff ff       	call   c00106eb <KePanic(char const*)>
c001c795:	83 c4 10             	add    esp,0x10
c001c798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c79f:	8d 50 01             	lea    edx,[eax+0x1]
c001c7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7a9:	90                   	nop
c001c7aa:	83 c4 0c             	add    esp,0xc
c001c7ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c7ae <LinkedList<Device>::LinkedList()>:
c001c7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ee:	90                   	nop
c001c7ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7f6:	85 c0                	test   eax,eax
c001c7f8:	75 0e                	jne    c001c808 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c801:	85 c0                	test   eax,eax
c001c803:	75 03                	jne    c001c808 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c805:	b0 01                	mov    al,0x1
c001c807:	c3                   	ret    
c001c808:	b0 00                	mov    al,0x0
c001c80a:	90                   	nop
c001c80b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c810:	8b 00                	mov    eax,DWORD PTR [eax]
c001c812:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c814:	83 ec 0c             	sub    esp,0xc
c001c817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c81d:	85 c0                	test   eax,eax
c001c81f:	75 17                	jne    c001c838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c821:	83 ec 0c             	sub    esp,0xc
c001c824:	68 00 da 01 c0       	push   0xc001da00
c001c829:	e8 bd 3e ff ff       	call   c00106eb <KePanic(char const*)>
c001c82e:	83 c4 10             	add    esp,0x10
c001c831:	e9 92 00 00 00       	jmp    c001c8c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c836:	66 90                	xchg   ax,ax
c001c838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c83f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c842:	85 c0                	test   eax,eax
c001c844:	0f 95 c0             	setne  al
c001c847:	84 c0                	test   al,al
c001c849:	74 11                	je     c001c85c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	68 4b da 01 c0       	push   0xc001da4b
c001c853:	e8 93 3e ff ff       	call   c00106eb <KePanic(char const*)>
c001c858:	83 c4 10             	add    esp,0x10
c001c85b:	90                   	nop
c001c85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c860:	8b 00                	mov    eax,DWORD PTR [eax]
c001c862:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c865:	85 c0                	test   eax,eax
c001c867:	0f 94 c0             	sete   al
c001c86a:	84 c0                	test   al,al
c001c86c:	74 36                	je     c001c8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c872:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c887:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c88a:	83 f8 01             	cmp    eax,0x1
c001c88d:	74 25                	je     c001c8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c88f:	83 ec 0c             	sub    esp,0xc
c001c892:	68 24 da 01 c0       	push   0xc001da24
c001c897:	e8 4f 3e ff ff       	call   c00106eb <KePanic(char const*)>
c001c89c:	83 c4 10             	add    esp,0x10
c001c89f:	eb 13                	jmp    c001c8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8aa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b1:	89 10                	mov    DWORD PTR [eax],edx
c001c8b3:	90                   	nop
c001c8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8bb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c8:	83 c4 0c             	add    esp,0xc
c001c8cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8cc:	83 ec 0c             	sub    esp,0xc
c001c8cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8d4:	75 12                	jne    c001c8e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8d6:	83 ec 0c             	sub    esp,0xc
c001c8d9:	68 c8 d9 01 c0       	push   0xc001d9c8
c001c8de:	e8 08 3e ff ff       	call   c00106eb <KePanic(char const*)>
c001c8e3:	83 c4 10             	add    esp,0x10
c001c8e6:	66 90                	xchg   ax,ax
c001c8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ee:	85 c0                	test   eax,eax
c001c8f0:	74 36                	je     c001c928 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8f9:	85 c0                	test   eax,eax
c001c8fb:	74 2b                	je     c001c928 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c901:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c908:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c913:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c91d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c924:	eb 6a                	jmp    c001c990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c926:	66 90                	xchg   ax,ax
c001c928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c92e:	85 c0                	test   eax,eax
c001c930:	75 4e                	jne    c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c939:	85 c0                	test   eax,eax
c001c93b:	75 43                	jne    c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c941:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c945:	89 10                	mov    DWORD PTR [eax],edx
c001c947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c94f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c959:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c964:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c967:	85 c0                	test   eax,eax
c001c969:	74 25                	je     c001c990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c96b:	83 ec 0c             	sub    esp,0xc
c001c96e:	68 ea d9 01 c0       	push   0xc001d9ea
c001c973:	e8 73 3d ff ff       	call   c00106eb <KePanic(char const*)>
c001c978:	83 c4 10             	add    esp,0x10
c001c97b:	eb 13                	jmp    c001c990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c97d:	8d 76 00             	lea    esi,[esi+0x0]
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	68 f4 d9 01 c0       	push   0xc001d9f4
c001c988:	e8 5e 3d ff ff       	call   c00106eb <KePanic(char const*)>
c001c98d:	83 c4 10             	add    esp,0x10
c001c990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c997:	8d 50 01             	lea    edx,[eax+0x1]
c001c99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9a1:	90                   	nop
c001c9a2:	83 c4 0c             	add    esp,0xc
c001c9a5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c9a8 <ACPI::~ACPI()>:
c001c9a8:	83 ec 0c             	sub    esp,0xc
c001c9ab:	ba 04 e6 01 c0       	mov    edx,0xc001e604
c001c9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b4:	89 10                	mov    DWORD PTR [eax],edx
c001c9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ba:	83 ec 0c             	sub    esp,0xc
c001c9bd:	50                   	push   eax
c001c9be:	e8 9b f4 fe ff       	call   c000be5e <Device::~Device()>
c001c9c3:	83 c4 10             	add    esp,0x10
c001c9c6:	90                   	nop
c001c9c7:	83 c4 0c             	add    esp,0xc
c001c9ca:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9cc <ACPI::~ACPI()>:
c001c9cc:	83 ec 0c             	sub    esp,0xc
c001c9cf:	83 ec 0c             	sub    esp,0xc
c001c9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9d6:	e8 cd ff ff ff       	call   c001c9a8 <ACPI::~ACPI()>
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	83 ec 08             	sub    esp,0x8
c001c9e1:	68 64 12 00 00       	push   0x1264
c001c9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ea:	e8 37 e0 fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001c9ef:	83 c4 10             	add    esp,0x10
c001c9f2:	83 c4 0c             	add    esp,0xc
c001c9f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9f8 <LinkedList<Device>::~LinkedList()>:
c001c9f8:	90                   	nop
c001c9f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9fc <LinkedList<Device>::isEmpty()>:
c001c9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca02:	85 c0                	test   eax,eax
c001ca04:	75 0e                	jne    c001ca14 <LinkedList<Device>::isEmpty()+0x18>
c001ca06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca0d:	85 c0                	test   eax,eax
c001ca0f:	75 03                	jne    c001ca14 <LinkedList<Device>::isEmpty()+0x18>
c001ca11:	b0 01                	mov    al,0x1
c001ca13:	c3                   	ret    
c001ca14:	b0 00                	mov    al,0x0
c001ca16:	90                   	nop
c001ca17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ca18 <LinkedList<Device>::getFirstElement()>:
c001ca18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca1e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca20 <LinkedList<Device>::removeFirst()>:
c001ca20:	83 ec 0c             	sub    esp,0xc
c001ca23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca27:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca29:	85 c0                	test   eax,eax
c001ca2b:	75 17                	jne    c001ca44 <LinkedList<Device>::removeFirst()+0x24>
c001ca2d:	83 ec 0c             	sub    esp,0xc
c001ca30:	68 00 da 01 c0       	push   0xc001da00
c001ca35:	e8 b1 3c ff ff       	call   c00106eb <KePanic(char const*)>
c001ca3a:	83 c4 10             	add    esp,0x10
c001ca3d:	e9 92 00 00 00       	jmp    c001cad4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca42:	66 90                	xchg   ax,ax
c001ca44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca4b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca51:	85 c0                	test   eax,eax
c001ca53:	74 13                	je     c001ca68 <LinkedList<Device>::removeFirst()+0x48>
c001ca55:	83 ec 0c             	sub    esp,0xc
c001ca58:	68 4b da 01 c0       	push   0xc001da4b
c001ca5d:	e8 89 3c ff ff       	call   c00106eb <KePanic(char const*)>
c001ca62:	83 c4 10             	add    esp,0x10
c001ca65:	8d 76 00             	lea    esi,[esi+0x0]
c001ca68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca6e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca74:	85 c0                	test   eax,eax
c001ca76:	75 34                	jne    c001caac <LinkedList<Device>::removeFirst()+0x8c>
c001ca78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca94:	83 f8 01             	cmp    eax,0x1
c001ca97:	74 27                	je     c001cac0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca99:	83 ec 0c             	sub    esp,0xc
c001ca9c:	68 24 da 01 c0       	push   0xc001da24
c001caa1:	e8 45 3c ff ff       	call   c00106eb <KePanic(char const*)>
c001caa6:	83 c4 10             	add    esp,0x10
c001caa9:	eb 15                	jmp    c001cac0 <LinkedList<Device>::removeFirst()+0xa0>
c001caab:	90                   	nop
c001caac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cab2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001cab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabc:	89 10                	mov    DWORD PTR [eax],edx
c001cabe:	66 90                	xchg   ax,ax
c001cac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cac7:	8d 50 ff             	lea    edx,[eax-0x1]
c001caca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cace:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cad1:	8d 76 00             	lea    esi,[esi+0x0]
c001cad4:	83 c4 0c             	add    esp,0xc
c001cad7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cad8 <CPU::~CPU()>:
c001cad8:	83 ec 0c             	sub    esp,0xc
c001cadb:	ba a0 e7 01 c0       	mov    edx,0xc001e7a0
c001cae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae4:	89 10                	mov    DWORD PTR [eax],edx
c001cae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caea:	83 ec 0c             	sub    esp,0xc
c001caed:	50                   	push   eax
c001caee:	e8 6b f3 fe ff       	call   c000be5e <Device::~Device()>
c001caf3:	83 c4 10             	add    esp,0x10
c001caf6:	90                   	nop
c001caf7:	83 c4 0c             	add    esp,0xc
c001cafa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cafc <CPU::~CPU()>:
c001cafc:	83 ec 0c             	sub    esp,0xc
c001caff:	83 ec 0c             	sub    esp,0xc
c001cb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb06:	e8 cd ff ff ff       	call   c001cad8 <CPU::~CPU()>
c001cb0b:	83 c4 10             	add    esp,0x10
c001cb0e:	83 ec 08             	sub    esp,0x8
c001cb11:	68 94 11 00 00       	push   0x1194
c001cb16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb1a:	e8 07 df fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	83 c4 0c             	add    esp,0xc
c001cb25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb28 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb28:	90                   	nop
c001cb29:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb2c <ThreadControlBlock::ThreadControlBlock()>:
c001cb2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb30:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb46:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb51:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb67:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb6f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb73:	90                   	nop
c001cb74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbb8:	90                   	nop
c001cbb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cbbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cbbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cbc3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cbc4 <PCI::~PCI()>:
c001cbc4:	83 ec 0c             	sub    esp,0xc
c001cbc7:	ba 84 f2 01 c0       	mov    edx,0xc001f284
c001cbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd0:	89 10                	mov    DWORD PTR [eax],edx
c001cbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd6:	83 ec 0c             	sub    esp,0xc
c001cbd9:	50                   	push   eax
c001cbda:	e8 09 ed fe ff       	call   c000b8e8 <Bus::~Bus()>
c001cbdf:	83 c4 10             	add    esp,0x10
c001cbe2:	90                   	nop
c001cbe3:	83 c4 0c             	add    esp,0xc
c001cbe6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cbe8 <PCI::~PCI()>:
c001cbe8:	83 ec 0c             	sub    esp,0xc
c001cbeb:	83 ec 0c             	sub    esp,0xc
c001cbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf2:	e8 cd ff ff ff       	call   c001cbc4 <PCI::~PCI()>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	83 ec 08             	sub    esp,0x8
c001cbfd:	68 5c 01 00 00       	push   0x15c
c001cc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc06:	e8 1b de fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	83 c4 0c             	add    esp,0xc
c001cc11:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cc12 <IDE::~IDE()>:
c001cc12:	83 ec 0c             	sub    esp,0xc
c001cc15:	ba 38 f3 01 c0       	mov    edx,0xc001f338
c001cc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1e:	89 10                	mov    DWORD PTR [eax],edx
c001cc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc24:	83 ec 0c             	sub    esp,0xc
c001cc27:	50                   	push   eax
c001cc28:	e8 ab f6 fe ff       	call   c000c2d8 <HardDiskController::~HardDiskController()>
c001cc2d:	83 c4 10             	add    esp,0x10
c001cc30:	90                   	nop
c001cc31:	83 c4 0c             	add    esp,0xc
c001cc34:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc36 <IDE::~IDE()>:
c001cc36:	83 ec 0c             	sub    esp,0xc
c001cc39:	83 ec 0c             	sub    esp,0xc
c001cc3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc40:	e8 cd ff ff ff       	call   c001cc12 <IDE::~IDE()>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	83 ec 08             	sub    esp,0x8
c001cc4b:	68 70 02 00 00       	push   0x270
c001cc50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc54:	e8 cd dd fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	83 c4 0c             	add    esp,0xc
c001cc5f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc60 <SATABus::~SATABus()>:
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	ba 88 f3 01 c0       	mov    edx,0xc001f388
c001cc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6c:	89 10                	mov    DWORD PTR [eax],edx
c001cc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc72:	83 ec 0c             	sub    esp,0xc
c001cc75:	50                   	push   eax
c001cc76:	e8 5d f6 fe ff       	call   c000c2d8 <HardDiskController::~HardDiskController()>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	90                   	nop
c001cc7f:	83 c4 0c             	add    esp,0xc
c001cc82:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc84 <SATABus::~SATABus()>:
c001cc84:	83 ec 0c             	sub    esp,0xc
c001cc87:	83 ec 0c             	sub    esp,0xc
c001cc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8e:	e8 cd ff ff ff       	call   c001cc60 <SATABus::~SATABus()>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	83 ec 08             	sub    esp,0x8
c001cc99:	68 64 01 00 00       	push   0x164
c001cc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca2:	e8 7f dd fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	83 c4 0c             	add    esp,0xc
c001ccad:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ccae <ATA::~ATA()>:
c001ccae:	83 ec 0c             	sub    esp,0xc
c001ccb1:	ba c8 f3 01 c0       	mov    edx,0xc001f3c8
c001ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccba:	89 10                	mov    DWORD PTR [eax],edx
c001ccbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc0:	83 ec 0c             	sub    esp,0xc
c001ccc3:	50                   	push   eax
c001ccc4:	e8 f1 f6 fe ff       	call   c000c3ba <PhysicalDisk::~PhysicalDisk()>
c001ccc9:	83 c4 10             	add    esp,0x10
c001cccc:	90                   	nop
c001cccd:	83 c4 0c             	add    esp,0xc
c001ccd0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ccd2 <ATA::~ATA()>:
c001ccd2:	83 ec 0c             	sub    esp,0xc
c001ccd5:	83 ec 0c             	sub    esp,0xc
c001ccd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccdc:	e8 cd ff ff ff       	call   c001ccae <ATA::~ATA()>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	83 ec 08             	sub    esp,0x8
c001cce7:	68 7c 01 00 00       	push   0x17c
c001ccec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf0:	e8 31 dd fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	83 c4 0c             	add    esp,0xc
c001ccfb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ccfc <ATAPI::~ATAPI()>:
c001ccfc:	83 ec 0c             	sub    esp,0xc
c001ccff:	ba 10 f4 01 c0       	mov    edx,0xc001f410
c001cd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd08:	89 10                	mov    DWORD PTR [eax],edx
c001cd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0e:	83 ec 0c             	sub    esp,0xc
c001cd11:	50                   	push   eax
c001cd12:	e8 a3 f6 fe ff       	call   c000c3ba <PhysicalDisk::~PhysicalDisk()>
c001cd17:	83 c4 10             	add    esp,0x10
c001cd1a:	90                   	nop
c001cd1b:	83 c4 0c             	add    esp,0xc
c001cd1e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd20 <ATAPI::~ATAPI()>:
c001cd20:	83 ec 0c             	sub    esp,0xc
c001cd23:	83 ec 0c             	sub    esp,0xc
c001cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2a:	e8 cd ff ff ff       	call   c001ccfc <ATAPI::~ATAPI()>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	83 ec 08             	sub    esp,0x8
c001cd35:	68 84 01 00 00       	push   0x184
c001cd3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd3e:	e8 e3 dc fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	83 c4 0c             	add    esp,0xc
c001cd49:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd4a <SATA::~SATA()>:
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	ba c4 f4 01 c0       	mov    edx,0xc001f4c4
c001cd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd56:	89 10                	mov    DWORD PTR [eax],edx
c001cd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	50                   	push   eax
c001cd60:	e8 55 f6 fe ff       	call   c000c3ba <PhysicalDisk::~PhysicalDisk()>
c001cd65:	83 c4 10             	add    esp,0x10
c001cd68:	90                   	nop
c001cd69:	83 c4 0c             	add    esp,0xc
c001cd6c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd6e <SATA::~SATA()>:
c001cd6e:	83 ec 0c             	sub    esp,0xc
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd78:	e8 cd ff ff ff       	call   c001cd4a <SATA::~SATA()>
c001cd7d:	83 c4 10             	add    esp,0x10
c001cd80:	83 ec 08             	sub    esp,0x8
c001cd83:	68 7c 01 00 00       	push   0x17c
c001cd88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd8c:	e8 95 dc fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001cd91:	83 c4 10             	add    esp,0x10
c001cd94:	83 c4 0c             	add    esp,0xc
c001cd97:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd98 <SATAPI::~SATAPI()>:
c001cd98:	83 ec 0c             	sub    esp,0xc
c001cd9b:	ba 54 f6 01 c0       	mov    edx,0xc001f654
c001cda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda4:	89 10                	mov    DWORD PTR [eax],edx
c001cda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdaa:	83 ec 0c             	sub    esp,0xc
c001cdad:	50                   	push   eax
c001cdae:	e8 07 f6 fe ff       	call   c000c3ba <PhysicalDisk::~PhysicalDisk()>
c001cdb3:	83 c4 10             	add    esp,0x10
c001cdb6:	90                   	nop
c001cdb7:	83 c4 0c             	add    esp,0xc
c001cdba:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cdbc <SATAPI::~SATAPI()>:
c001cdbc:	83 ec 0c             	sub    esp,0xc
c001cdbf:	83 ec 0c             	sub    esp,0xc
c001cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc6:	e8 cd ff ff ff       	call   c001cd98 <SATAPI::~SATAPI()>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	83 ec 08             	sub    esp,0x8
c001cdd1:	68 84 01 00 00       	push   0x184
c001cdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdda:	e8 47 dc fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001cddf:	83 c4 10             	add    esp,0x10
c001cde2:	83 c4 0c             	add    esp,0xc
c001cde5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cde6 <IOAPIC::~IOAPIC()>:
c001cde6:	83 ec 0c             	sub    esp,0xc
c001cde9:	ba 94 f6 01 c0       	mov    edx,0xc001f694
c001cdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf2:	89 10                	mov    DWORD PTR [eax],edx
c001cdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf8:	83 ec 0c             	sub    esp,0xc
c001cdfb:	50                   	push   eax
c001cdfc:	e8 5d f0 fe ff       	call   c000be5e <Device::~Device()>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	90                   	nop
c001ce05:	83 c4 0c             	add    esp,0xc
c001ce08:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ce0a <IOAPIC::~IOAPIC()>:
c001ce0a:	83 ec 0c             	sub    esp,0xc
c001ce0d:	83 ec 0c             	sub    esp,0xc
c001ce10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce14:	e8 cd ff ff ff       	call   c001cde6 <IOAPIC::~IOAPIC()>
c001ce19:	83 c4 10             	add    esp,0x10
c001ce1c:	83 ec 08             	sub    esp,0x8
c001ce1f:	68 68 01 00 00       	push   0x168
c001ce24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce28:	e8 f9 db fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001ce2d:	83 c4 10             	add    esp,0x10
c001ce30:	83 c4 0c             	add    esp,0xc
c001ce33:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce34 <APICTimer::~APICTimer()>:
c001ce34:	83 ec 0c             	sub    esp,0xc
c001ce37:	ba dc f6 01 c0       	mov    edx,0xc001f6dc
c001ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce40:	89 10                	mov    DWORD PTR [eax],edx
c001ce42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce46:	83 ec 0c             	sub    esp,0xc
c001ce49:	50                   	push   eax
c001ce4a:	e8 0d 09 ff ff       	call   c000d75c <Timer::~Timer()>
c001ce4f:	83 c4 10             	add    esp,0x10
c001ce52:	90                   	nop
c001ce53:	83 c4 0c             	add    esp,0xc
c001ce56:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce58 <APICTimer::~APICTimer()>:
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	83 ec 0c             	sub    esp,0xc
c001ce5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce62:	e8 cd ff ff ff       	call   c001ce34 <APICTimer::~APICTimer()>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	83 ec 08             	sub    esp,0x8
c001ce6d:	68 60 01 00 00       	push   0x160
c001ce72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce76:	e8 ab db fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001ce7b:	83 c4 10             	add    esp,0x10
c001ce7e:	83 c4 0c             	add    esp,0xc
c001ce81:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce84 <PIT::~PIT()>:
c001ce84:	83 ec 0c             	sub    esp,0xc
c001ce87:	ba 2c f7 01 c0       	mov    edx,0xc001f72c
c001ce8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce90:	89 10                	mov    DWORD PTR [eax],edx
c001ce92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	50                   	push   eax
c001ce9a:	e8 bd 08 ff ff       	call   c000d75c <Timer::~Timer()>
c001ce9f:	83 c4 10             	add    esp,0x10
c001cea2:	90                   	nop
c001cea3:	83 c4 0c             	add    esp,0xc
c001cea6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cea8 <PIT::~PIT()>:
c001cea8:	83 ec 0c             	sub    esp,0xc
c001ceab:	83 ec 0c             	sub    esp,0xc
c001ceae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceb2:	e8 cd ff ff ff       	call   c001ce84 <PIT::~PIT()>
c001ceb7:	83 c4 10             	add    esp,0x10
c001ceba:	83 ec 08             	sub    esp,0x8
c001cebd:	68 5c 01 00 00       	push   0x15c
c001cec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cec6:	e8 5b db fe ff       	call   c000aa26 <operator delete(void*, unsigned long)>
c001cecb:	83 c4 10             	add    esp,0x10
c001cece:	83 c4 0c             	add    esp,0xc
c001ced1:	c3                   	ret    
